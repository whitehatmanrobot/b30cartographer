default domain name */
#define RES_STAYOPEN    0x0100      /* Keep TCP socket open */
#define RES_DNSRCH      0x0200      /* search up local domain tree */

#define RES_DEFAULT (RES_RECURSE | RES_DEFNAMES | RES_DNSRCH)


//
// Resolver function prototypes
//

int
dn_expand(
    IN  unsigned char *msg,
    IN  unsigned char *eomorig,
    IN  unsigned char *comp_dn,
    OUT unsigned char *exp_dn,
    IN  int            length
    );

int
dn_comp(
    IN      unsigned char  *exp_dn,
    OUT     unsigned char  *comp_dn,
    IN      int             length,
    IN      unsigned char **dnptrs,     OPTIONAL
    IN OUT  unsigned char **lastdnptr   OPTIONAL
    );

int
res_init(
    void
    );

int
res_send(
    IN  char *buf,
    IN  int buflen,
    OUT char *answer,
    IN  int anslen
    );

int
res_query(
    IN  char          *name,      /* domain name */
    IN  int            class,     /* class of query */
    IN  int            type,      /* type of query */
    OUT unsigned char *answer,    /* buffer to put answer */
    IN  int            anslen     /* size of answer buffer */
    );

int
res_search(
    IN  char           *name,     /* domain name */
    IN  int            class,     /* class of query */
    IN  int            type,      /* type of query */
    OUT unsigned char *answer,    /* buffer to put answer */
    IN  int            anslen     /* size of answer */
    );

int
res_mkquery(
    IN  int          op,             // opcode of query
    IN  char        *dname,          // domain name
    IN  int          class,                  // class of query
    IN  int          type,               // type of query
    IN  char        *data,    OPTIONAL       // resource record data
    IN  int          datalen, OPTIONAL       // length of data
    IN  struct rrec *newrr,   OPTIONAL       // new rr for modify or append
    OUT char        *buf,            // buffer to put query
    IN  int          buflen                  // size of buffer
    );

#endif    // _RESOLV_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sockets\arpa\telnet.h ===
/*++

Copyright (c) 1991 Microsoft Corporation

Module Name:

  telnet.h

Abstract:

  User telnet, remote login utility - includes.  Taken directly from Spider's
  sources

Author:

  Sam Patton (sampa)   July 26, 1991

Revision History:

  when        who     what
  ----        ---     ----
  7-26-91    sampa    initial version

--*/

/******************************************************************
 *
 *  SpiderTCP Socket Utilities
 *
 *  Copyright 1987  Spider Systems Limited
 *
 *  TELNET.H
 *
 *    User telnet, remote login utility - includes
 *
 *
 ******************************************************************/

/*
 *       /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/arpa/0/s.telnet.h
 *      @(#)telnet.h    1.2
 *
 *      Last delta created      20:46:00 6/24/88
 *      This file extracted     08:53:50 7/10/91
 *
 *      Modifications:
 *
 *      PR 01/12/87     Integrated into Admin System II, all
 *                      projects
 */

#ifndef TELNET_INCLUDED
#define TELNET_INCLUDED

/*
 * Definitions for the TELNET protocol.
 */
#define IAC     255             /* interpret as command: */
#define DONT    254             /* you are not to use option */
#define DO      253             /* please, you use option */
#define WONT    252             /* I won't use option */
#define WILL    251             /* I will use option */
#define SB      250             /* interpret as subnegotiation */
#define GA      249             /* you may reverse the line */
#define EL      248             /* erase the current line */
#define EC      247             /* erase the current character */
#define AYT     246             /* are you there */
#define AO      245             /* abort output--but let prog finish */
#define IP      244             /* interrupt process--permanently */
#define BREAK   243             /* break */
#define DM      242             /* data mark--for connect. cleaning */
#define NOP     241             /* nop */
#define SE      240             /* end sub negotiation */

#define SYNCH   242             /* for telfunc calls */

/* Telnet options - Names have been truncated to be unique in 7 chars */


#define TO_BINARY       0       /* 8-bit data path */
#define TO_ECHO         1       /* echo */
#define TO_RCP          2       /* prepare to reconnect */
#define TO_SGA          3       /* suppress go ahead */
#define TO_NAMS         4       /* approximate message size */
#define TO_STATUS       5       /* give status */
#define TO_TM           6       /* timing mark */
#define TO_RCTE         7       /* remote controlled transmission and echo */
#define TO_NL           8       /* negotiate about output line width */
#define TO_NP           9       /* negotiate about output page size */
#define TO_NCRD         10      /* negotiate about CR disposition */
#define TO_NHTS         11      /* negotiate about horizontal tabstops */
#define TO_NHTD         12      /* negotiate about horizontal tab disposition */
#define TO_NFFD         13      /* negotiate about formfeed disposition */
#define TO_NVTS         14      /* negotiate about vertical tab stops */
#define TO_NVTD         15      /* negotiate about vertical tab disposition */
#define TO_NLFD         16      /* negotiate about output LF disposition */
#define TO_XASCII       17      /* extended ascic character set */
#define TO_LOGOUT       18      /* force logout */
#define TO_BM           19      /* byte macro */
#define TO_DET          20      /* data entry terminal */
#define TO_SUPDUP       21      /* supdup protocol */
#define TO_TERM_TYPE    24      /* terminal type */
#define TO_EXOPL        255     /* extended-options-list */

/* Define (real) long names to be the shorter ones */

#define TELOPT_BINARY   TO_BINARY
#define TELOPT_ECHO     TO_ECHO
#define TELOPT_RCP      TO_RCP
#define TELOPT_SGA      TO_SGA
#define TELOPT_NAMS     TO_NAMS
#define TELOPT_STATUS   TO_STATUS
#define TELOPT_TM       TO_TM
#define TELOPT_RCTE     TO_RCTE
#define TELOPT_NAOL     TO_NL
#define TELOPT_NAOP     TO_NP
#define TELOPT_NAOCRD   TO_NCRD
#define TELOPT_NAOHTS   TO_NHTS
#define TELOPT_NAOHTD   TO_NHTD
#define TELOPT_NAOFFD   TO_NFFD
#define TELOPT_NAOVTS   TO_NVTS
#define TELOPT_NAOVTD   TO_NVTD
#define TELOPT_NAOLFD   TO_NLFD
#define TELOPT_XASCII   TO_XASCII
#define TELOPT_LOGOUT   TO_LOGOUT
#define TELOPT_BM       TO_BM
#define TELOPT_DET      TO_DET
#define TELOPT_SUPDUP   TO_SUPDUP
#define TELOPT_EXOPL    TO_EXOPL

#ifdef TELCMDS
char *telcmds[] = {
        "SE", "NOP", "DMARK", "BRK", "IP", "AO", "AYT", "EC",
        "EL", "GA", "SB", "WILL", "WONT", "DO", "DONT", "IAC",
};
#endif

#ifdef TELOPTS
char *telopts[] = {
        "BINARY", "ECHO", "RCP", "SUPPRESS GO AHEAD", "NAME",
        "STATUS", "TIMING MARK", "RCTE", "NAOL", "NAOP",
        "NAOCRD", "NAOHTS", "NAOHTD", "NAOFFD", "NAOVTS",
        "NAOVTD", "NAOLFD", "EXTEND ASCII", "LOGOUT", "BYTE MACRO",
        "DATA ENTRY TERMINAL", "SUPDUP"
};
#endif

#endif  //TELNET_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sockets\sys\socket.h ===
/*++

Copyright (c) 1991 Microsoft Corporation

Module Name:

  socket.h

Abstract:

  contains types and #defines for sockets.

Author:

  Sam Patton (sampa)   July 26, 1991

Revision History:

  when        who     what
  ----        ---     ----
  7-26-91    sampa    initial version

--*/

/******************************************************************
 *
 *  SpiderTCP System Include Files
 *
 *  Copyright 1987  Spider Systems Limited
 *
 *  SOCKET.H
 *
 *    Definitions related to sockets:
 *    types, address families, options.
 *
 *
 ******************************************************************/


#ifndef SYS_SOCKET_INCLUDED
#define SYS_SOCKET_INCLUDED
/*
 * Types
 */
#define SOCK_STREAM     1               /* stream socket */
#define SOCK_DGRAM      2               /* datagram socket */
#define SOCK_RAW        3               /* raw-protocol interface */
#define SOCK_RDM        4               /* reliably-delivered message */
#define SOCK_SEQPACKET  5               /* sequenced packet stream */

/*
 * Option flags per-socket.
 */
#define SO_DEBUG        0x01            /* turn on debugging info recording */
#define SO_ACCEPTCONN   0x02            /* socket has had listen() */
#define SO_REUSEADDR    0x04            /* allow local address reuse */
#define SO_KEEPALIVE    0x08            /* keep connections alive */
#define SO_DONTROUTE    0x10            /* just use interface addresses */
#define SO_BROADCAST    0x20            /* permit sending of broadcast msgs */
#define SO_USELOOPBACK  0x40            /* bypass hardware when possible */
#define SO_LINGER       0x80            /* linger on close if data present */
#define SO_RDWR         0x100           /* User read/write for datagram sockets */
#define SO_NODELAY      0x200           /* Forward data expediently */
#define SO_URGENT       0x400           /* Notify urgent data */

#ifdef TESTOPT
#define SO_TESTOPT      0x800           /* option for testing internals */
#endif
#ifdef UNDEF
 /*
  * I don't think we use these?? NCF
  */

/*
 * Additional options, not kept in so_options.
 */
#define SO_SNDBUF       0x1001          /* send buffer size */
#define SO_RCVBUF       0x1002          /* receive buffer size */
#define SO_SNDLOWAT     0x1003          /* send low-water mark */
#define SO_RCVLOWAT     0x1004          /* receive low-water mark */
#define SO_SNDTIMEO     0x1005          /* send timeout */
#define SO_RCVTIMEO     0x1006          /* receive timeout */
#endif

/*
 * Structure used for manipulating linger option.
 */
struct  linger {
        int     l_onoff;                /* option on/off */
        int     l_linger;               /* linger time */
};

/*
 * Level number for (get/set)sockopt() to apply to socket itself.
 */
#define SOL_SOCKET      0xffff          /* options for socket level */

/*
 * Address families.
 */
#define AF_UNSPEC       0               /* unspecified */
#define AF_UNIX         1               /* local to host (pipes, portals) */
#define AF_INET         2               /* internetwork: UDP, TCP, etc. */
#define AF_NS           3               /* XNS -- not implemented */
#define AF_IMPLINK      4               /* IMP link layer -- not implemented */
#define AF_NETBIOS      5               /* NetBios, unique to NT */
#define AF_LOOPBACK     6               /* for testing only */

#ifdef ROUTED
#define AF_MAX          6               /* must be > 2 for ROUTED */
#else
#define AF_MAX          6
#endif

/*
 * Structure used by kernel to store most
 * addresses.
 */
struct sockaddr {
        unsigned short  sa_family;      /* address family */
        char            sa_data[14];    /* up to 14 bytes of direct address */
};

/*
 * Structure used by kernel to pass protocol
 * information in raw sockets.
 */
struct sockproto {
        unsigned short  sp_family;              /* address family */
        unsigned short  sp_protocol;            /* protocol */
};

/*
 * Protocol families, same as address families for now.
 */
#define PF_UNSPEC       AF_UNSPEC
#define PF_UNIX         AF_UNIX
#define PF_INET         AF_INET

#define PF_MAX          2

/*
 * Maximum queue length specifiable by listen.
 */
#define SOMAXCONN       5

#define MSG_OOB         0x1             /* process out-of-band data */
#define MSG_DONTROUTE   0x4             /* send without using routing tables */
#ifdef UNDEF
#define MSG_PEEK        0x2             /* peek at incoming message */
#endif

#define OOB_PEND        0x08            /* Urgent data pending */

#define MSG_MAXIOVLEN   16


#endif  //SYS_SOCKET_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sockets\arpa\nameser.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    nameser.h

Abstract:

    Definitions for the DNS resolver and nameserver.

Author:

    Mike Massa (mikemas)           Jan 31, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-31-92     created

Notes:

--*/

/******************************************************************
 *
 *  SpiderTCP BIND
 *
 *  Copyright 1990  Spider Systems Limited
 *
 *  NAMESER.H
 *
 ******************************************************************/

/*
 *	 /usr/projects/tcp/SCCS.rel3/rel/src/include/arpa/0/s.nameser.h
 *	@(#)nameser.h	5.3
 *
 *	Last delta created	14:06:04 3/4/91
 *	This file extracted	11:19:28 3/8/91
 *
 *	Modifications:
 *
 *		GSS	20 Jul 90	New File
 */

/*
 * Copyright (c) 1983, 1989 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that: (1) source distributions retain this entire copyright
 * notice and comment, and (2) distributions including binaries display
 * the following acknowledgement:  ``This product includes software
 * developed by the University of California, Berkeley and its contributors''
 * in the documentation or other materials provided with the distribution
 * and in all advertising materials mentioning features or use of this
 * software. Neither the name of the University nor the names of its
 * contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	@(#)nameser.h	5.24 (Berkeley) 6/1/90
 */

#ifndef _NAMESER_INCLUDED
#define _NAMESER_INCLUDED


/*
 * Define constants based on rfc883
 */
#define PACKETSZ	512		/* maximum packet size */
#define MAXDNAME	256		/* maximum domain name */
#define MAXCDNAME	255		/* maximum compressed domain name */
#define MAXLABEL	63		/* maximum length of domain label */
	/* Number of bytes of fixed size data in query structure */
#define QFIXEDSZ	4
	/* number of bytes of fixed size data in resource record */
#define RRFIXEDSZ	10

/*
 * Internet nameserver port number
 */
#define NAMESERVER_PORT	53

/*
 * Currently defined opcodes
 */
#define QUERY		0x0		/* standard query */
#define IQUERY		0x1		/* inverse query */
#define STATUS		0x2		/* nameserver status query */
/*#define xxx		0x3		/* 0x3 reserved */
	/* non standard */
#define UPDATEA		0x9		/* add resource record */
#define UPDATED		0xa		/* delete a specific resource record */
#define UPDATEDA	0xb		/* delete all nemed resource record */
#define UPDATEM		0xc		/* modify a specific resource record */
#define UPDATEMA	0xd		/* modify all named resource record */

#define ZONEINIT	0xe		/* initial zone transfer */
#define ZONEREF		0xf		/* incremental zone referesh */

/*
 * Currently defined response codes
 */
#ifndef NOERROR
#define NOERROR		0		/* no error */
#endif
#define FORMERR		1		/* format error */
#define SERVFAIL	2		/* server failure */
#define NXDOMAIN	3		/* non existent domain */
#define NOTIMP		4		/* not implemented */
#define REFUSED		5		/* query refused */
	/* non standard */
#define NOCHANGE	0xf		/* update failed to change db */

/*
 * Type values for resources and queries
 */
#define T_A	        1		/* host address */
#define T_NS		2		/* authoritative server */
#define T_MD		3		/* mail destination */
#define T_MF		4		/* mail forwarder */
#define T_CNAME		5		/* connonical name */
#define T_SOA		6		/* start of authority zone */
#define T_MB		7		/* mailbox domain name */
#define T_MG		8		/* mail group member */
#define T_MR		9		/* mail rename name */
#define T_NULL		10		/* null resource record */
#define T_WKS		11		/* well known service */
#define T_PTR		12		/* domain name pointer */
#define T_HINFO		13		/* host information */
#define T_MINFO		14		/* mailbox information */
#define T_MX		15		/* mail routing information */
#define T_TXT		16		/* text strings */
#define T_AFSDB		18		/* AFS database servers */
#define T_ATMA 		34		/* ATM endpoint address */
	/* non standard */
#define T_UINFO		100		/* user (finger) information */
#define T_UID		101		/* user ID */
#define T_GID		102		/* group ID */
#define T_UNSPEC	103		/* Unspecified format (binary data) */
	/* Query type values which do not appear in resource records */
#define T_AXFR		252		/* transfer zone of authority */
#define T_MAILB		253		/* transfer mailbox records */
#define T_MAILA		254		/* transfer mail agent records */
#define T_ANY		255		/* wildcard match */

/*
 * Values for class field
 */

#define C_IN		1		/* the arpa internet */
#define C_CHAOS		3		/* for chaos net at MIT */
#define C_HS		4		/* for Hesiod name server at MIT */
	/* Query class values which do not appear in resource records */
#define C_ANY		255		/* wildcard match */

/*
 * Status return codes for T_UNSPEC conversion routines
 */
#define CONV_SUCCESS 0
#define CONV_OVERFLOW -1
#define CONV_BADFMT -2
#define CONV_BADCKSUM -3
#define CONV_BADBUFLEN -4

#ifndef BYTE_ORDER
#define	LITTLE_ENDIAN	1234	/* least-significant byte first (vax) */
#define	BIG_ENDIAN	4321	/* most-significant byte first (IBM, net) */
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in long (pdp) */

#if defined(vax) || defined(ns32000) || defined(sun386) || defined(MIPSEL) || \
    defined(BIT_ZERO_ON_RIGHT)
#define BYTE_ORDER	LITTLE_ENDIAN

#endif
#if defined(sel) || defined(pyr) || defined(mc68000) || defined(sparc) || \
    defined(is68k) || defined(tahoe) || defined(ibm032) || defined(ibm370) || \
    defined(MIPSEB) || defined (BIT_ZERO_ON_LEFT)
#define BYTE_ORDER	BIG_ENDIAN
#endif
#ifndef BYTE_ORDER		/* still not defined */
#if defined(u3b2) || defined(m68k)
#define BYTE_ORDER	BIG_ENDIAN
#endif
#if defined(i286) || defined(i386) || defined(_MIPS_) || defined(_ALPHA_) || defined(_PPC_) || defined(_IA64_)
#define BYTE_ORDER	LITTLE_ENDIAN
#endif
#endif /* ~BYTE_ORDER */
#endif /* BYTE_ORDER */

#ifndef BYTE_ORDER
	/* you must determine what the correct bit order is for your compiler */
	UNDEFINED_BIT_ORDER;
#endif
/*
 * Structure for query header, the order of the fields is machine and
 * compiler dependent, in our case, the bits within a byte are assignd
 * least significant first, while the order of transmition is most
 * significant first.  This requires a somewhat confusing rearrangement.
 */

typedef struct {
	unsigned short	id;		/* query identification number */
#if BYTE_ORDER == BIG_ENDIAN
			/* fields in third byte */
	unsigned char	qr:1;		/* response flag */
	unsigned char	opcode:4;	/* purpose of message */
	unsigned char	aa:1;		/* authoritive answer */
	unsigned char	tc:1;		/* truncated message */
	unsigned char	rd:1;		/* recursion desired */
			/* fields in fourth byte */
	unsigned char	ra:1;		/* recursion available */
	unsigned char	pr:1;		/* primary server required (non standard) */
	unsigned char	unused:2;	/* unused bits */
	unsigned char	rcode:4;	/* response code */
#endif
#if BYTE_ORDER == LITTLE_ENDIAN || BYTE_ORDER == PDP_ENDIAN
			/* fields in third byte */
	unsigned char	rd:1;		/* recursion desired */
	unsigned char	tc:1;		/* truncated message */
	unsigned char	aa:1;		/* authoritive answer */
	unsigned char	opcode:4;	/* purpose of message */
	unsigned char	qr:1;		/* response flag */
			/* fields in fourth byte */
	unsigned char	rcode:4;	/* response code */
	unsigned char	unused:2;	/* unused bits */
	unsigned char	pr:1;		/* primary server required (non standard) */
	unsigned char	ra:1;		/* recursion available */
#endif
			/* remaining bytes */
	unsigned short	qdcount;	/* number of question entries */
	unsigned short	ancount;	/* number of answer entries */
	unsigned short	nscount;	/* number of authority entries */
	unsigned short	arcount;	/* number of resource entries */
} HEADER;

/*
 * Defines for handling compressed domain names
 */
#define INDIR_MASK	0xc0

/*
 * Structure for passing resource records around.
 */
struct rrec {
	short	        r_zone;			/* zone number */
	short	        r_class;		/* class number */
	short	        r_type;			/* type number */
	unsigned long	r_ttl;			/* time to live */
	int	        r_size;			/* size of data area */
	char	       *r_data;		        /* pointer to data */
};

extern	unsigned short	_getshort();
extern	unsigned long	_getlong();

/*
 * Inline versions of get/put short/long.
 * Pointer is advanced; we assume that both arguments
 * are lvalues and will already be in registers.
 * cp MUST be unsigned char *.
 */
#define GETSHORT(s, cp) { \
	(s) = *(cp)++ << 8; \
	(s) |= *(cp)++; \
}

#define GETLONG(l, cp) { \
	(l) = *(cp)++ << 8; \
	(l) |= *(cp)++; (l) <<= 8; \
	(l) |= *(cp)++; (l) <<= 8; \
	(l) |= *(cp)++; \
}


#define PUTSHORT(s, cp) { \
	*(cp)++ = (s) >> 8; \
	*(cp)++ = (s); \
}

/*
 * Warning: PUTLONG destroys its first argument.
 */
#define PUTLONG(l, cp) { \
	(cp)[3] = l; \
	(cp)[2] = (l >>= 8); \
	(cp)[1] = (l >>= 8); \
	(cp)[0] = l >> 8; \
	(cp) += sizeof(unsigned long); \
}

#endif  // _NAMESER_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sockets\sys\winsock.h ===
/*++

Copyright (c) 1991 Microsoft Corporation

Module Name:

  winsock.h

Abstract:

	Types, prototypes and definitions for Win32 sockets.

Author:

  	Sam Patton (sampa)   September 11, 1991

Revision History:

  when        	who      what
  ----        	---      ----
   9-11-91      sampa    initial version
  11-21-91      mikemas  introduced socket type definitions, moved prototypes
                            into socket.h

--*/

#ifndef WINSOCK_INCLUDED
#define WINSOCK_INCLUDED


// Windows includes
#include <windows.h>


//
// Windows-specific defintions
//
#define INVALID_SOCKET_HANDLE  INVALID_HANDLE_VALUE
#define SOCKET_HANDLE          HANDLE


//
// common sockets include file
//
#include <sockets\sys\socket.h>


//
// Prototypes for all exported socket functions
//

SOCKET_HANDLE
accept(
    IN SOCKET_HANDLE,              //socket to accept on
    OUT struct sockaddr *,         //peer address
    OUT int *);                    //size of peer address

int
bind(
    IN SOCKET_HANDLE,              //socket to bind
    IN struct sockaddr *,          //address to bind to
    IN int);                       //size of address

int
connect(
    IN SOCKET_HANDLE,              //socket to connect from
    IN struct sockaddr *,          //address to connect to
    IN int);                       //size of address

int
listen(
    IN SOCKET_HANDLE,              //socket to listen with
    IN int);                       //length of listen queue

int
getpeername(
    IN SOCKET_HANDLE,              //connected socket to get peer of
    OUT struct sockaddr *,         //buffer to put peer address into
    OUT int *);                    //length of buffer

int
getsockname(
    IN SOCKET_HANDLE,              //socket to get the address of
    OUT struct sockaddr *,         //buffer to put my address into
    OUT int *);                    //length of buffer

int
recv(
    IN SOCKET_HANDLE,              //socket to receive with
    IN char *,                     //buffer to receive into
    IN int,                        //size of buffer
    IN int);                       //receive flags

int
recvfrom(
    IN SOCKET_HANDLE,              //socket to receive with
    OUT char *,                    //buffer to receive into
    IN int,                        //size of buffer
    IN int,                        //receive flags
    OUT struct sockaddr *,         //address received from
    OUT int *);                    //size of address

int
send(
    IN SOCKET_HANDLE,              //socket to send from
    IN char *,                     //buffer to send
    IN int,                        //size of buffer
    IN int);                       //send flags

int
sendto(
    IN SOCKET_HANDLE,              //socket to send from
    IN char *,                     //buffer to send
    IN int,                        //size of buffer
    IN int,                        //send flags
    IN struct sockaddr *,          //address to send to
    IN int);                       //size of address

SOCKET_HANDLE
socket(
    IN int,                         //address family
    IN int,                         //socket type
    IN int);                        //protocol

int
so_recv(
    IN SOCKET_HANDLE,               //socket to receive with
    OUT char *,                     //buffer to receive into
    IN int,                         //size of buffer
    OUT int *);                     //receive flags

int
setsockopt(
	IN SOCKET_HANDLE,
	int,
	int,
	char *,
	int);

int
getsockopt(
	IN SOCKET_HANDLE,
	int,
	int,
	char *,
	int *);

int
shutdown(
	IN SOCKET_HANDLE,
	IN int);

	
//
// Host name control
//
	
int
gethostname(
    OUT char *name,
    IN int namelen
    );

int
sethostname (
    IN char *name,
    IN int   namelen
    );


//
//  Remote execution utilities
//

SOCKET_HANDLE
rcmd(
    IN OUT char         **ahost,
    IN unsigned short     inport,
    IN char              *locuser,
    IN char              *remuser,
    IN char              *cmd,
    IN OUT SOCKET_HANDLE        *fd2p      OPTIONAL
    );

SOCKET_HANDLE
rresvport(
    IN OUT unsigned short *port
    );

SOCKET_HANDLE
rexec(
    IN  char          **ahost,
    IN  unsigned short  rport,
    IN  char           *name,
    IN  char           *pass,
    IN  char           *cmd,
    OUT SOCKET_HANDLE         *fd2p      OPTIONAL
    );


//
//  Resolver error return utilities
//

DWORD
GetLastHError(
    VOID
    );

VOID
SetLastHError(
    DWORD ErrCode
    );


#endif //WINSOCK_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\stropts.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    stropts.h

Abstract:

    This module defines the STREAMS ioctl message interface.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/*
 * Streams ioctl message interface
 *
 * @(#)stropts.h	1.19 (Spider) 91/11/27
 */

#ifndef _SYS_STROPTS_
#define _SYS_STROPTS_

#ifndef _NTDDSTRM_
#include <ntddstrm.h>
#endif


/*
 * Read options
 */

#define RNORM	0x00			/* Normal - bytes stream */
#define RMSGD	0x01			/* Message, non-discard mode */
#define RMSGN	0x02			/* Message, discard mode */

#define RMASK	0x0F			/* mask for read options */

/*
 * Protocol read options
 */

#define	RPROTNORM	0x00		/* Fail reads with EBADMSG */
#define RPROTDIS	0x10		/* Discard proto part */
#define RPROTDAT	0x20		/* Turn proto part into data */

#define RPROTMASK	0xF0		/* mask for protocol read options */

/*
 * Values for I_ATMARK argument
 */

#define	ANYMARK		0		/* check if message is marked */
#define	LASTMARK	1		/* check if last one marked */

/*
 * Value for I_SWROPT argument
 */

#define	NOSNDZERO	0		/* disallow zero length sends */
#define	SNDZERO		1		/* permit zero length sends */

/*
 * STREAMS ioctl defines
 */

#define STR             ('S'<<8)
#define I_NREAD         (STR|1)
#define I_PUSH          (STR|2)
#define I_POP           (STR|3)
#define I_LOOK          (STR|4)
#define I_FLUSH         (STR|5)
#define I_SRDOPT        (STR|6)
#define I_GRDOPT        (STR|7)
#define I_STR           (STR|8)
#define I_SETSIG        (STR|9)
#define I_GETSIG        (STR|10)
#define I_FIND          (STR|11)
#define I_LINK          (STR|12)
#define I_UNLINK        (STR|13)
#define I_PEEK          (STR|15)
#define I_FDINSERT      (STR|16)
#define I_SENDFD        (STR|17)
#define I_RECVFD        (STR|18)
#ifdef SVR2
#define I_GETMSG        (STR|19)
#define I_PUTMSG        (STR|20)
#define I_GETID		(STR|21)
#define I_POLL		(STR|22)
#endif /*SVR2*/
#define	I_SWROPT	(STR|23)
#define	I_GWROPT	(STR|24)
#define	I_LIST		(STR|25)
#define	I_ATMARK	(STR|26)
#define	I_SETCLTIME	(STR|27)
#define	I_GETCLTIME	(STR|28)
#define	I_PLINK		(STR|29)
#define	I_PUNLINK	(STR|30)
#define I_DEBUG         (STR|31)
#define	I_CLOSE		(STR|32)


#define MUXID_ALL	-1

/*
 * Structure for I_FDINSERT ioctl
 */

struct strfdinsert {
        struct strbuf ctlbuf;
        struct strbuf databuf;
        long          flags;
        HANDLE        fildes;
        int           offset;
};


/*
 * Structures for I_DEBUG ioctl
 */
typedef enum _str_trace_options {
    MSG_TRACE_PRINT =      0x00000001,
    MSG_TRACE_FLUSH =      0x00000002,
    MSG_TRACE_ON =         0x00000004,
    MSG_TRACE_OFF =        0x00000008,
    POOL_TRACE_PRINT =     0x00000010,
    POOL_TRACE_FLUSH =     0x00000020,
    POOL_TRACE_ON =        0x00000040,
    POOL_TRACE_OFF =       0x00000080,
    POOL_FAIL_ON =         0x00000100,
    POOL_FAIL_OFF =        0x00000200,
    LOCK_TRACE_ON =        0x00000400,
    LOCK_TRACE_OFF =       0x00000800,
    QUEUE_PRINT =          0x00001000,
    BUFFER_PRINT =         0x00002000,
    POOL_LOGGING_ON =      0x00004000,
    POOL_LOGGING_OFF =     0x00008000
} str_trace_options;


struct strdebug {
    ULONG  trace_cmd;
};


/*
 * stream I_PEEK ioctl format
 */

struct strpeek {
	struct strbuf ctlbuf;
	struct strbuf databuf;
	long          flags;
};

/*
 * receive file descriptor structure
 */
struct strrecvfd {
#ifdef INKERNEL
        union {
                struct file *fp;
                int fd;
        } f;
#else
        int fd;
#endif
        unsigned short uid;
        unsigned short gid;
        char fill[8];
};

#define FMNAMESZ	8

struct str_mlist {
	char l_name[FMNAMESZ+1];
};

struct str_list {
	int sl_nmods;
	struct str_mlist *sl_modlist;
};

/*
 * get/putmsg flags
 */

#define RS_HIPRI	1	/* High priority message */

#define MORECTL		1
#define MOREDATA	2


/*
 * M_SETSIG flags
 */

#define S_INPUT		1
#define S_HIPRI		2
#define S_OUTPUT	4
#define S_MSG		8
#define S_ERROR		16
#define S_HANGUP	32

/*
 * Flags for MFLUSH messages
 */
#define FLUSHW		01	/* flush downstream */
#define FLUSHR		02	/* flush upstream */
#define FLUSHRW		(FLUSHR | FLUSHW)

#endif /* _SYS_STROPTS_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sockets\netinet\in.h ===
/*++

Copyright (c) 1991 Microsoft Corporation

Module Name:

  in.h

Abstract:

  A version of the BSD 4.2 file <netinet/in.h> for NT tcp

Author:

  Sam Patton (sampa)   July 26, 1991

Revision History:

  when        who     what
  ----        ---     ----
  7-26-91    sampa    initial version

--*/

/******************************************************************
 *
 *  SpiderTCP Application Include Files
 *
 *  Spider Systems Limited
 *
 *  IN.H
 *
 *    A version of the BSD 4.2 file <netinet/in.h>
 *    for SpiderTCP
 *
 *
 ******************************************************************/

/*
 *       /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/netinet/0/s.in.h
 *      @(#)in.h        1.31
 *
 *      Last delta created      13:33:59 8/27/90
 *      This file extracted     08:53:51 7/10/91
 *
 *      Modifications:
 *
 */

#ifndef IN_INCLUDED
#define IN_INCLUDED


#ifdef PROJ8
/*
 *      BYTESWAP should be undef'ed if the machine's byte order
 *      is the same as network byte order - if it is the reverse
 *      it should be set to 1.
 */
#define BYTESWAP        1
#endif
#ifdef PROJ11
/*
 *      BYTESWAP should be undef'ed if the machine's byte order
 *      is the same as network byte order - if it is the reverse
 *      it should be set to 1.
 */
#define BYTESWAP        1
#endif

#ifdef PROJ9
/*
 *      BYTESWAP should be undef'ed if the machine's byte order
 *      is the same as network byte order - if it is the reverse
 *      it should be set to 1.
 */
#if m68k
#undef  BYTESWAP
#define EMBED           1
#else
#define BYTESWAP        1
#undef EMBED
#endif
#endif


#ifndef BYTESWAP
#    ifdef i386
#        define BYTESWAP 1
#    endif
#    ifdef MIPS
#        define BYTESWAP 1
#    endif
#    ifdef ALPHA
#        define BYTESWAP 1
#    endif
#    ifdef PPC
#        define BYTESWAP 1
#    endif
#    ifdef IA64
#        define BYTESWAP 1
#    endif
#endif


#define TLI_TCP         "/dev/tcp"      /* or else */
#define TLI_UDP         "/dev/udp"      /* or else */

/*
 * Protocols
 */
#define IPPROTO_IP            256               /* IP (for socket options etc) */
#define IPPROTO_ICMP            1               /* control message protocol */
#define IPPROTO_GGP             2               /* gateway^2 (deprecated) */
#define IPPROTO_TCP             6               /* tcp */
#define IPPROTO_EGP             8               /* exterior gateway protocol */
#define IPPROTO_PUP             12              /* pup */
#define IPPROTO_UDP             17              /* user datagram protocol */

#define IPPROTO_RAW             255             /* raw IP packet */
#define IPPROTO_MAX             256


#define ICMP_PROT       IPPROTO_ICMP
#define GWAY_PROT       3
#define TCP_PROT        IPPROTO_TCP
#define UDP_PROT        IPPROTO_UDP


#include <sys\snet\ip_proto.h>

#if 0
/*
 * define structure for DARPA internet address
 * usually use "longs" to access but sometimes need to split into
 * components
 */

typedef union {
                char  typea[4]; /* 4 x 8 bit version */
                short typeb[2];  /* 2 x 16 bit */
                long  typec;     /* 1 x 32 bit */
} IN_ADDRESS;
#endif


/*
 * Port/socket numbers: network standard functions
 */
#define IPPORT_ECHO             7
#define IPPORT_DISCARD          9
#define IPPORT_SYSTAT           11
#define IPPORT_DAYTIME          13
#define IPPORT_NETSTAT          15
#define IPPORT_FTP              21
#define IPPORT_TELNET           23
#define IPPORT_SMTP             25
#define IPPORT_TIMESERVER       37
#define IPPORT_NAMESERVER       42
#define IPPORT_WHOIS            43
#define IPPORT_MTP              57

/*
 * Port/socket numbers: host specific functions
 */
#define IPPORT_TFTP             69
#define IPPORT_RJE              77
#define IPPORT_FINGER           79
#define IPPORT_TTYLINK          87
#define IPPORT_SUPDUP           95

#define IPPORT_BIFFUDP          512
#define IPPORT_EXECSERVER       512
#define IPPORT_LOGINSERVER      513
#define IPPORT_WHOSERVER        513
#define IPPORT_CMDSERVER        514

/*
 * Ports < IPPORT_RESERVED are reserved for
 * privileged processes (e.g. root).
 */
#define IPPORT_RESERVED         1024

/*
 * Link numbers
 */
#define IMPLINK_IP              155
#define IMPLINK_LOWEXPER        156
#define IMPLINK_HIGHEXPER       158


/*
 * Internet address
 */
struct in_addr {
        union {
                struct { unsigned char s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { unsigned short s_w1,s_w2; } S_un_w;
                unsigned long S_addr;
        } S_un;
#define s_addr  S_un.S_addr     /* can be used for most tcp & ip code */
#define s_host  S_un.S_un_b.s_b2        /* host on imp */
#define s_net   S_un.S_un_b.s_b1        /* network */
#define s_imp   S_un.S_un_w.s_w2        /* imp */
#define s_impno S_un.S_un_b.s_b4        /* imp # */
#define s_lh    S_un.S_un_b.s_b3        /* logical host */
};

/*
 * Definitions of bits in internet address integers.
 */
#define IN_CLASSA(i)            ((((long)(i))&0x80000000)==0)
#define IN_CLASSA_NET           0xff000000
#define IN_CLASSA_NSHIFT        24
#define IN_CLASSA_HOST          0x00ffffff
#define IN_CLASSA_MAX           128

#define IN_CLASSB(i)            ((((long)(i))&0xc0000000)==0x80000000)
#define IN_CLASSB_NET           0xffff0000
#define IN_CLASSB_NSHIFT        16
#define IN_CLASSB_HOST          0x0000ffff
#define IN_CLASSB_MAX           65536

#define IN_CLASSC(i)            ((((long)(i))&0xe0000000)==0xc0000000)
#define IN_CLASSC_NET           0xffffff00
#define IN_CLASSC_NSHIFT        8
#define IN_CLASSC_HOST          0x000000ff

#define INADDR_ANY              0x00000000
#define INADDR_BROADCAST        0xffffffff

/*
 * Socket address, internet style.
 */
struct sockaddr_in {
        short   		sin_family;
        unsigned short  sin_port;
        struct  in_addr sin_addr;
        char    		sin_zero[8];
};

/* Length of a SOCKADDR or SOCKADDR_IN structure */
#define SOCAD_LEN 16

#ifdef BYTESWAP

#define htons(x)        ((((x) >> 8) & 0x00FF) | (((x) << 8) & 0xFF00))

//
//BUGBUG - we need to investigate this
//

#define	FUTURE	1
#ifdef FUTURE
/*
 * this macro should be used if its faster than the function
 * - measure it on the target machine
 */
#ifndef i386
#define htonl(x)        ((((x) >> 24) & 0x000000FFL) | \
                        (((x) >>  8) & 0x0000FF00L) | \
                        (((x) <<  8) & 0x00FF0000L) | \
                        (((x) << 24) & 0xFF000000L))
#else

__inline long
htonl(long x)
{
	return((((x) >> 24) & 0x000000FFL) |
                        (((x) >>  8) & 0x0000FF00L) |
                        (((x) <<  8) & 0x00FF0000L) |
                        (((x) << 24) & 0xFF000000L));
}

#endif /* i386 */
#else
extern long htonl();
#endif
#undef	FUTURE

#define ntohs(x)        htons(x)
#define ntohl(x)        htonl(x)

#define MASKA   0x000000FFL
#define MASKB   0x0000FFFFL
#define MASKC   0x00FFFFFFL
#define CLSHFT  5               /* Make C generate hyper-optimized case */

#else
/*
 * Macros for number representation conversion.
 */
#define ntohl(x)        (x)
#define ntohs(x)        (x)
#define htonl(x)        (x)
#define htons(x)        (x)

#define MASKA   0xFF000000L
#define MASKB   0xFFFF0000L
#define MASKC   0xFFFFFF00L
#define CLSHFT  29
#endif

#define CLA0    0               /* It takes the same arg; you mask it off, */
#define CLA1    1               /* shift, and then do a case statment with */
#define CLA2    2               /* some code having more than one label. */
#define CLA3    3               /* Values for class A */
#define CLB0    4
#define CLB1    5               /* B */
#define CLC     6               /* C */
#define CLI     7               /* Illegal */

#define BROADCAST 0x00000000L

#define CASTA   0x00FFFFFFL
#define CASTB   0x0000FFFFL
#define CASTC   0x000000FFL


/******************************************************************
 *
 * Type Codes for Ethernet packets
 *
 ******************************************************************/

#define TY_ETHER 1
#ifndef TYPE_HACK
#define TY_PUP          0x0200
#define TY_IDP          0x0600
#define TY_IP           0x0800
#define TY_X25          0x0805
#define TY_ARP          0x0806
#define TY_RARP         0x8035
#ifndef NOTRAILER
#define TY_TRAIL        0x1000
#define TY_TRAIL_LO     0x1001
#define TY_TRAIL_HI     0x1002
#endif
#define TY_ECHO         0x9000
#else /*TYPE_HACK*/
#define TY_PUP          0x0200
#define TY_IDP          0x0600
#define TY_IP           0x0807          /* modified */
#define TY_X25          0x0805
#define TY_ARP          0x0808          /* modified */
#ifndef NOTRAILER
#define TY_TRAIL        0x2000          /* modified */
#define TY_TRAIL_LO     0x2001          /* modified */
#define TY_TRAIL_HI     0x2002          /* modified */
#endif
#define TY_ECHO         0x9000
#endif /*TYPE_HACK*/

/******************************************************************
 *
 * Type Codes for Arcnet packets
 *
 ******************************************************************/

#define ARCNET_TY_IP   0xd4
#define ARCNET_TY_ARP  0xd5
#define ARCNET_TY_RARP 0xd6

/*
 * LOOPBACK Address - in host and network byte order
 */
#define LOOPBACK 0x7F000001L
#ifdef BYTESWAP
#define NLOOPBACK 0x0100007FL
#else
#define NLOOPBACK 0x7F000001L
#endif

/*
 * interface flags
 */
#define IFF_UP                  0x01
#define IFF_BROADCAST           0x02
#define IFF_LOOPBACK            0x04
#define IFF_POINTOPOINT         0x08
#define IFF_FORWARDBROADCAST    0x10
#define IFF_NOKEEPALIVE         0x20
#define IFF_SLOWLINK            0x40


/*
 * IP Options
 */

#define IPO_TTL         103
#define IPO_TOS         104
#define IPO_OPTS        105
#define IPO_RDOPTION    106
#define IPO_RDROUTE     IPO_RDOPTION
#define IPO_OPTCOUNT    107
#define IPO_RRCOUNT     IPO_OPTCOUNT


/*
 * IP Option values
 */

#define OPT_SECURITY    130
#define OPT_LSRR        131
#define OPT_SSRR        137
#define OPT_RR            7
#define OPT_STRID       136
#define OPT_TIMESTAMP    68

/*
 * Default Time to Live
 */

#define IHTTL   60

/*
 * Maximum number of hops stored in a recorded route packet
 */

#define TCP_RR_MAX      16

#define MAXOPTLEN 256

#ifndef GENERICE
/*
 * errors generated
 */
#define EFRGSZ  1
#define EDLTYPE 2
#define EPRIM   3
#define EBUF    4
#define EMSG    5
#endif /*~GENERICE*/

#endif  //IN_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sockets\sys\psxsock.h ===
/*++

Copyright (c) 1991 Microsoft Corporation

Module Name:

  psxsock.h

Abstract:

	Types, prototypes and definitions for Win32 sockets.

Author:

  	Sam Patton (sampa)   September 11, 1991

Revision History:

  when        	who      what
  ----        	---      ----
  11-21-91      mikemas  intitial version - cloned from winsock.h

--*/

#ifndef PSXSOCK_INCLUDED
#define PSXSOCK_INCLUDED

//
// POSIX includes
//
// #include <posix.h>


//
// POSIX-specific defintions
//
#define INVALID_SOCKET_HANDLE  ((int) -1)
#define SOCKET_HANDLE          int


//
// common sockets include file
//
#include <sys\socket.h>


//
// Prototypes for all exported socket functions
//

SOCKET_HANDLE
accept(
    IN SOCKET_HANDLE,              //socket to accept on
    OUT struct sockaddr *,         //peer address
    OUT int *);                    //size of peer address

int
bind(
    IN SOCKET_HANDLE,              //socket to bind
    IN struct sockaddr *,          //address to bind to
    IN int);                       //size of address

int
connect(
    IN SOCKET_HANDLE,              //socket to connect from
    IN struct sockaddr *,          //address to connect to
    IN int);                       //size of address

int
listen(
    IN SOCKET_HANDLE,              //socket to listen with
    IN int);                       //length of listen queue

int
getpeername(
    IN SOCKET_HANDLE,              //connected socket to get peer of
    OUT struct sockaddr *,         //buffer to put peer address into
    OUT int *);                    //length of buffer

int
getsockname(
    IN SOCKET_HANDLE,              //socket to get the address of
    OUT struct sockaddr *,         //buffer to put my address into
    OUT int *);                    //length of buffer


int
poll(
    IN OUT struct pollfd *,
    IN unsigned int,
    IN int);

int
recv(
    IN SOCKET_HANDLE,              //socket to receive with
    IN char *,                     //buffer to receive into
    IN int,                        //size of buffer
    IN int);                       //receive flags

int
recvfrom(
    IN SOCKET_HANDLE,              //socket to receive with
    OUT char *,                    //buffer to receive into
    IN int,                        //size of buffer
    IN int,                        //receive flags
    OUT struct sockaddr *,         //address received from
    OUT int *);                    //size of address

int
send(
    IN SOCKET_HANDLE,              //socket to send from
    IN char *,                     //buffer to send
    IN int,                        //size of buffer
    IN int);                       //send flags

int
sendto(
    IN SOCKET_HANDLE,              //socket to send from
    IN char *,                     //buffer to send
    IN int,                        //size of buffer
    IN int,                        //send flags
    IN struct sockaddr *,          //address to send to
    IN int);                       //size of address

SOCKET_HANDLE
socket(
    IN int,                         //address family
    IN int,                         //socket type
    IN int);                        //protocol

int
so_recv(
    IN SOCKET_HANDLE,               //socket to receive with
    OUT char *,                     //buffer to receive into
    IN int,                         //size of buffer
    OUT int *);                     //receive flags

int
setsockopt(
	IN SOCKET_HANDLE,
	int,
	int,
	char *,
	int);

int
getsockopt(
	IN SOCKET_HANDLE,
	int,
	int,
	char *,
	int *);

int
shutdown(
	IN SOCKET_HANDLE,
	IN int);

	
//
// Host name control
//
	
int
gethostname(
    OUT char *name,
    IN int namelen
    );

int
sethostname (
    IN char *name,
    IN int   namelen
    );


//
//  Remote execution utilities
//

SOCKET_HANDLE
rcmd(
    IN OUT char         **ahost,
    IN unsigned short     inport,
    IN char              *locuser,
    IN char              *remuser,
    IN char              *cmd,
    IN OUT SOCKET_HANDLE        *fd2p      OPTIONAL
    );

SOCKET_HANDLE
rresvport(
    IN OUT unsigned short *port
    );

SOCKET_HANDLE
rexec(
    IN  char          **ahost,
    IN  unsigned short  rport,
    IN  char           *name,
    IN  char           *pass,
    IN  char           *cmd,
    OUT SOCKET_HANDLE         *fd2p      OPTIONAL
    );


//
//  Resolver error return utilities
//

DWORD
GetLastHError(
    VOID
    );

VOID
SetLastHError(
    DWORD ErrCode
    );


#endif //PSXSOCK_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\poll.h ===
/*++

Copyright (c) 1991 Microsoft Corporation

Module Name:

  poll.h

Abstract:

  Contains #defines, types, and macros for poll

Author:

  Sam Patton (sampa)   July 26, 1991

Revision History:

--*/

#ifndef SYS_POLL_INCLUDED
#define SYS_POLL_INCLUDED

/*
 * Structure of file descriptor/event pairs supplied in
 * the poll arrays.
 */
struct pollfd {
#ifndef _POSIX_SOURCE
        HANDLE fd;                      /* file handle to poll */
#else
        int   fd;                       /* file desc to poll */
#endif
        short events;                   /* events of interest on fd */
        short revents;                  /* events that occurred on fd */
};

/*
 * Testable select events
 */
#define POLLIN          01              /* fd is readable */
#define POLLPRI         02              /* priority info at fd */
#define POLLOUT         04              /* fd is writeable (won't block) */
#define POLLMSG         0100            /* M_SIG or M_PCSIG arrived */

/*
 * Non-testable poll events (may not be specified in events field,
 * but may be returned in revents field).
 */
#define POLLERR         010             /* fd has error condition */
#define POLLHUP         020             /* fd has been hung up on */
#define POLLNVAL        040             /* invalid pollfd entry */

/*
 * Number of pollfd entries to read in at a time in poll.
 * The larger the value the better the performance, up to the
 * maximum number of open files allowed.  Large numbers will
 * use excessive amounts of kernel stack space.
 */
#define NPOLLFILE       20


/*
 * Poll function prototype
 *
 */

int
poll(
    IN OUT struct pollfd *,
    IN unsigned int,
    IN int);


#endif  //SYS_POLL_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\adp_ctrl.h ===
/*
 *	 /redknee10/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.adp_control.h
 *	@(#)adp_control.h	1.1
 *
 *	Last delta created	09:32:52 11/13/91
 *	This file extracted	09:26:04 3/18/92
 *
 *	Modifications:
 *	
 *		RAE	13 Nov 1991	New File
 */

#define ADP_SETSNID (('A'<<8) | 1)	/* set ADP snid */

struct adp_snioc {
	uint8	adp_snid;
	uint32	adp_index;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\arp_ctrl.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    arp_ctrl.h

Abstract:

    This file defines the user-level IOCTL interface to the ARP driver.

Author:

    Mike Massa (mikemas)           Jan 18, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-18-92     created

Notes:

--*/

/******************************************************************
 *
 *  SpiderTCP ARP Interface Primitives
 *
 *  Copyright 1988  Spider Systems Limited
 *
 *  arp_control.h
 *
 *  ARP Streams ioctl primitives for SpiderTCP
 *
 ******************************************************************/

/*
 *       /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.arp_control.h
 *      @(#)arp_control.h       1.5
 *
 *      Last delta created      19:19:24 11/1/91
 *      This file extracted     16:49:13 12/23/91
 *
 *      Modifications:
 *
 *
 */

#ifndef _SYS_SNET_ARP_CTRL_INCLUDED
#define _SYS_SNET_ARP_CTRL_INCLUDED


#define MAXHWLEN        6               /* max size of a hardware address */
#define MAXANAMLEN      64              /* max size of adaptername */



/*
 * M_IOCTL types
 */
#define ARP_INS         (('A'<<8) | 1)  /* put arp entry into table     */
#define ARP_DEL         (('A'<<8) | 2)  /* delete entry from table      */
#define ARP_GET         (('A'<<8) | 3)  /* return table entry           */
#define ARP_MGET        (('A'<<8) | 4)  /* return all table entries     */
#define ARP_TYPE        (('A'<<8) | 5)  /* cause a DL_TYPE transfer     */

/*
 * IOCTL structure definitions
 */

#ifdef COMPILE_UP_TCPIP

/*
 * Uniprocessor stack-specific definitions
 */

#define LONGLIFE 1      /* entry is permanent */
#define ARP_PENDING  2 /* ARP request pending */

struct arp_ins {
        long in_addr;
        char dl_add[6];
        short life;     /* lifetime in minutes; LONGLIFE for permanent */
};

struct arp_get {
        long in_addr;
        char dl_add[6];
        int  life;
        int  flag;
};

#else /* COMPILE_UP_TCPIP */

/*
 * Multiprocessor stack-specific definitions
 */

struct arp_ins {
        long in_addr;
        char hw_len;
        char dl_add[MAXHWLEN];
        time_t expiry;             /* relative expiration time in seconds */
};


struct arp_get {
        long in_addr;
        char hw_len;
        short hardware_type;
        char dl_add[MAXHWLEN];
        time_t expiry;            /* relative expiration time in seconds */
};

#endif /* COMPILE_UP_TCPIP */


struct arp_del {
        long in_addr;
};


struct arp_mget {
        long network;
        int num;
};


/*
 * IOCTL structure
 */
struct arp_req {
        int prim_type;
        union req {
                struct arp_ins arp_ins;
                struct arp_del arp_del;
                struct arp_get arp_get;
                struct arp_mget arp_mget;
        } req;
};

typedef struct arp_type {
    short   trailers;               /* are trailers used? */
    char    aname[MAXANAMLEN];      /* name of adapter, used by snmp */
} ARP_TYPES;

#define MAX_EXPIRY      0xFFFFFFFF      /* expiry time for permanent entries */
#define TIME_TIL_REUSE 15 /* time (secs) until entry reused */

#endif // _SYS_SNET_ARP_CTRL_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\bsd_type.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    bsd_type.h.h

Abstract:

    This module contains definitions for BSD compatibility for
    STREAMS drivers.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/*************************************************************************
 *
 *  SpiderTCP/SNMP
 *
 *  Copyright 1990  Spider Systems Limited
 *
 *  BSD_TYPES.H
 *
 *  some #defines for BSD compatibility
 *
 *
 *************************************************************************/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.bsd_types.h
 *	@(#)bsd_types.h	1.3
 *
 *	Last delta created	11:54:01 10/16/90
 *	This file extracted	08:53:46 7/10/91
 *
 *	Modifications:
 *
 *	GSS 01/03/90	put in Pbrain
 */

#ifndef _SYS_SNET_BSD_TYPE_
#define _SYS_SNET_BSD_TYPE_


#ifndef u_char
#define u_char	unsigned char
#define u_short unsigned short
#define u_long 	unsigned long
#define u_int 	unsigned int
#endif


/*
 * Select uses bit masks of file descriptors in integers.
 * These macros manipulate such bit fields (the filesystem macros use chars).
 * FD_SETSIZE may be defined by the user, but the default here
 * should be >= NOFILE (param.h). In the current implementation it should
 * not exceed 32 (sizeof int).
 */
#ifndef	FD_SETSIZE
#define	FD_SETSIZE	32
#endif

/* number of bits in a byte */
#define NBBY 8

typedef int	fd_mask;
#define NFDBITS	(sizeof(fd_mask) * NBBY)	/* bits per mask */
#ifndef howmany
#define	howmany(x, y)	(((x)+((y)-1))/(y))
#endif

typedef	struct fd_set {
 	fd_mask	fds_bits[howmany(FD_SETSIZE, NFDBITS)];
} fd_set;


#define	FD_SET(n, p)	((p)->fds_bits[(n)/NFDBITS] |= (1 << ((n) % NFDBITS)))
#define	FD_CLR(n, p)	((p)->fds_bits[(n)/NFDBITS] &= ~(1 << ((n) % NFDBITS)))
#define	FD_ISSET(n, p)	((p)->fds_bits[(n)/NFDBITS] & (1 << ((n) % NFDBITS)))
#define FD_ZERO(p)	bzero((char *)(p), sizeof(*(p)))

#endif /* _SYS_SNET_BSD_TYPE_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\uio.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    uio.h

Abstract:

    I/O structure definitions for compatibility with BSD.

Author:

    Mike Massa (mikemas)           Jan 31, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-31-92     created

Notes:

--*/

/******************************************************************
 *
 *  Spider BSD Compatibility
 *
 *  Copyright 1990  Spider Systems Limited
 *
 *  UIO.H
 *
 ******************************************************************/

/*
 *       /usr/projects/tcp/SCCS.rel3/rel/src/include/bsd/sys/0/s.uio.h
 *      @(#)uio.h       5.3
 *
 *      Last delta created      14:41:47 3/4/91
 *      This file extracted     11:24:29 3/8/91
 *
 *      Modifications:
 *
 *              GSS     19 Jun 90       New File
 */

/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 *
 *      @(#)uio.h       7.1 (Berkeley) 6/4/86
 */

#ifndef _UIO_
#define _UIO_

typedef long                   daddr_t;
typedef char FAR *             caddr_t;

struct iovec {
        caddr_t iov_base;
        int     iov_len;
};

struct uio {
        struct  iovec *uio_iov;
        int     uio_iovcnt;
        int     uio_offset;
        int     uio_segflg;
        int     uio_resid;
};

enum    uio_rw { UIO_READ, UIO_WRITE };

/*
 * Segment flag values (should be enum).
 */
#define UIO_USERSPACE   0               /* from user data space */
#define UIO_SYSSPACE    1               /* from system space */
#define UIO_USERISPACE  2               /* from user I space */
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\eth_prot.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    eth_prot.h

Abstract:

    Definitions for the SNDIS upper protocol interface.

Author:

    Mike Massa (mikemas)           Jan 31, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-31-92     created

Notes:

--*/

/******************************************************************
 *
 *  SpiderTCP Interface Primitives
 *
 *  Copyright (c) 1988  Spider Systems Limited
 *
 *  This Source Code is furnished under Licence, and may not be
 *  copied or distributed without express written agreement.
 *
 *  All rights reserved.
 *
 *  Written by 		Nick Felisiak, Ian Heavens, Peter Reid,
 *			Gavin Shearer, Mark Valentine
 *
 *  ETH_PROTO.H
 *
 *  Ethernet Streams proto primitives for TCP/IP on V.3 Streams
 *
 ******************************************************************/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.eth_proto.h
 *	@(#)eth_proto.h	1.9
 *
 *	Last delta created	11:03:25 10/29/90
 *	This file extracted	08:53:41 7/10/91
 */

#ifdef GENERICE

/*
 *  Primitive type values.
 */

#define DL_TYPE		ETH_TYPE	/* ethernet registration (old style) */
#define ETH_TYPE	'R'		/* ethernet registration */
#define ETH_PARAMS	'P'		/* ethernet parameters */
/*efine ETH_PACKET	'p'		/* ethernet packet */
#define ETH_TX		't'		/* packet for transmission */
#define ETH_RX		'r'		/* incoming packet */

/*
 *  Ethernet Type registration.
 */

#define dl_type eth_type
#define dl_lwb lwb
#define dl_upb upb
#define dl_ethaddr ethaddr
#define dl_frgsz frgsz
#define S_DL_TYPE S_ETH_TYPE

typedef struct eth_type {
	uint8	prim_type;	/* i.e. ETH_TYPE */
	uint8	aux_type;	/* unused in Ethernet Driver */
	uint16	pad;		/* compatibility with previous interface */
	uint16	lwb;		/* lower bound of type range */
	uint16	upb;		/* upper bound of type range */
	uint8	ethaddr[6];	/* ethernet address */
	uint16	frgsz;		/* max. packet size on net */
} S_ETH_TYPE;

typedef struct eth_params {
	uint8	prim_type;	/* i.e. ETH_PARAMS */
	uint8	aux_type;	/* unused in Ethernet Driver */
	uint16	pad;		/* compatibility with previous interface */
	uint8	ethaddr[6];	/* ethernet address */
	uint16	frgsz;		/* max. packet size on net */
} S_ETH_PARAMS;

/*
 *  Packet header data.
 */

typedef struct eth_packet {
	uint8	prim_type;	/* i.e. ETH_PACKET */
	uint8	aux_type;	/* unused in Ethernet Driver */
	uint16	pad;		/* compatibility with previous interface */
	uint16	eth_type;	/* ethernet type field */
	uint8	eth_src[6];	/* source ethernet address */
	uint8	eth_dst[6];	/* destination ethernet address */
} S_ETH_PACKET;

typedef struct eth_rx {
	uint8	prim_type;	/* i.e. ETH_RX */
	uint8	aux_type;	/* unused in Ethernet Driver */
	uint16	pad;		/* compatibility with previous interface */
	uint16	eth_type;	/* ethernet type field */
	uint8	eth_src[6];	/* source ethernet address */
} S_ETH_RX;

typedef struct eth_tx {
	uint8	prim_type;	/* i.e. ETH_TX */
	uint8	aux_type;	/* unused in Ethernet Driver */
	uint16	pad;		/* compatibility with previous interface */
	uint16	eth_type;	/* ethernet type field */
	uint8	eth_dst[6];	/* destination ethernet address */
} S_ETH_TX;

/*
 *  Generic ethernet protocol primitive
 */

typedef union eth_proto
{
	uint8 type;			/* variant tag */
	struct eth_type etype;		/* if type == ETH_TYPE */
	struct eth_params eparm;	/* if type == ETH_PARAMS */
	struct eth_rx erx;		/* if type == ETH_RX */
	struct eth_tx etx;		/* if type == ETH_TX */
} S_ETH_PROTO;

#else /* GENERICE */

/* type range we want to receive from ethernet */
typedef struct dl_type {
	int prim_type;
	unsigned short dl_lwb;
	unsigned short dl_upb;
} S_DL_TYPE;

/* M_PROTO Message primitives */

#define DL_RX		4	/* arp receives from eth */
#define DL_TYPE		5	/* arp send type field to eth */
#ifdef PROJ4
#define ETH_TX		1	/* packet for transmission */
#define ETH_RX		2	/* incoming packet */
#else
#define ETH_TX		6	/* packet for transmission */
#define ETH_RX		7	/* incoming packet */
#endif

/*
 * M_PROTO message formats
 */
#ifdef EMD
struct eth_tx {
	char	dl_dst[6];
	char	dl_src[6];
	short	dl_type;
};
#else
struct eth_tx {
	int prim_type;
	short dl_type;
	char dl_dst[6];
};
#endif

struct eth_rx {
	int prim_type;
	struct ethmessage *eth_msg;
};


union eth_proto {
	int type;
	struct eth_tx eth_tx;
	struct eth_rx eth_rx;
	struct dl_type dl_type;
};

/*
 * errors generated
 */
#define EFRGSZ	1
#define EDLTYPE 2
#define EPRIM	3
#define EBUF	4
#define EMSG	5

/*
 * arp receives datalink pkt from eth
 */
typedef struct dl_rx {
	int prim_type;
	unsigned short dl_type;
	char dl_src[6];
} S_DL_RX;

#endif /* GENERICE */


#ifdef PROJ4

/*
 * PROJ4 Attachment values
 */
#define A_LAN 9
#define A_IP  20
#define A_UDP 23
#define A_ARP 24

#define ATTACH          13      /* attach to driver */

/*
 * ATTACH struct - for communication with the lower
 * Driver
 */
typedef struct attach {
       int prim_type;
       unsigned short fromid;
       unsigned short toid;
       unsigned int fromvers;
       unsigned int tovers;
       int result;
       unsigned short type_upb0;
       unsigned short type_lwb0;
       unsigned short type_upb1;
       unsigned short type_lwb1;
       unsigned short type_upb2;
       unsigned short type_lwb2;
       unsigned short type_upb3;
       unsigned short type_lwb3;
} S_ATTACH;

#define DATAL_TX	ETH_TX
#define	S_DATAL_TX	struct eth_tx
#define	datal_tx	eth_tx

/*
 * Hardware types
 */

#define	HW_ETHERNET	1
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\inet_var.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    inet_var.h

Abstract:

    This module contains definitions for variable finding functions for
    the Internet MIB. Used by STREAMS drivers.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/*
 *   Copyright (c) 1988  Spider Systems Limited
 *
 *    /usr/users/bridge/sccs/appln/snmp/corecode/s.inet_var.h
 *   @(#)inet_var.h     1.4
 *
 *   Last delta created  10:33:41 12/13/90
 *   This file extracted 19:57:15 12/20/90
 */
/*************************************************************************
 *
 *  SpiderSNMP
 *
 *  Copyright 1989  Spider Systems Limited
 *
 *  INET_VAR.H
 *
 *    Definitions for variable finding functions for the Internet
 *    MIB
 *
 *    Peter Reid     @ Spider Systems Limited
 *    Ted Socolofsky @ Spider Systems Limited
 *
 *************************************************************************/

/*
 *      Modifications:
 *
 *       /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.inet_var.h
 *      @(#)inet_var.h  1.24
 *
 *      Last delta created      12:10:30 1/9/91
 *      This file extracted     08:53:47 7/10/91
 *
 *      PR               1 Jun 89       Built simulator
 *      PR/TS           31 Jun 89       Built remote box simulation
 *      GSS              2 Mar 90       Put in Pbrain
 */


#ifndef _SYS_SNET_INET_VAR_
#define _SYS_SNET_INET_VAR_


#ifndef SPIDER_ROUTER
#ifndef SPIDER_BRIDGE
#ifdef SNMP
#define SPIDER_TCP
#define SYSTEM_MIB
#define IF_MIB2
#define AT_MIB
#define IP_MIB
#define ICMP_MIB
#define TCP_MIB
#define UDP_MIB
#endif /* SNMP */
#endif /* ~SPIDER_BRIDGE */
#endif /* SPIDER_ROUTER */

#ifdef SYSTEM_MIB
#ifndef SHMEM


/*
 * Internet variables
 */
#define SYSDESCRLEN     80

#ifndef SYSOBJLEN
#define SYSOBJLEN       32
#endif

extern char             sysDescr[];
#ifdef SID_T
extern SID_T            sysObjectID[];
#endif

#ifdef DOS_COMPILE
#ifdef SPIDER_PROBE
#define sysUpTime       tod_tick
extern u_long   tod_tick;
#endif /* SPIDER_PROBE */
#endif /* DOS_COMPILE */

#ifndef SPIDER_PROBE
extern int              sysObjectIDLen;
#endif

#endif /* ~SHMEM */

#endif /* SYSTEM_MIB */

#ifdef IF_MIB2

struct mib_interface {
        long    version;                /* version number of the MIB         */
        long    ifNumber;               /* number of interfaces              */
};

#define         IFDESCRLEN      64
#define         IFPHYSADDRLEN   64

struct mib_ifEntry {
        long    version;                /* version number of the MIB         */
        long    ifIndex;                /* index of this interface           */
        char    ifDescr[IFDESCRLEN];    /* English description of interface  */
        long    ifType;                 /* network type of device            */
        long    ifMtu;                  /* size of largest packet in bytes   */
        u_long  ifSpeed;                /* bandwidth in bits/sec             */
        u_char  ifPhysAddress[IFPHYSADDRLEN];   /* interface's address       */
        u_char  PhysAddrLen;            /* length of physAddr                */
        long    ifAdminStatus;          /* desired state of interface        */
        long    ifOperStatus;           /* current operational status        */
        u_long  ifLastChange;           /* sysUpTime when curr state entered */
        u_long  ifInOctets;             /* # octets received on interface    */
        u_long  ifInUcastPkts;          /* # unicast packets delivered       */
        u_long  ifInNUcastPkts;         /* # broadcasts or multicasts        */
        u_long  ifInDiscards;           /* # packets discarded with no error */
        u_long  ifInErrors;             /* # packets containing errors       */
        u_long  ifInUnknownProtos;      /* # packets with unknown protocol   */
        u_long  ifOutOctets;            /* # octets transmittedwn protocol   */
        u_long  ifOutUcastPkts;         /* # unicast packets sent protocol   */
        u_long  ifOutNUcastPkts;        /* # broadcast or multicast pkts     */
        u_long  ifOutDiscards;          /* # packets discarded with no error */
        u_long  ifOutErrors;            /* # pkts discarded with an error    */
        u_long  ifOutQLen;              /* # packets in output queue         */
        u_char  ifSpecificLen;          /* length of object ID */
        u_long  ifSpecific[SYSOBJLEN];  /* object ID of product specific stuf*/
};

#ifndef SPIDER_TCP
#define         MAX_INTERFACES          2
#define         MAXDATA                 630
#endif /* SPIDER_TCP */

#endif /* IF_MIB2 */

#ifdef AT_MIB

#ifdef SPIDER_TCP
#define         ATPHYSADDRLEN   64

#endif
struct mib_atEntry {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        long    atIfIndex;              /* interface on which entry maps     */
#ifdef SPIDER_TCP
        u_char  atPhysAddress[ATPHYSADDRLEN];   /* physical address of destination   */
#else
        u_char  atPhysAddress[IFPHYSADDRLEN];   /* physical address of destination   */
#endif
        u_char  PhysAddressLen;         /* length of atPhysAddress           */
        u_long  atNetAddress;           /* IP address of physical address    */
        long    atType;                 /* Type of Entry */
};
#endif /* AT_MIB */

#ifdef IP_MIB

struct mib_ip {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        long    ipForwarding;           /* 1 if gateway, 2 if host           */
        long    ipDefaultTTL;           /* default TTL for pkts from here    */
        u_long  ipInReceives;           /* # IP packets rcvd from interfaces */
        u_long  ipInHdrErrors;          /* # pkts discarded - header errors  */
        u_long  ipInAddrErrors;         /* # pkts discarded - bad address    */
        u_long  ipForwDatagrams;        /* # pkts forwarded through entity   */
        u_long  ipInUnknownProtos;      /* # local-addr pkts w/unknown proto */
        u_long  ipInDiscards;           /* # error-free packets discarded    */
        u_long  ipInDelivers;           /* # pkts delivered to upper level   */
        u_long  ipOutRequests;          /* # IP pkts originating locally     */
        u_long  ipOutDiscards;          /* # valid output IP pkts dropped    */
        u_long  ipOutNoRoutes;          /* # IP pkts discarded - no route    */
        long    ipReasmTimeout;         /* fragment reassembly time (secs)   */
        u_long  ipReasmReqds;           /* # fragments needing reassembly    */
        u_long  ipReasmOKs;             /* # fragments reassembled           */
        u_long  ipReasmFails;           /* # failures in IP reassembly       */
        u_long  ipFragOKs;              /* # datagrams fragmented here       */
        u_long  ipFragFails;            /* # pkts unable to be fragmented    */
        u_long  ipFragCreates;          /* # IP fragments created here       */
        u_long  ipRoutingDiscards;      /* # IP Routing Discards             */
};

struct mib_ipAddrEntry {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        u_long  ipAdEntAddr;            /* IP address of this entry          */
        long    ipAdEntIfIndex;         /* IF for this entry                 */
        u_long  ipAdEntNetMask;         /* subnet mask of this entry         */
        long    ipAdEntBcastAddr;       /* read the MIB for this one         */
        u_long  ipAdEntReasmMaxSize;    /* and this one */
};

struct mib_ipRouteEntry {
#ifdef SPIDER_TCP
        long    version;        /* version number of the MIB                 */
#endif /* SPIDER_TCP */
        u_long  ipRouteDest;    /* destination IP addr for this route        */
        long    ipRouteIfIndex; /* index of local IF for this route          */
        long    ipRouteMetric1; /* Primary routing metric                    */
        long    ipRouteMetric2; /* Alternate routing metric                  */
        long    ipRouteMetric3; /* Alternate routing metric                  */
        long    ipRouteMetric4; /* Alternate routing metric                  */
        u_long  ipRouteNextHop; /* IP addr of next hop                       */
        long    ipRouteType;    /* Type of this route                        */
        long    ipRouteProto;   /* How this route was learned                */
        long    ipRouteAge;     /* No. of seconds since updating this route  */
        u_long  ipRouteMask;    /* */
        long    ipRouteMetric5; /* Alternate routing metric                  */
        u_char  ipRouteInfoLen; /* length of object ID */
        u_long  ipRouteInfo[SYSOBJLEN];  /* object ID of product specific stuf*/
};

#if 0 /* MIB_II */
#define IPNTOMPHYSADDRLEN       16
struct mib_ipNetToMediaEntry {
        long    ipNtoMIfIndex;          /* interface on which entry maps     */
        u_char  ipNtoMPhysAddress[IPNTOMPHYSADDRLEN];   /* physical address of destination   */
        u_char  NtoMPhysAddressLen;     /* length of atPhysAddress           */
        u_long  ipNtoMNetAddress;       /* IP address of physical address    */
        u_long  ipNtoMMediaType;        /* */
};
#endif /* MIB_II */

#ifndef SPIDER_TCP
#define IPFRAGTTL               15
#define ROUTE_ENTRIES           2
#endif /* SPIDER_TCP */

#endif /* IP_MIB */
#ifdef ICMP_MIB


struct mib_icmp {
#ifdef SPIDER_TCP
        long    version;              /* version number of the MIB          */
#endif /* SPIDER_TCP */
        u_long  icmpInMsgs;           /* Total of ICMP msgs received        */
        u_long  icmpInErrors;         /* Total ICMP msgs rcvd with errors   */
        u_long  icmpInDestUnreachs;   /*                                    */
        u_long  icmpInTimeExcds;      /*                                    */
        u_long  icmpInParmProbs;      /*                                    */
        u_long  icmpInSrcQuenchs;     /*                                    */
        u_long  icmpInRedirects;      /*                                    */
        u_long  icmpInEchos;          /*                                    */
        u_long  icmpInEchoReps;       /*                                    */
        u_long  icmpInTimestamps;     /*                                    */
        u_long  icmpInTimestampReps;  /*                                    */
        u_long  icmpInAddrMasks;      /*                                    */
        u_long  icmpInAddrMaskReps;   /*                                    */
        u_long  icmpOutMsgs;          /*                                    */
        u_long  icmpOutErrors;        /*                                    */
        u_long  icmpOutDestUnreachs;  /*                                    */
        u_long  icmpOutTimeExcds;     /*                                    */
        u_long  icmpOutParmProbs;     /*                                    */
        u_long  icmpOutSrcQuenchs;    /*                                    */
        u_long  icmpOutRedirects;     /*                                    */
        u_long  icmpOutEchos;         /*                                    */
        u_long  icmpOutEchoReps;      /*                                    */
        u_long  icmpOutTimestamps;    /*                                    */
        u_long  icmpOutTimestampReps; /*                                    */
        u_long  icmpOutAddrMasks;     /*                                    */
        u_long  icmpOutAddrMaskReps;  /*                                    */
};

#define ICMP_MAXTYPE            18

#endif /* ICMP_MIB */
#ifdef TCP_MIB

struct mib_tcp {
#ifdef SPIDER_TCP
        long    version;        /* version number of the MIB                 */
#endif /* SPIDER_TCP */
        long    tcpRtoAlgorithm;/* retransmission timeout algorithm          */
        long    tcpRtoMin;      /* minimum retransmission timeout (mS)       */
        long    tcpRtoMax;      /* maximum retransmission timeout (mS)       */
        long    tcpMaxConn;     /* maximum tcp connections possible          */
        u_long  tcpActiveOpens; /* number of SYN-SENT -> CLOSED transitions  */
        u_long  tcpPassiveOpens;/* number of SYN-RCVD -> LISTEN transitions  */
        u_long  tcpAttemptFails;/* (SYNSENT,SYNRCV)->CLOSED, SYN-RCV->LISTEN */
        u_long  tcpEstabResets; /* (ESTABLISHED,CLOSE-WAIT) -> CLOSED        */
        u_long  tcpCurrEstab;   /* number in ESTABLISHED or CLOSE-WAIT state */
        u_long  tcpInSegs;      /* number of segments received               */
        u_long  tcpOutSegs;     /* number of segments sent                   */
        u_long  tcpRetransSegs; /* number of retransmitted segments          */
        u_long  tcpInErrs;      /* # rcved in err */
        u_long  tcpOutRsts;     /* # segs sent with RST flag */
};

struct mib_tcpConnEntry {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        long    tcpConnState;           /* State of this conn                */
        u_long  tcpConnLocalAddress;    /* local IP address for this conn    */
        long    tcpConnLocalPort;       /* local port for this conn          */
        u_long  tcpConnRemAddress;      /* remote IP address for this conn   */
        long    tcpConnRemPort;         /* remote port for this conn         */
};

#endif /* TCP_MIB */
#ifdef UDP_MIB

struct mib_udp {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        u_long  udpInDatagrams;         /* # UDP pkts delivered to users     */
        u_long  udpNoPorts;             /* # UDP pkts to unbound port        */
        u_long  udpInErrors;            /* # UDP pkts unable to be delivered */
        u_long  udpOutDatagrams;        /* # UDP pkts sent from this entity  */
};

struct mib_udpEntry {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        u_long udpLocalAddress;         /* local IP adress */
        u_long udpLocalPort;            /* local port */
};
#endif /* UDP_MIB */
#ifdef EGP_MIB

struct mib_egp {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        u_long  egpInMsgs;      /* No. of EGP msgs received without error    */
        u_long  egpInErrors;    /* No. of EGP msgs received with error       */
        u_long  egpOutMsgs;     /* No. of EGP msgs sent                      */
        u_long  egpOutErrors;   /* No. of EGP TX msgs dropped due to error   */
};

struct mib_egpNeighEntry {
#ifdef SPIDER_TCP
        long    version;                /* version number of the MIB         */
#endif /* SPIDER_TCP */
        long    egpNeighState;  /* local EGP state with entry's neighbor     */
        u_long  egpNeighAddr;   /* IP address of this entry's neighbor       */
};

#endif /* EGP_MIB */

#ifdef SYSTEM_MIB
#define SYS_SERVICE_PHYS        1
#define SYS_SERVICE_DATALINK    2
#define SYS_SERVICE_INTERNET    3
#define SYS_SERVICE_ENDTOEND    4
#define SYS_SERVICE_APPLIC      7
#endif

#ifdef IF_MIB2
#define MIB_IFTYPE_OTHER                    1
#define MIB_IFTYPE_REGULAR1822              2
#define MIB_IFTYPE_HDH1822                  3
#define MIB_IFTYPE_DDNX25                   4
#define MIB_IFTYPE_RFC877X25                5
#define MIB_IFTYPE_ETHERNETCSMACD           6
#define MIB_IFTYPE_ISO88023CSMACD           7
#define MIB_IFTYPE_ISO88024TOKENBUS         8
#define MIB_IFTYPE_ISO88025TOKENRING        9
#define MIB_IFTYPE_ISO88026MAN              10
#define MIB_IFTYPE_STARLAN                  11
#define MIB_IFTYPE_PROTEON10MBIT            12
#define MIB_IFTYPE_PROTEON80MBIT            13
#define MIB_IFTYPE_HYPERCHANNEL             14
#define MIB_IFTYPE_FDDI                     15
#define MIB_IFTYPE_LAPB                     16
#define MIB_IFTYPE_SDLC                     17
#define MIB_IFTYPE_T1CARRIER                18
#define MIB_IFTYPE_CEPT                     19
#define MIB_IFTYPE_BASICISDN                20
#define MIB_IFTYPE_PRIMARYISDN              21
#define MIB_IFTYPE_PROPPNTTOPNTSERIAL       22
#define MIB_IFTYPE_PPP                      23
#define MIB_IFTYPE_SOFTWARELOOPBACK         24
#define MIB_IFTYPE_EON                      25
#define MIB_IFTYPE_ETHERNET3MBIT            26
#define MIB_IFTYPE_NSIP                     27
#define MIB_IFTYPE_SLIP                     28
#define MIB_IFTYPE_ULTRA                    29
#define MIB_IFTYPE_DS3                      30
#define MIB_IFTYPE_SIP                      31
#define MIB_IFTYPE_FRAMERELAY               32


#define MIB_IFMTU_ETH           1514

#define MIB_IFSPEED_ETH         10000000L

#define MIB_PHYADDRLEN_ETH      6

#define MIB_IFSTATUS_UP         1
#define MIB_IFSTATUS_DOWN       2
#define MIB_IFSTATUS_TESTING    3

#endif /* IF_MIB2 */

#define AT_OTHER                1
#define AT_INVALID              2
#define AT_DYNAMIC              3
#define AT_STATIC               4

#ifdef IP_MIB
#define MIB_FORWARD_GATEWAY     1
#define MIB_FORWARD_HOST        2

#define MIB_IPROUTETYPE_OTHER   1
#define MIB_IPROUTETYPE_INVALID 2
#define MIB_IPROUTETYPE_DIRECT  3
#define MIB_IPROUTETYPE_REMOTE  4

#define MIB_IPROUTEPROTO_OTHER      1
#define MIB_IPROUTEPROTO_LOCAL      2
#define MIB_IPROUTEPROTO_NETMGMT    3
#define MIB_IPROUTEPROTO_ICMP       4
#define MIB_IPROUTEPROTO_EGP        5
#define MIB_IPROUTEPROTO_GGP        6
#define MIB_IPROUTEPROTO_HELLO      7
#define MIB_IPROUTEPROTO_RIP        8
#define MIB_IPROUTEPROTO_ISIS       9
#define MIB_IPROUTEPROTO_ESIS       10
#define MIB_IPROUTEPROTO_CISCOIGRP  11
#define MIB_IPROUTEPROTO_BBNSPFIGP  12
#define MIB_IPROUTEPROTO_OIGP       13

#endif /* IP_MIB */
#ifdef TCP_MIB

#define MIB_TCPRTOALG_OTHER     1
#define MIB_TCPRTOALG_CONSTANT  2
#define MIB_TCPRTOALG_RSRE      3
#define MIB_TCPRTOALG_VANJ      4

#define MIB_TCPCONNSTATE_CLOSED         1
#define MIB_TCPCONNSTATE_LISTEN         2
#define MIB_TCPCONNSTATE_SYNSENT        3
#define MIB_TCPCONNSTATE_SYNRECEIVED    4
#define MIB_TCPCONNSTATE_ESTABLISHED    5
#define MIB_TCPCONNSTATE_FINWAIT1       6
#define MIB_TCPCONNSTATE_FINWAIT2       7
#define MIB_TCPCONNSTATE_CLOSEWAIT      8
#define MIB_TCPCONNSTATE_LASTACK        9
#define MIB_TCPCONNSTATE_CLOSING        10
#define MIB_TCPCONNSTATE_TIMEWAIT       11

#endif /* TCP_MIB */
#ifdef EGP_MIB

#define MIB_EGPNEIGHSTATE_IDLE          1
#define MIB_EGPNEIGHSTATE_AQUISITION    2
#define MIB_EGPNEIGHSTATE_DOWN          3
#define MIB_EGPNEIGHSTATE_UP            4
#define MIB_EGPNEIGHSTATE_CEASE         5

#endif /* EGP_MIB */

#endif /* _SYS_SNET_INET_VAR_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\dl_ctrl.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    dl_proto.h

Abstract:

    This module defines some of the data types and manifests for the
    Spider Generic Ethernet Interface.

Author:

    Eric Chin (ericc)           August 9, 1991

Revision History:

    Sam Patton (sampa)          July 31, 1992  merge for snap/token ring

--*/
/*
 *  Spider STREAMS Data Link Interface Primitives
 *
 *  Copyright (c) 1989  Spider Systems Limited
 *
 *  This Source Code is furnished under Licence, and may not be
 *  copied or distributed without express written agreement.
 *
 *  All rights reserved.
 *
 *  Written by Mark Valentine
 *
 *  Made in Scotland.
 *
 *	@(#)dl_control.h	1.6
 *
 *	Last delta created	14:58:43 2/12/92
 *	This file extracted	09:26:06 3/18/92
 *
 *	Modifications:
 *
 *		28 Jan 1992	Modified for datalink version 2
 *
 */

#ifndef DL_CTRL_INCLUDED
#define DL_CTRL_INCLUDED

#include <sys\snet\uint.h>

/*
 *  This defines Version 2 of Spider's STREAMS Data Link protocol.
 *  Its main feature is its ability to cope with hardware addresses
 *  of length not equal to 6.
 */

/*
 *  Data Link ioctl commands.
 *
 *  To determine the version of the protocol in use, use the DATAL_VERSION
 *  command, and assume Version 0 if this fails with EINVAL.  (Yuk.)
 *
 *  The ETH_* commands will work for any current version of the protocol,
 *  but only for Ethernet drivers (hw_type == HW_ETHER).
 *
 *  Hardware types are defined in dl_proto.h.
 */

#define DATAL_STAT	('E'<<8|1)	/* gather data link statistics */
#define DATAL_ZERO	('E'<<8|2)	/* reset data link statistics */
#define DATAL_REGISTER	('E'<<8|3)	/* register data link type range */
#define DATAL_GPARM	('E'<<8|4)	/* determine data link parameters */
#define DATAL_VERSION	('E'<<8|5)	/* interrogate protocol version */
#define DATAL_SET_ADDR	('E'<<8|6)	/* set hardware address */
#define DATAL_DFLT_ADDR	('E'<<8|7)	/* restore default hardware address */
#define DATAL_IBIND     ('D'<<8|1)	/* bind card to stream */

/*
 *  Data Link statistics structure.
 */

struct datal_stat
{
	uint32	dl_tx;		/* packets transmitted */
	uint32	dl_rx;		/* packets received */
	uint32	dl_coll;	/* collisions detected */
	uint32	dl_lost;	/* packets lost */
	uint32	dl_txerr;	/* transmission errors */
	uint32	dl_rxerr;	/* receive errors */
	uint32	dl_pool_quota;	/* receive pool quota */
        uint32  dl_pool_used;	/* receive pool used */
};

struct datal_register
{
	uint8	version;	/* protocol version */
	uint8	hw_type;	/* hardware type */
	uint8	addr_len;	/* hardware address length */
	uint8	align;		/* don't use */
	uint16	lwb;		/* data link type (lower bound) */
	uint16	upb;		/* data link type (upper bound) */
};

struct datal_gparm
{
	uint8	version;	/* protocol version */
	uint8	hw_type;	/* hardware type */
	uint8	addr_len;	/* hardware address length */
	uint8	align;		/* don't use */
	uint16	frgsz;		/* max. packet size on net */
	uint8	addr[1];	/* hardware address (variable length) */
};

struct datal_version
{
	uint8	version;	/* protocol version number */
	uint8	hw_type;	/* hardware type */
};

struct datal_ibind
{
	ULONG	UseRawArcnet;	/* 0 if this open should use Encapsulated */
                                /*   Ethernet over arcnet                 */
                                /* 1 if it should use raw arcnet frames   */
	STRING	adapter_name;	/* adapter device driver string */
	char	buffer[80];	/* buffer to contain the name */
};

#endif //DL_CTRL_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\ipdl_pro.h ===
#ident "@(#)ipdl_proto.h	1.7	3/18/92"

/******************************************************************
 *
 *  SpiderTCP Interface Primitives
 *
 *  Copyright (c) 1988  Spider Systems Limited
 *
 *  This Source Code is furnished under Licence, and may not be
 *  copied or distributed without express written agreement.
 *
 *  All rights reserved.
 *
 *  Written by 		Nick Felisiak, Ian Heavens, Peter Reid,
 *			Gavin Shearer, Mark Valentine
 *
 *  DL_PROTO.H
 *
 *  Datalink Streams proto primitives for TCP/IP on V.3 Streams
 *
 ******************************************************************/

/*
 *	 /redknee10/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.ipdl_proto.h
 *	@(#)ipdl_proto.h	1.7
 *
 *	Last delta created	17:44:27 10/22/91
 *	This file extracted	09:25:54 3/18/92
 *
 *	Modifications:
 *
 */

#define NET_TX		3	/* send ip pkt to sub-net */
#define BROAD_TX	15	/* send ip broadcast pkt to sub-net */
#define SN_FRGSZ	10	/* ip request sub net frag size */
#define IP_NETREG	11	/* ip send sub net addr to sub-net */
#define IP_RX		7	/* ip receives from sub net */
#define ARP_SNADDR	IP_NETREG	/* old, ARP specific defintion */	
#define SNMP_TRAP	1	/* trap info from lower driver */

/*
 * - IP sends data pkt to datalink module for transmission
 */
typedef struct net_tx {
	int prim_type;
	long src_inaddr;
	long dst_inaddr;
	short hdr_cnt;
#ifdef EMD
	char	padding[2];	/* make sizeof(net_tx) >= sizeof(eth_tx) */
#endif
} S_NET_TX;

/*
 * ip receives only primitive type, data unknown to lower layer
 */
typedef struct ip_rx {
	int prim_type;
} S_IP_RX;

union dl_proto {
	int type;
	S_NET_TX net_tx;
};

/*
 * datalink layer registration
 */
typedef struct ip_dl_reg {
	int prim_type;
	long inaddr;
	long subnet_mask;
	short int_flags;	/* flags to be filled in by lower module */
} IP_DL_REG;

/*
 * the old, ARP specific interface definition
 */
#define arp_snaddr	ip_dl_reg
#define S_ARP_SNADDR	IP_DL_REG

/*
 * datalink layer information (received after a IP_DLL_REG sent down)
 */
typedef struct sn_frgsz {
	int prim_type;
	int frgsz;
	int opt_size;
	short int_flags;
        unsigned long link_speed;
        unsigned long receive_buffer_size;
} S_SN_FRGSZ;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\ip_ctrl.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    ip_ctrl.h

Abstract:

    This file contains the user-level STREAMS ioctl interface definitions
    for the IP driver.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/******************************************************************
 *
 *  SpiderTCP Interface Primitives
 *
 *  Copyright (c) 1988  Spider Systems Limited
 *
 *  This Source Code is furnished under Licence, and may not be
 *  copied or distributed without express written agreement.
 *
 *  All rights reserved.
 *
 *  Written by          Nick Felisiak, Ian Heavens, Peter Reid,
 *                      Gavin Shearer, Mark Valentine
 *
 *  IP_CONTROL.H
 *
 *  IP Streams ioctl primitives for TCP/IP on V.3/V.4 Streams
 *
 ******************************************************************/

#ifndef _SYS_SNET_IP_CTRL_
#define _SYS_SNET_IP_CTRL_

#ifndef SYSOBJLEN
#define SYSOBJLEN       32
#endif


#define IP_NET_ADDR     (('I'<<8)+1)    /* IP registration from netd */
#define ICMP_CTRL       (('I'<<8)+2)    /* control ICMP redirects */
#define SET_IP_CTRL     (('I'<<8)+3)    /* set IP control information */
#define GET_IP_CTRL     (('I'<<8)+4)    /* get IP control information */
#ifdef MULTIH
#define ADD_IPNET       IP_NET_ADDR     /* add IP network to this interface */
#define SHOW_IPNET      (('I'<<8)+5)    /* dump IP network information */
#define DEL_IPNET       (('I'<<8)+6)    /* delete IP network from interface */
#define ADD_IPADDR      (('I'<<8)+7)    /* add IP address to this interface */
#define SHOW_IPADDR     (('I'<<8)+8)    /* dump IP address information */
#define DEL_IPADDR      (('I'<<8)+9)    /* delete IP address from interface */
#endif

#define GET_ALL_INTERFACES      1
#define GET_INTERFACE_INFO      2
#ifdef HOSTREQ_MAYBE
#define SET_INTERFACE_INFO      3
#endif
#define GATE_ACCESS             4



/*
 * ** netd registration **
 */

typedef struct net_addr {
    int muxid;
    long inaddr;
    long subnet_mask;
    char forward_bdcst;
    char keepalive;
    short mtu;
    short router_mtu;
    char if_broadcast;
} NET_ADDRS;



/*
 * ** routing cache access **
 */

/*
 * Gateway access structures etc.
 */
struct gate_access {
    char flush;
    char smart;
    short command;
    long dest;
    long gate;
};


/*
 * routing cache access command values (subcodes of GATE_ACCESS)
 */

#define GATE_PRINT 1
#define GATE_ADD 2
#define GATE_DEL 3
#define GATE_CHANGE 4

#define WILD_CARD -1L   /* to indicate that all networks should be acted on */

/*
 * routing cache definitions
 */

#ifdef COMPILE_UP_TCPIP

#define GWAY_TIMEOUT 30

typedef struct gw_hashentry {
    long from;                  /* network */
    long to;                    /* default gateway, if it exists */
    long redirect;              /* ICMP Redirect gateway, if it exists */
    long active_gw;             /* 1 = gateway is active, 0 = not active */
    short count;                /* Counter for timer */
    /*
     * "from" is equivalent to "ipRouteDest",
     * and "to" or "redirect" is equivalent to "ipRouteNextHop"
     */
    long saveProto;             /* saved protocol when doing a redirect */
    long ipRouteIfIndex;        /* index of local IF for this route */
    long ipRouteMetric1;        /* Primary routing metric */
    long ipRouteMetric2;        /* Alternate routing metric */
    long ipRouteMetric3;        /* Alternate routing metric */
    long ipRouteMetric4;        /* Alternate routing metric */
    long ipRouteMetric5;        /* Alternate routing metric */
    long ipRouteType;           /* Type of this route */
    long ipRouteProto;          /* How this route was learned */
    long ipRouteAge;            /* time this route was updated */
    long ipRouteMask;           /* Subnet Mask for Route */
    unsigned char  ipRouteInfoLen; /* length of object ID */
    unsigned long  ipRouteInfo[SYSOBJLEN];  /* object ID of product specific stuf*/
} GW_HASHENTRY;

#else  /* COMPILE_UP_TCPIP */

#define GWAY_LIFE       300     /* 5 minute timeout in seconds */

typedef struct gw_hashentry {
    long from;                  /* network */
    long to;                    /* default gateway, if it exists */
    long redirect;              /* ICMP Redirect gateway, if it exists */
    long active_gw;             /* 1 = gateway is active, 0 = not active */
    /*
     * "from" is equivalent to "ipRouteDest",
     * and "to" or "redirect" is equivalent to "ipRouteNextHop"
     */
    long saveProto;             /* saved protocol when doing a redirect */
    long ipRouteIfIndex;        /* index of local IF for this route */
    long ipRouteMetric1;        /* Primary routing metric */
    long ipRouteMetric2;        /* Alternate routing metric */
    long ipRouteMetric3;        /* Alternate routing metric */
    long ipRouteMetric4;        /* Alternate routing metric */
    long ipRouteMetric5;        /* Alternate routing metric */
    long ipRouteType;           /* Type of this route */
    long ipRouteProto;          /* How this route was learned */
    long ipRouteAge;            /* time this route was updated */
    long ipRouteMask;           /* Subnet Mask for Route */
    unsigned char  ipRouteInfoLen; /* length of object ID */
    unsigned long  ipRouteInfo[SYSOBJLEN];  /* object ID of product specific stuf*/
} GW_HASHENTRY;

#endif  /* COMPILE_UP_TCPIP */



/*
 * Subnet mux table entry data. This structure is a subset of the
 * kernel-level structure. They must match. This is a maintenance
 * headache, but to remedy it, the IP code would have to be modified
 * to make this structure a subfield of the real table structure.
 */

#ifdef COMPILE_UP_TCPIP

typedef struct net_interface_data {
    long inaddr;                /* network internet address */
    long net_num;               /* network number */
    long subnet_num;            /* subnet number */
    long subnet_mask;           /* subnet mask */
    long sn_bdcst1;             /* subnet broadcast :all zeroes  */
    long sn_bdcst2;             /* subnet broadcast :all 1's  */
    long net_bdcst1;            /* network broadcast :all zeroes  */
    long net_bdcst2;            /* network broadcast :all 1's  */
    int frag_size;              /* max allowable fragment size for subnet */
    int opt_size;               /* optimum size (may be same as frag_size) */
    short int_flags;            /* interface flags (see below) */
    short blocked;              /* true if interface is blocked */
#ifdef HOSTREQ_MAYBE
    union {
        long bdcast_addr;
        long dst_addr;
    } addr;                     /* broadcast address, or dest address for SLIP */
#   define if_broadcast addr.bdcast_addr
#   define if_destination       addr.dst_addr
#endif
    int lower_snmp;             /* true if lower interface supports SNMP */
    long status;                /* status: up, down, or testing */
    time_t change;              /* time state was entered */
    long  if_broadcast;         /* preferred network broadcast */
    long  if_snbroadcast;       /* preferred subnet broadcast */
} NET_INTERFACE_DATA;

#else  /* COMPILE_UP_TCPIP */

typedef struct net_interface_data {
    long inaddr;                /* network internet address */
    long net_num;               /* network number */
    long subnet_num;            /* subnet number */
    long subnet_mask;           /* subnet mask */
    long sn_bdcst1;             /* subnet broadcast :all zeroes  */
    long sn_bdcst2;             /* subnet broadcast :all 1's */
    long net_bdcst1;            /* network broadcast :all zeroes */
    long net_bdcst2;            /* network broadcast :all 1's */
    int frag_size;              /* max allowable fragment size for subnet */
    int opt_size;               /* optimum size (may be same as frag_size) */
    short int_flags;            /* interface flags */
    short user_flags;           /* user flags */
    short blocked;              /* true if interface is blocked */

#ifdef HOSTREQ_MAYBE
    union {
        long bdcast_addr;
        long dst_addr;
    } addr;                 /* broadcast address, or dest address for SLIP */
#   define if_broadcast addr.bdcast_addr
#   define if_destination       addr.dst_addr
#endif

    int lower_snmp;             /* true if lower interface supports SNMP */
    long status;                /* status: up, down, or testing */
    time_t change;              /* time state was entered */
    long if_broadcast;          /* preferred network broadcast */
    long if_snbroadcast;        /* preferred subnet broadcast */
} NET_INTERFACE_DATA;

#endif  /* COMPILE_UP_TCPIP */

#endif /* _SYS_SNET_IP_CTRL_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\ip_proto.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    ip_proto.h

Abstract:

    This module contains definitions for STREAMS IP

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/******************************************************************
 *
 *  SpiderTCP Interface Primitives
 *
 *  Copyright (c) 1988  Spider Systems Limited
 *
 *  This Source Code is furnished under Licence, and may not be
 *  copied or distributed without express written agreement.
 *
 *  All rights reserved.
 *
 *  Written by          Nick Felisiak, Ian Heavens, Peter Reid,
 *                      Gavin Shearer, Mark Valentine
 *
 *  IP_PROTO.H
 *
 *   IP Streams proto primitives for TCP/IP on V.3/V.4 Streams
 *
 ******************************************************************/

#ifndef _SYS_SNET_IP_PROTO_
#define _SYS_SNET_IP_PROTO_


#ifndef IPOPTS
#define IPOPTS
#endif

#define IP_TX           6       /* tcp/udp send pkt to ip */
#define PROT_RX         8       /* tcp/udp get pkt from ip */
#define IP_PROTQ        9       /* tcp/udp send prot q to ip */
#define ICMP_RX         12      /* upper layer rcv icmp pkt from ip */
#define ICMP_TX         13      /* upper layer send icmp pkt to ip */
#define ENQ_LOCAL       14      /* validate local address enquiry */
#define ENQ_REMOTE      15      /* validate remote address enquiry */
#define IP_FLOW         16      /* flow control interface to upper layers */
#define IP_PROT_REMOVEQ 17      /* tcp/udp deregister prot q to ip */

#ifdef TESTOPT
/*
 * TESTOPT driver field
 */
#define TCPTEST         1
#define UDPTEST         TCPTEST
#define IPTEST          2

/*
 * TESTOPT type field
 */

#define NEXT            1       /* carry out for next num packets */
#define ALL             2       /* carry out for all packets */
#define OFF             3       /* turn off option */
#define RANDOM          4       /* carry out for random packets, prob 1/num */

/*
 * TESTOPT option field
 */

#define BAD_CKSUM       1
#define SHORT_HDR       2
#define DROP            3       /* drop packet or fragment */
#define CONTROL         4       /* OR ctl field with subopt, TCP only */
#define BAD_TYPE        5       /* bad multiplexing type: port for TCP,
                                   protocol for IP */

typedef struct testopt {
    char driver;    /* option for which driver: TCP/UDP, IP */
    char option;    /* option */
    char subopt;    /* suboption if applicable */
    char type;      /* next, on, off */
    int  num;       /* number of packets - depends on */
} TEST_OPT;

#endif

/*
 * define structure for DARPA internet address
 * usually use "longs" to access but sometimes need to split into
 * components
 */

typedef union {
    char  typea[4]; /* 4 x 8 bit version */
    short typeb[2];  /* 2 x 16 bit */
    long  typec;     /* 1 x 32 bit */
} IN_ADDRESS;

/*
 * IP Option values
 */
#define OPT_EOL           0
#define OPT_NOP           1
#define OPT_SECURITY    130
#define OPT_LSRR        131
#define OPT_SSRR        137
#define OPT_RR            7
#define OPT_STRID       136
#define OPT_TIMESTAMP    68

/*
 * structure of pseudo-header used for communication
 * between IP and higher level processes
 */
typedef struct {
    short ps_pktid;            /* id to be used in inet header */
    short ps_status;           /* indicates status of requested action */
#define OK 0                       /* status for non-ICMP packet */
    IN_ADDRESS ps_src;         /* source address */
    IN_ADDRESS ps_dst;         /* destination address */
    unsigned short ps_txtlen;  /* length of text */
    short ps_offset;           /* Fragment Offset */
    short ps_if;               /* IP Interface number */
    unsigned char ps_prot;     /* Internet protocol number */
    char ps_df;                /* Don't Fragment flag */
    char ps_ttl;               /* Time to Live flag */
#ifdef TESTOPT
    int test;                  /* testing on for this packet */
    TEST_OPT testopt;          /* options for testing */
#endif
#ifdef IPOPTS
    char ps_pkt_type;          /* What's this packet doing? */
    char ps_optlen;            /* Length of options (in words) */
    char ps_tos;               /* Type of service */
    int ps_options[1];         /* Options */
#endif
} PSEUDO_HDR;

#define SIZ_PSEUDOHDR sizeof(PSEUDO_HDR)


/*
 * Types of pkt_type
 */

#define PS_FROM_ME      1       /* Started here */
#define PS_FOR_ME       2       /* Dest is this machine */
#define PS_THRU_ME      3       /* Just passing through */
#define PS_SS_ROUTING   4       /* Being strict source routed */
#define PS_LS_ROUTING   5       /* Being loose source routed */
#define PS_REPLY        6       /* response to another pkt (ie echo reply) */

typedef struct ip_protq {
    int prim_type;
    unsigned char prot;
} S_IP_PROTQ;

/*
 * status returned to upper layer in prot
 */
#define VALID   0
#define IN_USE  1
#define INVALID 2

/*
 * received from transport protocol when it sends a packet
 */
typedef struct ip_tx {
    int prim_type;
    short hdr_cnt;
    short unused1;       /* ensure structure is same size as S_PROT_RX */
    BOOLEAN unused2;     /* ensure structure is same size as S_PROT_RX */
    PSEUDO_HDR uph;
} S_IP_TX;

/*
 * sent to transport protocol when we receive a packet
 */
typedef struct prot_rx {
    int prim_type;
    IN_ADDRESS if_addr;
    BOOLEAN is_broadcast;
    PSEUDO_HDR uph;
} S_PROT_RX;


/*
 * The ICMP_RX struct
 */
struct icmp_rx {
    int prim_type;
    IN_ADDRESS if_addr;
    BOOLEAN is_broadcast;
    unsigned char type;
    unsigned char code;
    long src;
    long dst;
    unsigned long misc;
    PSEUDO_HDR uph;
};


/*
 * The ICMP_TX struct
 */
struct icmp_tx {
    int prim_type;
    unsigned char type;
    unsigned char code;
    long src;
    long dst;
    unsigned long misc;
    PSEUDO_HDR ph;
};



/*
 * The IP_ADDRENQ struct
 */

struct ip_addrenq {
    int           prim_type;           /* ENQ_LOCAL or ENQ_REMOTE */
    char         *handle;              /* Place holder for TCP */
    long          addr;                /* Remote address */
    long          local;               /* Returned local address */
    int           error;               /* Zero if OK, else errno */
    int           mss;                 /* Max seg size for this transfer */
    int           flags;               /* See below */
    int           ifno;                /* IP's interface number for this addr */
    int           broadcast;           /* Set if remote address is broadcast */
    unsigned long link_speed;          /* adapter link speed in kbits/second */
    unsigned long receive_buffer_size; /* bytes of adapter receive space */
};


#define ENQ_NO_KEEPALIVE        1       /* No keep-alives for this net */


/*
 * IP Flow control structure
 */

struct ip_flow_info {
    int prim_type;          /* IP_FLOW */
    int index;              /* IP Interface number */
    int info;               /* Blocked or unblocked */
};

/**************************************************************
 * ICMP constants:      types & codes
 **************************************************************/

#define ECHO_REPLY              0               /* echo reply */

#define DEST_UNR                3               /* destination unreachable: */

/* codes for DEST_UNR */
#define         NET_UNR                 0       /* net unreachable */
#define         HOST_UNR                1       /* host unreachable */
#define         PROT_UNR                2       /* protocol unreachable */
#define         PORT_UNR                3       /* port unreachable */
#define         FRAG_DF                 4       /* fragmentation needed + DF */
#define         SR_FAIL                 5       /* source route failed */
#define         DST_NET_UNKNOWN         6       /* dest network unknown */
#define         DST_HOST_UNKNOWN        7       /* dest host unknown */
#define         SRC_HOST_ISOLATED       8       /* source host isolated */
#define         NET_PROHIBITED          9       /* communication with dest
                                                   network administratively
                                                   prohibited */
#define         HOST_PROHIBITED         10      /* communication with dest
                                                   host administratively
                                                   prohibited */
#define         NET_UNR_FOR_TOS         11      /* network unreachable
                                                   for type of service */
#define         HOST_UNR_FOR_TOS        12      /* host unreachable
                                                   for type of service */

#define SRC_QUENCH              4               /* source quench */

#define REDIRECT                5               /* redirect message: */
#define         NET_RE                  0       /* redirect for network */
#define         HOST_RE                 1       /* redirect for host */
#define         TOSN_RE                 2       /* redirect for TOS/network */
#define         TOSH_RE                 3       /* redirect for TOS/host */

#define ICMP_ECHO               8               /* echo request */

#define TIME_EXCEEDED          11               /* time exceeded: */
#define         TTL_X                   0       /* time-to-live exceeded */
#define         FRAG_X                  1       /* frag reassem time excluded */

#define PARAMETER               12              /* parameter problem */
#define         PARAM_POINTER           0       /* pointer indicates error */
#define         PARAM_OPTION            1       /* required option missing */

#define TIME_STAMP              13              /* timestamp request */
#define STAMP_REPLY             14              /* timestamp reply */

#define INFO_REQ                15              /* information request */
#define INFO_REPLY              16              /* information reply */

#define MASK_REQ                17              /* address mask request */
#define MASK_REPLY              18              /* address mask reply */

#endif /* _SYS_SNET_IP_PROTO_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\nbtuser.h ===
/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainD/dev/src/include/sys/snet/0/s.nbtuser.h
 *	@(#)nbtuser.h	1.3
 *
 *	Last delta created	14:57:27 2/22/91
 *	This file extracted	15:16:56 4/1/91
 *
 *	Modifications:
 *	
 *		6 Feb 1991 (RAE)	Ported to SpiderTCP
 */

/*
 * NetBIOS specific error codes
 */
#define PROTO_SESSIONCLOSED 1
#define PROTO_SESSIONABORTED 2
#define ENAMEUNR 3

/* Netbios interface definitions */

/*	nbt open types */
#define O_CLTS		0x4000	/* flag used in open to specify a 
				 * connectionless transport endpoint */

//#define TLI_NBT		"/dev/nbt"

/*	Netbios names */
#define NBNAMSZ		16
#define MAXNBDG		512		/* maximum datagram size */
#define NBUNIQUENM	0x00	/* unique name flag, nb_type */
#define NBGROUPNM	0x01	/* group name flag, nb_type */
#define NBBROADCAST	0x40	/* broadcast flag, nb_type */

struct nbaddr {
	USHORT nb_type;		/* name type: group, unique */
	UCHAR nb_name[NBNAMSZ];
//	char nb_res;		/* reserved, unused */
};

/* Length's are passed as ioctl's: */
#define NBSTR	('N'<<8)
#define NBIOCTL_TSDUSZ	(NBSTR|0x1)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\ll_ctrl.h ===
/*
 *	 /redknee10/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/35/s.ll_control.h
 *	@(#)ll_control.h	1.2
 *
 *	Last delta created	15:48:28 11/18/91
 *	This file extracted	09:26:04 3/18/92
 *
 *	Modifications:
 *	
 *		IS	Oct 1991	Ported for LLC1
 */


/* IOCTL commands */
#define L_SETSNID   ('L'<<8 | 1)    /* Set subnet identifier (use ll_snioc) */
#define L_GETSNID   ('L'<<8 | 2)    /* Get subnet identifier (use ll_snioc) */
#define L_SETTUNE   ('L'<<8 | 3)    /* Set tuning parameters (use ll_tnioc) */
#define L_GETTUNE   ('L'<<8 | 4)    /* Get tuning parameters (use ll_tnioc) */
#define L_GETSTATS  ('L'<<8 | 5)    /* Get statistics counts (use ll_stioc) */
#define L_ZEROSTATS ('L'<<8 | 6)    /* Zero statistics       (use ll_hdioc) */

/* Values for 'lli_type' (with names of corresponding structures) */
#define LI_PLAIN	0x01        /* Indicates 'struct ll_hdioc'  */
#define LI_SNID		0x02        /* Indicates 'struct ll_snioc'  */
#define LI_STATS	0x04        /* Indicates 'struct ll_stioc'  */


#define LI_LLC2TUNE	0x23        /* Indicates 'struct llc2_tnioc'*/


/* LLC1 tuning structure */
typedef struct llc2tune {
    uint16  Tbusy;          /* Remote busy check time   (unit 0.1 sec)  */
    uint16  Tidle;          /* Idle P/F cycle time	(unit 0.1 sec)  */
    uint16  tx_window;      /* Transmit window (if no XID received)	*/
    uint16  tx_probe;       /* P-bit position before end of Tx window   */
    uint16  xid_window;     /* XID window size (receive window)		*/
    uint16  xid_Ndup;       /* Duplicate MAC XID count  (0 => no test)  */
    uint16  xid_Tdup;       /* Duplicate MAC XID time   (unit 0.1 sec)  */
} llc2tune_t;

/* LLC2/LAPB stats structure */
typedef struct ll_stats {
    uint32  lls_txU;        /* Number of 'U' frames sent		*/
    uint32  lls_rxU;        /* Number of good 'U' frames received	*/
    uint32  lls_rxign;      /* Number of frames ignored			*/
    uint32  lls_rxbad;      /* Number of erroneous frames received	*/
    uint32  lls_rxdud;      /* Number of received and discarded frames  */
} llstats_t;

/* Header alone (for decoding and L_ZEROSTATS commands) */
struct ll_hdioc {
    uint8           lli_type;   /* Table type = LI_PLAIN		*/
    uint8           lli_snid;   /* Subnet ID character			*/
    uint16          lli_spare;  /*   (for alignment)			*/
};

/* Ioctl block for L_SETSNID and L_GETSNID commands */
struct ll_snioc {
    uint8           lli_type;   /* Table type = LI_SNID			*/
    uint8           lli_snid;   /* Subnet ID character			*/
    uint16          lli_spare;  /*   (for alignment)			*/

    uint32          lli_index;  /* Link index				*/
};


/* Ioctl block for LLC1 L_SETTUNE and L_GETTUNE commands */
struct llc2_tnioc {
    uint8           lli_type;   /* Table type = LI_LLC2TUNE		*/
    uint8           lli_snid;   /* Subnet ID character ('*' => 'all')   */
    uint16          lli_spare;  /*   (for alignment)			*/

    llc2tune_t      llc2_tune;  /* Table of tuning values               */
};

/* Ioctl block for L_GETSTATS command */
struct ll_stioc {
    uint8           lli_type;   /* Table type = LI_STATS		*/
    uint8           lli_snid;   /* Subnet ID character			*/
    uint16          lli_spare;  /*   (for alignment)			*/
    llstats_t       lli_stats;  /* Table of stats values		*/
};

/* Union of ioctl blocks */
typedef union lli_union {
    struct ll_hdioc	ll_hd;      /* Parameter-less command       */
    struct ll_snioc	ll_sn;      /* Set/get subnet identifier    */
    struct llc2_tnioc   llc2_tn;    /* Set/get LLC1 tuning          */
    struct ll_stioc	ll_st;      /* Get statistics		    */
} lliun_t;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\nbdebug.h ===
/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainD/dev/src/include/sys/snet/0/s.nbdebug.h
 *	@(#)nbdebug.h	1.3
 *
 *	Last delta created	12:37:27 3/11/91
 *	This file extracted	15:16:57 4/1/91
 *
 *	Modifications:
 *	
 *		6 Feb 1991 (RAE)	Ported to SpiderTCP
 */

#ifndef _NBDEBUG_INCLUDED
#define _NBDEBUG_INCLUDED

extern int nbtraceflag;

#define I_NBDEBUG 0x8000

/* debug_cmd */

#define DTRACE          1

/* flags for debug_cmd DTRACE */

#define D_STRM 0x0001
#define D_DEP  0x0002
#define D_SEP  0x0004
#define D_SIB  0x0008
#define D_NSRV 0x0010
#define D_SSRV 0x0020
#define D_DSRV 0x0040
#define D_CTRL 0x0080
#define D_LMH  0x0100

struct nb_debug {
   int debug_cmd;
   int debugflag;
};

#endif // _NBDEBUG_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\nbt_ctrl.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    nbt_ctrl.h

Abstract:

    This file contains structure definitions for the user-level interface to
    the NBT driver.

Author:

    Mike Massa (mikemas)           Jan 30, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-30-92     created

Notes:

--*/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.nbt_control.h
 *	@(#)nbt_control.h	1.9
 *
 *	Last delta created	15:54:26 10/25/91
 *	This file extracted	16:49:25 12/23/91
 *
 *	Modifications:
 *	
 *		6 Feb 1991 (RAE)	Ported to SpiderTCP
 */

#ifndef _NBT_CTRL_INCLUDED_
#define _NBT_CTRL_INCLUDED_


typedef unsigned short word;
typedef unsigned char byte;
typedef unsigned int dword;

//
// #defines for debugging reference count problems
//

#if DBG

#define REFCOUNT_TRACE 1

#endif

#define REFCOUNT_TRACE_UNUSENAME 0
#define REFCOUNT_TRACE_USENAME   1
#define REFCOUNT_TRACE_FINDNAME  2
#define REFCOUNT_TRACE_PUTNEXT   3
#define REFCOUNT_TRACE_LINKREQ   4
#define REFCOUNT_TRACE_ACTIVE    5

#define NUM_REFCOUNT_TRACE 6

/*
 * XEB (Standard Object Block)
 */

#ifdef COMPILE_UP_TCPIP

typedef struct xeb {
        struct msgb  *msg;      /* the allocated stream msg */
        char blockname[4];      /* Debug name information */
	struct xeb *dnlink;	/* Debug link to next block) */
	struct xeb *dplink;	/* Debug link to previous block */
	struct xeb *nlink;	/* link to next block) */
	struct xeb *plink;	/* link to previous block */
        struct queue *uqptrRD;
        struct queue *uqptrWR;
        struct queue *lqptrRD;
        struct queue *lqptrWR;
        int state;
        int (*init_object)();   /* init_object procedure */
        void (*in_object)();    /* in_object procedure */
        int (*out_object)();    /* out_object procedure */
        int (*close_object)();  /* close_object procedure */
        int (*test_resource)(); /* procedure, test buf resources */
        int bufcall_flag;       /* object wait on buf resources */
        struct xeb *nmptr;      /* pointer to bound name */
	struct msgb *work_q;	/* queue of work to do */
} XEB;

#else  /* COMPILE_UP_TCPIP */

typedef struct xeb {
        struct msgb **msg;      /* the allocated stream msg */
        char blockname[4];      /* Debug name information */
	struct xeb *nlink;	/* link to next block) */
	struct xeb *plink;	/* link to previous block */
        struct queue *uqptrRD;
        struct queue *uqptrWR;
        struct queue *lqptrRD;
        struct queue *lqptrWR;
        int state;
        int ref_count;          /* reference count for the object */
                                /* each pending operation references the */
                                /* object and the completion deref's it */
                                /* when the ref count goes to zero, the */
                                /* object can be safely closed */
#ifdef REFCOUNT_TRACE
        int trace_count[NUM_REFCOUNT_TRACE];
                                /* each type of reference has a trace entry */
                                /* when a reference is made, it is made with */
                                /* a reference type that is incremented for */
                                /* the entry */
        int FindNamesAdded;     /* number of findname requests added to the */
                                /* FASTTIMQ for this xeb                    */
        int FindNamesRemoved;   /* number of findname requests taken from the */
                                /* FASTTIMQ for this xeb                      */
#endif
        KEVENT close_event;     /* This event is signalled when the ref count */
                                /* goes to zero.  It is waited on in nbtclose */
        int (*init_object)();   /* init_object procedure */
        void (*in_object)();    /* in_object procedure */
        int (*out_object)();    /* out_object procedure */
        int (*close_object)();  /* close_object procedure */
        int (*test_resource)(); /* procedure, test buf resources */
	int spl;                /* level at which per xeb lock was acquired */
	struct msgb *work_q;	/* work to do queue for deferred actions */
        int bufcall_flag;       /* object wait on buf resources */
        struct xeb *nmptr;      /* pointer to bound name */
} XEB;

#endif  /* COMPILE_UP_TCPIP */


typedef struct linkreq {
    unsigned int primtype;
    XEB *xeb;
    struct queue *toq;              /* who have asked */
    struct queue *l_qbot;
    int   l_index;
    struct msgb * mconind;       /* msg pointer  to message which have started */
                            /* this request */
} LINKREQ;



typedef struct confreq {
    unsigned int primtype;

  /* General */

    unsigned char  this_scope[240];          /* SCOPE_ID */
    unsigned char  name[17];                 /* permanent nb name   */
    unsigned long  broadcast_inaddr;         /* ip broadcast addr   */
    unsigned long  subnet_mask;              /* subnet mask for the ip addr */
    unsigned long  this_inaddr;              /* ip addr for the nbt */
    unsigned short bcast_req_retry_timeout;  /* 250 ms */
    unsigned short bcast_req_retry_count;    /* 3 */

  /* Name service */

    unsigned short conflict_timer;          /* 1000 ms */
    unsigned short namesrv_udpport;         /* 137 */

  /* Session service */

    unsigned short sessionsrv_tcpport;      /* 139 */
    unsigned short ssn_retry_count;         /* 4 */
    unsigned short ssn_close_timeout;       /* 30 sek */
    unsigned short ssn_keep_alive_timeout;  /* 60 sek */

  /* Datagram service */

    unsigned short datagramsrv_udpport;     /* 138 */
    unsigned short dgr_frag_timeout;        /* 2 sec */
} CONFREQ;


#define CONF_REQ            3001
#define NBT_LINK_REQ        3016
#define NBT_LINK_ACK        3017
#define NBT_LINK_NACK       3018
#define NBT_UNLINK_REQ      3019
#define NBT_UNLINK_ACK      3020
#define NBT_UNLINK_NACK     3021


#endif // _NBT_CTRL_INCLUDED_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\ll_proto.h ===
/******************************************************************
 *
 *  Copyright 1991  Spider Systems Limited
 *
 *  LL_PROTO.C
 *
 ******************************************************************/
/*
 *	 /redknee10/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/35/s.ll_proto.h
 *	@(#)ll_proto.h	1.2
 *
 *	Last delta created	18:43:07 1/28/92
 *	This file extracted	09:26:05 3/18/92
 *
#ifdef MOD_HISTORY
 *
 *	Modifications:
 *
 *	JS	25 Sep 90	Added LAP classes.
 *	JS	17 Oct 90	Renamed LC_LAPB as LC_LAPBDTE and LC_LAPBX
 *				as LC_LAPBXDTE.
 *	JS	21 Nov 90	Moved ll_mymacaddr field in ll_reg structure
 *				to start on 4 byte boundary.
 *	IS	Oct 1991	Changed for LLC1
#endif
 */


#define MAXHWLEN 6
#define LL_MAXADDRLEN 8 

/* Interface structures */
struct ll_reg {
    uint8	ll_type;
    uint8	ll_class;
    uint8	ll_regstatus;
    uint8	ll_snid;
    uint8	ll_normalSAP;
    uint8	ll_loopbackSAP;
    uint8	ll_mactype;			/* type of hardware interface */
    uint8	ll_addrsize;			/* size of hardware address */
    uint16	ll_frgsz;			/* max fragment size of HW */
    uint8	ll_mymacaddr[LL_MAXADDRLEN];	/* hardware address */
};

struct ll_msg {
    uint8	ll_type;
    uint8	ll_command;
    uint16	ll_connID;
    uint32	ll_yourhandle;
    uint32	ll_status;
};

struct ll_msgc {
    uint8	ll_type;
    uint8	ll_command;
    uint16	ll_connID;
    uint32	ll_yourhandle;
    uint32	ll_myhandle;
    uint16	ll_service_class;
    uint8	ll_remsize;		/* semi-octect size of remote address */
    uint8	ll_locsize;		/* semi-octect size of local address */
    uint8	ll_route_length;	/* size of routing information */
    uint8	ll_locaddr[LL_MAXADDRLEN];	/* local address */
    uint8	ll_remaddr[LL_MAXADDRLEN];	/* remote address */
    uint8	ll_route_info[1];	/* optional routing info field MUST */
					/* follow ll_remaddr field */
};

/* Values for 'll_type' */
#define LL_REG		 50
#define LL_DAT		 52

/* Values for 'll_command' */

#define LC_UDATA          4
#define LC_DISC		  5
#define LC_DISCNF         6
#define LC_RESET          7
#define LC_RSTCNF         8
#define LC_REPORT         9


/* Values of 'll_class' in 'll_reg' */
#define LC_LLC1          15

/* Values in 'll_regstatus' and 'll_status' */
#define LS_SUCCESS        1
#define LS_RESETTING      2
#define LS_RESETDONE      3
#define LS_DISCONNECT     4
#define LS_FAILED         5
#define LS_CONFLICT       6
#define LS_RST_FAILED     7
#define LS_RST_REFUSED    8
#define LS_RST_DECLINED   9
#define LS_REM_BUSY      12
#define LS_REM_NOT_BUSY  13
#define LS_EXHAUSTED     14
#define LS_SSAPINUSE     15
#define LS_LSAPINUSE     16
#define LS_DUPLICATED    17
#define LS_LSAPWRONG     18
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\nbt_stat.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    nbt_stat.h

Abstract:

    This file contains statistics structure declarations for the user-
    level interface to the NBT driver.

Author:

    Mike Massa (mikemas)           Jan 30, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-30-92     created

Notes:

--*/

/*
 *       /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.nbt_stat.h
 *      @(#)nbt_stat.h  1.2
 *
 *      Last delta created      14:05:19 10/2/91
 *      This file extracted     16:49:25 12/23/91
 *
 *      Modifications:
 *
 *              6 Feb 1991 (RAE)        Ported to SpiderTCP
 */

#ifndef _NBT_STAT_INCLUDED_
#define _NBT_STAT_INCLUDED_

#define MAX_XEB 32              /* max. no. of xebinfos in a message */

/* structure passed/returned in NBT_STAT/NBT_NAME ioctl command */
struct nbt_stat
{
    int    xeb_count;
        char   perm_name[17];   /* Permanent name of node */
        char   scope_id[240];   /* Scope identifier of node */
};


#define NBT_XEBINFO             1       /* primtype of nbt_xebinfo struct */
#define NBT_NAMEINFO    2       /* primtype of nbt_nameinfo struct */
#define NBT_CACHEINFO   3       /* primtype of nbt_cacheinfo struct */

struct nbt_info {
        int prim_type;          /* NBT_XEBINFO or _NAMEINFO or _CACHEINFO */
        int count;                  /* number of entries in message */
};

/*
 *  Per-Endpoint (XEB) Data.
 */
struct xebinfo
{
    long            addr;            /* XEB address */
    char            type[4];         /* type of XEB */
    int             xeb_state;       /* internal xeb state */
    char            local_name[17];  /* NetBIOS name of endpoint */
    char            remote_name[17]; /* NetBIOS name of endpoint */
    int             dev;             /* minor device number of endpoint */
    unsigned int    in_data;         /* received data bytes to endpoint */
    unsigned int    out_data;        /* transmitted data bytes from endpoint */
};

/*
 *  Name Data.
 */
struct nameinfo
{
        long    addr;            /* NEB address */
        int     type;            /* type of name */
        int     status;              /* name status */
        char    name[17];        /* NetBIOS name of endpoint */
};

/*
 *  Cache Data.
 */
struct cacheinfo
{
        long          addr;     /* CACHE_ELEM  address */
        unsigned int  type;     /* type of name */
        unsigned char name[17]; /* NetBIOS name */
        unsigned long ip_addr;  /* Internet Address of name */
        unsigned int  ttl;              /* Time To Live */
};


/*
 *  Ioctl(2) commands for NetBIOS Device.
 */
#define NBT_STAT        ('B'<<8|1)      /* generic status gathering */
#define NBT_RESET       ('B'<<8|2)      /* generic status reset */
#define NBT_NAME        ('B'<<8|3)      /* generic name gathering */
#define NBT_CACHE       ('B'<<8|4)      /* generic cache gathering */
#define NBT_RESYNC      ('B'<<8|5)      /* reread the lmhosts file */


/*
 * Name types and status
 */
#define UNIQUE 0x0000
#define GROUP  0x8000


#define INFINITE_TTL  ((unsigned int) -1)/* CACHE_ELEM.timeout, cacheinfo.ttl */


#define CONFLICT         1
#define REGISTERING      2
#define DEREGISTERING    3
#define REGISTERED       4


#endif // _NBT_STAT_INCLUDED_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\snmp.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    snmp.h

Abstract:

    This module contains SNMP definitions for STREAMS TCP/IP drivers.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/*************************************************************************
 *
 *  SpiderSNMP
 *
 *  Copyright 1990  Spider Systems Limited
 *
 *  SNMP.H
 *
 *  Daemon/kernel interface
 *
 *
 *************************************************************************/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.snmp.h
 *	@(#)snmp.h	1.1
 *
 *	Last delta created	10:15:32 3/1/90
 *	This file extracted	08:53:47 7/10/91
 *
 *	Modifications:
 *
 *	GSS 01/03/90	put in Pbrain
 */

#ifndef _SYS_SNET_SNMP_
#define _SYS_SNET_SNMP_


/*
 * Values for the 'ic_cmd' field of I_STR ioctls.
 * These indicate the request to be performed.
 * These should be ored with the constants below, which specify
 * the variables on which the request should be performed.
 */

#define SNMPIOC			('M' << 8)

#define SNMP_GET_REQ		(SNMPIOC | (0 << 5))
#define SNMP_GETNEXT_REQ	(SNMPIOC | (1 << 5))
#define SNMP_SET_REQ		(SNMPIOC | (3 << 5))

#define SNMP_REQ_MASK		(SNMPIOC | (7 << 5))

/*
 * Values for the 'ic_cmd' field of I_STR ioctls.
 * These indicate the variables to be affected.
 * These should be ored with the constants above, which specify
 * the type of request.
 */

#define	SNMP_IF			0
#define	SNMP_IFENTRY		1
#define	SNMP_ATENTRY		2
#define	SNMP_IP			3
#define	SNMP_IPADDRENTRY	4
#define	SNMP_IPROUTEENTRY	5
#define	SNMP_ICMP		6
#define	SNMP_TCP		7
#define	SNMP_TCPCONNENTRY	8
#define	SNMP_UDP		9
#define	SNMP_UDPENTRY	10

#define SNMP_VAR_MASK		31

/*
 * Values for the 'ic_cmd' field of I_STR ioctls.
 * This indicates that an SNMP control message
 * is being sent.
 */

#define SNMP_CONTROL		(SNMPIOC | (7 << 5) | 0)

/*
 * init structure for SNMP
 */

struct snmp_init
{
        uint8 prim_type;
	u_long since;
};

#define SNMP_INIT		1

/*
 * trap structure for SNMP;
 * currently this is only used between drivers
 */

struct snmp_trap
{
	int prim_type;
	long generic_trap;
	long specific_trap;
	int info_len;			/* length of info in bytes */
	char info[1];			/* "interesting" information */
};

/*
 * values for "generic_trap"
 */

#define SNMP_TRAP_ENTSPEC	6

/*
 * values for "specific_trap" are the same as the interface status field
 * i.e. up(1), down(2), testing(3).
 */

#endif /* _SYS_SNET_SNMP_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\s_socket.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    s_socket.h

Abstract:

    This module contains socket definitions for STREAMS TCP/IP sockets.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/******************************************************************
 *
 *  S-TCP Socket Library
 *
 *  Copyright 1987  Spider Systems Limited
 *
 *  S_SOCKET.H
 *
 *  Contains socket definitions for SpiderTCP In-kernel socket
 *  code
 *
 *
 ******************************************************************/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.s_socket.h
 *	@(#)s_socket.h	1.4
 *
 *	Last delta created	15:05:38 6/20/89
 *	This file extracted	08:53:44 7/10/91
 *
 *	Modifications:
 *
 *	NCF 00/00/00	Written
 *
 *	PR  01/12/87	Integrated into Admin System II, all
 *			projects
 */


#ifndef _SYS_SNET_S_SOCKET_
#define _SYS_SNET_S_SOCKET_


/*
 * IOCTL types
 */
#define SO_IOCTL	'S'<<8
#define SO_ACCEPT	(SO_IOCTL | 'a')
#define SO_BIND		(SO_IOCTL | 'b')
#define SO_CONNECT	(SO_IOCTL | 'c')
#define SO_GETPEER	(SO_IOCTL | 'p')
#define SO_GETSOCK	(SO_IOCTL | 'h')
#define SO_GETSOPT	(SO_IOCTL | 'o')
#define SO_SETSOPT	(SO_IOCTL | 't')
#define SO_LISTEN	(SO_IOCTL | 'l')
#define SO_SHUTDOWN	(SO_IOCTL | 'x')


/*
 * Message types
 */
#define SO_DO_ACCEPT	(SO_IOCTL | 'A')
#define SO_EXRCV	(SO_IOCTL | 'U')
#define SO_EXSEND	(SO_IOCTL | 'X')
#define SO_RECV		(SO_IOCTL | 'r')
#define SO_RECVFROM	(SO_IOCTL | 'R')
#define SO_SEND		(SO_IOCTL | 's')
#define SO_SENDTO	(SO_IOCTL | 'S')

/*
 * Socket options structure
 */
struct s_sockopt {
	int	level;
	int	optnam;
	int	optval;	/* May be extended */
};

struct s_ctlhdr {
	long	prim_type;
	int	addrlen;
	char	addr[32];
};

/*
 * Socket SO_DO_ACCEPT structure
 */
struct acc_str {
	int	type;
	int	pad;
	int	*ptr;
};

#endif /* _SYS_SNET_S_SOCKET_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\net_stat.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    net_stat.h

Abstract:

    This file defines the IOCTL interface to the TCP/IP drivers used by
    the netstat program.

Author:

    Mike Massa (mikemas)           Jan 31, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-31-92     created

Notes:

--*/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.net_stat.h
 *	@(#)net_stat.h	1.9
 *
 *	Last delta created	12:04:31 3/6/90
 *	This file extracted	16:49:18 12/23/91
 *
 *	MV 08/06/88	Mods for Generic Ethernet Driver (GENERICE).
 *
 *	MV 18/07/88	To get over limits on STREAMS ioctl size, we now
 *			get connection information send up in separate
 *			messages, with the number of connections to expect
 *			passed up (along with protocol stats) in the initial
 *			ioctl.
 */

/*
 *  TCP statistics.
 */

struct tcp_stat
{
	long	net;		/* net to get stats on, 0L -> all nets */

	/* protocol statistics */
	int	tcp_small;	/* incomplete headers */
	int	tcp_cksum;	/* header checksum errors */

	/* connection information */
	int	tcp_conns;	/* number of active TCBs */
};

#define MAX_TCB	32		/* max. no. of tcp_conns in a message */

/*
 *  Per-Connection (TCB) Data.
 */

struct tcp_conn
{
	long	tcp_addr;	/* TCB address */
	int	tcp_rcvq;	/* packets on receive queue */
	int	tcp_sndq;	/* packets on send queue */
	long	tcp_laddr;	/* local address */
	long	tcp_faddr;	/* foreign address */
	short	tcp_lport;	/* local port */
	short	tcp_fport;	/* foreign port */
	int	tcp_state;	/* connection state */
};

/* possible values for tcp_state */

#define CLOSED		0		/* connection not in use */
#define LISTEN		1		/* listening for requests */
#define SYN_SEND	2		/* sent SYN, awaiting ACK */
#define SYN_RECV	3		/* received SYN, not ACKed */
#define ESTABLISHED	4		/* connection established */
#define FIN_WAIT_1	5		/* sent FIN, awaiting ACK */
#define FIN_WAIT_2	6		/* sent FIN, got ACK not FIN */
#define CLOSE_WAIT	7		/* received FIN, not ACKed */
#define LAST_ACK        8               /* waiting for final ACK */

/*
 *  UDP statistics.
 */

struct udp_stat
{
	long	net;		/* net to get stats on, 0L -> all nets */

	/* protocol statistics */
	int	udp_small;	/* packets smaller than minimum */
	int	udp_cksum;	/* header checksum errors */
	int	udp_header;	/* bad data length fields */

	/* connection information */
	int	udp_conns;	/* number of active UCBs */
};

#define MAX_UCB	32		/* max. no. of udp_conns in a message */

/*
 *  Per-Connection (UCB) Data.
 */

struct udp_conn
{
	long	udp_addr;	/* UCB address */
	int	udp_rcvq;	/* packets on receive queue */
	int	udp_sndq;	/* packets on send queue */
	long	udp_laddr;	/* local address */
	int	udp_lport;	/* local port */
	long	udp_faddr;	/* foreign address */
	int	udp_fport;	/* foreign port */
};

/*
 *  IP statistics
 */

struct ip_stat
{
	long	net;		/* net to get stats on, 0L -> all nets */

	int	ip_small;	/* packets smaller than minimum */
	int	ip_cksum;	/* header checksum errors */
	int	ip_header;	/* bad data length fields */
};

#ifndef GENERICE
/*
 *  Ethernet statistics
 */

struct eth_stat
{
	long	eth_tx;		/* packets transmitted */
	long	eth_rx;		/* packets received */
	long	eth_lost;	/* packets discarded */
	int	eth_crc;	/* CRC error packets */
	int	eth_align;	/* alignment error packets */
	int	eth_res;	/* 82586 resource errors */
	int	eth_over;	/* overrun error packets */
};
#endif /*~GENERICE*/

/*
 *  Ioctl(2) commands for Network Devices.
 */

#define NET_STAT	('N'<<8|1)	/* generic statistics gathering */
#define NET_RESET	('N'<<8|2)	/* generic statistics reset */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\stcp_opt.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    stcp_opt.h

Abstract:

    This module contains TCP/IP user options definitions for STREAMS TCP/IP.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/

/******************************************************************
 *
 *  SpiderTCP Application Definitions
 *
 *  Copyright 1987  Spider Systems Limited
 *
 *  STCP_OPT.H
 *
 *  User options for TCP/IP on V.3 Streams
 *
 *  PR@Spider     /\oo/\
 *
 ******************************************************************/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.stcp_opt.h
 *	@(#)stcp_opt.h	1.9
 *
 *	Last delta created	19:24:09 2/21/90
 *	This file extracted	08:53:45 7/10/91
 *
 *	Modifications:
 *
 *	PR 01/12/87	Integrated into Admin System II, all
 *			projects
 */

#ifndef _SYS_SNET_STCP_OPT_
#define _SYS_SNET_STCP_OPT_


/*
 * TCP Top level option.  These may be or'ed together in
 * the option word.  opt_level should be set to TOL_TLI
 * to set these parameters
 */

#define TOL_TLI		0xffff

#define TO_NO_OPTS	0x0000
#define TO_REUSE_ADDR	0x0001
#define TO_KEEPALIVE	0x0004
#define TO_DEBUG	0x0002
#define TO_LINGER	0x0008
#define TO_RDWR		0x0010
#define TO_NODELAY	0x0020

#ifdef TESTOPT
#define TO_TESTOPT	0x0040
#endif

#define TOL_RCVBUF  0x0001

/*
 * TCP/IP Option struct for use with the T_OPTMGMT
 * function.
 */

typedef struct tcp_opt {
	int opt_level;
	int opt_name;
	int opt_data[1];

} TOPT;

#endif /*  _SYS_SNET_STCP_OPT_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\tcp_ctrl.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    tcp_ctrl.h

Abstract:

    TCP interface declarations.

Author:

    Mike Massa (mikemas)           Jan 30, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-30-92     created

Notes:

--*/

/******************************************************************
 *
 *  SpiderTCP Interface Primitives
 *
 *  Copyright (c) 1988  Spider Systems Limited
 *
 *  This Source Code is furnished under Licence, and may not be
 *  copied or distributed without express written agreement.
 *
 *  All rights reserved.
 *
 *  Written by 		Nick Felisiak, Ian Heavens, Peter Reid,
 *			Gavin Shearer, Mark Valentine
 *
 *  TCP_CONTROL.H
 *
 *  TCP Streams ioctl primitives for TCP/IP on V.3 Streams
 *
 ******************************************************************/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.tcp_control.h
 *	@(#)tcp_control.h	1.4
 *
 *	Last delta created	11:56:46 11/1/91
 *	This file extracted	16:49:20 12/23/91
 *
 *	Modifications:
 *
 *	20/07/88 MV	Added tcp_proto to hold tcp_pcbinfo.
 */

#ifndef _SYS_SNET_TCP_CTRL_INCLUDED
#define _SYS_SNET_TCP_CTRL_INCLUDED


struct tcp_pcbinfo {
	int prim_type;
	int tcbcount;
};

typedef union tcp_proto {
	int type;
	struct tcp_pcbinfo pcbinfo;
} S_TCP_PROTO;

#define TCP_PCBINFO	1
#define TCP_TCBINFO 2


#endif  // _SYS_SNET_TCP_CTRL_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\udp_ctrl.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    udp_ctrl.h

Abstract:

    UDP interface declarations

Author:

    Mike Massa (mikemas)           Jan 30, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-30-92     created

Notes:

--*/

/******************************************************************
 *
 *  SpiderTCP Interface Primitives
 *
 *  Copyright (c) 1988  Spider Systems Limited
 *
 *  This Source Code is furnished under Licence, and may not be
 *  copied or distributed without express written agreement.
 *
 *  All rights reserved.
 *
 *  Written by 		Nick Felisiak, Ian Heavens, Peter Reid,
 *			Gavin Shearer, Mark Valentine
 *
 *  UDP_CONTROL.H
 *
 *  UDP Streams ioctl primitives for TCP/IP on V.3 Streams
 *
 ******************************************************************/


/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.udp_control.h
 *	@(#)udp_control.h	1.1
 *
 *	Last delta created	16:21:22 1/16/89
 *	This file extracted	16:49:20 12/23/91
 *
 *	Modifications:
 *
 *	20/07/88 MV	New file for netstat protocol message.
 */

#ifndef _SYS_SNET_UDP_CTRL_INCLUDED
#define _SYS_SNET_UDP_CTRL_INCLUDED


struct udp_pcbinfo {
	int prim_type;
	int ucbcount;
};

typedef union udp_proto {
	int type;
	struct udp_pcbinfo pcbinfo;
} S_UDP_PROTO;

#define UDP_PCBINFO	1

#endif  // _SYS_SNET_UDP_CTRL_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\timer.h ===
/********************************************************/
/*							*/
/*	 /redknee10/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.timer.h						*/
/*	@(#)timer.h	1.2						*/
/*							*/
/*	Copyright (c) 1991 Spider Systems Limited	*/
/*							*/
/*	TIMER.H -   Multiple timer module heade		*/
/*							*/
/*	Last delta created	12:22:12 3/12/91			*/
/*	This file extracted	09:26:06 3/18/92			*/
/*							*/
/*	Modifications:					*/
/*							*/
/*							*/
/********************************************************/


/* Lock out clock ISR */
#define splclock()   splhi()

/* Timers header, used to process expiries */
typedef struct thead
{
    void         (*th_expfunc)();
    void *        th_exparg;
    struct timer  *th_expired;
} thead_t;

/* Individual timer */
typedef struct timer
{
    unsigned char  tm_id;
    unsigned char  tm_offset;
    unsigned short tm_left;
    struct timer  *tm_next;
    struct timer **tm_back;
} timer_t;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\tftp.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    tftp.h

Abstract:

    Definitions for the tftp program.

Author:

    Mike Massa (mikemas)           Jan 31, 1992

Revision History:

    Who         When        What
    --------    --------    ----------------------------------------------
    mikemas     01-31-92     created

Notes:

--*/

/******************************************************************
 *
 *  SpiderTCP Socket Utilities
 *
 *  Copyright 1988  Spider Systems Limited
 *
 *  TFTP.H
 *
 *    Tftp and tftpd includes
 *
 *    CN_RQ, CN_LSTN, CN_RCV, CN_WAIT, CN_MKWRT, STRSAVE, UDP_ALLOC
 *    CN_ACK, LOGPKT, CN_SWAB, CN_CLOSE, CN_SEND, CN_RCVF, CN_ERR
 *    CN_LOG, CN_INFORM, TST_AND_CLR
 *
 *
 ******************************************************************/

/*
 *       /usr/projects/tcp/SCCS.rel3/rel/src/include/sys/snet/0/s.tftp.h
 *      @(#)tftp.h      5.3
 *
 *      Last delta created      14:07:57 3/4/91
 *      This file extracted     11:19:46 3/8/91
 *
 *      Modifications:
 *
 *      GSS 12/04/88    Integrated into Admin System II, all
 *                      projects
 */

/* This file contains the definitions for the TFTP connection control
 * block, which contains all the information pertaining to a connection.
 * A conn structure is allocated at connection open time and retained
 * until the connection is closed.  The routines in the file conn.c
 * are sufficient for dealing with connections.
 * It also contains the structure definition for tftp packets.
 */


/* A connection control block */

struct  conn    {
        SOCKET          netfd;          /* network file descriptor */
        int             type;           /* user or server connection */
        int             synced;         /* conn synchronized flag */
        unsigned int    block_num;      /* next block number */
        char *          last_sent;      /* previous packet sent */
        int             last_len;       /* size of previous packet */
        time_t          nxt_retrans;    /* when to retransmit */
        int             retrans;        /* number of retransmits */
        int             timeout;        /* retransmit timeout */
        char *          cur_pkt;        /* current packet (send or rcv) */
        int             cur_len;        /* current packet len */
        char *          last_rcv;       /* last received packet */
        int             rcv_len;        /* size of last rcvd. packet */
        char           *file;           /* file name */
        int             dir;            /* direction */
        int             mode;           /* transfer mode */
        char           *c_mode;         /* char. string mode */
        struct in_addr  fhost;          /* foreign host */
        int             fport;          /* foreign port for connection */
        int             lport;          /* local port for connection */
        int             intrace;        /* input packet trace flag */
        int             outtrace;       /* output packet trace flag */
        int             logging;        /* connection logging flag */
        int             our_blksize;    /* block size we want */
        int             blksize;        /* negotiated block size */
        int             base_timeout;   /* base timeout value */
        int             expecting_oack; /* we sent options in request */
};

/* connection constants */

#define TIMEOUT         1               /* initial retransmit timeout */
#define INITTIMEOUT     1               /* initial connection timeout */
#define MAX_TIMEOUT     30              /* max. retransmit timeout */
#define MAX_RETRANS     5               /* max. no. of retransmits */
#define DAEMON          0               /* a daemon connection */
#define USER            1               /* a user connection */
#define TMO             0               /* retransmitting due to timeout */
#define DUP             1               /* retransmitting due to duplicate */

#define DATALEN 1432                    /* size of data portion of tftp pkt */

/* tftp packet structure */

struct  tftp    {
        unsigned short  fp_opcode;      /* header */
        unsigned short  fp_blkno;       /* Block number */
        char            fp_blk[DATALEN];/* Data */
        char            dummy;
};

/* values for fp_opcode */

#define RRQ             1               /* Read Request */
#define WRQ             2               /* Write Request */
#define DATA            3               /* Data block */
#define DACK            4               /* Data Acknowledge */
#define ERROR           5               /* Error */
#define OACK            6               /* Options Acknowledge */

/* values for error codes in ERROR packets */

#define TEUNDEF         0               /* Not defined, see message (if any) */
#define TEFNF           1               /* File not found */
#define TEACESS         2               /* Access violation */
#define TEFULL          3               /* Disc full or allocation exceeded */
#define TETFTP          4               /* Illegal TFTP operation */
#define TETID           5               /* Unknown transfer ID */
#define TEEXISTS        6               /* File already exists */
#define TEUSER          7               /* No such user */
#define TEBADOPT        8               /* Bad options */

/* Random constants */

#define TFTPLEN sizeof(struct tftp)     /* max inet packet size */

#define READ            RRQ             /* read requested */
#define WRITE           WRQ             /* write requested */

#define NETASCII        0               /* netascii transfer mode */
#define IMAGE           1               /* image transfer mode */

#define INPKT           0               /* input packet */
#define OUTPKT          1               /* output packet */

#define TRUE            1
#define FALSE           0

/* extern declarations */


#include <stdio.h>

extern  struct  conn    *cn_rq();
extern  struct  conn    *cn_lstn();
extern  struct  tftp    *cn_rcv();
extern  struct  tftp    *cn_mkwrt();
extern  void            cn_ack();
extern  void            logpkt();
extern  void            cn_swab();
extern  void            cn_close();
extern  void            cn_send();
extern  void            cn_rcvf();
extern  void __cdecl   cn_log(const char *, int, ...);
extern  void __cdecl   cn_inform(const char *, ...);
extern  void            cn_err (register struct conn *, struct in_addr,
                                                        int, int, char *);
extern  char            *strsave();
extern  char            tst_and_clr();
extern  char *          udp_alloc();

struct tftp *
cn_wait(
        struct conn *cn,
        unsigned short opcode);

int
cn_parse(
        struct conn *,
        struct in_addr,
        int,
        char *,
        int);

int
cn_retrans(
        struct conn *,
        int
        );

int
cn_wrt(
        struct conn *,
        int);

int
cn_wrtf(
        struct conn *);

int
do_cmd(
        struct conn *);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\inc\sys\snet\uint.h ===
/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    uint.h

Abstract:

    This file contains type definitions used by STREAMS drivers.

Author:

    Eric Chin (ericc)           July 18, 1991

Revision History:

--*/


/******************************************************************
 *
 *  Copyright 1991  Spider Systems Limited
 *
 *  UINT.H
 *
 ******************************************************************/

/*
 *	 /usr/projects/spare/PBRAIN/SCCS/pbrainG/dev/src/include/sys/snet/0/s.uint.h
 *	@(#)uint.h	1.2
 *
 *	UINT.H
 *
 *	Last delta created	12:22:31 3/12/91
 *	This file extracted	08:53:39 7/10/91
 *
#ifdef MOD_HISTORY
 *
 *	Modifications:
 *
 *	JS	14 Jan 91	Added signed types.
#endif
 */

#ifndef _SYS_SNET_UINT_
#define _SYS_SNET_UINT_


/*
 * Fixed-length types
 */

typedef unsigned char   uint8;
typedef unsigned short  uint16;
typedef unsigned long   uint32;

typedef char   int8;
typedef short  int16;
typedef long   int32;

#endif /* _SYS_SNET_UINT_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\bootsnd.h ===
struct	DSPpatch {
	unsigned short *Start;				// address of start of sample
	unsigned short	Length;				// length of sample
	unsigned short	LoopStart;			// bytes from beg of sound to loop point 
	unsigned short	LoopLength;			// bytes form loop start to loop end
	unsigned short	LoopEnable;			// loop sound? T or F
	LPDSENVELOPEDESC		lpAmpEnvelope;
	LPDSENVELOPEDESC		lpMultiEnvelope;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\Blobs.cpp ===
///////////////////////////////////////////////////////////////////////////////
// File: Blobs.cpp
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#include <xtl.h>
#include "xbs_math.h"
#include "xbs_app.h"
#include "qrand.h"
#include "Blobs.h"


const LavaLampInterior* LLBlob::spLL = NULL;
QRand LavaLampInterior::m_QRand;


void LavaLampInterior::destroy()
{
//MTS	m_BlobRenderer.destroy();

	for (int i=0; i<NUM_LLBLOBS; i++)
	{
		m_Blobs[i].destroy();
	}


    if( m_dwPixelShader )
    {
        gpd3dDev->DeletePixelShader( m_dwPixelShader );
        m_dwPixelShader = 0;
    }

	if ( m_dwVertexShader )
	{
		gpd3dDev->DeleteVertexShader( m_dwVertexShader );
		m_dwVertexShader = 0;
	}
}



LLBlob::LLBlob()
{
	m_pBlobVB = NULL;
	m_pBlobIB = NULL;
	m_Temperature = 0.5f;
	Set(&m_Accel, 0.0f, 0.0f, 0.0f);
	Set(&m_Velocity, 0.0f, 0.0f, 0.0f);
	m_DeformationInertia = 0.3f;
}



void LLBlob::destroy()
{
	if (m_pBlobVB)
	{
		m_pBlobVB->Release();
		m_pBlobVB = NULL;
	}

	if (m_pBlobIB)
	{
		m_pBlobIB->Release();
		m_pBlobIB = NULL;
	}
}


void LavaLampInterior::InitPixelShader()
{
    if( m_dwPixelShader )
    {
        gpd3dDev->DeletePixelShader( m_dwPixelShader );
        m_dwPixelShader = 0;
    }

	m_dwPixelShader = gApp.loadPixelShader("D:\\Shaders\\blob.xpu");
}







void LavaLampInterior::create()
{
	LLBlob::spLL = this;


	m_ConicSectionCenterX = +0.04f;
	m_ConicSectionCenterY = -0.082f;

	m_NumConicSections = 2;
	m_ConicSectionBotZ[0] = -0.47f;
	m_ConicSectionBotZ[1] = -0.25f;
	m_ConicSectionBotZ[2] = +0.35f;

	m_ConicSectionRadius[0] = 0.11f;
	m_ConicSectionRadius[1] = 0.25f;
	m_ConicSectionRadius[2] = 0.12f;


	int i;
	for (i=0; i<m_NumConicSections; i++)
	{
		m_ConicSectionSlope[i] =	(m_ConicSectionRadius[i+1] - m_ConicSectionRadius[i+0]) /
									(m_ConicSectionBotZ[i+1]   - m_ConicSectionBotZ[i+0]);
		float norm = 1.0f / sqrtf(1 + m_ConicSectionSlope[i]*m_ConicSectionSlope[i]);
		m_ConicSectionNormalR[i] = norm * -1.0f;
		m_ConicSectionNormalZ[i] = norm * m_ConicSectionSlope[i];
	}


    // Initialize pixel shader
    InitPixelShader();

    DWORD dwShaderVertexDecl[] =
    {
        D3DVSD_STREAM( 0 ),
        D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),    // Position
        D3DVSD_END()
    };


	m_dwVertexShader = gApp.loadVertexShader("D:\\Shaders\\blob.xvu", dwShaderVertexDecl);



	float bot = m_ConicSectionBotZ[0];
	float sx = m_ConicSectionCenterX - 0.1f;
	float sy = m_ConicSectionCenterY - 0.1f;
	for (i=0; i<NUM_LLBLOBS; i++)
	{
		D3DVECTOR pos;
		D3DVECTOR4 color, base_color;
		Set(&pos, m_ConicSectionCenterX, m_ConicSectionCenterY, m_ConicSectionBotZ[m_NumConicSections>>1] );
		Set(&color, (i&0x04) ? 0.0f : 1.0f, (i&0x02) ? 0.0f : 1.0f, (i&0x01) ? 0.0f : 1.0f, 1.0f);
		Set(&base_color, 0.724f, 0.732f, 0.556f, 1.0f);
		
//MTS		m_Blobs[i].create(pos, color*0.1f + base_color*0.9f);
		m_Blobs[i].create(pos, base_color);
		m_Blobs[i].setSpecies(i);
	}


//MTS	m_BlobRenderer.create();
//MTS	m_BlobRenderer.init(this, &m_Blobs[0], NUM_LLBLOBS, 0.01f, 0.01f, m_ConicSectionCenterX, m_ConicSectionCenterY);

    return;
};


void LLBlob::calcFacePoint(D3DVECTOR* ppos, int face, int u, int v)
{
	float fu = (u==m_Subdivisions) ? +1.0f : -1.0f + m_fDivisionStep * ((float)u);
	float fv = (v==m_Subdivisions) ? +1.0f : -1.0f + m_fDivisionStep * ((float)v);
	switch(face)
	{
		case 0: Set(ppos, -1.0f, -fu, +fv); break;
		case 1: Set(ppos, +fv, -1.0f, -fu); break;
		case 2: Set(ppos, -fu, +fv, -1.0f); break;
		case 3: Set(ppos, +1.0f, +fu, +fv); break;
		case 4: Set(ppos, +fv, +1.0f, +fu); break;
		case 5: Set(ppos, +fu, +fv, +1.0f); break;
	}
}


void LLBlob::create(D3DVECTOR pos, D3DVECTOR4 color)
{
	// A blob is modeled as a subdivided cube.

	m_BlobColor = color;
	m_Pos = pos;
	Set(&m_Scale, 0.9f, 0.9f, 0.9f);
	m_DeformationInertia = spLL->fRand11() * 0.1f;


	m_fRadius = LavaLampInterior::fRand01();
	m_fRadius = 0.5f * (m_fRadius*m_fRadius + LavaLampInterior::fRand01());
	m_fRadius = 0.03f + 0.05f * m_fRadius;
	m_TemperatureAbsorbance = 0.05f / m_fRadius;	// is just representational

	m_Temperature = 0.5f + 0.2f * LavaLampInterior::fRand11();


	m_Subdivisions = 4;	// face is a grid of sd+1 quads square
	m_fDivisionStep = 2.0f / m_Subdivisions;

//MTS	m_dwNumVertices = 2*(subdivisions+2)*(subdivisions+2) + 4*subdivisions*(subdivisions+1);	// number of unique vertices
	m_dwNumVertices = 6*(m_Subdivisions+1)*(m_Subdivisions+1);
	m_dwNumIndices = 6*(m_Subdivisions)*(m_Subdivisions)*2*3;


	gpd3dDev->CreateVertexBuffer( m_dwNumVertices * sizeof(BlobVertex), 0, 0, 0, &m_pBlobVB);
	gpd3dDev->CreateIndexBuffer(  m_dwNumIndices  * sizeof(WORD), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_DEFAULT, &m_pBlobIB);


	BlobVertex* p_verts;
	WORD* p_indices;

	m_pBlobVB->Lock(0, 0, (BYTE**)&p_verts, 0);
	m_pBlobIB->Lock(0, 0, (BYTE**)&p_indices, 0);



	// Create vertices.
	BlobVertex* p_vert = &p_verts[0];
	for (int k=0; k<6; k++)
	{
		for (int j=0; j<=m_Subdivisions; j++)
		{
			for (int i=0; i<=m_Subdivisions; i++)
			{
				calcFacePoint(&p_vert->pos, k, i, j);
				float oo_dist = 1.0f / sqrtf(p_vert->pos.x*p_vert->pos.x + p_vert->pos.y*p_vert->pos.y + p_vert->pos.z*p_vert->pos.z);
				p_vert->pos.x *= oo_dist;
				p_vert->pos.y *= oo_dist;
				p_vert->pos.z *= oo_dist;
				p_vert++;
			}
		}
	}


	// Create indices.
	WORD* p_index = &p_indices[0];
	for (int k=0; k<6; k++)
	{
		int face_start = k*(m_Subdivisions+1)*(m_Subdivisions+1);
		for (int j=0; j<m_Subdivisions; j++)
		{
			for (int i=0; i<m_Subdivisions; i++)
			{
				*(p_index++) = face_start + (j+0)*(m_Subdivisions+1) + (i+0);
				*(p_index++) = face_start + (j+0)*(m_Subdivisions+1) + (i+1);
				*(p_index++) = face_start + (j+1)*(m_Subdivisions+1) + (i+0);

				*(p_index++) = face_start + (j+1)*(m_Subdivisions+1) + (i+1);
				*(p_index++) = face_start + (j+1)*(m_Subdivisions+1) + (i+0);
				*(p_index++) = face_start + (j+0)*(m_Subdivisions+1) + (i+1);
			}
		}
	}



	m_pBlobVB->Unlock();
	m_pBlobIB->Unlock();
}




void LavaLampInterior::advanceTime(float fElapsedTime, float fDt)
{
	if (fDt < 0.0f) fDt = 0.0f;
	if (fDt > 0.1f) fDt = 0.1f;

//MTS	m_BlobRenderer.advanceTime(fElapsedTime, fDt);

	for (int i=0; i<NUM_LLBLOBS; i++)
	{
		m_Blobs[i].advanceTime(fElapsedTime, fDt);
	}

	recomputeSpecie();
}


void LLBlob::advanceTime(float fElapsedTime, float fDt)
{
	float ambient_temp = spLL->getTemperature(m_Pos.z);
	float scale = 0.002f * m_TemperatureAbsorbance*m_TemperatureAbsorbance * fDt;
	m_Temperature += scale * (ambient_temp - m_Temperature);

	// For purposes of the simulation, water stays at a constant density.
	// A blob's density is equal to water at temperature 0.5f. For each unit
	// of temperature difference, an acceleration of 1.0 m/s/s is applied.
	m_Velocity.z += fDt * 1.0f * (m_Temperature-0.5f);

	m_Accel.x += LavaLampInterior::fRand11() * fDt;
	m_Accel.y += LavaLampInterior::fRand11() * fDt;
	m_Accel.z += LavaLampInterior::fRand11() * fDt;
//MTS	m_Velocity.x += LavaLampInterior::fRand11() * fDt * fDt;
//MTS	m_Velocity.y += LavaLampInterior::fRand11() * fDt * fDt;
//MTS	m_Velocity.z += LavaLampInterior::fRand11() * fDt * fDt;

	m_Accel.x = min(+0.05f, max(-0.05f, m_Accel.x));
	m_Accel.y = min(+0.05f, max(-0.05f, m_Accel.y));
	m_Accel.z = min(+0.05f, max(-0.05f, m_Accel.z));

	if (Length2(m_Accel) > 1.0f) Scale(&m_Accel, 0.96f);

	// Friction moving through water.
	AddScaled(&m_Velocity, m_Accel, fDt);
	float vel2 = Length2(m_Velocity);
	Scale(&m_Velocity, 1.0f - fDt * 120.0f * vel2);

	AddScaled(&m_Pos, m_Velocity, fDt);


	// Do collisions.
	spLL->collide(this, m_Pos.x, m_Pos.y, m_Pos.z, m_fRadius, fDt);


	// Adjust render wobble.
	m_Scale.x += m_DeformationInertia * fDt * m_TemperatureAbsorbance;
	m_Scale.y += m_DeformationInertia * fDt * m_TemperatureAbsorbance;
	m_Scale.z = 0.9f - (m_Scale.x - 0.9f) * (0.9f+0.9f)*0.9f / (0.9f*0.9f);

	float accel;
	if (m_DeformationInertia > 0.0f)
	{
		accel = 0.91f - m_Scale.x;
	}
	else
	{
		accel = 0.89f - m_Scale.x;
	}

	m_DeformationInertia += 20.0f * accel * fDt;
	m_DeformationInertia = max(-0.3f, min(+0.3f, m_DeformationInertia));
}


float LavaLampInterior::getTemperature(float z) const
{
	float dz = -0.5f + (z - m_ConicSectionBotZ[0]) / (m_ConicSectionBotZ[m_NumConicSections] - m_ConicSectionBotZ[0]);
	dz *= 2.6f;
	dz *= dz*dz;
	return max(0.0f, min(1.0f, 0.5f - dz));
}


bool LavaLampInterior::collideWithCaps(LLBlob* pllb, float x, float y, float z, float radius) const
{
	if (z - radius < m_ConicSectionBotZ[0])
	{
		D3DVECTOR pos, norm;
		Set(&pos, x, y, m_ConicSectionBotZ[0] + radius + 0.001f);
		Set(&norm, 0.0f, 0.0f, +1.0f);
		pllb->collided(pos, norm);
		return true;
	}

	if (z + radius > m_ConicSectionBotZ[m_NumConicSections])
	{
		D3DVECTOR pos, norm;
		Set(&pos, x, y, m_ConicSectionBotZ[m_NumConicSections] - radius - 0.001f);
		Set(&norm, 0.0f, 0.0f, -1.0f);
		pllb->collided(pos, norm);
		return true;
	}
	return false;
}


void LavaLampInterior::collide(LLBlob* pllb, float x, float y, float z, float radius, float dt) const
{
	// Bounce off the caps.
	if (collideWithCaps(pllb, x, y, z, radius))
	{
		z = pllb->getPos().z;
	}

	x -= m_ConicSectionCenterX;
	y -= m_ConicSectionCenterY;
	float r = sqrtf( x*x + y*y );

	// Check the conic sections. Check the surfaces first, the corners will be checked afterwards.
	int i;
	bool b_hit_wall = false;
	for (i=0; i<m_NumConicSections; i++)
	{
		if (m_ConicSectionBotZ[i+1] < z - radius) continue;
		if (m_ConicSectionBotZ[i+0] > z + radius) break;

		// Sphere overlaps the section at least somewhat. Find the nearest
		// point on the cone surface and see if that is within the range.
		float dz = z - m_ConicSectionBotZ[i];
		float dr = r - m_ConicSectionRadius[i];

		float overlap = radius - (dr*m_ConicSectionNormalR[i] + dz*m_ConicSectionNormalZ[i]);
		if (overlap < 0.0f) continue;

		// Calculate distance along surface to the nearest point of collision.
		float s = dr*m_ConicSectionNormalZ[i] - dz*m_ConicSectionNormalR[i];
		if (s<0.0f) continue;
		float height = m_ConicSectionBotZ[i+1]-m_ConicSectionBotZ[i];
		if (s*s > height*height * (1.0f + m_ConicSectionSlope[i]*m_ConicSectionSlope[i])) continue;

		// Collision.
		float nz = m_ConicSectionNormalZ[i];
		float oo_r = 1.0f / max(0.001f, r);
		float nx = x * oo_r * m_ConicSectionNormalR[i];
		float ny = y * oo_r * m_ConicSectionNormalR[i];

		D3DVECTOR pos, norm;
		x += nx*overlap;
		y += ny*overlap;
		z += nz*overlap;
		r = sqrtf( x*x + y*y );	// recompute radius
		Set(&pos, m_ConicSectionCenterX + x, m_ConicSectionCenterY + y, z);
		Set(&norm, nx, ny, nz);
		pllb->collided(pos, norm);
		b_hit_wall = true;
	}


	// Check the corners.
	if (!b_hit_wall) for (i=0; i<m_NumConicSections; i++)
	{
		if (m_ConicSectionBotZ[i+1] < z - radius) continue;
		if (m_ConicSectionBotZ[i+0] > z + radius) break;

		float dz = z - m_ConicSectionBotZ[i];
		float dr = r - m_ConicSectionRadius[i];

		if (dz*dz + dr*dr > radius*radius) continue;
		float dist = sqrtf(dz*dz + dr*dr);
		float overlap =  radius - dist;

		float f_norm = 1.0f / max(0.001f, dist);
		float nz = -dz * f_norm;
		float nr = -dr * f_norm;

		float oo_r = 1.0f / max(0.001f, r);
		float nx = x * oo_r * nr;
		float ny = y * oo_r * nr;

		D3DVECTOR pos, norm;
		x += nx*overlap;
		y += ny*overlap;
		z += nz*overlap;
		r = sqrtf( x*x + y*y );	// recompute radius
		Set(&pos, m_ConicSectionCenterX + x, m_ConicSectionCenterY + y, z);
		Set(&norm, nx, ny, nz);
		pllb->collided(pos, norm);
		b_hit_wall = true;
	}


	// Check other blobs.
	for (i=0; i<NUM_LLBLOBS; i++)
	{
		if (&m_Blobs[i] == pllb) continue;
		D3DVECTOR delta;
		Sub(m_Blobs[i].getPos(), pllb->getPos(), &delta);
		float rad = (m_Blobs[i].getRadius() + pllb->getRadius());

		if (Length2(delta) > rad*rad) continue;
		pllb->interactWithBlob(&m_Blobs[i], dt);
	}

	if (collideWithCaps(pllb, x + m_ConicSectionCenterX, y + m_ConicSectionCenterY, z, radius))
	{
		// Should never happen with convex hull.
		z = pllb->getPos().z;
	}
}


void LLBlob::collided(D3DVECTOR pos, D3DVECTOR normal)
{
	D3DVECTOR diff;
	Sub(pos, m_Pos, &diff);
	if (Length2(diff) > 0.5f * m_fRadius * m_fRadius)
	{
		int a = 0;
	}

	float dot;
	dot = Dot(normal, m_Accel);
	if (dot<0.0f) AddScaled(&m_Accel, normal, -dot);

	dot = Dot(normal, m_Velocity);
	if (dot<0.0f) AddScaled(&m_Velocity, normal, -dot);

	m_Pos = pos;
}


void LLBlob::interactWithBlob(const LLBlob* pllb, float dt)
{
	// Attract at range, repel when close.

	float mass_b = pllb->m_fRadius;
	mass_b *= mass_b*mass_b;

	D3DVECTOR delta;
	Sub(pllb->getPos(), getPos(), &delta);
	float dist2 = Length2(delta);
	if (dist2 < 0.000001f) return;

	D3DVECTOR delta_v;
	Sub(pllb->m_Velocity, m_Velocity, &delta_v);
	float f_part_mag = Dot(delta_v, delta);


	if (getSpecies() == pllb->getSpecies())
	{
		// Same species.
		float extreme_rad = (m_fRadius + pllb->m_fRadius);
		float attract = mass_b * dt * 10000.0f * ((f_part_mag > 0.0f) ? 1.0f : 0.5f);
		AddScaled(&m_Velocity, delta, attract);
//MTS		float attract = ((1.0f / dist2) - (1.0f / (extreme_rad*extreme_rad))) * mass_b * dt * 5.0f;
//MTS		AddScaled(&m_Accel, delta, attract);

		// Should try adding to the velocity directly...

		extreme_rad *= 0.6f;
		float extreme_rad2 = extreme_rad*extreme_rad;
		float repel = ((1.0f / min(extreme_rad2*0.04f, dist2)) - (1.0f / extreme_rad2)) * mass_b * dt * 5.0f;
		repel *=  ((f_part_mag > 0.0f) ? 0.3f : 1.0f);
		if (repel > 0.0f) AddScaled(&m_Velocity, delta, -repel);
//MTS		float repel = ((1.0f / min(extreme_rad2*0.04f, dist2)) - (1.0f / extreme_rad2)) * mass_b * dt * 500.0f;
//MTS		if (repel > 0.0f) AddScaled(&m_Accel, delta, -repel);
	}
	else
	{
		// Different specie.
		float extreme_rad2 = (m_fRadius + pllb->m_fRadius);
		extreme_rad2 *= extreme_rad2;
		float repel = ((1.0f / min(extreme_rad2*0.04f, dist2)) - (1.0f / extreme_rad2)) * mass_b * dt * 1.0f;
		repel *=  ((f_part_mag > 0.0f) ? 0.3f : 1.0f);
		AddScaled(&m_Velocity, delta, -repel);
//MTS		float repel = ((1.0f / min(extreme_rad2*0.04f, dist2)) - (1.0f / extreme_rad2)) * mass_b * dt * 50.0f;
//MTS		AddScaled(&m_Accel, delta, -repel);
	}
}



void LavaLampInterior::recomputeSpecie()
{
	int prev_species[NUM_LLBLOBS];
	int i;
	for (i=0; i<NUM_LLBLOBS; i++)
	{
		prev_species[i] = m_Blobs[i].getSpecies();
		m_Blobs[i].setSpecies(i);
	}

	for (i=0; i<NUM_LLBLOBS-1; i++)
	{
		for (int j=i+1; j<NUM_LLBLOBS; j++)
		{
			D3DVECTOR diff;
			Sub(m_Blobs[i].getPos(), m_Blobs[j].getPos(), &diff);
			float dist2 = Length2(diff);
			if (prev_species[i] == prev_species[j])
			{
				// Were connected.
				float radii2 = m_Blobs[i].getRadius() + m_Blobs[j].getRadius();
				radii2 *= radii2;
				if (dist2 < 0.9f*0.9f * radii2)
				{
					// Are still touching. Maintain the same specie.
					m_Blobs[j].setSpecies( m_Blobs[i].getSpecies() );
				}
			}
			else
			{
				// Were not connected.
				float check_rad = max(m_Blobs[i].getRadius(), m_Blobs[j].getRadius());
				check_rad += 0.7f * min(m_Blobs[i].getRadius(), m_Blobs[j].getRadius());
				if (dist2 < check_rad*check_rad)
				{
					// Connect them only if they are in the top or bottom.
					bool b_close_to_end = false;
					float z = m_Blobs[i].getPos().z;
					float r = m_Blobs[i].getRadius();
					b_close_to_end = b_close_to_end || (z - m_ConicSectionBotZ[0] < 1.5f * r);
					b_close_to_end = b_close_to_end || (m_ConicSectionBotZ[m_NumConicSections] - z < 1.5f * r);
					z = m_Blobs[j].getPos().z;
					r = m_Blobs[j].getRadius();
					b_close_to_end = b_close_to_end || (z - m_ConicSectionBotZ[0] < 1.5f * r);
					b_close_to_end = b_close_to_end || (m_ConicSectionBotZ[m_NumConicSections] - z < 1.5f * r);

					if (b_close_to_end)
					{
						m_Blobs[j].setSpecies( m_Blobs[i].getSpecies() );
					}
				}
			}
		}
	}

	for (i=0; i<NUM_LLBLOBS; i++)
	{
		m_Blobs[i].setSpecies( m_Blobs[m_Blobs[i].getSpecies()].getSpecies() );
	}


	// For debug purposes, color code the blobs based on specie.
	for (i=0; i<NUM_LLBLOBS; i++)
	{
		D3DVECTOR4 color, base_color;
		int s = m_Blobs[i].getSpecies();
		Set(&color, (s&0x04) ? 0.0f : 1.0f, (s&0x02) ? 0.0f : 1.0f, (s&0x01) ? 0.0f : 1.0f, 1.0f);
		Set(&base_color, 0.724f, 0.732f, 0.556f, 1.0f);
		color.x = color.x*0.05f + base_color.x*0.95f;
		color.y = color.y*0.05f + base_color.y*0.95f;
		color.z = color.z*0.05f + base_color.z*0.95f;
		color.w = color.w*0.05f + base_color.w*0.95f;
//MTS		m_Blobs[i].setColor(color);
	}
}




void LavaLampInterior::render()
{
    // Set default states
    gpd3dDev->SetRenderState( D3DRS_LIGHTING, FALSE );
    gpd3dDev->SetRenderState( D3DRS_ZENABLE,  TRUE );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSU,  D3DTADDRESS_WRAP );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSV,  D3DTADDRESS_WRAP );

    gpd3dDev->SetRenderState( D3DRS_ALPHATESTENABLE, TRUE );
    gpd3dDev->SetRenderState( D3DRS_ALPHAFUNC,       D3DCMP_GREATEREQUAL );
    gpd3dDev->SetRenderState( D3DRS_ALPHAREF,        0x00000001 );
    gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    gpd3dDev->SetRenderState( D3DRS_SRCBLEND,         D3DBLEND_SRCALPHA );
    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,        D3DBLEND_INVSRCALPHA );
//MTS    gpd3dDev->SetRenderState( D3DRS_FILLMODE,         D3DFILL_WIREFRAME );

    gpd3dDev->SetTexture( 0, gApp.pNormalCubeMap );


    gpd3dDev->SetVertexShader( m_dwVertexShader );
    gpd3dDev->SetPixelShader( m_dwPixelShader );



    // Note: when passing matrices to a vertex shader, we transpose them, since
    // matrix multiplies are done with dot product operations on the matrix rows.

	D3DMATRIX matFinal,matTmp;
	MulMats(gApp.theCamera.matWTC,gApp.theCamera.matProj,&matTmp);
	SetTranspose(matTmp,&matFinal);
	gpd3dDev->SetVertexShaderConstant(4,(CONST void *)&matFinal,4);


	//; Expected vertex shaders constants
	//;    c0-c3    = Transpose of world matrix
	//;    c4-c7    = Transpose of view*projection matrix
	//;    c8       = some constants, x=0, y=1, z=2, w=0.5
	D3DVECTOR4 val;

	// Constants
	Set(&val, 0.0f, 1.0f, 2.0f, 0.5f);
	gpd3dDev->SetVertexShaderConstant( 8, &val, 1 );



//MTS	m_BlobRenderer.render();

    
	for (int i=0; i<NUM_LLBLOBS; i++)
	{
		m_Blobs[i].render();
	}


    // Restore the state
    gpd3dDev->SetPixelShader( NULL );
    gpd3dDev->SetVertexShader( NULL );

	gpd3dDev->SetTexture(0, NULL);
}



void LLBlob::render()
{
	// Make the object to World transform. Transpose it.
    D3DMATRIX matT, mat;

	SetIdentity( &mat );
	mat.m[0][0] = m_Scale.x * m_fRadius;
	mat.m[1][1] = m_Scale.y * m_fRadius;
	mat.m[2][2] = m_Scale.z * m_fRadius;
	mat.m[3][0] = m_Pos.x;
	mat.m[3][1] = m_Pos.y;
	mat.m[3][2] = m_Pos.z;

	SetTranspose( mat, &matT );
    gpd3dDev->SetVertexShaderConstant( 0, &matT, 4 );


	// Expected pixel shader constants
	//; c0          = light 1 direction
	//; c1          = light 2 direction
	//; c2          = base blob color
	//; c3          = ambient color
	D3DVECTOR4 val;
	Set(&val, 0.5f, 0.6f, 0.5f, 1.0f );
	gpd3dDev->SetPixelShaderConstant( 0, &val, 1 );

	Set(&val, 0.5f, 0.4f, 0.5f, 1.0f );
	gpd3dDev->SetPixelShaderConstant( 1, &val, 1 );

	// Blob color
	gpd3dDev->SetPixelShaderConstant( 2, &m_BlobColor, 1 );

	// Ambient light
	val = m_BlobColor;
	val.x *= 0.6f;
	val.y *= 0.6f;
	val.z *= 0.6f;
	gpd3dDev->SetPixelShaderConstant( 3, &val, 1 );


    // This could be set in the lava lamp, but we might have blobs with different numbers of vertices.
	gpd3dDev->SetIndices( m_pBlobIB, 0 );
    gpd3dDev->SetStreamSource( 0, m_pBlobVB, sizeof(BlobVertex) );

    gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLELIST, 0, m_dwNumVertices, 
                                        0, m_dwNumIndices/3 );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\Blobs.h ===
///////////////////////////////////////////////////////////////////////////////
// File: Blobs.h
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#ifndef BLOBS_H
#define BLOBS_H


#include "render_object.h"
#include "qrand.h"



struct BlobVertex
{
	D3DVECTOR pos;
    // D3DVECTOR normal;		// sphere with radius 1, normal is the pos!
	// Diffuse color is set as a constant.
};

   
class LavaLampInterior;


class LLBlob : public RenderObject
{
protected:
    DWORD					m_dwNumVertices;
    DWORD					m_dwNumIndices;

    LPDIRECT3DVERTEXBUFFER8 m_pBlobVB;
    LPDIRECT3DINDEXBUFFER8  m_pBlobIB;

	D3DVECTOR4				m_BlobColor;


	D3DVECTOR				m_Pos;
	D3DVECTOR				m_Scale;
	float					m_DeformationInertia;
	FLOAT					m_fRadius;


	float					m_Temperature;
	float					m_TemperatureAbsorbance;
	D3DVECTOR				m_Velocity;
	D3DVECTOR				m_Accel;


	int						m_Subdivisions;		// number of quads in a direction for each face
	float					m_fDivisionStep;	// distance on cube face that a division spans

	int						m_Species;

	// Cube has dimensions from -1 to +1.
	void					calcFacePoint(D3DVECTOR* ppos, int face, int u, int v);


public:
	LLBlob();

	void					create(D3DVECTOR pos, D3DVECTOR4 color);

	virtual void create() {}
	virtual void destroy();

	virtual void render();
	virtual void advanceTime(float fElapsedTime, float fDt);


	void			collided(D3DVECTOR pos, D3DVECTOR normal);
	void			interactWithBlob(const LLBlob* pllb, float dt);

	D3DVECTOR		getPos() const { return m_Pos; }
	float			getRadius() const { return m_fRadius; }
	float			getRadius2() const { return m_fRadius*m_fRadius; }

	int				getSpecies() const { return m_Species; }
	void			setSpecies(int s) { m_Species = s; }

	void			setColor(D3DVECTOR4 color) { m_BlobColor = color; }
	const D3DVECTOR4& getColor() const { return m_BlobColor; }


	static const LavaLampInterior* spLL;
};


class LavaLampInterior : public RenderObject
{
protected:
	enum { NUM_LLBLOBS = 64 };
	LLBlob m_Blobs[NUM_LLBLOBS];

    DWORD                   m_dwVertexShader;   // Vertex shader handle
    DWORD					m_dwPixelShader;	// Handle for pixel shader

	LPDIRECT3DCUBETEXTURE8	m_pNormCubemap;
	LPDIRECT3DDEVICE8		m_pd3dDevice;

	void					InitPixelShader();

	enum { MAX_CONIC_SECTIONS = 32 };
	int						m_NumConicSections;
	float					m_ConicSectionCenterX, m_ConicSectionCenterY;
	float					m_ConicSectionBotZ[MAX_CONIC_SECTIONS+1];
	float					m_ConicSectionRadius[MAX_CONIC_SECTIONS+1];
	float					m_ConicSectionSlope[MAX_CONIC_SECTIONS];	// dr/dz
	float					m_ConicSectionNormalR[MAX_CONIC_SECTIONS];	// -1, normalized
	float					m_ConicSectionNormalZ[MAX_CONIC_SECTIONS];	// slope, normalized

	static QRand			m_QRand;



public:

	virtual bool isVisible() { return true; }
	virtual void create();
	virtual void destroy();

	virtual void render();
	virtual void advanceTime(float fElapsedTime, float fDt);


	float	getBottom() const { return m_ConicSectionBotZ[0]; }
	float	getTop() const { return m_ConicSectionBotZ[m_NumConicSections+1]; }

	float	getRadius(float z) const
	{
		if (z < m_ConicSectionBotZ[0]) return 0.0f;
		for (int i=1; i<=m_NumConicSections; i++)
		{
			if (m_ConicSectionBotZ[i+1] < z) continue;
			float diff = m_ConicSectionBotZ[i+1] - m_ConicSectionBotZ[i];
			float s = (z - m_ConicSectionBotZ[i]) / diff;
			return m_ConicSectionRadius[i] + s*(m_ConicSectionRadius[i+1] - m_ConicSectionRadius[i]);
		}
		return 0.0f;
	}


	// Temperature is 1.0f at bottom, ramps to 0.0f at top.
	float getTemperature(float z) const;

	void collide(LLBlob* pllb, float x, float y, float z, float radius, float dt) const;
	bool collideWithCaps(LLBlob* pllb, float x, float y, float z, float radius) const;


	void recomputeSpecie();

	static inline float fRand01();
	static inline float fRand11();
};


#define LLI_RAND_MAX  0x00010000
#define LLI_RAND_MASK 0x0000FFFF

float LavaLampInterior::fRand01()
{
	static float mul = 1.0f / ((float)LLI_RAND_MAX);
	return ((float)(m_QRand.Rand()&LLI_RAND_MASK)) * mul;
}

float LavaLampInterior::fRand11()
{
	static float mul = 2.0f / ((float)LLI_RAND_MAX);
	return (((float)(m_QRand.Rand()&LLI_RAND_MASK)) * mul) - 1.0f;
}



#endif // BLOBS_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\bootsound.cpp ===
//depot/xbox/private/ntos/ani2/bootsound.cpp#7 - edit change 15970 (text)
/*
 *  Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 */



#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#include <nt.h>
#include <ntrtl.h>
#include <nturtl.h>
#include <stddef.h>
#include <ntos.h>
#include <pci.h>

#ifdef __cplusplus
}
#endif // __cplusplus

#include "xtl.h"
#include "xdbg.h"
#include "bootsound.h"

#ifdef STARTUPANIMATION

#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")

// Tell linker to put bootsound code and data into INIT section
#pragma comment(linker, "/merge:DSOUND=INIT")

#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif //STARTUPANIMATION

#if DBG
EXTERN_C g_dwDirectSoundPoolMemoryUsage;
EXTERN_C g_dwDirectSoundPhysicalMemoryUsage;
#endif

EXTERN_C SHORT system_clock_music;

KTIMER    g_BootSoundTimer;
KDPC      g_BootSoundDpc;

VOID
BootSoundDpc(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemArgument1,
    IN PVOID SystemArgument2
    )
{
	system_clock_music++;
	sos_main();
    return;
}


void BootSound_Start(){
    LARGE_INTEGER dueTime;

    dueTime.QuadPart = 0;

  	do_sos_init_return();

    KeInitializeTimerEx(&g_BootSoundTimer,NotificationTimer);
    KeInitializeDpc(&g_BootSoundDpc,BootSoundDpc,NULL);

    KeSetTimerEx(&g_BootSoundTimer,
                 dueTime,
                 5,
                 &g_BootSoundDpc);
}


// 
// here's our main sos worker thread.  This needs to get called regularly
// it does all the sequencing and writing to the sound chip to make noise
//
// not true...we create a worker thread instead in the init routine



void BootSound_Stop(void){

    KeCancelTimer(&g_BootSoundTimer);

    //
    // free dsound objects
    //

    dev_cleanup();

#if DBG
    //
    // check if we leaked any mem
    //

    ASSERT(g_dwDirectSoundPoolMemoryUsage == 0);
    ASSERT(g_dwDirectSoundPhysicalMemoryUsage == 0);

#endif

}


extern "C" int _cdecl _purecall(
	void
	)
{
	_asm int 3; return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\animate.c ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    animate.c

Abstract:

    Startup animation implementation.

--*/

#include <stddef.h>

#pragma code_seg("INIT")
#pragma data_seg("INIT_RW")
#pragma const_seg("INIT_RD")

#include "ntos.h"
#include "stdio.h"
#include "stdlib.h"
#include "wtypes.h"

#include "ani.h"

// Tell linker to put startup animation code and data into INIT section
#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")
#pragma comment(linker, "/merge:D3D=INIT")
#pragma comment(linker, "/merge:D3D_RD=INIT")
#pragma comment(linker, "/merge:D3D_RW=INIT")
#pragma comment(linker, "/merge:XGRPH=INIT")
#pragma comment(linker, "/merge:XGRPH_RD=INIT")

// We always want to link with the animation code, so that we can
// keep the build from breaking. Thats why we use a global to
// decide whether to run the animation or not. The global tricks
// the linker into linking in all the code the animation uses.

#ifdef NOANI
BOOL gBootAnimation_DoAnimation = FALSE;
#else
BOOL gBootAnimation_DoAnimation = TRUE;
#endif

#ifdef BOOTSOUND
BOOL gBootAnimation_DoSound = TRUE;
#else
BOOL gBootAnimation_DoSound = FALSE;
#endif

// Background animation thread.
HANDLE g_hThread;

// Entrypoing into the animation thread.
VOID AnipStartAnimationThread(PKSTART_ROUTINE StartRoutine, PVOID StartContext);

// Main animation routine as defined in the animation library.
VOID AnipRunAnimation();

#define CONTIGUOUS_BLOCK_SIZE           (5 * 1024 * 1024 / 2)
#define AGP_APERTURE_BYTES              (64*1024*1024)
#define INSTANCE_MEM_MAXSIZE            (20*1024)
#define NV_INSTANCE_SIZE                (INSTANCE_MEM_MAXSIZE)

//------------------------------------------------------------------------
// Starts the animation which will run on a background thread.  This API
// returns immediately.
//

BOOL g_bShortVersion;

void AniStartAnimation(BOOLEAN fShort)
{
    NTSTATUS Status;

    if (gBootAnimation_DoAnimation){

        g_bShortVersion = fShort;

        Status = PsCreateSystemThreadEx(&g_hThread,
                                        0,
                                        0x4000,  // Stack size, 16K
                                        0,
                                        NULL,
                                        NULL,
                                        NULL,
                                        FALSE,
                                        FALSE,
                                        AnipStartAnimationThread);

        if (!NT_SUCCESS(Status))
        {
            // RIP(("AniStartAnimation - Unable to create thread."));
            g_hThread = NULL;
        }
    }
}

//------------------------------------------------------------------------
// Shut down the animation.  This will block until the animation finishes.
//
void AniTerminateAnimation()
{
    if (g_hThread)
    {
        NTSTATUS Status;
#if DBG
        int start = NtGetTickCount();
#endif

        // Wait for it to go away.
        Status = NtWaitForSingleObjectEx(g_hThread, KernelMode, FALSE, NULL);

#if DBG
        DbgPrint("Boot animation wait %d\n", NtGetTickCount() - start);

        if (Status == STATUS_TIMEOUT)
        {
            //RIP(("AniTerminateAnimation - Animation is stuck!"));
        }
#endif

        NtClose(g_hThread);

        g_hThread = NULL;
    }
}

void AnipBreak()
{
#if DBG
   _asm int 3;
#endif
}

#if DBG
int gcMemAllocsContiguous = 0;
#endif

//------------------------------------------------------------------------
// Blocks until the animation has completed (until the animation is ready
// to display the Microsoft logo).
//
void AniBlockOnAnimation(void)
{
    extern KEVENT g_EventLogoWaiting;

    NTSTATUS status;
    PETHREAD ThreadObject;
    PVOID WaitObjects[2];
    KWAIT_BLOCK WaitBlocks[2];

    if (g_hThread)
    {
        status = ObReferenceObjectByHandle(g_hThread, &PsThreadObjectType,
            (PVOID*)&ThreadObject);

        if (NT_SUCCESS(status))
        {
            WaitObjects[0] = ThreadObject;
            WaitObjects[1] = &g_EventLogoWaiting;

            KeWaitForMultipleObjects(2, WaitObjects, WaitAny, Executive,
                KernelMode, FALSE, NULL, WaitBlocks);

            ObDereferenceObject(ThreadObject);
        }
    }
}

//------------------------------------------------------------------------
// MemAllocContiguous
//
void *MemAllocContiguous(size_t Size, DWORD Alignment)
{
#if DBG
    gcMemAllocsContiguous++;
#endif

    return MmAllocateContiguousMemoryEx(
            Size,
            0,
            AGP_APERTURE_BYTES - NV_INSTANCE_SIZE,
            Alignment,
            PAGE_READWRITE | PAGE_WRITECOMBINE);
}

//------------------------------------------------------------------------
// MemFreeContiguous
//
void MemFreeContiguous(void *pv)
{
#if DBG
    if (gcMemAllocsContiguous <= 0)
    {
        AnipBreak();
    }
    gcMemAllocsContiguous--;
#endif

    MmFreeContiguousMemory(pv);
}

//------------------------------------------------------------------------
// Main animation procedure.  Defers to the startup animation library.
//
VOID AnipStartAnimationThread(
    PKSTART_ROUTINE StartRoutine, 
    PVOID StartContext
    )
{
    AnipRunAnimation();

    // Make this thread go away.
    PsTerminateSystemThread(0);
}

///////////////////////////////////////////////////////////////////////////////
// Defined so we don't have to pull libc in
typedef void (__cdecl *_PVFV)(void);

int __cdecl atexit(_PVFV func)
{
    return 0;
}

///////////////////////////////////////////////////////////////////////////////
// Define a couple of debug-only methods used in XGRAPHICS that normally
// are implemented in XTL.

#ifdef STARTUPANIMATION

long __cdecl _ftol2(float x)
{
    DWORD result[2];
    unsigned short oldcw;
    unsigned short newcw;

    _asm
    {
        fstcw   [oldcw]         ; get control word
        fwait                   ; synchronize

        mov ax, [oldcw]         ; round mode saved
        or  ah, 0ch             ; set chop rounding mode
        mov [newcw], ax         ; back to memory

        fldcw   [newcw]         ; reset rounding
        fistp   qword ptr [result]  ; store chopped integer
        fldcw   [oldcw]         ; restore rounding

        mov eax, dword ptr [result]
        mov edx, dword ptr [result+4]
    }
}

#define D_EXP(x) ((unsigned short *)&(x)+3)
#define D_HI(x) ((unsigned long *)&(x)+1)
#define D_LO(x) ((unsigned long *)&(x))

#define IS_D_QNAN(x)    ((*D_EXP(x) & 0x7ff8) == 0x7ff8)
#define IS_D_SNAN(x)    ((*D_EXP(x) & 0x7ff8) == 0x7ff0 && \
                         (*D_HI(x) << 13 || *D_LO(x)))
                         
int __cdecl _isnan(double x)
{
    if (IS_D_SNAN(x) || IS_D_QNAN(x)) {
        return 1;
    }
    return 0;
}

VOID
XDebugError(PCHAR Module, PCHAR Format, ...)
{
    _asm int 3;
}

void Sleep(DWORD Milliseconds)
{
    _asm int 3;
}

VOID
OutputDebugStringA(
    IN LPCSTR lpOutputString
    )
{
    DbgPrint((PSTR)lpOutputString);
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\BlobRenderer.cpp ===
///////////////////////////////////////////////////////////////////////////////
// File: BlobRenderer.cpp
//
// Copyright 2001 Pipeworks Software
//
// WORK HALTED: Patent issues
//
///////////////////////////////////////////////////////////////////////////////
#include <xtl.h>
#include "xbs_math.h"
#include "xbs_app.h"
#include "Blobs.h"
#include "BlobRenderer.h"


///////////////////////////////////////////////////////////////////////////////
#define LLI_RAND_MAX  0x00010000
#define LLI_RAND_MASK 0x0000FFFF
///////////////////////////////////////////////////////////////////////////////
float FRand01()
{
	static QRand qrand;
	static float mul = 1.0f / ((float)LLI_RAND_MAX);
	return ((float)(qrand.Rand()&LLI_RAND_MASK)) * mul;
}
///////////////////////////////////////////////////////////////////////////////
float FRand11()
{
	static QRand qrand;
	static float mul = 2.0f / ((float)LLI_RAND_MAX);
	return (((float)(qrand.Rand()&LLI_RAND_MASK)) * mul) - 1.0f;
}
///////////////////////////////////////////////////////////////////////////////
BlobRenderer::BlobRenderer()
{
	m_pLLI = NULL;
	m_pBlobArray = NULL;
	m_NumBlobs = 0;

	m_Threshhold = 1.0f;

    m_dwNumVertices = 0;
    m_dwNumIndices = 0;
    m_pBlobVB = NULL;
    m_pBlobIB = NULL;

	m_pField = NULL;
	m_pVertexIndices = NULL;
}
///////////////////////////////////////////////////////////////////////////////
BlobRenderer::~BlobRenderer()
{
	destroy();
}
///////////////////////////////////////////////////////////////////////////////
void BlobRenderer::destroy()
{
	if (m_pBlobVB) m_pBlobVB->Release();
	if (m_pBlobIB) m_pBlobIB->Release();
	delete m_pField;
	delete m_pVertexIndices;

	m_pBlobArray = NULL;

	m_pLLI = NULL;
	m_pBlobArray = NULL;
	m_NumBlobs = 0;

    m_dwNumVertices = 0;
    m_dwNumIndices = 0;
    m_pBlobVB = NULL;
    m_pBlobIB = NULL;

	m_pField = NULL;
	m_pVertexIndices = NULL;
}
///////////////////////////////////////////////////////////////////////////////
void BlobRenderer::render()
{
	int next_affiliation = m_pSources[0]->dAffiliation;
	int i;
	for (i=1; i<m_NumBlobs; i++)
	{
		next_affiliation = min(next_affiliation, m_pSources[i]->dAffiliation);
	}

	for (int affiliation = next_affiliation; affiliation < m_NumBlobs; affiliation = next_affiliation)
	{
		next_affiliation = m_NumBlobs;
		D3DVECTOR pt_min, pt_max;
		pt_min = pt_max = bs.ptPosition;
		bool b_unset = true;

		// For this affiliation, iterate through all the sources, adjusting
		// the min/max for any blobs with the correct affiliation.
		for (int i=0; i<m_NumBlobs; i++)
		{
			BlobSource& bs = m_pSources[i];

			// Keep track of what the smallest affiliation larger than the current affiliation is.
			int aff = bs.dAffiliation;
			if (aff > affiliation) next_affiliation = min(aff, next_affiliation);

			if (aff == affiliation)
			{
				if (b_unset)
				{
					b_unset = false;
					pt_min = pt_max = bs.ptPosition;
					pt_min.x -= bs.fConsiderationRadius;
					pt_min.y -= bs.fConsiderationRadius;
					pt_min.z -= bs.fConsiderationRadius;
					pt_max.x += bs.fConsiderationRadius;
					pt_max.y += bs.fConsiderationRadius;
					pt_max.z += bs.fConsiderationRadius;
				}
				else
				{
					pt_min.x = min(pt_min.x, bs.ptPosition.x - bs.fConsiderationRadius);
					pt_min.y = min(pt_min.y, bs.ptPosition.y - bs.fConsiderationRadius);
					pt_min.z = min(pt_min.z, bs.ptPosition.z - bs.fConsiderationRadius);

					pt_max.x = min(pt_max.x, bs.ptPosition.x + bs.fConsiderationRadius);
					pt_max.y = min(pt_max.y, bs.ptPosition.y + bs.fConsiderationRadius);
					pt_max.z = min(pt_max.z, bs.ptPosition.z + bs.fConsiderationRadius);
				}
			}
		}

		// Now have the boundaries for the rendering region. Blobs outside the area may
		// affect the energy threshold, but no polygons will be drawn outside it.
		int sx, sy, sz, ex, ey, ez;
		getCoords(pt_min, &sx, &sy, &sz);
		getCoords(pt_max, &ex, &ey, &ez);
		ex++; ey++; ez++;

		int len_x = ex - sx + 1;
		int len_y = ey - sy + 1;
		int len_z = ez - sz + 1;
		int len_xy = len_x*len_y;
		int len_xyz = len_xy * len_z;

		if (len_x*len_y*len_z > m_FieldX*m_FieldY*m_FieldZ)
		{
			continue;	// can't render it, it is too big
		}


		// Clear the part of the field that will be used. Note that this does not
		// share the rows/columns/levels that would be used if the entire field
		// was used. Instead, the minimum amount of memory is used in a contiguous
		// fashion.
		for (i=0; i<len_xyz; i++) m_pField[i] = 0.0f;


		// For each blob, isolate the box within influence and iterate for each point.
		// The box of influence can (and must) be clipped to the previously determined
		// region.
		for (i=0; i<m_NumBlobs; i++)
		{
			BlobSource& bs = m_pSources[i];
			D3DVECTOR pt_start, pt_end;
			Set(&pt_start,
				max(pt_min.x, bs.ptPosition.x - bs.fConsiderationRadius),
				max(pt_min.y, bs.ptPosition.y - bs.fConsiderationRadius),
				max(pt_min.z, bs.ptPosition.z - bs.fConsiderationRadius)
				);
			Set(&pt_end,
				min(pt_max.x, bs.ptPosition.x + bs.fConsiderationRadius),
				min(pt_max.y, bs.ptPosition.y + bs.fConsiderationRadius),
				min(pt_max.z, bs.ptPosition.z + bs.fConsiderationRadius)
				);

			int bsx, bsy, bsz, bex, bey, bez;
			getCoords(pt_start, &bsx, &bsy, &bsz);
			getCoords(pt_end  , &bex, &bey, &bez);
			bex++; bey++; bez++;
			// The coordinates have already been capped to the rendering region.

			if ( (bsx<=bex) && (bsy<=bey) && (bsz<=bez) )
			{
				D3DVECTOR pos, posll;
				getWorldPos(&posll, bsx, bsy, bsz);
				pos.z = posll.z;
				for (int w=bsz; w<=bez; w++, pos.z += m_FieldToWorld.z)
				{
					pos.y = posll.y;
					for (int v=bsy; v<=bey; v++, pos.y += m_FieldToWorld.y)
					{
						pos.x = posll.x;
						float* p_field = &m_pField[w*len_xy + v*len_x + bsx];
						for (int u=bsx; u<=bex; u++, pos.x += m_FieldToWorld.x)
						{
							*(p_field++) += bs.calculate(affiliation, pos);
						}
					}
				}
			}
		}
		// It is legitimate for the outermost points to have a negative energy accumulation,
		// but nothing should be giving it a positive value. It would be nice to enforce this,
		// but I'm not sure it's worth the trouble.

		// Woohoo! The field is complete for this affiliation. Start rendering.

		// Lock the buffers.
		int max_tris = len_xyz * 5 * 2;		// for a Sierpinski cube relative, maybe...
		BlobVertex* p_verts;
		u16* p_indices;
		if (D3D_OK != m_pBlobVB->Lock(0, len_xyz*6, (BYTE**) &pbv_buf, D3DLOCK_DISCARD))
		{
			continue;
		}
		if (D3D_OK != m_pBlobIB->Lock(0, max_tris*3, (BYTE**) &pbv_buf, D3DLOCK_DISCARD))
		{
			m_pBlobVB->Unlock();
			continue;
		}

		int num_tris = 0;
		int num_verts = 0;
		BlobVertex* p_vert = p_verts;
		u16* p_index = p_indices;


		// This buffer stores the vertex indices (or -1) for the vertex on each segment
		// of a voxel. The offsets march through the buffer, returning to zero when they
		// reach the voxel_wrap value. m_pVertexIndices[voxel_offset] is for the voxel
		// with the current point in the max_pt position.
		int voxel_offset = 0;
		int voxel_offset_x = 6*1;
		int voxel_offset_y = 6*len_x;
		int voxel_offset_z = 6*len_xy;
		int voxel_wrap = 6*(len_xy+1);
		memset(m_pVertexIndices, -1, sizeof(int) * voxel_wrap);



		D3DVECTOR pos;
		pos.z = pt_min.z;
		for (int w=sz; w<ez; w++, pos.z += m_FieldToWorld.z)
		{
			pos.y = pt_min.y;
			for (int v=sy; v<ey; v++, pos.y += m_FieldToWorld.y)
			{
				pos.x = pt_min.x;
				p_field = &m_pField[w*len_xy + v*len_x];
				for (int u=sx; u<ex; u++, pos.x += m_FieldToWorld.x)
				{
					u32 in_or_out;
					if (p_field[             0] > m_Threshhold) in_or_out |= 0x0001;
					if (p_field[             1] > m_Threshhold) in_or_out |= 0x0002;
					if (p_field[       len_x  ] > m_Threshhold) in_or_out |= 0x0004;
					if (p_field[       len_x+1] > m_Threshhold) in_or_out |= 0x0008;
					if (p_field[len_xy        ] > m_Threshhold) in_or_out |= 0x0010;
					if (p_field[len_xy+      1] > m_Threshhold) in_or_out |= 0x0020;
					if (p_field[len_xy+len_x  ] > m_Threshhold) in_or_out |= 0x0040;
					if (p_field[len_xy+len_x+1] > m_Threshhold) in_or_out |= 0x0080;

					if ((in_or_out!=0) && (in_or_out!=0x00FF))
					{
						// Not all corners are the same. Analyze the five tetrahedrons.
						// The five tetrahedrons are defined as corners:
						const int  odd_tetrahedrons[20] = { 0,1,2,4,  5,1,4,7,  3,1,2,7,  6,2,7,4,  1,2,4,7 };
						const int even_tetrahedrons[20] = { 1,0,5,3,  7,3,5,6,  2,0,6,3,  4,0,6,5,  0,6,5,3 };
						const int* tetrahedrons = ((u+v+w)&0x01) ? odd_tetrahedrons : even_tetrahedrons;
						
						for (int tet=0; tet<5; tet++)
						{
							int mask = 0;
							mask |= (1<<(tetrahedrons[4*tet+0]));
							mask |= (1<<(tetrahedrons[4*tet+1]));
							mask |= (1<<(tetrahedrons[4*tet+2]));
							mask |= (1<<(tetrahedrons[4*tet+3]));

							int masked = in_or_out & mask;
							if ((masked!=0) && (masked!=mask))
							{
								// Mixed corners for this tetrahedron. Triangles are needed.
								int ins[4];
								int outs[4];
								int num_in = 0;
								int num_out = 0;
								if (mask & 0x0001) ins[num_in++] = 0;
								if (mask & 0x0002) ins[num_in++] = 1;
								if (mask & 0x0004) ins[num_in++] = 2;
								if (mask & 0x0008) ins[num_in++] = 3;
								if (mask & 0x0010) ins[num_in++] = 4;
								if (mask & 0x0020) ins[num_in++] = 5;
								if (mask & 0x0040) ins[num_in++] = 6;
								if (mask & 0x0080) ins[num_in++] = 7;

								if (num_in==1)
								{
									// One is in, three are out.
									D3DVECTOR pos_in = pos;
									if (ins[0] & 0x01) pos_in.x += m_FieldToWorld.x * 0.5f;
									if (ins[0] & 0x02) pos_in.y += m_FieldToWorld.y * 0.5f;
									if (ins[0] & 0x04) pos_in.z += m_FieldToWorld.z * 0.5f;
								}
							}
						}
					}
				}
			}
		}


		// Render.


		m_pBlobIB->Unlock();
		m_pBlobVB->Unlock();
	}	
}
///////////////////////////////////////////////////////////////////////////////
void BlobRenderer::init(	const BlobSource* p_blob_sources, int num_blobs,
							float xy_spacing, float z_spacing,
							const D3DVECTOR& center, const D3DVECTOR& half_dim)
{
	m_FieldX = (int)((half_dim.x * 2.0f / xy_spacing) + 2.0f);
	m_FieldY = (int)((half_dim.y * 2.0f / xy_spacing) + 2.0f);
	m_FieldZ = (int)((half_dim.z * 2.0f /  z_spacing) + 2.0f);
	m_FieldXY = m_FieldX * m_FieldY;
	m_pField = new float[m_FieldXY * m_FieldZ];
	m_pVertexIndices = new int[(m_FieldXY+1) * 6];

	Sub(&m_LowerLeftCorner, center, half_dim);
	m_FieldToWorld.x = xy_spacing;
	m_FieldToWorld.y = xy_spacing;
	m_FieldToWorld.z =  z_spacing;
	m_WorldToField.x = 1.0f / xy_spacing;
	m_WorldToField.y = 1.0f / xy_spacing;
	m_WorldToField.z = 1.0f /  z_spacing;

	// Create a vertex buffer, too.
}
///////////////////////////////////////////////////////////////////////////////
void BlobRenderer::getCoords(const D3DVECTOR& pos, int* p_x, int* p_y, int* p_z, D3DVECTOR* p_remainder)
{
	float fx = (pos.x - m_LowerLeftCorner.x) * m_WorldToField.x;
	float fy = (pos.y - m_LowerLeftCorner.y) * m_WorldToField.y;
	float fz = (pos.z - m_LowerLeftCorner.z) * m_WorldToField.z;
	*p_x = (int) (fx);
	*p_y = (int) (fy);
	*p_z = (int) (fz);

	if (p_remainder)
	{
		p_remainder->x = fx - ((float)*p_x);
		p_remainder->y = fy - ((float)*p_y);
		p_remainder->z = fz - ((float)*p_z);
	}
	return (*p_z * m_FieldXY) + (*p_y * m_FieldX) + (*p_x);
}
///////////////////////////////////////////////////////////////////////////////
void BlobRenderer::getWorldPos(D3DVECTOR* pos, int x, int y, int z)
{
	pos->x = m_LowerLeftCorner.x + ((float)x) * m_FieldToWorld.x;
	pos->y = m_LowerLeftCorner.y + ((float)y) * m_FieldToWorld.y;
	pos->z = m_LowerLeftCorner.z + ((float)z) * m_FieldToWorld.z;
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
TestBlobRenderer::TestBlobRenderer()
{
}
///////////////////////////////////////////////////////////////////////////////
TestBlobRenderer::~TestBlobRenderer()
{
	destroy();
}
///////////////////////////////////////////////////////////////////////////////
void TestBlobRenderer::create()
{
	for (int i=0; i<NUM_BLOBS; i++)
	{
		Set(&m_Sources[i].ptPosition, FRand01() * 0.2f, FRand01() * 0.2f, FRand01() * 0.2f);
		m_Sources[i].fStrength = 1.0f;
		m_Sources[i].fConsiderationRadius = 0.09f;
		m_Sources[i].fConsiderationRadius2 = m_Sources[i].fConsiderationRadius * m_Sources[i].fConsiderationRadius;
		m_Sources[i].dAffiliation = 0;
	}

	D3DVECTOR center, hd;
	Set(&center, 0.0f, 0.0f, 0.0f);
	Set(&hd, 1.0f, 1.0f, 1.0f);
	init(&m_Sources[i], NUM_BLOBS, 0.005f, 0.005f, center, hd);
}
///////////////////////////////////////////////////////////////////////////////
void TestBlobRenderer::advanceTime(float fElapsedTime, float fDt)
{
}
///////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\bootsound.h ===
/*
 *  Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 */



extern "C"  do_sos_init_return(void);
extern "C"	sos_main(void);
extern "C"  put_fifo(unsigned char);
extern "C"  dev_cleanup(void);

#ifdef  __cplusplus
extern "C" {
#endif

// All boot sound functions must be called at passive level

void BootSound_Start(); // Call once to start boot sound
void BootSound_Stop(void); // Call once to stop boot sound





#ifdef  __cplusplus
};


#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\BlobRenderer.h ===
///////////////////////////////////////////////////////////////////////////////
// File: BlobRenderer.h
//
// Copyright 2001 Pipeworks Software
//
// WORK HALTED: Patent issues
//
///////////////////////////////////////////////////////////////////////////////
#ifndef BLOBRENDERER_H
#define BLOBRENDERER_H

#include "render_object.h"


// Adapted from: http://www.gamasutra.com/features/20000523/lander_01.htm
// Possibly in violation of US Patent #4,710,876
// http://164.195.100.11/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=/netahtml/search-bool.html&r=1&f=G&l=50&co1=AND&d=pall&s1='4710876'.WKU.&OS=PN/4710876&RS=PN/4710876



struct BlobVertex
{
	D3DVECTOR pos;
    D3DVECTOR normal;	// not normalized, do it in the GPU
	// Diffuse color is set as a constant.
};








class BlobSource
{
public:
	D3DVECTOR		ptPosition;
	float			fStrength;
	float			fConsiderationRadius;
	float			fConsiderationRadius2;
	int				dAffiliation;	// affiliation of -1 is never rendered, but does repulse

	inline float	calculate(int affiliation, const D3DVECTOR& pos) const
	{
		float dist2 = Distance2(ptPosition, pos);
		if (dist2 > fConsiderationRadius2) return 0.0f;
		float falloff = 1.0f - (dist2/fConsiderationRadius2);
		return ((affiliation==dAffiliation) ? 1.0f : -1.0f) * fStrength * falloff*falloff;
	}
};




class BlobRenderer : public RenderObject
{
protected:
	const BlobSource*		m_pSources;
	int m_NumBlobs;

	float					m_Threshhold;

    DWORD					m_dwNumVertices;
    DWORD					m_dwNumIndices;

    LPDIRECT3DVERTEXBUFFER8 m_pBlobVB;
    LPDIRECT3DINDEXBUFFER8  m_pBlobIB;
	


	float*		m_pField;
	int*		m_pVertexIndices;	// circular fifo which stores one layer of vertex indices
	int			m_FieldX, m_FieldY, m_FieldXY, m_FieldZ;		// number of entries in each field coord

	D3DVECTOR	m_LowerLeftCorner;
	D3DVECTOR	m_FieldToWorld;
	D3DVECTOR	m_WorldToField;

	int			getCoords(const D3DVECTOR& pos, int* p_x, int* p_y, int* p_z, D3DVECTOR* p_remainder=NULL);
	void		getWorldPos(D3DVECTOR* pos, int x, int y, int z);

public:
	BlobRenderer();
	~BlobRenderer();

	virtual bool isVisible() { return true; }
	virtual void destroy();

	virtual void render();
	virtual void advanceTime(float fElapsedTime, float fDt) {}

	
	void init(	const BlobSource* p_blob_sources, int num_blobs,
				float xy_spacing, float z_spacing,
				const D3DVECTOR& center, const D3DVECTOR& half_dim);

	void	getThreshhold() const	{ return m_Threshhold; }
	void	setThreshhold(float th)	{ m_Threshhold = th; }
};


class TestBlobRenderer : public BlobRenderer
{
protected:
	enum { NUM_BLOBS = 6 };
	BlobSource m_Sources[NUM_BLOBS];

public:
	TestBlobRenderer();
	~TestBlobRenderer();

	virtual void create();
	virtual void advanceTime(float fElapsedTime, float fDt);
};



#endif // BLOBRENDERER_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\CamControl.cpp ===
///////////////////////////////////////////////////////////////////////////////
// File: CamControl.cpp
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#include "precomp.h"
#include "xbs_math.h"
#include "xbs_app.h"
#include "CamControl.h"
///////////////////////////////////////////////////////////////////////////////
// Negative tension is rounder, Positive tension is sharper (and comes
// to more of a stop at the point).
// Negative bias favors direction from previous to current, positive
// favors direction from current to next.
CamControlNodeData CameraController::svCameraListData[] =
{
//MTS	// Focusing on widgets, passing past blob.
//MTS    {  0,   +00, +00,        +3.2f,   -17.4f,   +13.0f,       -1.9f,    +7.8f,   -15.3f },
//MTS    { 20,   +00, +00,        +2.1f,   -12.1f,    +6.15f,      -1.9f,    +7.8f,   -15.3f },
//MTS    { 40,   +00, +00,        +1.0f,    -6.8f,    -0.7f,       -1.9f,    +7.8f,   -15.3f },
//MTS    { 55,   +00, +00,        -7.2f,    -3.6f,    -7.5f,       -1.9f,    +7.8f,   -15.3f },
//MTS    { 70,   +00, +00,       -18.5f,   +14.1f,   -18.4f,       -1.9f,    +7.8f,   -15.3f },
//MTS    { 85,   +00, +00,       -16.2f,   +29.2f,   -23.1f,       -5.1f,    +8.4f,   -10.3f },
//MTS    { 95,   +00, +00,       -10.6f,   +49.3f,   -21.2f,       -5.1f,    +8.4f,   -10.3f },
//MTS
//MTS    // "drunken"
//MTS	{  0,   +00, +00,        -1.5f,    +2.8f,   -14.0f,       -0.0f,    -1.3f,    +0.0f },
//MTS    { 20,   +00, +00,        -3.8f,   +16.9f,   -22.8f,       -0.0f,    -1.3f,    +0.0f },
//MTS    { 45,   +00, +00,       +20.7f,   +27.6f,   -21.6f,       -0.0f,    -1.3f,    +0.0f },
//MTS    { 75,   +00, +00,       +18.1f,   +46.8f,   -27.0f,       -0.0f,    -1.3f,    +0.0f },
//MTS    { 95,   +00, +00,       +28.9f,   +75.1f,   -36.7f,       -0.0f,    -1.3f,    +0.0f },

	// Top, pan down, pull out.
    {  0,   +00, +00,       +11.4f,   -32.1f,   +33.0f,       +0.0f,    +0.0f,    +0.0f },
    { 20,   +00, +00,       +13.4f,   -37.7f,   +25.6f,       +0.0f,    +0.0f,    +0.0f },
    { 40,   +00, +00,       +15.6f,   -43.9f,    +8.8f,       +0.0f,    +0.0f,    +0.0f },
    { 60,   +00, +00,       +16.0f,   -45.0f,   -12.8f,       +0.0f,    +0.0f,    +0.0f },
    { 90,   +00, +00,       +18.2f,   -51.2f,   -29.6f,       +0.0f,    +0.0f,    +0.0f },

//MTS	// Low, looking up, pull out, and pan up.
//MTS    {  0,   +00, +00,       +15.2f,    -3.3f,   -15.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    { 20,   +00, +00,       +26.2f,    -5.7f,   -20.5f,       +0.0f,    +0.0f,    +0.0f },
//MTS    { 45,   +00, +00,       +40.2f,    -8.7f,   -23.6f,       +0.0f,    +0.0f,    +0.0f },
//MTS    { 65,   +00, +00,       +61.2f,   -13.3f,    -3.6f,       +0.0f,    +0.0f,    +0.0f },
//MTS    { 85,   +00, +00,       +84.4f,    -4.8f,   +11.7f,       +0.0f,    +0.0f,    +0.0f },
//MTS    { 95,   +00, +00,      +120.4f,    -8.8f,   +14.7f,       +0.0f,    +0.0f,    +0.0f },
//MTS
//MTS	// Looking low, closeup on the bottom, pull out and pan up.
//MTS    {  0,   +00, +00,       -20.5f,   +48.8f,   +12.0f,       +0.0f,    +0.0f,   -18.6f },
//MTS    { 35,   +00, +00,       -10.4f,   +24.6f,    -2.4f,       +0.0f,    +0.0f,   -18.6f },
//MTS    { 70,   +00, +00,       -10.4f,   +24.6f,    -2.4f,       +0.0f,    +0.0f,   -18.6f },
//MTS    { 85,   +00, +00,       -16.5f,   +39.3f,    +4.2f,       -0.3f,    +0.1f,    -5.3f },
//MTS    { 95,   +00, +00,       -26.3f,   +75.4f,    -4.6f,       -0.3f,    +0.1f,    -0.5f },
//MTS
//MTS	// Somewhat high, rotate left, recenter, pause, and pull out.
//MTS    {  00,   +0, +0,       -92.5f,   -10.1f,   +20.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  15,   +0, +0,       -88.0f,   +30.4f,   +20.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  30,   +0, +0,       -64.7f,   +67.0f,   +20.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  45,   +0, +0,       -22.6f,   +90.3f,   +20.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  60,   +0, +0,       +21.7f,   +90.5f,   +20.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  72,   +0, +0,       +65.4f,   +66.2f,   +20.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  85,   +0, +0,       +97.5f,   +23.7f,   +16.1f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  95,   +0, +0,      +110.8f,    -6.1f,    +0.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS
//MTS	// start a little low, slowly move up, drift right, pull out.
//MTS    {  00,   +0, +0,       +62.3f,   -28.5f,   -20.2f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  30,   +0, +0,       +62.3f,   -28.5f,   -20.2f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  50,   +0, +0,       +55.2f,   -25.3f,   -10.1f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  75,   +0, +0,       +56.7f,   -12.9f,    +0.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  95,   +0, +0,       +73.9f,   -13.0f,    +0.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS
//MTS	// Towards top, tube to the right, move down and left.
//MTS    {  00,   +0, +0,       +50.4f,   +33.2f,   +25.3f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  30,   +0, +0,       +50.4f,   +33.2f,   +25.3f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  45,   +0, +0,       +55.7f,    +9.3f,   +15.9f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  65,   +0, +0,       +39.1f,   -35.8f,    +3.3f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  90,   +0, +0,        +7.1f,   -53.7f,    +0.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  95,   +0, +0,       -16.8f,   -78.0f,    +0.0f,       +0.0f,    +0.0f,    +0.0f },

	// Start low near tube, pause, quickly go up and to the right, pause, pull out.
    {  00,   +0, +0,       -55.4f,   +19.7f,   -31.5f,       +0.0f,    +0.0f,    +0.0f },
    {  30,   +0, +0,       -55.4f,   +19.7f,   -31.5f,       +0.0f,    +0.0f,    +0.0f },
    {  45,   +0, +0,       -39.5f,    -0.6f,    -7.8f,       +0.0f,    +0.0f,    +0.0f },
    {  60,   +0, +0,        -4.3f,   -35.5f,   +16.6f,       +0.0f,    +0.0f,    +0.0f },
    {  70,   +0, +0,       +31.1f,   -32.6f,   +17.6f,       +0.0f,    +0.0f,    +0.0f },
    {  80,   +0, +0,       +57.7f,    -7.2f,    +3.3f,       +0.0f,    +0.0f,    +0.0f },
    {  95,   +0, +0,       +70.9f,    +1.8f,    +3.1f,       +0.0f,    +0.0f,    +0.0f },

	// Low, move up, go left, pull out.
//MTS    {  00,   +0, +0,       -51.7f,    -2.4f,   -32.4f,       +0.0f,    +0.0f,   +12.0f },
//MTS    {  25,   +0, +0,       -51.7f,    -2.4f,   -32.4f,       +0.0f,    +0.0f,   +12.0f },
//MTS    {  40,   +0, +0,       -54.4f,    -2.6f,   -23.3f,       +0.0f,    +0.0f,   +10.0f },
//MTS    {  50,   +0, +0,       -53.2f,    +6.7f,   -14.3f,       +0.0f,    +0.0f,    +7.0f },
//MTS    {  60,   +0, +0,       -41.8f,   +21.2f,    -9.3f,       +0.0f,    +0.0f,    +4.5f },
//MTS    {  70,   +0, +0,       -27.1f,   +34.2f,    -9.3f,       +0.0f,    +0.0f,    +2.0f },
//MTS    {  80,   +0, +0,        -6.9f,   +47.5f,    -9.3f,       +0.0f,    +0.0f,    +1.0f },
//MTS    {  88,   +0, +0,       +11.3f,   +52.3f,    -9.2f,       +0.0f,    +0.0f,    +0.5f },
//MTS    {  95,   +0, +0,       +24.2f,   +62.8f,    -9.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS
//MTS	// Orbit right (a little up).
//MTS    {  00,   +0, +0,        -2.6f,   -85.0f,   +17.7f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  20,   +0, +0,       +48.1f,   -70.1f,   +17.7f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  40,   +0, +0,       +80.1f,   -28.6f,   +17.7f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  60,   +0, +0,       +81.4f,   +24.8f,   +17.7f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  80,   +0, +0,       +56.5f,   +63.6f,   +17.7f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  95,   +0, +0,       +27.9f,   +86.5f,    +8.2f,       +0.0f,    +0.0f,    +0.0f },
//MTS
//MTS	// Orbit left.
//MTS    {  00,   +0, +0,       +47.3f,   -76.6f,   -10.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  25,   +0, +0,       +11.5f,   -89.3f,   -10.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  50,   +0, +0,       -35.7f,   -82.6f,   -10.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  75,   +0, +0,       -71.9f,   -54.2f,   -10.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  95,   +0, +0,       -89.5f,    -9.6f,   -10.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS
//MTS	// Move down and to the right.
//MTS    {  00,   +0, +0,       -11.2f,   -42.9f,   +17.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  20,   +0, +0,        +2.6f,   -46.9f,    +7.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  40,   +0, +0,       +24.3f,   -40.5f,    -4.2f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  60,   +0, +0,       +38.7f,   -24.8f,    -9.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  80,   +0, +0,       +44.3f,   -12.1f,    -7.0f,       +0.0f,    +0.0f,    +0.0f },
//MTS    {  95,   +0, +0,       +52.4f,    +6.3f,    +2.0f,       +0.0f,    +0.0f,    +0.0f },

	// Rotate to left, fairly close.
    {  00,   +0, +0,       +34.7f,   +25.9f,   +12.3f,       +0.0f,    +0.0f,    +0.0f },
    {  25,   +0, +0,       +42.3f,    +9.3f,   +12.3f,       +0.0f,    +0.0f,    +0.0f },
    {  50,   +0, +0,       +42.4f,    -8.8f,   +12.3f,       +0.0f,    +0.0f,    +0.0f },
    {  75,   +0, +0,       +34.4f,   -26.3f,   +12.3f,       +0.0f,    +0.0f,    +0.0f },
    {  95,   +0, +0,       +30.7f,   -48.1f,   +14.3f,       +0.0f,    +0.0f,    +0.0f },

	// Start out low, pause, rotate up slightly and pull out.
	{  0,   +00, +00,       -50.1f,    -0.3f,   -51.5f,       +0.0f,    +0.0f,    +0.0f },
	{  25,  +00, +00,       -50.1f,    -0.3f,   -51.5f,       +0.0f,    +0.0f,    +0.0f },
	{  75,  +00, +00,       -50.1f,    -0.3f,   -51.5f,       +0.0f,    +0.0f,    +0.0f },
    {  95,  +00, +00,       -62.2f,    -0.4f,   -12.0f,       +0.0f,    +0.0f,    +0.0f },
};

#define NUM_CC_NODES  (sizeof(CameraController::svCameraListData)/sizeof(CamControlNodeData))

CamControlNode CameraController::svCameraList[NUM_CC_NODES];
///////////////////////////////////////////////////////////////////////////////
void CameraController::Init()
{
	numNodes = NUM_CC_NODES;
	numPaths = 0;
	curPathNum = -1;
	for (int i=0; i<numNodes; i++)
	{
		if (svCameraListData[i].ucTime == (unsigned char) 0) numPaths++;

		svCameraList[i].fTime = FINISH_START_TIME * ((float)svCameraListData[i].ucTime) * 0.01f;
		svCameraList[i].ptPosition = svCameraListData[i].ptPosition;
		svCameraList[i].vecLookAt = svCameraListData[i].vecLookAt;
		svCameraList[i].tension = ((float)svCameraListData[i].scTension) * 0.01f;
		svCameraList[i].bias = ((float)svCameraListData[i].scBias) * 0.01f;

//MTS		char buf[1024];
//MTS		D3DVECTOR pos = svCameraList[i].ptPosition;
//MTS		D3DVECTOR la = svCameraList[i].vecLookAt;
//MTS		sprintf(buf, "    {  %02d,   %+02d, %+02d,    %+8.1ff,%+8.1ff,%+8.1ff,   %+8.1ff,%+8.1ff,%+8.1ff },\n",
//MTS						(int) svCameraListData[i].ucTime, (int) svCameraListData[i].scTension, (int) svCameraListData[i].scBias,
//MTS						pos.x, pos.y, pos.z, la.x, la.y, la.z);
//MTS		if (svCameraListData[i].ucTime==0) OutputDebugString("\n");
//MTS		OutputDebugString(buf);
	}

	pickPath(-1);
}
///////////////////////////////////////////////////////////////////////////////
// negative indicates random
void CameraController::pickPath(int path)
{
	if (path<0)
	{
		path = ((unsigned int) (gApp.rand() & 0x7FFFFFFF));
	}
	if (path >= numPaths) path = path % numPaths;


	// The following line cycles the selected path. Without it, path selection is random.
//MTS	path = (curPathNum + 1) % numPaths;


//MTS	path = 1;

	curPathNum = path;



//MTS	char buf[1024];
//MTS	sprintf(buf, "Picked path %d\n", path);
//MTS	OutputDebugString(buf);


	int i;
	for (i=0; i<numNodes; i++)
	{
		if (svCameraList[i].fTime == 0.0f)
		{
			if (!path) break;
			path--;
		}
	}
	curStartNode = i;

	for (i=curStartNode+1; i<numNodes; i++)
	{
		if (svCameraList[i].fTime == 0.0f) break;
	}
	curVariableNodes = i - curStartNode;
	curNumNodes = curVariableNodes + NUM_FINISH_NODES;


	// Calculate the finishNodes.
	int j;
	for (j=0; j<NUM_FINISH_NODES; j++)
	{
		finishNodes[j].fTime = FINISH_START_TIME + FINISH_TRANSITION_TIME * ((float)j) / ((float)(NUM_FINISH_NODES-1));
		finishNodes[j].tension = +0.0f;
		finishNodes[j].bias = 0.0f;
	}

	fCameraLookatInterpStart = finishNodes[2].fTime;
	fOOCameraLookatInterpDelta = 1.0f / (finishNodes[5].fTime - fCameraLookatInterpStart);




	const CamControlNode* plast = &svCameraList[curStartNode + curVariableNodes - 1];
	CamControlNode* pthis = &finishNodes[0];
	
	float start_time = plast->fTime;

//MTS	const float slash_start_rad = -185.0f;
	const float slash_start_rad = -95.0f;
	const float slash_end_rad = 132.14f;

//MTS	const float cfYPositions[NUM_FINISH_NODES] = { 185.0f, 117.548f, -8.819f, -150.298f, -220.64f, -243.021f, -261.441f, -287.773f };
	const float cfYPositions[NUM_FINISH_NODES] = { +95.0f, +30.548f, -70.819f, -150.298f, -220.64f, -243.021f, -261.441f, -287.773f };
	const float cfZPositions[NUM_FINISH_NODES] = { 0.0f,   0.322f,   1.821f, 2.323f,    -11.926f,  -39.973f,  -60.774f,  -90.795f };
	const float camera_end_coord_y = cfYPositions[NUM_FINISH_NODES-1];
	const float camera_end_coord_z = cfZPositions[NUM_FINISH_NODES-1];

	const float lookat_offset = slash_end_rad * camera_end_coord_z / camera_end_coord_y;
	const float cfSlashDist = slash_end_rad - slash_start_rad;
	const float cfMinStartDist = 100.0f;






	
	// First finish node is at the entrance of the slash. Take the last nodes
	// velocity, move along it for a little bit, and then push it out to the
	// appropriate radius, about 200 units.
	// The slash's transform will also be set now.

	pthis->ptPosition = plast->ptPosition;

	D3DVECTOR vel;
	if (curVariableNodes >= 2)
	{
		Sub(getNode(curVariableNodes-1)->ptPosition, getNode(curVariableNodes-2)->ptPosition, &vel);
		Scale(&vel, 1.0f / (getNode(curVariableNodes-1)->fTime - getNode(curVariableNodes-2)->fTime));
	}
	else
	{
		Set(&vel, 0.0f, 0.0f, 0.0f);
	}

	AddScaled(&pthis->ptPosition, vel, (pthis->fTime - plast->fTime) * 0.7f);
	float vel_adj_len = Length(pthis->ptPosition);
	Scale(&pthis->ptPosition, 1.0f / vel_adj_len);	// normalizes

	D3DVECTOR slash_dir = pthis->ptPosition;
	float slash_y_offset = max(cfMinStartDist - slash_start_rad, vel_adj_len * 1.2f - slash_start_rad);
	Scale(&pthis->ptPosition, slash_y_offset + slash_start_rad);

	Set(&pthis->vecLookAt, 0.0f, 0.0f, 0.0f);



//MTS// Matches slash with barry's coordinates.
//MTSSet(&pthis->ptPosition, 0.0f, -1.0f, 0.0f);
//MTSSet(&slash_dir, 0.0f, -1.0f, 0.0f);
//MTSslash_y_offset = 0.0f;



	// Now do the slash xform.

	D3DVECTOR origin, up, x_dir, y_dir, z_dir;
	Set(&origin, 0.0f, 0.0f, 0.0f);
	Set(&up, 0.0f, 0.0f, 1.0f);

	// The shape has negative y going away from core.
	// Negative Y is normalized vector from slash_pos to origin
	y_dir = slash_dir;
	Scale(&y_dir, -1.0f);

	// X is y_dir crossed with up and normalized.
	Cross(y_dir, up, &x_dir);
	Normalize(&x_dir);

	// Z is x_dir cross y_dir.
	Cross(x_dir, y_dir, &z_dir);		// I think this is the wrong cross order...

	SetIdentity(&xfSlash);
	*((D3DVECTOR*)(&xfSlash._11)) = x_dir;
	*((D3DVECTOR*)(&xfSlash._21)) = y_dir;
	*((D3DVECTOR*)(&xfSlash._31)) = z_dir;
	*((D3DVECTOR*)(&xfSlash._41)) = y_dir;
	Scale((D3DVECTOR*)(&xfSlash._41), -slash_y_offset);
	ptSlashCenter = y_dir;
	Scale(&ptSlashCenter, - slash_end_rad - slash_y_offset);

//MTS	AddScaled(&pthis->ptPosition, z_dir, -7.0f);



	//const float cfYPositions[NUM_FINISH_NODES] = { 185.0f, 177.548f, 58.819f, -170.298f, -220.871f, -243.021f, -260.364f, -277.299f };
	float y_basis = slash_end_rad;
	for (j=1; j<NUM_FINISH_NODES; j++)
	{
		plast = pthis++;
		D3DVECTOR pt_in_slash;
		Set(&pt_in_slash, 0.0f, cfYPositions[j] + y_basis , cfZPositions[j]);
		TransformVector(pt_in_slash, xfSlash, &pthis->ptPosition);
		Add(pthis->ptPosition, ptSlashCenter, &pthis->ptPosition);
		Set(&pthis->vecLookAt, 0.0f, 0.0f, 0.0f);
	}






	// Set the final lookat point
	D3DVECTOR t;
	Set(&t, 0.0f, slash_end_rad, 25.0f);
	TransformVector(t, xfSlash, &ptFinalLookAt);
	Add(ptFinalLookAt, ptSlashCenter, &ptFinalLookAt);


	
	// Set the "m" parameters implicitly.

	for (j=0; j<curNumNodes; j++)
	{
		CamControlNode* pthis = getNode(j);
		Set(&pthis->vecVelocity, 0.0f, 0.0f, 0.0f);
		Set(&pthis->vecLookAtW, 0.0f, 0.0f, 0.0f);

		if (j)
		{
			D3DVECTOR delta;
			Sub(pthis->ptPosition, getNode(j-1)->ptPosition, &delta);
			AddScaled(&pthis->vecVelocity, delta, (1.0f - pthis->tension) * (1.0f + pthis->bias) * 0.5f);

			Sub(pthis->vecLookAt, getNode(j-1)->vecLookAt, &delta);
			AddScaled(&pthis->vecLookAtW, delta, (1.0f - pthis->tension) * (1.0f + pthis->bias) * 0.5f);
		}
		if (j<curNumNodes-1)
		{
			D3DVECTOR delta;
			Sub(getNode(j+1)->ptPosition, pthis->ptPosition, &delta);
			AddScaled(&pthis->vecVelocity, delta, (1.0f - pthis->tension) * (1.0f - pthis->bias) * 0.5f);

			Sub(getNode(j+1)->vecLookAt, pthis->vecLookAt, &delta);
			AddScaled(&pthis->vecLookAtW, delta, (1.0f - pthis->tension) * (1.0f - pthis->bias) * 0.5f);
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void CameraController::getPosition(float t, D3DVECTOR* p_pos, D3DVECTOR* p_look, bool* pb_render_geom, bool* pb_render_slash)
{

	if (t > FINISH_STOP_TIME)
	{
		*p_pos = finishNodes[NUM_FINISH_NODES-1].ptPosition;
		*p_look = ptFinalLookAt;
		*pb_render_slash = true;
		*pb_render_geom = false;
		return;
	}

	int i;
	for (i=1; i<curNumNodes; i++)
	{
		if (getNode(i)->fTime > t) break;
	}
	if (i==curNumNodes)
	{
		*p_pos = getNode(curNumNodes-1)->ptPosition;
		*p_look = ptFinalLookAt;
		*pb_render_slash = true;
		*pb_render_geom = false;
		return;
	}
	if (i==0)
	{
		// Should never happen, but something is causing a lock...
		Set(p_pos, 0.0f, -90.0f, 0.0f);
		Set(p_look, 0.0f, 0.0f, 0.0f);
		*pb_render_slash = true;
		*pb_render_geom = false;
		return;
	}


	const CamControlNode* pprev = getNode(i-1);
	const CamControlNode* pnext = getNode(i);

	float dtc = max(0.001f, pnext->fTime - pprev->fTime);
	float dtp = max(0.001f, (i>=2) ? pprev->fTime - getNode(i-2)->fTime : dtc);
	float dtn = max(0.001f, (i<curNumNodes-1) ? getNode(i+1)->fTime - pnext->fTime : dtc);

	float uts = min(1.0f, max(0.0f, (t - pprev->fTime) / dtc));	// un-tweaked s
	float utss = uts*uts;
	float utsss = utss*uts;
	float frac = -2.0f*utsss + 3.0f*utss;
	float s = (t - pprev->fTime) / ((1.0f-frac)*dtp + frac*dtc);


	float ss = s*s;
	float sss = ss*s;
	float cA = 2.0f * sss - 3.0f * ss + 1.0f;
	float cB = sss - 2.0f * ss + s;
	float cC = sss - ss;
	float cD = -2.0f * sss + 3.0f * ss;

	p_pos->x = cA * pprev->ptPosition.x + cB * pprev->vecVelocity.x + cC * pnext->vecVelocity.x + cD * pnext->ptPosition.x;
	p_pos->y = cA * pprev->ptPosition.y + cB * pprev->vecVelocity.y + cC * pnext->vecVelocity.y + cD * pnext->ptPosition.y;
	p_pos->z = cA * pprev->ptPosition.z + cB * pprev->vecVelocity.z + cC * pnext->vecVelocity.z + cD * pnext->ptPosition.z;

	p_look->x = cA * pprev->vecLookAt.x + cB * pprev->vecLookAtW.x + cC * pnext->vecLookAtW.x + cD * pnext->vecLookAt.x;
	p_look->y = cA * pprev->vecLookAt.y + cB * pprev->vecLookAtW.y + cC * pnext->vecLookAtW.y + cD * pnext->vecLookAt.y;
	p_look->z = cA * pprev->vecLookAt.z + cB * pprev->vecLookAtW.z + cC * pnext->vecLookAtW.z + cD * pnext->vecLookAt.z;


	float sl = max(0.0f, min(1.0f, (t - fCameraLookatInterpStart) * fOOCameraLookatInterpDelta));
	
	float _sin,_cos;
	SinCos(sl * Pi,&_sin,&_cos);
	float interp = 0.5f*(1.0f - _cos);

	Scale(p_look, 1.0f - interp);
	AddScaled(p_look, ptFinalLookAt, interp);



	*pb_render_slash = (i > curVariableNodes - 1);
	*pb_render_geom  = (i < curNumNodes - 1);
}
///////////////////////////////////////////////////////////////////////////////
void CameraController::buttonPressed()
{
#ifndef STARTUPANIMATION
#ifdef INCLUDE_PLACEMENT_DOODAD	
	char buf[1024];
	D3DVECTOR pos;
	D3DVECTOR la = gApp.getLookatPoint();
	gApp.theCamera.getCameraPos(&pos);
	sprintf(buf, "    {  0,   +00, +00,    %+8.1ff,%+8.1ff,%+8.1ff,   %+8.1ff,%+8.1ff,%+8.1ff },\n",
					pos.x, pos.y, pos.z, la.x, la.y, la.z);
	OutputDebugString(buf);
#endif
#endif // STARTUPANIMATION
}
///////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\camera.h ===
//
//	camera.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __CAMERA_H__
#define __CAMERA_H__

#include "xbs_math.h"

///////////////////////////////////////////////////////////////////////////////
class Camera
{
protected:

	

	D3DVECTOR4   clipPlanes[4];
	bool         bClipPlanesSet;
	float        fNearPlane;
	float        fFarPlane;
	float		 fAspectRatio;

	bool         bWTPValid;

	float        fTime;

	D3DVECTOR    vPos;
	D3DVECTOR    vLook;
	D3DVECTOR    vUp;

	D3DMATRIX    matWTP;

public:

	D3DMATRIX    matCTW;
	D3DMATRIX    matWTC;
	D3DMATRIX    matProj;


	void Init();
	void UnInit();

	void lookAt(const D3DVECTOR &cam_pos, const D3DVECTOR &look_pt, const D3DVECTOR &up);
	void setProjection(float fov_in_y, float aspect, float near_plane, float far_plane);
	void setCTW(const D3DMATRIX &ctw);
	void setWTC(const D3DMATRIX &wtc);
	void translate(const D3DVECTOR &relative_vector);

	bool sphereVisCheck(const D3DVECTOR &pos, float r);
	void updateClipPlanes();

	float getPixelScaleForZ(float z) const ;
	D3DMATRIX & getWTP();
	void		getCameraPos (D3DVECTOR* p_pos)		const	{ *p_pos = vPos; }
	void		getCameraLook(D3DVECTOR* p_look)	const	{ *p_look= vLook; }
	float		getFarPlane()						const	{ return fFarPlane; }
	float		getAspectRatio()					const	{ return fAspectRatio; }
};
#endif // __BS_CAMERA_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\defines.h ===
//
//	defines.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __DEFINES_H__
#define __DEFINES_H__


//#define FINAL_BUILD



const float DEMO_TOTAL_TIME = 8.0f;
const float FINAL_HOLD_TIME	= 2.0f;
const float FINISH_TRANSITION_TIME = 0.8f;

#define TEXT_ANIM_START_TIME                (DEMO_TOTAL_TIME - FINAL_HOLD_TIME)
const float TEXT_ANIM_LEN = 0.25f;


const float BLOB_STATIC_END_TIME = 0.6f;
#define OO_BLOB_STATIC_END_TIME				(1.0f / BLOB_STATIC_END_TIME)
#define BLOB_ZERO_INTENSE_END_TIME			(BLOB_STATIC_END_TIME + 0.5f)
const float BLOB_BASE_INTENSITY = 0.3f;

#define FINISH_START_TIME					(DEMO_TOTAL_TIME - FINAL_HOLD_TIME - FINISH_TRANSITION_TIME)
#define FINISH_STOP_TIME					(DEMO_TOTAL_TIME - FINAL_HOLD_TIME)
#define OO_FINISH_DELTA						(1.0f / FINISH_TRANSITION_TIME)

#define MAX_INTENSITY_TIME					(FINISH_START_TIME - 0.0f)
#define MAX_INTENSITY_DELTA					(MAX_INTENSITY_TIME - BLOB_ZERO_INTENSE_END_TIME)
#define OO_MAX_INTENSITY_DELTA				(1.0f / MAX_INTENSITY_DELTA)
const float DEMO_START_INTENSITY = 0.0f;


// For timing the blob pulses.
#define BLOB_PULSE_START					(BLOB_STATIC_END_TIME)
#define BLOB_PULSE_END						(FINISH_STOP_TIME - 0.4f)
#define BLOB_PULSE_ELAPSED					(BLOB_PULSE_END - BLOB_PULSE_START)

#define BLOB_JITTER_START					(BLOB_STATIC_END_TIME)
#define BLOB_JITTER_DELTA					(FINISH_START_TIME)
#define OO_BLOB_JITTER_DELTA				(1.0f / BLOB_JITTER_DELTA)


const float SCENE_ANIM_LEN = 4.5f;
#define SCENE_ANIM_START_TIME				(BLOB_STATIC_END_TIME + 0.25f)


const float START_PUSHOUT_RADIUS = 0.0f;
const float PUSHOUT_START_TIME = 0.5f;
const float PUSHOUT_DELTA = 2.7f;
#define OO_PUSHOUT_DELTA					(1.0f / PUSHOUT_DELTA)


#define SHIELD_FADE_IN_START_TIME			(BLOB_STATIC_END_TIME)
const float SHIELD_FADE_IN_DELTA = 1.2f;
#define OO_SHIELD_FADE_IN_DELTA				(1.0f / SHIELD_FADE_IN_DELTA)
#define SHIELD_FADE_OUT_START_TIME			(FINISH_START_TIME - 0.1f)
#define SHIELD_FADE_OUT_DELTA				(FINISH_TRANSITION_TIME * 0.2f)
#define OO_SHIELD_FADE_OUT_DELTA			(1.0f / SHIELD_FADE_OUT_DELTA)


#define GLOW_FADE_CIRCLE_START				(FINISH_START_TIME - 0.5f)
#define GLOW_FADE_CIRCLE_MUL				(1.0f / 0.3f)

#define GLOW_FADE_SCREEN_START				(GLOW_FADE_CIRCLE_START + 0.3f)
#define GLOW_FADE_SCREEN_MUL				(1.0f / 0.25f)


#define SLASH_GRADIENT_TRANSITION_START		(FINISH_START_TIME - 0.5f)
//MTS#define SLASH_GRADIENT_TRANSITION_END		(FINISH_STOP_TIME + 0.75f)
#define SLASH_GRADIENT_TRANSITION_END		(FINISH_STOP_TIME)
#define SLASH_GRADIENT_TRANSITION_MUL		(1.0f / (SLASH_GRADIENT_TRANSITION_END - SLASH_GRADIENT_TRANSITION_START))

#define SCENE_LO_DETAIL_START               (FINISH_START_TIME)

#ifdef STARTUPANIMATION
#define FINAL_BUILD
#endif // STARTUPANIMATION




#ifndef FINAL_BUILD

#define INCLUDE_PLACEMENT_DOODAD
#define INCLUDE_INPUT

#endif






#endif // __DEFINES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\CF.C ===
/*************************************************************************
*                                                                        *
* 	Here live the sound call processing functions			  *
*                                                                        *
*************************************************************************/

#include "sos.h"
#include "protos.h"
#include "externs.h"
#include <dsound.h>

extern	unsigned char	sound_call;	
extern struct timer_music music_timers[];
extern	unsigned char	n_timers;


#ifdef	BIGOS
unsigned char	restore_volume;

#endif

/*************************************************************************
*                                                                        *
* 	New Music Call:							  *
*	Note that if no tracks are specified, this is a silence call	  *
*									  *
* 	1.  Remove all current process for this level			  *
* 	2.  For each track in the new sound, create a new process	  *
* 	    for it.							  *
*                                                                        *
*************************************************************************/


	
void call_silence()
{
	struct process *tpp;
	struct process *pp;
	uchar	i;

	pp = process_queue->next;
	while (pp != NULL) {
	    tpp = pp->next;
	    kill_process(pp);
	    pp = tpp;
	}
	current_timer_priority = 0;
	for (i = 0; i < max_tracks; i++) {
	    channel_level[i] = 0;
		init_track_status(LEVEL_MUSIC,i);
		init_track_status(LEVEL_EFFECT,i);
	    nosound(i);
	}

	user_silence_function();
}


void call_music()
{
	ushort	const **track_ptr;		/* pointer to addr's of tracks */
	uchar	i;
	ushort	mask;
	ushort	track_map;

	marker = 0;	
	last_music_call = sound_call;

	remove_processes_by_level(LEVEL_MUSIC);
	track_map = current_call->track_map;
	track_ptr = current_call->tbl_ptr;
	for (i = 0,mask = 1; i < max_tracks; i++,mask <<= 1) {
	    if (track_map & mask) {	/* got a track to pl*/
			init_track_status(LEVEL_MUSIC,i);
			create_process((ushort *)*(track_ptr++),LEVEL_MUSIC,i);	
			if (channel_level[i] < LEVEL_EFFECT) {
				nosound(i);
			    channel_level[i] = LEVEL_MUSIC;
			}
	    }
	}

}

void call_play_timer()
{

}

void call_timer()
{

}

void call_end_timer()
{


}
void call_ignore()
{

}

extern	flash_yellow();
void call_effect()
{
	ushort	const **track_ptr;		/* pointer to addr's of tracks */
	uchar	i;
	ushort	mask;
	ushort	track_map;

	track_ptr = current_call->tbl_ptr;
	track_map = current_call->track_map;
	for (i = 0,mask = 1; i < max_tracks; i++,mask <<= 1) {
	    if (track_map & mask) {	/* got a track to pl*/
			remove_processes_by_level_and_channel(LEVEL_EFFECT,i);
			channel_level[i] = LEVEL_EFFECT;
			init_track_status(LEVEL_EFFECT,i);
			create_process((ushort *)*(track_ptr++),LEVEL_EFFECT,i);
	    }
	}
}

/*************************************************************************
*                                                                        *
* 	kill fx on all tracks											  *
*                                                                        *
*************************************************************************/

void call_kill_effect()
{

}



/*************************************************************************
*                                                                        *
* 	Send a byte to the yamaha										  *
* 	WARNING:  This routine blocks until it recieves both the		  *
* 	address AND data												  *
*                                                                        *
*************************************************************************/
#define	CALL_WAITING  (fifo.fifo_read != fifo.fifo_write)

void call_senddev()
{
#ifdef	BIGOS

	while (!CALL_WAITING)
		;
	b_value = get_fifo();
	while (!CALL_WAITING)
		;
	a_value = get_fifo();
	send_dev_function();
#endif
}
/*************************************************************************
*                                                                        *
* 	VOLUME SOUND CALL						  *
* 	byte 1:("type")	       	3 -> volume call			  *
* 	byte 2:("priority")	1 -> music volume; 2 -> fx volume	  *
* 	byte 3,4:("track_map")	level 					  *
* 	byte 5,6:		not used (MUST BE THERE)		  *
*                                                                        *
*************************************************************************/

void call_volume()
{

}


/************************************************************************
*                                                                      *
* 	MARK SOUND CALL
* 	byte 1:("type")	       	6 -> mark call							*
* 	byte 2:("priority")	marker #
* 	byte 3,4:("track_map")	NOT USED				  				*
* 	byte 5,6:		not used (MUST BE THERE)		  				*
*                                                                      *
*************************************************************************/

void call_mark()
{
	marker = current_call->priority;
}
		
init_track_status(uchar level, uchar channel)
{
	struct	track_info	*ti;
	ti = get_track_info_block2(level,channel);
/*	ti = get_track_info_block();*/
	
	ti->patch = 0;
	ti->loop_level = 0;
	ti->mux_level = 0;
	ti->transpose = 0;
	ti->filtercutoff = 0;
	ti->volume = 127;  /* */
	ti->pan = 0;
}


/*
 *	stop sound on channel chan
 */

void nosound(uchar chan)
{
	if (chan < max_tracks)
		silence_functions[chan](chan);
}

/*
 *	Remove all processes of level, 'level' from process queue
 */


remove_processes_by_level(uchar level)
{
	struct process *tpp;
	struct process *pp;

	pp = process_queue->next;

	while (pp != NULL) {
	    tpp = pp->next;
	    if (pp->level == level)
	        kill_process(pp);
	    pp = tpp;
	}
}
void remove_processes_by_level_and_channel(uchar level, uchar channel)
{
	struct process *tpp;
	struct process *pp;

	pp = process_queue->next;

	while (pp != NULL) {
	    tpp = pp->next;
	    if (pp->level == level) {
			if (pp->hard_channel == channel) {
		    	kill_process(pp);
			}
	    }
	    pp = tpp;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\camera.cpp ===
//
//	camera.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#include "precomp.h"
#include "camera.h"
#include "renderer.h"

///////////////////////////////////////////////////////////////////////////////
void Camera::Init()
{
	bClipPlanesSet = false;
	bWTPValid = false;
}
///////////////////////////////////////////////////////////////////////////////
void Camera::UnInit()
{
}
///////////////////////////////////////////////////////////////////////////////
void Camera::lookAt(const D3DVECTOR &cam_pos, const D3DVECTOR &look_pt, const D3DVECTOR &up)
{
	SetLookAt(cam_pos,look_pt,up,&matWTC);

	vPos = cam_pos;
	vLook = look_pt;
	vUp = up;
	SetInverse(matWTC,&matCTW);
	bClipPlanesSet = false;
	bWTPValid = false;
}
///////////////////////////////////////////////////////////////////////////////
void Camera::setProjection(float fov_in_y, float aspect, float near_plane, float far_plane)
{
	SetProjection(fov_in_y,aspect,near_plane,far_plane,&matProj);
	fNearPlane = near_plane;
	fFarPlane = far_plane;
	fAspectRatio = aspect;
	bClipPlanesSet = false;
	bWTPValid = false;
}
///////////////////////////////////////////////////////////////////////////////
void Camera::translate(const D3DVECTOR &rv)
{
	matCTW._41 += rv.x;
	matCTW._42 += rv.y;
	matCTW._43 += rv.z;

	SetInverse(matCTW,&matWTC);

	bClipPlanesSet = false;
	bWTPValid = false;
}
///////////////////////////////////////////////////////////////////////////////
void Camera::setCTW(const D3DMATRIX &ctw)
{
	matCTW = ctw;
	SetInverse(matCTW,&matWTC);

	bClipPlanesSet = false;
	bWTPValid = false;
}
///////////////////////////////////////////////////////////////////////////////
void Camera::setWTC(const D3DMATRIX &wtc)
{
	matWTC = wtc;
	SetInverse(matWTC,&matCTW);

	bClipPlanesSet = false;
	bWTPValid = false;
}
///////////////////////////////////////////////////////////////////////////////
bool Camera::sphereVisCheck(const D3DVECTOR &pos, float rad)
{
	D3DVECTOR dv;

	Set(&dv,pos.x-matCTW._41,pos.y-matCTW._42,pos.z-matCTW._43);
	float dot = Dot(dv,*((D3DVECTOR *)&matCTW._31));

	if(dot+rad < fNearPlane)
		return false;
	if(dot-rad > fFarPlane)
		return false;

	if(!bClipPlanesSet)
	{
		updateClipPlanes();
	}

	for(int i=0; i<4; i++)
	{
		dot = Dot(pos,clipPlanes[i]);
		if(dot - clipPlanes[i].w > rad)
			return false;
	}
	
	return true;		
}
///////////////////////////////////////////////////////////////////////////////
void Camera::updateClipPlanes()
{
	D3DVECTOR pts[4];
	Set(&pts[0], 1.f, 1.f, 1.f);
	Set(&pts[1], 1.f,-1.f, 1.f);
	Set(&pts[2],-1.f, 1.f, 1.f);
	Set(&pts[3],-1.f,-1.f, 1.f);

	int ids[] =
	{
		0,1, 
		3,2, 
		2,0, 
		1,3, 
	};

	for(int i=0; i<4; i++)
	{
		D3DVECTOR norm,v;
		Sub(pts[ids[i*2+1]],pts[ids[i*2]],&v);
		Cross(pts[ids[i*2]],v,&norm);
		Normalize(&norm);

		TransformVector(norm,matCTW,&clipPlanes[i]);
		clipPlanes[i].w = Dot(clipPlanes[i],*(D3DVECTOR *)&matCTW._41);
	}

	bClipPlanesSet = true;
}
///////////////////////////////////////////////////////////////////////////////
float Camera::getPixelScaleForZ(float z) const
{
	float v = z / (matProj._11 * 320.f);
	return v;
}
///////////////////////////////////////////////////////////////////////////////
D3DMATRIX & Camera::getWTP()
{
	if( !bWTPValid )
	{
		MulMats(matWTC,matProj,&matWTP);
		bWTPValid = true;
	}

	return matWTP;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\DEV.C ===
/*************************************************************************
*                                                                        *
*   This file contains the tables and definitions for                 *
*   the synthesis specific DEVice                                     *
*      The device tables are in devtab.c                                  *
**************************************************************************
*
*   The following variables and tables must be defined:
*
*   max_tracks:     1 byte, max # of synthesis channels
*   dev_init:       function called to initialize device
*   do_watchdog     function called to  kick watchdog timer
*   dtimer_int      function called to  disable timer interrupt
*   etimer_int      function called to  enable timer interrupt
*   send_dev_function:
*       function called to send a byte of data to the synthesis
*       device (sound call callable)
*       The data is in the global, "a_value" and the address is
*       in the global, "b_value."
**************************************************************************/

#define _base_

extern  struct DSPpatch *Patches[];
extern  unsigned short  Noise8192[];

#include    <dsound.h>
#include "sosdsp.h"
#include "sos.h"
#include "bootsnd.h"
#include    <xtl.h>
#include "dsptables.h"

#define MAX_BUFFERS 16

#ifdef STARTUPANIMATION
#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")

#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif

LPDIRECTSOUND8          m_pDSound;                          // DirectSound object
LPDIRECTSOUNDBUFFER8    m_pDSBuffer[MAX_BUFFERS];           // DirectSoundBuffer
extern WCHAR    StringBuffer[];

#define MIN(a,b) (((signed) a) < ((signed) b) ? (a) : (b))

/*
 *  track_status has the necessary items to restore the state of
 *  a track after a track of a higher level on the same channel
 *  ends
 */

#define MAX_TRACKS  16
#define MAX_PROCESSES       30
#define MAX_LEVELS      2

uchar       channel_level[MAX_TRACKS];/* current level for each chan*/
struct track_info track_status[(MAX_LEVELS) * MAX_TRACKS];
struct process queue_list[MAX_PROCESSES]; /* pre-allocated process packets */
extern      struct sound    * _base_ current_call;      /* pointer to current sound call */
extern  uchar   sound_call_table;


const   unsigned short  max_processes = MAX_PROCESSES;

extern          uchar       a_value, b_value;
unsigned int    dsp_address;
unsigned int    dsp_data;   
extern  ushort      value_16_bit;
extern  uchar   current_channel;
extern  uchar       master_music_volume;    /* main attenuation for music   */
extern  uchar       master_effect_volume;   /* main attenuation for f/x */
extern  uchar       music_atten;            /* music attenuation */
extern  uchar   init_call;
extern  uchar   current_level;      /* global level of current process */
extern  struct  track_info  * _base_ ti;    /* track info pointer */
extern  uchar   pan_table[];                    /* panning table (8-bit) */
void    put_dsp(void);
extern  reset_dsp();
void    init_dsp(void);
void    put_fifo(unsigned char);
const   unsigned char   max_tracks = MAX_TRACKS;

extern void (* const call_fcns[])();

int volume_dsp(uchar, uchar, uchar *,uchar);
int silence_dsp(uchar);
int note_on_dsp();
int slur_dsp();
int note_off_dsp();
int patch_dsp(unsigned short);
int pan_dsp(uchar , signed char, uchar *);
int vp_filter();



int (* const filter_functions[])() = {
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter,
    vp_filter   
};


int (* const silence_functions[])() = {
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    silence_dsp,
    
};

/**************************************************************************
*                                                                        *
*   The note_on functions turn a note on.  They assume that           *
*   the global, "a_value" has the current channel # and that          *
*   the global "value_16_bit" has the 16 bit pitch (iiiiiiii.ffffffff *
*      and "b_value" has the integer part of the pitch                    *
*************************************************************************/
int (* const note_on_functions[])() = {
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
    note_on_dsp,
};



int (* const slur_functions[])() = {
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
    slur_dsp,
};


/*************************************************************************
*                                                                        *
*   The note_off functions turn a note off.  They assume that         *
*   the global, "a_value" has the current channel.                    *
*************************************************************************/
int (* const note_off_functions[])() = {
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
    note_off_dsp,
};
int (* const patch_functions[]) () = {
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,
    patch_dsp,

};


int (* const volume_functions[])() = {
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,
    volume_dsp,

};
int (* const pan_functions[])() = {
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,
    pan_dsp,

};


int (* const user_1_var_evf_functions[])() = {
    pan_dsp
};
int (* const user_2_var_evf_functions[])() = {
    pan_dsp
};

//
// write data from global var dsp_data to x memory space "dsp_address"
//

void put_dsp()
{

//  LPVOID pvXramBuffer;
//  pvXramBuffer = (LPVOID) (dsp_address);

//    memcpy(pvXramBuffer,pvData,dwDataSize);

//  *(PDWORD) (GPXMEM + dsp_address) = dsp_data;
    
}


WriteDSPDatablock
(
    DWORD                   dwDSPAddress, 
    LPCVOID                 pvData, 
    DWORD                   dwDataSize
)
{
    LPVOID pvXramBuffer;

        //
        // poke directly the XRAM offset
        //

    pvXramBuffer = (LPVOID) (GPXMEM + dwDSPAddress);
    memcpy(pvXramBuffer,pvData,dwDataSize);

 
    return 1;

}

ReadDSPDatablock
(
    DWORD                   dwDSPAddress, 
    LPVOID                  pvData, 
    DWORD                   dwDataSize
)
{
    LPVOID pvXramBuffer;
    //
    // copy fx data
    //
    pvXramBuffer = (LPVOID) (GPXMEM + dwDSPAddress);
    memcpy(pvData,pvXramBuffer,dwDataSize);

    return 1;
}

ReadDSPProgblock
(
    DWORD                   dwDSPAddress, 
    LPVOID                  pvData, 
    DWORD                   dwDataSize
)
{
    LPVOID pvXramBuffer;
    //
    // copy fx data
    //
    pvXramBuffer = (LPVOID) (GPPMEM + dwDSPAddress);
    memcpy(pvData,pvXramBuffer,dwDataSize);

    return 1;
}

// return dsp data
int get_dsp(unsigned int addr)
{
//  return( (*PDWORD) (GPXMEM + dsp_address) );
    return(1);
}

silence_dsp(unsigned char chan)
{

    return(1);
}   


note_on_dsp()
{
    DWORD   dwFreq;
    struct DSPpatch *addr;

#if DBG

//  dwFreq = pitch_table_dsp[value_16_bit>>8];
//  swprintf( StringBuffer, L"Current Pitch: 0x%x", dwFreq);

#endif

    dwFreq = (DWORD) ( ((value_16_bit >> 8) - 60) * (4096/12) );
    dwFreq += ((((DWORD) value_16_bit & 0xff) * 341) / 255);
//  IDirectSoundBuffer_StopEx(m_pDSBuffer[current_channel], 0, DSBSTOPEX_ENVELOPE);
    IDirectSoundBuffer_SetPitch(m_pDSBuffer[current_channel], dwFreq);

    addr = Patches[ti->patch];
    if (addr->LoopEnable) 
        IDirectSoundBuffer_Play(m_pDSBuffer[current_channel], 0,0,DSBPLAY_LOOPING);
    else
        IDirectSoundBuffer_Play(m_pDSBuffer[current_channel], 0,0,0);

    return(1);

}
slur_dsp()
{
    DWORD   dwFreq;

    dwFreq = (DWORD) ( ((value_16_bit >> 8) - 60) * (4096/12) );
    dwFreq += ((((DWORD) value_16_bit & 0xff) * 341) / 255);

#if DBG
//  swprintf( StringBuffer, L"Current Pitch Slur: 0x%x", dwFreq);
#endif

    IDirectSoundBuffer_SetPitch(m_pDSBuffer[current_channel], dwFreq);

    return(1);
}

note_off_dsp()
{
    IDirectSoundBuffer_StopEx(m_pDSBuffer[current_channel], 0, DSBSTOPEX_ENVELOPE);
    return(1);

}

vp_filter()
{
    DSFILTERDESC    fdesc;


    fdesc.dwMode = DSFILTER_MODE_DLS2;
    fdesc.dwQCoefficient = 0;
    fdesc.adwCoefficients[0] = ti->filtercutoff + 32768;
    fdesc.adwCoefficients[1] = ti->filterres;
    fdesc.adwCoefficients[2] = ti->filtercutoff + 32768;
    fdesc.adwCoefficients[3] = ti->filterres;
    IDirectSoundBuffer_SetFilter(m_pDSBuffer[current_channel], &fdesc);
    return(1);
}



patch_dsp(unsigned short pat)
{
    struct DSPpatch *addr;

    addr = Patches[pat];

    IDirectSoundBuffer_SetEG(m_pDSBuffer[current_channel], addr->lpAmpEnvelope);
    IDirectSoundBuffer_SetEG(m_pDSBuffer[current_channel], addr->lpMultiEnvelope);
    IDirectSoundBuffer_SetBufferData(m_pDSBuffer[current_channel], addr->Start, addr->Length );
    IDirectSoundBuffer_SetLoopRegion( m_pDSBuffer[current_channel],0, addr->Length );
    IDirectSoundBuffer_SetCurrentPosition(m_pDSBuffer[current_channel], 0 );
    
    return(1);
}



pan_dsp(uchar chan, signed char pan, uchar *patch)
{
    uchar   mod;
    unsigned int    vol_mul;
    unsigned int    tmp;
    char            tmp_pan;

    vol_mul = 0x7fff;
    if (current_level >= 1) {           
/*      mod = master_effect_volume;*/
//      vol_mul = volume_table_dsp[master_music_volume];
    }
    else {
/*      mod = 0;*/
//      tmp = volume_table_dsp[music_atten];
//      vol_mul = volume_table_dsp[master_music_volume];

//      vol_mul = (long)((long)tmp * (long)vol_mul) >>15;
    
    }

    mod = 0;

    tmp_pan = ti->pan >> 3;

    tmp_pan += 16;                      /* set range 0 - 31 */
    tmp = 1;    
//  tmp = volume_table_dsp[MIN(127,ti->volume + mod)];
    tmp = (long)((long)tmp * (long)vol_mul) >>15;

/*  tmp >>= 7;*/
    dsp_data = (long) ((long)tmp * (long)pan_table[tmp_pan]) >> 7;
/*  dsp_data = (char)tmp * pan_table[tmp_pan];*/
//  a_value = VOLUME_L_ADDRESS(chan);
    put_dsp();

    dsp_data = (long) ((long)tmp * (long)pan_table[31 - tmp_pan]) >> 7;
/*  dsp_data = (char)tmp * pan_table[31 - tmp_pan];*/
//  a_value = VOLUME_R_ADDRESS(chan);
    put_dsp();

    return(1);

}


// initialize stuff for the dsp.
// write sine wave into high x memory.
// also create 16 dsound buffers that we'll use
// for our sounds.


static long holdrand = 1L;

void __cdecl srand(unsigned int seed)
{
    holdrand = (long)seed;
}

int __cdecl rand(void)
{
    return(((holdrand = holdrand * 214013L + 2531011L) >> 16) & 0x7fff);
}

dev_init()
{
    
    DSBUFFERDESC dsbdesc;
    WAVEFORMATEX wfFirst;
    DWORD       dwMixBinMask = DSMIXBIN_FRONT_LEFT | DSMIXBIN_FRONT_RIGHT | DSMIXBIN_FXSEND_0;
    long        lVolumes[3];
    int j;
    double  dtmp;
    double  FMc = 4.0;
    double  FMm = 2.0;


    int i;

    srand(1003);
    for (i = 0; i < 8192; i++) {
        Noise8192[i] = (unsigned short) rand();
    }

    for (i = 0; i < 128; i++) {
        Sin128[i] = (unsigned short)(32767*sin(2.0*3.14159*(double)i/128.0));
    }
    j = 0;
    for (i = 0; i < 32768; i++) {
        if (i < 16384)
            j++;
        else
            j--;
        dtmp = (double)j/16384.0  * sin(FMm * 2.0*3.14159*(double)i/128.0);
        FM32768[i] = (unsigned short)(32767*sin(dtmp + FMc * 2.0*3.14159*(double)i/128.0));
    }

    for (i = 0; i < 128; i++) {         // create sawtooth wave
        Saw128[i] = (unsigned short) (65536 * ((float)(i-64) /128.0));
    }

    for (i = 0; i < 0x5540; i++) {      // size of glock sound..make 16-bit
        ThunEl16[i] = (ThunEl16Data[i]) << 8;
    }
    for (i = 0,j=0x5540; i < 0x5540; i++,j--) {     // size of glock sound..make 16-bit
        ReverseThunEl16[i] = ThunEl16[j];
    }

    

    for (i = 0; i < 3768; i++) {        // size of glock sound..make 16-bit
        Glock[i] = (GlockData[i]^0x80) << 8;
    }
        
    for (i = 0; i < 6719; i++) {        // size of glock sound..make 16-bit
        Bubble[i] = (BubbleData[i]^0x80) << 8;
    }


    if( FAILED( DirectSoundCreate( NULL, &m_pDSound, NULL ) ) )
        return (0);


    ZeroMemory( &dsbdesc, sizeof( DSBUFFERDESC ) );
    dsbdesc.dwSize = sizeof( DSBUFFERDESC );

    wfFirst.wFormatTag = WAVE_FORMAT_PCM;
    wfFirst.nChannels = 1;
    wfFirst.nSamplesPerSec = 48000;
    wfFirst.wBitsPerSample = 16;
    wfFirst.nBlockAlign = wfFirst.nChannels * wfFirst.wBitsPerSample/8;
    wfFirst.nAvgBytesPerSec = wfFirst.nSamplesPerSec * wfFirst.nBlockAlign;

    dsbdesc.dwFlags = 0;
    dsbdesc.dwBufferBytes = 0;
    dsbdesc.lpwfxFormat = &wfFirst;
    dsbdesc.dwMixBinMask = dwMixBinMask;


    for (i = 0; i < MAX_BUFFERS; i++) {


        if (i%2) {
        lVolumes[0] = -600;
        lVolumes[1] = 0;
        lVolumes[2] = -2800;
        dwMixBinMask = DSMIXBIN_FRONT_LEFT | DSMIXBIN_FRONT_RIGHT;  
            dsbdesc.dwMixBinMask = dwMixBinMask;        
        }
        else {
        lVolumes[0] = 0;
        lVolumes[1] = -600;
        lVolumes[2] = -2800;
        dwMixBinMask = DSMIXBIN_FRONT_LEFT | DSMIXBIN_FRONT_RIGHT;  
            dsbdesc.dwMixBinMask = dwMixBinMask;    
        }
        if ((i == 3) || (i == 5)) {
        lVolumes[0] = 0;
        lVolumes[1] = -100;
        lVolumes[2] = 00;
        dwMixBinMask = DSMIXBIN_FRONT_LEFT | DSMIXBIN_FRONT_RIGHT | DSMIXBIN_FXSEND_0;
            dsbdesc.dwMixBinMask = dwMixBinMask;
        }

            if( FAILED( DirectSoundCreateBuffer( &dsbdesc, &m_pDSBuffer[i]) ) )
                return E_FAIL;

            IDirectSoundBuffer_SetMixBinVolumes(m_pDSBuffer[i], dwMixBinMask, lVolumes);
    }

//  ReadDSPDatablock(0xa00*4, databack, sizeof(databack) );

     put_fifo(0x1);
     return(1);
}
//
// free dsound buffers and dsound object we created
//
dev_cleanup()
{
    int i;

    for (i = 0; i < MAX_BUFFERS; i++) {
        IDirectSoundBuffer_Release(m_pDSBuffer[i]);
    }
    IDirectSound_Release(m_pDSound);

}


do_watchdog()
{
}
dtimer_int()
{
}
etimer_int()
{
}
send_dev_function()
{
}
/*************************************************************************
*                                                                        *
*   Adjust the volume of that patch, "patch_addr" on channel,     *
*   "chan" by the amount volume + whatever the global volume is   *
*   for "level"                           *
*                                                                        *
*************************************************************************/

volume_dsp(
uchar op_level, 
uchar sound_level,
uchar *patch_addr,
uchar   chan)
{

    IDirectSoundBuffer_SetVolume(m_pDSBuffer[current_channel], (-1*op_level*30) + 200);
    return(1);
}

call_user_function()
{

}

extern  f_end();


user_silence_function()
{
#if DBG
//  swprintf( StringBuffer, L"Current Sound: %S", "SilenceFunction");
#endif
}

uchar pan_table[] = {
    1,2,3,4,5,6,7,8
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\CamControl.h ===
///////////////////////////////////////////////////////////////////////////////
// File: CamControl.h
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#ifndef CAMCONTROL_H
#define CAMCONTROL_H

#include "xbs_math.h"



/*
Uses Hermite interpolation, from page 54 of "Real-Time Rendering" (Moeller, Haines)


The finish nodes are:
	0: before the beginning of the slash, anything before this doesn't need to render the slash
	1: after exiting slash
	2: translated down, but still looking at center (but it is eclipsed by slash geometry) after this, only render slash
	3: partly rotated to final position, looking at slash center now
	4: final position
	5: final position, with high time value (the endcap)

*/


struct CamControlNodeData
{
public:
	unsigned char	ucTime;					// Time when the camera arrives here (0 indicates start of new path, 100 is start of finalization)
	signed char		scTension, scBias;		// Tension and bias of point, from -100 to +100
	D3DVECTOR		ptPosition;				// Position of node
	D3DVECTOR		vecLookAt;				// Position the camera looks at
};




struct CamControlNode
{
public:
	float		fTime;			// Time when the camera arrives here (0 indicates start of new path)
	D3DVECTOR	ptPosition;		// Position of node
	D3DVECTOR	vecVelocity;	// Velocity at this point
	D3DVECTOR	vecLookAt;		// Position the camera looks at
	D3DVECTOR	vecLookAtW;		// Velocity of what the camera looks at
	float		tension, bias;
};


class CameraController
{
protected:
	static CamControlNodeData	svCameraListData[];
	static CamControlNode		svCameraList[];

	enum { NUM_FINISH_NODES = 8 };
	CamControlNode		finishNodes[NUM_FINISH_NODES];
	D3DMATRIX	xfSlash;
	D3DVECTOR	ptSlashCenter;
	D3DVECTOR	ptFinalLookAt;

	int			numNodes;
	int			numPaths;


	int			curPathNum;
	int			curStartNode;
	int			curNumNodes;
	int			curVariableNodes;
	
	float		fCameraLookatInterpStart, fOOCameraLookatInterpDelta;


	CamControlNode*			getNode(int i)			{ return (i<curVariableNodes) ? &svCameraList[i+curStartNode] : &finishNodes[i-curVariableNodes]; }
	const CamControlNode*	getNode(int i)	const	{ return (i<curVariableNodes) ? &svCameraList[i+curStartNode] : &finishNodes[i-curVariableNodes]; }

public:
	void Init();
	void UnInit() {}

	void		buttonPressed();


	void		pickPath(int path = -1);	// negative indicates random


	void		getPosition(float t, D3DVECTOR* p_pos, D3DVECTOR* p_look, bool* pb_render_geom, bool* pb_render_slash);

	const D3DMATRIX&	getSlashTransform()	const	{ return xfSlash; }
};



#endif // CAMCONTROL_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\dsptables.h ===
#ifdef STARTUPANIMATION

#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")

// Tell linker to put bootsound code and data into INIT section
#pragma comment(linker, "/merge:DSOUND=INIT")

#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif //STARTUPANIMATION


unsigned const short pitch_table_dsp[] = {
		0x80
};



unsigned short	FM32768[32768];

unsigned short	Sin128[128];


unsigned short	Saw128[128];



unsigned short Noise8192[8192];

unsigned short	ThunEl16[0x5540];	// size from thunel16k.equ
unsigned short	ReverseThunEl16[0x5540]; // reversed version

unsigned const char	ThunEl16Data[] = {
#include "thunel16.x00"
};


unsigned short	Glock[3768];	// size from glock.equ

unsigned const char	GlockData[] = {
#include "glock.x00"
};


unsigned short	Bubble[6719];	// size from bubble.equ

unsigned const char	BubbleData[] = {
#include "Bubble.x00"
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\fastmath.h ===
/*--
Copyright (c) 1999 - 2000 Microsoft Corporation - Xbox SDK Framework

Module Name:

    FastMath.h

Abstract:

    General math support including fast replacements for the standard math
    library. These fast replacements use SSE/SIMD instructions.

Revision History:

	7/1/2000	added fast_acos and fast_asin for SSE.
	7/3/2000	Fixed fast_log10 and fast_inversesqrt.
	7/4/2000	Fixed fast_atan2 bug.
	7/5/2000	improved quality of fast_acos and fast_asin.
	7/6/2000	improved algorithm of fast_log.
	8/1/2000	implemented hypot.
	8/8/2000	implemented fast_ceil and fast_floor.
	8/21/2000	implemented 3 fast hyperbolic functions.


TODO:
	Fix up arc-tangent quality.

--*/

#if !defined(SDK_HEADER_FASTMATH)
#define SDK_HEADER_FASTMATH


#if defined (_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#include "xmmintrin.h"
#include "math.h"

//------------------------------------------------------------------------------
#define PI              3.14159265358979323846f             // Pi
#define PI_MUL_2        6.28318530717958623200f             // 2 * Pi
#define PI_DIV_2        1.57079632679489655800f             // Pi / 2
#define PI_DIV_4        0.78539816339744827900f             // Pi / 4
#define INV_PI          0.31830988618379069122f             // 1 / Pi
#define DEGTORAD        0.01745329251994329547f             // Degrees to Radians
#define RADTODEG        57.29577951308232286465f            // Radians to Degrees
#define FLOAT_SMALL     1.0e-6f                             // Small number for floats
#define FLOAT_HUGE      1.0e+38f                            // Huge number for floats
#define FLOAT_EPSILON   1.0e-5f                             // Tolerance for floats
#define FLOAT_INFINITY  ((float)3.40282346638528860e+38)    // Infinity value for float


//----------------------------------------------------------------------------
// Flaoting point manipulation macros, used by the inline functions below.
#define FP_BITS(fp) (*(DWORD *)&(fp))
#define FP_ABS_BITS(fp) (FP_BITS(fp)&0x7FFFFFFF)
#define FP_SIGN_BIT(fp) (FP_BITS(fp)&0x80000000)
#define FP_ONE_BITS     0x3F800000
#define FP_HALFH        0x3f000000
#define FP_EXP_BITS     0x7f800000
#define FP_SMAN_BITS    0x807fffff

//----------------------------------------------------------------------------
// Define a C structure to hold a pair of floats.
struct SinCosPair
{
    float   fCos;
    float   fSin;
};


//----------------------------------------------------------------------------
extern float fast_atan(float x);
extern float fast_atan2(float x, float y);
extern float fast_acos(float x);
extern float fast_asin(float x);
extern float fast_log(float x);
extern float fast_log10(float x);
extern float fast_exp(float x);
extern float fast_sqrt(float x);
extern float fast_inversesqrt(float x);
extern float fast_fabs(float x);
extern void fast_sincos(float x, SinCosPair* v);
extern float fast_sin(float x);
extern float fast_cos(float x);
extern float fast_tan(float x);
extern float fast_pow(float x, float y);

extern float fast_hypot(float x, float y);
extern float fast_ceil(float x);
extern float fast_floor(float x);
extern float fast_tanh(float x);
extern float fast_cosh(float x);
extern float fast_sinh(float x);

#endif //SDK_HEADER_FASTMATH
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\GLOBALS.C ===
#include "sos.h"
#include "error.h"
#include "protos.h"

#ifdef STARTUPANIMATION

#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")


#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif //STARTUPANIMATION

struct	process	*  process_queue;		/* pointer to process queue 	*/
struct sound	*  current_call;		/* pointer to current sound call*/
struct process *  current_process;	/* pointer to current s. proc 	*/

struct	fifo fifo;			/* sound call fifo		*/

struct	track_info	*  ti;   	/* global pointer to current track info*/
 ushort		value_16_bit;	/* value to pass to asm routine */

short 		system_clock_music ;/* global music system timer     	*/
uchar		system_clock_mlow;  /* for 3 byte clocks		*/
short 		system_clock_fx; /* global fx system timer	    	*/
uchar		system_clock_fxlow; /* for 3-byte clocks	*/
uchar 		clock_cntr[2];	/* clock count-downer		*/
uchar 		clock_cntr_value[2];	/* clock count-downer reset val	*/
uchar		clock_cntr_save;	/* save value of clock count-downer */
ushort 		global_music_xpose;	/* master transposition for mus	*/
ushort		global_effect_xpose;	/* master transposition for f/x	*/
uchar		a_value;		/* byte for register a data 	*/
uchar		b_value;		/* byte for register b data 	*/
uchar		master_music_volume;	/* main attenuation for music	*/
uchar		master_effect_volume;	/* main attenuation for f/x	*/
uchar		music_atten;		/* music attenuation control */

uchar		marker;					/* tune transition marker	*/
uchar		current_level;		/* global level of current process */
uchar		current_channel;	/* global chan of current process */


ushort		dp_word1;			/* temp var */

uchar		gtifbtmp;			/* temp var for get_info_block */
uchar		last_music_call;	/* last music call made		*/
uchar		current_timer_priority;	/* priority of last timer call */
uchar		sos_only;			/* 1 to loop forever, 0 to return */
uchar		sound_call_table;	/* which soundtable are we on ?*/
ushort		global_fxpose;		/* global transpose value */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\fastmath.cpp ===
/*--
Copyright (c) 2000  Microsoft Corporation - Xbox SDK

Module Name:

    fastmath.cpp
--*/

#include "precomp.h"
//#include "Debug.h"

//----------------------------------------------------------------------------
// Katmai and MMX(TM) constants implementation
#define _MM_ALIGN16 __declspec(align(16))

#define SC_OPT

#if !defined(M128)
#define M128(x) (*(__m128*)&(x))
#endif

typedef unsigned long DWORD;

#define _M128_CONST(Name, Val) \
static const _MM_ALIGN16 float _m128const_##Name[4] = { Val, Val, Val, Val }

#define _M128_CONST4(Name, Val0, Val1, Val2, Val3) \
static const _MM_ALIGN16 float _m128const_##Name[4] = { Val0, Val1, Val2, Val3 }

#define M128_EXTERN_CONST(Name, Val) \
static const _MM_ALIGN16 float _m128const_##Name[4] = { Val, Val, Val, Val }; \
const __m128* p##Name = (__m128*)_m128const_##Name

#define M128_EXTERN_CONST_TYPE(Name, Val, Type) \
static const _MM_ALIGN16 Type _m128const_##Name[4] = { Val, Val, Val, Val }; \
const __m128* p##Name = (__m128*)_m128const_##Name

#define M128_CONST(Name, Val) \
static const _MM_ALIGN16 float _m128const_##Name[4] = { Val, Val, Val, Val }; \
const __m128 Name = M128(_m128const_##Name)

M128_EXTERN_CONST(am_0, 0.0f);
M128_EXTERN_CONST(am_1, 1.0f);
M128_EXTERN_CONST(am_minus_1, -1.0f);
M128_EXTERN_CONST(am_0p5, 0.5f);
M128_EXTERN_CONST(am_1p5, 1.5f);
M128_EXTERN_CONST(am_3_over_2, 3.0f / 2.0f);
M128_EXTERN_CONST(am_pi, PI);
M128_EXTERN_CONST(am_pi_over_2, (PI / 2.0f));
M128_EXTERN_CONST(am_2_over_pi, (2.0f / PI));
M128_EXTERN_CONST_TYPE(am_sign_mask, 0x80000000, DWORD);
M128_EXTERN_CONST_TYPE(am_inv_sign_mask, ~0x80000000, DWORD);
M128_EXTERN_CONST_TYPE(am_min_pos_norm, 0x00800000, DWORD);
M128_EXTERN_CONST_TYPE(am_mant_mask, 0x7f800000, DWORD);
M128_EXTERN_CONST_TYPE(am_inv_mant_mask, ~0x7f800000, DWORD);


//----------------------------------------------------------------------------
// Katmai and MMX(TM) constants implementation
static const float p0 = 0.15707963267948963959e1f;
static const float p1 = -0.64596409750621907082e0f;
static const float p2 = 0.7969262624561800806e-1f;
static const float p3 = -0.468175413106023168e-2f;

static const float t0 = -0.91646118527267623468e-1f;
static const float t1 = -0.13956945682312098640e1f;
static const float t2 = -0.94393926122725531747e2f;
static const float t3 =  0.12888383034157279340e2f;
static const float s0 =  0.12797564625607904396e1f;
static const float s1 =  0.21972168858277355914e1f;
static const float s2 =  0.68193064729268275701e1f;
static const float s3 =  0.28205206687035841409e2f;

static const float p0exp = 1.26177193074810590878e-4f;
static const float p1exp = 3.02994407707441961300e-2f;

static const float q0 = 3.00198505138664455042e-6f;
static const float q1 = 2.52448340349684104192e-3f;
static const float q2 = 2.27265548208155028766e-1f;
static const float q3 = 2.00000000000000000009e0f;

static const float rln2 = 1.4426950408889634073599f;
static const float c1 = 6.93145751953125e-1f;
static const float c2 = 1.42860682030941723212e-6f;

	const float at3613 = 2.7692309f;
	const float at2511 = 2.2727273f;
	const float at36 = 36.0f;
	const float at25 = 25.0f;
	const float at16 = 16.0f;
	const float at11 = 11.0f;
	const float at9 = 9.0f;
	const float at7 = 7.0f;
	const float at5 = 5.0f;
	const float at4 = 4.0f;
	const float at3 = 3.0f;
	const float at1 = 1.0f;
	const float at_p2 = PI_DIV_2;
	const float mp2 = -PI_DIV_2;

	const float as2 = FLOAT_SMALL;

	const float SQ2 = 1.4142136f;
	const float SQ3 = 0.3333333f;
	const float SQ5 = 1.4000000f;
	const float SQ7 = 0.1428571f;
	const float LOG2 = 0.3465736f;

    static const float log_p0 = -7.89580278884799154124e-1f;
    static const float log_p1 = 1.63866645699558079767e1f;
    static const float log_p2 = -6.41409952958715622951e1f;

    static const float log_q0 = -3.56722798256324312549e1f;
    static const float log_q1 = 3.12093766372244180303e2f;
    static const float log_q2 = -7.69691943550460008604e2f;

    static const float log_rsqrt2 = 7.07106781186547524401e-1f;
    static const float log_c0 = 0.693147180559945f;

    static const float fmax = 88.0f;
    static const float fmin = -88.0f;

    static const float pow_p0 = -7.89580278884799154124e-1f;
    static const float pow_p1 = 1.63866645699558079767e1f;
    static const float pow_p2 = -6.41409952958715622951e1f;

    static const float pow_q0 = -3.56722798256324312549e1f;
    static const float pow_q1 = 3.12093766372244180303e2f;
    static const float pow_q2 = -7.69691943550460008604e2f;

    static const float pow_rsqrt2 = 7.07106781186547524401e-1f;
    static const float pow_c0 = 1.44269504088896340735992f;

    static const float pow_r0 = 2.30933477057345225087e-2f;
    static const float pow_r1 = 2.02020656693165307700e1f;
    static const float pow_r2 = 1.51390680115615096133e3f;

    static const float pow_s0 = 2.33184211722314911771e2f;
    static const float pow_s1 = 4.36821166879210612817e3f;

    static const float pow_fmax = 128.0f;
    static const float pow_fmin = -127.0f;

	const float th1 = 1.0f;
	const float th2p = 2.0f;
	const float th2m = -2.0f;
	const float th3 = 0.3333333f;


	const float sh1 = 1.0f;
	const float sh5 = 0.5f;
	const float sh6 = 0.1666667f;

	const float t_as[49] = {
		0.9698000f,
		0.9691796f, 0.9685330f, 0.9678589f, 0.9671551f, 0.9664199f, 0.9656509f, 0.9648460f, 0.9640023f,
		0.9631173f, 0.9621876f, 0.9612098f, 0.9601802f, 0.9590943f, 0.9579477f, 0.9567349f, 0.9554501f,
		0.9540865f, 0.9526370f, 0.9510929f, 0.9494448f, 0.9476817f, 0.9457912f, 0.9437591f, 0.9415686f,
		0.9392007f, 0.9366328f, 0.9338384f, 0.9307863f, 0.9274390f, 0.9237517f, 0.9196697f, 0.9151261f,
		0.9100379f, 0.9043011f, 0.8977833f, 0.8903134f, 0.8816667f, 0.8715416f, 0.8595238f, 0.8450292f,
		0.8272059f, 0.8047620f, 0.7756411f, 0.7363636f, 0.6805556f, 0.5952381f, 0.4500000f, 0.1666667f
	};

//----------------------------------------------------------------------------
// atan
float fast_atan
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)

    // 154 cycles
    return atanf(x);

#else
#if defined(SC_OPT)
	_asm {
		mov		eax, x
		movss	xmm0, x
		cmp		eax, 0bf800000h
		jnc		minus1
		cmp		eax, 3f800000h
		jnc		plus1
		movss	xmm1, xmm0
		mulss	xmm1, xmm1
		movss	xmm2, xmm1
		movss	xmm3, xmm1
		movss	xmm4, xmm1
		movss	xmm5, xmm1
		mulss	xmm2, at2511
		mulss	xmm3, at16
		mulss	xmm4, at9
		mulss	xmm5, at4
		addss	xmm2, at9
		rcpss	xmm6, xmm2
		mulss	xmm6, xmm3
		addss	xmm6, at7
		rcpss	xmm2, xmm6
		mulss	xmm2, xmm4
		addss	xmm2, at5
		rcpss	xmm6, xmm2
		mulss	xmm6, xmm5
		addss	xmm6, at3
		rcpss	xmm2, xmm6
		mulss	xmm1, xmm2
		addss	xmm1, at1
		rcpss	xmm2, xmm1
		movss	xmm7, xmm2
		addss	xmm2, xmm2
		mulss	xmm7, xmm7
		mulss	xmm7, xmm1
		subss	xmm2, xmm7

		mulss	xmm0, xmm2
		movss	x, xmm0
	}
	return x;
	_asm {
		ALIGN 16
minus1:
		rcpss	xmm0, xmm0
		movss	xmm1, xmm0
		mulss	xmm1, xmm1
		movss	xmm2, xmm1
		movss	xmm3, xmm1
		movss	xmm4, xmm1
		movss	xmm5, xmm1
		movss	xmm6, xmm1
		mulss	xmm2, at3613
		mulss	xmm3, at25
		mulss	xmm4, at16
		mulss	xmm5, at9
		mulss	xmm6, at4
		addss	xmm2, at11
		rcpss	xmm2, xmm2
		mulss	xmm2, xmm3
		addss	xmm2, at9
		rcpss	xmm2, xmm2
		mulss	xmm2, xmm4
		addss	xmm2, at7
		rcpss	xmm2, xmm2
		movss	xmm3, mp2
		mulss	xmm2, xmm5
		addss	xmm2, at5
		rcpss	xmm2, xmm2
		mulss	xmm2, xmm6
		addss	xmm2, at3
		rcpss	xmm2, xmm2
		mulss	xmm1, xmm2
		addss	xmm1, at1
		rcpss	xmm2, xmm1
		movss	xmm7, xmm2
		addss	xmm2, xmm2
		mulss	xmm7, xmm7
		mulss	xmm7, xmm1
		subss	xmm2, xmm7
		mulss	xmm0, xmm2
		subss	xmm3, xmm0
		movss	x, xmm3
	}
	return x;
	_asm {
		ALIGN 16
plus1:
		rcpss	xmm0, xmm0
		movss	xmm1, xmm0
		mulss	xmm1, xmm1
		movss	xmm2, xmm1
		movss	xmm3, xmm1
		movss	xmm4, xmm1
		movss	xmm5, xmm1
		movss	xmm6, xmm1
		mulss	xmm2, at3613
		mulss	xmm3, at25
		mulss	xmm4, at16
		mulss	xmm5, at9
		mulss	xmm6, at4
		addss	xmm2, at11
		rcpss	xmm2, xmm2
		mulss	xmm2, xmm3
		addss	xmm2, at9
		rcpss	xmm2, xmm2
		mulss	xmm2, xmm4
		addss	xmm2, at7
		rcpss	xmm2, xmm2
		movss	xmm3, at_p2
		mulss	xmm2, xmm5
		addss	xmm2, at5
		rcpss	xmm2, xmm2
		mulss	xmm2, xmm6
		addss	xmm2, at3
		rcpss	xmm2, xmm2
		mulss	xmm1, xmm2
		addss	xmm1, at1
		rcpss	xmm2, xmm1
		movss	xmm7, xmm2
		addss	xmm2, xmm2
		mulss	xmm7, xmm7
		mulss	xmm7, xmm1
		subss	xmm2, xmm7
		mulss	xmm0, xmm2
		subss	xmm3, xmm0
		movss	x, xmm3
	}
    return x;
#else	// SC_OPT
    // 60 cycles
    __asm
    {
        movss   xmm0, x

        movss   xmm1, xmm0
        rcpss   xmm4, xmm0
        orps    xmm1, _m128const_am_sign_mask
        movss   xmm6, xmm4
        comiss  xmm1, _m128const_am_minus_1
        jc      l_big  // 'c' is 'lt' for comiss

        movss   xmm3, t0
        movss   xmm2, xmm0
        mulss   xmm2, xmm2

        movss   xmm1, s0
        addss   xmm1, xmm2

        movss   xmm7, s1
        rcpss   xmm1, xmm1
        mulss   xmm1, xmm3
        movss   xmm3, t1
        addss   xmm7, xmm2
        addss   xmm1, xmm7

        movss   xmm7, s2
        rcpss   xmm1, xmm1
        mulss   xmm1, xmm3
        movss   xmm3, t2
        addss   xmm7, xmm2
        addss   xmm1, xmm7

        movss   xmm7, s3
        rcpss   xmm1, xmm1
        mulss   xmm1, xmm3
        movss   xmm3, t3
        addss   xmm7, xmm2
        mulss   xmm0, xmm3
        addss   xmm1, xmm7

        rcpss   xmm1, xmm1
        mulss   xmm0, xmm1

        jmp l_done

l_big:
        movss   xmm3, t0
        mulss   xmm6, xmm6

        movss   xmm5, s0
        addss   xmm5, xmm6

        movss   xmm7, s1
        rcpss   xmm5, xmm5
        mulss   xmm5, xmm3
        movss   xmm3, t1
        addss   xmm7, xmm6
        addss   xmm5, xmm7

        movss   xmm7, s2
        rcpss   xmm5, xmm5
        mulss   xmm5, xmm3
        movss   xmm3, t2
        addss   xmm7, xmm6
        addss   xmm5, xmm7

        movss   xmm7, s3
        rcpss   xmm5, xmm5
        mulss   xmm5, xmm3
        movss   xmm3, t3
        addss   xmm7, xmm6
        mulss   xmm4, xmm3
        addss   xmm5, xmm7

        movss   xmm2, _m128const_am_sign_mask
        rcpss   xmm5, xmm5
        mulss   xmm5, xmm4

        movss   xmm7, _m128const_am_pi_over_2
        andps   xmm0, xmm2
        orps    xmm0, xmm7
        subss   xmm0, xmm5

l_done:
        movss   x, xmm0
    }
    return x;
#endif	// !SC_OPT

#endif // !USE_C
}


//----------------------------------------------------------------------------
// atan2
float fast_atan2
(
    float x,
    float y
)
//--------------------------------------
{
#if defined(USE_C)

    // 154 cycles
    return atan2f(x, y);

#else
#if defined(SC_OPT)
	_asm {
		movss	xmm0, x
		rcpss	xmm1, y
		movss	xmm2, xmm1
		addss	xmm1, xmm1
		mulss	xmm2, xmm2
		mulss	xmm2, y
		subss	xmm1, xmm2
		mulss	xmm0, xmm1
		movss	x, xmm0
	}
	return fast_atan( x );
#else	// SC_OPT

    // 77 cycles
    fast_atan(x * y);

    __asm
    {
        // We assume fast_atan leaves the return value in xmm0

        xorps   xmm7, xmm7
        movss   xmm1, y //[esp - 20 - 8]
        comiss  xmm1, xmm7
        movss   xmm4, x //[esp - 20 - 4]
        jnc     l_pos   // 'nc' is 'ge' for comiss

        andps   xmm4, _m128const_am_sign_mask
        orps    xmm4, _m128const_am_pi

        addss   xmm0, xmm4

l_pos:
        movss   x, xmm0
    }

    return x;

#endif	// !SC_OPT
#endif // !USE_C
}

//----------------------------------------------------------------------------
// acos
float fast_acos
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)
    // 273 cycles
    return acosf(x);
#else
	_asm {
		mov		eax, x;
		test	eax, 080000000h
		jnz		acminus
		or		eax, eax		; == 0.0
		jz		acretz
		cmp		eax, 3f800000h	; >= 1.0
		jnc		acretp
		jmp		acculc
acminus:
		and		eax, 7fffffffh	;Just in case.  it may be not need.
		jz		acretz			; == -0.0
		cmp		eax, 0bf800000h	; <= -1.0
		jnc		acretm
acculc:
	}
	return PI_DIV_2 - fast_asin( x );
acretz:
	return PI_DIV_2;
acretp:
	return 0.0f;
acretm:
	return PI;
#endif
}


//----------------------------------------------------------------------------
// asin
float fast_asin
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)
    // 279 cycles
    return asinf(x);
#else
	const unsigned long as1 = FP_ONE_BITS;
	const unsigned long* pt_as = (unsigned long*) &t_as[0];

	_asm {
		mov		eax, x;
		test	eax, 080000000h
		jnz		asminus
		or		eax, eax		; == 0.0
		jz		asretz
		cmp		eax, 3f800000h	; >= 1.0
		jnc		asretp
		cmp		eax, 3f3504f3h	; >= SQRT2 / 2
		jnc		asrett
		jmp		asculc
asminus:
		and		eax, 7fffffffh	;Just in case.  it may be not need.
		jz		asretz			; == -0.0
		cmp		eax, 0bf800000h	; <= -1.0
		jnc		asretm
		cmp		eax, 0bf3504f3h	; <= -SQRT2 / 2
		jnc		asrett
asculc:
		movss	xmm0, as1		;xmm0 = factor
		movss	xmm1, xmm0		;xmm1 = sum
		movss	xmm2, xmm0		;xmm2 = power
		movss	xmm3, x			;xmm3 = x
		movss	xmm4, xmm3
		mulss	xmm4, xmm4		;xmm4 = y
		movss	xmm5, as2		;xmm5 = FLOAT_SMALL
		mov		edx, pt_as
		mov		ecx, 48
asloop:
		movss	xmm6, dword ptr[edx + ecx * 4]
		mulss	xmm0, xmm6
		mulss	xmm2, xmm4
		movss	xmm6, xmm0
		mulss	xmm6, xmm2
		addss	xmm1, xmm6
		comiss	xmm6, xmm5
		dec		ecx
		ja		asloop
		mulss	xmm1, xmm3
		movss	x, xmm1
	}
	return x;
asretz:
	return 0.0f;
asretp:
	return PI_DIV_2;
asretm:
	return -PI_DIV_2;
asrett:
	_asm {
		movss	xmm1, x
		mulss	xmm1, xmm1
		movss	xmm0, as1
		subss	xmm0, xmm1
		rsqrtss	xmm1, xmm0
		movss	xmm2, xmm0
		mulss	xmm0, xmm1
		mulss	xmm0, xmm1
		mulss	xmm0, xmm1
		mulss	xmm0, _m128const_am_0p5
		mulss	xmm1, _m128const_am_3_over_2
		subss	xmm1, xmm0
		mulss	xmm1, x
		movss	x, xmm1
	}
	// quality of fast_atan is too bad.
	return fast_atan( x );
#endif
}


//----------------------------------------------------------------------------
// log
float fast_log
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)

    // 106 cycles
    return logf(x);

#else
#if defined(SC_OPT)

    // 58 cycles
	_asm {
		mov			eax, x
		mov			edx, eax
		and			eax, 7fffffh
		movss		xmm2, SQ2
		and			edx, 7f800000h
		or			eax, 3f800000h
		shr			edx, 22
		mov			x, eax
		movss		xmm1, x
		movss		xmm0, xmm1
		movss		xmm3, SQ5
		addss		xmm1, xmm2
		subss		xmm0, xmm2
		sub			edx, 253

		rcpss		xmm2, xmm1
		movss		xmm3, xmm2			;Newton-Raphson
		addss		xmm3, xmm3
		mulss		xmm2, xmm2
		mulss		xmm2, xmm1
		subss		xmm3, xmm2			;complete Newton-Raphson
		mulss		xmm0, xmm3

		movss		xmm2, SQ7
		movss		xmm1, xmm0
		mulss		xmm0, xmm0
		mulss		xmm2, xmm0
		addss		xmm3, xmm0
		mulss		xmm2, xmm3
		addss		xmm2, SQ3
		mulss		xmm0, xmm1
		mulss		xmm0, xmm2
		cvtsi2ss	xmm3, edx
		addss		xmm0, xmm1
		mulss		xmm3, LOG2
		addss		xmm0, xmm0
		addss		xmm0, xmm3
		movss		x, xmm0
	}
#else	// !SC_OPT

    // 66 cycles
    __asm
    {
        movss   xmm0, x

        maxss   xmm0, _m128const_am_min_pos_norm  // Cut off denormalized stuff
        movss   xmm7, _m128const_am_inv_mant_mask
        movss   xmm1, _m128const_am_1
        movss   [esp - 4], xmm0

        andps   xmm0, xmm7
        orps    xmm0, xmm1  // xmm1 == 1.0
        comiss  xmm0, log_rsqrt2
        movss   xmm7, xmm0

        jc      l_lt  // 'c' is 'lt' for comiss
//l_ge:
        xor     ecx, ecx
        movss   xmm2, xmm1  // xmm1 == 1.0
        jmp     l_continue

l_lt:
        mov     ecx, 1
        movss   xmm2, _m128const_am_0p5

l_continue:
        addss   xmm7, xmm2
        subss   xmm0, xmm2
        mov     edx, x
        rcpss   xmm7, xmm7
        mulss   xmm0, xmm7
        addss   xmm0, xmm0

        shr     edx, 23

        movss   xmm2, xmm0
        sub     edx, 0x7f
        mulss   xmm2, xmm2

        movss   xmm4, log_p0
        movss   xmm6, log_q0

        mulss   xmm4, xmm2
        movss   xmm5, log_p1
        sub     edx, ecx
        mulss   xmm6, xmm2
        movss   xmm7, log_q1

        addss   xmm4, xmm5
        addss   xmm6, xmm7

        movss   xmm5, log_p2
        mulss   xmm4, xmm2
        cvtsi2ss    xmm1, edx
        movss   xmm7, log_q2
        mulss   xmm6, xmm2

        addss   xmm4, xmm5
        addss   xmm6, xmm7

        movss   xmm5, log_c0
        mulss   xmm4, xmm2
        rcpss   xmm6, xmm6

        mulss   xmm4, xmm0
        mulss   xmm1, xmm5
        mulss   xmm4, xmm6

        addss   xmm0, xmm1
        addss   xmm0, xmm4

        movss   x, xmm0
    }
#endif	// SC_OPT
    return x;
#endif // !USE_C
}


//----------------------------------------------------------------------------
// log10
float fast_log10
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)

    // 106 cycles
    return log10f(x);

#else
    // 74 cycles
	// fixed coefficient 7/3/2000 Shinji Chiba
	return fast_log( x ) * 0.4342945f;

#endif // !USE_C
}


//----------------------------------------------------------------------------
// exp
float fast_exp
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)

    // 151 cycles
    return expf(x);

#else

    // 90 cycles
    __asm
    {
        movss   xmm0, x

        maxss   xmm0, fmin
        minss   xmm0, fmax

        movss   xmm1, rln2
        mulss   xmm1, xmm0
        movss   xmm7, _m128const_am_0
        addss   xmm1, _m128const_am_0p5
        xor     ecx, ecx

        mov     edx, 1
        comiss  xmm1, xmm7
        cvttss2si   eax, xmm1
        cmovc   ecx, edx    // 'c' is 'lt' for comiss
        sub     eax, ecx

        cvtsi2ss    xmm1, eax
        add     eax, 0x7f

        movss   xmm2, xmm1
        mulss   xmm1, c1
        and     eax, 0xff   // Optional, just for sanity
        mulss   xmm2, c2
        subss   xmm0, xmm1
        shl     eax, 23
        subss   xmm0, xmm2

        movss   xmm2, xmm0
        mov     x, eax
        mulss   xmm2, xmm2

        movss   xmm6, q0
        movss   xmm4, p0exp

        mulss   xmm6, xmm2
        movss   xmm7, q1
        mulss   xmm4, xmm2
        movss   xmm5, p1exp

        addss   xmm6, xmm7
        addss   xmm4, xmm5

        movss   xmm7, q2
        mulss   xmm6, xmm2
        mulss   xmm4, xmm2

        addss   xmm6, xmm7
        mulss   xmm4, xmm0

        movss   xmm7, q3
        mulss   xmm6, xmm2
        addss   xmm4, xmm0
        addss   xmm6, xmm7
        movss   xmm0, x

        subss   xmm6, xmm4
        rcpss   xmm6, xmm6
        movss   xmm7, _m128const_am_1
        mulss   xmm4, xmm6
        addss   xmm4, xmm4
        addss   xmm4, xmm7

        mulss   xmm0, xmm4

        movss   x, xmm0
    }

    return x;

#endif // !USE_C
}


float fast_sqrt( float x )
{
	_asm {
		mov		eax, x
		or		eax, eax
		jz		SQRTZERO
		movss	xmm0, x
		// approximate sqrt reciprocal -- |Max Error| <= 1.5x2^-12
		rsqrtss	xmm1, xmm0                  // 1/(x^.5)

		// this does the Newton-Raphson iteration to get up
		// to 22 bits of precision
		movss	xmm2, xmm0					// x
		mulss	xmm0, xmm1					// 9 * 1/sqr(9)
		mulss	xmm0, xmm1					// 9 * 1/sqr(9) * 1/sqr(9)
		mulss	xmm0, xmm1					// 9 * 1/sqr(9) * 1/sqr(9) * 1/sqr(9)
		mulss	xmm0, _m128const_am_0p5		// 1/2 * 9 * 1/sqr(9) * 1/sqr(9) * 1/sqr(9)
		mulss	xmm1, _m128const_am_1p5		// 3/2 * 1/sqr(9)
		subss	xmm1, xmm0					// 3/2 * 1/sqr(9) - 1/2 * 9 * 1/sqr(9) * 1/sqr(9) * 1/sqr(9)
		mulss	xmm1, xmm2					// x * 1/(x^.5)
		movss	x, xmm1
SQRTZERO:
	}
	return x;
}

//----------------------------------------------------------------------------
// sqrt
float fast_inversesqrt
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)

    // 61 cycles
    return 1.0f / sqrtf(x);

#else
    // 35 cycles
	_asm {
		movss	xmm0, x
		rsqrtss	xmm1, xmm0
		mulss	xmm0, xmm1
		mulss	xmm0, xmm1
		mulss	xmm0, xmm1
		mulss	xmm0, _m128const_am_0p5
		mulss	xmm1, _m128const_am_3_over_2
		subss	xmm1, xmm0
		movss	x, xmm1
	}
	return x;

#endif // !USE_C
}


//----------------------------------------------------------------------------
// fabs
float fast_fabs
(
    float x
)
//--------------------------------------
{

#if defined(USE_C)

    // 7 cycles
    return fabsf(x);

#else

    // 6 cyles
    __asm
    {
        mov     eax, x          // starting with
        and     eax, 0x7fffffff // And out the sign bit
        mov     x, eax          // result in x
    }

    return x;

#endif // !USE_C

}


//----------------------------------------------------------------------------
// sincos computes both sin and cos simultaneously.
void fast_sincos
(
    float        x,
    SinCosPair*  v
)
//--------------------------------------
{

#if defined(USE_C)

    // 133 cycles
    v->fCos = fast_cos(x);
    v->fSin = fast_sin(x);

#else

    // 68 cycles
    __asm
    {
        movss   xmm0, x

        andps   xmm0, _m128const_am_inv_sign_mask
        mulss   xmm0, _m128const_am_2_over_pi

        mov     eax, x          // sin
        and     eax, 0x80000000 // sin

        movaps  xmm4, xmm0      // sin

        addss   xmm0, _m128const_am_1

        cvttss2si   ecx, xmm0
        cvttss2si   esi, xmm4   // sin

        mov     edx, ecx
        shl     edx, (31 - 1)

        mov     edi, esi        // sin
        shl     edi, (31 - 1)   // sin

        cvtsi2ss    xmm1, ecx
        and     edx, 0x80000000

        cvtsi2ss    xmm5, esi   // sin
        and     edi, 0x80000000 // sin

        and     ecx, 0x1
        subss   xmm0, xmm1

        jz      l_contcos
        movss   xmm1, _m128const_am_1
        subss   xmm1, xmm0
        movss   xmm0, xmm1
l_contcos:

        and     esi, 0x1        // sin
        subss   xmm4, xmm5      // sin

        jz      l_contsin       // sin
        movss   xmm5, _m128const_am_1      // sin
        subss   xmm5, xmm4      // sin
        movss   xmm4, xmm5      // sin
l_contsin:                      // sin

        mov     ecx, v

        movss   xmm1, xmm0
        mulss   xmm0, xmm0

        movss   xmm5, xmm4      // sin
        mulss   xmm4, xmm4      // sin

        mov     [ecx]v.fCos, edx
        movss   xmm2, xmm0
        mulss   xmm0, p3

        xor     eax, edi        // sin
        movss   xmm6, xmm4      // sin
        mulss   xmm4, p3        // sin

        addss   xmm0, p2

        mov     [ecx]v.fSin, eax    // sin
        addss   xmm4, p2         // sin

        mulss   xmm0, xmm2
        movss   xmm3, [ecx]v.fCos

        mulss   xmm4, xmm6      // sin
        movss   xmm7, [ecx]v.fSin  // sin

        addss   xmm0, p1
        addss   xmm4, p1        // sin

        mulss   xmm0, xmm2
        orps    xmm1, xmm3

        mulss   xmm4, xmm6      // sin
        orps    xmm5, xmm7      // sin

        addss   xmm0, p0
        addss   xmm4, p0        // sin

        mulss   xmm0, xmm1
        mulss   xmm4, xmm5      // sin

        movss   dword ptr [ecx]v.fCos, xmm0
        movss   dword ptr [ecx]v.fSin, xmm4
    }

#endif // !USE_C

}

//----------------------------------------------------------------------------
// sin
float fast_sin
(
    float x
)
//--------------------------------------
{

#if defined(USE_C)

    // 111 cycles
    return sinf(x);

#else

    // 62 cycles
    __asm
    {
        movss   xmm0, x

        andps   xmm0, _m128const_am_inv_sign_mask   // xmm0 = abs(x)
        mov     eax, x                              // eax = x
        mulss   xmm0, _m128const_am_2_over_pi       // xmm0 = abs(x) * 2/PI
        and     eax, 0x80000000                     // eax = sign(x)

        cvttss2si   ecx, xmm0                       // ecx = int(xmm0)
        mov     edx, ecx                            // edx = ecx
        shl     edx, (31 - 1)                       // edx = edx << 30
        cvtsi2ss    xmm1, ecx                       // xmm1 = ecx
        and     edx, 0x80000000                     // edx = sign(edx)

        and     ecx, 0x1                            // ecx = ecx & 0x1 (set ZF according to result)
        subss   xmm0, xmm1                          // xmm0 = xmm0 - xmm1

        jz      l_cont                              // jump if 0 / ZF = 1

        movss   xmm1, _m128const_am_1               // xmm1 = 1
        subss   xmm1, xmm0                          // xmm1 = xmm1 - xmm0
        movss   xmm0, xmm1                          // xmm0 = xmm1

l_cont:
        movss   xmm1, xmm0                          // xmm1 = xmm0
        mulss   xmm0, xmm0                          // xmm0 = xmm0 * xmm0
        xor     eax, edx                            // eax = edx | eax
        movss   xmm2, xmm0                          // xmm2 = xmm0
        mulss   xmm0, p3                            // xmm0 = xmm0 * p3
        mov     x, eax                              // x = eax
        addss   xmm0, p2                            // xmm0 = xmm0 + p2
        mulss   xmm0, xmm2                          // xmm0 = xmm0 * xmm2
        movss   xmm3, x                             // xmm3 = x
        addss   xmm0, p1                            // xmm0 = xmm0 + p1
        mulss   xmm0, xmm2                          // xmm0 = xmm0 * xmm2
        orps    xmm1, xmm3                          // xmm1 = xmm1 | xmm3
        addss   xmm0, p0                            // xmm0 = xmm0 + p0
        mulss   xmm0, xmm1                          // xmm0 = xmm0 * xmm1

        movss   x, xmm0
    }

    return x;

#endif // !USE_C

}


//----------------------------------------------------------------------------
// cos
float fast_cos
(
    float x
)
//--------------------------------------
{

#if defined(USE_C)

    // 97 cycles
    return cosf(x);

#else


    // 68 cycles
    __asm
    {
        movss   xmm0, x

        andps   xmm0, _m128const_am_inv_sign_mask   // abs(x)
        mulss   xmm0, _m128const_am_2_over_pi       // x * (2 / pi)
        addss   xmm0, _m128const_am_1               // x * (2 / pi) + 1

        cvttss2si   ecx, xmm0                       // Trancate into ecx.
        mov     edx, ecx                            // Store ecx.
        shl     edx, (31 - 1)                       // Shift left 30 bits.
        cvtsi2ss    xmm1, ecx                       // Store ecx into xmm1.
        and     edx, 0x80000000                     // Get sign bit.

        and     ecx, 0x1
        subss   xmm0, xmm1

        jz      l_cont
        movss   xmm1, _m128const_am_1
        subss   xmm1, xmm0
        movss   xmm0, xmm1
l_cont:
        movss   xmm1, xmm0
        mulss   xmm0, xmm0
        mov     x, edx
        movss   xmm2, xmm0
        mulss   xmm0, p3
        addss   xmm0, p2
        mulss   xmm0, xmm2
        movss   xmm3, x
        addss   xmm0, p1
        mulss   xmm0, xmm2
        orps    xmm1, xmm3
        addss   xmm0, p0
        mulss   xmm0, xmm1

        movss   x, xmm0
    }

    return x;

#endif // !USE_C
}


//----------------------------------------------------------------------------
// fast_atan
float fast_tan
(
    float x
)
//--------------------------------------
{
#if defined(USE_C)

    // 148 cycles
    return tanf(x);

#else

    // 75 cycles
    __asm
    {
        movss   xmm0, x

        andps   xmm0, _m128const_am_inv_sign_mask
        mulss   xmm0, _m128const_am_2_over_pi
        movss   xmm7, xmm0
        addss   xmm0, _m128const_am_1

        cvttss2si   ecx, xmm0
        mov     edx, ecx
        shl     edx, (31 - 1)
        cvtsi2ss    xmm1, ecx
        and     edx, 0x80000000

        and     ecx, 0x1
        subss   xmm0, xmm1

        jz      l_cont
        movss   xmm1, _m128const_am_1
        subss   xmm1, xmm0
        movss   xmm0, xmm1
l_cont:
        mov     eax, x
        and     eax, 0x80000000

        cvttss2si   ecx, xmm7
        xor     eax, edx
        mov     edx, ecx
        shl     edx, (31 - 1)
        cvtsi2ss    xmm3, ecx
        and     edx, 0x80000000

        and     ecx, 0x1
        subss   xmm7, xmm3

        jz      l_cont2
        movss   xmm3, _m128const_am_1
        subss   xmm3, xmm7
        movss   xmm7, xmm3
l_cont2:
        movss   xmm1, xmm0
        movss   xmm3, xmm7
        movss   xmm6, p3
        mulss   xmm0, xmm0
        mulss   xmm7, xmm7
        xor     eax, edx
        movss   xmm2, xmm0
        movss   xmm4, xmm7
        mulss   xmm0, xmm6
        mulss   xmm7, xmm6
        movss   xmm6, p2
        mov     x, eax
        addss   xmm0, xmm6
        addss   xmm7, xmm6
        mulss   xmm0, xmm2
        movss   xmm6, p1
        mulss   xmm7, xmm4
        movss   xmm5, x
        addss   xmm0, xmm6
        addss   xmm7, xmm6
        mulss   xmm0, xmm2
        mulss   xmm7, xmm4
        movss   xmm6, p0
        orps    xmm3, xmm5
        addss   xmm0, xmm6
        addss   xmm7, xmm6
        mulss   xmm0, xmm1
        mulss   xmm7, xmm3
        rcpss   xmm0, xmm0

        mulss   xmm0, xmm7

        movss   x, xmm0
    }

    return x;

#endif // !USE_C
}


//----------------------------------------------------------------------------
// pow
float fast_pow
(
    float x,
    float y
)
//--------------------------------------
{
#if defined(USE_C)

    // 303 cycles
    return powf(x, y);

#else

    // 133 cycles
    __asm
    {
        movss   xmm0, x
        movss   xmm1, y

        xorps   xmm7, xmm7
        comiss  xmm7, xmm0
        movss   xmm7, _m128const_am_inv_mant_mask
        maxss   xmm0, _m128const_am_min_pos_norm  // Cut off denormalized stuff.
        jnc     l_zerobase
        movss   xmm3, _m128const_am_1
        movss   x, xmm0

        andps   xmm0, xmm7
        orps    xmm0, xmm3  // xmm3 == 1.0
        comiss  xmm0, pow_rsqrt2
        movss   xmm7, xmm0

        jc      l_lt  // 'c' is 'lt' for comiss
//l_ge:
        xor     ecx, ecx
        movss   xmm2, xmm3  // xmm3 == 1.0
        jmp     l_continue

l_lt:
        mov     ecx, 1
        movss   xmm2, _m128const_am_0p5

l_continue:
        addss   xmm7, xmm2
        subss   xmm0, xmm2
        mov     edx, x
        rcpss   xmm7, xmm7
        mulss   xmm0, xmm7
        addss   xmm0, xmm0

        shr     edx, 23

        movss   xmm4, pow_p0
        movss   xmm6, pow_q0

        sub     edx, 0x7f
        movss   xmm2, xmm0
        mulss   xmm2, xmm2

        mulss   xmm4, xmm2
        sub     edx, ecx
        movss   xmm5, pow_p1
        mulss   xmm6, xmm2
        cvtsi2ss    xmm3, edx
        movss   xmm7, pow_q1

        addss   xmm4, xmm5
        mulss   xmm3, xmm1
        addss   xmm6, xmm7

        movss   xmm5, pow_p2
        mulss   xmm4, xmm2
        movss   xmm7, pow_q2
        mulss   xmm6, xmm2

        addss   xmm4, xmm5
        mulss   xmm1, pow_c0
        addss   xmm6, xmm7

        mulss   xmm4, xmm2
        rcpss   xmm6, xmm6

        mulss   xmm6, xmm0
        movss   xmm5, _m128const_am_0p5
        mulss   xmm4, xmm6
        addss   xmm0, xmm4
        xorps   xmm7, xmm7
        mulss   xmm0, xmm1

        addss   xmm0, xmm3

        maxss   xmm0, pow_fmin
        minss   xmm0, pow_fmax

        xor     ecx, ecx
        addss   xmm5, xmm0

        mov     edx, 1
        comiss  xmm5, xmm7
        cvttss2si   eax, xmm5
        cmovc   ecx, edx  // 'c' is 'lt' for comiss
        sub     eax, ecx

        cvtsi2ss    xmm5, eax
        add     eax, 0x7f

        subss   xmm0, xmm5

        movss   xmm2, xmm0
        mulss   xmm2, xmm2

        movss   xmm6, pow_s0
        movss   xmm4, pow_r0

        mulss   xmm6, xmm2
        movss   xmm7, pow_s1
        and     eax, 0xff  // Optional, just for sanity
        mulss   xmm4, xmm2
        movss   xmm5, pow_r1

        shl     eax, 23
        addss   xmm6, xmm7
        addss   xmm4, xmm5

        movss   xmm5, pow_r2
        mulss   xmm4, xmm2

        addss   xmm4, xmm5

        mulss   xmm4, xmm0

        mov     x, eax
        subss   xmm6, xmm4
        movss   xmm7, _m128const_am_1
        rcpss   xmm6, xmm6
        mulss   xmm4, xmm6
        movss   xmm0, x
        addss   xmm4, xmm4
        addss   xmm4, xmm7

        mulss   xmm0, xmm4

        jmp l_done

l_zerobase:
        xorps   xmm0, xmm0

l_done:
        movss   x, xmm0
    }

    return x;

#endif // !USE_C
}

float fast_hypot( float x, float y )
{
#if defined(USE_C)
	return (float) _hypot( x, y );
#else
	// 15.38x faster
	_asm {
		movss		xmm0, x
		movss		xmm1, y
		mulss		xmm0, xmm0
		mulss		xmm1, xmm1
		addss		xmm0, xmm1
		rsqrtss		xmm1, xmm0
		movss		xmm2, xmm0
		mulss		xmm0, xmm1
		mulss		xmm0, xmm1
		mulss		xmm0, xmm1
		mulss		xmm0, _m128const_am_0p5
		mulss		xmm1, _m128const_am_3_over_2
		subss		xmm1, xmm0
		mulss		xmm1, xmm2
		movss		x, xmm1
	}
	return x;
#endif // !USE_C
}

float fast_ceil( float x )
{
#if defined(USE_C)
	return ceilf( x );
#else
	// 2.01x faster
	unsigned long m32;
	_asm {
		movss		xmm0, x
		stmxcsr		m32
		mov			edx, m32
		mov			eax, 0ffff9fffh
		and			eax, edx
		or			eax, 4000h
		mov			m32, eax
		ldmxcsr		m32
		cvtss2si	eax, xmm0
		cvtsi2ss	xmm0, eax
		mov			m32, edx
		ldmxcsr		m32
		movss		x, xmm0
	}
	return x;
#endif // !USE_C
}

float fast_floor( float x )
{
#if defined(USE_C)
	return floorf( x );
#else
	// 1.99x faster
	unsigned long m32;
	_asm {
		movss		xmm0, x
		stmxcsr		m32
		mov			edx, m32
		mov			eax, 0ffff9fffh
		and			eax, edx
		or			eax, 2000h
		mov			m32, eax
		ldmxcsr		m32
		cvtss2si	eax, xmm0
		cvtsi2ss	xmm0, eax
		mov			m32, edx
		ldmxcsr		m32
		movss		x, xmm0
	}
	return x;
#endif // !USE_C
}

float fast_tanh( float x )
{
#if defined(USE_C)
	return tanhf( x );
#else
	// 3.26x faster
	_asm {
		mov			eax, x
		cmp			eax, 0ba83126fh
		ja			rettanhm
		cmp			eax, 3a83126fh
		ja			rettanhp

		movss		xmm1, x
		movss		xmm0, th1
		mulss		xmm1, xmm1
		mulss		xmm1, th3
		subss		xmm0, xmm1
		mulss		xmm0, x
		movss		x, xmm0
	}
	return x;
	_asm {
		ALIGN 16
rettanhm:
		movss		xmm0, x
		mulss		xmm0, th2p
		maxss		xmm0, fmin
		minss		xmm0, fmax
		movss		xmm1, rln2
		mulss		xmm1, xmm0
		movss		xmm6, _m128const_am_0
		addss		xmm1, _m128const_am_0p5
		xor			ecx, ecx
		mov			edx, 1
		comiss		xmm1, xmm6
		cvttss2si	eax, xmm1
		cmovc		ecx, edx
		sub			eax, ecx
		cvtsi2ss	xmm1, eax
		add			eax, 7fh
		movss		xmm2, xmm1
		mulss		xmm1, c1
		and			eax, 0ffh
		mulss		xmm2, c2
		subss		xmm0, xmm1
		shl			eax, 23
		subss		xmm0, xmm2
		movss		xmm2, xmm0
		mov			x, eax
		mulss		xmm2, xmm2
		movss		xmm5, q0
		movss		xmm3, p0exp
		mulss		xmm5, xmm2
		movss		xmm6, q1
		mulss		xmm3, xmm2
		movss		xmm4, p1exp
		addss		xmm5, xmm6
		addss		xmm3, xmm4
		movss		xmm6, q2
		mulss		xmm5, xmm2
		mulss		xmm3, xmm2
		addss		xmm5, xmm6
		mulss		xmm3, xmm0
		movss		xmm6, q3
		mulss		xmm5, xmm2
		addss		xmm3, xmm0
		addss		xmm5, xmm6
		movss		xmm0, x
		subss		xmm5, xmm3
		rcpss		xmm5, xmm5
		movss		xmm6, _m128const_am_1
		mulss		xmm3, xmm5
		addss		xmm3, xmm3
		addss		xmm3, xmm6
		mulss		xmm0, xmm3
		addss		xmm0, th1
		rcpss		xmm1, xmm0
		movss		xmm2, xmm1
		addss		xmm2, xmm2
		mulss		xmm1, xmm1
		mulss		xmm1, xmm0
		subss		xmm2, xmm1
		mulss		xmm2, th2p
		movss		xmm1, th1
		subss		xmm1, xmm2
		movss		x, xmm1
	}
	return x;
	_asm {
		ALIGN 16
rettanhp:
		movss		xmm0, x
		mulss		xmm0, th2m
		maxss		xmm0, fmin
		minss		xmm0, fmax
		movss		xmm1, rln2
		mulss		xmm1, xmm0
		movss		xmm6, _m128const_am_0
		addss		xmm1, _m128const_am_0p5
		xor			ecx, ecx
		mov			edx, 1
		comiss		xmm1, xmm6
		cvttss2si	eax, xmm1
		cmovc		ecx, edx
		sub			eax, ecx
		cvtsi2ss	xmm1, eax
		add			eax, 7fh
		movss		xmm2, xmm1
		mulss		xmm1, c1
		and			eax, 0ffh
		mulss		xmm2, c2
		subss		xmm0, xmm1
		shl			eax, 23
		subss		xmm0, xmm2
		movss		xmm2, xmm0
		mov			x, eax
		mulss		xmm2, xmm2
		movss		xmm5, q0
		movss		xmm3, p0exp
		mulss		xmm5, xmm2
		movss		xmm6, q1
		mulss		xmm3, xmm2
		movss		xmm4, p1exp
		addss		xmm5, xmm6
		addss		xmm3, xmm4
		movss		xmm6, q2
		mulss		xmm5, xmm2
		mulss		xmm3, xmm2
		addss		xmm5, xmm6
		mulss		xmm3, xmm0
		movss		xmm6, q3
		mulss		xmm5, xmm2
		addss		xmm3, xmm0
		addss		xmm5, xmm6
		movss		xmm0, x
		subss		xmm5, xmm3
		rcpss		xmm5, xmm5
		movss		xmm6, _m128const_am_1
		mulss		xmm3, xmm5
		addss		xmm3, xmm3
		addss		xmm3, xmm6
		mulss		xmm0, xmm3
		addss		xmm0, th1
		rcpss		xmm1, xmm0
		movss		xmm2, xmm1
		addss		xmm2, xmm2
		mulss		xmm1, xmm1
		mulss		xmm1, xmm0
		subss		xmm2, xmm1
		mulss		xmm2, th2p
		subss		xmm2, th1
		movss		x, xmm2
	}
	return x;
#endif // !USE_C
}

float fast_cosh( float x )
{
#if defined(USE_C)
	return coshf( x );
#else
	// 3.96x faster

	_asm {
		movss		xmm0, x
		maxss		xmm0, fmin
		minss		xmm0, fmax
		movss		xmm1, rln2
		mulss		xmm1, xmm0
		movss		xmm6, _m128const_am_0
		addss		xmm1, _m128const_am_0p5
		xor			ecx, ecx
		mov			edx, 1
		comiss		xmm1, xmm6
		cvttss2si	eax, xmm1
		cmovc		ecx, edx
		sub			eax, ecx
		cvtsi2ss	xmm1, eax
		add			eax, 7fh
		movss		xmm2, xmm1
		mulss		xmm1, c1
		and			eax, 0ffh
		mulss		xmm2, c2
		subss		xmm0, xmm1
		shl			eax, 23
		subss		xmm0, xmm2
		movss		xmm2, xmm0
		mov			x, eax
		mulss		xmm2, xmm2
		movss		xmm5, q0
		movss		xmm3, p0exp
		mulss		xmm5, xmm2
		movss		xmm6, q1
		mulss		xmm3, xmm2
		movss		xmm4, p1exp
		addss		xmm5, xmm6
		addss		xmm3, xmm4
		movss		xmm6, q2
		mulss		xmm5, xmm2
		mulss		xmm3, xmm2
		addss		xmm5, xmm6
		mulss		xmm3, xmm0
		movss		xmm6, q3
		mulss		xmm5, xmm2
		addss		xmm3, xmm0
		addss		xmm5, xmm6
		movss		xmm0, x
		subss		xmm5, xmm3
		rcpss		xmm5, xmm5
		movss		xmm6, _m128const_am_1
		mulss		xmm3, xmm5
		addss		xmm3, xmm3
		addss		xmm3, xmm6
		mulss		xmm0, xmm3

		rcpss		xmm1, xmm0
		movss		xmm2, xmm1
		addss		xmm2, xmm2
		mulss		xmm1, xmm1
		mulss		xmm1, xmm0
		subss		xmm2, xmm1
		addss		xmm0, xmm2
		mulss		xmm0, sh5
		movss		x, xmm0
	}
	return x;
#endif // !USE_C
}

float fast_sinh( float x )
{
#if defined(USE_C)
	return sinhf( x );
#else
	// 3.30x faster

	_asm {
		mov			eax, x
		and			eax, 7fffffffh
		cmp			eax, 3a83126fh
		jg			culcsinh
		movss		xmm0, x
		mulss		xmm0, xmm0
		mulss		xmm0, sh6
		addss		xmm0, sh1
		mulss		xmm0, x
		movss		x, xmm0
	}
	return x;
	_asm {
		ALIGN 16
culcsinh:
		movss		xmm0, x
		maxss		xmm0, fmin
		minss		xmm0, fmax
		movss		xmm1, rln2
		mulss		xmm1, xmm0
		movss		xmm6, _m128const_am_0
		addss		xmm1, _m128const_am_0p5
		xor			ecx, ecx
		mov			edx, 1
		comiss		xmm1, xmm6
		cvttss2si	eax, xmm1
		cmovc		ecx, edx
		sub			eax, ecx
		cvtsi2ss	xmm1, eax
		add			eax, 7fh
		movss		xmm2, xmm1
		mulss		xmm1, c1
		and			eax, 0ffh
		mulss		xmm2, c2
		subss		xmm0, xmm1
		shl			eax, 23
		subss		xmm0, xmm2
		movss		xmm2, xmm0
		mov			x, eax
		mulss		xmm2, xmm2
		movss		xmm5, q0
		movss		xmm3, p0exp
		mulss		xmm5, xmm2
		movss		xmm6, q1
		mulss		xmm3, xmm2
		movss		xmm4, p1exp
		addss		xmm5, xmm6
		addss		xmm3, xmm4
		movss		xmm6, q2
		mulss		xmm5, xmm2
		mulss		xmm3, xmm2
		addss		xmm5, xmm6
		mulss		xmm3, xmm0
		movss		xmm6, q3
		mulss		xmm5, xmm2
		addss		xmm3, xmm0
		addss		xmm5, xmm6
		movss		xmm0, x
		subss		xmm5, xmm3
		rcpss		xmm5, xmm5
		movss		xmm6, _m128const_am_1
		mulss		xmm3, xmm5
		addss		xmm3, xmm3
		addss		xmm3, xmm6
		mulss		xmm0, xmm3

		rcpss		xmm1, xmm0
		movss		xmm2, xmm1
		addss		xmm2, xmm2
		mulss		xmm1, xmm1
		mulss		xmm1, xmm0
		subss		xmm2, xmm1
		subss		xmm0, xmm2
		mulss		xmm0, sh5
		movss		x, xmm0
	}
	return x;
#endif // !USE_C
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\GreenFog.cpp ===
///////////////////////////////////////////////////////////////////////////////
// File: GreenFog.cpp
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#include "precomp.h"
#include "xbs_math.h"
#include "xbs_app.h"
#include "qrand.h"
#include "GreenFog.h"
#include "tex_gen.h"
///////////////////////////////////////////////////////////////////////////////
#define PLASMA_SIZE		(256)
// 1024x512 appears to be only .1 fps slower than 512x256.
#define INTENSITY_TEX_X	(1024)
#define INTENSITY_TEX_Y (512)
//MTS#define INTENSITY_TEX_X	(512)
//MTS#define INTENSITY_TEX_Y (256)
const float MUL_SCALE = 0.005f;
const float MAIN_FOG_RAD = 40.0f;
///////////////////////////////////////////////////////////////////////////////
void GreenFog::Init()
{
	pQuadVB = NULL;
	pIntensityQuadVB = NULL;
	for (int i=0; i<NUM_PLASMAS; i++) pPlasmaTexture[i] = NULL;
	pIntensityTextureU = pIntensityTextureR = NULL;
	pIntensityZ = NULL;
	dwFogPShader = dwFogVShader = 0;
}
///////////////////////////////////////////////////////////////////////////////
void GreenFog::create()
{
	destroy();


	const float f_plasma_dim = ((float)PLASMA_SIZE);

	gpd3dDev->CreateTexture(INTENSITY_TEX_X, INTENSITY_TEX_Y, 1, D3DUSAGE_RENDERTARGET, D3DFMT_A8R8G8B8, 0, &pIntensityTextureU);
	gpd3dDev->CreateTexture(INTENSITY_TEX_X, INTENSITY_TEX_Y, 1, D3DUSAGE_RENDERTARGET, D3DFMT_A8R8G8B8, 0, &pIntensityTextureR);
	gpd3dDev->CreateDepthStencilSurface(INTENSITY_TEX_X,INTENSITY_TEX_Y,D3DFMT_LIN_D24S8, D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR , &pIntensityZ);



	gpd3dDev->CreateVertexBuffer(4*sizeof(GreenFogVertexBuffer), 0, 0, 0, &pQuadVB);

	GreenFogVertexBuffer* p_verts;
	pQuadVB->Lock(0, 0, (BYTE**) &p_verts, 0);

	Set(&p_verts[0].pos, -1.0f, -1.0f, 1.0f);
	Set(&p_verts[1].pos, -1.0f, +1.0f, 1.0f);
	Set(&p_verts[2].pos, +1.0f, +1.0f, 1.0f);
	Set(&p_verts[3].pos, +1.0f, -1.0f, 1.0f);

	p_verts[0].tu0 = 0.0f;	p_verts[0].tv0 = 1.0f;
	p_verts[1].tu0 = 0.0f;	p_verts[1].tv0 = 0.0f;
	p_verts[2].tu0 = 1.0f;	p_verts[2].tv0 = 0.0f;
	p_verts[3].tu0 = 1.0f;	p_verts[3].tv0 = 1.0f;

	for (int i=0; i<4; i++)
	{
		p_verts[i].tv1 = -(2.0f*p_verts[i].tu0 - 1.0f) * 640.0f/f_plasma_dim;
		p_verts[i].tu1 = -(2.0f*p_verts[i].tv0 - 1.0f) * 480.0f/f_plasma_dim;
//MTS		p_verts[i].tu1 = (2.0f*p_verts[i].tu0 - 1.0f) * 640.0f/f_plasma_dim;
//MTS		p_verts[i].tv1 = (2.0f*p_verts[i].tv0 - 1.0f) * 480.0f/f_plasma_dim;
	}

	pQuadVB->Unlock();



	// These are used to render the backdrop.
	gpd3dDev->CreateVertexBuffer(4*sizeof(BaseStream), 0, 0, 0, &pIntensityQuadVB);
	BaseStream* p_bs_verts;
	pIntensityQuadVB->Lock(0, 0, (BYTE**) &p_bs_verts, 0);

	Set(&p_bs_verts[0].p, -1.0f, -1.0f, 1.0f);
	Set(&p_bs_verts[1].p, -1.0f, +1.0f, 1.0f);
	Set(&p_bs_verts[2].p, +1.0f, +1.0f, 1.0f);
	Set(&p_bs_verts[3].p, +1.0f, -1.0f, 1.0f);

	pIntensityQuadVB->Unlock();



    DWORD dwShaderVertexDecl[] =
    {
        D3DVSD_STREAM( 0 ),
        D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),	// position
        D3DVSD_REG( 1, D3DVSDT_FLOAT2 ),	// intensity texture
        D3DVSD_REG( 2, D3DVSDT_FLOAT2 ),	// plasma 0
        D3DVSD_END()
    };

#ifndef BINARY_RESOURCE
	dwFogPShader = gApp.loadPixelShader( "d:\\shaders\\greenfog.xpu" );
	dwFogVShader = gApp.loadVertexShader( "d:\\shaders\\greenfog.xvu", dwShaderVertexDecl );
#else // BINARY_RESOURCE
	dwFogPShader = gApp.loadPixelShader( g_greenfog_xpu );
	dwFogVShader = gApp.loadVertexShader( g_greenfog_xvu, dwShaderVertexDecl );
#endif // BINARY_RESOURCE

	restart();	// renders the texture
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void GreenFog::destroy()
{
#define XBS_RESOURCE_RELEASE(a) if (a) a->Release(); a = NULL;
	XBS_RESOURCE_RELEASE(pQuadVB);
	XBS_RESOURCE_RELEASE(pIntensityQuadVB);
	for (int i=0; i<NUM_PLASMAS; i++) { XBS_RESOURCE_RELEASE(pPlasmaTexture[i]); }
	XBS_RESOURCE_RELEASE(pIntensityTextureU);
	XBS_RESOURCE_RELEASE(pIntensityTextureR);
	XBS_RESOURCE_RELEASE(pIntensityZ);
#undef XBS_RESOURCE_RELEASE
	if (dwFogPShader) gpd3dDev->DeletePixelShader( dwFogPShader );
	if (dwFogVShader) gpd3dDev->DeleteVertexShader( dwFogVShader );
	dwFogPShader = dwFogVShader = 0;
}
///////////////////////////////////////////////////////////////////////////////
void GreenFog::advanceTime(float fElapsedTime, float fDt)
{
	renderIntensityTexture();
}
///////////////////////////////////////////////////////////////////////////////
void GreenFog::render(bool b_cmp_to_one)
{
	int i;

	gpd3dDev->SetVertexShader( dwFogVShader );
	gpd3dDev->SetPixelShader ( dwFogPShader );

	// Swap render and update textures.
	LPDIRECT3DTEXTURE8 p_swap = pIntensityTextureR;
	pIntensityTextureR = pIntensityTextureU;
	pIntensityTextureU = p_swap;

	// Use what was the update(d) texture.
	gpd3dDev->SetTexture(0, pIntensityTextureR);



    gpd3dDev->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_NONE );
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);

	for (i=0; i<NUM_PLASMAS; i++)
	{
		gpd3dDev->SetTexture(i+1, pPlasmaTexture[i]);
		gpd3dDev->SetTextureStageState( i+1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
		gpd3dDev->SetTextureStageState( i+1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
		gpd3dDev->SetTextureStageState( i+1, D3DTSS_MIPFILTER, D3DTEXF_NONE );
		gpd3dDev->SetTextureStageState( i+1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);
		gpd3dDev->SetTextureStageState( i+1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);
	}
	
    gpd3dDev->SetRenderState( D3DRS_ALPHATESTENABLE,	TRUE );
//MTS    gpd3dDev->SetRenderState( D3DRS_ZFUNC,				D3DCMP_GREATEREQUAL );
    gpd3dDev->SetRenderState( D3DRS_ZFUNC,				(b_cmp_to_one) ? D3DCMP_EQUAL : D3DCMP_ALWAYS );

    gpd3dDev->SetRenderState( D3DRS_ALPHAREF,			0x00000001 );
    gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE,	TRUE );
    gpd3dDev->SetRenderState( D3DRS_SRCBLEND,			D3DBLEND_SRCALPHA );
    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,			D3DBLEND_ONE );
//MTS    gpd3dDev->SetRenderState( D3DRS_SRCBLEND,			D3DBLEND_ONE );		// Just render intensity
//MTS    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,			D3DBLEND_ZERO );	// Just render intensity
    gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		FALSE );


	D3DVECTOR4 val[2*NUM_PLASMAS];
	float f_intensity = max(0.0f, gApp.getBlobIntensity() * 0.7f - 0.1f);
	Set(&val[0], 0.0f*f_intensity, f_intensity, 0.0f*f_intensity, 1.0f);

	
	float f_glow = 0.75f * max(0.0f, min(1.0f, (gApp.getElapsedTime() - GLOW_FADE_SCREEN_START) * GLOW_FADE_SCREEN_MUL));
//MTS	Set(&val[1], f_glow*0.625f, f_glow*1.0f, f_glow*0.0625f, 0.0f);
	Set(&val[1], f_glow*0.625f, f_glow, f_glow * 0.4f, 0.0f);

	
	gpd3dDev->SetPixelShaderConstant(0, &val[0], 2);




	D3DVECTOR4 origin, origin_scr;
	Set(&origin, 0.0f, 0.0f, 0.0f, 1.0f);
	TransformPoint(origin, gApp.theCamera.getWTP(), &origin_scr);
	Scale(&origin_scr, 1.0f / origin_scr.w);


	const float f_plasma_dim = ((float)PLASMA_SIZE);

	// Set the transforms for the plasma texture coordinates.
	for (i=0; i<NUM_PLASMAS; i++)
	{
		float rad = 0.6f * (((float)(NUM_PLASMAS-i-1)) / ((float)NUM_PLASMAS) - 0.2f);
		float x_mul = 0.5f * gApp.getCameraRadiusFromBlob() * MUL_SCALE;
		float y_mul = 1.0f * gApp.theCamera.getAspectRatio() * gApp.getCameraRadiusFromBlob() * MUL_SCALE;

		float x_add =  rad * gApp.getCameraTheta() - origin_scr.x * x_mul * 640.0f/f_plasma_dim;
		float y_add = -rad * gApp.getCameraPhi()   + origin_scr.y * y_mul * 480.0f/f_plasma_dim;
		// I don't know why y_mul is 1.0f* and x_mul is 0.5f*, but it looks less stretched in y this way.


		Set(&val[2*i+0], y_add, x_add, 0.0f, 0.0f);
		Set(&val[2*i+1], -y_mul, -x_mul, 1.0f, 1.0f);
//MTS		Set(&val[2*i+0], x_add, y_add, 0.0f, 0.0f);
//MTS		Set(&val[2*i+1], x_mul, y_mul, 1.0f, 1.0f);
	}

	gpd3dDev->SetVertexShaderConstant(0, &val[0], 2*NUM_PLASMAS);


	gpd3dDev->SetStreamSource(0, pQuadVB, sizeof(GreenFogVertexBuffer));
	gpd3dDev->DrawPrimitive(D3DPT_TRIANGLEFAN, 0, 2);

	gpd3dDev->SetPixelShader (NULL);
	gpd3dDev->SetVertexShader(NULL);

	for (i=0; i<1+NUM_PLASMAS; i++) gpd3dDev->SetTexture(i, NULL);


	// Render fade to yellow.

	f_glow = max(0.0f, min(1.0f, (gApp.getElapsedTime() - GLOW_FADE_CIRCLE_START) * GLOW_FADE_CIRCLE_MUL));

	if (gApp.getElapsedTime() < BLOB_STATIC_END_TIME)
	{
		float t = gApp.getElapsedTime();
		f_glow = (t < BLOB_STATIC_END_TIME * 0.2f) ? (t / (BLOB_STATIC_END_TIME*0.2f)) : (1.0f - (t-BLOB_STATIC_END_TIME * 0.2f)/BLOB_STATIC_END_TIME);
	}

	int alpha = max(0, min( 255, (int) ((255.0f * f_glow))));
//MTS	alpha >>= 1;
	alpha = min(196, alpha*2);


	if (alpha)
	{
//MTS		DWORD glow_factor = 0x00a0ff10 | (alpha << 24);
		DWORD glow_factor = 0x00A0FF60 | (alpha << 24);


		gpd3dDev->SetRenderState(D3DRS_TEXTUREFACTOR, glow_factor);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TFACTOR);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_TEXTURE);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);
		gpd3dDev->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);
		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG1,D3DTA_TFACTOR);
		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG2,D3DTA_TEXTURE);
		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_MODULATE);


		// Correct center.
		float x_mul = gApp.getCameraRadiusFromBlob() * MUL_SCALE;
		float y_mul = gApp.getCameraRadiusFromBlob() * MUL_SCALE * gApp.theCamera.getAspectRatio();

		D3DVECTOR4 origin, origin_screen;
		Set(&origin, 0.0f, 0.0f, 0.0f, 1.0f);
		TransformPoint(origin, gApp.theCamera.getWTP(), &origin_screen);
		Scale(&origin_screen, 1.0f / origin_screen.w);
		//origin_screen.x = 0.5f - x_mul * origin_screen.x;
		//origin_screen.y = 0.5f - y_mul * origin_screen.y;


		D3DMATRIX mat_tex;
		float mul = 0.33f / f_glow;

		if (gApp.getElapsedTime() < BLOB_STATIC_END_TIME)
		{
			mul = gApp.getCameraRadiusFromBlob() * BLOB_STATIC_END_TIME / (gApp.getElapsedTime() * 8.0f);
		}

		SetScale(mul, mul, 1.0f, &mat_tex);
		mat_tex._31 = 0.5f*(1.0f-mul) - 0.5f * origin_screen.x * mul * 1.33f;
		mat_tex._32 = 0.5f*(1.0f-mul) + 0.5f * origin_screen.y * mul;




		
		D3DMATRIX iden,scaled;
		SetIdentity(&iden);
		SetScale(1.0f / mul, 1.0f / mul, 0.0f, &scaled);
		scaled._43 = 1.0f;
		gpd3dDev->SetTransform(D3DTS_WORLD, &scaled);
		gpd3dDev->SetTransform(D3DTS_VIEW, &iden);
		gpd3dDev->SetTransform(D3DTS_PROJECTION, &iden);


		gpd3dDev->SetTexture(0,gApp.pGlowMap);

		gpd3dDev->SetVertexShader(D3DFVF_XYZ | D3DFVF_TEX2);

		
		gpd3dDev->DrawPrimitive(D3DPT_TRIANGLEFAN, 0, 2);
	}
    
	gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		TRUE );
    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,			D3DBLEND_INVSRCALPHA );
    gpd3dDev->SetRenderState( D3DRS_ZFUNC,				D3DCMP_LESSEQUAL );
}
///////////////////////////////////////////////////////////////////////////////
void GreenFog::restart()
{
	int tffonp = 255 / NUM_PLASMAS;
	for (int i=0; i<NUM_PLASMAS; i++)
	{
		if (pPlasmaTexture[i]) pPlasmaTexture[i]->Release();
	}
	CreateIntensityTexture_8Bit(pPlasmaTexture, NUM_PLASMAS, PLASMA_SIZE, 5 * tffonp, gApp.rand(),
					((tffonp*3)/4) << 8, 255/max(1,NUM_PLASMAS-0));
}
///////////////////////////////////////////////////////////////////////////////
void GreenFog::renderIntensityTexture()
{
	// Get camera position and render geometry into background.

	// Store old render targets.
	LPDIRECT3DSURFACE8 pOldRT,pOldZ;
	gpd3dDev->GetRenderTarget(&pOldRT);
	gpd3dDev->GetDepthStencilSurface(&pOldZ);


	// Leave the camera position where it is.
	LPDIRECT3DSURFACE8 p_update_surf;
	pIntensityTextureU->GetSurfaceLevel(0, &p_update_surf);
	gpd3dDev->SetRenderTarget(p_update_surf, pIntensityZ);

	if( gpd3dDev->BeginScene() == D3D_OK )
	{
		gpd3dDev->Clear(0,NULL,
						D3DCLEAR_STENCIL | D3DCLEAR_ZBUFFER | D3DCLEAR_TARGET,
						0xffff0000,
						1.f,
						0 );

		// Render a backdrop.

		gpd3dDev->SetRenderState( D3DRS_ALPHATESTENABLE,	TRUE );
		gpd3dDev->SetRenderState( D3DRS_ALPHAFUNC,			D3DCMP_GREATEREQUAL );
		gpd3dDev->SetRenderState( D3DRS_ALPHAREF,			0x00000001 );
		gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE,	TRUE );
		gpd3dDev->SetRenderState( D3DRS_SRCBLEND,			D3DBLEND_ONE );
		gpd3dDev->SetRenderState( D3DRS_DESTBLEND,			D3DBLEND_ZERO );

		gpd3dDev->SetVertexShader(gApp.dwVShader[st_Depth]);
		gpd3dDev->SetPixelShader (gApp.dwPShader[st_Depth]);


		//#define Z_ADD			c16
		//#define Z_MUL			c17
		//#define POS_MUL		c18
		//#define POS_SHIFT		c19


		D3DVECTOR4 val[4];
		float max_color_dist = 2.0f * MAIN_FOG_RAD;
		float z_mul = 1.0f;	// set later on for the geometry case, this is just the backdrop
		float z_add = 0.0f;

		Set(&val[0], z_mul, z_mul, z_mul, 1.0f );
		Set(&val[1], z_add, z_add, z_add, 1.0f );

		float x_mul = gApp.getCameraRadiusFromBlob() * MUL_SCALE;
		float y_mul = gApp.getCameraRadiusFromBlob() * MUL_SCALE * gApp.theCamera.getAspectRatio();

		Set(&val[2], x_mul, y_mul, 0.0f, 1.0f);


		D3DVECTOR4 origin;
		Set(&origin, 0.0f, 0.0f, 0.0f, 1.0f);
		TransformPoint(origin, gApp.theCamera.getWTP(), &val[3]);
		Scale(&val[3], 1.0f / val[3].w);
		val[3].x = 0.5f - val[2].x * val[3].x;
		val[3].y = 0.5f - val[2].y * val[3].y;
		val[3].z = 0.5f;
		val[3].w = 0.0f;
		// If looking at origin, then Set(&val[3], 0.5f, 0.5f, 0.5f, 0.0f);
//MTS		Set(&val[3], 0.5f, 0.5f, 0.5f, 0.0f);
		gpd3dDev->SetVertexShaderConstant(16, &val[0], 4);


		D3DMATRIX iden;
		SetIdentity(&iden);
		iden._43 = 1.0f;
		iden._44 = 0.0f;
		gpd3dDev->SetVertexShaderConstant(0, &iden, 4);


		gpd3dDev->SetStreamSource(0, pIntensityQuadVB, sizeof(BaseStream));
		gpd3dDev->DrawPrimitive(D3DPT_TRIANGLEFAN, 0, 2);


		gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		TRUE);
		gpd3dDev->SetRenderState( D3DRS_ZENABLE,			TRUE);

		z_add = MAIN_FOG_RAD - gApp.getCameraRadiusFromBlob();
		z_mul = 1.0f / max_color_dist;
		Set(&val[0], z_mul, z_mul, z_mul, 1.0f );
		Set(&val[1], z_add, z_add, z_add, 1.0f );
		gpd3dDev->SetVertexShaderConstant(16, &val, 2);

		gApp.sceneGeom.renderZ();

		// Without NULLing the pixel shader, the shields aren't transparent. Dunno why.
		gpd3dDev->SetPixelShader (NULL);
		gpd3dDev->SetVertexShader(NULL);


		// Clear stencil and depth buffer, but not the "target", or ARGB values.
		gpd3dDev->Clear(0,NULL,
						D3DCLEAR_STENCIL | D3DCLEAR_ZBUFFER,
						0xffffffff,
						1.f,
						0 );



		gpd3dDev->EndScene();
	}
	else
	{
		int a = 0;
	}

	gpd3dDev->SetRenderTarget(pOldRT,pOldZ);
	p_update_surf->Release();
	pOldRT->Release();
	pOldZ->Release();
}
///////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\FTABLES.H ===
/*************************************************************************
*                                                                        *
* 	Function tables for event functions and sound call functions	  *
*                                                                        *
*************************************************************************/

#ifdef STARTUPANIMATION

#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")

// Tell linker to put bootsound code and data into INIT section
#pragma comment(linker, "/merge:DSOUND=INIT")

#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif //STARTUPANIMATION

extern int	f_note(void);
extern int	f_rest(void);
extern int	f_jumpto(void);
extern int	f_loop(void);
extern int	f_endloop(void);
extern int	f_patch(void);
extern	int	f_pan(void);
extern	int	f_mux(void);
extern	int	f_demux(void);
extern	int	f_volume(void);
extern	int	f_xpose(void);
extern	int	f_xset(void);
extern	int	f_slur(void);
extern	int	f_ring(void);
extern	int	f_clockset(void);
extern	int	f_end(void);
extern	int	f_filterset(void);
extern	int	f_filterinc(void);


extern	int	f_mark(void);
extern	int	f_sound_call(void);
extern	int	f_srest(void);
extern	int	f_intvarset(void);
extern	int	f_intvarinc(void);
extern	int	f_user_1_var_evf(void);
extern	int	f_user_2_var_evf(void);
extern int f_sig(void);
extern	int	f_gliss(void);
extern	int	f_clockinc(void);
extern	int	f_paninc(void);
extern int f_musicclockinc(void);
extern	int	f_MidiNoteOn(void);
extern	int	f_MidiNoteOff(void);
extern	int	f_MidiProgram(void);
extern	int	f_MidiVolume(void);
extern	int	f_MidiTempo(void);
extern	int	f_MidiControl(void);
extern	int	f_MidiEOT(void);

extern	int	f_fxset(void);

extern void	call_silence(void);
extern void	call_music(void);
extern void	call_effect(void);
extern	void	call_volume(void);
extern	void	call_senddev(void);
extern	void	call_mark(void);
extern	void	call_ignore(void);
extern	void	call_user_function(void);
extern	void	call_timer(void);
extern	void	call_end_timer(void);
extern void	call_play_timer(void);
extern void call_kill_effect(void);

int	(* const event_fcns[])() = {
	f_rest,				//0
	f_note,				//1
	f_jumpto,			//2
	f_loop,				//3
	f_endloop,			//4
	f_patch,			//5
	f_pan,				//6
	f_mux,				//7
	f_demux,			//8
	f_volume,			//9
	f_xpose,			//10
	f_xset,				//11
	f_slur,				//12
	f_ring,				//13
	f_clockset,			//14
	f_end,				//15
	f_filterinc,		//16
	f_filterset,		//17
	f_gliss,			//18

	f_mark,
	f_sound_call,
	f_srest,
	f_intvarset,
	f_intvarinc,
	f_user_1_var_evf,
	f_user_2_var_evf,
	f_sig,

	f_clockinc,
	f_paninc,
	f_musicclockinc,
	f_MidiNoteOn,	/* 35 */
	f_MidiNoteOff,	/* 36 */
	f_MidiProgram,	/* 37 */
	f_MidiVolume,	/* 38 */
	f_MidiTempo,	/* 39 */
	f_MidiControl,	/* 40 */
	f_MidiEOT,		/* 41 */
	f_fxset,


};

/*
 *	NOTE:
 *	call music is used for BOTH forground sounds and background music
 *	This is becuase the code is essentially the same so it saves space
 */


void	(* const call_fcns[])() = {
	call_silence,		/* 0 sound call type 0 (silence)*/
	call_music,			/* 1 sound call type 1 (music)  */
	call_effect,		/* 2 sound call type 2 (effect) */
	call_volume, 		/* 3 sound call type 3 (volume) */
	call_ignore,  		/* 4 formerly call_oki	*/
	call_senddev,		/* 5 send data directly to yamaha chip */
	call_mark,			/* 6 leave a marker				*/
	call_ignore,		/* 7 ignore sound call		*/
	call_user_function,	/* 8 user defined function 	*/
	call_timer,			/* 9 make a music timer call	*/
	call_end_timer,		/* 10 stop timer, go back to prev back music */
	call_play_timer,		/* 11 sound table entry for timer */
	call_kill_effect	/* 12 kill all forground fx		*/
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\EXTERNS.H ===
/*************************************************************************
*                                                                        *
* 	External Variables						  *
*                                                                        *
*************************************************************************/
#define _base_

#ifdef STARTUPANIMATION

#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")


#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif //STARTUPANIMATION

extern		struct process	* _base_ process_queue;		/* pointer to process queue */
extern		struct sound	* _base_ current_call;		/* pointer to current sound call */
extern		struct sound	sound_calls[];
extern		struct sound	sound_calls2[];				/* alternate sound call table */
extern		struct process 	* _base_ current_process;	/* pointer to current s. proc */
extern		struct fifo	fifo;

extern		_base_ uchar hcount;			/* counter for oki nmi		*/
extern		_base_ uchar voice_state;		/* current nmi voice state	*/
extern		uchar * _base_ voice_data_pointer;	/* pointer to cur. voice data	*/
extern		uchar * _base_ voice_data_end;	/* pointer to end of v data	*/

extern		_base_ uchar 	a_value;		/* byte for register a data */
extern		_base_ uchar 	b_value;		/* byte for register b data */
extern		struct track_info * _base_ ti;/* global pointer to current track info*/
extern		_base_ ushort 	value_16_bit;		/* tmp value for passing */


extern _base_ short 		system_clock_music ;/* global music system timer     	*/
extern _base_ uchar		system_clock_mlow;  /* for 3 byte clocks		*/
extern _base_ short 		system_clock_fx; /* global fx system timer	    	*/
extern _base_ uchar		system_clock_fxlow; /* for 3-byte clocks	*/

extern		_base_ uchar 	clock_cntr[2];		/* timer count-downer	*/
extern		_base_ uchar 	clock_cntr_value[2];	/* timer count-downer	*/
extern		_base_ uchar	clock_cntr_save;	/* save val of clock cntr */
extern 	_base_ uchar 	master_music_volume;	/* main attenuation for music	*/
extern 	_base_ uchar 	master_effect_volume;	/* main attenuation for f/x	*/
extern		_base_ uchar	music_atten;		/* music attenuateion */
extern 	_base_ uchar 	master_music_amd;	/* main amp mod depth for music	*/
extern 	_base_ uchar 	master_effect_amd;	/* main amp mod depth for effect*/
extern 	_base_ uchar 	master_music_pmd;	/* main phase mod depth/music	*/
extern 	_base_ uchar 	master_effect_pmd;	/* main phase mod depth/effect	*/
extern		_base_ uchar 	marker;
extern		_base_ uchar	current_level;		/* global level of current process */
extern		_base_ uchar	current_channel;	/* global chan of current process */

extern	_base_	ushort		int_vars[12];		/* variables 2-byte */
extern	_base_ uchar		byte_vars[12];		/* variables 1-byte */

extern	_base_	uchar		dp_byte1;			/* temp var */
extern	_base_	uchar		dp_byte2;			/* temp var */
extern	_base_	uchar		dp_byte3;			/* temp var */
extern	_base_	uchar		dp_byte4;			/* temp var */
extern	_base_	uchar		dp_byte5;			/* temp var */
extern	_base_	ushort		dp_word1;			/* temp var */
extern	_base_	ushort		dp_word2;			/* temp var */
extern	_base_	ushort		dp_word3;			/* temp var */
extern	_base_	ushort		dp_word4;			/* temp var */
extern	_base_	ushort		dp_word5;			/* temp var */
extern	_base_ uchar		last_music_call;	/* last music call made		*/
extern _base_ uchar 	current_timer_priority;	/* priority of last timer call */
extern	uchar		music_timer_status[]; 
extern _base_ uchar	sos_only;
extern _base_ uchar		sound_call_table;	/* which soundtable are we on ?*/
extern	ushort		global_fxpose;		/* global transpose value */

extern	uchar		channel_level[];	/* current level for each chan*/
extern	struct track_info track_status[];
extern	struct process 	queue_list[]; 	/* pre-allocated process packets */


extern	const uchar	max_tracks;				/* from dev.c		*/
extern	void	do_watchdog(void);			/* from dev.c		*/
extern			dtimer_int();			/* from dev.c		*/
extern			etimer_int();			/* from dev.c		*/
extern			send_dev_function();	/* from dev.c		*/
extern	int	(*silence_functions[])();	/* from dev.c		*/
extern	int	(*note_on_functions[])();	/* from dev.c 		*/
extern	int	(*slur_functions[])();		/* from dev.c 		*/
extern	int	(*note_off_functions[])();	/* from dev.c		*/
extern	int	(*patch_functions[])();		/* from dev.c		*/
extern	int	(*volume_functions[])();   	/* from dev.c		*/
extern	int	(*pan_functions[])();		/* from dev.c		*/
extern	int	(*filter_functions[])();	/* from dev.c		*/
extern	int	dev_init();					/* from dev.c		*/
extern  int dev_cleanup();              /* from dev.c       */

extern	int	(*user_1_var_evf_functions[])();		/* from dev.c		*/
extern	int	(*user_2_var_evf_functions[])();		/* from dev.c		*/
extern	int   user_silence_function();				/* from dev.c		*/
extern int signal_function();			/* from dev.c */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\EVF.C ===
/*************************************************************************
*                                                                        *
* 	Here live the event functions					  *
*                                                                        *
*************************************************************************/
#include	"sos.h"
#include	"protos.h"
#include	"externs.h"

#define	c_p 	current_process		/* shorthand */


ushort	* ptr;				/* pointer to cur. voice data	*/


unsigned short	un_int;
uchar			un_char;

int	f_MidiNoteOn()
{
	return(1);
}
int	f_MidiNoteOff()
{
	return(1);
}
int	f_MidiProgram()
{
	return(1);
}
int	f_MidiVolume()
{
	return(1);
}
int	f_MidiTempo()
{
	return(1);
}
int	f_MidiControl()
{
	return(1);
}
int	f_MidiEOT()
{
	return(1);
}


int f_note()
{
	ptr = ++current_process->mem_ptr.i;	/* get past func byte */
	b_value = (uchar) *(ushort *)ptr++; 		/* point to delay */
	if (b_value	& 0x80) {			/* 1 byte duration */
		dp_word1 = *(uchar *) ptr;
		b_value &= 0x7f;
	}
	else {

	dp_word1 = *(unsigned short *)ptr++;

	}
	current_process->function = *(ptr);
	current_process->mem_ptr.i = ptr;
	current_process->timer += dp_word1;
	ti->pitch = value_16_bit = (b_value << 8) + ti->transpose;
	if (current_level == LEVEL_EFFECT) {
		ti->pitch += global_fxpose;
	}
/*		ti->pitch += global_fxpose;*/
		value_16_bit = ti->pitch;

	if (current_level < channel_level[current_channel]) 
	    return(1);
	note_on_functions[current_channel]();
	return(1);
}

f_gliss()
{
#ifdef GLISS
/*#ifdef	BIGOS*/
	uchar	*tmp_ptr;

	tmp_ptr = c_p->mem_ptr.c++;
	if (c_p->type == 0) {		/* first time						*/
		c_p->type = 1;			/* set not first time flag			*/
		c_p->data1 = *c_p->mem_ptr.i++;		/* get base pitch	*/
		c_p->mem_ptr.i++;					/* pass delta		*/
		c_p->data2 = *c_p->mem_ptr.i;		/* get counter		*/
		c_p->mem_ptr.c = tmp_ptr;		
	}
	else {
		if (c_p->data2-- == 0) {
			c_p->mem_ptr.c = tmp_ptr + 7;		/* point to xtra time	*/
			c_p->type = 0;
			c_p->timer += *c_p->mem_ptr.i++;	/* get xtra time*/
			c_p->data1 += *c_p->mem_ptr.i++;		/* get xtra frac	*/
			c_p->function = *c_p->mem_ptr.c;

		}
		else {
			c_p->data1 += *(++c_p->mem_ptr.i);
			c_p->timer += 4;
			c_p->mem_ptr.c = tmp_ptr;			/* point back to us	*/
	    }
		ti->pitch = value_16_bit = c_p->data1 + ti->transpose;
		if (current_level < channel_level[current_channel]) 
		    return(1);
		slur_functions[current_channel]();
	}		
	return(1);
#endif
	return(1);
}

int f_rest()
{
/*	unsigned int	del;*/

	ptr = ++current_process->mem_ptr.i;
	un_int  = *(unsigned short *)ptr++;
	current_process->function = *ptr;
	current_process->timer += un_int;
	current_process->mem_ptr.i = ptr;

	if (current_level < channel_level[current_channel]) 
	    return(1);
	note_off_functions[current_channel]();
	return(1);
}



int f_srest()
{

	return(1);
}

int f_jumpto()
{

/*	uchar	*addr;*/

	current_process->mem_ptr.i++;		/* get past func byte */
	ptr = *(ushort **)current_process->mem_ptr.i++;  /* point to next func */
	current_process->mem_ptr.i = ptr;
	current_process->function = *ptr;	/* get function */
	return(1);
}

int f_loop()
{
	ti->loop_counter[ti->loop_level] = *(++c_p->mem_ptr.i);
	ti->loop_addr[(ti->loop_level)++] = (ushort *) ++c_p->mem_ptr.i;
	c_p->function = *c_p->mem_ptr.i;
	return(1);
}

int f_endloop()
{
	if (--(ti->loop_counter[ti->loop_level-1]) != 0) {
	  c_p->mem_ptr.i = (ushort *)ti->loop_addr[ti->loop_level-1];
	}
	else {					/* done looping */
	    c_p->mem_ptr.i++;
	    ti->loop_level--;
	}
	c_p->function = *c_p->mem_ptr.i;
	return(1);
}



int f_patch()
{
	ushort	pat;

    ptr = ++current_process->mem_ptr.i;		/* get past func byte */
	pat = *(ushort *)ptr++;  /* point to patch # */
	current_process->function = *(ptr);
	current_process->mem_ptr.i = ptr;
	ti->patch = pat;
	ti->pan = ti->volume = 0;

	if (current_level < channel_level[current_channel]) 
	    return(1);
	patch_functions[current_channel](pat);
	return(1);
}

int f_pan()
{
      	ptr = ++current_process->mem_ptr.i;		  /* get past func byte */
	a_value = *(uchar *)ptr++; /* point to pan */
	current_process->function = *ptr;
	current_process->mem_ptr.i = ptr;
	ti->pan = a_value;
	if (current_level < channel_level[current_channel]) 
	    return(1);
	pan_functions[current_channel](current_channel,a_value,ti->patch);
	return(1);
}
int f_paninc()
{
/*#ifdef	BIGOS */
      	ptr = ++current_process->mem_ptr.i;		  /* get past func byte */
	a_value = *(char *)ptr++; /* point to pan */
	current_process->function = *ptr;
	current_process->mem_ptr.i = ptr;
	ti->pan += (signed char) a_value;
	if (current_level < channel_level[current_channel]) 
	    return(1);
	pan_functions[current_channel](current_channel,ti->pan,ti->patch);
	return(1);
/*#endif*/
}



int f_mux()
{
	ti->mux_addr[(ti->mux_level)++] = (ushort *) (++c_p->mem_ptr.c + 2);
	c_p->mem_ptr.c = (uchar *)*(ushort *)(c_p->mem_ptr.c);
	c_p->function = *c_p->mem_ptr.c;
	return(1);
}
int f_demux()
{
/*	uchar	tmp;*/

	un_char = --(ti->mux_level);
	c_p->mem_ptr.c = (uchar *)ti->mux_addr[un_char];
	c_p->function = *c_p->mem_ptr.c;
	return(1);
}

int f_volume()
{
	un_char = ti->volume + *(short *)++current_process->mem_ptr.i; /* point to vol */
	current_process->function = *++current_process->mem_ptr.i;
	ti->volume = un_char;
	if (current_level < channel_level[current_channel]) 
	    return(1);
	volume_functions[current_channel](un_char,current_level,ti->patch,current_channel);
	return(1);
}



int f_fxset()
{
	c_p->mem_ptr.c++;
	global_fxpose = *c_p->mem_ptr.i++;
	c_p->function = *c_p->mem_ptr.c;
	return(1);
}


int f_xpose()
{
	c_p->mem_ptr.i++;
	ti->transpose += *c_p->mem_ptr.i++;
	c_p->function = *c_p->mem_ptr.i;
	return(1);
}

int f_xset()
{
	c_p->mem_ptr.i++;
	ti->transpose = *c_p->mem_ptr.i++;
	c_p->function = *c_p->mem_ptr.i;
	return(1);
}


int f_filterinc()
{
	c_p->mem_ptr.i++;
	ti->filtercutoff += *c_p->mem_ptr.i++;
	ti->filterres = *c_p->mem_ptr.i++;
	c_p->function = *c_p->mem_ptr.i;
	filter_functions[current_channel]();
	return(1);
}

int f_filterset()
{
	c_p->mem_ptr.i++;
	ti->filtercutoff = *c_p->mem_ptr.i++;
	ti->filterres = *c_p->mem_ptr.i++;
	c_p->function = *c_p->mem_ptr.i;
	filter_functions[current_channel]();
	return(1);
}


int f_slur()
{
/*	unsigned int	del;*/

	ptr = ++current_process->mem_ptr.i;	/* get past func byte */
	b_value = (uchar) *(ushort *)ptr++; 		/* point to delay */
	if (b_value	& 0x80) {			/* 1 byte duration */
		dp_word1 = *(uchar *) ptr;
		b_value &= 0x7f;
	}
	else {

	dp_word1 = *(unsigned short *)ptr++;

	}
	current_process->function = *(ptr);
	current_process->mem_ptr.i = ptr;
	current_process->timer += dp_word1;
	ti->pitch = value_16_bit = (b_value << 8) + ti->transpose;
	if (current_level == LEVEL_EFFECT) {
		ti->pitch += global_fxpose;
	}
/*		ti->pitch += global_fxpose;*/
		value_16_bit = ti->pitch;

	if (current_level < channel_level[current_channel]) 
	    return(1);
	slur_functions[current_channel]();
	return(1);
	//

}


int f_ring()
{

	ptr = ++current_process->mem_ptr.i;
	un_int = *(unsigned short *)ptr++;
	current_process->function = *ptr;
	current_process->timer += un_int;
	current_process->mem_ptr.i = ptr;
	return(1);
}


f_clockset()
{
	current_process->mem_ptr.c++;		/* get past func byte */
	clock_cntr_value[c_p->level] = *(uchar *)current_process->mem_ptr.c++;/* point to next func */
	current_process->function = *current_process->mem_ptr.c;
	return(1);
}

f_clockinc()
{
	return(1);
}


f_musicclockinc()
{
	return(1);
}



/*************************************************************************
*                                                                        *
* 	Used to end a track of music or a sound effect			  *
*                                                                        *
*************************************************************************/

int f_end()
{
/*	un_char = c_p->hard_channel;*/
//	nosound(current_channel);
//	ti = get_music_info_block();
//	remove_processes_by_level_and_channel(LEVEL_EFFECT,current_channel);
//	channel_level[current_channel] = LEVEL_MUSIC;
//	current_level = LEVEL_MUSIC;
//	if (ti->patch == NULL)
//		return(0);
//	ptr = ti->patch;
//	patch_functions[current_channel](ptr);
//	pan_functions[current_channel](current_channel,ti->pan,ptr);
//	volume_functions[current_channel](ti->volume,current_level,ptr,current_channel);
	return(0);
}


	







int f_mark()
{
#ifdef	BIGOS
	uchar	m_value;
	uchar	dest;
	
	c_p->mem_ptr.c++;
	m_value = *c_p->mem_ptr.c++;	/* get marker # */
	dest =  *c_p->mem_ptr.c++;	/* get destination */
	c_p->function = *c_p->mem_ptr.c;
	if (m_value == marker) {
		DINT;
		put_fifo(dest);
		EINT;
		marker = 0;
	}
#endif
	return(1);
}


int f_sound_call()
{
/*#ifdef	BIGOS*/
	uchar	dest;
	
	c_p->mem_ptr.c++;
	dest =  *c_p->mem_ptr.c++;	/* get destination */
	c_p->function = *c_p->mem_ptr.c;
/*	DINT;*/
	put_fifo(dest);
/*	EINT;*/
	return(1);
/*#endif*/
}

int f_intvarset()
{
#ifdef	BIGOS
	uchar	index;
	c_p->mem_ptr.c++;
	index = *c_p->mem_ptr.c++;
	int_vars[index] = *(ushort *)c_p->mem_ptr.i++;
	c_p->function = *c_p->mem_ptr.c;
	return(1);
#endif
	return(1);
}
int f_intvarinc()
{
#ifdef	BIGOS
	uchar	index;
	c_p->mem_ptr.c++;
	index = *c_p->mem_ptr.c++;
	int_vars[index] += *(char *)c_p->mem_ptr.c++;
	c_p->function = *c_p->mem_ptr.c;
	return(1);
#endif
	return(1);
}



int f_user_1_var_evf()
{
/*#ifdef	BIGOS*/

	a_value = *(++c_p->mem_ptr.c);		/* get parameter in a_value */
	c_p->function = *++c_p->mem_ptr.c;
	user_1_var_evf_functions[current_channel]();
	return(1);
/*#endif*/
}
int f_user_2_var_evf()
{
	a_value = *(++c_p->mem_ptr.c);		/* get parameter in a_value */
	b_value = *(++c_p->mem_ptr.c);		/* get 2nd parameter in b_value */
	c_p->function = *++c_p->mem_ptr.c;
	user_2_var_evf_functions[current_channel]();
	return(1);

}


f_sig()
{
	a_value = *(++c_p->mem_ptr.c);		/* get parameter in a_value */
	c_p->function = *++c_p->mem_ptr.c;
//	signal_function();
	return(1);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\GreenFog.h ===
///////////////////////////////////////////////////////////////////////////////
// File: GreenFog.h
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#ifndef GREENFOG_H
#define GREENFOG_H



class GreenFog
{
public:
	void Init();
	void UnInit() { destroy(); }

	
	void create();
	void destroy();

	void advanceTime(float fElapsedTime, float fDt);

	void render(bool b_cmp_to_one);

	void restart();


	LPDIRECT3DVERTEXBUFFER8 borrowScreenQuad() { return pQuadVB; }

protected:
	enum { NUM_PLASMAS = 3 };
	LPDIRECT3DVERTEXBUFFER8		pQuadVB;
	LPDIRECT3DVERTEXBUFFER8		pIntensityQuadVB;
	LPDIRECT3DTEXTURE8			pPlasmaTexture[NUM_PLASMAS];
	LPDIRECT3DTEXTURE8			pIntensityTextureR;		// for rendering (swapped in render)
	LPDIRECT3DTEXTURE8			pIntensityTextureU;		// for updating
	LPDIRECT3DSURFACE8			pIntensityZ;

	DWORD		dwFogPShader, dwFogVShader;


	void renderIntensityTexture();
};
///////////////////////////////////////////////////////////////////////////////
struct GreenFogVertexBuffer
{
	D3DVECTOR	pos;
	FLOAT		tu0, tv0;	// texture coordinate in intensity lookup
	FLOAT		tu1, tv1;	// texture coordinate in plasma, which wraps
};



#endif // GREENFOG_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\logo_geometry.h ===
/*

xbl.h

*/
#ifndef __xbl_h__
#define __xbl_h__

#include "d3d8types.h"

#define FVF_xbl D3DFVF_XYZ|D3DFVF_TEX1

struct xbl_vertex
{
	float x,y,z;
	float u0;
	float v0;
};


#define xbl_OO_POS_SCALE 0.009876f
#define xbl_POS_DELTA 161.715363f
#define xbl_OO_TEX_SCALE 0.000058f
#define xbl_TEX_DELTA 0.947661f


///////////////////////////////////////////////////////////////////////////////
const int vertex_count_xboxlogointerior_0 = 501;
short verts_xboxlogointerior_0C[] = 
{
		-12386,-26498,-20838, //	x,y,z
		-14730,-203, //	u,v
		-12260,-26498,-20920, //	x,y,z
		-14871,-127, //	u,v
		-12836,-29287,-20290, //	x,y,z
		-16049,-10475, //	u,v
		-12386,-26498,-20838, //	x,y,z
		-14730,-203, //	u,v
		-12845,-26498,-20558, //	x,y,z
		-14226,-477, //	u,v
		-7807,1871,-26421, //	x,y,z
		-10529,-261, //	u,v
		-12985,-26498,-20445, //	x,y,z
		-14057,-569, //	u,v
		-12845,-26498,-20558, //	x,y,z
		-14226,-477, //	u,v
		-13340,-29287,-19982, //	x,y,z
		-15380,-11167, //	u,v
		-12985,-26498,-20445, //	x,y,z
		-14057,-569, //	u,v
		-13493,-26498,-20080, //	x,y,z
		-13469,-888, //	u,v
		-9371,1871,-25156, //	x,y,z
		-8637,-1288, //	u,v
		-13640,-26498,-19948, //	x,y,z
		-13283,-989, //	u,v
		-13493,-26498,-20080, //	x,y,z
		-13469,-888, //	u,v
		-13898,-29287,-19581, //	x,y,z
		-14598,-11977, //	u,v
		-13640,-26498,-19948, //	x,y,z
		-13283,-989, //	u,v
		-14175,-26498,-19498, //	x,y,z
		-12626,-1346, //	u,v
		-11017,1871,-23682, //	x,y,z
		-6564,-2414, //	u,v
		-14323,-26498,-19360, //	x,y,z
		-12437,-1449, //	u,v
		-14175,-26498,-19498, //	x,y,z
		-12626,-1346, //	u,v
		-14485,-29287,-19087, //	x,y,z
		-13726,-12881, //	u,v
		-14323,-26498,-19360, //	x,y,z
		-12437,-1449, //	u,v
		-14859,-26498,-18900, //	x,y,z
		-11773,-1809, //	u,v
		-12666,1871,-22138, //	x,y,z
		-4448,-3563, //	u,v
		-14996,-26498,-18770, //	x,y,z
		-11596,-1905, //	u,v
		-14859,-26498,-18900, //	x,y,z
		-11773,-1809, //	u,v
		-15074,-29287,-18582, //	x,y,z
		-12844,-13793, //	u,v
		-14996,-26498,-18770, //	x,y,z
		-11596,-1905, //	u,v
		-15497,-26498,-18314, //	x,y,z
		-10961,-2250, //	u,v
		-14205,1871,-20682, //	x,y,z
		-2466,-4639, //	u,v
		-15612,-26498,-18208, //	x,y,z
		-10814,-2330, //	u,v
		-15624,-29287,-18082, //	x,y,z
		-12002,-14666, //	u,v
		-16030,-26498,-17821, //	x,y,z
		-10280,-2619, //	u,v
		-15493,1871,-19492, //	x,y,z
		-823,-5531, //	u,v
		-12678,-26498,-20424, //	x,y,z
		-14435,-7413, //	u,v
		-12793,-26498,-20278, //	x,y,z
		-14363,-7531, //	u,v
		-13296,-29287,-19744, //	x,y,z
		-15384,-8200, //	u,v
		-12678,-26498,-20424, //	x,y,z
		-14275,-451, //	u,v
		-12260,-26498,-20920, //	x,y,z
		-14871,-127, //	u,v
		-6396,1871,-27339, //	x,y,z
		-12110,596, //	u,v
		-13188,-26498,-19747, //	x,y,z
		-13507,-867, //	u,v
		-13297,-26498,-19592, //	x,y,z
		-13337,-960, //	u,v
		-13729,-29287,-19161, //	x,y,z
		-14462,-12118, //	u,v
		-13188,-26498,-19747, //	x,y,z
		-13507,-867, //	u,v
		-12793,-26498,-20278, //	x,y,z
		-14105,-543, //	u,v
		-7683,1871,-25712, //	x,y,z
		-10218,-430, //	u,v
		-13674,-26498,-19048, //	x,y,z
		-12745,-1281, //	u,v
		-13778,-26498,-18889, //	x,y,z
		-12576,-1373, //	u,v
		-14143,-29287,-18564, //	x,y,z
		-13675,-12933, //	u,v
		-13674,-26498,-19048, //	x,y,z
		-12745,-1281, //	u,v
		-8899,1871,-23976, //	x,y,z
		-8318,-1462, //	u,v
		-16113,-26498,-17741, //	x,y,z
		-10173,-2678, //	u,v
		-16030,-26498,-17821, //	x,y,z
		-10280,-2619, //	u,v
		-16083,-29287,-17657, //	x,y,z
		-11292,-15400, //	u,v
		-16113,-26498,-17741, //	x,y,z
		-10173,-2678, //	u,v
		-16411,-26498,-17468, //	x,y,z
		-9794,-2884, //	u,v
		-16411,1871,-18598, //	x,y,z
		373,-6181, //	u,v
		-16493,-26498,-17548, //	x,y,z
		-11372,-5060, //	u,v
		-16411,-26498,-17468, //	x,y,z
		-11290,-5173, //	u,v
		-16411,-29287,-17356, //	x,y,z
		-11563,-15959, //	u,v
		-16493,-26498,-17548, //	x,y,z
		-11372,-5060, //	u,v
		-16791,-26498,-17821, //	x,y,z
		-11663,-4659, //	u,v
		-17328,1871,-19492, //	x,y,z
		-1061,-5456, //	u,v
		-16906,-26498,-17927, //	x,y,z
		-11776,-4504, //	u,v
		-16738,-29287,-17657, //	x,y,z
		-11998,-15360, //	u,v
		-17325,-26498,-18314, //	x,y,z
		-12187,-3939, //	u,v
		-18616,1871,-20682, //	x,y,z
		-2446,-4556, //	u,v
		-17463,-26498,-18445, //	x,y,z
		-12323,-3751, //	u,v
		-17198,-29287,-18082, //	x,y,z
		-12611,-14516, //	u,v
		-17463,-26498,-18445, //	x,y,z
		-12323,-3751, //	u,v
		-17963,-26498,-18900, //	x,y,z
		-12810,-3080, //	u,v
		-20155,1871,-22138, //	x,y,z
		-4119,-3470, //	u,v
		-18110,-26498,-19038, //	x,y,z
		-12956,-2880, //	u,v
		-17963,-26498,-18900, //	x,y,z
		-12810,-3080, //	u,v
		-17747,-29287,-18582, //	x,y,z
		-13339,-13514, //	u,v
		-18110,-26498,-19038, //	x,y,z
		-12956,-2880, //	u,v
		-18647,-26498,-19498, //	x,y,z
		-13465,-2179, //	u,v
		-21805,1871,-23682, //	x,y,z
		-5903,-2311, //	u,v
		-18794,-26498,-19630, //	x,y,z
		-13608,-1983, //	u,v
		-18647,-26498,-19498, //	x,y,z
		-13465,-2179, //	u,v
		-18336,-29287,-19087, //	x,y,z
		-14100,-12467, //	u,v
		-18794,-26498,-19630, //	x,y,z
		-13608,-1983, //	u,v
		-19329,-26498,-20080, //	x,y,z
		-14112,-1289, //	u,v
		-23451,1871,-25156, //	x,y,z
		-7651,-1176, //	u,v
		-19469,-26498,-20193, //	x,y,z
		-14242,-1110, //	u,v
		-19329,-26498,-20080, //	x,y,z
		-14112,-1289, //	u,v
		-18924,-29287,-19581, //	x,y,z
		-14853,-11430, //	u,v
		-19469,-26498,-20193, //	x,y,z
		-14242,-1110, //	u,v
		-19977,-26498,-20558, //	x,y,z
		-14693,-489, //	u,v
		-25014,1871,-26421, //	x,y,z
		-9244,-141, //	u,v
		-20103,-26498,-20640, //	x,y,z
		-14801,-340, //	u,v
		-19977,-26498,-20558, //	x,y,z
		-14693,-489, //	u,v
		-19482,-29287,-19982, //	x,y,z
		-15526,-10503, //	u,v
		-20103,-26498,-20640, //	x,y,z
		-14801,-340, //	u,v
		-20562,-26498,-20920, //	x,y,z
		-15186,189, //	u,v
		-26426,1871,-27339, //	x,y,z
		-10572,720, //	u,v
		-20447,-26498,-20775, //	x,y,z
		-15056,9, //	u,v
		-20562,-26498,-20920, //	x,y,z
		-15186,189, //	u,v
		-19986,-29287,-20290, //	x,y,z
		-16101,-9712, //	u,v
		-20447,-26498,-20775, //	x,y,z
		-15056,9, //	u,v
		-20028,-26498,-20278, //	x,y,z
		-14596,-623, //	u,v
		-25138,1871,-25712, //	x,y,z
		-8970,-319, //	u,v
		-19919,-26498,-20123, //	x,y,z
		-14464,-804, //	u,v
		-20028,-26498,-20278, //	x,y,z
		-14596,-623, //	u,v
		-19526,-29287,-19744, //	x,y,z
		-15414,-10658, //	u,v
		-19919,-26498,-20123, //	x,y,z
		-14464,-804, //	u,v
		-19524,-26498,-19592, //	x,y,z
		-14002,-1440, //	u,v
		-23923,1871,-23976, //	x,y,z
		-7358,-1366, //	u,v
		-19421,-26498,-19433, //	x,y,z
		-13872,-1620, //	u,v
		-19524,-26498,-19592, //	x,y,z
		-14002,-1440, //	u,v
		-19092,-29287,-19161, //	x,y,z
		-14724,-11607, //	u,v
		-19421,-26498,-19433, //	x,y,z
		-13872,-1620, //	u,v
		-19044,-26498,-18889, //	x,y,z
		-13414,-2250, //	u,v
		-22764,1871,-22195, //	x,y,z
		-5759,-2404, //	u,v
		-14136,-26498,-18352, //	x,y,z
		-12002,-1685, //	u,v
		-14234,-26498,-18195, //	x,y,z
		-11839,-1773, //	u,v
		-14537,-29287,-17974, //	x,y,z
		-12912,-13723, //	u,v
		-14136,-26498,-18352, //	x,y,z
		-12002,-1685, //	u,v
		-10058,1871,-22195, //	x,y,z
		-6435,-2484, //	u,v
		-18945,-26498,-18731, //	x,y,z
		-13288,-2424, //	u,v
		-19044,-26498,-18889, //	x,y,z
		-13414,-2250, //	u,v
		-18678,-29287,-18564, //	x,y,z
		-14041,-12548, //	u,v
		-18945,-26498,-18731, //	x,y,z
		-13288,-2424, //	u,v
		-18587,-26498,-18195, //	x,y,z
		-12843,-3035, //	u,v
		-21662,1871,-20439, //	x,y,z
		-4208,-3412, //	u,v
		-14568,-26498,-17685, //	x,y,z
		-11298,-2067, //	u,v
		-14660,-26498,-17536, //	x,y,z
		-11144,-2150, //	u,v
		-14903,-29287,-17415, //	x,y,z
		-12195,-14466, //	u,v
		-14568,-26498,-17685, //	x,y,z
		-11298,-2067, //	u,v
		-14234,-26498,-18195, //	x,y,z
		-11839,-1773, //	u,v
		-11160,1871,-20439, //	x,y,z
		-4608,-3476, //	u,v
		-18495,-26498,-18045, //	x,y,z
		-12724,-3199, //	u,v
		-18587,-26498,-18195, //	x,y,z
		-12843,-3035, //	u,v
		-18285,-29287,-17974, //	x,y,z
		-13377,-13461, //	u,v
		-18495,-26498,-18045, //	x,y,z
		-12724,-3199, //	u,v
		-18162,-26498,-17536, //	x,y,z
		-12306,-3774, //	u,v
		-20635,1871,-18772, //	x,y,z
		-2747,-4361, //	u,v
		-14957,-26498,-17076, //	x,y,z
		-10660,-2413, //	u,v
		-15038,-26498,-16941, //	x,y,z
		-10522,-2488, //	u,v
		-15229,-29287,-16909, //	x,y,z
		-11551,-15132, //	u,v
		-14957,-26498,-17076, //	x,y,z
		-10660,-2413, //	u,v
		-14660,-26498,-17536, //	x,y,z
		-11144,-2150, //	u,v
		-12187,1871,-18772, //	x,y,z
		-2889,-4409, //	u,v
		-18080,-26498,-17401, //	x,y,z
		-12200,-3921, //	u,v
		-18162,-26498,-17536, //	x,y,z
		-12306,-3774, //	u,v
		-17919,-29287,-17415, //	x,y,z
		-12753,-14320, //	u,v
		-18080,-26498,-17401, //	x,y,z
		-12200,-3921, //	u,v
		-17783,-26498,-16941, //	x,y,z
		-11825,-4437, //	u,v
		-19722,1871,-17265, //	x,y,z
		-1436,-5212, //	u,v
		-15255,-26498,-16549, //	x,y,z
		-10137,-2697, //	u,v
		-15323,-26498,-16435, //	x,y,z
		-10020,-2761, //	u,v
		-15466,-29287,-16479, //	x,y,z
		-11039,-15662, //	u,v
		-15255,-26498,-16549, //	x,y,z
		-10137,-2697, //	u,v
		-15038,-26498,-16941, //	x,y,z
		-10522,-2488, //	u,v
		-13099,1871,-17265, //	x,y,z
		-1346,-5247, //	u,v
		-15011,-26498,-16109, //	x,y,z
		-9545,-6003, //	u,v
		-14916,-26498,-16014, //	x,y,z
		-9611,-5890, //	u,v
		-15124,-29287,-16122, //	x,y,z
		-14320,-16076, //	u,v
		-15011,-26498,-16109, //	x,y,z
		-9545,-6003, //	u,v
		-15323,-26498,-16435, //	x,y,z
		-9323,-6380, //	u,v
		-13863,1871,-15983, //	x,y,z
		-2130,429, //	u,v
		-14561,-26498,-15655, //	x,y,z
		-9861,-5466, //	u,v
		-14464,-26498,-15550, //	x,y,z
		-9931,-5347, //	u,v
		-14734,-29287,-15727, //	x,y,z
		-14665,-15944, //	u,v
		-14561,-26498,-15655, //	x,y,z
		-9861,-5466, //	u,v
		-12806,1871,-14918, //	x,y,z
		-3592,442, //	u,v
		-14109,-26498,-15168, //	x,y,z
		-10187,-4912, //	u,v
		-14011,-26498,-15056, //	x,y,z
		-10259,-4790, //	u,v
		-14344,-29287,-15308, //	x,y,z
		-15019,-15808, //	u,v
		-14109,-26498,-15168, //	x,y,z
		-10187,-4912, //	u,v
		-11713,1871,-13743, //	x,y,z
		-5143,455, //	u,v
		-13667,-26498,-14666, //	x,y,z
		-10512,-4360, //	u,v
		-13573,-26498,-14552, //	x,y,z
		-10584,-4238, //	u,v
		-13967,-29286,-14880, //	x,y,z
		-15369,-15673, //	u,v
		-13667,-26498,-14666, //	x,y,z
		-10512,-4360, //	u,v
		-10620,1871,-12494, //	x,y,z
		-6734,469, //	u,v
		-13252,-26498,-14167, //	x,y,z
		-10826,-3827, //	u,v
		-13164,-26498,-14054, //	x,y,z
		-10894,-3711, //	u,v
		-13614,-29286,-14456, //	x,y,z
		-15704,-15545, //	u,v
		-13252,-26498,-14167, //	x,y,z
		-10826,-3827, //	u,v
		-9563,1871,-11217, //	x,y,z
		-8310,483, //	u,v
		-12878,-26498,-13687, //	x,y,z
		-11117,-3334, //	u,v
		-12799,-26498,-13579, //	x,y,z
		-11180,-3227, //	u,v
		-13300,-29286,-14054, //	x,y,z
		-16012,-15427, //	u,v
		-12878,-26498,-13687, //	x,y,z
		-11117,-3334, //	u,v
		-8577,1871,-9956, //	x,y,z
		-9818,496, //	u,v
		-12558,-26498,-13245, //	x,y,z
		-11374,-2898, //	u,v
		-12492,-26498,-13147, //	x,y,z
		-11429,-2804, //	u,v
		-13036,-29286,-13686, //	x,y,z
		-16280,-15324, //	u,v
		-12558,-26498,-13245, //	x,y,z
		-11374,-2898, //	u,v
		-7696,1871,-8755, //	x,y,z
		-11204,508, //	u,v
		-12823,-26498,-13403, //	x,y,z
		-11217,-3163, //	u,v
		-12914,-26498,-13477, //	x,y,z
		-11158,-3263, //	u,v
		-13399,-29286,-13967, //	x,y,z
		-15988,-15436, //	u,v
		-12823,-26498,-13403, //	x,y,z
		-11217,-3163, //	u,v
		-12492,-26498,-13147, //	x,y,z
		-11429,-2804, //	u,v
		-6957,1872,-7660, //	x,y,z
		-12415,519, //	u,v
		-13334,-26498,-13761, //	x,y,z
		-10901,-3700, //	u,v
		-13449,-26498,-13845, //	x,y,z
		-10829,-3822, //	u,v
		-13860,-29286,-14279, //	x,y,z
		-15633,-15572, //	u,v
		-13334,-26498,-13761, //	x,y,z
		-10901,-3700, //	u,v
		-12914,-26498,-13477, //	x,y,z
		-11158,-3263, //	u,v
		-7974,1871,-8497, //	x,y,z
		-11109,508, //	u,v
		-13927,-26498,-14137, //	x,y,z
		-10545,-4304, //	u,v
		-14058,-26498,-14223, //	x,y,z
		-10466,-4439, //	u,v
		-14385,-29286,-14600, //	x,y,z
		-15240,-15723, //	u,v
		-13927,-26498,-14137, //	x,y,z
		-10545,-4304, //	u,v
		-13449,-26498,-13845, //	x,y,z
		-10829,-3822, //	u,v
		-9266,1871,-9427, //	x,y,z
		-9521,494, //	u,v
		-14561,-26498,-14505, //	x,y,z
		-10174,-4934, //	u,v
		-14699,-26498,-14588, //	x,y,z
		-10092,-5073, //	u,v
		-14937,-29287,-14910, //	x,y,z
		-14836,-15878, //	u,v
		-14561,-26498,-14505, //	x,y,z
		-10174,-4934, //	u,v
		-14058,-26498,-14223, //	x,y,z
		-10466,-4439, //	u,v
		-10735,1871,-10384, //	x,y,z
		-7769,478, //	u,v
		-15196,-26498,-14840, //	x,y,z
		-9811,-5550, //	u,v
		-15333,-26498,-14913, //	x,y,z
		-9733,-5684, //	u,v
		-15482,-29287,-15187, //	x,y,z
		-14447,-16027, //	u,v
		-15196,-26498,-14840, //	x,y,z
		-9811,-5550, //	u,v
		-14699,-26498,-14588, //	x,y,z
		-10092,-5073, //	u,v
		-12282,1871,-11308, //	x,y,z
		-5970,463, //	u,v
		-15790,-26498,-15116, //	x,y,z
		-9481,-6110, //	u,v
		-15917,-26498,-15176, //	x,y,z
		-9411,-6229, //	u,v
		-15985,-29287,-15409, //	x,y,z
		-14100,-16161, //	u,v
		-15790,-26498,-15116, //	x,y,z
		-9481,-6110, //	u,v
		-15333,-26498,-14913, //	x,y,z
		-9733,-5684, //	u,v
		-13809,1871,-12133, //	x,y,z
		-4240,447, //	u,v
		-16304,-26498,-15310, //	x,y,z
		-9209,-6572, //	u,v
		-16411,-26498,-15349, //	x,y,z
		-9153,-6668, //	u,v
		-16411,-29287,-15557, //	x,y,z
		-13820,-16268, //	u,v
		-16304,-26498,-15310, //	x,y,z
		-9209,-6572, //	u,v
		-15917,-26498,-15176, //	x,y,z
		-9411,-6229, //	u,v
		-15218,1871,-12796, //	x,y,z
		-2697,434, //	u,v
		-16798,-26498,-15215, //	x,y,z
		-12696,-8315, //	u,v
		-16904,-26498,-15176, //	x,y,z
		-12520,-8145, //	u,v
		-16836,-29287,-15409, //	x,y,z
		-5988,-12294, //	u,v
		-16798,-26498,-15215, //	x,y,z
		-12696,-8315, //	u,v
		-16411,-26498,-15349, //	x,y,z
		-13329,-8926, //	u,v
		-16411,1871,-13235, //	x,y,z
		-15802,-6256, //	u,v
		-17361,-26498,-14973, //	x,y,z
		-11741,-7392, //	u,v
		-17486,-26498,-14913, //	x,y,z
		-11523,-7182, //	u,v
		-17337,-29287,-15187, //	x,y,z
		-5179,-11513, //	u,v
		-17361,-26498,-14973, //	x,y,z
		-11741,-7392, //	u,v
		-16904,-26498,-15176, //	x,y,z
		-12520,-8145, //	u,v
		-17601,1871,-12796, //	x,y,z
		-15029,-5510, //	u,v
		-17981,-26498,-14661, //	x,y,z
		-10653,-6342, //	u,v
		-18117,-26498,-14588, //	x,y,z
		-10410,-6108, //	u,v
		-17881,-29287,-14910, //	x,y,z
		-4277,-10641, //	u,v
		-17981,-26498,-14661, //	x,y,z
		-10653,-6342, //	u,v
		-17486,-26498,-14913, //	x,y,z
		-11523,-7182, //	u,v
		-19006,1871,-12133, //	x,y,z
		-14074,-4587, //	u,v
		-18619,-26498,-14306, //	x,y,z
		-9508,-5236, //	u,v
		-18757,-26498,-14223, //	x,y,z
		-9256,-4993, //	u,v
		-18431,-29286,-14600, //	x,y,z
		-3341,-9737, //	u,v
		-18619,-26498,-14306, //	x,y,z
		-9508,-5236, //	u,v
		-18117,-26498,-14588, //	x,y,z
		-10410,-6108, //	u,v
		-20528,1871,-11308, //	x,y,z
		-13007,-3556, //	u,v
		-19234,-26498,-13930, //	x,y,z
		-8379,-4146, //	u,v
		-19366,-26498,-13845, //	x,y,z
		-8133,-3909, //	u,v
		-18956,-29286,-14279, //	x,y,z
		-2431,-8859, //	u,v
		-19234,-26498,-13930, //	x,y,z
		-8379,-4146, //	u,v
		-22072,1871,-10384, //	x,y,z
		-11898,-2486, //	u,v
		-19787,-26498,-13561, //	x,y,z
		-7339,-3142, //	u,v
		-19903,-26498,-13477, //	x,y,z
		-7117,-2927, //	u,v
		-19418,-29286,-13967, //	x,y,z
		-1608,-8064, //	u,v
		-19787,-26498,-13561, //	x,y,z
		-7339,-3142, //	u,v
		-19366,-26498,-13845, //	x,y,z
		-8133,-3909, //	u,v
		-23540,1871,-9427, //	x,y,z
		-10820,-1444, //	u,v
		-20237,-26498,-13222, //	x,y,z
		-6464,-2297, //	u,v
		-20329,-26498,-13147, //	x,y,z
		-6281,-2120, //	u,v
		-19785,-29286,-13686, //	x,y,z
		-931,-7409, //	u,v
		-20237,-26498,-13222, //	x,y,z
		-6464,-2297, //	u,v
		-19903,-26498,-13477, //	x,y,z
		-7117,-2927, //	u,v
		-24837,1871,-8497, //	x,y,z
		-9843,-501, //	u,v
		-20093,-26498,-13478, //	x,y,z
		-6857,-2676, //	u,v
		-20028,-26498,-13574, //	x,y,z
		-7020,-2834, //	u,v
		-19526,-29286,-14049, //	x,y,z
		-1528,-7987, //	u,v
		-20093,-26498,-13478, //	x,y,z
		-6857,-2676, //	u,v
		-20329,-26498,-13147, //	x,y,z
		-6281,-2120, //	u,v
		-25865,1872,-7660, //	x,y,z
		-9038,276, //	u,v
		-19743,-26498,-13940, //	x,y,z
		-7689,-3480, //	u,v
		-19665,-26498,-14047, //	x,y,z
		-7878,-3662, //	u,v
		-19213,-29286,-14450, //	x,y,z
		-2222,-8657, //	u,v
		-19743,-26498,-13940, //	x,y,z
		-7689,-3480, //	u,v
		-20028,-26498,-13574, //	x,y,z
		-7020,-2834, //	u,v
		-25138,1871,-8742, //	x,y,z
		-9755,-415, //	u,v
		-19344,-26498,-14432, //	x,y,z
		-8612,-4371, //	u,v
		-19256,-26498,-14545, //	x,y,z
		-8819,-4571, //	u,v
		-18861,-29286,-14874, //	x,y,z
		-2983,-9392, //	u,v
		-19344,-26498,-14432, //	x,y,z
		-8612,-4371, //	u,v
		-19665,-26498,-14047, //	x,y,z
		-7878,-3662, //	u,v
		-24262,1871,-9938, //	x,y,z
		-10585,-1218, //	u,v
		-18911,-26498,-14937, //	x,y,z
		-9591,-5316, //	u,v
		-18816,-26498,-15051, //	x,y,z
		-9808,-5527, //	u,v
		-18482,-29287,-15304, //	x,y,z
		-3783,-10165, //	u,v
		-18911,-26498,-14937, //	x,y,z
		-9591,-5316, //	u,v
		-19256,-26498,-14545, //	x,y,z
		-8819,-4571, //	u,v
		-23275,1871,-11200, //	x,y,z
		-11496,-2097, //	u,v
		-18459,-26498,-15434, //	x,y,z
		-10590,-6281, //	u,v
		-18361,-26498,-15547, //	x,y,z
		-10810,-6494, //	u,v
		-18090,-29287,-15725, //	x,y,z
		-4594,-10948, //	u,v
		-18459,-26498,-15434, //	x,y,z
		-10590,-6281, //	u,v
		-18816,-26498,-15051, //	x,y,z
		-9808,-5527, //	u,v
		-22213,1871,-12481, //	x,y,z
		-12452,-3021, //	u,v
		-18004,-26498,-15907, //	x,y,z
		-11574,-7232, //	u,v
		-17906,-26498,-16013, //	x,y,z
		-11789,-7440, //	u,v
		-17698,-29287,-16121, //	x,y,z
		-5386,-11713, //	u,v
		-18004,-26498,-15907, //	x,y,z
		-11574,-7232, //	u,v
		-18361,-26498,-15547, //	x,y,z
		-10810,-6494, //	u,v
		-21115,1871,-13736, //	x,y,z
		-13420,-3956, //	u,v
		-17589,-26498,-16339, //	x,y,z
		-12472,-8099, //	u,v
		-17495,-26498,-16435, //	x,y,z
		-12675,-8295, //	u,v
		-17351,-29287,-16479, //	x,y,z
		-6095,-12397, //	u,v
		-17906,-26498,-16013, //	x,y,z
		-11789,-7440, //	u,v
		-20018,1871,-14916, //	x,y,z
		-14366,-4869, //	u,v
		-17715,-26498,-16826, //	x,y,z
		-11734,-4561, //	u,v
		-17783,-26498,-16941, //	x,y,z
		-11825,-4437, //	u,v
		-17593,-29287,-16909, //	x,y,z
		-12193,-15091, //	u,v
		-17715,-26498,-16826, //	x,y,z
		-11734,-4561, //	u,v
		-17495,-26498,-16435, //	x,y,z
		-11433,-4976, //	u,v
		-18959,1871,-15983, //	x,y,z
		-329,-5931, //	u,v
		-6396,1871,-27339, //	x,y,z
		-12110,596, //	u,v
		-7807,1871,-26421, //	x,y,z
		-10529,-261, //	u,v
		-13340,-29287,-19982, //	x,y,z
		-15380,-11167, //	u,v
		-12836,-29287,-20290, //	x,y,z
		-16049,-10475, //	u,v
		-7807,1871,-26421, //	x,y,z
		-10529,-261, //	u,v
		-9371,1871,-25156, //	x,y,z
		-8637,-1288, //	u,v
		-13898,-29287,-19581, //	x,y,z
		-14598,-11977, //	u,v
		-13340,-29287,-19982, //	x,y,z
		-15380,-11167, //	u,v
		-9371,1871,-25156, //	x,y,z
		-8637,-1288, //	u,v
		-11017,1871,-23682, //	x,y,z
		-6564,-2414, //	u,v
		-14485,-29287,-19087, //	x,y,z
		-13726,-12881, //	u,v
		-13898,-29287,-19581, //	x,y,z
		-14598,-11977, //	u,v
		-11017,1871,-23682, //	x,y,z
		-6564,-2414, //	u,v
		-12666,1871,-22138, //	x,y,z
		-4448,-3563, //	u,v
		-15074,-29287,-18582, //	x,y,z
		-12844,-13793, //	u,v
		-14205,1871,-20682, //	x,y,z
		-2466,-4639, //	u,v
		-15074,-29287,-18582, //	x,y,z
		-12844,-13793, //	u,v
		-16083,-29287,-17657, //	x,y,z
		-11292,-15400, //	u,v
		-7683,1871,-25712, //	x,y,z
		-3982,-732, //	u,v
		-6396,1871,-27339, //	x,y,z
		-12110,596, //	u,v
		-7683,1871,-25712, //	x,y,z
		-10218,-430, //	u,v
		-12678,-26498,-20424, //	x,y,z
		-14275,-451, //	u,v
		-12836,-29287,-20290, //	x,y,z
		-16049,-10475, //	u,v
		-13296,-29287,-19744, //	x,y,z
		-15256,-11296, //	u,v
		-7683,1871,-25712, //	x,y,z
		-10218,-430, //	u,v
		-13296,-29287,-19744, //	x,y,z
		-15256,-11296, //	u,v
		-13729,-29287,-19161, //	x,y,z
		-14462,-12118, //	u,v
		-8899,1871,-23976, //	x,y,z
		-8318,-1462, //	u,v
		-14143,-29287,-18564, //	x,y,z
		-13675,-12933, //	u,v
		-15493,1871,-19492, //	x,y,z
		-823,-5531, //	u,v
		-16411,1871,-18598, //	x,y,z
		373,-6181, //	u,v
		-16411,-29287,-17356, //	x,y,z
		-10789,-15922, //	u,v
		-16411,1871,-18598, //	x,y,z
		-50,-6112, //	u,v
		-17328,1871,-19492, //	x,y,z
		-1061,-5456, //	u,v
		-16411,-29287,-17356, //	x,y,z
		-11563,-15959, //	u,v
		-20155,1871,-22138, //	x,y,z
		-4119,-3470, //	u,v
		-17747,-29287,-18582, //	x,y,z
		-13339,-13514, //	u,v
		-17198,-29287,-18082, //	x,y,z
		-12611,-14516, //	u,v
		-21805,1871,-23682, //	x,y,z
		-5903,-2311, //	u,v
		-18336,-29287,-19087, //	x,y,z
		-14100,-12467, //	u,v
		-17747,-29287,-18582, //	x,y,z
		-13339,-13514, //	u,v
		-21805,1871,-23682, //	x,y,z
		-5903,-2311, //	u,v
		-23451,1871,-25156, //	x,y,z
		-7651,-1176, //	u,v
		-18924,-29287,-19581, //	x,y,z
		-14853,-11430, //	u,v
		-23451,1871,-25156, //	x,y,z
		-7651,-1176, //	u,v
		-25014,1871,-26421, //	x,y,z
		-9244,-141, //	u,v
		-19482,-29287,-19982, //	x,y,z
		-15526,-10503, //	u,v
		-18924,-29287,-19581, //	x,y,z
		-14853,-11430, //	u,v
		-25014,1871,-26421, //	x,y,z
		-9244,-141, //	u,v
		-26426,1871,-27339, //	x,y,z
		-10572,720, //	u,v
		-19986,-29287,-20290, //	x,y,z
		-16101,-9712, //	u,v
		-19482,-29287,-19982, //	x,y,z
		-15526,-10503, //	u,v
		-26426,1871,-27339, //	x,y,z
		-10572,720, //	u,v
		-25138,1871,-25712, //	x,y,z
		-8970,-319, //	u,v
		-19526,-29287,-19744, //	x,y,z
		-15414,-10658, //	u,v
		-19986,-29287,-20290, //	x,y,z
		-16101,-9712, //	u,v
		-25138,1871,-25712, //	x,y,z
		-8970,-319, //	u,v
		-23923,1871,-23976, //	x,y,z
		-7358,-1366, //	u,v
		-19092,-29287,-19161, //	x,y,z
		-14724,-11607, //	u,v
		-19526,-29287,-19744, //	x,y,z
		-15414,-10658, //	u,v
		-23923,1871,-23976, //	x,y,z
		-7358,-1366, //	u,v
		-22764,1871,-22195, //	x,y,z
		-5759,-2404, //	u,v
		-18678,-29287,-18564, //	x,y,z
		-14041,-12548, //	u,v
		-19092,-29287,-19161, //	x,y,z
		-14724,-11607, //	u,v
		-11160,1871,-20439, //	x,y,z
		-4608,-3476, //	u,v
		-10058,1871,-22195, //	x,y,z
		-6435,-2484, //	u,v
		-14537,-29287,-17974, //	x,y,z
		-12912,-13723, //	u,v
		-22764,1871,-22195, //	x,y,z
		-5759,-2404, //	u,v
		-21662,1871,-20439, //	x,y,z
		-4208,-3412, //	u,v
		-18285,-29287,-17974, //	x,y,z
		-13377,-13461, //	u,v
		-18678,-29287,-18564, //	x,y,z
		-14041,-12548, //	u,v
		-12187,1871,-18772, //	x,y,z
		-2889,-4409, //	u,v
		-14903,-29287,-17415, //	x,y,z
		-12195,-14466, //	u,v
		-20635,1871,-18772, //	x,y,z
		-2747,-4361, //	u,v
		-17919,-29287,-17415, //	x,y,z
		-12753,-14320, //	u,v
		-13099,1871,-17265, //	x,y,z
		-1346,-5247, //	u,v
		-15229,-29287,-16909, //	x,y,z
		-11551,-15132, //	u,v
		-19722,1871,-17265, //	x,y,z
		-1436,-5212, //	u,v
		-17593,-29287,-16909, //	x,y,z
		-12193,-15091, //	u,v
		-13863,1871,-15983, //	x,y,z
		-44,-5954, //	u,v
		-15229,-29287,-16909, //	x,y,z
		-11551,-15132, //	u,v
		-15466,-29287,-16479, //	x,y,z
		-11039,-15662, //	u,v
		-13863,1871,-15983, //	x,y,z
		-2130,429, //	u,v
		-15466,-29287,-16479, //	x,y,z
		-14012,-16194, //	u,v
		-15124,-29287,-16122, //	x,y,z
		-14320,-16076, //	u,v
		-12806,1871,-14918, //	x,y,z
		-3592,442, //	u,v
		-14734,-29287,-15727, //	x,y,z
		-14665,-15944, //	u,v
		-11713,1871,-13743, //	x,y,z
		-5143,455, //	u,v
		-14344,-29287,-15308, //	x,y,z
		-15019,-15808, //	u,v
		-10620,1871,-12494, //	x,y,z
		-6734,469, //	u,v
		-13967,-29286,-14880, //	x,y,z
		-15369,-15673, //	u,v
		-9563,1871,-11217, //	x,y,z
		-8310,483, //	u,v
		-13614,-29286,-14456, //	x,y,z
		-15704,-15545, //	u,v
		-8577,1871,-9956, //	x,y,z
		-9818,496, //	u,v
		-13300,-29286,-14054, //	x,y,z
		-16012,-15427, //	u,v
		-6957,1872,-7660, //	x,y,z
		-12415,519, //	u,v
		-7696,1871,-8755, //	x,y,z
		-11204,508, //	u,v
		-13036,-29286,-13686, //	x,y,z
		-16280,-15324, //	u,v
		-7974,1871,-8497, //	x,y,z
		-11109,508, //	u,v
		-6957,1872,-7660, //	x,y,z
		-12415,519, //	u,v
		-13036,-29286,-13686, //	x,y,z
		-16280,-15324, //	u,v
		-13399,-29286,-13967, //	x,y,z
		-15988,-15436, //	u,v
		-9266,1871,-9427, //	x,y,z
		-9521,494, //	u,v
		-7974,1871,-8497, //	x,y,z
		-11109,508, //	u,v
		-13399,-29286,-13967, //	x,y,z
		-15988,-15436, //	u,v
		-13860,-29286,-14279, //	x,y,z
		-15633,-15572, //	u,v
		-10735,1871,-10384, //	x,y,z
		-7769,478, //	u,v
		-9266,1871,-9427, //	x,y,z
		-9521,494, //	u,v
		-13860,-29286,-14279, //	x,y,z
		-15633,-15572, //	u,v
		-14385,-29286,-14600, //	x,y,z
		-15240,-15723, //	u,v
		-12282,1871,-11308, //	x,y,z
		-5970,463, //	u,v
		-10735,1871,-10384, //	x,y,z
		-7769,478, //	u,v
		-14385,-29286,-14600, //	x,y,z
		-15240,-15723, //	u,v
		-14937,-29287,-14910, //	x,y,z
		-14836,-15878, //	u,v
		-13809,1871,-12133, //	x,y,z
		-4240,447, //	u,v
		-12282,1871,-11308, //	x,y,z
		-5970,463, //	u,v
		-14937,-29287,-14910, //	x,y,z
		-14836,-15878, //	u,v
		-15482,-29287,-15187, //	x,y,z
		-14447,-16027, //	u,v
		-15218,1871,-12796, //	x,y,z
		-2697,434, //	u,v
		-13809,1871,-12133, //	x,y,z
		-4240,447, //	u,v
		-15482,-29287,-15187, //	x,y,z
		-14447,-16027, //	u,v
		-15985,-29287,-15409, //	x,y,z
		-14100,-16161, //	u,v
		-16411,1871,-13235, //	x,y,z
		-1456,423, //	u,v
		-15218,1871,-12796, //	x,y,z
		-2697,434, //	u,v
		-15985,-29287,-15409, //	x,y,z
		-14100,-16161, //	u,v
		-16411,-29287,-15557, //	x,y,z
		-13820,-16268, //	u,v
		-17601,1871,-12796, //	x,y,z
		-15029,-5510, //	u,v
		-16411,1871,-13235, //	x,y,z
		-15802,-6256, //	u,v
		-16411,-29287,-15557, //	x,y,z
		-6644,-12927, //	u,v
		-16836,-29287,-15409, //	x,y,z
		-5988,-12294, //	u,v
		-19006,1871,-12133, //	x,y,z
		-14074,-4587, //	u,v
		-17601,1871,-12796, //	x,y,z
		-15029,-5510, //	u,v
		-16836,-29287,-15409, //	x,y,z
		-5988,-12294, //	u,v
		-17337,-29287,-15187, //	x,y,z
		-5179,-11513, //	u,v
		-20528,1871,-11308, //	x,y,z
		-13007,-3556, //	u,v
		-19006,1871,-12133, //	x,y,z
		-14074,-4587, //	u,v
		-17337,-29287,-15187, //	x,y,z
		-5179,-11513, //	u,v
		-17881,-29287,-14910, //	x,y,z
		-4277,-10641, //	u,v
		-20528,1871,-11308, //	x,y,z
		-13007,-3556, //	u,v
		-17881,-29287,-14910, //	x,y,z
		-4277,-10641, //	u,v
		-18431,-29286,-14600, //	x,y,z
		-3341,-9737, //	u,v
		-23540,1871,-9427, //	x,y,z
		-10820,-1444, //	u,v
		-22072,1871,-10384, //	x,y,z
		-11898,-2486, //	u,v
		-18956,-29286,-14279, //	x,y,z
		-2431,-8859, //	u,v
		-24837,1871,-8497, //	x,y,z
		-9843,-501, //	u,v
		-23540,1871,-9427, //	x,y,z
		-10820,-1444, //	u,v
		-18956,-29286,-14279, //	x,y,z
		-2431,-8859, //	u,v
		-19418,-29286,-13967, //	x,y,z
		-1608,-8064, //	u,v
		-25865,1872,-7660, //	x,y,z
		-9038,276, //	u,v
		-24837,1871,-8497, //	x,y,z
		-9843,-501, //	u,v
		-19418,-29286,-13967, //	x,y,z
		-1608,-8064, //	u,v
		-19785,-29286,-13686, //	x,y,z
		-931,-7409, //	u,v
		-25138,1871,-8742, //	x,y,z
		-9755,-415, //	u,v
		-25865,1872,-7660, //	x,y,z
		-9038,276, //	u,v
		-19785,-29286,-13686, //	x,y,z
		-931,-7409, //	u,v
		-19526,-29286,-14049, //	x,y,z
		-1528,-7987, //	u,v
		-24262,1871,-9938, //	x,y,z
		-10585,-1218, //	u,v
		-25138,1871,-8742, //	x,y,z
		-9755,-415, //	u,v
		-19526,-29286,-14049, //	x,y,z
		-1528,-7987, //	u,v
		-19213,-29286,-14450, //	x,y,z
		-2222,-8657, //	u,v
		-23275,1871,-11200, //	x,y,z
		-11496,-2097, //	u,v
		-24262,1871,-9938, //	x,y,z
		-10585,-1218, //	u,v
		-19213,-29286,-14450, //	x,y,z
		-2222,-8657, //	u,v
		-18861,-29286,-14874, //	x,y,z
		-2983,-9392, //	u,v
		-22213,1871,-12481, //	x,y,z
		-12452,-3021, //	u,v
		-23275,1871,-11200, //	x,y,z
		-11496,-2097, //	u,v
		-18861,-29286,-14874, //	x,y,z
		-2983,-9392, //	u,v
		-18482,-29287,-15304, //	x,y,z
		-3783,-10165, //	u,v
		-21115,1871,-13736, //	x,y,z
		-13420,-3956, //	u,v
		-22213,1871,-12481, //	x,y,z
		-12452,-3021, //	u,v
		-18482,-29287,-15304, //	x,y,z
		-3783,-10165, //	u,v
		-18090,-29287,-15725, //	x,y,z
		-4594,-10948, //	u,v
		-20018,1871,-14916, //	x,y,z
		-14366,-4869, //	u,v
		-21115,1871,-13736, //	x,y,z
		-13420,-3956, //	u,v
		-18090,-29287,-15725, //	x,y,z
		-4594,-10948, //	u,v
		-17698,-29287,-16121, //	x,y,z
		-5386,-11713, //	u,v
		-18959,1871,-15983, //	x,y,z
		-15257,-5729, //	u,v
		-18959,1871,-15983, //	x,y,z
		-329,-5931, //	u,v
		-17351,-29287,-16479, //	x,y,z
		-11744,-15710, //	u,v
		-17593,-29287,-16909, //	x,y,z
		-12193,-15091, //	u,v
};
const int index_count_xboxlogointerior_0 = 1008;
char indices_xboxlogointerior_0C[] = 
{
	2,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	4,-3,2,
	3,-1,-2,
	6,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	4,-9,8,
	4,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	4,-3,2,
	3,-1,-2,
	5,-3,2,
	4,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	4,-71,70,
	4,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	4,-9,8,
	4,-1,-1,
	4,-8,7,
	4,-1,-1,
	4,-8,7,
	4,-1,-1,
	4,-8,7,
	4,-1,-1,
	4,-8,7,
	4,-1,-1,
	4,-8,7,
	4,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	4,-9,8,
	4,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
	4,-1,-3,
	7,-1,-1,
	5,-1,-1,
	126,-2,-61,126,1,64,126,-2,-65,
	0,126,1,65,1,
	126,-2,-62,126,1,63,126,-2,-64,
	0,126,1,64,1,
	126,-2,-61,126,1,62,126,-2,-63,
	0,126,1,63,1,
	126,-2,-60,126,1,61,126,-2,-62,
	0,126,1,62,1,
	126,-2,-59,126,1,60,126,-2,-61,
	0,126,1,61,1,
	126,-2,-58,126,1,59,126,-2,-60,
	0,126,1,60,1,
	126,-2,-57,126,1,58,126,-2,-59,
	0,126,1,59,1,
	126,-2,-56,126,1,57,126,-2,-58,
	0,126,1,58,-4,
	126,-2,-50,126,1,53,126,-2,-54,
	0,126,1,54,2,
	126,-2,-52,3,-4,
	0,4,126,1,50,
	126,-2,-53,1,1,
	0,-1,4,
	-1,126,1,50,126,-2,-52,
	0,126,1,52,126,-2,-51,
	4,126,1,48,126,-2,-49,
	126,1,52,-1,-1,
	126,-2,-46,126,1,49,126,-2,-50,
	0,126,1,50,1,
	126,-2,-47,9,-10,
	0,10,126,1,39,
	126,-2,-45,126,1,46,126,-2,-47,
	0,126,1,47,1,
	126,-2,-44,71,-72,
	0,72,126,0,-26,
	126,-2,-51,1,7,
	0,-7,126,1,51,
	126,-2,-41,126,1,42,126,-2,-43,
	0,126,1,43,1,
	126,-2,-40,126,1,41,126,-2,-42,
	0,126,1,42,-14,
	126,-2,-24,126,1,39,126,-2,-40,
	0,126,1,40,1,
	126,-2,-37,3,-4,
	0,4,126,1,35,
	126,-2,-38,1,1,
	0,-1,4,
	-1,3,-5,
	0,5,-4,
	1,1,1,
	0,-1,126,1,34,
	126,-2,-30,126,1,31,126,-2,-32,
	0,126,1,32,1,
	126,-2,-29,126,1,27,126,-2,-28,
	0,126,1,28,3,
	126,-2,-27,126,1,28,126,-2,-29,
	0,126,1,29,1,
	126,-2,-26,126,1,27,126,-2,-28,
	0,126,1,28,1,
	126,-2,-25,126,1,26,126,-2,-27,
	0,126,1,27,-4,
	126,-2,-19,126,1,24,126,-2,-25,
	0,126,1,25,1,
	126,-2,-22,126,1,23,126,-2,-24,
	0,126,1,24,1,
	126,-2,-21,126,1,22,126,-2,-23,
	0,126,1,23,1,
	126,-2,-20,126,1,21,126,-2,-22,
	0,126,1,22,1,
	126,-2,-19,126,1,20,126,-2,-21,
	0,126,1,21,1,
	126,-2,-18,126,1,19,126,-2,-20,
	0,126,1,20,1,
	126,-2,-17,126,1,18,126,-2,-19,
	0,126,1,19,1,
	126,-2,-16,126,1,17,126,-2,-18,
	0,126,1,18,1,
	126,-2,-15,126,1,16,126,-2,-17,
	0,126,1,17,1,
	126,-2,-14,126,1,15,126,-2,-16,
	0,126,1,16,1,
	126,-2,-13,126,1,14,126,-2,-15,
	0,126,1,15,1,
	126,-2,-83,1,69,
	0,-69,126,1,83,
	126,-2,-11,126,1,12,126,-2,-13,
	0,126,1,13,1,
	126,-2,-10,126,1,11,126,-2,-12,
	0,126,1,12,1,
	126,-2,-9,126,1,10,126,-2,-11,
	0,126,1,11,-7,
	126,-1,0,126,1,2,126,-2,-3,
	0,126,1,3,6,
	126,-2,-5,126,1,1,126,-2,-2,
	0,126,1,2,5,
	126,-2,-3,126,1,4,126,-2,-5,
	0,126,1,5,-5,
	126,-1,4,126,1,2,126,-2,-3,
	0,126,1,3,-4,
	126,-1,5,126,0,-4,126,-1,3,
	0,126,0,-3,4,
	126,-1,3,126,0,-6,126,-1,5,
	0,126,0,-5,4,
	126,-1,5,126,0,-4,126,-1,3,
	0,126,0,-3,-4,
	126,-1,11,126,0,-6,126,-1,5,
	0,126,0,-5,-4,
	126,-1,13,126,0,-8,126,-1,7,
	0,126,0,-7,1,
	126,-1,10,9,-10,
	0,10,126,0,-18,
	126,-1,12,126,0,-11,126,-1,10,
	0,126,0,-10,1,
	126,-1,13,8,-9,
	0,9,126,0,-20,
	126,-1,6,1,7,
	0,-7,126,0,-6,
	126,-1,16,8,-9,
	0,9,126,0,-23,
	126,-1,10,1,6,
	0,-6,126,0,-10,
	126,-1,19,8,-9,
	0,9,126,0,-26,
	126,-1,13,1,6,
	0,-6,126,0,-13,
	126,-1,22,8,-9,
	0,9,126,0,-29,
	126,-1,16,1,6,
	0,-6,126,0,-16,
	126,-1,25,8,-9,
	0,9,126,0,-32,
	126,-1,19,1,6,
	0,-6,126,0,-19,
	126,-1,28,126,0,-27,126,-1,26,
	0,126,0,-26,1,
	126,-1,21,1,6,
	0,-6,126,0,-21,
	126,-1,30,126,0,-29,126,-1,28,
	0,126,0,-28,1,
	126,-1,31,126,0,-30,126,-1,29,
	0,126,0,-29,1,
	126,-1,32,126,0,-31,126,-1,30,
	0,126,0,-30,1,
	126,-1,33,126,0,-32,126,-1,31,
	0,126,0,-31,1,
	126,-1,34,126,0,-33,126,-1,32,
	0,126,0,-32,1,
	126,-1,35,126,0,-34,126,-1,33,
	0,126,0,-33,1,
	126,-1,36,126,0,-35,126,-1,34,
	0,126,0,-34,1,
	126,-1,37,126,0,-36,126,-1,35,
	0,126,0,-35,1,
	126,-1,38,126,0,-37,126,-1,36,
	0,126,0,-36,1,
	126,-1,39,126,0,-38,126,-1,37,
	0,126,0,-37,1,
	126,-1,40,126,0,-39,126,-1,38,
	0,126,0,-38,1,
	126,-1,41,126,0,-40,126,-1,39,
	0,126,0,-39,1,
	126,-1,42,126,0,-41,126,-1,40,
	0,126,0,-40,1,
	126,-1,43,126,0,-42,126,-1,41,
	0,126,0,-41,1,
	126,-1,44,126,0,-43,126,-1,42,
	0,126,0,-42,1,
	126,-1,45,126,0,-44,126,-1,43,
	0,126,0,-43,1,
	126,-1,46,126,0,-45,126,-1,44,
	0,126,0,-44,1,
	126,-1,47,126,0,-46,126,-1,45,
	0,126,0,-45,1,
	126,-1,48,126,0,-47,126,-1,46,
	0,126,0,-46,1,
	126,-1,49,126,0,-48,126,-1,47,
	0,126,0,-47,1,
	126,-1,50,9,-10,
	0,10,126,0,-58,
	126,-1,52,126,0,-51,126,-1,50,
	0,126,0,-50,1,
	126,-1,53,126,0,-52,126,-1,51,
	0,126,0,-51,1,
	126,-1,45,1,7,
	0,-7,126,0,-45,
	126,-1,55,126,0,-54,126,-1,53,
	0,126,0,-53,1,
	126,-1,56,126,0,-55,126,-1,54,
	0,126,0,-54,1,
	126,-1,57,126,0,-56,126,-1,55,
	0,126,0,-55,1,
	126,-1,58,126,0,-57,126,-1,56,
	0,126,0,-56,1,
	126,-1,59,126,0,-58,126,-1,57,
	0,126,0,-57,1,
	126,-1,60,126,0,-59,126,-1,58,
	0,126,0,-58,1,
	126,-1,61,126,0,-60,126,-1,59,
	0,126,0,-59,1,
	126,-1,62,126,0,-61,126,-1,60,
	0,126,0,-60,1,
	126,-1,63,126,0,-62,126,-1,61,
	0,126,0,-61,1,
	126,-1,64,126,0,-63,126,-1,62,
	0,126,0,-62,1,
	126,-1,65,126,0,-64,126,-1,63,
	0,126,0,-63,1,
	126,-1,66,126,0,-65,126,-1,64,
	0,126,0,-64,1,
	126,-1,67,126,0,-66,126,-1,65,
	0,126,0,-65,1,
	126,-1,68,126,0,-67,126,-1,66,
	0,126,0,-66,1,
	126,-1,69,126,0,-68,126,-1,67,
	0,126,0,-67,1,
	126,-1,70,126,0,-69,126,-1,68,
	0,126,0,-68,1,
	126,-1,71,126,0,-70,126,-1,69,
	0,126,0,-69,126,-1,73,
	-1,126,0,-73,126,-1,70,
	0,126,0,-70,126,-1,72,
	4,82,-83,
	0,83,100,
	126,-1,77,126,0,-76,126,-1,75,
	0,126,0,-75,1,
};

///////////////////////////////////////////////////////////////////////////////
const int vertex_count_xboxlogolip_0 = 210;
short verts_xboxlogolip_0C[] = 
{
		-13340,-29287,-19982, //	x,y,z
		381,-1307, //	u,v
		-12836,-29287,-20290, //	x,y,z
		297,895, //	u,v
		-12836,-29754,-20290, //	x,y,z
		-16366,889, //	u,v
		-13340,-29754,-19982, //	x,y,z
		-16282,-1313, //	u,v
		-13898,-29287,-19581, //	x,y,z
		477,-3961, //	u,v
		-13340,-29287,-19982, //	x,y,z
		381,-1307, //	u,v
		-13340,-29754,-19982, //	x,y,z
		-16282,-1313, //	u,v
		-13898,-29754,-19581, //	x,y,z
		-16186,-3967, //	u,v
		-14485,-29287,-19087, //	x,y,z
		577,-6847, //	u,v
		-13898,-29287,-19581, //	x,y,z
		477,-3961, //	u,v
		-13898,-29754,-19581, //	x,y,z
		-16186,-3967, //	u,v
		-14485,-29754,-19087, //	x,y,z
		-16085,-6853, //	u,v
		-15074,-29287,-18582, //	x,y,z
		676,-9748, //	u,v
		-15074,-29754,-18582, //	x,y,z
		-15987,-9754, //	u,v
		-15624,-29287,-18082, //	x,y,z
		766,-12446, //	u,v
		-15074,-29287,-18582, //	x,y,z
		676,-9748, //	u,v
		-15074,-29754,-18582, //	x,y,z
		-15987,-9754, //	u,v
		-15624,-29754,-18082, //	x,y,z
		-15897,-12452, //	u,v
		-16083,-29287,-17657, //	x,y,z
		842,-14723, //	u,v
		-16083,-29754,-17657, //	x,y,z
		-15821,-14729, //	u,v
		-12836,-29287,-20290, //	x,y,z
		-15877,717, //	u,v
		-13296,-29287,-19744, //	x,y,z
		-15877,-3694, //	u,v
		-13296,-29754,-19744, //	x,y,z
		407,-3694, //	u,v
		-12836,-29754,-20290, //	x,y,z
		407,717, //	u,v
		-13296,-29287,-19744, //	x,y,z
		-15877,-3694, //	u,v
		-13729,-29287,-19161, //	x,y,z
		-15877,-7725, //	u,v
		-13729,-29754,-19161, //	x,y,z
		407,-7725, //	u,v
		-13296,-29754,-19744, //	x,y,z
		407,-3694, //	u,v
		-13729,-29287,-19161, //	x,y,z
		-15877,-7725, //	u,v
		-14143,-29287,-18564, //	x,y,z
		-15877,-9784, //	u,v
		-14143,-29754,-18564, //	x,y,z
		407,-9784, //	u,v
		-13729,-29754,-19161, //	x,y,z
		407,-7725, //	u,v
		-16411,-29287,-17356, //	x,y,z
		895,-16360, //	u,v
		-16411,-29754,-17356, //	x,y,z
		-15768,-16366, //	u,v
		-16738,-29287,-17657, //	x,y,z
		513,-14543, //	u,v
		-16411,-29287,-17356, //	x,y,z
		561,-16133, //	u,v
		-16411,-29754,-17356, //	x,y,z
		-15643,-16139, //	u,v
		-16738,-29754,-17657, //	x,y,z
		-15690,-14549, //	u,v
		-17198,-29287,-18082, //	x,y,z
		447,-12333, //	u,v
		-17198,-29754,-18082, //	x,y,z
		-15756,-12338, //	u,v
		-17747,-29287,-18582, //	x,y,z
		370,-9713, //	u,v
		-17747,-29754,-18582, //	x,y,z
		-15833,-9719, //	u,v
		-18336,-29287,-19087, //	x,y,z
		289,-6896, //	u,v
		-17747,-29287,-18582, //	x,y,z
		370,-9713, //	u,v
		-17747,-29754,-18582, //	x,y,z
		-15833,-9719, //	u,v
		-18336,-29754,-19087, //	x,y,z
		-15914,-6902, //	u,v
		-18924,-29287,-19581, //	x,y,z
		211,-4094, //	u,v
		-18924,-29754,-19581, //	x,y,z
		-15993,-4100, //	u,v
		-19482,-29287,-19982, //	x,y,z
		142,-1518, //	u,v
		-18924,-29287,-19581, //	x,y,z
		211,-4094, //	u,v
		-18924,-29754,-19581, //	x,y,z
		-15993,-4100, //	u,v
		-19482,-29754,-19982, //	x,y,z
		-16062,-1524, //	u,v
		-19986,-29287,-20290, //	x,y,z
		89,620, //	u,v
		-19482,-29287,-19982, //	x,y,z
		142,-1518, //	u,v
		-19482,-29754,-19982, //	x,y,z
		-16062,-1524, //	u,v
		-19986,-29754,-20290, //	x,y,z
		-16114,614, //	u,v
		-19526,-29287,-19744, //	x,y,z
		-15801,-265, //	u,v
		-19986,-29287,-20290, //	x,y,z
		-15801,590, //	u,v
		-19986,-29754,-20290, //	x,y,z
		331,590, //	u,v
		-19526,-29754,-19744, //	x,y,z
		331,-265, //	u,v
		-19092,-29287,-19161, //	x,y,z
		-15801,-1151, //	u,v
		-19526,-29287,-19744, //	x,y,z
		-15801,-265, //	u,v
		-19526,-29754,-19744, //	x,y,z
		331,-265, //	u,v
		-19092,-29754,-19161, //	x,y,z
		331,-1151, //	u,v
		-18678,-29287,-18564, //	x,y,z
		-15801,-2400, //	u,v
		-19092,-29287,-19161, //	x,y,z
		-15801,-1151, //	u,v
		-19092,-29754,-19161, //	x,y,z
		331,-1151, //	u,v
		-18678,-29754,-18564, //	x,y,z
		331,-2400, //	u,v
		-14143,-29287,-18564, //	x,y,z
		-15877,-9784, //	u,v
		-14537,-29287,-17974, //	x,y,z
		-15877,-11729, //	u,v
		-14537,-29754,-17974, //	x,y,z
		407,-11729, //	u,v
		-14143,-29754,-18564, //	x,y,z
		407,-9784, //	u,v
		-18285,-29287,-17974, //	x,y,z
		-15801,-3495, //	u,v
		-18678,-29287,-18564, //	x,y,z
		-15801,-2400, //	u,v
		-18678,-29754,-18564, //	x,y,z
		331,-2400, //	u,v
		-18285,-29754,-17974, //	x,y,z
		331,-3495, //	u,v
		-14903,-29287,-17415, //	x,y,z
		-15877,-13400, //	u,v
		-14903,-29754,-17415, //	x,y,z
		407,-13400, //	u,v
		-17919,-29287,-17415, //	x,y,z
		-15801,-4613, //	u,v
		-17919,-29754,-17415, //	x,y,z
		331,-4613, //	u,v
		-15229,-29287,-16909, //	x,y,z
		-15877,-14908, //	u,v
		-15229,-29754,-16909, //	x,y,z
		407,-14908, //	u,v
		-17593,-29287,-16909, //	x,y,z
		-15801,-5829, //	u,v
		-17593,-29754,-16909, //	x,y,z
		331,-5829, //	u,v
		-15229,-29287,-16909, //	x,y,z
		-15877,-14908, //	u,v
		-15466,-29287,-16479, //	x,y,z
		-15877,-16118, //	u,v
		-15501,-29754,-16479, //	x,y,z
		407,-16205, //	u,v
		-15501,-29754,-16479, //	x,y,z
		407,-16205, //	u,v
		-15466,-29287,-16479, //	x,y,z
		-8006,-14045, //	u,v
		-15124,-29287,-16122, //	x,y,z
		-6755,-11969, //	u,v
		-15124,-29753,-16122, //	x,y,z
		-13617,-11615, //	u,v
		-15124,-29753,-16122, //	x,y,z
		-13617,-11615, //	u,v
		-15501,-29754,-16479, //	x,y,z
		-14868,-13691, //	u,v
		-15466,-29287,-16479, //	x,y,z
		-8006,-14045, //	u,v
		-15124,-29287,-16122, //	x,y,z
		-6755,-11969, //	u,v
		-14734,-29287,-15727, //	x,y,z
		-5434,-9778, //	u,v
		-14734,-29753,-15727, //	x,y,z
		-12296,-9424, //	u,v
		-15124,-29753,-16122, //	x,y,z
		-13617,-11615, //	u,v
		-14734,-29287,-15727, //	x,y,z
		-5434,-9778, //	u,v
		-14344,-29287,-15308, //	x,y,z
		-4088,-7547, //	u,v
		-14344,-29753,-15308, //	x,y,z
		-10950,-7193, //	u,v
		-14734,-29753,-15727, //	x,y,z
		-12296,-9424, //	u,v
		-14344,-29287,-15308, //	x,y,z
		-4088,-7547, //	u,v
		-13967,-29286,-14880, //	x,y,z
		-2762,-5349, //	u,v
		-13967,-29753,-14880, //	x,y,z
		-9623,-4995, //	u,v
		-14344,-29753,-15308, //	x,y,z
		-10950,-7193, //	u,v
		-13967,-29286,-14880, //	x,y,z
		-2762,-5349, //	u,v
		-13614,-29286,-14456, //	x,y,z
		-1501,-3260, //	u,v
		-13614,-29753,-14456, //	x,y,z
		-8362,-2906, //	u,v
		-13967,-29753,-14880, //	x,y,z
		-9623,-4995, //	u,v
		-13614,-29286,-14456, //	x,y,z
		-1501,-3260, //	u,v
		-13300,-29286,-14054, //	x,y,z
		-349,-1354, //	u,v
		-13300,-29753,-14054, //	x,y,z
		-7211,-1000, //	u,v
		-13614,-29753,-14456, //	x,y,z
		-8362,-2906, //	u,v
		-13300,-29286,-14054, //	x,y,z
		-349,-1354, //	u,v
		-13036,-29286,-13686, //	x,y,z
		646,294, //	u,v
		-13036,-29753,-13686, //	x,y,z
		-6214,648, //	u,v
		-13300,-29753,-14054, //	x,y,z
		-7211,-1000, //	u,v
		-13036,-29286,-13686, //	x,y,z
		-16034,727, //	u,v
		-13399,-29286,-13967, //	x,y,z
		-16026,-1379, //	u,v
		-13399,-29753,-13967, //	x,y,z
		536,-1379, //	u,v
		-13036,-29753,-13686, //	x,y,z
		528,727, //	u,v
		-13399,-29286,-13967, //	x,y,z
		-16026,-1379, //	u,v
		-13860,-29286,-14279, //	x,y,z
		-16019,-3692, //	u,v
		-13860,-29753,-14279, //	x,y,z
		543,-3692, //	u,v
		-13399,-29753,-13967, //	x,y,z
		536,-1379, //	u,v
		-13860,-29286,-14279, //	x,y,z
		-16019,-3692, //	u,v
		-14385,-29286,-14600, //	x,y,z
		-16012,-5992, //	u,v
		-14385,-29753,-14600, //	x,y,z
		549,-5992, //	u,v
		-13860,-29753,-14279, //	x,y,z
		543,-3692, //	u,v
		-14385,-29286,-14600, //	x,y,z
		-16012,-5992, //	u,v
		-14937,-29287,-14910, //	x,y,z
		-16007,-8224, //	u,v
		-14937,-29753,-14910, //	x,y,z
		555,-8224, //	u,v
		-14385,-29753,-14600, //	x,y,z
		549,-5992, //	u,v
		-14937,-29287,-14910, //	x,y,z
		-16007,-8224, //	u,v
		-15482,-29287,-15187, //	x,y,z
		-16002,-10920, //	u,v
		-15482,-29753,-15187, //	x,y,z
		560,-10920, //	u,v
		-14937,-29753,-14910, //	x,y,z
		555,-8224, //	u,v
		-15482,-29287,-15187, //	x,y,z
		-16002,-10920, //	u,v
		-15985,-29287,-15409, //	x,y,z
		-16000,-13359, //	u,v
		-15985,-29753,-15409, //	x,y,z
		562,-13359, //	u,v
		-15482,-29753,-15187, //	x,y,z
		560,-10920, //	u,v
		-15985,-29287,-15409, //	x,y,z
		-16000,-13359, //	u,v
		-16411,-29287,-15557, //	x,y,z
		-15998,-15361, //	u,v
		-16411,-29754,-15557, //	x,y,z
		563,-15361, //	u,v
		-15985,-29753,-15409, //	x,y,z
		562,-13359, //	u,v
		-16411,-29287,-15557, //	x,y,z
		-16079,-16196, //	u,v
		-16836,-29287,-15409, //	x,y,z
		-16080,-14202, //	u,v
		-16836,-29753,-15409, //	x,y,z
		643,-14202, //	u,v
		-16411,-29754,-15557, //	x,y,z
		644,-16196, //	u,v
		-16836,-29287,-15409, //	x,y,z
		-16080,-14202, //	u,v
		-17337,-29287,-15187, //	x,y,z
		-16083,-12066, //	u,v
		-17337,-29753,-15187, //	x,y,z
		640,-12066, //	u,v
		-16836,-29753,-15409, //	x,y,z
		643,-14202, //	u,v
		-17337,-29287,-15187, //	x,y,z
		-16083,-12066, //	u,v
		-17881,-29287,-14910, //	x,y,z
		-16087,-9713, //	u,v
		-17881,-29753,-14910, //	x,y,z
		636,-9713, //	u,v
		-17337,-29753,-15187, //	x,y,z
		640,-12066, //	u,v
		-17881,-29287,-14910, //	x,y,z
		-16087,-9713, //	u,v
		-18431,-29286,-14600, //	x,y,z
		-16093,-7360, //	u,v
		-18431,-29753,-14600, //	x,y,z
		630,-7360, //	u,v
		-17881,-29753,-14910, //	x,y,z
		636,-9713, //	u,v
		-18431,-29286,-14600, //	x,y,z
		-16093,-7360, //	u,v
		-18956,-29286,-14279, //	x,y,z
		-16100,-4976, //	u,v
		-18956,-29753,-14279, //	x,y,z
		623,-4976, //	u,v
		-18431,-29753,-14600, //	x,y,z
		630,-7360, //	u,v
		-18956,-29286,-14279, //	x,y,z
		-16100,-4976, //	u,v
		-19418,-29286,-13967, //	x,y,z
		-16107,-2569, //	u,v
		-19418,-29753,-13967, //	x,y,z
		616,-2569, //	u,v
		-18956,-29753,-14279, //	x,y,z
		623,-4976, //	u,v
		-19418,-29286,-13967, //	x,y,z
		-16107,-2569, //	u,v
		-19785,-29286,-13686, //	x,y,z
		-16114,518, //	u,v
		-19785,-29753,-13686, //	x,y,z
		608,518, //	u,v
		-19418,-29753,-13967, //	x,y,z
		616,-2569, //	u,v
		-19785,-29286,-13686, //	x,y,z
		645,635, //	u,v
		-19526,-29286,-14049, //	x,y,z
		511,-1067, //	u,v
		-19526,-29753,-14049, //	x,y,z
		-15266,-1056, //	u,v
		-19785,-29753,-13686, //	x,y,z
		-15132,646, //	u,v
		-19526,-29286,-14049, //	x,y,z
		511,-1067, //	u,v
		-19213,-29286,-14450, //	x,y,z
		365,-3049, //	u,v
		-19213,-29753,-14450, //	x,y,z
		-15412,-3039, //	u,v
		-19526,-29753,-14049, //	x,y,z
		-15266,-1056, //	u,v
		-19213,-29286,-14450, //	x,y,z
		365,-3049, //	u,v
		-18861,-29286,-14874, //	x,y,z
		214,-5230, //	u,v
		-18861,-29753,-14874, //	x,y,z
		-15563,-5220, //	u,v
		-19213,-29753,-14450, //	x,y,z
		-15412,-3039, //	u,v
		-18861,-29286,-14874, //	x,y,z
		214,-5230, //	u,v
		-18482,-29287,-15304, //	x,y,z
		63,-7527, //	u,v
		-18482,-29753,-15304, //	x,y,z
		-15715,-7516, //	u,v
		-18861,-29753,-14874, //	x,y,z
		-15563,-5220, //	u,v
		-18482,-29287,-15304, //	x,y,z
		63,-7527, //	u,v
		-18090,-29287,-15725, //	x,y,z
		-82,-9857, //	u,v
		-18090,-29753,-15725, //	x,y,z
		-15860,-9847, //	u,v
		-18482,-29753,-15304, //	x,y,z
		-15715,-7516, //	u,v
		-18090,-29287,-15725, //	x,y,z
		-82,-9857, //	u,v
		-17698,-29287,-16121, //	x,y,z
		-217,-12140, //	u,v
		-17698,-29753,-16121, //	x,y,z
		-15995,-12130, //	u,v
		-18090,-29753,-15725, //	x,y,z
		-15860,-9847, //	u,v
		-17698,-29287,-16121, //	x,y,z
		-217,-12140, //	u,v
		-17351,-29287,-16479, //	x,y,z
		-335,-14293, //	u,v
		-17320,-29754,-16479, //	x,y,z
		-16113,-14283, //	u,v
		-17320,-29754,-16479, //	x,y,z
		-16113,-14283, //	u,v
		-17698,-29753,-16121, //	x,y,z
		-15995,-12130, //	u,v
		-17698,-29287,-16121, //	x,y,z
		-217,-12140, //	u,v
		-17351,-29287,-16479, //	x,y,z
		-15801,-6895, //	u,v
		-17593,-29287,-16909, //	x,y,z
		-15801,-5829, //	u,v
		-17593,-29754,-16909, //	x,y,z
		331,-5829, //	u,v
		-17593,-29754,-16909, //	x,y,z
		331,-5829, //	u,v
		-17320,-29754,-16479, //	x,y,z
		331,-6971, //	u,v
		-17351,-29287,-16479, //	x,y,z
		-15801,-6895, //	u,v
};
const int index_count_xboxlogolip_0 = 336;
char indices_xboxlogolip_0C[] = 
{
	2,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	1,-3,4,
	0,1,-2,
	5,-1,-1,
	0,3,-1,
	1,-3,4,
	0,1,-2,
	5,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	-11,-1,14,
	0,1,-14,
	17,-1,-1,
	0,3,-1,
	1,-3,4,
	0,1,-2,
	2,-1,2,
	0,1,-2,
	5,-1,-1,
	0,3,-1,
	1,-3,4,
	0,1,-2,
	5,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	3,-1,-7,
	0,1,7,
	-2,-3,6,
	0,1,-4,
	6,-1,-4,
	0,1,4,
	-2,-1,4,
	0,1,-4,
	7,-1,-1,
	-4,1,6,
	3,-1,-1,
	5,-1,-1,
	5,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	0,3,-1,
	4,-1,-1,
	5,-1,-1,
	5,-1,-1,
	5,-1,-1,
};

///////////////////////////////////////////////////////////////////////////////
const int vertex_count_xboxlogosurfacetop_0 = 34;
short verts_xboxlogosurfacetop_0C[] = 
{
		-13399,-29753,-13967, //	x,y,z
		-12037,-16047, //	u,v
		-16411,-29754,-7827, //	x,y,z
		-7734,-31845, //	u,v
		-13036,-29753,-13686, //	x,y,z
		-12555,-16770, //	u,v
		-13860,-29753,-14279, //	x,y,z
		-11378,-15245, //	u,v
		-14385,-29753,-14600, //	x,y,z
		-10629,-14418, //	u,v
		-14937,-29753,-14910, //	x,y,z
		-9840,-13490, //	u,v
		-15482,-29753,-15187, //	x,y,z
		-9061,-12344, //	u,v
		-15539,-29753,-14734, //	x,y,z
		-8980,-13943, //	u,v
		-15985,-29753,-15409, //	x,y,z
		-8343,-11144, //	u,v
		-16005,-29753,-15058, //	x,y,z
		-8315,-12675, //	u,v
		-16411,-29754,-15057, //	x,y,z
		-7735,-12677, //	u,v
		-16028,-29754,-14642, //	x,y,z
		-8281,-14179, //	u,v
		-16836,-29753,-15409, //	x,y,z
		-7128,-11144, //	u,v
		-16411,-29754,-15557, //	x,y,z
		-7735,-10269, //	u,v
		-17337,-29753,-15187, //	x,y,z
		-6412,-12344, //	u,v
		-17289,-29753,-14757, //	x,y,z
		-6480,-13882, //	u,v
		-16794,-29753,-14661, //	x,y,z
		-7187,-14129, //	u,v
		-17881,-29753,-14910, //	x,y,z
		-5635,-13490, //	u,v
		-18431,-29753,-14600, //	x,y,z
		-4848,-14418, //	u,v
		-18956,-29753,-14279, //	x,y,z
		-4100,-15245, //	u,v
		-19418,-29753,-13967, //	x,y,z
		-3439,-16047, //	u,v
		-19785,-29753,-13686, //	x,y,z
		-2914,-16770, //	u,v
		-27768,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-16411,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-19785,-29753,-13686, //	x,y,z
		-16374,904, //	u,v
		-27768,-29287,-7827, //	x,y,z
		-16374,904, //	u,v
		-5054,-29287,-7827, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-16411,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-13036,-29753,-13686, //	x,y,z
		-16374,904, //	u,v
		-16411,-29754,-14622, //	x,y,z
		-7735,-14232, //	u,v
		-16822,-29753,-15089, //	x,y,z
		-7147,-12595, //	u,v
};
const int index_count_xboxlogosurfacetop_0 = 105;
char indices_xboxlogosurfacetop_0C[] = 
{
	2,-1,-1,
	0,1,2,
	0,-2,3,
	0,-3,4,
	0,2,-1,
	0,3,-1,
	3,-1,-1,
	4,-3,2,
	4,-1,-1,
	0,1,2,
	0,-16,17,
	0,-17,18,
	0,-18,19,
	0,-19,20,
	3,-1,-1,
	5,-1,-1,
	0,4,-1,
	-3,3,-1,
	4,-1,-7,
	-16,-6,10,
	-6,-4,6,
	0,2,-3,
	2,1,4,
	19,-31,15,
	-5,-10,31,
	0,1,-23,
	2,21,-19,
	1,-14,16,
	-1,-15,14,
	-6,1,3,
	-6,4,-2,
	1,23,-21,
	-1,21,-22,
	23,-17,-2,
	18,-16,17,
};

///////////////////////////////////////////////////////////////////////////////
const int vertex_count_xboxlogosurface_0 = 77;
short verts_xboxlogosurface_0C[] = 
{
		-13296,-29754,-19744, //	x,y,z
		-15182,-3867, //	u,v
		-5054,-29754,-16500, //	x,y,z
		-31514,-8048, //	u,v
		-12836,-29754,-20290, //	x,y,z
		-16093,-3163, //	u,v
		-12836,-29754,-20290, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-16411,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-13340,-29754,-19982, //	x,y,z
		-16374,904, //	u,v
		-13898,-29754,-19581, //	x,y,z
		-16374,904, //	u,v
		-14485,-29754,-19087, //	x,y,z
		-16374,904, //	u,v
		-15074,-29754,-18582, //	x,y,z
		-16374,904, //	u,v
		-15624,-29754,-18082, //	x,y,z
		-16374,904, //	u,v
		-16083,-29754,-17657, //	x,y,z
		-16374,904, //	u,v
		-13729,-29754,-19161, //	x,y,z
		-14322,-4618, //	u,v
		-14143,-29754,-18564, //	x,y,z
		-13503,-5388, //	u,v
		-14537,-29754,-17974, //	x,y,z
		-12625,-6148, //	u,v
		-16411,-29754,-17356, //	x,y,z
		-16374,904, //	u,v
		-16738,-29754,-17657, //	x,y,z
		-16374,904, //	u,v
		-17198,-29754,-18082, //	x,y,z
		-16374,904, //	u,v
		-17747,-29754,-18582, //	x,y,z
		-16374,904, //	u,v
		-18336,-29754,-19087, //	x,y,z
		-16374,904, //	u,v
		-18924,-29754,-19581, //	x,y,z
		-16374,904, //	u,v
		-19482,-29754,-19982, //	x,y,z
		-16374,904, //	u,v
		-19986,-29754,-20290, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-16480, //	x,y,z
		-16374,904, //	u,v
		-19526,-29754,-19744, //	x,y,z
		-16374,904, //	u,v
		-19092,-29754,-19161, //	x,y,z
		-16374,904, //	u,v
		-18678,-29754,-18564, //	x,y,z
		-16374,904, //	u,v
		-14903,-29754,-17415, //	x,y,z
		-11458,-6869, //	u,v
		-14375,-29754,-17366, //	x,y,z
		-12945,-6932, //	u,v
		-18285,-29754,-17974, //	x,y,z
		-16374,904, //	u,v
		-15229,-29754,-16909, //	x,y,z
		-10298,-7521, //	u,v
		-14703,-29754,-16888, //	x,y,z
		-11856,-7548, //	u,v
		-17919,-29754,-17415, //	x,y,z
		-16374,904, //	u,v
		-15501,-29754,-16479, //	x,y,z
		-9758,-8075, //	u,v
		-14953,-29754,-16480, //	x,y,z
		-10845,-8074, //	u,v
		-17593,-29754,-16909, //	x,y,z
		-16374,904, //	u,v
		-15124,-29754,-16122, //	x,y,z
		-10506,-8536, //	u,v
		-14645,-29754,-16138, //	x,y,z
		-11969,-8515, //	u,v
		-14606,-29754,-16481, //	x,y,z
		-12047,-8073, //	u,v
		-14734,-29753,-15727, //	x,y,z
		-11793,-9044, //	u,v
		-14290,-29753,-15749, //	x,y,z
		-13113,-9017, //	u,v
		-14344,-29753,-15308, //	x,y,z
		-13007,-9584, //	u,v
		-13967,-29753,-14880, //	x,y,z
		-13852,-10137, //	u,v
		-13614,-29753,-14456, //	x,y,z
		-14550,-10682, //	u,v
		-13300,-29753,-14054, //	x,y,z
		-15173,-11201, //	u,v
		-13036,-29753,-13686, //	x,y,z
		-15696,-11675, //	u,v
		-5054,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-16500, //	x,y,z
		-16374,904, //	u,v
		-13036,-29753,-13686, //	x,y,z
		-16374,904, //	u,v
		-19526,-29753,-14049, //	x,y,z
		-16374,904, //	u,v
		-19785,-29753,-13686, //	x,y,z
		-16374,904, //	u,v
		-19213,-29753,-14450, //	x,y,z
		-16374,904, //	u,v
		-18861,-29753,-14874, //	x,y,z
		-16374,904, //	u,v
		-18482,-29753,-15304, //	x,y,z
		-16374,904, //	u,v
		-18090,-29753,-15725, //	x,y,z
		-16374,904, //	u,v
		-17698,-29753,-16121, //	x,y,z
		-16374,904, //	u,v
		-17320,-29754,-16479, //	x,y,z
		-16374,904, //	u,v
		-5054,-29287,-7827, //	x,y,z
		-16374,904, //	u,v
		-5054,-29287,-30877, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-16500, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-5054,-29287,-30877, //	x,y,z
		-16374,904, //	u,v
		-27768,-29287,-30877, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-16411,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-5054,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-27768,-29287,-30877, //	x,y,z
		-16374,904, //	u,v
		-27768,-29287,-7827, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-16480, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-30877, //	x,y,z
		-16374,904, //	u,v
		-27768,-29754,-7827, //	x,y,z
		-16374,904, //	u,v
		-14268,-29754,-16150, //	x,y,z
		-13156,-8499, //	u,v
		-14282,-29754,-16481, //	x,y,z
		-13130,-8072, //	u,v
		-14316,-29754,-16872, //	x,y,z
		-13061,-7568, //	u,v
};
const int index_count_xboxlogosurface_0 = 225;
char indices_xboxlogosurface_0C[] = 
{
	2,-1,-1,
	5,-1,-1,
	2,-2,3,
	-1,1,1,
	-2,2,1,
	-3,3,1,
	-4,4,1,
	-5,5,1,
	-11,1,11,
	0,-11,12,
	0,-12,13,
	-9,6,4,
	-10,10,1,
	-11,11,1,
	-12,12,1,
	-13,13,1,
	-14,14,1,
	-15,15,1,
	-16,16,1,
	2,-1,-1,
	2,-2,3,
	-1,1,1,
	-2,2,1,
	-13,15,-1,
	-4,3,3,
	-2,4,-1,
	-7,6,3,
	-2,4,-1,
	-10,9,3,
	3,-1,-1,
	1,3,-1,
	0,1,1,
	0,-41,42,
	0,-42,43,
	0,-43,44,
	0,-44,45,
	3,-1,-1,
	4,-27,26,
	0,-26,28,
	0,-28,29,
	0,-29,30,
	0,-30,31,
	0,-31,32,
	0,-32,33,
	0,-33,12,
	24,-1,-1,
	0,4,-1,
	4,-1,-1,
	0,4,-1,
	4,-1,-1,
	0,4,-1,
	-13,3,-1,
	-57,1,44,
	20,3,-1,
	3,-49,27,
	12,3,-1,
	-42,-18,17,
	19,-40,41,
	-5,1,2,
	34,-73,40,
	-7,1,2,
	38,-74,73,
	-43,1,3,
	41,-75,74,
	-47,1,47,
	-47,-28,75,
	-62,-13,28,
	10,36,-1,
	2,-1,-36,
	37,-37,-7,
	3,4,-2,
	1,36,-33,
	-2,35,-36,
	-6,7,-4,
	-7,48,-44,
};

///////////////////////////////////////////////////////////////////////////////
const int vertex_count_tm_slash_0 = 4;
short verts_tm_slash_0C[] = 
{
		-12770,-29763,-13794, //	x,y,z
		-16034,563, //	u,v
		-12410,-29763,-13794, //	x,y,z
		563,563, //	u,v
		-12410,-29763,-13435, //	x,y,z
		563,-16034, //	u,v
		-12770,-29763,-13435, //	x,y,z
		-16034,-16034, //	u,v
};
const int index_count_tm_slash_0 = 6;
char indices_tm_slash_0C[] = 
{
	0,1,1,
	1,-3,2,
};

///////////////////////////////////////////////////////////////////////////////
const int vertex_count_tm_wordmark_0 = 4;
short verts_tm_wordmark_0C[] = 
{
		-11684,-29763,-21238, //	x,y,z
		-16034,563, //	u,v
		-11379,-29763,-21238, //	x,y,z
		563,563, //	u,v
		-11379,-29763,-20934, //	x,y,z
		563,-16034, //	u,v
		-11684,-29763,-20934, //	x,y,z
		-16034,-16034, //	u,v
};
const int index_count_tm_wordmark_0 = 6;
char indices_tm_wordmark_0C[] = 
{
	0,1,1,
	1,-3,2,
};
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\Macros.h ===
#define	F_NOTE	1
#define	F_REST	0
#define	F_JUMPTO	2
#define	F_LOOP	3
#define	F_ENDLOOP	4
#define	F_PATCH	5
#define	F_PAN	6
#define	F_MUX	7
#define	F_DEMUX	8
#define	F_VOLUME	9
#define	F_XPOSE	10
#define	F_XSET	11
#define	F_SLUR	12
#define	F_RING	13
#define	F_CLOCKSET	14
#define	F_END	15

#define	F_FILTERINC	16
#define	F_FILTERSET	17



#define	note(pitch,dur)	F_NOTE,pitch,dur
#define	rest(dur)		F_REST,dur
#define	jumpto(label)	F_JUMPTO,label
#define	loop(n)			F_LOOP,n
#define	endloop			F_ENDLOOP
#define	patch(num)		F_PATCH,num
#define	pan(value)		F_PAN,value
#define	mux(label)		F_MUX,label
#define	demux			F_DEMUX
#define	volume(val)		F_VOLUME,val
#define	xpose(val)		F_XPOSE,val
#define	xset(val)		F_XSET,val
#define	slur(pitch,dur)	F_SLUR,pitch,dur
#define	ring(dur)		F_RING,dur
#define	clockset(val)	F_CLOCKSET,val
#define	sosend			F_END
#define	finc(f,res)		F_FILTERINC,f,res
#define	fset(f,res)		F_FILTERSET,f,res
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\logo_renderer.h ===
///////////////////////////////////////////////////////////////////////////////
// File: logo_renderer.h
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#ifndef __LOGO_RENDERER_H__
#define __LOGO_RENDERER_H__

class LogoRenderer
{
private:

	LPDIRECT3DVERTEXBUFFER8  pLipVB;
	WORD                    *pLipIndices;
	DWORD					 nLipVerts;
	DWORD					 nLipIndices;		
	LPDIRECT3DTEXTURE8       pLipTex;

	LPDIRECT3DVERTEXBUFFER8  pSurfaceVB;
	WORD					*pSurfaceIndices;
	DWORD					 nSurfaceVerts;
	DWORD					 nSurfaceIndices;
	LPDIRECT3DTEXTURE8       pSurfaceTex;
	

	LPDIRECT3DVERTEXBUFFER8  pSurfaceTopVB;
	WORD					*pSurfaceTopIndices;
	DWORD					 nSurfaceTopVerts;
	DWORD					 nSurfaceTopIndices;
	LPDIRECT3DTEXTURE8       pSurfaceTopTex;

	LPDIRECT3DVERTEXBUFFER8  pInteriorVB;
	WORD					*pInteriorIndices;
	DWORD					 nInteriorVerts;
	DWORD					 nInteriorIndices;

	bool					 bRenderText;

	LPDIRECT3DVERTEXBUFFER8  pText_VB;
	WORD					*pText_Indices;
	DWORD					 nText_Verts;
	DWORD					 nText_Indices;
	D3DMATRIX				 matText_Anim;

	LPDIRECT3DVERTEXBUFFER8  pSlashTM_VB;
	WORD					*pSlashTM_Indices;
	DWORD					 nSlashTM_Verts;
	DWORD					 nSlashTM_Indices;

	LPDIRECT3DVERTEXBUFFER8  pTextTM_VB;
	WORD					*pTextTM_Indices;
	DWORD					 nTextTM_Verts;
	DWORD					 nTextTM_Indices;

	LPDIRECT3DTEXTURE8       pTMTex;
	float					 fTMAlpha;

	DWORD					 dwInteriorPShader;
	DWORD					 dwInteriorVShader;

	void createSlash();
	void createText();
	void createTMs();


	LPDIRECT3DTEXTURE8		pSlashTexture;
	bool					bHasWordmark;
	void createSlashSurface();	// don't call until camera is in final position


	// Decompressed slash data.
	WORD		* indices_xboxlogolip_0;
	float		* verts_xboxlogolip_0;
	WORD		* indices_xboxlogosurface_0;
	float		* verts_xboxlogosurface_0;
	WORD		* indices_xboxlogosurfacetop_0;
	float	    * verts_xboxlogosurfacetop_0;
	WORD        * indices_xboxlogointerior_0;
	float		* verts_xboxlogointerior_0;
	WORD		* indices_tm_wordmark_0;
	float		* verts_tm_wordmark_0;
	WORD		* indices_tm_slash_0;
	float		* verts_tm_slash_0;

	// Decompressed wordmark data.
	WORD		* indices_text_0;
	float		* verts_text_0;
	
	void decompressData();

	float * decompressPosData(short *pdata,int ncount,float f_oo_pos_scale,float f_pos_delta );
	float * decompressPosTexData(short *pdata,int ncount,float f_oo_pos_scale,float f_pos_delta,
														 float f_oo_tex_scale,float f_tex_delta );
	WORD  * decompressIndexData(char *pdata,int ncount);

public:

	void create();
	void destroy();

	void advanceTime(float fElapsedTime, float fDt);
	void render(const D3DMATRIX &mat_otw, bool b_force_3d_render = false);
};

#endif // __LOGO_RENDERER_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\mslogo.h ===
#ifndef __MSLOGO_H__
#define __MSLOGO_H__

void WaitOnMicrosoftLogo();

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\logo_renderer.cpp ===
//
//	logo_renderer.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#include "precomp.h"
#include "xbs_app.h"
#include "logo_renderer.h"
#include "logo_geometry.h"
#include "text_geometry.h"
#include "tm_pixels.h"
#include "renderer.h"
#include "tex_gen.h"
#include "xbs_app.h"


///////////////////////////////////////////////////////////////////////////////
float * LogoRenderer::decompressPosData(short *pdata,int ncount,float f_oo_scale,float f_delta)
{
	float * p_data = (float *)MemAlloc(ncount * sizeof(float) * 3);
	for(int i = 0; i < ncount * 3;i++)
	{
		p_data[i] = ( (float)pdata[i] ) * f_oo_scale + f_delta;
	}
	return p_data;
}
///////////////////////////////////////////////////////////////////////////////
float * LogoRenderer::decompressPosTexData(short *pdata,int ncount,
										   float f_oo_pos_scale,float f_pos_delta,
										   float f_oo_tex_scale,float f_tex_delta )
{
	float * p_data = (float *)MemAlloc(ncount * sizeof(float) * 5);
	for(int i = 0; i < ncount*5;i+=5)
	{
		p_data[i  ] = ( (float)pdata[i  ] ) * f_oo_pos_scale + f_pos_delta;
		p_data[i+1] = ( (float)pdata[i+1] ) * f_oo_pos_scale + f_pos_delta;
		p_data[i+2] = ( (float)pdata[i+2] ) * f_oo_pos_scale + f_pos_delta;
		p_data[i+3] = ( (float)pdata[i+3] ) * f_oo_tex_scale + f_tex_delta;
		p_data[i+4] = ( (float)pdata[i+4] ) * f_oo_tex_scale + f_tex_delta;
	}
	return p_data;	
}															
///////////////////////////////////////////////////////////////////////////////
WORD * LogoRenderer::decompressIndexData(char *pdata,int ncount)
{
	WORD * p_data = (WORD *)MemAlloc(ncount * sizeof(WORD));
	
	p_data[0] = (WORD)pdata[0];

	char * pbytes = pdata;
	for(int i = 1; i < ncount; i++)
	{
		if(pbytes[i] == 126)
		{
			char hi = pbytes[i+1];
			char lo = pbytes[i+2];

			p_data[i] = ((((short)hi)&0xff)<<8) | (((short)lo)&0xff);
			p_data[i] += p_data[i-1];
			pbytes += 2;
		}
		else
		{
			p_data[i] = p_data[i-1] + pbytes[i];
		}
	}
	return p_data;
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::create()
{
	decompressData();
	createSlash();
	createText();
	createTMs();

	pSlashTexture = NULL;

#ifndef BINARY_RESOURCE
	dwInteriorPShader = gApp.loadPixelShader ("d:\\shaders\\slash_interior.xpu");
#else // BINARY_RESOURCE
	dwInteriorPShader = gApp.loadPixelShader ( g_slash_interior_xpu );
#endif // BINARY_RESOURCE
	
	DWORD dwDecl[] =
    {
        D3DVSD_STREAM( 0 ),
		D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),
		D3DVSD_REG( 1, D3DVSDT_FLOAT2 ),     
		D3DVSD_END()
    };

#ifndef BINARY_RESOURCE
	dwInteriorVShader = gApp.loadVertexShader("d:\\shaders\\slash_interior.xvu",dwDecl);
#else // BINARY_RESOURCE
	dwInteriorVShader = gApp.loadVertexShader ( g_slash_interior_xvu,dwDecl );
#endif // BINARY_RESOURCE
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::decompressData()
{
	indices_xboxlogolip_0 = decompressIndexData(indices_xboxlogolip_0C,index_count_xboxlogolip_0);
	verts_xboxlogolip_0 = decompressPosTexData(verts_xboxlogolip_0C,
											   vertex_count_xboxlogolip_0,
											   xbl_OO_POS_SCALE,xbl_POS_DELTA,
											   xbl_OO_TEX_SCALE,xbl_TEX_DELTA );

	indices_xboxlogosurface_0 = decompressIndexData(indices_xboxlogosurface_0C,index_count_xboxlogosurface_0);
	verts_xboxlogosurface_0 = decompressPosTexData(verts_xboxlogosurface_0C,
												   vertex_count_xboxlogosurface_0,
												   xbl_OO_POS_SCALE,xbl_POS_DELTA,
												   xbl_OO_TEX_SCALE,xbl_TEX_DELTA );

	indices_xboxlogosurfacetop_0 = decompressIndexData(indices_xboxlogosurfacetop_0C,index_count_xboxlogosurfacetop_0);
	verts_xboxlogosurfacetop_0 = decompressPosTexData(verts_xboxlogosurfacetop_0C,
												      vertex_count_xboxlogosurfacetop_0,
												      xbl_OO_POS_SCALE,xbl_POS_DELTA,
												      xbl_OO_TEX_SCALE,xbl_TEX_DELTA );

	indices_xboxlogointerior_0 = decompressIndexData(indices_xboxlogointerior_0C,index_count_xboxlogointerior_0);
	verts_xboxlogointerior_0 = decompressPosTexData(verts_xboxlogointerior_0C,
												    vertex_count_xboxlogointerior_0,
												    xbl_OO_POS_SCALE,xbl_POS_DELTA,
												    xbl_OO_TEX_SCALE,xbl_TEX_DELTA );

	indices_tm_slash_0 = decompressIndexData(indices_tm_slash_0C,index_count_tm_slash_0);
	verts_tm_slash_0 = decompressPosTexData(verts_tm_slash_0C,
										    vertex_count_tm_slash_0,
											xbl_OO_POS_SCALE,xbl_POS_DELTA,
											xbl_OO_TEX_SCALE,xbl_TEX_DELTA );

	indices_tm_wordmark_0 = decompressIndexData(indices_tm_wordmark_0C,index_count_tm_wordmark_0);
	verts_tm_wordmark_0 = decompressPosTexData(verts_tm_wordmark_0C,
											   vertex_count_tm_wordmark_0,
											   xbl_OO_POS_SCALE,xbl_POS_DELTA,
											   xbl_OO_TEX_SCALE,xbl_TEX_DELTA );
	
	indices_text_0 = decompressIndexData(indices_text_0C,index_count_text_0);
	verts_text_0 = decompressPosData(verts_text_0C,vertex_count_text_0,xbt_OO_POS_SCALE,xbt_POS_DELTA );
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::createSlash()
{
	xbl_vertex *pv = NULL;

	nLipIndices = index_count_xboxlogolip_0;
	nLipVerts = vertex_count_xboxlogolip_0;
	pLipIndices = indices_xboxlogolip_0;
	gpd3dDev->CreateVertexBuffer(sizeof(xbl_vertex) * nLipVerts,NULL,FVF_xbl,NULL,&pLipVB);
	pLipVB->Lock(0,0,(BYTE **)&pv,0);
	memcpy(pv,verts_xboxlogolip_0,sizeof(xbl_vertex) * nLipVerts);
	pLipVB->Unlock();
	pLipTex = CreateGradientTexture(16,128,0xff000100,0xff4b9b4b);

	nSurfaceIndices = index_count_xboxlogosurface_0;
	nSurfaceVerts = vertex_count_xboxlogosurface_0;
	pSurfaceIndices = indices_xboxlogosurface_0;
	gpd3dDev->CreateVertexBuffer(sizeof(xbl_vertex) * nSurfaceVerts,NULL,FVF_xbl,NULL,&pSurfaceVB);
	pSurfaceVB->Lock(0,0,(BYTE **)&pv,0);
	memcpy(pv,verts_xboxlogosurface_0,sizeof(xbl_vertex) * nSurfaceVerts);
	pSurfaceVB->Unlock();
	pSurfaceTex = CreateHighlightTexture(256,6,false,0.5f,0.5f);

	nSurfaceTopIndices = index_count_xboxlogosurfacetop_0;
	nSurfaceTopVerts = vertex_count_xboxlogosurfacetop_0;
	pSurfaceTopIndices = indices_xboxlogosurfacetop_0;
	gpd3dDev->CreateVertexBuffer(sizeof(xbl_vertex) * nSurfaceVerts,NULL,FVF_xbl,NULL,&pSurfaceTopVB);
	pSurfaceTopVB->Lock(0,0,(BYTE **)&pv,0);
	memcpy(pv,verts_xboxlogosurfacetop_0,sizeof(xbl_vertex) * nSurfaceTopVerts);

	// HACK to enforce border color.
	for(int i=0; i < (int)nSurfaceTopVerts;i++)
	{
		if(fast_fabs(pv[i].v0-1.f) <= 0.01f) 
			pv[i].v0 = -1.f;
	}

	pSurfaceTopVB->Unlock();
	pSurfaceTopTex = CreateGradientTexture(16,128,0xff000000,0xffffffff);

	nInteriorIndices = index_count_xboxlogointerior_0;
	nInteriorVerts = vertex_count_xboxlogointerior_0;
	pInteriorIndices = indices_xboxlogointerior_0;
	gpd3dDev->CreateVertexBuffer(sizeof(xbl_vertex) * nInteriorVerts,NULL,FVF_xbl,NULL,&pInteriorVB);
	pInteriorVB->Lock(0,0,(BYTE **)&pv,0);
	memcpy(pv,verts_xboxlogointerior_0,sizeof(xbl_vertex) * nInteriorVerts);
	pInteriorVB->Unlock();
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::createText()
{ 	
	xbt_vertex *pv;

	nText_Verts = vertex_count_text_0;
	nText_Indices = index_count_text_0;
	pText_Indices = indices_text_0;
	gpd3dDev->CreateVertexBuffer(sizeof(xbt_vertex) * nText_Verts,NULL,FVF_xbt,NULL,&pText_VB);
	pText_VB->Lock(0,0,(BYTE **)&pv,0);
	memcpy(pv,verts_text_0,sizeof(xbt_vertex) * nText_Verts);
	pText_VB->Unlock();
	SetIdentity(&matText_Anim);

	bRenderText = false;
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::createTMs()
{
	xbl_vertex *pv;

	nSlashTM_Verts = vertex_count_tm_slash_0;
	nSlashTM_Indices = index_count_tm_slash_0;
	pSlashTM_Indices = indices_tm_slash_0;
	gpd3dDev->CreateVertexBuffer(sizeof(xbl_vertex) * nSlashTM_Verts,NULL,FVF_xbl,NULL,&pSlashTM_VB);
	pSlashTM_VB->Lock(0,0,(BYTE **)&pv,0);
	memcpy(pv,verts_tm_slash_0,sizeof(xbl_vertex) * nSlashTM_Verts);
	pSlashTM_VB->Unlock();

	nTextTM_Verts = vertex_count_tm_wordmark_0;
	nTextTM_Indices = index_count_tm_wordmark_0;
	pTextTM_Indices = indices_tm_wordmark_0;
	gpd3dDev->CreateVertexBuffer(sizeof(xbl_vertex) * nTextTM_Verts,NULL,FVF_xbl,NULL,&pTextTM_VB);
	pTextTM_VB->Lock(0,0,(BYTE **)&pv,0);
	memcpy(pv,verts_tm_wordmark_0,sizeof(xbl_vertex) * nTextTM_Verts);
	pTextTM_VB->Unlock();

	gpd3dDev->CreateTexture( 16,16,1,0,D3DFMT_A8R8G8B8,0,&pTMTex);
	
	D3DLOCKED_RECT rc;
	pTMTex->LockRect(0,&rc,NULL,0);
	XGSwizzleRect( tm_pixels,
				   0,
				   NULL,
				   rc.pBits,
				   16,
				   16,
				   NULL,
				   sizeof(DWORD) );

	pTMTex->UnlockRect(0);

	fTMAlpha = 0.f;
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::createSlashSurface()
{
	bool b_want_wordmark = (gApp.getElapsedTime() >= TEXT_ANIM_START_TIME + TEXT_ANIM_LEN);
	if (pSlashTexture && (b_want_wordmark == bHasWordmark)) return;

	LPDIRECT3DSURFACE8		pSlashSurface;
	LPDIRECT3DSURFACE8		pSlashDepthBuf;

	D3DFORMAT fmt = D3DFMT_A8R8G8B8;
	DWORD mst = D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR;
	int x_dim = 1024;	
	int y_dim = 1024;
	gpd3dDev->CreateRenderTarget(x_dim, y_dim, fmt, mst, TRUE, &pSlashSurface);
	gpd3dDev->CreateDepthStencilSurface(x_dim,y_dim,D3DFMT_LIN_D24S8, mst, &pSlashDepthBuf);
	if (!pSlashTexture) gpd3dDev->CreateTexture(x_dim, y_dim, 1, 0, fmt, 0, &pSlashTexture);


	LPDIRECT3DSURFACE8 pOldRT,pOldZ;
	gpd3dDev->GetRenderTarget(&pOldRT);
	gpd3dDev->GetDepthStencilSurface(&pOldZ);

	gpd3dDev->SetRenderTarget(pSlashSurface, pSlashDepthBuf);

	if( gpd3dDev->BeginScene() == D3D_OK )
	{
		gpd3dDev->Clear(0,NULL,
						D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL,
						0xff000000,
						1.f,
						0 );

		bool b_old_render_text = bRenderText;
		bRenderText = b_want_wordmark;

		render(gApp.camController.getSlashTransform(), true);

		bRenderText = b_old_render_text;

		gpd3dDev->EndScene();


		LPDIRECT3DSURFACE8 p_tex_surf;
		pSlashTexture->GetSurfaceLevel(0, &p_tex_surf);

		gpd3dDev->CopyRects(pSlashSurface, NULL, 0, p_tex_surf, NULL);
		p_tex_surf->Release();

		bHasWordmark = b_want_wordmark;
	}

	pSlashSurface->Release();
	pSlashDepthBuf->Release();

	gpd3dDev->SetRenderTarget(pOldRT,pOldZ);
	pOldRT->Release();
	pOldZ->Release();
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::destroy()
{
	pLipVB->Release();
	pLipTex->Release();
	pSurfaceVB->Release();
	pSurfaceTex->Release();
	pSurfaceTopVB->Release();
	pSurfaceTopTex->Release();
	pInteriorVB->Release();
	pText_VB->Release();
	pSlashTM_VB->Release();
	pTextTM_VB->Release();
	pTMTex->Release();
	pSlashTexture->Release();

	MemFree(indices_xboxlogolip_0);
	MemFree(verts_xboxlogolip_0);
	MemFree(indices_xboxlogosurface_0);
	MemFree(verts_xboxlogosurface_0);
	MemFree(indices_xboxlogosurfacetop_0);
	MemFree(verts_xboxlogosurfacetop_0);
	MemFree(indices_xboxlogointerior_0);
	MemFree(verts_xboxlogointerior_0);
	MemFree(indices_tm_wordmark_0);
	MemFree(verts_tm_wordmark_0);
	MemFree(indices_tm_slash_0);
	MemFree(verts_tm_slash_0);
	MemFree(indices_text_0);
	MemFree(verts_text_0);

	gpd3dDev->DeleteVertexShader(dwInteriorVShader);
	gpd3dDev->DeletePixelShader (dwInteriorPShader);
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::advanceTime(float fElapsedTime, float fDt)
{
	if(fElapsedTime >= TEXT_ANIM_START_TIME)
	{
		bRenderText = true;

		int n_samples = sizeof(pos_anim_text)/sizeof( D3DVECTOR );

		float f_norm_pos = (fElapsedTime - TEXT_ANIM_START_TIME) / TEXT_ANIM_LEN;
		float f_pos = f_norm_pos * (n_samples-1);

		int pos_idx;

		 __asm
		{
			cvttss2si eax, f_pos
			mov pos_idx, eax
		}

		if(f_norm_pos <= 0.f)
		{
			matText_Anim._41 = pos_anim_text[0].x;
			matText_Anim._42 = pos_anim_text[0].y;
			matText_Anim._43 = pos_anim_text[0].z;
		}
		else if(f_norm_pos >= 1.f)
		{
			int last_pos = n_samples - 1;
			
			matText_Anim._41 = pos_anim_text[last_pos].x;
			matText_Anim._42 = pos_anim_text[last_pos].y;
			matText_Anim._43 = pos_anim_text[last_pos].z;
		}
		else
		{
			float f_frac = f_pos - ((float)pos_idx);

			D3DVECTOR &s = pos_anim_text[pos_idx];
			D3DVECTOR &e = pos_anim_text[pos_idx+1];

			matText_Anim._41 = s.x * (1.f-f_frac) + e.x * f_frac;
			matText_Anim._42 = s.y * (1.f-f_frac) + e.y * f_frac;
			matText_Anim._43 = s.z * (1.f-f_frac) + e.z * f_frac;
		}

		
		fTMAlpha = (fElapsedTime - (TEXT_ANIM_START_TIME)) / (TEXT_ANIM_LEN);
		fTMAlpha = max(0.f,min(1.f,fTMAlpha));
		fTMAlpha *= 255.f;
	}
	else
	{
		bRenderText = false;
		fTMAlpha = 0.f;
	}

	if (fElapsedTime >= FINISH_STOP_TIME)
	{
		createSlashSurface();
	}
}
///////////////////////////////////////////////////////////////////////////////
void LogoRenderer::render(const D3DMATRIX &mat_otw, bool b_force_3d_render)
{
	gpd3dDev->SetVertexShader(FVF_xbl);
	gpd3dDev->SetPixelShader (NULL);

	if (b_force_3d_render || (gApp.getElapsedTime() < FINISH_STOP_TIME))
	{
		Camera &cam = gApp.theCamera;

		gpd3dDev->SetTransform(D3DTS_WORLD,&mat_otw);
		gpd3dDev->SetTransform(D3DTS_VIEW,&cam.matWTC);
		gpd3dDev->SetTransform(D3DTS_PROJECTION,&cam.matProj);

		gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_SELECTARG1);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);
		gpd3dDev->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);

		gpd3dDev->SetTextureStageState(0,D3DTSS_ADDRESSU,    D3DTADDRESS_BORDER );
  		gpd3dDev->SetTextureStageState(0,D3DTSS_ADDRESSV,    D3DTADDRESS_BORDER );
  		gpd3dDev->SetTextureStageState(0,D3DTSS_BORDERCOLOR, 0xff000000 );
  
  		gpd3dDev->SetRenderState(D3DRS_ALPHABLENDENABLE,FALSE);
  		gpd3dDev->SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);
  		gpd3dDev->SetRenderState(D3DRS_CULLMODE,D3DCULL_CW);


		gpd3dDev->SetStreamSource(0,pLipVB,sizeof(xbl_vertex));
		gpd3dDev->SetTexture(0,pLipTex);
		gpd3dDev->DrawIndexedVertices(D3DPT_TRIANGLELIST,nLipIndices,pLipIndices);

		gpd3dDev->SetStreamSource(0,pSurfaceVB,sizeof(xbl_vertex));
		gpd3dDev->SetTexture(0,pSurfaceTex);
		gpd3dDev->DrawIndexedVertices(D3DPT_TRIANGLELIST,nSurfaceIndices,pSurfaceIndices);

		gpd3dDev->SetStreamSource(0,pSurfaceTopVB,sizeof(xbl_vertex));
		gpd3dDev->SetTexture(0,pSurfaceTopTex);
		gpd3dDev->DrawIndexedVertices(D3DPT_TRIANGLELIST,nSurfaceTopIndices,pSurfaceTopIndices);

		gpd3dDev->SetStreamSource(0,pInteriorVB,sizeof(xbl_vertex));

		float fmag = -1.0f + 2.0f * (gApp.getElapsedTime() - SLASH_GRADIENT_TRANSITION_START) * SLASH_GRADIENT_TRANSITION_MUL;
		float w1 = max(0.f, min(1.f,-fmag));
		float w3 = max(0.f, min(1.f,+fmag));
		float w2 = max(0.f, min(1.f,1.f - w1 - w3));

		gpd3dDev->SetVertexShader(dwInteriorVShader);
		gpd3dDev->SetPixelShader (dwInteriorPShader);

		D3DMATRIX mat_final,tmp;
		MulMats(mat_otw,cam.getWTP(),&tmp);
		SetTranspose(tmp,&mat_final);
		gpd3dDev->SetVertexShaderConstant(0,(void *)&mat_final,4);

		D3DVECTOR4 vals[5];
		if(fmag < 0.f)
		{
			Set(&vals[0],0.81568f,1.f,0.5921f,1.f);
			Set(&vals[1],0.81568f,1.f,0.5921f,1.f);
			Set(&vals[2],0.81568f,1.f,0.5294f,1.f);
			Set(&vals[3],0.81568f,1.f,0.5294f,1.f);
			Set(&vals[4],w1,w1,w1,1.f);
		}
		else
		{
			Set(&vals[0],0.81568f,1.f,0.5294f,1.f);
			Set(&vals[1],0.81568f,1.f,0.5294f,1.f);
			Set(&vals[2],0.796f,0.8745f,0.0039f,1.f);
			Set(&vals[3],0.1294f,0.4168f,0.0901f,1.f);
			Set(&vals[4],w2,w2,w2,1.f);
		}

		gpd3dDev->SetVertexShaderConstant(4,(void *)&vals,5);
		gpd3dDev->DrawIndexedVertices(D3DPT_TRIANGLELIST,nInteriorIndices,pInteriorIndices);
	}

	else
	{				
		gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE,   TRUE);
   		gpd3dDev->SetRenderState( D3DRS_SRCBLEND,			D3DBLEND_ONE );
   		gpd3dDev->SetRenderState( D3DRS_DESTBLEND,			D3DBLEND_ZERO );
   		gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		FALSE );
   
   		D3DMATRIX iden;
   		SetIdentity(&iden);
   		gpd3dDev->SetTransform(D3DTS_WORLD, &iden);
   		gpd3dDev->SetTransform(D3DTS_VIEW, &iden);
   		gpd3dDev->SetTransform(D3DTS_PROJECTION, &iden);
   
  		gpd3dDev->SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFFFFFF);
   		gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_SELECTARG1);
   		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);
  		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_TEXTURE);
  		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);
  		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG1,D3DTA_TFACTOR);
  		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG2,D3DTA_TFACTOR);
  		gpd3dDev->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);
  
   		gpd3dDev->SetTextureStageState(0,D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_DISABLE);
   		
   
   		gpd3dDev->SetTexture(0,pSlashTexture);
   
   		gpd3dDev->SetVertexShader(D3DFVF_XYZ | D3DFVF_TEX2);
   
   		
   		gpd3dDev->SetStreamSource(0, gApp.greenFog.borrowScreenQuad(), sizeof(GreenFogVertexBuffer));
   		gpd3dDev->DrawPrimitive(D3DPT_TRIANGLEFAN, 0, 2);
   
  		gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		TRUE );
  
   		// Prepare for rendering text...
   		gpd3dDev->SetRenderState(D3DRS_ALPHABLENDENABLE,FALSE);
   		gpd3dDev->SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);
  		gpd3dDev->SetRenderState(D3DRS_CULLMODE,D3DCULL_CW);
 		gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,TRUE );
   
  		gpd3dDev->SetTextureStageState(0,D3DTSS_ADDRESSU,    D3DTADDRESS_BORDER );
  		gpd3dDev->SetTextureStageState(0,D3DTSS_ADDRESSV,    D3DTADDRESS_BORDER );
  		gpd3dDev->SetTextureStageState(0,D3DTSS_BORDERCOLOR, 0xff000000 );
     
   		gpd3dDev->SetTransform(D3DTS_WORLD,&mat_otw);
   		gpd3dDev->SetTransform(D3DTS_VIEW,&gApp.theCamera.matWTC);
   		gpd3dDev->SetTransform(D3DTS_PROJECTION,&gApp.theCamera.matProj);

	}

	if(bRenderText && !bHasWordmark)
	{
		gpd3dDev->SetVertexShader(FVF_xbl);
		gpd3dDev->SetPixelShader (NULL);

		gpd3dDev->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);

		DWORD dw_alpha;
		float f_alpha = fTMAlpha;

		__asm
		{
			cvttss2si eax, f_alpha
			shl eax,24
			mov dw_alpha,eax
		}

		gpd3dDev->SetRenderState(D3DRS_ALPHABLENDENABLE,TRUE);
		gpd3dDev->SetRenderState(D3DRS_SRCBLEND,D3DBLEND_SRCALPHA);
		gpd3dDev->SetRenderState(D3DRS_DESTBLEND,D3DBLEND_INVSRCALPHA);

		gpd3dDev->SetRenderState(D3DRS_TEXTUREFACTOR,dw_alpha);

		gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_SELECTARG1);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_TFACTOR);
		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_MODULATE);
		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG1,D3DTA_TEXTURE);
		gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG2,D3DTA_TFACTOR);
		gpd3dDev->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);
		gpd3dDev->SetTexture(0,pTMTex);

		gpd3dDev->SetStreamSource(0,pSlashTM_VB,sizeof(xbl_vertex));
		gpd3dDev->DrawIndexedVertices(D3DPT_TRIANGLELIST,nSlashTM_Indices,pSlashTM_Indices);

		gpd3dDev->SetStreamSource(0,pTextTM_VB,sizeof(xbl_vertex));
		gpd3dDev->DrawIndexedVertices(D3DPT_TRIANGLELIST,nTextTM_Indices,pTextTM_Indices);

		gpd3dDev->SetRenderState(D3DRS_ALPHABLENDENABLE,FALSE);

		gpd3dDev->SetRenderState(D3DRS_TEXTUREFACTOR,0xff62ca13);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TFACTOR);

		D3DMATRIX anim_otw;

		D3DMATRIX flip;
		SetXRotation(Pi/2.f,&flip);

		D3DMATRIX tmp;

		MulMats(flip,matText_Anim,&tmp);
		MulMats(tmp,mat_otw,&anim_otw);

		gpd3dDev->SetVertexShader(FVF_xbt);

		gpd3dDev->SetTransform(D3DTS_WORLD,&anim_otw);
		gpd3dDev->SetStreamSource(0,pText_VB,sizeof(xbt_vertex));
		gpd3dDev->DrawIndexedVertices(D3DPT_TRIANGLELIST,nText_Indices,pText_Indices);

		gpd3dDev->SetRenderState(D3DRS_ZENABLE, D3DZB_TRUE);
	}

	gpd3dDev->SetRenderState(D3DRS_CULLMODE,D3DCULL_CCW);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\mslogo.cpp ===
#ifdef STARTUPANIMATION

#include "ntos.h"

#include "precomp.h"
#include "mslogo.h"
#include "renderer.h"
#include "xbs_app.h"
#include "xbs_math.h"

#pragma pack(1)

typedef struct _IMAGE_RUN1 {
    UINT fOne : 1;
    UINT Size : 3;
    UINT Intensity : 4;
} IMAGE_RUN1;

typedef struct _IMAGE_RUN2 {
    UINT fOne : 1;
    UINT fTwo : 1;
    UINT Size : 10;
    UINT Intensity : 4;
} IMAGE_RUN2;

#pragma pack()

// MS Logo sync event
extern "C" {
INITIALIZED_KEVENT(g_EventLogo, NotificationEvent, FALSE);
INITIALIZED_KEVENT(g_EventLogoWaiting, NotificationEvent, FALSE);
}

IDirect3DVertexBuffer8 *g_pVBMicrosoftLogo;
IDirect3DTexture8* g_pTexMicrosoftLogo;
PBYTE g_ImageLogo;
UINT g_ImageLogoSize;

typedef struct _TheVerts {
    float x,y,z,w;
    float u, v;
} TheVerts;

const TheVerts Verts[] =
{
    {270.0f,  400.0f, 0.5f, 1.0f,   0.0f,   0.0f},
    {370.0f,  417.0f, 0.5f, 1.0f, 100.0f,  17.0f},
    {270.0f,  417.0f, 0.5f, 1.0f,   0.0f,  17.0f},
    {370.0f,  400.0f, 0.5f, 1.0f, 100.0f,   0.0f},
    {370.0f,  417.0f, 0.5f, 1.0f, 100.0f,  17.0f},
    {270.0f,  400.0f, 0.5f, 1.0f,   0.0f,   0.0f},
};

BOOL InitVB(IDirect3DDevice8 *pDev)
{
    IDirect3DVertexBuffer8 *pVB;
    void *pVerts;

    if (FAILED(IDirect3DDevice8_CreateVertexBuffer(pDev,
            sizeof(Verts),
            D3DUSAGE_WRITEONLY,
            D3DFVF_XYZRHW | D3DFVF_TEX1,
            D3DPOOL_MANAGED,
            &pVB)))
    {
        return FALSE;
    }

    g_pVBMicrosoftLogo = pVB;

    IDirect3DVertexBuffer8_Lock(pVB, 0, sizeof(Verts), (BYTE **)(&pVerts), 0);
    memcpy((void*)pVerts, (void*)Verts, sizeof(Verts));
    IDirect3DVertexBuffer8_Unlock(pVB);

    return TRUE;
}

const float F_15 = 15.0f;
const float F_P_5 = 0.5f;

COLORREF ColorFromIntensity(UINT intensity4bits)
{
    UINT Base = 0xCC;

    UINT cr = (UINT)((Base * intensity4bits) / F_15 + F_P_5);

    return D3DCOLOR_ARGB(0xFF, cr, cr, cr);
}

BOOL InitTexture(IDirect3DDevice8 *pDev)
{
    IDirect3DTexture8* pTex;
    D3DLOCKED_RECT lock;
    UINT x = 0, i, j;
    DWORD dwLine;
    DWORD dwAddr;
    IMAGE_RUN1 *pRun1;
    IMAGE_RUN2 *pRun2;
    UINT Size;
    UINT Intensity;

    if (FAILED(IDirect3DDevice8_CreateTexture(pDev,
            100,
            17,
            1,
            0,
            D3DFMT_LIN_X8R8G8B8,
            0,
            &pTex)))
    {
        return FALSE;
    }

    g_pTexMicrosoftLogo = pTex;

    IDirect3DTexture8_LockRect(pTex, 0, &lock, NULL, 0);
    dwLine = (DWORD)lock.pBits;
    dwAddr = dwLine;
    i = 0;

    while(i < g_ImageLogoSize)
    {
        Size = 0;
        Intensity = 0;

        pRun1 = (IMAGE_RUN1*)&g_ImageLogo[i];
        if (pRun1->fOne)
        {
            Size = pRun1->Size;
            Intensity = pRun1->Intensity;
            i += 1;
        }
        else
        {
            pRun2 = (IMAGE_RUN2*)&g_ImageLogo[i];
            if (pRun2->fTwo)
            {
                Size = pRun2->Size;
                Intensity = pRun2->Intensity;
                i += 2;
            }
        }

        for (j = 0; j < Size; j++)
        {
            if (Intensity == 0)
            {
                *(DWORD*)dwAddr = 0xFF000000;
            }
            else
            {
                *(DWORD*)dwAddr = ColorFromIntensity(Intensity);
            }
            if (x >= 99)
            {
                x = 0;
                dwLine += lock.Pitch;
                dwAddr = dwLine;
            }
            else
            {
                x++;
                dwAddr += sizeof(DWORD);
            }
        }
    }

    IDirect3DTexture8_UnlockRect(pTex, 0);

    return TRUE;
}

void UnInitMicrosoftLogo()
{
    if (g_ImageLogo != NULL)
    {
        MemFree(g_ImageLogo);
    }

    if (g_pVBMicrosoftLogo != NULL)
    {
        g_pVBMicrosoftLogo->Release();
    }

    if (g_pTexMicrosoftLogo != NULL)
    {
        g_pTexMicrosoftLogo->Release();
    }
}

void RenderMicrosoftLogo()
{
    if (g_ImageLogo == NULL)
    {
        return;
    }

    if (!InitVB(gpd3dDev) || !InitTexture(gpd3dDev))
    {
        UnInitMicrosoftLogo();
        return;
    }

    IDirect3DDevice8 *pDev = gpd3dDev;
    IDirect3DSurface8 *pSurface;
    pDev->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pSurface);
    pDev->SetRenderTarget(pSurface, NULL);

    const DWORD RenderStates[] =
    {
        D3DRS_FILLMODE,         D3DFILL_SOLID,
        D3DRS_BACKFILLMODE,     D3DFILL_SOLID,
        D3DRS_CULLMODE,         D3DCULL_NONE,
        D3DRS_DITHERENABLE,     TRUE,
        D3DRS_ALPHATESTENABLE,  FALSE,
        D3DRS_ALPHABLENDENABLE, FALSE,
        D3DRS_FOGENABLE,        FALSE,
        D3DRS_EDGEANTIALIAS,    FALSE,
        D3DRS_STENCILENABLE,    FALSE,
        D3DRS_LIGHTING,         FALSE,
        D3DRS_MULTISAMPLEMASK,  0xffffffff,
        D3DRS_LOGICOP,          D3DLOGICOP_NONE,
        D3DRS_COLORWRITEENABLE, D3DCOLORWRITEENABLE_ALL,
        D3DRS_YUVENABLE,        FALSE,
    };
    
    const DWORD TextureStates[] =
    {
        D3DTSS_COLOROP,         D3DTOP_SELECTARG1,
        D3DTSS_COLORARG1,       D3DTA_TEXTURE,
        D3DTSS_ALPHAOP,         D3DTOP_DISABLE,
        D3DTSS_TEXCOORDINDEX,   0,
        D3DTSS_ADDRESSU,        D3DTADDRESS_CLAMP,
        D3DTSS_ADDRESSV,        D3DTADDRESS_CLAMP,
        D3DTSS_COLORKEYOP,      D3DTCOLORKEYOP_DISABLE,
        D3DTSS_COLORSIGN,       0,
        D3DTSS_ALPHAKILL,       D3DTALPHAKILL_DISABLE,
        D3DTSS_MINFILTER,       D3DTEXF_LINEAR,
        D3DTSS_MAGFILTER,       D3DTEXF_LINEAR,
    };

    int i;

    for (i = 0; i < sizeof(RenderStates) / (sizeof(DWORD) * 2); i++)
    {
        pDev->SetRenderState((D3DRENDERSTATETYPE)RenderStates[2*i],
                RenderStates[2*i + 1]);
    }

    for (i = 0; i < sizeof(TextureStates) / (sizeof(DWORD) * 2); i++)
    {
        pDev->SetTextureStageState(0,
                (D3DTEXTURESTAGESTATETYPE)TextureStates[2*i],
                TextureStates[2*i + 1]);
    }

    IDirect3DDevice8_SetStreamSource(pDev, 0, g_pVBMicrosoftLogo, sizeof(Verts[0]));
    IDirect3DDevice8_SetVertexShader(pDev, D3DFVF_XYZRHW | D3DFVF_TEX1);
    IDirect3DDevice8_SetTexture(pDev, 0, (D3DBaseTexture*)g_pTexMicrosoftLogo);

    IDirect3DDevice8_DrawPrimitive(pDev,
            D3DPT_TRIANGLELIST,
            0,
            2);

    pSurface->Release();
    UnInitMicrosoftLogo();
    pDev->PersistDisplay();
}

extern "C"
VOID AniSetLogo(PVOID pv, ULONG Size)
{
    if (KeReadStateEvent(&g_EventLogo) == 0)
    {
        if (gpd3dDev != NULL && pv != NULL && Size <= PAGE_SIZE)
        {
            g_ImageLogo = (PBYTE)MemAlloc(Size);
            if (g_ImageLogo != NULL)
            {
                memcpy(g_ImageLogo, pv, Size);
                g_ImageLogoSize = Size;
            }
        }

        KeSetEvent(&g_EventLogo, EVENT_INCREMENT, FALSE);
    }
}

void WaitOnMicrosoftLogo()
{
    // Signal the initialization thread that we're waiting for the logo.  Note
    // that this returns with the dispatcher database lock held, which the
    // following wait call will release.  This avoids an unnecessary context
    // switch.
    KeSetEvent(&g_EventLogoWaiting, EVENT_INCREMENT, TRUE);

    KeWaitForSingleObject(&g_EventLogo, Executive, KernelMode, FALSE, NULL);
    RenderMicrosoftLogo();
}

#endif // STARTUPANIMATION
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\Pitches.h ===
#define	cc0 	0
#define	cs0		1
#define	dd0		2
#define	ds0		3
#define	ee0		4
#define	ff0		5
#define	fs0		6
#define	gg0		7
#define	gs0		8
#define	aa0		9
#define	as0		10
#define	bb0		11
#define	cc1		12

#define	cs1		13
#define	dd1		14
#define	ds1		15
#define	ee1		16
#define	ff1		17
#define	fs1		18
#define	gg1		19
#define	gs1		20
#define	aa1		21
#define	as1		22
#define	bb1		23
#define	cc2		24

#define	cs2		25
#define	dd2		26
#define	ds2		27
#define	ee2		28
#define	ff2		29
#define	fs2		30
#define	gg2		31
#define	gs2		32
#define	aa2		33
#define	as2		34
#define	bb2		35
#define	cc3		36

#define	cs3		37
#define	dd3		38
#define	ds3		39
#define	ee3		40
#define	ff3		41
#define	fs3		42
#define	gg3		43
#define	gs3		44
#define	aa3		45
#define	as3		46
#define	bb3		47
#define	cc4		48

#define	cs4		49
#define	dd4		50
#define	ds4		51
#define	ee4		52
#define	ff4		53
#define	fs4		54
#define	gg4		55
#define	gs4		56
#define	aa4		57
#define	as4		58
#define	bb4		59
#define	cc5		60

#define	cs5		61
#define	dd5		62
#define	ds5		63
#define	ee5		64
#define	ff5		65
#define	fs5		66
#define	gg5		67
#define	gs5		68
#define	aa5		69
#define	as5		70
#define	bb5		71
#define	cc6		72

#define	cs6		73
#define	dd6		74
#define	ds6		75
#define	ee6		76
#define	ff6		77
#define	fs6		78
#define	gg6		79
#define	gs6		80
#define	aa6		81
#define	as6		82
#define	bb6		83
#define	cc7		84

#define	cs7		85
#define	dd7		86
#define	ds7		87
#define	ee7		88
#define	ff7		89
#define	fs7		90
#define	gg7		91
#define	gs7		92
#define	aa7		93
#define	as7		94
#define	bb7		95
#define	cc8		96

#define	cs8		87
#define	dd8		88
#define	ds8		89
#define	ee8		90
#define	ff8		91
#define	fs8		92
#define	gg8		93
#define	gs8		94
#define	aa8		95
#define	as8		96
#define	bb8		97
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\PlacementDoodad.cpp ===
///////////////////////////////////////////////////////////////////////////////
// File: PlacementDoodad.cpp
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#include "precomp.h"
#include "defines.h"
#ifdef INCLUDE_PLACEMENT_DOODAD

#include "xbs_math.h"
#include "renderer.h"
#include "PlacementDoodad.h"
///////////////////////////////////////////////////////////////////////////////
#define FVF_xyzrgba (D3DFVF_XYZ|D3DFVF_DIFFUSE)
struct xyzrgba_vertex
{
	float x,y,z;
	DWORD diffuse;
};
///////////////////////////////////////////////////////////////////////////////
void PlacementDoodad::Init()
{
    m_pVB = NULL;
    m_pIB = NULL;
    m_dwNumVertices = 0;
    m_dwNumIndices = 0;
}
///////////////////////////////////////////////////////////////////////////////
void PlacementDoodad::create()
{
	m_dwNumVertices = 6;
	m_dwNumIndices = 6;
	
	gpd3dDev->CreateVertexBuffer(sizeof(xyzrgba_vertex) * m_dwNumVertices, NULL, FVF_xyzrgba,NULL, &m_pVB);
	gpd3dDev->CreateIndexBuffer(m_dwNumIndices, D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_DEFAULT, &m_pIB);

	xyzrgba_vertex* p_vb;
	m_pVB->Lock(0, 0, (BYTE**) &p_vb, 0);

	int i;
	for (i=0; i<3; i++)
	{
		p_vb[2*i+0].x = (i==0) ? -100.0f : 0.0f;
		p_vb[2*i+1].x = (i==0) ? +100.0f : 0.0f;
		p_vb[2*i+0].y = (i==1) ? -100.0f : 0.0f;
		p_vb[2*i+1].y = (i==1) ? +100.0f : 0.0f;
		p_vb[2*i+0].z = (i==2) ? -100.0f : 0.0f;
		p_vb[2*i+1].z = (i==2) ? +100.0f : 0.0f;
		p_vb[2*i+0].diffuse = p_vb[2*i+1].diffuse = 0xFFFFFFFF;
	}

	m_pVB->Unlock();


	WORD* p_ib;
	m_pIB->Lock(0, 0, (BYTE**) &p_ib, 0);

	for (i=0; i<6; i++) p_ib[i] = (WORD)i;

	m_pIB->Unlock();
}
///////////////////////////////////////////////////////////////////////////////
void PlacementDoodad::destroy()
{
	m_pVB->Release();
	m_pIB->Release();
	m_pVB = NULL;
	m_pIB = NULL;
}
///////////////////////////////////////////////////////////////////////////////
void PlacementDoodad::render(const D3DVECTOR* p_pos, const D3DMATRIX* view_mat, const D3DMATRIX* proj_mat)
{
    // Set default states
    gpd3dDev->SetRenderState( D3DRS_LIGHTING,			FALSE );
    gpd3dDev->SetRenderState( D3DRS_ZENABLE,			TRUE );
    gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		FALSE );

	gpd3dDev->SetRenderState( D3DRS_SRCBLEND,			D3DBLEND_SRCALPHA );
    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,			D3DBLEND_INVSRCALPHA );

	gpd3dDev->SetVertexShader(FVF_xyzrgba);

	D3DMATRIX iden;
	SetIdentity(&iden);
	*((D3DVECTOR*)(&iden._41)) = *p_pos;
	gpd3dDev->SetTransform(D3DTS_WORLD, &iden);

	if (view_mat) gpd3dDev->SetTransform(D3DTS_VIEW, view_mat);
	if (proj_mat) gpd3dDev->SetTransform(D3DTS_PROJECTION, proj_mat);
	
	gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,	D3DTOP_SELECTARG1);
	gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,	D3DTA_DIFFUSE);
	gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAOP,	D3DTOP_SELECTARG1);
	gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG1,	D3DTA_DIFFUSE);
	gpd3dDev->SetTextureStageState(1,D3DTSS_COLOROP,	D3DTOP_DISABLE);

	gpd3dDev->SetIndices( m_pIB, 0 );
	gpd3dDev->SetStreamSource(0, m_pVB, sizeof(xyzrgba_vertex));
	gpd3dDev->DrawIndexedPrimitive(D3DPT_LINELIST, 0, m_dwNumVertices, 0, m_dwNumIndices / 2);

	gpd3dDev->SetPixelShader(NULL);
	gpd3dDev->SetVertexShader(NULL);

    gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		TRUE );
	gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,	D3DTOP_DISABLE);
}
///////////////////////////////////////////////////////////////////////////////
#endif // INCLUDE_PLACEMENT_DOODAD
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\PlacementDoodad.h ===
///////////////////////////////////////////////////////////////////////////////
// File: PlacementDoodad.h
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#ifndef __PLACEMENTDOODAD_H__
#define __PLACEMENTDOODAD_H__


#include "defines.h"

#ifdef INCLUDE_PLACEMENT_DOODAD


// Renders a visible item at a specific location.
   

class PlacementDoodad
{
protected:
    LPDIRECT3DVERTEXBUFFER8 m_pVB;
    LPDIRECT3DINDEXBUFFER8  m_pIB;
    DWORD					m_dwNumVertices;
    DWORD					m_dwNumIndices;


public:
	void Init();
	void UnInit()
    {
        destroy();
    }

	void create();
	void destroy();

	void render(const D3DVECTOR* p_pos, const D3DMATRIX* view_mat, const D3DMATRIX* proj_mat);
};


#endif // INCLUDE_PLACEMENT_DOODAD
#endif // __PLACEMENTDOODAD_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\qrand.cpp ===
//
//	qrand.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
#include "precomp.h"
#include "qrand.h"

int	QRand::Rand(int scale)
{
	_asm
	{
		mov		edi,this
		mov		eax,[edi]
		mov		ebx,eax
		ror		eax,13
		sub		ebx,11
		sub		eax,ebx
		mov		[edi],eax
		mul		scale
		mov		eax,edx
	}
}

int	QRand::Rand()
{

	_asm
	{
		mov		edi,this
		mov		eax,[edi]
		mov		ebx,eax
		ror		eax,13
		sub		ebx,11
		sub		eax,ebx
		mov		[edi],eax
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\precomp.h ===
#pragma once

#ifdef STARTUPANIMATION

#pragma code_seg("INIT")
#pragma data_seg("INIT_RW")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")

extern "C"
{
    #include <ntos.h>
    #include <nturtl.h>
};

#endif // STARTUPANIMATION

#include <xtl.h>
#include <xgraphics.h>

#include <stdio.h>

#ifdef _DEBUG
extern int gcMemAllocs;

#ifdef STARTUPANIMATION
extern "C" int gcMemAllocsContiguous;
#endif // STARTUPANIMATION
#endif

inline void* MemAlloc(UINT cBytes)
{
#ifdef _DEBUG
    gcMemAllocs++;
#endif

#ifndef STARTUPANIMATION
    void* p = LocalAlloc(LMEM_FIXED, cBytes);
    if (p)
    {
        ZeroMemory(p, cBytes);
    }
    return p;
#else // STARTUPANIMATION
    void* p = ExAllocatePoolWithTag(cBytes, 'KD3D');
    if (p)
    {
        // Last-minute hack to fix start-up animation hangs [andrewgo]
        ZeroMemory(p, cBytes);
    }
    return p;
#endif // STARTUPANIMATION
}

inline void* MemAllocNoZero(ULONG cBytes)
{
    return MemAlloc(cBytes);
}

inline void MemFree(void* pv)
{
#ifdef _DEBUG
    if (gcMemAllocs <= 0)
    {
        __asm int 3;
    }
    gcMemAllocs--;
#endif

#ifndef STARTUPANIMATION
    LocalFree(pv);
#else // STARTUPANIMATION
    ExFreePool(pv);
#endif // STARTUPANIMATION
}

#ifdef STARTUPANIMATION
extern "C"
void *MemAllocContiguous(size_t Size, DWORD Alignment);
extern "C"
void MemFreeContiguous(void *pv);
#endif // STARTUPANIMATION

#ifdef BINARY_RESOURCE
#include "shaders.h"
#endif // BINARY_RESOURCE

#include "fastmath.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\PROTOS.H ===
#ifndef _PROTOS_H_
#define _PROTOS_H_ 


init_track_status(uchar level, uchar channel);
remove_processes_by_level(uchar level);


void	do_sos_init_return();

void	sos_main(void);
void	sos_error(int);
int	create_process(ushort * p, uchar l, uchar c);
struct process * get_process_packet();
int	free_process_packet(struct process *pp);
struct track_info *get_track_info_block();
struct track_info *get_track_info_block2(uchar, uchar);
struct track_info *get_music_info_block();
struct track_info *get_music_info_block_i(uchar);
uchar	read_sound_call();
void	put_fifo(uchar);
void	nosound(uchar);
void	kill_process( struct process *pp);
uchar	get_fifo(void);
void do_volume_adjust(uchar volume,uchar level,uchar *patch_addr,uchar chan);
void	remove_processes_by_level_and_channel(uchar, uchar);
int	init_queuelist();
void	do_watchdog(void);


int	f_note(void);
int	f_rest(void);
int	f_jumpto(void);
int	f_loop(void);
int	f_endloop(void);
int	f_patch(void);
int	f_pan(void);
int	f_mux(void);
int	f_demux(void);
int	f_volume(void);
int	f_xpose(void);
int	f_xset(void);
int	f_slur(void);
int	f_ring(void);
int	f_clockset(void);
int	f_end(void);
int	f_filterset(void);
int	f_filterinc(void);


int	f_mark(void);
int	f_sound_call(void);
int	f_srest(void);
int	f_intvarset(void);
int	f_intvarinc(void);
int	f_user_1_var_evf(void);
int	f_user_2_var_evf(void);
int 	f_sig(void);
int	f_gliss(void);
int	f_clockinc(void);
int	f_paninc(void);
int 	f_musicclockinc(void);
int	f_MidiNoteOn(void);
int	f_MidiNoteOff(void);
int	f_MidiProgram(void);
int	f_MidiVolume(void);
int	f_MidiTempo(void);
int	f_MidiControl(void);
int	f_MidiEOT(void);

int	f_fxset(void);

void	call_silence(void);
void	call_music(void);
void	call_effect(void);
void	call_volume(void);
void	call_senddev(void);
void	call_mark(void);
void	call_ignore(void);
void	call_user_function(void);
void	call_timer(void);
void	call_end_timer(void);
void	call_play_timer(void);
void 	call_kill_effect(void);

#endif //protos_h_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\PROC.C ===
/*************************************************************************
*                                                                        *
* 	Routines for process creation and control			  *
*                                                                        *
*************************************************************************/

#include "error.h"
#include "sos.h"
#include "protos.h"
#include "externs.h"

extern	int	(*event_fcns[])();

/*
 *	return a new process or NULL if error
 *	Put the process in the process queue
 */

struct process *pp;

int create_process(
ushort	*mem_ptr,			/* pointer to event list */
uchar	level,				/* sound level */
uchar	channel)			/* channel for this process */
{
 	struct process	*tpp;		

	pp = get_process_packet();

	pp->mem_ptr.i = mem_ptr;		/* get event-list pointer */
	pp->level = level;		/* get level		  */
	pp->timer = 0;		/* timer for process 	  */
	pp->hard_channel = channel;	/* get hardware channel   */
	pp->function = *mem_ptr;	/* get function byte	  */
	pp->type = 0;				/* clear type field			*/
	pp->prev = process_queue;	/* put process at head of q */

	if (level == 0)
		pp->prev_timer = system_clock_music;  /* make us current	  */
	else
		pp->prev_timer = system_clock_fx;  /* make us current	  */

	pp->next = tpp = process_queue->next;
	if (tpp != (struct process *)NULL) {
	    tpp->prev = pp;
	}
	process_queue->next = pp;
	return(1);
}

/*
 * 	remove a process from the process queue and free up the memory
 */

void kill_process(struct process *pp)
{
	pp->prev->next = pp->next;
	if (pp->next != (struct process *)NULL)
	   pp->next->prev = pp->prev;		/* remove ourselves */

	pp->next = queue_list[0].next;
	pp->prev = &(queue_list[0]);
/*	pp->function = 0;*/
	queue_list[0].next = pp;
	if (pp->next == (struct process *)NULL)
	    return;
	pp->next->prev = pp;
}

struct process *get_process_packet()
{
	struct process * pp;

	pp = queue_list[0].next;
	queue_list[0].next = pp->next;
	if (pp->next == (struct process *)NULL)
	    return(pp);
	pp->next->prev = &(queue_list[0]);
	return(pp);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\prim_types.h ===
//
//	prim_types.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __PRIM_TYPES_H__
#define __PRIM_TYPES_H__


enum PrimitiveTypes
{
	pt_Sphere    = 0,
	pt_Cylinder  = 1,
	pt_Box       = 2,
	pt_Torus     = 3,
	pt_Cone      = 4,
	pt_SurfOfRev = 5,
	pt_NoTypes   = 6
};

const float OO_PRIM_TRANS_SCALE_X = 0.004131f;
const float OO_PRIM_TRANS_SCALE_Y = 0.008252f;
const float OO_PRIM_TRANS_SCALE_Z = 0.004421f;
const float PRIM_TRANS_DELTA_X =    -27.844984f;
const float PRIM_TRANS_DELTA_Y =    -0.228729f;
const float PRIM_TRANS_DELTA_Z =    0.497086f;

struct SphereInst
{
	short tx,ty,tz;
	char idVersion;
	char idPosAnim;
	char idRotAnim;
	float fRad;
};

struct SphereVers
{
	char nSegs;
};

struct CylinderInst
{
	char  idQuat;
	short tx,ty,tz;
	char  idVersion;
	char  idPosAnim;
	char  idRotAnim;
	float fRad;
	float fHalfHeight;
};

struct CylinderVers
{
	char nHeightSeg;
	char nSides;
};

struct BoxInst
{
	char  idQuat;
	short tx,ty,tz;
	char  idVersion;
	char  idPosAnim;
	char  idRotAnim;
	float fLen;
	float fHeight;
	float fWidth;
};

struct TorusInst
{
	char idQuat;
	short tx,ty,tz;
	char idVersion;
	char idPosAnim;
	char idRotAnim;
	float fRad1;
};

struct TorusVers
{
	float fRatio;
	char nSegs;
	char nSides;
};

struct ConeInst
{
	char idQuat;
	short tx,ty,tz;
	char idVersion;
	char idPosAnim;
	char idRotAnim;
};

struct ConeVers
{
	float fRad1;
	float fRad2;
	float fHeight;
	char nHeightSeg;
	char nSides;
};

#define MAX_SOR_PTS 19
struct SurfOfRevInst
{
	char idQuat;
	short tx,ty,tz;
	char idVersion;
	char idPosAnim;
	char idRotAnim;
};

struct SurfOfRevPt
{
	float x,y,z;
	char flags;
};

struct SurfOfRevVers
{
	SurfOfRevPt pts[MAX_SOR_PTS];
	float ax,ay,az;
	float px,py,pz;
	char nSegs;
	char nPts;
};

enum SurfOfRevPtFlags
{
	sr_Smooth = 1
};

#define MAX_POS_SAMPLES 30
#define NUM_POS_SEQ 32
const float OO_POS_ANIM_SCALE_X = 0.002755f;
const float OO_POS_ANIM_SCALE_Y = 0.002755f;
const float OO_POS_ANIM_SCALE_Z = 0.002440f;
const float POS_ANIM_DELTA_X = -0.159046f;
const float POS_ANIM_DELTA_Y = -0.741611f;
const float POS_ANIM_DELTA_Z = 2.155624f;

struct PosAnimSeq
{
	char posIds[MAX_POS_SAMPLES*3];
};

#define MAX_ROT_SAMPLES 30
#define NUM_ROT_SEQ 29
struct RotAnimSeq
{
	char quatIds[MAX_ROT_SAMPLES*3];
};

#endif // __PRIM_TYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\qrand.h ===
//
//	qrand.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __QRAND__
#define __QRAND__

class QRand
{
private:
	
	int seed;

public:
	
	void Init(int initSeed=0x76543210) { seed = initSeed; }
	void	SetSeed(int newSeed)   { seed = newSeed;  }
	int		Rand(int scale);	
	int		Rand();
};


#endif  //__QRAND__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\renderer.h ===
//
//	renderer.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __RENDERER_H__
#define __RENDERER_H__

///////////////////////////////////////////////////////////////////////////////
class Renderer
{
private:

	IDirect3D8				*pD3D8;
	IDirect3DDevice8		*pD3DDev8;
	D3DPRESENT_PARAMETERS	d3dPresentParams;

public:

	void Init();
	void UnInit();

	bool init(int width,int height);
	void shutdown();
};

extern IDirect3DDevice8 *gpd3dDev;
/////////////////////////////////////////////////////////////////////////////// 


#endif // __RENDERER_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\renderer.cpp ===
//
//	renderer.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#include "precomp.h"
#include "renderer.h"
#include "xbs_app.h"

#ifdef STARTUPANIMATION
#include "mslogo.h"
extern "C" {
#include "av.h"
}
#endif // STARTUPANIMATION

IDirect3DDevice8 *gpd3dDev = NULL;
///////////////////////////////////////////////////////////////////////////////
void Renderer::Init()
{
	pD3D8 = NULL;
	pD3DDev8 = NULL;
}
///////////////////////////////////////////////////////////////////////////////
void Renderer::UnInit()
{
}
///////////////////////////////////////////////////////////////////////////////
bool Renderer::init(int width,int height)
{
	pD3D8 = Direct3DCreate8(D3D_SDK_VERSION);
	if(!pD3D8)
		return false;

	const int size_mul = 2;
	const int kick_mul = 2;
	pD3D8->SetPushBufferSize(size_mul * 512 * 1024, kick_mul * 32 * 1024);


	ZeroMemory( &d3dPresentParams, sizeof(d3dPresentParams) );
    d3dPresentParams.BackBufferWidth        = width;
    d3dPresentParams.BackBufferHeight       = height;
    d3dPresentParams.BackBufferFormat       = D3DFMT_A8R8G8B8;
    d3dPresentParams.BackBufferCount        = 1;
    d3dPresentParams.EnableAutoDepthStencil = TRUE;
    d3dPresentParams.AutoDepthStencilFormat = D3DFMT_D24S8;
    d3dPresentParams.SwapEffect             = D3DSWAPEFFECT_DISCARD;
	d3dPresentParams.MultiSampleType        = D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR; 
//	d3dPresentParams.MultiSampleType        = D3DMULTISAMPLE_NONE; 

	// No VSync.
//	d3dPresentParams.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;

    if (gApp.bWideScreen)
    {
        d3dPresentParams.Flags |= D3DPRESENTFLAG_WIDESCREEN;
    }

#ifdef STARTUPANIMATION
    // Always do interlaced output on an HDTV.
    ULONG AvInfo;
    AvSendTVEncoderOption(NULL, AV_QUERY_AV_CAPABILITIES, 0, &AvInfo);

    if ((AvInfo & AV_PACK_MASK) == AV_PACK_HDTV)
    {
        d3dPresentParams.Flags |= D3DPRESENTFLAG_INTERLACED;
    }
#endif 
    
	if( pD3D8->CreateDevice(D3DADAPTER_DEFAULT,
		                    D3DDEVTYPE_HAL,
						    NULL,
						    D3DCREATE_HARDWARE_VERTEXPROCESSING,
						    &d3dPresentParams,
						    &pD3DDev8 ) != D3D_OK )
	{
#ifndef STARTUPANIMATION
		OutputDebugString("Could not initalize Xbox Video!\n");
#endif // STARTUPANIMATION
		return false;
	}

	for( int i=0; i<4; i++ )
	{
		pD3DDev8->SetTextureStageState( i, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
		pD3DDev8->SetTextureStageState( i, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
		pD3DDev8->SetTextureStageState( i, D3DTSS_MIPFILTER, D3DTEXF_NONE );

		pD3DDev8->SetTextureStageState( i, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );
		pD3DDev8->SetTextureStageState( i, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );
		pD3DDev8->SetTextureStageState( i, D3DTSS_ADDRESSW, D3DTADDRESS_CLAMP );

		pD3DDev8->SetTextureStageState( i, D3DTSS_MAXANISOTROPY,4);
	}

	gpd3dDev = pD3DDev8;

#ifdef STARTUPANIMATION

    gpd3dDev->Clear(0,NULL,
                    D3DCLEAR_STENCIL | D3DCLEAR_ZBUFFER | D3DCLEAR_TARGET,
                    0x00000000,
                    1.f,
                    0 );

    gpd3dDev->Present(NULL,NULL,NULL,NULL);

    // This delay should allow the TV enough time to lock and ensure
    // that the picture doesn't roll on the first few frames of the
    // animation.

    for (i = 0; i < 4; i++)
    {
        gpd3dDev->BlockUntilVerticalBlank();
    }

#endif // STARTUPANIMATION

	return true;
}
///////////////////////////////////////////////////////////////////////////////
void Renderer::shutdown()
{
	if( pD3DDev8 )
	{
		pD3DDev8->Release();
		gpd3dDev = NULL;
	}

	if( pD3D8 )
	{
		pD3D8->Release();
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\scene_geometry.h ===
#ifndef __DEFAULT_NAME_H__
#define __DEFAULT_NAME_H__

#include "prim_types.h"

RotAnimSeq theRotAnimSeq[] = 
{
{2,0,48,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{60,0,0,0,0,0,0,0,-1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{64,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0}
,{86,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0}
,{108,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0}
,{127,0,-126,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0}
,{64,0,0,88,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-86,0,0,0,0,0,0}
,{108,0,0,64,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-62,0,0,0,0,0,0}
,{127,0,-126,0,0,62,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-60,0,0,0,0,0,0}
,{86,0,0,126,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-124,0,0,0,0,0,0}
,{2,0,0,0,0,127,0,-26,1,1,1,1,1,127,-1,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-18,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{2,127,0,-10,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{64,127,0,-62,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{6,127,1,6,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{108,127,0,-86,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-18,50,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-126,127,0,-88,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{23,127,1,29,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,62,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{2,127,1,71,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{64,127,1,19,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{6,127,1,87,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{108,127,0,-5,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-18,127,0,-125,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-126,127,0,-7,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{23,127,1,110,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,62,81,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{64,127,1,89,1,1,1,127,-2,-48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

PosAnimSeq thePosAnimSeq[] = 
{
{0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{13,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{26,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{49,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{65,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{81,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{97,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0}
,{113,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-127,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-111,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-95,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-89,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-76,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-63,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-56,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-49,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-42,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-35,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-28,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-21,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-14,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,0,-7,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,7,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,14,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,21,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,28,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,35,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,42,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,49,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,{127,1,57,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

short numPos = 320;
short thePos[]=
{
	46,374,9290,
	46,374,9282,
	46,374,9029,
	46,374,8776,
	46,374,8679,
	46,374,8562,
	46,374,7863,
	46,374,7163,
	46,374,6916,
	46,374,6821,
	46,374,6725,
	46,374,7078,
	46,374,7129,
	57,268,-10221,
	57,268,-10201,
	57,268,-9624,
	57,268,-9047,
	57,268,-8825,
	57,268,-8751,
	57,268,-8308,
	57,268,-7865,
	57,268,-7572,
	57,268,-7695,
	57,268,-7819,
	57,268,-7942,
	57,268,-7957,
	57,269,-16816,
	57,269,-16555,
	57,269,-16294,
	57,269,-16033,
	57,269,-15772,
	57,269,-15511,
	57,269,-15428,
	-16187,16454,-11876,
	-15779,16045,-11876,
	-15370,15637,-11876,
	-14962,15229,-11876,
	-14554,14820,-11876,
	-14145,14412,-11876,
	-13737,14004,-11876,
	-13329,13595,-11876,
	-12920,13187,-11876,
	-12512,12779,-11876,
	-12104,12370,-11876,
	-11695,11962,-11876,
	-11287,11554,-11876,
	-10879,11145,-11876,
	-10470,10737,-11876,
	-10463,10730,-11876,
	16402,16509,-11876,
	15978,16085,-11876,
	15554,15661,-11876,
	15130,15237,-11876,
	14706,14813,-11876,
	14282,14390,-11876,
	13858,13966,-11876,
	13434,13542,-11876,
	13010,13118,-11876,
	12586,12694,-11876,
	12163,12270,-11876,
	11739,11846,-11876,
	11315,11422,-11876,
	10891,10998,-11876,
	10467,10574,-11876,
	10459,10567,-11876,
	-16346,-16240,-11876,
	-15907,-15802,-11876,
	-15469,-15363,-11876,
	-15031,-14925,-11876,
	-14592,-14487,-11876,
	-14154,-14048,-11876,
	-13715,-13610,-11876,
	-13277,-13171,-11876,
	-12839,-12733,-11876,
	-12400,-12295,-11876,
	-11962,-11856,-11876,
	-11524,-11418,-11876,
	-11085,-10980,-11876,
	-10647,-10541,-11876,
	-10208,-10103,-11876,
	-10200,-10095,-11876,
	16402,-16134,-11876,
	15971,-15702,-11876,
	15539,-15271,-11876,
	15108,-14840,-11876,
	14676,-14408,-11876,
	14245,-13977,-11876,
	13814,-13546,-11876,
	13382,-13114,-11876,
	12951,-12683,-11876,
	12519,-12251,-11876,
	12088,-11820,-11876,
	11657,-11389,-11876,
	11225,-10957,-11876,
	10794,-10526,-11876,
	10362,-10094,-11876,
	10355,-10087,-11876,
	-16187,16454,10668,
	-15949,16216,10668,
	-15541,15807,10668,
	-15132,15399,10668,
	-14724,14991,10668,
	-14316,14582,10668,
	-13907,14174,10668,
	-13499,13766,10668,
	-13091,13357,10668,
	-12682,12949,10668,
	-12274,12541,10668,
	-11866,12132,10668,
	-11457,11724,10668,
	-11049,11316,10668,
	-10640,10907,10668,
	-10463,10730,10668,
	-16346,-16240,10668,
	-16090,-15984,10668,
	-15652,-15546,10668,
	-15213,-15108,10668,
	-14775,-14669,10668,
	-14337,-14231,10668,
	-13898,-13793,10668,
	-13460,-13354,10668,
	-13021,-12916,10668,
	-12583,-12478,10668,
	-12145,-12039,10668,
	-11706,-11601,10668,
	-11268,-11162,10668,
	-10830,-10724,10668,
	-10391,-10286,10668,
	-10200,-10095,10668,
	16402,-16134,10668,
	16162,-15893,10668,
	15749,-15481,10668,
	15337,-15069,10668,
	14924,-14656,10668,
	14512,-14244,10668,
	14100,-13831,10668,
	13687,-13419,10668,
	13275,-13007,10668,
	12862,-12594,10668,
	12450,-12182,10668,
	12037,-11769,10668,
	11625,-11357,10668,
	11213,-10945,10668,
	10800,-10532,10668,
	10621,-10353,10668,
	16403,16508,10668,
	16156,16260,10668,
	15732,15836,10668,
	15308,15413,10668,
	14884,14989,10668,
	14460,14565,10668,
	14037,14141,10668,
	13613,13717,10668,
	13189,13293,10668,
	12765,12869,10668,
	12341,12445,10668,
	11917,12021,10668,
	11493,11597,10668,
	11069,11173,10668,
	10645,10750,10668,
	10461,10565,10668,
	57,269,15933,
	57,269,15644,
	57,269,15354,
	57,269,15065,
	57,269,14776,
	57,269,14535,
	51,269,-11962,
	51,269,-11943,
	51,269,-11366,
	51,269,-10788,
	51,269,-10567,
	51,269,-10493,
	51,269,-10050,
	51,269,-9606,
	51,269,-9314,
	51,269,-9437,
	51,269,-9560,
	51,269,-9684,
	51,269,-9698,
	51,269,11058,
	51,269,11050,
	51,269,10797,
	51,269,10544,
	51,269,10446,
	51,269,10330,
	51,269,9631,
	51,269,8931,
	51,269,8684,
	51,269,8588,
	51,269,8493,
	51,269,8846,
	51,269,8897,
	-3760,264,-8917,
	-3760,264,-8657,
	-3760,264,-8398,
	-3760,264,-8138,
	-3760,264,-7879,
	-3760,264,-7619,
	-3760,264,-7537,
	-2638,-2434,-8917,
	-2638,-2434,-8657,
	-2638,-2434,-8398,
	-2638,-2434,-8138,
	-2638,-2434,-7879,
	-2638,-2434,-7619,
	-2638,-2434,-7537,
	62,-3548,-8917,
	62,-3548,-8657,
	62,-3548,-8398,
	62,-3548,-8138,
	62,-3548,-7879,
	62,-3548,-7619,
	62,-3548,-7537,
	2761,-2427,-8917,
	2761,-2427,-8657,
	2761,-2427,-8398,
	2761,-2427,-8138,
	2761,-2427,-7879,
	2761,-2427,-7619,
	2761,-2427,-7537,
	3875,274,-8917,
	3875,274,-8657,
	3875,274,-8398,
	3875,274,-8138,
	3875,274,-7879,
	3875,274,-7619,
	3875,274,-7537,
	2754,2972,-8917,
	2754,2972,-8657,
	2754,2972,-8398,
	2754,2972,-8138,
	2754,2972,-7879,
	2754,2972,-7619,
	2754,2972,-7537,
	52,4087,-8917,
	52,4087,-8657,
	52,4087,-8398,
	52,4087,-8138,
	52,4087,-7879,
	52,4087,-7619,
	52,4087,-7537,
	-2645,2965,-8917,
	-2645,2965,-8657,
	-2645,2965,-8398,
	-2645,2965,-8138,
	-2645,2965,-7879,
	-2645,2965,-7619,
	-2645,2965,-7537,
	-3760,264,7941,
	-3760,264,7682,
	-3760,264,7423,
	-3760,264,7165,
	-3760,264,6906,
	-3760,264,6647,
	-3760,264,6565,
	-2638,-2434,7941,
	-2638,-2434,7682,
	-2638,-2434,7423,
	-2638,-2434,7165,
	-2638,-2434,6906,
	-2638,-2434,6647,
	-2638,-2434,6565,
	62,-3548,7941,
	62,-3548,7682,
	62,-3548,7423,
	62,-3548,7165,
	62,-3548,6906,
	62,-3548,6647,
	62,-3548,6565,
	2761,-2427,7941,
	2761,-2427,7682,
	2761,-2427,7423,
	2761,-2427,7165,
	2761,-2427,6906,
	2761,-2427,6647,
	2761,-2427,6565,
	3875,274,7941,
	3875,274,7682,
	3875,274,7423,
	3875,274,7165,
	3875,274,6906,
	3875,274,6647,
	3875,274,6565,
	2754,2972,7941,
	2754,2972,7682,
	2754,2972,7423,
	2754,2972,7165,
	2754,2972,6906,
	2754,2972,6647,
	2754,2972,6565,
	52,4087,7941,
	52,4087,7682,
	52,4087,7423,
	52,4087,7165,
	52,4087,6906,
	52,4087,6647,
	52,4087,6565,
	-2645,2965,7941,
	-2645,2965,7682,
	-2645,2965,7423,
	-2645,2965,7165,
	-2645,2965,6906,
	-2645,2965,6647,
	-2645,2965,6565,
	57,269,-13617,
	57,269,-13397,
	57,269,-13178,
	57,269,-12958,
	57,269,-12739,
	57,269,-12663,
	57,269,-13307,
	57,269,-13801,
	57,269,12556,
	57,269,12339,
	57,269,12121,
	57,269,11903,
	57,269,11772,
	57,269,12202,
	57,269,12546,
};

short numQuats = 413;
short theQuats[]=
{
	0,32750,0,
	8862,-21394,-8862,
	0,0,0,
	-16375,-16375,16375,
	-8862,-21394,8862,
	16375,-16375,-16375,
	0,0,-23157,
	-23157,-23157,0,
	-23030,23030,2420,
	-12464,30091,3162,
	0,32570,3423,
	-30091,12464,1310,
	-32570,0,0,
	-12464,-30091,-3162,
	-23030,-23030,-2420,
	-30091,-12464,-1310,
	-16374,-16375,16374,
	2721,2721,-22997,
	2721,-2721,22997,
	0,3849,-32522,
	3849,0,0,
	-16374,16374,16375,
	16375,-16375,16374,
	0,0,23157,
	-23157,23157,0,
	-16375,16374,16375,
	23005,22728,-3751,
	23157,-23157,0,
	0,0,-23157,
	23157,23157,0,
	-16374,16375,-16374,
	-16375,-16375,16374,
	16375,-16374,-16375,
	15645,17073,17073,
	-18783,-18723,-13418,
	3793,22963,22770,
	0,-23157,-23157,
	0,-23157,23157,
	9048,-21316,21316,
	8675,21471,-21471,
	21471,-8675,8675,
	21316,9048,-9048,
	21316,-9048,-9048,
	-21471,-8675,-8675,
	8675,-21471,-21471,
	-9048,-21316,-21316,
	13751,13418,-18723,
	23157,0,0,
	21394,-8862,8862,
	16374,16375,-16375,
	0,0,-314,
	0,0,-788,
	0,0,-798,
	0,0,270,
	0,0,2327,
	0,0,4941,
	0,0,7845,
	0,0,10771,
	0,0,13467,
	0,0,13840,
	0,0,12400,
	0,0,18945,
	0,0,23433,
	0,0,24049,
	0,0,-12532,
	32,-77,-12532,
	118,-286,-12532,
	244,-590,-12530,
	395,-954,-12526,
	556,-1342,-12520,
	711,-1718,-12512,
	847,-2046,-12504,
	949,-2292,-12496,
	1001,-2418,-12492,
	990,-2390,-12493,
	900,-2173,-12500,
	716,-1730,-12512,
	424,-1024,-12525,
	8,-21,-12532,
	-781,1886,-12508,
	-2089,5045,-12357,
	-3723,8988,-11967,
	-5468,13203,-11276,
	-7119,17189,-10314,
	-8510,20545,-9200,
	-8862,21394,-8862,
	-12532,-30257,0,
	-12532,-30256,32,
	-12532,-30255,118,
	-12530,-30251,244,
	-12526,-30241,395,
	-12520,-30227,556,
	-12512,-30208,711,
	-12504,-30187,847,
	-12496,-30170,949,
	-12492,-30160,1001,
	-12493,-30162,990,
	-12500,-30178,900,
	-12512,-30207,716,
	-12525,-30239,424,
	-12532,-30257,8,
	-12508,-30198,-781,
	-12357,-29833,-2089,
	-11967,-28891,-3723,
	-11276,-27224,-5468,
	-10314,-24900,-7119,
	-9200,-22211,-8510,
	-8862,-21394,-8862,
	0,0,-30257,
	-77,32,-30256,
	-286,118,-30255,
	-590,244,-30251,
	-954,395,-30241,
	-1342,556,-30227,
	-1718,711,-30208,
	-2046,847,-30187,
	-2292,949,-30170,
	-2418,1001,-30160,
	-2390,990,-30162,
	-2173,900,-30178,
	-1730,716,-30207,
	-1024,424,-30239,
	-21,8,-30257,
	1886,-781,-30198,
	5045,-2089,-29833,
	8988,-3723,-28891,
	13203,-5468,-27224,
	17189,-7119,-24900,
	20545,-8510,-22211,
	21394,-8862,-21394,
	0,0,30257,
	-77,-32,30256,
	-286,-118,30255,
	-590,-244,30251,
	-954,-395,30241,
	-1342,-556,30227,
	-1718,-711,30208,
	-2046,-847,30187,
	-2292,-949,30170,
	-2418,-1001,30160,
	-2390,-990,30162,
	-2173,-900,30178,
	-1730,-716,30207,
	-1024,-424,30239,
	-21,-8,30257,
	1886,781,30198,
	5045,2089,29833,
	8988,3723,28891,
	13203,5468,27224,
	17189,7119,24900,
	20545,8510,22211,
	21394,8862,21394,
	11,-27,-12532,
	78,-190,-12532,
	192,-465,-12531,
	338,-817,-12528,
	500,-1208,-12522,
	664,-1603,-12515,
	813,-1964,-12506,
	934,-2255,-12498,
	1010,-2440,-12492,
	1028,-2482,-12490,
	971,-2345,-12495,
	825,-1992,-12505,
	574,-1385,-12519,
	202,-489,-12531,
	-406,980,-12526,
	-1649,3981,-12423,
	-3353,8095,-12075,
	-5247,12667,-11381,
	-7058,17040,-10356,
	-8566,20682,-9147,
	-27,11,-30257,
	-190,78,-30256,
	-465,192,-30253,
	-817,338,-30246,
	-1208,500,-30232,
	-1603,664,-30214,
	-1964,813,-30193,
	-2255,934,-30172,
	-2440,1010,-30158,
	-2482,1028,-30155,
	-2345,971,-30166,
	-1992,825,-30191,
	-1385,574,-30225,
	-489,202,-30253,
	980,-406,-30241,
	3981,-1649,-29993,
	8095,-3353,-29153,
	12667,-5247,-27477,
	17040,-7058,-25002,
	20682,-8566,-22084,
	-27,-11,30257,
	-190,-78,30256,
	-465,-192,30253,
	-817,-338,30246,
	-1208,-500,30232,
	-1603,-664,30214,
	-1964,-813,30193,
	-2255,-934,30172,
	-2440,-1010,30158,
	-2482,-1028,30155,
	-2345,-971,30166,
	-1992,-825,30191,
	-1385,-574,30225,
	-489,-202,30253,
	980,406,30241,
	3981,1649,29993,
	8095,3353,29153,
	12667,5247,27477,
	17040,7058,25002,
	20682,8566,22084,
	-12532,-30257,11,
	-12532,-30256,78,
	-12531,-30253,192,
	-12528,-30246,338,
	-12522,-30232,500,
	-12515,-30214,664,
	-12506,-30193,813,
	-12498,-30172,934,
	-12492,-30158,1010,
	-12490,-30155,1028,
	-12495,-30166,971,
	-12505,-30191,825,
	-12519,-30225,574,
	-12531,-30253,202,
	-12526,-30241,-406,
	-12423,-29993,-1649,
	-12075,-29153,-3353,
	-11381,-27477,-5247,
	-10356,-25002,-7058,
	-9147,-22084,-8566,
	0,0,-24,
	0,0,-753,
	0,0,-1100,
	0,0,892,
	0,0,6514,
	0,0,13000,
	0,0,32750,
	0,0,32748,
	0,0,32740,
	0,0,32748,
	0,0,32667,
	0,0,32375,
	0,0,31796,
	0,0,30928,
	0,0,29852,
	0,0,29681,
	0,586,0,
	0,1802,0,
	0,2831,0,
	0,2861,0,
	0,1077,0,
	0,-3544,0,
	0,-11170,0,
	0,-19638,0,
	0,-26599,0,
	0,-29681,0,
	-224,542,-12530,
	-689,1665,-12513,
	-1083,2615,-12485,
	-1094,2643,-12484,
	-412,995,-12526,
	1356,-3274,-12459,
	4274,-10320,-11781,
	7515,-18143,-10029,
	10179,-24574,-7311,
	11358,-27422,-5296,
	-414,414,-23154,
	-1274,1274,-23122,
	-2001,2001,-23071,
	-2023,2023,-23069,
	-762,762,-23145,
	2506,-2506,-23021,
	7898,-7898,-21769,
	13886,-13886,-18532,
	18808,-18808,-13509,
	20988,-20988,-9786,
	-542,224,-30252,
	-1665,689,-30211,
	-2615,1083,-30143,
	-2643,1094,-30141,
	-995,412,-30240,
	3274,-1356,-30079,
	10320,-4274,-28442,
	18143,-7515,-24213,
	24574,-10179,-17651,
	27422,-11358,-12787,
	586,0,32744,
	1802,0,32700,
	2831,0,32627,
	2861,0,32624,
	1077,0,32732,
	-3544,0,32557,
	-11170,0,30786,
	-19638,0,26208,
	-26599,0,19105,
	-29681,0,13840,
	542,224,30252,
	1665,689,30211,
	2615,1083,30143,
	2643,1094,30141,
	995,412,30240,
	-3274,-1356,30079,
	-10320,-4274,28442,
	-18143,-7515,24213,
	-24574,-10179,17651,
	-27422,-11358,12787,
	414,414,23154,
	1274,1274,23122,
	2001,2001,23071,
	2023,2023,23069,
	762,762,23145,
	-2506,-2506,23021,
	-7898,-7898,21769,
	-13886,-13886,18532,
	-18808,-18808,13509,
	-20988,-20988,9786,
	0,0,12532,
	224,542,12530,
	689,1665,12513,
	1083,2615,12485,
	1094,2643,12484,
	412,995,12526,
	-1356,-3274,12459,
	-4274,-10320,11781,
	-7515,-18143,10029,
	-10179,-24574,7311,
	-11358,-27422,5296,
	0,-756,0,
	0,-2324,0,
	0,-3649,0,
	0,-3687,0,
	0,-1390,0,
	0,4566,0,
	0,14215,0,
	0,24156,0,
	0,30786,0,
	0,32561,0,
	293,-708,-12529,
	901,-2177,-12500,
	1415,-3417,-12452,
	1430,-3453,-12450,
	539,-1301,-12521,
	-1771,4276,-12407,
	-5509,13301,-11256,
	-9340,22548,-8356,
	-11851,28612,-4075,
	-12485,30141,-1092,
	542,-542,-23151,
	1666,-1666,-23097,
	2615,-2615,-23009,
	2643,-2643,-23006,
	996,-996,-23136,
	-3273,3273,-22925,
	-10180,10180,-20800,
	-17258,17258,-15441,
	-21899,21899,-7530,
	-23069,23069,-2018,
	708,-293,-30248,
	2177,-901,-30178,
	3417,-1415,-30063,
	3453,-1430,-30059,
	1301,-539,-30229,
	-4276,1771,-29953,
	-13301,5509,-27176,
	-22549,9340,-20175,
	-28612,11851,-9839,
	-30141,12485,-2637,
	-767,0,32741,
	-2356,0,32665,
	-3699,0,32540,
	-3738,0,32535,
	-1409,0,32719,
	4628,0,32421,
	14397,0,29415,
	24406,0,21837,
	30969,0,10650,
	32625,0,2854,
	-708,-293,30248,
	-2177,-901,30178,
	-3417,-1415,30063,
	-3453,-1430,30059,
	-1301,-539,30229,
	4276,1771,29953,
	13301,5509,27176,
	22548,9340,20175,
	28612,11851,9839,
	30141,12485,2637,
	-542,-542,23151,
	-1666,-1666,23097,
	-2615,-2615,23009,
	-2643,-2643,23006,
	-996,-996,23136,
	3273,3273,22925,
	10180,10180,20800,
	17258,17258,15441,
	21899,21899,7530,
	23069,23069,2018,
	-293,-708,12529,
	-901,-2177,12500,
	-1415,-3417,12452,
	-1430,-3453,12450,
	-539,-1301,12521,
	1771,4276,12407,
	5509,13301,11256,
	9340,22549,8356,
	11851,28612,4075,
	12485,30141,1092,
	0,0,-17262,
	0,0,-21537,
	0,0,-25244,
	0,0,-28287,
};


DWORD theQuatSigns[]=
{
	0XEFFFFFFF,
	0XFFFFEBFF,
	0XFFFFFFFF,
	0XFFFFF01F,
	0XFFFFFFFF,
	0XFFFFFFFF,
	0XFFFFFFFF,
	0XFF01FF03,
	0XFFFFFFFF,
	0XFFFFFCFF,
	0XFFFFFFFF,
	0XFFFFFFFF,
	0X1FFFFFFF,
};

SphereInst theSphereInsts[]=
{
{5704,27,-230,0,0,0,1.522714f},
{7776,27,-230,0,0,0,1.522714f},
{6027,403,-230,0,0,0,1.522714f},
{7486,387,-230,0,0,0,1.522714f},
{7454,-348,-230,0,0,0,1.522714f},
{6795,545,-230,0,0,0,1.522714f},
{5995,-332,-230,0,0,0,1.522714f},
{6750,27,-112,0,0,0,2.671428f},
{6686,-490,-230,0,0,0,1.522714f},
{6733,27,-112,0,1,1,2.283272f},
{5855,27,-11,0,1,1,1.301465f},
{6103,-280,-11,0,1,1,1.301465f},
{7350,-293,-11,0,1,1,1.301465f},
{6694,-414,-11,0,1,1,1.301465f},
{6787,470,-11,0,1,1,1.301465f},
{7377,335,-11,0,1,1,1.301465f},
{7626,27,-11,0,1,1,1.301465f},
{6131,349,-11,0,1,1,1.301465f},
{-2847,4790,6279,1,-1,-1,7.010400f},
{6737,8161,-6189,1,-1,-1,7.010400f},
{6737,8161,6279,1,-1,-1,7.010400f},
{16375,4798,6279,1,-1,-1,7.010400f},
{16375,-4805,6279,1,-1,-1,7.010400f},
{16375,4798,-6189,1,-1,-1,7.010400f},
{16375,-4805,-6189,1,-1,-1,7.010400f},
{-2840,-4805,-6189,1,-1,-1,7.010400f},
{-2847,4790,-6189,1,-1,-1,7.010400f},
{-2840,-4805,6279,1,-1,-1,7.010400f}
};

SphereVers theSphereVers[]=
{
{16},
{24}
};

CylinderInst theCylinderInsts[]=
{
{0,16367,-4804,-250,0,-1,-1,3.567284f,1.981200f},
{0,-2836,4798,-250,0,-1,-1,3.567284f,1.981200f},
{1,-16374,-11578,6302,1,-1,-1,3.353000f,135.129410f},
{2,-2836,4798,18,0,-1,-1,3.567284f,1.981200f},
{3,6756,16375,6302,1,-1,-1,3.353000f,135.129501f},
{4,-16375,11578,-6180,1,-1,-1,3.353000f,135.129410f},
{2,-2836,-4804,18,0,-1,-1,3.567284f,1.981200f},
{0,-2836,-4804,-250,0,-1,-1,3.567284f,1.981200f},
{2,-2846,-4799,-16142,2,-1,-1,2.104218f,79.909309f},
{2,-2846,4804,-16142,2,-1,-1,2.104218f,79.909309f},
{5,6756,-16375,-6180,1,-1,-1,3.353000f,135.129410f},
{2,6738,8174,-16142,2,-1,-1,2.104218f,79.909309f},
{2,16356,-4799,-16142,2,-1,-1,2.104218f,79.909309f},
{2,16356,4804,-16142,2,-1,-1,2.104218f,79.909309f},
{2,16367,-4804,18,0,-1,-1,3.567284f,1.981200f},
{4,-16375,11578,6302,1,-1,-1,3.353000f,135.129410f},
{1,-16374,-11578,-6180,1,-1,-1,3.353000f,135.129410f},
{2,16367,4798,18,0,-1,-1,3.567284f,1.981200f},
{0,16367,4798,-250,0,-1,-1,3.567284f,1.981200f},
{2,6748,8169,18,0,-1,-1,3.567284f,1.981200f},
{0,6748,8169,-250,0,-1,-1,3.567284f,1.981200f},
{6,6726,41,-16374,3,-1,-1,7.174442f,15.087600f},
{7,6729,31,16374,3,-1,-1,7.174442f,15.087600f},
{8,4182,30,4210,4,2,-1,0.324547f,19.536489f},
{9,4936,935,4210,4,2,-1,0.324547f,19.536489f},
{10,6747,1308,4210,4,2,-1,0.324547f,19.536491f},
{11,4927,-875,4210,4,2,-1,0.324547f,19.536491f},
{12,6734,-1252,4210,4,2,-1,0.324547f,19.536489f},
{13,8553,930,4210,4,2,-1,0.324547f,19.536489f},
{14,9298,24,4210,4,2,-1,0.324547f,19.536489f},
{15,8545,-879,4210,4,2,-1,0.324547f,19.536486f},
{16,6740,2700,-112,5,3,2,5.387035f,20.375206f},
{16,6740,2700,-112,5,4,3,5.387035f,20.375206f},
{16,6740,2700,-112,5,5,4,5.387035f,20.375206f},
{16,6740,2700,-112,5,6,5,5.387035f,20.375206f},
{16,6740,2700,-112,5,7,6,5.387035f,20.375206f},
{16,6740,2700,-112,5,8,7,5.387035f,20.375206f},
{16,6740,2700,-112,5,9,8,5.387035f,20.375206f},
{16,6740,2700,-112,5,10,9,5.387035f,20.375206f},
{8,11265,24,4210,4,11,-1,0.324547f,19.536488f},
{9,9935,-1575,4210,4,11,-1,0.324547f,19.536488f},
{10,6734,-2237,4210,4,11,-1,0.324547f,19.536489f},
{11,9944,1627,4210,4,11,-1,0.324547f,19.536489f},
{12,6747,2292,4210,4,11,-1,0.324547f,19.536489f},
{13,3537,-1571,4210,4,11,-1,0.324547f,19.536489f},
{14,2216,30,4210,4,11,-1,0.324547f,19.536489f},
{15,3545,1631,4210,4,11,-1,0.324547f,19.536488f}
};

CylinderVers theCylinderVers[]=
{
{1,16},
{5,16},
{5,10},
{1,12},
{1,6},
{1,20}
};

BoxInst theBoxInsts[]=
{
{17,8856,27,-929,0,12,10,2.103120f,1.219200f,6.102096f},
{18,4634,27,-929,0,12,10,2.103120f,1.219200f,6.102096f},
{19,6745,1084,-929,0,12,10,2.103120f,1.219200f,6.102096f},
{20,6745,-1028,-929,0,12,10,2.103120f,1.219200f,6.102096f},
{17,4970,27,-638,0,13,11,2.103120f,1.219200f,6.102096f},
{18,8502,27,-638,0,13,11,2.103120f,1.219200f,6.102096f},
{19,6736,-856,-638,0,13,11,2.103120f,1.219200f,6.102096f},
{20,6736,911,-638,0,13,11,2.103120f,1.219200f,6.102096f},
{21,5519,-1916,-166,0,3,2,1.271931f,6.522720f,1.891589f},
{22,7957,-1916,-157,0,3,2,1.271931f,6.522720f,1.891589f},
{23,6736,-1916,1021,0,3,2,1.271931f,6.522721f,1.891589f},
{24,6745,-1916,-1214,0,3,2,1.271931f,6.522720f,1.891589f},
{21,5519,-1916,-166,0,4,3,1.271930f,6.522719f,1.891589f},
{22,7957,-1916,-157,0,4,3,1.271930f,6.522719f,1.891589f},
{23,6736,-1916,1021,0,4,3,1.271931f,6.522720f,1.891589f},
{24,6745,-1916,-1214,0,4,3,1.271931f,6.522719f,1.891589f},
{21,5519,-1916,-166,0,5,4,1.271931f,6.522719f,1.891588f},
{22,7957,-1916,-157,0,5,4,1.271931f,6.522720f,1.891589f},
{23,6736,-1916,1021,0,5,4,1.271931f,6.522720f,1.891589f},
{24,6745,-1916,-1214,0,5,4,1.271930f,6.522719f,1.891589f},
{25,5519,-1916,-166,0,6,5,1.271931f,6.522719f,1.891589f},
{22,7957,-1916,-157,0,6,5,1.271931f,6.522720f,1.891589f},
{23,6736,-1916,1021,0,6,5,1.271931f,6.522720f,1.891589f},
{24,6745,-1916,-1214,0,6,5,1.271930f,6.522719f,1.891589f},
{21,5519,-1916,-166,0,7,6,1.271931f,6.522720f,1.891589f},
{22,7957,-1916,-157,0,7,6,1.271931f,6.522720f,1.891589f},
{23,6736,-1916,1021,0,7,6,1.271931f,6.522721f,1.891589f},
{24,6745,-1916,-1214,0,7,6,1.271931f,6.522720f,1.891589f},
{21,5519,-1916,-166,0,8,7,1.271931f,6.522719f,1.891588f},
{22,7957,-1916,-157,0,8,7,1.271931f,6.522720f,1.891589f},
{23,6736,-1916,1021,0,8,7,1.271931f,6.522720f,1.891589f},
{24,6745,-1916,-1214,0,8,7,1.271930f,6.522719f,1.891589f},
{25,5519,-1916,-166,0,9,8,1.271931f,6.522719f,1.891589f},
{22,7957,-1916,-157,0,9,8,1.271931f,6.522720f,1.891589f},
{23,6736,-1916,1021,0,9,8,1.271931f,6.522720f,1.891589f},
{24,6745,-1916,-1214,0,9,8,1.271930f,6.522719f,1.891589f},
{21,5519,-1916,-166,0,10,9,1.271930f,6.522719f,1.891589f},
{22,7957,-1916,-157,0,10,9,1.271930f,6.522719f,1.891589f},
{23,6736,-1916,1021,0,10,9,1.271931f,6.522720f,1.891589f},
{24,6745,-1916,-1214,0,10,9,1.271931f,6.522719f,1.891589f},
{26,6703,-28,-2,0,14,12,2.053633f,0.328581f,0.821453f},
{26,6705,84,-4,0,14,12,2.053633f,0.328581f,0.821453f},
{26,6703,-28,-2,0,15,13,2.053633f,0.328581f,0.821453f},
{26,6705,84,-4,0,15,13,2.053633f,0.328581f,0.821453f},
{26,6705,84,-4,0,16,14,2.053633f,0.328581f,0.821453f},
{26,6703,-28,-2,0,16,14,2.053633f,0.328581f,0.821453f},
{26,6703,-28,-2,0,17,15,2.053633f,0.328581f,0.821453f},
{26,6705,84,-4,0,17,15,2.053633f,0.328581f,0.821453f},
{26,6703,-28,-2,0,18,16,2.053632f,0.328581f,0.821453f},
{26,6705,84,-4,0,18,16,2.053632f,0.328581f,0.821453f},
{26,6703,-28,-2,0,19,17,2.053633f,0.328581f,0.821453f},
{26,6705,84,-4,0,19,17,2.053633f,0.328581f,0.821453f},
{26,6703,-28,-2,0,20,18,2.053633f,0.328581f,0.821453f},
{26,6705,84,-4,0,20,18,2.053633f,0.328581f,0.821453f},
{26,6703,-28,-2,0,21,19,2.053633f,0.328581f,0.821453f},
{26,6705,84,-4,0,21,19,2.053633f,0.328581f,0.821453f},
{26,6703,-28,-2,0,22,20,2.053632f,0.328581f,0.821453f},
{26,6705,84,-4,0,22,20,2.053632f,0.328581f,0.821453f},
{26,6703,-28,-2,0,23,21,2.053632f,0.328581f,0.821453f},
{26,6705,84,-4,0,23,21,2.053632f,0.328581f,0.821453f},
{26,6703,-28,-2,0,24,22,2.053632f,0.328581f,0.821453f},
{26,6705,84,-4,0,24,22,2.053632f,0.328581f,0.821453f},
{26,6705,84,-4,0,25,23,2.053632f,0.328581f,0.821453f},
{26,6703,-28,-2,0,25,23,2.053632f,0.328581f,0.821453f},
{26,6703,-28,-2,0,26,24,2.053632f,0.328581f,0.821453f},
{26,6705,84,-4,0,26,24,2.053632f,0.328581f,0.821453f},
{26,6703,-28,-2,0,27,25,2.053631f,0.328581f,0.821453f},
{26,6705,84,-4,0,27,25,2.053631f,0.328581f,0.821453f},
{26,6703,-28,-2,0,28,26,2.053632f,0.328581f,0.821453f},
{26,6705,84,-4,0,28,26,2.053632f,0.328581f,0.821453f},
{26,6703,-28,-2,0,29,27,2.053632f,0.328582f,0.821453f},
{26,6705,84,-4,0,29,27,2.053632f,0.328582f,0.821453f}
};

TorusInst theTorusInsts[]=
{
{27,6740,52,-4956,0,-1,-1,13.368955f},
{28,6715,42,4956,0,-1,-1,13.368955f},
{29,6745,27,416,1,12,10,7.843735f},
{29,6745,27,973,2,12,10,6.464866f},
{29,6736,27,-1198,2,13,11,6.464863f},
{29,6736,27,-641,1,13,11,7.843732f},
{29,6740,27,2241,3,30,28,9.715066f},
{29,6740,27,-2465,3,31,-1,9.715062f},
{16,6740,-1539,-112,4,3,2,7.760977f},
{16,6740,-2180,-112,4,3,2,7.760977f},
{30,6758,-2149,-112,4,4,3,7.760977f},
{30,6758,-1508,-112,4,4,3,7.760977f},
{31,6740,-2166,-112,4,5,4,7.760977f},
{31,6740,-1534,-112,4,5,4,7.760977f},
{32,6740,-1501,-112,4,6,5,7.760977f},
{32,6740,-2142,-112,4,6,5,7.760977f},
{16,6740,-1550,-142,4,7,6,7.760977f},
{16,6740,-2191,-142,4,7,6,7.760977f},
{31,6723,-2239,-142,4,8,7,7.760977f},
{31,6723,-1598,-142,4,8,7,7.760977f},
{32,6740,-1574,-142,4,9,8,7.760977f},
{32,6740,-2214,-142,4,9,8,7.760977f},
{33,6814,-1496,-76,4,10,9,7.760977f},
{33,6814,-2137,-76,4,10,9,7.760977f},
{34,6682,28,-94,5,14,12,0.980577f},
{34,6740,28,-112,5,14,12,0.980577f},
{35,6726,28,-108,5,14,12,0.980578f},
{35,6726,28,-108,5,15,13,0.980578f},
{34,6682,28,-94,5,15,13,0.980577f},
{34,6740,28,-112,5,15,13,0.980577f},
{34,6740,28,-112,5,16,14,0.980577f},
{34,6682,28,-94,5,16,14,0.980577f},
{35,6726,28,-108,5,16,14,0.980578f},
{35,6726,28,-108,5,17,15,0.980578f},
{34,6682,28,-94,5,17,15,0.980577f},
{34,6740,28,-112,5,17,15,0.980577f},
{35,6726,28,-108,5,18,16,0.980578f},
{34,6682,28,-94,5,18,16,0.980577f},
{34,6740,28,-112,5,18,16,0.980577f},
{35,6726,28,-108,5,19,17,0.980578f},
{34,6682,28,-94,5,19,17,0.980578f},
{34,6740,28,-112,5,19,17,0.980578f},
{35,6726,28,-108,5,20,18,0.980578f},
{34,6682,28,-94,5,20,18,0.980577f},
{34,6740,28,-112,5,20,18,0.980577f},
{35,6726,28,-108,5,21,19,0.980578f},
{34,6682,28,-94,5,21,19,0.980577f},
{34,6740,28,-112,5,21,19,0.980577f},
{35,6726,28,-108,5,22,20,0.980578f},
{34,6682,28,-94,5,22,20,0.980577f},
{34,6740,28,-112,5,22,20,0.980577f},
{34,6740,28,-112,5,23,21,0.980578f},
{35,6726,28,-108,5,23,21,0.980578f},
{34,6682,28,-94,5,23,21,0.980578f},
{34,6740,28,-112,5,24,22,0.980577f},
{35,6726,28,-108,5,24,22,0.980577f},
{34,6682,28,-94,5,24,22,0.980577f},
{34,6682,28,-94,5,25,23,0.980577f},
{35,6726,28,-108,5,25,23,0.980578f},
{34,6740,28,-112,5,25,23,0.980577f},
{34,6740,28,-112,5,26,24,0.980577f},
{35,6726,28,-108,5,26,24,0.980578f},
{34,6682,28,-94,5,26,24,0.980577f},
{34,6740,28,-112,5,27,25,0.980577f},
{35,6726,28,-108,5,27,25,0.980577f},
{34,6682,28,-94,5,27,25,0.980577f},
{34,6740,28,-112,5,28,26,0.980577f},
{35,6726,28,-108,5,28,26,0.980577f},
{34,6682,28,-94,5,28,26,0.980577f},
{34,6740,28,-112,5,29,27,0.980578f},
{35,6726,28,-108,5,29,27,0.980577f},
{34,6682,28,-94,5,29,27,0.980578f},
{36,6764,2981,-6140,6,-1,-1,5.359474f},
{37,6744,2295,6305,6,-1,-1,5.359473f},
{37,6744,3669,6305,6,-1,-1,5.359473f},
{37,6744,2982,6305,6,-1,-1,5.359473f},
{36,6764,2295,-6140,6,-1,-1,5.359474f},
{36,6764,3669,-6140,6,-1,-1,5.359474f},
{36,6764,-3081,-6140,6,-1,-1,5.359474f},
{37,6744,-3080,6305,6,-1,-1,5.359473f},
{37,6744,-2393,6305,6,-1,-1,5.359473f},
{36,6764,-2393,-6140,6,-1,-1,5.359474f},
{36,6764,-3767,-6140,6,-1,-1,5.359474f},
{37,6744,-3767,6305,6,-1,-1,5.359473f}
};

TorusVers theTorusVers[]=
{
{0.076322f,32,12},
{0.079062f,32,10},
{0.057254f,32,10},
{0.082361f,24,10},
{0.166786f,32,8},
{0.078551f,12,6},
{0.165014f,32,10}
};

ConeInst theConeInsts[]=
{
{2,-2836,4798,1044,0,-1,-1},
{0,-2836,4798,-1276,0,-1,-1},
{2,-2836,-4804,1044,0,-1,-1},
{0,-2836,-4804,-1276,0,-1,-1},
{2,16367,-4804,1044,0,-1,-1},
{0,16367,-4804,-1276,0,-1,-1},
{2,16367,4798,1044,0,-1,-1},
{0,16367,4798,-1276,0,-1,-1},
{2,6748,8169,1044,0,-1,-1},
{0,6748,8169,-1276,0,-1,-1},
{38,3029,1849,-6322,1,-1,-1},
{39,10379,1885,-6322,1,-1,-1},
{40,3101,-1830,-6322,1,-1,-1},
{41,10452,-1793,-6322,1,-1,-1},
{42,10426,1839,6322,1,-1,-1},
{43,3076,1875,6322,1,-1,-1},
{44,10354,-1840,6322,1,-1,-1},
{45,3003,-1803,6322,1,-1,-1},
{46,6980,26,-185,2,14,12},
{46,6980,26,-185,2,15,13},
{46,6980,26,-185,2,16,14},
{46,6980,26,-185,2,17,15},
{46,6980,26,-185,2,18,16},
{46,6980,26,-185,2,19,17},
{46,6980,26,-185,2,20,18},
{46,6980,26,-185,2,21,19},
{46,6980,26,-185,2,22,20},
{46,6980,26,-185,2,23,21},
{46,6980,26,-185,2,24,22},
{46,6980,26,-185,2,25,23},
{46,6980,26,-185,2,26,24},
{46,6980,26,-185,2,27,25},
{46,6980,26,-185,2,28,26},
{46,6980,26,-185,2,29,27}
};

ConeVers theConeVers[]=
{
{3.594747f,2.523780f,6.400800f,2,10},
{5.576570f,5.387035f,7.578804f,1,16},
{0.268712f,0.138889f,3.377083f,1,8}
};

SurfOfRevInst theSurfOfRevInsts[]=
{
{47,9275,94,-5620,0,-1,-1},
{36,4180,84,5620,0,-1,-1},
{37,4182,27,-1372,1,12,10},
{37,9299,27,1147,2,13,11},
{48,8556,-881,1620,3,30,28},
{49,6740,-1258,-1836,4,31,-1}
};

SurfOfRevVers theSurfOfRevVers[]=
{
{{-4.359139f,-2.958513f,-0.000000f,4,1.970802f,-2.925227f,-0.000000f,4,1.970802f,-3.197081f,0.000000f,4,1.988851f,-3.298593f,-0.000000f,3,2.027048f,-3.375998f,-0.000000f,3,2.084253f,-3.432359f,-0.000000f,3,2.159328f,-3.470741f,-0.000000f,3,2.251134f,-3.494205f,-0.000000f,3,2.358533f,-3.505817f,-0.000000f,3,2.480385f,-3.508639f,-0.000000f,4,2.566736f,-3.500061f,-0.000000f,3,2.641094f,-3.472886f,-0.000000f,3,2.704348f,-3.431704f,-0.000000f,3,2.757388f,-3.381108f,-0.000000f,3,2.801100f,-3.325687f,-0.000000f,3,2.836375f,-3.270034f,-0.000000f,3,2.864100f,-3.218738f,0.000000f,4,11.824816f,17.751820f,0.000000f,4,-4.380587f,17.751820f,0.000000f,4},0.000000f,1.000000f,0.000000f,-10.616185f,0.000000f,0.000000f,24,19},
{{-5.504433f,-10.641512f,0.000000f,4,-4.774506f,-10.642336f,0.000000f,4,-3.894176f,-10.139321f,0.000000f,4,-3.686893f,-9.865250f,0.000000f,4,-1.490274f,-0.327833f,0.000001f,4,-5.505459f,-0.327833f,-0.000000f,4},0.000000f,1.000000f,0.000000f,-10.586493f,-0.000000f,-0.000000f,24,6},
{{5.504433f,10.569339f,-0.000002f,4,5.464631f,10.713093f,-0.000002f,3,5.382375f,10.793278f,-0.000002f,3,5.247026f,10.808883f,-0.000002f,3,5.047949f,10.758904f,-0.000002f,3,4.774506f,10.642333f,-0.000002f,4,3.894175f,10.139318f,-0.000002f,4,3.839351f,10.110714f,-0.000002f,3,3.792788f,10.076303f,-0.000001f,3,3.752907f,10.028785f,-0.000001f,3,3.718134f,9.960867f,-0.000001f,3,3.686892f,9.865248f,-0.000001f,4,1.490273f,0.327833f,-0.000001f,4,5.505459f,0.327833f,0.000000f,4},0.000000f,-1.000000f,0.000000f,10.586493f,-0.000000f,0.000000f,24,14},
{{-8.638294f,3.612662f,0.000001f,4,-2.510784f,3.622479f,0.000001f,4,-2.510784f,-2.186819f,0.000001f,4,-0.669379f,-2.186883f,0.000000f,4,4.378792f,17.751820f,0.000001f,4,-8.659742f,17.751820f,0.000000f,4},0.000000f,1.000000f,0.000000f,-10.616185f,0.000000f,0.000000f,24,6},
{{8.638292f,-3.612659f,-0.000001f,4,2.510784f,-3.622476f,-0.000001f,4,2.510783f,2.186817f,-0.000000f,4,0.669379f,2.186882f,-0.000000f,4,-4.378790f,-17.751804f,-0.000001f,4,8.659740f,-17.751804f,-0.000000f,4},0.000000f,-1.000000f,-0.000000f,10.616182f,-0.000000f,0.000000f,24,6}
};

#endif //__DEFAULT_NAME_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\scene_renderer.h ===
//
//	scene_renderer.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved

#ifndef __SCENE_RENDERER_H__
#define __SCENE_RENDERER_H__

#include "xbs_math.h"
#include "prim_types.h"

///////////////////////////////////////////////////////////////////////////////
enum ShaderTypes
{
	st_Phong		= 0,
	st_Bump			= 1,
	st_Depth		= 2,
	st_ShadowMap	= 3,
	st_NoTypes		= 4,
};
///////////////////////////////////////////////////////////////////////////////
struct BaseStream
{
	D3DVECTOR p;
};
///////////////////////////////////////////////////////////////////////////////
struct BumpStream
{
	FLOAT	  u,v;
	D3DVECTOR s;
	D3DVECTOR t;
	D3DVECTOR n;
};
///////////////////////////////////////////////////////////////////////////////
struct PhongStream
{
	D3DVECTOR s;
	D3DVECTOR t;
	D3DVECTOR n;
};
///////////////////////////////////////////////////////////////////////////////
struct PrimitiveVersionRecord
{
	DWORD		dwVertexStart;
	DWORD		dwVertexCount;
	DWORD		dwIndexStart;
	DWORD		dwPrimCount;
	DWORD		dwIndexCount;
	DWORD		dwParameter;
};
///////////////////////////////////////////////////////////////////////////////
struct PrimitiveInstanceRecord
{
	unsigned short		idxVersion;

	short				idxPosAnim;
	short				idxRotAnim;
	
	D3DMATRIX			matOffset;		
	D3DMATRIX           matInvOffset;
	
	D3DMATRIX			matScale;
	D3DVECTOR4          vObjScale;
	
	D3DMATRIX			matScaleOffset; 

	bool				bHiZ;
};
///////////////////////////////////////////////////////////////////////////////
class PrimitiveSet
{
private:
	
	LPDIRECT3DVERTEXBUFFER8    pBaseStream;
	LPDIRECT3DVERTEXBUFFER8    pExtraStream;

	LPDIRECT3DINDEXBUFFER8     pIB;

	PrimitiveVersionRecord	 * aVersRecs;
	int						   nVersions;

	PrimitiveInstanceRecord  * aInstRecs;
	int						   nInstances;

	D3DPRIMITIVETYPE           d3dType;
	

	LPDIRECT3DTEXTURE8         pNormalMap;
	LPDIRECT3DCUBETEXTURE8	   pCubeMap;

	D3DVECTOR4				   vAmbient;
	D3DVECTOR4                 vDiffuse;
	D3DVECTOR4                 vSpecular;

	DWORD					   dwPShader;
	DWORD					   dwVShader;

	ShaderTypes				   shaderType;
	PrimitiveTypes             primitiveType;
	bool					   bHiZ;


	void createSphereVersion(const SphereVers *psphere,
							 BYTE *pbase,BYTE *pextra,
							 unsigned short *pi,
							 int idx,int ndet_bias );

	void createCylinderVersion(const CylinderVers *pcyl,
							   BYTE *pbase,BYTE *pextra,
							   unsigned short *pi,
							   int idx,int ndet_bias );

	void createConeVersion(const ConeVers  * pcone,
		                   BYTE *pbase,BYTE *pextra,
						   unsigned short *pi,
						   int idx, int ndet_bias );

	void createBoxVersion(BYTE *pbase,BYTE *pextra,
		                  unsigned short *pi,
						  int idx );

	void createTorusVersion(const TorusVers  * ptorus,
		                    BYTE *pbase,BYTE *pextra,
							unsigned short *pi, 
							int idx,int ndet_bias );

	void createSurfOfRevVersion(const SurfOfRevVers *psurf,
		                        BYTE *pbase,BYTE *pextra,
								unsigned short *pi,
								int idx,int ndet_bias);
	
	void initSphereInstance( const SphereInst *psphere, int idx);
	void initCylinderInstance( const CylinderInst *pcyl, int idx);
	void initConeInstance(const ConeInst *pcone,int idx);
	void initBoxInstance(const BoxInst *pbox,int idx);
	void initTorusInstance(const TorusInst *ptorus,int idx);
	void initSurfOfRevInstance(const SurfOfRevInst *psurf,int idx);

	void initSphereVersion(const SphereVers *psphere,int idx,int ndet_bias);
	void initCylinderVersion(const CylinderVers *pcyl,int idx,int ndet_bias);
	void initConeVersion(const ConeVers *pcone,int idx,int ndet_bias);
	void initBoxVersion(int idx);
	void initTorusVersion(const TorusVers *ptorus,int idx,int ndet_bias);
	void initSurfOfRevVersion(const SurfOfRevVers *psurf,int idx,int ndet_bias);
	
public:

	void Init();
	void UnInit();

	void render(const D3DLIGHT8 &light,bool b_query_blob);
	void renderZ();
	void renderShadowMap(bool b_hi_z);

	void create( const void      *		version_data, 
				 int					num_versions, 
		         const void      *		instance_data,
				 int					num_insts,
				 int					ndet_bias,
				 ShaderTypes			shader,
				 PrimitiveTypes			primitive,
				 LPDIRECT3DTEXTURE8		pnormal_map,
				 LPDIRECT3DCUBETEXTURE8 pcubemap );
};
///////////////////////////////////////////////////////////////////////////////
class SceneRenderer 
{
protected:

	PrimitiveSet	  * pSetHiDet[pt_NoTypes];
	PrimitiveSet	  * pSetLoDet[pt_NoTypes];

	IDirect3DSurface8 * pSBufTarget;			


    IDirect3DSurface8 * pRenderTarget;
    IDirect3DSurface8 * pZBuffer;				  			

    D3DSurface			fakeTarget;

    float				fZOffset;				  
    float				fZSlopeScale;
	
	bool				bUseLoDetail;

	D3DVECTOR4 * decompressQuats(short *p_quat_data, DWORD *p_sign_data,int nquats);
	D3DVECTOR  * decompressVecs(short *p_vec_data, int nvecs);
	short      * decompressIndices(char *p_index_data,int nindices);
	void		 updateSBuffer(bool b_hi_z);

	void createSceneGeometry(PrimitiveSet **pp_sets,int ndet_bias);

public:

	D3DVECTOR4			*pQuats;
	short				*pQuatIdSeq[NUM_ROT_SEQ];

	D3DVECTOR			*pPos;
	short				*pPosIdSeq[NUM_POS_SEQ];

	IDirect3DTexture8	*pSBufDepthHi;           
	IDirect3DTexture8   *pSBufDepthLo;

	D3DMATRIX			matWTSHi;
	D3DMATRIX			matWTSLo;

	D3DMATRIX			*pRotAnims;
	int					nRotAnims;

	D3DVECTOR           *pPosAnims;
	int					nPosAnims;

	void create();
	void destroy();

	void render(bool b_with_shadows,bool b_use_blob_intensity);
	void renderZ();

	void advanceTime(float fElapsedTime, float fDt);
	void updateShadows();
};

#endif // __SCENE_RENDERER_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\Shield.cpp ===
///////////////////////////////////////////////////////////////////////////////
// File: Shield.cpp
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#include "precomp.h"
#include "xbs_math.h"
#include "xbs_app.h"
#include "qrand.h"
#include "Shield.h"
#include "tex_gen.h"

///////////////////////////////////////////////////////////////////////////////
D3DVECTOR Shield::ms_Pos;
const float SHIELD_ROTATION_RATE = (2.0f);
///////////////////////////////////////////////////////////////////////////////
void Shield::Init()
{
	m_RadiusScale = 1.0f;
	m_Speed = 1.0f;
}
///////////////////////////////////////////////////////////////////////////////
void Shield::create()
{
}
///////////////////////////////////////////////////////////////////////////////
void Shield::destroy()
{
	// Nothing to do.
}
///////////////////////////////////////////////////////////////////////////////
void Shield::render(const D3DMATRIX& mat_wtp)
{
	D3DMATRIX transp;
	SetTranspose(m_CurMatrix, &transp);
	gpd3dDev->SetVertexShaderConstant(0,(CONST void *)&transp,4);
	// The ShieldMgr will do the rest of the rendering.
}
///////////////////////////////////////////////////////////////////////////////
void Shield::advanceTime(float fElapsedTime, float fDt)
{
	D3DVECTOR4 quat;

	float pushout_radius = max(0.0f, (PUSHOUT_START_TIME + PUSHOUT_DELTA - fElapsedTime) * OO_PUSHOUT_DELTA);
	pushout_radius = START_PUSHOUT_RADIUS * pushout_radius*pushout_radius;

//MTS	if (gApp.getPulseIntensity() > 0.0f) m_Speed += fDt * 1.65f;
	m_Speed += fDt * 0.8f;

	float theta = fDt * SHIELD_ROTATION_RATE * m_Speed + m_ThetaZero;
	m_ThetaZero = theta;

	SetQuatFromAxis(m_RotationDir, theta, &quat);
	D3DMATRIX mat;
	SetRotationFromRHQuat(quat, &mat);
	MulMats(m_StartRotation, mat, &m_CurMatrix);

	m_CurMatrix._11 *= m_RadiusScale;
	m_CurMatrix._12 *= m_RadiusScale;
	m_CurMatrix._13 *= m_RadiusScale;
	m_CurMatrix._21 *= m_RadiusScale;
	m_CurMatrix._22 *= m_RadiusScale;
	m_CurMatrix._23 *= m_RadiusScale;
	m_CurMatrix._31 *= m_RadiusScale;
	m_CurMatrix._32 *= m_RadiusScale;
	m_CurMatrix._33 *= m_RadiusScale;
//MTS	m_CurMatrix._41 = ms_Pos.x;
//MTS	m_CurMatrix._42 = ms_Pos.y;
//MTS	m_CurMatrix._43 = ms_Pos.z;
	// Adjusted so that the reflection is now stationary as the shield moves around.
	m_CurMatrix._41 = ms_Pos.x + m_CurMatrix._11 * (2.0f + pushout_radius);
	m_CurMatrix._42 = ms_Pos.y + m_CurMatrix._12 * (2.0f + pushout_radius);
	m_CurMatrix._43 = ms_Pos.z + m_CurMatrix._13 * (2.0f);

//MTS	bool b_far_side = m_CurCenter.y > ms_Pos.y;
	TransformPoint(m_ObjectCenter, m_CurMatrix, &m_CurCenter);
}
///////////////////////////////////////////////////////////////////////////////
void Shield::restart(float radian_extent)
{
	float crossing_radian = gApp.fRand01() * 2.09f * Pi;

	// Find the constants to make this happen.
	// First pick a "peak" orientation.
	const float f_RY_ARC = Pi * 1.2f;
	bool b_flipped = false;

	float rz = gApp.fRand01() * 2.0f * Pi;
	float ry = gApp.fRand01() * f_RY_ARC * 2.0f - f_RY_ARC*0.5f;

	if (ry > f_RY_ARC * 0.5f)
	{
		ry += Pi - f_RY_ARC;
		b_flipped = true;
	}

	if (b_flipped)
	{
		m_ThetaZero = rz + Pi - crossing_radian;
	}
	else
	{
		m_ThetaZero = - rz - crossing_radian;
	}

//MTS	char buf[512];
//MTS	sprintf(buf, "Ry=%f, Rz=%f, theta_zero=%f, crossing_radian=%f\n",
//MTS		ry, rz, m_ThetaZero, crossing_radian);
//MTS	OutputDebugString(buf);

	// Rotate around ry
	// Rotate around rz
	D3DMATRIX mat1, mat2;
	SetYRotation(ry, &mat1);
	SetZRotation(rz, &mat2);
	MulMats(mat1, mat2, &m_StartRotation);
	m_RotationDir.x = m_StartRotation._31;
	m_RotationDir.y = m_StartRotation._32;
	m_RotationDir.z = m_StartRotation._33;
//MTS	sprintf(buf, "    RotationDir=%+f,%+f,%+f\n",
//MTS		m_RotationDir.x, m_RotationDir.y, m_RotationDir.z);
//MTS	OutputDebugString(buf);

	m_Speed = 0.0f;
	
	advanceTime(0.0f, 0.0f);
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void ZShield::Init()
{
	m_pShieldVB = NULL;
	m_pShieldIB = NULL;
	m_dwNumVertices = m_dwNumIndices = 0;
	m_Speed = 0.0f;
	m_Theta = 0.0f;
}
///////////////////////////////////////////////////////////////////////////////
void ZShield::create()
{
}
///////////////////////////////////////////////////////////////////////////////
void ZShield::destroy()
{
#define XBS_RELEASE(a) if (a) a->Release(); a = NULL;
	XBS_RELEASE(m_pShieldVB);
	XBS_RELEASE(m_pShieldIB);
#undef XBS_RELEASE
	m_dwNumVertices = 0;
	m_dwNumIndices = 0;
}
///////////////////////////////////////////////////////////////////////////////
void ZShield::render(const D3DMATRIX& mat_wtp)
{
	D3DMATRIX transp;
	SetTranspose(m_CurMatrix, &transp);
	gpd3dDev->SetVertexShaderConstant(0,(CONST void *)&transp,4);

	gpd3dDev->SetStreamSource(0, m_pShieldVB, sizeof(ShieldVertex));
	gpd3dDev->SetIndices(m_pShieldIB, 0);
	gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLESTRIP, 0, m_dwNumVertices,  0, m_dwNumIndices-2 );
}
///////////////////////////////////////////////////////////////////////////////
void ZShield::advanceTime(float fElapsedTime, float fDt)
{
//MTS	if (gApp.getPulseIntensity() > 0.0f) m_Speed += fDt * 1.0f;
	m_Speed += fDt * 0.8f;
	m_Theta += m_Speed * fDt;


	float pushout_radius = max(0.0f, (PUSHOUT_START_TIME + PUSHOUT_DELTA - fElapsedTime) * OO_PUSHOUT_DELTA);
	pushout_radius = START_PUSHOUT_RADIUS * pushout_radius*pushout_radius;

	SetZRotation(m_Theta, &m_CurMatrix);
	m_CurMatrix._41 += m_CurMatrix._11 * (2.0f + pushout_radius);
	m_CurMatrix._42 += m_CurMatrix._12 * (2.0f + pushout_radius);
	m_CurMatrix._43 += m_CurMatrix._13 * (2.0f);
}
///////////////////////////////////////////////////////////////////////////////
// returns the new start_radian, from bottom (-Pi/2) up.
void ZShield::restart(float start_radian, float end_radian, float outside_radius)
{
	destroy();

	m_Theta = gApp.fRand01() * 2.0f * Pi;
	m_Speed = 0.0f;


	// Create the index and vertex buffers.
	const int width = 8;		// number of panels, one less than the number of vertices
	const int height = 6;
	const float inside_radius = outside_radius - 0.5f;
	const float f_vert_radians = end_radian - start_radian;
	const float f_horiz_radians = 1.2f;

	int num_verts_per_face = (height+1) * (width+1);
	int num_side_verts = 2*2*(height+1) + 2*2*(width+1);
	m_dwNumVertices = 
				2*num_verts_per_face +			// top and bottom
				num_side_verts;					// edges

	m_dwNumIndices =
				GetNumberOfIndicesForTristripMesh(width, height, false, true) +
				GetNumberOfIndicesForTristripMesh(width, height, true, true) +
				(height+1)*2 + 2 +
				(width+1)*2 + 2 +
				(height+1)*2 + 2 +
				(width+1)*2 + 1;

	gpd3dDev->CreateVertexBuffer( m_dwNumVertices * sizeof(ShieldVertex), 0, 0, 0, &m_pShieldVB);
	gpd3dDev->CreateIndexBuffer(  m_dwNumIndices  * sizeof(WORD), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_DEFAULT, &m_pShieldIB);




	// Vertex index is (y*(width+1) + x) + ((inside_face) ? num_verts_per_face+num_side_verts : 0)
	// or for the sides num_verts_per_face + 2*(clockwise position from ll) + ((inside_face) ? 1 : 0


	ShieldVertex* p_verts;
	m_pShieldVB->Lock(0, 0, (BYTE**)&p_verts, 0);
	ShieldVertex* pverto = &p_verts[0];
	ShieldVertex* pverti = &p_verts[num_verts_per_face+num_side_verts];

	float f_left_rad   = -0.5f * f_horiz_radians;
	float f_right_rad  = +0.5f * f_horiz_radians;
	float f_top_rad    = end_radian;
	float f_bottom_rad = start_radian;
	float f_horiz_step = (f_right_rad-f_left_rad) / ((float)width);
	float f_vert_step  = (f_top_rad-f_bottom_rad) / ((float)height);

	int i,j;
	float f_i, f_j;

	for (j=0, f_j=f_bottom_rad; j<=height; j++, f_j+=f_vert_step)
	{
		float vs,vc;
		SinCos(f_j, &vs, &vc);
		for (i=0, f_i=f_left_rad; i<=width; i++, f_i+=f_horiz_step)
		{
			float hs,hc;
			SinCos(f_i, &hs, &hc);

			D3DVECTOR norm;
			Set(&norm, vc*hc, vc*hs, vs);

			Set(&pverto->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
			pverto->normal = norm;
			pverto++;
			Set(&pverti->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
			pverti->normal = norm;
			Scale(&pverti->normal, -1.0f);
			pverti++;

			if ((!j) && (i==width)) f_right_rad = f_i;		// set it exactly to what we iterate to
		}
		if (j==height) f_top_rad = f_j;						// set it exactly to what we iterate to
	}

	ShieldVertex* pvert = pverto;


	// Fill in the vertices around the edges.
	f_i = f_left_rad;
	float vs,vc,hs,hc;

	// Start at left, move up.
	SinCos(f_i, &hs, &hc);
	for (j=0, f_j=f_bottom_rad; j<=height; j++, f_j+=f_vert_step)
	{
		SinCos(f_j, &vs, &vc);

		D3DVECTOR norm, side;
		Set(&norm, vc*hc, vc*hs, vs);
		Set(&side, hs, -hc, 0.0f);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}
	j = height;
	f_j = f_top_rad;

	// At UL, move right
	for (i=0, f_i=f_left_rad; i<=width; i++, f_i+=f_horiz_step)
	{
		SinCos(f_i, &hs, &hc);

		D3DVECTOR norm, side;
		Set(&norm, vc*hc, vc*hs, vs);
		Set(&side, -vs*hc, -vs*hs, vc);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}

	// At UR, move down
	for (j=height, f_j=f_top_rad; j>=0; j--, f_j-=f_vert_step)
	{
		if (!j) f_j=f_bottom_rad;
		SinCos(f_j, &vs, &vc);

		D3DVECTOR norm, side;
		Set(&norm, vc*hc, vc*hs, vs);
		Set(&side, -hs, hc, 0.0f);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}

	// At LR, move left
	for (i=width, f_i=f_right_rad; i>=0; i--, f_i-=f_horiz_step)
	{
		if (!i) f_i=f_left_rad;
		SinCos(f_i, &hs, &hc);

		D3DVECTOR norm, side;
		Set(&norm, vc*hc, vc*hs, vs);
		Set(&side, vs*hc, vs*hs, -vc);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}

	// Done with the vertices!
	m_pShieldVB->Unlock();






	WORD* p_indices;
	m_pShieldIB->Lock(0, 0, (BYTE**)&p_indices, 0);

	// Vertex index is (y*(width+1) + x) + ((inside_face) ? num_verts_per_face : 0)
	// or for the sides 2*num_verts_per_face + 2*(clockwise position from ll) + ((inside_face) ? 1 : 0

	// Outside surface.
	int index_num = 0;
	index_num += CreateTristripForMesh(&p_indices[index_num], width, height, false, true, 0);
	index_num += CreateTristripForMesh(&p_indices[index_num], width, height,  true, true, num_verts_per_face+num_side_verts+width, 0, -1);

	int vertex_index = num_verts_per_face;

	// Sides
	for (i=0; i<4; i++)
	{
		p_indices[index_num++] = (WORD)vertex_index;	// first tap of a double-tap

		int length = (i&1) ? width : height;
		for (j=0; j<=length; j++)
		{
			p_indices[index_num++] = vertex_index + 0;
			p_indices[index_num++] = vertex_index + 1;
			vertex_index += 2;
		}
		if (i<3) p_indices[index_num++] = vertex_index - 1;	// double-tap
	}

	m_pShieldIB->Unlock();

}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void ShieldMgr::Init()
{
    int i;

    for (i = 0; i < MAX_SHIELDS; i++)
    {
        m_Shields[i].Init();
    }

    for (int i = 0; i < MAX_ZSHIELDS; i++)
    {
        m_ZShields[i].Init();
    }

	m_NumShields = 0;
	m_pShieldVB = NULL;
	m_pShieldIB = NULL;
	m_dwNumVertices = 0;
	m_dwNumIndices = 0;
	m_dwPShader = 0;
	m_dwVShader = 0;

	Set(&m_Pos, 0.0f, 0.0f, 0.0f);
}
///////////////////////////////////////////////////////////////////////////////
void ShieldMgr::create()
{
	// Make the meshes and stuff.
	const int width = 8;		// number of panels, one less than the number of vertices
	const int height = 6;
	const float inside_radius = 13.1f;
	const float outside_radius = 14.0f;
	const float f_vert_dim = 0.9f;
	const float f_horiz_dim = 1.2f;
	// Partial sphere surface is made by generating a mesh at x=1.0f, and normalizing the vertices.

	m_RadiusScale = 1.0f - 1.2f * (outside_radius-inside_radius) / outside_radius;
	m_MidRadius = (inside_radius + outside_radius) * 0.5f;

	int num_verts_per_face = (height+1) * (width+1);
	int num_side_verts = 2*2*(height+1) + 2*2*(width+1);
	m_dwNumVertices = 
				2*num_verts_per_face +			// top and bottom
				num_side_verts;					// edges

	m_dwNumIndices =
				GetNumberOfIndicesForTristripMesh(width, height, false, true) +
				GetNumberOfIndicesForTristripMesh(width, height, true, true) +
				(height+1)*2 + 2 +
				(width+1)*2 + 2 +
				(height+1)*2 + 2 +
				(width+1)*2 + 1;

	gpd3dDev->CreateVertexBuffer( m_dwNumVertices * sizeof(ShieldVertex), 0, 0, 0, &m_pShieldVB);
	gpd3dDev->CreateIndexBuffer(  m_dwNumIndices  * sizeof(WORD), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_DEFAULT, &m_pShieldIB);




	// Vertex index is (y*(width+1) + x) + ((inside_face) ? num_verts_per_face+num_side_verts : 0)
	// or for the sides num_verts_per_face + 2*(clockwise position from ll) + ((inside_face) ? 1 : 0


	ShieldVertex* p_verts;
	m_pShieldVB->Lock(0, 0, (BYTE**)&p_verts, 0);
	ShieldVertex* pverto = &p_verts[0];
	ShieldVertex* pverti = &p_verts[num_verts_per_face+num_side_verts];

	float f_left_c		= -0.5f * f_horiz_dim;
	float f_right_c		= +0.5f * f_horiz_dim;
	float f_top_c		= +0.5f * f_vert_dim;
	float f_bottom_c	= -0.5f * f_vert_dim;
	float f_horiz_step	= (f_right_c-f_left_c) / ((float)width);
	float f_vert_step	= (f_top_c-f_bottom_c) / ((float)height);

	int i,j;
	float f_i, f_j;

	for (j=0, f_j=f_bottom_c; j<=height; j++, f_j+=f_vert_step)
	{
		for (i=0, f_i=f_left_c; i<=width; i++, f_i+=f_horiz_step)
		{
			D3DVECTOR norm;
			Set(&norm, 1.0f, f_i, f_j);
			Normalize(&norm);

			Set(&pverto->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
			pverto->normal = norm;
			pverto++;
			Set(&pverti->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
			pverti->normal = norm;
			Scale(&pverti->normal, -1.0f);
			pverti++;

			if ((!j) && (i==width)) f_right_c = f_i;		// set it exactly to what we iterate to
		}
		if (j==height) f_top_c = f_j;						// set it exactly to what we iterate to
	}

	ShieldVertex* pvert = pverto;


	// Fill in the vertices around the edges.
	f_i = f_left_c;

	// Start at left, move up.
	for (j=0, f_j=f_bottom_c; j<=height; j++, f_j+=f_vert_step)
	{
		D3DVECTOR norm, side;
		Set(&norm, 1.0f, f_i, f_j);
		Normalize(&norm);

		Set(&side, 0.0f, -1.0f, 0.0f);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}
	j = height;
	f_j = f_top_c;

	// At UL, move right
	for (i=0, f_i=f_left_c; i<=width; i++, f_i+=f_horiz_step)
	{
		D3DVECTOR norm, side;
		Set(&norm, 1.0f, f_i, f_j);
		Normalize(&norm);

		Set(&side, 0.0f, 0.0f, +1.0f);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}

	// At UR, move down
	f_i = f_right_c;
	for (j=height, f_j=f_top_c; j>=0; j--, f_j-=f_vert_step)
	{
		if (!j) f_j=f_bottom_c;

		D3DVECTOR norm, side;
		Set(&norm, 1.0f, f_i, f_j);
		Normalize(&norm);

		Set(&side, 0.0f, +1.0f, 0.0f);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}

	// At LR, move left
	f_j = f_bottom_c;
	for (i=width, f_i=f_right_c; i>=0; i--, f_i-=f_horiz_step)
	{
		if (!i) f_i=f_left_c;

		D3DVECTOR norm, side;
		Set(&norm, 1.0f, f_i, f_j);
		Normalize(&norm);

		Set(&side, 0.0f, 0.0f, -1.0f);

		Set(&pvert->position, outside_radius*norm.x, outside_radius*norm.y, outside_radius*norm.z);
		pvert->normal = side;
		pvert++;
		Set(&pvert->position,  inside_radius*norm.x,  inside_radius*norm.y,  inside_radius*norm.z);
		pvert->normal = side;
		pvert++;
	}

	// Done with the vertices!
	m_pShieldVB->Unlock();






	WORD* p_indices;
	m_pShieldIB->Lock(0, 0, (BYTE**)&p_indices, 0);

	// Vertex index is (y*(width+1) + x) + ((inside_face) ? num_verts_per_face : 0)
	// or for the sides 2*num_verts_per_face + 2*(clockwise position from ll) + ((inside_face) ? 1 : 0

	// Outside surface.
	int index_num = 0;
	index_num += CreateTristripForMesh(&p_indices[index_num], width, height, false, true, 0);
	index_num += CreateTristripForMesh(&p_indices[index_num], width, height,  true, true, num_verts_per_face+num_side_verts+width, 0, -1);

	int vertex_index = num_verts_per_face;

	// Sides
	for (i=0; i<4; i++)
	{
		p_indices[index_num++] = (WORD)vertex_index;	// first tap of a double-tap

		int length = (i&1) ? width : height;
		for (j=0; j<=length; j++)
		{
			p_indices[index_num++] = vertex_index + 0;
			p_indices[index_num++] = vertex_index + 1;
			vertex_index += 2;
		}
		if (i<3) p_indices[index_num++] = vertex_index - 1;	// double-tap
	}

	m_pShieldIB->Unlock();



	// Create the shaders.

	
	// Initialize the pixel shaders.
    if( m_dwPShader )
    {
        gpd3dDev->DeletePixelShader( m_dwPShader );
        m_dwPShader = 0;
    }
#ifndef BINARY_RESOURCE
	m_dwPShader = gApp.loadPixelShader("D:\\Shaders\\shield.xpu");
#else // BINARY_RESOURCE
	m_dwPShader = gApp.loadPixelShader(g_shield_xpu);
#endif // BINARY_RESOURCE

	

	// Initialize the vertex shaders.
    DWORD dwShaderVertexDecl[] =
    {
        D3DVSD_STREAM( 0 ),
        D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),	// position
        D3DVSD_REG( 1, D3DVSDT_FLOAT3 ),	// normal
        D3DVSD_END()
    };
	if (m_dwVShader)
	{
		gpd3dDev->DeleteVertexShader( m_dwVShader );
		m_dwVShader = 0;
	}
#ifndef BINARY_RESOURCE
	m_dwVShader = gApp.loadVertexShader("D:\\Shaders\\shield.xvu", dwShaderVertexDecl);
#else // BINARY_RESOURCE
	m_dwVShader = gApp.loadVertexShader(g_shield_xvu, dwShaderVertexDecl);
#endif // BINARY_RESOURCE



	for (i=0; i<MAX_SHIELDS; i++) m_Shields[i].create();
	for (i=0; i<MAX_ZSHIELDS; i++) m_ZShields[i].create();


	restart();
}
///////////////////////////////////////////////////////////////////////////////
void ShieldMgr::destroy()
{
	for (int i=0; i<m_NumShields; i++) m_Shields[i].destroy();
	m_NumShields = 0;

    if (m_dwPShader) gpd3dDev->DeletePixelShader(  m_dwPShader );
	if (m_dwVShader) gpd3dDev->DeleteVertexShader( m_dwVShader );
    m_dwPShader = 0;
	m_dwVShader = 0;

#define XBS_RELEASE(a) if (a) a->Release(); a = NULL;
	XBS_RELEASE(m_pShieldVB);
	XBS_RELEASE(m_pShieldIB);
#undef XBS_RELEASE
	m_dwNumVertices = 0;
	m_dwNumIndices  = 0;
}
///////////////////////////////////////////////////////////////////////////////
void ShieldMgr::render(bool b_far_side)
{
	// Set default states
    gpd3dDev->SetRenderState( D3DRS_LIGHTING, FALSE );
    gpd3dDev->SetRenderState( D3DRS_ZENABLE,  TRUE );
    gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,  FALSE );

    gpd3dDev->SetTexture( 0, gApp.pStaticReflectionCubeMap );
	gpd3dDev->SetTexture( 1, gApp.pNormalCubeMapHiRes );
	gpd3dDev->SetTexture( 2, gApp.pNormalCubeMapHiRes );
	gpd3dDev->SetTexture( 3, gApp.pNormalCubeMapHiRes );


    gpd3dDev->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_NONE );
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSW, D3DTADDRESS_CLAMP);

	gpd3dDev->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 1, D3DTSS_MIPFILTER, D3DTEXF_NONE );
	gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSW, D3DTADDRESS_CLAMP);

	gpd3dDev->SetTextureStageState( 2, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 2, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 2, D3DTSS_MIPFILTER, D3DTEXF_NONE );
	gpd3dDev->SetTextureStageState( 2, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 2, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 2, D3DTSS_ADDRESSW, D3DTADDRESS_CLAMP);

	
	gpd3dDev->SetTextureStageState( 3, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 3, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 3, D3DTSS_MIPFILTER, D3DTEXF_NONE );
	gpd3dDev->SetTextureStageState( 3, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 3, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 3, D3DTSS_ADDRESSW, D3DTADDRESS_CLAMP);


    gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    gpd3dDev->SetRenderState( D3DRS_SRCBLEND,         D3DBLEND_SRCALPHA );
    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,        D3DBLEND_INVSRCALPHA );

    gpd3dDev->SetTexture( 0, gApp.pStaticReflectionCubeMap );
	gpd3dDev->SetTexture( 1, gApp.pNormalCubeMapHiRes );
	gpd3dDev->SetTexture( 2, gApp.pNormalCubeMapHiRes );
	gpd3dDev->SetTexture( 3, gApp.pNormalCubeMapHiRes );



    gpd3dDev->SetVertexShader( m_dwVShader );
    gpd3dDev->SetPixelShader(  m_dwPShader );




	D3DVECTOR cam_pos, look_dir, look_at;
	gApp.theCamera.getCameraPos (&cam_pos);
	gApp.theCamera.getCameraLook(&look_at);
	Sub(look_at, cam_pos, &look_dir);


	//; Expected vertex shaders constants
	//;    c0-c3    = Transpose of object to world matrix
	//;    c4-c7    = Transpose of view*projection matrix
	//;    c8       = some constants, x=0, y=1, z=2, w=0.5
	//;    c9       = eye location in world space
	//;    c10      = light pos in world space

    // Note: when passing matrices to a vertex shader, we transpose them, since
    // matrix multiplies are done with dot product operations on the matrix rows.
	D3DMATRIX matFinal,matWTP;
	MulMats(gApp.theCamera.matWTC,gApp.theCamera.matProj,&matWTP);
	SetTranspose(matWTP,&matFinal);
	gpd3dDev->SetVertexShaderConstant(4,(CONST void *)&matFinal,4);

	// Constants
	D3DVECTOR4 val[4];
	Set(&val[0], 0.0f, 1.0f, 2.0f, 0.5f);

	// Eye position
	Set(&val[1], cam_pos.x, cam_pos.y, cam_pos.z, 0.0f);

	// Blob Light position
	Set(&val[2],0.f,0.f,0.f,1.f);

	// Mood Light position
	const D3DVECTOR &mlp = gApp.moodLight.Position;
	Set(&val[3],mlp.x,mlp.y,mlp.z,1.f);

	gpd3dDev->SetVertexShaderConstant( 8, &val[0], 4 );

	// alpha
	float f_shading = 0.75f;	// 1 = black, 0 = no shading
	if (gApp.getElapsedTime() < SHIELD_FADE_IN_START_TIME + SHIELD_FADE_IN_DELTA)
	{
		f_shading *= (gApp.getElapsedTime() - SHIELD_FADE_IN_START_TIME) * OO_SHIELD_FADE_IN_DELTA;
	}
	else if (gApp.getElapsedTime() > SHIELD_FADE_OUT_START_TIME)
	{
		f_shading *= (SHIELD_FADE_OUT_START_TIME + SHIELD_FADE_OUT_DELTA - gApp.getElapsedTime()) * OO_SHIELD_FADE_OUT_DELTA;
	}
	f_shading = min(1.0f, max(0.0f, f_shading));
	Set(&val[0], 0.0f, 0.0f, 0.0f, f_shading);	// final alpha is 1.0f - f_shading

	// blob light
	float f_intensity = gApp.getBlobIntensity() * 2.f;
	float fscale = max(0.0f, min(1.0f, (gApp.getElapsedTime()-PUSHOUT_START_TIME) * OO_PUSHOUT_DELTA));
	f_intensity *= fscale*fscale;
	
	Set(&val[1], f_intensity, f_intensity, f_intensity, f_intensity);

	// Specular coefficient
	Set(&val[2], 0.4f,1.f,0.3f,1.f);
	gpd3dDev->SetPixelShaderConstant( 0, &val[0], 3 );


	gpd3dDev->SetIndices( m_pShieldIB, 0 );
    gpd3dDev->SetStreamSource( 0, m_pShieldVB, sizeof(ShieldVertex) );


	float shield_dot[MAX_SHIELDS];
	int shield_order[MAX_SHIELDS];
	int i;
	for (i=0; i<m_NumShields; i++)
	{
		shield_dot[i] = Dot(m_Shields[i].getCenter(), look_dir);
		shield_order[i] = i;
	}


	float f_blob_dot = Dot(m_Pos, look_dir);
	for (int j=m_NumShields-1; j>=0; j--)
	{
		int i = (b_far_side) ? m_NumShields-1-j : j;
		if (  (( b_far_side) && (shield_dot[i]>=f_blob_dot)) ||
			  ((!b_far_side) && (shield_dot[i]< f_blob_dot)) )
		{
			m_Shields[shield_order[i]].render(matWTP);
			gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLESTRIP, 0, m_dwNumVertices,  0, m_dwNumIndices-2 );

		}
	}

	for (int j=m_NumZShields-1; j>=0; j--)
	{
		if (b_far_side) break;
		// Oh, don't bother sorting, see how it looks.
		m_ZShields[j].render(matWTP);	// sets the object to world transpose transform
	}


    // Restore the state
    gpd3dDev->SetPixelShader(  NULL );
    gpd3dDev->SetVertexShader( NULL );

	gpd3dDev->SetTexture(0, NULL);
	gpd3dDev->SetTexture(1, NULL);

    gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,     TRUE );
	 gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );
}
///////////////////////////////////////////////////////////////////////////////
void ShieldMgr::advanceTime(float fElapsedTime, float fDt)
{
	int i;
	for (i=0; i<m_NumShields; i++) m_Shields[i].advanceTime(fElapsedTime, fDt);
	for (i=0; i<m_NumZShields; i++) m_ZShields[i].advanceTime(fElapsedTime, fDt);
}
///////////////////////////////////////////////////////////////////////////////
void ShieldMgr::restart()
{
	Set(&m_Pos, 0.0f, 0.0f, 1.0f);
	Shield::sSetCenter(m_Pos);

	restartShields();
}
///////////////////////////////////////////////////////////////////////////////
void ShieldMgr::restartShields()
{
	float radian_extent = Pi / 6.0f;
	float scale = 1.0f;

	for (m_NumShields=0; m_NumShields<MAX_SHIELDS; m_NumShields++)
	{
		m_Shields[m_NumShields].restart(radian_extent);
		m_Shields[m_NumShields].setRadiusScale(scale, m_MidRadius);
		scale *= m_RadiusScale;
	}

	float min_rad = -0.45f * Pi;
	float max_rad = +0.45f * Pi;
	float rad_step = (max_rad-min_rad) / MAX_ZSHIELDS;
	for (m_NumZShields=0; m_NumZShields<MAX_ZSHIELDS; m_NumZShields++)
	{
		float mid_rad = min_rad + rad_step;
		m_ZShields[m_NumZShields].restart(min_rad, mid_rad, scale * m_MidRadius);
		min_rad = mid_rad;
	}
}
///////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\SOS.C ===
/*
 *	Sound Operating System
 */



#include "sos.h"
#include "protos.h"
#include "ftables.h"			/* event/call function tables */

#include "externs.h"
#include <xtl.h>

#include <stdio.h>


unsigned char	sound_call;

//WCHAR	StringBuffer[256];

//extern	uchar	max_tracks;
extern	uchar	max_sound_call;
extern	ushort	default_clock_value;
extern	const ushort	max_processes;
extern	_base_	uchar	gtifbtmp;

#define	c_p	current_process

/* 
 * boolean T if a sound call is in buffer 
 */
#define	CALL_WAITING  (fifo.fifo_read != fifo.fifo_write)
/*
 * return the sound call in the buffer 
 */


/*************************************************************************
*                                                                        *
* 	Call main if we are going to do sos only						  *
* 	call do_sos_init_return followed by repeated calls to			  *
* 	sos_main if we are just part of another program					  *
*                                                                        *
*************************************************************************/

void	sos_main(void)
{
	struct	process	*tpp;
	do {
	    if (CALL_WAITING) {
			sound_call = get_fifo();
#if DBG
//			swprintf( StringBuffer, L"Current Sound: %d", sound_call);
#endif
			if (sound_call > max_sound_call)
		   	 	continue;
			current_call = &sound_calls[sound_call];
			call_fcns[current_call->type]();
	    }

		current_process = process_queue->next;
		while (current_process != (struct process *)NULL) {
		    tpp = current_process->next;
//			DINT;

				c_p->timer = c_p->timer +c_p->prev_timer - system_clock_music;
				current_process->prev_timer = system_clock_music;


//			EINT;
		    if (current_process->timer < 0) {
				current_channel = current_process->hard_channel;
				current_level = current_process->level;
/*				gtifbtmp = current_channel + current_level*max_tracks;*/
				if (current_level == 0)
					gtifbtmp = current_channel;
				else
					gtifbtmp = current_channel + max_tracks;
				ti = &(track_status[gtifbtmp]);
				if (event_fcns[current_process->function]() == 0) {
					current_process = process_queue->next;
					break;
				}
		    }
		    current_process = tpp;
		}
	} while (sos_only);
}



void	do_sos_init_return()
{

	sos_only = 0;
	fifo.fifo_read = 0;	
	fifo.fifo_write = 0;	
	dev_init();
	init_queuelist();
//	clock_cntr_value[0] = default_clock_value;
	system_clock_music = 1;
	sound_call_table = 0;
}

/*************************************************************************
*                                                                        *
* 	Put the value, value in the receive fifo			  *
*                                                                        *
*************************************************************************/

void put_fifo(uchar value)
{
	fifo.data[fifo.fifo_write++] = value;
	if (fifo.fifo_write >= FIFO_SIZE)
	    fifo.fifo_write = 0;
}

/*************************************************************************
*                                                                        *
* 	Get the next byte in the receive fifo				  *
*                                                                        *
*************************************************************************/
uchar	get_fifo(void)
{
	uchar	retval;

	retval = fifo.data[fifo.fifo_read++];
	if (fifo.fifo_read >= FIFO_SIZE)
	    fifo.fifo_read = 0;
	return(retval);
}
init_queuelist()
{
	uchar	i;
	queue_list[0].prev = (struct process *)NULL;
	queue_list[0].next = &(queue_list[1]);
	for (i = 1; i < max_processes - 1; i++) {
	    queue_list[i].next = &(queue_list[i+1]);	
	    queue_list[i].prev = &(queue_list[i-1]);
	}
	queue_list[max_processes-1].next = (struct process *)NULL;
	queue_list[max_processes-1].prev = &(queue_list[max_processes-2]);

	if ((process_queue = get_process_packet()) == NULL) {
//	    sos_error(SOS_NO_MEM);
	    return(0);
	}
	(*process_queue).next = (struct process *)NULL;
	process_queue->prev = (struct process *)NULL;
	for (i = 0; i < max_tracks; i++)
	    channel_level[i] = 0;
	return(0);
}


void	sos_error(int n)
{

}


/*************************************************************************
*                                                                        *
* 	Utilities for SOS						  *
*                                                                        *
*************************************************************************/



struct track_info *get_track_info_block()
{
	gtifbtmp = (current_level)*max_tracks + current_channel;	
	return(&(track_status[gtifbtmp]));
}
struct track_info *get_track_info_block2(uchar level, uchar chan)
{
	gtifbtmp = (level)*max_tracks + chan;	
	return(&(track_status[gtifbtmp]));
}

struct track_info *get_music_info_block()
{
#if LEVEL_MUSIC==0
	return(&(track_status[current_channel]));
#else
	gtifbtmp = (LEVEL_MUSIC)*max_tracks + current_channel;	
	return(&(track_status[gtifbtmp]));
#endif
}

	
struct track_info *get_music_info_block_i(uchar i)
{
#if LEVEL_MUSIC==0
	return(&(track_status[i]));
#else
	gtifbtmp = (LEVEL_MUSIC)*max_tracks + i;
	return(&(track_status[gtifbtmp]));
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\scene_renderer.cpp ===
//
//	scene_renderer.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#include "precomp.h"
#include "xbs_app.h"
#include "scene_renderer.h"
#include "scene_geometry.h"
#include "renderer.h"
#include "tex_gen.h"
	
const float LO_Z_VAL =   (00.f);
const float CEIL_Z =	   (40.f);
const float FLOOR_Z =    (-30.f);
#define SB_WIDTH   (512)
#define SB_HEIGHT  (512)


DWORD FtoDW(float f)
{
	return *((DWORD *)(&f));
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::Init()
{
	nInstances = 0;
	nVersions  = 0;

	aInstRecs = NULL;
	aVersRecs = NULL;
	
	pIB = NULL;
	pBaseStream = NULL;
	pExtraStream = NULL;
}

///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::UnInit()
{
	if( pBaseStream )
	{
		pBaseStream->Release();
		pBaseStream = NULL;
	}

	if( pExtraStream )
	{
		pExtraStream->Release();
		pExtraStream = NULL;
	}

	if( pIB )
	{
		pIB->Release();
		pIB = NULL;
	}

	if( aInstRecs )
	{
		MemFree(aInstRecs);
		aInstRecs = NULL;
	}

	if( aVersRecs )
	{
		MemFree(aVersRecs);
		aVersRecs = NULL;
	}

	nInstances = 0;
	nVersions  = 0;
}

///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::createSphereVersion( const SphereVers  *psphere, 
									    BYTE *pbase, BYTE *pextra,
										unsigned short *pi,
										int idx,int ndet_bias )
{
	int nSegs   = (int) psphere->nSegs>>ndet_bias;
	int nSlices = (int) nSegs/2;

	float fDeltaTheta = (2.f*Pi)/((float)nSegs);
	float fDeltaPhi   = Pi/((float)nSlices-1);

	int i;

	BaseStream *pbase_stream = (BaseStream *)pbase;

	for(i = 0; i < nSlices; i++)
	{
		float fPhi = fDeltaPhi * ((float)i);

		float fSinPhi,fCosPhi;
		SinCos(fPhi,&fSinPhi,&fCosPhi);
		
		float fV = fPhi/Pi;

		for(int j = 0; j < nSegs; j++)
		{	
			float fTheta = fDeltaTheta * ((float)j);

			float fSinTheta,fCosTheta;
			SinCos(fTheta,&fSinTheta,&fCosTheta);

			Set(&pbase_stream->p,fCosPhi,fCosTheta * fSinPhi,fSinTheta * fSinPhi);
			
			switch(shaderType)
			{
			case st_Phong:
				{
					PhongStream *pps = (PhongStream *)pextra;
					Set( &pps->s, 0.f, -fSinTheta, fCosTheta );
					pps->n = pbase_stream->p;
					Cross( pps->s, pps->n, &pps->t );

					pextra += sizeof(PhongStream);
				}
				break;

			case st_Bump:
				{
					BumpStream *pbs = (BumpStream *)pextra;
					
					Set( &pbs->s, 0.f, -fSinTheta, fCosTheta );
					pbs->n = pbase_stream->p;
					Cross( pbs->s, pbs->n, &pbs->t );
					
					pbs->u = fTheta / (2.f*Pi); 
					pbs->v = fV;

					pextra += sizeof(BumpStream);
				}
				break;
			}

			++pbase_stream; 
		}
	}

	WORD wCurVert = (WORD)aVersRecs[idx].dwVertexStart;

	for(i = 0; i < nSlices - 1; i++)
	{
		WORD wStartVert = wCurVert;

		for(int j = 0; j < nSegs + 1; j++)
		{
			*pi++ = wCurVert + nSegs;
			*pi++ = wCurVert;

			if(j < nSegs - 1)
				++wCurVert;
			else
				wCurVert = wStartVert;
		}

		wCurVert += (WORD)nSegs;
	}
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::createCylinderVersion( const CylinderVers  * pcyl,
										  BYTE *pbase, BYTE *pextra,
										  unsigned short *pi, 
										  int idx,int ndet_bias)
{
	int nsides = pcyl->nSides>>ndet_bias;

	float fDeltaZ = 1.f/((float)pcyl->nHeightSeg);
	float fDeltaTheta = (2.f * Pi)/((float)nsides);

	D3DVECTOR *ppts = (D3DVECTOR*)MemAlloc(sizeof(D3DVECTOR)*(nsides+1));

	BaseStream *pbase_stream = (BaseStream *)pbase;
	
	int i;
	for(i = 0; i < nsides+1; i++)
	{
		float fTheta = fDeltaTheta * ((float)i);
		float fSinTheta,fCosTheta;

		SinCos(fTheta,&fSinTheta,&fCosTheta);
		
		Set( &ppts[i],fCosTheta,fSinTheta,fTheta/(2.f*Pi));
	}

	for(i = nsides-1; i >= 0; i--)
	{
		Set(&pbase_stream->p,ppts[i].x,ppts[i].y,1.f);
		
		switch(shaderType)
		{
		case st_Phong:
			{
				PhongStream *pps = (PhongStream *)pextra;
				
				Set(&pps->s,1.f,0.f,0.f);
				Set(&pps->t,0.f,1.f,0.f);
				Set(&pps->n,0.f,0.f,1.f);

				pextra += sizeof(PhongStream);
			}
			break;

		case st_Bump:
			{
				BumpStream *pbs = (BumpStream *)pextra;
				pbs->u = ppts[i].x + 0.5f;
				pbs->v = ppts[i].y + 0.5f;

				Set(&pbs->s,1.f,0.f,0.f);
				Set(&pbs->t,0.f,1.f,0.f);
				Set(&pbs->n,0.f,0.f,1.f);

				pextra += sizeof(BumpStream);
			}
			break;
		}

		++pbase_stream;
	}

	for(i = 0; i < nsides; i++)
	{
		Set(&pbase_stream->p,ppts[i].x,ppts[i].y,0.f);
		
		switch(shaderType)
		{
		case st_Phong:
			{
				PhongStream *pps = (PhongStream *)pextra;
				
				Set(&pps->s,1.f,0.f,0.f);
				Set(&pps->t,0.f,-1.f,0.f);
				Set(&pps->n,0.f,0.f,-1.f);

				pextra += sizeof(PhongStream);
			}
			break;

		case st_Bump:
			{
				BumpStream *pbs = (BumpStream *)pextra;
				pbs->u = ppts[i].x + 0.5f;
				pbs->v = ppts[i].y + 0.5f;

				Set(&pbs->s,1.f,0.f,0.f);
				Set(&pbs->t,0.f,-1.f,0.f);
				Set(&pbs->n,0.f,0.f,-1.f);

				pextra += sizeof(BumpStream);
			}
			break;
		}

		++pbase_stream;
	}

	for(i = 0; i < pcyl->nHeightSeg+1; i++)
	{
		float fZ = fDeltaZ * ((float)i);

		for(unsigned short j = 0; j < nsides+1; j++)
		{
			Set(&pbase_stream->p,ppts[j].x,ppts[j].y,fZ);
			
			switch(shaderType)
			{
			case st_Phong:
				{
					PhongStream *pps = (PhongStream *)pextra;
					
					Set(&pps->s,-ppts[j].y,ppts[j].x,0.f);
					Set(&pps->t,0.f,0.f,1.f);
					Set(&pps->n,ppts[j].x,ppts[j].y,0.f);

					pextra += sizeof(PhongStream);
				}
				break;

			case st_Bump:
				{
					BumpStream *pbs = (BumpStream *)pextra;

					pbs->u = 4.0f * ppts[j].z;
					pbs->v = fZ * 32.0f;
		
					Set(&pbs->s,-ppts[j].y,ppts[j].x,0.f);
					Set(&pbs->t,0.f,0.f,1.f);
					Set(&pbs->n,ppts[j].x,ppts[j].y,0.f);

					pextra += sizeof(BumpStream);
				}
				break;
			}

			++pbase_stream;
		}
	}

	MemFree(ppts);

	
	WORD wStartCap = (WORD)aVersRecs[idx].dwVertexStart;
	for(i = 0; i < nsides; i++)
	{
		*pi++ = wStartCap++;
	}

	for(i = 0; i < nsides; i++)
	{
		*pi++ = wStartCap++;
	}

	CreateTristripForMesh(pi, nsides, pcyl->nHeightSeg, false, false, wStartCap);
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::createConeVersion( const ConeVers * pcone,
									  BYTE *pbase,BYTE *pextra,
									  unsigned short *pi, 
									  int idx,int ndet_bias )
{
	int nsides = pcone->nSides>>ndet_bias;

	float fDeltaTheta = (2.f * Pi)/((float)nsides);

	D3DVECTOR *ppts_bot = (D3DVECTOR*)MemAlloc(sizeof(D3DVECTOR)*(nsides+1));
	D3DVECTOR *ppts_top = (D3DVECTOR*)MemAlloc(sizeof(D3DVECTOR)*(nsides+1));

	BaseStream *pbase_stream = (BaseStream *)pbase;

	int i;
	for(i = 0; i < nsides+1; i++)
	{
		float fTheta = fDeltaTheta * ((float)i);
		float fSinTheta,fCosTheta;

		SinCos(fTheta,&fSinTheta,&fCosTheta);
		
		Set(&ppts_bot[i],fCosTheta * pcone->fRad1,fSinTheta * pcone->fRad1,fTheta/(2.f*Pi));
		Set(&ppts_top[i],fCosTheta * pcone->fRad2,fSinTheta * pcone->fRad2,fTheta/(2.f*Pi));
	}

	float fDeltaZ = 1.f/((float)(pcone->nHeightSeg));

	for(i = nsides-1; i >= 0; i--)
	{
		Set(&pbase_stream->p,ppts_top[i].x,ppts_top[i].y,pcone->fHeight);
		
		switch(shaderType)
		{
		case st_Phong:
			{
				PhongStream *pps = (PhongStream *)pextra;
				
				Set(&pps->s,1.f,0.f,0.f);
				Set(&pps->t,0.f,1.f,0.f);
				Set(&pps->n,0.f,0.f,1.f);

				pextra += sizeof(PhongStream);
			}
			break;

		case st_Bump:
			{
				BumpStream *pbs = (BumpStream *)pextra;
				pbs->u = ppts_top[i].x + 0.5f;
				pbs->v = ppts_top[i].y + 0.5f;

				Set(&pbs->s,1.f,0.f,0.f);
				Set(&pbs->t,0.f,1.f,0.f);
				Set(&pbs->n,0.f,0.f,1.f);

				pextra += sizeof(BumpStream);
			}
			break;
		}

		++pbase_stream;
	}

	for(i = 0; i < nsides; i++)
	{
		Set(&pbase_stream->p,ppts_bot[i].x,ppts_bot[i].y,0.f);
		
		switch(shaderType)
		{
		case st_Phong:
			{
				PhongStream *pps = (PhongStream *)pextra;
				
				Set(&pps->s,1.f,0.f,0.f);
				Set(&pps->t,0.f,-1.f,0.f);
				Set(&pps->n,0.f,0.f,-1.f);

				pextra += sizeof(PhongStream);
			}
			break;

		case st_Bump:
			{
				BumpStream *pbs = (BumpStream *)pextra;
				pbs->u = ppts_bot[i].x + 0.5f;
				pbs->v = ppts_bot[i].y + 0.5f;

				Set(&pbs->s,1.f,0.f,0.f);
				Set(&pbs->t,0.f,-1.f,0.f);
				Set(&pbs->n,0.f,0.f,-1.f);

				pextra += sizeof(BumpStream);
			}
			break;
		}

		++pbase_stream;
	}

	for(i = 0; i < pcone->nHeightSeg + 1; i++)
	{
		float fZ = fDeltaZ * ((float)i);

		for(unsigned short j = 0; j < nsides+1; j++)
		{	
			Set( &pbase_stream->p,
				 ppts_bot[j].x + fZ * ( ppts_top[j].x - ppts_bot[j].x ),
				 ppts_bot[j].y + fZ * ( ppts_top[j].y - ppts_bot[j].y ),
				 fZ * pcone->fHeight );


			switch(shaderType)
			{
			case st_Phong:
				{
					PhongStream *pps = (PhongStream *)pextra;
					
					Set(&pps->s, -ppts_top[j].y, ppts_top[j].x, 0.f );
					Normalize(&pps->s);
					Set(&pps->t,ppts_top[j].x - ppts_bot[j].x,ppts_top[j].y - ppts_bot[j].y,pcone->fHeight);
					Normalize(&pps->t);
					Cross(pps->s,pps->t,&pps->n);

					pextra += sizeof(PhongStream);
				}
				break;

			case st_Bump:
				{
					BumpStream *pbs = (BumpStream *)pextra;

					Set(&pbs->s, -ppts_top[j].y, ppts_top[j].x, 0.f );
					Normalize(&pbs->s);
					Set(&pbs->t,ppts_top[j].x - ppts_bot[j].x,ppts_top[j].y - ppts_bot[j].y,pcone->fHeight);
					Normalize(&pbs->t);
					Cross(pbs->s,pbs->t,&pbs->n);

					pbs->u = ppts_top[j].z;
					pbs->v = fZ;

					pextra += sizeof(BumpStream);
				}
				break;
			}
			
			++pbase_stream;
		}
	}

	MemFree(ppts_bot);
	MemFree(ppts_top);
	

	WORD wStartCap = (WORD)aVersRecs[idx].dwVertexStart;
	for(i = 0; i < nsides; i++)
	{
		*pi++ = wStartCap++;
	}

	for(i = 0; i < nsides; i++)
	{
		*pi++ = wStartCap++;
	}	

	CreateTristripForMesh(pi, nsides, pcone->nHeightSeg, false, false, wStartCap);
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::createBoxVersion( BYTE *pbase, BYTE *pextra,
									 unsigned short *pi,int idx)
{
	float fUV[4][2] = 
	{ 
		{ 0.f,1.f }, 
		{ 1.f,1.f }, 
		{ 1.f,0.f },
		{ 0.f,0.f } 
	};

	BaseStream *pbase_stream = (BaseStream *)pbase;

	for(int i = 0; i < 6; i++)
	{
		D3DVECTOR vS,vT,vN;
		D3DVECTOR vPos[4];

		switch(i)
		{
			case 0: 
			{
				Set(&vS,0.f,1.f,0.f);
				Set(&vT,0.f,0.f,1.f);
				Set(&vN,1.f,0.f,0.f);
				
				Set(&vPos[0],0.5f,-0.5f, 0.5f);
				Set(&vPos[1],0.5f, 0.5f, 0.5f);
				Set(&vPos[2],0.5f, 0.5f,-0.5f);
				Set(&vPos[3],0.5f,-0.5f,-0.5f);
				break;
			}
			case 1: 
			{
				Set(&vS,-1.f,0.f,0.f);
				Set(&vT, 0.f,0.f,1.f);
				Set(&vN, 0.f,1.f,0.f);
			
				Set(&vPos[0], 0.5f,0.5f, 0.5f);
				Set(&vPos[1],-0.5f,0.5f, 0.5f);
				Set(&vPos[2],-0.5f,0.5f,-0.5f);
				Set(&vPos[3], 0.5f,0.5f,-0.5f);
				break;
			}

			case 2: 
			{
				Set(&vS,0.f,-1.f,0.f);
				Set(&vT,0.f, 0.f,1.f);
				Set(&vN,0.f,-1.f,0.f);

				Set(&vPos[0],-0.5f, 0.5f, 0.5f);
				Set(&vPos[1],-0.5f,-0.5f, 0.5f);
				Set(&vPos[2],-0.5f,-0.5f,-0.5f);
				Set(&vPos[3],-0.5f, 0.5f,-0.5f);
				break;
			}

			case 3: 
			{
				Set(&vS,1.f, 0.f,0.f);
				Set(&vT,0.f, 0.f,1.f);
				Set(&vN,0.f,-1.f,0.f);

				Set(&vPos[0],-0.5f,-0.5f, 0.5f);
				Set(&vPos[1], 0.5f,-0.5f, 0.5f);
				Set(&vPos[2], 0.5f,-0.5f,-0.5f);
				Set(&vPos[3],-0.5f,-0.5f,-0.5f);
				break;
			}

			case 4: 
			{
				Set(&vS,1.f,0.f,0.f);
				Set(&vT,0.f,1.f,0.f);
				Set(&vN,0.f,0.f,1.f);

				Set(&vPos[0],-0.5f, 0.5f,0.5f);
				Set(&vPos[1], 0.5f, 0.5f,0.5f);
				Set(&vPos[2], 0.5f,-0.5f,0.5f);
				Set(&vPos[3],-0.5f,-0.5f,0.5f);
				break;
			}

			case 5: 
			{
				Set(&vS,1.f, 0.f, 0.f);
				Set(&vT,0.f,-1.f, 0.f);
				Set(&vN,0.f, 0.f,-1.f);

				Set(&vPos[0],-0.5f,-0.5f,-0.5f);
				Set(&vPos[1], 0.5f,-0.5f,-0.5f);
				Set(&vPos[2], 0.5f, 0.5f,-0.5f);
				Set(&vPos[3],-0.5f, 0.5f,-0.5f);
				break;
			}
		}

		for(int j = 0; j < 4; j++)
		{
			pbase_stream->p = vPos[j];
			
			switch(shaderType)
			{
			case st_Phong:
				{
					PhongStream *pps = (PhongStream *)pextra;
					
					pps->s = vS;
					pps->t = vT;
					pps->n = vN;

					pextra += sizeof(PhongStream);
				}
				break;

			case st_Bump:
				{
					BumpStream *pbs = (BumpStream *)pextra;

					pbs->u = fUV[j][0];
					pbs->v = fUV[j][1];
					pbs->s = vS;
					pbs->t = vT;
					pbs->n = vN;

					pextra += sizeof(BumpStream);
				}
				break;
			}

			++pbase_stream;
		}

		WORD wVertStart = i * 4;

		*pi++ = wVertStart;
		*pi++ = wVertStart+1;
		*pi++ = wVertStart+2;
		*pi++ = wVertStart;
		*pi++ = wVertStart+2;
		*pi++ = wVertStart+3;
	}
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::createTorusVersion( const TorusVers  * ptorus,
									   BYTE *pbase, BYTE *pextra,
									   unsigned short *pi, 
									   int idx,int ndet_bias)
{
	int nsegs = ptorus->nSegs>>ndet_bias;
	int nsides = ptorus->nSides>>ndet_bias;

	float fDeltaTheta = (2.f*Pi)/((float)nsegs);
	float fDeltaPhi   = (2.f*Pi)/((float)nsides);

	BaseStream *pbase_stream = (BaseStream *)pbase;

	int i;
	for(i = 0; i < nsides; i++)
	{
		float fPhi = fDeltaPhi * ((float)i);
		float fSinPhi,fCosPhi;

		SinCos(fPhi,&fSinPhi,&fCosPhi);

		float fRad = 1.f + (fCosPhi * ptorus->fRatio);
		float fV   = fPhi/(2.f * Pi);
		float fZ   = fSinPhi * ptorus->fRatio; 
		
		for(unsigned short j = 0; j < nsegs; j++)
		{
			float fTheta = fDeltaTheta * ((float)j);
			float fSinTheta,fCosTheta;

			SinCos(fTheta,&fSinTheta,&fCosTheta);

			Set(&pbase_stream->p,fCosTheta * fRad,fSinTheta * fRad,fZ);

			switch(shaderType)
			{
			case st_Phong:
				{
					PhongStream *pps = (PhongStream *)pextra;
					
					Set(&pps->s,-fSinTheta,fCosTheta,0.f);
					Set(&pps->t, fCosTheta * -fSinPhi,fSinTheta * -fSinPhi,fCosPhi);

					Cross(pps->s,pps->t,&pps->n);

					pextra += sizeof(PhongStream);
				}
				break;

			case st_Bump:
				{
					BumpStream *pbs = (BumpStream *)pextra;

					pbs->u = fTheta/(2.f*Pi);
					pbs->v = fV;

					Set(&pbs->s,-fSinTheta,fCosTheta,0.f);
					Set(&pbs->t, fCosTheta * -fSinPhi,fSinTheta * -fSinPhi,fCosPhi);

					Cross(pbs->s,pbs->t,&pbs->n);

					pextra += sizeof(BumpStream);
				}
				break;
			}

			++pbase_stream;
		}
	}

	WORD wVersionStart = (WORD)aVersRecs[idx].dwVertexStart;
	WORD wLoVert = wVersionStart;
	WORD wHiVert = wVersionStart + nsegs;

	for(i = 0; i < nsides; i++)
	{
		WORD wStripStartLo = wLoVert;
		WORD wStripStartHi = wHiVert;
		
		for(unsigned short j = 0; j < nsegs + 1; j++)
		{
			*pi++ = wLoVert;
			*pi++ = wHiVert;
			
			if(j < nsegs - 1)
			{
				++wLoVert;
				++wHiVert;
			}
			else
			{
				wLoVert = wStripStartLo;
				wHiVert = wStripStartHi;
			}
		}

		wLoVert += (WORD)nsegs;

		if ( (i+1) < (nsides - 1) )
		{
			wHiVert += (WORD)nsegs;
		}
		else
		{
			wHiVert = wVersionStart;	
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::createSurfOfRevVersion( const SurfOfRevVers  * psurf,
										   BYTE *pbase, BYTE *pextra, 
										   unsigned short *pi, 
										   int idx,int ndet_bias )
{		
	DWORD dwPolyPts = psurf->nPts;
	for (int i = 0; i < psurf->nPts; i++)
	{
		if (!(psurf->pts[i].flags & sr_Smooth))
			++dwPolyPts;
	}

	D3DVECTOR *pSegNorms = (D3DVECTOR *) _alloca(dwPolyPts * sizeof(D3DVECTOR));
	D3DVECTOR *pVerts    = (D3DVECTOR *) _alloca(dwPolyPts * sizeof(D3DVECTOR));

	enum NormalCalcFlags
	{
		nf_PrevSeg,	
		nf_NextSeg, 
		nf_BothSeg  
	};

	DWORD * dwVertFlags = (DWORD *)_alloca(dwPolyPts * sizeof(DWORD));

	D3DVECTOR vAxis;
	D3DVECTOR ptOnAxis;

	Set(&vAxis,psurf->ax,psurf->ay,psurf->az);
	Set(&ptOnAxis,psurf->px,psurf->py,psurf->pz);

	int ntot = 0;
	for (i = 0; i < psurf->nPts; i++)
	{
		Set(&pVerts[ntot],psurf->pts[i].x,psurf->pts[i].y,psurf->pts[i].z); 

		if (!(psurf->pts[i].flags & sr_Smooth))
		{
			dwVertFlags[ntot] = nf_PrevSeg;
			Set(&pSegNorms[ntot],0.f,0.f,0.f);
			ntot++;
			
			Set(&pVerts[ntot],psurf->pts[i].x,psurf->pts[i].y,psurf->pts[i].z); 
			dwVertFlags[ntot] = nf_NextSeg;
		}
		else 
		{
			dwVertFlags[ntot] = nf_BothSeg;
		}

		DWORD dwNextVert = i + 1;
		if(dwNextVert == psurf->nPts)
			dwNextVert = 0;

		D3DVECTOR seg;
		Set(&seg, psurf->pts[dwNextVert].x - psurf->pts[i].x,
			      psurf->pts[dwNextVert].y - psurf->pts[i].y,
				  psurf->pts[dwNextVert].z - psurf->pts[i].z );

		D3DVECTOR axisToPt;
		Set(&axisToPt,psurf->pts[dwNextVert].x - ptOnAxis.x,
					  psurf->pts[dwNextVert].y - ptOnAxis.y,
					  psurf->pts[dwNextVert].z - ptOnAxis.z );

		D3DVECTOR tang;
		Cross( vAxis,axisToPt,&tang );
		Cross( tang, seg, &pSegNorms[ntot] );
		Normalize(&pSegNorms[ntot]);

		ntot++;
	}

	D3DVECTOR *pVertNorms = (D3DVECTOR *) _alloca(dwPolyPts * sizeof(D3DVECTOR));
	for (i = 0; i < (int)dwPolyPts; i++)
	{
		switch(dwVertFlags[i])
		{
			case nf_PrevSeg:
				pVertNorms[i] = pSegNorms[(i + dwPolyPts - 1) % dwPolyPts];
				break;

			case nf_NextSeg:
				pVertNorms[i] = pSegNorms[i];
				break;

			case nf_BothSeg:
				Add( pSegNorms[(i + dwPolyPts - 1) % dwPolyPts], pSegNorms[i], &pVertNorms[i] );
				Normalize(&pVertNorms[i]);
				break;
		}
	}

	int nsegs = psurf->nSegs>>ndet_bias;

	float fDeltaTheta = (2.f * Pi)/((float)nsegs);
	float fDeltaV     = 1.f/((float)psurf->nPts-1);

	BaseStream *pbase_stream = (BaseStream *)pbase;

	for (i = 0; i < (nsegs+1); i++)
	{
		float fTheta = fDeltaTheta * ((float)i);
		
		D3DVECTOR4 quat;
		SetQuatFromAxis(vAxis,fTheta,&quat);

		D3DMATRIX rotMat;
		SetRotationFromRHQuat(quat,&rotMat);

		float fU = fTheta/(2.f * Pi);

		unsigned unique_vert_count = 0;
		for (unsigned int j = 0; j < dwPolyPts; j++)
		{
			float fV = fDeltaV * ((float)unique_vert_count);

			if(dwVertFlags[j] != nf_PrevSeg)
				++unique_vert_count;

			D3DVECTOR pt;
			Sub(pVerts[j],ptOnAxis,&pt);
			TransformVector(pt,rotMat,&pbase_stream->p);
			
			pbase_stream->p.x += ptOnAxis.x;
			pbase_stream->p.y += ptOnAxis.y;
			pbase_stream->p.z += ptOnAxis.z;

			switch(shaderType)
			{
			case st_Phong:
				{
					PhongStream *pps = (PhongStream *)pextra;
					
					D3DVECTOR tang;
					Cross(vAxis,pt,&tang);
					TransformVector(tang,rotMat,&pps->s);
					Normalize(&pps->s);

					TransformVector(pVertNorms[j],rotMat,&pps->n);
					Cross(pps->n,pps->s,&pps->t);

					pextra += sizeof(PhongStream);
				}
				break;

			case st_Bump:
				{
					BumpStream *pbs = (BumpStream *)pextra;

					D3DVECTOR tang;
					Cross(vAxis,pt,&tang);
					TransformVector(tang,rotMat,&pbs->s);
					Normalize(&pbs->s);

					TransformVector(pVertNorms[j],rotMat,&pbs->n);
					Cross(pbs->n,pbs->s,&pbs->t);

					pbs->u = fU * 10.f;
					pbs->v = fV * 10.f;

					pextra += sizeof(BumpStream);
				}
				break;
			}

			++pbase_stream;
		}
	}

	WORD wLeftVert  = (WORD)aVersRecs[idx].dwVertexStart;
	WORD wRightVert = (WORD)(wLeftVert + dwPolyPts);

	for (i = 0; i < nsegs; i++)
	{
		WORD wStartStripRight = wRightVert;
		WORD wStartStripLeft  = wLeftVert;

		for (unsigned int j = 0; j < dwPolyPts + 1; j++)
		{
			*pi++ = wRightVert;
			*pi++ = wLeftVert;

			if( j < dwPolyPts - 1 )
			{
				++wRightVert;
				++wLeftVert;
			}
			else
			{
				wRightVert = wStartStripRight;
				wLeftVert  = wStartStripLeft;
			}
		}

		wLeftVert = wRightVert;
		wRightVert += (WORD)dwPolyPts;
	}
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initSphereInstance(const SphereInst *psphere, int idx)
{
	SetScale( psphere->fRad, psphere->fRad, psphere->fRad, &aInstRecs[idx].matScale );
	Set( &aInstRecs[idx].vObjScale,psphere->fRad,psphere->fRad,psphere->fRad,1.f );
	
	SetIdentity( &aInstRecs[idx].matOffset );
	aInstRecs[idx].matOffset._41 = ((float)psphere->tx) * OO_PRIM_TRANS_SCALE_X + PRIM_TRANS_DELTA_X;
	aInstRecs[idx].matOffset._42 = ((float)psphere->ty) * OO_PRIM_TRANS_SCALE_Y + PRIM_TRANS_DELTA_Y;
	aInstRecs[idx].matOffset._43 = ((float)psphere->tz) * OO_PRIM_TRANS_SCALE_Z + PRIM_TRANS_DELTA_Z;

	SetIdentity(&aInstRecs[idx].matInvOffset);
	aInstRecs[idx].matInvOffset._41 = -(((float)psphere->tx) * OO_PRIM_TRANS_SCALE_X + PRIM_TRANS_DELTA_X);
	aInstRecs[idx].matInvOffset._42 = -(((float)psphere->ty) * OO_PRIM_TRANS_SCALE_Y + PRIM_TRANS_DELTA_Y);
	aInstRecs[idx].matInvOffset._43 = -(((float)psphere->tz) * OO_PRIM_TRANS_SCALE_Z + PRIM_TRANS_DELTA_Z);

	MulMats(aInstRecs[idx].matScale,aInstRecs[idx].matOffset,&aInstRecs[idx].matScaleOffset);

	aInstRecs[idx].idxVersion = psphere->idVersion;

	aInstRecs[idx].idxPosAnim = psphere->idPosAnim;
	aInstRecs[idx].idxRotAnim = psphere->idRotAnim;

	SceneRenderer &scene = gApp.sceneGeom;

	D3DVECTOR v;
	Set(&v,aInstRecs[idx].matOffset._41,aInstRecs[idx].matOffset._42,aInstRecs[idx].matOffset._43);

	if(aInstRecs[idx].idxRotAnim >= 0)
	{
		D3DVECTOR tmp = v;
		D3DVECTOR4 &q = scene.pQuats[scene.pQuatIdSeq[aInstRecs[idx].idxRotAnim][0]];
		
		D3DMATRIX mat;
		SetRotationFromLHQuat(q,&mat);

		TransformVector(tmp,mat,&v);
	}
	if(aInstRecs[idx].idxPosAnim >= 0)
	{
		v.x += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].x;
		v.y += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].y;
		v.z += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].z;
	}

	aInstRecs[idx].bHiZ = v.z > LO_Z_VAL;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initCylinderInstance( const CylinderInst *pcyl, int idx )
{
	SetScale(pcyl->fRad,pcyl->fRad,pcyl->fHalfHeight*2.f,&aInstRecs[idx].matScale);
	Set(&aInstRecs[idx].vObjScale,pcyl->fRad,pcyl->fRad,pcyl->fHalfHeight*2.f,1.f);


	SetRotationFromLHQuat(gApp.sceneGeom.pQuats[pcyl->idQuat],&aInstRecs[idx].matOffset);
	aInstRecs[idx].matOffset._41 = ((float)pcyl->tx) * OO_PRIM_TRANS_SCALE_X + PRIM_TRANS_DELTA_X;
	aInstRecs[idx].matOffset._42 = ((float)pcyl->ty) * OO_PRIM_TRANS_SCALE_Y + PRIM_TRANS_DELTA_Y;
	aInstRecs[idx].matOffset._43 = ((float)pcyl->tz) * OO_PRIM_TRANS_SCALE_Z + PRIM_TRANS_DELTA_Z;
	SetInverse(aInstRecs[idx].matOffset,&aInstRecs[idx].matInvOffset);

	MulMats(aInstRecs[idx].matScale,aInstRecs[idx].matOffset,&aInstRecs[idx].matScaleOffset);

	aInstRecs[idx].idxVersion = pcyl->idVersion;

	aInstRecs[idx].idxPosAnim = pcyl->idPosAnim;
	aInstRecs[idx].idxRotAnim = pcyl->idRotAnim;

	SceneRenderer &scene = gApp.sceneGeom;

	D3DVECTOR v;
	Set(&v,aInstRecs[idx].matOffset._41,aInstRecs[idx].matOffset._42,aInstRecs[idx].matOffset._43);

	if(aInstRecs[idx].idxRotAnim >= 0)
	{
		D3DVECTOR tmp = v;
		D3DVECTOR4 &q = scene.pQuats[scene.pQuatIdSeq[aInstRecs[idx].idxRotAnim][0]];
		
		D3DMATRIX mat;
		SetRotationFromLHQuat(q,&mat);

		TransformVector(tmp,mat,&v);
	}
	if(aInstRecs[idx].idxPosAnim >= 0)
	{
		v.x += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].x;
		v.y += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].y;
		v.z += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].z;
	}

	aInstRecs[idx].bHiZ = v.z > LO_Z_VAL;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initConeInstance( const ConeInst *pcone, int idx )
{
	SetScale(1.f,1.f,1.f,&aInstRecs[idx].matScale);
	Set(&aInstRecs[idx].vObjScale,1.f,1.f,1.f,1.f);

	SetRotationFromLHQuat(gApp.sceneGeom.pQuats[pcone->idQuat],&aInstRecs[idx].matOffset);
	aInstRecs[idx].matOffset._41 = ((float)pcone->tx) * OO_PRIM_TRANS_SCALE_X + PRIM_TRANS_DELTA_X;
	aInstRecs[idx].matOffset._42 = ((float)pcone->ty) * OO_PRIM_TRANS_SCALE_Y + PRIM_TRANS_DELTA_Y;
	aInstRecs[idx].matOffset._43 = ((float)pcone->tz) * OO_PRIM_TRANS_SCALE_Z + PRIM_TRANS_DELTA_Z;
	SetInverse(aInstRecs[idx].matOffset,&aInstRecs[idx].matInvOffset);
	
	aInstRecs[idx].matScaleOffset = aInstRecs[idx].matOffset;

	aInstRecs[idx].idxVersion = pcone->idVersion;

	aInstRecs[idx].idxPosAnim = pcone->idPosAnim;
	aInstRecs[idx].idxRotAnim = pcone->idRotAnim;


	SceneRenderer &scene = gApp.sceneGeom;

	D3DVECTOR v;
	Set(&v,aInstRecs[idx].matOffset._41,aInstRecs[idx].matOffset._42,aInstRecs[idx].matOffset._43);

	if(aInstRecs[idx].idxRotAnim >= 0)
	{
		D3DVECTOR tmp = v;
		D3DVECTOR4 &q = scene.pQuats[scene.pQuatIdSeq[aInstRecs[idx].idxRotAnim][0]];
		
		D3DMATRIX mat;
		SetRotationFromLHQuat(q,&mat);

		TransformVector(tmp,mat,&v);
	}
	if(aInstRecs[idx].idxPosAnim >= 0)
	{
		v.x += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].x;
		v.y += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].y;
		v.z += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].z;
	}

	aInstRecs[idx].bHiZ = v.z > LO_Z_VAL;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initBoxInstance( const BoxInst *pbox, int idx )
{
	SetScale(pbox->fWidth,pbox->fLen,pbox->fHeight,&aInstRecs[idx].matScale);
	Set(&aInstRecs[idx].vObjScale,pbox->fWidth,pbox->fLen,pbox->fHeight,1.f);	

	SetRotationFromLHQuat(gApp.sceneGeom.pQuats[pbox->idQuat],&aInstRecs[idx].matOffset);
	aInstRecs[idx].matOffset._41 = ((float)pbox->tx) * OO_PRIM_TRANS_SCALE_X + PRIM_TRANS_DELTA_X;
	aInstRecs[idx].matOffset._42 = ((float)pbox->ty) * OO_PRIM_TRANS_SCALE_Y + PRIM_TRANS_DELTA_Y;
	aInstRecs[idx].matOffset._43 = ((float)pbox->tz) * OO_PRIM_TRANS_SCALE_Z + PRIM_TRANS_DELTA_Z;	
	SetInverse(aInstRecs[idx].matOffset,&aInstRecs[idx].matInvOffset);
	
	MulMats(aInstRecs[idx].matScale,aInstRecs[idx].matOffset,&aInstRecs[idx].matScaleOffset);

	aInstRecs[idx].idxVersion = 0;

	aInstRecs[idx].idxPosAnim = pbox->idPosAnim;
	aInstRecs[idx].idxRotAnim = pbox->idRotAnim;

	SceneRenderer &scene = gApp.sceneGeom;

	D3DVECTOR v;
	Set(&v,aInstRecs[idx].matOffset._41,aInstRecs[idx].matOffset._42,aInstRecs[idx].matOffset._43);

	if(aInstRecs[idx].idxRotAnim >= 0)
	{
		D3DVECTOR tmp = v;
		D3DVECTOR4 &q = scene.pQuats[scene.pQuatIdSeq[aInstRecs[idx].idxRotAnim][0]];
		
		D3DMATRIX mat;
		SetRotationFromLHQuat(q,&mat);

		TransformVector(tmp,mat,&v);
	}
	if(aInstRecs[idx].idxPosAnim >= 0)
	{
		v.x += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].x;
		v.y += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].y;
		v.z += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].z;
	}

	aInstRecs[idx].bHiZ = v.z > LO_Z_VAL;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initTorusInstance( const TorusInst *ptorus, int idx )
{	
	SetScale( ptorus->fRad1, ptorus->fRad1, ptorus->fRad1, &aInstRecs[idx].matScale );
	Set(&aInstRecs[idx].vObjScale,ptorus->fRad1,ptorus->fRad1,ptorus->fRad1,1.f);

	SetRotationFromLHQuat(gApp.sceneGeom.pQuats[ptorus->idQuat],&aInstRecs[idx].matOffset);		
	aInstRecs[idx].matOffset._41 = ((float)ptorus->tx) * OO_PRIM_TRANS_SCALE_X + PRIM_TRANS_DELTA_X;
	aInstRecs[idx].matOffset._42 = ((float)ptorus->ty) * OO_PRIM_TRANS_SCALE_Y + PRIM_TRANS_DELTA_Y;
	aInstRecs[idx].matOffset._43 = ((float)ptorus->tz) * OO_PRIM_TRANS_SCALE_Z + PRIM_TRANS_DELTA_Z;
	SetInverse(aInstRecs[idx].matOffset,&aInstRecs[idx].matInvOffset);

	MulMats(aInstRecs[idx].matScale,aInstRecs[idx].matOffset,&aInstRecs[idx].matScaleOffset);

	aInstRecs[idx].idxVersion = ptorus->idVersion;

	aInstRecs[idx].idxPosAnim = ptorus->idPosAnim;
	aInstRecs[idx].idxRotAnim = ptorus->idRotAnim;

	SceneRenderer &scene = gApp.sceneGeom;

	D3DVECTOR v;
	Set(&v,aInstRecs[idx].matOffset._41,aInstRecs[idx].matOffset._42,aInstRecs[idx].matOffset._43);

	if(aInstRecs[idx].idxRotAnim >= 0)
	{
		D3DVECTOR tmp = v;
		D3DVECTOR4 &q = scene.pQuats[scene.pQuatIdSeq[aInstRecs[idx].idxRotAnim][0]];
		
		D3DMATRIX mat;
		SetRotationFromLHQuat(q,&mat);

		TransformVector(tmp,mat,&v);
	}
	if(aInstRecs[idx].idxPosAnim >= 0)
	{
		v.x += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].x;
		v.y += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].y;
		v.z += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].z;
	}

	aInstRecs[idx].bHiZ = v.z > LO_Z_VAL;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initSurfOfRevInstance( const SurfOfRevInst *psurf, int idx )
{
	SetScale(1.f,1.f,1.f,&aInstRecs[idx].matScale);
	Set( &aInstRecs[idx].vObjScale, 1.f,1.f,1.f,1.f );

	SetRotationFromLHQuat(gApp.sceneGeom.pQuats[psurf->idQuat],&aInstRecs[idx].matOffset);
	aInstRecs[idx].matOffset._41 = ((float)psurf->tx) * OO_PRIM_TRANS_SCALE_X + PRIM_TRANS_DELTA_X;
	aInstRecs[idx].matOffset._42 = ((float)psurf->ty) * OO_PRIM_TRANS_SCALE_Y + PRIM_TRANS_DELTA_Y;
	aInstRecs[idx].matOffset._43 = ((float)psurf->tz) * OO_PRIM_TRANS_SCALE_Z + PRIM_TRANS_DELTA_Z;
	SetInverse(aInstRecs[idx].matOffset,&aInstRecs[idx].matInvOffset);
	
	aInstRecs[idx].matScaleOffset = aInstRecs[idx].matOffset;

	aInstRecs[idx].idxVersion = psurf->idVersion;

	aInstRecs[idx].idxPosAnim = psurf->idPosAnim;
	aInstRecs[idx].idxRotAnim = psurf->idRotAnim;

	SceneRenderer &scene = gApp.sceneGeom;

	D3DVECTOR v;
	Set(&v,aInstRecs[idx].matOffset._41,aInstRecs[idx].matOffset._42,aInstRecs[idx].matOffset._43);

	if(aInstRecs[idx].idxRotAnim >= 0)
	{
		D3DVECTOR tmp = v;
		D3DVECTOR4 &q = scene.pQuats[scene.pQuatIdSeq[aInstRecs[idx].idxRotAnim][0]];
		
		D3DMATRIX mat;
		SetRotationFromLHQuat(q,&mat);

		TransformVector(tmp,mat,&v);
	}
	if(aInstRecs[idx].idxPosAnim >= 0)
	{
		v.x += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].x;
		v.y += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].y;
		v.z += scene.pPos[scene.pPosIdSeq[aInstRecs[idx].idxPosAnim][0]].z;
	}

	aInstRecs[idx].bHiZ = v.z > LO_Z_VAL;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initSphereVersion(const SphereVers *psphere, int idx,int ndet_bias)
{
	DWORD dwSegs   = psphere->nSegs>>ndet_bias;
	DWORD dwSlices = dwSegs/2;

	aVersRecs[idx].dwVertexCount = dwSegs * dwSlices; 
	aVersRecs[idx].dwPrimCount   = (dwSlices-1) * (dwSegs+1) * 2 - 2;
	aVersRecs[idx].dwIndexCount  = aVersRecs[idx].dwPrimCount + 2;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initCylinderVersion(const CylinderVers *pcyl, int idx,int ndet_bias)
{
	int nsides = pcyl->nSides>>ndet_bias;

	aVersRecs[idx].dwVertexCount = (nsides+1) * (pcyl->nHeightSeg+1) + (nsides+1) * 2;
	aVersRecs[idx].dwPrimCount   = 0;
	aVersRecs[idx].dwIndexCount  = 2*nsides + GetNumberOfIndicesForTristripMesh(nsides, pcyl->nHeightSeg);
	aVersRecs[idx].dwParameter   = nsides;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initConeVersion(const ConeVers *pcone,int idx,int ndet_bias)
{
	int nsides = pcone->nSides>>ndet_bias;

	aVersRecs[idx].dwVertexCount = (nsides+1) * (pcone->nHeightSeg+1) + (nsides+1) * 2;
	aVersRecs[idx].dwPrimCount   = 0;
	aVersRecs[idx].dwIndexCount  = 2*nsides + GetNumberOfIndicesForTristripMesh(nsides, pcone->nHeightSeg);
	aVersRecs[idx].dwParameter   = nsides;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initBoxVersion( int idx )
{
	aVersRecs[idx].dwVertexCount = 24;
	aVersRecs[idx].dwPrimCount   = 12;
	aVersRecs[idx].dwIndexCount  = 36;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initTorusVersion(const TorusVers *ptorus,int idx,int ndet_bias)
{
	int nsides = ptorus->nSides>>ndet_bias;
	int nsegs = ptorus->nSegs>>ndet_bias;

	aVersRecs[idx].dwVertexCount = nsegs * nsides; 
	aVersRecs[idx].dwPrimCount   = (nsegs + 1) * nsides * 2 - 2;
	aVersRecs[idx].dwIndexCount  = aVersRecs[idx].dwPrimCount + 2;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::initSurfOfRevVersion(const SurfOfRevVers *psurf,int idx,int ndet_bias)
{
	DWORD dwDupVerts = 0;

	for (unsigned short i = 0; i < psurf->nPts; i++)
	{
		if (!(psurf->pts[i].flags & sr_Smooth))
			++dwDupVerts;
	}

	int nsegs = psurf->nSegs>>ndet_bias;

	aVersRecs[idx].dwVertexCount = (dwDupVerts + psurf->nPts) * (nsegs+1);
	aVersRecs[idx].dwPrimCount   = (psurf->nPts + dwDupVerts +1) * 2 * nsegs - 2;
	aVersRecs[idx].dwIndexCount  = aVersRecs[idx].dwPrimCount + 2;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::renderZ()
{
	ShaderTypes shader = shaderType;
	shaderType = st_Depth;
	
	render(gApp.blobLight,false);
	
	shaderType = shader;
}

///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::renderShadowMap(bool b_hi_z)
{
	ShaderTypes shader = shaderType;
	shaderType = st_ShadowMap;
	
	bHiZ = b_hi_z;
	
	render(gApp.blobLight,false);
	
	shaderType = shader;
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::render( const D3DLIGHT8 &light,bool b_query_blob )
{
	gpd3dDev->SetStreamSource( 0, pBaseStream, sizeof(BaseStream) );
	gpd3dDev->SetIndices( pIB, 0 );

	bool b_no_lighting = false;

	switch( shaderType )
	{
	case st_Bump:
		{
			gpd3dDev->SetTexture(0,pNormalMap);
			gpd3dDev->SetTexture(1,pCubeMap);
			gpd3dDev->SetTexture(2,pCubeMap);
			
			gpd3dDev->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_ANISOTROPIC);
			gpd3dDev->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_ANISOTROPIC);
			gpd3dDev->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_NONE );
			gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSU,  D3DTADDRESS_WRAP );
			gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSV,  D3DTADDRESS_WRAP );
			gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSW,  D3DTADDRESS_WRAP );

			gpd3dDev->SetStreamSource( 1, pExtraStream, sizeof(BumpStream) );
			gpd3dDev->SetVertexShader(gApp.dwVShader[st_Bump]);
			gpd3dDev->SetPixelShader (gApp.dwPShader[st_Bump]);
		}
		break;

	case st_Phong:
		{
			gpd3dDev->SetTexture(1,pCubeMap);
			gpd3dDev->SetTexture(2,pCubeMap);
			gpd3dDev->SetStreamSource( 1, pExtraStream, sizeof(PhongStream) );
			gpd3dDev->SetVertexShader( gApp.dwVShader[st_Phong] );
			gpd3dDev->SetPixelShader ( gApp.dwPShader[st_Phong] );
		}
		break;

	case st_Depth:
		{
			b_no_lighting = true;
		}
		break;

	case st_ShadowMap:
		{
			b_no_lighting = true;
			gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE,		TRUE );
			gpd3dDev->SetRenderState( D3DRS_ZENABLE,			TRUE );
		}
		break;
	}

	D3DVECTOR4 light_val[3];

	if( !b_query_blob  && !b_no_lighting)
	{
		Set(&light_val[0],vAmbient.x * light.Ambient.r,
						  vAmbient.y * light.Ambient.g,
						  vAmbient.z * light.Ambient.b, 1.f );

		Set(&light_val[1],vDiffuse.x * light.Diffuse.r,
						  vDiffuse.y * light.Diffuse.g,
						  vDiffuse.z * light.Diffuse.b, 1.f );

		Set(&light_val[2],vSpecular.x * light.Specular.r,
						  vSpecular.y * light.Specular.g,
						  vSpecular.z * light.Specular.b, 1.f );

		gpd3dDev->SetPixelShaderConstant ( 0,(CONST void *)&light_val, 3 );

		D3DVECTOR4 vAtten;
		Set(&vAtten,light.Attenuation0,light.Attenuation1,light.Attenuation2, 1.f );
		gpd3dDev->SetVertexShaderConstant( 7, (CONST void *)&vAtten,1 );	
	}

	const D3DMATRIX  &matWTP = gApp.theCamera.getWTP();

	SceneRenderer & scene = gApp.sceneGeom;

	for(int i = 0; i < nInstances; i++)
	{
		const PrimitiveInstanceRecord &inst = aInstRecs[i];

		D3DMATRIX world_mat;
		D3DMATRIX inv_world_mat;
		
		if (inst.idxPosAnim >= 0 || inst.idxRotAnim >= 0)
		{
			D3DMATRIX tmp;
			if(inst.idxRotAnim >= 0)
			{
			
				MulMats( inst.matOffset,scene.pRotAnims[inst.idxRotAnim], &tmp );
			}
			else
			{
				tmp = inst.matOffset;
			}

			if(inst.idxPosAnim >= 0)
			{
				tmp._41 += scene.pPosAnims[inst.idxPosAnim].x;
				tmp._42 += scene.pPosAnims[inst.idxPosAnim].y;
				tmp._43 += scene.pPosAnims[inst.idxPosAnim].z;
			}
			

			SetInverse(tmp,&inv_world_mat);
			MulMats(inst.matScale,tmp,&world_mat);
		}
		else
		{
			world_mat = inst.matScaleOffset;
			inv_world_mat = inst.matInvOffset;
		}

		if(shaderType == st_ShadowMap)
		{
			if(inst.bHiZ != bHiZ)
				continue;

			gpd3dDev->SetTransform(D3DTS_WORLD,&world_mat);
		}
		else
		{
			D3DMATRIX matTmp,matFinal;

			MulMats(world_mat,matWTP,&matTmp);
			SetTranspose(matTmp,&matFinal);

			gpd3dDev->SetVertexShaderConstant(0,&matFinal,4);
		}

		D3DVECTOR4 vObjEyePos;
		D3DVECTOR4 vObjLightPos;

		if( b_query_blob && !b_no_lighting )
		{
			D3DVECTOR4 tmp;

			float fIntensity;

			tmp.w = 1.0f;
			gApp.vblob.getLightForPosition(&tmp,&fIntensity,*((D3DVECTOR *) &world_mat._41));
			
			fIntensity = gApp.getBlobIntensity() * 2.f ;

			Set(&light_val[0],vAmbient.x * light.Ambient.r * fIntensity,
							  vAmbient.y * light.Ambient.g * fIntensity,
							  vAmbient.z * light.Ambient.b * fIntensity, 1.f );
		
			Set(&light_val[1],vDiffuse.x * light.Diffuse.r * fIntensity,
							  vDiffuse.y * light.Diffuse.g * fIntensity,
							  vDiffuse.z * light.Diffuse.b * fIntensity, 1.f );

  			Set(&light_val[2],vSpecular.x * light.Specular.r * fIntensity,
							  vSpecular.y * light.Specular.g * fIntensity,
							  vSpecular.z * light.Specular.b * fIntensity, 1.f );


			gpd3dDev->SetPixelShaderConstant ( 0,(CONST void *)&light_val, 3 );

			TransformPoint( tmp, inv_world_mat, &vObjLightPos);

			D3DVECTOR4 vAtten;

			float f_oo_intensity = 1.f/fIntensity;
			Set(&vAtten,light.Attenuation0,light.Attenuation1 * f_oo_intensity, 
										   light.Attenuation2 * f_oo_intensity, 1.f );
			gpd3dDev->SetVertexShaderConstant( 7, (CONST void *)&vAtten,1 );
		}
		else if(shaderType != st_ShadowMap && shaderType != st_Depth)
		{
			TransformPoint( light.Position, inv_world_mat, &vObjLightPos);	
		}
		
		if( shaderType != st_ShadowMap && shaderType != st_Depth )
		{
			vObjLightPos.w = 1.f;
			gpd3dDev->SetVertexShaderConstant(4,&vObjLightPos,1);

			TransformPoint(*((D3DVECTOR *)&gApp.theCamera.matCTW._41),inv_world_mat,&vObjEyePos);
			vObjEyePos.w = 1.f;
		
			gpd3dDev->SetVertexShaderConstant(5,&vObjEyePos,1);
			gpd3dDev->SetVertexShaderConstant(6,&inst.vObjScale,1);

			D3DMATRIX matOTS,finalSMat;
			MulMats(world_mat, (inst.bHiZ) ? scene.matWTSHi : scene.matWTSLo , &matOTS );
			SetTranspose(matOTS,&finalSMat);
			gpd3dDev->SetVertexShaderConstant(8,&finalSMat,4);

			gpd3dDev->SetTexture(3,(inst.bHiZ) ? scene.pSBufDepthHi: scene.pSBufDepthLo );
		}
		
		const PrimitiveVersionRecord &vs = aVersRecs[aInstRecs[i].idxVersion];

		if ((primitiveType==pt_Cylinder) || (primitiveType==pt_Cone))
		{
			int num_indices_in_cap = vs.dwParameter;
			if (num_indices_in_cap)
			{
				gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLEFAN,vs.dwVertexStart,vs.dwVertexCount,
												vs.dwIndexStart + 0, num_indices_in_cap-2 );
				gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLEFAN,vs.dwVertexStart,vs.dwVertexCount,
												vs.dwIndexStart + num_indices_in_cap, num_indices_in_cap-2 );
			}

			gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLESTRIP,vs.dwVertexStart,vs.dwVertexCount,
											vs.dwIndexStart + 2*num_indices_in_cap,vs.dwIndexCount - 2*num_indices_in_cap - 2 );
		}
		else
		{
			gpd3dDev->DrawIndexedPrimitive( d3dType,vs.dwVertexStart,vs.dwVertexCount,
											vs.dwIndexStart,vs.dwPrimCount );
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void PrimitiveSet::create( const void *				version_data, 
						   int						num_versions, 
						   const void *				instance_data,
						   int						num_insts,
						   int						ndet_bias,
						   ShaderTypes				shader,
						   PrimitiveTypes			primitive,
						   LPDIRECT3DTEXTURE8		pnormal_map,
						   LPDIRECT3DCUBETEXTURE8	pcube_map)
{
	nVersions  = num_versions;
	nInstances = num_insts;

	shaderType = shader;
	primitiveType = primitive;
	pNormalMap = pnormal_map;
	pCubeMap   = pcube_map;

	aVersRecs = (PrimitiveVersionRecord*)MemAlloc(sizeof(PrimitiveVersionRecord)*nVersions);
	ZeroMemory(aVersRecs,sizeof(PrimitiveVersionRecord)*nVersions);

	DWORD dwVertCount  = 0;
	DWORD dwIndexCount = 0;

	unsigned short i;
	for(i = 0; i < nVersions; i++)
	{
		aVersRecs[i].dwVertexStart = dwVertCount;
		aVersRecs[i].dwIndexStart  = dwIndexCount;
		
		switch(primitiveType)
		{
		case pt_Sphere:		
			initSphereVersion( ((const SphereVers *)version_data)+i,i,ndet_bias);
			break;
		case pt_Cone:		
			initConeVersion( ((const ConeVers *)version_data)+i,i,ndet_bias);				
			break;
		case pt_Cylinder:	
			initCylinderVersion( ((const CylinderVers *)version_data)+i,i,ndet_bias);
			break;
		case pt_Box:		
			initBoxVersion(i);													
			break;
		case pt_Torus:		
			initTorusVersion( ((const TorusVers *)version_data)+i,i,ndet_bias);			
			break;
		case pt_SurfOfRev:	
			initSurfOfRevVersion( ((const SurfOfRevVers *)version_data)+i,i,ndet_bias);	
			break;
		}

		dwVertCount  += aVersRecs[i].dwVertexCount;
		dwIndexCount += aVersRecs[i].dwIndexCount;
	}

	DWORD dwExtraStride = 0;

	switch(shaderType)
	{
	case st_Bump:  dwExtraStride = sizeof(BumpStream);  break;
	case st_Phong: dwExtraStride = sizeof(PhongStream); break;
	}

	gpd3dDev->CreateVertexBuffer( sizeof(BaseStream) * dwVertCount, NULL, NULL, NULL, &pBaseStream );
	gpd3dDev->CreateVertexBuffer( dwExtraStride * dwVertCount, NULL, NULL, NULL, &pExtraStream );

	gpd3dDev->CreateIndexBuffer ( sizeof(unsigned short) * dwIndexCount,NULL,D3DFMT_INDEX16,NULL,&pIB);

	BYTE *pbase,*pextra;

	pBaseStream->Lock(0,sizeof(BaseStream) * dwVertCount,&pbase,NULL);
	pExtraStream->Lock(0,dwExtraStride * dwVertCount,&pextra,NULL);

	unsigned short *pi;
	pIB->Lock(0,sizeof(unsigned short) * dwIndexCount,(BYTE **)&pi,NULL);

	for(i = 0; i < nVersions; i++)
	{
		switch(primitiveType)
		{
		case pt_Sphere:		
			createSphereVersion( ((const SphereVers *)version_data)+i,pbase, pextra, pi, i,ndet_bias ); 
			break;		  
		case pt_Cone:		
			createConeVersion( ((const ConeVers *)version_data)+i,pbase,pextra,pi,i,ndet_bias );	
			break;
		case pt_Cylinder:	
			createCylinderVersion( ((const CylinderVers *)version_data)+i,pbase,pextra,pi,i,ndet_bias);  
			break;
		case pt_Box:		
			createBoxVersion(pbase,pextra,pi,i);
			break;
		case pt_Torus:		
			createTorusVersion( ((const TorusVers *)version_data)+i,pbase,pextra,pi,i,ndet_bias);
			break;
		case pt_SurfOfRev:	
			createSurfOfRevVersion( ((const SurfOfRevVers *)version_data)+i,pbase,pextra,pi,i,ndet_bias );
			break;
		}
		
		pbase  += (aVersRecs[i].dwVertexCount * sizeof(BaseStream));
		pextra += (aVersRecs[i].dwVertexCount * dwExtraStride );
		pi     += aVersRecs[i].dwIndexCount;
	}

	pBaseStream->Unlock();
	pExtraStream->Unlock();

	pIB->Unlock();

	aInstRecs  = (PrimitiveInstanceRecord*)MemAlloc(sizeof(PrimitiveInstanceRecord)*nInstances);
	ZeroMemory(aInstRecs,sizeof(PrimitiveInstanceRecord)*nInstances);

	for(i = 0; i < nInstances; i++)
	{
		switch(primitiveType)
		{
		case pt_Sphere:		
			initSphereInstance(((const SphereInst *)instance_data)+i,i);		
			break;
		case pt_Cone:		
			initConeInstance( ((const ConeInst *)instance_data)+i,i);			
			break;
		case pt_Cylinder:	
			initCylinderInstance( ((const CylinderInst *)instance_data)+i,i);   
			break;
		case pt_Box:		
			initBoxInstance( ((const BoxInst *)instance_data)+i,i);			    
			break;											  
		case pt_Torus:		
			initTorusInstance( ((const TorusInst *)instance_data)+i,i);         
			break;
		case pt_SurfOfRev:	
			initSurfOfRevInstance( ((const SurfOfRevInst *)instance_data)+i,i); 
			break;
		}	
	}

	switch(primitiveType)
	{	
	case pt_Box:
		d3dType = D3DPT_TRIANGLELIST;
		break;

	case pt_Cone:	
	case pt_Cylinder:	
	case pt_Sphere:	
	case pt_Torus:		
	case pt_SurfOfRev:
		d3dType = D3DPT_TRIANGLESTRIP;
		break;
	}	

	Set(&vAmbient, 0.2079f,1.f,0.100f,1.f );
	Set(&vDiffuse, 0.2079f,1.f,0.100f,1.f );
	Set(&vSpecular,0.2079f,1.f,0.100f,1.f );
}
///////////////////////////////////////////////////////////////////////////////
D3DVECTOR4 * SceneRenderer::decompressQuats(short *p_quat_data,DWORD *p_sign_data,int nquats)
{
	D3DVECTOR4 *pquats = (D3DVECTOR4 *)MemAlloc(sizeof(D3DVECTOR4)*nquats);
	float f_oo_scale = 1.f/32750.f;
	for(int i = 0; i < nquats; i++,p_quat_data+=3)
	{
		pquats[i].x = ((float)p_quat_data[0]) * f_oo_scale;
		pquats[i].y = ((float)p_quat_data[1]) * f_oo_scale;
		pquats[i].z = ((float)p_quat_data[2]) * f_oo_scale;

		pquats[i].w = fast_sqrt(1.f - pquats[i].x*pquats[i].x - 
						          pquats[i].y*pquats[i].y - 
								  pquats[i].z*pquats[i].z );
		
		int idw  = i >> 5;
		int bpos = i & 31;
		bool b_pos_w = ((p_sign_data[idw] & (1<<bpos))) != 0;
		if(!b_pos_w) 
			pquats[i].w *= -1.f;
	}

	return pquats;
}
///////////////////////////////////////////////////////////////////////////////
D3DVECTOR * SceneRenderer::decompressVecs(short *p_vec_data,int nvecs)
{
	D3DVECTOR * pvecs = (D3DVECTOR *)MemAlloc(sizeof(D3DVECTOR)*nvecs);
	for(int i = 0; i < nvecs; i++,p_vec_data+=3)
	{
		pvecs[i].x = ((float)p_vec_data[0]) * OO_POS_ANIM_SCALE_X + POS_ANIM_DELTA_X;
		pvecs[i].y = ((float)p_vec_data[1]) * OO_POS_ANIM_SCALE_Y + POS_ANIM_DELTA_Y;
		pvecs[i].z = ((float)p_vec_data[2]) * OO_POS_ANIM_SCALE_Z + POS_ANIM_DELTA_Z;
	}
	return pvecs;
}
///////////////////////////////////////////////////////////////////////////////
short * SceneRenderer::decompressIndices(char * p_indices,int nindices)
{
	short * pindices = (short *)MemAlloc(sizeof(short)*nindices);

	if(p_indices[0] == 127)
	{
		char hi = p_indices[1];
		char lo = p_indices[2];

		pindices[0] = ((((short)hi)&0xff)<<8) | (((short)lo)&0xff);
		p_indices += 2;
	}
	else
	{
		pindices[0] = p_indices[0];
	}

	for(int i = 1; i < nindices; i++)
	{
		if(p_indices[i] == 127)
		{
			char hi = p_indices[i+1];
			char lo = p_indices[i+2];

			pindices[i] = ((((short)hi)&0xff)<<8) | (((short)lo)&0xff);
			pindices[i] += pindices[i-1];
			
			p_indices   += 2;
		}
		else
		{
			pindices[i] = pindices[i-1] + p_indices[i];
		}
	}

	return pindices;
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::create()
{
	for(int i = 0; i < pt_NoTypes; i++)
	{
		pSetHiDet[i] = (PrimitiveSet *)MemAlloc(sizeof(PrimitiveSet));
        pSetHiDet[i]->Init();

		pSetLoDet[i] = (PrimitiveSet *)MemAlloc(sizeof(PrimitiveSet));
        pSetLoDet[i]->Init();
	}

	pQuats = decompressQuats(theQuats,theQuatSigns,numQuats);
	for(i = 0; i < NUM_ROT_SEQ; i++)
	{
		pQuatIdSeq[i] = decompressIndices(theRotAnimSeq[i].quatIds,MAX_ROT_SAMPLES);	
	}

	pPos = decompressVecs(thePos,numPos);
	for(i = 0; i < NUM_POS_SEQ; i++)
	{
		pPosIdSeq[i] = decompressIndices(thePosAnimSeq[i].posIds,MAX_POS_SAMPLES);
	}

	createSceneGeometry(pSetHiDet,0);
	createSceneGeometry(pSetLoDet,1);
	bUseLoDetail = false;

    gpd3dDev->CreateTexture(SB_WIDTH,SB_HEIGHT,1,0,D3DFMT_LIN_D16,0,&pSBufDepthLo);
	gpd3dDev->CreateTexture(SB_WIDTH,SB_HEIGHT,1,0,D3DFMT_LIN_D16,0,&pSBufDepthHi);

    memset(&fakeTarget, 0, sizeof(fakeTarget));

    XGSetSurfaceHeader(SB_WIDTH,
                       SB_HEIGHT,
                       D3DFMT_LIN_R5G6B5,
                       &fakeTarget,
                       0,
                       0);

    pSBufTarget = &fakeTarget;

    gpd3dDev->GetDepthStencilSurface(&pZBuffer);
    gpd3dDev->GetRenderTarget(&pRenderTarget);

	fZOffset = 10.f;
    fZSlopeScale = 4.0f;

	nRotAnims = sizeof(theRotAnimSeq)/sizeof(RotAnimSeq);
	nPosAnims = sizeof(thePosAnimSeq)/sizeof(PosAnimSeq);

	pRotAnims = (D3DMATRIX *)MemAlloc(sizeof(D3DMATRIX)*nRotAnims);
	pPosAnims = (D3DVECTOR *)MemAlloc(sizeof(D3DVECTOR)*nPosAnims);
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::createSceneGeometry(PrimitiveSet **pp_sets,int ndet_bias)
{
	pp_sets[pt_Sphere]->create(
		(const void *)theSphereVers, 
		sizeof(theSphereVers)/sizeof(SphereVers),
		(const void *)theSphereInsts, 
		sizeof(theSphereInsts)/sizeof(SphereInst),
		ndet_bias,
		st_Bump,
		pt_Sphere,
		gApp.pRoughBumpMap,
		gApp.pNormalCubeMapLoRes ); 

	pp_sets[pt_SurfOfRev]->create(
		(const void *)theSurfOfRevVers, 
		sizeof(theSurfOfRevVers)/sizeof(SurfOfRevVers),
		(const void *)theSurfOfRevInsts, 
		sizeof(theSurfOfRevInsts)/sizeof(SurfOfRevInst),
		ndet_bias,
		st_Bump, 
		pt_SurfOfRev,
		gApp.pRoughBumpMap,
		gApp.pNormalCubeMapHiRes );

	pp_sets[pt_Cone]->create(
		(const void *)theConeVers, 
		sizeof(theConeVers)/sizeof(ConeVers),
		(const void *)theConeInsts, 
		sizeof(theConeInsts)/sizeof(ConeInst),
		ndet_bias,
		st_Phong,
		pt_Cone,
		NULL, 
		gApp.pNormalCubeMapLoRes );

	pp_sets[pt_Box]->create( 
		NULL,1,
		(const void *)theBoxInsts, 
		sizeof(theBoxInsts)/sizeof(BoxInst),
		ndet_bias,
		st_Phong,
		pt_Box,
		NULL,
		gApp.pNormalCubeMapLoRes );

	pp_sets[pt_Cylinder]->create(
		(const void *)theCylinderVers, 
		sizeof(theCylinderVers)/sizeof(CylinderVers),
		(const void *)theCylinderInsts, 
		sizeof(theCylinderInsts)/sizeof(CylinderInst),
		ndet_bias,
		st_Phong,
		pt_Cylinder,
		NULL,gApp.pNormalCubeMapHiRes );

	pp_sets[pt_Torus]->create(
		(const void *)theTorusVers, 
		sizeof(theTorusVers)/sizeof(TorusVers),
		(const void *)theTorusInsts, 
		sizeof(theTorusInsts)/sizeof(TorusInst),
		ndet_bias,
		st_Phong,
		pt_Torus,
		NULL,
		gApp.pNormalCubeMapLoRes );	
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::destroy()
{
	for(int i = 0; i < pt_NoTypes; i++)
	{
        pSetHiDet[i]->UnInit();
        MemFree(pSetHiDet[i]);
        pSetHiDet[i] = NULL;

		pSetLoDet[i]->UnInit();
        MemFree(pSetLoDet[i]);
        pSetLoDet[i] = NULL;
	}

	MemFree(pRotAnims);
	MemFree(pPosAnims);

	MemFree(pQuats);
	for(i = 0; i < NUM_ROT_SEQ; i++)
	{
		MemFree(pQuatIdSeq[i]);
	}

	MemFree(pPos);
	for(i = 0; i < NUM_POS_SEQ; i++)
	{
		MemFree(pPosIdSeq[i]);
	}

#define XBS_RESOURCE_RELEASE(a) if (a) a->Release(); a = NULL;
    XBS_RESOURCE_RELEASE(pSBufDepthLo);
    XBS_RESOURCE_RELEASE(pSBufDepthHi);
#undef XBS_RESOURCE_RELEASE
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::render(bool b_with_shadows,bool b_use_blob_intensity)
{
	gpd3dDev->SetRenderState(D3DRS_ALPHABLENDENABLE,FALSE);
	gpd3dDev->SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);

	gpd3dDev->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);
    gpd3dDev->SetTextureStageState( 1, D3DTSS_MIPFILTER, D3DTEXF_NONE );
    gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSU,  D3DTADDRESS_CLAMP );
    gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSV,  D3DTADDRESS_CLAMP );
	gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSW,  D3DTADDRESS_CLAMP );

	gpd3dDev->SetTextureStageState( 2, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 2, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);
    gpd3dDev->SetTextureStageState( 2, D3DTSS_MIPFILTER, D3DTEXF_NONE );
    gpd3dDev->SetTextureStageState( 2, D3DTSS_ADDRESSU,  D3DTADDRESS_CLAMP );
    gpd3dDev->SetTextureStageState( 2, D3DTSS_ADDRESSV,  D3DTADDRESS_CLAMP );
	gpd3dDev->SetTextureStageState( 2, D3DTSS_ADDRESSW,  D3DTADDRESS_CLAMP );
	
	gpd3dDev->SetTextureStageState(3,D3DTSS_ADDRESSU,    D3DTADDRESS_BORDER );
	gpd3dDev->SetTextureStageState(3,D3DTSS_ADDRESSV,    D3DTADDRESS_BORDER );
	gpd3dDev->SetTextureStageState(3,D3DTSS_BORDERCOLOR, 0xffffffff );
	gpd3dDev->SetTextureStageState(3,D3DTSS_MINFILTER,   D3DTEXF_LINEAR );
	gpd3dDev->SetTextureStageState(3,D3DTSS_MAGFILTER,   D3DTEXF_LINEAR );
	gpd3dDev->SetTextureStageState(3,D3DTSS_MIPFILTER,   D3DTEXF_NONE );

	if(b_with_shadows)
	{
		gpd3dDev->SetRenderState(D3DRS_SHADOWFUNC,D3DCMP_GREATER);
	}

	for(int i = 0; i < pt_NoTypes; i++)
	{
		if(bUseLoDetail)
			pSetLoDet[i]->render(gApp.blobLight,b_use_blob_intensity);
		else
			pSetHiDet[i]->render(gApp.blobLight,b_use_blob_intensity);
	}
	if(b_with_shadows)
	{
		gpd3dDev->SetRenderState(D3DRS_SHADOWFUNC,D3DCMP_ALWAYS);
	}

	gpd3dDev->SetTexture(3,NULL);
	gpd3dDev->SetPixelShader(NULL);
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::renderZ()
{
	for(int i = 0; i < pt_NoTypes; i++)
	{
		if(bUseLoDetail)
			pSetLoDet[i]->renderZ();
		else
			pSetHiDet[i]->renderZ();
	}
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::advanceTime(float fElapsedTime, float fDt)
{
	float fpos = ((fElapsedTime-SCENE_ANIM_START_TIME) / SCENE_ANIM_LEN);
	float ffrac_pos =  fpos * ((float)MAX_POS_SAMPLES-2);
	int   pos_id;

    __asm
    {
        cvttss2si eax, ffrac_pos
        mov pos_id, eax
    }

	float ffrac = ffrac_pos - (float)pos_id;
    
	for(int i = 0; i < nPosAnims; i++)
	{
		if(fpos <= 0.f)
		{
			pPosAnims[i] = pPos[pPosIdSeq[i][0]];
		}
		else if(fpos >= 1.f)
		{
			pPosAnims[i] = pPos[pPosIdSeq[i][MAX_POS_SAMPLES-1]];
		}
		else
		{
			D3DVECTOR &a = pPos[pPosIdSeq[i][pos_id]];
			D3DVECTOR &b = pPos[pPosIdSeq[i][pos_id+1]];

			pPosAnims[i].x = a.x * (1.f-ffrac) + b.x * ffrac; 
			pPosAnims[i].y = a.y * (1.f-ffrac) + b.y * ffrac; 
			pPosAnims[i].z = a.z * (1.f-ffrac) + b.z * ffrac; 
		}
	}

	ffrac_pos =  fpos * ((float)MAX_ROT_SAMPLES-2);

    __asm
    {
        cvttss2si eax, ffrac_pos
        mov pos_id, eax
    }

	ffrac = ffrac_pos - (float)pos_id;

	for(i = 0; i < nRotAnims; i++)
	{
		if(fpos <= 0.f)
		{
			D3DVECTOR4 &q = pQuats[pQuatIdSeq[i][0]];
			SetRotationFromLHQuat(q,&pRotAnims[i]);
		}
		else if(fpos >= 1.f)
		{
			D3DVECTOR4 &q = pQuats[pQuatIdSeq[i][MAX_ROT_SAMPLES-1]];
			SetRotationFromLHQuat(q,&pRotAnims[i]);
		}
		else
		{
			D3DVECTOR4 &a = pQuats[pQuatIdSeq[i][pos_id]];
			D3DVECTOR4 &b = pQuats[pQuatIdSeq[i][pos_id+1]];

			D3DVECTOR4 res;
			SlerpQuats(a,b,ffrac,&res);
			SetRotationFromLHQuat(res,&pRotAnims[i]);
		}	
	}

	bUseLoDetail = fElapsedTime >= SCENE_LO_DETAIL_START;
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::updateShadows()
{
	Camera cam = gApp.theCamera;
	updateSBuffer( false);
	updateSBuffer( true );
	gApp.theCamera = cam;
}
///////////////////////////////////////////////////////////////////////////////
void SceneRenderer::updateSBuffer(bool b_hi_z)
{
	Camera &cam = gApp.theCamera;

	D3DVECTOR eye_pos,look_pt,up;

	D3DVECTOR pos;
	pos.x = 0.0f;
	pos.y = 0.0f;
	pos.z = b_hi_z ? CEIL_Z : FLOOR_Z;

	float fi;
	gApp.vblob.getLightForPosition(&eye_pos,&fi,pos);

	D3DVECTOR dir ;
	Set(&dir,0.f,0.f,(b_hi_z) ? 1.f : -1.f);
	Add(eye_pos,dir,&look_pt);
	Set(&up,0.f,(b_hi_z) ? -1.f : 1.f,0.f);
	
	cam.lookAt(eye_pos,look_pt,up);
	cam.setProjection(Pi/1.5f,1.f,1.f,500.f);

	D3DMATRIX shadow_proj_mat = cam.matProj;
	D3DMATRIX shadow_vp_mat;
    SetIdentity(&shadow_vp_mat);

    shadow_vp_mat._11 = SB_WIDTH   * 0.5f;
    shadow_vp_mat._22 = -SB_HEIGHT * 0.5f;
    shadow_vp_mat._33 = D3DZ_MAX_D16;

    shadow_vp_mat._41 = SB_WIDTH  * 0.5f + 0.5f;
    shadow_vp_mat._42 = SB_HEIGHT * 0.5f + 0.5f;

	D3DMATRIX mat;
	MulMats( cam.matWTC,shadow_proj_mat,&mat );
    MulMats( mat, shadow_vp_mat, (b_hi_z) ? &matWTSHi : &matWTSLo );
	
	if( gpd3dDev->BeginScene() == D3D_OK )
	{
		IDirect3DSurface8 *psurf;

		gpd3dDev->SetRenderState(D3DRS_ALPHABLENDENABLE,FALSE);
		gpd3dDev->SetRenderState(D3DRS_ALPHATESTENABLE,FALSE);
		gpd3dDev->SetRenderState(D3DRS_ZENABLE, D3DZB_TRUE);
		
		if(b_hi_z) 
			pSBufDepthHi->GetSurfaceLevel(0,&psurf);
		else	   
			pSBufDepthLo->GetSurfaceLevel(0,&psurf);

		gpd3dDev->SetRenderTarget(pSBufTarget,psurf);

		D3DVIEWPORT8 viewport = { 0, 0, SB_WIDTH, SB_HEIGHT, 0.0f, 1.0f };
		gpd3dDev->SetViewport(&viewport);

		gpd3dDev->Clear(0,NULL,D3DCLEAR_ZBUFFER,0,1.0f,0);
		gpd3dDev->SetRenderState(D3DRS_COLORWRITEENABLE,0);

		gpd3dDev->SetRenderState(D3DRS_SOLIDOFFSETENABLE, TRUE);
		gpd3dDev->SetRenderState(D3DRS_POLYGONOFFSETZOFFSET, FtoDW(fZOffset));
		gpd3dDev->SetRenderState(D3DRS_POLYGONOFFSETZSLOPESCALE, FtoDW(fZSlopeScale));

		gpd3dDev->SetVertexShader(D3DFVF_XYZ);
		gpd3dDev->SetPixelShader (NULL);

		gpd3dDev->SetTransform(D3DTS_VIEW,&cam.matWTC);
		gpd3dDev->SetTransform(D3DTS_PROJECTION,&shadow_proj_mat);

		gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_SELECTARG1);
		gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TFACTOR);
		gpd3dDev->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);

		for(int i = 0; i < 4; i++)
			gpd3dDev->SetTexture(i,NULL);

		const PrimitiveTypes sb_types[] = { pt_Torus, pt_Cone, pt_Box, pt_Cylinder };
		const int num_sb_types = sizeof(sb_types)/sizeof(PrimitiveTypes); 

		for(i = 0; i < num_sb_types; i++)
		{
			if(bUseLoDetail)
				pSetLoDet[sb_types[i]]->renderShadowMap(b_hi_z);
			else
				pSetHiDet[sb_types[i]]->renderShadowMap(b_hi_z);
		}

		gpd3dDev->SetRenderTarget(pRenderTarget, pZBuffer);
		gpd3dDev->SetRenderState(D3DRS_COLORWRITEENABLE, D3DCOLORWRITEENABLE_ALL);
		gpd3dDev->SetRenderState(D3DRS_SOLIDOFFSETENABLE, FALSE);
		
		psurf->Release();

		gpd3dDev->EndScene();
	} 
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\SOS.H ===
/*
 	structures and equates for sound operation system
 */

typedef unsigned char	uchar;
typedef unsigned short	ushort;
typedef unsigned long	ulong;


#ifndef NULL
#define	NULL			0
#endif

#define	LEVEL_SILENCE		0
#define	LEVEL_MUSIC		0
#define	LEVEL_EFFECT	1

#define	MUSIC_VOLUME		0
#define	EFFECT_VOLUME		1
#define	MUSIC_FADE			2
#define	RESTORE_MUSIC_VOLUME	3
#define	SET_RESTORE_VOLUME	4
#define	MUSIC_ATTEN		5

#define	MAX_DURATION		(0xffff-12)		/* max duration */

/* 
 * process (event) structure 
 */

struct	process {
	struct process *next;		/* pointer to next process in queue */
	struct process *prev;		/* pointer to previous process in queue*/
	union  {
			uchar	*c;
			ushort	*i;
			} mem_ptr;
	short	timer;			/* timer value for this process */
	short	prev_timer;		/* last value of timer for delta */
	ushort	function;		/* event type (function) */
	uchar	level;			/* sound level (type) NOT volume */
	uchar	hard_channel;		/* synthesis device channel */
	uchar	type;			/* for later use...*/
	ushort	data1;
	ushort	data2;
};


/*
 *	sound (call) structure
 */

struct	sound {
	const uchar	type;		/* sound type (backg, forg, vox, etc) */
	const uchar	priority;	/* priority of this sound */
	const ushort	track_map;	/* bit map for tracks this sound uses */
	const ushort	**tbl_ptr;	/* pointer to this sounds event pointers */
};	

/*
 * sound call receive fifo structure
 */
  
#define	FIFO_SIZE	16

struct	fifo {
	uchar	fifo_read;
	uchar	fifo_write;
	uchar	data[FIFO_SIZE];
};



/*************************************************************************
*                                                                        *
* 	Track information						  *
*      NOTE:								  *
*	Tracks are soft                                                   *
*************************************************************************/
#define	MAX_LOOP	4	/* # of nested loops allowed 	*/
#define	MAX_MUX		3   	/* # of nested mux's allowed 	*/

struct	track_info {
	ushort 	patch;			/* pointer to this tracks voice */
	signed char	pan;			/* left/right/center pan	*/
	uchar	volume;			/* patch's attenuation value	*/
	uchar	lfo_sens;		/* patch's lfo sensitivity value*/
	ushort	pitch;			/* current pitch 		*/
	ushort	loop_counter[MAX_LOOP];	/* # of times to loop		*/
	ushort	*loop_addr[MAX_LOOP];	/* address of loop back points  */
	uchar	loop_level;		/* deepness of loop		*/
	ushort	*mux_addr[MAX_MUX];	/* address of mux back points   */
	uchar	mux_level;		/* deepness of mux		*/
	short	transpose;		/* transposition of track	*/
	ushort	filtercutoff;	/* filter cutoff */
	ushort	filterres;		/* filter resonance */
};

/*************************************************************************
*                                                                        *
* 	Timer music structurs											  *
*                                                                        *
*************************************************************************/
#define	MUSIC_TIMER_PENDING	2		/* silent but "playing" */
#define	MUSIC_TIMER_ON		1		/* playing				*/
#define	MUSIC_TIMER_OFF		0		/* not playing			*/
#define	MAX_TIMERS			17

struct	timer_music {
	uchar	priority;		/* priority of timer					*/
	uchar	sound_call;		/* sound call to make for this timer	*/
	uchar	off_fx;			/* sound fx call to make for end of timr*/
};

/*************************************************************************
*                                                                        *
* 	Channel information						  *
* 	NOTE:								  *
* 	Channels are hard						  *
*                                                                        *
*************************************************************************/


struct	channel_info {
	uchar	type;		/* type of channel 			 */
	uchar	level;		/* current highest level playing on chan */
};



/*************************************************************************
*                                                                        *
* 	Add a watchdog check to code					  *
*                                                                        *
*************************************************************************/


#define	DOGIT	do_watchdog()
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\Shield.h ===
///////////////////////////////////////////////////////////////////////////////
// File: Shield.h
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#ifndef SHIELD_H
#define SHIELD_H


#include "qrand.h"



// The vertex list holding the unit sphere coordinates remain on the card.
// Each frame another list is streamed.

struct ShieldVertex
{
	D3DVECTOR position;
	D3DVECTOR normal;
};




// The shields actually look like they are the surface of a sphere that has been cut
// off by cuts perpendicular/parallel to each other and in the direction from
// the center of the shield to the center of the sphere. IOW, a piece bounded by
// lat and long lines where the center is on the equator.
   

class Shield
{
protected:
	D3DMATRIX				m_CurOTPMatrix;
	D3DMATRIX				m_CurMatrix;
	D3DVECTOR				m_CurCenter;	// world coordinates
	D3DVECTOR				m_ObjectCenter;	// object coordinates

	D3DMATRIX				m_StartRotation;
	D3DVECTOR				m_RotationDir;
	FLOAT					m_ThetaZero;	// start angle offset
	FLOAT					m_Speed;


	float					m_RadiusScale;

	static D3DVECTOR		ms_Pos;		// position of center


public:
	void Init();
	void UnInit()	{ destroy(); }

	void create();
	void destroy();

	void render(const D3DMATRIX& mat_wtp);	// sets object to world matrix constants
	void advanceTime(float fElapsedTime, float fDt);

	void restart(float radian_extent);	// pairs of floats


	const D3DVECTOR& getCenter() const { return m_CurCenter; }

	void		setRadiusScale(float rs, float dist)
	{
		m_RadiusScale = rs;
		Set(&m_ObjectCenter, dist*rs, 0.0f, 0.0f);
	}

	float	getRadiusScale()	const	{ return m_RadiusScale; }
	float	getSpeed()			const	{ return m_Speed; }

	const D3DMATRIX&	getObjectToWorldMatrix()	const	{ return m_CurMatrix; }

	static void sSetCenter(const D3DVECTOR& pos) { ms_Pos = pos; }
};



class ZShield
{
protected:
    LPDIRECT3DVERTEXBUFFER8 m_pShieldVB;
    LPDIRECT3DINDEXBUFFER8  m_pShieldIB;
    DWORD					m_dwNumVertices;
    DWORD					m_dwNumIndices;

	D3DMATRIX				m_CurMatrix;
	float					m_Speed;
	float					m_Theta;

public:
	void Init();
	void UnInit()	{ destroy(); }

	void create();
	void destroy();

	void render(const D3DMATRIX& mat_wtp);
	void advanceTime(float fElapsedTime, float fDt);

	void restart(float start_radian, float end_radian, float outside_radius);
};





class ShieldMgr
{
protected:
	enum { MAX_SHIELDS = 3 };
	enum { MAX_ZSHIELDS = 5 };
	Shield					m_Shields[MAX_SHIELDS];
	ZShield					m_ZShields[MAX_ZSHIELDS];
	int						m_NumShields;
	int						m_NumZShields;

	void					restartShields();


    LPDIRECT3DVERTEXBUFFER8 m_pShieldVB;
    LPDIRECT3DINDEXBUFFER8  m_pShieldIB;
    DWORD					m_dwNumVertices;
    DWORD					m_dwNumIndices;

    DWORD                   m_dwVShader;
    DWORD					m_dwPShader;



	D3DVECTOR				m_Pos;		// position of center
	float					m_RadiusScale;
	float					m_MidRadius;	// assumes full scale


public:
	void Init();
	void UnInit()
    {
        int i;

        for (i = 0; i < MAX_SHIELDS; i++)
        {
            m_Shields[i].UnInit();
        }

        for (int i = 0; i < MAX_ZSHIELDS; i++)
        {
            m_ZShields[i].UnInit();
        }

        destroy();
    }


	void create();
	void destroy();

	void advanceTime(float fElapsedTime, float fDt);	// resets if fElapsedTime is zero

	void render(bool b_far_side);

	void restart();
};



#endif // SHIELD_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\sosdsp.h ===
#define	GPXMEM	0xfe830000
#define	GPYMEM	0xfe836000
#define	GPPMEM	0xfe83a000



struct	patch {
	unsigned int	start;
	unsigned int	end;
	unsigned int	loop;
	unsigned char	pitch;
	unsigned char	bank;
};
struct	word {
	unsigned int	start;
	unsigned int	end;
	unsigned char	bank;
	unsigned int	volume;
};


struct	two_pole_lpf {
	unsigned short	c0;
	unsigned short	c1;
	unsigned short	c2;
};
#define	N_OSCS		11
#define	OSC_SIZE	6

#define	ST_VOLUME_R			66
#define	ST_VOLUME_L			77


/*
 *	adpcm equates
 */

#define		ADP_END			109
#define		ADP_BANK		111
#define		ADP_PRE_VOLUME_R 116
#define		ADP_PRE_VOLUME_L 120
#define		ADP_PRE_START	117
#define		ADP_STATUS		115
#define		ADP_VOLUME_R 110
#define		ADP_VOLUME_L 112


#define	OSC_0_MOD_INDEX	119
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\shaders.h ===
const BYTE g_greenfog_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x30, 0xDA, 0x30, 0xD9, 0x30, 0xDB,
0x30, 0xDD, 0x10, 0x10, 0xD1, 0xDD, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x30, 0x30, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x20, 0xDA, 0x20, 0xD9, 0x20, 0xDB, 0x20, 0xCD, 0x00, 0x00,
0xC1, 0xCD, 0x00, 0x00, 0xCD, 0xC8, 0x20, 0xC1, 0x20, 0xCC,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D,
0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x11, 0x01, 0x00,
0x21, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xF0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x01, 0x00, 0x00,

};

const BYTE g_scene_bump_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x5A, 0x58, 0x59, 0x58, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0B, 0x0C,
0x80, 0x11, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x4A, 0x48, 0x49, 0x48, 0x00, 0x00, 0x0D, 0x0D, 0x00, 0x00,
0xCD, 0xCD, 0x00, 0x00, 0xCD, 0xCD, 0x00, 0x00, 0xCD, 0xCD,
0x0D, 0xC2, 0x0C, 0xC1, 0xC1, 0x20, 0x05, 0xC4, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0xFF,
0x00, 0x00, 0x00, 0x00, 0xCD, 0x30, 0x0C, 0x00, 0xD0, 0x00,
0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00,
0xD0, 0x00, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00, 0x00, 0x0C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x11, 0x01, 0x00,
0x21, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xFF, 0x1F, 0xF0, 0xFF, 0xFF, 0x2F, 0xFF,
0xF4, 0x01, 0x00, 0x00,

};


const BYTE g_scene_phong_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x5A, 0xD1, 0x59, 0xD1, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0B, 0x0C,
0x80, 0x11, 0x01, 0x0C, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x4A, 0xC1, 0x49, 0xC1, 0x00, 0x00, 0x0D, 0x0D, 0x00, 0x00,
0xCD, 0xCD, 0x00, 0x00, 0xCD, 0xCD, 0x00, 0x00, 0xCD, 0xCD,
0x00, 0x00, 0xCD, 0xCD, 0x0D, 0xC2, 0x0C, 0xC1, 0xC1, 0x20,
0x05, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0xFF,
0x00, 0x00, 0x00, 0x00, 0xCD, 0x30, 0x0C, 0x00, 0xD0, 0x00,
0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00,
0xD0, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xCD, 0x05,
0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x08, 0x11, 0x01, 0x00,
0x20, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xF3, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xF2,
0xF4, 0x01, 0x00, 0x00,

};


const BYTE g_scene_zr_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10,
0x3D, 0x3D, 0x10, 0x10, 0xDD, 0xD4, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x2D, 0x2D, 0x00, 0x00,
0xCD, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xD0, 0x20, 0x08, 0x00, 0xD0, 0x00,
0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x11, 0x01, 0x00,
0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x01, 0x00, 0x00,

};


const BYTE g_shield_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x5B, 0x5A, 0x5B, 0x59, 0x1D, 0x1D,
0x1C, 0x1C, 0xDD, 0xDD, 0xDC, 0xDC, 0xDD, 0xDD, 0xDC, 0xDC,
0xDD, 0xDD, 0xDC, 0xDC, 0xDC, 0x30, 0xD1, 0xDC, 0x30, 0x1D,
0x30, 0x1C, 0x10, 0x10, 0x30, 0xD2, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x33, 0xFF, 0x66, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xCD, 0x04, 0x00, 0x00, 0xCD, 0x04, 0x00, 0x00,
0xCD, 0x04, 0x00, 0x00, 0xCD, 0x04, 0x00, 0x00, 0x00, 0x0C,
0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0x4B, 0x4A, 0x4B, 0x49, 0x0D, 0x0D, 0x0C, 0x0C, 0xCD, 0xCD,
0xCC, 0xCC, 0xCD, 0xCD, 0xCC, 0xCC, 0xCD, 0xCD, 0xCC, 0xCC,
0xCC, 0x20, 0xC1, 0xCC, 0x20, 0x0D, 0x20, 0x0C, 0xC8, 0x20,
0xC1, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xCD, 0x30, 0x0C, 0x00, 0xCD, 0x04,
0x00, 0x00, 0xCD, 0x04, 0x00, 0x00, 0xCD, 0x04, 0x00, 0x00,
0xCD, 0x04, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C,
0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x08, 0x11, 0x01, 0x00,
0x21, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x2F, 0xFF, 0xFF, 0xFF, 0x0F,
0xFF, 0x01, 0x00, 0x00,

};


const BYTE g_shield_sh_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x10, 0x10, 0x30, 0xD4, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
0x80, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x01, 0x00, 0x00,

};


const BYTE g_vblob_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10,
0x30, 0x1C, 0x10, 0x10, 0x3D, 0x3D, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x30, 0xD1, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x49, 0x48, 0x00, 0x00, 0x20, 0x0C, 0x00, 0x00,
0x2D, 0x2D, 0x00, 0x00, 0xC1, 0x2C, 0x20, 0xC1, 0x20, 0xCC,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x08, 0x00, 0xD0, 0x00,
0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x11, 0x01, 0x00,
0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x0F, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x01, 0x00, 0x00,

};


const BYTE g_vbloblet_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10,
0x30, 0x1C, 0x10, 0x10, 0x3D, 0x3D, 0x10, 0x10, 0xD1, 0x3C,
0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0xD1, 0xDC, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x49, 0x48, 0x00, 0x00, 0x20, 0x0C, 0x00, 0x00,
0x2D, 0x2D, 0x00, 0x00, 0xC1, 0x2C, 0x20, 0xC1, 0x20, 0xCC,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x08, 0x00, 0xD0, 0x00,
0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x11, 0x01, 0x00,
0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x0F, 0x21, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x01, 0x00, 0x00,

};


const BYTE g_greenfog_xvu[] =
{

0x78, 0x20, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0x20, 0x00, 0x6C, 0x10, 0x36, 0x08, 0x00, 0xF8, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x02, 0x20, 0x00, 0x6C, 0x10,
0x36, 0x08, 0x48, 0xF8, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x24, 0x4C, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F,
0x20, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x64, 0x4C, 0x00,
0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0x30, 0x2F, 0x00, 0x00,
0x00, 0x00, 0x1B, 0xA4, 0x4C, 0x00, 0x6C, 0x18, 0x36, 0x08,
0xF8, 0x0F, 0x40, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0x6C, 0x00, 0x6C, 0x10, 0x36, 0x24, 0x50, 0xF8, 0x70, 0x30,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x6C, 0x00, 0x6C, 0x10,
0x36, 0x34, 0x58, 0xF8, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x80, 0x6C, 0x00, 0x6C, 0x10, 0x36, 0x44, 0x60, 0xF8,
0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x47, 0x06,
0xFF, 0x1B, 0x36, 0xC4, 0x00, 0xE8, 0x78, 0x10, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x60, 0x87, 0x00, 0x6C, 0x28, 0x00, 0xC4,
0x01, 0xE8, 0x70, 0x30,

};


const BYTE g_scene_bump_xvu[] =
{

0x78, 0x20, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x00, 0x88, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x08, 0x00, 0x48, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x40, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x00, 0x28,
0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0x08, 0x00, 0x18, 0x70, 0x20, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0xED, 0x00, 0x6C, 0x18, 0x36, 0x08,
0x60, 0x88, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x20,
0xED, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x60, 0x48, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0xED, 0x00, 0x6C, 0x18,
0x36, 0x08, 0x60, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x60, 0xED, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F,
0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x02, 0x6C, 0x03,
0x6C, 0x18, 0x36, 0x0C, 0x4C, 0xF8, 0x30, 0x21, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x00, 0x40, 0x01, 0x6C, 0x68, 0xFE, 0x25,
0x60, 0x18, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1A, 0xC0,
0x4C, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0x40, 0x2E,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x80, 0x6C, 0x00, 0x69, 0x14,
0x36, 0x0C, 0xF8, 0x0F, 0x50, 0x1E, 0x00, 0x00, 0x00, 0x00,
0x1A, 0xA0, 0x6C, 0x00, 0x69, 0x14, 0x36, 0x0C, 0xF8, 0x0F,
0xA0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0xA0, 0x00,
0x6C, 0xA8, 0x34, 0x54, 0xF8, 0x0F, 0x60, 0x28, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0xA0, 0x08, 0x6D, 0x48, 0x37, 0xA4,
0xF8, 0x0F, 0xB1, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x09, 0x6E, 0x28, 0xFE, 0x65, 0xF8, 0x0F, 0x78, 0xDE,
0x00, 0x00, 0x00, 0x00, 0x1B, 0xE0, 0xAC, 0x00, 0x6C, 0x18,
0x36, 0x74, 0xF8, 0x0F, 0x80, 0x28, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x40, 0x00, 0x6C, 0x48, 0x35, 0x14, 0xF8, 0x0F,
0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x40, 0x06,
0x6E, 0xA8, 0x36, 0x14, 0x1C, 0xE8, 0x90, 0x1E, 0x00, 0x00,
0x00, 0x00, 0x1A, 0x04, 0xA0, 0x00, 0x6C, 0x10, 0x36, 0x94,
0x50, 0x88, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x06,
0xA0, 0x00, 0x6C, 0x10, 0x36, 0x94, 0x50, 0x48, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x08, 0xA0, 0x00, 0x6C, 0x10,
0x36, 0x94, 0x50, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1A, 0x00, 0x60, 0x00, 0x6A, 0x10, 0x36, 0x04, 0xF8, 0x0F,
0x20, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x47, 0x06,
0xFF, 0x1B, 0x36, 0xC4, 0x00, 0xE8, 0x78, 0x10, 0x00, 0x00,
0x00, 0x00, 0x1A, 0x04, 0xA0, 0x00, 0x6C, 0x10, 0x36, 0x24,
0x58, 0x88, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x06,
0xA0, 0x00, 0x6C, 0x10, 0x36, 0x24, 0x58, 0x48, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x08, 0xA0, 0x00, 0x6C, 0x10,
0x36, 0x24, 0x58, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x60, 0x87, 0x00, 0x6C, 0x28, 0x00, 0xC4, 0x01, 0xE8,
0x70, 0x30,

};


const BYTE g_scene_phong_xvu[] =
{

0x78, 0x20, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x00, 0x88, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x08, 0x00, 0x48, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x40, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x00, 0x28,
0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0x08, 0x00, 0x18, 0x70, 0x20, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0xED, 0x00, 0x6C, 0x18, 0x36, 0x08,
0x60, 0x88, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x20,
0xED, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x60, 0x48, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0xED, 0x00, 0x6C, 0x18,
0x36, 0x08, 0x60, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x60, 0xED, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F,
0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x6C, 0x01,
0x6C, 0x18, 0x36, 0x0C, 0xF8, 0x0F, 0x30, 0x21, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x00, 0x40, 0x01, 0x6C, 0x68, 0xFE, 0x25,
0x60, 0x18, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1A, 0xC0,
0x4C, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0x40, 0x2E,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x80, 0x6C, 0x00, 0x69, 0x14,
0x36, 0x0C, 0xF8, 0x0F, 0x50, 0x1E, 0x00, 0x00, 0x00, 0x00,
0x1A, 0xA0, 0x6C, 0x00, 0x69, 0x14, 0x36, 0x0C, 0xF8, 0x0F,
0xA0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0xA0, 0x00,
0x6C, 0xA8, 0x34, 0x54, 0xF8, 0x0F, 0x60, 0x28, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0xA0, 0x08, 0x6D, 0x48, 0x37, 0xA4,
0xF8, 0x0F, 0xB1, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x09, 0x6E, 0x28, 0xFE, 0x65, 0xF8, 0x0F, 0x78, 0xDE,
0x00, 0x00, 0x00, 0x00, 0x1B, 0xE0, 0xAC, 0x00, 0x6C, 0x18,
0x36, 0x74, 0xF8, 0x0F, 0x80, 0x28, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x40, 0x00, 0x6C, 0x48, 0x35, 0x14, 0xF8, 0x0F,
0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x40, 0x06,
0x6E, 0xA8, 0x36, 0x14, 0x1C, 0xE8, 0x90, 0x1E, 0x00, 0x00,
0x00, 0x00, 0x1A, 0x02, 0xA0, 0x00, 0x6C, 0x10, 0x36, 0x94,
0x50, 0x88, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x04,
0xA0, 0x00, 0x6C, 0x10, 0x36, 0x94, 0x50, 0x48, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x06, 0xA0, 0x00, 0x6C, 0x10,
0x36, 0x94, 0x50, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1A, 0x00, 0x60, 0x00, 0x6A, 0x10, 0x36, 0x04, 0xF8, 0x0F,
0x20, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x47, 0x06,
0xFF, 0x1B, 0x36, 0xC4, 0x00, 0xE8, 0x78, 0x10, 0x00, 0x00,
0x00, 0x00, 0x1A, 0x02, 0xA0, 0x00, 0x6C, 0x10, 0x36, 0x24,
0x58, 0x88, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x04,
0xA0, 0x00, 0x6C, 0x10, 0x36, 0x24, 0x58, 0x48, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x06, 0xA0, 0x00, 0x6C, 0x10,
0x36, 0x24, 0x58, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x60, 0x87, 0x00, 0x6C, 0x28, 0x00, 0xC4, 0x01, 0xE8,
0x70, 0x30,

};


const BYTE g_scene_zr_xvu[] =
{

0x78, 0x20, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0x20, 0x28,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x08, 0xF8, 0x0F, 0x20, 0x24, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x40, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F,
0x20, 0x22, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0x20, 0x21, 0x00, 0x00,
0x00, 0x00, 0xAA, 0x00, 0x20, 0x02, 0x6C, 0x10, 0x36, 0x24,
0x04, 0xF8, 0x30, 0x9F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
0x20, 0x00, 0x6C, 0x10, 0x36, 0x24, 0xF8, 0x0F, 0x40, 0x21,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0x6E, 0x00, 0x6C, 0x10,
0x36, 0x34, 0xF8, 0x0F, 0x50, 0x3E, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x00, 0x80, 0x05, 0xFD, 0x6B, 0x36, 0x34, 0xF8, 0x0F,
0x6F, 0x11, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x4E, 0x00,
0x6C, 0xA8, 0x36, 0x0C, 0xF8, 0x0F, 0x60, 0x2E, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0x60, 0x01, 0x6C, 0x68, 0x36, 0x34,
0xF8, 0x0F, 0x70, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0x80, 0x01, 0x6C, 0x68, 0x36, 0x34, 0xF8, 0x0F, 0x70, 0x21,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x40, 0x01, 0x6C, 0xE8,
0x36, 0x64, 0x18, 0xF8, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x00, 0x40, 0x00, 0x6C, 0x28, 0x36, 0x24, 0xF8, 0x0F,
0x80, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x4E, 0x00,
0x6C, 0x18, 0x36, 0x84, 0xF8, 0x0F, 0x90, 0x2E, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x60, 0x6E, 0x00, 0x6C, 0x10, 0x36, 0x94,
0x48, 0xE8, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0x80, 0x01, 0x6C, 0x28, 0x36, 0x14, 0x48, 0x18, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x47, 0x06, 0xFF, 0x1B,
0x36, 0xC4, 0x00, 0xE8, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x60, 0x87, 0x00, 0x6C, 0x28, 0x00, 0xC4, 0x01, 0xE8,
0x70, 0x30,

};


const BYTE g_shield_xvu[] =
{

0x78, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0x20, 0x28,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x08, 0xF8, 0x0F, 0x20, 0x24, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x40, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F,
0x20, 0x22, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0x20, 0x21, 0x00, 0x00,
0x00, 0x00, 0x1A, 0x02, 0xAC, 0x00, 0x6C, 0x18, 0x34, 0x08,
0xF8, 0x0F, 0x30, 0x28, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x22,
0xAC, 0x00, 0x6C, 0x18, 0x34, 0x08, 0xF8, 0x0F, 0x30, 0x24,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x42, 0xAC, 0x00, 0x6C, 0x18,
0x34, 0x08, 0xF8, 0x0F, 0x30, 0x22, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x20, 0x6D, 0x00, 0x6C, 0x14, 0x36, 0x24, 0xF8, 0x0F,
0x40, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x6D, 0x00,
0x6C, 0x14, 0x36, 0x24, 0xF8, 0x0F, 0x70, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0xA0, 0x02, 0x6D, 0x6C, 0x36, 0x44,
0x64, 0xE8, 0x50, 0x18, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00,
0xA0, 0x00, 0x6C, 0x68, 0x34, 0x74, 0xF8, 0x0F, 0x80, 0x28,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x6C, 0x18,
0x54, 0x57, 0xF8, 0x0F, 0x60, 0x24, 0x00, 0x00, 0x00, 0x00,
0x55, 0x00, 0x80, 0x00, 0x69, 0x68, 0x34, 0x64, 0x48, 0xE8,
0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x00,
0x6C, 0x18, 0x54, 0x87, 0xF8, 0x0F, 0x90, 0x24, 0x00, 0x00,
0x00, 0x00, 0x55, 0x00, 0x80, 0x00, 0x69, 0x68, 0x34, 0x94,
0x50, 0xE8, 0x30, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x60,
0x6D, 0x00, 0x68, 0x14, 0x36, 0x24, 0xF8, 0x0F, 0xA0, 0x3E,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x80, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x24, 0x00, 0x88, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1A, 0x00, 0xA0, 0x00, 0x6C, 0x68, 0x34, 0xA4, 0xF8, 0x0F,
0xB0, 0x28, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xA0, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0x24, 0x00, 0x48, 0x70, 0x20, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x6C, 0x18, 0x54, 0xB7,
0xF8, 0x0F, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00,
0x80, 0x00, 0x6A, 0x68, 0x34, 0x04, 0x58, 0xE8, 0x30, 0x90,
0x00, 0x00, 0x00, 0x00, 0x1B, 0xC0, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x24, 0x00, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0xE0, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x24, 0x00, 0x18,
0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40, 0x47, 0x06,
0xFF, 0x1B, 0x36, 0xC4, 0x00, 0xE8, 0x78, 0x10, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x60, 0x87, 0x00, 0x6C, 0x28, 0x00, 0xC4,
0x01, 0xE8, 0x70, 0x30,

};


const BYTE g_shield_sh_xvu[] =
{

0x78, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0x20, 0x00, 0x6C, 0x10, 0x36, 0x08, 0xF8, 0x0F, 0x20, 0x2F,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x80, 0x01, 0x6C, 0x48,
0x36, 0x24, 0xF8, 0x0F, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x00, 0xED, 0x00, 0x6C, 0x18, 0x36, 0x24, 0xF8, 0x0F,
0x30, 0x28, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0xED, 0x00,
0x6C, 0x18, 0x36, 0x24, 0xF8, 0x0F, 0x30, 0x24, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x40, 0xED, 0x00, 0x6C, 0x18, 0x36, 0x24,
0xF8, 0x0F, 0x30, 0x22, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60,
0xED, 0x00, 0x6C, 0x18, 0x36, 0x24, 0xF8, 0x0F, 0x30, 0x21,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x80, 0x2D, 0x00, 0x6C, 0x10,
0x36, 0x0C, 0xF8, 0x0F, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x00, 0x6E, 0x00, 0x6C, 0x14, 0x36, 0x34, 0xF8, 0x0F,
0x40, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0xA0, 0x00,
0x6C, 0x88, 0x36, 0x44, 0xF8, 0x0F, 0x50, 0x21, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0x00, 0x08, 0xFD, 0x13, 0x36, 0x08,
0xF8, 0x0F, 0x1F, 0x50, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0x40, 0x00, 0x6C, 0x88, 0x36, 0x14, 0xF8, 0x0F, 0x60, 0x2F,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x80, 0x01, 0x6C, 0x28,
0x36, 0x14, 0xF8, 0x0F, 0x70, 0x2F, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x00, 0x60, 0x00, 0xFC, 0x17, 0x36, 0x74, 0xF8, 0x0F,
0x80, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xC0, 0x4C, 0x00,
0x6C, 0x18, 0x36, 0x84, 0xF8, 0x0F, 0x90, 0x2F, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0x80, 0x00, 0x6C, 0xC8, 0x36, 0x94,
0xF8, 0x0F, 0xA0, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0xA0, 0x00, 0x6C, 0x48, 0x37, 0xA4, 0xF8, 0x0F, 0xB0, 0x21,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0xA4, 0xF8, 0x0F, 0x70, 0x24, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x00, 0xEC, 0x08, 0xFE, 0x1B, 0x36, 0xA4, 0xF8, 0x0F,
0x7E, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0xA4, 0xF8, 0x0F, 0x70, 0x21, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0x60, 0x01, 0x6C, 0x48, 0x37, 0xA4,
0x18, 0xE8, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0x40, 0x02, 0x6D, 0x48, 0x37, 0x14, 0x04, 0xD8, 0x00, 0xDE,
0x00, 0x00, 0x00, 0x00, 0x1B, 0xE0, 0xAC, 0x00, 0x6C, 0x18,
0x36, 0x04, 0xF8, 0x0F, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x20, 0x00, 0x6C, 0x10, 0x36, 0x74, 0xF8, 0x0F,
0x80, 0x22, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xA0, 0x8D, 0x00,
0x6C, 0x48, 0x36, 0x04, 0xF8, 0x0F, 0x30, 0x31, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0x40, 0x00, 0x6C, 0x08, 0x36, 0x04,
0xF8, 0x0F, 0x40, 0x21, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xC0,
0x8D, 0x00, 0x6C, 0x18, 0x36, 0x44, 0xF8, 0x0F, 0x50, 0xD1,
0x00, 0x00, 0x00, 0x00, 0xAA, 0x80, 0x4C, 0x00, 0x6C, 0x08,
0x55, 0x0D, 0x00, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0xE0, 0x4D, 0x01, 0x6C, 0x18, 0x36, 0x54, 0xF8, 0x0F,
0x60, 0x21, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xA0, 0x4C, 0x00,
0x6C, 0x18, 0x36, 0x64, 0xF8, 0x0F, 0x90, 0x21, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x00, 0x40, 0x00, 0x6C, 0x10, 0xFE, 0x95,
0x18, 0x18, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40,
0x47, 0x06, 0xFF, 0x1B, 0x36, 0xC4, 0x00, 0xE8, 0x78, 0x10,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0x87, 0x00, 0x6C, 0x28,
0x00, 0xC4, 0x01, 0xE8, 0x70, 0x30,

};


const BYTE g_vblob_xvu[] =
{

0x78, 0x20, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60,
0x4D, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F, 0xA0, 0x2E,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0xA0, 0x00, 0x6C, 0x48,
0x37, 0xA4, 0xF8, 0x0F, 0x20, 0x28, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x40, 0x4D, 0x00, 0x6C, 0x18, 0x36, 0x08, 0xF8, 0x0F,
0xB0, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x2D, 0x08,
0x6C, 0x10, 0x36, 0x0C, 0xF8, 0x0F, 0xA8, 0x91, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x80, 0x6D, 0x00, 0x6C, 0x10, 0x36, 0xB4,
0xF8, 0x0F, 0xB0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x40, 0x00, 0x6C, 0x48, 0x35, 0x14, 0xF8, 0x0F, 0xA0, 0x2E,
0x00, 0x00, 0x00, 0x00, 0xFF, 0x02, 0x20, 0x00, 0x6C, 0x10,
0x36, 0x08, 0xF8, 0x0F, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x2D, 0x00, 0x6C, 0x10, 0x36, 0x0C, 0xF8, 0x0F,
0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x80, 0x00,
0x6E, 0x08, 0x36, 0xA4, 0xF8, 0x0F, 0xB0, 0xDF, 0x00, 0x00,
0x00, 0x00, 0x1A, 0x20, 0x6D, 0x00, 0x6A, 0x14, 0x36, 0x0C,
0xF8, 0x0F, 0x00, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00,
0x2D, 0x00, 0x6C, 0x10, 0x36, 0x0C, 0xF8, 0x0F, 0x20, 0x21,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0xA0, 0x00, 0x6C, 0x08,
0x34, 0x04, 0xF8, 0x0F, 0x20, 0x28, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x80, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0xB4, 0x00, 0x88,
0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x2D, 0x08,
0x6C, 0x10, 0x36, 0x0C, 0xF8, 0x0F, 0x98, 0x91, 0x00, 0x00,
0x00, 0x00, 0x1B, 0xA0, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0xB4,
0x00, 0x48, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x40, 0x00, 0x6C, 0x08, 0x34, 0x14, 0xF8, 0x0F, 0x20, 0x2E,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x62, 0x4D, 0x02, 0x6C, 0x18,
0x36, 0x08, 0x54, 0xF8, 0x00, 0x9E, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x00, 0xA0, 0x00, 0x6C, 0x08, 0x36, 0x04, 0xF8, 0x0F,
0x20, 0x28, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xE0, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0xB4, 0x00, 0x18, 0x70, 0x20, 0x00, 0x00,
0x00, 0x00, 0x1B, 0xC0, 0xEC, 0x08, 0x6C, 0x18, 0x36, 0xB4,
0x00, 0x28, 0x18, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x40, 0x00, 0x6C, 0x08, 0x36, 0x14, 0xF8, 0x0F, 0x90, 0x2E,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x20, 0x00, 0x6C, 0x10,
0x36, 0x94, 0x48, 0xF8, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x40, 0x47, 0x06, 0xFF, 0x1B, 0x36, 0xC4, 0x00, 0xE8,
0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0x87, 0x00,
0x6C, 0x28, 0x00, 0xC4, 0x01, 0xE8, 0x70, 0x30,

};


const BYTE g_vbloblet_xvu[] =
{

0x78, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60,
0xAD, 0x02, 0x6C, 0x18, 0x36, 0x08, 0x4C, 0xF8, 0x20, 0x2E,
0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x2D, 0x00, 0x6C, 0x10,
0x36, 0x0C, 0xF8, 0x0F, 0x50, 0x21, 0x00, 0x00, 0x00, 0x00,
0x1B, 0xA0, 0x4D, 0x00, 0x6C, 0x18, 0x36, 0x24, 0xF8, 0x0F,
0x30, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x80, 0x8D, 0x00,
0x6C, 0x10, 0x36, 0x0C, 0xF8, 0x0F, 0x40, 0xDE, 0x00, 0x00,
0x00, 0x00, 0x55, 0x00, 0x2D, 0x00, 0x6C, 0x10, 0x36, 0x0C,
0xF8, 0x0F, 0x80, 0x21, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x40,
0x6D, 0x00, 0x6C, 0x10, 0x36, 0x44, 0xF8, 0x0F, 0x50, 0x3E,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x20, 0x6D, 0x00, 0x69, 0x14,
0x36, 0x0C, 0xF8, 0x0F, 0x60, 0x5E, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x80, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x54, 0x00, 0x88,
0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0xA0, 0x00,
0x6C, 0xC8, 0x34, 0x64, 0xF8, 0x0F, 0x70, 0x28, 0x00, 0x00,
0x00, 0x00, 0x1B, 0xC0, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x54,
0x00, 0x28, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xA0,
0xEC, 0x08, 0x6D, 0x18, 0x36, 0x54, 0x00, 0x48, 0x18, 0xD0,
0x00, 0x00, 0x00, 0x00, 0x1B, 0xE0, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x54, 0x00, 0x18, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x40, 0x00, 0x6C, 0xC8, 0x34, 0x14, 0xF8, 0x0F,
0x80, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x20, 0x00,
0x6C, 0x10, 0x36, 0x84, 0x50, 0xF8, 0x70, 0x20, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x40, 0x47, 0x06, 0xFF, 0x1B, 0x36, 0xC4,
0x00, 0xE8, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60,
0x87, 0x00, 0x6C, 0x28, 0x00, 0xC4, 0x01, 0xE8, 0x70, 0x30,

};

const BYTE g_slash_interior_xpu[] =
{

0x50, 0x53, 0x42, 0x30, 0x10, 0x10, 0x30, 0xD4, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x01, 0x00, 0x00,

};

const BYTE g_slash_interior_xvu[] =
{

0x78, 0x20, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00,
0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x00, 0x88, 0x70, 0x20,
0x00, 0x00, 0x00, 0x00, 0x1B, 0x20, 0xEC, 0x00, 0x6C, 0x18,
0x36, 0x08, 0x00, 0x48, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1B, 0x40, 0xEC, 0x00, 0x6C, 0x18, 0x36, 0x08, 0x00, 0x28,
0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x60, 0xEC, 0x00,
0x6C, 0x18, 0x36, 0x08, 0x00, 0x18, 0x70, 0x20, 0x00, 0x00,
0x00, 0x00, 0x1A, 0xA0, 0x2C, 0x00, 0x6C, 0x10, 0x36, 0x0C,
0xF8, 0x0F, 0x20, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x80,
0x6C, 0x00, 0x68, 0x14, 0x36, 0x0C, 0xF8, 0x0F, 0x30, 0x9E,
0x00, 0x00, 0x00, 0x00, 0x1A, 0xE0, 0x2C, 0x00, 0x6C, 0x10,
0x36, 0x0C, 0xF8, 0x0F, 0x50, 0x2E, 0x00, 0x00, 0x00, 0x00,
0x1A, 0xA2, 0x8C, 0x00, 0x68, 0x10, 0xAA, 0x34, 0xF8, 0x0F,
0x40, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x1A, 0xC0, 0x6C, 0x00,
0x69, 0x14, 0x36, 0x0C, 0xF8, 0x0F, 0x60, 0x5E, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x40, 0x47, 0x06, 0xFF, 0x1B, 0x36, 0xC4,
0x00, 0xE8, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1A, 0xE2,
0x8C, 0x00, 0x68, 0x10, 0xAA, 0x64, 0xF8, 0x0F, 0x70, 0x3E,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x8D, 0x00, 0x69, 0x18,
0x34, 0x44, 0xF8, 0x0F, 0x80, 0xDE, 0x00, 0x00, 0x00, 0x00,
0x1A, 0x00, 0x4D, 0x00, 0x6C, 0x18, 0x34, 0x74, 0xF8, 0x0F,
0x90, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x60, 0x00,
0x6A, 0x14, 0x36, 0x84, 0x18, 0xE8, 0x70, 0x50, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x60, 0x87, 0x00, 0x6C, 0x28, 0x00, 0xC4,
0x01, 0xE8, 0x70, 0x30,

};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\sources.inc ===
# C_DEFINES=$(C_DEFINES) -DPROFILE
# C_DEFINES=$(C_DEFINES) -DDETERMINISTIC

LINKER_FLAGS=$(LINKER_FLAGS) /MAP

SOURCES=\
CamControl.cpp \
camera.cpp \
GreenFog.cpp \
logo_renderer.cpp \
qrand.cpp \
renderer.cpp \
scene_renderer.cpp \
Shield.cpp \
tex_gen.cpp \
VBlob.cpp \
xbs_app.cpp \
fastmath.cpp \
placementdoodad.cpp \
bootsound.cpp \
mslogo.cpp \
dev.c \
cf.c \
evf.c \
globals.c \
sos.c \
proc.c \
stboot.c
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\tex_gen.h ===
//
//	bs_texgen.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __TEX_GEN_H__
#define __TEX_GEN_H__


LPDIRECT3DTEXTURE8 CreateIntensityTexture(
							int   size,
							bool  b_convert_to_normal_map = false,
							float f_height_scale		  = 1.f/512.f,
							int   noise					  = 1024,
							int   seed				      = 0,
							int   clr_mask				  = 0x00ffffff,
							int   intensity_seed          = 255,
							bool  b_use_intensity_seed    = false,
							DWORD intensity_max           = 255,
							int   negative_prob           = 50
							);

void CreateIntensityTexture_8Bit(
							LPDIRECT3DTEXTURE8 ppTextures[],
							int   num,
							int   size,
							int   noise,
							int   seed,
							int   intensity_seed,
							int   intensity_max
							);



LPDIRECT3DTEXTURE8 CreateGlowTexture(int width,int height,int colorScale,int noise,int seed);
LPDIRECT3DTEXTURE8 CreateGradientTexture(DWORD dwWidth,DWORD dwHeight,DWORD dwClrStart,DWORD dwClrEnd);
LPDIRECT3DCUBETEXTURE8 CreateNormalizationCubeMap(DWORD dwSize);
LPDIRECT3DCUBETEXTURE8 CreateStaticReflectionCubeMap(DWORD dwSize);
LPDIRECT3DTEXTURE8 CreateHighlightTexture(int size,int power,
										  bool b_falloff_alpha, 
										  float f_linear_w, float f_cos_w);

int						GetNumberOfIndicesForTristripMesh(
												int x_quads,
												int y_quads,
												bool b_d_tap_1=false,
												bool b_d_tap_2=false
											);
int						CreateTristripForMesh(	WORD* p_index_buffer,
												int x_quads,			// number of quad columns
												int y_quads,			// number of quad rows
												bool b_double_tap_first=false,
												bool b_double_tap_last=false,
												int start_index = 0,	// starting index of lower-left corner
												int vstride = 0,		// vertex difference between rows
												int hstride = 0			// vertex difference between columns
											);	// returns number of indices added
LPDIRECT3DINDEXBUFFER8	CreateTristripForMesh(int x_quads, int y_quads, int* p_num_indices);



#endif	//__TEX_GEN_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\text_geometry.h ===
/*

xbt.h

*/
#ifndef __xbt_h__
#define __xbt_h__

#include "d3d8types.h"

#define FVF_xbt D3DFVF_XYZ

struct xbt_vertex
{
	float x,y,z;
};

const float xbt_OO_POS_SCALE = 0.002508f;
const float xbt_POS_DELTA = 41.065369f;
const float xbt_OO_TEX_SCALE = -61.068704f;
const float xbt_TEX_DELTA = -1000000.000000f;


///////////////////////////////////////////////////////////////////////////////
const int vertex_count_text_0 = 156;
short verts_text_0C[] = 
{
		-29368,-16381,-16375, //	x,y,z
		-32752,-19098,-16375, //	x,y,z
		-31303,-19096,-16375, //	x,y,z
		-28656,-16952,-16375, //	x,y,z
		-27947,-16381,-16375, //	x,y,z
		-24567,-13668,-16375, //	x,y,z
		-26012,-13668,-16375, //	x,y,z
		-28656,-15814,-16375, //	x,y,z
		-31323,-13667,-16375, //	x,y,z
		-32748,-13668,-16375, //	x,y,z
		-26011,-19099,-16375, //	x,y,z
		-24563,-19098,-16375, //	x,y,z
		-17241,-16195,-16375, //	x,y,z
		-16875,-15892,-16375, //	x,y,z
		-23197,-16837,-16375, //	x,y,z
		-17767,-16837,-16375, //	x,y,z
		-17241,-16592,-16375, //	x,y,z
		-17482,-13978,-16375, //	x,y,z
		-17631,-13777,-16375, //	x,y,z
		-18229,-14512,-16375, //	x,y,z
		-17341,-14216,-16375, //	x,y,z
		-18180,-14621,-16375, //	x,y,z
		-18115,-14760,-16375, //	x,y,z
		-17211,-14489,-16375, //	x,y,z
		-18042,-14928,-16375, //	x,y,z
		-17096,-14794,-16375, //	x,y,z
		-17965,-15125,-16375, //	x,y,z
		-16999,-15131,-16375, //	x,y,z
		-17890,-15350,-16375, //	x,y,z
		-17825,-15603,-16375, //	x,y,z
		-16925,-15498,-16375, //	x,y,z
		-17775,-15884,-16375, //	x,y,z
		-23189,-15884,-16375, //	x,y,z
		-24897,-15884,-16375, //	x,y,z
		-24897,-16837,-16375, //	x,y,z
		-24093,-16837,-16375, //	x,y,z
		-24089,-15884,-16375, //	x,y,z
		-17771,-13594,-16375, //	x,y,z
		-23188,-13593,-16375, //	x,y,z
		-22735,-14514,-16375, //	x,y,z
		-23341,-13768,-16375, //	x,y,z
		-23488,-13970,-16375, //	x,y,z
		-23627,-14208,-16375, //	x,y,z
		-22784,-14624,-16375, //	x,y,z
		-22849,-14762,-16375, //	x,y,z
		-23755,-14481,-16375, //	x,y,z
		-22922,-14930,-16375, //	x,y,z
		-23868,-14787,-16375, //	x,y,z
		-22999,-15127,-16375, //	x,y,z
		-23964,-15124,-16375, //	x,y,z
		-23073,-15352,-16375, //	x,y,z
		-24038,-15491,-16375, //	x,y,z
		-23139,-15605,-16375, //	x,y,z
		-24046,-17245,-16375, //	x,y,z
		-23154,-17120,-16375, //	x,y,z
		-23971,-17623,-16375, //	x,y,z
		-23099,-17366,-16375, //	x,y,z
		-23873,-17969,-16375, //	x,y,z
		-23035,-17579,-16375, //	x,y,z
		-22964,-17766,-16375, //	x,y,z
		-23755,-18281,-16375, //	x,y,z
		-22887,-17934,-16375, //	x,y,z
		-23622,-18558,-16375, //	x,y,z
		-22807,-18089,-16375, //	x,y,z
		-23477,-18796,-16375, //	x,y,z
		-22725,-18238,-16375, //	x,y,z
		-23325,-18994,-16375, //	x,y,z
		-23181,-19156,-16375, //	x,y,z
		-17783,-19156,-16375, //	x,y,z
		-18244,-18241,-16375, //	x,y,z
		-17607,-18874,-16375, //	x,y,z
		-17437,-18588,-16375, //	x,y,z
		-18221,-18195,-16375, //	x,y,z
		-18163,-18080,-16375, //	x,y,z
		-17279,-18291,-16375, //	x,y,z
		-18082,-17905,-16375, //	x,y,z
		-17138,-17978,-16375, //	x,y,z
		-17990,-17683,-16375, //	x,y,z
		-17899,-17424,-16375, //	x,y,z
		-17019,-17643,-16375, //	x,y,z
		-17821,-17138,-16375, //	x,y,z
		-16930,-17283,-16375, //	x,y,z
		-16875,-16890,-16375, //	x,y,z
		-14534,-14523,-16375, //	x,y,z
		-9555,-13605,-16375, //	x,y,z
		-15016,-13619,-16375, //	x,y,z
		-10027,-14518,-16375, //	x,y,z
		-9376,-13854,-16375, //	x,y,z
		-15135,-13768,-16375, //	x,y,z
		-9197,-14166,-16375, //	x,y,z
		-15307,-14007,-16375, //	x,y,z
		-9965,-14655,-16375, //	x,y,z
		-9028,-14534,-16375, //	x,y,z
		-9882,-14833,-16375, //	x,y,z
		-9789,-15055,-16375, //	x,y,z
		-8879,-14949,-16375, //	x,y,z
		-9697,-15320,-16375, //	x,y,z
		-8761,-15403,-16375, //	x,y,z
		-9618,-15631,-16375, //	x,y,z
		-8682,-15885,-16375, //	x,y,z
		-9562,-15987,-16375, //	x,y,z
		-8654,-16389,-16375, //	x,y,z
		-9541,-16389,-16375, //	x,y,z
		-8681,-16881,-16375, //	x,y,z
		-9563,-16789,-16375, //	x,y,z
		-8757,-17327,-16375, //	x,y,z
		-9620,-17140,-16375, //	x,y,z
		-8874,-17736,-16375, //	x,y,z
		-9701,-17445,-16375, //	x,y,z
		-9023,-18116,-16375, //	x,y,z
		-9794,-17704,-16375, //	x,y,z
		-15468,-14296,-16375, //	x,y,z
		-14598,-14659,-16375, //	x,y,z
		-14682,-14838,-16375, //	x,y,z
		-15611,-14633,-16375, //	x,y,z
		-14777,-15059,-16375, //	x,y,z
		-15733,-15013,-16375, //	x,y,z
		-14870,-15324,-16375, //	x,y,z
		-15826,-15435,-16375, //	x,y,z
		-14950,-15633,-16375, //	x,y,z
		-15886,-15894,-16375, //	x,y,z
		-15006,-15988,-16375, //	x,y,z
		-15907,-16389,-16375, //	x,y,z
		-15028,-16389,-16375, //	x,y,z
		-15880,-16881,-16375, //	x,y,z
		-15006,-16788,-16375, //	x,y,z
		-15805,-17327,-16375, //	x,y,z
		-14947,-17139,-16375, //	x,y,z
		-15688,-17736,-16375, //	x,y,z
		-14865,-17442,-16375, //	x,y,z
		-15540,-18116,-16375, //	x,y,z
		-14769,-17700,-16375, //	x,y,z
		-9888,-17920,-16375, //	x,y,z
		-9197,-18473,-16375, //	x,y,z
		-9973,-18094,-16375, //	x,y,z
		-9387,-18814,-16375, //	x,y,z
		-10035,-18227,-16375, //	x,y,z
		-14673,-17915,-16375, //	x,y,z
		-15367,-18473,-16375, //	x,y,z
		-14588,-18088,-16375, //	x,y,z
		-15177,-18814,-16375, //	x,y,z
		-14525,-18221,-16375, //	x,y,z
		-9585,-19149,-16375, //	x,y,z
		-14980,-19149,-16375, //	x,y,z
		-4808,-16381,-16375, //	x,y,z
		-8192,-19098,-16375, //	x,y,z
		-6744,-19098,-16375, //	x,y,z
		-4099,-16952,-16375, //	x,y,z
		-1453,-19099,-16375, //	x,y,z
		-2,-19098,-16375, //	x,y,z
		-3386,-16381,-16375, //	x,y,z
		-6764,-13662,-16375, //	x,y,z
		-8188,-13668,-16375, //	x,y,z
		-4099,-15814,-16375, //	x,y,z
		-6,-13714,-16375, //	x,y,z
		-1430,-13678,-16375, //	x,y,z
};
const int index_count_text_0 = 462;
char indices_text_0C[] = 
{
	0,1,1,
	-2,2,1,
	1,1,1,
	-2,2,1,
	1,1,-9,
	7,1,-8,
	10,1,-7,
	-1,7,-6,
	3,-7,3,
	4,-4,1,
	8,1,1,
	-2,2,1,
	1,-4,3,
	2,1,1,
	1,-3,2,
	1,-1,2,
	-1,1,1,
	1,-3,2,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	-1,1,1,
	1,-3,2,
	1,-1,2,
	-18,17,1,
	-17,-1,18,
	-17,17,1,
	1,1,1,
	1,-3,2,
	-16,-1,19,
	-18,18,1,
	1,-20,19,
	1,-1,2,
	-1,1,1,
	-2,2,1,
	1,-4,3,
	2,-1,-1,
	2,-2,3,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	-19,20,-1,
	-19,19,-15,
	-22,18,4,
	-22,22,-1,
	-21,21,18,
	1,-40,39,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	2,-1,-1,
	2,-2,3,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	-1,1,1,
	-2,2,1,
	1,-4,3,
	1,-1,2,
	-1,1,1,
	1,-3,2,
	2,-1,-1,
	2,-2,3,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	2,-1,-1,
	2,-2,3,
	1,-2,1,
	1,-1,2,
	-66,65,1,
	-65,-1,66,
	1,-66,65,
	2,1,1,
	-1,-1,3,
	1,-3,2,
	-3,2,3,
	1,-2,-1,
	-3,5,2,
	-1,-3,5,
	1,-3,2,
	1,-1,2,
	-1,1,1,
	1,-3,2,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	-27,7,21,
	1,-29,28,
	2,-1,-1,
	2,-2,3,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	-21,1,22,
	1,-24,23,
	1,-1,2,
	1,-2,1,
	1,-1,2,
	1,-6,-1,
	7,-7,8,
	1,-2,1,
	1,-1,2,
	1,-2,1,
	2,-7,1,
	7,-1,-6,
	7,-7,5,
	2,-2,-1,
	4,1,1,
	-2,2,1,
	1,1,1,
	-3,1,2,
	1,1,-8,
	9,-2,-7,
	6,4,1,
	-5,5,-2,
	-6,3,3,
	-9,3,6,
};

D3DVECTOR pos_anim_text[2] = 
{
	{-0.229403f,-267.650421f,-103.040421f},	
	{-0.229403f,-141.053757f,-54.439625f} 
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\stboot.c ===
#include <dsound.h>
#include "sos.h"
#include "macros.h"
#include "bootsnd.h"
#include "pitches.h"

#ifdef STARTUPANIMATION

#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")

// Tell linker to put bootsound code and data into INIT section
#pragma comment(linker, "/merge:DSOUND=INIT")

#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif //STARTUPANIMATION

DSENVELOPEDESC	Env1a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x5,						// hold
	0x20,						// decay
	0x0,						// release
	0x7f,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	Env1m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x10,						// pitch scale
	0x7f,						// filter scale
};




DSENVELOPEDESC	Env2a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x40,						// decay
	0x0,						// release
	0x3f,						// sustain
	0x7f,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	Env2m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x100,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x40,						// pitch scale
	0x4f,						// filter scale
};
	

DSENVELOPEDESC	Env3a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x3,						// hold
	0x10,						// decay
	0x20,						// release
	0x10,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	Env3m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x10,						// pitch scale
	0x1f,						// filter scale
};



DSENVELOPEDESC	OpenEnva = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x0,						// attack
	0x0,						// hold
	0x0,						// decay
	0x0,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	OpenEnvm = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0,						// attack
	0x0,						// hold
	0x00,						// decay
	0x00,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

extern	unsigned short  Sin128[];
extern	unsigned short	Saw128[];
extern	unsigned short	Noise8192[];
extern	unsigned short	FM32768[];
extern	unsigned short	Glock[];

extern	unsigned short	Bubble[];
extern	unsigned short	ThunEl16[];
extern	unsigned short	ReverseThunEl16[];


//
// patch is table, loop, env1, env2
// so, patches are defined by a waveform, a length, a loop address
// and the pair of envelopes.
//


const struct DSPpatch PatchSin = {
	Sin128,			// start addr
	256,			// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&Env1a,			// ampitude envelope
	&Env1m			// multi purpose envelope
};

///////////////////////////////////////////////////////////////////////
DSENVELOPEDESC	SawEnv1a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x2,						// hold
	0x10,						// decay
	0x0,						// release
	0x9f,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	SawEnv1m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x10,						// attack
	0x100,						// hold
	0x100,						// decay
	0x80,						// release
	0xff,						// sustain
	0x00,						// pitch scale
	-80,						// filter scale
};


const struct DSPpatch PatchSaw1 = {
	Saw128,			// start addr
	256,				// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&SawEnv1a,			// ampitude envelope
	&SawEnv1m			// multi purpose envelope
};




///////////////////////////////////////////////////////////////////////

DSENVELOPEDESC	SawEnv2a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x40,						// decay
	0x0,						// release
	0x3f,						// sustain
	0x7f,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	SawEnv2m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x100,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x00,						// pitch scale
	0x0,						// filter scale
};

const struct DSPpatch PatchSaw2 = {
	Saw128,			// start addr
	256,				// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&SawEnv2a,			// ampitude envelope
	&SawEnv2m			// multi purpose envelope
};



	

///////////////////////////////////////////////////////////////////////
const struct DSPpatch PatchSaw3 = {
	Saw128,			// start addr
	256,			// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&Env3a,			// ampitude envelope
	&Env3m			// multi purpose envelope
};



const struct DSPpatch PatchSquare = {
	Saw128,			// start addr
	256,			// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&Env3a,			// ampitude envelope
	&Env3m			// multi purpose envelope
};


/////////////////////////////////////////////////////////////////////
DSENVELOPEDESC	NoiseEnv1a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x3,						// hold
	0x10,						// decay
	0x20,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	NoiseEnv1m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x100,						// attack
	0x0,						// hold
	0x30,						// decay
	0xc0,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

/////////////////////////////////////////////////////////////////////
const struct DSPpatch PatchEnvNoise1 = {
	Noise8192,			// start addr
	8192*2,			// length
	0,				// loop start
	8192*2,			// loop end
	1,				// loop sound
	&NoiseEnv1a,			// ampitude envelope
	&NoiseEnv1m			// multi purpose envelope
};


//////////////////////////////
const struct DSPpatch PatchFM = {
	FM32768,			// start addr
	32768,			// length
	0,				// loop start
	32768,			// loop end
	0,				// loop sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
///////////////////////////////////////////////////////////////
const struct DSPpatch PatchGlock = {
	Glock,			// start addr
	3768*2,			// length...from glock.equ
	0,				// loop start
	3768*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};

///////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
const struct DSPpatch PatchThunEl16 = {
	ThunEl16,			// start addr
	0x5540*2,			// length...from glock.equ
	0,				// loop start
	0x5540*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
///////////////////////////////////////////////////////////////
const struct DSPpatch PatchRevThun = {
	ReverseThunEl16,			// start addr
	0x5540*2,			// length...from glock.equ
	0,				// loop start
	0x5540*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
///////////////////////////////////////////////////////////////

const struct DSPpatch PatchBubble = {
	Bubble,			// start addr
	6719*2,			// length...from glock.equ
	0,				// loop start
	6719*2,			// loop end
	1,				//  loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};


#define	PSIN1		0
#define	PSAW1		1
#define	PSQUARE		2
#define	PSAW2		3
#define	PSAW3		4
#define	PNOISE1		5
#define	PGLOCK		6
#define	PBUBBLE		7
#define	PFM		8
#define	PTHUNEL16 	9
#define	PREVTHUN	10

struct DSPpatch	const *Patches[] = {
	&PatchSin,			// patch 0
	&PatchSaw1,			// patch 1
	&PatchSquare,		// patch 2
	&PatchSaw2,			// patch 3
	&PatchSaw3,			// patch 4
	&PatchEnvNoise1,	// patch 5
	&PatchGlock,		// patch 6
	&PatchBubble,		// 7
	&PatchFM,		// 8
	&PatchThunEl16,		//9
	&PatchRevThun		// 10
};



// throbbing bass
//
const unsigned short Boot0[] = {
	fset(29000,26000),
	patch(PSAW1),
	volume(10),
	rest(194-50),
	note(dd1,130),
	rest(2),
	note(dd1,125),
	rest(3),
	note(dd1,70),
	rest(2),
	note(dd1,77),
	rest(3),
	note(dd1,97),
	rest(3),
	note(dd1,91),
	rest(3),
	note(dd1,47),
	rest(3),
	note(dd1,51),
	rest(3),
	note(dd1,57),
	rest(3),
	note(dd1,132),
	rest(0),





//	rest(194),
//	fset(29000,26000),
//	patch(PSAW1),
//	volume(10),
//	loop(13),
//
//		note(dd1,57),
//		rest(3),
//	endloop,
//	note(dd1,28),
//	rest(2),
//	loop(6),
//		volume(15),
//		note(dd1,27),
//		rest(3),
//	endloop,
//
	loop(255),
	rest(20000),
	endloop
};






//noise whoosh for opening
const unsigned short Boot1[] = {
	fset(1000,26000),
	patch(5),
	volume(43),
	note(cc2,1),
	loop(10),
		finc(3000,26000),
		slur(cc2,13),
	endloop,
	ring(4),
	volume(20),
	loop(60),
		volume(1),
		finc(-1000,26000),
		slur(cc2,15),
	endloop,

	loop(255),
	rest(2000),
	endloop
};

// bubbling sound
const unsigned short Boot2[] = {
	patch(PBUBBLE),
	volume(12),
	fset(6000,26000),
	rest(134),
	note(dd2,412+60),
	loop(20),
		ring(20),
		finc(1000,26000),
	endloop,
	loop(30),
		ring(10),
		volume(4),
	endloop,
	loop(255),
		rest(20000),
	endloop
};


// first and last flashes
const unsigned short Boot3[] = {
	patch(PTHUNEL16),
	volume(40),
	fset(32767,26000),
	rest(134),
	note(dd3,820),
	volume(-25),
	note(dd3,200),
	loop(20),
		ring(20),
		volume(2),
		finc(-1000,26000),
	endloop,
	ring(10000),
	loop(255),
		rest(2000),
	endloop
};

// fast noisy stuff...
//
const unsigned short Boot4[] = {
	rest(194),
	fset(32000,26000),
	patch(PNOISE1),
	volume(160),
	loop(8),
		volume(-3),
		note(cc4,15),
		rest(5),
		note(ff4,15),
		volume(-3),
		rest(5),
		note(gg5,15),
		rest(5),
		volume(-3),
		note(ff4,15),
		rest(5),
	endloop,
	loop(3),
		xpose(0x100),
		volume(-3),
		note(cc4,10),
		rest(5),
		note(ff4,10),
		volume(-3),
		rest(5),
		note(gg5,10),
		rest(5),
		volume(-3),
		note(ff4,10),
		rest(5),
	endloop,


	note(ff4,10),

	loop(255),
	rest(20000),
	endloop
};

// glocks....
const unsigned short Boot5[] = {
	patch(PGLOCK),
	volume(55),
	rest(1114),
	fset(32000,26000),
	
	note(as2,20),
	note(ff2,20),
	note(as1,20),

	volume(10),	
	loop(6),

		note(as2,18),
		rest(2),

		volume(30),
		note(as2,18),
		rest(2),

		volume(20),

		note(as2,18),
		rest(2),
		
		volume(-35),

		finc(-2500,26000),
	endloop,

	loop(255),
	rest(20000),
	endloop
};

// glocks....
const unsigned short Boot6[] = {




//	patch(PGLOCK),
//	volume(10),
//	loop(100),
//		note(cc3,55),
//		rest(5),
//	endloop,
//	rest(1194),
//	fset(32000,26000),

//	note(cc3,40),
//	rest(1),
//	note(ff3,40),
//	rest(1),
//	note(cc3,40),
//	rest(1),
//	note(gg3,400),
//	rest(1),

//	loop(40),
//		note(cc3,18),
//		rest(2),
//		volume(2),
//	endloop,
//	note(cc3,500),
	loop(255),
	rest(20000),
	endloop
};

/////
// glocks....
const unsigned short Boot8[] = {
	patch(PGLOCK),
	volume(100),
	rest(1194),
	fset(32000,26000),
//	note(cc2,40),
//	rest(1),
//	note(ff2,40),
//	rest(1),
//	note(cc2,40),
//	rest(1),
//	note(gg2,400),
//	rest(1),



//	loop(40),
//		note(gg2,18),
//		rest(2),
//		volume(2),
//	endloop,
//	note(cc3,500),

	loop(255),
	rest(20000),
	endloop
};


// bass beg....
const unsigned short Boot7[] = {
	patch(PSAW2),
	xpose(0x60),
	volume(18),
	fset(1000,26000),
	note(dd2,1),
	loop(19),
		slur(dd2,10),
		finc(1500,2600),
	endloop,
	rest(800),
	note(dd2,1),
	loop(30),
		slur(dd2,10),
		finc(-750,2600),
	endloop,
	loop(30),
		slur(dd2,5),
		volume(3),
	endloop,


	loop(255),
	rest(2000),
	endloop
};

////////////////////////////////////////////////////////
// Boot track 9:  Pulses in sync with blob

const unsigned short Boot9[] = {
	patch(PTHUNEL16),
	volume(50),
	rest(326-50),
	note(aa2,280),
	rest(0),
	volume(-15),
	note(aa2,244),
	rest(0),
	volume(-15),
	note(aa2,500),

	loop(255),
	rest(2000),
	endloop
};

////////////////////////////////////////////////////////
// Boot track A:  Pulses in sync with blob

const unsigned short BootA[] = {
	patch(PTHUNEL16),
	volume(50),
	rest(454-50),
	note(aa2,252),
	rest(0),
	note(aa2,194),
	rest(0),
	volume(-20),
	note(aa2,200),


	loop(255),
	rest(2000),
	endloop
};

////////////////////////////////////////////////////////
// Boot track B:  Pulses in sync with blob

const unsigned short BootB[] = {
	patch(PTHUNEL16),
	volume(50),
	rest(526-50),
	note(aa2,274),
	rest(0),
	note(aa2,154),
	rest(0),
	volume(-20),
	note(aa2,200),

	loop(255),
	rest(2000),
	endloop
};



const unsigned short *Boot[] = {
	Boot0,Boot1,Boot2,Boot3,Boot4,Boot5,Boot6,Boot7,Boot8,Boot9,BootA,BootB
};
/////////////////////////////////////////////////////////////////////////

const unsigned short Tune0[] = {

	patch(PREVTHUN),
	note(cc3,800),
	patch(PTHUNEL16),
	note(cc3,800),

	rest(200),
	patch(PSIN1),

	loop(5),
	loop(120),
		note(cc2,50),
		xpose(200),
		rest(0),
	endloop,
	loop(120),
		note(cc0,50),
		xpose(-200),
		rest(0),
	endloop,
	endloop,
	note(5,6),
	rest(0x10),
	
//	0,1,2,3,4
};

const unsigned short Tune1[] = {

//	fset(6000,26000),
	patch(PSIN1),

	note(cc3,200),

};

const unsigned short *Tune[] = {
	Tune0
};

const struct sound sound_calls[] = {
	0,0,0,NULL,				//0 
	1,0,0xfff,Boot,			//1
	1,0,0x001,Tune,			//2
	1,0,0x001,Tune,			//2
};


struct sound sound_calls2[2];

int	max_sound_call = 0x2;
int	default_clock_value = 80;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\st.c ===
#include <dsound.h>
#include "sos.h"
#include "macros.h"
#include "bootsnd.h"
#include "pitches.h"

#ifdef STARTUPANIMATION

#pragma data_seg("INIT_RW")
#pragma code_seg("INIT")
#pragma bss_seg("INIT_RW")
#pragma const_seg("INIT_RD")

// Tell linker to put bootsound code and data into INIT section
#pragma comment(linker, "/merge:DSOUND=INIT")

#pragma comment(linker, "/merge:INIT_RD=INIT")
#pragma comment(linker, "/merge:INIT_RW=INIT")

#endif //STARTUPANIMATION

DSENVELOPEDESC	Env1a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x5,						// hold
	0x20,						// decay
	0x0,						// release
	0x7f,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	Env1m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x10,						// pitch scale
	0x7f,						// filter scale
};




DSENVELOPEDESC	Env2a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x40,						// decay
	0x0,						// release
	0x3f,						// sustain
	0x7f,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	Env2m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x100,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x40,						// pitch scale
	0x4f,						// filter scale
};
	

DSENVELOPEDESC	Env3a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x3,						// hold
	0x10,						// decay
	0x20,						// release
	0x10,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	Env3m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x10,						// pitch scale
	0x1f,						// filter scale
};



DSENVELOPEDESC	OpenEnva = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x0,						// attack
	0x0,						// hold
	0x0,						// decay
	0x0,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	OpenEnvm = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0,						// attack
	0x0,						// hold
	0x00,						// decay
	0x00,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

extern	unsigned short  Sin128[];
extern	unsigned short	Saw128[];
extern	unsigned short	Noise8192[];
extern	unsigned short	FM32768[];
extern	unsigned short	Glock[];
extern	unsigned short	Thun8k[];
extern	unsigned short	Cannon[];
extern	unsigned short	Bubble[];
extern	unsigned short	ThunEl16[];
extern	unsigned short	ReverseThunEl16[];


//
// patch is table, loop, env1, env2
// so, patches are defined by a waveform, a length, a loop address
// and the pair of envelopes.
//


const struct DSPpatch PatchSin = {
	Sin128,			// start addr
	256,			// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&Env1a,			// ampitude envelope
	&Env1m			// multi purpose envelope
};

///////////////////////////////////////////////////////////////////////
DSENVELOPEDESC	SawEnv1a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x2,						// hold
	0x10,						// decay
	0x0,						// release
	0x9f,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	SawEnv1m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x10,						// attack
	0x100,						// hold
	0x100,						// decay
	0x80,						// release
	0xff,						// sustain
	0x00,						// pitch scale
	-80,						// filter scale
};


const struct DSPpatch PatchSaw1 = {
	Saw128,			// start addr
	256,				// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&SawEnv1a,			// ampitude envelope
	&SawEnv1m			// multi purpose envelope
};




///////////////////////////////////////////////////////////////////////

DSENVELOPEDESC	SawEnv2a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x0,						// hold
	0x40,						// decay
	0x0,						// release
	0x3f,						// sustain
	0x7f,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	SawEnv2m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x100,						// attack
	0x0,						// hold
	0x10,						// decay
	0x0,						// release
	0x1f,						// sustain
	0x00,						// pitch scale
	0x0,						// filter scale
};

const struct DSPpatch PatchSaw2 = {
	Saw128,			// start addr
	256,				// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&SawEnv2a,			// ampitude envelope
	&SawEnv2m			// multi purpose envelope
};



	

///////////////////////////////////////////////////////////////////////
const struct DSPpatch PatchSaw3 = {
	Saw128,			// start addr
	256,			// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&Env3a,			// ampitude envelope
	&Env3m			// multi purpose envelope
};



const struct DSPpatch PatchSquare = {
	Saw128,			// start addr
	256,			// length
	0,				// loop start
	256,			// loop end
	1,				// loop sound
	&Env3a,			// ampitude envelope
	&Env3m			// multi purpose envelope
};


/////////////////////////////////////////////////////////////////////
DSENVELOPEDESC	NoiseEnv1a = {
	DSEG_AMPLITUDE,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x1,						// attack
	0x3,						// hold
	0x10,						// decay
	0x20,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

DSENVELOPEDESC	NoiseEnv1m = {
	DSEG_MULTI,				// EG
	DSEG_MODE_DELAY,			// mode
	0,							// delay
	0x100,						// attack
	0x0,						// hold
	0x30,						// decay
	0xc0,						// release
	0xff,						// sustain
	0x0,						// pitch scale
	0x0,						// filter scale
};

/////////////////////////////////////////////////////////////////////
const struct DSPpatch PatchEnvNoise1 = {
	Noise8192,			// start addr
	8192*2,			// length
	0,				// loop start
	8192*2,			// loop end
	1,				// loop sound
	&NoiseEnv1a,			// ampitude envelope
	&NoiseEnv1m			// multi purpose envelope
};


//////////////////////////////
const struct DSPpatch PatchFM = {
	FM32768,			// start addr
	32768,			// length
	0,				// loop start
	32768,			// loop end
	0,				// loop sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
///////////////////////////////////////////////////////////////
const struct DSPpatch PatchGlock = {
	Glock,			// start addr
	3768*2,			// length...from glock.equ
	0,				// loop start
	3768*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};

///////////////////////////////////////////////////////////////
const struct DSPpatch PatchThun8k = {
	Thun8k,			// start addr
	10922*2,			// length...from glock.equ
	0,				// loop start
	10922*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
///////////////////////////////////////////////////////////////
const struct DSPpatch PatchThunEl16 = {
	ThunEl16,			// start addr
	0x5540*2,			// length...from glock.equ
	0,				// loop start
	0x5540*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
///////////////////////////////////////////////////////////////
const struct DSPpatch PatchRevThun = {
	ReverseThunEl16,			// start addr
	0x5540*2,			// length...from glock.equ
	0,				// loop start
	0x5540*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
///////////////////////////////////////////////////////////////

const struct DSPpatch PatchCannon = {
	Cannon,			// start addr
	3086*2,			// length...from glock.equ
	0,				// loop start
	3086*2,			// loop end
	0,				// Don't loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};
const struct DSPpatch PatchBubble = {
	Bubble,			// start addr
	6719*2,			// length...from glock.equ
	0,				// loop start
	6719*2,			// loop end
	1,				//  loop this sound
	&OpenEnva,			// ampitude envelope
	&OpenEnvm			// multi purpose envelope
};


#define	PSIN1	0
#define	PSAW1	1
#define	PSQUARE	2
#define	PSAW2	3
#define	PSAW3	4
#define	PNOISE1	5
#define	PGLOCK	6
#define	PTHUN	7
#define	PCANNON	8
#define	PBUBBLE	9
#define	PFM		10
#define	PTHUNEL16 11
#define	PREVTHUN	12
struct DSPpatch	const *Patches[] = {
	&PatchSin,			// patch 0
	&PatchSaw1,			// patch 1
	&PatchSquare,		// patch 2
	&PatchSaw2,			// patch 3
	&PatchSaw3,			// patch 4
	&PatchEnvNoise1,	// patch 5
	&PatchGlock,		// patch 6
	&PatchThun8k,		// patch 7
	&PatchCannon,		// 8
	&PatchBubble,		// 9
	&PatchFM,			// 10
	&PatchThunEl16,		//11
	&PatchRevThun		// 12
};



// throbbing bass
//
const unsigned short Boot0[] = {
	rest(194),
	fset(25000,26000),
	patch(PSAW1),
	volume(40),
	loop(13),

		note(dd1,57),
		rest(3),
	endloop,
	note(dd1,28),
	rest(2),
	loop(6),
		volume(15),
		note(dd1,27),
		rest(3),
	endloop,

	loop(255),
	rest(2000),
	endloop
};





//noise whoosh for opening
const unsigned short Boot1[] = {
	fset(1000,26000),
	patch(5),
	volume(43),
	note(cc2,1),
	loop(10),
		finc(3000,26000),
		slur(cc2,13),
	endloop,
	ring(4),
	volume(20),
	loop(60),
		volume(1),
		finc(-1000,26000),
		slur(cc2,15),
	endloop,

	loop(255),
	rest(2000),
	endloop
};

// bubbling sound
const unsigned short Boot2[] = {
	patch(PBUBBLE),
	volume(0),
	fset(5000,26000),
	rest(194),
	note(dd2,412),
	loop(20),
		ring(20),
		finc(1000,26000),
	endloop,
	loop(30),
		ring(10),
		volume(4),
	endloop,
	loop(255),
		rest(2000),
	endloop
};


// first and last flashes
const unsigned short Boot3[] = {
	patch(PTHUN),
	volume(20),
	fset(32767,26000),
	rest(134),
	note(dd2,820),
	note(dd2,200),
	loop(20),
		ring(20),
		volume(2),
		finc(-1000,26000),
	endloop,
	ring(10000),
	loop(255),
		rest(2000),
	endloop
};

// fast noisy stuff...
//
const unsigned short Boot4[] = {
	rest(194),
	fset(32000,26000),
	patch(PNOISE1),
	volume(160),
	loop(10),
		volume(-3),
		note(cc4,15),
		rest(5),
		note(ff4,15),
		volume(-3),
		rest(5),
		note(gg5,15),
		rest(5),
		volume(-3),
		note(ff4,15),
		rest(5),
	endloop,
	note(ff4,18),

	loop(255),
	rest(2000),
	endloop
};

// glocks....
const unsigned short Boot5[] = {
	patch(PGLOCK),
	volume(70),
	rest(1194),
	fset(32000,26000),
	loop(40),
		note(cc4,18),
		rest(2),

		volume(15),
	endloop,
	note(cc4,500),
	loop(255),
	rest(2000),
	endloop
};

// glocks....
const unsigned short Boot6[] = {
	patch(PGLOCK),
	volume(70),
	rest(1194),
	fset(32000,26000),
	loop(40),
		note(cc3,18),
		rest(2),
		volume(15),
	endloop,
	note(cc3,500),
	loop(255),
	rest(2000),
	endloop
};

/////
// glocks....
const unsigned short Boot8[] = {
	patch(PGLOCK),
	volume(70),
	rest(1194),
	fset(32000,26000),
	loop(40),
		note(gg3,18),
		rest(2),
		volume(15),
	endloop,
	note(cc3,500),
	loop(255),
	rest(2000),
	endloop
};


// bass beg....
const unsigned short Boot7[] = {
	patch(PSAW2),
	volume(3),
	fset(1000,26000),
	note(dd2,1),
	loop(19),
		slur(dd2,10),
		finc(1500,2600),
	endloop,

	loop(255),
	rest(2000),
	endloop
};


const unsigned short *Boot[] = {
	Boot0,Boot1,Boot2,Boot3,Boot4,Boot5,Boot6,Boot7,Boot8
};
/////////////////////////////////////////////////////////////////////////

const unsigned short Tune0[] = {

	patch(PREVTHUN),
	note(cc3,800),
	patch(PTHUNEL16),
	note(cc3,800),

	rest(200),
	patch(PSIN1),

	loop(5),
	loop(120),
		note(cc2,50),
		xpose(200),
		rest(0),
	endloop,
	loop(120),
		note(cc0,50),
		xpose(-200),
		rest(0),
	endloop,
	endloop,
	note(5,6),
	rest(0x10),
	
//	0,1,2,3,4
};

const unsigned short Tune1[] = {

//	fset(6000,26000),
	patch(PSIN1),

	note(cc3,200),

};

const unsigned short *Tune[] = {
	Tune0
};

const struct sound sound_calls[] = {
	0,0,0,NULL,				//0 
	1,0,0x1ff,Boot,			//1
	1,0,0x001,Tune,			//2
	1,0,0x001,Tune,			//2
};


struct sound sound_calls2[2];

int	max_sound_call = 0x2;
int	default_clock_value = 80;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\tm_pixels.h ===
///////////////////////////////////////////////////////////////////////////////
//
// tm.h
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __tm_h__
#define __tm_h__

DWORD tm_pixels[256] =
{
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0xff152305,0xff1e3207,0xff1e3207,0xff1e3207,0xff1e3207,0xff1e3207,0x0,0xff152305,0xff1e3207,0x0,0x0,0x0,0xff0e1703,0xff1e3207,0xff070c02,0x0,
	0xff518814,0xff6fbb1b,0xff6fbb1b,0xff6fbb1b,0xff6fbb1b,0xff6fbb1b,0x0,0xff6fbb1b,0xff6fbb1b,0xff152305,0x0,0x0,0xff4a7d12,0xff6fbb1b,0xff1e3207,0x0,
	0x0,0x0,0xff33560c,0xff6fbb1b,0x0,0x0,0x0,0xff6fbb1b,0xff6fbb1b,0xff3c640f,0x0,0xff070c02,0xff6fbb1b,0xff6fbb1b,0xff1e3207,0x0,
	0x0,0x0,0xff33560c,0xff6fbb1b,0x0,0x0,0x0,0xff6fbb1b,0xff5a9716,0xff61a318,0x0,0xff2c4a0b,0xff5a9716,0xff6fbb1b,0xff1e3207,0x0,
	0x0,0x0,0xff33560c,0xff6fbb1b,0x0,0x0,0x0,0xff6fbb1b,0xff33560c,0xff68af19,0xff0e1703,0xff437010,0xff33560c,0xff6fbb1b,0xff1e3207,0x0,
	0x0,0x0,0xff33560c,0xff6fbb1b,0x0,0x0,0x0,0xff6fbb1b,0xff33560c,0xff437010,0xff33560c,0xff68af19,0xff152305,0xff6fbb1b,0xff1e3207,0x0,
	0x0,0x0,0xff33560c,0xff6fbb1b,0x0,0x0,0x0,0xff6fbb1b,0xff33560c,0xff2c4a0b,0xff6fbb1b,0xff61a318,0x0,0xff6fbb1b,0xff1e3207,0x0,
	0x0,0x0,0xff33560c,0xff6fbb1b,0x0,0x0,0x0,0xff6fbb1b,0xff33560c,0xff070c02,0xff6fbb1b,0xff3c640f,0x0,0xff6fbb1b,0xff1e3207,0x0,
	0x0,0x0,0xff0e1703,0xff152305,0x0,0x0,0x0,0xff152305,0xff0e1703,0x0,0xff152305,0xff070c02,0x0,0xff1e3207,0xff070c02,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};

#endif // ___h__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\tex_gen.cpp ===
//
//	tex_gen.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#include "precomp.h"
#include "tex_gen.h"
#include "xbs_app.h"
#include "qrand.h"


#ifndef STARTUPANIMATION
#define ALLOC_TEX_MEM(nb) MemAlloc(nb)
#define FREE_TEX_MEM(pb)  MemFree(pb) 
#else
#define ALLOC_TEX_MEM(nb) MemAllocContiguous(nb,D3DTEXTURE_ALIGNMENT)
#define FREE_TEX_MEM(pb)  MemFreeContiguous(pb)
#endif


inline DWORD GetMaxMipCountFromSize(DWORD size )
{
	DWORD c = 0;
	
	while(size >>= 1) 
		++c;
	
	return c;
}

inline D3DCOLOR VectorToRGBA( const D3DVECTOR* v)
{
    D3DCOLOR color;

    FLOAT r = ( ( v->x + 1.0f ) * 127.5f );
    FLOAT g = ( ( v->y + 1.0f ) * 127.5f );
    FLOAT b = ( ( v->z + 1.0f ) * 127.5f );
    FLOAT a = ( 255.0f);

    __asm
    {
        cvttss2si edx, a       
        cvttss2si ecx, r       
        cvttss2si ebx, g       
        cvttss2si eax, b       
        shl ebx, 8             
        or  eax, ebx           
        shl ecx, 16            
        or  eax, ecx           
        shl edx, 24            
        or  eax, edx           
        mov color, eax       
    }

    return color;
}

LPDIRECT3DTEXTURE8 CreateHighlightTexture(int size,int power,bool b_falloff_alpha, float f_linear_w, float f_cos_w)
{
	IDirect3DTexture8 *pTexture;
	gpd3dDev->CreateTexture( size,size,1,0,D3DFMT_A8R8G8B8,NULL,&pTexture );

	D3DSURFACE_DESC desc;
	pTexture->GetLevelDesc(0,&desc);

	D3DLOCKED_RECT rc;
	pTexture->LockRect(0,&rc,NULL,0);
	int tmp = 4096/size;
	float	ooRadius = 1.0f/(float)(size/2);
	int cntrx = (size-1) / 2;
	int cntry = (size-1) / 2;

	unsigned int *pData;
	pData = (unsigned int *)rc.pBits;

	DWORD *pSourceBits = (DWORD *)ALLOC_TEX_MEM(sizeof(DWORD)*size*size);

	unsigned char cosTable[257];
	for (int i=0; i < 256; i++)
	{
		float Cos,Sin;
		SinCos((float)i/256.f,&Sin,&Cos);
		for (int k = power; k; --k)
			Cos *=Cos;
		float f_sum = 255.f * (Cos * f_cos_w + (float(256-i) / 256.f) * f_linear_w);

		__asm 
		{
			cvttss2si eax, f_sum
			mov		ebx,i
			mov	cosTable[ebx],al
		}
	}

	for (int y=0; y < size; y++)
	{
		unsigned int *pPixel = (unsigned int *)pSourceBits + y*size;
		for (int x=0; x < y; x++)
		{
			float f_dist = fast_sqrt((float)((x-cntrx)*(x-cntrx) + (y-cntry)*(y-cntry))) * ooRadius;
			if (f_dist < 1.f)
			{
				unsigned int c;
				float indexShift = f_dist * 256.f;
				__asm 
				{
					cvttss2si ebx, indexShift;
					movzx	  eax, byte ptr cosTable[ebx]
					mov		  c,eax
				}

				unsigned char a = b_falloff_alpha ? c : 255;

				DWORD P = c | c<<8 | c<<16 | a<<24;
				*pPixel++ = P;
			} 
			else 
			{
				unsigned char a = b_falloff_alpha ? 0 : 0xff000000;
				*pPixel++ = a;
			}
		}
	}
		
	XGSwizzleRect(pSourceBits,
				  0,
				  NULL,
				  rc.pBits,
				  size,
				  size,
				  NULL,
				 sizeof(DWORD));
	pTexture->UnlockRect(0);

	FREE_TEX_MEM(pSourceBits);

	return pTexture;	
}


LPDIRECT3DTEXTURE8 CreateGlowTexture(int width,int height,int colorScale,int noise,int seed)
{
	IDirect3DTexture8 *pTexture;
	int mipLevels = max(GetMaxMipCountFromSize(width),GetMaxMipCountFromSize(height));
	gpd3dDev->CreateTexture(
		width,
		height,
		mipLevels,			
		0,					
		D3DFMT_A8R8G8B8,	
		D3DPOOL_MANAGED,	
		&pTexture);

	for (int i=0; i < mipLevels; i++)
	{
		D3DSURFACE_DESC desc;
		pTexture->GetLevelDesc(i,&desc);

		D3DLOCKED_RECT rc;
		pTexture->LockRect(i,&rc,NULL,0);
		int sWidth = width >> i;
		int tmp = 4096/sWidth;
		int sHeight = height >> i;
		int scale=1;	
		while (tmp!=1) {
			scale++;
			tmp=tmp>>1;
		}
		int cntrx = (sWidth-1) / 2;
		int cntry = (sHeight-1) / 2;

		unsigned int *pData;
		pData = (unsigned int *)rc.pBits;

		DWORD *pSourceBits = (DWORD *)ALLOC_TEX_MEM(sizeof(DWORD)*sWidth*sHeight);

		unsigned int *pPixel = (unsigned int *)pSourceBits;

		for (int y=0; y < sHeight; y++)
		{
			for (int x=0; x < sWidth; x++)
			{
				_asm
				{
					mov		ecx,scale
					mov		eax,x
					mov		ebx,y
					sub		eax,cntrx
					sub		ebx,cntry
					sal		eax,cl
					imul	eax
					sal		ebx,cl
					xchg	eax,ebx
					mov		edi,pPixel
					imul	eax
					mov		edx,4096*4096
					add		ebx,eax
					sub		edx,ebx
					jnc		noOverflow1
					xor		edx,edx
noOverflow1:		mov		ebx,edx
					mov		eax,ebx
					mul		noise
					mov		ecx,seed
					mov		eax,edx
					mov		edx,ecx
					rcl		ecx,13
					sub		edx,11
					sub		ecx,edx
					mov		seed,ecx
					mul		ecx
					shl		edx,15
					sub		ebx,edx	
					jge		bxOk1
					xor		ebx,ebx
					
bxOk1:				and		ebx,0x1ff0000
					rcl		ebx,8
					sbb		ebx,0
					mov		eax,ebx
					shr		eax,24
					mul		al
					mul		eax
					shr		eax,16
					mul		eax
					shr		eax,16

					and		eax,0xff00
					mov		ecx,eax
					shr		ecx,8
					or		ecx,eax
					mov		eax,ecx
					shl		ecx,16
					or		ecx,eax

					mov		[edi],ecx
					add		edi,4
					mov		pPixel,edi
				}
			}
		}		

		XGSwizzleRect(pSourceBits,
					  0,
					  NULL,
					  rc.pBits,
					  sWidth,
					  sHeight,
					  NULL,
					  sizeof(DWORD));
		pTexture->UnlockRect(i);
	
		FREE_TEX_MEM(pSourceBits);
	}
	return pTexture;
}

LPDIRECT3DTEXTURE8 CreateGradientTexture( DWORD dwWidth,    DWORD dwHeight,
										  DWORD dwClrStart, DWORD dwClrEnd)
{
	LPDIRECT3DTEXTURE8 pTex = NULL;
	gpd3dDev->CreateTexture( dwWidth, dwHeight, 1, 0, D3DFMT_A8R8G8B8, NULL, &pTex );

	DWORD *pSourceBits = (DWORD *)ALLOC_TEX_MEM(sizeof(DWORD)*dwWidth*dwHeight);

	D3DCOLORVALUE cv_start,cv_end;

	cv_start.a = ((float)(dwClrStart>>24))/255.f;
	cv_start.r = ((float)((dwClrStart>>16)&0xff))/255.f;
	cv_start.g = ((float)((dwClrStart>>8)&0xff))/255.f;
	cv_start.b = ((float)(dwClrStart&0xff))/255.f;

	cv_end.a = ((float)(dwClrEnd>>24))/255.f;
	cv_end.r = ((float)((dwClrEnd>>16)&0xff))/255.f;
	cv_end.g = ((float)((dwClrEnd>>8)&0xff))/255.f;
	cv_end.b = ((float)(dwClrEnd&0xff))/255.f;

	float del = 1.f/((float)(dwHeight-1));

	for(DWORD r = 0; r < dwHeight; r++)
	{
		float t = del * ((float)r);

		D3DCOLOR color;

		FLOAT _r = (cv_start.r * (1.f-t) + cv_end.r * t) * 255.f;
		FLOAT _g = (cv_start.g * (1.f-t) + cv_end.g * t) * 255.f;
		FLOAT _b = (cv_start.b * (1.f-t) + cv_end.b * t) * 255.f;
		FLOAT _a = (cv_start.a * (1.f-t) + cv_end.a * t) * 255.f;

		__asm
		{
			cvttss2si edx, _a       
			cvttss2si ecx, _r       
			cvttss2si ebx, _g       
			cvttss2si eax, _b       
			shl ebx, 8             
			or  eax, ebx           
			shl ecx, 16            
			or  eax, ecx           
			shl edx, 24            
			or  eax, edx           
			mov color, eax       
		}

		DWORD *ppix = pSourceBits + r * dwWidth;
		for(DWORD x = 0; x < dwWidth; x++)
		{
			*ppix++ = color;
		}
	};

	D3DLOCKED_RECT rc;
	pTex->LockRect(0,&rc,NULL,0);

	XGSwizzleRect(pSourceBits,
				  0,
				  NULL,
				  rc.pBits,
				  dwWidth,
				  dwHeight,
				  NULL,
				  sizeof(DWORD));

	FREE_TEX_MEM(pSourceBits);

	pTex->UnlockRect(0);
	return pTex;
}

LPDIRECT3DTEXTURE8 CreateIntensityTexture(
							int           size,
							bool          b_convert_to_normal_map,
							float         f_height_scale,
							int           noise,
							int           seed,
							int           clr_mask,
							int           intensity_seed,
							bool          b_use_intensity_seed,
							DWORD         intensity_max,
							int			  negative_prob
							)
{
	LPDIRECT3DTEXTURE8 pTex;
	gpd3dDev->CreateTexture(size,size,1,0,D3DFMT_A8R8G8B8,D3DPOOL_MANAGED,&pTex);
	
	D3DLOCKED_RECT rc;
	pTex->LockRect(0,&rc,NULL,0);

	DWORD *pSourceBits = (DWORD *)ALLOC_TEX_MEM(sizeof(DWORD)*size*size);

	DWORD *pPixel = pSourceBits;
	memset(pPixel,0,sizeof(DWORD)*size*size);
	
	QRand rng;
    rng.Init(seed);

	DWORD i = (b_use_intensity_seed) ? intensity_seed : rng.Rand(intensity_max);
	*pPixel = (i<<16)|(i<<8)|(i);

	int curSize    = size>>1;
	int curX       = curSize;
	int curY       = curSize;
	int curNoise   = noise>>1;
	int curStep    = size;

	bool bSquare      = true;
	bool bSecondPass  = false;
	
	while(curSize > 0)
	{
		int lx = curX - curSize;
		int rx = curX + curSize;
		int ly = curY - curSize;
		int uy = curY + curSize;

		if(lx < 0)      lx += size;
		if(rx >= size) rx -= size;
		if(ly < 0)      ly += size;
		if(uy >= size) uy -= size;

		if(bSquare)
		{
			DWORD crnSW = *(pPixel + size*ly + lx);
			DWORD crnSE = *(pPixel + size*ly + rx);
			DWORD crnNW = *(pPixel + size*uy + lx);
			DWORD crnNE = *(pPixel + size*uy + rx);

			DWORD dwI = ((crnSW&0xff) + (crnSE&0xff) + (crnNW&0xff) + (crnNE&0xff) ) >> 2;
			
			if(rng.Rand(100) > negative_prob)
			{
				dwI += rng.Rand(curNoise);
				if(dwI > intensity_max) 
					dwI = intensity_max;
			}
			else
			{
				dwI -= rng.Rand(curNoise);
				if(dwI > 255) 
					dwI = 0;
			}
			

			*(pPixel + size*curY + curX) = (dwI<<16)|(dwI<<8)|(dwI);

			curX += curStep;
			if(curX >= size)
			{
				curY += curStep;
				if(curY >= size)
				{
					curX = curSize;
					curY = 0;
					bSquare = false;
					continue;	
				}
				curX = curSize;
			}
		}
		else
		{
			DWORD crnN = *(pPixel + size*uy   + curX);
			DWORD crnS = *(pPixel + size*ly   + curX);
			DWORD crnW = *(pPixel + size*curY + lx);
			DWORD crnE = *(pPixel + size*curY + rx);

			DWORD dwI = ((crnN&0xff) + (crnS&0xff) + (crnE&0xff) + (crnW&0xff)) >> 2;
			
			if(rng.Rand(100) > negative_prob)
			{
				dwI += rng.Rand(curNoise);
				if(dwI > intensity_max) 
					dwI = intensity_max;
			}
			else
			{
				dwI -= rng.Rand(curNoise);
				if(dwI > 255) 
					dwI = 0;
			}


			*(pPixel + size*curY + curX) = (dwI<<16)|(dwI<<8)|(dwI);

			curX += curStep;
			if(curX >= size)
			{
				curY += curStep;
				if(curY >= size)
				{
					if(bSecondPass)
					{
						curStep = curSize;
						curSize  >>= 1;
						curNoise >>= 1;
						curX = curSize;
						curY = curSize;
						bSquare = true;	
					}
					else
					{
						curX = 0;
						curY = curSize;
					}
					bSecondPass = !bSecondPass;
					continue;
				}

				curX = bSecondPass ? 0 : curSize;
			}	
		}
	}

	DWORD *pTooFar = pPixel + size*size;
	while(pPixel != pTooFar)
	{
		*pPixel = (((*pPixel)&0xff)<<24) | ((*pPixel)&clr_mask);
        pPixel++;
	}
	if(b_convert_to_normal_map)
	{
		for( int y=0; y<size; y++ )
		{
			DWORD *prow0 = pSourceBits + size*y;
			DWORD *prow1 = pSourceBits + size*(y+1);

			if(prow1 >= pTooFar)
				prow1 = pTooFar;

			for( int x = 0; x < size; x++ )
			{
				DWORD* p00 = prow0 + x;
				DWORD* p10 = prow0 + x + 1;
				if(p10 >= pTooFar)
					p10 = pTooFar;

				DWORD* p01 = prow1 + x;

				FLOAT fHeight00 = (FLOAT)(((*p00)&0x00ff0000)>>16) * f_height_scale;
				FLOAT fHeight10 = (FLOAT)(((*p10)&0x00ff0000)>>16) * f_height_scale;
				FLOAT fHeight01 = (FLOAT)(((*p01)&0x00ff0000)>>16) * f_height_scale;

				D3DVECTOR vPoint00;
				Set(&vPoint00, x+0.0f, y+0.0f, fHeight00 );

				D3DVECTOR vPoint10;
				Set(&vPoint10,x+0.1f, y+0.0f, fHeight10 );

				D3DVECTOR vPoint01;
				Set(&vPoint01, x+0.0f, y+0.1f, fHeight01 );
				
				D3DVECTOR v10;
				Sub(vPoint10,vPoint00,&v10);
				
				D3DVECTOR v01;
				Sub(vPoint01,vPoint00,&v01);

				D3DVECTOR v;
				Cross(v10, v01, &v);
				Normalize(&v);

				*p00 = VectorToRGBA( &v );
			}
		}
	}

	XGSwizzleRect(pSourceBits,
				  0,
				  NULL,
				  rc.pBits,
				  size,
				  size,
				  NULL,
				  sizeof(DWORD));

	FREE_TEX_MEM(pSourceBits);

	pTex->UnlockRect(0);

	return pTex;
}

void CreateIntensityTexture_8Bit(
							LPDIRECT3DTEXTURE8 ppTextures[],
							int   num,
							int   size,
							int   noise,
							int   seed,
							int   intensity_seed,
							int   intensity_max
							)
{
#define MAX_TEXTURES (3)
	if (num > MAX_TEXTURES) return;
	D3DLOCKED_RECT rcs[MAX_TEXTURES];

	int tex_size = size*size;

	int i;
	for (i=0; i<num; i++)
	{
		gpd3dDev->CreateTexture(size,size,1,0,D3DFMT_A8,D3DPOOL_MANAGED,&ppTextures[i]);
		ppTextures[i]->LockRect(0,&rcs[i],NULL,0);
	}
	
	BYTE *pSourceBits = (BYTE *)ALLOC_TEX_MEM(sizeof(BYTE)*size*size * num);
	// byte = pSourceBits[tex_num*tex_size + y*size + x];


	BYTE *pPixel = pSourceBits;
	memset(pPixel,0,sizeof(BYTE)*tex_size*num);
	
	QRand rng;
    rng.Init(seed);

	*pPixel = (BYTE)intensity_seed;

	int curSize    = size>>1;
	int curX       = curSize;
	int curY       = curSize;
	int curNoise   = noise>>1;
	int curStep    = size;

	bool bSquare      = true;
	bool bSecondPass  = false;
	
	while(curSize > 0)
	{
		int lx = curX - curSize;
		int rx = curX + curSize;
		int ly = curY - curSize;
		int uy = curY + curSize;

		if(lx < 0)      lx += size;
		if(rx >= size) rx -= size;
		if(ly < 0)      ly += size;
		if(uy >= size) uy -= size;

		if(bSquare)
		{
			for (i=0; i<num; i++)
			{
				int crnSW = *(pPixel + tex_size * i + size*ly + lx);
				int crnSE = *(pPixel + tex_size * i + size*ly + rx);
				int crnNW = *(pPixel + tex_size * i + size*uy + lx);
				int crnNE = *(pPixel + tex_size * i + size*uy + rx);

				int dwI = (crnSW + crnSE + crnNW + crnNE) >> 2;
				
				dwI += rng.Rand(curNoise*2) - curNoise;

				*(pPixel + tex_size * i + size*curY + curX) = (BYTE) (max(0, min(intensity_max, dwI)));
			}

			curX += curStep;
			if(curX >= size)
			{
				curY += curStep;
				if(curY >= size)
				{
					curX = curSize;
					curY = 0;
					bSquare = false;
					continue;	
				}
				curX = curSize;
			}
		}
		else
		{
			for (i=0; i<num; i++)
			{
				int crnN = *(pPixel + tex_size * i + size*uy   + curX);
				int crnS = *(pPixel + tex_size * i + size*ly   + curX);
				int crnW = *(pPixel + tex_size * i + size*curY + lx);
				int crnE = *(pPixel + tex_size * i + size*curY + rx);

				int dwI = ((crnN&0xff) + (crnS&0xff) + (crnE&0xff) + (crnW&0xff)) >> 2;

				dwI += rng.Rand(curNoise*2) - curNoise;

				*(pPixel + tex_size * i + size*curY + curX) = (BYTE) (max(0, min(intensity_max, dwI)));
			}

			curX += curStep;
			if(curX >= size)
			{
				curY += curStep;
				if(curY >= size)
				{
					if(bSecondPass)
					{
						curStep = curSize;
						curSize  >>= 1;
						curNoise >>= 1;
						curX = curSize;
						curY = curSize;
						bSquare = true;	
					}
					else
					{
						curX = 0;
						curY = curSize;
					}
					bSecondPass = !bSecondPass;
					continue;
				}

				curX = bSecondPass ? 0 : curSize;
			}	
		}
	}

	for (i=0; i<num; i++)
	{
		XGSwizzleRect(pSourceBits,
					  0,
					  NULL,
					  rcs[i].pBits,
					  size,
					  size,
					  NULL,
					  sizeof(BYTE));
		ppTextures[i]->UnlockRect(0);
	}

	FREE_TEX_MEM(pSourceBits);
}





LPDIRECT3DCUBETEXTURE8 CreateNormalizationCubeMap(DWORD dwSize)
{
	LPDIRECT3DCUBETEXTURE8 pCubeMap;     
    gpd3dDev->CreateCubeTexture( dwSize, 1, 0, D3DFMT_X8R8G8B8, D3DPOOL_DEFAULT, &pCubeMap );

	DWORD * pSourceBits = (DWORD *)ALLOC_TEX_MEM(sizeof(DWORD)*dwSize*dwSize);

    for( DWORD i=0; i<6; i++ )
    {
        LPDIRECT3DSURFACE8 pCubeMapFace;
        pCubeMap->GetCubeMapSurface( (D3DCUBEMAP_FACES)i, 0, &pCubeMapFace );
        DWORD*      pPixel = pSourceBits;
        D3DVECTOR   n;
        FLOAT       w, h;

        for( DWORD y = 0; y < dwSize; y++ )
        {
            h  = (FLOAT)y / (FLOAT)(dwSize-1);  // 0 to 1
            h  = ( h * 2.0f ) - 1.0f;           // -1 to 1
            
            for( DWORD x = 0; x < dwSize; x++ )
            {
                w = (FLOAT)x / (FLOAT)(dwSize-1);   // 0 to 1
                w = ( w * 2.0f ) - 1.0f;            // -1 to 1

                switch( i )
                {
                    case D3DCUBEMAP_FACE_POSITIVE_X:    // +x
                        n.x = +1.0;
                        n.y = -h;
                        n.z = -w;
                        break;
                        
                    case D3DCUBEMAP_FACE_NEGATIVE_X:    // -x
                        n.x = -1.0;
                        n.y = -h;
                        n.z = +w;
                        break;
                        
                    case D3DCUBEMAP_FACE_POSITIVE_Y:    // y
                        n.x = +w;
                        n.y = +1.0;
                        n.z = +h;
                        break;
                        
                    case D3DCUBEMAP_FACE_NEGATIVE_Y:    // -y
                        n.x = +w;
                        n.y = -1.0;
                        n.z = -h;
                        break;
                        
                    case D3DCUBEMAP_FACE_POSITIVE_Z:    // +z
                        n.x = +w;
                        n.y = -h;
                        n.z = +1.0;
                        break;
                        
                    case D3DCUBEMAP_FACE_NEGATIVE_Z:    // -z
                        n.x = -w;
                        n.y = -h;
                        n.z = -1.0;
                        break;
                }

				Normalize(&n);
                *pPixel++ = VectorToRGBA( &n );
            }
        }
        
        D3DLOCKED_RECT lock;
        pCubeMapFace->LockRect( &lock, 0, 0L );
        XGSwizzleRect( pSourceBits, 0, NULL, lock.pBits, dwSize, dwSize,
                       NULL, sizeof(DWORD) );
        pCubeMapFace->UnlockRect();
        pCubeMapFace->Release();
    }
    
	FREE_TEX_MEM(pSourceBits);

    return pCubeMap;
}


LPDIRECT3DCUBETEXTURE8 CreateStaticReflectionCubeMap( DWORD dwSize )
{
	Camera old_camera = gApp.theCamera;

	LPDIRECT3DCUBETEXTURE8 pCubeMap;

	gpd3dDev->CreateCubeTexture(dwSize,1,D3DUSAGE_RENDERTARGET,D3DFMT_A8R8G8B8,NULL,&pCubeMap);
	
	LPDIRECT3DSURFACE8 pOldRT,pOldZ;
	gpd3dDev->GetRenderTarget(&pOldRT);
	gpd3dDev->GetDepthStencilSurface(&pOldZ);

	LPDIRECT3DSURFACE8 pNewZ;
	gpd3dDev->CreateDepthStencilSurface(dwSize,dwSize,D3DFMT_LIN_D24S8,
										D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR,
										&pNewZ);

	D3DMATRIX oldProjMat = gApp.theCamera.matProj;
	D3DMATRIX oldViewMat = gApp.theCamera.matWTC;

	gApp.theCamera.setProjection(Pi/2.f,1.f,0.1f,400.f);
	
	D3DVECTOR pos;
	Set(&pos,0.f,0.f,0.f);

	for(DWORD dwFace = 0; dwFace < 6; dwFace++)
	{
		LPDIRECT3DSURFACE8 pNewRT;
		pCubeMap->GetCubeMapSurface( (D3DCUBEMAP_FACES)dwFace, 0, &pNewRT );
		
		gpd3dDev->SetRenderTarget(pNewRT,pNewZ);
		
		if( gpd3dDev->BeginScene() == D3D_OK )
		{
			gpd3dDev->Clear(0,NULL,
							D3DCLEAR_STENCIL | D3DCLEAR_ZBUFFER | D3DCLEAR_TARGET,
							0xff000000,
							1.f,
							0 );

			D3DMATRIX viewMat;
			SetCubeMapView( dwFace, pos, &viewMat );

			gApp.theCamera.setWTC(viewMat);
			gApp.sceneGeom.advanceTime(SCENE_ANIM_START_TIME + SCENE_ANIM_LEN,0.f);
			gApp.sceneGeom.render(false,false);

			pNewRT->Release();

			gpd3dDev->EndScene();
		}
	}

	gpd3dDev->SetRenderTarget(pOldRT,pOldZ);
	
	pOldRT->Release();
	pOldZ->Release();
	pNewZ->Release();

	gApp.theCamera = old_camera;

	return pCubeMap;
}

int GetNumberOfIndicesForTristripMesh(int x_quads, int y_quads, bool b_d_tap_1, bool b_d_tap_2)
{
	if (x_quads <= 14)
	{
		// Single stack is sufficient.
		// Each mesh is composed of x_quads*2 + 1 priming vertices,
		// and for each row there are (x_quads+1)*2 + 2 CR vertices, minus one on the last row.
		return	((b_d_tap_1) ? 1 : 0) +
				x_quads*2 + 1 +
				y_quads*( 2*(x_quads+1) + 2) - 1 +
				((b_d_tap_2) ? 1 : 0);
	}

	return
		GetNumberOfIndicesForTristripMesh(        14, y_quads, b_d_tap_1, true) +
		GetNumberOfIndicesForTristripMesh(x_quads-14, y_quads, true, b_d_tap_2);
}


// returns number of indices added
int CreateTristripForMesh(	WORD* p_index_buffer,
							int x_quads,			// number of quad columns
							int y_quads,			// number of quad rows
							bool b_double_tap_first,
							bool b_double_tap_last,
							int start_index,		// starting index of lower-left corner
							int vstride,			// vertex difference between rows
							int hstride				// vertex difference between columns
							)
{
	if (!vstride) vstride = x_quads+1;
	if (!hstride) hstride = 1;

	if (x_quads > 14)
	{
		int num = 0;
		num += CreateTristripForMesh(&p_index_buffer[num],         14, y_quads, b_double_tap_first, true, start_index           , vstride, hstride);
		num += CreateTristripForMesh(&p_index_buffer[num], x_quads-14, y_quads, true,  b_double_tap_last, start_index+14*hstride, vstride, hstride);
		return num;
	}

	int num = 0;

	if (b_double_tap_first) p_index_buffer[num++] = (WORD) (start_index);
	p_index_buffer[num++] = (WORD) (start_index);

	int i;
	for (i=1; i<=x_quads; i++)
	{
		p_index_buffer[num++] = (WORD) (start_index + i*hstride);
		p_index_buffer[num++] = (WORD) (start_index + i*hstride);
	}

	for (int j=0; j<y_quads; j++)
	{
		p_index_buffer[num++] = (WORD) (start_index + j*vstride);				// double tap beginning of line
		for (int i=0; i<=x_quads; i++)
		{
			p_index_buffer[num++] = (WORD) (start_index + j*vstride + i*hstride);
			p_index_buffer[num++] = (WORD) (start_index + (j+1)*vstride + i*hstride);
		}
		if (j<y_quads-1) p_index_buffer[num++] = (WORD) (start_index + (j+1)*vstride + x_quads*hstride);	// double tap end of line
	}

	if (b_double_tap_last) p_index_buffer[num++] = (WORD) (start_index + y_quads*vstride + x_quads*hstride);

	return num;
}


LPDIRECT3DINDEXBUFFER8 CreateTristripForMesh(int x_quads, int y_quads, int* p_num_indices)
{
	LPDIRECT3DINDEXBUFFER8 p_ib;
	int dummy;
	if (!p_num_indices) p_num_indices = &dummy;
	*p_num_indices = GetNumberOfIndicesForTristripMesh(x_quads, y_quads);
	gpd3dDev->CreateIndexBuffer(
		*p_num_indices * sizeof(WORD),
		D3DUSAGE_WRITEONLY,
		D3DFMT_INDEX16,
		D3DPOOL_DEFAULT,
		&p_ib
		);

	WORD* p_indices;
	p_ib->Lock(0, 0, (BYTE**)&p_indices, 0);
	CreateTristripForMesh(p_indices, x_quads, y_quads);
	p_ib->Unlock();	
	return p_ib;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\VBlob.h ===
///////////////////////////////////////////////////////////////////////////////
// File: VBlob.h
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#ifndef VBLOB_H
#define VBLOB_H


#include "qrand.h"




// The vertex list holding the unit sphere coordinates remain on the card.
// Each frame another list is streamed.

struct VBlobConstantVertex
{
	D3DVECTOR unit_sphere_normal;
};


struct VBlobChangingVertex
{
    D3DVECTOR4 normal;	// not normalized (do it in the GPU); w is the displacement due to bumps
};




// Bloblets need to be able to be copied.
class VBloblet
{
public:
	void Init()  { fWobble = 1.0f; fWobbleDirection = 0.0f; }
	void UnInit() {}

	void set(float rad, float x, float y, float z)
	{
		fRadius = rad;
		Set(&vPosition, x, y, z);
	}

	// Perturbation is normal * fMagnitude * f( (r*r)/(fRadius*fRadius) ).
	// f(r/R) will start at a peak of 1 (at r=0) and fall to 0 as r goes to R. The
	// slope at 0 and 1 will be 0.
	// The perturbation needs to be applied in code so the normals can be accumulated.
	float fRadius;
	D3DVECTOR vPosition;
	bool bFarSide;

	D3DVECTOR vDirection;
	float fStartTime;
	float fTimeMultiple;
	float fMaxDist;	// in world units

	float fCurDist; // fMaxDist * sin(...)

	float fWobble;
	float fWobbleDirection;





	bool update(float elapsed_time, float dt);	// returns false if it consents to be deleted
};





class VBlobBump
{
public:
	void Init();
	void UnInit();

	void set(float rad, float mag, float x, float y, float z)
	{
		fRadius = rad;
		fRadius2 = fRadius*fRadius;
		fOORadius2 = 1.0f / fRadius2;
		fMagnitude = mag;
		Set(&vPosition, x, y, z);
	}

	// Perturbation is normal * fMagnitude * f( (r*r)/(fRadius*fRadius) ).
	// f(r/R) will start at a peak of 1 (at r=0) and fall to 0 as r goes to R. The
	// slope at 0 and 1 will be 0.
	// The perturbation needs to be applied in code so the normals can be accumulated.
	float fRadius, fRadius2, fOORadius2;
	float fMagnitude;	// wrt unit sphere
	D3DVECTOR vPosition;

	int   facesOfInterest;		// bitfield indicating the three faces (0,1,2,4,5) <-> (-x,-y,-z,+x,+y,+z) the blob points most toward


	// returns true if it initialized a new Bloblet
	bool create(float cur_time, VBloblet* p_bloblet);	// randomly creates a blob bump
	bool update(float elapsed_time, float dt, VBloblet* p_bloblet);

protected:

	// Positioning data.
	D3DVECTOR vDirection;	// normalized
	
	float fStartTime;
	float fTimeMul;

	float fMaxMagnitude;

	VBloblet* pMyBloblet;
	bool bStillAttachedToBloblet;

	void recalculateFacesOfInterest();
};




   

class VBlob
{
protected:
    LPDIRECT3DVERTEXBUFFER8 m_pBlobletVB;		// VBlobConstantVertex, for the emerging blobs, lower tesselation
    LPDIRECT3DINDEXBUFFER8  m_pBlobletIB;
	
	LPDIRECT3DVERTEXBUFFER8 pHaloQuadVB;

    LPDIRECT3DVERTEXBUFFER8 m_pBlobVBConst;		// VBlobConstantVertex
    LPDIRECT3DVERTEXBUFFER8 m_pBlobVBChangingR;	// VBlobChangingVertex (rendering version) (swapped in render)
    LPDIRECT3DVERTEXBUFFER8 m_pBlobVBChangingU;	// VBlobChangingVertex (updating version)
    LPDIRECT3DINDEXBUFFER8  m_pBlobIB;
	D3DVECTOR*				m_pUnitSphereNormals;
    DWORD					m_dwNumVertices, m_dwNumBlobletVertices;
    DWORD					m_dwNumIndices,  m_dwNumBlobletIndices;
	int						m_NumVertsPerFace;

    DWORD                   m_dwVShaderBlob, m_dwVShaderBloblet;
    DWORD					m_dwPShaderBlob, m_dwPShaderBloblet;



	D3DVECTOR4				m_BlobColor;


	D3DVECTOR				m_Pos;		// position of center
	D3DVECTOR				m_Scale;
	FLOAT					m_fRadius;


	// BlobBumps work in unit-sphere space.
	enum { MAX_BLOBBUMPS = 32 };
	VBlobBump				m_BlobBumps[MAX_BLOBBUMPS];
	int						m_NumBlobBumps;

	enum { MAX_BLOBLETS = 8 };
	VBloblet				m_Bloblets[MAX_BLOBLETS];
	int						m_NumBloblets;



	static QRand			m_QRand;

	// Creates a VBlobConstantVertex vertex buffer. Creates WORD index buffer.
	static bool				generateUnitSphere(
											int resolution,
											LPDIRECT3DVERTEXBUFFER8* pp_vb,
											LPDIRECT3DINDEXBUFFER8* pp_ib,
											D3DVECTOR** pp_us,
											DWORD* num_verts, DWORD* num_indices);

	void					prepareChangingVertices();
	void					zeroChangingVertices();	// zeros bumps in m_pBlobVBChangingU
	inline void				swapChangingVertices()
	{
		LPDIRECT3DVERTEXBUFFER8 temp = m_pBlobVBChangingR;
		m_pBlobVBChangingR = m_pBlobVBChangingU;
		m_pBlobVBChangingU = temp;
	}



public:
	void Init();
	void UnInit()
    {
        int i;

        for (i = 0; i < MAX_BLOBBUMPS; i++)
        {
            m_BlobBumps[i].UnInit();
        }

        for (i = 0; i < MAX_BLOBLETS; i++)
        {
            m_Bloblets[i].UnInit();
        }

        destroy();
    }

	void create();
	void destroy();

	void render();
	void advanceTime(float fElapsedTime, float fDt);

	void restart();


	float getRadius() const { return m_fRadius; }
	const D3DVECTOR& getCenter() const { return m_Pos; }


	void getLightForPosition(D3DVECTOR* p_light_pos, float* p_intensity, D3DVECTOR position);



	static inline float fRand01();
	static inline float fRand11();
};

extern VBlob* gpVBlob;



#define LLI_RAND_MAX  0x00010000
#define LLI_RAND_MASK 0x0000FFFF

float VBlob::fRand01()
{
	static float mul = 1.0f / ((float)LLI_RAND_MAX);
	return ((float)(m_QRand.Rand()&LLI_RAND_MASK)) * mul;
}

float VBlob::fRand11()
{
	static float mul = 2.0f / ((float)LLI_RAND_MAX);
	return (((float)(m_QRand.Rand()&LLI_RAND_MASK)) * mul) - 1.0f;
}



#endif // VBLOB_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\VBlob.cpp ===
///////////////////////////////////////////////////////////////////////////////
// File: VBlob.cpp
//
// Copyright 2001 Pipeworks Software
///////////////////////////////////////////////////////////////////////////////
#include "precomp.h"
#include "xbs_math.h"
#include "xbs_app.h"
#include "qrand.h"
#include "VBlob.h"
#include "tex_gen.h"
///////////////////////////////////////////////////////////////////////////////
const float MIN_SPAWN_MAGN =		(0.5f);
#define BLOBLET_DIM			(8)
#define BLOB_DIM			(32)
///////////////////////////////////////////////////////////////////////////////
QRand VBlob::m_QRand;
VBlob* gpVBlob;
///////////////////////////////////////////////////////////////////////////////
void VBlob::Init()
{
    int i;

    for (i = 0; i < MAX_BLOBBUMPS; i++)
    {
        m_BlobBumps[i].Init();
    }

    for (i = 0; i < MAX_BLOBLETS; i++)
    {
        m_Bloblets[i].Init();
    }

    m_QRand.Init();

	m_pBlobletVB = m_pBlobVBConst = m_pBlobVBChangingR = m_pBlobVBChangingU = NULL;
	m_pBlobletIB = m_pBlobIB = NULL;
	m_pUnitSphereNormals = NULL;
    m_dwNumBlobletVertices = m_dwNumBlobletIndices = m_NumVertsPerFace = m_dwNumVertices = m_dwNumIndices = 0;
    m_dwVShaderBlob = m_dwVShaderBloblet = 0;
    m_dwPShaderBlob = m_dwPShaderBloblet = 0;
	m_NumBlobBumps = m_NumBloblets = 0;
	Set(&m_BlobColor, 0.25f, 1.0f, 0.15f, 1.0f);
	Set(&m_Pos, 0.0f, 0.0f, 0.0f);
	Set(&m_Scale, 1.0f, 1.0f, 1.0f);
	m_fRadius = 2.3f;
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::create()
{
	gpVBlob = this;

	gpd3dDev->CreateVertexBuffer(4 * sizeof(float)*5, 0, 0, 0, &pHaloQuadVB);


//MTS	generateUnitSphere(2, &m_pBlobletVB, &m_pBlobletIB, NULL, &m_dwNumBlobletVertices, &m_dwNumBlobletIndices);
	generateUnitSphere(BLOBLET_DIM, &m_pBlobletVB, &m_pBlobletIB, NULL, &m_dwNumBlobletVertices, &m_dwNumBlobletIndices);

	generateUnitSphere(BLOB_DIM, &m_pBlobVBConst, &m_pBlobIB, &m_pUnitSphereNormals, &m_dwNumVertices, &m_dwNumIndices);
	gpd3dDev->CreateVertexBuffer(m_dwNumVertices * sizeof(VBlobChangingVertex), 0, 0, 0, &m_pBlobVBChangingR);
	gpd3dDev->CreateVertexBuffer(m_dwNumVertices * sizeof(VBlobChangingVertex), 0, 0, 0, &m_pBlobVBChangingU);
	m_NumVertsPerFace = m_dwNumVertices / 6;

	restart();

	// Initialize the pixel shaders.
    if( m_dwPShaderBlob )
    {
        gpd3dDev->DeletePixelShader( m_dwPShaderBlob );
        m_dwPShaderBlob = 0;
    }
#ifndef BINARY_RESOURCE
	m_dwPShaderBlob = gApp.loadPixelShader("D:\\Shaders\\VBlob.xpu");
#else // BINARY_RESOURCE
	m_dwPShaderBlob = gApp.loadPixelShader(g_vblob_xpu);
#endif // BINARY_RESOURCE

    if( m_dwPShaderBloblet )
    {
        gpd3dDev->DeletePixelShader( m_dwPShaderBloblet );
        m_dwPShaderBloblet = 0;
    }
#ifndef BINARY_RESOURCE
	m_dwPShaderBloblet = gApp.loadPixelShader("D:\\Shaders\\VBloblet.xpu");
#else // BINARY_RESOURCE
	m_dwPShaderBloblet = gApp.loadPixelShader(g_vbloblet_xpu);
#endif // BINARY_RESOURCE

	// Initialize the vertex shaders.
    DWORD dwBlobShaderVertexDecl[] =
    {
        D3DVSD_STREAM( 0 ),
        D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),    // unit sphere normal
        D3DVSD_STREAM( 1 ),
        D3DVSD_REG( 1, D3DVSDT_FLOAT4 ),    // vertex normal, w is displacement
        D3DVSD_END()
    };
	if (m_dwVShaderBlob)
	{
		gpd3dDev->DeleteVertexShader( m_dwVShaderBlob );
		m_dwVShaderBlob = 0;
	}
#ifndef BINARY_RESOURCE
	m_dwVShaderBlob    = gApp.loadVertexShader("D:\\Shaders\\VBlob.xvu",    dwBlobShaderVertexDecl);
#else // BINARY_RESOURCE
	m_dwVShaderBlob    = gApp.loadVertexShader(g_vblob_xvu,    dwBlobShaderVertexDecl);
#endif // BINARY_RESOURCE

    DWORD dwBlobletShaderVertexDecl[] =
    {
        D3DVSD_STREAM( 0 ),
        D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),    // unit sphere normal
        D3DVSD_END()
    };
	if (m_dwVShaderBloblet)
	{
		gpd3dDev->DeleteVertexShader( m_dwVShaderBloblet );
		m_dwVShaderBloblet = 0;
	}
#ifndef BINARY_RESOURCE
	m_dwVShaderBloblet = gApp.loadVertexShader("D:\\Shaders\\VBloblet.xvu", dwBlobletShaderVertexDecl);
#else // BINARY_RESOURCE
	m_dwVShaderBloblet = gApp.loadVertexShader(g_vbloblet_xvu, dwBlobletShaderVertexDecl);
#endif // BINARY_RESOURCE
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::destroy()
{
	m_pBlobletVB->Release();
	m_pBlobletIB->Release();
	m_pBlobVBConst->Release();
	m_pBlobVBChangingR->Release();
	m_pBlobVBChangingU->Release();
	m_pBlobIB->Release();
	MemFree(m_pUnitSphereNormals);

	pHaloQuadVB->Release();

    if (m_dwPShaderBlob) gpd3dDev->DeletePixelShader(m_dwPShaderBlob);
    if (m_dwPShaderBloblet) gpd3dDev->DeletePixelShader(m_dwPShaderBloblet);
	if (m_dwVShaderBlob) gpd3dDev->DeleteVertexShader(m_dwVShaderBlob);
	if (m_dwVShaderBloblet)	gpd3dDev->DeleteVertexShader(m_dwVShaderBloblet);

	m_pBlobletVB = NULL;
	m_pBlobletIB = NULL;
	m_pBlobVBConst = NULL;
	m_pBlobVBChangingU = m_pBlobVBChangingR = NULL;
	m_pBlobIB = NULL;
	m_pUnitSphereNormals = NULL;
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::render()
{
    // Set default states
    gpd3dDev->SetRenderState( D3DRS_LIGHTING, FALSE );
    gpd3dDev->SetRenderState( D3DRS_ZENABLE,  TRUE );

    gpd3dDev->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_NONE );
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 0, D3DTSS_ADDRESSW, D3DTADDRESS_CLAMP);

    gpd3dDev->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );
    gpd3dDev->SetTextureStageState( 1, D3DTSS_MIPFILTER, D3DTEXF_NONE );
	gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);
	gpd3dDev->SetTextureStageState( 1, D3DTSS_ADDRESSW, D3DTADDRESS_CLAMP);

    gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    gpd3dDev->SetRenderState( D3DRS_SRCBLEND,         D3DBLEND_SRCALPHA );
    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,        D3DBLEND_INVSRCALPHA );

		// Render halo after blob, but before bloblets.
	gpd3dDev->SetVertexShader(D3DFVF_XYZ|D3DFVF_TEX1);
	gpd3dDev->SetPixelShader(NULL);

	D3DMATRIX id_mat;
	SetIdentity(&id_mat);
	gpd3dDev->SetTransform(D3DTS_WORLD,&id_mat);
	gpd3dDev->SetTransform(D3DTS_VIEW,&gApp.theCamera.matWTC);
	gpd3dDev->SetTransform(D3DTS_PROJECTION,&gApp.theCamera.matProj);

	gpd3dDev->SetTextureStageState(0,D3DTSS_COLOROP,D3DTOP_MODULATE);
	gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG1,D3DTA_TEXTURE);
	gpd3dDev->SetTextureStageState(0,D3DTSS_COLORARG2,D3DTA_TFACTOR);
	gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAOP,D3DTOP_SELECTARG1);
	gpd3dDev->SetTextureStageState(0,D3DTSS_ALPHAARG1,D3DTA_TFACTOR);
	gpd3dDev->SetTextureStageState(1,D3DTSS_COLOROP,D3DTOP_DISABLE);

	float cur_rad = m_fRadius * (1.0f + 1.3f * fast_sqrt(gApp.getPulseIntensity()));

	DWORD dw_alpha;
	float f_alpha = min(gApp.getBlobIntensity(),1.f) * 255.f;
	
	__asm
    {
        cvttss2si eax, f_alpha
        shl eax,24
		mov dw_alpha,eax
    };

	DWORD dw_tf = 0x00a0ff40 | dw_alpha;
	
	gpd3dDev->SetRenderState( D3DRS_TEXTUREFACTOR,dw_tf);
	gpd3dDev->SetRenderState( D3DRS_SRCBLEND,         D3DBLEND_SRCALPHA );
    gpd3dDev->SetRenderState( D3DRS_DESTBLEND,        D3DBLEND_ONE );
	gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE, FALSE );

	gpd3dDev->SetTexture(0,gApp.pGlowMap);
	
	struct _decalvert
	{
		D3DVECTOR p;
		float u,v;
	};

	_decalvert * phalo_verts = NULL;
	pHaloQuadVB->Lock(0,sizeof(_decalvert) * 4, (BYTE **)&phalo_verts,NULL);

	float f_rad = cur_rad * 5.2f;

	D3DMATRIX & ctw = gApp.theCamera.matCTW;
	Sub(*(D3DVECTOR *)&ctw._21,*(D3DVECTOR *)&ctw._11,&phalo_verts[0].p);
	Scale(&phalo_verts[0].p,f_rad);
	phalo_verts[0].u = 0.f;
	phalo_verts[0].v = 1.f;

	Add(*(D3DVECTOR *)&ctw._21,*(D3DVECTOR *)&ctw._11,&phalo_verts[1].p);
	Scale(&phalo_verts[1].p,f_rad);
	phalo_verts[1].u = 1.f;
	phalo_verts[1].v = 1.f;

	Sub(*(D3DVECTOR *)&ctw._11,*(D3DVECTOR *)&ctw._21,&phalo_verts[2].p);
	Scale(&phalo_verts[2].p,f_rad);
	phalo_verts[2].u = 1.f;
	phalo_verts[2].v = 0.f;

	Set(&phalo_verts[3].p,-ctw._11-ctw._21,-ctw._12-ctw._22,-ctw._13-ctw._23);
	Scale(&phalo_verts[3].p,f_rad);
	phalo_verts[3].u = 0.f;
	phalo_verts[3].v = 0.f;

	pHaloQuadVB->Unlock();
	
	gpd3dDev->SetStreamSource( 0, pHaloQuadVB, sizeof(_decalvert));
	gpd3dDev->DrawPrimitive(D3DPT_TRIANGLEFAN,0,2);

	// Restore state
	gpd3dDev->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );
	gpd3dDev->SetRenderState( D3DRS_ZWRITEENABLE, TRUE );

//MTS    gpd3dDev->SetRenderState( D3DRS_FILLMODE,         D3DFILL_WIREFRAME );

    gpd3dDev->SetTexture( 0, gApp.pNormalCubeMapLoRes );
    gpd3dDev->SetTexture( 1, gApp.pNormalCubeMapLoRes );


    gpd3dDev->SetVertexShader( m_dwVShaderBlob );
    gpd3dDev->SetPixelShader(  m_dwPShaderBlob );



    // Note: when passing matrices to a vertex shader, we transpose them, since
    // matrix multiplies are done with dot product operations on the matrix rows.
	D3DMATRIX matFinal,matTmp;
	MulMats(gApp.theCamera.matWTC,gApp.theCamera.matProj,&matTmp);
	SetTranspose(matTmp,&matFinal);
	gpd3dDev->SetVertexShaderConstant(4,(CONST void *)&matFinal,4);




	//; Expected vertex shaders constants
	//;    c0-c3    = Transpose of world matrix
	//;    c4-c7    = Transpose of view*projection matrix
	//;    c8       = some constants, x=0, y=1, z=2, w=0.5
	//;    c9       = eye location
	//;    c10      = blob scaling
	//;    c11      = 1/ blob scaling
	//;    c12      = blob center
	D3DVECTOR4 val[5];


	// Constants
	Set(&val[0], 0.0f, 1.0f, 2.0f, 0.5f);

	// Eye position
	gApp.theCamera.getCameraPos(&val[1]);

	// Scaling
	Set(&val[2], cur_rad*m_Scale.x, cur_rad*m_Scale.y, cur_rad*m_Scale.z, 1.0f);


	// 1 / blob scaling
	val[3].x = 1.0f / val[2].x;
	val[3].y = 1.0f / val[2].y;
	val[3].z = 1.0f / val[2].z;
	
	// Blob center.
//MTS	float f_jitter_mag = (gApp.getElapsedTime() - BLOB_JITTER_START) * OO_BLOB_JITTER_DELTA;
//MTS	f_jitter_mag *= f_jitter_mag;
//MTS	float cOffsets[3] = { 0.2f, 0.7f, 4.2f };
//MTS	float cScales[3]  = { 20.0f, 28.0f, 44.0f };
	D3DVECTOR4 cur_pos;
//MTS	cur_pos.x = m_Pos.x + f_jitter_mag * sinf((gApp.getElapsedTime() - cOffsets[0])*cScales[0]);
//MTS	cur_pos.y = m_Pos.y + f_jitter_mag * sinf((gApp.getElapsedTime() - cOffsets[1])*cScales[1]);
//MTS	cur_pos.z = m_Pos.z + f_jitter_mag * sinf((gApp.getElapsedTime() - cOffsets[2])*cScales[2]);
	cur_pos.x = m_Pos.x;
	cur_pos.y = m_Pos.y;
	cur_pos.z = m_Pos.z;
	cur_pos.w = 0.0f;
	Set(&val[4], cur_pos.x, cur_pos.y, cur_pos.z, 0.0f);


	gpd3dDev->SetVertexShaderConstant( 8, &val, 5 );


	// Make the object to World transform. Transpose it.
    D3DMATRIX matT, mat;

	SetIdentity( &mat );
	mat.m[0][0] = m_Scale.x * cur_rad;
	mat.m[1][1] = m_Scale.y * cur_rad;
	mat.m[2][2] = m_Scale.z * cur_rad;
	mat.m[3][0] = cur_pos.x;
	mat.m[3][1] = cur_pos.y;
	mat.m[3][2] = cur_pos.z;

	SetTranspose( mat, &matT );
    gpd3dDev->SetVertexShaderConstant( 0, &matT, 4 );


	// Expected pixel shader constants
	//; c0          = base blob color
	//; c1          = ambient color

	// Blob color
	val[0] = m_BlobColor;
	float f_color_intensity = BLOB_BASE_INTENSITY + 4.0f * (1.2f * gApp.getBaseBlobIntensity() + 0.8f * gApp.getPulseIntensity() );
//MTS	f_color_intensity *= min(1.0f, gApp.getElapsedTime() * OO_BLOB_STATIC_END_TIME);
	f_color_intensity *= min(1.0f, gApp.getElapsedTime() * 4.0f);
	Scale(&val[0], f_color_intensity);

	// Ambient light
	val[1] = m_BlobColor;
	Scale(&val[1], 0.0f);


	gpd3dDev->SetPixelShaderConstant( 0, &val[0], 2 );



	gpd3dDev->SetIndices( m_pBlobIB, 0 );
    gpd3dDev->SetStreamSource( 0, m_pBlobVBConst,    sizeof(VBlobConstantVertex) );

	// Get the Update vertex buffer and use it to render.
	swapChangingVertices();
    gpd3dDev->SetStreamSource( 1, m_pBlobVBChangingR, sizeof(VBlobChangingVertex) );

    gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLESTRIP, 0, m_dwNumVertices,  0, m_dwNumIndices-2 );




	// Render the bloblets.

    gpd3dDev->SetVertexShader( m_dwVShaderBloblet );
    gpd3dDev->SetPixelShader(  m_dwPShaderBloblet );

	gpd3dDev->SetVertexShaderConstant(4,(CONST void *)&matFinal,4);

	// Constants
	Set(&val[0], 0.0f, 1.0f, 2.0f, 0.5f);

	// Eye position
	gApp.theCamera.getCameraPos(&val[1]);

	gpd3dDev->SetVertexShaderConstant( 8, &val, 2 );


	// Bloblet color
	val[0] = m_BlobColor;
	Scale(&val[0], 0.3f * gApp.getBlobIntensity());

	// Ambient light
	val[1] = m_BlobColor;
	Scale(&val[1], 0.2f);


	Set(&val[2], 2.0f, 2.0f, 2.0f, 2.0f);
	// 1/val is the level of brightness that is full alpha

	gpd3dDev->SetPixelShaderConstant( 0, &val, 3 );



	gpd3dDev->SetIndices( m_pBlobletIB, 0 );
    gpd3dDev->SetStreamSource( 0, m_pBlobletVB,    sizeof(VBlobConstantVertex) );


	for (int i=0; i<m_NumBloblets; i++)
	{
		//;    c9       = eye location
		//;    c10      = blob center
		//;    c11      = direction of scaling
		//;    c12      = scaling perpendicular to direction
		//;    c13      = parallel minus perpendicular scaling multiplied by scaling direction

		VBloblet* p_bloblet = &m_Bloblets[i];

		// Bloblet center.
		Set(&val[0], p_bloblet->vPosition.x, p_bloblet->vPosition.y, p_bloblet->vPosition.z, 0.0f);

		// Direction of scaling.
		Set(&val[1], p_bloblet->vDirection.x, p_bloblet->vDirection.y, p_bloblet->vDirection.z, 1.0f);

		// Scaling perpendicular to direction
		float fval = p_bloblet->fRadius / fast_sqrt(p_bloblet->fWobble);
		Set(&val[2], fval, fval, fval, 1.0f);

		// Parallel minus perpendicular scaling multiplied by scaling direction
		fval = p_bloblet->fRadius * p_bloblet->fWobble - fval;
		Set(&val[3], fval*p_bloblet->vDirection.x, fval*p_bloblet->vDirection.y, fval*p_bloblet->vDirection.z, 1.0f);

		
		gpd3dDev->SetVertexShaderConstant( 10, &val, 4 );


		gpd3dDev->DrawIndexedPrimitive( D3DPT_TRIANGLESTRIP, 0, m_dwNumBlobletVertices,  0, m_dwNumBlobletIndices-2 );
	}

    // Restore the state
    gpd3dDev->SetPixelShader(  NULL );
    gpd3dDev->SetVertexShader( NULL );

	gpd3dDev->SetTexture(0, NULL);
	gpd3dDev->SetTexture(1, NULL);

	gpd3dDev->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::zeroChangingVertices()
{
	VBlobChangingVertex* p_verts;
	const D3DVECTOR* p_us_normals = m_pUnitSphereNormals;
	m_pBlobVBChangingU->Lock(0, 0, (BYTE**)&p_verts, 0);	// D3DLOCK_DISCARD not on XBox!

	for (int face=0; face<6; face++)
	{
		for (int i=0; i<m_NumVertsPerFace; i++, p_verts++, p_us_normals++)
		{
			p_verts->normal.x = p_us_normals->x;
			p_verts->normal.y = p_us_normals->y;
			p_verts->normal.z = p_us_normals->z;
			p_verts->normal.w = 1.0f;
		}
	}

	m_pBlobVBChangingU->Unlock();
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::prepareChangingVertices()
{
	VBlobChangingVertex* p_verts;
	const D3DVECTOR* p_us_normals = m_pUnitSphereNormals;
	m_pBlobVBChangingU->Lock(0, 0, (BYTE**)&p_verts, 0);	// D3DLOCK_DISCARD not on XBox!


/*
	// For spiky blobs mark 2.
	const float cA = 1.0f;
	const float cB = 0.1f;
	const float cD = 1.0f / ( (1.0f/cB) - (1.0f / (cA+cB)) );
	const float cE = cA / cD;
	const float cF = cB / cD;
	const float cG = - cD / (cA+cB);

	float sd_frac = max(1.0f, gApp.getElapsedTime() / 6.0f);
	float bd_frac = 1.0f - sd_frac;
*/


	for (int face=0; face<6; face++)
	{
		const VBlobBump* vp_blobs_of_interest[MAX_BLOBBUMPS];
		int i;
		int num_boi = 0;
		for (i=0; i<m_NumBlobBumps; i++)
		{
			if (m_BlobBumps[i].facesOfInterest & (1<<face))
			{
				vp_blobs_of_interest[num_boi++] = &m_BlobBumps[i];
			}
		}

		for (int i=0; i<m_NumVertsPerFace; i++, p_verts++)
		{
			const D3DVECTOR& us_normal = *(p_us_normals++);
			D3DVECTOR4& accum_normal = p_verts->normal;
//MTS			D3DVECTOR4 accum_normal;
			Set(&accum_normal, us_normal.x, us_normal.y, us_normal.z, 0.0f);
			for (int j=num_boi-1; j>=0; j--)
			{
				const VBlobBump* p_blob = vp_blobs_of_interest[j];
				D3DVECTOR delta;
				Sub(us_normal, p_blob->vPosition, &delta);
//MTS				float dist2 = Length2(delta);
				float dist2 = delta.x*delta.x + delta.y*delta.y + delta.z*delta.z;
//MTS				float dist2 = Distance2(us_normal, p_blob->vPosition);
				if (dist2 < p_blob->fRadius2)
				{
//MTS					if ((p_blob->facesOfInterest & (1<<face)) == 0)
//MTS					{
//MTS						int a = 0;
//MTS					}

					float dist2_mo = dist2 * p_blob->fOORadius2 - 1.0f;


					float displacement = m_fRadius*p_blob->fMagnitude * dist2_mo*dist2_mo;
/*
					// Spiky blob bumps mark 2.
					float bumpy_displacement = m_fRadius*p_blob->fMagnitude * dist2_mo*dist2_mo;
					float spiky_displacement = m_fRadius * p_blob->fMagnitude * ( 1.0f / (cE*dist2*p_blob->fOORadius2 + cF) + cG );
					spiky_displacement *= 1.3f;

					float displacement = bd_frac*bumpy_displacement + sd_frac*spiky_displacement;
*/

					float perturb_amount = -4.0f * p_blob->fMagnitude * p_blob->fOORadius2 * dist2_mo;


					// lnorm = us_normal + perturb_amount*(us_normal - p_blob->vPosition)
					// This should make it faster, but VTune suggests it doesn't. Maybe in Release...
//MTS					D3DVECTOR lnorm;
//MTS					float oppa = 1.0f + perturb_amount;
//MTS					lnorm.x = us_normal.x * oppa - perturb_amount * p_blob->vPosition.x;
//MTS					lnorm.y = us_normal.y * oppa - perturb_amount * p_blob->vPosition.y;
//MTS					lnorm.z = us_normal.z * oppa - perturb_amount * p_blob->vPosition.z;

					D3DVECTOR lnorm = us_normal;
//MTS					Set(&lnorm, 0.0f, 0.0f, 0.0f);

//MTS					D3DVECTOR delta;
//MTS					Sub(us_normal, p_blob->vPosition, &delta);
					AddScaled(&lnorm, delta, perturb_amount);
					QuickNormalize(&lnorm);

					accum_normal.x += lnorm.x;
					accum_normal.y += lnorm.y;
					accum_normal.z += lnorm.z;
					accum_normal.w += displacement;
				}
			}
			p_verts->normal = accum_normal;
		}
	}

	m_pBlobVBChangingU->Unlock();
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::advanceTime(float fElapsedTime, float fDt)
{
	if (fElapsedTime < BLOB_STATIC_END_TIME)
	{
		if (fElapsedTime - fDt > BLOB_STATIC_END_TIME)
		{
			zeroChangingVertices();
			swapChangingVertices();
			zeroChangingVertices();
		}
		return;
	}

	for (int i=0; i<m_NumBloblets; i++)
	{
		if (!m_Bloblets[i].update(fElapsedTime, fDt))
		{
//MTS			m_Bloblets[i] = m_Bloblets[--m_NumBloblets];
//MTS			i--;
			// better notify the bump that owned it...
		}
	}

	for (int i=0; i<m_NumBlobBumps; i++)
	{
		if (m_BlobBumps[i].update(
				fElapsedTime,
				fDt,
				(m_NumBloblets<MAX_BLOBLETS) ? &m_Bloblets[m_NumBloblets] : NULL)
				)
		{
			m_NumBloblets++;
		}
	}

//MTS	m_pBlobVBChangingU->BlockUntilNotBusy();	// this causes it to block here, rather than in prepareChangingVertices
	prepareChangingVertices();
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::restart()
{
	m_NumBloblets = 0;
	m_NumBlobBumps = 0;

	while (m_NumBlobBumps<MAX_BLOBBUMPS)
	{
		if (m_BlobBumps[m_NumBlobBumps++].create(
			-0.3f,
			(m_NumBloblets < MAX_BLOBLETS) ? &m_Bloblets[m_NumBloblets] : NULL
			))	// pass negative time so the blobs get a head start
		{
			m_NumBloblets++;
		}
	}

	zeroChangingVertices();
	swapChangingVertices();
	zeroChangingVertices();
}
///////////////////////////////////////////////////////////////////////////////
void VBlob::getLightForPosition(D3DVECTOR* p_light_pos, float* p_intensity, D3DVECTOR position)
{
	float total_weights = 0.0f;
	D3DVECTOR av_pos;
	float av_intensity = 0.0f;
	Set(&av_pos, 0.0f, 0.0f, 0.0f);

	float light_intensity = gApp.getBlobIntensity();

	{
		float dist2 = Distance2(position, m_Pos);
		float dist4 = dist2 * dist2;
		float weight = 1.0f / dist2;

		av_intensity += 4.0f * light_intensity * weight;
		AddScaled(&av_pos, m_Pos, weight);
		total_weights += weight;
	}

	for (int i=0; i<m_NumBloblets; i++)
	{
		float dist2 = Distance2(position, m_Bloblets[i].vPosition);
		float dist4 = dist2 * dist2;
		float weight = 1.0f / dist2;

		av_intensity += light_intensity * weight;
		AddScaled(&av_pos, m_Bloblets[i].vPosition, weight);
		total_weights += weight;
	}

	float oo_total_weights = 1.0f / total_weights;
	Set(p_light_pos, oo_total_weights * av_pos.x, oo_total_weights * av_pos.y, oo_total_weights * av_pos.z);
	*p_intensity = oo_total_weights * av_intensity;
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool VBlob::generateUnitSphere(	int resolution,
								LPDIRECT3DVERTEXBUFFER8* pp_vb,
								LPDIRECT3DINDEXBUFFER8* pp_ib,
								D3DVECTOR** pp_us,
								DWORD* num_verts, DWORD* num_indices)
{
	int subdiv = max(1, resolution / 2);
	float f_division_step = 2.0f / ((float)subdiv);

	*num_verts = 6*(subdiv+1)*(subdiv+1);
	*num_indices = 6*GetNumberOfIndicesForTristripMesh(subdiv,subdiv) + 2*5;	// 5 double-taps


	gpd3dDev->CreateVertexBuffer( *num_verts * sizeof(VBlobConstantVertex), 0, 0, 0, pp_vb);
	gpd3dDev->CreateIndexBuffer(  *num_indices * sizeof(WORD), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_DEFAULT, pp_ib);
	if (pp_us) *pp_us = (D3DVECTOR*)MemAlloc(sizeof(D3DVECTOR)*(*num_verts));


	VBlobConstantVertex* p_verts;
	WORD* p_indices;

	(*pp_vb)->Lock(0, 0, (BYTE**)&p_verts, 0);
	(*pp_ib)->Lock(0, 0, (BYTE**)&p_indices, 0);
	D3DVECTOR* p_us = ((pp_us) ? *pp_us : NULL);



	// Create vertices.
	VBlobConstantVertex* p_vert = &p_verts[0];
	for (int k=0; k<6; k++)
	{
		for (int j=0; j<=subdiv; j++)
		{
			for (int i=0; i<=subdiv; i++)
			{
				D3DVECTOR& pos = p_vert->unit_sphere_normal;

				float fu = ((i==subdiv) ? +1.0f : (-1.0f + f_division_step * ((float)i)));
				float fv = ((j==subdiv) ? +1.0f : (-1.0f + f_division_step * ((float)j)));
				switch(k)
				{
					case 0: Set(&pos, -1.0f, -fu, +fv); break;
					case 1: Set(&pos, +fv, -1.0f, -fu); break;
					case 2: Set(&pos, -fu, +fv, -1.0f); break;
					case 3: Set(&pos, +1.0f, +fu, +fv); break;
					case 4: Set(&pos, +fv, +1.0f, +fu); break;
					case 5: Set(&pos, +fu, +fv, +1.0f); break;
				}

				Normalize(&pos);
				if (p_us)
				{
					*p_us = pos;
					p_us++;
				}
				p_vert++;
			}
		}
	}


	// Create indices.
	int j = 0;
	for (int i=0; i<6; i++)
	{
		j += CreateTristripForMesh(&p_indices[j], subdiv, subdiv, (i>0), (i<5), i*(subdiv+1)*(subdiv+1));
	}

	(*pp_ib)->Unlock();
	(*pp_vb)->Unlock();

	return true;
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void VBlobBump::Init()
{
	pMyBloblet = NULL;
}
///////////////////////////////////////////////////////////////////////////////
void VBlobBump::UnInit()
{
}
///////////////////////////////////////////////////////////////////////////////
// randomly creates a blob bump
bool VBlobBump::create(float cur_time, VBloblet* p_bloblet)
{
	if (cur_time < 0.0f) pMyBloblet = NULL;

	vDirection.x = VBlob::fRand11();
	vDirection.y = VBlob::fRand11();
	vDirection.z = VBlob::fRand11();


	if (Length2(vDirection) < 0.001f)
	{
		vDirection.x = VBlob::fRand11();
		vDirection.y = VBlob::fRand11();
		vDirection.z = 1.0f;
	}

	Set(&vPosition, 0.0f, 0.0f, 0.0f);

	QuickNormalize(&vDirection);

	float time_prog = max(0.0f, (cur_time-BLOB_STATIC_END_TIME) * OO_MAX_INTENSITY_DELTA);
	float rad_mag_rand = VBlob::fRand01();

	fRadius = rad_mag_rand * 0.4f + 0.4f;
	fRadius2 = fRadius*fRadius;
	fOORadius2 = 1.0f / fRadius2;
	fMagnitude = 0.0f;

	recalculateFacesOfInterest();


	fStartTime = cur_time + 0.4f * VBlob::fRand01();

	fMaxMagnitude = (1.0f - rad_mag_rand) * 0.5f + 0.2f;
	fMaxMagnitude *= 0.5f + 0.5f * time_prog;

	if (!pMyBloblet) pMyBloblet = p_bloblet;
	if (pMyBloblet)
	{
		// Paired with a bloblet.
		float f_main_rad = gpVBlob->getRadius();
		pMyBloblet->fRadius = (VBlob::fRand01()+1.0f) * 0.25f * f_main_rad * fRadius;
		pMyBloblet->vDirection = vDirection;

		pMyBloblet->fMaxDist = f_main_rad * (5.0f + VBlob::fRand11() * 2.0f);
		pMyBloblet->fMaxDist *= 0.6f;

		pMyBloblet->fStartTime = (cur_time<-1.0f) ? -VBlob::fRand01() * 0.3f : cur_time;

		float period = 0.8f + 0.3f * VBlob::fRand01();
		period *= 1.0f / 0.6f;
		pMyBloblet->fTimeMultiple = 2.0f * Pi / period;

		pMyBloblet->fWobble = 1.2f;
		pMyBloblet->fWobbleDirection = 0.0f;

		bStillAttachedToBloblet = (cur_time-fStartTime < 0.4f*period);


		// Set my properties from the bloblet.
		pMyBloblet->update(cur_time, 0.0f);
		update(cur_time, 0.0f, NULL);
	}
	else
	{
		// Not paired with a bloblet.
		float sequence_len = fMaxMagnitude * 0.3f + VBlob::fRand01() * 0.3f;
		fTimeMul = Pi / sequence_len;
		fTimeMul *= time_prog*0.2f + 0.8f;

		if (cur_time < -1.0f) fStartTime = -VBlob::fRand01() * Pi / fTimeMul;
	}

	return (pMyBloblet!=NULL);
}
///////////////////////////////////////////////////////////////////////////////
// returns true if it initialized a new Bloblet
bool VBlobBump::update(float elapsed_time, float dt, VBloblet* p_bloblet)
{
	if (pMyBloblet)
	{
		float f_b_mag = (fast_fabs(pMyBloblet->fCurDist) + pMyBloblet->fRadius) / gpVBlob->getRadius();
		fMagnitude = min( 2.0f, max(0.0f, f_b_mag - 1.0f) );
		if (bStillAttachedToBloblet)
		{
			if (fMagnitude > 0.8f)
			{
				// Lost attachment
				bStillAttachedToBloblet = false;
//MTS				fMaxMagnitude = max(0.0f, fMagnitude - 2.0f * pMyBloblet->fRadius / gpVBlob->getRadius());
				fMaxMagnitude = fMagnitude;
				float sequence_len = 0.3f * fMagnitude;
				fTimeMul = 2.0f * Pi / sequence_len;
				fStartTime = elapsed_time - 0.25f * sequence_len;
				pMyBloblet->fWobble = max(0.6f, min(0.8f, fMagnitude-0.5f));	// more wobble when there is less energy
				pMyBloblet->fWobbleDirection = 0.0f;
			}
			else
			{
				// Still attached.
				if ( (Dot(vDirection, pMyBloblet->vDirection) < 0.0f) != pMyBloblet->bFarSide)
				{
					// Must reverse direction.
					Scale(&vDirection, -1.0f);
					vPosition = vDirection;
					recalculateFacesOfInterest();
				}
				return false;
			}
		}

		// May have just lost attachment.
		if (!bStillAttachedToBloblet)
		{
			if (f_b_mag < 0.9f)
			{
				// Blob is inside sphere, reattach.
				bStillAttachedToBloblet = true;
			}
		}
	}

	float t = (elapsed_time - fStartTime) * fTimeMul;
	if (t>Pi)
	{
		if (pMyBloblet==NULL)
		{
			return create(elapsed_time, p_bloblet);
		}
		fMagnitude = 0.0f;
		return false;
	}
	if (t<0.0f) return false;

	float sin_val = fast_sin(t);
	fMagnitude = fMaxMagnitude * sin_val;
//MTS	vPosition.x = vDirection.x * sin_val;
//MTS	vPosition.y = vDirection.y * sin_val;
//MTS	vPosition.z = vDirection.z * sin_val;
	vPosition = vDirection;
	recalculateFacesOfInterest();

//MTS	if ((bNotYetSpawned) && (t > 0.5f * Pi) && (p_bloblet))
//MTS	{
//MTS		bNotYetSpawned = false;
//MTS
//MTS		float f_main_rad = gpVBlob->getRadius();
//MTS		p_bloblet->fRadius = 0.7f * f_main_rad * fRadius;
//MTS
//MTS		float displ = f_main_rad * (1.0f + fMagnitude) - p_bloblet->fRadius;
//MTS		p_bloblet->vPosition = gpVBlob->getCenter();
//MTS		p_bloblet->vPosition.x += vDirection.x * displ;
//MTS		p_bloblet->vPosition.y += vDirection.y * displ;
//MTS		p_bloblet->vPosition.z += vDirection.z * displ;
//MTS
//MTS
//MTS
//MTS
//MTS
//MTS		float vel = f_main_rad * (fMagnitude-MIN_SPAWN_MAGN) * 100.0f + 20.0f;
//MTS		p_bloblet->vVelocity.x = vDirection.x * vel;
//MTS		p_bloblet->vVelocity.y = vDirection.y * vel;
//MTS		p_bloblet->vVelocity.z = vDirection.z * vel;
//MTS
//MTS		p_bloblet->vAttachedTo = gpVBlob->getCenter();
//MTS
//MTS
//MTS		// Set up a spring as per 2001.05.01 of my notes.
//MTS
//MTS		// Use a spring model for now. Period is 2*Pi/sqrt(k/m), so k/m = (2*Pi/period)^2
//MTS		float sequence_time_mul = 5.0f;
//MTS		p_bloblet->fRestoreForceConstant = 2.0f * Pi / (sequence_time_mul*(elapsed_time - fStartTime));
//MTS		p_bloblet->fRestoreForceConstant *= p_bloblet->fRestoreForceConstant;
//MTS
//MTS		p_bloblet->fEndDist2 = f_main_rad - p_bloblet->fRadius;
//MTS		p_bloblet->fEndDist2 *= p_bloblet->fEndDist2;
//MTS
//MTS		return true;
//MTS	}

	return false;
}
///////////////////////////////////////////////////////////////////////////////
void VBlobBump::recalculateFacesOfInterest()
{
	// Bitfield indicating the faces (0,1,2,4,5) <-> (-x,-y,-z,+x,+y,+z) the blob points most be checked with.
	facesOfInterest =	((vDirection.x - fRadius < -0.57735f) ? 0x0001 : 0) +
						((vDirection.y - fRadius < -0.57735f) ? 0x0002 : 0) +
						((vDirection.z - fRadius < -0.57735f) ? 0x0004 : 0) +
						((vDirection.x + fRadius > +0.57735f) ? 0x0008 : 0) +
						((vDirection.y + fRadius > +0.57735f) ? 0x0010 : 0) +
						((vDirection.z + fRadius > +0.57735f) ? 0x0020 : 0) ;
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
const float WOBBLE_ACCEL =		(1000.0f);
// returns false if it should be deleted
bool VBloblet::update(float elapsed_time, float dt)
{
	fWobble = min(2.0f, max(0.5f, fWobble + fWobbleDirection * dt));
	if (fWobbleDirection > 0.0f)
	{
		if ((fWobble < 0.95f) || (fWobble > 1.0f))
		{
			fWobbleDirection -= (fWobble-1.0f) * dt * WOBBLE_ACCEL;
		}
	}
	else
	{
		if ((fWobble < 1.0f) || (fWobble > 1.05f))
		{
			fWobbleDirection -= (fWobble-1.0f) * dt * WOBBLE_ACCEL;
		}
	}



	float time_prog = max(0.0f, (elapsed_time-BLOB_STATIC_END_TIME) * OO_MAX_INTENSITY_DELTA);

	float t = fTimeMultiple * (elapsed_time - fStartTime);
	t *= 1.4f * (1.0f + elapsed_time / 10.0f);	// speed up over time

	float s = fast_sin(t);

	float sm = fast_fabs(s);
	sm = 1.0f - (1.0f-sm)*fast_sqrt(1.0f-sm);
	s = (s>0.0f) ? sm : -sm;

	fCurDist = fMaxDist * s * time_prog;
	bFarSide = (fCurDist<0.0f);

	vPosition = gpVBlob->getCenter();
	AddScaled(&vPosition, vDirection, fCurDist);

	return (fast_fabs(fCurDist) + fRadius < gpVBlob->getRadius() * 0.5f);
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\xbinput.h ===
//-----------------------------------------------------------------------------
// File: XBInput.h
//
// Desc: Input helper functions for the XBox samples
//
// Hist: 12.15.00 - Separated from XBUtil.h for December XDK release
//       01.03.00 - Made changes for real Xbox controller
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#ifndef XBINPUT_H
#define XBINPUT_H




//-----------------------------------------------------------------------------
// Name: struct XBGAMEPAD
// Desc: structure for holding Gamepad data
//-----------------------------------------------------------------------------
struct XBGAMEPAD : public XINPUT_GAMEPAD
{
    // Inherited members from XINPUT_GAMEPAD
	//
    // WORD    wButtons;
    // BYTE    bAnalogButtons[8];
    // SHORT   sThumbLX;
    // SHORT   sThumbLY;
    // SHORT   sThumbRX;
    // SHORT   sThumbRY;

    // Thumb stick values in range [-1,+1]
    FLOAT      fX1;
    FLOAT      fY1;
    FLOAT      fX2;
    FLOAT      fY2;
    
    // Buttons pressed since last poll
    WORD       wLastButtons;
    BOOL       bLastAnalogButtons[8];
    WORD       wPressedButtons;
    BOOL       bPressedAnalogButtons[8];

	// Rumble properties
	XINPUT_RUMBLE	Rumble;
	XINPUT_FEEDBACK	Feedback;

    // Device properties
    XINPUT_CAPABILITIES caps;
    HANDLE     hDevice;

    // Flags for whether gamepad was just inserted or removed
    BOOL       bInserted;
    BOOL       bRemoved;
};




//-----------------------------------------------------------------------------
// Global access to gamepad devices
//-----------------------------------------------------------------------------
extern XBGAMEPAD g_Gamepads[4];




//-----------------------------------------------------------------------------
// Name: XBInput_CreateGamepads()
// Desc: Creates the gamepad devices
//-----------------------------------------------------------------------------
HRESULT XBInput_CreateGamepads( XBGAMEPAD** ppGamepads = NULL );




//-----------------------------------------------------------------------------
// Name: XBInput_GetInput()
// Desc: Processes input from the gamepads
//-----------------------------------------------------------------------------
VOID XBInput_GetInput( XBGAMEPAD* pGamepads = NULL );




//-----------------------------------------------------------------------------
// Name: XBInput_GetPrimaryController()
// Desc: The first controller used by the player or the controller on the
//       lowest numbered slot. NULL if no controllers inserted.
//-----------------------------------------------------------------------------
const XBGAMEPAD* XBInput_GetPrimaryController();




//-----------------------------------------------------------------------------
// Name: XBInput_IsAnyButtonActive()
// Desc: TRUE if any button or thumbstick depressed on the given controller
//-----------------------------------------------------------------------------
BOOL XBInput_IsAnyButtonActive( const XBGAMEPAD* );




#endif // XBINPUT_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\xbinput.cpp ===
//-----------------------------------------------------------------------------
// File: XBInput.cpp
//
// Desc: Input helper functions for the XBox samples
//
// Hist: 12.15.00 - Separated from XBUtil.cpp for December XDK release
//       01.03.00 - Made changes for real Xbox controller
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#include "defines.h"
#ifdef INCLUDE_INPUT

#include <xtl.h>
#include "XBInput.h"




//-----------------------------------------------------------------------------
// Globals
//-----------------------------------------------------------------------------

// Deadzone for thumbsticks
#define XBINPUT_DEADZONE 0.25

// Threshold for analog buttons
#define XBINPUT_BUTTONTHRESHOLD 1

// Global instance of gamepad devices
XBGAMEPAD g_Gamepads[4];




//-----------------------------------------------------------------------------
// Name: XBInput_CreateGamepads()
// Desc: Creates the gamepad devices
//-----------------------------------------------------------------------------
HRESULT XBInput_CreateGamepads( XBGAMEPAD** ppGamepads )
{
    // Get a mask of all currently available devices
    DWORD dwDeviceMask = XGetDevices( XDEVICE_TYPE_GAMEPAD );

    // Open the devices
    for( DWORD i=0; i < XGetPortCount(); i++ )
    {
        ZeroMemory( &g_Gamepads[i], sizeof(XBGAMEPAD) );
        if( dwDeviceMask & (1<<i) ) 
        {
            // Get a handle to the device
            g_Gamepads[i].hDevice = XInputOpen( XDEVICE_TYPE_GAMEPAD, i, 
                                                XDEVICE_NO_SLOT, NULL );

            // Store capabilites of the device
            XInputGetCapabilities( g_Gamepads[i].hDevice, &g_Gamepads[i].caps );
        }
    }

    // Created devices are kept global, but for those who prefer member
    // variables, they can get a pointer to the gamepads returned.
    if( ppGamepads )
        (*ppGamepads) = g_Gamepads;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: XBInput_GetInput()
// Desc: Processes input from the gamepads
//-----------------------------------------------------------------------------
VOID XBInput_GetInput( XBGAMEPAD* pGamepads )
{
    if( NULL == pGamepads )
        pGamepads = g_Gamepads;

    // Get status about gamepad insertions and removals. Note that, in order to
    // not miss devices, we will check for removed device BEFORE checking for
    // insertions
    DWORD dwInsertions, dwRemovals;
    XGetDeviceChanges( XDEVICE_TYPE_GAMEPAD, &dwInsertions, &dwRemovals );

    // Loop through all gamepads
    for( DWORD i=0; i < XGetPortCount(); i++ )
    {
        // Handle removed devices.
        pGamepads[i].bRemoved = ( dwRemovals & (1<<i) ) ? TRUE : FALSE;
        if( pGamepads[i].bRemoved )
        {
            XInputClose( pGamepads[i].hDevice );
            pGamepads[i].hDevice = NULL;
        }

        // Handle inserted devices
        pGamepads[i].bInserted = ( dwInsertions & (1<<i) ) ? TRUE : FALSE;
        if( pGamepads[i].bInserted ) 
        {
            // TCR 1-14 Device Types
            pGamepads[i].hDevice = XInputOpen( XDEVICE_TYPE_GAMEPAD, i, 
                                               XDEVICE_NO_SLOT, NULL );
            XInputGetCapabilities( g_Gamepads[i].hDevice, &g_Gamepads[i].caps );
        }

        // If we have a valid device, poll it's state and track button changes
        if( pGamepads[i].hDevice )
        {
            // Read the input state
            XINPUT_STATE xiState;
            XInputGetState( pGamepads[i].hDevice, &xiState );

            // Copy gamepad to local structure
            pGamepads[i].wButtons          = xiState.Gamepad.wButtons;
            pGamepads[i].bAnalogButtons[0] = xiState.Gamepad.bAnalogButtons[0];
            pGamepads[i].bAnalogButtons[1] = xiState.Gamepad.bAnalogButtons[1];
            pGamepads[i].bAnalogButtons[2] = xiState.Gamepad.bAnalogButtons[2];
            pGamepads[i].bAnalogButtons[3] = xiState.Gamepad.bAnalogButtons[3];
            pGamepads[i].bAnalogButtons[4] = xiState.Gamepad.bAnalogButtons[4];
            pGamepads[i].bAnalogButtons[5] = xiState.Gamepad.bAnalogButtons[5];
            pGamepads[i].bAnalogButtons[6] = xiState.Gamepad.bAnalogButtons[6];
            pGamepads[i].bAnalogButtons[7] = xiState.Gamepad.bAnalogButtons[7];
            pGamepads[i].sThumbLX          = xiState.Gamepad.sThumbLX;
            pGamepads[i].sThumbLY          = xiState.Gamepad.sThumbLY;
            pGamepads[i].sThumbRX          = xiState.Gamepad.sThumbRX;
            pGamepads[i].sThumbRY          = xiState.Gamepad.sThumbRY;

            // Put Xbox device input for the gamepad into our custom format
            pGamepads[i].fX1 = (pGamepads[i].sThumbLX+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fX1) < XBINPUT_DEADZONE )
                pGamepads[i].fX1 = 0.0f;

            pGamepads[i].fY1 = (pGamepads[i].sThumbLY+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fY1) < XBINPUT_DEADZONE )
                pGamepads[i].fY1 = 0.0f;

            pGamepads[i].fX2 = (pGamepads[i].sThumbRX+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fX2) < XBINPUT_DEADZONE )
                pGamepads[i].fX2 = 0.0f;

            pGamepads[i].fY2 = (pGamepads[i].sThumbRY+0.5f)/32767.5f;
            if( fabsf(pGamepads[i].fY2) < XBINPUT_DEADZONE ) 
                pGamepads[i].fY2 = 0.0f;

            // Get the boolean buttons that have been pressed since the last
            // call. Each button is represented by one bit.
            pGamepads[i].wPressedButtons = ( pGamepads[i].wLastButtons ^ pGamepads[i].wButtons ) & pGamepads[i].wButtons;
            pGamepads[i].wLastButtons    = pGamepads[i].wButtons;

            // Get the analog buttons that have been pressed since the last
            // call. Here, we considered an analog button pressed (a boolean 
            // condition) if that value is >= the threshold.
            for( DWORD b=0; b<8; b++ )
            {
                // Turn the 8-bit polled value into a boolean value
                BOOL bPressed = ( pGamepads[i].bAnalogButtons[b] >= XBINPUT_BUTTONTHRESHOLD );

                if( bPressed )
                    pGamepads[i].bPressedAnalogButtons[b] = !pGamepads[i].bLastAnalogButtons[b];
                else
                    pGamepads[i].bPressedAnalogButtons[b] = FALSE;
                
                // Store the current state for the next time
                pGamepads[i].bLastAnalogButtons[b] = bPressed;
            }
        }
    }
}



//-----------------------------------------------------------------------------
// Name: XBInput_GetPrimaryController()
// Desc: The primary controller is the first controller used by a player.
//       If no controller has been used or the controller has been removed,
//       the primary controller is the controller inserted at the lowest 
//       port number. Function returns NULL if no controller is inserted.
//-----------------------------------------------------------------------------
const XBGAMEPAD* XBInput_GetPrimaryController()
{
    static INT nPrimaryController = -1;

    // If primary controller has been set and hasn't been removed, use it
    const XBGAMEPAD* pGamePad = NULL;
    if( nPrimaryController != -1 )
    {
        pGamePad = &g_Gamepads[ nPrimaryController ];
        if( pGamePad->hDevice != NULL )
            return pGamePad;
    }

    // Primary controller hasn't been set or has been removed...

    // Examine each inserted controller to see if any is being used
    INT nFirst = -1;
    for( DWORD i=0; i < XGetPortCount(); ++i )
    {
        pGamePad = &g_Gamepads[i];
        if( pGamePad->hDevice != NULL )
        {
            // Remember the lowest inserted controller ID
            if( nFirst == -1 )
                nFirst = i;

            // If any button is active, we found the primary controller
            if( XBInput_IsAnyButtonActive( pGamePad ) )
            {
                nPrimaryController = i;
                return pGamePad;
            }
        }
    }

    // No controllers are inserted
    if( nFirst == -1 )
        return NULL;

    // The primary controller hasn't been set and no controller has been
    // used yet, so return the controller on the lowest port number
    pGamePad = &g_Gamepads[ nFirst ];
    return pGamePad;
}




//-----------------------------------------------------------------------------
// Name: XBInput_IsAnyButtonActive()
// Desc: TRUE if any button depressed or any thumbstick offset on the given
//       controller.
//-----------------------------------------------------------------------------
BOOL XBInput_IsAnyButtonActive( const XBGAMEPAD* pGamePad )
{
    // Check digital buttons
    if( pGamePad->wButtons )
        return TRUE;

    // Check analog buttons
    for( DWORD i = 0; i < 8; ++i )
    {
        if( pGamePad->bAnalogButtons[ i ] )
            return TRUE;
    }

    // Check thumbsticks
    if( pGamePad->fX1 >  XBINPUT_DEADZONE ||
        pGamePad->fX1 < -XBINPUT_DEADZONE ||
        pGamePad->fY1 >  XBINPUT_DEADZONE ||
        pGamePad->fY1 < -XBINPUT_DEADZONE )
    {
        return TRUE;
    }

    if( pGamePad->fX2 >  XBINPUT_DEADZONE ||
        pGamePad->fX2 < -XBINPUT_DEADZONE ||
        pGamePad->fY2 >  XBINPUT_DEADZONE ||
        pGamePad->fY2 < -XBINPUT_DEADZONE )
    {
        return TRUE;
    }

    // Nothing active
    return FALSE;
}

#endif // INCLUDE_INPUT
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\xbs_app.h ===
//
//	xbox_app.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __XBOX_APP_H__
#define __XBOX_APP_H__

#include "renderer.h"
#include "camera.h"
#include "scene_renderer.h"
#include "logo_renderer.h"
#include "VBlob.h"
#include "Shield.h"
#include "GreenFog.h"
#include "qrand.h"
#include "CamControl.h"
#include "PlacementDoodad.h"

#ifdef INCLUDE_INPUT
#include "XBInput.h"
#endif // INCLUDE_INPUT



#include "defines.h"




///////////////////////////////////////////////////////////////////////////////
class XBoxStartupApp
{
private:
	
	int				nWidth;
	int				nHeight;


	bool			bPaused;
	bool			bActive;
	bool			bLoop;
	bool			bCameraUnderControl;
	bool			bUserControlledIntensity;
	bool			bRenderGeom;
	bool			bRenderSlash;

	float			fTimeElapsed;
	float			fJogDeltaTime;
	float			fIIDT;
	float			fBaseBlobIntensity;
	float			fBlobIntensity;
	float			fSmoothedBlobIntensity;

	DWORD			dwLastTick;
	DWORD			dwLastFramecountTick;
#ifndef FINAL_BUILD
	int				numFrames, numFramesTooSlow;
	float			fFastestFrame, fSlowestFrame;
#endif


	enum { NUM_PULSES = 12 };
	D3DVECTOR		vPulses[NUM_PULSES];	// x=center time, y=time radius of effect, z=intensity
	void			initIntensityPulses();
	float			sumIntensityPulses(float et);


	void					process();
	void					drawFrame();

	// we still want to move around when paused.
	void					advanceTime(float dt, float cam_dt);

	ShieldMgr				shieldMgr;
	LogoRenderer			logoGeom;
	

	QRand					qrand;

#ifdef INCLUDE_INPUT
    XDEVICE_PREALLOC_TYPE  * inputDeviceTypes;
    DWORD                    dwNumInputDeviceTypes;
    XBGAMEPAD              * pGamepad;
	XBGAMEPAD                defaultGamepad;

	void processInput();
#endif // INCLUDE_INPUT

	float					 fCamRad,	fSavedCamRad;
	float					 fCamTheta,	fSavedCamTheta;
	float					 fCamPhi,	fSavedCamPhi;
	float					 fCamRadBlob;

#ifdef INCLUDE_PLACEMENT_DOODAD	
	bool					bPositionLookatMode;
	D3DVECTOR				ptLookatPosition;
	PlacementDoodad			placementDoodad;
public:
	const D3DVECTOR&		getLookatPoint()	const	{ return ptLookatPosition; }
protected:
#endif


public:

#ifndef STARTUPANIMATION
	float fInitTimes[64];	
	void startTimeRec(int i) { fInitTimes[i] = ((float)GetTickCount()) * 0.001f; }
	void endTimeRec(int i)   { fInitTimes[i] = (((float)GetTickCount()) * 0.001f) - fInitTimes[i]; }

#endif // STARTUPANIMATION

	Renderer				theRenderer;
	Camera					theCamera;
	
	D3DLIGHT8               blobLight;
	D3DLIGHT8               moodLight;

	LPDIRECT3DCUBETEXTURE8	pNormalCubeMapLoRes;
	LPDIRECT3DCUBETEXTURE8  pNormalCubeMapHiRes;

	LPDIRECT3DCUBETEXTURE8  pStaticReflectionCubeMap;
	LPDIRECT3DTEXTURE8      pRoughBumpMap;

	LPDIRECT3DTEXTURE8      pGlowMap;

	DWORD					dwPShader[st_NoTypes];
	DWORD					dwVShader[st_NoTypes];

	SceneRenderer           sceneGeom;
	VBlob					vblob;
	CameraController		camController;
	GreenFog				greenFog;

	int						nBootCount;

	int						appSpeedId;
	bool					bSceneShadowsOn;
	bool					bFogOn;
	bool				    bWideScreen;

	void Construct();
	void Destruct();

	bool	init(int width,int height);
	void	shutdown();
	int		run();
	void	pause();
	void	activate();

#ifndef BINARY_RESOURCE
	DWORD   loadVertexShader(const TCHAR *pName,const DWORD *pdwDecl);
	DWORD   loadPixelShader(const TCHAR *pName);
#else // BINARY_RESOURCE
	DWORD   loadVertexShader(const BYTE *pb,const DWORD *pdwDecl);
	DWORD   loadPixelShader(const BYTE *pb);
#endif // BINARY_RESOURCE

	float			getElapsedTime()			const	{ return fTimeElapsed; }
	float			getBaseBlobIntensity()		const	{ return fBaseBlobIntensity; }
	float			getBlobIntensity()			const	{ return fBlobIntensity; }
	float			getPulseIntensity()			const	{ return fBlobIntensity - fBaseBlobIntensity; }
	float			getSmoothedBlobIntensity()	const	{ return fSmoothedBlobIntensity; }
	float			getIIDT()					const	{ return fIIDT; } // IIDT is integration of (intensity * dt)

	
	float			getCameraRadiusFromBlob()	const { return fCamRadBlob; }
	float			getCameraRadius()	const	{ return fCamRad; }
	float			getCameraTheta()	const	{ return fCamTheta; }
	float			getCameraPhi()		const	{ return fCamPhi; }

	ShieldMgr*		getShieldMgr()				{ return &shieldMgr; }

	inline float	fRand01();
	inline float	fRand11();
	inline int		rand() { return qrand.Rand(); }

};
///////////////////////////////////////////////////////////////////////////////
#define XBSA_RAND_MAX  0x00010000
#define XBSA_RAND_MASK 0x0000FFFF
inline float XBoxStartupApp::fRand01()
{
	static float mul = 1.0f / ((float)XBSA_RAND_MAX);
	return ((float)(qrand.Rand()&XBSA_RAND_MASK)) * mul;
}
inline float XBoxStartupApp::fRand11()
{
	static float mul = 2.0f / ((float)XBSA_RAND_MAX);
	return (((float)(qrand.Rand()&XBSA_RAND_MASK)) * mul) - 1.0f;
}
///////////////////////////////////////////////////////////////////////////////

extern XBoxStartupApp gApp;

#endif // __XBOX_APP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\xbs_math_inl.h ===
//
//	xbs_math_inl.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __XBS_MATH_INL_H__
#define __XBS_MATH_INL_H__

#include "fastmath.h"

///////////////////////////////////////////////////////////////////////////////
inline void SetLookAt(const D3DVECTOR &cam, const D3DVECTOR &look, const D3DVECTOR &up, D3DMATRIX *pres)
{	
	D3DVECTOR zAxis = look;
	zAxis.x -= cam.x;
	zAxis.y -= cam.y;
	zAxis.z -= cam.z;
	
	Normalize(&zAxis);

	D3DVECTOR xAxis;
	Cross(zAxis,up,&xAxis);

	Normalize(&xAxis);

	D3DVECTOR yAxis;
	Cross(xAxis,zAxis,&yAxis);

	pres->_11 = xAxis.x;
	pres->_12 = yAxis.x;
	pres->_13 = zAxis.x;
	pres->_14 = 0.f;
	pres->_21 = xAxis.y;
	pres->_22 = yAxis.y;
	pres->_23 = zAxis.y;
	pres->_24 = 0.f;
	pres->_31 = xAxis.z;
	pres->_32 = yAxis.z;
	pres->_33 = zAxis.z;
	pres->_34 = 0.f;
	pres->_41 = pres->_42 = pres->_43 = 0.f;
	pres->_44 = 1.f;

	D3DVECTOR inv_cam;
	inv_cam.x = -cam.x;
	inv_cam.y = -cam.y;
	inv_cam.z = -cam.z;

	D3DVECTOR r_inv_cam;
	TransformVector(inv_cam,*pres,&r_inv_cam);

	pres->_41 = r_inv_cam.x;
	pres->_42 = r_inv_cam.y;
	pres->_43 = r_inv_cam.z;
}
///////////////////////////////////////////////////////////////////////////////
void SetProjection(float fov,float aspect,float near_plane,float far_plane,D3DMATRIX *pres)
{
	float fov2 = fov * .5f;
	float c,s,ct;
	SinCos(fov2, &s, &c);
	ct = c / s;

    float w = aspect * ct;
    float h = ct;
    float Q = far_plane / (far_plane - near_plane);

	pres->_11 = w;
	pres->_12 = 0.f;
	pres->_13 = 0.f;
	pres->_14 = 0.f;
	pres->_21 = 0.f;
	pres->_22 = h;
	pres->_23 = 0.f;
	pres->_24 = 0.f;
	pres->_31 = 0.f;
	pres->_32 = 0.f;
	pres->_33 = Q;
	pres->_34 = 1.f;
	pres->_41 = 0.f;
	pres->_42 = 0.f;
	pres->_43 = -Q * near_plane;
	pres->_44 = 0.f;
}
///////////////////////////////////////////////////////////////////////////////
inline void SetInverse(const D3DMATRIX &mat, D3DMATRIX *pres)
{
	pres->_11 = mat._11;
	pres->_12 = mat._21;
	pres->_13 = mat._31;
	pres->_14 = 0.f;
	
	pres->_21 = mat._12;
	pres->_22 = mat._22;
	pres->_23 = mat._32;
	pres->_24 = 0.f;

	pres->_31 = mat._13;
	pres->_32 = mat._23;
	pres->_33 = mat._33;
	pres->_34 = 0.f;

	D3DVECTOR inv_trans;
	inv_trans.x = -mat._41;
	inv_trans.y = -mat._42;
	inv_trans.z = -mat._43;

	D3DVECTOR r_inv_trans;
	TransformVector(inv_trans,*pres,&r_inv_trans);

	pres->_41 = r_inv_trans.x;
	pres->_42 = r_inv_trans.y;
	pres->_43 = r_inv_trans.z;
	pres->_44 = 1.f;
}
///////////////////////////////////////////////////////////////////////////////
inline void SetTranspose(const D3DMATRIX &mat, D3DMATRIX *pres)
{
	pres->_11 = mat._11;
	pres->_12 = mat._21;
	pres->_13 = mat._31;
	pres->_14 = mat._41;

	pres->_21 = mat._12;
	pres->_22 = mat._22;
	pres->_23 = mat._32;
	pres->_24 = mat._42;

	pres->_31 = mat._13;
	pres->_32 = mat._23;
	pres->_33 = mat._33;
	pres->_34 = mat._43;

	pres->_41 = mat._14;
	pres->_42 = mat._24;
	pres->_43 = mat._34;
	pres->_44 = mat._44;
}
///////////////////////////////////////////////////////////////////////////////
inline void SetIdentity(D3DMATRIX *pres)
{
	pres->_11 = pres->_22 = pres->_33 = pres->_44 = 1.f;
	pres->_12 = pres->_13 = pres->_14 = 
	pres->_21 = pres->_23 = pres->_24 = 
	pres->_31 = pres->_32 = pres->_34 = 
	pres->_41 = pres->_42 = pres->_43 = 0.f;
}
///////////////////////////////////////////////////////////////////////////////
inline void SetXRotation(float r,D3DMATRIX *pres)
{
	float s,c;
	SinCos(r,&s,&c);

	pres->_11 = 1.f;
	pres->_12 = 0.f;
	pres->_13 = 0.f;
	pres->_14 = 0.f;
	pres->_21 = 0.f;
	pres->_22 = c;
	pres->_23 = s;
	pres->_24 = 0.f;
	pres->_31 = 0.f;
	pres->_32 = -s;
	pres->_33 = c;
	pres->_34 = 0.f;
	pres->_41 = pres->_42 = pres->_43 = 0.f;
	pres->_44 = 1.f; 
}
///////////////////////////////////////////////////////////////////////////////
inline void SetYRotation(float r,D3DMATRIX *pres)
{
	float s,c;
	SinCos(r,&s,&c);

	pres->_11 = c;
	pres->_12 = 0.f;
	pres->_13 = s;
	pres->_14 = 0.f;
	pres->_21 = 0.f;
	pres->_22 = 1.f;
	pres->_23 = 0.f;
	pres->_24 = 0.f;
	pres->_31 = -s;
	pres->_32 = 0.f;
	pres->_33 = c;
	pres->_34 = 0.f;
	pres->_41 = pres->_42 = pres->_43 = 0.f;
	pres->_44 = 1.f; 
}
///////////////////////////////////////////////////////////////////////////////
inline void SetZRotation(float r,D3DMATRIX *pres)
{
	float s,c;
	SinCos(r,&s,&c);

	pres->_11 = c;
	pres->_12 = s;
	pres->_13 = 0.f;
	pres->_14 = 0.f;
	pres->_21 = -s;
	pres->_22 = c;
	pres->_23 = 0;
	pres->_24 = 0.f;
	pres->_31 = 0.f;
	pres->_32 = 0.f;
	pres->_33 = 1;
	pres->_34 = 0.f;
	pres->_41 = pres->_42 = pres->_43 = 0.f;
	pres->_44 = 1.f; 
}
///////////////////////////////////////////////////////////////////////////////
inline void SetXYZRotation(float x,float y,float z, D3DMATRIX *pres)
{
	D3DMATRIX matx;
	SetXRotation(x,&matx);

	D3DMATRIX maty;
	SetYRotation(y,&maty);

	D3DMATRIX matxy;
	MulMats(matx,maty,&matxy);

	D3DMATRIX matz;
	SetZRotation(z,&matz);

	MulMats(matz,matxy,pres);
}
///////////////////////////////////////////////////////////////////////////////
inline void SetRotationFromRHQuat(const D3DVECTOR4 &q,D3DMATRIX *pres)
{
	pres->_11 = q.w*q.w + q.x*q.x - q.y*q.y - q.z*q.z;
	pres->_12 = 2.f*q.x*q.y + 2.f*q.w*q.z;
	pres->_13 = 2.f*q.x*q.z - 2.f*q.w*q.y;
	pres->_14 = 0.f;

	pres->_21 = 2.f*q.x*q.y - 2.f*q.w*q.z;
	pres->_22 = q.w*q.w - q.x*q.x + q.y*q.y - q.z*q.z;
	pres->_23 = 2.f*q.y*q.z + 2.f*q.w*q.x;
	pres->_24 = 0.f;

	pres->_31 = 2.f*q.x*q.z + 2.f*q.w*q.y;
	pres->_32 = 2.f*q.y*q.z - 2.f*q.w*q.x;
	pres->_33 = q.w*q.w - q.x*q.x - q.y*q.y + q.z*q.z;
	pres->_34 = 0.f;
	
	pres->_41 = pres->_42 = pres->_43 = 0.f;
	pres->_44 = 1.f;
}
///////////////////////////////////////////////////////////////////////////////
inline void SetRotationFromLHQuat(const D3DVECTOR4 &q,D3DMATRIX *pres)
{
	pres->_11 = q.w*q.w + q.x*q.x - q.y*q.y - q.z*q.z;
	pres->_21 = 2.f*q.x*q.y + 2.f*q.w*q.z;
	pres->_31 = 2.f*q.x*q.z - 2.f*q.w*q.y;
	pres->_41 = 0.f;

	pres->_12 = 2.f*q.x*q.y - 2.f*q.w*q.z;
	pres->_22 = q.w*q.w - q.x*q.x + q.y*q.y - q.z*q.z;
	pres->_32 = 2.f*q.y*q.z + 2.f*q.w*q.x;
	pres->_42 = 0.f;

	pres->_13 = 2.f*q.x*q.z + 2.f*q.w*q.y;
	pres->_23 = 2.f*q.y*q.z - 2.f*q.w*q.x;
	pres->_33 = q.w*q.w - q.x*q.x - q.y*q.y + q.z*q.z;
	pres->_43 = 0.f;
	
	pres->_14 = pres->_24 = pres->_34 = 0.f;
	pres->_44 = 1.f;
}
///////////////////////////////////////////////////////////////////////////////
inline void TransformPoint(const D3DVECTOR &pt,const D3DMATRIX &mat, D3DVECTOR *pres)
{
	pres->x = pt.x * mat._11 + pt.y * mat._21 + pt.z * mat._31 + mat._41;
	pres->y = pt.x * mat._12 + pt.y * mat._22 + pt.z * mat._32 + mat._42;
	pres->z = pt.x * mat._13 + pt.y * mat._23 + pt.z * mat._33 + mat._43; 
}
///////////////////////////////////////////////////////////////////////////////
inline void TransformVector(const D3DVECTOR &v,const D3DMATRIX &mat, D3DVECTOR *pres)
{
	pres->x = v.x * mat._11 + v.y * mat._21 + v.z * mat._31;
	pres->y = v.x * mat._12 + v.y * mat._22 + v.z * mat._32;
	pres->z = v.x * mat._13 + v.y * mat._23 + v.z * mat._33; 
}
///////////////////////////////////////////////////////////////////////////////
inline void TransformPoint(const D3DVECTOR4 &pt,const D3DMATRIX &mat, D3DVECTOR4 *pres)
{
	pres->x = pt.x * mat._11 + pt.y * mat._21 + pt.z * mat._31 + pt.w * mat._41;
	pres->y = pt.x * mat._12 + pt.y * mat._22 + pt.z * mat._32 + pt.w * mat._42;
	pres->z = pt.x * mat._13 + pt.y * mat._23 + pt.z * mat._33 + pt.w * mat._43; 
	pres->w = pt.x * mat._14 + pt.y * mat._24 + pt.z * mat._34 + pt.w * mat._44; 
}
///////////////////////////////////////////////////////////////////////////////
inline void MulMats(const D3DMATRIX &a, const D3DMATRIX &b,D3DMATRIX *pres)
{
	pres->_11 = a._11*b._11 + a._12*b._21 + a._13*b._31 + a._14*b._41;
	pres->_12 = a._11*b._12 + a._12*b._22 + a._13*b._32 + a._14*b._42;
	pres->_13 = a._11*b._13 + a._12*b._23 + a._13*b._33 + a._14*b._43;
	pres->_14 = a._11*b._14 + a._12*b._24 + a._13*b._34 + a._14*b._44;

	pres->_21 = a._21*b._11 + a._22*b._21 + a._23*b._31 + a._24*b._41;
	pres->_22 = a._21*b._12 + a._22*b._22 + a._23*b._32 + a._24*b._42;
	pres->_23 = a._21*b._13 + a._22*b._23 + a._23*b._33 + a._24*b._43;
	pres->_24 = a._21*b._14 + a._22*b._24 + a._23*b._34 + a._24*b._44;

	pres->_31 = a._31*b._11 + a._32*b._21 + a._33*b._31 + a._34*b._41;
	pres->_32 = a._31*b._12 + a._32*b._22 + a._33*b._32 + a._34*b._42;
	pres->_33 = a._31*b._13 + a._32*b._23 + a._33*b._33 + a._34*b._43;
	pres->_34 = a._31*b._14 + a._32*b._24 + a._33*b._34 + a._34*b._44;

	pres->_41 = a._41*b._11 + a._42*b._21 + a._43*b._31 + a._44*b._41;
	pres->_42 = a._41*b._12 + a._42*b._22 + a._43*b._32 + a._44*b._42;
	pres->_43 = a._41*b._13 + a._42*b._23 + a._43*b._33 + a._44*b._43;
	pres->_44 = a._41*b._14 + a._42*b._24 + a._43*b._34 + a._44*b._44;
}
///////////////////////////////////////////////////////////////////////////////
inline void SetScale(float x,float y,float z,D3DMATRIX *pres)
{
	pres->_11 = x;
	pres->_22 = y;
	pres->_33 = z;
	
	pres->_12 = pres->_13 = pres->_14 = 
	pres->_21 = pres->_23 = pres->_24 = 
	pres->_31 = pres->_32 = pres->_34 = 
	pres->_41 = pres->_42 = pres->_43 = 0.f;

	pres->_44 = 1.f;
}

///////////////////////////////////////////////////////////////////////////////
inline void SetCubeMapView(DWORD dwFace, const D3DVECTOR &pos,D3DMATRIX *pres)
{
    D3DVECTOR look,up;
	
    switch( dwFace )
    {
        case D3DCUBEMAP_FACE_POSITIVE_X:
            Set(&look,1.f,0.f,0.f);
			Set(&up,0.f,1.f,0.f);
            break;

        case D3DCUBEMAP_FACE_NEGATIVE_X:
            Set(&look,-1.f,0.f,0.f);
			Set(&up,0.f,1.f,0.f);
            break;

        case D3DCUBEMAP_FACE_POSITIVE_Y:
			Set(&look,0.f,1.f,0.f);
			Set(&up,0.f,0.f,-1.f);
            break;

        case D3DCUBEMAP_FACE_NEGATIVE_Y:
            Set(&look,0.f,-1.f,0.f);
			Set(&up,0.f,0.f,1.f);
            break;

        case D3DCUBEMAP_FACE_POSITIVE_Z:
            Set(&look,0.f,0.f,1.f);
			Set(&up,0.f,1.f,0.f);
            break;

        case D3DCUBEMAP_FACE_NEGATIVE_Z:
            Set(&look,0.f,0.f,-1.f);
			Set(&up,0.f,1.f,0.f);
            break;
    }

	D3DVECTOR lookat;
	Add(pos,look,&lookat);

    SetLookAt( pos, lookat, up, pres );
}
///////////////////////////////////////////////////////////////////////////////
inline void ConcatMats(const D3DMATRIX &a, const D3DMATRIX &b, D3DMATRIX *pres)
{
	MulMats(a,b,pres);

	TransformVector(*((const D3DVECTOR *)(&a._41)),b,(D3DVECTOR *)&pres->_41);

	pres->_41 += b._41; pres->_42 += b._42; pres->_43 += b._43;
	
	pres->_14 = pres->_24 = pres->_34 = 0.f;
	pres->_44 = 1.f;
}
///////////////////////////////////////////////////////////////////////////////
inline float Dot(const D3DVECTOR &a, const D3DVECTOR &b)
{
	return a.x*b.x + a.y*b.y + a.z*b.z;
}
///////////////////////////////////////////////////////////////////////////////
inline float Length2(const D3DVECTOR &v)
{
	return v.x*v.x + v.y*v.y + v.z*v.z;
}
///////////////////////////////////////////////////////////////////////////////
inline float Length(const D3DVECTOR &v)
{
	return fast_sqrt(Length2(v));
}
///////////////////////////////////////////////////////////////////////////////
inline float Distance2(const D3DVECTOR &lhs, const D3DVECTOR &rhs)
{
	float dx = lhs.x - rhs.x;
	float dy = lhs.y - rhs.y;
	float dz = lhs.z - rhs.z;
	return dx*dx + dy*dy + dz*dz;
}
///////////////////////////////////////////////////////////////////////////////
inline float Distance(const D3DVECTOR &lhs, const D3DVECTOR &rhs)
{
	return fast_sqrt(Distance2(lhs, rhs));
}
///////////////////////////////////////////////////////////////////////////////
inline void Normalize(D3DVECTOR *pres)
{
	float fooLen = 1.f/Length(*pres);
	pres->x *= fooLen;
	pres->y *= fooLen;
	pres->z *= fooLen;
}
///////////////////////////////////////////////////////////////////////////////
inline void Cross(const D3DVECTOR &a, const D3DVECTOR &b, D3DVECTOR *pres)
{
	pres->x = a.y*b.z - a.z*b.y;
	pres->y = a.z*b.x - a.x*b.z;
	pres->z = a.x*b.y - a.y*b.x;
}
///////////////////////////////////////////////////////////////////////////////
inline void  Scale(D3DVECTOR *pres,float s)
{
	pres->x *= s; pres->y *= s; pres->z *= s;
}
///////////////////////////////////////////////////////////////////////////////
inline void  Set(D3DVECTOR *pres,float x,float y,float z)
{
	pres->x = x; pres->y = y; pres->z = z;
}
///////////////////////////////////////////////////////////////////////////////
inline void  Set(D3DVECTOR4 *pres,float x,float y,float z,float w)
{
	pres->x = x; pres->y = y; pres->z = z; pres->w = w;
}
///////////////////////////////////////////////////////////////////////////////
inline void  Sub(const D3DVECTOR &lhs, const D3DVECTOR &rhs, D3DVECTOR *pres)
{
	pres->x = lhs.x - rhs.x;
	pres->y = lhs.y - rhs.y;
	pres->z = lhs.z - rhs.z;
}
///////////////////////////////////////////////////////////////////////////////
inline void  SetQuatFromAxis(const D3DVECTOR &axis, float angle,D3DVECTOR4 *pres)
{
	float s,c;
	SinCos(angle*0.5f,&s,&c);
	
	pres->x = axis.x * s;
	pres->y = axis.y * s;
	pres->z = axis.z * s;
	pres->w = c;
}
///////////////////////////////////////////////////////////////////////////////
inline void  NormalizeQuat(D3DVECTOR4 *pres)
{
	float len2 = DotQuats(*pres,*pres);
	if(len2 != 0.f)
	{
		float oo_len = 1.f/fast_sqrt(len2);
		pres->x *= oo_len;
		pres->y *= oo_len;
		pres->z *= oo_len;
		pres->w *= oo_len;
	}
}
///////////////////////////////////////////////////////////////////////////////
inline float DotQuats(const D3DVECTOR4 &q0,const D3DVECTOR4 &q1)
{
	return q0.x * q1.x + q0.y * q1.y + q0.z * q1.z + q0.w * q1.w;
}
///////////////////////////////////////////////////////////////////////////////
inline void  SlerpQuats(const D3DVECTOR4 &q0,const D3DVECTOR4 &q1,float t,D3DVECTOR4 *pres)
{
	float dp = DotQuats(q0,q1);

	D3DVECTOR4 _q1 = q1;
	if(dp < 0.f)
	{
		_q1.x = -q1.x;
		_q1.y = -q1.y;
		_q1.z = -q1.z;
		_q1.w = -q1.w;
		dp = -dp;
	}
	
	if(IsEq(dp,1.f))
	{
		pres->x = q0.x * (1.f - t) + _q1.x * t;
		pres->y = q0.y * (1.f - t) + _q1.y * t;
		pres->z = q0.z * (1.f - t) + _q1.z * t;
		pres->w = q0.w * (1.f - t) + _q1.w * t;
	}
	else
	{
		float angle = fast_acos(dp);
		float t0 = fast_sin(angle*(1.f-t));
		float t1 = fast_sin(angle*t);
		
		pres->x = q0.x * t0 + _q1.x * t1;
		pres->y = q0.y * t0 + _q1.y * t1;
		pres->z = q0.z * t0 + _q1.z * t1;
		pres->w = q0.w * t0 + _q1.w * t1;

		float oo_sin_theta = 1.f/fast_sin(angle);

		pres->x *= oo_sin_theta;
		pres->y *= oo_sin_theta;
		pres->z *= oo_sin_theta;
		pres->w *= oo_sin_theta;
	}
}
///////////////////////////////////////////////////////////////////////////////
inline bool  IsEq(float a,float b)
{
	return fast_fabs(a-b) <= 0.00001f;
}
///////////////////////////////////////////////////////////////////////////////
inline bool  PtsEq(const D3DVECTOR &a,const D3DVECTOR &b)
{
	return IsEq(a.x,b.x) && IsEq(a.y,b.y) && IsEq(a.z,b.z);
}
///////////////////////////////////////////////////////////////////////////////
inline void  AddScaled(D3DVECTOR* ptarget, const D3DVECTOR& src, float scale)
{
	ptarget->x += src.x * scale;
	ptarget->y += src.y * scale;
	ptarget->z += src.z * scale;
}
///////////////////////////////////////////////////////////////////////////////
inline float  QuickLength(const D3DVECTOR& vec)
{
	float h = (float) fabs(vec.x);
	float m = (float) fabs(vec.y);
	float l = (float) fabs(vec.z);
	float t;
	if (m>h) { t = m; m = h; h = t; }
	if (l>m) { t = l; l = m; m = t; }
	if (m>h) { t = m; m = h; h = t; }
	return (1.043388475f * (h + 0.34375f * m + 0.25f * l));
}
///////////////////////////////////////////////////////////////////////////////
inline void  QuickNormalize(D3DVECTOR* p_vec)
{
	float qlen = QuickLength(*p_vec);
	if (qlen < 0.000001f) return;
	float oo_qlen = 1.0f / qlen;
	Scale(p_vec, oo_qlen);
}
///////////////////////////////////////////////////////////////////////////////
inline void  Add(const D3DVECTOR &a, const D3DVECTOR &b, D3DVECTOR *pres)
{
	pres->x = a.x + b.x;
	pres->y = a.y + b.y;
	pres->z = a.z + b.z;
}
///////////////////////////////////////////////////////////////////////////////
inline void SinCos(const float &a, float *ps, float *pc)
{
	_asm
	{
		mov eax,[a]
		fld dword ptr[eax]
		fsincos
		mov ebx,[pc]
		mov ecx,[ps]
		fstp dword ptr[ebx]
		fstp dword ptr[ecx]
	}
}

const float F_0 = 0.0f;

///////////////////////////////////////////////////////////////////////////////
inline float AngleFromSinCos(const float &s, const float &c)
{
	// Calculates the angle that produces a given sin and cosine.
	// This is a special case of atan2.
	//
	// Returns a value in (-Pi, Pi/2]

	if (s <= -1) return -Pi / 2;
	if (s >= 1)  return Pi / 2;
	if (c <= -1) return Pi;
	if (c >= 1)  return F_0;

	// Use either asin or acos, depending on what we think will have the
	// best numerical performance.
	float a;
	if (s < .1f && s > -.1f)
	{
		a = (float) fast_asin(s);
		if (c < 0) 
		{
			a = (float) Pi - a;
			if (a > Pi) a -= 2 * Pi;
		}
	}
	else
	{
		a = (float) fast_acos(c);
		if (s < 0) a = (float) - a;
	}

	return a;
}
///////////////////////////////////////////////////////////////////////////////
inline void bs_swap(float& a, float& b)
{
	float tmp = a;
	a = b;
	b = tmp;
}
///////////////////////////////////////////////////////////////////////////////
inline void bs_swap(int& a, int& b)
{
	int tmp = a;
	a = b;
	b = tmp;
}
///////////////////////////////////////////////////////////////////////////////
#endif // __XBS_MATH_INL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\xbs_app.cpp ===
//
//	xbs_app.cpp
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#include "precomp.h"
#include "xbs_app.h"
#include "xbs_math.h"
#include "tex_gen.h"
#include "renderer.h"

#define BOOTSOUND 1

#ifdef BOOTSOUND
#include "bootsound.h"
#endif // BOOTSOUND

#ifdef STARTUPANIMATION
#include "mslogo.h"
extern "C" {
#include "av.h"
#include "ke.h"
}
#endif // STARTUPANIMATION

#ifdef _DEBUG
int gcMemAllocs = 0;
#endif // _DEBUG

unsigned long g_NVCLKSpeed = 200;

#ifdef STARTUPANIMATION
extern "C" BOOL g_bShortVersion;
#else
BOOL g_bShortVersion = FALSE;
#endif

#ifndef STARTUPANIMATION
int g_TimeRecId = 0;
#define BEGIN_TIME gApp.startTimeRec(g_TimeRecId);
#define END_TIME gApp.endTimeRec(g_TimeRecId++);
#else
#define BEGIN_TIME
#define END_TIME
#endif

extern "C" {
    LONG
    WINAPI
    HalReadSMBusValue(
        IN UCHAR SlaveAddress,
        IN UCHAR CommandCode,
        IN BOOLEAN ReadWordValue,
        OUT ULONG *DataValue
        );
 
     
    LONG
    WINAPI
    HalWriteSMBusValue(
        IN UCHAR SlaveAddress,
        IN UCHAR CommandCode,
        IN BOOLEAN WriteWordValue,
        IN ULONG DataValue
        );

     
    VOID
    WINAPI
    KeStallExecutionProcessor (
        IN ULONG MicroSeconds
        );
    
    }

DWORD WriteSMC(unsigned char addr, unsigned char value)
{
    return HalWriteSMBusValue(0x20, addr, FALSE, value);
}
 
DWORD ReadSMC(unsigned char addr)
{
    DWORD value = 0xCCCCCCCC;
    DWORD status = HalReadSMBusValue(0x21, addr, FALSE, &value);
    return value;
}

//#define NULL_THE_HARDWARE

#ifndef FINAL_BUILD
const int FRAMECOUNT_PERIOD = 0;	// in milliseconds
#endif

#ifdef STARTUPANIMATION
namespace D3DK
{

void MemFree(void* pv)
{
    ::MemFree(pv);
}

void* MemAlloc(ULONG cBytes)
{
    return ::MemAlloc(cBytes);
}

void* MemAllocNoZero(ULONG cBytes)
{
    return ::MemAllocNoZero(cBytes);
}

}
#endif // STARTUPANIMATION

XBoxStartupApp gApp;

#define NUM_APP_SPEEDS 3
///////////////////////////////////////////////////////////////////////////////
#ifdef STARTUPANIMATION
extern "C"
void AnipRunAnimation()
#else // STARTUPANIMATION
void _cdecl main()
#endif // STARTUPANIMATION
{

#if BOOTSOUND
    LPDIRECTSOUND pDSound;

    //
    // reset the ACI, clamp audio
    //
    
    WriteSMC(0x0B,0x01);

    DirectSoundCreate( NULL, &pDSound, NULL );
#endif

    gApp.Construct();

	if(!gApp.init(640,480))
	{
#ifndef STARTUPANIMATION
		OutputDebugString("Failed to Initalize\n");
#else // STARTUPANIMATION
        return;
#endif // STARTUPANIMATION
	}

    //
    // unclamp audio
    //

#if BOOTSOUND
    pDSound->Release();
    WriteSMC(0x0B,0x00);
#endif

	gApp.run();
	gApp.shutdown();

#ifdef _DEBUG
    // Make sure all allocations are gone!

#ifdef STARTUPANIMATION
    if (gcMemAllocsContiguous != 0)
    {
        __asm int 3;
    }
#endif // STARTUPANIMATION

    if (gcMemAllocs != 0)
    {
        __asm int 3;
    }
#endif // _DEBUG
}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::Construct()
{
#ifdef STARTUPANIMATION
    ULONG AvInfo;
    AvSendTVEncoderOption(NULL, AV_QUERY_AV_CAPABILITIES, 0, &AvInfo); 
    if (AvInfo & AV_FLAGS_WIDESCREEN)
    {
        bWideScreen = true;
    }
    else
    {
        bWideScreen = false;
    }
#else // STARTUPANIMATION
	bWideScreen = false;
#endif // STARTUPANIMATION

#ifdef _SHIELD
    shieldMgr.Init();
#endif
    greenFog.Init();

#if 0
    LARGE_INTEGER li;
    KeQuerySystemTime(&li);
    qrand.Init(li.LowPart);
#else
    qrand.Init();
#endif

    theRenderer.Init();
    theCamera.Init();
    vblob.Init();
    camController.Init();

#ifdef STARTUPANIMATION
    bLoop    = false;
#else

#ifndef FINAL_BUILD
	bLoop    = true;
#else 
	bLoop    = false;
#endif

#endif // STARTUPANIMATION

	bPaused  = false;
	bActive  = false;

	bCameraUnderControl = true;
	bUserControlledIntensity = false;

	appSpeedId = 0;
	
	fIIDT = 0.0f;
	fSmoothedBlobIntensity = fBlobIntensity = fBaseBlobIntensity = DEMO_START_INTENSITY;
    if (g_bShortVersion)
    {
        fTimeElapsed = 7.5f;
    }
    else
    {
	    fTimeElapsed = 0.0f;
    }


	bSceneShadowsOn = true;
	bFogOn = true;

#ifdef INCLUDE_INPUT
	dwNumInputDeviceTypes = 0;
    inputDeviceTypes = NULL;
#endif // INCLUDE_INPUT

	fCamRad = 90.f;
	fCamTheta = Pi;
	fCamPhi = 0.f;

 	if (bCameraUnderControl)
	{
		bs_swap(fCamRad, fSavedCamRad);
		bs_swap(fCamTheta, fSavedCamTheta);
		bs_swap(fCamPhi, fSavedCamPhi);
	}


	float fTest = 1.35f;
	int z = (int)(fTest * 2.f);

	ZeroMemory(&blobLight,sizeof(blobLight));
	Set( (D3DVECTOR4 *)&blobLight.Position, 0.f, 0.f,0.f );
	Set( (D3DVECTOR4 *)&blobLight.Ambient,0.0f,0.0f,0.0f,1.f );
	Set( (D3DVECTOR4 *)&blobLight.Diffuse,0.13f,0.13f,0.13f,1.f );
	Set( (D3DVECTOR4 *)&blobLight.Specular,1.f,1.f,1.f,1.f );
	blobLight.Attenuation0 = 1.f;
	blobLight.Attenuation1 = 0.001f;
	blobLight.Attenuation2 = 0.001f;

	ZeroMemory(&moodLight,sizeof(moodLight));
	Set( (D3DVECTOR4 *)&moodLight.Position, 0.f, -40.f,30.f );
	Set( (D3DVECTOR4 *)&moodLight.Ambient,0.f,0.f,0.f,1.f );
	Set( (D3DVECTOR4 *)&moodLight.Diffuse,0.25f,0.25f,0.25f,1.f );
	Set( (D3DVECTOR4 *)&moodLight.Specular,0.75f,0.75f,0.75f,1.f );
	moodLight.Attenuation0 = 1.f;
	moodLight.Attenuation1 = 0.001f;
	moodLight.Attenuation2 = 0.001f;

	pNormalCubeMapLoRes = NULL;
	pNormalCubeMapHiRes = NULL;

	pRoughBumpMap = NULL;

	pStaticReflectionCubeMap = NULL;
	pGlowMap = NULL;


#ifdef INCLUDE_PLACEMENT_DOODAD	
	bPositionLookatMode = false;
	Set(&ptLookatPosition, 0.0f, 0.0f, 0.0f);
	placementDoodad.Init();
#endif
}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::Destruct()
{
#ifdef _SHIELD
    shieldMgr.UnInit();
#endif
    greenFog.UnInit();
    theRenderer.UnInit();
    theCamera.UnInit();
    vblob.UnInit();
    camController.UnInit();
#ifdef INCLUDE_PLACEMENT_DOODAD
	placementDoodad.UnInit();
#endif
}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::pause()
{
	bPaused = !bPaused;
}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::activate()
{
	bActive = !bActive;
}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::advanceTime(float dt,float cam_dt)
{
	if (dt > 1.0f) dt = 0.001f;	// cap after a breakpoint
	fTimeElapsed += dt;


	if(!bUserControlledIntensity)
	{
		if (fTimeElapsed < BLOB_ZERO_INTENSE_END_TIME)
		{
			fBaseBlobIntensity = 0.0f;
		}
		else
		{
			float t = (fTimeElapsed - BLOB_ZERO_INTENSE_END_TIME) * OO_MAX_INTENSITY_DELTA;
			t = 0.5f * t*t + 0.5f * t;
			fBaseBlobIntensity = DEMO_START_INTENSITY + t * (1.0f - DEMO_START_INTENSITY);
		}


		float pulses = sumIntensityPulses(fTimeElapsed);

		fBlobIntensity = fBaseBlobIntensity + pulses;

		float s = 0.5f*dt;
		fSmoothedBlobIntensity = (1.0f - s) * fSmoothedBlobIntensity + s * fBlobIntensity;

		fIIDT += dt * fBlobIntensity;
	}

#ifdef INCLUDE_INPUT
	else
	{
		// check for ramp up / down of blob intensity.
		static const float f_int_vel = 2.f;

		if( defaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER])
		{
			float fval = ((float)defaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER]) / 255.0f;
			fBlobIntensity -= (f_int_vel * cam_dt * fval);
			fBlobIntensity = max(0.f,fBlobIntensity);
		}

		if( defaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER])
		{
			float fval = ((float)defaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER]) / 255.0f;
			fBlobIntensity += (f_int_vel * cam_dt * fval);
			fBlobIntensity = min(4.f,fBlobIntensity);
		}
	}
	static const float lin_vel = 100.0f;
	static const float rot_vel = Pi*0.5f;

	if (!bCameraUnderControl)
	{
#ifdef INCLUDE_PLACEMENT_DOODAD	
		if( bPositionLookatMode )
		{
			const float move_vel = 0.6f;
			D3DVECTOR cam_pos;
			theCamera.getCameraPos(&cam_pos);
			float doodad_rad = Distance(ptLookatPosition, cam_pos);
			float move_right = defaultGamepad.fX1 * move_vel * cam_dt * doodad_rad;
			float move_up    = defaultGamepad.fY1 * move_vel * cam_dt * doodad_rad;

			float z_delta = 0.0f;
			float z_mul = 0.6f;
			if (bPaused)
			{
				float dead_banded = defaultGamepad.fY2;
				if (dead_banded < 0.0f)	dead_banded = min(0.0f, dead_banded + 0.3f);
				else					dead_banded = max(0.0f, dead_banded - 0.3f);
				z_delta += dead_banded * z_mul * cam_dt * doodad_rad;
			}
			else
			{
				z_delta += defaultGamepad.fY2 * z_mul * cam_dt * doodad_rad;
			}

			D3DVECTOR right_dir = *((D3DVECTOR*)(&theCamera.matCTW._11));
			D3DVECTOR up_dir    = *((D3DVECTOR*)(&theCamera.matCTW._21));
			D3DVECTOR z_dir     = *((D3DVECTOR*)(&theCamera.matCTW._31));

			// Moves around in plane, rather than in screen space.
			Set(&z_dir, 0.0f, 0.0f, 1.0f);
			Cross(z_dir, right_dir, &up_dir);


			AddScaled(&ptLookatPosition, right_dir, move_right);
			AddScaled(&ptLookatPosition, up_dir, move_up);
			AddScaled(&ptLookatPosition, z_dir, z_delta);
		}
		else
#endif
		{
			fCamTheta += defaultGamepad.fX1 * rot_vel * cam_dt;
			fCamPhi += defaultGamepad.fY1 * rot_vel * cam_dt;

			if (bPaused)
			{
				float dead_banded = defaultGamepad.fY2;
				if (dead_banded < 0.0f)	dead_banded = min(0.0f, dead_banded + 0.5f);
				else					dead_banded = max(0.0f, dead_banded - 0.5f);
				fCamRad -= dead_banded * lin_vel * cam_dt;
			}
			else
			{
				fCamRad -= defaultGamepad.fY2 * lin_vel * cam_dt;
			}
		}
	}

	if( defaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_A] )
	{
		bFogOn = !bFogOn;	
	}

	if( defaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_B] )
	{
		bSceneShadowsOn = !bSceneShadowsOn;
	}

	if( defaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_Y] )
	{
		if(++appSpeedId >= NUM_APP_SPEEDS)
		{
			appSpeedId = 0;
			bPaused = false;
		}
		else if(appSpeedId == NUM_APP_SPEEDS - 1)
			pause();
	}
	
	// Trace out the current camera position as a frogcam array entry.
	if( defaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_WHITE] )
	{
		camController.buttonPressed();
	}

	if( defaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_BLACK] )
	{
		bCameraUnderControl = !bCameraUnderControl;
		bs_swap(fCamRad, fSavedCamRad);
		bs_swap(fCamTheta, fSavedCamTheta);
		bs_swap(fCamPhi, fSavedCamPhi);
	}

	if( defaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_X] )
	{
		// Toggle blob intensity mode.
		bUserControlledIntensity = !bUserControlledIntensity;
	}



#ifdef INCLUDE_PLACEMENT_DOODAD	
	if( defaultGamepad.wPressedButtons & XINPUT_GAMEPAD_LEFT_THUMB )
	{
		bPositionLookatMode = !bPositionLookatMode;
	}
#endif



	if(bPaused)
	{
		float f_time_vel = 0.02f;
		float f_jog_time = defaultGamepad.fX2 * f_time_vel;
		if (fast_fabs(defaultGamepad.fX2) > 0.9f) f_jog_time *= 3.0f;

		fTimeElapsed += f_jog_time;
		fJogDeltaTime += f_jog_time;
		if(fTimeElapsed < 0.f)
		{
			fJogDeltaTime += 0.0f - fTimeElapsed;
			fTimeElapsed = 0.0f;
		}
		if(fTimeElapsed > DEMO_TOTAL_TIME )
		{
			fJogDeltaTime += (DEMO_TOTAL_TIME - 0.0001f) - fTimeElapsed;
			fTimeElapsed = DEMO_TOTAL_TIME - 0.0001f; 
		}
	}


#endif // INCLUDE_INPUT

	if(fTimeElapsed >= DEMO_TOTAL_TIME)
	{
		if(!bLoop)
		{
			return;
		}
		else
		{
#ifdef BOOTSOUND
		    // start boot sound again with animation restart
            put_fifo(1);
#endif
			fIIDT = 0.0f;
			
			if(!bUserControlledIntensity)
				fSmoothedBlobIntensity = fBlobIntensity = fBaseBlobIntensity = DEMO_START_INTENSITY;

            if (g_bShortVersion)
            {
                fTimeElapsed = 7.5f;
            }
            else
            {
	            fTimeElapsed = 0.0f;
            }
            
			if(!bUserControlledIntensity)
			{
				initIntensityPulses();
				vblob.restart();
#ifdef _SHIELD
				shieldMgr.restart();
#endif
				greenFog.restart();
				camController.pickPath(-1);
			}
		}
	}

	if (!bCameraUnderControl)
	{
		if(fCamPhi > Pi*0.5f) fCamPhi = Pi*0.5f;
		if(fCamPhi < -Pi*0.5f) fCamPhi = -Pi*0.5f;
		fCamRad = max(fCamRad,10.f);
	}

	// I need camera stuff here so that the fog renders at the new viewpoint.
	D3DVECTOR pos,look,up;
	D3DMATRIX matRot,matX,matZ;
	SetXRotation(fCamPhi,&matX);
	SetZRotation(fCamTheta,&matZ);
	MulMats(matX,matZ, &matRot);
	
	D3DVECTOR tmp;
	Set(&tmp,0.f,fCamRad,-10.f);
	Set(&look,0.f,0.f,0.f);
	Set(&up,0.f,0.f,1.f);


	bRenderGeom = true;
	bRenderSlash = false;

	Set(&look,0.f,0.f,0.f);
	Set(&up,0.f,0.f,1.f);

	if (bCameraUnderControl)
	{
		float fCamTime = (fTimeElapsed * fTimeElapsed / 6.0f)*.8f;
		fCamTime = fCamTime + .2f*(fTimeElapsed * fast_sin(min(3.14159265354f/2.f,fTimeElapsed * .2833f)));
		camController.getPosition(fCamTime, &pos, &look, &bRenderGeom, &bRenderSlash);

		// Need to set cam rad, theta, and phi so the fog looks right.
		fCamRad = Length(pos);
		float oo_rad = 1.0f / fCamRad;
		fCamPhi = fast_asin(pos.z * oo_rad);
		oo_rad = 1.0f / fast_sqrt(Square(pos.x) + Square(pos.y));
		// Avoid the poles!
		float old_theta = fCamTheta;
		fCamTheta = AngleFromSinCos(oo_rad * pos.y, oo_rad * pos.x);

		if ((fast_fabs(old_theta) < 1000.0f) && (fast_fabs(fCamTheta - old_theta) > Pi))
		{
			// Must rewrap, so that the fog doesn't skip.
			while (old_theta - Pi > fCamTheta) fCamTheta += 2.0f * Pi;
			while (old_theta + Pi < fCamTheta) fCamTheta -= 2.0f * Pi;
		}
	}
	else
	{
		D3DMATRIX matRot,matX,matZ;
		SetXRotation(fCamPhi,&matX);
		SetZRotation(fCamTheta,&matZ);
		MulMats(matX,matZ, &matRot);
		
		D3DVECTOR tmp;
		Set(&tmp,0.f,fCamRad,-10.f);

		TransformVector(tmp,matRot,&pos);


#ifdef INCLUDE_PLACEMENT_DOODAD	
		look = ptLookatPosition;
		Add(ptLookatPosition, pos, &pos);
#endif
	}

	theCamera.lookAt(pos,look,up);
	fCamRadBlob = Distance(vblob.getCenter(), pos);

	if (bRenderGeom)
	{
		sceneGeom.advanceTime(fTimeElapsed, dt);
		vblob.advanceTime(fTimeElapsed, dt);

		if(bSceneShadowsOn) 
			sceneGeom.updateShadows();
#ifdef _SHIELD	
		if(!bUserControlledIntensity)
			shieldMgr.advanceTime(fTimeElapsed, dt);
#endif

		if(bFogOn)
			greenFog.advanceTime(fTimeElapsed, dt);
	}
	
	if (bRenderSlash)
	{
		logoGeom.advanceTime(fTimeElapsed, dt);	
	}

}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::drawFrame()
{

	if( gpd3dDev->BeginScene() == D3D_OK )
	{
		gpd3dDev->Clear(0,NULL,
						D3DCLEAR_STENCIL | D3DCLEAR_ZBUFFER | D3DCLEAR_TARGET,
						0xff000000,
						1.f,
						0 );
		if (bRenderGeom)
		{
			if (getBlobIntensity() > 0.0f)
			{
				sceneGeom.render(bSceneShadowsOn,true);
			}
#ifdef _SHIELD
			shieldMgr.render(true);
#endif
			if (fTimeElapsed >= BLOB_STATIC_END_TIME) vblob.render();
#ifdef _SHIELD
			shieldMgr.render(false);
#endif


#ifdef INCLUDE_PLACEMENT_DOODAD	
			if (bPositionLookatMode)
			{
				placementDoodad.render(&ptLookatPosition, &theCamera.matWTC, &theCamera.matProj);
			}
#endif

		}

		bool b_render_fog = (bRenderGeom && bFogOn && ((getBlobIntensity() > 0.0f) || (fTimeElapsed < BLOB_STATIC_END_TIME)));
		
		if (bRenderSlash)
		{
			if (b_render_fog || bRenderGeom)
			{
				gpd3dDev->Clear(0,NULL,
								D3DCLEAR_STENCIL | D3DCLEAR_ZBUFFER,
								0xff000000,
								1.0f,
								0 );
			}
			
			const D3DMATRIX& xf_slash = camController.getSlashTransform();
			logoGeom.render(xf_slash);
		}

		if (b_render_fog)
		{
			greenFog.render(bRenderSlash);
		}

		
		gpd3dDev->EndScene();
		gpd3dDev->Present(NULL,NULL,NULL,NULL);
	}
}

///////////////////////////////////////////////////////////////////////////////
bool XBoxStartupApp::init(int width,int height)
{
	fIIDT = 0.0f;
	fSmoothedBlobIntensity = fBlobIntensity = fBaseBlobIntensity = DEMO_START_INTENSITY;
	initIntensityPulses();

	nWidth  = width;
	nHeight = height; 
		
	BEGIN_TIME;
	theRenderer.init(nWidth,nHeight);
	END_TIME;

	BEGIN_TIME;
	pNormalCubeMapHiRes = CreateNormalizationCubeMap(128);
	END_TIME;
	
	BEGIN_TIME;
	pNormalCubeMapLoRes = CreateNormalizationCubeMap(64);
	END_TIME;
	
	BEGIN_TIME;
	pRoughBumpMap = CreateIntensityTexture(128,true,1.f/512.f,512);
	END_TIME;

	BEGIN_TIME;
	pGlowMap = CreateGlowTexture(256,256,0xffffffff,0,12345);
	END_TIME;

	DWORD dwBumpDecl[] =
    {
        D3DVSD_STREAM( 0 ),
		D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),

		D3DVSD_STREAM( 1 ),
		D3DVSD_REG( 1, D3DVSDT_FLOAT2 ),
		D3DVSD_REG( 2, D3DVSDT_FLOAT3 ),     
		D3DVSD_REG( 3, D3DVSDT_FLOAT3 ),     
		D3DVSD_REG( 4, D3DVSDT_FLOAT3 ), 
		D3DVSD_END()
    };

	DWORD dwPhongDecl[] =
    {
        D3DVSD_STREAM( 0 ),
		D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),

		D3DVSD_STREAM( 1 ),
		D3DVSD_REG( 1, D3DVSDT_FLOAT3 ),     
		D3DVSD_REG( 2, D3DVSDT_FLOAT3 ),     
		D3DVSD_REG( 3, D3DVSDT_FLOAT3 ), 
		D3DVSD_END()
    };

	DWORD dwDepthDecl[] = 
	{
		D3DVSD_STREAM( 0 ),
		
		D3DVSD_REG( 0, D3DVSDT_FLOAT3 ),
		
		D3DVSD_END()
	};

	BEGIN_TIME;
#ifndef BINARY_RESOURCE
	dwVShader[st_Phong] = gApp.loadVertexShader("d:\\shaders\\scene_phong.xvu",dwPhongDecl);
	dwPShader[st_Phong] = gApp.loadPixelShader ("d:\\shaders\\scene_phong.xpu");

	dwVShader[st_Bump] = gApp.loadVertexShader("d:\\shaders\\scene_bump.xvu",dwBumpDecl);
	dwPShader[st_Bump] = gApp.loadPixelShader ("d:\\shaders\\scene_bump.xpu");

	dwVShader[st_Depth] = gApp.loadVertexShader("d:\\shaders\\scene_zr.xvu",dwDepthDecl);
	dwPShader[st_Depth] = gApp.loadPixelShader ("d:\\shaders\\scene_zr.xpu");
#else // BINARY_RESOURCE
	dwVShader[st_Phong] = gApp.loadVertexShader(g_scene_phong_xvu,dwPhongDecl);
	dwPShader[st_Phong] = gApp.loadPixelShader (g_scene_phong_xpu);

	dwVShader[st_Bump] = gApp.loadVertexShader(g_scene_bump_xvu,dwBumpDecl);
	dwPShader[st_Bump] = gApp.loadPixelShader (g_scene_bump_xpu);

	dwVShader[st_Depth] = gApp.loadVertexShader(g_scene_zr_xvu,dwDepthDecl);
	dwPShader[st_Depth] = gApp.loadPixelShader (g_scene_zr_xpu);
#endif // BINARY_RESOURCE
	END_TIME;

    // Set the camera up, the fog will want the correct start position.
	D3DVECTOR pos,look,up;
	D3DMATRIX matRot,matX,matZ;
	SetXRotation(fCamPhi,&matX);
	SetZRotation(fCamTheta,&matZ);
	MulMats(matX,matZ, &matRot);
	
	D3DVECTOR tmp;
	Set(&tmp,0.f,fCamRad,-10.f);

	TransformVector(tmp,matRot,&pos);

	Set(&look,0.f,0.f,0.f);
	Set(&up,0.f,0.f,1.f);

	theCamera.lookAt(pos,look,up);

	float f_aspect = (bWideScreen) ? 9.f/16.f : 3.f/4.f;
	theCamera.setProjection(Pi/4.f, f_aspect, 0.4f, 800.0f);

	BEGIN_TIME;
	sceneGeom.create();
	END_TIME;

	BEGIN_TIME;
	logoGeom.create();
	END_TIME;

	BEGIN_TIME;
	vblob.create();
	END_TIME;

	BEGIN_TIME;
#ifdef _SHIELD
	shieldMgr.create();
#endif
	END_TIME;

#ifdef INCLUDE_PLACEMENT_DOODAD
	BEGIN_TIME;
	placementDoodad.create();
	END_TIME;
#endif

	BEGIN_TIME;
	greenFog.create();
	END_TIME;

	BEGIN_TIME;
	pStaticReflectionCubeMap = CreateStaticReflectionCubeMap(256);
	END_TIME;

#ifdef INCLUDE_INPUT
    XInitDevices( dwNumInputDeviceTypes, inputDeviceTypes );
    XBInput_CreateGamepads( &pGamepad ); 
#endif // INCLUDE_INPUT

#ifndef STARTUPANIMATION
	dwLastFramecountTick = dwLastTick = GetTickCount();
#else // STARTUPANIMATION
	dwLastFramecountTick = dwLastTick = NtGetTickCount();
#endif // STARTUPANIMATION

#ifndef FINAL_BUILD
	numFrames = 0;
	numFramesTooSlow = 0;
	fSlowestFrame = 0.0f;
	fFastestFrame = 100.0f;
#endif

	
#ifndef STARTUPANIMATION
	float f_total_time = 0.f;
	for(int i = 0; i < g_TimeRecId; i++)
		f_total_time += fInitTimes[i];

#if DBG
	char buf[256];
	sprintf(buf,"Init time: %ff seconds\n",f_total_time);
	OutputDebugString(buf);
#endif

#endif

	return true;
}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::shutdown()
{
	sceneGeom.destroy();
	logoGeom.destroy();
	vblob.destroy();
#ifdef _SHIELD
	shieldMgr.destroy();
#endif
#ifdef INCLUDE_PLACEMENT_DOODAD
	placementDoodad.destroy();
#endif
	greenFog.destroy();

	pNormalCubeMapLoRes->Release();
	pNormalCubeMapHiRes->Release();

	pStaticReflectionCubeMap->Release();

	pRoughBumpMap->Release();

	pGlowMap->Release();

	gpd3dDev->DeleteVertexShader(dwVShader[st_Phong]);
	gpd3dDev->DeleteVertexShader(dwVShader[st_Bump]);
	gpd3dDev->DeleteVertexShader(dwVShader[st_Depth]);
	gpd3dDev->DeletePixelShader(dwPShader[st_Phong]);
	gpd3dDev->DeletePixelShader(dwPShader[st_Bump]);
	gpd3dDev->DeletePixelShader(dwPShader[st_Depth]);

#ifdef STARTUPANIMATION
    WaitOnMicrosoftLogo();
#endif // STARTUPANIMATION

	theRenderer.shutdown();
	bActive = false;
}
///////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
#include <d3d8perf.h>
#endif
extern "C" BOOL D3D__NullHardware;
///////////////////////////////////////////////////////////////////////////////


int XBoxStartupApp::run()
{
#ifdef _DEBUG
//D3DPERF_SetShowFrameRateInterval(10000);
#endif
#ifdef NULL_THE_HARDWARE
	D3D__NullHardware = TRUE;			// Set to true to test CPU framerate, no graphics operation will stall.
#endif

#ifdef BOOTSOUND
    //
    // start the boot sound
    //
    if (!g_bShortVersion)
    {
        BootSound_Start();
    }
#endif // BOOTSOUND

	for(;fTimeElapsed < DEMO_TOTAL_TIME;)
	{
		process();
	}

#ifdef BOOTSOUND
    if (!g_bShortVersion)
    {
        BootSound_Stop();
    }
#endif // BOOTSOUND

	return 0;
}
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::process()
{
#ifdef INCLUDE_INPUT
	processInput();
#endif // INCLUDE_INPUT

#ifndef STARTUPANIMATION
	DWORD time = GetTickCount();
#else // STARTUPANIMATION
	DWORD time = NtGetTickCount();
#endif // STARTUPANIMATION


	float fseconds_elapsed = ((float)(abs(dwLastTick - time))) * 0.001f;
	const float f_app_time_muls[NUM_APP_SPEEDS] = {1.f,0.5f,0.f};
	float last_jogdt = fJogDeltaTime;
	fJogDeltaTime = 0.0f;
	advanceTime(fseconds_elapsed * f_app_time_muls[appSpeedId] + last_jogdt, fseconds_elapsed);	

	drawFrame();


#ifndef FINAL_BUILD
	numFrames++;
	fSlowestFrame = max(fSlowestFrame, fseconds_elapsed);
	fFastestFrame = min(fFastestFrame, fseconds_elapsed);
	if (fseconds_elapsed > 1.0f / 30.0f) numFramesTooSlow++;

	if (FRAMECOUNT_PERIOD && (time > dwLastFramecountTick + FRAMECOUNT_PERIOD))
	{
		// Trace out the fps count.
		float fps = 1000.0f * ((float)numFrames) / ((float)(time-dwLastFramecountTick));

		char buf[512];
		sprintf(buf, "%6.2f fps, over %6.3fs [%6.3fs <-> %6.3fs], %3d of %3d frames were too slow.\n",
			fps, ((float)(time-dwLastFramecountTick))/1000.0f,
			fFastestFrame, fSlowestFrame, numFramesTooSlow, numFrames);
		OutputDebugString(buf);

		dwLastFramecountTick = time;
		numFrames = 0;
		numFramesTooSlow = 0;
		fSlowestFrame = 0.0f;
		fFastestFrame = 100.0f;
	}
#endif // FINAL_BUILD


	dwLastTick = time;
}

#ifndef BINARY_RESOURCE
///////////////////////////////////////////////////////////////////////////////
DWORD XBoxStartupApp::loadVertexShader(const TCHAR *pname,const DWORD *pdwDecl)
{
    HANDLE hFile = CreateFile( pname, GENERIC_READ, FILE_SHARE_READ, 
                               NULL, OPEN_EXISTING, 0, NULL );

    DWORD dwSize = GetFileSize( hFile, NULL );
    BYTE* pData  = (BYTE*)MemAlloc(sizeof(BYTE)*(dwSize+4));
    ZeroMemory( pData, dwSize+4 );

    DWORD dwBytesRead;
    ReadFile(hFile,pData,dwSize,&dwBytesRead,NULL);

	DWORD dwVertexShader;
    gpd3dDev->CreateVertexShader( pdwDecl, (const DWORD*)pData,&dwVertexShader, 0 );

    CloseHandle( hFile );
    MemFree(pData);
	
	return dwVertexShader;
}
///////////////////////////////////////////////////////////////////////////////
DWORD XBoxStartupApp::loadPixelShader(const TCHAR *pName)
{
	HANDLE hFile = CreateFile( pName, GENERIC_READ, FILE_SHARE_READ, 
                               NULL, OPEN_EXISTING, 0, NULL );
  
    D3DPIXELSHADERDEF_FILE psdf;
    DWORD                  dwBytesRead;
    ReadFile( hFile, &psdf, sizeof(D3DPIXELSHADERDEF_FILE), &dwBytesRead, NULL );
    CloseHandle( hFile );

	DWORD dwPixelShader;
    gpd3dDev->CreatePixelShader( &(psdf.Psd), &dwPixelShader );

	return dwPixelShader;
}
#else // BINARY_RESOURCE
///////////////////////////////////////////////////////////////////////////////
DWORD XBoxStartupApp::loadVertexShader(const BYTE *pb,const DWORD *pdwDecl)
{
	DWORD dwVertexShader;
    gpd3dDev->CreateVertexShader( pdwDecl, (const DWORD*)pb,&dwVertexShader, 0 );
	return dwVertexShader;
}
///////////////////////////////////////////////////////////////////////////////
DWORD XBoxStartupApp::loadPixelShader(const BYTE *pb)
{
    D3DPIXELSHADERDEF_FILE *ppsdf = (D3DPIXELSHADERDEF_FILE*)pb;
	DWORD dwPixelShader;
    gpd3dDev->CreatePixelShader( &ppsdf->Psd, &dwPixelShader );
	return dwPixelShader;
}
#endif // BINARY_RESOURCE

#ifdef INCLUDE_INPUT
///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::processInput()
{
	XBInput_GetInput( pGamepad );
    ZeroMemory( &defaultGamepad, sizeof(defaultGamepad) );
    for( DWORD i=0; i<4; i++ )
    {
		if( pGamepad[i].hDevice )
        {
			defaultGamepad.sThumbLX += pGamepad[i].sThumbLX;
            defaultGamepad.sThumbLY += pGamepad[i].sThumbLY;
            defaultGamepad.sThumbRX += pGamepad[i].sThumbRX;
            defaultGamepad.sThumbRY += pGamepad[i].sThumbRY;
            defaultGamepad.fX1      += pGamepad[i].fX1;
            defaultGamepad.fY1      += pGamepad[i].fY1;
            defaultGamepad.fX2      += pGamepad[i].fX2;
            defaultGamepad.fY2      += pGamepad[i].fY2;
            defaultGamepad.wButtons        |= pGamepad[i].wButtons;
            defaultGamepad.wPressedButtons |= pGamepad[i].wPressedButtons;
            defaultGamepad.wLastButtons    |= pGamepad[i].wLastButtons;

            for( DWORD b=0; b<8; b++ )
            {
				defaultGamepad.bAnalogButtons[b]        |= pGamepad[i].bAnalogButtons[b];
                defaultGamepad.bPressedAnalogButtons[b] |= pGamepad[i].bPressedAnalogButtons[b];
                defaultGamepad.bLastAnalogButtons[b]    |= pGamepad[i].bLastAnalogButtons[b];
            }
        }
	}
}
#endif // INCLUDE_INPUT

///////////////////////////////////////////////////////////////////////////////
void XBoxStartupApp::initIntensityPulses()
{
//MTS	char buf[512];
//MTS	sprintf(buf, "Intesity pulses:\n");
//MTS	OutputDebugString(buf);
	for (int i=0; i<NUM_PULSES; i++)
	{
		// x=center time, y=time radius of effect, z=intensity
		vPulses[i].x = ((float)(i+1))/((float)(NUM_PULSES+1)) + fRand11() * 0.03f;
		vPulses[i].x = 1.0f - (0.5f*Square(vPulses[i].x) + 0.5f*vPulses[i].x);

		float temp = Square(1.2f - vPulses[i].x) * (gApp.fRand01() + 2.0f) * 0.05f;
        vPulses[i].y = max(0.1f, temp);
		vPulses[i].z = (vPulses[i].x + 0.5f) * (gApp.fRand01() + 1.0f) * 0.2f;

		vPulses[i].x = vPulses[i].x * BLOB_PULSE_ELAPSED + BLOB_PULSE_START;
		vPulses[i].x = max(vPulses[i].x, BLOB_PULSE_START + vPulses[i].y);
//MTS		sprintf(buf, "    %f, %f, %f\n", vPulses[i].x, vPulses[i].y, vPulses[i].z);
//MTS		OutputDebugString(buf);
	}
	vPulses[NUM_PULSES-1].x = BLOB_PULSE_START + vPulses[NUM_PULSES-1].y;
	vPulses[NUM_PULSES-1].z *= 3.0f;
//MTS	vPulses[NUM_PULSES-1].x = -10.0f;
}
///////////////////////////////////////////////////////////////////////////////
float XBoxStartupApp::sumIntensityPulses(float et)
{
	float sum = 0.0f;
	for (int i=0; i<NUM_PULSES; i++)
	{
		// x=center time, y=time radius of effect, z=intensity
		float fdt = fast_fabs(et-vPulses[i].x);
		if (fdt > vPulses[i].y) continue;

		float s,c;
		SinCos(fdt * 0.5f * Pi / vPulses[i].y,&s,&c);
		sum += vPulses[i].z * c;
	}
//MTS	char buf[512];
//MTS	sprintf(buf, "Elapsed time = %f, pulse sum = %f, total sum = %f\n", et, sum, sum + fBaseBlobIntensity);
//MTS	OutputDebugString(buf);
	return sum;
}
///////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\ani2\xbs_math.h ===
//
//	xbs_math.h
//
///////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2001, Pipeworks Software Inc.
//				All rights reserved
#ifndef __XBS_MATH_H__
#define __XBS_MATH_H__

struct D3DVECTOR4 : public _D3DVECTOR
{
	float w;
};

const float Pi = 3.1415926535897932384626433832795028841971693993751058209f;
const float DegreeToRad = 0.017453292519943295769236907684883f; // (Pi / 180)
const float RadToDegree = 57.295779513082320876798154814114f; // (180 / Pi)

inline void SetLookAt(const D3DVECTOR &cam, const D3DVECTOR &look, const D3DVECTOR &up, D3DMATRIX *pres);
inline void SetProjection(float fov,float aspect, float near_plane, float far_plane, D3DMATRIX *pres);
inline void SetInverse(const D3DMATRIX &mat, D3DMATRIX *pres);
inline void SetTranspose(const D3DMATRIX &mat, D3DMATRIX *pres);
inline void SetIdentity(D3DMATRIX *pres);
inline void SetXRotation(float r,D3DMATRIX *pres);
inline void SetYRotation(float r,D3DMATRIX *pres);
inline void SetZRotation(float r,D3DMATRIX *pres);
inline void SetXYZRotation(float x,float y,float z, D3DMATRIX *pres);
inline void SetRotationFromLHQuat(const D3DVECTOR4 &quat,D3DMATRIX *pres); 
inline void SetRotationFromRHQuat(const D3DVECTOR4 &quat,D3DMATRIX *pres); 
inline void SetScale(float x,float y,float z,D3DMATRIX *pres);
inline void SetCubeMapView(DWORD dwFace, const D3DVECTOR &pos,D3DMATRIX *pres);

inline void TransformPoint(const D3DVECTOR &pt,const D3DMATRIX &mat, D3DVECTOR *pres);
inline void TransformVector(const D3DVECTOR &v,const D3DMATRIX &mat, D3DVECTOR *pres);
inline void TransformPoint(const D3DVECTOR4 &pt,const D3DMATRIX &mat, D3DVECTOR4 *pres);


inline void MulMats(const D3DMATRIX &a, const D3DMATRIX &b,D3DMATRIX *pres);
inline void ConcatMats(const D3DMATRIX &a, const D3DMATRIX &b, D3DMATRIX *pres);

inline float Dot(const D3DVECTOR &a, const D3DVECTOR &b);
inline float Length2(const D3DVECTOR &v);
inline float Length(const D3DVECTOR &v);
inline float Distance2(const D3DVECTOR &lhs, const D3DVECTOR &rhs);
inline float Distance(const D3DVECTOR &lhs, const D3DVECTOR &rhs);
inline void  Normalize(D3DVECTOR *pres);
inline void  Cross(const D3DVECTOR &a, const D3DVECTOR &b, D3DVECTOR *pres);
inline void  Scale(D3DVECTOR *pres,float s);
inline void  Set(D3DVECTOR *pres,float x,float y,float z);
inline void  Set(D3DVECTOR4 *pres,float x,float y,float z,float w);
inline void  Sub(const D3DVECTOR &lhs, const D3DVECTOR &rhs, D3DVECTOR *pres);
inline void  Add(const D3DVECTOR &a, const D3DVECTOR &b, D3DVECTOR *pres);
inline void  SetQuatFromAxis(const D3DVECTOR &axis, float angle,D3DVECTOR4 *pres);

inline float DotQuats(const D3DVECTOR4 &q0,const D3DVECTOR4 &q1);
inline void  SlerpQuats(const D3DVECTOR4 &q0,const D3DVECTOR4 &q1,float t,D3DVECTOR4 *pres);
inline void  NormalizeQuat(D3DVECTOR4 *pres);

inline bool  IsEq(float a,float b);
inline bool  PtsEq(const D3DVECTOR &a,const D3DVECTOR &b);

inline void  AddScaled(D3DVECTOR* ptarget, const D3DVECTOR& src, float scale);
inline float QuickLength(const D3DVECTOR& vec);
inline void  QuickNormalize(D3DVECTOR* p_vec);	// left unchanged if the length is already small


inline void SinCos(const float &a, float *ps, float *pc);
inline float AngleFromSinCos(const float &s, const float &c);


inline void bs_swap(float& a, float& b);
inline void bs_swap(int& a, int& b);

inline float Square(float a) { return a*a; }


#include "xbs_math_inl.h"


#endif // __XBS_MATH_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\av\avp.h ===
/*--
Copyright (c) Microsoft Corporation

Module Name:

    avp.h

Abstract:

    This module contains the private data structures and procedure
    prototypes to identify AV packs and program TV encoder

--*/

#ifndef _AVP_H
#define _AVP_H

#include "ntos.h"
#include <av.h>
#include <smcdef.h>
#include <xtl.h>
#include "xboxp.h"
#include "xconfig.h"

#include "nv_ref_2a.h"
#include "nv_ref_plus.h"

#define DEFINE_REGISTERS

#include <avmode.h>

//
// I2C constants
//

#define I2C_PORT_PRIMARY            0
#define I2C_PORT_SECONDARY          1

#define I2C_SRCK                    0x20    // Serial Clock write
#define I2C_SRD                     0x10    // Serial Data  write
#define I2C_SRCK_IN                 0x04    // Serial Clock read
#define I2C_SRD_IN                  0x08    // Serial Data  read
#define I2C_ENABLE                  0x01    // Enable Serial Port Function

VOID
AvpReadDeviceReg(
    PVOID RegisterBase,
    UCHAR SMBaddr,
    UCHAR Reg,
    UCHAR* ReadData
    );

UCHAR
AvpWriteDeviceReg(
    PVOID RegisterBase,
    UCHAR SMBaddr,
    UCHAR Reg,
    UCHAR WriteValue
    );

VOID
AvpDelay(
    PVOID RegisterBase,
    ULONG nanosec
    );

#if DBG

extern ULONG AvpDump;

#endif 

//
// Macros/functions to access hardware registers
//

FORCEINLINE ULONG
REG_RD32(VOID* Ptr, ULONG Addr)
{
    return *((volatile ULONG*)((UCHAR*)(Ptr) + (Addr)));
}

FORCEINLINE VOID
REG_WR32(VOID* Ptr, ULONG Addr, ULONG Val)
{
    *((volatile ULONG*)((UCHAR*)(Ptr) + (Addr))) = (ULONG)(Val);

#if DBG
    if (AvpDump)
    {
        DbgPrint("%08X = %08X\n", Addr, Val);
    }
#endif
}

FORCEINLINE VOID
REG_OR32(VOID* Ptr, ULONG Addr, ULONG Val)
{
    ULONG Value;
    
#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    Value = REG_RD32(Ptr, Addr);
    REG_WR32(Ptr, Addr, Value | Val);

#if DBG
    AvpDump = Store;
    if (AvpDump)
    {
        DbgPrint("%08X = %08X (read modify write)\n", Addr, Val);
    }
#endif
}

FORCEINLINE UCHAR
REG_RD08(VOID* Ptr, ULONG Addr)
{
    return *((volatile UCHAR*)((UCHAR*)(Ptr) + (Addr)));
}

FORCEINLINE VOID
REG_WR08(VOID* Ptr, ULONG Addr, UCHAR Val)
{
    *((volatile UCHAR*)((UCHAR*)(Ptr) + (Addr))) = (UCHAR)(Val);

#if DBG
    if (AvpDump)
    {
        DbgPrint("%08X = %08X\n", Addr, Val);
    }
#endif
}

#define REG_RD_DRF(Ptr,d,r,f)       (((REG_RD32(Ptr,NV ## d ## r))>>DRF_SHIFT(NV ## d ## r ## f))&DRF_MASK(NV ## d ## r ## f))

#define REG_WR_DRF_NUM(Ptr,d,r,f,n) REG_WR32(Ptr, NV ## d ## r, DRF_NUM(d,r,f,n))
#define REG_WR_DRF_DEF(Ptr,d,r,f,c) REG_WR32(Ptr, NV ## d ## r, DRF_DEF(d,r,f,c))
#define FLD_WR_DRF_NUM(Ptr,d,r,f,n) REG_WR32(Ptr, NV##d##r,(REG_RD32(Ptr, NV##d##r)&~(DRF_MASK(NV##d##r##f)<<DRF_SHIFT(NV##d##r##f)))|DRF_NUM(d,r,f,n))
#define FLD_WR_DRF_DEF(Ptr,d,r,f,c) REG_WR32(Ptr, NV##d##r,(REG_RD32(Ptr, NV##d##r)&~(DRF_MASK(NV##d##r##f)<<DRF_SHIFT(NV##d##r##f)))|DRF_DEF(d,r,f,c))

FORCEINLINE VOID
CRTC_WR(VOID* Ptr, UCHAR i, UCHAR d)
{
#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    REG_WR08(Ptr, NV_PRMCIO_CRX__COLOR, i);
    REG_WR08(Ptr, NV_PRMCIO_CR__COLOR, d);

#if DBG
    AvpDump = Store;
    if (AvpDump)
    {
        DbgPrint("CR%02X = %02X\n", i, d);
    }
#endif
}

FORCEINLINE UCHAR
CRTC_RD(VOID* Ptr, UCHAR i)            
{
    UCHAR Value;

#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    REG_WR08(Ptr, NV_PRMCIO_CRX__COLOR, i);
    Value = REG_RD08(Ptr, NV_PRMCIO_CR__COLOR);

#if DBG
    AvpDump = Store;
#endif

    return Value;
}

FORCEINLINE UCHAR
SMB_RD(VOID * Ptr, UCHAR Reg)
{
    ULONG Value;

#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    HalReadSMBusByte(TV_ENCODER_ID, Reg, &Value);

#if DBG
    AvpDump = Store;
#endif

    return (UCHAR)Value;
}

FORCEINLINE VOID
SMB_WR(VOID *Ptr, UCHAR Reg, UCHAR Val)
{
#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    HalWriteSMBusByte(TV_ENCODER_ID, Reg, Val);

#if DBG
    AvpDump = Store;
    if (AvpDump)
    {
        DbgPrint("TV%02X = %02X\n", Reg, Val);
    }
#endif
}

FORCEINLINE USHORT
SMB_RDW(VOID * Ptr, UCHAR Reg)
{
    ULONG Value;

#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    HalReadSMBusWord(TV_ENCODER_ID, Reg, &Value);

#if DBG
    AvpDump = Store;
#endif

    return (USHORT)Value;
}

FORCEINLINE VOID
SMB_WRW(VOID *Ptr, UCHAR Reg, USHORT Val)
{
#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    HalWriteSMBusWord(TV_ENCODER_ID, Reg, Val);

#if DBG
    AvpDump = Store;
    if (AvpDump)
    {
        DbgPrint("TV%04X = %04X\n", Reg, Val);
    }
#endif
}


FORCEINLINE VOID
SRX_WR(VOID *Ptr, UCHAR i, UCHAR d)            
{
#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    REG_WR08(Ptr, NV_PRMVIO_SRX, i);
    REG_WR08(Ptr, NV_PRMVIO_SR_RESET, (d));

#if DBG
    AvpDump = Store;
    if (AvpDump)
    {
        DbgPrint("SR%02X = %02X\n", i, d);
    }
#endif
}

FORCEINLINE VOID
GRX_WR(VOID *Ptr, UCHAR i, UCHAR d)            
{
#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    REG_WR08(Ptr, NV_PRMVIO_GRX, i);
    REG_WR08(Ptr, NV_PRMVIO_GX_SR, (d));

#if DBG
    AvpDump = Store;
    if (AvpDump)
    {
        DbgPrint("GR%02X = %02X\n", i, d);
    }
#endif
}

FORCEINLINE VOID
ARX_WR(VOID *Ptr, UCHAR i, UCHAR d)            
{
#if DBG
    ULONG Store = AvpDump;
    AvpDump = FALSE;
#endif

    REG_WR08(Ptr, NV_PRMCIO_ARX, i);
    REG_WR08(Ptr, NV_PRMCIO_ARX, (d));

#if DBG
    AvpDump = Store;
    if (AvpDump)
    {
        DbgPrint("AR%02X = %02X\n", i, d);
    }
#endif
}

#if DBG
#define AvDbgPrint(x)               DbgPrint x
#else
#define AvDbgPrint(x)
#endif

#endif // _AVP_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\av\modeset.c ===
/*++

Copyright (c) Microsoft Corporation

Module Name:

    modeset.c

Abstract:

    Programs the CRTC to stream the frame buffer to the tv encoder.

--*/

#include "avp.h"
#include "xpcicfg.h"

#if DBG
ULONG AvpDump;
#endif

DECLSPEC_STICKY ULONG AvpCurrentMode;
ULONG AvpMacrovisionMode;
ULONG AvpCGMS;
ULONG AvpCapabilities;

//
// Address for the frame saved across reboots and mode changes
//
DECLSPEC_STICKY PVOID AvpSavedDataAddress;

// 
// Supported frame buffer modes.
//

#define D3DFMT_LIN_A1R5G5B5   0x00000010
#define D3DFMT_LIN_X1R5G5B5   0x0000001C
#define D3DFMT_LIN_R5G6B5     0x00000011
#define D3DFMT_LIN_A8R8G8B8   0x00000012
#define D3DFMT_LIN_X8R8G8B8   0x0000001E

ULONG
AvpCalcWSSCRC(
    IN  ULONG Value
    )
/*++

Routine Description:

    Sets various encoder options.

Arguments:

    Value - the 20 bit number to calculate CRC for

Return Value:

    The value plus the proper CRC

--*/
{
    ULONG CRC;    
    ULONG i, lsb, msb;

    CRC = 0x3F;    

    // This can ultimately be done more efficiently, but why?

    for (i = 0; i < 14; i++)
    {
        lsb = (CRC & 0x01) ^ ((Value >> i) & 0x01);
        msb = ((CRC >> 5) & 0x01) ^ lsb;

        CRC  = (CRC >> 1) & 0x0F;
        CRC |= msb << 4;
        CRC |= lsb << 5;
    }

    return Value | (CRC << 14);
}

VOID
AvpSetWSSBits(
    IN  PVOID RegisterBase
    )
/*++

Routine Description:

    Uses the current mode and macrovision state to correctly
    set the WSS and CGMS bits.

Arguments:

    RegisterBase - base address of the gpu hw registers

Return Value:

    None

--*/
{
    ULONG OutputMode;
    ULONG WSS;
    
    OutputMode = AvpCurrentMode & AV_MODE_OUT_MASK;

    WSS = 0;

    if (OutputMode == AV_MODE_OUT_480SDTV)
    {
        if (AvpCurrentMode & AV_MODE_FLAGS_WSS)
        {
            WSS |= 0x00000001;
        }

        WSS |= AvpCGMS << 6;
        WSS |= (AvpMacrovisionMode & 0x01) << 9;
        WSS |= (AvpMacrovisionMode & 0x02) << 7;

        WSS = AvpCalcWSSCRC(WSS);
    }

    // 525 should be 576
    else if (OutputMode == AV_MODE_OUT_525SDTV)
    {
        if (AvpCurrentMode & AV_MODE_FLAGS_WSS)
        {
            WSS |= 0x00000007;
        }
        else
        {
            WSS |= 0x00000008;
        }

        WSS |= AvpCGMS << 12;
    }

    // Do nothing.
    else
    {
        return;
    }

#ifdef FOCUS

    // Set the registers.
    SMB_WR(RegisterBase, 0x85, (UCHAR)((WSS & 0x0F)));
    SMB_WR(RegisterBase, 0x84, (UCHAR)((WSS >> 4) & 0xFF));
    SMB_WR(RegisterBase, 0x83, (UCHAR)((WSS >> 12) & 0xFF));

    SMB_WR(RegisterBase, 0x88, (UCHAR)((WSS & 0x0F)));
    SMB_WR(RegisterBase, 0x87, (UCHAR)((WSS >> 4) & 0xFF));
    SMB_WR(RegisterBase, 0x86, (UCHAR)((WSS >> 12) & 0xFF));

#else !FOCUS

    // Set the registers.
    SMB_WR(RegisterBase, 0x60, (UCHAR)(0xC0 | (WSS & 0x0F)));
    SMB_WR(RegisterBase, 0x62, (UCHAR)((WSS >> 4) & 0xFF));
    SMB_WR(RegisterBase, 0x64, (UCHAR)((WSS >> 12) & 0xFF));

#endif !FOCUS
}

VOID
AvpEnableSCART(
    IN  PVOID RegisterBase,
    IN  ULONG iTV
    )
/*++

Routine Description:

    Do all of the work to enable SCART, assuming that 
    it has already been set up in the mode-set code.

Arguments:

    RegisterBase - base address of the gpu hw registers

    iTV - tv encoder table index.

Return Value:

    None

--*/
{
#ifdef FOCUS

    const UCHAR *pByte, *pByteMax;
    ULONG i;
    UCHAR Data;    
    
    pByte    = AvpFocusRGBEnable[2];
    pByteMax = pByte + sizeof(AvpFocusRGBEnable[0]);

    for (i = 0; pByte < pByteMax; pByte++, i++)
    {
        Data = SMB_RD(RegisterBase, AvpFocusRGBEnable[0][i]);

        Data &= ~AvpFocusRGBEnable[1][i];

        SMB_WR(RegisterBase, AvpFocusRGBEnable[0][i], Data | *pByte);
    }

#else

    const UCHAR *pByte, *pByteMax;
    ULONG i;

    pByte    = AvpSCARTEnable[iTV];
    pByteMax = pByte + sizeof(AvpSCARTEnable[0]);

    for (i = 0; pByte < pByteMax; pByte++, i++)
    {
        SMB_WR(RegisterBase, AvpSCARTEnable[0][i], *pByte);
    }

#endif
}

//****************************************************************************
//
// Mode set code.
//
//****************************************************************************

ULONG
AvSetDisplayMode(
    IN  PVOID RegisterBase,
    IN  ULONG Step,
    IN  ULONG Mode,                   // mode from the AV_MODE list (avmode.h)
    IN  ULONG Format,                 // D3DFORMAT
    IN  ULONG Pitch,
    IN  ULONG FrameBuffer
    )
/*++

Routine Description:

    Initializes the CRTC to stream the framebuffer to the 
    tv encoder.

Arguments:

    RegisterBase - base address of the gpu hw registers

    Step - what step we're currently doing in the mode-set process

    Mode - the AV_PIPELINE mode to initialize

    Format - format of the frame buffer

    Pitch - the pitch of the frame buffer

    FrameBuffer - physical address of the frame buffer

Return Value:

    None

--*/
{
    ULONG GeneralControl;
    ULONG Value;
    ULONG i;
    ULONG LgsValue;

    UCHAR Data;
    UCHAR Register;

    const UCHAR *pByte;
    const UCHAR *pByteMax;

    const ULONG *pLong;
    const ULONG *pLongMax;

    UCHAR CR28Depth;
    UCHAR CR13Value;

    ULONG OutputMode;
    ULONG iRegister;
    ULONG iCRTC;
    ULONG iTV;

    UCHAR DACs;

    USHORT FocusValue;
    NTSTATUS Status;

    // 
    // Decode the mode.
    //

    // If the mode is zero then we just set this to NTSC and turn
    // the DACs off.
    //
    if (Mode == AV_MODE_OFF)
    {
        Mode = AV_MODE_640x480_TO_NTSC_M_YC
                | AV_MODE_FLAGS_DACA_DISABLE
                | AV_MODE_FLAGS_DACB_DISABLE
                | AV_MODE_FLAGS_DACC_DISABLE
                | AV_MODE_FLAGS_DACD_DISABLE;
    }

    OutputMode = Mode & AV_MODE_OUT_MASK;

    iRegister = (Mode & 0x00FF0000) >> 16;
    iCRTC     = (Mode & 0x0000FF00) >> 8;
    iTV       = (Mode & 0x0000007F);

    DACs      = (UCHAR)((Mode & 0x0F000000) >> 24);

    //
    // Get the format-specific parameters.
    //

    switch(Format)
    {
    case D3DFMT_LIN_A1R5G5B5:
    case D3DFMT_LIN_X1R5G5B5:
        GeneralControl = 0x00100030;
        CR28Depth = 2;
        break;

    case D3DFMT_LIN_R5G6B5:
        GeneralControl = 0x00101030;
        CR28Depth = 2;
        break;

    case D3DFMT_LIN_A8R8G8B8:
    case D3DFMT_LIN_X8R8G8B8:
        GeneralControl = 0x00100030;
        CR28Depth = 3;
        break;
    }

    // Pitch is always measured in bytes.
    Pitch /= 8;

    //
    // Handle format-only changes, very little has to be munged
    // for this case.
    //

    if (AvpCurrentMode == Mode)
    {
        ASSERT(Step == 0);

        // Reset the general control register.
        REG_WR32(RegisterBase, NV_PRAMDAC_GENERAL_CONTROL, GeneralControl);

        // Unlock the CRTC
        CRTC_WR(RegisterBase, NV_CIO_SR_LOCK_INDEX, NV_CIO_SR_UNLOCK_RW_VALUE);

        // Set the pitch.
        CRTC_WR(RegisterBase, 0x13, (UCHAR)(Pitch & 0xFF));
        CRTC_WR(RegisterBase, 0x19, (UCHAR)((Pitch & 0x700) >> 3));

        // Slave the CRTC to the encoder with the proper color depth.
        CRTC_WR(RegisterBase, 0x28, 0x80 | CR28Depth);

        // Set the frame buffer pointer.
        REG_WR32(RegisterBase, NV_PCRTC_START, FrameBuffer);

        // Make sure the flicker filter and luma filter gets reset to their
        // default values.
        //
        AvSendTVEncoderOption(RegisterBase,
                              AV_OPTION_FLICKER_FILTER,
                              5,
                              NULL);

        AvSendTVEncoderOption(RegisterBase,
                              AV_OPTION_ENABLE_LUMA_FILTER,
                              FALSE,
                              NULL);

        AvpCurrentMode = Mode;
        return 0;
    }

    // 
    // Do a full mode change
    //

    else
    {
        ASSERT(Step == 0);

        // Use the hardware to disable the DACs.
        _outp(XPCICFG_LPCBRIDGE_IO_REGISTER_BASE_0 + 0xD3, 0x5);

        //
        // Wait for any previous lightgun changes have been processed by the
        // hardware before making any other changes.
        //

        do
        {
            LgsValue = REG_RD32(RegisterBase, NV_PRAMDAC_LGS_TRANSFER);
        }
        while (!(LgsValue & 0x01) != !(LgsValue & 0x10));

        //
        // Unlock the CRTC and the tv encoder
        //

        CRTC_WR(RegisterBase, 0x1F, 0x57);
        CRTC_WR(RegisterBase, 0x21, 0xFF);

        // Unslave the CRTC from the tv encoder clock for now.
        CRTC_WR(RegisterBase, 0x28, 0x00);

        // Disable pclk stalling.
        REG_WR32(RegisterBase, NV_PRAMDAC_FP_DEBUG_0, 0x21121111);

#ifndef FOCUS

        // Do a reset and turn off dacs.
        SMB_WR(RegisterBase, 0xBA, 0x80);
        SMB_WR(RegisterBase, 0xBA, 0x3F);

        // Enable tv encoder register munging.
        SMB_WR(RegisterBase, 0x6C, 0x46);

#endif

        // Wait 1 microsecond
        KeStallExecutionProcessor(1);

#ifndef FOCUS

        // Reset the timing.
        SMB_WR(RegisterBase, 0x6C, 0xC6);

#endif

        // 
        // Program the TV encoder
        //

        // !!! PERF we can write runs of registers more efficiently.    
        if (OutputMode == AV_MODE_OUT_HDTV)
        {

            pByte    = AvpHDTVRegisters[iTV];
            pByteMax = pByte + sizeof(AvpHDTVRegisters[0]);

            for (i = 0; pByte < pByteMax; pByte++, i++)
            {
                SMB_WR(RegisterBase, AvpHDTVRegisters[0][i], *pByte);
            }
        }
        else
        {

#ifndef FOCUS

            pByte    = AvpCommonTVRegisters[1];
            pByteMax = pByte + sizeof(AvpCommonTVRegisters[0]);

            for (i = 0; pByte < pByteMax; pByte++, i++)
            {
                SMB_WR(RegisterBase, AvpCommonTVRegisters[0][i], *pByte);
            }

#endif !FOCUS

            pByte    = AvpTVRegisters[iTV];
            pByteMax = pByte + sizeof(AvpTVRegisters[0]);

            for (i = 0; pByte < pByteMax; pByte++, i++)
            {
                SMB_WR(RegisterBase, AvpTVRegisters[0][i], *pByte);
            }

            // Hack for NTSC-M and NTSC-J YPrPb outputs.
            if (XboxGameRegion == XC_GAME_REGION_JAPAN && (iTV == 0xD || iTV == 0xE || iTV == 0x12))
            {
#ifdef FOCUS

                SMB_WRW(RegisterBase, 0x4E, 0x013C);

#else !FOCUS

                SMB_WR(RegisterBase, 0xA2, 0x08);
                SMB_WR(RegisterBase, 0xA4, 0xF0);
                SMB_WR(RegisterBase, 0xAC, 0x9A);

#endif !FOCUS

            }
        }

        // Enable SCART
        if (Mode & AV_MODE_FLAGS_SCART)
        {
            // Twiddle the other registers.
            AvpEnableSCART(RegisterBase, iTV);
        }

        // Always set the SCART aspect ratio signal because it may be
        // handy to have for future AV packs.
        //
        _outp(XPCICFG_LPCBRIDGE_IO_REGISTER_BASE_0 + 0xD6, 
              (Mode & AV_MODE_FLAGS_WSS) ? 0x5 : 0x4);

        // We are now allowed to always have RGB output on...so just
        // set this pin and leave it.
        //
        _outp(XPCICFG_LPCBRIDGE_IO_REGISTER_BASE_0 + 0xD8, 0x4);

        //
        // Set up the RAMDAC to stream from the frame buffer.
        //

        // Set up the clocks to always use the tv-encoder as the 
        // source of the pclk and to divice pclk by 2 for the 
        // vclk.
        //
        REG_OR32(RegisterBase, NV_PRAMDAC_PLL_COEFF_SELECT, 0x10020000);

        // Unlock the VGA registers.
        REG_WR08(RegisterBase, NV_PRMVIO_VSE2, 0x01);

        // Set random output bits.
        REG_WR08(RegisterBase, NV_PRMVIO_MISC__WRITE, 0xE3);

        // Set up the general control register.  This varies depending on
        // the frame buffer format.
        //
        // The interesting bits:
        //
        //     5: 4 - 3 = PIXMIX bit is ignored
        //    12:12 - Selects between 5-5-5 (off) and 5-6-5 (on)
        //    16:16 - BLK_PEDSTL ON (??)
        //
        REG_WR32(RegisterBase, NV_PRAMDAC_GENERAL_CONTROL, GeneralControl);

        pLong    = AvpRegisters[iRegister];    
        pLongMax = pLong + sizeof(AvpRegisters[0]) / sizeof(ULONG);
    
        // Set the rest.
        for (i = 0; pLong < pLongMax; pLong++, i++)
        {
            REG_WR32(RegisterBase, AvpRegisters[0][i], *pLong);
        }

        // SCART shovels its output in RGB mode.
        if (Mode & AV_MODE_FLAGS_SCART)
        {
            REG_WR32(RegisterBase, 0x680630, 0);  
            REG_WR32(RegisterBase, 0x6808C4, 0);  
            REG_WR32(RegisterBase, 0x68084C, 0);  
        }

        //
        // Set the initial VGA registers.
        //

        // Write the SRX registers.
        pByte    = AvpSRXRegisters;
        pByteMax = pByte + sizeof(AvpSRXRegisters);

        for (i = 0; pByte < pByteMax; pByte++, i++)
        {
            SRX_WR(RegisterBase, (UCHAR)i, *pByte);
        }

        // Write the GRX registers
        pByte    = AvpGRXRegisters;
        pByteMax = pByte + sizeof(AvpGRXRegisters);

        for (i = 0; pByte < pByteMax; pByte++, i++)
        {
            GRX_WR(RegisterBase, (UCHAR)i, *pByte);
        }

        // Write the ARX registers.  This will cause the screen to blank
        // until the registers have all been written.
        //
        REG_RD08(RegisterBase, NV_PRMCIO_INP0__COLOR);

        pByte    = AvpARXRegisters;
        pByteMax = pByte + sizeof(AvpARXRegisters);

        for (i = 0; pByte < pByteMax; pByte++, i++)
        {
            ARX_WR(RegisterBase, (UCHAR)i, *pByte);
        }

        // Unblank the screen.
        REG_WR08(RegisterBase, NV_PRMCIO_ARX, 0x20); 

        //
        // Program the CRTC
        //

        // Unlock the rest of the CRTC.
        CRTC_WR(RegisterBase, 0x11, 0x00);

        pByte    = AvpCRTCRegisters[iCRTC];
        pByteMax = pByte + sizeof(AvpCRTCRegisters[0]);

        for (i = 0; pByte < pByteMax; pByte++, i++)
        {
            Register = AvpCRTCRegisters[0][i];
            Data = *pByte;

            if (Register == 0x13)
            {
                Data = (UCHAR)(Pitch & 0xFF);
            }
            else if (Register == 0x19)
            {
                Data |= (UCHAR)((Pitch & 0x700) >> 3);
            }
            else if (Register == 0x25)
            {
                Data |= (UCHAR)((Pitch & 0x800) >> 6);
            }

            CRTC_WR(RegisterBase, AvpCRTCRegisters[0][i], Data);
        }

        //
        // Commit the light gun changes.
        //

        REG_WR32(RegisterBase, NV_PRAMDAC_LGS_TRANSFER, !(LgsValue & 0x01) & 0x01);

        //
        // Sync up the CRTC with the tv encoder.
        //

        // Slave the CRTC to the encoder.
        CRTC_WR(RegisterBase, 0x28, 0x80 | CR28Depth);

        // Wait a few lines until everything gets in sync.
        for (i = 0; i < 3; i++)
        {
            while ((REG_RD32(RegisterBase, NV_PRMCIO_INP0__COLOR) & 0x08) == 0x08)
                ;

            while ((REG_RD32(RegisterBase, NV_PRMCIO_INP0__COLOR) & 0x08) == 0x00)
                ;
        }

        // Set FP_DEBUG_0 which will also enable pclk stalling.
        REG_WR32(RegisterBase, NV_PRAMDAC_FP_DEBUG_0, AvpFpDebug0[iRegister]);

        //
        // Afterglow
        //

        // Wait 1 microsecond
        KeStallExecutionProcessor(1);

#ifndef FOCUS

        // Reset the timing.
        Data = SMB_RD(RegisterBase, 0x6C);   
        SMB_WR(RegisterBase, 0x6C, Data | 0x80);

        // Enable the DACs.
        SMB_WR(RegisterBase, 0xBA, 0x20 | DACs);

#endif

        // Set the frame buffer pointer.
        REG_WR32(RegisterBase, NV_PCRTC_START, FrameBuffer);

        AvpCurrentMode = Mode;

        AvpSetWSSBits(RegisterBase);
                  
        return 0;
    }
}

VOID 
AvpSetMacrovisionMode(
    IN PVOID RegisterBase,
    IN ULONG MacrovisionMode
    )
/*++

Routine Description:

    Sets up macrovision.

Arguments:

    RegisterBase - base address of the gpu hw registers

    MacrovisionMode -

Return Value:

    None

--*/
{
    const UCHAR *Registers = NULL;
    UCHAR Tv;

    ULONG i,c ;
    ULONG OutputMode;
    UCHAR Data;
         
#ifdef FOCUS

    UCHAR CCEnable;

#endif

    Tv = (UCHAR)(AvpCurrentMode & 0xFF);
    OutputMode = AvpCurrentMode & AV_MODE_OUT_MASK;

    // 525 should be 576
    if (OutputMode != AV_MODE_OUT_480SDTV && OutputMode != AV_MODE_OUT_525SDTV)
    {
        // No macrovision.
        return;
    }

    if (OutputMode == AV_MODE_OUT_480SDTV)
    {
        switch(MacrovisionMode)
        {
        case AV_MV_OFF:
            Registers = AvpMacrovision[AVP_MV_NTSC_MODE_0];
            break;

        case AV_MV_AGC_ONLY:
            Registers = AvpMacrovision[AVP_MV_NTSC_MODE_1];
            break;

        case AV_MV_TWO_STRIPES_PLUS_AGC:
            Registers = AvpMacrovision[AVP_MV_NTSC_MODE_2];
            break;

        case AV_MV_FOUR_STRIPES_PLUS_AGC:
        default:
            Registers = AvpMacrovision[AVP_MV_NTSC_MODE_3];
            break;
        }

        // Sploich the registers.
        c = sizeof(AvpMacrovision[0]);

#ifdef FOCUS

        CCEnable = (SMB_RDW(RegisterBase, 0xB2) >> 8 ) & 0xC0;

#endif

        for (i = 0; i < c; i++)
        {

#ifdef FOCUS

            if (AvpMacrovision[0][i] == 0xB3)
            {
                SMB_WR(RegisterBase, AvpMacrovision[0][i], Registers[i] | CCEnable);
            }
            else

#endif

            {
                SMB_WR(RegisterBase, AvpMacrovision[0][i], Registers[i]);
            }
        }
    }

    else
    {
        switch(MacrovisionMode)
        {
        case AV_MV_OFF:
            Registers = AvpMacrovisionPAL[AVP_MV_PAL_MODE_0];
            break;

        case AV_MV_AGC_ONLY:
        default:
            Registers = AvpMacrovisionPAL[AVP_MV_PAL_MODE_1];
            break;
        }

        // Sploich the registers.
        c = sizeof(AvpMacrovisionPAL[0]);

        for (i = 0; i < c; i++)
        {
            SMB_WR(RegisterBase, AvpMacrovisionPAL[0][i], Registers[i]);
        }
    }
}

VOID 
AvpCommitMacrovisionMode(
    IN PVOID RegisterBase,
    IN ULONG MacrovisionMode
    )
/*++

Routine Description:

    Commits the macrovision changes.

Arguments:

    RegisterBase - base address of the gpu hw registers

    MacrovisionMode -

Return Value:

    None

--*/
{
    const UCHAR *Registers = NULL;
    UCHAR Tv;

    ULONG i,c ;
    ULONG OutputMode;
    USHORT Data;
        
    Tv = (UCHAR)(AvpCurrentMode & 0xFF);
    OutputMode = AvpCurrentMode & AV_MODE_OUT_MASK;

#ifdef FOCUS

    if (OutputMode == AV_MODE_OUT_480SDTV 
        || OutputMode == AV_MODE_OUT_525SDTV
        || (AvpCurrentMode & 0xFF0000FF) == 0x88000001)
    {
        Data = SMB_RDW(RegisterBase, 0x0E);

        if (MacrovisionMode == AV_MV_OFF)
        {
            SMB_WRW(RegisterBase, 0x0E, Data & ~0x8000);
        }
        else
        {
            SMB_WRW(RegisterBase, 0x0E, Data | 0x8000);
        }
    }

#else !FOCUS

    if (OutputMode == AV_MODE_OUT_480SDTV)
    {

        switch(MacrovisionMode)
        {
        case AV_MV_OFF:
            Registers = AvpMacrovisionEnable[AVP_MV_NTSC_MODE_0];
            break;

        case AV_MV_AGC_ONLY:
            Registers = AvpMacrovisionEnable[AVP_MV_NTSC_MODE_1];
            break;

        case AV_MV_TWO_STRIPES_PLUS_AGC:
            Registers = AvpMacrovisionEnable[AVP_MV_NTSC_MODE_2];
            break;

        case AV_MV_FOUR_STRIPES_PLUS_AGC:
        default:
            Registers = AvpMacrovisionEnable[AVP_MV_NTSC_MODE_3];
            break;
        }

        // Sploich the registers.
        c = sizeof(AvpMacrovisionEnable[0]);

        for (i = 0; i < c; i++)
        {
            SMB_WR(RegisterBase, AvpMacrovisionEnable[0][i], Registers[i]);
        }
    }

#endif !FOCUS

}

ULONG
AvSMCVideoModeToAVPack(
    ULONG VideoMode
    )
/*++

Routine Description:

    Converts an SMC video mode to an AV pack constant.

Arguments:

    VideoMode - Video mode as returned by SMC_COMMAND_VIDEO_MODE.

Return Value:

    Returns the AV pack constant.

--*/
{
    ULONG Result;

    switch(VideoMode)
    {
    case 0x0:

        // DVT-1 boards will always select this mode.  That should
        // be ok because only the composite output will be enabled
        // on an NTSC-M system.
        //
        Result = AV_PACK_SCART;
        break;

    case 0x1:
        Result = AV_PACK_HDTV;
        break;

    case 0x2:
        Result = AV_PACK_VGA;
        break;

    case 0x3:
        Result = AV_PACK_RFU;
        break;

    case 0x4:
        Result = AV_PACK_SVIDEO;
        break;

    case 0x6:
        Result = AV_PACK_STANDARD;
        break;

    default:
    case 0x7:
        Result = AV_PACK_NONE;
        break;
    }

    return Result;
}

ULONG
AvpQueryAvCapabilities(
    )
/*++

Routine Description:

    Reads the AV settings from the AV pack and EEPROM.

Arguments:

    None

Return Value:

    The AV caps flags.

--*/
{
    ULONG VideoMode;
    ULONG Type;
    ULONG ResultLength;

    NTSTATUS status;

    ULONG Result;

    Result = AvSMCVideoModeToAVPack(HalBootSMCVideoMode);

    // Get the region from the EEPROM.
    status = ExQueryNonVolatileSetting(XC_FACTORY_AV_REGION,
                                       &Type,
                                       &VideoMode,
                                       sizeof(VideoMode),
                                       &ResultLength);

    // Didn't work?  Default to NTSC.
    if (status != STATUS_SUCCESS || ResultLength != sizeof(VideoMode))
    {
        VideoMode = AV_STANDARD_NTSC_M | AV_FLAGS_60Hz;
    }

    Result |= VideoMode & (AV_STANDARD_MASK | AV_REFRESH_MASK);

    // Get the user settings.
    status = ExQueryNonVolatileSetting(XC_VIDEO_FLAGS,
                                       &Type,
                                       &VideoMode,
                                       sizeof(VideoMode),
                                       &ResultLength);

    // Didn't work?  Default to no options.
    if (status != STATUS_SUCCESS || ResultLength != sizeof(VideoMode))
    {
        VideoMode = 0;
    }

    Result |= VideoMode & ~(AV_STANDARD_MASK | AV_PACK_MASK);

    return Result;
}

void
AvSendTVEncoderOption(
    IN  PVOID RegisterBase,
    IN  ULONG Option,
    IN  ULONG Param,
    OUT PULONG Result
    )
/*++

Routine Description:

    Sets various encoder options.

Arguments:

    RegisterBase - base address of the gpu hw registers

Return Value:

    None

--*/
{
    ULONG OutputMode;
    UCHAR Data, OldValue;
    ULONG iTV, i;
    USHORT WValue;

    const UCHAR *pByte;
    const UCHAR *pByteMax;

    OutputMode = AvpCurrentMode & AV_MODE_OUT_MASK;
    iTV       = (AvpCurrentMode & 0x0000007F);

    if (!RegisterBase)
    {
        RegisterBase = (void *)XPCICFG_GPU_MEMORY_REGISTER_BASE_0;
    }

    switch (Option) {

        case AV_OPTION_BLANK_SCREEN:

            REG_WR08(RegisterBase, NV_PRMVIO_SRX, 0x01);

            if (Param)
            {
                REG_WR08(RegisterBase, NV_PRMVIO_SR_RESET, 0x21);
            }
            else
            {
                REG_WR08(RegisterBase, NV_PRMVIO_SR_RESET, 0x01);

                // Renable the DACs.
                _outp(XPCICFG_LPCBRIDGE_IO_REGISTER_BASE_0 + 0xD3, 0x4);
            }
            break;

        case AV_OPTION_MACROVISION_MODE:

            AvpSetMacrovisionMode(RegisterBase, Param);
            AvpMacrovisionMode = Param;
            break;

        case AV_OPTION_MACROVISION_COMMIT:
                
            AvpCommitMacrovisionMode(RegisterBase, Param);

            AvpSetWSSBits(RegisterBase);

            break;
        
        case AV_OPTION_ENABLE_CC:

            if (OutputMode == AV_MODE_OUT_480SDTV)
            {

#ifdef FOCUS

                WValue = SMB_RDW(RegisterBase, 0xB2);
                SMB_WRW(RegisterBase, 0xB2, WValue | 0xC000);

#else !FOCUS
                                                                                                                                                                                                
                Data = SMB_RD(RegisterBase, 0xC4);
                SMB_WR(RegisterBase, 0xC4, Data | 0x38);

                pByte    = AvpCCRegisters[iTV];
                pByteMax = pByte + sizeof(AvpCCRegisters[0]);

                for (i = 0; pByte < pByteMax; pByte++, i++)
                {
                    SMB_WR(RegisterBase, AvpCCRegisters[0][i], *pByte);
                }

#endif !FOCUS

            }
            break;

        case AV_OPTION_DISABLE_CC:

            if (OutputMode == AV_MODE_OUT_480SDTV)
            {

#ifdef FOCUS
                
                WValue = SMB_RDW(RegisterBase, 0xB2);
                SMB_WRW(RegisterBase, 0xB2, WValue & 0x3FFF);

#else !FOCUS
                UCHAR Data = SMB_RD(RegisterBase, 0xC4);

                // Clear ECC enable bits.
                SMB_WR(RegisterBase, 0xC4, Data & ~0x30);

#endif !FOCUS

            }
            break;

        case AV_OPTION_SEND_CC_DATA:

            if (OutputMode == AV_MODE_OUT_480SDTV)
            {

#ifdef FOCUS

                USHORT Value;

                Value  = (USHORT)(*Result & 0xFF);
                Value |= (USHORT)((*Result >> 16) & 0xFF) << 8;

                if (Param & 1)
                {
                    SMB_WRW(RegisterBase, 0xAE, Value);
                }
                else
                {
                    SMB_WRW(RegisterBase, 0xB0, Value);
                }

#else !FOCUS

                if (Param & 1)
                {
                    SMB_WR(RegisterBase, 0xC0, (UCHAR)(*Result >> 16));
                    SMB_WR(RegisterBase, 0xC2, (UCHAR)*Result);
                }
                else
                {
                    SMB_WR(RegisterBase, 0xBC, (UCHAR)(*Result >> 16));
                    SMB_WR(RegisterBase, 0xBE, (UCHAR)*Result);
                }

#endif !FOCUS

            }
            break;

        case AV_QUERY_CC_STATUS:

            if (OutputMode == AV_MODE_OUT_480SDTV)
            {
#ifdef FOCUS

                *Result = 0;

                if (SMB_RDW(RegisterBase, 0xAE))
                {
                    *Result |= 0x1;
                }

                if (SMB_RDW(RegisterBase, 0xB0))
                {
                    *Result |= 0x2;
                }

#else !FOCUS

                *Result = (SMB_RD(RegisterBase, 0x02) >> 2) & 3;

#endif !FOCUS

            }
            else
            {
                *Result = 0;
            }

            break;

        case AV_QUERY_AV_CAPABILITIES:

            AvpCapabilities = AvpQueryAvCapabilities();
            *Result = AvpCapabilities;
            break;

        case AV_OPTION_FLICKER_FILTER:

#ifdef FOCUS

            SMB_WR(RegisterBase, 0x26, (UCHAR)(Param * 16 / 5));
            SMB_WR(RegisterBase, 0x27, 0);

#else !FOCUS

            if (Param == 0)
            {
                // Turn the flicker filter off.
                Data = SMB_RD(RegisterBase, 0xC8);

                SMB_WR(RegisterBase, 0xC8, Data | 0x40);
            }
            else
            {
                switch(Param)
                {
                case 1:
                    Data = 0x01;
                    break;

                case 2:
                    Data = 0x02;
                    break;

                case 3:
                    Data = 0x03;
                    break;

                case 4:
                default:
                    Data = 0x00;
                    break;
                }

                // Turn the flicker filter on.
                OldValue = SMB_RD(RegisterBase, 0xC8);

                // Clear out the old values and clear the disable bit.
                OldValue &= 0x80;

                // Set the new values.
                OldValue |= Data | (Data << 3);

                SMB_WR(RegisterBase, 0xC8, OldValue);

                // Munge the adapate FF.
                SMB_WR(RegisterBase, 0x34, Param == 5 ? 0x80 : 0x00);
            }

#endif !FOCUS

            break;

        case AV_OPTION_ZERO_MODE:

            AvpCurrentMode = 0;
            break;

        case AV_OPTION_QUERY_MODE:

            *Result = AvpCurrentMode;
            break;

        case AV_OPTION_ENABLE_LUMA_FILTER:

#ifndef FOCUS

            Data = SMB_RD(RegisterBase, 0x96) & 0x0F;

            if (Param)
            {
                Data |= 0x10;
            }

            SMB_WR(RegisterBase, 0x96, Data);

#endif

            break;

        case AV_OPTION_GUESS_FIELD:

#ifndef FOCUS

            *Result = SMB_RD(RegisterBase, 0x06) & 0x01;
                                
#endif

            break;

        case AV_QUERY_ENCODER_TYPE:

#ifdef FOCUS
            *Result = AV_ENCODER_FOCUS;
#else
            *Result = AV_ENCODER_CONEXANT_871;
#endif

            break;

        case AV_QUERY_MODE_TABLE_VERSION:

            *Result = AV_MODE_TABLE_VERSION;
            break;

        case AV_OPTION_CGMS:
            
            AvpCGMS = Param;

            AvpSetWSSBits(RegisterBase);

            break;

        case AV_OPTION_WIDESCREEN:

            AvpCurrentMode = (AvpCurrentMode & ~AV_MODE_FLAGS_WSS);

            if (Param)
            {
                AvpCurrentMode |= AV_MODE_FLAGS_WSS;
            }

            AvpSetWSSBits(RegisterBase);

            break;

        default:
            ;
    }
}


PVOID
AvGetSavedDataAddress(
    VOID
    )
/*++

Routine Description:

    Returns sticky data address saved acress quick reboots.

Arguments:

    None.

Return Value:

    Saved global address.

--*/
{
    return AvpSavedDataAddress;
}

VOID
AvSetSavedDataAddress(
    PVOID Address
    )
/*++

Routine Description:

    Sets sticky data address saved acress quick reboots.

Arguments:

    The address to save.

Return Value:

    None.

--*/
{
    AvpSavedDataAddress = Address;
}

VOID
AvRelocateSavedDataAddress(
    IN PVOID NewAddress,
    IN SIZE_T NumberOfBytes
    )
/*++

Routine Description:

    Sets sticky data address saved acress quick reboots.

Arguments:

    The address to save.

Return Value:

    None.

--*/
{
    D3DSurface *OldSurface;
    D3DSurface *NewSurface;

    ASSERT(AvpSavedDataAddress != NULL);

    OldSurface = (D3DSurface*)AvpSavedDataAddress;
    NewSurface = (D3DSurface*)NewAddress;

    //
    // Copy the bits from the the old surface to the new surface, including all
    // of the headers.
    //

    RtlCopyMemory(NewSurface, OldSurface, NumberOfBytes);

    //
    // Update the physical address of the surface data stored in the surface
    // header.
    //

    NewSurface->Data = MmGetPhysicalAddress(NewSurface) +
        (OldSurface->Data - MmGetPhysicalAddress(OldSurface));

    //
    // Wait for the write combine buffers to flush.
    //

    __asm sfence;

    //
    // Program the NV2A to scan from the new surface.
    //

    REG_WR32((PVOID)XPCICFG_GPU_MEMORY_REGISTER_BASE_0, NV_PCRTC_START,
        NewSurface->Data);

    //
    // Reset the VBLANK pending flag.
    //

    REG_WR32((PVOID)XPCICFG_GPU_MEMORY_REGISTER_BASE_0, NV_PCRTC_INTR_0,
        NV_PCRTC_INTR_0_VBLANK_RESET);

    //
    // Persist the new surface and update the saved data address to point at
    // this surface.
    //

    MmPersistContiguousMemory(NewSurface, NumberOfBytes, TRUE);
    AvpSavedDataAddress = NewSurface;

    //
    // Before freeing the old surface, loop until a VBLANK has occurred.  The
    // NV2A begins using the new surface at the next VBLANK.
    //

    while ((REG_RD32((PVOID)XPCICFG_GPU_MEMORY_REGISTER_BASE_0, NV_PCRTC_INTR_0) &
        NV_PCRTC_INTR_0_VBLANK_PENDING) == 0);

    //
    // Free the memory used for the old surface.
    //

    MmFreeContiguousMemory(OldSurface);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\bootx\bldr32\makefile.inc ===
$(BASEDIR)\private\ntos\obj\i386\xboxbldr.bin: obj\i386\bldr32.exe
    bldrbld obj\i386\bldr32.exe $(BASEDIR)\private\ntos\obj\i386\xboxbldr.bin
!IFDEF _NT386TREE
    binplace -R $(_NTTREE) $(BINPLACE_DBGFLAGS_NT) $(BINPLACE_FLAGS) $@
!ENDIF
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Microsoft Xbox (1.00.4400) [April 2002] [src]\private\ntos\av\nv_ref_2a.h ===
/* NVidia Corporation */ 
/* basis: nv4 manuals 
built on Fri Jan 26 12:29:10 PST 2001*/

#ifndef _NV_REF_H_
#define _NV_REF_H_


#define DEVICE_BASE(d)    (0?d)
#define DEVICE_EXTENT(d)  (1?d)
#define DRF_SHIFT(drf)    ((0?drf) % 32)
#define DRF_MASK(drf)     (0xFFFFFFFF>>(31-((1?drf) % 32)+((0?drf) % 32)))
#define DRF_DEF(d,r,f,c)  ((NV ## d ## r ## f ## c)<<DRF_SHIFT(NV ## d ## r ## f))
#define DRF_NUM(d,r,f,n)  (((n)&DRF_MASK(NV ## d ## r ## f))<<DRF_SHIFT(NV ## d ## r ## f))
#define DRF_VAL(d,r,f,v)  (((v)>>DRF_SHIFT(NV ## d ## r ## f))&DRF_MASK(NV ## d ## r ## f))
#define REF_VAL(drf,v)    (((v)>>DRF_SHIFT(drf))&DRF_MASK(drf))
#define REF_NUM(drf,n)    (((n)&DRF_MASK(drf))<<DRF_SHIFT(drf))
#define BIT(b)            (1<<(b))

//#define UPDATE_REG(a,b,c,d) ((a)=(~(((a)<<(31-(d))>>(31-(d)+(c)))<<(c))&(a))|((b)<<(c)))
#define UPDATE_REG(a,b,c,d) ((a)=(~(((a)<<(31-(d))>>(31-(d)+(c)))<<(c))&(a))|((((unsigned int)b)<<(31-(d)+(c)))>>(31-(d))))
#define GETVAL(a,b,c) (((a)<<(31-(c)))>>(31-(c)+(b)))

#define DRF_SHIFT_RT(drf)    ((1?drf) % 32)
// The macro below takes defines of the type 7:5 as the bit field for (c)
// and updates the input (a) similar to UPDATE_REG
#define UPDATE_VAL(a,b,c) \
 ((a)=(~(((a)<<(31-(DRF_SHIFT_RT(c)))>>(31-(DRF_SHIFT_RT(c))+DRF_SHIFT(c)))<< DRF_SHIFT(c))&(a))|((b)<<DRF_SHIFT(c)))

// Similar to above, allows use of a macro to pick the bit range as in 7:5 for (b)
#define GETVAL_RANGE(a,b) \
    (((a)<<(31-(DRF_SHIFT_RT(b))))>>(31-(DRF_SHIFT_RT(b))+(DRF_SHIFT(b))))
/* dev_bus.ref */
#define NV_SPACE                              0x01FFFFFF:0x00000000 /* RW--D */
/* dev_bus.ref */
#define NV_TSPACE                             0x0007FFFF:0x00000000 /* RW--D */
/* dev_bus.ref */
#define NV_MSPACE                             0x1FFFFFFF:0x00000000 /* RW--D */
/* dev_bus.ref */
#define NV_RSPACE                             0x00FFFFFF:0x00000000 /* RW--D */
/* dev_bus.ref */
#define NV_CONFIG                             0x000000FF:0x00000000 /* RW--D */
#define NV_CONFIG_PCI_NV_32                              0x00000080 /* R--4R */
#define NV_CONFIG_PCI_NV_33                              0x00000084 /* RW-4R */
#define NV_CONFIG_PCI_NV_34                              0x00000088 /* RW-4R */
#define NV_CONFIG_PCI_NV_0                               0x00000000 /* R--4R */
#define NV_CONFIG_PCI_NV_0__ALIAS_1                NV_PBUS_PCI_NV_0 /*       */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID                          31:16 /* C--UF */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV01_A              0x00000009 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV01_B_B02_B03_C01  0x00000008 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV02_A01            0x00000010 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV03_NOACPI         0x00000018 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV03_ACPI           0x00000019 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV04                0x00000020 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV05_DEVID0         0x00000028 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV05_DEVID1         0x00000029 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV05_DEVID2         0x0000002A /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV05_DEVID3         0x0000002B /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV06_DEVID0         0x0000002C /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV06_DEVID1         0x0000002D /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV06_DEVID2         0x0000002E /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV06_DEVID3         0x0000002F /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV0A_DEVID0         0x000000A0 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV0A_DEVID1         0x000000A1 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV0A_DEVID2         0x000000A2 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV0A_DEVID3         0x000000A3 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV10_DEVID0         0x00000100 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV10_DEVID1         0x00000101 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV10_DEVID2         0x00000102 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV10_DEVID3         0x00000103 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV15_DEVID0         0x00000150 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV15_DEVID1         0x00000151 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV15_DEVID2         0x00000152 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV15_DEVID3         0x00000153 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV20_DEVID0         0x00000200 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV20_DEVID1         0x00000201 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV20_DEVID2         0x00000202 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV20_DEVID3         0x00000203 /* ----V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV2A_DEVID0         0x000002A0 /* C---V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV2A_DEVID1         0x000002A1 /* C---V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV2A_DEVID2         0x000002A2 /* C---V */
#define NV_CONFIG_PCI_NV_0_DEVICE_ID_NV2A_DEVID3         0x000002A3 /* C---V */
#define NV_CONFIG_PCI_NV_1                               0x00000004 /* RW-4R */
#define NV_CONFIG_PCI_NV_1__ALIAS_1                NV_PBUS_PCI_NV_1 /*       */
#define NV_CONFIG_PCI_NV_2                               0x00000008 /* R--4R */
#define NV_CONFIG_PCI_NV_2__ALIAS_1                NV_PBUS_PCI_NV_2 /*       */
#define NV_CONFIG_PCI_NV_3                               0x0000000C /* RW-4R */
#define NV_CONFIG_PCI_NV_3__ALIAS_1                NV_PBUS_PCI_NV_3 /*       */
#define NV_CONFIG_PCI_NV_4                               0x00000010 /* RW-4R */
#define NV_CONFIG_PCI_NV_4__ALIAS_1                NV_PBUS_PCI_NV_4 /*       */
#define NV_CONFIG_PCI_NV_5                               0x00000014 /* RW-4R */
#define NV_CONFIG_PCI_NV_5__ALIAS_1                NV_PBUS_PCI_NV_5 /*       */
#define NV_CONFIG_PCI_NV_6                               0x00000018 /* RW-4R */
#define NV_CONFIG_PCI_NV_6__ALIAS_1                NV_PBUS_PCI_NV_6 /*       */
#define NV_CONFIG_PCI_NV_7(i)                    (0x0000001C+(i)*4) /* R--4A */
#define NV_CONFIG_PCI_NV_7__SIZE_1                                4 /*       */
#define NV_CONFIG_PCI_NV_7__ALIAS_1                NV_PBUS_PCI_NV_7 /*       */
#define NV_CONFIG_PCI_NV_11                              0x0000002C /* R--4R */
#define NV_CONFIG_PCI_NV_11__ALIAS_1              NV_PBUS_PCI_NV_11 /*       */
#define NV_CONFIG_PCI_NV_12                              0x00000030 /* RW-4R */
#define NV_CONFIG_PCI_NV_12__ALIAS_1              NV_PBUS_PCI_NV_12 /*       */
#define NV_CONFIG_PCI_NV_13                              0x00000034 /* RW-4R */
#define NV_CONFIG_PCI_NV_13__ALIAS_1              NV_PBUS_PCI_NV_13 /*       */
#define NV_CONFIG_PCI_NV_14                              0x00000038 /* R--4R */
#define NV_CONFIG_PCI_NV_14__ALIAS_1              NV_PBUS_PCI_NV_14 /*       */
#define NV_CONFIG_PCI_NV_15                              0x0000003C /* RW-4R */
#define NV_CONFIG_PCI_NV_15__ALIAS_1              NV_PBUS_PCI_NV_15 /*       */
#define NV_CONFIG_PCI_NV_16                              0x00000040 /* RW-4R */
#define NV_CONFIG_PCI_NV_16__ALIAS_1              NV_PBUS_PCI_NV_16 /*       */
#define NV_CONFIG_PCI_NV_17                              0x00000044 /* RW-4R */
#define NV_CONFIG_PCI_NV_17__ALIAS_1              NV_PBUS_PCI_NV_17 /*       */
#define NV_CONFIG_PCI_NV_18                              0x00000048 /* RW-4R */
#define NV_CONFIG_PCI_NV_18__ALIAS_1              NV_PBUS_PCI_NV_18 /*       */
#define NV_CONFIG_PCI_NV_19                              0x0000004C /* RW-4R */
#define NV_CONFIG_PCI_NV_19__ALIAS_1              NV_PBUS_PCI_NV_19 /*       */
#define NV_CONFIG_PCI_NV_20                              0x00000050 /* RW-4R */
#define NV_CONFIG_PCI_NV_20__ALIAS_1              NV_PBUS_PCI_NV_20 /*       */
#define NV_CONFIG_PCI_NV_21                              0x00000054 /* RW-4R */
#define NV_CONFIG_PCI_NV_21__ALIAS_1              NV_PBUS_PCI_NV_21 /*       */
#define NV_CONFIG_PCI_NV_22                              0x00000058 /* RW-4R */
#define NV_CONFIG_PCI_NV_22__ALIAS_1              NV_PBUS_PCI_NV_22 /*       */
#define NV_CONFIG_PCI_NV_23                              0x0000005C /* RW-4R */
#define NV_CONFIG_PCI_NV_23__ALIAS_1              NV_PBUS_PCI_NV_23 /*       */
#define NV_CONFIG_PCI_NV_24                              0x00000060 /* RW-4R */
#define NV_CONFIG_PCI_NV_24__ALIAS_1              NV_PBUS_PCI_NV_24 /*       */
#define NV_CONFIG_PCI_NV_25                              0x00000064 /* RW-4R */
#define NV_CONFIG_PCI_NV_25__ALIAS_1              NV_PBUS_PCI_NV_25 /*       */
#define NV_CONFIG_PCI_NV_26(i)                   (0x00000068+(i)*4) /* R--4A */
#define NV_CONFIG_PCI_NV_26__SIZE_1                              38 /*       */
#define NV_CONFIG_PCI_NV_26__ALIAS_1              NV_PBUS_PCI_NV_25 /*       */
/* dev_bus.ref */
/* dev_bus.ref */
/* dev_bus.ref */
#define NV_PRMIO_RMA_ID                                  0x00007100 /* R--4R */
#define NV_PRMIO_RMA_ID_CODE                                   31:0 /* C--UF */
#define NV_PRMIO_RMA_ID_CODE_VALID                       0x2B16D065 /* C---V */
#define NV_PRMIO_RMA_PTR                                 0x00007104 /* RW-4R */
#define NV_PRMIO_RMA_PTR_SPACE                                31:31 /* RWIVF */
#define NV_PRMIO_RMA_PTR_SPACE_REGISTER                  0x00000000 /* RWI-V */
#define NV_PRMIO_RMA_PTR_SPACE_MEMORY                    0x00000001 /* RW--V */
#define NV_PRMIO_RMA_PTR_ADDRESS                               28:2 /* RWIUF */
#define NV_PRMIO_RMA_PTR_ADDRESS_0                       0x00000000 /* RWI-V */
#define NV_PRMIO_RMA_DATA                                0x00007108 /* RW-4R */
#define NV_PRMIO_RMA_DATA_PORT                                 31:0 /* RWXUF */
#define NV_PRMIO_RMA_DATA32                              0x0000710C /* RW-4R */
#define NV_PRMIO_RMA_DATA32_BYTE2                             23:16 /* RWXUF */
#define NV_PRMIO_RMA_DATA32_BYTE1                              15:8 /* RWXUF */
#define NV_PRMIO_RMA_DATA32_BYTE0                               7:0 /* RWXUF */
/* dev_bus.ref */
#define NV_EXPROM                             0x0000FFFF:0x00000000 /* R---D */
#define NV_EXPROM_BIOS_ROM008(i)                   (0x00000000+(i)) /* RW-1A */
#define NV_EXPROM_BIOS_ROM008__SIZE_1                         65536 /*       */
#define NV_EXPROM_BIOS_ROM008_VALUE                             7:0 /* RW-VF */
#define NV_EXPROM_BIOS_ROM016(i)                 (0x00000000+(i)*2) /* RW-2A */
#define NV_EXPROM_BIOS_ROM016__SIZE_1                         32768 /*       */
#define NV_EXPROM_BIOS_ROM016_VALUE                            15:0 /* RW-VF */
#define NV_EXPROM_BIOS_ROM032(i)                 (0x00000000+(i)*4) /* RW-4A */
#define NV_EXPROM_BIOS_ROM032__SIZE_1                         16384 /*       */
#define NV_EXPROM_BIOS_ROM032_VALUE                            31:0 /* RW-VF */
/* dev_bus.ref */
#define NV_MEMORY                             0xFFFFFFFF:0x00000000 /* RW--D */
/* dev_bus.ref */
#define NV_IO                                 0xFFFFFFFF:0x00000000 /* RW--D */
/* dev_dac.ref */
#define NV_PRAMDAC                            0x00680FFF:0x00680300 /* RW--D */
#define NV_PRAMDAC_CU_START_POS                          0x00680300 /* RW-4R */
#define NV_PRAMDAC_CU_START_POS_X                              11:0 /* RWXSF */
#define NV_PRAMDAC_CU_START_POS_Y                             27:16 /* RWXSF */
#define NV_PRAMDAC_CURSOR_CNTRL                          0x00680320 /* RWI4R */
#define NV_PRAMDAC_CURSOR_CNTRL_ADDRESS                         3:0 /* RW--F */
#define NV_PRAMDAC_CURSOR_CNTRL_RAM                             8:8 /* -W--F */
#define NV_PRAMDAC_CURSOR_CNTR_TESTMODE                       16:16 /* -W--F */
#define NV_PRAMDAC_CURSOR_CNTR_TESTMODE_ENABLE                    1 /* RW--V */
#define NV_PRAMDAC_CURSOR_CNTR_TESTMODE_DISABLE                   0 /* RW--V */
#define NV_PRAMDAC_CURSOR_DATA_31_0                      0x00680324 /* RWI4R */
#define NV_PRAMDAC_CURSOR_DATA_31_0_VAL                        31:0 /* RW--F */
#define NV_PRAMDAC_CURSOR_DATA_63_32                     0x00680328 /* RWI4R */
#define NV_PRAMDAC_CURSOR_DATA_63_32_VAL                       31:0 /* RW--F */
#define NV_PRAMDAC_CURSOR_DATA_95_64                      0x0068032C /* RWI4R */
#define NV_PRAMDAC_CURSOR_DATA_95_64_VAL                        31:0 /* RW--F */
#define NV_PRAMDAC_CURSOR_DATA_127_96                     0x00680330 /* RWI4R */
#define NV_PRAMDAC_CURSOR_DATA_127_96_VAL                       31:0 /* RW--F */
#define NV_PRAMDAC_NVPLL_COEFF                           0x00680500 /* RW-4R */
#define NV_PRAMDAC_NVPLL_COEFF_MDIV                             7:0 /* RWIUF */
#define NV_PRAMDAC_NVPLL_COEFF_NDIV                            15:8 /* RWIUF */
#define NV_PRAMDAC_NVPLL_COEFF_PDIV                           18:16 /* RWIVF */
#define NV_PRAMDAC_MPLL_COEFF                            0x00680504 /* RW-4R */
#define NV_PRAMDAC_MPLL_COEFF_MDIV                              7:0 /* RWIUF */
#define NV_PRAMDAC_MPLL_COEFF_NDIV                             15:8 /* RWIUF */
#define NV_PRAMDAC_MPLL_COEFF_PDIV                            18:16 /* RWIVF */
#define NV_PRAMDAC_VPLL_COEFF                            0x00680508 /* RW-4R */
#define NV_PRAMDAC_VPLL_COEFF_MDIV                              7:0 /* RWIUF */
#define NV_PRAMDAC_VPLL_COEFF_NDIV                             15:8 /* RWIUF */
#define NV_PRAMDAC_VPLL_COEFF_PDIV                            18:16 /* RWIVF */
#define NV_PRAMDAC_VPLL2_COEFF                           0x00680520 /* RW-4R */
#define NV_PRAMDAC_VPLL2_COEFF_MDIV                             7:0 /* RWIUF */
#define NV_PRAMDAC_VPLL2_COEFF_NDIV                            15:8 /* RWIUF */
#define NV_PRAMDAC_VPLL2_COEFF_PDIV                           18:16 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT                      0x0068050C /* RW-4R */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VPLL_SOURCE                 0:0 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VPLL_SOURCE_XTAL     0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VPLL_SOURCE_VIP      0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VPLL2_SOURCE                2:2 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VPLL2_SOURCE_XTAL    0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VPLL2_SOURCE_VIP     0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_MSOURCE                     8:8 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_MSOURCE_DEFAULT      0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_MSOURCE_PROG         0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_V1SOURCE                    9:9 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_V1SOURCE_DEFAULT     0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_V1SOURCE_PROG        0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_NVSOURCE                  10:10 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_NVSOURCE_DEFAULT     0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_NVSOURCE_PROG        0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_V2SOURCE                  11:11 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_V2SOURCE_DEFAULT     0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_V2SOURCE_PROG        0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK_TV                17:16 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK_TV_NONE      0x00000000 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK_TV_VSCLK     0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK_TV_PCLK      0x00000002 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK_TV_BOTH      0x00000003 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK2_TV               19:18 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK2_TV_NONE     0x00000000 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK2_TV_VSCLK    0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK2_TV_PCLK     0x00000002 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VS_PCLK2_TV_BOTH     0x00000003 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_TVCLK_RATIO               24:24 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_TVCLK_RATIO_DB1      0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_TVCLK_RATIO_DB2      0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VCLK_RATIO                28:28 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VCLK_RATIO_DB1       0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VCLK_RATIO_DB2       0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VCLK2_RATIO               29:29 /* RWIVF */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VCLK2_RATIO_DB1      0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COEFF_SELECT_VCLK2_RATIO_DB2      0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL                     0x00680510 /* RW-4R */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_VALUE                      8:0 /* RWIVF */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_VAL                 0x0000011C /* RWI-V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN                   15:12 /* RWIVF */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_NONE         0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_MPLL         0x00000001 /* RWI-V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_VPLL         0x00000002 /* RWI-V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_NVPLL        0x00000004 /* RWI-V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_VPLL2        0x00000008 /* RWI-V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_ALL          0x0000000f /* RW--V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_ON           0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_SETUP_CONTROL_PWRDWN_OFF          0x0000000f /* RW--V */
#define NV_PRAMDAC_PLL_TEST_COUNTER                      0x00680514 /* RW-4R */
#define NV_PRAMDAC_PLL_TEST_COUNTER_NOOFIPCLKS                  9:0 /* -WIVF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_VALUE                      15:0 /* R--VF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_ENABLE                    16:16 /* RWIVF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_ENABLE_DEASSERTED    0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_ENABLE_ASSERTED      0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_RESET                     20:20 /* RWIVF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_RESET_DEASSERTED     0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_RESET_ASSERTED       0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_SOURCE                    26:24 /* RWIVF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_SOURCE_NVCLK         0x00000000 /* RW--V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_SOURCE_VCLK          0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_SOURCE_MCLK          0x00000002 /* RWI-V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_SOURCE_VCLK2         0x00000004 /* -W--V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_VPLL2_LOCK                27:27 /* R--VF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_VPLL2_NOTLOCKED      0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_VPLL2_LOCKED         0x00000001 /* R---V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_PDIV_RST                  28:28 /* RWIVF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_PDIVRST_DEASSERTED   0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_PDIVRST_ASSERTED     0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_NVPLL_LOCK                29:29 /* R--VF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_NVPLL_NOTLOCKED      0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_NVPLL_LOCKED         0x00000001 /* R---V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_MPLL_LOCK                 30:30 /* R--VF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_MPLL_NOTLOCKED       0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_MPLL_LOCKED          0x00000001 /* R---V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_VPLL_LOCK                 31:31 /* R--VF */
#define NV_PRAMDAC_PLL_TEST_COUNTER_VPLL_NOTLOCKED       0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_TEST_COUNTER_VPLL_LOCKED          0x00000001 /* R---V */
#define NV_PRAMDAC_PALETTE_TEST                          0x00680518 /* RW-4R */
#define NV_PRAMDAC_PALETTE_TEST_BLUE_DATA                       7:0 /* R--VF */
#define NV_PRAMDAC_PALETTE_TEST_GREEN_DATA                     15:8 /* R--VF */
#define NV_PRAMDAC_PALETTE_TEST_RED_DATA                      23:16 /* R--VF */
#define NV_PRAMDAC_PALETTE_TEST_MODE                          24:24 /* RWIVF */
#define NV_PRAMDAC_PALETTE_TEST_MODE_8BIT                0x00000000 /* RWI-V */
#define NV_PRAMDAC_PALETTE_TEST_MODE_24BIT               0x00000001 /* RW--V */
#define NV_PRAMDAC_PALETTE_TEST_ADDRINC                       28:28 /* RWIVF */
#define NV_PRAMDAC_PALETTE_TEST_ADDRINC_READWRITE        0x00000000 /* RWI-V */
#define NV_PRAMDAC_PALETTE_TEST_ADDRINC_WRITEONLY        0x00000001 /* RW--V */
#define NV_PRAMDAC_SEL_CLK                               0x00680524 /* RW-4R */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_NVPLL                0:0 /* RWIVF */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_NVPLL_OFF     0x00000000 /* RWI-V */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_NVPLL_ON      0x00000001 /* RW--V */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_MPLL                 2:2 /* RWIVF */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_MPLL_OFF      0x00000000 /* RWI-V */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_MPLL_ON       0x00000001 /* RW--V */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_VPLL1                4:4 /* RWIVF */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_VPLL1_OFF     0x00000000 /* RWI-V */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_VPLL1_ON      0x00000001 /* RW--V */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_VPLL2                6:6 /* RWIVF */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_VPLL2_OFF     0x00000000 /* RWI-V */
#define NV_PRAMDAC_SEL_CLK_SPREAD_SPECTRUM_VPLL2_ON      0x00000001 /* RW--V */
#define NV_PRAMDAC_SEL_CLK_IFPCLK1                            16:16 /* RWIVF */
#define NV_PRAMDAC_SEL_CLK_IFPCLK1_SEL_FPCLK1            0x00000000 /* RWI-V */
#define NV_PRAMDAC_SEL_CLK_IFPCLK1_SEL_FPCLK2            0x00000001 /* RW--V */
#define NV_PRAMDAC_SEL_CLK_IFPCLK2                            18:18 /* RWIVF */
#define NV_PRAMDAC_SEL_CLK_IFPCLK2_SEL_FPCLK1            0x00000000 /* RWI-V */
#define NV_PRAMDAC_SEL_CLK_IFPCLK2_SEL_FPCLK2            0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT                            0x00680528 /* RW-4R */
#define NV_PRAMDAC_PLL_COMPAT_NVPLL_DET_MODE                    1:0 /* RWIVF */
#define NV_PRAMDAC_PLL_COMPAT_NVPLL_DET_MODE_MULTOFF     0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COMPAT_NVPLL_DET_MODE_AUTO        0x00000002 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_NVPLL_DET_MODE_MULTON      0x00000003 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_NVPLL_DET_STAT                    3:3 /* R--VF */
#define NV_PRAMDAC_PLL_COMPAT_NVPLL_DET_STAT_OFF         0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_NVPLL_DET_STAT_ON          0x00000001 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_MPLL_DET_MODE                     5:4 /* RWIVF */
#define NV_PRAMDAC_PLL_COMPAT_MPLL_DET_MODE_MULTOFF      0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COMPAT_MPLL_DET_MODE_AUTO         0x00000002 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_MPLL_DET_MODE_MULTON       0x00000003 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_MPLL_DET_STAT                     7:7 /* R--VF */
#define NV_PRAMDAC_PLL_COMPAT_MPLL_DET_STAT_OFF          0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_MPLL_DET_STAT_ON           0x00000001 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL_DET_MODE                     9:8 /* RWIVF */
#define NV_PRAMDAC_PLL_COMPAT_VPLL_DET_MODE_MULTOFF      0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL_DET_MODE_AUTO         0x00000002 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL_DET_MODE_MULTON       0x00000003 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL_DET_STAT                   11:11 /* R--VF */
#define NV_PRAMDAC_PLL_COMPAT_VPLL_DET_STAT_OFF          0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL_DET_STAT_ON           0x00000001 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL2_DET_MODE                  13:12 /* RWIVF */
#define NV_PRAMDAC_PLL_COMPAT_VPLL2_DET_MODE_MULTOFF     0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL2_DET_MODE_AUTO        0x00000002 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL2_DET_MODE_MULTON      0x00000003 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL2_DET_STAT                  15:15 /* R--VF */
#define NV_PRAMDAC_PLL_COMPAT_VPLL2_DET_STAT_OFF         0x00000000 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_VPLL2_DET_STAT_ON          0x00000001 /* R---V */
#define NV_PRAMDAC_PLL_COMPAT_BLEND                           23:23 /* RWIVF */
#define NV_PRAMDAC_PLL_COMPAT_BLEND_NORMAL               0x00000000 /* RWI-V */
#define NV_PRAMDAC_PLL_COMPAT_BLEND_LSBBYPASS            0x00000001 /* RW--V */
#define NV_PRAMDAC_PLL_COMPAT_MPDIV_XOR                       26:24 /* RWIVF */
#define NV_PRAMDAC_PLL_COMPAT_MPDIV_XOR_DISABLED         0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL                       0x00680600 /* RW-4R */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX32_BIT                 0:0 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX32_BIT_24       0x00000001 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX32_BIT_31       0x00000000 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX                       5:4 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX_OFF            0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX_POS            0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX_NEG            0x00000002 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_PIXMIX_ON             0x00000003 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_VGA_STATE                    8:8 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_VGA_STATE_NOTSEL      0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_VGA_STATE_SEL         0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE                   12:12 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_NOTSEL       0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_SEL          0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_15           0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_16           0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_24           0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_30           0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_BLK_PEDSTL                 16:16 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_BLK_PEDSTL_OFF        0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_BLK_PEDSTL_ON         0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_TERMINATION                17:17 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_TERMINATION_37OHM     0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_TERMINATION_75OHM     0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_BPC                        20:20 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_BPC_6BITS             0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_BPC_8BITS             0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_LUT                        21:21 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_LUT_8BITS             0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_LUT_10BITS            0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_DAC_SLEEP                  24:24 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_DAC_SLEEP_DIS         0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_DAC_SLEEP_EN          0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_PALETTE_CLK                28:28 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_PALETTE_CLK_EN        0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_PALETTE_CLK_DIS       0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_PIPE                       29:29 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_PIPE_SHORT            0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_PIPE_LONG             0x00000001 /* RW--V */
#define NV_PRAMDAC_GENERAL_CONTROL_CUR_32B_ROP                30:30 /* RWIVF */
#define NV_PRAMDAC_GENERAL_CONTROL_CUR_32B_ROP_DISABLE   0x00000000 /* RWI-V */
#define NV_PRAMDAC_GENERAL_CONTROL_CUR_32B_ROP_ENABLE    0x00000001 /* RW--V */
#define NV_PRAMDAC_PALETTE_RECOVERY                      0x00680604 /* R--4R */
#define NV_PRAMDAC_PALETTE_RECOVERY_ACTIVE_ADDRESS              7:0 /* R--UF */
#define NV_PRAMDAC_PALETTE_RECOVERY_RGB_POINTER                10:8 /* R--VF */
#define NV_PRAMDAC_PALETTE_RECOVERY_RGB_POINTER_RED      0x00000001 /* R---V */
#define NV_PRAMDAC_PALETTE_RECOVERY_RGB_POINTER_GREEN    0x00000002 /* R---V */
#define NV_PRAMDAC_PALETTE_RECOVERY_RGB_POINTER_BLUE     0x00000004 /* R---V */
#define NV_PRAMDAC_PALETTE_RECOVERY_DAC_STATE                 13:12 /* R--VF */
#define NV_PRAMDAC_PALETTE_RECOVERY_DAC_STATE_WRITE      0x00000000 /* R---V */
#define NV_PRAMDAC_PALETTE_RECOVERY_DAC_STATE_READ       0x00000003 /* R---V */
#define NV_PRAMDAC_PALETTE_RECOVERY_RED_DATA                  23:16 /* R--VF */
#define NV_PRAMDAC_PALETTE_RECOVERY_GREEN_DATA                31:24 /* R--VF */
#define NV_PRAMDAC_PALETTE_LUT_INDEX                     0x00680620 /* RW-4R */
#define NV_PRAMDAC_PALETTE_LUT_INDEX_ADDR                       7:0 /* RW-VF */
#define NV_PRAMDAC_PALETTE_LUT_INDEX_ADDRINC                  12:12 /* RWIVF */
#define NV_PRAMDAC_PALETTE_LUT_INDEX_ADDRINC_ENABLE      0x00000000 /* RWI-V */
#define NV_PRAMDAC_PALETTE_LUT_INDEX_ADDRINC_DISABLE     0x00000001 /* RW--V */
#define NV_PRAMDAC_PALETTE_LUT_DATA                      0x00680624 /* RW-4R */
#define NV_PRAMDAC_PALETTE_LUT_DATA_BLUE                        9:0 /* RW-VF */
#define NV_PRAMDAC_PALETTE_LUT_DATA_GREEN                     19:10 /* RW-VF */
#define NV_PRAMDAC_PALETTE_LUT_DATA_RED                       29:20 /* RW-VF */
#define NV_PRAMDAC_TEST_CONTROL                          0x00680608 /* RW-4R */
#define NV_PRAMDAC_TEST_CONTROL_CRC_RESET                       0:0 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_CRC_RESET_DEASSERTED     0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_RESET_ASSERTED       0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_ENABLE                      4:4 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_CRC_ENABLE_DEASSERTED    0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_ENABLE_ASSERTED      0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_CHANNEL                     9:8 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_CRC_CHANNEL_BLUE         0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_CHANNEL_GREEN        0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_CHANNEL_RED          0x00000002 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_CAPTURE                   10:10 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_CRC_CAPTURE_ALWAYS       0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_CRC_CAPTURE_ONE          0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_TP_INS_EN                     12:12 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_TP_INS_EN_DEASSERTED     0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_TP_INS_EN_ASSERTED       0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_PWRDWN_DAC                    16:16 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_PWRDWN_DAC_ON            0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_PWRDWN_DAC_OFF           0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_DACTM                         20:20 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_DACTM_NORMAL             0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_DACTM_TEST               0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_TPATH1                        24:24 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_TPATH1_CLEAR             0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_TPATH1_SET               0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_TPATH31                       25:25 /* RWIVF */
#define NV_PRAMDAC_TEST_CONTROL_TPATH31_CLEAR            0x00000000 /* RWI-V */
#define NV_PRAMDAC_TEST_CONTROL_TPATH31_SET              0x00000001 /* RW--V */
#define NV_PRAMDAC_TEST_CONTROL_SENSEB                        28:28 /* R--VF */
#define NV_PRAMDAC_TEST_CONTROL_SENSEB_SOMELO            0x00000000 /* R---V */
#define NV_PRAMDAC_TEST_CONTROL_SENSEB_ALLHI             0x00000001 /* R---V */
#define NV_PRAMDAC_CHECKSUM                              0x0068060C /* R--4R */
#define NV_PRAMDAC_CHECKSUM_STATUS                            24:24 /* R--VF */
#define NV_PRAMDAC_CHECKSUM_STATUS_CAPTURED              0x00000001 /* R---V */
#define NV_PRAMDAC_CHECKSUM_STATUS_WAITING               0x00000000 /* R---V */
#define NV_PRAMDAC_CHECKSUM_VALUE                              23:0 /* R--VF */
#define NV_PRAMDAC_TESTPOINT_DATA                        0x00680610 /* -W-4R */
#define NV_PRAMDAC_TESTPOINT_DATA_RED                           9:0 /* -W-VF */
#define NV_PRAMDAC_TESTPOINT_DATA_GREEN                       19:10 /* -W-VF */
#define NV_PRAMDAC_TESTPOINT_DATA_BLUE                        29:20 /* -W-VF */
#define NV_PRAMDAC_TESTPOINT_DATA_BLACK                       30:30 /* -W-VF */
#define NV_PRAMDAC_TESTPOINT_DATA_NOTBLANK                    31:31 /* -W-VF */
#define NV_PRAMDAC_COMPOSITE                             0x00680630 /* RW-4R */
#define NV_PRAMDAC_COMPOSITE_MODE                               1:0 /* RWIVF */
#define NV_PRAMDAC_COMPOSITE_MODE_RGB                    0x00000000 /* RW--V */
#define NV_PRAMDAC_COMPOSITE_MODE_RESERVED               0x00000001 /* RW--V */
#define NV_PRAMDAC_COMPOSITE_MODE_YCBCR_601_OUT          0x00000002 /* RWI-V */
#define NV_PRAMDAC_COMPOSITE_MODE_YCBCR_709_OUT          0x00000003 /* RW--V */
#define NV_PRAMDAC_COMPOSITE_RESERVED                          31:2 /* RWIVF */
#define NV_PRAMDAC_COMPOSITE_RESERVED_INITIAL            0x00000000 /* RWI-V */
#define NV_PRAMDAC_LGS_HSYNC_NUMERATOR                   0x00680680 /* RW-4R */
#define NV_PRAMDAC_LGS_HSYNC_NUMERATOR_VALUE                   23:0 /* RWIUF */
#define NV_PRAMDAC_LGS_HSYNC_NUMERATOR_VALUE_ZERO        0x00000000 /* RWI-V */
#define NV_PRAMDAC_LGS_HSYNC_DENOMINATOR                 0x00680684 /* RW-4R */
#define NV_PRAMDAC_LGS_HSYNC_DENOMINATOR_VALUE                 10:0 /* RWIUF */
#define NV_PRAMDAC_LGS_HSYNC_DENOMINATOR_VALUE_ZERO      0x00000000 /* RWI-V */
#define NV_PRAMDAC_LGS_HSYNC_HIGH                        0x00680688 /* RW-4R */
#define NV_PRAMDAC_LGS_HSYNC_HIGH_CYCLES                       11:0 /* RWIUF */
#define NV_PRAMDAC_LGS_HSYNC_HIGH_CYCLES_ZERO            0x00000000 /* RWI-V */
#define NV_PRAMDAC_LGS_HSYNC_HIGH_VSYNC                  0x0068068c /* RW-4R */
#define NV_PRAMDAC_LGS_HSYNC_HIGH_VSYNC_CYCLES                 11:0 /* RWIUF */
#define NV_PRAMDAC_LGS_HSYNC_HIGH_VSYNC_CYCLES_ZERO      0x00000000 /* RWI-V */
#define NV_PRAMDAC_LGS_SWITCHES                          0x00680690 /* RW-4R */
#define NV_PRAMDAC_LGS_SWITCHES_ENCODER_MODE                    0:0 /* RWIVF */
#define NV_PRAMDAC_LGS_SWITCHES_ENCODER_MODE_NON_BYPASS  0x00000000 /* RWI-V */
#define NV_PRAMDAC_LGS_SWITCHES_ENCODER_MODE_BYPASS      0x00000001 /* RW--V */
#define NV_PRAMDAC_LGS_TRANSFER                          0x006806a0 /* RW-4R */
#define NV_PRAMDAC_LGS_TRANSFER_LOAD_VALUES                     0:0 /* RWIVF */
#define NV_PRAMDAC_LGS_TRANSFER_LOAD_VALUES_ZERO         0x00000000 /* RWI-V */
#define NV_PRAMDAC_LGS_TRANSFER_LOAD_VALUES_ONE          0x00000001 /* RW--V */
#define NV_PRAMDAC_LGS_TRANSFER_LOADED_VALUES                   4:4 /* R-IVF */
#define NV_PRAMDAC_LGS_TRANSFER_LOADED_VALUES_ZERO       0x00000000 /* R-I-V */
#define NV_PRAMDAC_LGS_TRANSFER_LOADED_VALUES_ONE        0x00000001 /* R---V */
#define NV_PRAMDAC_TV_SETUP                              0x00680700 /* RW-4R */
#define NV_PRAMDAC_TV_SETUP_DEV_TYPE                            1:0 /* RWIVF */
#define NV_PRAMDAC_TV_SETUP_DEV_TYPE_SLAVE               0x00000000 /* RWI-V */
#define NV_PRAMDAC_TV_SETUP_DEV_TYPE_MASTER              0x00000001 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_DEV_TYPE_SLAVE_ALT           0x00000002 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_DEV_TYPE_MASTER_ALT          0x00000003 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_DATA_SRC                            9:8 /* RWIVF */
#define NV_PRAMDAC_TV_SETUP_DATA_SRC_COMP                0x00000000 /* RWI-V */
#define NV_PRAMDAC_TV_SETUP_DATA_SRC_SCALER              0x00000001 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_DATA_SRC_VIP                 0x00000002 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_DATA_SRC_NONE                0x00000003 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_SYNC_POL                          17:16 /* RWIVF */
#define NV_PRAMDAC_TV_SETUP_SYNC_POL_NEG_NONE            0x00000000 /* RWI-V */
#define NV_PRAMDAC_TV_SETUP_SYNC_POL_NEG_HSYNC           0x00000001 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_SYNC_POL_NEG_VSYNC           0x00000002 /* RW--V */
#define NV_PRAMDAC_TV_SETUP_SYNC_POL_NEG_BOTH            0x00000003 /* RW--V */
#define NV_PRAMDAC_BLANK_COLOR                           0x00680714 /* RW-4R */
#define NV_PRAMDAC_BLANK_COLOR_VAL                             23:0 /* RWIVF */
#define NV_PRAMDAC_BLANK_COLOR_EN                             31:30 /* RWIVF */
#define NV_PRAMDAC_BLANK_COLOR_EN_DEFAULT                0x00000000 /* RWI-V */
#define NV_PRAMDAC_BLANK_COLOR_EN_BLANK                  0x00000001 /* RW--V */
#define NV_PRAMDAC_BLANK_COLOR_EN_ALWAYS                 0x00000003 /* RW--V */
#define NV_PRAMDAC_TV_VTOTAL                             0x00680720 /* RW-4R */
#define NV_PRAMDAC_TV_VTOTAL_VAL                               10:0 /* RWIVF */
#define NV_PRAMDAC_TV_VSYNC_START                        0x00680724 /* RW-4R */
#define NV_PRAMDAC_TV_VSYNC_START_VAL                          10:0 /* RWIVF */
#define NV_PRAMDAC_TV_VSYNC_END                          0x00680728 /* RW-4R */
#define NV_PRAMDAC_TV_VSYNC_END_VAL                            10:0 /* RWIVF */
#define NV_PRAMDAC_TV_HTOTAL                             0x0068072C /* RW-4R */
#define NV_PRAMDAC_TV_HTOTAL_VAL                               10:0 /* RWIVF */
#define NV_PRAMDAC_TV_HSYNC_START                        0x00680730 /* RW-4R */
#define NV_PRAMDAC_TV_HSYNC_START_VAL                          10:0 /* RWIVF */
#define NV_PRAMDAC_TV_HSYNC_END                          0x00680734 /* RW-4R */
#define NV_PRAMDAC_TV_HSYNC_END_VAL                            10:0 /* RWIVF */
#define NV_PRAMDAC_TV_CHECKSUM                           0x00680718 /* RW-4R */
#define NV_PRAMDAC_TV_CHECKSUM_VAL                             23:0 /* R--VF */
#define NV_PRAMDAC_TV_CHECKSUM_STATUS                         24:24 /* R--VF */
#define NV_PRAMDAC_TV_CHECKSUM_STATUS_CAPTURED           0x00000001 /* R---V */
#define NV_PRAMDAC_TV_CHECKSUM_STATUS_WAITING            0x00000000 /* R---V */
#define NV_PRAMDAC_TV_VSYNC                                   28:28 /* R--VF */
#define NV_PRAMDAC_TV_VSYNC_LOW                          0x00000000 /* R---V */
#define NV_PRAMDAC_TV_VSYNC_HIGH                         0x00000001 /* R---V */
#define NV_PRAMDAC_TV_TEST_CONTROL                       0x0068071c /* RW-4R */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_RESET                    0:0 /* RWIVF */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_RESET_DEASSERTED  0x00000000 /* RWI-V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_RESET_ASSERTED    0x00000001 /* RW--V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_ENABLE                   4:4 /* RWIVF */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_ENABLE_DEASSERTED 0x00000000 /* RWI-V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_ENABLE_ASSERTED   0x00000001 /* RW--V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_CHANNEL                  9:8 /* RWIVF */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_CHANNEL_7_0       0x00000000 /* RWI-V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_CHANNEL_15_8      0x00000001 /* RW--V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_CHANNEL_23_16     0x00000002 /* RW--V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_CAPTURE                10:10 /* RWIVF */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_CAPTURE_ALWAYS    0x00000000 /* RWI-V */
#define NV_PRAMDAC_TV_TEST_CONTROL_CRC_CAPTURE_ONE       0x00000001 /* RW--V */
#define NV_PRAMDAC_TV_SYNC_DELAY                         0x00680738 /* RW-4R */
#define NV_PRAMDAC_TV_SYNC_DELAY_HSYNC                          7:0 /* RWIVF */
#define NV_PRAMDAC_TV_SYNC_DELAY_VSYNC                        23:16 /* RWIVF */
#define NV_PRAMDAC_FP_VDISPLAY_END                       0x00680800 /* RW-4R */
#define NV_PRAMDAC_FP_VDISPLAY_END_VAL                         15:0 /* RWIVF */
#define NV_PRAMDAC_FP_VTOTAL                             0x00680804 /* RW-4R */
#define NV_PRAMDAC_FP_VTOTAL_VAL                               15:0 /* RWIVF */
#define NV_PRAMDAC_FP_VCRTC                              0x00680808 /* RW-4R */
#define NV_PRAMDAC_FP_VCRTC_VAL                                15:0 /* RWIVF */
#define NV_PRAMDAC_FP_VSYNC_START                        0x0068080c /* RW-4R */
#define NV_PRAMDAC_FP_VSYNC_START_VAL                          15:0 /* RWIVF */
#define NV_PRAMDAC_FP_VSYNC_END                          0x00680810 /* RW-4R */
#define NV_PRAMDAC_FP_VSYNC_END_VAL                            15:0 /* RWIVF */
#define NV_PRAMDAC_FP_VVALID_START                       0x00680814 /* RW-4R */
#define NV_PRAMDAC_FP_VVALID_START_VAL                         15:0 /* RWIVF */
#define NV_PRAMDAC_FP_VVALID_END                         0x00680818 /* RW-4R */
#define NV_PRAMDAC_FP_VVALID_END_VAL                           15:0 /* RWIVF */
#define NV_PRAMDAC_FP_HDISPLAY_END                       0x00680820 /* RW-4R */
#define NV_PRAMDAC_FP_HDISPLAY_END_VAL                         15:0 /* RWIVF */
#define NV_PRAMDAC_FP_HTOTAL                             0x00680824 /* RW-4R */
#define NV_PRAMDAC_FP_HTOTAL_VAL                               15:0 /* RWIVF */
#define NV_PRAMDAC_FP_HCRTC                              0x00680828 /* RW-4R */
#define NV_PRAMDAC_FP_HCRTC_VAL                                15:0 /* RWIVF */
#define NV_PRAMDAC_FP_HSYNC_START                        0x0068082c /* RW-4R */
#define NV_PRAMDAC_FP_HSYNC_START_VAL                          15:0 /* RWIVF */
#define NV_PRAMDAC_FP_HSYNC_END                          0x00680830 /* RW-4R */
#define NV_PRAMDAC_FP_HSYNC_END_VAL                            15:0 /* RWIVF */
#define NV_PRAMDAC_FP_HVALID_START                       0x00680834 /* RW-4R */
#define NV_PRAMDAC_FP_HVALID_START_VAL                         15:0 /* RWIVF */
#define NV_PRAMDAC_FP_HVALID_END                         0x00680838 /* RW-4R */
#define NV_PRAMDAC_FP_HVALID_END_VAL                           15:0 /* RWIVF */
#define NV_PRAMDAC_FP_CHECKSUM                           0x00680840 /* RW-4R */
#define NV_PRAMDAC_FP_CHECKSUM_VAL                             23:0 /* R--VF */
#define NV_PRAMDAC_FP_CHECKSUM_STATUS                         24:24 /* R--VF */
#define NV_PRAMDAC_FP_CHECKSUM_STATUS_CAPTURED           0x00000001 /* R---V */
#define NV_PRAMDAC_FP_CHECKSUM_STATUS_WAITING            0x00000000 /* R---V */
#define NV_PRAMDAC_FP_VSYNC                                   28:28 /* R--VF */
#define NV_PRAMDAC_FP_VSYNC_LOW                          0x00000000 /* R---V */
#define NV_PRAMDAC_FP_VSYNC_HIGH                         0x00000001 /* R---V */
#define NV_PRAMDAC_FP_TEST_CONTROL                       0x00680844 /* RW-4R */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_RESET                    0:0 /* RWIVF */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_RESET_DEASSERTED  0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_RESET_ASSERTED    0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_ENABLE                   4:4 /* RWIVF */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_ENABLE_DEASSERTED 0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_ENABLE_ASSERTED   0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_CHANNEL                  9:8 /* RWIVF */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_CHANNEL_7_0       0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_CHANNEL_15_8      0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_CHANNEL_23_16     0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_CAPTURE                10:10 /* RWIVF */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_CAPTURE_ALWAYS    0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TEST_CONTROL_CRC_CAPTURE_ONE       0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL                         0x00680848 /* RW-4R */
#define NV_PRAMDAC_FP_TG_CONTROL_VSYNC                          1:0 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_VSYNC_NEG               0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_VSYNC_POS               0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_VSYNC_DISABLE           0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_VSYNC_RSVD              0x00000003 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_HSYNC                          5:4 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_HSYNC_NEG               0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_HSYNC_POS               0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_HSYNC_DISABLE           0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_HSYNC_RSVD              0x00000003 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_MODE                           9:8 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_MODE_SCALE              0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_MODE_CENTER             0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_MODE_NATIVE             0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_CENTER                       13:12 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_CENTER_NONE             0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_CENTER_HORIZ            0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_CENTER_VERT             0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_CENTER_BOTH             0x00000003 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_NATIVE                       17:16 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_NATIVE_NONE             0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_NATIVE_HORIZ            0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_NATIVE_VERT             0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_NATIVE_BOTH             0x00000003 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_READ                         20:20 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_READ_ACTUAL             0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_READ_PROG               0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_WIDTH                        24:24 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_WIDTH_24                0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_WIDTH_12                0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_DISPEN                       29:28 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_DISPEN_NEG              0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_DISPEN_POS              0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_DISPEN_DISABLE          0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_DISPEN_RSVD             0x00000003 /* RW--V */
#define NV_PRAMDAC_FP_TG_CONTROL_FPCLK_RATIO                  31:31 /* RWIVF */
#define NV_PRAMDAC_FP_TG_CONTROL_FPCLK_RATIO_DB1         0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_TG_CONTROL_FPCLK_RATIO_DB2         0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_INACTIVE_PXL_COLOR                 0x0068084C /* RW-4R */
#define NV_PRAMDAC_FP_INACTIVE_PXL_COLOR_BLUE                   7:0 /* RWIVF */
#define NV_PRAMDAC_FP_INACTIVE_PXL_COLOR_BLUE_DEFAULT          0x80 /* RWI-V */
#define NV_PRAMDAC_FP_INACTIVE_PXL_COLOR_GREEN                 15:8 /* RWIVF */
#define NV_PRAMDAC_FP_INACTIVE_PXL_COLOR_GREEN_DEFAULT         0x10 /* RWI-V */
#define NV_PRAMDAC_FP_INACTIVE_PXL_COLOR_RED                  23:16 /* RWIVF */
#define NV_PRAMDAC_FP_INACTIVE_PXL_COLOR_RED_DEFAULT           0x80 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0                            0x00680880 /* RW-4R */
#define NV_PRAMDAC_FP_DEBUG_0_XSCALE                            0:0 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_XSCALE_DISABLE             0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_XSCALE_ENABLE              0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_XSCALE_STEP_AUTO                  2:2 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_XSCALE_STEP_AUTO_EN        0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_XSCALE_STEP_AUTO_DIS       0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_YSCALE                            4:4 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_YSCALE_DISABLE             0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_YSCALE_ENABLE              0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_YSCALE_STEP_AUTO                  6:6 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_YSCALE_STEP_AUTO_EN        0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_YSCALE_STEP_AUTO_DIS       0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_XINTERP                           8:8 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_XINTERP_TRUNCATE           0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_XINTERP_BILINEAR           0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_YINTERP                         12:12 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_YINTERP_TRUNCATE           0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_YINTERP_BILINEAR           0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_VCNTR                           17:16 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_TEST_NONE                  0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_TEST_VCNTR                 0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_TEST_NEWPIX                0x00000002 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_TEST_BOTH                  0x00000003 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_XWEIGHT                         20:20 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_XWEIGHT_TRUNCATE           0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_XWEIGHT_ROUND              0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_YWEIGHT                         24:24 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_YWEIGHT_TRUNCATE           0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_YWEIGHT_ROUND              0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_PWRDOWN                         28:28 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_PWRDOWN_NONE               0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_0_PWRDOWN_FPCLK              0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_PWRDOWN_TMDS_PLL                29:29 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_0_PWRDOWN_TMDS_PLL_DISABLE   0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_0_PWRDOWN_TMDS_PLL_ENABLE    0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_1                            0x00680884 /* RW-4R */
#define NV_PRAMDAC_FP_DEBUG_1_XSCALE_VALUE                     11:0 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_1_XSCALE_VALUE_ZERO          0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_1_XSCALE_TESTMODE                 12:12 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_1_XSCALE_TESTMODE_DISABLE    0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_1_XSCALE_TESTMODE_ENABLE     0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_1_YSCALE_VALUE                    27:16 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_1_YSCALE_VALUE_ZERO          0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_1_YSCALE_TESTMODE                 28:28 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_1_YSCALE_TESTMODE_DISABLE    0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_1_YSCALE_TESTMODE_ENABLE     0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_2                            0x00680888 /* RW-4R */
#define NV_PRAMDAC_FP_DEBUG_2_HTOTAL_VALUE                     11:0 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_2_HTOTAL_TESTMODE                 12:12 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_2_HTOTAL_TESTMODE_DISABLE    0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_2_HTOTAL_TESTMODE_ENABLE     0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_2_VTOTAL_VALUE                    27:16 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_2_VTOTAL_TESTMODE                 28:28 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_2_VTOTAL_TESTMODE_DISABLE    0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_2_VTOTAL_TESTMODE_ENABLE     0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_DEBUG_3                            0x0068088c /* R--4R */
#define NV_PRAMDAC_FP_DEBUG_3_XSTEPSIZE                        12:0 /* R--VF */
#define NV_PRAMDAC_FP_DEBUG_3_YSTEPSIZE                       28:16 /* R--VF */
#define NV_PRAMDAC_FP_DEBUG_4                            0x00680890 /* R--4R */
#define NV_PRAMDAC_FP_DEBUG_4_XSTEPSIZE                       28:11 /* R--VF */
#define NV_PRAMDAC_FP_DEBUG_5                            0x00680894 /* R--4R */
#define NV_PRAMDAC_FP_DEBUG_5_YSTEPSIZE                       28:11 /* R--VF */
#define NV_PRAMDAC_FP_DEBUG_6                            0x00680898 /* RW-4R */
#define NV_PRAMDAC_FP_DEBUG_6_XSCALE_VALUE                    28:11 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_6_XSCALE_VALUE_NOSCALE       0x10000000 /* RWI-V */
#define NV_PRAMDAC_FP_DEBUG_7                            0x0068089c /* RW-4R */
#define NV_PRAMDAC_FP_DEBUG_7_YSCALE_VALUE                    28:11 /* RWIVF */
#define NV_PRAMDAC_FP_DEBUG_7_YSCALE_VALUE_NOSCALE       0x10000000 /* RWI-V */
#define NV_PRAMDAC_FP_RAM_CONTROL                        0x006808A0 /* RW-4R */
#define NV_PRAMDAC_FP_RAM_CONTROL_ADDRESS                       8:0 /* RW-VF */
#define NV_PRAMDAC_FP_RAM_CONTROL_TESTMODE                    16:16 /* RWIVF */
#define NV_PRAMDAC_FP_RAM_CONTROL_TESTMODE_DISABLE       0x00000000 /* RWI-V */
#define NV_PRAMDAC_FP_RAM_CONTROL_TESTMODE_ENABLE        0x00000001 /* RW--V */
#define NV_PRAMDAC_FP_RAM_DATA_0                         0x006808A4 /* RWI4R */
#define NV_PRAMDAC_FP_RAM_DATA_0_VAL                           31:0 /* RW--F */
#define NV_PRAMDAC_FP_RAM_DATA_1                         0x006808A8 /* RWI4R */
#define NV_PRAMDAC_FP_RAM_DATA_1_VAL                           31:0 /* RW--F */
#define NV_PRAMDAC_FP_RAM_DATA_2                         0x006808AC /* RWI4R */
#define NV_PRAMDAC_FP_RAM_DATA_2_VAL                            7:0 /* RW--F */
#define NV_PRAMDAC_FP_TMDS_CONTROL                       0x006808B0 /* RW-4R */
#define NV_PRAMDAC_FP_TMDS_CONTROL_ADDRESS                      7:0 /* RW-VF */
#define NV_PRAMDAC_FP_TMDS_CONTROL_WRITE                      16:16 /* RWIVF */
#define NV_PRAMDAC_FP_TMDS_CONTROL_WRITE_DISABLE         0x00000001 /* RWI-V */
#define NV_PRAMDAC_FP_TMDS_CONTROL_WRITE_ENABLE          0x00000000 /* RW--V */
#define NV_PRAMDAC_FP_TMDS_DATA                          0x006808B4 /* RW-4R */
#define NV_PRAMDAC_FP_TMDS_DATA_DATA                            7:0 /* RW-VF */
#define NV_PRAMDAC_TVO_SETUP                             0x006808C0 /* RW-4R */
#define NV_PRAMDAC_TVO_SETUP_DEV_TYPE                           0:0 /* RWIVF */
#define NV_PRAMDAC_TVO_SETUP_DEV_TYPE_SLAVE              0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_SETUP_DEV_TYPE_MASTER             0x00000001 /* RW--V */
#define NV_PRAMDAC_TVO_SETUP_DATA_FORMAT                        5:4 /* RWIVF */
#define NV_PRAMDAC_TVO_SETUP_DATA_FORMAT_MODE_1X00       0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_SETUP_DATA_FORMAT_MODE_0110       0x00000001 /* RW--V */
#define NV_PRAMDAC_TVO_SETUP_DATA_FORMAT_MODE_0000       0x00000002 /* RW--V */
#define NV_PRAMDAC_TVO_SETUP_DATA_FORMAT_MODE_RESERVED   0x00000003 /* RW--V */
#define NV_PRAMDAC_TVO_SETUP_DATA_OUT                           8:8 /* RWIVF */
#define NV_PRAMDAC_TVO_SETUP_DATA_OUT_IS_TVO             0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_SETUP_DATA_OUT_IS_FP              0x00000001 /* RW--V */
#define NV_PRAMDAC_TVO_BLANK_COLOR                       0x006808C4 /* RW-4R */
#define NV_PRAMDAC_TVO_BLANK_COLOR_VAL                         23:0 /* RWIVF */
#define NV_PRAMDAC_TVO_BLANK_COLOR_VAL_DEFAULT           0x00801080 /* RWI-V */
#define NV_PRAMDAC_TVO_BLANK_COLOR_EN                         31:30 /* RWIVF */
#define NV_PRAMDAC_TVO_BLANK_COLOR_EN_DEFAULT            0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_BLANK_COLOR_EN_BLANK              0x00000001 /* RW--V */
#define NV_PRAMDAC_TVO_BLANK_COLOR_EN_ALWAYS             0x00000003 /* RW--V */
#define NV_PRAMDAC_TVO_SYNC_DELAY                        0x006808C8 /* RW-4R */
#define NV_PRAMDAC_TVO_SYNC_DELAY_HSYNC                         7:0 /* RWIVF */
#define NV_PRAMDAC_TVO_SYNC_DELAY_VSYNC                       23:16 /* RWIVF */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL                      0x006808CC /* RW-4R */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_HSYNC_BYPASS                0:0 /* RWIVF */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_HSYNC_BYPASS_DIS     0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_HSYNC_BYPASS_EN      0x00000001 /* RW--V */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_HSYNC_VAL                   4:4 /* RWIVF */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_HSYNC_VAL_ZERO       0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_HSYNC_VAL_ONE        0x00000001 /* RW--V */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_VSYNC_BYPASS              16:16 /* RWIVF */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_VSYNC_BYPASS_DIS     0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_VSYNC_BYPASS_EN      0x00000001 /* RW--V */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_VSYNC_VAL                 20:20 /* RWIVF */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_VSYNC_VAL_ZERO       0x00000000 /* RWI-V */
#define NV_PRAMDAC_TVO_TESTMODE_CTRL_VSYNC_VAL_ONE        0x00000001 /* RW--V */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL                 0x00680900 /* RW-4R */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_DISP                   1:0 /* RW-VF */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_DISP_NEVER      0x00000000 /* RWI-V */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_DISP_ODD        0x00000001 /* RW--V */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_DISP_EVEN       0x00000002 /* RW--V */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_DISP_ALWAYS     0x00000003 /* RW--V */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_PROG                   4:4 /* RW-VF */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_PROG_DISABLE    0x00000000 /* RWI-V */
#define NV_PRAMDAC_MCHIP_GENERAL_CONTROL_PROG_ENABLE     0x00000001 /* RW--V */
#define NV_PRAMDAC_MCHIP_VDISPLAY_FIELD                  0x00680904 /* RW-4R */
#define NV_PRAMDAC_MCHIP_VDISPLAY_FIELD_START                  11:0 /* RW-VF */
#define NV_PRAMDAC_MCHIP_VDISPLAY_FIELD_END                   27:16 /* RW-VF */
#define NV_PRAMDAC_INDIR_TMDS_PLL0                             0x00 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_SEL10UA                      0:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_SEL10UA_RESET                0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_SEL50UA                      1:1 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_SEL50UA_RESET                0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_SEL100UA                     2:2 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_SEL100UA_RESET               0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_FILSEL                       5:3 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_FILSEL_RESET                 0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_CONF                         7:6 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL0_CONF_RESET                   0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL1                             0x01 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_RSEL                         2:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_RSEL_RESET                   0x7 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_CSEL                         4:3 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_CSEL_RESET                   0x3 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_IOCTRL1                      5:5 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_IOCTRL1_RESET                0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_DIVBY10                      6:6 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_DIVBY10_RESET                0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_IRSEL                        7:7 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL1_IRSEL_RESET                  0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL2                             0x02 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_DIVBY1                       0:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_DIVBY1_RESET                 0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_DIVBY7                       1:1 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_DIVBY7_RESET                 0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_ALTCLK                       2:2 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_ALTCLK_RESET                 0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_AUX                          7:3 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_PLL2_AUX_RESET                    0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_IDLY                             0x03 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_IDLY_IDEL                         3:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_IDLY_IDEL_RESET                   0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_IDLY_CDEL                         7:4 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_IDLY_CDEL_RESET                   0x3 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_MODE                             0x04 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LVDSMODE                     0:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LVDSMODE_TMDS                0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LVDSMODE_LVDS                0x1 /* RW--V */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL                       3:3 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL_NORMAL                0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL_ALTERNATE             0x1 /* RW--V */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LINKACT                      7:7 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LINKACT_DISABLE              0x0 /* RW--V */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LINKACT_ENABLE               0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LVDSMODE_RESET               0x0 /* RW--  */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL_RESET                 0x0 /* RW--  */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL_DINRISE               0x0 /* RW--  */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL_DINFALL               0x1 /* RW--  */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL_DALTRISE              0x2 /* RW--  */
#define NV_PRAMDAC_INDIR_TMDS_MODE_DINSEL_DALTFALL              0x3 /* RW--  */
#define NV_PRAMDAC_INDIR_TMDS_MODE_LINKACT_RESET                0x1 /* RW--  */
#define NV_PRAMDAC_INDIR_TMDS_LVDS                             0x05 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODESWAPCTL                  0:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODESWAPCTL_RESET            0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEHS                       1:1 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEHS_RESET                 0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEVS                       2:2 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEVS_RESET                 0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEDEN                      3:3 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEDEN_RESET                0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEBALANCED                 4:4 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEBALANCED_RESET           0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODE24B                      5:5 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODE24B_RESET                0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEUPPER                    6:6 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_LVDS_MODEUPPER_RESET              0x1 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_TRIG0                            0x06 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_TRIG0_VAL                         7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_TRIG0_VAL_RESET                  0x00 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_TRIG1                            0x07 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_TRIG1_VAL                         7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_TRIG1_VAL_RESET                  0x00 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_TRIG2                            0x08 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_TRIG2_VAL                         7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_TRIG2_VAL_RESET                  0x00 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_VCRC0                            0x09 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_VCRC0_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_VCRC1                            0x0a /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_VCRC1_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_VCRC2                            0x0b /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_VCRC2_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_VCRC3                            0x0c /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_VCRC3_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_VCRC4                            0x0d /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_VCRC4_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_VCRC5                            0x0e /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_VCRC5_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_IDATA0                           0x0f /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_IDATA0_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_IDATA1                           0x10 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_IDATA1_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_IDATA2                           0x11 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_IDATA2_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_IDATA3                           0x12 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_IDATA3_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_EDATA0                           0x13 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_EDATA0_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_EDATA1                           0x14 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_EDATA1_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_EDATA2                           0x15 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_EDATA2_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_EDATA3                           0x16 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_EDATA3_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_EDATA4                           0x17 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_EDATA4_VAL                        7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CNTL0                            0x18 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CNTL0_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CNTH0                            0x19 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CNTH0_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CNTL1                            0x1a /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CNTL1_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CNTH1                            0x1b /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CNTH1_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CNTL2                            0x1c /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CNTL2_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CNTH2                            0x1d /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CNTH2_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR0                          0x1e /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR0_THISPAR                   3:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR0_RUNPAR                    7:4 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR1                          0x1f /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR1_THISPAR                   3:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR1_RUNPAR                    7:4 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR2                          0x20 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR2_THISPAR                   3:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR2_RUNPAR                    7:4 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR3                          0x21 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR3_THISPAR                   3:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPAR3_RUNPAR                    7:4 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPARCK                         0x22 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_DISPARCK_THISPAR                  3:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_DISPARCK_RUNPAR                   7:4 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CCRC0                            0x23 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CCRC0_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CCRC1                            0x24 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CCRC1_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CCRC2                            0x25 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CCRC2_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CCRC3                            0x26 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CCRC3_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CCRC4                            0x27 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CCRC4_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_CCRC5                            0x28 /* R--1R */
#define NV_PRAMDAC_INDIR_TMDS_CCRC5_VAL                         7:0 /* R--VF */
#define NV_PRAMDAC_INDIR_TMDS_ROTCK                            0x29 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_ROTCK_ROTVAL                      3:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_ROTCK_RSEL_RESET                  0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL0                          0x30 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL0_ICHPMP                    3:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL0_ICHPMP_RESET              0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL0_FILSEL                    6:4 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL0_FILSEL_RESET              0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL0_ICLKSEL                   7:7 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL0_ICLKSEL_RESET             0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1                          0x31 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_CSEL                      1:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_CSEL_RESET                0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_RSEL                      5:2 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_RSEL_RESET                0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_FBACK_SEL                 6:6 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_FBACK_SEL_RESET           0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_SEL1UA                    7:7 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL1_SEL1UA_RESET              0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL2                          0x32 /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL2_AUX                       7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_FE_PLL2_AUX_RESET                 0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_CTL                         0x3a /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_CTL_TEST_DATA                0:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_CTL_TEST_DATA_DISABLE        0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_CTL_TEST_DATA_ENABLE         0x1 /* RW--V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_CTL_SYNC_LOAD_EN             7:7 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_CTL_SYNC_LOAD_EN_OFF         0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_CTL_SYNC_LOAD_EN_ON          0x1 /* RW--V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA0                       0x3b /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA0_VAL                    7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA0_VAL_RESET              0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA1                       0x3c /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA1_VAL                    7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA1_VAL_RESET              0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA2                       0x3d /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA2_VAL                    7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA2_VAL_RESET              0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA3                       0x3e /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA3_VAL                    7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA3_VAL_RESET              0x0 /* RWI-V */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA4                       0x3f /* RW-1R */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA4_VAL                    7:0 /* RWIVF */
#define NV_PRAMDAC_INDIR_TMDS_DEBUG_DATA4_VAL_RESET              0x0 /* RWI-V */
/* dev_dac.ref */
#define NV_USER_DAC                           0x00681FFF:0x00681200 /* RW--D */
#define NV_USER_DAC_PIXEL_MASK                           0x006813C6 /* RWI1R */
#define NV_USER_DAC_PIXEL_MASK_VALUE                            7:0 /* RWIVF */
#define NV_USER_DAC_PIXEL_MASK_MASK                      0x000000FF /* RWI-V */
#define NV_USER_DAC_READ_MODE_ADDRESS                    0x006813C7 /* RW-1R */
#define NV_USER_DAC_READ_MODE_ADDRESS_VALUE                     7:0 /* RW-VF */
#define NV_USER_DAC_READ_MODE_ADDRESS_WO_VALUE                  7:0 /* -W-VF */
#define NV_USER_DAC_READ_MODE_ADDRESS_RW_STATE                  1:0 /* R--VF */
#define NV_USER_DAC_READ_MODE_ADDRESS_RW_STATE_WRITE     0x00000000 /* R---V */
#define NV_USER_DAC_READ_MODE_ADDRESS_RW_STATE_READ      0x00000003 /* R---V */
#define NV_USER_DAC_WRITE_MODE_ADDRESS                   0x006813C8 /* RW-1R */
#define NV_USER_DAC_WRITE_MODE_ADDRESS_VALUE                    7:0 /* RW-VF */
#define NV_USER_DAC_PALETTE_DATA                         0x006813C9 /* RW-1R */
#define NV_USER_DAC_PALETTE_DATA_VALUE                          7:0 /* RW-VF */
/* dev_dac.ref */
#define NV_PDAC                               0x00680FFF:0x00680000 /* RW--D */
/* dev_dac.ref */
#define NV_PRMDIO                             0x00681FFF:0x00681000 /* RW--D */
/* dev_md.ref */
#define NV_PMD                                0x0000bfff:0x0000b000 /* RW--D */
#define NV_PMD_INTR                                      0x0000b100 /* RW-4R */
#define NV_PMD_INTR_AWAKEN                                      0:0 /* RWIVF */
#define NV_PMD_INTR_AWAKEN_NOT_PENDING                   0x00000000 /* R-I-V */
#define NV_PMD_INTR_AWAKEN_PENDING                       0x00000001 /* R---V */
#define NV_PMD_INTR_AWAKEN_RESET                         0x00000001 /* -W--C */
#define NV_PMD_INTR_ERROR                                       4:4 /* RWIVF */
#define NV_PMD_INTR_ERROR_NOT_PENDING                    0x00000000 /* R-I-V */
#define NV_PMD_INTR_ERROR_PENDING                        0x00000001 /* R---V */
#define NV_PMD_INTR_ERROR_RESET                          0x00000001 /* -W--C */
#define NV_PMD_INTR_METHOD_PATCH                                8:8 /* RWIVF */
#define NV_PMD_INTR_METHOD_PATCH_NOT_PENDING             0x00000000 /* R-I-V */
#define NV_PMD_INTR_METHOD_PATCH_PENDING                 0x00000001 /* R---V */
#define NV_PMD_INTR_METHOD_PATCH_RESET                   0x00000001 /* -W--C */
#define NV_PMD_INTR_BREAKPOINT                                28:28 /* RWIVF */
#define NV_PMD_INTR_BREAKPOINT_NOT_PENDING               0x00000000 /* R-I-V */
#define NV_PMD_INTR_BREAKPOINT_PENDING                   0x00000001 /* R---V */
#define NV_PMD_INTR_BREAKPOINT_RESET                     0x00000001 /* -W--C */
#define NV_PMD_INTR_EN                                   0x0000b140 /* RW-4R */
#define NV_PMD_INTR_EN_ALL                                      0:0 /* RWIVF */
#define NV_PMD_INTR_EN_ALL_DISABLED                      0x00000000 /* RWI-V */
#define NV_PMD_INTR_EN_ALL_ENABLED                       0x00000001 /* RW--V */
#define NV_PMD_ERROR                                     0x0000b200 /* R--4R */
#define NV_PMD_ERROR_STATUS                                    31:0 /* R--VF */
#define NV_PMD_ERROR_STATUS_INVALID_STATE                0x01000000 /* R---V */
#define NV_PMD_ERROR_STATUS_BAD_ARGUMENT                 0x02000000 /* R---V */
#define NV_PMD_ERROR_STATUS_RESERVED_METHOD              0x08000000 /* R---V */
#define NV_PMD_TIME_0                                    0x0000b210 /* R--4R */
#define NV_PMD_TIME_0_VALUE                                    31:0 /* R-XUF */
#define NV_PMD_TIME_1                                    0x0000b214 /* R--4R */
#define NV_PMD_TIME_1_VALUE                                    31:0 /* R-XUF */
#define NV_PMD_INSTANCE                                  0x0000b220 /* R--4R */
#define NV_PMD_INSTANCE_VALUE                                  15:0 /* R-XUF */
#define NV_PMD_METHOD                                    0x0000b224 /* R--4R */
#define NV_PMD_METHOD_VALUE                                    12:2 /* R-XUF */
#define NV_PMD_DATA                                      0x0000b228 /* R--4R */
#define NV_PMD_DATA_VALUE                                      31:0 /* R-XVF */
#define NV_PMD_CTX_DMA                                   0x0000b300 /* R--4R */
#define NV_PMD_CTX_DMA_NOTIFIES_INSTANCE                       15:0 /* R-IUF */
#define NV_PMD_CTX_DMA_FRAMES_INSTANCE                        31:16 /* R-IUF */
#define NV_PMD_CONTEXT                                   0x0000b400 /* RW-4R */
#define NV_PMD_CONTEXT_STATE                                    0:0 /* R-IVF */
#define NV_PMD_CONTEXT_STATE_NOT_IDLE                    0x00000000 /* R---V */
#define NV_PMD_CONTEXT_STATE_IDLE                        0x00000001 /* R-I-V */
#define NV_PMD_CONTEXT_STATE_CHECK_IDLENESS              0x00000001 /* -W--C */
#define NV_PMD_CONTEXT_STALL                                    4:4 /* RWIVF */
#define NV_PMD_CONTEXT_STALL_INACTIVE                    0x00000000 /* R-I-V */
#define NV_PMD_CONTEXT_STALL_ACTIVE                      0x00000001 /* R---V */
#define NV_PMD_CONTEXT_STALL_RELEASE                     0x00000001 /* -W--C */
#define NV_PMD_CONTEXT_FLUSH_AND_INVALIDATE                     0:0 /* RWIVF */
#define NV_PMD_CONTEXT_FLUSH_AND_INVALIDATE_NOT_PENDING  0x00000000 /* R-I-V */
#define NV_PMD_CONTEXT_FLUSH_AND_INVALIDATE_PENDING      0x00000001 /* R---V */
#define NV_PMD_CONTEXT_FLUSH_AND_INVALIDATE_NOW          0x00000001 /* -W--S */
#define NV_PMD_DEBUG_FE                                  0x0000ba00 /* RW-4R */
#define NV_PMD_DEBUG_FE_CYA_0                                   0:0 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_0_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_1                                   1:1 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_1_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_2                                   2:2 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_2_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_3                                   3:3 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_3_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_4                                   4:4 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_4_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_5                                   5:5 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_5_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_6                                   6:6 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_6_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_7                                   7:7 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_7_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_8                                   8:8 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_8_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_9                                   9:9 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_9_FALSE                      0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_10                                10:10 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_10_FALSE                     0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_11                                11:11 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_11_FALSE                     0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_12                                12:12 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_12_FALSE                     0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_FE_CYA_13                                13:13 /* RWIVF */
#define NV_PMD_DEBUG_FE_CYA_13_FALSE                     0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_P                                   0x0000ba08 /* ---4R */
#define NV_PMD_DEBUG_PBCF                                0x0000ba10 /* ---4R */
#define NV_PMD_DEBUG_MC                                  0x0000ba18 /* ---4R */
#define NV_PMD_DEBUG_PMB                                 0x0000ba20 /* ---4R */
#define NV_PMD_DEBUG_IQ                                  0x0000ba28 /* ---4R */
#define NV_PMD_DEBUG_TBB                                 0x0000ba30 /* RW-4R */
#define NV_PMD_DEBUG_TBB_CYA_0                                  0:0 /* RWIVF */
#define NV_PMD_DEBUG_TBB_CYA_0_FALSE                     0x00000000 /* RWI-V */
#define NV_PMD_DEBUG_IDCT                                0x0000ba38 /* ---4R */
#define NV_PMD_DEBUG_EBRF                                0x0000ba40 /* ---4R */
#define NV_PMD_DEBUG_M                                   0x0000ba48 /* ---4R */
#define NV_PMD_DEBUG_FI                                  0x0000ba50 /* ---4R */
#define NV_PMD_RAM_ADDR                                  0x0000bc00 /* RW-4R */
#define NV_PMD_RAM_ADDR_VALUE                                   5:0 /* RWXVF */
#define NV_PMD_RAM_PBC_A_0                               0x0000bc10 /* RW-4R */
#define NV_PMD_RAM_PBC_A_0_VALUE                               31:0 /* RWXVF */
#define NV_PMD_RAM_PBC_A_1                               0x0000bc14 /* RW-4R */
#define NV_PMD_RAM_PBC_A_1_VALUE                               29:0 /* RWXVF */
#define NV_PMD_RAM_PBC_B_0                               0x0000bc20 /* RW-4R */
#define NV_PMD_RAM_PBC_B_0_VALUE                               31:0 /* RWXVF */
#define NV_PMD_RAM_PBC_B_1                               0x0000bc24 /* RW-4R */
#define NV_PMD_RAM_PBC_B_1_VALUE                               31:0 /* RWXVF */
#define NV_PMD_RAM_PBC_B_2                               0x0000bc28 /* RW-4R */
#define NV_PMD_RAM_PBC_B_2_VALUE                               31:0 /* RWXVF */
#define NV_PMD_RAM_PBC_B_3                               0x0000bc2c /* RW-4R */
#define NV_PMD_RAM_PBC_B_3_VALUE                               11:0 /* RWXVF */
#define NV_PMD_RAM_INSTR                                 0x0000bc40 /* RW-4R */
#define NV_PMD_RAM_INSTR_VALUE                                  9:0 /* RWXVF */
#define NV_PMD_RAM_PMB_0                                 0x0000bc50 /* RW-4R */
#define NV_PMD_RAM_RAM_0_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_PMB_1                                 0x0000bc54 /* RW-4R */
#define NV_PMD_RAM_RAM_1_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_PMB_2                                 0x0000bc58 /* RW-4R */
#define NV_PMD_RAM_RAM_2_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_PMB_3                                 0x0000bc5c /* RW-4R */
#define NV_PMD_RAM_RAM_3_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_QM                                    0x0000bc70 /* RW-4R */
#define NV_PMD_RAM_QM_VALUE                                    31:0 /* RWXVF */
#define NV_PMD_RAM_TFB_0                                 0x0000bc80 /* RW-4R */
#define NV_PMD_RAM_TFB_0_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_TFB_1                                 0x0000bc84 /* RW-4R */
#define NV_PMD_RAM_TFB_1_VALUE                                 15:0 /* RWXVF */
#define NV_PMD_RAM_TSB_0                                 0x0000bc90 /* RW-4R */
#define NV_PMD_RAM_TSB_0_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_TSB_1                                 0x0000bc94 /* RW-4R */
#define NV_PMD_RAM_TSB_1_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_TSB_2                                 0x0000bc98 /* RW-4R */
#define NV_PMD_RAM_TSB_2_VALUE                                  3:0 /* RWXVF */
#define NV_PMD_RAM_EBR_0                                 0x0000bca0 /* RW-4R */
#define NV_PMD_RAM_EBR_0_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_EBR_1                                 0x0000bca4 /* RW-4R */
#define NV_PMD_RAM_EBR_1_VALUE                                 31:0 /* RWXVF */
#define NV_PMD_RAM_EBR_2                                 0x0000bca8 /* RW-4R */
#define NV_PMD_RAM_EBR_2_VALUE                                  7:0 /* RWXVF */
/* dev_md.ref */
#define NV_MD_FESTATE1                                   0x0000bd00 /* RW-4R */
#define NV_MD_FESTATE1_FIELD1                                   3:0 /* RWIUF */
#define NV_MD_FESTATE1_FIELD1_FUN                        0x00000008 /* RWI-V */
#define NV_MD_FESTATE1_FIELD2                                   4:4 /* RWIVF */
#define NV_MD_FESTATE1_FIELD2_FUN                        0x00000000 /* RWI-V */
#define NV_MD_FESTATE2                                   0x0000bd04 /* RW-4R */
#define NV_MD_FESTATE2_FIELD1                                   3:0 /* RWIUF */
#define NV_MD_FESTATE2_FIELD1_FUN                        0x00000008 /* RWI-V */
#define NV_MD_FESTATE2_FIELD2                                   4:4 /* RWIVF */
#define NV_MD_FESTATE2_FIELD2_FUN                        0x00000000 /* RWI-V */
#define NV_MD_VDEBUG1                                    0x0000bd08 /* RW-4R */
#define NV_MD_VDEBUG1_TRACEFE                                   0:0 /* RWIUF */
#define NV_MD_VDEBUG1_TRACEFE_OFF                                 0 /* RWI-V */
#define NV_MD_VDEBUG1_TRACEFE_ON                                  1 /* RWI-V */
/* dev_master.ref */
#define NV_PMC                                0x00000FFF:0x00000000 /* RW--D */
#define NV_PMC_BOOT_0                                    0x00000000 /* R--4R */
#define NV_PMC_BOOT_0_ID                                       31:0 /* R--VF */
#define NV_PMC_BOOT_0_ID_NV01_A                          0x00010100 /* ----V */
#define NV_PMC_BOOT_0_ID_NV01_B                          0x00010101 /* ----V */
#define NV_PMC_BOOT_0_ID_NV01_B02                        0x00010102 /* ----V */
#define NV_PMC_BOOT_0_ID_NV01_B03                        0x00010103 /* ----V */
#define NV_PMC_BOOT_0_ID_NV01_C01                        0x00010104 /* ----V */
#define NV_PMC_BOOT_0_ID_NV02_A01                        0x10020400 /* ----V */
#define NV_PMC_BOOT_0_ID_NV03_A01                        0x00030100 /* ----V */
#define NV_PMC_BOOT_0_ID_NV03_B01                        0x00030110 /* ----V */
#define NV_PMC_BOOT_0_ID_NV03T_A01                       0x20030120 /* ----V */
#define NV_PMC_BOOT_0_ID_NV03T_A02                       0x20030121 /* ----V */
#define NV_PMC_BOOT_0_ID_NV03T_A03_A04                   0x20030122 /* ----V */
#define NV_PMC_BOOT_0_ID_NV04_A01_A02_A03                0x20004000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV04_A04                        0x20034001 /* ----V */
#define NV_PMC_BOOT_0_ID_NV04_A05                        0x20044001 /* ----V */
#define NV_PMC_BOOT_0_ID_NV05_NV06_A01                   0x20104000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV05_NV06_A02                   0x20114000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV05_NV06_A03                   0x20124000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV05_NV06_B01                   0x20204000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV05_NV06_B02                   0x20214000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV05_NV06_B03                   0x20224000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV0A_A01                        0x20204000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV0A_A02                        0x20214000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV0A_B01                        0x20224000 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_A1_DEVID0                  0x010000A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV10_A1_DEVID1                  0x010100A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV10_A1_DEVID2                  0x010200A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV10_A1_DEVID3                  0x010300A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV10_A2_DEVID0                  0x010000A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_A2_DEVID1                  0x010100A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_A2_DEVID2                  0x010200A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_A2_DEVID3                  0x010300A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B1_DEVID0                  0x010000B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B1_DEVID1                  0x010100B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B1_DEVID2                  0x010200B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B1_DEVID3                  0x010300B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B2_DEVID0                  0x010000B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B2_DEVID1                  0x010100B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B2_DEVID2                  0x010200B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV10_B2_DEVID3                  0x010300B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A1_DEVID0                  0x020000A1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A1_DEVID1                  0x020100A1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A1_DEVID2                  0x020200A1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A1_DEVID3                  0x020300A1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A2_DEVID0                  0x020000A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A2_DEVID1                  0x020100A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A2_DEVID2                  0x020200A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_A2_DEVID3                  0x020300A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B1_DEVID0                  0x020000B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B1_DEVID1                  0x020100B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B1_DEVID2                  0x020200B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B1_DEVID3                  0x020300B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B2_DEVID0                  0x020000B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B2_DEVID1                  0x020100B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B2_DEVID2                  0x020200B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV20_B2_DEVID3                  0x020300B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_A1_DEVID0                  0x02A000A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV2A_A1_DEVID1                  0x02A100A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV2A_A1_DEVID2                  0x02A200A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV2A_A1_DEVID3                  0x02A300A1 /* C---V */
#define NV_PMC_BOOT_0_ID_NV2A_A2_DEVID0                  0x02A000A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_A2_DEVID1                  0x02A100A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_A2_DEVID2                  0x02A200A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_A2_DEVID3                  0x02A300A2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B1_DEVID0                  0x02A000B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B1_DEVID1                  0x02A100B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B1_DEVID2                  0x02A200B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B1_DEVID3                  0x02A300B1 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B2_DEVID0                  0x02A000B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B2_DEVID1                  0x02A100B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B2_DEVID2                  0x02A200B2 /* ----V */
#define NV_PMC_BOOT_0_ID_NV2A_B2_DEVID3                  0x02A300B2 /* ----V */
#define NV_PMC_BOOT_0_MINOR_REVISION                            3:0 /* C--VF */
#define NV_PMC_BOOT_0_MINOR_REVISION_0                   0x00000000 /* C---V */
#define NV_PMC_BOOT_0_MAJOR_REVISION                            7:4 /* C--VF */
#define NV_PMC_BOOT_0_MAJOR_REVISION_A                   0x00000000 /* C---V */
#define NV_PMC_BOOT_0_MAJOR_REVISION_B                   0x00000001 /* ----V */
#define NV_PMC_BOOT_0_IMPLEMENTATION                           11:8 /* C--VF */
#define NV_PMC_BOOT_0_IMPLEMENTATION_NV4_0               0x00000000 /* C---V */
#define NV_PMC_BOOT_0_ARCHITECTURE                            15:12 /* C--VF */
#define NV_PMC_BOOT_0_ARCHITECTURE_NV0                   0x00000000 /* ----V */
#define NV_PMC_BOOT_0_ARCHITECTURE_NV1                   0x00000001 /* ----V */
#define NV_PMC_BOOT_0_ARCHITECTURE_NV2                   0x00000002 /* ----V */
#define NV_PMC_BOOT_0_ARCHITECTURE_NV3                   0x00000003 /* ----V */
#define NV_PMC_BOOT_0_ARCHITECTURE_NV4                   0x00000004 /* ----V */
#define NV_PMC_BOOT_0_ARCHITECTURE_NV10                  0x00000010 /* ----V */
#define NV_PMC_BOOT_0_ARCHITECTURE_NV20                  0x00000020 /* C---V */
#define NV_PMC_BOOT_0_FIB_REVISION                            19:16 /* C--VF */
#define NV_PMC_BOOT_0_FIB_REVISION_0                     0x00000000 /* C---V */
#define NV_PMC_BOOT_0_MASK_REVISION                           23:20 /* C--VF */
#define NV_PMC_BOOT_0_MASK_REVISION_A                    0x00000000 /* C---V */
#define NV_PMC_BOOT_0_MASK_REVISION_B                    0x00000001 /* ----V */
#define NV_PMC_BOOT_0_MANUFACTURER                            27:24 /* C--UF */
#define NV_PMC_BOOT_0_MANUFACTURER_NVIDIA                0x00000000 /* C---V */
#define NV_PMC_BOOT_0_FOUNDRY                                 31:28 /* C--VF */
#define NV_PMC_BOOT_0_FOUNDRY_SGS                        0x00000000 /* ----V */
#define NV_PMC_BOOT_0_FOUNDRY_HELIOS                     0x00000001 /* ----V */
#define NV_PMC_BOOT_0_FOUNDRY_TSMC                       0x00000002 /* C---V */
#define NV_PMC_BOOT_1                                    0x00000004 /* R--4R */
#define NV_PMC_BOOT_1_ENDIAN00                                  0:0 /* R--VF */
#define NV_PMC_BOOT_1_ENDIAN00_LITTLE                    0x00000000 /* R-I-V */
#define NV_PMC_BOOT_1_ENDIAN00_BIG                       0x00000001 /* R---V */
#define NV_PMC_BOOT_1_ENDIAN24                                24:24 /* RW-VF */
#define NV_PMC_BOOT_1_ENDIAN24_LITTLE                    0x00000000 /* RWI-V */
#define NV_PMC_BOOT_1_ENDIAN24_BIG                       0x00000001 /* RW--V */
#define NV_PMC_INTR_0                                    0x00000100 /* RW-4R */
#define NV_PMC_INTR_0_MD                                        0:0 /* R--VF */
#define NV_PMC_INTR_0_MD_NOT_PENDING                     0x00000000 /* R---V */
#define NV_PMC_INTR_0_MD_PENDING                         0x00000001 /* R---V */
#define NV_PMC_INTR_0_PMEDIA                                    4:4 /* R--VF */
#define NV_PMC_INTR_0_PMEDIA_NOT_PENDING                 0x00000000 /* R---V */
#define NV_PMC_INTR_0_PMEDIA_PENDING                     0x00000001 /* R---V */
#define NV_PMC_INTR_0_PFIFO                                     8:8 /* R--VF */
#define NV_PMC_INTR_0_PFIFO_NOT_PENDING                  0x00000000 /* R---V */
#define NV_PMC_INTR_0_PFIFO_PENDING                      0x00000001 /* R---V */
#define NV_PMC_INTR_0_REMAPPER                                  9:9 /* R--VF */
#define NV_PMC_INTR_0_REMAPPER_NOT_PENDING               0x00000000 /* R---V */
#define NV_PMC_INTR_0_REMAPPER_PENDING                   0x00000001 /* R---V */
#define NV_PMC_INTR_0_PGRAPH                                  12:12 /* R--VF */
#define NV_PMC_INTR_0_PGRAPH_NOT_PENDING                 0x00000000 /* R---V */
#define NV_PMC_INTR_0_PGRAPH_PENDING                     0x00000001 /* R---V */
#define NV_PMC_INTR_0_PVIDEO                                  16:16 /* R--VF */
#define NV_PMC_INTR_0_PVIDEO_NOT_PENDING                 0x00000000 /* R---V */
#define NV_PMC_INTR_0_PVIDEO_PENDING                     0x00000001 /* R---V */
#define NV_PMC_INTR_0_PTIMER                                  20:20 /* R--VF */
#define NV_PMC_INTR_0_PTIMER_NOT_PENDING                 0x00000000 /* R---V */
#define NV_PMC_INTR_0_PTIMER_PENDING                     0x00000001 /* R---V */
#define NV_PMC_INTR_0_PCRTC                                   24:24 /* R--VF */
#define NV_PMC_INTR_0_PCRTC_NOT_PENDING                  0x00000000 /* R---V */
#define NV_PMC_INTR_0_PCRTC_PENDING                      0x00000001 /* R---V */
#define NV_PMC_INTR_0_PCRTC2                                  25:25 /* R--VF */
#define NV_PMC_INTR_0_PCRTC2_NOT_PENDING                 0x00000000 /* R---V */
#define NV_PMC_INTR_0_PCRTC2_PENDING                     0x00000001 /* R---V */
#define NV_PMC_INTR_0_PBUS                                    28:28 /* R--VF */
#define NV_PMC_INTR_0_PBUS_NOT_PENDING                   0x00000000 /* R---V */
#define NV_PMC_INTR_0_PBUS_PENDING                       0x00000001 /* R---V */
#define NV_PMC_INTR_0_SOFTWARE                                31:31 /* RWIVF */
#define NV_PMC_INTR_0_SOFTWARE_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PMC_INTR_0_SOFTWARE_PENDING                   0x00000001 /* RW--V */
#define NV_PMC_INTR_EN_0                                 0x00000140 /* RW-4R */
#define NV_PMC_INTR_EN_0_INTA                                   1:0 /* RWIVF */
#define NV_PMC_INTR_EN_0_INTA_DISABLED                   0x00000000 /* RWI-V */
#define NV_PMC_INTR_EN_0_INTA_HARDWARE                   0x00000001 /* RW--V */
#define NV_PMC_INTR_EN_0_INTA_SOFTWARE                   0x00000002 /* RW--V */
#define NV_PMC_INTR_READ_0                               0x00000160 /* R--4R */
#define NV_PMC_INTR_READ_0_INTA                                 0:0 /* R--VF */
#define NV_PMC_INTR_READ_0_INTA_LOW                      0x00000000 /* R---V */
#define NV_PMC_INTR_READ_0_INTA_HIGH                     0x00000001 /* R---V */
#define NV_PMC_ENABLE                                    0x00000200 /* RW-4R */
#define NV_PMC_ENABLE_BUF_RESET                                 0:0 /* RWIVF */
#define NV_PMC_ENABLE_BUF_RESET_DISABLE                  0x00000000 /* RWI-V */
#define NV_PMC_ENABLE_BUF_RESET_ENABLE                   0x00000001 /* RW--V */
#define NV_PMC_ENABLE_MD_RESET                                  1:1 /* RWIVF */
#define NV_PMC_ENABLE_MD_RESET_DISABLE                   0x00000000 /* RWI-V */
#define NV_PMC_ENABLE_MD_RESET_ENABLE                    0x00000001 /* RW--V */
#define NV_PMC_ENABLE_PMEDIA                                    4:4 /* RWIVF */
#define NV_PMC_ENABLE_PMEDIA_DISABLED                    0x00000000 /* RWI-V */
#define NV_PMC_ENABLE_PMEDIA_ENABLED                     0x00000001 /* RW--V */
#define NV_PMC_ENABLE_PFIFO                                     8:8 /* RWIVF */
#define NV_PMC_ENABLE_PFIFO_DISABLED                     0x00000000 /* RWI-V */
#define NV_PMC_ENABLE_PFIFO_ENABLED                      0x00000001 /* RW--V */
#define NV_PMC_ENABLE_PGRAPH                                  12:12 /* RWIVF */
#define NV_PMC_ENABLE_PGRAPH_DISABLED                    0x00000000 /* RWI-V */
#define NV_PMC_ENABLE_PGRAPH_ENABLED                     0x00000001 /* RW--V */
#define NV_PMC_ENABLE_PPMI                                    16:16 /* RWIVF */
#define NV_PMC_ENABLE_PPMI_DISABLED                      0x00000000 /* RWI-V */
#define NV_PMC_ENABLE_PPMI_ENABLED                       0x00000001 /* RW--V */
#define NV_PMC_ENABLE_PFB                                     20:20 /* RWIVF */
#define NV_PMC_ENABLE_PFB_DISABLED                       0x00000000 /* RW--V */
#define NV_PMC_ENABLE_PFB_ENABLED                        0x00000001 /* RWI-V */
#define NV_PMC_ENABLE_PCRTC                                   24:24 /* RWIVF */
#define NV_PMC_ENABLE_PCRTC_DISABLED                     0x00000000 /* RW--V */
#define NV_PMC_ENABLE_PCRTC_ENABLED                      0x00000001 /* RWI-V */
#define NV_PMC_ENABLE_PCRTC2                                  25:25 /* RWIVF */
#define NV_PMC_ENABLE_PCRTC2_DISABLED                    0x00000000 /* RW--V */
#define NV_PMC_ENABLE_PCRTC2_ENABLED                     0x00000001 /* RWI-V */
#define NV_PMC_ENABLE_PVIDEO                                  28:28 /* RWIVF */
#define NV_PMC_ENABLE_PVIDEO_DISABLED                    0x00000000 /* RWI-V */
#define NV_PMC_ENABLE_PVIDEO_ENABLED                     0x00000001 /* RW--V */
#define NV_PMC_FRAME_PROTECT_MIN                         0x00000300 /* RW-4R */
#define NV_PMC_FRAME_PROTECT_MIN_VAL                           28:0 /* RWIVF */
#define NV_PMC_FRAME_PROTECT_MIN_VAL0                    0x00000000 /* RWI-V */
#define NV_PMC_FRAME_PROTECT_EN                               31:31 /* RWIVF */
#define NV_PMC_FRAME_PROTECT_DISABLED                    0x00000000 /* RWI-V */
#define NV_PMC_FRAME_PROTECT_ENABLED                     0x00000001 /* RWI-V */
#define NV_PMC_FRAME_PROTECT_MAX                         0x00000304 /* RW-4R */
#define NV_PMC_FRAME_PROTECT_MAX_VAL                           28:0 /* RWIVF */
#define NV_PMC_FRAME_PROTECT_MAX_VAL0                    0x00000000 /* RWI-V */
/* dev_bus.ref */
#define NV_PBUS                               0x00001FFF:0x00001000 /* RW--D */
#define NV_PBUS_DEBUG_0                                  0x00001080 /* RW-4R */
#define NV_PBUS_DEBUG_0_FBIO_SCLK_DELAY                         3:0 /* RWIUF */
#define NV_PBUS_DEBUG_0_FBIO_SCLK_DELAY_8                0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_SCLK_PC                            4:4 /* RWIVF */
#define NV_PBUS_DEBUG_0_FBIO_SCLK_PC_NORMAL              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_SCLK_PC_OVERRIDE            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_0_FBIO_FBCLK_DELAY                       11:8 /* RWIUF */
#define NV_PBUS_DEBUG_0_FBIO_FBCLK_DELAY_4               0x00000004 /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_FBCLK_DELAY_8               0x00000008 /* RW--V */
#define NV_PBUS_DEBUG_0_FBIO_FBCLK_PC                         12:12 /* RWIVF */
#define NV_PBUS_DEBUG_0_FBIO_FBCLK_PC_NORMAL             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_FBCLK_PC_OVERRIDE           0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_0_FBIO_ACLK_DELAY                       19:16 /* RWIUF */
#define NV_PBUS_DEBUG_0_FBIO_ACLK_DELAY_8                0x00000008 /* RW--V */
#define NV_PBUS_DEBUG_0_FBIO_ACLK_DELAY_10               0x0000000A /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_ACLK_PC                          20:20 /* RWIVF */
#define NV_PBUS_DEBUG_0_FBIO_ACLK_PC_NORMAL              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_ACLK_PC_OVERRIDE            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_0_FBIO_RCLK_DELAY                       27:24 /* RWIUF */
#define NV_PBUS_DEBUG_0_FBIO_RCLK_DELAY_8                0x00000008 /* RW--V */
#define NV_PBUS_DEBUG_0_FBIO_RCLK_DELAY_14               0x0000000E /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_RCLK_PC                          28:28 /* RWIVF */
#define NV_PBUS_DEBUG_0_FBIO_RCLK_PC_NORMAL              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_0_FBIO_RCLK_PC_OVERRIDE            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1                                  0x00001084 /* RW-4R */
#define NV_PBUS_DEBUG_1_PCIM_THROTTLE                           0:0 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIM_THROTTLE_DISABLED           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIM_THROTTLE_ENABLED            0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_1_PCIM_CMD                                1:1 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIM_CMD_SIZE_BASED              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_PCIM_CMD_MRL_ONLY                0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_HASH_DECODE                             2:2 /* RWIVF */
#define NV_PBUS_DEBUG_1_HASH_DECODE_1FF                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_HASH_DECODE_2FF                  0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_AGPM_CMD                                4:3 /* RWIVF */
#define NV_PBUS_DEBUG_1_AGPM_CMD_HP_ON_1ST               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_1_AGPM_CMD_LP_ONLY                 0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_1_AGPM_CMD_HP_ONLY                 0x00000002 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIS_WRITE                              5:5 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIS_WRITE_0_CYCLE               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIS_WRITE_1_CYCLE               0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_1_PCIS_2_1                                6:6 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIS_2_1_DISABLED                0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIS_2_1_ENABLED                 0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_1_RETRY                                   7:7 /* RWIVF */
#define NV_PBUS_DEBUG_1_RETRY_DISABLED                   0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_1_RETRY_ENABLED                    0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_1_PCIS_RD_BURST                           8:8 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIS_RD_BURST_DISABLED           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_PCIS_RD_BURST_ENABLED            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIS_WR_BURST                           9:9 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIS_WR_BURST_DISABLED           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_PCIS_WR_BURST_ENABLED            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIS_EARLY_RTY                        10:10 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIS_EARLY_RTY_DISABLED          0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIS_EARLY_RTY_ENABLED           0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_1_PCIS_CPUQ                             12:12 /* RWIVF */
#define NV_PBUS_DEBUG_1_PCIS_CPUQ_DISABLED               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_1_PCIS_CPUQ_ENABLED                0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_1_DPSH_DECODE                           13:13 /* RWIVF */
#define NV_PBUS_DEBUG_1_DPSH_DECODE_NV4                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_DPSH_DECODE_NV3                  0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_FBI_DIFFERENTIAL                      14:14 /* RWIVF */
#define NV_PBUS_DEBUG_1_FBI_DIFFERENTIAL_ENABLED         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_FBI_DIFFERENTIAL_DISABLED        0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_AGPFW_DWOD                            15:15 /* RWIVF */
#define NV_PBUS_DEBUG_1_AGPFW_DWOD_DISABLED              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_AGPFW_DWOD_ENABLED               0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_OPENGL                                16:16 /* R--VF */
#define NV_PBUS_DEBUG_1_OPENGL_OFF                       0x00000000 /* R---V */
#define NV_PBUS_DEBUG_1_OPENGL_ON                        0x00000001 /* R---V */
#define NV_PBUS_DEBUG_1_SPARE2                                17:17 /* RWIVF */
#define NV_PBUS_DEBUG_1_SPARE2_ZERO                      0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_SPARE2_ONE                       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_ACQUIRE_TIMEOUT                       18:18 /* RWIVF */
#define NV_PBUS_DEBUG_1_ACQUIRE_TIMEOUT_DISABLED         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_ACQUIRE_TIMEOUT_ENABLED          0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_SPARE4                                19:19 /* RWIVF */
#define NV_PBUS_DEBUG_1_SPARE4_ZERO                      0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_SPARE4_ONE                       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_SPARE5                                20:20 /* RWIVF */
#define NV_PBUS_DEBUG_1_SPARE5_ZERO                      0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_SPARE5_ONE                       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_AGPFW_ADIS                            21:21 /* RWIVF */
#define NV_PBUS_DEBUG_1_AGPFW_ADIS_ENABLED               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_AGPFW_ADIS_DISABLED              0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_SPARE7                                22:22 /* RWIVF */
#define NV_PBUS_DEBUG_1_SPARE7_ZERO                      0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_SPARE7_ONE                       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_SPARE8                                23:23 /* RWIVF */
#define NV_PBUS_DEBUG_1_SPARE8_ZERO                      0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_SPARE8_ONE                       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_AGP_DIN_SEL_SRC                       25:25 /* RWIVF */
#define NV_PBUS_DEBUG_1_AGP_DIN_SEL_SRC_HOST             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_AGP_DIN_SEL_SRC_ADSTB            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_PLL_PWRDWN                            26:26 /* RWIVF */
#define NV_PBUS_DEBUG_1_PLL_PWRDWN_DISABLE               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_PLL_PWRDWN_ENABLE                0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_PLL_STOPCLK                           27:27 /* RWIVF */
#define NV_PBUS_DEBUG_1_PLL_STOPCLK_DISABLE              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_PLL_STOPCLK_ENABLE               0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_1_CORE_SLOWDWN                          30:29 /* RWIVF */
#define NV_PBUS_DEBUG_1_CORE_SLOWDWN_DISABLE             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_1_CORE_SLOWDWN_ENABLE              0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_2                                  0x00001088 /* RW-4R */
#define NV_PBUS_DEBUG_2_AGP_VREF                                0:0 /* RWIVF */
#define NV_PBUS_DEBUG_2_AGP_VREF_DISABLED                0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_2_AGP_VREF_ENABLED                 0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_2_AGP_SB_STB_DELAY                        9:4 /* RWIUF */
#define NV_PBUS_DEBUG_2_AGP_SB_STB_DELAY_34              0x00000022 /* RWI-V */
#define NV_PBUS_DEBUG_2_AGP_AD_STB_DSE                        12:12 /* RWIVF */
#define NV_PBUS_DEBUG_2_AGP_AD_STB_DSE_OFF               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_2_AGP_AD_STB_DSE_ON                0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_2_SAGP_VREF                             16:16 /* RWIVF */
#define NV_PBUS_DEBUG_2_SAGP_VREF_DISABLED               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_2_SAGP_VREF_ENABLED                0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_2_SDSP_VREF                             20:20 /* RWIVF */
#define NV_PBUS_DEBUG_2_SDSP_VREF_DISABLED               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_2_SDSP_VREF_ENABLED                0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_3                                  0x0000108C /* RW-4R */
#define NV_PBUS_DEBUG_3_AGP_MAX_SIZE                            1:0 /* RWIVF */
#define NV_PBUS_DEBUG_3_AGP_MAX_SIZE_UNLIMITED           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_3_AGP_MAX_SIZE_32_BYTES            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_MAX_SIZE_64_BYTES            0x00000002 /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK                            7:4 /* RWIVF */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_66MHZ         0x00000005 /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_73MHZ         0x00000006 /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_80MHZ         0x00000007 /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_87MHZ         0x00000008 /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_94MHZ         0x00000009 /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_100MHZ        0x0000000A /* RWI-V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_106MHZ        0x0000000B /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_113MHZ        0x0000000C /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_120MHZ        0x0000000D /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_126MHZ        0x0000000E /* RW--V */
#define NV_PBUS_DEBUG_3_AGP_4X_NVCLK_ABOVE_133MHZ        0x0000000F /* RW--V */
#define NV_PBUS_DEBUG_CTL                                0x00001090 /* RW-4R */
#define NV_PBUS_DEBUG_CTL_MODE                                  0:0 /* RWIVF */
#define NV_PBUS_DEBUG_CTL_MODE_DISABLED                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTL_MODE_ENABLED                   0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTL_READ_SELECT                           4:4 /* RWIVF */
#define NV_PBUS_DEBUG_CTL_READ_SELECT_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTL_READ_SELECT_1                  0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_READ                               0x00001094 /* R--4R */
#define NV_PBUS_DEBUG_READ_DATA                                31:0 /* R-XUF */
#define NV_PBUS_DEBUG_HOST                               0x0000109C /* RW-4R */
#define NV_PBUS_DEBUG_HOST_SEL                                  3:0 /* RWXUF */
#define NV_PBUS_DEBUG_SEL_0                              0x000010A0 /* RW-4R */
#define NV_PBUS_DEBUG_SEL_FIELD                                 3:0 /* RWXUF */
#define NV_PBUS_DEBUG_SEL_1                              0x000010A4 /* RW-4R */
#define NV_PBUS_DEBUG_SEL_FIELD                                 3:0 /* RWXUF */
#define NV_PBUS_DEBUG_SEL_2                              0x000010A8 /* RW-4R */
#define NV_PBUS_DEBUG_SEL_FIELD                                 3:0 /* RWXUF */
#define NV_PBUS_DEBUG_SEL_3                              0x000010AC /* RW-4R */
#define NV_PBUS_DEBUG_SEL_FIELD                                 3:0 /* RWXUF */
#define NV_PBUS_DEBUG_CTRIM_0                            0x000010B0 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_0_INIT                       0x06236035 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_OPTIMAL                    0x06436013 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_NE_DELAY                       3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_NE_DELAY_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SE_DELAY                       7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SE_DELAY_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_NW_DELAY                      11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_NW_DELAY_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SW_DELAY                     15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SW_DELAY_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_M_NW_DELAY                      19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_M_NW_DELAY_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_M_SW_DELAY                      23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_M_SW_DELAY_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_U_NW_DELAY                      27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_U_NW_DELAY_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_U_SW_DELAY                      31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_U_SW_DELAY_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_NW_TRIM                        3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_NW_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_FE_TRIM                        7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_FE_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_CA_TRIM                       11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_CA_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_CS_TRIM                      15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_CS_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SH_TRIM                      19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SH_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SP_TRIM                      23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_SP_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_NV_FB_TRIM                      27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_NV_FB_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_0_SPARE_0                         31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_0_SPARE_0_8                  0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1                            0x000010B4 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_1_INIT                       0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_OPTIMAL                    0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_C0_DELAY                          3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C0_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_C1_DELAY                          7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C1_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_C2_DELAY                         11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C2_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_C3_DELAY                        15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C3_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_C4_DELAY                        19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C4_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_C5_DELAY                        23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C5_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_C6_DELAY                        27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C6_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_C7_DELAY                        31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_1_C7_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_M_SHAPE                           3:0 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_M_SHAPE_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_M_SHAPE_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_N_SHAPE                           7:4 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_N_SHAPE_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_N_SHAPE_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_PV1_SHAPE                        11:8 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_PV1_SHAPE_0                0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_PV1_SHAPE_INIT             0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_PV2_SHAPE                       15:12 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_PV2_SHAPE_0                0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_PV2_SHAPE_INIT             0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_FP1_SHAPE                       19:16 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_FP1_SHAPE_0                0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_FP1_SHAPE_INIT             0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_FPDP_SHAPE                      23:20 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_FPDP_SHAPE_0               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_FPDP_SHAPE_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_FPIO_SHAPE                      27:24 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_FPIO_SHAPE_0               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_FPIO_SHAPE_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_1_FPION_SHAPE                     31:28 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_1_FPION_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_1_FPION_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2                            0x000010B8 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_2_INIT                       0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_OPTIMAL                    0x33333333 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_C0_DELAY                          3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C0_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_C1_DELAY                          7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C1_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_C2_DELAY                         11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C2_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_C3_DELAY                        15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C3_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_C4_DELAY                        19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C4_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_C5_DELAY                        23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C5_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_C6_DELAY                        27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C6_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_C7_DELAY                        31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_2_C7_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_0_SHAPE                       3:0 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_0_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_0_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_1_SHAPE                       7:4 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_1_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_1_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_2_SHAPE                      11:8 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_2_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_2_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_3_SHAPE                     15:12 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_3_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2I_3_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_0_SHAPE                     19:16 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_0_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_0_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_1_SHAPE                     23:20 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_1_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_1_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_2_SHAPE                     27:24 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_2_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_2_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_3_SHAPE                     31:28 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_3_SHAPE_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_2_M2O_3_SHAPE_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3                            0x000010BC /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_3_INIT                       0x00001300 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_OPTIMAL                    0x00001300 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_C0_DELAY                          3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C0_DELAY_8                 0x00000003 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_C1_DELAY                          7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C1_DELAY_8                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_C2_DELAY                         11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C2_DELAY_8                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_C3_DELAY                        15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C3_DELAY_8                 0x00000003 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_C4_DELAY                        19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C4_DELAY_8                 0x00000002 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_C5_DELAY                        23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C5_DELAY_8                 0x00000002 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_C6_DELAY                        27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C6_DELAY_F                 0x0000000f /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_C7_DELAY                        31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_C7_DELAY_F                 0x0000000f /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_CCIR_CLK_OUT_TRIM                 3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_CCIR_CLK_OUT_TRIM_8        0x00000003 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_CCIR_CLK_OUT_TRIM_INIT     0x00000003 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_PCLK1_TRIM                        7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_PCLK1_TRIM_8               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_PCLK1_TRIM_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_VCLK1_TRIM                       11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_VCLK1_TRIM_8               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_VCLK1_TRIM_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_VSCLK_TRIM                      15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_VSCLK_TRIM_8               0x00000003 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_VSCLK_TRIM_INIT            0x00000003 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_PCLK2_TRIM                      19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_PCLK2_TRIM_8               0x00000002 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_PCLK2_TRIM_INIT            0x00000002 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_VCLK2_TRIM                      23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_VCLK2_TRIM_8               0x00000002 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_VCLK2_TRIM_INIT            0x00000002 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_NVCLK                    24:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_NVCLK_ENABLE        0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_NVCLK_EN_INIT       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_MCLK                     25:25 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_MCLK_ENABLE         0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_MCLK_EN_INIT        0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CLK4X                    26:26 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CLK4X_ENABLE        0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CLK4X_EN_INIT       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CCIR_O                   27:27 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CCIR_O_ENABLE       0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CCIR_O_EN_INIT      0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_VIP_HCLK                 28:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_VIP_HCLK_ENABLE     0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_VIP_HCLK_EN_INIT    0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_VCLK2                    29:29 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_VCLK2_ENABLE        0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_VCLK2_EN_INIT       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_PCLK                     30:30 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_PCLK_ENABLE         0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_PCLK_EN_INIT        0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CCIR2                    31:31 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CCIR2_ENABLE        0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_3_BYPASS_CCIR2_EN_INIT       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4                            0x000010C4 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_4_INIT                       0x46AB5081 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_OPTIMAL                    0x00432465 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_C0_DELAY                          3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C0_DELAY_8                 0x00000002 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_C1_DELAY                          7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C1_DELAY_8                 0x00000002 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_C2_DELAY                         11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C2_DELAY_8                 0x00000003 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_C3_DELAY                        15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C3_DELAY_8                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_C4_DELAY                        19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C4_DELAY_8                 0x0000000C /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_C5_DELAY                        23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C5_DELAY_8                 0x0000000B /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_C6_DELAY                        27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C6_DELAY_8                 0x0000000D /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_C7_DELAY                        31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_C7_DELAY_8                 0x0000000A /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_0_TRIM                        3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_0_TRIM_8               0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_0_TRIM_INIT            0x00000005 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_1_TRIM                        7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_1_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_1_TRIM_INIT            0x00000006 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_2_TRIM                       11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_2_TRIM_8               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_2_TRIM_INIT            0x00000004 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_3_TRIM                      15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_3_TRIM_8               0x00000005 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2I_3_TRIM_INIT            0x00000002 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_0_TRIM                      19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_0_TRIM_8               0x0000000B /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_0_TRIM_INIT            0x00000003 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_1_TRIM                      23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_1_TRIM_8               0x0000000A /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_1_TRIM_INIT            0x00000004 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_2_TRIM                      27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_2_TRIM_8               0x00000006 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_2_TRIM_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_3_TRIM                      31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_3_TRIM_8               0x00000004 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_4_M2O_3_TRIM_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5                            0x000010C8 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_5_INIT                       0x00401300 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_OPTIMAL                    0x000000FF /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_C0_DELAY                          3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C0_DELAY_8                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_C1_DELAY                          7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C1_DELAY_8                 0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_C2_DELAY                         11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C2_DELAY_8                 0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_C3_DELAY                        15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C3_DELAY_8                 0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_C4_DELAY                        19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C4_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_C5_DELAY                        23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C5_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_C6_DELAY                        27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C6_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_C7_DELAY                        31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_C7_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_FPIOCLK_TRIM                      3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_FPIOCLK_TRIM_8             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_FPIOCLK_TRIM_INIT          0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_FPIONCLK_TRIM                     7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_FPIONCLK_TRIM_8            0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_FPIONCLK_TRIM_INIT         0x00000008 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_FPDPCLK_TRIM                     11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_FPDPCLK_TRIM_8             0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_FPDPCLK_TRIM_INIT          0x00000008 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_FPCLK1_TRIM                     15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_FPCLK1_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_FPCLK1_TRIM_INIT           0x00000008 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_FPCLK2_TRIM                     19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_FPCLK2_TRIM_0              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_FPCLK2_TRIM_INIT           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_IFPCLK1_TRIM                    23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_IFPCLK1_TRIM_0             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_IFPCLK1_TRIM_INIT          0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_IFPCLK2_TRIM                    27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_IFPCLK2_TRIM_0             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_IFPCLK2_TRIM_INIT          0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_5_M_DELAY                         31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_5_M_DELAY_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_5_M_DELAY_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6                            0x000010CC /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_6_INIT                       0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_OPTIMAL                    0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_C0_DELAY                          3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C0_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_C1_DELAY                          7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C1_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_C2_DELAY                         11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C2_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_C3_DELAY                        15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C3_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_C4_DELAY                        19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C4_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_C5_DELAY                        23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C5_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_C6_DELAY                        27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C6_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_C7_DELAY                        31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_C7_DELAY_0                 0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_0_DELAY                  3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_0_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_0_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_1_DELAY                  7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_1_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_1_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_2_DELAY                 11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_2_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_2_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_3_DELAY                15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_3_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2I_3_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_0_DELAY                19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_0_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_0_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_1_DELAY                23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_1_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_1_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_2_DELAY                27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_2_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_2_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_3_DELAY                31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_3_DELAY_0         0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_6_FBIO_M2O_3_DELAY_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_AGPPLL                             0x000010C0 /* RW-4R */
#define NV_PBUS_DEBUG_AGPPLL_COEFF_MDIV                         7:0 /* RWIUF */
#define NV_PBUS_DEBUG_AGPPLL_COEFF_MDIV_1                0x00000001 /* RWI-V */
#define NV_PBUS_DEBUG_AGPPLL_COEFF_NDIV                        15:8 /* RWIUF */
#define NV_PBUS_DEBUG_AGPPLL_COEFF_NDIV_4                0x00000004 /* RWI-V */
#define NV_PBUS_DEBUG_AGPPLL_SETUP                            24:16 /* RWIUF */
#define NV_PBUS_DEBUG_AGPPLL_SETUP_DEFAULT               0x0000011C /* RWI-V */
#define NV_PBUS_DEBUG_AGPPLL_PWRDWN                           28:28 /* RWIVF */
#define NV_PBUS_DEBUG_AGPPLL_PWRDWN_ON                   0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_AGPPLL_PWRDWN_OFF                  0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_AGPPLL_STATUS                           31:31 /* R--VF */
#define NV_PBUS_DEBUG_AGPPLL_STATUS_NOTLOCKED            0x00000000 /* R---V */
#define NV_PBUS_DEBUG_AGPPLL_STATUS_LOCKED               0x00000001 /* R---V */
#define NV_PBUS_DEBUG_PORT                               0x000010D0 /* RW-4R */
#define NV_PBUS_DEBUG_PORT_MODE                                 0:0 /* RWIVF */
#define NV_PBUS_DEBUG_PORT_MODE_NORMAL                   0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PORT_MODE_AGP4X                    0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7                            0x000010D4 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_7_INIT                       0x00000002 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_OPTIMAL                    0x09000002 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_CCDP_TRIM                         3:0 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_CCDP_TRIM_0                0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_CCDP_TRIM_INIT             0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_CCDP_SHAPE                        7:4 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_CCDP_SHAPE_0               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_CCDP_SHAPE_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_CCIO_SHAPE                       11:8 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_CCIO_SHAPE_0               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_CCIO_SHAPE_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_FP2_SHAPE                       15:12 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_FP2_SHAPE_0                0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_FP2_SHAPE_INIT             0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_IFP1_SHAPE                      19:16 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_IFP1_SHAPE_0               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_IFP1_SHAPE_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_IFP2_SHAPE                      23:20 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_IFP2_SHAPE_0               0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_IFP2_SHAPE_INIT            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_PCLK1_DP_TRIM                   27:24 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_PCLK1_DP_TRIM_0            0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_PCLK1_DP_TRIM_INIT         0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_7_PCLK1_DP_SHAPE                  31:28 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_7_PCLK1_DP_SHAPE_0           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_7_PCLK1_DP_SHAPE_INIT        0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8                            0x000010D8 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_0                           3:0 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_0_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_0_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_1                           7:4 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_1_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_1_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_2                          11:8 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_2_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_2_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_3                         15:12 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_3_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_3_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_4                         19:16 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_4_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_4_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_5                         23:20 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_5_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_5_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_6                         27:24 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_6_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_6_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_7                         31:28 /* RWISF */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_7_0                  0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_8_DQSOB_7_INIT               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_9                            0x000010DC /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_9_INIT                       0x00003211 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_OPTIMAL                    0x00004301 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA0_TRIM                       3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA0_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA1_TRIM                       7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA1_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA2_TRIM                      11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA2_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA3_TRIM                     15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_PA3_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_CM_TRIM                      19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_CM_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_TM_TRIM                      23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_TM_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_XF_TRIM                      27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_XF_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_9_NV_NB_TRIM                      31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_9_NV_NB_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC                          0x000010E0 /* RW-4R */
#define NV_PBUS_DEBUG_PRIV_ASRC_0__ALIAS_1  NV_PBUS_DEBUG_PRIV_ASRC /*       */
#define NV_PBUS_DEBUG_PRIV_ASRC_EAST_SEL                      31:31 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_EAST_NORMAL              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_EAST_OVERIDE             0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_EAST_VALUE                    30:24 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_EAST_VALUE_0             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_SOUTH_SEL                     23:23 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_SOUTH_NORMAL             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_SOUTH_OVERIDE            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_SOUTH_VALUE                   22:16 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_SOUTH_VALUE_0            0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_WEST_SEL                      15:15 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_WEST_NORMAL              0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_WEST_OVERIDE             0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_WEST_VALUE                     14:8 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_WEST_VALUE_0             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_NORTH_SEL                       7:7 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_NORTH_NORMAL             0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_NORTH_OVERIDE            0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_NORTH_VALUE                     6:0 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_NORTH_VALUE_0            0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1                        0x000010E4 /* RW-4R */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_0_SEL                    31:31 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_0_NORMAL            0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_0_OVERIDE           0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_0_VALUE                  30:24 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_0_VALUE_0           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_1_SEL                    23:23 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_1_NORMAL            0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_1_OVERIDE           0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_1_VALUE                  22:16 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_1_VALUE_0           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_2_SEL                    15:15 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_2_NORMAL            0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_2_OVERIDE           0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_2_VALUE                   14:8 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_2_VALUE_0           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_3_SEL                      7:7 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_3_NORMAL            0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_3_OVERIDE           0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_3_VALUE                    6:0 /* RWIVF */
#define NV_PBUS_DEBUG_PRIV_ASRC_1_BK_3_VALUE_0           0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10                           0x000010E8 /* RW-4R */
#define NV_PBUS_DEBUG_CTRIM_10_INIT                      0x00021193 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_OPTIMAL                   0x00031163 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_10_M_NW_TRIM                        3:0 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_M_NW_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_M_FB_TRIM                        7:4 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_M_FB_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA0_TRIM                      11:8 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA0_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA1_TRIM                     15:12 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA1_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA2_TRIM                     19:16 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA2_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA3_TRIM                     23:20 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_M_PA3_TRIM_8              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_M_NB_TRIM                      27:24 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_M_NB_TRIM_8               0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_SPARE_1                        31:28 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_SPARE_1_INIT              0x00000008 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_BYPASS_MCLK2                   31:31 /* RWIUF */
#define NV_PBUS_DEBUG_CTRIM_10_BYPASS_MCLK2_DISABLE      0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_CTRIM_10_BYPASS_MCLK2_ENABLE       0x00000001 /* RW--V */
#define NV_PBUS_DEBUG_CTRIM_10_BYPASS_MCLK2_EN_INIT      0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_DUALHEAD_CTL                       0x000010F0 /* RW-4R */
#define NV_PBUS_DEBUG_DUALHEAD_CTL_BLAH                        31:0 /* RWIUF */
#define NV_PBUS_DEBUG_DUALHEAD_CTL_BLAH_0                0x00000000 /* RWI-V */
#define NV_PBUS_DEBUG_RDIBIST_CTL                        0x000010F4 /* RW-4R */
#define NV_PBUS_DEBUG_RDIBIST_CTL_RAM_FIRST                    10:0 /* RWXVF */
#define NV_PBUS_DEBUG_RDIBIST_CTL_RAM_FIRST_0            0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_RDIBIST_CTL_TEST                        15:15 /* RWIVF */
#define NV_PBUS_DEBUG_RDIBIST_CTL_TEST_GO                0x00000001 /* -W--V */
#define NV_PBUS_DEBUG_RDIBIST_CTL_TEST_RUNNING           0x00000001 /* R---V */
#define NV_PBUS_DEBUG_RDIBIST_CTL_TEST_DONE              0x00000000 /* R-I-V */
#define NV_PBUS_DEBUG_RDIBIST_CTL_RAM_LAST                    26:16 /* RWXVF */
#define NV_PBUS_DEBUG_RDIBIST_CTL_RAM_LAST_7FF           0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_RDIBIST_INDEX                      0x000010F8 /* RW-4R */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_ADDR                        4:0 /* RWXVF */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_ADDR_0               0x00000000 /* RW--V */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_31_0            0x00000000 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_63_32           0x00000001 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_95_64           0x00000002 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_127_96          0x00000003 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_159_128         0x00000004 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_191_160         0x00000005 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_223_192         0x00000006 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_255_224         0x00000007 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_287_256         0x00000008 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_319_288         0x00000009 /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_PASS_351_320         0x0000000A /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_FAIL_RAM             0x0000000B /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_FAIL_DWORD           0x0000000C /*       */
#define NV_PBUS_DEBUG_RDIBIST_INDEX_BIST_FAIL            0x0000000D /*       */
#define NV_PBUS_DEBUG_RDIBIST_DATA                       0x000010FC /* RW-4R */
#define NV_PBUS_DEBUG_RDIBIST_DATA_VALUE                       31:0 /* RWXVF */
#define NV_PBUS_INTR_0                                   0x00001100 /* RW-4R */
#define NV_PBUS_INTR_0_PCI_BUS_ERROR                            0:0 /* RWXVF */
#define NV_PBUS_INTR_0_PCI_BUS_ERROR_NOT_PENDING         0x00000000 /* R---V */
#define NV_PBUS_INTR_0_PCI_BUS_ERROR_PENDING             0x00000001 /* R---V */
#define NV_PBUS_INTR_0_PCI_BUS_ERROR_RESET               0x00000001 /* -W--V */
#define NV_PBUS_INTR_0_HOTPLUG                                  4:4 /* RWXVF */
#define NV_PBUS_INTR_0_HOTPLUG_NOT_PENDING               0x00000000 /* R---V */
#define NV_PBUS_INTR_0_HOTPLUG_PENDING                   0x00000001 /* R---V */
#define NV_PBUS_INTR_0_HOTPLUG_RESET                     0x00000001 /* -W--V */
#define NV_PBUS_INTR_EN_0                                0x00001140 /* RWI4R */
#define NV_PBUS_INTR_EN_0_PCI_BUS_ERROR                         0:0 /* RWIVF */
#define NV_PBUS_INTR_EN_0_PCI_BUS_ERROR_DISABLED         0x00000000 /* RWI-V */
#define NV_PBUS_INTR_EN_0_PCI_BUS_ERROR_ENABLED          0x00000001 /* RW--V */
#define NV_PBUS_INTR_EN_0_HOTPLUG                               4:4 /* RWIVF */
#define NV_PBUS_INTR_EN_0_HOTPLUG_DISABLED               0x00000000 /* RWI-V */
#define NV_PBUS_INTR_EN_0_HOTPLUG_ENABLED                0x00000001 /* RW--V */
#define NV_PBUS_ROM_CONFIG                               0x00001200 /* RWI4R */
#define NV_PBUS_ROM_CONFIG_TW1                                  5:0 /* RWIVF */
#define NV_PBUS_ROM_CONFIG_TW1_DEFAULT                   0x0000003F /* RWI-V */
#define NV_PBUS_ROM_CONFIG_TW0                                  7:6 /* RWIVF */
#define NV_PBUS_ROM_CONFIG_TW0_DEFAULT                   0x00000003 /* RWI-V */
#define NV_PBUS_FBIO_CFG                                 0x00001210 /* RW-4R */
#define NV_PBUS_FBIO_CFG_ADR_EDGE                               0:0 /* RWIVF */
#define NV_PBUS_FBIO_CFG_ADR_EDGE_QUARTER                0x00000000 /* RW--V */
#define NV_PBUS_FBIO_CFG_ADR_EDGE_HALF                   0x00000001 /* RWI-V */
#define NV_PBUS_FBIO_CFG_CLK_EDGE                               4:4 /* RWIVF */
#define NV_PBUS_FBIO_CFG_CLK_EDGE_NORMAL                 0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CFG_CLK_EDGE_EARLY                  0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CFG_DQS_EDGE                               8:8 /* RWIVF */
#define NV_PBUS_FBIO_CFG_DQS_EDGE_NORMAL                 0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CFG_DQS_EDGE_EARLY                  0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CFG_WRITE_DATA                           12:12 /* RWIVF */
#define NV_PBUS_FBIO_CFG_WRITE_DATA_STROBED              0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CFG_WRITE_DATA_CLOCKED              0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CFG_QUSE                                 17:16 /* RWIVF */
#define NV_PBUS_FBIO_CFG_QUSE_NORMAL                     0x00000000 /* RW--V */
#define NV_PBUS_FBIO_CFG_QUSE_ALWAYS                     0x00000001 /* RWI-V */
#define NV_PBUS_FBIO_CFG_QUSE_HOLD                       0x00000002 /* RW--V */
#define NV_PBUS_FBIO_CFG_QUSE_RESERVED                   0x00000003 /* RW--V */
#define NV_PBUS_FBIO_CFG_RESERVED0                            20:20 /* RWIVF */
#define NV_PBUS_FBIO_CFG_RESERVED0_0                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CFG_RESERVED0_1                     0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CFG_DQSEN                                25:24 /* RWIVF */
#define NV_PBUS_FBIO_CFG_DQSEN_NORMAL                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CFG_DQSEN_HOLD                      0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CFG_DQSEN_PULL                      0x00000002 /* RW--V */
#define NV_PBUS_FBIO_CFG_DQSEN_EXTENDED                  0x00000003 /* RW--V */
#define NV_PBUS_FBIO_CFG_DEN                                  27:26 /* RWIVF */
#define NV_PBUS_FBIO_CFG_DEN_NORMAL                      0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CFG_DEN_HOLD                        0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CFG_DEN_EARLY                       0x00000002 /* RW--V */
#define NV_PBUS_FBIO_CFG_DEN_EXTENDED                    0x00000003 /* RW--V */
#define NV_PBUS_FBIO_CFG_RESERVED1                            28:28 /* RWIVF */
#define NV_PBUS_FBIO_CFG_RESERVED1_0                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CFG_RESERVED1_1                     0x00000001 /* RW--V */
#define NV_PBUS_FBIO_DLY                                 0x00001214 /* RW-4R */
#define NV_PBUS_FBIO_DLY_DATAIB_A                               2:0 /* RWIUF */
#define NV_PBUS_FBIO_DLY_DATAIB_A_NONE                   0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DATAIB_A_FULL                   0x00000007 /* RW--V */
#define NV_PBUS_FBIO_DLY_CLKIC_A                                4:3 /* RWIUF */
#define NV_PBUS_FBIO_DLY_CLKIC_A_NONE                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_CLKIC_A_FULL                    0x00000003 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_A                                7:5 /* RWIUF */
#define NV_PBUS_FBIO_DLY_DQSIB_A_NONE                    0x00000000 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_A_INIT                    0x00000006 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DQSIB_A_FULL                    0x00000007 /* RW--V */
#define NV_PBUS_FBIO_DLY_DATAIB_B                              10:8 /* RWIUF */
#define NV_PBUS_FBIO_DLY_DATAIB_B_NONE                   0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DATAIB_B_FULL                   0x00000007 /* RW--V */
#define NV_PBUS_FBIO_DLY_CLKIC_B                              12:11 /* RWIUF */
#define NV_PBUS_FBIO_DLY_CLKIC_B_NONE                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_CLKIC_B_FULL                    0x00000003 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_B                              15:13 /* RWIUF */
#define NV_PBUS_FBIO_DLY_DQSIB_B_NONE                    0x00000000 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_B_INIT                    0x00000006 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DQSIB_B_FULL                    0x00000007 /* RW--V */
#define NV_PBUS_FBIO_DLY_DATAIB_C                             18:16 /* RWIUF */
#define NV_PBUS_FBIO_DLY_DATAIB_C_NONE                   0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DATAIB_C_FULL                   0x00000007 /* RW--V */
#define NV_PBUS_FBIO_DLY_CLKIC_C                              20:19 /* RWIUF */
#define NV_PBUS_FBIO_DLY_CLKIC_C_NONE                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_CLKIC_C_FULL                    0x00000003 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_C                              23:21 /* RWIUF */
#define NV_PBUS_FBIO_DLY_DQSIB_C_NONE                    0x00000000 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_C_INIT                    0x00000006 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DQSIB_C_FULL                    0x00000007 /* RW--V */
#define NV_PBUS_FBIO_DLY_DATAIB_D                             26:24 /* RWIUF */ 
#define NV_PBUS_FBIO_DLY_DATAIB_D_NONE                   0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DATAIB_D_FULL                   0x00000007 /* RW--V */
#define NV_PBUS_FBIO_DLY_CLKIC_D                              28:27 /* RWIUF */
#define NV_PBUS_FBIO_DLY_CLKIC_D_NONE                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_DLY_CLKIC_D_FULL                    0x00000003 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_D                              31:29 /* RWIUF */
#define NV_PBUS_FBIO_DLY_DQSIB_D_NONE                    0x00000000 /* RW--V */
#define NV_PBUS_FBIO_DLY_DQSIB_D_INIT                    0x00000006 /* RWI-V */
#define NV_PBUS_FBIO_DLY_DQSIB_D_FULL                    0x00000007 /* RW--V */
#define NV_PBUS_FBIO_RAM                                 0x00001218 /* RW-4R */
#define NV_PBUS_FBIO_RAM_DQS_SIZE                               0:0 /* RWIVF */
#define NV_PBUS_FBIO_RAM_DQS_SIZE_32                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_RAM_DQS_SIZE_8                      0x00000001 /* RW--V */
#define NV_PBUS_FBIO_RAM_TYPE                                   8:8 /* RWIUF */
#define NV_PBUS_FBIO_RAM_TYPE_DDR                        0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_RAM_TYPE_SDR                        0x00000001 /* RW--V */
#define NV_PBUS_FBIO_RAM_VREF                                 16:16 /* RWIUF */
#define NV_PBUS_FBIO_RAM_VREF_DISABLED                   0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_RAM_VREF_ENABLED                    0x00000001 /* RW--V */
#define NV_PBUS_FBIO_RAM_RESERVED0                            24:24 /* RWIUF */
#define NV_PBUS_FBIO_RAM_RESERVED0_0                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_RAM_RESERVED0_1                     0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALCNT                              0x0000121C /* RW-4R */
#define NV_PBUS_FBIO_CALCNT_COUNT                              31:0 /* RW-SF */
#define NV_PBUS_FBIO_CALCNT_OVERFLOW                          31:31 /* RW-VF */
#define NV_PBUS_FBIO_CALEN                               0x00001220 /* RW-4R */
#define NV_PBUS_FBIO_CALEN_VCC_A                                0:0 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCC_A_OFF                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCC_A_ON                      0x00000001 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCC_B                                1:1 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCC_B_OFF                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCC_B_ON                      0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_VCC_C                                2:2 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCC_C_OFF                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCC_C_ON                      0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_VCC_D                                3:3 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCC_D_OFF                     0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCC_D_ON                      0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_VCCQ_A                               8:8 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCCQ_A_OFF                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCCQ_A_ON                     0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_VCCQ_B                               9:9 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCCQ_B_OFF                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCCQ_B_ON                     0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_VCCQ_C                             10:10 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCCQ_C_OFF                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCCQ_C_ON                     0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_VCCQ_D                             11:11 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_VCCQ_D_OFF                    0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_VCCQ_D_ON                     0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_PN_A                               16:16 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_PN_A_OFF                      0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_PN_A_ON                       0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_PN_B                               17:17 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_PN_B_OFF                      0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_PN_B_ON                       0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_PN_C                               18:18 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_PN_C_OFF                      0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_PN_C_ON                       0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALEN_PN_D                               19:19 /* RWIVF */
#define NV_PBUS_FBIO_CALEN_PN_D_OFF                      0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALEN_PN_D_ON                       0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALPN                               0x00001224 /* R--4R */
#define NV_PBUS_FBIO_CALPN_A                                    4:0 /* R--VF */
#define NV_PBUS_FBIO_CALPN_B                                   12:8 /* R--VF */
#define NV_PBUS_FBIO_CALPN_C                                  20:16 /* R--VF */
#define NV_PBUS_FBIO_CALPN_D                                  28:24 /* R--VF */
#define NV_PBUS_FBIO_CALSEL                              0x00001228 /* RW-4R */
#define NV_PBUS_FBIO_CALSEL_SOURCE                              3:0 /* RW-VF */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCC_A                 0x00000000 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCC_B                 0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCC_C                 0x00000002 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCC_D                 0x00000003 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCCQ_A                0x00000004 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCCQ_B                0x00000005 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCCQ_C                0x00000006 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_VCCQ_D                0x00000007 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_PCI                   0x00000008 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_CORE                  0x00000009 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_RESERVED0             0x0000000A /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_RESERVED1             0x0000000B /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_RESERVED2             0x0000000C /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_RESERVED3             0x0000000D /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_RESERVED4             0x0000000E /* RW--V */
#define NV_PBUS_FBIO_CALSEL_SOURCE_RESERVED5             0x0000000F /* RW--V */
#define NV_PBUS_FBIO_CALSEL_REF_SEL                             8:8 /* RWIVF */
#define NV_PBUS_FBIO_CALSEL_REF_SEL_XTAL                 0x00000000 /* RWI-V */
#define NV_PBUS_FBIO_CALSEL_REF_SEL_PCICLK               0x00000001 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_REF_DIV                           19:16 /* RW-UF */
#define NV_PBUS_FBIO_CALSEL_REF_DIV_0                    0x00000000 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_REF_DIV_4                    0x00000004 /* RW--V */
#define NV_PBUS_FBIO_CALSEL_REF_DIV_16                   0x0000000F /* RW--V */
#define NV_PBUS_FBIO_ADRDRV                              0x0000122C /* RW-4R */
#define NV_PBUS_FBIO_ADRDRV_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_A_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_ADRDRV_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_A_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_ADRDRV_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_B_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_ADRDRV_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_B_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_ADRDRV_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_C_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_ADRDRV_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_C_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_ADRDRV_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_D_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_ADRDRV_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_ADRDRV_D_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV                              0x00001230 /* RW-4R */
#define NV_PBUS_FBIO_CLKDRV_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_A_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_A_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_B_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_B_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_C_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_C_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_D_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKDRV_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_CLKDRV_D_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV                              0x00001234 /* RW-4R */
#define NV_PBUS_FBIO_DATDRV_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_A_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_A_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_B_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_B_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_C_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_C_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_D_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATDRV_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_DATDRV_D_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV                              0x00001238 /* RW-4R */
#define NV_PBUS_FBIO_DQSDRV_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_A_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_A_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_B_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_B_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_C_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_C_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_D_FALL_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSDRV_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_DQSDRV_D_RISE_INIT                  0x00000007 /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW                              0x0000123C /* RW-4R */
#define NV_PBUS_FBIO_ADRSLW_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_A_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_A_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_B_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_B_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_C_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_C_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_D_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_ADRSLW_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_ADRSLW_D_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW                              0x00001240 /* RW-4R */
#define NV_PBUS_FBIO_CLKSLW_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_A_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_A_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_B_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_B_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_C_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_C_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_D_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_CLKSLW_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_CLKSLW_D_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATSLW                              0x00001244 /* RW-4R */
#define NV_PBUS_FBIO_DATSLW_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_A_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DATSLW_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_A_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATSLW_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_B_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DATSLW_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_B_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATSLW_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_C_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DATSLW_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_C_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DATSLW_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_D_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DATSLW_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_DATSLW_D_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW                              0x00001248 /* RW-4R */
#define NV_PBUS_FBIO_DQSSLW_A_FALL                              3:0 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_A_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW_A_RISE                              7:4 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_A_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW_B_FALL                             11:8 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_B_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW_B_RISE                            15:12 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_B_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW_C_FALL                            19:16 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_C_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW_C_RISE                            23:20 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_C_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW_D_FALL                            27:24 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_D_FALL_INIT                  0x0000000B /* RWIUV */
#define NV_PBUS_FBIO_DQSSLW_D_RISE                            31:28 /* RWIUF */
#define NV_PBUS_FBIO_DQSSLW_D_RISE_INIT                  0x00000008 /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL                            0x0000124C /* RW-4R */
#define NV_PBUS_DISPIO_PADCTL_DATSLW_FALL                       3:0 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_DATSLW_FALL_INIT           0x0000000B /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL_DATSLW_RISE                       7:4 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_DATSLW_RISE_INIT           0x00000008 /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL_DATDRV_FALL                      11:8 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_DATDRV_FALL_INIT           0x00000008 /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL_DATDRV_RISE                     15:12 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_DATDRV_RISE_INIT           0x00000007 /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL_STBSLW_FALL                     19:16 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_STBSLW_FALL_INIT           0x0000000B /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL_STBSLW_RISE                     23:20 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_STBSLW_RISE_INIT           0x00000008 /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL_STBDRV_FALL                     27:24 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_STBDRV_FALL_INIT           0x00000008 /* RWIUV */
#define NV_PBUS_DISPIO_PADCTL_STBDRV_RISE                     31:28 /* RWIUF */
#define NV_PBUS_DISPIO_PADCTL_STBDRV_RISE_INIT           0x00000007 /* RWIUV */
#define NV_PBUS_TVDIO_PADCTL                             0x00001250 /* RW-4R */
#define NV_PBUS_TVDIO_PADCTL_DATSLW_FALL                        3:0 /* RWIUF */
#define NV_PBUS_TVDIO_PADCTL_DATSLW_FALL_INIT            0x0000000B /* RWIUV */
#define NV_PBUS_TVDIO_PADCTL_DATSLW_RISE                        7:4 /* RWIUF */
#define NV_PBUS_TVDIO_PADCTL_DATSLW_RISE_INIT            0x00000008 /* RWIUV */
#define NV_PBUS_TVDIO_PADCTL_DATDRV_FALL                       11:8 /* RWIUF */
#define NV_PBUS_TVDIO_PADCTL_DATDRV_FALL_INIT            0x00000008 /* RWIUV */
#define NV_PBUS_TVDIO_PADCTL_DATDRV_RISE                      15:12 /* RWIUF */
#define NV_PBUS_TVDIO_PADCTL_DATDRV_RISE_INIT            0x00000007 /* RWIUV */
#define NV_PBUS_TVDIO_PADCTL_VREF                             31:31 /* RWIUF */
#define NV_PBUS_TVDIO_PADCTL_VREF_DISABLED               0x00000000 /* RWIUV */
#define NV_PBUS_TVDIO_PADCTL_VREF_ENABLED                0x00000001 /* RW-UV */
#define NV_PBUS_PRIV_ASRC_2                              0x00001254 /* RW-4R */
#define NV_PBUS_PRIV_ASRC_V33_OB                                7:0 /* RWIUF */
#define NV_PBUS_PRIV_ASRC_V33_OB_INIT                    0x00000000 /* RWIUV */
#define NV_PBUS_PRIV_ASRC_V25_OB                               15:8 /* RWIUF */
#define NV_PBUS_PRIV_ASRC_V25_OB_INIT                    0x00000000 /* RWIUV */
#define NV_PBUS_PRIV_ASRC_V33_IB                              22:16 /* R-XUF */
#define NV_PBUS_PRIV_ASRC_V25_IB                              30:24 /* R-XUF */
#define NV_PBUS_TVDIO_CALCNT                             0x00001260 /* RW-4R */
#define NV_PBUS_TVDIO_CALCNT_COUNT                             31:0 /* RW-SF */
#define NV_PBUS_TVDIO_CALCNT_OVERFLOW                         31:31 /* RW-VF */
#define NV_PBUS_TVDIO_CALEN                              0x00001264 /* RW-4R */
#define NV_PBUS_TVDIO_CALEN_VCC_A                               0:0 /* RWIVF */
#define NV_PBUS_TVDIO_CALEN_VCC_A_OFF                    0x00000000 /* RWI-V */
#define NV_PBUS_TVDIO_CALEN_VCC_A_ON                     0x00000001 /* RWI-V */
#define NV_PBUS_TVDIO_CALEN_VCCQ_A                              8:8 /* RWIVF */
#define NV_PBUS_TVDIO_CALEN_VCCQ_A_OFF                   0x00000000 /* RWI-V */
#define NV_PBUS_TVDIO_CALEN_VCCQ_A_ON                    0x00000001 /* RW--V */
#define NV_PBUS_TVDIO_CALEN_PN_A                              16:16 /* RWIVF */
#define NV_PBUS_TVDIO_CALEN_PN_A_OFF                     0x00000000 /* RWI-V */
#define NV_PBUS_TVDIO_CALEN_PN_A_ON                      0x00000001 /* RW--V */
#define NV_PBUS_TVDIO_CALPN                              0x00001268 /* R--4R */
#define NV_PBUS_TVDIO_CALPN_A                                   4:0 /* R--VF */
#define NV_PBUS_TVDIO_CALSEL                             0x0000126C /* RW-4R */
#define NV_PBUS_TVDIO_CALSEL_SOURCE                             3:0 /* RW-VF */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED0            0x00000000 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED1            0x00000001 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED2            0x00000002 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED3            0x00000003 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_VCCQ_A               0x00000004 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED4            0x00000005 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED5            0x00000006 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED6            0x00000007 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_PCI                  0x00000008 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_CORE                 0x00000009 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED7            0x0000000A /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED8            0x0000000B /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVED9            0x0000000C /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVEDA            0x0000000D /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVEDB            0x0000000E /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_SOURCE_RESERVEDC            0x0000000F /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_REF_SEL                            8:8 /* RWIVF */
#define NV_PBUS_TVDIO_CALSEL_REF_SEL_XTAL                0x00000000 /* RWI-V */
#define NV_PBUS_TVDIO_CALSEL_REF_SEL_PCICLK              0x00000001 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_REF_DIV                          19:16 /* RW-UF */
#define NV_PBUS_TVDIO_CALSEL_REF_DIV_0                   0x00000000 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_REF_DIV_4                   0x00000004 /* RW--V */
#define NV_PBUS_TVDIO_CALSEL_REF_DIV_16                  0x0000000F /* RW--V */
#define NV_PBUS_PCI_NV_0                                 0x00001800 /* R--4R */
#define NV_PBUS_PCI_NV_0__ALIAS_1                NV_CONFIG_PCI_NV_0 /*       */
#define NV_PBUS_PCI_NV_0_VENDOR_ID                             15:0 /* C--UF */
#define NV_PBUS_PCI_NV_0_VENDOR_ID_NVIDIA_SGS            0x000012D2 /* ----V */
#define NV_PBUS_PCI_NV_0_VENDOR_ID_NVIDIA                0x000010DE /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC                       18:16 /* C--UF */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_VGA              0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_ALT1             0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_ALT2             0x00000002 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_ALT3             0x00000003 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_LC0              0x00000004 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_LC1              0x00000005 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_LC2              0x00000006 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_FUNC_LC3              0x00000007 /* C---V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP                       31:19 /* C--UF */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV0              0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV1              0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV2              0x00000002 /* ----V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV3              0x00000003 /* ----V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV4              0x00000004 /* ----V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV5              0x00000005 /* ----V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV10             0x00000010 /* ----V */
#define NV_PBUS_PCI_NV_0_DEVICE_ID_CHIP_NV20             0x00000020 /* C---V */
#define NV_PBUS_PCI_NV_1                                 0x00001804 /* RW-4R */
#define NV_PBUS_PCI_NV_1__ALIAS_1                NV_CONFIG_PCI_NV_1 /*       */
#define NV_PBUS_PCI_NV_1_IO_SPACE                               0:0 /* RWIVF */
#define NV_PBUS_PCI_NV_1_IO_SPACE_DISABLED               0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_1_IO_SPACE_ENABLED                0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_1_MEMORY_SPACE                           1:1 /* RWIVF */
#define NV_PBUS_PCI_NV_1_MEMORY_SPACE_DISABLED           0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_1_MEMORY_SPACE_ENABLED            0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_1_BUS_MASTER                             2:2 /* RWIVF */
#define NV_PBUS_PCI_NV_1_BUS_MASTER_DISABLED             0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_1_BUS_MASTER_ENABLED              0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_1_WRITE_AND_INVAL                        4:4 /* C--VF */
#define NV_PBUS_PCI_NV_1_WRITE_AND_INVAL_DISABLED        0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_1_WRITE_AND_INVAL_ENABLED         0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_1_PALETTE_SNOOP                          5:5 /* RWIVF */
#define NV_PBUS_PCI_NV_1_PALETTE_SNOOP_DISABLED          0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_1_PALETTE_SNOOP_ENABLED           0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_1_CAPLIST                              20:20 /* C--VF */
#define NV_PBUS_PCI_NV_1_CAPLIST_NOT_PRESENT             0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_1_CAPLIST_PRESENT                 0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_1_66MHZ                                21:21 /* C--VF */
#define NV_PBUS_PCI_NV_1_66MHZ_INCAPABLE                 0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_1_66MHZ_CAPABLE                   0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_1_FAST_BACK2BACK                       23:23 /* C--VF */
#define NV_PBUS_PCI_NV_1_FAST_BACK2BACK_INCAPABLE        0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_1_FAST_BACK2BACK_CAPABLE          0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_1_DEVSEL_TIMING                        26:25 /* C--VF */
#define NV_PBUS_PCI_NV_1_DEVSEL_TIMING_FAST              0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_1_DEVSEL_TIMING_MEDIUM            0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_1_DEVSEL_TIMING_SLOW              0x00000002 /* ----V */
#define NV_PBUS_PCI_NV_1_SIGNALED_TARGET                      27:27 /* RWIVF */
#define NV_PBUS_PCI_NV_1_SIGNALED_TARGET_NO_ABORT        0x00000000 /* R-I-V */
#define NV_PBUS_PCI_NV_1_SIGNALED_TARGET_ABORT           0x00000001 /* R---V */
#define NV_PBUS_PCI_NV_1_SIGNALED_TARGET_CLEAR           0x00000001 /* -W--V */
#define NV_PBUS_PCI_NV_1_RECEIVED_TARGET                      28:28 /* RWIVF */
#define NV_PBUS_PCI_NV_1_RECEIVED_TARGET_NO_ABORT        0x00000000 /* R-I-V */
#define NV_PBUS_PCI_NV_1_RECEIVED_TARGET_ABORT           0x00000001 /* R---V */
#define NV_PBUS_PCI_NV_1_RECEIVED_TARGET_CLEAR           0x00000001 /* -W--V */
#define NV_PBUS_PCI_NV_1_RECEIVED_MASTER                      29:29 /* RWIVF */
#define NV_PBUS_PCI_NV_1_RECEIVED_MASTER_NO_ABORT        0x00000000 /* R-I-V */
#define NV_PBUS_PCI_NV_1_RECEIVED_MASTER_ABORT           0x00000001 /* R---V */
#define NV_PBUS_PCI_NV_1_RECEIVED_MASTER_CLEAR           0x00000001 /* -W--V */
#define NV_PBUS_PCI_NV_1_CFG2RMA_MAPPING                      30:30 /* RWIVF */
#define NV_PBUS_PCI_NV_1_CFG2RMA_MAPPING_DISABLED        0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_1_CFG2RMA_MAPPING_ENABLED         0x00000001 /* RW--V */ 
#define NV_PBUS_PCI_NV_2                                 0x00001808 /* R--4R */
#define NV_PBUS_PCI_NV_2__ALIAS_1                NV_CONFIG_PCI_NV_2 /*       */
#define NV_PBUS_PCI_NV_2_REVISION_ID                            7:0 /* C--UF */
#define NV_PBUS_PCI_NV_2_REVISION_ID_A01                 0x000000A1 /* C---V */
#define NV_PBUS_PCI_NV_2_REVISION_ID_B01                 0x000000B1 /* ----V */
#define NV_PBUS_PCI_NV_2_CLASS_CODE                            31:8 /* C--VF */
#define NV_PBUS_PCI_NV_2_CLASS_CODE_VGA                  0x00030000 /* C---V */
#define NV_PBUS_PCI_NV_2_CLASS_CODE_MULTIMEDIA           0x00048000 /* ----V */
#define NV_PBUS_PCI_NV_3                                 0x0000180C /* RW-4R */
#define NV_PBUS_PCI_NV_3__ALIAS_1                NV_CONFIG_PCI_NV_3 /*       */
#define NV_PBUS_PCI_NV_3_LATENCY_TIMER                        15:11 /* RWIUF */
#define NV_PBUS_PCI_NV_3_LATENCY_TIMER_0_CLOCKS          0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_3_LATENCY_TIMER_8_CLOCKS          0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_3_LATENCY_TIMER_240_CLOCKS        0x0000001E /* RW--V */
#define NV_PBUS_PCI_NV_3_LATENCY_TIMER_248_CLOCKS        0x0000001F /* RW--V */
#define NV_PBUS_PCI_NV_3_HEADER_TYPE                          23:16 /* C--VF */
#define NV_PBUS_PCI_NV_3_HEADER_TYPE_SINGLEFUNC          0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_3_HEADER_TYPE_MULTIFUNC           0x00000080 /* ----V */
#define NV_PBUS_PCI_NV_4                                 0x00001810 /* RW-4R */
#define NV_PBUS_PCI_NV_4__ALIAS_1                NV_CONFIG_PCI_NV_4 /*       */
#define NV_PBUS_PCI_NV_4_SPACE_TYPE                             0:0 /* C--VF */
#define NV_PBUS_PCI_NV_4_SPACE_TYPE_MEMORY               0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_4_SPACE_TYPE_IO                   0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_4_ADDRESS_TYPE                           2:1 /* C--VF */
#define NV_PBUS_PCI_NV_4_ADDRESS_TYPE_32_BIT             0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_4_ADDRESS_TYPE_20_BIT             0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_4_ADDRESS_TYPE_64_BIT             0x00000002 /* ----V */
#define NV_PBUS_PCI_NV_4_PREFETCHABLE                           3:3 /* C--VF */
#define NV_PBUS_PCI_NV_4_PREFETCHABLE_NOT                0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_4_PREFETCHABLE_MERGABLE           0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_4_BASE_ADDRESS                         31:24 /* RWXUF */
#define NV_PBUS_PCI_NV_5                                 0x00001814 /* RW-4R */
#define NV_PBUS_PCI_NV_5__ALIAS_1                NV_CONFIG_PCI_NV_5 /*       */
#define NV_PBUS_PCI_NV_5_SPACE_TYPE                             0:0 /* C--VF */
#define NV_PBUS_PCI_NV_5_SPACE_TYPE_MEMORY               0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_5_SPACE_TYPE_IO                   0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_5_ADDRESS_TYPE                           2:1 /* C--VF */
#define NV_PBUS_PCI_NV_5_ADDRESS_TYPE_32_BIT             0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_5_ADDRESS_TYPE_20_BIT             0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_5_ADDRESS_TYPE_64_BIT             0x00000002 /* ----V */
#define NV_PBUS_PCI_NV_5_PREFETCHABLE                           3:3 /* C--VF */
#define NV_PBUS_PCI_NV_5_PREFETCHABLE_NOT                0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_5_PREFETCHABLE_MERGABLE           0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_5_BASE_ADDRESS                         31:24 /* RWXUF */
#define NV_PBUS_PCI_NV_6                                 0x00001818 /* RW-4R */
#define NV_PBUS_PCI_NV_6__ALIAS_1                NV_CONFIG_PCI_NV_6 /*       */
#define NV_PBUS_PCI_NV_6_SPACE_TYPE                             0:0 /* C--VF */
#define NV_PBUS_PCI_NV_6_SPACE_TYPE_MEMORY               0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_6_SPACE_TYPE_IO                   0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_6_ADDRESS_TYPE                           2:1 /* C--VF */
#define NV_PBUS_PCI_NV_6_ADDRESS_TYPE_32_BIT             0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_6_ADDRESS_TYPE_20_BIT             0x00000001 /* ----V */
#define NV_PBUS_PCI_NV_6_ADDRESS_TYPE_64_BIT             0x00000002 /* ----V */
#define NV_PBUS_PCI_NV_6_PREFETCHABLE                           3:3 /* C--VF */
#define NV_PBUS_PCI_NV_6_PREFETCHABLE_NOT                0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_6_PREFETCHABLE_MERGABLE           0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_6_BASE_ADDRESS                         31:19 /* RWXUF */
#define NV_PBUS_PCI_NV_7(i)                      (0x0000181C+(i)*4) /* R--4A */
#define NV_PBUS_PCI_NV_7__SIZE_1                                  4 /*       */
#define NV_PBUS_PCI_NV_7__ALIAS_1                NV_CONFIG_PCI_NV_7 /*       */
#define NV_PBUS_PCI_NV_7_RESERVED                              31:0 /* C--VF */
#define NV_PBUS_PCI_NV_7_RESERVED_0                      0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_11                                0x0000182C /* R--4R */
#define NV_PBUS_PCI_NV_11__ALIAS_1              NV_CONFIG_PCI_NV_11 /*       */
#define NV_PBUS_PCI_NV_11_SUBSYSTEM_VENDOR_ID                  15:0 /* R--UF */
#define NV_PBUS_PCI_NV_11_SUBSYSTEM_VENDOR_ID_NONE       0x00000000 /* R---V */
#define NV_PBUS_PCI_NV_11_SUBSYSTEM_ID                        31:16 /* R--UF */
#define NV_PBUS_PCI_NV_11_SUBSYSTEM_ID_NONE              0x00000000 /* R---V */
#define NV_PBUS_PCI_NV_12                                0x00001830 /* RW-4R */
#define NV_PBUS_PCI_NV_12__ALIAS_1              NV_CONFIG_PCI_NV_12 /*       */
#define NV_PBUS_PCI_NV_12_ROM_DECODE                            0:0 /* RWIVF */
#define NV_PBUS_PCI_NV_12_ROM_DECODE_DISABLED            0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_12_ROM_DECODE_ENABLED             0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_12_ROM_BASE                            31:16 /* RWXUF */
#define NV_PBUS_PCI_NV_13                                0x00001834 /* RW-4R */
#define NV_PBUS_PCI_NV_13__ALIAS_1              NV_CONFIG_PCI_NV_13 /*       */
#define NV_PBUS_PCI_NV_13_CAP_PTR                               7:0 /* C--VF */
#define NV_PBUS_PCI_NV_13_CAP_PTR_AGP                    0x00000044 /* ----V */
#define NV_PBUS_PCI_NV_13_CAP_PTR_POWER_MGMT             0x00000060 /* C---V */
#define NV_PBUS_PCI_NV_14                                0x00001838 /* R--4R */
#define NV_PBUS_PCI_NV_14__ALIAS_1              NV_CONFIG_PCI_NV_14 /*       */
#define NV_PBUS_PCI_NV_14_RESERVED                             31:0 /* C--VF */
#define NV_PBUS_PCI_NV_14_RESERVED_0                     0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_15                                0x0000183C /* RW-4R */
#define NV_PBUS_PCI_NV_15__ALIAS_1              NV_CONFIG_PCI_NV_15 /*       */
#define NV_PBUS_PCI_NV_15_INTR_LINE                             7:0 /* RWIVF */
#define NV_PBUS_PCI_NV_15_INTR_LINE_IRQ0                 0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_15_INTR_LINE_IRQ1                 0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_15_INTR_LINE_IRQ15                0x0000000F /* RW--V */
#define NV_PBUS_PCI_NV_15_INTR_LINE_UNKNOWN              0x000000FF /* RW--V */
#define NV_PBUS_PCI_NV_15_INTR_PIN                             15:8 /* C--VF */
#define NV_PBUS_PCI_NV_15_INTR_PIN_INTA                  0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_15_MIN_GNT                             23:16 /* C--VF */
#define NV_PBUS_PCI_NV_15_MIN_GNT_NO_REQUIREMENTS        0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_15_MIN_GNT_750NS                  0x00000003 /* ----V */
#define NV_PBUS_PCI_NV_15_MIN_GNT_1250NS                 0x00000005 /* C---V */
#define NV_PBUS_PCI_NV_15_MAX_LAT                             31:24 /* C--VF */
#define NV_PBUS_PCI_NV_15_MAX_LAT_NO_REQUIREMENTS        0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_15_MAX_LAT_250NS                  0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_16                                0x00001840 /* RW-4R */
#define NV_PBUS_PCI_NV_16__ALIAS_1              NV_CONFIG_PCI_NV_16 /*       */
#define NV_PBUS_PCI_NV_16_SUBSYSTEM_VENDOR_ID                  15:0 /* RW-VF */
#define NV_PBUS_PCI_NV_16_SUBSYSTEM_VENDOR_ID_NONE       0x00000000 /* R---V */
#define NV_PBUS_PCI_NV_16_SUBSYSTEM_ID                        31:16 /* RW-VF */
#define NV_PBUS_PCI_NV_16_SUBSYSTEM_ID_NONE              0x00000000 /* R---V */
#define NV_PBUS_PCI_NV_17                                0x00001844 /* RW-4R */
#define NV_PBUS_PCI_NV_17__ALIAS_1              NV_CONFIG_PCI_NV_17 /*       */
#define NV_PBUS_PCI_NV_17_AGP_REV_MAJOR                       23:20 /* C--VF */
#define NV_PBUS_PCI_NV_17_AGP_REV_MAJOR_1                0x00000002 /* C---V */
#define NV_PBUS_PCI_NV_17_AGP_REV_MINOR                       19:16 /* C--VF */
#define NV_PBUS_PCI_NV_17_AGP_REV_MINOR_0                0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_17_NEXT_PTR                             15:8 /* C--VF */
#define NV_PBUS_PCI_NV_17_NEXT_PTR_NULL                  0x00000000 /* C---V */
#define NV_PBUS_PCI_NV_17_CAP_ID                                7:0 /* C--VF */
#define NV_PBUS_PCI_NV_17_CAP_ID_AGP                     0x00000002 /* C---V */
#define NV_PBUS_PCI_NV_18                                0x00001848 /* RW-4R */
#define NV_PBUS_PCI_NV_18__ALIAS_1              NV_CONFIG_PCI_NV_18 /*       */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RQ                       31:24 /* C--VF */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RQ_32               0x0000001F /* C---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_SBA                        9:9 /* R--VF */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_SBA_NONE            0x00000000 /* R---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_SBA_CAPABLE         0x00000001 /* R---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_FW                         4:4 /* R--VF */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_FW_NONE             0x00000000 /* R---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_FW_CAPABLE          0x00000001 /* R---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RATE                       2:0 /* R--VF */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RATE_1X             0x00000001 /* R---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RATE_2X             0x00000002 /* ----V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RATE_1X_AND_2X      0x00000003 /* R---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RATE_4X             0x00000004 /* R---V */
#define NV_PBUS_PCI_NV_18_AGP_STATUS_RATE_1X_2X_4X       0x00000007 /* R---V */
#define NV_PBUS_PCI_NV_19                                0x0000184C /* RW-4R */
#define NV_PBUS_PCI_NV_19__ALIAS_1              NV_CONFIG_PCI_NV_19 /*       */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_RQ_DEPTH                28:24 /* RWIVF */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_RQ_DEPTH_0         0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_SBA_ENABLE                9:9 /* RWIVF */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_SBA_ENABLE_OFF     0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_SBA_ENABLE_ON      0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_AGP_ENABLE                8:8 /* RWIVF */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_AGP_ENABLE_OFF     0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_AGP_ENABLE_ON      0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_FW_ENABLE                 4:4 /* RWIVF */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_FW_ENABLE_OFF      0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_FW_ENABLE_ON       0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_DATA_RATE                 2:0 /* RWIVF */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_DATA_RATE_OFF      0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_DATA_RATE_1X       0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_DATA_RATE_2X       0x00000002 /* RW--V */
#define NV_PBUS_PCI_NV_19_AGP_COMMAND_DATA_RATE_4X       0x00000004 /* RW--V */
#define NV_PBUS_PCI_NV_20                                0x00001850 /* RW-4R */
#define NV_PBUS_PCI_NV_20__ALIAS_1              NV_CONFIG_PCI_NV_20 /*       */
#define NV_PBUS_PCI_NV_20_ROM_SHADOW                            0:0 /* RWIVF */
#define NV_PBUS_PCI_NV_20_ROM_SHADOW_DISABLED            0x00000000 /* RWI-V */
#define NV_PBUS_PCI_NV_20_ROM_SHADOW_ENABLED             0x00000001 /* RW--V */
#define NV_PBUS_PCI_NV_21                                0x00001854 /* RW-4R */
#define NV_PBUS_PCI_NV_21__ALIAS_1              NV_CONFIG_PCI_NV_21 /*       */
#define NV_PBUS_PCI_NV_21_VGA                                   0:0 /* RWIVF */
#define NV_PBUS_PCI_NV_21_VGA_DISABLED                   0x00000000 /* RW--V */
#define NV_PBUS_PCI_NV_21_VGA_ENABLED                    0x00000001 /* RWI-V */
#define NV_PBUS_PCI_NV_22                                0x00001858 /* RW-4R */
#define NV_PBUS_PCI_NV_22__ALIAS_1              NV_CONFIG_PCI_NV_22 /*       */
#define NV_PBUS_PCI_NV_22_SCRATCH                              23:0 /* RWIVF */
#define NV_PBUS_PCI_NV_22_SCRATCH_DEFAULT                0x0023D6CE /* RWI-V */
#define NV_PBUS_PCI_NV_23                                0x0000185C /* RW-4R */
#define NV_PBUS_PCI_NV_23__ALIAS_1              NV_CONFIG_PCI_NV_23 /*       */
#define NV_PBUS_PCI_NV_23_DT_TIMEOUT                            3:0 /* RWIVF */
#define NV_PBUS_PCI_NV_23_DT_TIMEOUT_16                  0x0000000F /* RWI-V */
#define NV_PBUS_PCI_NV_24                                0x00001860 /* RW-4R */
#define NV_PBUS_PCI_NV_24__ALIAS_1              NV_CONFIG_PCI_NV_24 /*       */
#define NV_PBUS_PCI_NV_24_PME_D3_COLD                         31:31 /* C--VF */
#define NV_PBUS_PCI_NV_24_PME_D3_COLD_SUPPORTED          0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_PME_D3_COLD_NOT_SUPPORTED      0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_PME_D3_HOT                          30:30 /* C--VF */
#define NV_PBUS_PCI_NV_24_PME_D3_HOT_SUPPORTED           0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_PME_D3_HOT_NOT_SUPPORTED       0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_PME_D2                              29:29 /* C--VF */
#define NV_PBUS_PCI_NV_24_PME_D2_SUPPORTED               0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_PME_D2_NOT_SUPPORTED           0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_PME_D1                              28:28 /* C--VF */
#define NV_PBUS_PCI_NV_24_PME_D1_SUPPORTED               0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_PME_D1_NOT_SUPPORTED           0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_PME_D0                              27:27 /* C--VF */
#define NV_PBUS_PCI_NV_24_PME_D0_SUPPORTED               0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_PME_D0_NOT_SUPPORTED           0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_D2                                  26:26 /* C--VF */
#define NV_PBUS_PCI_NV_24_D2_SUPPORTED                   0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_D2_NOT_SUPPORTED               0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_D1                                  25:25 /* C--VF */
#define NV_PBUS_PCI_NV_24_D1_SUPPORTED                   0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_D1_NOT_SUPPORTED               0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_DSI                                 21:21 /* C--VF */
#define NV_PBUS_PCI_NV_24_DSI_NOT_REQUIRED               0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_PME_CLOCK                           19:19 /* C--VF */
#define NV_PBUS_PCI_NV_24_PME_CLOCK_NOT_REQUIRED         0x00000000 /* C--VV */
#define NV_PBUS_PCI_NV_24_VERSION                             18:16 /* C--VF */
#define NV_PBUS_PCI_NV_24_VERSION_1                      0x00000001 /* ---VV */
#define NV_PBUS_PCI_NV_24_VERSION_2                      0x00000002 /* C--VV */
#define NV_PBUS_PCI_NV_24_NEXT_PTR                             15:8 /* R--VF */
#define NV_PBUS_PCI_NV_24_NEXT_PTR_NULL                  0x00000000 /* ----V */
#define NV_PBUS_PCI_NV_24_NEXT_PTR_AGP                   0x00000044 /* ----V */
#define NV_PBUS_PCI_NV_24_CAP_ID                                7:0 /* C--VF */
#define NV_PBUS_PCI_NV_24_CAP_ID_POWER_MGMT              0x00000001 /* C---V */
#define NV_PBUS_PCI_NV_25                                0x00001864 /* RW-4R */
#define NV_PBUS_PCI_NV_25__ALIAS_1              NV_CONFIG_PCI_NV_25 /*       */
#define NV_PBUS_PCI_NV_25_POWER_STATE                           1:0 /* RWIVF */
#define NV_PBUS_PCI_NV_25_POWER_STATE_D3_HOT             0x00000003 /* RW-VV */
#define NV_PBUS_PCI_NV_25_POWER_STATE_D0                 0x00000000 /* RWIVV */
#define NV_PBUS_PCI_NV_26(i)                     (0x00001868+(i)*4) /* R--4A */
#define NV_PBUS_PCI_NV_26__SIZE_1                                38 /*       */
#define NV_PBUS_PCI_NV_26__ALIAS_1              NV_CONFIG_PCI_NV_25 /*       */
#define NV_PBUS_PCI_NV_26_RESERVED                             31:0 /* C--VF */
#define NV_PBUS_PCI_NV_26_RESERVED_0                     0x00000000 /* C---V */
/* dev_fifo.ref */
#define NV_PFIFO                              0x00003FFF:0x00002000 /* RW--D */
#define NV_PFIFO_DELAY_0                                 0x00002040 /* RW-4R */
#define NV_PFIFO_DELAY_0_WAIT_RETRY                             9:0 /* RWIUF */
#define NV_PFIFO_DELAY_0_WAIT_RETRY_0                    0x00000000 /* RWI-V */
#define NV_PFIFO_DELAY_1                                 0x00002054 /* RW-4R */
#define NV_PFIFO_DELAY_1_ACQUIRE_WAIT                           9:0 /* RWIUF */
#define NV_PFIFO_DELAY_1_ACQUIRE_WAIT_2                  0x00000002 /* RWI-V */
#define NV_PFIFO_DMA_TIMESLICE                           0x00002044 /* RW-4R */
#define NV_PFIFO_DMA_TIMESLICE_SELECT                          16:0 /* RWIUF */
#define NV_PFIFO_DMA_TIMESLICE_SELECT_1                  0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_TIMESLICE_SELECT_16K                0x00003fff /* RW--V */
#define NV_PFIFO_DMA_TIMESLICE_SELECT_32K                0x00007fff /* RW--V */
#define NV_PFIFO_DMA_TIMESLICE_SELECT_64K                0x0000ffff /* RW--V */
#define NV_PFIFO_DMA_TIMESLICE_SELECT_128K               0x0001ffff /* RW--V */
#define NV_PFIFO_DMA_TIMESLICE_TIMEOUT                        24:24 /* RWIUF */
#define NV_PFIFO_DMA_TIMESLICE_TIMEOUT_DISABLED          0x00000000 /* RW--V */
#define NV_PFIFO_DMA_TIMESLICE_TIMEOUT_ENABLED           0x00000001 /* RWI-V */
#define NV_PFIFO_PIO_TIMESLICE                           0x00002048 /* RW-4R */
#define NV_PFIFO_PIO_TIMESLICE_SELECT                          16:0 /* RWIUF */
#define NV_PFIFO_PIO_TIMESLICE_SELECT_1                  0x00000000 /* RWI-V */
#define NV_PFIFO_PIO_TIMESLICE_SELECT_16K                0x00003fff /* RW--V */
#define NV_PFIFO_PIO_TIMESLICE_SELECT_32K                0x00007fff /* RW--V */
#define NV_PFIFO_PIO_TIMESLICE_SELECT_64K                0x0000ffff /* RW--V */
#define NV_PFIFO_PIO_TIMESLICE_SELECT_128K               0x0001ffff /* RW--V */
#define NV_PFIFO_PIO_TIMESLICE_TIMEOUT                        24:24 /* RWIUF */
#define NV_PFIFO_PIO_TIMESLICE_TIMEOUT_DISABLED          0x00000000 /* RW--V */
#define NV_PFIFO_PIO_TIMESLICE_TIMEOUT_ENABLED           0x00000001 /* RWI-V */
#define NV_PFIFO_TIMESLICE                               0x0000204C /* RW-4R */
#define NV_PFIFO_TIMESLICE_TIMER                               17:0 /* RWIUF */
#define NV_PFIFO_TIMESLICE_TIMER_EXPIRED                 0x0003FFFF /* RWI-V */
#define NV_PFIFO_NEXT_CHANNEL                            0x00002050 /* RW-4R */
#define NV_PFIFO_NEXT_CHANNEL_CHID                              4:0 /* RWXUF */
#define NV_PFIFO_NEXT_CHANNEL_MODE                              8:8 /* RWXVF */
#define NV_PFIFO_NEXT_CHANNEL_MODE_PIO                   0x00000000 /* RW--V */
#define NV_PFIFO_NEXT_CHANNEL_MODE_DMA                   0x00000001 /* RW--V */
#define NV_PFIFO_NEXT_CHANNEL_SWITCH                          12:12 /* RWIVF */
#define NV_PFIFO_NEXT_CHANNEL_SWITCH_NOT_PENDING         0x00000000 /* RWI-V */
#define NV_PFIFO_NEXT_CHANNEL_SWITCH_PENDING             0x00000001 /* RW--V */
#define NV_PFIFO_DEBUG_0                                 0x00002080 /* R--4R */
#define NV_PFIFO_DEBUG_0_CACHE_ERROR0                           0:0 /* R-XVF */
#define NV_PFIFO_DEBUG_0_CACHE_ERROR0_NOT_PENDING        0x00000000 /* R---V */
#define NV_PFIFO_DEBUG_0_CACHE_ERROR0_PENDING            0x00000001 /* R---V */
#define NV_PFIFO_DEBUG_0_CACHE_ERROR1                           4:4 /* R-XVF */
#define NV_PFIFO_DEBUG_0_CACHE_ERROR1_NOT_PENDING        0x00000000 /* R---V */
#define NV_PFIFO_DEBUG_0_CACHE_ERROR1_PENDING            0x00000001 /* R---V */
#define NV_PFIFO_INTR_0                                  0x00002100 /* RW-4R */
#define NV_PFIFO_INTR_0_CACHE_ERROR                             0:0 /* RWXVF */
#define NV_PFIFO_INTR_0_CACHE_ERROR_NOT_PENDING          0x00000000 /* R---V */
#define NV_PFIFO_INTR_0_CACHE_ERROR_PENDING              0x00000001 /* R---V */
#define NV_PFIFO_INTR_0_CACHE_ERROR_RESET                0x00000001 /* -W--V */
#define NV_PFIFO_INTR_0_RUNOUT                                  4:4 /* RWXVF */
#define NV_PFIFO_INTR_0_RUNOUT_NOT_PENDING               0x00000000 /* R---V */
#define NV_PFIFO_INTR_0_RUNOUT_PENDING                   0x00000001 /* R---V */
#define NV_PFIFO_INTR_0_RUNOUT_RESET                     0x00000001 /* -W--V */
#define NV_PFIFO_INTR_0_RUNOUT_OVERFLOW                         8:8 /* RWXVF */
#define NV_PFIFO_INTR_0_RUNOUT_OVERFLOW_NOT_PENDING      0x00000000 /* R---V */
#define NV_PFIFO_INTR_0_RUNOUT_OVERFLOW_PENDING          0x00000001 /* R---V */
#define NV_PFIFO_INTR_0_RUNOUT_OVERFLOW_RESET            0x00000001 /* -W--V */
#define NV_PFIFO_INTR_0_DMA_PUSHER                            12:12 /* RWXVF */
#define NV_PFIFO_INTR_0_DMA_PUSHER_NOT_PENDING           0x00000000 /* R---V */
#define NV_PFIFO_INTR_0_DMA_PUSHER_PENDING               0x00000001 /* R---V */
#define NV_PFIFO_INTR_0_DMA_PUSHER_RESET                 0x00000001 /* -W--V */
#define NV_PFIFO_INTR_0_DMA_PT                                16:16 /* RWXVF */
#define NV_PFIFO_INTR_0_DMA_PT_NOT_PENDING               0x00000000 /* R---V */
#define NV_PFIFO_INTR_0_DMA_PT_PENDING                   0x00000001 /* R---V */
#define NV_PFIFO_INTR_0_DMA_PT_RESET                     0x00000001 /* -W--V */
#define NV_PFIFO_INTR_0_SEMAPHORE                             20:20 /* RWXVF */
#define NV_PFIFO_INTR_0_SEMAPHORE_NOT_PENDING            0x00000000 /* R---V */
#define NV_PFIFO_INTR_0_SEMAPHORE_PENDING                0x00000001 /* R---V */
#define NV_PFIFO_INTR_0_SEMAPHORE_RESET                  0x00000001 /* -W--V */
#define NV_PFIFO_INTR_0_ACQUIRE_TIMEOUT                       24:24 /* RWXVF */
#define NV_PFIFO_INTR_0_ACQUIRE_TIMEOUT_NOT_PENDING      0x00000000 /* R---V */
#define NV_PFIFO_INTR_0_ACQUIRE_TIMEOUT_PENDING          0x00000001 /* R---V */
#define NV_PFIFO_INTR_0_ACQUIRE_TIMEOUT_RESET            0x00000001 /* -W--V */
#define NV_PFIFO_INTR_EN_0                               0x00002140 /* RW-4R */
#define NV_PFIFO_INTR_EN_0_CACHE_ERROR                          0:0 /* RWIVF */
#define NV_PFIFO_INTR_EN_0_CACHE_ERROR_DISABLED          0x00000000 /* RWI-V */
#define NV_PFIFO_INTR_EN_0_CACHE_ERROR_ENABLED           0x00000001 /* RW--V */
#define NV_PFIFO_INTR_EN_0_RUNOUT                               4:4 /* RWIVF */
#define NV_PFIFO_INTR_EN_0_RUNOUT_DISABLED               0x00000000 /* RWI-V */
#define NV_PFIFO_INTR_EN_0_RUNOUT_ENABLED                0x00000001 /* RW--V */
#define NV_PFIFO_INTR_EN_0_RUNOUT_OVERFLOW                      8:8 /* RWIVF */
#define NV_PFIFO_INTR_EN_0_RUNOUT_OVERFLOW_DISABLED      0x00000000 /* RWI-V */
#define NV_PFIFO_INTR_EN_0_RUNOUT_OVERFLOW_ENABLED       0x00000001 /* RW--V */
#define NV_PFIFO_INTR_EN_0_DMA_PUSHER                         12:12 /* RWIVF */
#define NV_PFIFO_INTR_EN_0_DMA_PUSHER_DISABLED           0x00000000 /* RWI-V */
#define NV_PFIFO_INTR_EN_0_DMA_PUSHER_ENABLED            0x00000001 /* RW--V */
#define NV_PFIFO_INTR_EN_0_DMA_PT                             16:16 /* RWIVF */
#define NV_PFIFO_INTR_EN_0_DMA_PT_DISABLED               0x00000000 /* RWI-V */
#define NV_PFIFO_INTR_EN_0_DMA_PT_ENABLED                0x00000001 /* RW--V */
#define NV_PFIFO_INTR_EN_0_SEMAPHORE                          20:20 /* RWIVF */
#define NV_PFIFO_INTR_EN_0_SEMAPHORE_DISABLED            0x00000000 /* RWI-V */
#define NV_PFIFO_INTR_EN_0_SEMAPHORE_ENABLED             0x00000001 /* RW--V */
#define NV_PFIFO_INTR_EN_0_ACQUIRE_TIMEOUT                    24:24 /* RWIVF */
#define NV_PFIFO_INTR_EN_0_ACQUIRE_TIMEOUT_DISABLED      0x00000000 /* RWI-V */
#define NV_PFIFO_INTR_EN_0_ACQUIRE_TIMEOUT_ENABLED       0x00000001 /* RW--V */
#define NV_PFIFO_RAMHT                                   0x00002210 /* RW-4R */
#define NV_PFIFO_RAMHT_BASE_ADDRESS                             8:4 /* RWIUF */
#define NV_PFIFO_RAMHT_BASE_ADDRESS_10000                0x00000010 /* RWI-V */
#define NV_PFIFO_RAMHT_SIZE                                   17:16 /* RWIUF */
#define NV_PFIFO_RAMHT_SIZE_4K                           0x00000000 /* RWI-V */
#define NV_PFIFO_RAMHT_SIZE_8K                           0x00000001 /* RW--V */
#define NV_PFIFO_RAMHT_SIZE_16K                          0x00000002 /* RW--V */
#define NV_PFIFO_RAMHT_SIZE_32K                          0x00000003 /* RW--V */
#define NV_PFIFO_RAMHT_SEARCH                                 25:24 /* RWIUF */
#define NV_PFIFO_RAMHT_SEARCH_16                         0x00000000 /* RWI-V */
#define NV_PFIFO_RAMHT_SEARCH_32                         0x00000001 /* RW--V */
#define NV_PFIFO_RAMHT_SEARCH_64                         0x00000002 /* RW--V */
#define NV_PFIFO_RAMHT_SEARCH_128                        0x00000003 /* RW--V */
#define NV_PFIFO_RAMFC                                   0x00002214 /* RW-4R */
#define NV_PFIFO_RAMFC_BASE_ADDRESS                             8:2 /* RWIUF */
#define NV_PFIFO_RAMFC_BASE_ADDRESS_11000                0x00000044 /* RWI-V */
#define NV_PFIFO_RAMFC_SIZE                                   16:16 /* RWIVF */
#define NV_PFIFO_RAMFC_SIZE_1K                           0x00000000 /* RWI-V */
#define NV_PFIFO_RAMFC_SIZE_2K                           0x00000001 /* RW--V */
#define NV_PFIFO_RAMFC_BASE_ADDRESS2                          23:17 /* RWIUF */
#define NV_PFIFO_RAMFC_BASE_ADDRESS_11400                0x00000045 /* RWI-V */
#define NV_PFIFO_RAMRO                                   0x00002218 /* RW-4R */
#define NV_PFIFO_RAMRO_BASE_ADDRESS                             8:1 /* RWIUF */
#define NV_PFIFO_RAMRO_BASE_ADDRESS_11500                0x0000008B /* RWI-V */
#define NV_PFIFO_RAMRO_BASE_ADDRESS_11400                0x0000008A /* RW--V */
#define NV_PFIFO_RAMRO_BASE_ADDRESS_11200                0x00000089 /* RW--V */
#define NV_PFIFO_RAMRO_BASE_ADDRESS_11800                0x0000008C /* RW--V */
#define NV_PFIFO_RAMRO_BASE_ADDRESS_12000                0x00000090 /* RW--V */
#define NV_PFIFO_RAMRO_SIZE                                   16:16 /* RWIVF */
#define NV_PFIFO_RAMRO_SIZE_512                          0x00000000 /* RWI-V */
#define NV_PFIFO_RAMRO_SIZE_8K                           0x00000001 /* RW--V */
#define NV_PFIFO_CACHES                                  0x00002500 /* RW-4R */
#define NV_PFIFO_CACHES_REASSIGN                                0:0 /* RWIVF */
#define NV_PFIFO_CACHES_REASSIGN_DISABLED                0x00000000 /* RWI-V */
#define NV_PFIFO_CACHES_REASSIGN_ENABLED                 0x00000001 /* RW--V */
#define NV_PFIFO_CACHES_DMA_SUSPEND                             4:4 /* R--VF */
#define NV_PFIFO_CACHES_DMA_SUSPEND_IDLE                 0x00000000 /* R---V */
#define NV_PFIFO_CACHES_DMA_SUSPEND_BUSY                 0x00000001 /* R---V */
#define NV_PFIFO_MODE                                    0x00002504 /* RW-4R */
#define NV_PFIFO_MODE_CHANNEL_0                                 0:0 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_0_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_0_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_1                                 1:1 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_1_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_1_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_2                                 2:2 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_2_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_2_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_3                                 3:3 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_3_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_3_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_4                                 4:4 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_4_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_4_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_5                                 5:5 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_5_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_5_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_6                                 6:6 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_6_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_6_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_7                                 7:7 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_7_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_7_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_8                                 8:8 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_8_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_8_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_9                                 9:9 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_9_PIO                      0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_9_DMA                      0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_10                              10:10 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_10_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_10_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_11                              11:11 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_11_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_11_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_12                              12:12 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_12_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_12_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_13                              13:13 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_13_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_13_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_14                              14:14 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_14_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_14_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_15                              15:15 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_15_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_15_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_16                              16:16 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_16_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_16_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_17                              17:17 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_17_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_17_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_18                              18:18 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_18_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_18_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_19                              19:19 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_19_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_19_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_20                              20:20 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_20_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_20_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_21                              21:21 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_21_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_21_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_22                              22:22 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_22_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_22_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_23                              23:23 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_23_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_23_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_24                              24:24 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_24_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_24_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_25                              25:25 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_25_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_25_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_26                              26:26 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_26_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_26_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_27                              27:27 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_27_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_27_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_28                              28:28 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_28_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_28_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_29                              29:29 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_29_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_29_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_30                              30:30 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_30_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_30_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_MODE_CHANNEL_31                              31:31 /* RWIVF */
#define NV_PFIFO_MODE_CHANNEL_31_PIO                     0x00000000 /* RWI-V */
#define NV_PFIFO_MODE_CHANNEL_31_DMA                     0x00000001 /* RW--V */
#define NV_PFIFO_DMA                                     0x00002508 /* RW-4R */
#define NV_PFIFO_DMA_CHANNEL_0                                  0:0 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_0_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_0_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_1                                  1:1 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_1_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_1_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_2                                  2:2 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_2_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_2_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_3                                  3:3 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_3_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_3_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_4                                  4:4 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_4_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_4_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_5                                  5:5 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_5_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_5_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_6                                  6:6 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_6_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_6_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_7                                  7:7 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_7_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_7_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_8                                  8:8 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_8_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_8_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_9                                  9:9 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_9_NOT_PENDING               0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_9_PENDING                   0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_10                               10:10 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_10_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_10_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_11                               11:11 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_11_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_11_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_12                               12:12 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_12_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_12_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_13                               13:13 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_13_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_13_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_14                               14:14 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_14_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_14_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_15                               15:15 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_15_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_15_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_16                               16:16 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_16_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_16_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_17                               17:17 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_17_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_17_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_18                               18:18 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_18_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_18_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_19                               19:19 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_19_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_19_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_20                               20:20 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_20_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_20_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_21                               21:21 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_21_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_21_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_22                               22:22 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_22_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_22_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_23                               23:23 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_23_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_23_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_24                               24:24 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_24_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_24_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_25                               25:25 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_25_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_25_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_26                               26:26 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_26_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_26_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_27                               27:27 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_27_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_27_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_28                               28:28 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_28_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_28_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_29                               29:29 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_29_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_29_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_30                               30:30 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_30_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_30_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_DMA_CHANNEL_31                               31:31 /* RWIVF */
#define NV_PFIFO_DMA_CHANNEL_31_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PFIFO_DMA_CHANNEL_31_PENDING                  0x00000001 /* RW--V */
#define NV_PFIFO_SIZE                                    0x0000250C /* RW-4R */
#define NV_PFIFO_SIZE_CHANNEL_0                                 0:0 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_0_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_0_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_1                                 1:1 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_1_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_1_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_2                                 2:2 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_2_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_2_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_3                                 3:3 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_3_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_3_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_4                                 4:4 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_4_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_4_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_5                                 5:5 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_5_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_5_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_6                                 6:6 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_6_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_6_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_7                                 7:7 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_7_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_7_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_8                                 8:8 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_8_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_8_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_9                                 9:9 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_9_124_BYTES                0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_9_512_BYTES                0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_10                              10:10 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_10_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_10_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_11                              11:11 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_11_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_11_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_12                              12:12 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_12_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_12_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_13                              13:13 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_13_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_13_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_14                              14:14 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_14_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_14_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_15                              15:15 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_15_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_15_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_16                              16:16 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_16_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_16_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_17                              17:17 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_17_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_17_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_18                              18:18 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_18_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_18_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_19                              19:19 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_19_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_19_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_20                              20:20 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_20_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_20_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_21                              21:21 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_21_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_21_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_22                              22:22 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_22_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_22_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_23                              23:23 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_23_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_23_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_24                              24:24 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_24_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_24_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_25                              25:25 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_25_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_25_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_26                              26:26 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_26_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_26_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_27                              27:27 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_27_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_27_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_28                              28:28 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_28_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_28_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_29                              29:29 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_29_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_29_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_30                              30:30 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_30_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_30_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_SIZE_CHANNEL_31                              31:31 /* RWIVF */
#define NV_PFIFO_SIZE_CHANNEL_31_124_BYTES               0x00000000 /* RWI-V */
#define NV_PFIFO_SIZE_CHANNEL_31_512_BYTES               0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_PUSH0                            0x00003000 /* RW-4R */
#define NV_PFIFO_CACHE0_PUSH0_ACCESS                            0:0 /* RWIVF */
#define NV_PFIFO_CACHE0_PUSH0_ACCESS_DISABLED            0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE0_PUSH0_ACCESS_ENABLED             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_PUSH0                            0x00003200 /* RW-4R */
#define NV_PFIFO_CACHE1_PUSH0_ACCESS                            0:0 /* RWIVF */
#define NV_PFIFO_CACHE1_PUSH0_ACCESS_DISABLED            0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_PUSH0_ACCESS_ENABLED             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_PUSH1                            0x00003004 /* RW-4R */
#define NV_PFIFO_CACHE0_PUSH1_CHID                              4:0 /* RWXUF */
#define NV_PFIFO_CACHE1_PUSH1                            0x00003204 /* RW-4R */
#define NV_PFIFO_CACHE1_PUSH1_CHID                              4:0 /* RWXUF */
#define NV_PFIFO_CACHE1_PUSH1_MODE                              8:8 /* RWIVF */
#define NV_PFIFO_CACHE1_PUSH1_MODE_PIO                   0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_PUSH1_MODE_DMA                   0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_PUSH                         0x00003220 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_PUSH_ACCESS                         0:0 /* RWIVF */
#define NV_PFIFO_CACHE1_DMA_PUSH_ACCESS_DISABLED         0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_PUSH_ACCESS_ENABLED          0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_PUSH_STATE                          4:4 /* R--VF */
#define NV_PFIFO_CACHE1_DMA_PUSH_STATE_IDLE              0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_DMA_PUSH_STATE_BUSY              0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_DMA_PUSH_BUFFER                         8:8 /* R--VF */
#define NV_PFIFO_CACHE1_DMA_PUSH_BUFFER_NOT_EMPTY        0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_DMA_PUSH_BUFFER_EMPTY            0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_DMA_PUSH_STATUS                       12:12 /* RWIVF */
#define NV_PFIFO_CACHE1_DMA_PUSH_STATUS_RUNNING          0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_PUSH_STATUS_SUSPENDED        0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_PUSH_ACQUIRE                      16:16 /* RWIVF */
#define NV_PFIFO_CACHE1_DMA_PUSH_ACQUIRE_NOT_PENDING     0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_PUSH_ACQUIRE_PENDING         0x00000001 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_FETCH                        0x00003224 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG                          7:3 /* RWIUF */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_8_BYTES           0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_16_BYTES          0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_24_BYTES          0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_32_BYTES          0x00000003 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_40_BYTES          0x00000004 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_48_BYTES          0x00000005 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_56_BYTES          0x00000006 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_64_BYTES          0x00000007 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_72_BYTES          0x00000008 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_80_BYTES          0x00000009 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_88_BYTES          0x0000000A /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_96_BYTES          0x0000000B /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_104_BYTES         0x0000000C /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_112_BYTES         0x0000000D /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_120_BYTES         0x0000000E /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_128_BYTES         0x0000000F /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_136_BYTES         0x00000010 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_144_BYTES         0x00000011 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_152_BYTES         0x00000012 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_160_BYTES         0x00000013 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_168_BYTES         0x00000014 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_176_BYTES         0x00000015 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_184_BYTES         0x00000016 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_192_BYTES         0x00000017 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_200_BYTES         0x00000018 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_208_BYTES         0x00000019 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_216_BYTES         0x0000001A /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_224_BYTES         0x0000001B /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_232_BYTES         0x0000001C /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_240_BYTES         0x0000001D /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_248_BYTES         0x0000001E /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_TRIG_256_BYTES         0x0000001F /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE                        15:13 /* RWIUF */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_32_BYTES          0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_64_BYTES          0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_96_BYTES          0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_128_BYTES         0x00000003 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_160_BYTES         0x00000004 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_192_BYTES         0x00000005 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_224_BYTES         0x00000006 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_SIZE_256_BYTES         0x00000007 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS                    20:16 /* RWIUF */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_0             0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_1             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_2             0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_3             0x00000003 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_4             0x00000004 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_5             0x00000005 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_6             0x00000006 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_7             0x00000007 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_8             0x00000008 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_9             0x00000009 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_10            0x0000000A /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_11            0x0000000B /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_12            0x0000000C /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_13            0x0000000D /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_14            0x0000000E /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_MAX_REQS_15            0x0000000F /* RW--V */
#define NV_PFIFO_CACHE1_DMA_FETCH_ENDIAN                      31:31 /* RWIUF */
#define NV_PFIFO_CACHE1_DMA_FETCH_LITTLE_ENDIAN          0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_FETCH_BIG_ENDIAN             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_PUT                          0x00003240 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_PUT_OFFSET                         31:2 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_GET                          0x00003244 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_GET_OFFSET                         31:2 /* RWXUF */
#define NV_PFIFO_CACHE1_REF                              0x00003248 /* RW-4R */
#define NV_PFIFO_CACHE1_REF_CNT                                31:0 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_SUBROUTINE                   0x0000324C /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_SUBROUTINE_RETURN_OFFSET           31:2 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_SUBROUTINE_STATE                    0:0 /* RWXVF */
#define NV_PFIFO_CACHE1_DMA_SUBROUTINE_STATE_INACTIVE    0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_SUBROUTINE_STATE_ACTIVE      0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_DCOUNT                       0x000032A0 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_DCOUNT_VALUE                       12:2 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_GET_JMP_SHADOW               0x000032A4 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_GET_JMP_SHADOW_OFFSET              31:2 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_RSVD_SHADOW                  0x000032A8 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_RSVD_SHADOW_CMD                    31:0 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_DATA_SHADOW                  0x000032AC /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_DATA_SHADOW_VALUE                  31:0 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_01_INST                    0x000032B0 /* RW-4R */
#define NV_PFIFO_CACHE1_SUBCH_0_INST_VALUE                     15:0 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_1_INST_VALUE                    31:16 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_23_INST                    0x000032B4 /* RW-4R */
#define NV_PFIFO_CACHE1_SUBCH_2_INST_VALUE                     15:0 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_3_INST_VALUE                    31:16 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_45_INST                    0x000032B8 /* RW-4R */
#define NV_PFIFO_CACHE1_SUBCH_4_INST_VALUE                     15:0 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_5_INST_VALUE                    31:16 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_67_INST                    0x000032BC /* RW-4R */
#define NV_PFIFO_CACHE1_SUBCH_6_INST_VALUE                     15:0 /* RWXUF */
#define NV_PFIFO_CACHE1_SUBCH_7_INST_VALUE                    31:16 /* RWXUF */
#define NV_PFIFO_CACHE0_SUBCH_INST                       0x000032C0 /* RW-4R */
#define NV_PFIFO_CACHE0_SUBCH_INST_VALUE                       15:0 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_STATE                        0x00003228 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_STATE_METHOD_TYPE                   0:0 /* RWXUV */
#define NV_PFIFO_CACHE1_DMA_STATE_METHOD_TYPE_INC        0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_STATE_METHOD_TYPE_NON_INC    0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_STATE_METHOD                       12:2 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_STATE_SUBCHANNEL                  15:13 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_STATE_METHOD_COUNT                28:18 /* RWIUF */
#define NV_PFIFO_CACHE1_DMA_STATE_METHOD_COUNT_0         0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_STATE_ERROR                       31:29 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_STATE_ERROR_NONE             0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_STATE_ERROR_CALL             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_STATE_ERROR_NON_CACHE        0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_STATE_ERROR_RETURN           0x00000003 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_STATE_ERROR_RESERVED_CMD     0x00000004 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_STATE_ERROR_PROTECTION       0x00000006 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_INSTANCE                     0x0000322C /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_INSTANCE_ADDRESS                   15:0 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_CTL                          0x00003230 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_CTL_ADJUST                         11:2 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_CTL_PAGE_TABLE                    12:12 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_CTL_PAGE_TABLE_NOT_PRESENT   0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_PAGE_TABLE_PRESENT       0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_PAGE_ENTRY                    13:13 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_CTL_PAGE_ENTRY_NOT_LINEAR    0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_PAGE_ENTRY_LINEAR        0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_TARGET_NODE                   17:16 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_CTL_TARGET_NODE_NVM          0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_TARGET_NODE_PCI          0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_TARGET_NODE_AGP          0x00000003 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_AT_INFO                       31:31 /* RWIUF */
#define NV_PFIFO_CACHE1_DMA_CTL_AT_INFO_INVALID          0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_CTL_AT_INFO_VALID            0x00000001 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_LIMIT                        0x00003234 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_LIMIT_OFFSET                       31:2 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_TLB_TAG                      0x00003238 /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_TLB_TAG_ADDRESS                   31:12 /* RWXUF */
#define NV_PFIFO_CACHE1_DMA_TLB_TAG_STATE                       0:0 /* RWIUF */
#define NV_PFIFO_CACHE1_DMA_TLB_TAG_STATE_INVALID        0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_DMA_TLB_TAG_STATE_VALID          0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_DMA_TLB_PTE                      0x0000323C /* RW-4R */
#define NV_PFIFO_CACHE1_DMA_TLB_PTE_FRAME_ADDRESS             31:12 /* RWXUF */
#define NV_PFIFO_CACHE0_PULL0                            0x00003050 /* RW-4R */
#define NV_PFIFO_CACHE0_PULL0_ACCESS                            0:0 /* RWIVF */
#define NV_PFIFO_CACHE0_PULL0_ACCESS_DISABLED            0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE0_PULL0_ACCESS_ENABLED             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_PULL0_HASH                              4:4 /* R-XVF */
#define NV_PFIFO_CACHE0_PULL0_HASH_SUCCEEDED             0x00000000 /* R---V */
#define NV_PFIFO_CACHE0_PULL0_HASH_FAILED                0x00000001 /* R---V */
#define NV_PFIFO_CACHE0_PULL0_DEVICE                            8:8 /* R-XVF */
#define NV_PFIFO_CACHE0_PULL0_DEVICE_HARDWARE            0x00000000 /* R---V */
#define NV_PFIFO_CACHE0_PULL0_DEVICE_SOFTWARE            0x00000001 /* R---V */
#define NV_PFIFO_CACHE0_PULL0_HASH_STATE                      12:12 /* R-XVF */
#define NV_PFIFO_CACHE0_PULL0_HASH_STATE_IDLE            0x00000000 /* R---V */
#define NV_PFIFO_CACHE0_PULL0_HASH_STATE_BUSY            0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_PULL0                            0x00003250 /* RW-4R */
#define NV_PFIFO_CACHE1_PULL0_ACCESS                            0:0 /* RWIVF */
#define NV_PFIFO_CACHE1_PULL0_ACCESS_DISABLED            0x00000000 /* RWI-V */
#define NV_PFIFO_CACHE1_PULL0_ACCESS_ENABLED             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_PULL0_HASH                              4:4 /* R-XVF */
#define NV_PFIFO_CACHE1_PULL0_HASH_SUCCEEDED             0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_HASH_FAILED                0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_DEVICE                            8:8 /* R-XVF */
#define NV_PFIFO_CACHE1_PULL0_DEVICE_HARDWARE            0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_DEVICE_SOFTWARE            0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_HASH_STATE                      12:12 /* R-XVF */
#define NV_PFIFO_CACHE1_PULL0_HASH_STATE_IDLE            0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_HASH_STATE_BUSY            0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_ACQUIRE_STATE                   16:16 /* R-XVF */
#define NV_PFIFO_CACHE1_PULL0_ACQUIRE_STATE_IDLE         0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_ACQUIRE_STATE_BUSY         0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_SEMAPHORE                       21:20 /* R-XVF */
#define NV_PFIFO_CACHE1_PULL0_SEMAPHORE_NO_ERROR         0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_SEMAPHORE_BAD_ARG          0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_PULL0_SEMAPHORE_INV_STATE        0x00000002 /* R---V */
#define NV_PFIFO_CACHE0_PULL1                            0x00003054 /* RW-4R */
#define NV_PFIFO_CACHE0_PULL1_ENGINE                            1:0 /* RWXUF */
#define NV_PFIFO_CACHE0_PULL1_ENGINE_SW                  0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_PULL1_ENGINE_GRAPHICS            0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_PULL1_ENGINE_DVD                 0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1                            0x00003254 /* RW-4R */
#define NV_PFIFO_CACHE1_PULL1_ENGINE                            1:0 /* RWXUF */
#define NV_PFIFO_CACHE1_PULL1_ENGINE_SW                  0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1_ENGINE_GRAPHICS            0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1_ENGINE_DVD                 0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1_ACQUIRE                           4:4 /* RWXVF */
#define NV_PFIFO_CACHE1_PULL1_ACQUIRE_INACTIVE           0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1_ACQUIRE_ACTIVE             0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1_SEM_TARGET_NODE                 17:16 /* RWXUF */
#define NV_PFIFO_CACHE1_PULL1_SEM_TARGET_NODE_NVM        0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1_SEM_TARGET_NODE_PCI        0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_PULL1_SEM_TARGET_NODE_AGP        0x00000003 /* RW--V */
#define NV_PFIFO_CACHE0_HASH                             0x00003058 /* RW-4R */
#define NV_PFIFO_CACHE0_HASH_INSTANCE                          15:0 /* RWXUF */
#define NV_PFIFO_CACHE0_HASH_VALID                            16:16 /* RWXVF */
#define NV_PFIFO_CACHE1_HASH                             0x00003258 /* RW-4R */
#define NV_PFIFO_CACHE1_HASH_INSTANCE                          15:0 /* RWXUF */
#define NV_PFIFO_CACHE1_HASH_VALID                            16:16 /* RWXVF */
#define NV_PFIFO_CACHE1_ACQUIRE_0                        0x00003260 /* RW-4R */
#define NV_PFIFO_CACHE1_ACQUIRE_0_TIMEOUT                      30:0 /* RWXUF */
#define NV_PFIFO_CACHE1_ACQUIRE_1                        0x00003264 /* RW-4R */
#define NV_PFIFO_CACHE1_ACQUIRE_1_TIMESTAMP                    31:0 /* RWXUF */
#define NV_PFIFO_CACHE1_ACQUIRE_2                        0x00003268 /* RW-4R */
#define NV_PFIFO_CACHE1_ACQUIRE_2_VALUE                        31:0 /* RWXUF */
#define NV_PFIFO_CACHE1_SEMAPHORE                        0x0000326C /* RW-4R */
#define NV_PFIFO_CACHE1_SEMAPHORE_CTXDMA                        0:0 /* RWXVF */
#define NV_PFIFO_CACHE1_SEMAPHORE_CTXDMA_INVALID         0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_SEMAPHORE_CTXDMA_VALID           0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_SEMAPHORE_OFFSET                       11:2 /* RWXUF */
#define NV_PFIFO_CACHE1_SEMAPHORE_PAGE_ADDRESS                31:12 /* RWXUF */
#define NV_PFIFO_CACHE0_STATUS                           0x00003014 /* R--4R */
#define NV_PFIFO_CACHE0_STATUS_LOW_MARK                         4:4 /* R--VF */
#define NV_PFIFO_CACHE0_STATUS_LOW_MARK_NOT_EMPTY        0x00000000 /* R---V */
#define NV_PFIFO_CACHE0_STATUS_LOW_MARK_EMPTY            0x00000001 /* R---V */
#define NV_PFIFO_CACHE0_STATUS_HIGH_MARK                        8:8 /* R--VF */
#define NV_PFIFO_CACHE0_STATUS_HIGH_MARK_NOT_FULL        0x00000000 /* R---V */
#define NV_PFIFO_CACHE0_STATUS_HIGH_MARK_FULL            0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_STATUS                           0x00003214 /* R--4R */
#define NV_PFIFO_CACHE1_STATUS_LOW_MARK                         4:4 /* R--VF */
#define NV_PFIFO_CACHE1_STATUS_LOW_MARK_NOT_EMPTY        0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_STATUS_LOW_MARK_EMPTY            0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_STATUS_HIGH_MARK                        8:8 /* R--VF */
#define NV_PFIFO_CACHE1_STATUS_HIGH_MARK_NOT_FULL        0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_STATUS_HIGH_MARK_FULL            0x00000001 /* R---V */
#define NV_PFIFO_CACHE1_STATUS1                          0x00003218 /* R--4R */
#define NV_PFIFO_CACHE1_STATUS1_RANOUT                          0:0 /* R-XVF */
#define NV_PFIFO_CACHE1_STATUS1_RANOUT_FALSE             0x00000000 /* R---V */
#define NV_PFIFO_CACHE1_STATUS1_RANOUT_TRUE              0x00000001 /* R---V */
#define NV_PFIFO_CACHE0_PUT                              0x00003010 /* RW-4R */
#define NV_PFIFO_CACHE0_PUT_ADDRESS                             2:2 /* RWXUF */
#define NV_PFIFO_CACHE1_PUT                              0x00003210 /* RW-4R */
#define NV_PFIFO_CACHE1_PUT_ADDRESS                             9:2 /* RWXUF */
#define NV_PFIFO_CACHE0_GET                              0x00003070 /* RW-4R */
#define NV_PFIFO_CACHE0_GET_ADDRESS                             2:2 /* RWXUF */
#define NV_PFIFO_CACHE1_GET                              0x00003270 /* RW-4R */
#define NV_PFIFO_CACHE1_GET_ADDRESS                             9:2 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE                           0x00003080 /* RW-4R */
#define NV_PFIFO_CACHE0_ENGINE_0                                1:0 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_0_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_0_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_0_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_1                                5:4 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_1_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_1_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_1_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_2                                9:8 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_2_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_2_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_2_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_3                              13:12 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_3_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_3_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_3_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_4                              17:16 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_4_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_4_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_4_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_5                              21:20 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_5_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_5_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_5_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_6                              25:24 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_6_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_6_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_6_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_7                              29:28 /* RWXUF */
#define NV_PFIFO_CACHE0_ENGINE_7_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_7_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE0_ENGINE_7_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE                           0x00003280 /* RW-4R */
#define NV_PFIFO_CACHE1_ENGINE_0                                1:0 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_0_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_0_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_0_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_1                                5:4 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_1_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_1_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_1_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_2                                9:8 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_2_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_2_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_2_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_3                              13:12 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_3_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_3_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_3_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_4                              17:16 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_4_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_4_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_4_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_5                              21:20 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_5_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_5_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_5_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_6                              25:24 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_6_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_6_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_6_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_7                              29:28 /* RWXUF */
#define NV_PFIFO_CACHE1_ENGINE_7_SW                      0x00000000 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_7_GRAPHICS                0x00000001 /* RW--V */
#define NV_PFIFO_CACHE1_ENGINE_7_DVD                     0x00000002 /* RW--V */
#define NV_PFIFO_CACHE0_METHOD(i)                (0x00003100+(i)*8) /* RW-4A */
#define NV_PFIFO_CACHE0_METHOD__SIZE_1                            1 /*       */
#define NV_PFIFO_CACHE0_METHOD_ADDRESS                         12:2 /* RWXUF */
#define NV_PFIFO_CACHE0_METHOD_SUBCHANNEL                     15:13 /* RWXUF */
#define NV_PFIFO_CACHE1_METHOD(i)                (0x00003800+(i)*8) /* RW-4A */
#define NV_PFIFO_CACHE1_METHOD__SIZE_1                          128 /*       */
#define NV_PFIFO_CACHE1_METHOD_TYPE                             0:0 /* RWXUF */
#define NV_PFIFO_CACHE1_METHOD_ADDRESS                         12:2 /* RWXUF */
#define NV_PFIFO_CACHE1_METHOD_SUBCHANNEL                     15:13 /* RWXUF */
#define NV_PFIFO_CACHE1_METHOD_ALIAS(i)          (0x00003C00+(i)*8) /* RW-4A */
#define NV_PFIFO_CACHE1_METHOD_ALIAS__SIZE_1                    128 /*       */
#define NV_PFIFO_CACHE0_DATA(i)                  (0x00003104+(i)*8) /* RW-4A */
#define NV_PFIFO_CACHE0_DATA__SIZE_1                              1 /*       */
#define NV_PFIFO_CACHE0_DATA_VALUE                             31:0 /* RWXVF */
#define NV_PFIFO_CACHE1_DATA(i)                  (0x00003804+(i)*8) /* RW-4A */
#define NV_PFIFO_CACHE1_DATA__SIZE_1                            128 /*       */
#define NV_PFIFO_CACHE1_DATA_VALUE                             31:0 /* RWXVF */
#define NV_PFIFO_CACHE1_DATA_ALIAS(i)            (0x00003C04+(i)*8) /* RW-4A */
#define NV_PFIFO_CACHE1_DATA_ALIAS__SIZE_1                      128 /*       */
#define NV_PFIFO_DEVICE(i)                       (0x00002800+(i)*4) /* R--4A */
#define NV_PFIFO_DEVICE__SIZE_1                                 128 /*       */
#define NV_PFIFO_DEVICE_CHID                                    4:0 /* R--UF */
#define NV_PFIFO_DEVICE_SWITCH                                24:24 /* R--VF */
#define NV_PFIFO_DEVICE_SWITCH_UNAVAILABLE               0x00000000 /* R---V */
#define NV_PFIFO_DEVICE_SWITCH_AVAILABLE                 0x00000001 /* R---V */
#define NV_PFIFO_RUNOUT_STATUS                           0x00002400 /* R--4R */
#define NV_PFIFO_RUNOUT_STATUS_RANOUT                           0:0 /* R--VF */
#define NV_PFIFO_RUNOUT_STATUS_RANOUT_FALSE              0x00000000 /* R---V */
#define NV_PFIFO_RUNOUT_STATUS_RANOUT_TRUE               0x00000001 /* R---V */
#define NV_PFIFO_RUNOUT_STATUS_LOW_MARK                         4:4 /* R--VF */
#define NV_PFIFO_RUNOUT_STATUS_LOW_MARK_NOT_EMPTY        0x00000000 /* R---V */
#define NV_PFIFO_RUNOUT_STATUS_LOW_MARK_EMPTY            0x00000001 /* R---V */
#define NV_PFIFO_RUNOUT_STATUS_HIGH_MARK                        8:8 /* R--VF */
#define NV_PFIFO_RUNOUT_STATUS_HIGH_MARK_NOT_FULL        0x00000000 /* R---V */
#define NV_PFIFO_RUNOUT_STATUS_HIGH_MARK_FULL            0x00000001 /* R---V */
#define NV_PFIFO_RUNOUT_PUT                              0x00002410 /* RW-4R */
#define NV_PFIFO_RUNOUT_PUT_ADDRESS                            12:3 /* RWXUF */
#define NV_PFIFO_RUNOUT_PUT_ADDRESS__SIZE_0                     8:3 /* RWXUF */
#define NV_PFIFO_RUNOUT_PUT_ADDRESS__SIZE_1                    12:3 /* RWXUF */
#define NV_PFIFO_RUNOUT_GET                              0x00002420 /* RW-4R */
#define NV_PFIFO_RUNOUT_GET_ADDRESS                            13:3 /* RWXUF */
/* dev_tremapper.ref */
#define NV_UREMAP                                0x00FFFFFF:0x00C00000 /* RW--D */
#define NV_UREMAP_FORMAT(i)              ((i)*0x10000 + 0x00C00000) /* RW-4R */
#define NV_UREMAP_FORMAT__SIZE                                    2 /*       */
#define NV_UREMAP_FORMAT_BPP                                    3:0 /* RWIVF */
#define NV_UREMAP_FORMAT_BPP_8                           0x00000000 /* RWI-V */
#define NV_UREMAP_FORMAT_BPP_16                          0x00000001 /* RW--V */
#define NV_UREMAP_FORMAT_BPP_32                          0x00000002 /* RW--V */
#define NV_UREMAP_FORMAT_BPP_64                          0x00000003 /* RW--V */
#define NV_UREMAP_FORMAT_BPP_128                         0x00000004 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH                                  7:4 /* RWIVF */
#define NV_UREMAP_FORMAT_WIDTH_1                         0x00000000 /* RWI-V */
#define NV_UREMAP_FORMAT_WIDTH_2                         0x00000001 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH_4                         0x00000002 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH_8                         0x00000003 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH_16                        0x00000004 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH_32                        0x00000005 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH_64                        0x00000006 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH_128                       0x00000007 /* RW--V */
#define NV_UREMAP_FORMAT_WIDTH_256                       0x00000008 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT                                11:8 /* RWIVF */
#define NV_UREMAP_FORMAT_HEIGHT_1                        0x00000000 /* RWI-V */
#define NV_UREMAP_FORMAT_HEIGHT_2                        0x00000001 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT_4                        0x00000002 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT_8                        0x00000003 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT_16                       0x00000004 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT_32                       0x00000005 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT_64                       0x00000006 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT_128                      0x00000007 /* RW--V */
#define NV_UREMAP_FORMAT_HEIGHT_256                      0x00000008 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH                                15:12 /* RWIVF */
#define NV_UREMAP_FORMAT_DEPTH_1                         0x00000000 /* RWI-V */
#define NV_UREMAP_FORMAT_DEPTH_2                         0x00000001 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH_4                         0x00000002 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH_8                         0x00000003 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH_16                        0x00000004 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH_32                        0x00000005 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH_64                        0x00000006 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH_128                       0x00000007 /* RW--V */
#define NV_UREMAP_FORMAT_DEPTH_256                       0x00000008 /* RW--V */
#define NV_UREMAP_OFFSET(i)              ((i)*0x10000 + 0x00C00004) /* RW-4R */
#define NV_UREMAP_OFFSET__SIZE                                    2 /*       */  
#define NV_UREMAP_OFFSET_ADR                                   32:0 /* RWIVF */   
#define NV_UREMAP_OFFSET_ADR_0                           0x00000000 /* RWI-V */   
/* dev_tremapper.ref */
#define NV_PREMAP                                0x006E1FFF:0x006E0000 /* RW--D */
#define NV_PREMAP_BASE(i)                   ((i)*0x10 + 0x006e0000) /* RW-4R */
#define NV_PREMAP_BASE__SIZE                                      2 /*       */
#define NV_PREMAP_ENDIAN                                        0:0 /* RWIVF */
#define NV_PREMAP_ENDIAN_LE                              0x00000000 /* RWI-V */
#define NV_PREMAP_ENDIAN_BE                              0x00000001 /* RWI-V */
#define NV_PREMAP_BASE_ADR                                     28:6 /* RWIVF */
#define NV_PREMAP_BASE_ADR_0                             0x00000000 /* RWI-V */
#define NV_PREMAP_LIMIT(i)                  ((i)*0x10 + 0x006e0004) /* RW-4R */
#define NV_PREMAP_LIMIT__SIZE                                     2 /*       */
#define NV_PREMAP_LIMIT_ADR                                    28:6 /* RWIVF */
#define NV_PREMAP_LIMIT_ADR_0                            0x00000000 /* RWI-V */
#define NV_PREMAP_CONTROL                                0x006e0100 /* RW-4R */
#define NV_PREMAP_CONTROL_ALLOC_STATUS                          1:0 /* RW-VF */
#define NV_PREMAP_CONTROL_NOT_ALLOCATED                  0x00000000 /* RWI-V */
#define NV_PREMAP_CONTROL_ALLOCATE_CTX0                  0x00000001 /* RW--V */ 
#define NV_PREMAP_CONTROL_ALLOCATE_CTX1                  0x00000002 /* RW--V */   
#define NV_PREMAP_CONTROL_DIRTY                               31:31 /* -W-VF */
#define NV_PREMAP_CONTROL_DIRTY_RESET                    0x00000000 /* -W--V */
#define NV_PREMAP_CONTROL_DIRTY_SET                      0x00000001 /* -W--V */
#define NV_PREMAP_INTR                                   0x006e0300 /* RW-4R */
#define NV_PREMAP_INTR_FORMAT_ERROR                             0:0 /* RWXVF */
#define NV_PREMAP_INTR_FORMAT_ERROR_NOT_PENDING          0x00000000 /* R---V */
#define NV_PREMAP_INTR_FORMAT_ERROR_PENDING              0x00000001 /* R---V */
#define NV_PREMAP_INTR_FORMAT_ERROR_RESET                0x00000001 /* -W--V */
#define NV_PREMAP_INTR_EN_0                              0x006e0304 /* RW-4R */
#define NV_PREMAP_INTR_EN_0_FORMAT_ERROR                        0:0 /* RWIVF */
#define NV_PREMAP_INTR_EN_0_FORMAT_ERROR_DISABLED        0x00000000 /* RWI-V */
#define NV_PREMAP_INTR_EN_0_FORMAT_ERROR_ENABLED         0x00000001 /* RW--V */
#define NV_PREMAP_BUFFER(i)                   ((i)*4 + 0x00000800)) /* RW-4R */                     
#define NV_PREMAP_BUFFER__SIZE                                  512 /*       */
#define NV_PREMAP_BUFFER_BYTE0                                  8:0 /* RW--V */
#define NV_PREMAP_BUFFER_BYTE1                                24:16 /* RW--V */
#define NV_PREMAP_PFORMAT(i)               ((i)*0x10 + 0x006e0200)) /* RW-4R */  
#define NV_PREMAP_PFORMAT__SIZE                                   2 /*       */
#define NV_PREMAP_PFORMAT_ADR                                  15:0 /* RWIVF */
#define NV_PREMAP_PFORMAT_ADR_0                          0x00000000 /* RWI-V */
#define NV_PREMAP_POFFSET(i)               ((i)*0x10 + 0x006e0204)) /* RW-4R */
#define NV_PREMAP_POFFSET__SIZE                                   2 /*       */
#define NV_PREMAP_POFFSET_ADR                                  31:0 /* RWIVF */
#define NV_PREMAP_POFFSET_ADR_0                          0x00000000 /* RWI-V */
#define NV_PREMAP_DBG_CONTROL                            0x006e0400 /* RW-4R */
#define NV_PREMAP_DBG_CONTROL_FLUSH                             0:0 /* -W-VF */
#define NV_PREMAP_DBG_CONTROL_FLUSH_REMAP                0x00000001 /* -W--V */
#define NV_PREMAP_DBG_RAM_DIAG                                  4:4 /* RW-VF */
#define NV_PREMAP_DBG_RAM_DIAG_DISABLED                  0x00000000 /* RWI-V */
#define NV_PREMAP_DBG_RAM_DIAG_ENABLED                   0x00000001 /* RW--V */
#define NV_PREMAP_DBG_CONTEXT                                   8:8 /* R---F */
#define NV_PREMAP_DBG_CONTEXT_0                          0x00000000 /* R-I-V */
#define NV_PREMAP_DBG_CONTEXT_1                          0x00000001 /* R---V */
#define NV_PREMAP_DBG_DIRTY_STATE                             12:12 /* R---F */
#define NV_PREMAP_DBG_NOT_DIRTY                          0x00000000 /* R-I-V */
#define NV_PREMAP_DBG_DIRTY                              0x00000001 /* R---V */
/* dev_tremapper.ref */
#define NV_BREMAP_BUFFER32(i,j)                 (i*0x10000) + (j*4) /* RW-4A */
#define NV_BREMAP_BUFFER32__SIZE_1                                2 /*       */
#define NV_BREMAP_BUFFER32__SIZE_2                              128 /*       */
#define NV_BREMAP_BUFFER32_VALUE                               31:0 /* RW--V */
#define NV_BREMAP_BUFFER16(i,j)           ((i*0x10000)+(j/2)+(j%2)) /* RW-2A */
#define NV_BREMAP_BUFFER16__SIZE_1                                2 /*       */
#define NV_BREMAP_BUFFER16__SIZE_2                              256 /*       */
#define NV_BREMAP_BUFFER16_VALUE                               15:0 /* RW--V */
#define NV_BREMAP_BUFFER8(i,j)       ((i*0x10000) + j + 0x00000000) /* RW-1A */
#define NV_BREMAP_BUFFER8__SIZE_1                                 2 /*       */
#define NV_BREMAP_BUFFER8_SIZE_2                                512 /*       */
#define NV_BREMAP_BUFFER8_VALUE                                 7:0 /* RW--V */
/* dev_host_diag.ref */
#define NV_HOST_DIAG                          0x00005FFF:0x00005000 /* RW--D */
#define NV_HOST_DIAG_C1SYNCM_DATA(i)           (0x00005000 +(i)* 8) /* RW-4R */
#define NV_HOST_DIAG_C1SYNCM_DATA__SIZE_1                         4 /*       */
#define NV_HOST_DIAG_C1SYNCM_DATA_VALUE                        13:0 /* RWXUF */
#define NV_HOST_DIAG_C1SYNCD_DATA(i)           (0x00005004 +(i)* 8) /* RW-4R */
#define NV_HOST_DIAG_C1SYNCD_DATA__SIZE_1                         4 /*       */
#define NV_HOST_DIAG_C1SYNCD_DATA_VALUE                        31:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQA_DATA(i)            (0x00005400 +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQA_DATA__SIZE_1                         16  /*       */
#define NV_HOST_DIAG_CPUQA_DATA_VALUE                         28:0  /* RWXUF */
#define NV_HOST_DIAG_CPUQD0L_DATA(i)          (0x00005408 +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD0L_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD0L_DATA_VALUE                        31:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQD1L_DATA(i)          (0x00005410 +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD1L_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD1L_DATA_VALUE                        31:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQD2L_DATA(i)          (0x00005418 +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD2L_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD2L_DATA_VALUE                        31:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQD3L_DATA(i)          (0x00005420 +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD3L_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD3L_DATA_VALUE                        31:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQD0H_DATA(i)          (0x0000540c +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD0H_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD0H_DATA_VALUE                         3:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQD1H_DATA(i)          (0x00005414 +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD1H_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD1H_DATA_VALUE                         3:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQD2H_DATA(i)          (0x0000541c +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD2H_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD2H_DATA_VALUE                         3:0 /* RWXUF */
#define NV_HOST_DIAG_CPUQD3H_DATA(i)          (0x00005424 +(i)* 64) /* RW-4R */
#define NV_HOST_DIAG_CPUQD3H_DATA__SIZE_1                        16 /*       */ 
#define NV_HOST_DIAG_CPUQD3H_DATA_VALUE                         3:0 /* RWXUF */
#define NV_HOST_DIAG_AQL_DATA(i)               (0x00005100 +(i)* 8) /* RW-4R */
#define NV_HOST_DIAG_AQL_DATA__SIZE_1                             4 /*       */   
#define NV_HOST_DIAG_AQL_DATA_VALUE                            31:0 /* RWXUF */
#define NV_HOST_DIAG_AQH_DATA(i)               (0x00005104 +(i)* 8) /* RW-4R */
#define NV_HOST_DIAG_AQH_DATA__SIZE_1                             4 /*       */
#define NV_HOST_DIAG_AQH_DATA_VALUE                            19:0 /* RWXUF */
#define NV_HOST_DIAG_WDQL_DATA(i)              (0x00005200 +(i)* 8) /* RW-4R */
#define NV_HOST_DIAG_WDQL_DATA__SIZE_1                            8 /*       */
#define NV_HOST_DIAG_WDQL_DATA_VALUE                           31:0 /* RWXUF */
#define NV_HOST_DIAG_WDQH_DATA(i)              (0x00005204 +(i)* 8) /* RW-4R */
#define NV_HOST_DIAG_WDQH_DATA__SIZE_1                            8 /*       */ 
#define NV_HOST_DIAG_WDQH_DATA_VALUE                            3:0 /* RWXUF */
#define NV_HOST_DIAG_DSPQ_DATA(i)              (0x00005300 +(i)* 4) /* RW-4R */
#define NV_HOST_DIAG_DSPQ_DATA__SIZE_1                           32 /*       */  
#define NV_HOST_DIAG_DSPQ_DATA_VALUE                           18:0 /* RWXUF */
#define NV_HOST_DIAG_RDQ0_DATA(i)             (0x00005800 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_RDQ0_DATA__SIZE_1                           16 /*       */ 
#define NV_HOST_DIAG_RDQ0_DATA_VALUE                           31:0 /* RWXUF */
#define NV_HOST_DIAG_RDQ1L_DATA(i)            (0x00005804 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_RDQ1L_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_RDQ1L_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_RDQ1H_DATA(i)            (0x00005808 +(i)* 32) /* RW-4R */ 
#define NV_HOST_DIAG_RDQ1H_DATA__SIZE_1                          16 /*       */     
#define NV_HOST_DIAG_RDQ1H_DATA_VALUE                          15:0 /* RWXUF */
#define NV_HOST_DIAG_RDQ2_DATA(i)             (0x00005810 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_RDQ2_DATA__SIZE_1                           16 /*       */ 
#define NV_HOST_DIAG_RDQ2_DATA_VALUE                           31:0 /* RWXUF */
#define NV_HOST_DIAG_RDQ3L_DATA(i)            (0x00005814 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_RDQ3L_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_RDQ3L_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_RDQ3H_DATA(i)            (0x00005818 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_RDQ3H_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_RDQ3H_DATA_VALUE                          15:0 /* RWXUF */
#define NV_HOST_DIAG_CTL                                 0x00005F00 /* RW-4R */
#define NV_HOST_DIAG_RAM_RDWR                                   0:0 /* RWIUF */
#define NV_HOST_DIAG_RAM_RDWR_OFF                               0x0 /* RWI-V */
#define NV_HOST_DIAG_RAM_RDWR_ON                                0x1 /* RW--V */
#define NV_HOST_DIAG_RP1_SEL                                    1:1 /* RWIUF */
#define NV_HOST_DIAG_RP1_OFF                                    0x0 /* RWI-V */
#define NV_HOST_DIAG_RP1_ON                                     0x1 /* RW--V */
#define NV_HOST_DIAG_FWB0L_DATA(i)            (0x00005A00 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB0L_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_FWB0L_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWB1L_DATA(i)            (0x00005A08 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB1L_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_FWB1L_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWB2L_DATA(i)            (0x00005A10 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB2L_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_FWB2L_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWB3L_DATA(i)            (0x00005A18 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB3L_DATA__SIZE_1                          16 /*       */
#define NV_HOST_DIAG_FWB3L_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWB0H_DATA(i)            (0x00005A04 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB0H_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_FWB0H_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWB1H_DATA(i)            (0x00005A0c +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB1H_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_FWB1H_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWB2H_DATA(i)            (0x00005A14 +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB2H_DATA__SIZE_1                          16 /*       */ 
#define NV_HOST_DIAG_FWB2H_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWB3H_DATA(i)            (0x00005A1c +(i)* 32) /* RW-4R */
#define NV_HOST_DIAG_FWB3H_DATA__SIZE_1                          16 /*       */
#define NV_HOST_DIAG_FWB3H_DATA_VALUE                          31:0 /* RWXUF */
#define NV_HOST_DIAG_FWAQ_DATA(i)              (0x00005c00 +(i)* 4) /* RW-4R */
#define NV_HOST_DIAG_FWAQ_DATA__SIZE_1                           4  /*       */
#define NV_HOST_DIAG_FWAQ_DATA_VALUE                          28:0  /* RWXUF */
/* dev_graphics_generated.ref */
#define NV_PGRAPH                             0x00401FFF:0x00400000 /* RW--D */
#define NV_PGRAPH_DEBUG_0                                0x00400080 /* RW-4R */
#define NV_PGRAPH_DEBUG_0_STATE                                 0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_STATE_NORMAL                   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_STATE_RESET                    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_FE_2D_STATE                           1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_FE_2D_STATE_NORMAL             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_FE_2D_STATE_RESET              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_FE_3D_STATE                           2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_FE_3D_STATE_NORMAL             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_FE_3D_STATE_RESET              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_CACHE_STATE                           3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_CACHE_STATE_NORMAL             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_CACHE_STATE_RESET              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_PREROP_STATE                          4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_PREROP_STATE_NORMAL            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_PREROP_STATE_RESET             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_ROP_STATE                             5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_ROP_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_ROP_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_FINE_RSTR_STATE                       6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_FINE_RSTR_STATE_NORMAL         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_FINE_RSTR_STATE_RESET          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_COARSE_RSTR_STATE                     7:7 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_COARSE_RSTR_STATE_NORMAL       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_COARSE_RSTR_STATE_RESET        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_DMA_STATE                             8:8 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_DMA_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_DMA_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_RSTR_2D_STATE                         9:9 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_RSTR_2D_STATE_NORMAL           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_RSTR_2D_STATE_RESET            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_SETUP_STATE                         10:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_SETUP_STATE_NORMAL             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_SETUP_STATE_RESET              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_ZCULL_STATE                         11:11 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_ZCULL_STATE_NORMAL             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_ZCULL_STATE_RESET              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_SHD_STATE                           13:13 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_SHD_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_SHD_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_SHDBE_STATE                         14:14 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_SHDBE_STATE_NORMAL             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_SHDBE_STATE_RESET              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_XF_STATE                            15:15 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_XF_STATE_NORMAL                0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_XF_STATE_RESET                 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_IDX_STATE                           16:16 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_IDX_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_IDX_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_VTX_STATE                           17:17 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_VTX_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_VTX_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_CAS_STATE                           18:18 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_CAS_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_CAS_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_FD_STATE                            19:19 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_FD_STATE_NORMAL                0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_FD_STATE_RESET                 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_CMB_STATE                           20:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_CMB_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_CMB_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_CBUF_STATE                          21:21 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_CBUF_STATE_NORMAL              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_CBUF_STATE_RESET               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_ZRD_STATE                           22:22 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_ZRD_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_ZRD_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_ZWR_STATE                           23:23 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_ZWR_STATE_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_ZWR_STATE_RESET                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_XBAR_STATE                          24:24 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_XBAR_STATE_NORMAL              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_XBAR_STATE_RESET               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_0_CROP_STATE                          25:25 /* RWIVF */
#define NV_PGRAPH_DEBUG_0_CROP_STATE_NORMAL              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_0_CROP_STATE_RESET               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1                                0x00400084 /* RW-4R */
#define NV_PGRAPH_DEBUG_1_VOLATILE_RESET                        0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_VOLATILE_RESET_NOT_LAST        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_VOLATILE_RESET_LAST            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_VOLATILE_RESET_INIT            0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_1_DMA_ACTIVITY                          4:4 /* CWIVF */
#define NV_PGRAPH_DEBUG_1_DMA_ACTIVITY_IGNORE            0x00000000 /* CWI-V */
#define NV_PGRAPH_DEBUG_1_DMA_ACTIVITY_CANCEL            0x00000001 /* -W--T */
#define NV_PGRAPH_DEBUG_1_PM                                    5:5 /* CWIVF */
#define NV_PGRAPH_DEBUG_1_PM_IGNORE                      0x00000000 /* CWI-V */
#define NV_PGRAPH_DEBUG_1_PM_TRIGGER                     0x00000001 /* -W--T */
#define NV_PGRAPH_DEBUG_1_MS_ENUMS                              6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_MS_ENUMS_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_MS_ENUMS_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_MS_ENUMS_INIT                  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_GL_ENUMS                              7:7 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_GL_ENUMS_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_GL_ENUMS_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_GL_ENUMS_INIT                  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_VTX_PTE                               8:8 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_VTX_PTE_DISABLED               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_VTX_PTE_ENABLED                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_VTX_PTE_INIT                   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_VTX_CACHE                             9:9 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_VTX_CACHE_DISABLED             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_VTX_CACHE_ENABLED              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_VTX_CACHE_INIT                 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_VTX_FILE                            10:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_VTX_FILE_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_VTX_FILE_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_VTX_FILE_INIT                  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_XF_ASYNC                            12:12 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_XF_ASYNC_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_XF_ASYNC_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_LT_ASYNC                            13:13 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_LT_ASYNC_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_LT_ASYNC_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_AUTO                        14:14 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_AUTO_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_AUTO_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_AUTO_INIT              0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_Y                           15:15 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_Y_DECR                 0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_Y_INCR                 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_DRAWDIR_Y_INIT                 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_INSTANCE                            16:16 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_INSTANCE_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_INSTANCE_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_INSTANCE_INIT                  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_CTX                                 20:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_1_CTX_DISABLED                   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_1_CTX_ENABLED                    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_CTX_INIT                       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_1_CACHE                               24:24 /* CWIVF */
#define NV_PGRAPH_DEBUG_1_CACHE_IGNORE                   0x00000000 /* CWI-V */
#define NV_PGRAPH_DEBUG_1_CACHE_INVALIDATE               0x00000001 /* -W--T */
#define NV_PGRAPH_DEBUG_2                                0x00400880 /* RW-4R */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_2D                   0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_2D_DISABLED   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_2D_ENABLED    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_2D_INIT       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_BLT                  1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_BLT_DISABLED  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_BLT_ENABLED   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_BLT_INIT      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_CELS                 2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_CELS_DISABLED 0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_CELS_ENABLED  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_CELS_INIT     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_3D                   3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_3D_DISABLED   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_3D_ENABLED    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCH_CHECK_3D_INIT       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_CHECK                    4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_CHECK_DISABLED    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_CHECK_ENABLED     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_CHECK_INIT        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_CHECK                   5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_CHECK_DISABLED   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_CHECK_ENABLED    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_CHECK_INIT       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_MEMSIZE_CHECK                  6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_MEMSIZE_CHECK_DISABLED  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_MEMSIZE_CHECK_ENABLED   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_MEMSIZE_CHECK_INIT      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_SWIZZLE_CHECK                  7:7 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_SWIZZLE_CHECK_DISABLED  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_SWIZZLE_CHECK_ENABLED   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_SWIZZLE_CHECK_INIT      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEVIOL                       8:8 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEVIOL_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEVIOL_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEVIOL_INIT           0x00000001 /* RW0-V */
#define NV_PGRAPH_DEBUG_2_PREROP_ENDIAN_CHECK                   9:9 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_ENDIAN_CHECK_DISABLED   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_ENDIAN_CHECK_ENABLED    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_ENDIAN_CHECK_INIT       0x00000001 /* RW0-V */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_INT                    10:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_INT_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_INT_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_LIMIT_INT_INIT          0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_INT                   11:11 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_INT_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_INT_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_OVRFLW_INT_INIT         0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PASS_VIOL                    12:12 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_PASS_VIOL_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_PASS_VIOL_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PASS_VIOL_INIT          0x00000000 /* RW0-V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCHWRAP                    13:13 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCHWRAP_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCHWRAP_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_PITCHWRAP_INIT          0x00000000 /* RW0-V */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_3D                    14:14 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_3D_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_3D_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_3D_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_2D                    15:15 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_2D_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_2D_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_DITHER_2D_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_SWALLOW_REQS                 16:16 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_SWALLOW_REQS_DISABLED   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_SWALLOW_REQS_ENABLED    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_SWALLOW_REQS_INIT       0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_SBFILTER                     17:17 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_SBFILTER_ENABLE         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_SBFILTER_DISABLE        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_SBFILTER_INIT           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_FASTCLEAR                    18:18 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_FASTCLEAR_ENABLE        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_FASTCLEAR_DISABLE       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_FASTCLEAR_INIT          0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_FLUSH_HOLDOFF                19:19 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_FLUSH_HOLDOFF_DISABLE   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_FLUSH_HOLDOFF_ENABLE    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_FLUSH_HOLDOFF_INIT      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEBIT_UPDATE               20:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEBIT_UPDATE_AUTO     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEBIT_UPDATE_MANUAL   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_TILEBIT_UPDATE_INIT     0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_BLEND_OPT                    21:21 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_BLEND_OPT_DISABLE       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_2_PREROP_BLEND_OPT_ENABLE        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_BLEND_OPT_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_2_PREROP_SPARE                        31:22 /* RWIVF */
#define NV_PGRAPH_DEBUG_2_PREROP_SPARE_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3                                0x0040008C /* RW-4R */
#define NV_PGRAPH_DEBUG_3_FLUSHING                              0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_FLUSHING_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_FLUSHING_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FLUSHING_INIT                  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_ZCULLFLUSH                            1:1 /* CWIVF */
#define NV_PGRAPH_DEBUG_3_ZCULLFLUSH_IGNORE              0x00000000 /* CWI-V */
#define NV_PGRAPH_DEBUG_3_ZCULLFLUSH_ACTIVATE            0x00000001 /* -W--T */
#define NV_PGRAPH_DEBUG_3_HW_CONTEXT_SWITCH                     2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_HW_CONTEXT_SWITCH_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_HW_CONTEXT_SWITCH_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_HW_CONTEXT_SWITCH_INIT         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FD_CHECK                              3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_FD_CHECK_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_FD_CHECK_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FD_CHECK_INIT                  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FAST_DATA_STRTCH                      4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_FAST_DATA_STRTCH_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_FAST_DATA_STRTCH_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FAST_DATA_STRTCH_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FAST_3D_SHADOW_DATA                   5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_FAST_3D_SHADOW_DATA_DISABLED   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_FAST_3D_SHADOW_DATA_ENABLED    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FAST_3D_SHADOW_DATA_INIT       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_CHECK_64BYTE_ALIGN                    6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_CHECK_64BYTE_ALIGN_DISABLED    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_CHECK_64BYTE_ALIGN_ENABLED     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_CHECK_64BYTE_ALIGN_INIT        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_ZFLUSH                                7:7 /* CWIVF */
#define NV_PGRAPH_DEBUG_3_ZFLUSH_IGNORE                  0x00000000 /* CWI-V */
#define NV_PGRAPH_DEBUG_3_ZFLUSH_ACTIVATE                0x00000001 /* -W--T */
#define NV_PGRAPH_DEBUG_3_SINGLE_STEP                           8:8 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_SINGLE_STEP_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_SINGLE_STEP_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_SINGLE_STEP_INIT               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_RDI_IDLE_WAIT                         9:9 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_RDI_IDLE_WAIT_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_RDI_IDLE_WAIT_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_RDI_IDLE_WAIT_INIT             0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_IDLE_FILTER                         10:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_IDLE_FILTER_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_IDLE_FILTER_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_IDLE_FILTER_INIT               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FD_CLEAR                            11:11 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_FD_CLEAR_DISABLED              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_FD_CLEAR_ENABLED               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FD_CLEAR_INIT                  0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_SYNCHRONIZE                         12:12 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_SYNCHRONIZE_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_SYNCHRONIZE_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_SYNCHRONIZE_INIT               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_OBJECT_RELOAD                       14:14 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_OBJECT_RELOAD_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_OBJECT_RELOAD_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_OBJECT_RELOAD_INIT             0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_PM_TRIGGER                          15:15 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_PM_TRIGGER_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_PM_TRIGGER_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_PM_TRIGGER_INIT                0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_ALTARCH                             16:16 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_ALTARCH_DISABLED               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_ALTARCH_ENABLED                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_ALTARCH_INIT                   0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_SINGLE_CYCLE_LOAD                   17:17 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_SINGLE_CYCLE_LOAD_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_SINGLE_CYCLE_LOAD_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_SINGLE_CYCLE_LOAD_INIT         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_BILINEAR_3D                         18:18 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_BILINEAR_3D_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_BILINEAR_3D_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_BILINEAR_3D_INIT               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_VOLATILE_RESET                      19:19 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_VOLATILE_RESET_DISABLED        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_VOLATILE_RESET_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_VOLATILE_RESET_INIT            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK                          20:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK_INIT                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK_FAIL                     21:21 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK_FAIL_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK_FAIL_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_DATA_CHECK_FAIL_INIT           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FORMAT_CHECK                        22:22 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_FORMAT_CHECK_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_FORMAT_CHECK_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FORMAT_CHECK_INIT              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_DMA_CHECK                           23:23 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_DMA_CHECK_DISABLED             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_DMA_CHECK_ENABLED              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_DMA_CHECK_INIT                 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_STATE_CHECK                         24:24 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_STATE_CHECK_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_STATE_CHECK_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_STATE_CHECK_INIT               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_KELVIN_HWFLIP                       25:25 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_KELVIN_HWFLIP_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_KELVIN_HWFLIP_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_KELVIN_HWFLIP_INIT             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FAST_3D_RESTORE                     26:26 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_FAST_3D_RESTORE_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_FAST_3D_RESTORE_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_FAST_3D_RESTORE_INIT           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_STATE3D_CHECK                       27:27 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_STATE3D_CHECK_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_STATE3D_CHECK_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_STATE3D_CHECK_INIT             0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_3_XFMODE_COALESCE                     28:28 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_XFMODE_COALESCE_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_XFMODE_COALESCE_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_XFMODE_COALESCE_INIT           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_CTX_METHODS                         29:29 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_CTX_METHODS_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_CTX_METHODS_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_CTX_METHODS_INIT               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_OP_METHODS                          30:30 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_OP_METHODS_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_OP_METHODS_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_OP_METHODS_INIT                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_IGNORE_PATCHVALID                   31:31 /* RWIVF */
#define NV_PGRAPH_DEBUG_3_IGNORE_PATCHVALID_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_3_IGNORE_PATCHVALID_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_3_IGNORE_PATCHVALID_INIT         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4                                0x00400090 /* RW-4R */
#define NV_PGRAPH_DEBUG_4_FD_SPARE1                             0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_FD_SPARE1_DISABLED             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_FD_SPARE1_ENABLED              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_FD_SPARE2                             1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_FD_SPARE2_DISABLE              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_FD_SPARE2_ENABLED              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_COARSE_RSTR_SPARE1                    2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_COARSE_RSTR_SPARE1_DISABLED    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_COARSE_RSTR_SPARE1_ENABLED     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_COARSE_RSTR_SPARE2                    3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_COARSE_RSTR_SPARE2_DISABLE     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_COARSE_RSTR_SPARE2_ENABLED     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_RSTR2D_SPARE1                         4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_RSTR2D_SPARE1_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_RSTR2D_SPARE1_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_RSTR2D_SPARE2                         5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_RSTR2D_SPARE2_DISABLE          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_RSTR2D_SPARE2_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_FINE_RSTR_SPARE1                      6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_FINE_RSTR_SPARE1_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_FINE_RSTR_SPARE1_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_FRSTR_HALF_PIPE                       6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_FRSTR_HALF_PIPE_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_FRSTR_HALF_PIPE_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_FINE_RSTR_SPARE2                      7:7 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_FINE_RSTR_SPARE2_DISABLE       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_FINE_RSTR_SPARE2_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_TEX_SPARE1                            8:8 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_TEX_SPARE1_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_TEX_SPARE1_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_TEX_SPARE2                            9:9 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_TEX_SPARE2_DISABLE             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_TEX_SPARE2_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_COMB_SPARE1                         12:12 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_COMB_SPARE1_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_COMB_SPARE1_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_COMB_SPARE2                         13:13 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_COMB_SPARE2_DISABLE            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_COMB_SPARE2_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE1                        14:14 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE1_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE1_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE2                        15:15 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE2_DISABLE           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE2_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_XF_SPARE1                           16:16 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_XF_SPARE1_DISABLED             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_XF_SPARE1_ENABLED              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_XF_SPARE2                           17:17 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_XF_SPARE2_DISABLE              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_XF_SPARE2_ENABLED              0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE3                        18:18 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE3_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE3_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE4                        19:19 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE4_DISABLE           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SETUP_SPARE4_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_IDX_SPARE1                          20:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_IDX_SPARE1_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_IDX_SPARE1_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_IDX_SPARE2                          21:21 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_IDX_SPARE2_DISABLE             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_IDX_SPARE2_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_VTX_SPARE1                          22:22 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_VTX_SPARE1_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_VTX_SPARE1_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_VTX_SPARE2                          23:23 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_VTX_SPARE2_DISABLE             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_VTX_SPARE2_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_CAS_SPARE1                          24:24 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_CAS_SPARE1_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_CAS_SPARE1_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_CAS_SPARE2                          25:25 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_CAS_SPARE2_DISABLE             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_CAS_SPARE2_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SHD_SPARE1                          26:26 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SHD_SPARE1_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SHD_SPARE1_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SHD_SPARE2                          27:27 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SHD_SPARE2_DISABLE             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SHD_SPARE2_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SHDBE_SPARE1                        28:28 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SHDBE_SPARE1_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SHDBE_SPARE1_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_SHDBE_SPARE2                        29:29 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_SHDBE_SPARE2_DISABLE           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_SHDBE_SPARE2_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_DISABLE_H0                          30:30 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_DISABLE_H0_FALSE               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_DISABLE_H0_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_4_DISABLE_H1                          31:31 /* RWIVF */
#define NV_PGRAPH_DEBUG_4_DISABLE_H1_FALSE               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_4_DISABLE_H1_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5                                0x00400094 /* RW-4R */
#define NV_PGRAPH_DEBUG_5_ZCULL_REQ_FULL_CVG                    0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_REQ_FULL_CVG_DISABLED    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_REQ_FULL_CVG_ENABLED     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_REQ_FULL_CVG_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_FB_BUSY                    1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_FB_BUSY_DISABLED    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_FB_BUSY_ENABLED     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_FB_BUSY_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_S_ON_Z                     2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_S_ON_Z_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_S_ON_Z_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_PUNT_S_ON_Z_INIT         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_RETURN_COMP                     3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_RETURN_COMP_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_RETURN_COMP_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_RETURN_COMP_INIT         0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE4                          4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE4_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE4_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE5                          5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE5_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE5_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE6                          6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE6_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE6_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE7                          7:7 /* RWIVF */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE7_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_5_ZCULL_SPARE7_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6                                0x00400b80 /* RW-4R */
#define NV_PGRAPH_DEBUG_6_ROP_SEP_ZC_READS                      0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_SEP_ZC_READS_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_SEP_ZC_READS_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_SEP_ZC_READS_INIT          0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_3D                         1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_3D_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_3D_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_3D_INIT             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_2D                         2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_2D_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_2D_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_DITHER_2D_INIT             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_EARLY_ZABORT                      3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_EARLY_ZABORT_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_EARLY_ZABORT_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_EARLY_ZABORT_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_PASS_ROPFLUSH                     4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_PASS_ROPFLUSH_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_PASS_ROPFLUSH_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_PASS_ROPFLUSH_INIT         0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_DRAIN                        5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_DRAIN_DISABLED        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_DRAIN_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_DRAIN_INIT            0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER                    9:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER_0           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER_INIT        0x00000004 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER_FULL        0x00000008 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER2                 13:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER2_0          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER2_INIT       0x00000004 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CBUF_HIGHWATER2_FULL       0x00000008 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_3D                     14:14 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_3D_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_3D_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_3D_INIT           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_2D                     15:15 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_2D_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_2D_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_COALESCE_2D_INIT           0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_FIXED_ADRS                      16:16 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_FIXED_ADRS_DISABLED        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_FIXED_ADRS_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_FIXED_ADRS_INIT            0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_FAST_KEEP_DST                   17:17 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_FAST_KEEP_DST_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_FAST_KEEP_DST_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_FAST_KEEP_DST_INIT         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_FORCE_CREAD                     18:18 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_FORCE_CREAD_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_FORCE_CREAD_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_FORCE_CREAD_INIT           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ALLOW_3D_SKIP_READ               19:19 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_ALLOW_3D_SKIP_READ_ENABLED  0x00000001 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_ALLOW_3D_SKIP_READ_DISABLED 0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ALLOW_3D_SKIP_READ_INIT     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCMP_ALWAYS_READ                20:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_ZCMP_ALWAYS_READ_ENABLED   0x00000001 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCMP_ALWAYS_READ_DISABLED  0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCMP_ALWAYS_READ_INIT      0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCOMPRESS_EN                    21:21 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_ZCOMPRESS_EN_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCOMPRESS_EN_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCOMPRESS_EN_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CREADS                    22:22 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CREADS_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CREADS_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CREADS_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CWRITES                   23:23 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CWRITES_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CWRITES_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_BURST_CWRITES_INIT         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_AUTO_INIT                       24:24 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_AUTO_INIT_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_AUTO_INIT_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_AUTO_INIT_INIT             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_HASH_TEST1                      25:25 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_HASH_TEST1_DISABLED        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_HASH_TEST1_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_HASH_TEST1_INIT            0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_INTERLOCK                       26:26 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_INTERLOCK_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_INTERLOCK_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_INTERLOCK_INIT             0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZREAD                           28:27 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_ZREAD_NORMAL               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_ZREAD_FORCE_ZREAD          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZREAD_FORCE_NO_ZREAD       0x00000002 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZREAD_INIT                 0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCULL_DATA                      29:29 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_ZCULL_DATA_USE             0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCULL_DATA_DISCARD         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_ZCULL_DATA_INIT            0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CROP_SWALLOW                    30:30 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_ROP_CROP_SWALLOW_DISABLED      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_ROP_CROP_SWALLOW_ENABLED       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_ROP_CROP_SWALLOW_INIT          0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_SPARE_BIT31                         31:31 /* RWIVF */
#define NV_PGRAPH_DEBUG_6_SPARE_BIT31_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_6_SPARE_BIT31_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_6_SPARE_BIT31_INIT               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_6_BITS                                 31:0 /* RWIUF */
#define NV_PGRAPH_DEBUG_6_BITS_DISABLED                  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7                                0x00400b84 /* RW-4R */
#define NV_PGRAPH_DEBUG_7_ROP_INIT_ZRD_TMSTAMP                  0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_INIT_ZRD_TMSTAMP_DEFAULT   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_INIT_ZRD_TMSTAMP_INIT      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZCULL_NO_STALE                    1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZCULL_NO_STALE_ENABLE      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZCULL_NO_STALE_DISABLE     0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZCULL_NO_STALE_INIT        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_INTERLOCK                    2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_INTERLOCK_ENA         0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_INTERLOCK_DIS         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_INTERLOCK_INIT        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_VISIBLE                 3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_VISIBLE_ENABLE   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_VISIBLE_DISABLE  0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_VISIBLE_INIT     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_PURGE_PER_PKT                       4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_PURGE_PER_PKT_ENABLE         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_PURGE_PER_PKT_DISABLE        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_PURGE_PER_PKT_INIT           0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_16BYTE_WR                  5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_16BYTE_WR_ENABLE    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_16BYTE_WR_DISABLE   0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_16BYTE_WR_INIT      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_FSTCLR_EXPAND                 6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_FSTCLR_EXPAND_ENABLE   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_FSTCLR_EXPAND_DISABLE  0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_FSTCLR_EXPAND_INIT     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_RMW_DISABLE                7:7 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_RMW_DISABLE_ENABLE  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_RMW_DISABLE_DISABLE 0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_FORCE_NO_RMW_DISABLE_INIT    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_COMPRESS                    8:8 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_COMPRESS_ENABLE      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_COMPRESS_DISABLE     0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_COMPRESS_INIT        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_CMPR_FULL_BE_ONLY                   9:9 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_CMPR_FULL_BE_ONLY_ENABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_CMPR_FULL_BE_ONLY_DISABLE    0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_CMPR_FULL_BE_ONLY_INIT       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_ALWAYS_WR_STENCIL                 10:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_ALWAYS_WR_STENCIL_ENABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_ALWAYS_WR_STENCIL_DISABLE    0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_ALWAYS_WR_STENCIL_INIT       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_SKIP_WR_EQ                11:11 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_SKIP_WR_EQ_ENABLE    0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_SKIP_WR_EQ_DISABLE   0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_INHIBIT_SKIP_WR_EQ_INIT      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_SELECTPM                          13:12 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_SELECTPM_NORMAL              0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_SELECTPM_PKTRF_STALL         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_SELECTPM_CMPR_STALL          0x00000002 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_SELECTPM_TAGREL_STALL        0x00000003 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_SELECTPM_INIT                0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA1                            14:14 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA1_ENABLE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA1_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA1_INIT                  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA2                            15:15 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA2_ENABLE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA2_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA2_INIT                  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA3                            16:16 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA3_ENABLE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA3_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA3_INIT                  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_SELECTPM                         18:17 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_SELECTPM_GRP3               0x00000002 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_SELECTPM_GRP2               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_SELECTPM_GRP1               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_SELECTPM_INIT               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA4                            19:19 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA4_ENABLE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA4_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZWR_EXTRA4_INIT                  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_HASH_TAGS                         24:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_HASH_TAGS_01                 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_HASH_TAGS_INIT               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_BLIT_HASH                        25:25 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_BLIT_HASH_ENABLE            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_BLIT_HASH_DISABLE           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_BLIT_HASH_INIT              0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_RAISE_PRI                        26:26 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_RAISE_PRI_ENABLE            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_RAISE_PRI_DISABLE           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZROP_RAISE_PRI_INIT              0x00000001 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA0                            27:27 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA0_ENABLE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA0_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA0_INIT                  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA1                            28:28 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA1_ENABLE                0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA1_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_ZRD_EXTRA1_INIT                  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_RAISE_PRI                        29:29 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_RAISE_PRI_ENABLE            0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_RAISE_PRI_DISABLE           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_CROP_RAISE_PRI_INIT              0x00000001 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_ROP_TC_SELECT_REQ                         30:30 /* RWIVF */
#define NV_PGRAPH_DEBUG_7_ROP_TC_SELECT_REQ_PIPEID             0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_TC_SELECT_REQ_BANK               0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_7_ROP_TC_SELECT_REQ_INIT               0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_7_SPARE                                     31:31 /* RWIUF */
#define NV_PGRAPH_DEBUG_7_BITS                                       31:0 /* RWIUF */
#define NV_PGRAPH_DEBUG_7_BITS_DISABLED                        0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_8                                0x00400098 /* RW-4R */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_WATERMARK                 9:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_WATERMARK_64       0x00000040 /* RWI-V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_WATERMARK_PERF     0x00000094 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_WATERMARK_INIT     0x00000078 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_WATERMARK             19:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_WATERMARK_0      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_WATERMARK_PERF   0x00000094 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_WATERMARK_INIT   0x00000078 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_DEBUG                   20:20 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_DEBUG_DISABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_DEBUG_ENABLE       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFO_DEBUG_INIT         0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_DEBUG                 21:21 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_DEBUG_DISABLE    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_DEBUG_ENABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FIFOP1_DEBUG_INIT       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_ONE_TEXTURE                  29:29 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_SHADER_ONE_TEXTURE_DISABLE     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_8_SHADER_ONE_TEXTURE_ENABLE      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_ONE_TEXTURE_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FOG_LINE_CLAMP               30:30 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_SHADER_FOG_LINE_CLAMP_DISABLE  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_8_SHADER_FOG_LINE_CLAMP_ENABLE   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_FOG_LINE_CLAMP_INIT     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_COMBINER_NEG_TEXTURE                31:31 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_COMBINER_NEG_TEXTURE_ENABLE    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_8_COMBINER_NEG_TEXTURE_DISABLE   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_8_COMBINER_NEG_TEXTURE_INIT      0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_8_SHADER_SPARE                        31:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_8_SHADER_SPARE_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9                                0x0040009C /* RW-4R */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH0_CHECK                    0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH0_CHECK_ENABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH0_CHECK_DISABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH0_CHECK_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH1_CHECK                    1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH1_CHECK_ENABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH1_CHECK_DISABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH1_CHECK_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH2_CHECK                    2:2 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH2_CHECK_ENABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH2_CHECK_DISABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH2_CHECK_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH3_CHECK                    3:3 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH3_CHECK_ENABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH3_CHECK_DISABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_PATCH3_CHECK_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_END_PATCH_CHECK                       4:4 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_END_PATCH_CHECK_ENABLE         0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_END_PATCH_CHECK_DISABLE        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_END_PATCH_CHECK_INIT           0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_SWATCH_CHECK                5:5 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_SWATCH_CHECK_ENABLE  0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_SWATCH_CHECK_DISABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_SWATCH_CHECK_INIT    0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_CURVE_CHECK                 6:6 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_CURVE_CHECK_ENABLE   0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_CURVE_CHECK_DISABLE  0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_END_CURVE_CHECK_INIT     0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_CURVE_COEFF_CHECK                     7:7 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_CURVE_COEFF_CHECK_ENABLE       0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_CURVE_COEFF_CHECK_DISABLE      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_CURVE_COEFF_CHECK_INIT         0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS0_CHECK                    8:8 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS0_CHECK_ENABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS0_CHECK_DISABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS0_CHECK_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS1_CHECK                    9:9 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS1_CHECK_ENABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS1_CHECK_DISABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS1_CHECK_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS2_CHECK                  10:10 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS2_CHECK_ENABLE      0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS2_CHECK_DISABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_BEGIN_TRANS2_CHECK_INIT        0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_9_END_TRANSITION_CHECK                11:11 /* RWIVF */
#define NV_PGRAPH_DEBUG_9_END_TRANSITION_CHECK_ENABLE    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_9_END_TRANSITION_CHECK_DISABLE   0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_9_END_TRANSITION_CHECK_INIT      0x00000000 /* RW--V */
#define NV_PGRAPH_DEBUG_10                               0x00400b88 /* RW-4R */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_CRD                    0:0 /* RWIVF */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_CRD_DISABLE     0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_CRD_ENABLE      0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_CRD_INIT        0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_KILL                   1:1 /* RWIVF */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_KILL_DISABLE    0x00000000 /* RWI-V */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_KILL_ENABLE     0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_10_ROP_BLEND_OPT_KILL_INIT       0x00000001 /* RW--V */
#define NV_PGRAPH_DEBUG_10_SPARE                               31:2 /* RWIUF */
#define NV_PGRAPH_DEBUG_10_BITS                                31:0 /* RWIUF */
#define NV_PGRAPH_DEBUG_10_BITS_DISABLED                 0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR                                   0x00400100 /* RW-4R */
#define NV_PGRAPH_INTR_NOTIFY                                   0:0 /* RWIVF */
#define NV_PGRAPH_INTR_NOTIFY_NOT_PENDING                0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_NOTIFY_PENDING                    0x00000001 /* R---V */
#define NV_PGRAPH_INTR_NOTIFY_RESET                      0x00000001 /* -W--T */
#define NV_PGRAPH_INTR_MISSING_HW                               4:4 /* RWIVF */
#define NV_PGRAPH_INTR_MISSING_HW_NOT_PENDING            0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_MISSING_HW_PENDING                0x00000001 /* R---V */
#define NV_PGRAPH_INTR_MISSING_HW_RESET                  0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_R                        6:6 /* RWIVF */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_R_NOT_PENDING     0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_R_PENDING         0x00000001 /* R---V */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_R_RESET           0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_W                        7:7 /* RWIVF */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_W_NOT_PENDING     0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_W_PENDING         0x00000001 /* R---V */
#define NV_PGRAPH_INTR_TLB_PRESENT_DMA_W_RESET           0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_A                        8:8 /* RWIVF */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_A_NOT_PENDING     0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_A_PENDING         0x00000001 /* R---V */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_A_RESET           0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_B                        9:9 /* RWIVF */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_B_NOT_PENDING     0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_B_PENDING         0x00000001 /* R---V */
#define NV_PGRAPH_INTR_TLB_PRESENT_TEX_B_RESET           0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_TLB_PRESENT_VTX                        10:10 /* RWIVF */
#define NV_PGRAPH_INTR_TLB_PRESENT_VTX_NOT_PENDING       0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_TLB_PRESENT_VTX_PENDING           0x00000001 /* R---V */
#define NV_PGRAPH_INTR_TLB_PRESENT_VTX_RESET             0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_CONTEXT_SWITCH                         12:12 /* RWIVF */
#define NV_PGRAPH_INTR_CONTEXT_SWITCH_NOT_PENDING        0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_CONTEXT_SWITCH_PENDING            0x00000001 /* R---V */
#define NV_PGRAPH_INTR_CONTEXT_SWITCH_RESET              0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_STATE3D                                13:13 /* RWIVF */
#define NV_PGRAPH_INTR_STATE3D_NOT_PENDING               0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_STATE3D_PENDING                   0x00000001 /* R---V */
#define NV_PGRAPH_INTR_STATE3D_RESET                     0x00000001 /* -W--C */
#define NV_PGRAPH_INTR_BUFFER_NOTIFY                          16:16 /* RWIVF */
#define NV_PGRAPH_INTR_BUFFER_NOTIFY_NOT_PENDING         0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_BUFFER_NOTIFY_PENDING             0x00000001 /* R---V */
#define NV_PGRAPH_INTR_BUFFER_NOTIFY_RESET               0x00000001 /* -W--T */
#define NV_PGRAPH_INTR_ERROR                                  20:20 /* RWIVF */
#define NV_PGRAPH_INTR_ERROR_NOT_PENDING                 0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_ERROR_PENDING                     0x00000001 /* R---V */
#define NV_PGRAPH_INTR_ERROR_RESET                       0x00000001 /* -W--T */
#define NV_PGRAPH_INTR_SINGLE_STEP                            24:24 /* RWIVF */
#define NV_PGRAPH_INTR_SINGLE_STEP_NOT_PENDING           0x00000000 /* R-I-V */
#define NV_PGRAPH_INTR_SINGLE_STEP_PENDING               0x00000001 /* R---V */
#define NV_PGRAPH_INTR_SINGLE_STEP_RESET                 0x00000001 /* -W--C */
#define NV_PGRAPH_NSTATUS                                0x00400104 /* RW-4R */
#define NV_PGRAPH_NSTATUS_STATE_IN_USE                        23:23 /* RWIVF */
#define NV_PGRAPH_NSTATUS_STATE_IN_USE_NOT_PENDING       0x00000000 /* RWI-V */
#define NV_PGRAPH_NSTATUS_STATE_IN_USE_PENDING           0x00000001 /* RW--V */
#define NV_PGRAPH_NSTATUS_INVALID_STATE                       24:24 /* RWIVF */
#define NV_PGRAPH_NSTATUS_INVALID_STATE_NOT_PENDING      0x00000000 /* RWI-V */
#define NV_PGRAPH_NSTATUS_INVALID_STATE_PENDING          0x00000001 /* RW--V */
#define NV_PGRAPH_NSTATUS_BAD_ARGUMENT                        25:25 /* RWIVF */
#define NV_PGRAPH_NSTATUS_BAD_ARGUMENT_NOT_PENDING       0x00000000 /* RWI-V */
#define NV_PGRAPH_NSTATUS_BAD_ARGUMENT_PENDING           0x00000001 /* RW--V */
#define NV_PGRAPH_NSTATUS_PROTECTION_FAULT                    26:26 /* RWIVF */
#define NV_PGRAPH_NSTATUS_PROTECTION_FAULT_NOT_PENDING   0x00000000 /* RWI-V */
#define NV_PGRAPH_NSTATUS_PROTECTION_FAULT_PENDING       0x00000001 /* RW--V */
#define NV_PGRAPH_NSOURCE                                0x00400108 /* R--4R */
#define NV_PGRAPH_NSOURCE_NOTIFICATION                          0:0 /* R-IVF */
#define NV_PGRAPH_NSOURCE_NOTIFICATION_NOT_PENDING       0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_NOTIFICATION_PENDING           0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_DATA_ERROR                            1:1 /* R-IVF */
#define NV_PGRAPH_NSOURCE_DATA_ERROR_NOT_PENDING         0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_DATA_ERROR_PENDING             0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_PROTECTION_ERROR                      2:2 /* R-IVF */
#define NV_PGRAPH_NSOURCE_PROTECTION_ERROR_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_PROTECTION_ERROR_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_RANGE_EXCEPTION                       3:3 /* R-IVF */
#define NV_PGRAPH_NSOURCE_RANGE_EXCEPTION_NOT_PENDING    0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_RANGE_EXCEPTION_PENDING        0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_LIMIT_COLOR                           4:4 /* R-IVF */
#define NV_PGRAPH_NSOURCE_LIMIT_COLOR_NOT_PENDING        0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_LIMIT_COLOR_PENDING            0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_LIMIT_ZETA                            5:5 /* R-IVF */
#define NV_PGRAPH_NSOURCE_LIMIT_ZETA_NOT_PENDING         0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_LIMIT_ZETA_PENDING             0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_ILLEGAL_MTHD                          6:6 /* R-IVF */
#define NV_PGRAPH_NSOURCE_ILLEGAL_MTHD_NOT_PENDING       0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_ILLEGAL_MTHD_PENDING           0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_DMA_R_PROTECTION                      7:7 /* R-IVF */
#define NV_PGRAPH_NSOURCE_DMA_R_PROTECTION_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_DMA_R_PROTECTION_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_DMA_W_PROTECTION                      8:8 /* R-IVF */
#define NV_PGRAPH_NSOURCE_DMA_W_PROTECTION_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_DMA_W_PROTECTION_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_FORMAT_EXCEPTION                      9:9 /* R-IVF */
#define NV_PGRAPH_NSOURCE_FORMAT_EXCEPTION_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_FORMAT_EXCEPTION_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_PATCH_EXCEPTION                     10:10 /* R-IVF */
#define NV_PGRAPH_NSOURCE_PATCH_EXCEPTION_NOT_PENDING    0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_PATCH_EXCEPTION_PENDING        0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_STATE_INVALID                       11:11 /* R-IVF */
#define NV_PGRAPH_NSOURCE_STATE_INVALID_NOT_PENDING      0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_STATE_INVALID_PENDING          0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_DOUBLE_NOTIFY                       12:12 /* R-IVF */
#define NV_PGRAPH_NSOURCE_DOUBLE_NOTIFY_NOT_PENDING      0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_DOUBLE_NOTIFY_PENDING          0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_NOTIFY_IN_USE                       13:13 /* R-IVF */
#define NV_PGRAPH_NSOURCE_NOTIFY_IN_USE_NOT_PENDING      0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_NOTIFY_IN_USE_PENDING          0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_METHOD_CNT                          14:14 /* R-IVF */
#define NV_PGRAPH_NSOURCE_METHOD_CNT_NOT_PENDING         0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_METHOD_CNT_PENDING             0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_BFR_NOTIFICATION                    15:15 /* R-IVF */
#define NV_PGRAPH_NSOURCE_BFR_NOTIFICATION_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_BFR_NOTIFICATION_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_DMA_VTX_PROTECTION                  16:16 /* R-IVF */
#define NV_PGRAPH_NSOURCE_DMA_VTX_PROTECTION_NOT_PENDING 0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_DMA_VTX_PROTECTION_PENDING     0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_IDX_INLINE_REUSE                    17:17 /* R-IVF */
#define NV_PGRAPH_NSOURCE_IDX_INLINE_REUSE_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_IDX_INLINE_REUSE_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_INVALID_OPERATION                   18:18 /* R-IVF */
#define NV_PGRAPH_NSOURCE_INVALID_OPERATION_NOT_PENDING  0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_INVALID_OPERATION_PENDING      0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_FD_INVALID_OP                       19:19 /* R-IVF */
#define NV_PGRAPH_NSOURCE_FD_INVALID_OP_NOT_PENDING      0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_FD_INVALID_OP_PENDING          0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_FD_ERROR_CODE                       21:20 /* R-IVF */
#define NV_PGRAPH_NSOURCE_FD_ERROR_CODE_0                0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_FD_ERROR_CODE_1                0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_FD_ERROR_CODE_2                0x00000002 /* R---V */
#define NV_PGRAPH_NSOURCE_FD_ERROR_CODE_3                0x00000003 /* R---V */
#define NV_PGRAPH_NSOURCE_TEX_A_PROTECTION                    22:22 /* R-IVF */
#define NV_PGRAPH_NSOURCE_TEX_A_PROTECTION_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_TEX_A_PROTECTION_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_NSOURCE_TEX_B_PROTECTION                    23:23 /* R-IVF */
#define NV_PGRAPH_NSOURCE_TEX_B_PROTECTION_NOT_PENDING   0x00000000 /* R-I-V */
#define NV_PGRAPH_NSOURCE_TEX_B_PROTECTION_PENDING       0x00000001 /* R---V */
#define NV_PGRAPH_INTR_EN                                0x00400140 /* RW-4R */
#define NV_PGRAPH_INTR_EN_NOTIFY                                0:0 /* RWIVF */
#define NV_PGRAPH_INTR_EN_NOTIFY_DISABLED                0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_NOTIFY_ENABLED                 0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_MISSING_HW                            4:4 /* RWIVF */
#define NV_PGRAPH_INTR_EN_MISSING_HW_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_MISSING_HW_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_DMA_R                     6:6 /* RWIVF */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_DMA_R_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_DMA_R_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_DMA_W                     7:7 /* RWIVF */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_DMA_W_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_DMA_W_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_TEX_A                     8:8 /* RWIVF */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_TEX_A_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_TEX_A_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_TEX_B                     9:9 /* RWIVF */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_TEX_B_DISABLED     0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_TEX_B_ENABLED      0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_VTX                     10:10 /* RWIVF */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_VTX_DISABLED       0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_TLB_PRESENT_VTX_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_CONTEXT_SWITCH                      12:12 /* RWIVF */
#define NV_PGRAPH_INTR_EN_CONTEXT_SWITCH_DISABLED        0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_CONTEXT_SWITCH_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_STATE3D                             13:13 /* RWIVF */
#define NV_PGRAPH_INTR_EN_STATE3D_DISABLED               0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_STATE3D_ENABLED                0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_BUFFER_NOTIFY                       16:16 /* RWIVF */
#define NV_PGRAPH_INTR_EN_BUFFER_NOTIFY_DISABLED         0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_BUFFER_NOTIFY_ENABLED          0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_ERROR                               20:20 /* RWIVF */
#define NV_PGRAPH_INTR_EN_ERROR_DISABLED                 0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_ERROR_ENABLED                  0x00000001 /* RW--V */
#define NV_PGRAPH_INTR_EN_SINGLE_STEP                         24:24 /* RWIVF */
#define NV_PGRAPH_INTR_EN_SINGLE_STEP_DISABLED           0x00000000 /* RWI-V */
#define NV_PGRAPH_INTR_EN_SINGLE_STEP_ENABLED            0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_CONTROL                            0x00400144 /* RW-4R */
#define NV_PGRAPH_CTX_CONTROL_MINIMUM_TIME                      1:0 /* RWIVF */
#define NV_PGRAPH_CTX_CONTROL_MINIMUM_TIME_33US          0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_CONTROL_MINIMUM_TIME_262US         0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_CONTROL_MINIMUM_TIME_2MS           0x00000002 /* RW--V */
#define NV_PGRAPH_CTX_CONTROL_MINIMUM_TIME_17MS          0x00000003 /* RW--V */
#define NV_PGRAPH_CTX_CONTROL_TIME                              8:8 /* RWIVF */
#define NV_PGRAPH_CTX_CONTROL_TIME_EXPIRED               0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_CONTROL_TIME_NOT_EXPIRED           0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_CONTROL_CHID                            16:16 /* RWIVF */
#define NV_PGRAPH_CTX_CONTROL_CHID_INVALID               0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_CONTROL_CHID_VALID                 0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_CONTROL_CHANGE                          20:20 /* R--VF */
#define NV_PGRAPH_CTX_CONTROL_CHANGE_UNAVAILABLE         0x00000000 /* R---V */
#define NV_PGRAPH_CTX_CONTROL_CHANGE_AVAILABLE           0x00000001 /* R---V */
#define NV_PGRAPH_CTX_CONTROL_SWITCHING                       24:24 /* RWIVF */
#define NV_PGRAPH_CTX_CONTROL_SWITCHING_IDLE             0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_CONTROL_SWITCHING_BUSY             0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_CONTROL_DEVICE                          28:28 /* RWIVF */
#define NV_PGRAPH_CTX_CONTROL_DEVICE_DISABLED            0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_CONTROL_DEVICE_ENABLED             0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_USER                               0x00400148 /* RW-4R */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D                           0:0 /* RWIVF */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D_FALSE              0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D_TRUE               0x00000001 /* RWI-V */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D_VALID                     4:4 /* RWIVF */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D_VALID_FALSE        0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D_VALID_TRUE         0x00000001 /* RWI-V */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D_ID                       12:8 /* RWIVF */
#define NV_PGRAPH_CTX_USER_CHANNEL_3D_ID_0               0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_USER_SUBCH                              15:13 /* RWIVF */
#define NV_PGRAPH_CTX_USER_SUBCH_0                       0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_USER_CHID                               28:24 /* RWIVF */
#define NV_PGRAPH_CTX_USER_CHID_0                        0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_USER_SINGLE_STEP                        31:31 /* RWIVF */
#define NV_PGRAPH_CTX_USER_SINGLE_STEP_DISABLED          0x00000000 /* RWI-V */
#define NV_PGRAPH_CTX_USER_SINGLE_STEP_ENABLED           0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1                            0x0040014C /* RW-4R */
#define NV_PGRAPH_CTX_SWITCH1_GRCLASS                           7:0 /* RWXVF */
#define NV_PGRAPH_CTX_SWITCH1_CHROMA_KEY                      12:12 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CHROMA_KEY_DISABLE         0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CHROMA_KEY_ENABLE          0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_USER_CLIP                       13:13 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_USER_CLIP_DISABLE          0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_USER_CLIP_ENABLE           0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_SWIZZLE                         14:14 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_SWIZZLE_DISABLE            0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_SWIZZLE_ENABLE             0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_CONFIG                    17:15 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_CONFIG_SRCCOPY_AND   0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_CONFIG_ROP_AND       0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_CONFIG_BLEND_AND     0x00000002 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_CONFIG_SRCCOPY       0x00000003 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_CONFIG_SRCCOPY_PRE   0x00000004 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_CONFIG_BLEND_PRE     0x00000005 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_SYNCHRONIZE                     18:18 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_SYNCHRONIZE_DISABLE        0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_SYNCHRONIZE_ENABLE         0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_ENDIAN_MODE                     19:19 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_ENDIAN_MODE_LITTLE         0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_ENDIAN_MODE_BIG            0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_DITHER_MODE                     21:20 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_DITHER_MODE_COMPATIBILITY  0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_DITHER_MODE_DITHER         0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_DITHER_MODE_TRUNCATE       0x00000002 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_DITHER_MODE_MS             0x00000003 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CLASS_TYPE                      22:22 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CLASS_TYPE_COMPATIBILITY   0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CLASS_TYPE_PERFORMANCE     0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_SINGLE_STEP                     23:23 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_SINGLE_STEP_DISABLED       0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_SINGLE_STEP_ENABLED        0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_STATUS                    24:24 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_STATUS_INVALID       0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_PATCH_STATUS_VALID         0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_SURFACE0                25:25 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_SURFACE0_INVALID   0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_SURFACE0_VALID     0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_SURFACE1                26:26 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_SURFACE1_INVALID   0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_SURFACE1_VALID     0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_PATTERN                 27:27 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_PATTERN_INVALID    0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_PATTERN_VALID      0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_ROP                     28:28 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_ROP_INVALID        0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_ROP_VALID          0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_BETA1                   29:29 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_BETA1_INVALID      0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_BETA1_VALID        0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_BETA4                   30:30 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_BETA4_INVALID      0x00000000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_CONTEXT_BETA4_VALID        0x00000001 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH1_VOLATILE_RESET                  31:31 /* CWIVF */
#define NV_PGRAPH_CTX_SWITCH1_VOLATILE_RESET_IGNORE      0x00000000 /* CWI-V */
#define NV_PGRAPH_CTX_SWITCH1_VOLATILE_RESET_ENABLED     0x00000001 /* -W--T */
#define NV_PGRAPH_CTX_SWITCH2                            0x00400150 /* RW-4R */
#define NV_PGRAPH_CTX_SWITCH2_MONO_FORMAT                       1:0 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH2_MONO_FORMAT_INVALID              0x00 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_MONO_FORMAT_CGA6_M1              0x01 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_MONO_FORMAT_LE_M1                0x02 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT                     13:8 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_INVALID             0x00 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_Y8               0x01 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X16A8Y8          0x02 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X24Y8            0x03 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_A1R5G5B5         0x06 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X1R5G5B5         0x07 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X16A1R5G5B5      0x08 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X17R5G5B5        0x09 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_R5G6B5           0x0A /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_A16R5G6B5        0x0B /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X16R5G6B5        0x0C /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_A8R8G8B8         0x0D /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X8R8G8B8         0x0E /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_Y16              0x0F /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_A16Y16           0x10 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_X16Y16           0x11 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_V8YB8U8YA8       0x12 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_YB8V8YA8U8       0x13 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_Y32              0x14 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_AY8              0x15 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_EYB8ECR8EYA8ECB8 0x16 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_COLOR_FORMAT_LE_ECR8EYB8ECB8EYA8 0x17 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH2_NOTIFY_INSTANCE                 31:16 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH2_NOTIFY_INSTANCE_INVALID        0x0000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH3                            0x00400154 /* RW-4R */
#define NV_PGRAPH_CTX_SWITCH3_DMA_INSTANCE_0                   15:0 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH3_DMA_INSTANCE_0_INVALID         0x0000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH3_DMA_INSTANCE_1                  31:16 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH3_DMA_INSTANCE_1_INVALID         0x0000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH4                            0x00400158 /* RW-4R */
#define NV_PGRAPH_CTX_SWITCH4_USER_INSTANCE                    15:0 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH4_USER_INSTANCE_INVALID          0x0000 /* RW--V */
#define NV_PGRAPH_CTX_SWITCH5                            0x0040015C /* RW-4R */
#define NV_PGRAPH_CTX_SWITCH5_TRAP_BITS                        31:0 /* RWXUF */
#define NV_PGRAPH_CTX_SWITCH5_TRAP_BITS_DISABLED             0x0000 /* RW--V */
#define NV_PGRAPH_CTX_CACHE1(i)                  (0x00400160+(i)*4) /* RW-4A */
#define NV_PGRAPH_CTX_CACHE1__SIZE_1                              8 /*       */
#define NV_PGRAPH_CTX_CACHE1_GRCLASS                            7:0 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CHROMA_KEY                       12:12 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_USER_CLIP                        13:13 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_SWIZZLE                          14:14 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_PATCH_CONFIG                     17:15 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_SYNCHRONIZE                      18:18 /* RWXUF */
#define NV_PGRAPH_CTX_CACHE1_ENDIAN_MODE                      19:19 /* RWXUF */
#define NV_PGRAPH_CTX_CACHE1_DITHER_MODE                      21:20 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CLASS_TYPE                       22:22 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_SINGLE_STEP                      23:23 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_PATCH_STATUS                     24:24 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CONTEXT_SURFACE0                 25:25 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CONTEXT_SURFACE1                 26:26 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CONTEXT_PATTERN                  27:27 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CONTEXT_ROP                      28:28 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CONTEXT_BETA1                    29:29 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE1_CONTEXT_BETA4                    30:30 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE2(i)                  (0x00400180+(i)*4) /* RW-4A */
#define NV_PGRAPH_CTX_CACHE2__SIZE_1                              8 /*       */
#define NV_PGRAPH_CTX_CACHE2_MONO_FORMAT                        1:0 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE2_COLOR_FORMAT                      13:8 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE2_NOTIFY_INSTANCE                  31:16 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE3(i)                  (0x004001a0+(i)*4) /* RW-4A */
#define NV_PGRAPH_CTX_CACHE3__SIZE_1                              8 /*       */
#define NV_PGRAPH_CTX_CACHE3_DMA_INSTANCE_0                    15:0 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE3_DMA_INSTANCE_1                   31:16 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE4(i)                  (0x004001c0+(i)*4) /* RW-4A */
#define NV_PGRAPH_CTX_CACHE4__SIZE_1                              8 /*       */
#define NV_PGRAPH_CTX_CACHE4_USER_INSTANCE                     15:0 /* RWXVF */
#define NV_PGRAPH_CTX_CACHE5(i)                  (0x004001e0+(i)*4) /* RW-4A */
#define NV_PGRAPH_CTX_CACHE5__SIZE_1                              8 /*       */
#define NV_PGRAPH_CTX_CACHE5_TRAP_BITS                         31:0 /* RWXVF */
#define NV_PGRAPH_FIFO                                   0x00400720 /* RW-4R */
#define NV_PGRAPH_FIFO_ACCESS                                   0:0 /* RWIVF */
#define NV_PGRAPH_FIFO_ACCESS_DISABLED                   0x00000000 /* RW--V */
#define NV_PGRAPH_FIFO_ACCESS_ENABLED                    0x00000001 /* RWI-V */
#define NV_PGRAPH_FFINTFC_FIFO_0(i)              (0x004007a0+(i)*4) /* RW-4A */
#define NV_PGRAPH_FFINTFC_FIFO_0__SIZE_1                          8 /*       */
#define NV_PGRAPH_FFINTFC_FIFO_0_MTHD                          12:2 /* RWXVF */
#define NV_PGRAPH_FFINTFC_FIFO_0_MTHD_CTX_SWITCH         0x00000000 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH                        18:16 /* RWXVF */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_0                 0x00000000 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_1                 0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_2                 0x00000002 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_3                 0x00000003 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_4                 0x00000004 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_5                 0x00000005 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_6                 0x00000006 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_SUBCH_7                 0x00000007 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_CODE                         21:20 /* RWXVF */
#define NV_PGRAPH_FFINTFC_FIFO_0_CODE_DOUBLE_NONINCR     0x00000000 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_CODE_DOUBLE_INCR        0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_CODE_SINGLE             0x00000002 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_0_CODE_CHSW               0x00000003 /* RW--V */
#define NV_PGRAPH_FFINTFC_FIFO_1(i)              (0x004007c0+(i)*4) /* RW-4A */
#define NV_PGRAPH_FFINTFC_FIFO_1__SIZE_1                          8 /*       */
#define NV_PGRAPH_FFINTFC_FIFO_1_ARGUMENT                      31:0 /* RWXVF */
#define NV_PGRAPH_FFINTFC_FIFO_2(i)              (0x004007e0+(i)*4) /* RW-4A */
#define NV_PGRAPH_FFINTFC_FIFO_2__SIZE_1                          8 /*       */
#define NV_PGRAPH_FFINTFC_FIFO_2_ARGUMENT                      31:0 /* RWXVF */
#define NV_PGRAPH_FFINTFC_FIFO_PTR                       0x00400760 /* RW-4R */
#define NV_PGRAPH_FFINTFC_FIFO_PTR_WRITE                        3:0 /* RWIVF */
#define NV_PGRAPH_FFINTFC_FIFO_PTR_WRITE_0               0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_FIFO_PTR_READ                         7:4 /* RWIVF */
#define NV_PGRAPH_FFINTFC_FIFO_PTR_READ_0                0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2                            0x00400764 /* RW-4R */
#define NV_PGRAPH_FFINTFC_ST2_MTHD                             12:2 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_MTHD_CTX_SWITCH            0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH                           18:16 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_0                    0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_1                    0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_2                    0x00000002 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_3                    0x00000003 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_4                    0x00000004 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_5                    0x00000005 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_6                    0x00000006 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_SUBCH_7                    0x00000007 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID                            24:20 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_CHID_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_1                     0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_2                     0x00000002 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_3                     0x00000003 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_4                     0x00000004 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_5                     0x00000005 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_6                     0x00000006 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_7                     0x00000007 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_8                     0x00000008 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_9                     0x00000009 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_10                    0x0000000A /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_11                    0x0000000B /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_12                    0x0000000C /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_13                    0x0000000D /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_14                    0x0000000E /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_15                    0x0000000F /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_16                    0x00000010 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_17                    0x00000011 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_18                    0x00000012 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_19                    0x00000013 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_20                    0x00000014 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_21                    0x00000015 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_22                    0x00000016 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_23                    0x00000017 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_24                    0x00000018 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_25                    0x00000019 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_26                    0x0000001A /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_27                    0x0000001B /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_28                    0x0000001C /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_29                    0x0000001D /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_30                    0x0000001E /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_31                    0x0000001F /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_DATAHIGH                        25:25 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_DATAHIGH_INVALID           0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_DATAHIGH_VALID             0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_STATUS                          26:26 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_STATUS_INVALID             0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_STATUS_VALID               0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_STATUS                     27:27 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_CHID_STATUS_INVALID        0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_CHID_STATUS_VALID          0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_CHSWITCH                        28:28 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_CHSWITCH_CLEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_CHSWITCH_SET               0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_FIFOHOLD                        29:29 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_FIFOHOLD_CLEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_FIFOHOLD_SET               0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_MODE                            30:30 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_MODE_NONINCREMENTING       0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_MODE_INCREMENTING          0x00000001 /* RW--V */
#define NV_PGRAPH_FFINTFC_ST2_DL                         0x00400768 /* RW-4R */
#define NV_PGRAPH_FFINTFC_ST2_DL_ARGUMENT                      31:0 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_DL_ARGUMENT_0              0x00000000 /* RWI-V */
#define NV_PGRAPH_FFINTFC_ST2_DH                         0x0040076c /* RW-4R */
#define NV_PGRAPH_FFINTFC_ST2_DH_ARGUMENT                      31:0 /* RWIVF */
#define NV_PGRAPH_FFINTFC_ST2_DH_ARGUMENT_0              0x00000000 /* RWI-V */
#define NV_PGRAPH_STATUS                                 0x00400700 /* R--4R */
#define NV_PGRAPH_STATUS_STATE                                  0:0 /* R-IVF */
#define NV_PGRAPH_STATUS_STATE_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_STATE_BUSY                      0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_FINE_RASTERIZER                        1:1 /* R-IVF */
#define NV_PGRAPH_STATUS_FINE_RASTERIZER_IDLE            0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_FINE_RASTERIZER_BUSY            0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_COARSE_RASTERIZER                      2:2 /* R-IVF */
#define NV_PGRAPH_STATUS_COARSE_RASTERIZER_IDLE          0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_COARSE_RASTERIZER_BUSY          0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_FE_3D                                  3:3 /* R-IVF */
#define NV_PGRAPH_STATUS_FE_3D_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_FE_3D_BUSY                      0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_FE_2D                                  4:4 /* R-IVF */
#define NV_PGRAPH_STATUS_FE_2D_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_FE_2D_BUSY                      0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_XY_LOGIC                               5:5 /* R-IVF */
#define NV_PGRAPH_STATUS_XY_LOGIC_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_XY_LOGIC_BUSY                   0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_WAITCRTC                               6:6 /* R-IVF */
#define NV_PGRAPH_STATUS_WAITCRTC_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_WAITCRTC_BUSY                   0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_RASTERIZER_2D                          7:7 /* R-IVF */
#define NV_PGRAPH_STATUS_RASTERIZER_2D_IDLE              0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_RASTERIZER_2D_BUSY              0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_IDX                                    8:8 /* R-IVF */
#define NV_PGRAPH_STATUS_IDX_IDLE                        0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_IDX_BUSY                        0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_XF                                     9:9 /* R-IVF */
#define NV_PGRAPH_STATUS_XF_IDLE                         0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_XF_BUSY                         0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_VTX                                  10:10 /* R-IVF */
#define NV_PGRAPH_STATUS_VTX_IDLE                        0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_VTX_BUSY                        0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_CAS                                  11:11 /* R-IVF */
#define NV_PGRAPH_STATUS_CAS_IDLE                        0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_CAS_BUSY                        0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_PORT_NOTIFY                          12:12 /* R-IVF */
#define NV_PGRAPH_STATUS_PORT_NOTIFY_IDLE                0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_PORT_NOTIFY_BUSY                0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_SHADER                               13:13 /* R-IVF */
#define NV_PGRAPH_STATUS_SHADER_IDLE                     0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_SHADER_BUSY                     0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_SHADER_BE                            14:14 /* R-IVF */
#define NV_PGRAPH_STATUS_SHADER_BE_IDLE                  0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_SHADER_BE_BUSY                  0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_PORT_DMA                             16:16 /* R-IVF */
#define NV_PGRAPH_STATUS_PORT_DMA_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_PORT_DMA_BUSY                   0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_DMA_ENGINE                           17:17 /* R-IVF */
#define NV_PGRAPH_STATUS_DMA_ENGINE_IDLE                 0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_DMA_ENGINE_BUSY                 0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_DMA_NOTIFY                           20:20 /* R-IVF */
#define NV_PGRAPH_STATUS_DMA_NOTIFY_IDLE                 0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_DMA_NOTIFY_BUSY                 0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_DMA_BUFFER_NOTIFY                    21:21 /* R-IVF */
#define NV_PGRAPH_STATUS_DMA_BUFFER_NOTIFY_IDLE          0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_DMA_BUFFER_NOTIFY_BUSY          0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_DMA_WARNING_NOTIFY                   22:22 /* R-IVF */
#define NV_PGRAPH_STATUS_DMA_WARNING_NOTIFY_IDLE         0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_DMA_WARNING_NOTIFY_BUSY         0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_ZCULL                                23:23 /* R-IVF */
#define NV_PGRAPH_STATUS_ZCULL_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_ZCULL_BUSY                      0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_FDIFF                                24:24 /* R-IVF */
#define NV_PGRAPH_STATUS_FDIFF_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_FDIFF_BUSY                      0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_SETUP                                25:25 /* R-IVF */
#define NV_PGRAPH_STATUS_SETUP_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_SETUP_BUSY                      0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_CACHE                                26:26 /* R-IVF */
#define NV_PGRAPH_STATUS_CACHE_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_CACHE_BUSY                      0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_COMBINER                             27:27 /* R-IVF */
#define NV_PGRAPH_STATUS_COMBINER_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_COMBINER_BUSY                   0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_PREROP                               28:28 /* R-IVF */
#define NV_PGRAPH_STATUS_PREROP_IDLE                     0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_PREROP_BUSY                     0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_ROP                                  29:29 /* R-IVF */
#define NV_PGRAPH_STATUS_ROP_IDLE                        0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_ROP_BUSY                        0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_PORT_USER                            30:30 /* R-IVF */
#define NV_PGRAPH_STATUS_PORT_USER_IDLE                  0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_PORT_USER_BUSY                  0x00000001 /* R---V */
#define NV_PGRAPH_STATUS_PORT_FB                              31:31 /* R-IVF */
#define NV_PGRAPH_STATUS_PORT_FB_IDLE                    0x00000000 /* R-I-V */
#define NV_PGRAPH_STATUS_PORT_FB_BUSY                    0x00000001 /* R---V */
#define NV_PGRAPH_TRAPPED_ADDR                           0x00400704 /* R--4R */
#define NV_PGRAPH_TRAPPED_ADDR_MTHD                            12:2 /* R-XUF */
#define NV_PGRAPH_TRAPPED_ADDR_SUBCH                          18:16 /* R-XUF */
#define NV_PGRAPH_TRAPPED_ADDR_CHID                           24:20 /* R-XUF */
#define NV_PGRAPH_TRAPPED_ADDR_DHV                            28:28 /* R-XUF */
#define NV_PGRAPH_TRAPPED_DATA_LOW                       0x00400708 /* R--4R */
#define NV_PGRAPH_TRAPPED_DATA_LOW_VALUE                       31:0 /* R-XVF */
#define NV_PGRAPH_TRAPPED_DATA_HIGH                      0x0040070C /* R--4R */
#define NV_PGRAPH_TRAPPED_DATA_HIGH_VALUE                      31:0 /* R-XVF */
#define NV_PGRAPH_SURFACE                                0x00400710 /* RW-4R */
#define NV_PGRAPH_SURFACE_TYPE                                  1:0 /* RWIVF */
#define NV_PGRAPH_SURFACE_TYPE_INVALID                   0x00000000 /* RWI-V */
#define NV_PGRAPH_SURFACE_TYPE_NON_SWIZZLE               0x00000001 /* RW--V */
#define NV_PGRAPH_SURFACE_TYPE_SWIZZLE                   0x00000002 /* RW--V */
#define NV_PGRAPH_SURFACE_TYPE_056                       0x00000001 /* RWC-V */
#define NV_PGRAPH_SURFACE_TYPE_096                       0x00000001 /* RWC-V */
#define NV_PGRAPH_SURFACE_TYPE_097                       0x00000001 /* RWC-V */
#define NV_PGRAPH_SURFACE_ANTIALIASING                          5:4 /* RWIVF */
#define NV_PGRAPH_SURFACE_ANTIALIASING_CENTER_1          0x00000000 /* RWI-V */
#define NV_PGRAPH_SURFACE_ANTIALIASING_CENTER_CORNER_2   0x00000001 /* RW--V */
#define NV_PGRAPH_SURFACE_ANTIALIASING_SQUARE_OFFSET_4   0x00000002 /* RW--V */
#define NV_PGRAPH_SURFACE_ANTIALIASING_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_WRITE_BLIT                           10:8 /* RWIVF */
#define NV_PGRAPH_SURFACE_WRITE_BLIT_0                   0x00000000 /* RWI-V */
#define NV_PGRAPH_SURFACE_WRITE_BLIT_09F                 0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_READ_BLIT                           14:12 /* RWIVF */
#define NV_PGRAPH_SURFACE_READ_BLIT_0                    0x00000000 /* RWI-V */
#define NV_PGRAPH_SURFACE_READ_BLIT_09F                  0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_MODULO_BLIT                         18:16 /* RWIVF */
#define NV_PGRAPH_SURFACE_MODULO_BLIT_0                  0x00000000 /* RWI-V */
#define NV_PGRAPH_SURFACE_MODULO_BLIT_09F                0x00000001 /* RWC-V */
#define NV_PGRAPH_SURFACE_WRITE_3D                            22:20 /* RWIVF */
#define NV_PGRAPH_SURFACE_WRITE_3D_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_SURFACE_WRITE_3D_056                   0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_WRITE_3D_096                   0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_WRITE_3D_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_READ_3D                             26:24 /* RWIVF */
#define NV_PGRAPH_SURFACE_READ_3D_0                      0x00000000 /* RWI-V */
#define NV_PGRAPH_SURFACE_READ_3D_056                    0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_READ_3D_096                    0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_READ_3D_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACE_MODULO_3D                           30:28 /* RWIVF */
#define NV_PGRAPH_SURFACE_MODULO_3D_0                    0x00000002 /* RWI-V */
#define NV_PGRAPH_SURFACE_MODULO_3D_056                  0x00000002 /* RWC-V */
#define NV_PGRAPH_SURFACE_MODULO_3D_096                  0x00000002 /* RWC-V */
#define NV_PGRAPH_SURFACE_MODULO_3D_097                  0x00000002 /* RWC-V */
#define NV_PGRAPH_INCREMENT                              0x0040071C /* RW-4R */
#define NV_PGRAPH_INCREMENT_READ_BLIT                           0:0 /* CWIVF */
#define NV_PGRAPH_INCREMENT_READ_BLIT_IGNORE             0x00000000 /* CWI-V */
#define NV_PGRAPH_INCREMENT_READ_BLIT_TRIGGER            0x00000001 /* -W--T */
#define NV_PGRAPH_INCREMENT_READ_3D                             1:1 /* CWIVF */
#define NV_PGRAPH_INCREMENT_READ_3D_IGNORE               0x00000000 /* CWI-V */
#define NV_PGRAPH_INCREMENT_READ_3D_TRIGGER              0x00000001 /* -W--T */
#define NV_PGRAPH_NOTIFY                                 0x00400718 /* RW-4R */
#define NV_PGRAPH_NOTIFY_BUFFER_REQ                             0:0 /* RWIVF */
#define NV_PGRAPH_NOTIFY_BUFFER_REQ_NOT_PENDING          0x00000000 /* RWI-V */
#define NV_PGRAPH_NOTIFY_BUFFER_REQ_PENDING              0x00000001 /* RW--V */
#define NV_PGRAPH_NOTIFY_BUFFER_STYLE                           8:8 /* RWIVF */
#define NV_PGRAPH_NOTIFY_BUFFER_STYLE_WRITE_ONLY         0x00000000 /* RWI-V */
#define NV_PGRAPH_NOTIFY_BUFFER_STYLE_WRITE_THEN_AWAKEN  0x00000001 /* RW--V */
#define NV_PGRAPH_NOTIFY_REQ                                  16:16 /* RWIVF */
#define NV_PGRAPH_NOTIFY_REQ_NOT_PENDING                 0x00000000 /* RWI-V */
#define NV_PGRAPH_NOTIFY_REQ_PENDING                     0x00000001 /* RW--V */
#define NV_PGRAPH_NOTIFY_STYLE                                20:20 /* RWIVF */
#define NV_PGRAPH_NOTIFY_STYLE_WRITE_ONLY                0x00000000 /* RWI-V */
#define NV_PGRAPH_NOTIFY_STYLE_WRITE_THEN_AWAKEN         0x00000001 /* RW--V */
#define NV_PGRAPH_NOTIFY_WARNING_REQ                          24:24 /* RWIVF */
#define NV_PGRAPH_NOTIFY_WARNING_REQ_NOT_PENDING         0x00000000 /* RWI-V */
#define NV_PGRAPH_NOTIFY_WARNING_REQ_PENDING             0x00000001 /* RW--V */
#define NV_PGRAPH_NOTIFY_WARNING_STYLE                        25:25 /* RWIVF */
#define NV_PGRAPH_NOTIFY_WARNING_STYLE_WRITE_ONLY        0x00000000 /* RWI-V */
#define NV_PGRAPH_NOTIFY_WARNING_STYLE_WRITE_THEN_AWAKEN 0x00000001 /* RW--V */
#define NV_PGRAPH_NOTIFY_WARNING_STATUS                       30:28 /* RWIVF */
#define NV_PGRAPH_NOTIFY_WARNING_STATUS_NO_WARNING       0x00000000 /* RWI-V */
#define NV_PGRAPH_NOTIFY_WARNING_STATUS_INVALID_ENUM     0x00000001 /* RW--V */
#define NV_PGRAPH_NOTIFY_WARNING_STATUS_INVALID_VALUE    0x00000002 /* RW--V */
#define NV_PGRAPH_NOTIFY_WARNING_STATUS_INVALID_OP       0x00000004 /* RW--V */
#define NV_PGRAPH_BOFFSET(i)                     (0x00400820+(i)*4) /* RW-4A */
#define NV_PGRAPH_BOFFSET__SIZE_1                                 6 /*       */
#define NV_PGRAPH_BOFFSET_LINADRS                              29:0 /* RWIUF */
#define NV_PGRAPH_BOFFSET_LINADRS_0                      0x00000000 /* RWI-V */
#define NV_PGRAPH_BOFFSET0                               0x00400820 /* RW-4R */
#define NV_PGRAPH_BOFFSET0__ALIAS_1            NV_PGRAPH_BOFFSET(0) /*       */
#define NV_PGRAPH_BOFFSET0_LINADRS                             29:0 /* RWIUF */
#define NV_PGRAPH_BOFFSET0_LINADRS_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BOFFSET0_LINADRS_042                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET0_LINADRS_058                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET0_LINADRS_062                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET1                               0x00400824 /* RW-4R */
#define NV_PGRAPH_BOFFSET1__ALIAS_1            NV_PGRAPH_BOFFSET(1) /*       */
#define NV_PGRAPH_BOFFSET1_LINADRS                             29:0 /* RWIUF */
#define NV_PGRAPH_BOFFSET1_LINADRS_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BOFFSET1_LINADRS_042                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET1_LINADRS_059                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET1_LINADRS_062                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET2                               0x00400828 /* RW-4R */
#define NV_PGRAPH_BOFFSET2__ALIAS_1            NV_PGRAPH_BOFFSET(2) /*       */
#define NV_PGRAPH_BOFFSET2_LINADRS                             29:0 /* RWIUF */
#define NV_PGRAPH_BOFFSET2_LINADRS_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BOFFSET2_LINADRS_056                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET2_LINADRS_05A                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET2_LINADRS_096                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET2_LINADRS_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET3                               0x0040082C /* RW-4R */
#define NV_PGRAPH_BOFFSET3__ALIAS_1            NV_PGRAPH_BOFFSET(3) /*       */
#define NV_PGRAPH_BOFFSET3_LINADRS                             29:0 /* RWIUF */
#define NV_PGRAPH_BOFFSET3_LINADRS_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BOFFSET3_LINADRS_056                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET3_LINADRS_05B                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET3_LINADRS_096                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET3_LINADRS_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET4                               0x00400830 /* RW-4R */
#define NV_PGRAPH_BOFFSET4__ALIAS_1            NV_PGRAPH_BOFFSET(4) /*       */
#define NV_PGRAPH_BOFFSET4_LINADRS                             29:0 /* RWIUF */
#define NV_PGRAPH_BOFFSET4_LINADRS_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BOFFSET5                               0x00400834 /* RW-4R */
#define NV_PGRAPH_BOFFSET5__ALIAS_1            NV_PGRAPH_BOFFSET(5) /*       */
#define NV_PGRAPH_BOFFSET5_LINADRS                             29:0 /* RWIUF */
#define NV_PGRAPH_BOFFSET5_LINADRS_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BOFFSET5_LINADRS_052                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BOFFSET5_LINADRS_09E                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BBASE(i)                       (0x00400838+(i)*4) /* RW-4A */
#define NV_PGRAPH_BBASE__SIZE_1                                   6 /*       */
#define NV_PGRAPH_BBASE_LINADRS                                29:0 /* RWIUF */
#define NV_PGRAPH_BBASE_LINADRS_0                        0x00000000 /* RWI-V */
#define NV_PGRAPH_BBASE0                                 0x00400838 /* RW-4R */
#define NV_PGRAPH_BBASE0__ALIAS_1                NV_PGRAPH_BBASE(0) /*       */
#define NV_PGRAPH_BBASE0_LINADRS                               29:0 /* RWIUF */
#define NV_PGRAPH_BBASE0_LINADRS_0                       0x00000000 /* RWI-V */
#define NV_PGRAPH_BBASE1                                 0x0040083c /* RW-4R */
#define NV_PGRAPH_BBASE1__ALIAS_1                NV_PGRAPH_BBASE(1) /*       */
#define NV_PGRAPH_BBASE1_LINADRS                               29:0 /* RWIUF */
#define NV_PGRAPH_BBASE1_LINADRS_0                       0x00000000 /* RWI-V */
#define NV_PGRAPH_BBASE2                                 0x00400840 /* RW-4R */
#define NV_PGRAPH_BBASE2__ALIAS_1                NV_PGRAPH_BBASE(2) /*       */
#define NV_PGRAPH_BBASE2_LINADRS                               29:0 /* RWIUF */
#define NV_PGRAPH_BBASE2_LINADRS_0                       0x00000000 /* RWI-V */
#define NV_PGRAPH_BBASE3                                 0x00400844 /* RW-4R */
#define NV_PGRAPH_BBASE3__ALIAS_1                NV_PGRAPH_BBASE(3) /*       */
#define NV_PGRAPH_BBASE3_LINADRS                               29:0 /* RWIUF */
#define NV_PGRAPH_BBASE3_LINADRS_0                       0x00000000 /* RWI-V */
#define NV_PGRAPH_BBASE4                                 0x00400848 /* RW-4R */
#define NV_PGRAPH_BBASE4__ALIAS_1                NV_PGRAPH_BBASE(4) /*       */
#define NV_PGRAPH_BBASE4_LINADRS                               29:0 /* RWIUF */
#define NV_PGRAPH_BBASE4_LINADRS_0                       0x00000000 /* RWI-V */
#define NV_PGRAPH_BBASE5                                 0x0040084C /* RW-4R */
#define NV_PGRAPH_BBASE5__ALIAS_1                NV_PGRAPH_BBASE(5) /*       */
#define NV_PGRAPH_BBASE5_LINADRS                               29:0 /* RWIUF */
#define NV_PGRAPH_BBASE5_LINADRS_0                       0x00000000 /* RWI-V */
#define NV_PGRAPH_BPITCH(i)                      (0x00400850+(i)*4) /* RW-4A */
#define NV_PGRAPH_BPITCH__SIZE_1                                  5 /*       */
#define NV_PGRAPH_BPITCH_VALUE                                 15:0 /* RWIUF */
#define NV_PGRAPH_BPITCH_VALUE_0                         0x00000000 /* RWI-V */
#define NV_PGRAPH_BPITCH0                                0x00400850 /* RW-4R */
#define NV_PGRAPH_BPITCH0__ALIAS_1              NV_PGRAPH_BPITCH(0) /*       */
#define NV_PGRAPH_BPITCH0_VALUE                                15:0 /* RWIUF */
#define NV_PGRAPH_BPITCH0_VALUE_0                        0x00000000 /* RWI-V */
#define NV_PGRAPH_BPITCH0_VALUE_042                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH0_VALUE_058                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH0_VALUE_062                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH1                                0x00400854 /* RW-4R */
#define NV_PGRAPH_BPITCH1__ALIAS_1              NV_PGRAPH_BPITCH(1) /*       */
#define NV_PGRAPH_BPITCH1_VALUE                                15:0 /* RWIUF */
#define NV_PGRAPH_BPITCH1_VALUE_0                        0x00000000 /* RWI-V */
#define NV_PGRAPH_BPITCH1_VALUE_042                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH1_VALUE_059                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH1_VALUE_062                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH2                                0x00400858 /* RW-4R */
#define NV_PGRAPH_BPITCH2__ALIAS_1              NV_PGRAPH_BPITCH(2) /*       */
#define NV_PGRAPH_BPITCH2_VALUE                                15:0 /* RWIUF */
#define NV_PGRAPH_BPITCH2_VALUE_0                        0x00000000 /* RWI-V */
#define NV_PGRAPH_BPITCH2_VALUE_056                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH2_VALUE_05A                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH2_VALUE_096                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH2_VALUE_097                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH3                                0x0040085C /* RW-4R */
#define NV_PGRAPH_BPITCH3__ALIAS_1              NV_PGRAPH_BPITCH(3) /*       */
#define NV_PGRAPH_BPITCH3_VALUE                                15:0 /* RWIUF */
#define NV_PGRAPH_BPITCH3_VALUE_0                        0x00000000 /* RWI-V */
#define NV_PGRAPH_BPITCH3_VALUE_056                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH3_VALUE_05B                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH3_VALUE_096                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH3_VALUE_097                      0x00000040 /* RWC-V */
#define NV_PGRAPH_BPITCH4                                0x00400860 /* RW-4R */
#define NV_PGRAPH_BPITCH4__ALIAS_1              NV_PGRAPH_BPITCH(4) /*       */
#define NV_PGRAPH_BPITCH4_VALUE                                15:0 /* RWIUF */
#define NV_PGRAPH_BPITCH4_VALUE_0                        0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT(i)                      (0x00400864+(i)*4) /* RW-4A */
#define NV_PGRAPH_BLIMIT__SIZE_1                                  6 /*       */
#define NV_PGRAPH_BLIMIT_VALUE                                 29:0 /* RWXUF */
#define NV_PGRAPH_BLIMIT_ADDRESSING                           30:30 /* RWIVF */
#define NV_PGRAPH_BLIMIT_ADDRESSING_LINEAR               0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT_ADDRESSING_TILED                0x00000001 /* RW--V */
#define NV_PGRAPH_BLIMIT_TYPE                                 31:31 /* RWIVF */
#define NV_PGRAPH_BLIMIT_TYPE_IN_MEMORY                  0x00000000 /* RW--V */
#define NV_PGRAPH_BLIMIT_TYPE_NULL                       0x00000001 /* RWI-V */
#define NV_PGRAPH_BLIMIT0                                0x00400864 /* RW-4R */
#define NV_PGRAPH_BLIMIT0__ALIAS_1              NV_PGRAPH_BLIMIT(0) /*       */
#define NV_PGRAPH_BLIMIT0_VALUE                                29:0 /* RWXUF */
#define NV_PGRAPH_BLIMIT0_ADDRESSING                          30:30 /* RWIVF */
#define NV_PGRAPH_BLIMIT0_ADDRESSING_LINEAR              0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT0_ADDRESSING_TILED               0x00000001 /* RW--V */
#define NV_PGRAPH_BLIMIT0_TYPE                                31:31 /* RWIVF */
#define NV_PGRAPH_BLIMIT0_TYPE_IN_MEMORY                 0x00000000 /* RW--V */
#define NV_PGRAPH_BLIMIT0_TYPE_NULL                      0x00000001 /* RWI-V */
#define NV_PGRAPH_BLIMIT1                                0x00400868 /* RW-4R */
#define NV_PGRAPH_BLIMIT1__ALIAS_1              NV_PGRAPH_BLIMIT(1) /*       */
#define NV_PGRAPH_BLIMIT1_VALUE                                29:0 /* RWXUF */
#define NV_PGRAPH_BLIMIT1_ADDRESSING                          30:30 /* RWIVF */
#define NV_PGRAPH_BLIMIT1_ADDRESSING_LINEAR              0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT1_ADDRESSING_TILED               0x00000001 /* RW--V */
#define NV_PGRAPH_BLIMIT1_TYPE                                31:31 /* RWIVF */
#define NV_PGRAPH_BLIMIT1_TYPE_IN_MEMORY                 0x00000000 /* RW--V */
#define NV_PGRAPH_BLIMIT1_TYPE_NULL                      0x00000001 /* RWI-V */
#define NV_PGRAPH_BLIMIT2                                0x0040086c /* RW-4R */
#define NV_PGRAPH_BLIMIT2__ALIAS_1              NV_PGRAPH_BLIMIT(2) /*       */
#define NV_PGRAPH_BLIMIT2_VALUE                                29:0 /* RWXUF */
#define NV_PGRAPH_BLIMIT2_ADDRESSING                          30:30 /* RWIVF */
#define NV_PGRAPH_BLIMIT2_ADDRESSING_LINEAR              0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT2_ADDRESSING_TILED               0x00000001 /* RW--V */
#define NV_PGRAPH_BLIMIT2_TYPE                                31:31 /* RWIVF */
#define NV_PGRAPH_BLIMIT2_TYPE_IN_MEMORY                 0x00000000 /* RW--V */
#define NV_PGRAPH_BLIMIT2_TYPE_NULL                      0x00000001 /* RWI-V */
#define NV_PGRAPH_BLIMIT3                                0x00400870 /* RW-4R */
#define NV_PGRAPH_BLIMIT3__ALIAS_1              NV_PGRAPH_BLIMIT(3) /*       */
#define NV_PGRAPH_BLIMIT3_VALUE                                29:0 /* RWXUF */
#define NV_PGRAPH_BLIMIT3_ADDRESSING                          30:30 /* RWIVF */
#define NV_PGRAPH_BLIMIT3_ADDRESSING_LINEAR              0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT3_ADDRESSING_TILED               0x00000001 /* RW--V */
#define NV_PGRAPH_BLIMIT3_TYPE                                31:31 /* RWIVF */
#define NV_PGRAPH_BLIMIT3_TYPE_IN_MEMORY                 0x00000000 /* RW--V */
#define NV_PGRAPH_BLIMIT3_TYPE_NULL                      0x00000001 /* RWI-V */
#define NV_PGRAPH_BLIMIT4                                0x00400874 /* RW-4R */
#define NV_PGRAPH_BLIMIT4__ALIAS_1              NV_PGRAPH_BLIMIT(4) /*       */
#define NV_PGRAPH_BLIMIT4_VALUE                                29:0 /* RWXUF */
#define NV_PGRAPH_BLIMIT4_ADDRESSING                          30:30 /* RWIVF */
#define NV_PGRAPH_BLIMIT4_ADDRESSING_LINEAR              0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT4_ADDRESSING_TILED               0x00000001 /* RW--V */
#define NV_PGRAPH_BLIMIT4_TYPE                                31:31 /* RWIVF */
#define NV_PGRAPH_BLIMIT4_TYPE_IN_MEMORY                 0x00000000 /* RW--V */
#define NV_PGRAPH_BLIMIT4_TYPE_NULL                      0x00000001 /* RWI-V */
#define NV_PGRAPH_BLIMIT5                                0x00400878 /* RW-4R */
#define NV_PGRAPH_BLIMIT5__ALIAS_1              NV_PGRAPH_BLIMIT(5) /*       */
#define NV_PGRAPH_BLIMIT5_VALUE                                29:0 /* RWXUF */
#define NV_PGRAPH_BLIMIT5_ADDRESSING                          30:30 /* RWIVF */
#define NV_PGRAPH_BLIMIT5_ADDRESSING_LINEAR              0x00000000 /* RWI-V */
#define NV_PGRAPH_BLIMIT5_ADDRESSING_TILED               0x00000001 /* RW--V */
#define NV_PGRAPH_BLIMIT5_TYPE                                31:31 /* RWIVF */
#define NV_PGRAPH_BLIMIT5_TYPE_IN_MEMORY                 0x00000000 /* RW--V */
#define NV_PGRAPH_BLIMIT5_TYPE_NULL                      0x00000001 /* RWI-V */
#define NV_PGRAPH_BSWIZZLE2                              0x00400818 /* RW-4R */
#define NV_PGRAPH_BSWIZZLE2_WIDTH                             19:16 /* RWIUF */
#define NV_PGRAPH_BSWIZZLE2_WIDTH_0                      0x00000000 /* RWI-V */
#define NV_PGRAPH_BSWIZZLE2_WIDTH_MAX                    0x0000000c /* RW--V */
#define NV_PGRAPH_BSWIZZLE2_WIDTH_056                    0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE2_WIDTH_096                    0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE2_WIDTH_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE2_HEIGHT                            27:24 /* RWIUF */
#define NV_PGRAPH_BSWIZZLE2_HEIGHT_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BSWIZZLE2_HEIGHT_MAX                   0x0000000c /* RW--V */
#define NV_PGRAPH_BSWIZZLE2_HEIGHT_056                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE2_HEIGHT_096                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE2_HEIGHT_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE5                              0x0040081c /* RW-4R */
#define NV_PGRAPH_BSWIZZLE5_WIDTH                             19:16 /* RWIUF */
#define NV_PGRAPH_BSWIZZLE5_WIDTH_0                      0x00000000 /* RWI-V */
#define NV_PGRAPH_BSWIZZLE5_WIDTH_052                    0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE5_WIDTH_09E                    0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE5_HEIGHT                            27:24 /* RWIUF */
#define NV_PGRAPH_BSWIZZLE5_HEIGHT_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_BSWIZZLE5_HEIGHT_052                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BSWIZZLE5_HEIGHT_09E                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TILE(i)                       (0x00400900+(i)*16) /* RW-4A */
#define NV_PGRAPH_TILE__SIZE_1                                    8 /*       */
#define NV_PGRAPH_TILE_REGION                                   0:0 /* RWIVF */
#define NV_PGRAPH_TILE_REGION_INVALID                    0x00000000 /* RWI-V */
#define NV_PGRAPH_TILE_REGION_VALID                      0x00000001 /* RW--V */
#define NV_PGRAPH_TILE_BANK0_SENSE                              1:1 /* RWIVF */
#define NV_PGRAPH_TILE_BANK0_SENSE_0                     0x00000000 /* RWI-V */
#define NV_PGRAPH_TILE_BANK0_SENSE_1                     0x00000001 /* RW--V */
#define NV_PGRAPH_TILE_ADR                                    31:14 /* RW-UF */
#define NV_PGRAPH_TLIMIT(i)                     (0x00400904+(i)*16) /* RW-4A */
#define NV_PGRAPH_TLIMIT__SIZE_1                                  8 /*       */
#define NV_PGRAPH_TLIMIT_ADR                                  31:14 /* RW-UF */
#define NV_PGRAPH_TSIZE(i)                      (0x00400908+(i)*16) /* RW-4A */
#define NV_PGRAPH_TSIZE__SIZE_1                                   8 /*       */
#define NV_PGRAPH_TSIZE_PITCH                                  15:8 /* RW-UF */
#define NV_PGRAPH_TSTATUS(i)                    (0x0040090c+(i)*16) /* R--4A */
#define NV_PGRAPH_TSTATUS__SIZE_1                                 8 /*       */
#define NV_PGRAPH_TSTATUS_PRIME                                 1:0 /* R--VF */
#define NV_PGRAPH_TSTATUS_FACTOR                                6:4 /* R--VF */
#define NV_PGRAPH_TSTATUS_REGION                              31:31 /* R-I-F */
#define NV_PGRAPH_ZCOMP(i)                       (0x00400980+(i)*4) /* RW-4A */
#define NV_PGRAPH_ZCOMP__SIZE_1                                   8 /*       */
#define NV_PGRAPH_ZCOMP_OFFSET                           0x004009a0 /* RW-4R */
#define NV_PGRAPH_FBCFG0                                 0x004009a4 /* RW-4R */
#define NV_PGRAPH_FBCFG1                                 0x004009a8 /* RW-4R */
#define NV_PGRAPH_BPIXEL                                 0x00400724 /* RW-4R */
#define NV_PGRAPH_BPIXEL_DEPTH0                                 3:0 /* RWIVF */
#define NV_PGRAPH_BPIXEL_DEPTH0_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_BPIXEL_DEPTH0_Y8                       0x00000001 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_X1R5G5B5_Z1R5G5B5        0x00000002 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_X1R5G5B5_O1R5G5B5        0x00000003 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_A1R5G5B5                 0x00000004 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_R5G6B5                   0x00000005 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_Y16                      0x00000006 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_X8R8G8B8_Z8R8G8B8        0x00000007 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_X8R8G8B8_O1Z7R8G8B8      0x00000008 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_X1A7R8G8B8_Z1A7R8G8B8    0x00000009 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_X1A7R8G8B8_O1A7R8G8B8    0x0000000a /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_X8R8G8B8_O8R8G8B8        0x0000000b /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_A8R8G8B8                 0x0000000c /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_Y32                      0x0000000d /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_V8YB8U8YA8               0x0000000e /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_YB8V8YA8U8               0x0000000f /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH0_042                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH0_058                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH0_062                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH1                                 7:4 /* RWIVF */
#define NV_PGRAPH_BPIXEL_DEPTH1_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_BPIXEL_DEPTH1_Y8                       0x00000001 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_X1R5G5B5_Z1R5G5B5        0x00000002 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_X1R5G5B5_O1R5G5B5        0x00000003 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_A1R5G5B5                 0x00000004 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_R5G6B5                   0x00000005 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_Y16                      0x00000006 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_X8R8G8B8_Z8R8G8B8        0x00000007 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_X8R8G8B8_O1Z7R8G8B8      0x00000008 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_X1A7R8G8B8_Z1A7R8G8B8    0x00000009 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_X1A7R8G8B8_O1A7R8G8B8    0x0000000a /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_X8R8G8B8_O8R8G8B8        0x0000000b /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_A8R8G8B8                 0x0000000c /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_Y32                      0x0000000d /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_V8YB8U8YA8               0x0000000e /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_YB8V8YA8U8               0x0000000f /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH1_042                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH1_059                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH1_062                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH2                                11:8 /* RWIVF */
#define NV_PGRAPH_BPIXEL_DEPTH2_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_BPIXEL_DEPTH2_Y8                       0x00000001 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_X1R5G5B5_Z1R5G5B5        0x00000002 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_X1R5G5B5_O1R5G5B5        0x00000003 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_A1R5G5B5                 0x00000004 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_R5G6B5                   0x00000005 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_Y16                      0x00000006 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_X8R8G8B8_Z8R8G8B8        0x00000007 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_X8R8G8B8_O1Z7R8G8B8      0x00000008 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_X1A7R8G8B8_Z1A7R8G8B8    0x00000009 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_X1A7R8G8B8_O1A7R8G8B8    0x0000000a /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_X8R8G8B8_O8R8G8B8        0x0000000b /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_A8R8G8B8                 0x0000000c /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_Y32                      0x0000000d /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_V8YB8U8YA8               0x0000000e /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_YB8V8YA8U8               0x0000000f /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH2_056                      0x00000002 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH2_05A                      0x00000002 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH2_096                      0x00000002 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH2_097                      0x00000002 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH3                               15:12 /* RWIVF */
#define NV_PGRAPH_BPIXEL_DEPTH3_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_BPIXEL_DEPTH3_Z16                      0x00000001 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH3_Z24S8                    0x00000002 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH3_05B                      0x00000002 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH3_097                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH4                               19:16 /* RWIVF */
#define NV_PGRAPH_BPIXEL_DEPTH4_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_BPIXEL_DEPTH4_Y8                       0x00000001 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_X1R5G5B5_Z1R5G5B5        0x00000002 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_X1R5G5B5_O1R5G5B5        0x00000003 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_A1R5G5B5                 0x00000004 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_R5G6B5                   0x00000005 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_Y16                      0x00000006 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_X8R8G8B8_Z8R8G8B8        0x00000007 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_X8R8G8B8_O1Z7R8G8B8      0x00000008 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_X1A7R8G8B8_Z1A7R8G8B8    0x00000009 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_X1A7R8G8B8_O1A7R8G8B8    0x0000000a /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_X8R8G8B8_O8R8G8B8        0x0000000b /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_A8R8G8B8                 0x0000000c /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_Y32                      0x0000000d /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_V8YB8U8YA8               0x0000000e /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH4_YB8V8YA8U8               0x0000000f /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5                               23:20 /* RWIVF */
#define NV_PGRAPH_BPIXEL_DEPTH5_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_BPIXEL_DEPTH5_Y8                       0x00000001 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_X1R5G5B5_Z1R5G5B5        0x00000002 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_X1R5G5B5_O1R5G5B5        0x00000003 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_A1R5G5B5                 0x00000004 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_R5G6B5                   0x00000005 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_Y16                      0x00000006 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_X8R8G8B8_Z8R8G8B8        0x00000007 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_X8R8G8B8_O1Z7R8G8B8      0x00000008 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_X1A7R8G8B8_Z1A7R8G8B8    0x00000009 /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_X1A7R8G8B8_O1A7R8G8B8    0x0000000a /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_X8R8G8B8_O8R8G8B8        0x0000000b /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_A8R8G8B8                 0x0000000c /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_Y32                      0x0000000d /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_V8YB8U8YA8               0x0000000e /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_YB8V8YA8U8               0x0000000f /* RW--V */
#define NV_PGRAPH_BPIXEL_DEPTH5_052                      0x00000001 /* RWC-V */
#define NV_PGRAPH_BPIXEL_DEPTH5_09E                      0x00000001 /* RWC-V */
#define NV_PGRAPH_LIMIT_VIOL_PIX                         0x0040080c /* RW-4R */
#define NV_PGRAPH_LIMIT_VIOL_PIX_ADRS                          31:0 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_PIX_ADRS_0                  0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_Z                           0x00400810 /* RW-4R */
#define NV_PGRAPH_LIMIT_VIOL_Z_ADRS                            31:0 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_Z_ADRS_0                    0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE                        0x00400800 /* RW-4R */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTBPITCH                     0:0 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTBPITCH_NO_VIOL      0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTBPITCH_VIOL         0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTBLIMIT                     1:1 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTBLIMIT_NO_VIOL      0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTBLIMIT_VIOL         0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTOVRFLW                     2:2 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTOVRFLW_NO_VIOL      0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTOVRFLW_VIOL         0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTMEMSIZE                    3:3 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTMEMSIZE_NO_VIOL     0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTMEMSIZE_VIOL        0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTTILED                      4:4 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTTILED_NO_VIOL       0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_DSTTILED_VIOL          0x00000001 /* RW--V */                
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCBPITCH                     8:8 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCBPITCH_NO_VIOL      0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCBPITCH_VIOL         0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCBLIMIT                     9:9 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCBLIMIT_NO_VIOL      0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCBLIMIT_VIOL         0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCOVRFLW                   10:10 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCOVRFLW_NO_VIOL      0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCOVRFLW_VIOL         0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCMEMSIZE                  11:11 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCMEMSIZE_NO_VIOL     0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCMEMSIZE_VIOL        0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCTILED                    12:12 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCTILED_NO_VIOL       0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SRCTILED_VIOL          0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SWIZZLEX                    16:16 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SWIZZLEX_NO_VIOL       0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SWIZZLEX_VIOL          0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SWIZZLEY                    17:17 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SWIZZLEY_NO_VIOL       0x00000000 /* RWI-V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_SWIZZLEY_VIOL          0x00000001 /* RW--V */
#define NV_PGRAPH_LIMIT_VIOL_MODE_ZTILEMODE                   21:20 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_CTILEMODE                   23:22 /* RWIVF */
#define NV_PGRAPH_LIMIT_VIOL_MODE_ROPMODE                     31:24 /* RWIVF */
#define NV_PGRAPH_STATE                                  0x00400714 /* RW-4R */
#define NV_PGRAPH_STATE_BUFFER_0                                0:0 /* RWIVF */
#define NV_PGRAPH_STATE_BUFFER_0_INVALID                 0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_BUFFER_0_VALID                   0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_BUFFER_0_042                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_0_058                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_0_062                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_1                                1:1 /* RWIVF */
#define NV_PGRAPH_STATE_BUFFER_1_INVALID                 0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_BUFFER_1_VALID                   0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_BUFFER_1_042                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_1_059                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_1_062                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_2                                2:2 /* RWIVF */
#define NV_PGRAPH_STATE_BUFFER_2_INVALID                 0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_BUFFER_2_VALID                   0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_BUFFER_2_056                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_2_05A                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_2_096                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_2_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_3                                3:3 /* RWIVF */
#define NV_PGRAPH_STATE_BUFFER_3_INVALID                 0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_BUFFER_3_VALID                   0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_BUFFER_3_056                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_3_05B                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_3_096                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_3_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_4                                4:4 /* RWIVF */
#define NV_PGRAPH_STATE_BUFFER_4_INVALID                 0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_BUFFER_4_VALID                   0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_BUFFER_4_038                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_4_088                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_5                                5:5 /* RWIVF */
#define NV_PGRAPH_STATE_BUFFER_5_INVALID                 0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_BUFFER_5_VALID                   0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_BUFFER_5_052                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_BUFFER_5_09E                     0x00000000 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_0                                 8:8 /* RWIVF */
#define NV_PGRAPH_STATE_PITCH_0_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PITCH_0_VALID                    0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PITCH_0_042                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_0_058                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_0_062                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_1                                 9:9 /* RWIVF */
#define NV_PGRAPH_STATE_PITCH_1_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PITCH_1_VALID                    0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PITCH_1_042                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_1_059                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_1_062                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_2                               10:10 /* RWIVF */
#define NV_PGRAPH_STATE_PITCH_2_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PITCH_2_VALID                    0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PITCH_2_056                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_2_05A                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_2_096                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_2_097                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_3                               11:11 /* RWIVF */
#define NV_PGRAPH_STATE_PITCH_3_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PITCH_3_VALID                    0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PITCH_3_056                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_3_05B                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_3_096                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_3_097                      0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PITCH_4                               12:12 /* RWIVF */
#define NV_PGRAPH_STATE_PITCH_4_INVALID                  0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PITCH_4_VALID                    0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_CHROMA_COLOR                          16:16 /* RWIVF */
#define NV_PGRAPH_STATE_CHROMA_COLOR_INVALID             0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_CHROMA_COLOR_VALID               0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_CHROMA_COLOR_057                 0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_CHROMA_COLORFMT                       17:17 /* RWIVF */
#define NV_PGRAPH_STATE_CHROMA_COLORFMT_INVALID          0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_CHROMA_COLORFMT_VALID            0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_CHROMA_COLORFMT_017              0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_CPATTERN_COLORFMT                     20:20 /* RWIVF */
#define NV_PGRAPH_STATE_CPATTERN_COLORFMT_INVALID        0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_CPATTERN_COLORFMT_VALID          0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_CPATTERN_COLORFMT_044            0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_CPATTERN_MONOFMT                      21:21 /* RWIVF */
#define NV_PGRAPH_STATE_CPATTERN_MONOFMT_INVALID         0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_CPATTERN_MONOFMT_VALID           0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_CPATTERN_MONOFMT_044             0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_CPATTERN_SELECT                       22:22 /* RWIVF */
#define NV_PGRAPH_STATE_CPATTERN_SELECT_INVALID          0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_CPATTERN_SELECT_VALID            0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_CPATTERN_SELECT_044              0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PATTERN_COLOR0                        24:24 /* RWIVF */
#define NV_PGRAPH_STATE_PATTERN_COLOR0_INVALID           0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PATTERN_COLOR0_VALID             0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PATTERN_COLOR0_018               0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PATTERN_COLOR1                        25:25 /* RWIVF */
#define NV_PGRAPH_STATE_PATTERN_COLOR1_INVALID           0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PATTERN_COLOR1_VALID             0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PATTERN_COLOR1_018               0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PATTERN_PATT0                         26:26 /* RWIVF */
#define NV_PGRAPH_STATE_PATTERN_PATT0_INVALID            0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PATTERN_PATT0_VALID              0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PATTERN_PATT0_018                0x00000001 /* RWC-V */
#define NV_PGRAPH_STATE_PATTERN_PATT1                         27:27 /* RWIVF */
#define NV_PGRAPH_STATE_PATTERN_PATT1_INVALID            0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE_PATTERN_PATT1_VALID              0x00000001 /* RW--V */
#define NV_PGRAPH_STATE_PATTERN_PATT1_018                0x00000001 /* RWC-V */
#define NV_PGRAPH_DMA_PITCH                              0x00400770 /* RW-4R */
#define NV_PGRAPH_DMA_PITCH_S0                                 15:0 /* RWXSF */
#define NV_PGRAPH_DMA_PITCH_S1                                31:16 /* RWXSF */
#define NV_PGRAPH_DVD_COLORFMT                           0x00400774 /* RW-4R */
#define NV_PGRAPH_DVD_COLORFMT_IMAGE                            5:0 /* RWNVF */
#define NV_PGRAPH_DVD_COLORFMT_IMAGE_FORMAT_INVALID            0x00 /* RWN-V */
#define NV_PGRAPH_DVD_COLORFMT_IMAGE_FORMAT_LE_V8YB8U8YA8      0x12 /* RW--V */
#define NV_PGRAPH_DVD_COLORFMT_IMAGE_FORMAT_LE_YB8V8YA8U8      0x13 /* RW--V */
#define NV_PGRAPH_DVD_COLORFMT_OVLY                             9:8 /* RWNVF */
#define NV_PGRAPH_DVD_COLORFMT_OVLY_FORMAT_INVALID             0x00 /* RWN-V */
#define NV_PGRAPH_DVD_COLORFMT_OVLY_FORMAT_LE_A8CR8CB8Y8       0x01 /* RW--V */
#define NV_PGRAPH_DVD_COLORFMT_OVLY_FORMAT_LE_A4CR6YB6A4CB6YA6 0x02 /* RW--V */
#define NV_PGRAPH_DVD_COLORFMT_OVLY_FORMAT_TRANSPARENT         0x03 /* RW--V */
#define NV_PGRAPH_SCALED_FORMAT                          0x00400778 /* RW-4R */
#define NV_PGRAPH_SCALED_FORMAT_ORIGIN                        17:16 /* RWIVF */
#define NV_PGRAPH_SCALED_FORMAT_ORIGIN_INVALID           0x00000000 /* RWI-V */
#define NV_PGRAPH_SCALED_FORMAT_ORIGIN_CENTER            0x00000001 /* RW--V */
#define NV_PGRAPH_SCALED_FORMAT_ORIGIN_CORNER            0x00000002 /* RW--V */
#define NV_PGRAPH_SCALED_FORMAT_INTERPOLATOR                  24:24 /* RWIVF */
#define NV_PGRAPH_SCALED_FORMAT_INTERPOLATOR_ZOH         0x00000000 /* RWI-V */
#define NV_PGRAPH_SCALED_FORMAT_INTERPOLATOR_FOH         0x00000001 /* RW--V */
#define NV_PGRAPH_STATE3D                                0x0040077C /* RW-4R */
#define NV_PGRAPH_STATE3D_CELSIUS_TAG_ID                       15:0 /* RWIVF */
#define NV_PGRAPH_STATE3D_CELSIUS_TAG_ID_0               0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE3D_CHANNEL_ID                          20:16 /* RWIVF */
#define NV_PGRAPH_STATE3D_CHANNEL_ID_0                   0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE3D_CELSIUS_TAG_VALID                   24:24 /* RWIVF */
#define NV_PGRAPH_STATE3D_CELSIUS_TAG_VALID_FALSE        0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE3D_CELSIUS_TAG_VALID_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_STATE3D_CHANNEL_VALID                       25:25 /* RWIVF */
#define NV_PGRAPH_STATE3D_CHANNEL_VALID_FALSE            0x00000000 /* RWI-V */
#define NV_PGRAPH_STATE3D_CHANNEL_VALID_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_CHANNEL_CTX_TABLE                      0x00400780 /* RW-4R */
#define NV_PGRAPH_CHANNEL_CTX_TABLE_INST                       15:0 /* RWIVF */
#define NV_PGRAPH_CHANNEL_CTX_TABLE_INST_0               0x00000000 /* RWI-V */
#define NV_PGRAPH_CHANNEL_CTX_POINTER                    0x00400784 /* RW-4R */
#define NV_PGRAPH_CHANNEL_CTX_POINTER_INST                     15:0 /* RWIVF */
#define NV_PGRAPH_CHANNEL_CTX_POINTER_INST_0             0x00000000 /* RWI-V */
#define NV_PGRAPH_CHANNEL_CTX_TRIGGER                    0x00400788 /* RW-4R */
#define NV_PGRAPH_CHANNEL_CTX_TRIGGER_READ_IN                   0:0 /* CWIVF */
#define NV_PGRAPH_CHANNEL_CTX_TRIGGER_READ_IN_IGNORE     0x00000000 /* CWI-V */
#define NV_PGRAPH_CHANNEL_CTX_TRIGGER_READ_IN_ACTIVATE   0x00000001 /* -W--T */
#define NV_PGRAPH_CHANNEL_CTX_TRIGGER_WRITE_OUT                 1:1 /* CWIVF */
#define NV_PGRAPH_CHANNEL_CTX_TRIGGER_WRITE_OUT_IGNORE   0x00000000 /* CWI-V */
#define NV_PGRAPH_CHANNEL_CTX_TRIGGER_WRITE_OUT_ACTIVATE 0x00000001 /* -W--T */
#define NV_PGRAPH_RDI_INDEX                              0x00400750 /* RW-4R */
#define NV_PGRAPH_RDI_INDEX_ADDRESS                            12:2 /* RWXVF */
#define NV_PGRAPH_RDI_INDEX_ADDRESS_0                    0x00000000 /* RW--V */
#define NV_PGRAPH_RDI_INDEX_SELECT                            24:16 /* RWXVF */
#define NV_PGRAPH_RDI_INDEX_SELECT_0                     0x00000000 /* RW--V */
#define NV_PGRAPH_RDI_DATA                               0x00400754 /* RW-4R */
#define NV_PGRAPH_RDI_DATA_VALUE                               31:0 /* RWXVF */
#define NV_PGRAPH_RDI_DEBUG_DATA                         0x00400758 /* RW-4R */
#define NV_PGRAPH_RDI_DEBUG_DATA_VALUE                         31:0 /* RWXVF */
#define NV_PGRAPH_OGL_PERF                               0x00400730 /* R--4R */
#define NV_PGRAPH_OGL_PERF_SMOOTHLINE                           1:0 /* R-XVF */
#define NV_PGRAPH_OGL_PERF_SMOOTHLINE_1X                 0x00000000 /* R---V */
#define NV_PGRAPH_OGL_PERF_SMOOTHLINE_2X                 0x00000001 /* R---V */
#define NV_PGRAPH_OGL_PERF_SMOOTHLINE_4X                 0x00000002 /* R---V */
#define NV_PGRAPH_OGL_PERF_SMOOTHLINE_8X                 0x00000003 /* R---V */
#define NV_PGRAPH_OGL_PERF_POLYMODE                             3:2 /* R-XVF */
#define NV_PGRAPH_OGL_PERF_POLYMODE_1X                   0x00000000 /* R---V */
#define NV_PGRAPH_OGL_PERF_POLYMODE_2X                   0x00000001 /* R---V */
#define NV_PGRAPH_OGL_PERF_POLYMODE_4X                   0x00000002 /* R---V */
#define NV_PGRAPH_OGL_PERF_POLYMODE_8X                   0x00000003 /* R---V */
#define NV_PGRAPH_OGL_PERF_TWOSIDEDLIGHT                        5:4 /* R-XVF */
#define NV_PGRAPH_OGL_PERF_TWOSIDEDLIGHT_1X              0x00000000 /* R---V */
#define NV_PGRAPH_OGL_PERF_TWOSIDEDLIGHT_2X              0x00000001 /* R---V */
#define NV_PGRAPH_OGL_PERF_TWOSIDEDLIGHT_4X              0x00000002 /* R---V */
#define NV_PGRAPH_OGL_PERF_TWOSIDEDLIGHT_8X              0x00000003 /* R---V */
#define NV_PGRAPH_PATT_COLOR0                            0x00400b10 /* RW-4R */
#define NV_PGRAPH_PATT_COLOR0_VALUE                            31:0 /* RWXUF */
#define NV_PGRAPH_PATT_COLOR0_VALUE_018                  0x00000000 /* RWC-V */
#define NV_PGRAPH_PATT_COLOR0_VALUE_044                  0x00000000 /* RWC-V */
#define NV_PGRAPH_PATT_COLOR1                            0x00400b14 /* RW-4R */
#define NV_PGRAPH_PATT_COLOR1_VALUE                            31:0 /* RWXUF */
#define NV_PGRAPH_PATT_COLOR1_VALUE_018                  0x00000000 /* RWC-V */
#define NV_PGRAPH_PATT_COLOR1_VALUE_044                  0x00000000 /* RWC-V */
#define NV_PGRAPH_PATT_COLORRAM(i)               (0x00400a00+(i)*4) /* RW-4A */
#define NV_PGRAPH_PATT_COLORRAM__SIZE_1                          64 /*       */
#define NV_PGRAPH_PATT_COLORRAM_VALUE                          23:0 /* RWXUF */
#define NV_PGRAPH_PATT_COLORRAM_VALUE_044                0x00000000 /* RWC-V */
#define NV_PGRAPH_PATTERN(i)                     (0x00400b18+(i)*4) /* RW-4A */
#define NV_PGRAPH_PATTERN__SIZE_1                                 2 /*       */
#define NV_PGRAPH_PATTERN_BITMAP                               31:0 /* RWXVF */
#define NV_PGRAPH_PATTERN_BITMAP_018                     0x00000000 /* RWC-V */
#define NV_PGRAPH_PATTERN_BITMAP_044                     0x00000000 /* RWC-V */
#define NV_PGRAPH_PATTERN_SHAPE                          0x00400b20 /* RW-4R */
#define NV_PGRAPH_PATTERN_SHAPE_VALUE                           1:0 /* RWXVF */
#define NV_PGRAPH_PATTERN_SHAPE_VALUE_8X_8Y              0x00000000 /* RW--V */
#define NV_PGRAPH_PATTERN_SHAPE_VALUE_64X_1Y             0x00000001 /* RW--V */
#define NV_PGRAPH_PATTERN_SHAPE_VALUE_1X_64Y             0x00000002 /* RW--V */
#define NV_PGRAPH_PATTERN_SHAPE_VALUE_018                0x00000000 /* RWC-V */
#define NV_PGRAPH_PATTERN_SHAPE_VALUE_044                0x00000000 /* RWC-V */
#define NV_PGRAPH_PATTERN_SHAPE_SELECT                          4:4 /* RWXVF */
#define NV_PGRAPH_PATTERN_SHAPE_SELECT_2COLOR            0x00000000 /* RW--V */
#define NV_PGRAPH_PATTERN_SHAPE_SELECT_FULLCOLOR         0x00000001 /* RW--V */
#define NV_PGRAPH_PATTERN_SHAPE_SELECT_044               0x00000000 /* RWC-V */
#define NV_PGRAPH_MONO_COLOR0                            0x00400814 /* RW-4R */
#define NV_PGRAPH_MONO_COLOR0_VALUE                            31:0 /* RWXUF */
#define NV_PGRAPH_ROP3                                   0x00400b00 /* RW-4R */
#define NV_PGRAPH_ROP3_VALUE                                    7:0 /* RWXVF */
#define NV_PGRAPH_ROP3_VALUE_043                         0x00000000 /* RWC-V */
#define NV_PGRAPH_CHROMA                                 0x0040087c /* RW-4R */
#define NV_PGRAPH_CHROMA_VALUE                                 31:0 /* RWXUF */
#define NV_PGRAPH_CHROMA_VALUE_017                       0x00000000 /* RWC-V */
#define NV_PGRAPH_CHROMA_VALUE_057                       0x00000000 /* RWC-V */
#define NV_PGRAPH_BETA_AND                               0x00400b04 /* RW-4R */
#define NV_PGRAPH_BETA_AND_VALUE_FRACTION                     30:23 /* RWXUF */
#define NV_PGRAPH_BETA_AND_VALUE_FRACTION_012            0x00000000 /* RWC-V */
#define NV_PGRAPH_BETA_PREMULT                           0x00400b08 /* RW-4R */
#define NV_PGRAPH_BETA_PREMULT_VALUE                           31:0 /* RWXUF */
#define NV_PGRAPH_BETA_PREMULT_VALUE_072                 0x00000000 /* RWC-V */
#define NV_PGRAPH_STORED_FMT                             0x00400b0c /* RW-4R */
#define NV_PGRAPH_STORED_FMT_MONO0                              5:0 /* RWXVF */
#define NV_PGRAPH_STORED_FMT_MONO0_04A                   0x0000000C /* RWC-V */
#define NV_PGRAPH_STORED_FMT_PATT0                             13:8 /* RWXVF */
#define NV_PGRAPH_STORED_FMT_PATT0_044                   0x0000000B /* RWC-V */
#define NV_PGRAPH_STORED_FMT_PATT1                            21:16 /* RWXVF */
#define NV_PGRAPH_STORED_FMT_PATT1_044                   0x0000000B /* RWC-V */
#define NV_PGRAPH_STORED_FMT_CHROMA                           29:24 /* RWXVF */
#define NV_PGRAPH_STORED_FMT_CHROMA_057                  0x0000000B /* RWC-V */
#define NV_PGRAPH_PREROP_TILEBIT                         0x00400888 /* RW-4R */
#define NV_PGRAPH_PREROP_TILEBIT_BUF0                           0:0 /* RWXVF */
#define NV_PGRAPH_PREROP_TILEBIT_BUF0_LINEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF0_TILED              0x00000001 /* RW--V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF1                           1:1 /* RWXVF */
#define NV_PGRAPH_PREROP_TILEBIT_BUF1_LINEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF1_TILED              0x00000001 /* RW--V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF2                           2:2 /* RWXVF */
#define NV_PGRAPH_PREROP_TILEBIT_BUF2_LINEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF2_TILED              0x00000001 /* RW--V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF3                           3:3 /* RWXVF */
#define NV_PGRAPH_PREROP_TILEBIT_BUF3_LINEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF3_TILED              0x00000001 /* RW--V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF4                           4:4 /* RWXVF */
#define NV_PGRAPH_PREROP_TILEBIT_BUF4_LINEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF4_TILED              0x00000001 /* RW--V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF5                           5:5 /* RWXVF */
#define NV_PGRAPH_PREROP_TILEBIT_BUF5_LINEAR             0x00000000 /* RWI-V */
#define NV_PGRAPH_PREROP_TILEBIT_BUF5_TILED              0x00000001 /* RW--V */
#define NV_PGRAPH_FORMATS                                0x00400804 /* R--4R */
#define NV_PGRAPH_FORMATS_ROP                                   2:0 /* R-XVF */
#define NV_PGRAPH_FORMATS_ROP_Y8                         0x00000000 /* R---V */
#define NV_PGRAPH_FORMATS_ROP_RGB15                      0x00000001 /* R---V */
#define NV_PGRAPH_FORMATS_ROP_RGB16                      0x00000002 /* R---V */
#define NV_PGRAPH_FORMATS_ROP_Y16                        0x00000003 /* R---V */
#define NV_PGRAPH_FORMATS_ROP_RGB24                      0x00000005 /* R---V */
#define NV_PGRAPH_FORMATS_ROP_Y32                        0x00000007 /* R---V */
#define NV_PGRAPH_FORMATS_SRC                                   9:4 /* R-XVF */
#define NV_PGRAPH_FORMATS_SRC_INVALID                    0x00000000 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_Y8                      0x00000001 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X16A8Y8                 0x00000002 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X24Y8                   0x00000003 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_A1R5G5B5                0x00000006 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X1R5G5B5                0x00000007 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X16A1R5G5B5             0x00000008 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X17R5G5B5               0x00000009 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_R5G6B5                  0x0000000A /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_A16R5G6B5               0x0000000B /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X16R5G6B5               0x0000000C /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_A8R8G8B8                0x0000000D /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X8R8G8B8                0x0000000E /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_Y16                     0x0000000F /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_A16Y16                  0x00000010 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_X16Y16                  0x00000011 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_V8YB8U8YA8              0x00000012 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_YB8V8YA8U8              0x00000013 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_Y32                     0x00000014 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_AY8                     0x00000015 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_EYB8ECR8EYA8ECB8        0x00000016 /* R---V */
#define NV_PGRAPH_FORMATS_SRC_LE_ECR8EYB8ECB8EYA8        0x00000017 /* R---V */
#define NV_PGRAPH_FORMATS_FB                                  15:12 /* R-XVF */
#define NV_PGRAPH_FORMATS_FB_INVALID                     0x00000000 /* R---V */
#define NV_PGRAPH_FORMATS_FB_Y8                          0x00000001 /* R---V */
#define NV_PGRAPH_FORMATS_FB_X1R5G5B5_Z1R5G5B5           0x00000002 /* R---V */
#define NV_PGRAPH_FORMATS_FB_X1R5G5B5_O1R5G5B5           0x00000003 /* R---V */
#define NV_PGRAPH_FORMATS_FB_A1R5G5B5                    0x00000004 /* R---V */
#define NV_PGRAPH_FORMATS_FB_R5G6B5                      0x00000005 /* R---V */
#define NV_PGRAPH_FORMATS_FB_Y16                         0x00000006 /* R---V */
#define NV_PGRAPH_FORMATS_FB_X8R8G8B8_Z8R8G8B8           0x00000007 /* R---V */
#define NV_PGRAPH_FORMATS_FB_X8R8G8B8_O1Z7R8G8B8         0x00000008 /* R---V */
#define NV_PGRAPH_FORMATS_FB_X1A7R8G8B8_Z1A7R8G8B8       0x00000009 /* R---V */
#define NV_PGRAPH_FORMATS_FB_X1A7R8G8B8_O1A7R8G8B8       0x0000000a /* R---V */
#define NV_PGRAPH_FORMATS_FB_X8R8G8B8_O8R8G8B8           0x0000000b /* R---V */
#define NV_PGRAPH_FORMATS_FB_A8R8G8B8                    0x0000000c /* R---V */
#define NV_PGRAPH_FORMATS_FB_Y32                         0x0000000d /* R---V */
#define NV_PGRAPH_FORMATS_FB_V8YB8U8YA8                  0x0000000e /* R---V */
#define NV_PGRAPH_FORMATS_FB_YB8V8YA8U8                  0x0000000f /* R---V */
#define NV_PGRAPH_FORMATS_ZB                                  19:18 /* R-XVF */
#define NV_PGRAPH_FORMATS_ZB_INVALID                     0x00000000 /* R---V */
#define NV_PGRAPH_FORMATS_ZB_Z16                         0x00000001 /* R---V */
#define NV_PGRAPH_FORMATS_ZB_Z24S8                       0x00000002 /* R---V */
#define NV_PGRAPH_ROPMODE                                0x00400808 /* R--4R */
#define NV_PGRAPH_ROPMODE_CBYTES                                1:0 /* R-XVF */
#define NV_PGRAPH_ROPMODE_CBYTES_1                       0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_CBYTES_2                       0x00000001 /* R---V */
#define NV_PGRAPH_ROPMODE_CBYTES_4                       0x00000002 /* R---V */
#define NV_PGRAPH_ROPMODE_ZBYTES                                3:2 /* R-XVF */
#define NV_PGRAPH_ROPMODE_ZBYTES_1                       0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_ZBYTES_2                       0x00000001 /* R---V */
#define NV_PGRAPH_ROPMODE_ZBYTES_4                       0x00000002 /* R---V */
#define NV_PGRAPH_ROPMODE_SWIZZLE                               4:4 /* R-XVF */
#define NV_PGRAPH_ROPMODE_SWIZZLE_DISABLE                0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_SWIZZLE_ENABLE                 0x00000001 /* R---V */
#define NV_PGRAPH_ROPMODE_PSEUDO                                5:5 /* R-XVF */
#define NV_PGRAPH_ROPMODE_PSEUDO_DISABLE                 0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_PSEUDO_ENABLE                  0x00000001 /* R---V */
#define NV_PGRAPH_ROPMODE_TYPE                                  7:6 /* R-XVF */
#define NV_PGRAPH_ROPMODE_TYPE_3D                        0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_TYPE_CLEAR                     0x00000001 /* R---V */
#define NV_PGRAPH_ROPMODE_TYPE_2D                        0x00000002 /* R---V */
#define NV_PGRAPH_ROPMODE_TYPE_BLT                       0x00000003 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS                                   7:0 /* R-XVF */
#define NV_PGRAPH_ROPMODE_BUS_Z32_C32                    0x0000000A /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z32_CPSEUDO32              0x0000002A /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z32_C16                    0x00000009 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z32_C32_SWIZZLE            0x0000001A /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z16_C32                    0x00000006 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z16_CPSEUDO32              0x00000026 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z16_C16                    0x00000005 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z16_CPSEUDO32_SWIZZLE      0x00000036 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_Z16_C16_SWIZZLE            0x00000015 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_ZNULL_C8                   0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_ZNULL_C8_SWIZZLE           0x00000010 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2D32                       0x0000008A /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2DPSEUDO32                 0x000000A6 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2D16                       0x00000085 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2D8                        0x00000080 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2D32_SWIZZLE               0x0000009A /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2DPSEUDO32_SWIZZLE         0x000000B6 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2D16_SWIZZLE               0x00000095 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_2D8_SWIZZLE                0x00000090 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_CLEAR32                    0x0000004A /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_CLEAR16                    0x00000045 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_BLT32                      0x000000CA /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_BLT16                      0x000000C5 /* R---V */
#define NV_PGRAPH_ROPMODE_BUS_BLT8                       0x000000C0 /* R---V */
#define NV_PGRAPH_ROPMODE_ZTILEMODE                             9:8 /* R-XVF */
#define NV_PGRAPH_ROPMODE_ZTILEMODE_NULL                 0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_ZTILEMODE_LINEAR               0x00000001 /* R---V */
#define NV_PGRAPH_ROPMODE_ZTILEMODE_TILED                0x00000002 /* R---V */
#define NV_PGRAPH_ROPMODE_CTILEMODE                           11:10 /* R-XVF */
#define NV_PGRAPH_ROPMODE_CTILEMODE_NULL                 0x00000000 /* R---V */
#define NV_PGRAPH_ROPMODE_CTILEMODE_LINEAR               0x00000001 /* R---V */
#define NV_PGRAPH_ROPMODE_CTILEMODE_TILED                0x00000002 /* R---V */
#define NV_PGRAPH_PROPSTATE                              0x00400884 /* R--4R */
#define NV_PGRAPH_PROPSTATE_VALUE                              31:0 /* R-XVF */
#define NV_PGRAPH_ABS_X_RAM(i)                   (0x00400400+(i)*4) /* RW-4A */
#define NV_PGRAPH_ABS_X_RAM__SIZE_1                              10 /*       */
#define NV_PGRAPH_ABS_X_RAM_VALUE                              31:0 /* RWXUF */
#define NV_PGRAPH_X_RAM_BPORT(i)                 (0x00400c00+(i)*4) /* R--4A */
#define NV_PGRAPH_X_RAM_BPORT__SIZE_1                            10 /*       */
#define NV_PGRAPH_X_RAM_BPORT_VALUE                            31:0 /* R--UF */
#define NV_PGRAPH_ABS_Y_RAM(i)                   (0x00400480+(i)*4) /* RW-4A */
#define NV_PGRAPH_ABS_Y_RAM__SIZE_1                              10 /*       */
#define NV_PGRAPH_ABS_Y_RAM_VALUE                              31:0 /* RWXUF */
#define NV_PGRAPH_Y_RAM_BPORT(i)                 (0x00400c80+(i)*4) /* R--4A */
#define NV_PGRAPH_Y_RAM_BPORT__SIZE_1                            10 /*       */
#define NV_PGRAPH_Y_RAM_BPORT_VALUE                            31:0 /* R--UF */
#define NV_PGRAPH_XY_LOGIC_MISC0                         0x00400514 /* RW-4R */
#define NV_PGRAPH_XY_LOGIC_MISC0_COUNTER                       17:0 /* RWBUF */
#define NV_PGRAPH_XY_LOGIC_MISC0_COUNTER_0               0x00000000 /* RWB-V */
#define NV_PGRAPH_XY_LOGIC_MISC0_DIMENSION                    20:20 /* RWVVF */
#define NV_PGRAPH_XY_LOGIC_MISC0_DIMENSION_NONZERO       0x00000000 /* RWV-V */
#define NV_PGRAPH_XY_LOGIC_MISC0_DIMENSION_ZERO          0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC0_IMAGE_DATA_64                24:24 /* RWVVF */
#define NV_PGRAPH_XY_LOGIC_MISC0_IMAGE_DATA_64_FALSE     0x00000000 /* RWV-V */
#define NV_PGRAPH_XY_LOGIC_MISC0_IMAGE_DATA_64_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC0_INDEX                        31:28 /* RWBUF */
#define NV_PGRAPH_XY_LOGIC_MISC0_INDEX_0                 0x00000000 /* RWB-V */
#define NV_PGRAPH_XY_LOGIC_MISC1                         0x00400518 /* RW-4R */
#define NV_PGRAPH_XY_LOGIC_MISC1_INITIAL                        0:0 /* RWNVF */
#define NV_PGRAPH_XY_LOGIC_MISC1_INITIAL_NEEDED          0x00000000 /* RWN-V */
#define NV_PGRAPH_XY_LOGIC_MISC1_INITIAL_DONE            0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC1_XTRACLIPX                      4:4 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC1_XTRACLIPX_NOTNULL       0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC1_XTRACLIPX_NULL          0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC1_XTRACLIPY                      5:5 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC1_XTRACLIPY_NOTNULL       0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC1_XTRACLIPY_NULL          0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_XIMAX                    12:12 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_XIMAX_UUMAX         0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_XIMAX_IMAGEMAX      0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_YIMAX                    16:16 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_YIMAX_UUMAX         0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_YIMAX_IMAGEMAX      0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_XXTRA                    20:20 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_XXTRA_CLIPMAX       0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC1_SEL_XXTRA_IMAGEMAX      0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC2                         0x0040051C /* RW-4R */
#define NV_PGRAPH_XY_LOGIC_MISC2_HANDOFF                        0:0 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC2_HANDOFF_DISABLE         0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC2_HANDOFF_ENABLE          0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC2_XTRACLIPX                      4:4 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC2_XTRACLIPX_NOTNULL       0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC2_XTRACLIPX_NULL          0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC2_XTRACLIPY                      5:5 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC2_XTRACLIPY_NOTNULL       0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC2_XTRACLIPY_NULL          0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_XIMAX                    12:12 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_XIMAX_UCMAX         0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_XIMAX_IMAGEMAX      0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_YIMAX                    16:16 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_YIMAX_UCMAX         0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_YIMAX_IMAGEMAX      0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_XXTRA                    20:20 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_XXTRA_CLIPMAX       0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC2_SEL_XXTRA_IMAGEMAX      0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3                         0x00400520 /* RW-4R */
#define NV_PGRAPH_XY_LOGIC_MISC3_WDIMY_EQ_0                     0:0 /* RWXVF */
#define NV_PGRAPH_XY_LOGIC_MISC3_WDIMY_EQ_0_NULL         0x00000000 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3_WDIMY_EQ_0_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3_RELOAD_WDIMY                   4:4 /* RWXVF */
#define NV_PGRAPH_XY_LOGIC_MISC3_RELOAD_WDIMY_NULL       0x00000000 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3_RELOAD_WDIMY_TRUE       0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3_RELOAD_WX                      8:8 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC3_RELOAD_WX_NULL          0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC3_RELOAD_WX_TRUE          0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3_TEXT_ALG                     12:12 /* RWIVF */
#define NV_PGRAPH_XY_LOGIC_MISC3_TEXT_ALG_NULL           0x00000000 /* RWI-V */
#define NV_PGRAPH_XY_LOGIC_MISC3_TEXT_ALG_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3_TEXT_DIMX                    22:16 /* RWXUF */
#define NV_PGRAPH_XY_LOGIC_MISC3_TEXT_DIMX_0             0x00000000 /* RW--V */
#define NV_PGRAPH_XY_LOGIC_MISC3_TEXT_WDIMX                   30:24 /* RWXUF */
#define NV_PGRAPH_XY_LOGIC_MISC3_TEXT_WDIMX_0            0x00000000 /* RW--V */
#define NV_PGRAPH_X_MISC                                 0x00400500 /* RW-4R */
#define NV_PGRAPH_X_MISC_BIT33_0                                0:0 /* RWNVF */
#define NV_PGRAPH_X_MISC_BIT33_0_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_BIT33_1                                1:1 /* RWNVF */
#define NV_PGRAPH_X_MISC_BIT33_1_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_BIT33_2                                2:2 /* RWNVF */
#define NV_PGRAPH_X_MISC_BIT33_2_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_BIT33_3                                3:3 /* RWNVF */
#define NV_PGRAPH_X_MISC_BIT33_3_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_RANGE_0                                4:4 /* RWNVF */
#define NV_PGRAPH_X_MISC_RANGE_0_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_RANGE_1                                5:5 /* RWNVF */
#define NV_PGRAPH_X_MISC_RANGE_1_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_RANGE_2                                6:6 /* RWNVF */
#define NV_PGRAPH_X_MISC_RANGE_2_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_RANGE_3                                7:7 /* RWNVF */
#define NV_PGRAPH_X_MISC_RANGE_3_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_X_MISC_ADDER_OUTPUT                         29:28 /* RWXVF */
#define NV_PGRAPH_X_MISC_ADDER_OUTPUT_EQ_0               0x00000000 /* RW--V */
#define NV_PGRAPH_X_MISC_ADDER_OUTPUT_LT_0               0x00000001 /* RW--V */
#define NV_PGRAPH_X_MISC_ADDER_OUTPUT_GT_0               0x00000002 /* RW--V */
#define NV_PGRAPH_Y_MISC                                 0x00400504 /* RW-4R */
#define NV_PGRAPH_Y_MISC_BIT33_0                                0:0 /* RWNVF */
#define NV_PGRAPH_Y_MISC_BIT33_0_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_BIT33_1                                1:1 /* RWNVF */
#define NV_PGRAPH_Y_MISC_BIT33_1_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_BIT33_2                                2:2 /* RWNVF */
#define NV_PGRAPH_Y_MISC_BIT33_2_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_BIT33_3                                3:3 /* RWNVF */
#define NV_PGRAPH_Y_MISC_BIT33_3_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_RANGE_0                                4:4 /* RWNVF */
#define NV_PGRAPH_Y_MISC_RANGE_0_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_RANGE_1                                5:5 /* RWNVF */
#define NV_PGRAPH_Y_MISC_RANGE_1_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_RANGE_2                                6:6 /* RWNVF */
#define NV_PGRAPH_Y_MISC_RANGE_2_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_RANGE_3                                7:7 /* RWNVF */
#define NV_PGRAPH_Y_MISC_RANGE_3_0                       0x00000000 /* RWN-V */
#define NV_PGRAPH_Y_MISC_ADDER_OUTPUT                         29:28 /* RWXVF */
#define NV_PGRAPH_Y_MISC_ADDER_OUTPUT_EQ_0               0x00000000 /* RW--V */
#define NV_PGRAPH_Y_MISC_ADDER_OUTPUT_LT_0               0x00000001 /* RW--V */
#define NV_PGRAPH_Y_MISC_ADDER_OUTPUT_GT_0               0x00000002 /* RW--V */
#define NV_PGRAPH_ABS_UCLIP_XMIN                         0x0040053C /* RW-4R */
#define NV_PGRAPH_ABS_UCLIP_XMIN_VALUE                         15:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIP_XMIN_VALUE_019               0x00000000 /* RWC-V */
#define NV_PGRAPH_ABS_UCLIP_XMAX                         0x00400544 /* RW-4R */
#define NV_PGRAPH_ABS_UCLIP_XMAX_VALUE                         17:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIP_XMAX_VALUE_019               0x00000000 /* RWC-V */
#define NV_PGRAPH_ABS_UCLIP_YMIN                         0x00400540 /* RW-4R */
#define NV_PGRAPH_ABS_UCLIP_YMIN_VALUE                         15:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIP_YMIN_VALUE_019               0x00000000 /* RWC-V */
#define NV_PGRAPH_ABS_UCLIP_YMAX                         0x00400548 /* RW-4R */
#define NV_PGRAPH_ABS_UCLIP_YMAX_VALUE                         17:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIP_YMAX_VALUE_019               0x00000000 /* RWC-V */
#define NV_PGRAPH_ABS_UCLIPA_XMIN                        0x00400560 /* RW-4R */
#define NV_PGRAPH_ABS_UCLIPA_XMIN_VALUE                        15:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIPA_XMIN_VALUE_MIN              0x00000000 /* RWN-V */
#define NV_PGRAPH_ABS_UCLIPA_XMAX                        0x00400568 /* RW-4R */
#define NV_PGRAPH_ABS_UCLIPA_XMAX_VALUE                        17:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIPA_XMAX_VALUE_MAX              0x0000ffff /* RWN-V */
#define NV_PGRAPH_ABS_UCLIPA_YMIN                        0x00400564 /* RW-4R */
#define NV_PGRAPH_ABS_UCLIPA_YMIN_VALUE                        15:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIPA_YMIN_VALUE_MIN              0x00000000 /* RWN-V */
#define NV_PGRAPH_ABS_UCLIPA_YMAX                        0x0040056C /* RW-4R */
#define NV_PGRAPH_ABS_UCLIPA_YMAX_VALUE                        17:0 /* RWXSF */
#define NV_PGRAPH_ABS_UCLIPA_YMAX_VALUE_MAX              0x0000ffff /* RWN-V */
#define NV_PGRAPH_SOURCE_COLOR                           0x0040050C /* RW-4R */
#define NV_PGRAPH_SOURCE_COLOR_VALUE                           31:0 /* RWNVF */
#define NV_PGRAPH_SOURCE_COLOR_VALUE_0                   0x00000000 /* RWN-V */
#define NV_PGRAPH_VALID1                                 0x00400508 /* RW-4R */
#define NV_PGRAPH_VALID1_VLD                                   22:0 /* RWNVF */
#define NV_PGRAPH_VALID1_VLD_0                           0x00000000 /* RWN-V */
#define NV_PGRAPH_VALID1_VLD_NOCLIP                       (0x1<<19) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_SRCCOLOR                     (0x1<<16) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTMOVE                      (0x1<<21) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTX01                        (0x3<<0) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTX02                        (0x7<<0) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTX03                        (0xf<<0) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTXCHAIN01                   (0x3<<4) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTXCHAIN02                   (0x7<<4) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTXCHAIN03                   (0xf<<4) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTY01                        (0x3<<8) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTY02                        (0x7<<8) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTY03                        (0xf<<8) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTYCHAIN01                  (0x3<<12) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTYCHAIN02                  (0x7<<12) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTYCHAIN03                  (0xf<<12) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_X_OFFSET                      (0x1<<0) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_XCHAIN_OFFSET                 (0x1<<4) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_Y_OFFSET                      (0x1<<8) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_YCHAIN_OFFSET                (0x1<<12) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTCOLOR0                    (0x1<<17) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTCOLOR1                    (0x1<<18) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTCLIP                      (0x1<<20) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTFONT                      (0x1<<22) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTOFFSET                    (0x1<<22) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTBPITCH                     (0x1<<2) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTBOFFSET                    (0x1<<3) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTDUDX                       (0x1<<4) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTDVDY                       (0x1<<5) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTPOINT                      (0x1<<8) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTSIZE                       (0x1<<9) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTPITCH                     (0x1<<10) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTSTART                     (0x1<<11) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTDUDX2                     (0x1<<12) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTDVDY2                     (0x1<<13) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTPOINT2                    (0x1<<14) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTSIZE2                     (0x1<<15) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTPITCH2                    (0x1<<16) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTSTART2                    (0x1<<17) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTOFFSIN                     (0x1<<0) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTOFFSOUT                    (0x1<<1) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTPITCHIN                    (0x1<<2) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTPITCHOUT                   (0x1<<3) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTLENGTH                     (0x1<<4) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTCOUNT                      (0x1<<5) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTFORMAT                     (0x1<<6) /* RW--V */
#define NV_PGRAPH_VALID1_VLD_GOTNOTIFY                     (0x1<<7) /* RW--V */
#define NV_PGRAPH_VALID1_CLIP_MIN                             28:28 /* RWIVF */
#define NV_PGRAPH_VALID1_CLIP_MIN_NO_ERROR               0x00000000 /* RWI-V */
#define NV_PGRAPH_VALID1_CLIP_MIN_ONLY                   0x00000001 /* RW--V */
#define NV_PGRAPH_VALID1_CLIP_MIN_019                    0x00000000 /* RWC-V */
#define NV_PGRAPH_VALID1_CLIPA_MIN                            29:29 /* RWIVF */
#define NV_PGRAPH_VALID1_CLIPA_MIN_NO_ERROR              0x00000000 /* RWI-V */
#define NV_PGRAPH_VALID1_CLIPA_MIN_ONLY                  0x00000001 /* RW--V */
#define NV_PGRAPH_VALID1_CLIP_MAX                             30:30 /* RWIVF */
#define NV_PGRAPH_VALID1_CLIP_MAX_NO_ERROR               0x00000000 /* RWI-V */
#define NV_PGRAPH_VALID1_CLIP_MAX_ONLY                   0x00000001 /* RW--V */
#define NV_PGRAPH_VALID1_CLIP_MAX_019                    0x00000000 /* RWC-V */
#define NV_PGRAPH_VALID1_CLIPA_MAX                            31:31 /* RWIVF */
#define NV_PGRAPH_VALID1_CLIPA_MAX_NO_ERROR              0x00000000 /* RWI-V */
#define NV_PGRAPH_VALID1_CLIPA_MAX_ONLY                  0x00000001 /* RW--V */
#define NV_PGRAPH_ABS_ICLIP_XMAX                         0x00400534 /* RW-4R */
#define NV_PGRAPH_ABS_ICLIP_XMAX_VALUE                         17:0 /* RWXSF */
#define NV_PGRAPH_ABS_ICLIP_YMAX                         0x00400538 /* RW-4R */
#define NV_PGRAPH_ABS_ICLIP_YMAX_VALUE                         17:0 /* RWXSF */
#define NV_PGRAPH_CLIPX_0                                0x00400524 /* RW-4R */
#define NV_PGRAPH_CLIPX_0_CLIP0_MIN                             1:0 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP0_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP0_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP0_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP0_MAX                             3:2 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP0_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP0_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP0_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP1_MIN                             5:4 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP1_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP1_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP1_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP1_MAX                             7:6 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP1_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP1_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP1_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP2_MIN                             9:8 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP2_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP2_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP2_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP2_MAX                           11:10 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP2_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP2_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP2_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP3_MIN                           13:12 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP3_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP3_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP3_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP3_MAX                           15:14 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP3_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP3_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP3_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP4_MIN                           17:16 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP4_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP4_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP4_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP4_MAX                           19:18 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP4_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP4_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP4_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP5_MIN                           21:20 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP5_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP5_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP5_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP5_MAX                           23:22 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP5_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP5_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP5_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP6_MIN                           25:24 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP6_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP6_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP6_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP6_MAX                           27:26 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP6_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP6_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP6_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP7_MIN                           29:28 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP7_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP7_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP7_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP7_MAX                           31:30 /* RWNVF */
#define NV_PGRAPH_CLIPX_0_CLIP7_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_0_CLIP7_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_0_CLIP7_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1                                0x00400528 /* RW-4R */
#define NV_PGRAPH_CLIPX_1_CLIP8_MIN                             1:0 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP8_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP8_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP8_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP8_MAX                             3:2 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP8_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP8_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP8_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP9_MIN                             5:4 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP9_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP9_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP9_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP9_MAX                             7:6 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP9_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP9_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP9_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP10_MIN                            9:8 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP10_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP10_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP10_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP10_MAX                          11:10 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP10_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP10_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP10_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP11_MIN                          13:12 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP11_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP11_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP11MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP11_MAX                          15:14 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP11_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP11_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP11_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP12_MIN                          17:16 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP12_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP12_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP12_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP12_MAX                          19:18 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP12_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP12_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP12_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP13_MIN                          21:20 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP13_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP13_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP13_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP13_MAX                          23:22 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP13_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP13_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP13_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP14_MIN                          25:24 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP14_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP14_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP14_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP14_MAX                          27:26 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP14_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP14_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP14_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP15_MIN                          29:28 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP15_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP15_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP15_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP15_MAX                          31:30 /* RWNVF */
#define NV_PGRAPH_CLIPX_1_CLIP15_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPX_1_CLIP15_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPX_1_CLIP15_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0                                0x0040052c /* RW-4R */
#define NV_PGRAPH_CLIPY_0_CLIP0_MIN                             1:0 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP0_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP0_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP0_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP0_MAX                             3:2 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP0_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP0_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP0_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP1_MIN                             5:4 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP1_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP1_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP1_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP1_MAX                             7:6 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP1_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP1_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP1_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP2_MIN                             9:8 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP2_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP2_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP2_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP2_MAX                           11:10 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP2_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP2_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP2_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP3_MIN                           13:12 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP3_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP3_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP3_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP3_MAX                           15:14 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP3_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP3_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP3_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP4_MIN                           17:16 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP4_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP4_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP4_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP4_MAX                           19:18 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP4_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP4_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP4_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP5_MIN                           21:20 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP5_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP5_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP5_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP5_MAX                           23:22 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP5_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP5_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP5_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP6_MIN                           25:24 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP6_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP6_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP6_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP6_MAX                           27:26 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP6_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP6_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP6_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP7_MIN                           29:28 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP7_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP7_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP7_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP7_MAX                           31:30 /* RWNVF */
#define NV_PGRAPH_CLIPY_0_CLIP7_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_0_CLIP7_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_0_CLIP7_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1                                0x00400530 /* RW-4R */
#define NV_PGRAPH_CLIPY_1_CLIP8_MIN                             1:0 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP8_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP8_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP8_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP8_MAX                             3:2 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP8_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP8_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP8_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP9_MIN                             5:4 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP9_MIN_GT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP9_MIN_LT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP9_MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP9_MAX                             7:6 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP9_MAX_LT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP9_MAX_GT                   0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP9_MAX_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP10_MIN                            9:8 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP10_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP10_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP10_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP10_MAX                          11:10 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP10_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP10_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP10_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP11_MIN                          13:12 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP11_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP11_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP11MIN_EQ                   0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP11_MAX                          15:14 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP11_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP11_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP11_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP12_MIN                          17:16 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP12_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP12_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP12_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP12_MAX                          19:18 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP12_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP12_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP12_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP13_MIN                          21:20 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP13_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP13_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP13_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP13_MAX                          23:22 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP13_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP13_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP13_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP14_MIN                          25:24 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP14_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP14_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP14_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP14_MAX                          27:26 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP14_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP14_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP14_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP15_MIN                          29:28 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP15_MIN_GT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP15_MIN_LT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP15_MIN_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP15_MAX                          31:30 /* RWNVF */
#define NV_PGRAPH_CLIPY_1_CLIP15_MAX_LT                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLIPY_1_CLIP15_MAX_GT                  0x00000001 /* RWN-V */
#define NV_PGRAPH_CLIPY_1_CLIP15_MAX_EQ                  0x00000002 /* RW--V */
#define NV_PGRAPH_MISC24_0                               0x00400510 /* RW-4R */
#define NV_PGRAPH_MISC24_0_VALUE                               23:0 /* RWXUF */
#define NV_PGRAPH_MISC24_1                               0x00400570 /* RW-4R */
#define NV_PGRAPH_MISC24_1_VALUE                               23:0 /* RWXUF */
#define NV_PGRAPH_MISC24_2                               0x00400574 /* RW-4R */
#define NV_PGRAPH_MISC24_2_VALUE                               23:0 /* RWXUF */
#define NV_PGRAPH_PASSTHRU_0                             0x0040057C /* RW-4R */
#define NV_PGRAPH_PASSTHRU_0_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_PASSTHRU_1                             0x00400580 /* RW-4R */
#define NV_PGRAPH_PASSTHRU_1_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_PASSTHRU_2                             0x00400584 /* RW-4R */
#define NV_PGRAPH_PASSTHRU_2_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_DIMX_TEXTURE                           0x00400588 /* RW-4R */
#define NV_PGRAPH_DIMX_TEXTURE_VALUE                           15:0 /* RWXUF */
#define NV_PGRAPH_WDIMX_TEXTURE                          0x0040058c /* RW-4R */
#define NV_PGRAPH_WDIMX_TEXTURE_VALUE                          16:0 /* RWXSF */
#define NV_PGRAPH_CLEAR                                  0x00000000 /* ---4P */
#define NV_PGRAPH_CLEAR_BUNDLE                           0x000001FF /* ----B */
#define NV_PGRAPH_CLEAR_Z                                       0:0 /* RWXVF */
#define NV_PGRAPH_CLEAR_Z_DISABLE                        0x00000000 /* RW--V */
#define NV_PGRAPH_CLEAR_Z_ENABLE                         0x00000001 /* RW--V */
#define NV_PGRAPH_CLEAR_STENCIL                                 1:1 /* RWXVF */
#define NV_PGRAPH_CLEAR_STENCIL_DISABLE                  0x00000000 /* RW--V */
#define NV_PGRAPH_CLEAR_STENCIL_ENABLE                   0x00000001 /* RW--V */
#define NV_PGRAPH_CLEAR_R                                       4:4 /* RWXVF */
#define NV_PGRAPH_CLEAR_R_DISABLE                        0x00000000 /* RW--V */
#define NV_PGRAPH_CLEAR_R_ENABLE                         0x00000001 /* RW--V */
#define NV_PGRAPH_CLEAR_G                                       5:5 /* RWXVF */
#define NV_PGRAPH_CLEAR_G_DISABLE                        0x00000000 /* RW--V */
#define NV_PGRAPH_CLEAR_G_ENABLE                         0x00000001 /* RW--V */
#define NV_PGRAPH_CLEAR_B                                       6:6 /* RWXVF */
#define NV_PGRAPH_CLEAR_B_DISABLE                        0x00000000 /* RW--V */
#define NV_PGRAPH_CLEAR_B_ENABLE                         0x00000001 /* RW--V */
#define NV_PGRAPH_CLEAR_A                                       7:7 /* RWXVF */
#define NV_PGRAPH_CLEAR_A_DISABLE                        0x00000000 /* RW--V */
#define NV_PGRAPH_CLEAR_A_ENABLE                         0x00000001 /* RW--V */
#define NV_PGRAPH_PERFMONCLR                             0x00000000 /* ---4P */
#define NV_PGRAPH_PERFMONCLR_BUNDLE                      0x000001FD /* ----B */
#define NV_PGRAPH_PERFMONCLR_TYPE                               0:0 /* RWXVF */
#define NV_PGRAPH_PERFMONCLR_TYPE_ZPASS_PIXEL_CNT        0x00000001 /* RW--V */
#define NV_PGRAPH_REPORT                                 0x00000000 /* ---4P */
#define NV_PGRAPH_REPORT_BUNDLE                          0x000001FC /* ----B */
#define NV_PGRAPH_REPORT_OFFSET                                23:0 /* RWXUF */
#define NV_PGRAPH_REPORT_TYPE                                 24:24 /* RWXVF */
#define NV_PGRAPH_REPORT_TYPE_ZPASS_PIXEL_CNT            0x00000001 /* RW--V */
#define NV_PGRAPH_TSEMAPHORERELEASE                      0x00000000 /* ---4P */
#define NV_PGRAPH_TSEMAPHORERELEASE_BUNDLE               0x000001FB /* ----B */
#define NV_PGRAPH_TSEMAPHORERELEASE_V                          31:0 /* RWXUF */
#define NV_PGRAPH_TLPROGLAUNCH                           0x00000000 /* ---4P */
#define NV_PGRAPH_TLPROGLAUNCH_BUNDLE                    0x000001FA /* ----B */
#define NV_PGRAPH_TLPROGLAUNCH_V                                6:0 /* RWXUF */
#define NV_PGRAPH_ANTIALIASING                           0x00401800 /* RW-4R */
#define NV_PGRAPH_ANTIALIASING_BUNDLE                    0x00000000 /* ----B */
#define NV_PGRAPH_ANTIALIASING_ENABLE                           0:0 /* RWXVF */
#define NV_PGRAPH_ANTIALIASING_ENABLE_FALSE              0x00000000 /* RW--V */
#define NV_PGRAPH_ANTIALIASING_ENABLE_TRUE               0x00000001 /* RW--V */
#define NV_PGRAPH_ANTIALIASING_ENABLE_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_COVERAGE                4:4 /* RWXVF */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_COVERAGE_DISABLE 0x00000000 /* RW--V */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_COVERAGE_ENABLE  0x00000001 /* RW--V */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_COVERAGE_097     0x00000000 /* RWC-V */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_ONE                     8:8 /* RWXVF */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_ONE_DISABLE      0x00000000 /* RW--V */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_ONE_ENABLE       0x00000001 /* RW--V */
#define NV_PGRAPH_ANTIALIASING_ALPHA_TO_ONE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_ANTIALIASING_SAMPLE_MASK                    31:16 /* RWXUF */
#define NV_PGRAPH_ANTIALIASING_SAMPLE_MASK_097           0x0000FFFF /* RWC-V */
#define NV_PGRAPH_BLEND                                  0x00401804 /* RW-4R */
#define NV_PGRAPH_BLEND_BUNDLE                           0x00000001 /* ----B */
#define NV_PGRAPH_BLEND_EN                                      3:3 /* RWXVF */
#define NV_PGRAPH_BLEND_EN_FALSE                         0x00000000 /* RW--V */
#define NV_PGRAPH_BLEND_EN_TRUE                          0x00000001 /* RW--V */
#define NV_PGRAPH_BLEND_EN_097                           0x00000000 /* RWC-V */
#define NV_PGRAPH_BLEND_SFACTOR                                 7:4 /* RWXVF */
#define NV_PGRAPH_BLEND_SFACTOR_ZERO                     0x00000000 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_ONE                      0x00000001 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_SRC_COLOR                0x00000002 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_ONE_MINUS_SRC_COLOR      0x00000003 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_SRC_ALPHA                0x00000004 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_ONE_MINUS_SRC_ALPHA      0x00000005 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_DST_ALPHA                0x00000006 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_ONE_MINUS_DST_ALPHA      0x00000007 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_DST_COLOR                0x00000008 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_ONE_MINUS_DST_COLOR      0x00000009 /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_SRC_ALPHA_SATURATE       0x0000000A /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_CONSTANT_COLOR           0x0000000C /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_ONE_MINUS_CONSTANT_COLOR 0x0000000D /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_CONSTANT_ALPHA           0x0000000E /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_ONE_MINUS_CONSTANT_ALPHA 0x0000000F /* RW--V */
#define NV_PGRAPH_BLEND_SFACTOR_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_BLEND_DFACTOR                                11:8 /* RWXVF */
#define NV_PGRAPH_BLEND_DFACTOR_ZERO                     0x00000000 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_ONE                      0x00000001 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_SRC_COLOR                0x00000002 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_ONE_MINUS_SRC_COLOR      0x00000003 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_SRC_ALPHA                0x00000004 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_ONE_MINUS_SRC_ALPHA      0x00000005 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_DST_ALPHA                0x00000006 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_ONE_MINUS_DST_ALPHA      0x00000007 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_DST_COLOR                0x00000008 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_ONE_MINUS_DST_COLOR      0x00000009 /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_SRC_ALPHA_SATURATE       0x0000000A /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_CONSTANT_COLOR           0x0000000C /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_ONE_MINUS_CONSTANT_COLOR 0x0000000D /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_CONSTANT_ALPHA           0x0000000E /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_ONE_MINUS_CONSTANT_ALPHA 0x0000000F /* RW--V */
#define NV_PGRAPH_BLEND_DFACTOR_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_BLEND_EQN                                     2:0 /* RWXVF */
#define NV_PGRAPH_BLEND_EQN_FUNC_SUBTRACT                0x00000000 /* RW--V */
#define NV_PGRAPH_BLEND_EQN_FUNC_REVERSE_SUBTRACT        0x00000001 /* RW--V */
#define NV_PGRAPH_BLEND_EQN_FUNC_ADD                     0x00000002 /* RW--V */
#define NV_PGRAPH_BLEND_EQN_MIN                          0x00000003 /* RW--V */
#define NV_PGRAPH_BLEND_EQN_MAX                          0x00000004 /* RW--V */
#define NV_PGRAPH_BLEND_EQN_FUNC_REVERSE_SUBTRACT_SIGNED 0x00000005 /* RW--V */
#define NV_PGRAPH_BLEND_EQN_FUNC_ADD_SIGNED              0x00000006 /* RW--V */
#define NV_PGRAPH_BLEND_EQN_097                          0x00000000 /* RWC-V */
#define NV_PGRAPH_BLEND_LOGICOP_ENABLE                        16:16 /* RWXVF */
#define NV_PGRAPH_BLEND_LOGICOP_ENABLE_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_ENABLE_TRUE              0x00000001 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_ENABLE_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_BLEND_LOGICOP                               15:12 /* RWXVF */
#define NV_PGRAPH_BLEND_LOGICOP_CLEAR                    0x00000000 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_AND                      0x00000001 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_AND_REVERSE              0x00000002 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_COPY                     0x00000003 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_AND_INVERTED             0x00000004 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_NOOP                     0x00000005 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_XOR                      0x00000006 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_OR                       0x00000007 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_NOR                      0x00000008 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_EQUIV                    0x00000009 /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_INVERT                   0x0000000A /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_OR_REVERSE               0x0000000B /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_COPY_INVERTED            0x0000000C /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_OR_INVERTED              0x0000000D /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_NAND                     0x0000000E /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_SET                      0x0000000F /* RW--V */
#define NV_PGRAPH_BLEND_LOGICOP_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_BLENDCOLOR                             0x00401808 /* RW-4R */
#define NV_PGRAPH_BLENDCOLOR_BUNDLE                      0x00000002 /* ----B */
#define NV_PGRAPH_BLENDCOLOR_V                                 31:0 /* RWXUF */
#define NV_PGRAPH_BLENDCOLOR_V_097                       0x00000000 /* RWC-V */
#define NV_PGRAPH_BORDERCOLOR0                           0x0040180C /* RW-4R */
#define NV_PGRAPH_BORDERCOLOR0_BUNDLE                    0x00000003 /* ----B */
#define NV_PGRAPH_BORDERCOLOR0_BORDER_COLOR                    31:0 /* RWXUF */
#define NV_PGRAPH_BORDERCOLOR0_BORDER_COLOR_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BORDERCOLOR1                           0x00401810 /* RW-4R */
#define NV_PGRAPH_BORDERCOLOR1_BUNDLE                    0x00000004 /* ----B */
#define NV_PGRAPH_BORDERCOLOR1_BORDER_COLOR                    31:0 /* RWXUF */
#define NV_PGRAPH_BORDERCOLOR1_BORDER_COLOR_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BORDERCOLOR2                           0x00401814 /* RW-4R */
#define NV_PGRAPH_BORDERCOLOR2_BUNDLE                    0x00000005 /* ----B */
#define NV_PGRAPH_BORDERCOLOR2_BORDER_COLOR                    31:0 /* RWXUF */
#define NV_PGRAPH_BORDERCOLOR2_BORDER_COLOR_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BORDERCOLOR3                           0x00401818 /* RW-4R */
#define NV_PGRAPH_BORDERCOLOR3_BUNDLE                    0x00000006 /* ----B */
#define NV_PGRAPH_BORDERCOLOR3_BORDER_COLOR                    31:0 /* RWXUF */
#define NV_PGRAPH_BORDERCOLOR3_BORDER_COLOR_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT00_1                            0x0040181C /* RW-4R */
#define NV_PGRAPH_BUMPMAT00_1_BUNDLE                     0x00000007 /* ----B */
#define NV_PGRAPH_BUMPMAT00_1_BUMPMAT00                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT00_1_BUMPMAT00_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT00_2                            0x00401820 /* RW-4R */
#define NV_PGRAPH_BUMPMAT00_2_BUNDLE                     0x00000008 /* ----B */
#define NV_PGRAPH_BUMPMAT00_2_BUMPMAT00                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT00_2_BUMPMAT00_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT00_3                            0x00401824 /* RW-4R */
#define NV_PGRAPH_BUMPMAT00_3_BUNDLE                     0x00000009 /* ----B */
#define NV_PGRAPH_BUMPMAT00_3_BUMPMAT00                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT00_3_BUMPMAT00_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT01_1                            0x00401828 /* RW-4R */
#define NV_PGRAPH_BUMPMAT01_1_BUNDLE                     0x0000000A /* ----B */
#define NV_PGRAPH_BUMPMAT01_1_BUMPMAT01                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT01_1_BUMPMAT01_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT01_2                            0x0040182C /* RW-4R */
#define NV_PGRAPH_BUMPMAT01_2_BUNDLE                     0x0000000B /* ----B */
#define NV_PGRAPH_BUMPMAT01_2_BUMPMAT01                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT01_2_BUMPMAT01_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT01_3                            0x00401830 /* RW-4R */
#define NV_PGRAPH_BUMPMAT01_3_BUNDLE                     0x0000000C /* ----B */
#define NV_PGRAPH_BUMPMAT01_3_BUMPMAT01                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT01_3_BUMPMAT01_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT10_1                            0x00401834 /* RW-4R */
#define NV_PGRAPH_BUMPMAT10_1_BUNDLE                     0x0000000D /* ----B */
#define NV_PGRAPH_BUMPMAT10_1_BUMPMAT10                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT10_1_BUMPMAT10_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT10_2                            0x00401838 /* RW-4R */
#define NV_PGRAPH_BUMPMAT10_2_BUNDLE                     0x0000000E /* ----B */
#define NV_PGRAPH_BUMPMAT10_2_BUMPMAT10                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT10_2_BUMPMAT10_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT10_3                            0x0040183C /* RW-4R */
#define NV_PGRAPH_BUMPMAT10_3_BUNDLE                     0x0000000F /* ----B */
#define NV_PGRAPH_BUMPMAT10_3_BUMPMAT10                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT10_3_BUMPMAT10_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT11_1                            0x00401840 /* RW-4R */
#define NV_PGRAPH_BUMPMAT11_1_BUNDLE                     0x00000010 /* ----B */
#define NV_PGRAPH_BUMPMAT11_1_BUMPMAT11                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT11_1_BUMPMAT11_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT11_2                            0x00401844 /* RW-4R */
#define NV_PGRAPH_BUMPMAT11_2_BUNDLE                     0x00000011 /* ----B */
#define NV_PGRAPH_BUMPMAT11_2_BUMPMAT11                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT11_2_BUMPMAT11_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPMAT11_3                            0x00401848 /* RW-4R */
#define NV_PGRAPH_BUMPMAT11_3_BUNDLE                     0x00000012 /* ----B */
#define NV_PGRAPH_BUMPMAT11_3_BUMPMAT11                        31:0 /* RWXFF */
#define NV_PGRAPH_BUMPMAT11_3_BUMPMAT11_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPOFFSET1                            0x0040184C /* RW-4R */
#define NV_PGRAPH_BUMPOFFSET1_BUNDLE                     0x00000013 /* ----B */
#define NV_PGRAPH_BUMPOFFSET1_BUMPOFFSET                       31:0 /* RWXFF */
#define NV_PGRAPH_BUMPOFFSET1_BUMPOFFSET_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPOFFSET2                            0x00401850 /* RW-4R */
#define NV_PGRAPH_BUMPOFFSET2_BUNDLE                     0x00000014 /* ----B */
#define NV_PGRAPH_BUMPOFFSET2_BUMPOFFSET                       31:0 /* RWXFF */
#define NV_PGRAPH_BUMPOFFSET2_BUMPOFFSET_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPOFFSET3                            0x00401854 /* RW-4R */
#define NV_PGRAPH_BUMPOFFSET3_BUNDLE                     0x00000015 /* ----B */
#define NV_PGRAPH_BUMPOFFSET3_BUMPOFFSET                       31:0 /* RWXFF */
#define NV_PGRAPH_BUMPOFFSET3_BUMPOFFSET_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPSCALE1                             0x00401858 /* RW-4R */
#define NV_PGRAPH_BUMPSCALE1_BUNDLE                      0x00000016 /* ----B */
#define NV_PGRAPH_BUMPSCALE1_BUMPSCALE                         31:0 /* RWXFF */
#define NV_PGRAPH_BUMPSCALE1_BUMPSCALE_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPSCALE2                             0x0040185C /* RW-4R */
#define NV_PGRAPH_BUMPSCALE2_BUNDLE                      0x00000017 /* ----B */
#define NV_PGRAPH_BUMPSCALE2_BUMPSCALE                         31:0 /* RWXFF */
#define NV_PGRAPH_BUMPSCALE2_BUMPSCALE_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_BUMPSCALE3                             0x00401860 /* RW-4R */
#define NV_PGRAPH_BUMPSCALE3_BUNDLE                      0x00000018 /* ----B */
#define NV_PGRAPH_BUMPSCALE3_BUMPSCALE                         31:0 /* RWXFF */
#define NV_PGRAPH_BUMPSCALE3_BUMPSCALE_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_CLEARRECTX                             0x00401864 /* RW-4R */
#define NV_PGRAPH_CLEARRECTX_BUNDLE                      0x00000019 /* ----B */
#define NV_PGRAPH_CLEARRECTX_XMIN                              11:0 /* RWXUF */
#define NV_PGRAPH_CLEARRECTX_XMIN_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_CLEARRECTX_XMAX                             27:16 /* RWXUF */
#define NV_PGRAPH_CLEARRECTX_XMAX_097                    0x00000FFF /* RWC-V */
#define NV_PGRAPH_CLEARRECTY                             0x00401868 /* RW-4R */
#define NV_PGRAPH_CLEARRECTY_BUNDLE                      0x0000001A /* ----B */
#define NV_PGRAPH_CLEARRECTY_YMIN                              11:0 /* RWXUF */
#define NV_PGRAPH_CLEARRECTY_YMIN_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_CLEARRECTY_YMAX                             27:16 /* RWXUF */
#define NV_PGRAPH_CLEARRECTY_YMAX_097                    0x00000FFF /* RWC-V */
#define NV_PGRAPH_COLORCLEARVALUE                        0x0040186C /* RW-4R */
#define NV_PGRAPH_COLORCLEARVALUE_BUNDLE                 0x0000001B /* ----B */
#define NV_PGRAPH_COLORCLEARVALUE_V                            31:0 /* RWXUF */
#define NV_PGRAPH_COLORCLEARVALUE_V_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COLORKEYCOLOR0                         0x00401870 /* RW-4R */
#define NV_PGRAPH_COLORKEYCOLOR0_BUNDLE                  0x0000001C /* ----B */
#define NV_PGRAPH_COLORKEYCOLOR0_V                             31:0 /* RWXUF */
#define NV_PGRAPH_COLORKEYCOLOR0_V_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_COLORKEYCOLOR1                         0x00401874 /* RW-4R */
#define NV_PGRAPH_COLORKEYCOLOR1_BUNDLE                  0x0000001D /* ----B */
#define NV_PGRAPH_COLORKEYCOLOR1_V                             31:0 /* RWXUF */
#define NV_PGRAPH_COLORKEYCOLOR1_V_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_COLORKEYCOLOR2                         0x00401878 /* RW-4R */
#define NV_PGRAPH_COLORKEYCOLOR2_BUNDLE                  0x0000001E /* ----B */
#define NV_PGRAPH_COLORKEYCOLOR2_V                             31:0 /* RWXUF */
#define NV_PGRAPH_COLORKEYCOLOR2_V_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_COLORKEYCOLOR3                         0x0040187C /* RW-4R */
#define NV_PGRAPH_COLORKEYCOLOR3_BUNDLE                  0x0000001F /* ----B */
#define NV_PGRAPH_COLORKEYCOLOR3_V                             31:0 /* RWXUF */
#define NV_PGRAPH_COLORKEYCOLOR3_V_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_0                       0x00401880 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_0_BUNDLE                0x00000020 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_0_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_0_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_0_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_0_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_0_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_0_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_0_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_0_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_1                       0x00401884 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_1_BUNDLE                0x00000021 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_1_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_1_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_1_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_1_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_1_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_1_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_1_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_1_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_2                       0x00401888 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_2_BUNDLE                0x00000022 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_2_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_2_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_2_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_2_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_2_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_2_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_2_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_2_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_3                       0x0040188C /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_3_BUNDLE                0x00000023 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_3_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_3_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_3_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_3_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_3_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_3_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_3_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_3_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_4                       0x00401890 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_4_BUNDLE                0x00000024 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_4_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_4_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_4_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_4_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_4_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_4_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_4_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_4_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_5                       0x00401894 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_5_BUNDLE                0x00000025 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_5_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_5_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_5_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_5_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_5_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_5_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_5_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_5_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_6                       0x00401898 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_6_BUNDLE                0x00000026 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_6_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_6_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_6_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_6_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_6_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_6_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_6_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_6_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_7                       0x0040189C /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR0_7_BUNDLE                0x00000027 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR0_7_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_7_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_7_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_7_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_7_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_7_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR0_7_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR0_7_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_0                       0x004018A0 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_0_BUNDLE                0x00000028 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_0_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_0_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_0_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_0_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_0_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_0_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_0_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_0_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_1                       0x004018A4 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_1_BUNDLE                0x00000029 /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_1_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_1_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_1_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_1_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_1_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_1_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_1_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_1_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_2                       0x004018A8 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_2_BUNDLE                0x0000002A /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_2_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_2_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_2_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_2_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_2_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_2_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_2_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_2_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_3                       0x004018AC /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_3_BUNDLE                0x0000002B /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_3_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_3_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_3_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_3_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_3_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_3_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_3_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_3_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_4                       0x004018B0 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_4_BUNDLE                0x0000002C /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_4_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_4_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_4_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_4_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_4_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_4_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_4_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_4_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_5                       0x004018B4 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_5_BUNDLE                0x0000002D /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_5_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_5_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_5_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_5_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_5_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_5_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_5_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_5_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_6                       0x004018B8 /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_6_BUNDLE                0x0000002E /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_6_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_6_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_6_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_6_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_6_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_6_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_6_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_6_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_7                       0x004018BC /* RW-4R */
#define NV_PGRAPH_COMBINEFACTOR1_7_BUNDLE                0x0000002F /* ----B */
#define NV_PGRAPH_COMBINEFACTOR1_7_BLUE                         7:0 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_7_BLUE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_7_GREEN                       15:8 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_7_GREEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_7_RED                        23:16 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_7_RED_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEFACTOR1_7_ALPHA                      31:24 /* RWXUF */
#define NV_PGRAPH_COMBINEFACTOR1_7_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0                         0x004018C0 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI0_BUNDLE                  0x00000030 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI0_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1                         0x004018C4 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI1_BUNDLE                  0x00000031 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI1_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2                         0x004018C8 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI2_BUNDLE                  0x00000032 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI2_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3                         0x004018CC /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI3_BUNDLE                  0x00000033 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI3_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4                         0x004018D0 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI4_BUNDLE                  0x00000034 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI4_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5                         0x004018D4 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI5_BUNDLE                  0x00000035 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI5_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6                         0x004018D8 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI6_BUNDLE                  0x00000036 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI6_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7                         0x004018DC /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAI7_BUNDLE                  0x00000037 /* ----B */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAI7_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO0                         0x004018E0 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO0_BUNDLE                  0x00000038 /* ----B */
#define NV_PGRAPH_COMBINEALPHAO0_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO0_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO0_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO0_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO0_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO1                         0x004018E4 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO1_BUNDLE                  0x00000039 /* ----B */
#define NV_PGRAPH_COMBINEALPHAO1_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO1_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO1_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO1_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO1_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO2                         0x004018E8 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO2_BUNDLE                  0x0000003A /* ----B */
#define NV_PGRAPH_COMBINEALPHAO2_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO2_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO2_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO2_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO2_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO3                         0x004018EC /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO3_BUNDLE                  0x0000003B /* ----B */
#define NV_PGRAPH_COMBINEALPHAO3_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO3_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO3_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO3_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO3_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO4                         0x004018F0 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO4_BUNDLE                  0x0000003C /* ----B */
#define NV_PGRAPH_COMBINEALPHAO4_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO4_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO4_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO4_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO4_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO5                         0x004018F4 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO5_BUNDLE                  0x0000003D /* ----B */
#define NV_PGRAPH_COMBINEALPHAO5_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO5_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO5_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO5_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO5_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO6                         0x004018F8 /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO6_BUNDLE                  0x0000003E /* ----B */
#define NV_PGRAPH_COMBINEALPHAO6_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO6_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO6_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO6_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO6_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO7                         0x004018FC /* RW-4R */
#define NV_PGRAPH_COMBINEALPHAO7_BUNDLE                  0x0000003F /* ----B */
#define NV_PGRAPH_COMBINEALPHAO7_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO7_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO7_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO7_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINEALPHAO7_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0                         0x00401900 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI0_BUNDLE                  0x00000040 /* ----B */
#define NV_PGRAPH_COMBINECOLORI0_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI0_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1                         0x00401904 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI1_BUNDLE                  0x00000041 /* ----B */
#define NV_PGRAPH_COMBINECOLORI1_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI1_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2                         0x00401908 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI2_BUNDLE                  0x00000042 /* ----B */
#define NV_PGRAPH_COMBINECOLORI2_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI2_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3                         0x0040190C /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI3_BUNDLE                  0x00000043 /* ----B */
#define NV_PGRAPH_COMBINECOLORI3_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI3_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4                         0x00401910 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI4_BUNDLE                  0x00000044 /* ----B */
#define NV_PGRAPH_COMBINECOLORI4_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI4_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5                         0x00401914 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI5_BUNDLE                  0x00000045 /* ----B */
#define NV_PGRAPH_COMBINECOLORI5_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI5_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6                         0x00401918 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI6_BUNDLE                  0x00000046 /* ----B */
#define NV_PGRAPH_COMBINECOLORI6_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI6_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7                         0x0040191C /* RW-4R */
#define NV_PGRAPH_COMBINECOLORI7_BUNDLE                  0x00000047 /* ----B */
#define NV_PGRAPH_COMBINECOLORI7_AMAP                         31:29 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_AMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_A_ALPHA                      28:28 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_A_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_A_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_A_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE                      27:24 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_ASOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP                         23:21 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_B_ALPHA                      20:20 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_B_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_B_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_B_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE                      19:16 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_BSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP                         15:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_C_ALPHA                      12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_C_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_C_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_C_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_CSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP                           7:5 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_UNSIGNED_IDENTITY  0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_UNSIGNED_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_EXPAND_NORMAL      0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_EXPAND_NEGATE      0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_HALFBIAS_NORMAL    0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_HALFBIAS_NEGATE    0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_SIGNED_IDENTITY    0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_SIGNED_NEGATE      0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DMAP_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_D_ALPHA                        4:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_D_ALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_D_ALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_D_ALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE                        3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_1           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_2           0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_3           0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORI7_DSOURCE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0                         0x00401920 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO0_BUNDLE                  0x00000048 /* ----B */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO0_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1                         0x00401924 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO1_BUNDLE                  0x00000049 /* ----B */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO1_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2                         0x00401928 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO2_BUNDLE                  0x0000004A /* ----B */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO2_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3                         0x0040192C /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO3_BUNDLE                  0x0000004B /* ----B */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO3_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4                         0x00401930 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO4_BUNDLE                  0x0000004C /* ----B */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO4_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5                         0x00401934 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO5_BUNDLE                  0x0000004D /* ----B */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO5_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6                         0x00401938 /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO6_BUNDLE                  0x0000004E /* ----B */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO6_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7                         0x0040193C /* RW-4R */
#define NV_PGRAPH_COMBINECOLORO7_BUNDLE                  0x0000004F /* ----B */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_AB                    19:19 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_AB_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_AB_AB_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_AB_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_CD                    18:18 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_CD_DISABLE       0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_CD_CD_DST_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_B_TO_A_CD_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_OP                           17:15 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_OP_NOSHIFT              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_OP_NOSHIFT_BIAS         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_OP_SHIFTLEFTBY1         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_OP_SHIFTLEFTBY1_BIAS    0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_OP_SHIFTLEFTBY2         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_OP_SHIFTRIGHTBY1        0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_OP_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_MUX_ENABLE                   14:14 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_MUX_ENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_MUX_ENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_MUX_ENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DOT_ENABLE                13:13 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_AB_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DOT_ENABLE                12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_CD_DOT_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DOT_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DOT_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST                       11:8 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_0           0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_4           0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_5           0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_8           0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_9           0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_A           0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_B           0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_C           0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_REG_D           0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_SUM_DST_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST                         7:4 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_AB_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST                         3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_0            0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_4            0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_5            0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_8            0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_9            0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_A            0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_B            0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_C            0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_REG_D            0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINECOLORO7_CD_DST_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECTL                             0x00401940 /* RW-4R */
#define NV_PGRAPH_COMBINECTL_BUNDLE                      0x00000050 /* ----B */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT                    3:0 /* RWXVF */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_ONE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_TWO         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_THREE       0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_FOUR        0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_FIVE        0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_SIX         0x00000006 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_SEVEN       0x00000007 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_EIGHT       0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINECTL_ITERATION_COUNT_097         0x00000001 /* RWC-V */
#define NV_PGRAPH_COMBINECTL_MUX_SELECT                         8:8 /* RWXVF */
#define NV_PGRAPH_COMBINECTL_MUX_SELECT_LSB              0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECTL_MUX_SELECT_MSB              0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECTL_MUX_SELECT_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_COMBINECTL_FACTOR0                          12:12 /* RWXVF */
#define NV_PGRAPH_COMBINECTL_FACTOR0_SAME_FACTOR_ALL     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECTL_FACTOR0_EACH_STAGE          0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECTL_FACTOR0_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINECTL_FACTOR1                          16:16 /* RWXVF */
#define NV_PGRAPH_COMBINECTL_FACTOR1_SAME_FACTOR_ALL     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINECTL_FACTOR1_EACH_STAGE          0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINECTL_FACTOR1_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0                        0x00401944 /* RW-4R */
#define NV_PGRAPH_COMBINESPECFOG0_BUNDLE                 0x00000051 /* ----B */
#define NV_PGRAPH_COMBINESPECFOG0_A_INVERSE                   29:29 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_A_INVERSE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_INVERSE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_INVERSE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_A_ALPHA                     28:28 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_A_ALPHA_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_ALPHA_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_ALPHA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE                    27:24 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_0         0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_1         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_2         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_3         0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_4         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_5         0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_8         0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_9         0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_A         0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_B         0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_C         0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_D         0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_SPECLIT   0x0000000E /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_REG_EF_PROD   0x0000000F /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_A_SOURCE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_B_INVERSE                   21:21 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_B_INVERSE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_INVERSE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_INVERSE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_B_ALPHA                     20:20 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_B_ALPHA_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_ALPHA_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_ALPHA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE                    19:16 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_0         0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_1         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_2         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_3         0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_4         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_5         0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_8         0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_9         0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_A         0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_B         0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_C         0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_D         0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_SPECLIT   0x0000000E /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_REG_EF_PROD   0x0000000F /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_B_SOURCE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_C_INVERSE                   13:13 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_C_INVERSE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_INVERSE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_INVERSE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_C_ALPHA                     12:12 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_C_ALPHA_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_ALPHA_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_ALPHA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE                     11:8 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_0         0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_1         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_2         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_3         0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_4         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_5         0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_8         0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_9         0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_A         0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_B         0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_C         0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_D         0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_SPECLIT   0x0000000E /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_REG_EF_PROD   0x0000000F /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_C_SOURCE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_D_INVERSE                     5:5 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_D_INVERSE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_INVERSE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_INVERSE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_D_ALPHA                       4:4 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_D_ALPHA_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_ALPHA_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_ALPHA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE                      3:0 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_0         0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_1         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_2         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_3         0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_4         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_5         0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_8         0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_9         0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_A         0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_B         0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_C         0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_D         0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_SPECLIT   0x0000000E /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_REG_EF_PROD   0x0000000F /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG0_D_SOURCE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1                        0x00401948 /* RW-4R */
#define NV_PGRAPH_COMBINESPECFOG1_BUNDLE                 0x00000052 /* ----B */
#define NV_PGRAPH_COMBINESPECFOG1_E_INVERSE                   29:29 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_E_INVERSE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_INVERSE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_INVERSE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_E_ALPHA                     28:28 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_E_ALPHA_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_ALPHA_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_ALPHA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE                    27:24 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_0         0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_1         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_2         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_3         0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_4         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_5         0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_8         0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_9         0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_A         0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_B         0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_C         0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_REG_D         0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_E_SOURCE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_F_INVERSE                   21:21 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_F_INVERSE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_INVERSE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_INVERSE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_F_ALPHA                     20:20 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_F_ALPHA_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_ALPHA_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_ALPHA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE                    19:16 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_0         0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_1         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_2         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_3         0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_4         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_5         0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_8         0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_9         0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_A         0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_B         0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_C         0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_REG_D         0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_F_SOURCE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_G_INVERSE                   13:13 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_G_INVERSE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_INVERSE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_INVERSE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_G_ALPHA                     12:12 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_G_ALPHA_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_ALPHA_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_ALPHA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE                     11:8 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_0         0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_1         0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_2         0x00000002 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_3         0x00000003 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_4         0x00000004 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_5         0x00000005 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_8         0x00000008 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_9         0x00000009 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_A         0x0000000A /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_B         0x0000000B /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_C         0x0000000C /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_REG_D         0x0000000D /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_G_SOURCE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECULAR_CLAMP                7:7 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_SPECULAR_CLAMP_FALSE   0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECULAR_CLAMP_TRUE    0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECULAR_CLAMP_097     0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR5                  6:6 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR5_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR5_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR5_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR12                 5:5 /* RWXVF */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR12_FALSE    0x00000000 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR12_TRUE     0x00000001 /* RW--V */
#define NV_PGRAPH_COMBINESPECFOG1_SPECADDINVR12_097      0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0                              0x0040194C /* RW-4R */
#define NV_PGRAPH_CONTROL_0_BUNDLE                       0x00000053 /* ----B */
#define NV_PGRAPH_CONTROL_0_CSCONVERT                         31:30 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_CSCONVERT_PASS               0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_CSCONVERT_CRYCB_TO_RGB       0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_CSCONVERT_SCRYSCB_TO_RGB     0x00000002 /* RW--V */
#define NV_PGRAPH_CONTROL_0_CSCONVERT_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_Z_PERSPECTIVE_ENABLE              23:23 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_Z_PERSPECTIVE_ENABLE_FALSE   0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_Z_PERSPECTIVE_ENABLE_TRUE    0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_Z_PERSPECTIVE_ENABLE_097     0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_STENCIL_WRITE_ENABLE              25:25 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_STENCIL_WRITE_ENABLE_FALSE   0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_STENCIL_WRITE_ENABLE_TRUE    0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_STENCIL_WRITE_ENABLE_097     0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_ALPHATESTENABLE                   12:12 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_ALPHATESTENABLE_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHATESTENABLE_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHATESTENABLE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_ZENABLE                           14:14 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_ZENABLE_FALSE                0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZENABLE_TRUE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZENABLE_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_DITHERENABLE                      22:22 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_DITHERENABLE_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_DITHERENABLE_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_DITHERENABLE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC                          11:8 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_NEVER              0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_LESS               0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_EQUAL              0x00000002 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_LEQUAL             0x00000003 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_GREATER            0x00000004 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_NOTEQUAL           0x00000005 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_GEQUAL             0x00000006 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_ALWAYS             0x00000007 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHAFUNC_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_ALPHAREF                            7:0 /* RWXUF */
#define NV_PGRAPH_CONTROL_0_ALPHAREF_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_ZFUNC                             19:16 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_ZFUNC_NEVER                  0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_LESS                   0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_EQUAL                  0x00000002 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_LEQUAL                 0x00000003 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_GREATER                0x00000004 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_NOTEQUAL               0x00000005 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_GEQUAL                 0x00000006 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_ALWAYS                 0x00000007 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZFUNC_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_ALPHA_WRITE_ENABLE                26:26 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_ALPHA_WRITE_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHA_WRITE_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ALPHA_WRITE_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_RED_WRITE_ENABLE                  27:27 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_RED_WRITE_ENABLE_FALSE       0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_RED_WRITE_ENABLE_TRUE        0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_RED_WRITE_ENABLE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_GREEN_WRITE_ENABLE                28:28 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_GREEN_WRITE_ENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_GREEN_WRITE_ENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_GREEN_WRITE_ENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_BLUE_WRITE_ENABLE                 29:29 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_BLUE_WRITE_ENABLE_FALSE      0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_BLUE_WRITE_ENABLE_TRUE       0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_BLUE_WRITE_ENABLE_097        0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_0_ZWRITEENABLE                      24:24 /* RWXVF */
#define NV_PGRAPH_CONTROL_0_ZWRITEENABLE_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZWRITEENABLE_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_0_ZWRITEENABLE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_1                              0x00401950 /* RW-4R */
#define NV_PGRAPH_CONTROL_1_BUNDLE                       0x00000054 /* ----B */
#define NV_PGRAPH_CONTROL_1_STENCIL_TEST_ENABLE                 0:0 /* RWXVF */
#define NV_PGRAPH_CONTROL_1_STENCIL_TEST_ENABLE_FALSE    0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_TEST_ENABLE_TRUE     0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_TEST_ENABLE_097      0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_1_STENCIL_MASK_WRITE                31:24 /* RWXUF */
#define NV_PGRAPH_CONTROL_1_STENCIL_MASK_WRITE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC                        7:4 /* RWXVF */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_NEVER           0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_LESS            0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_EQUAL           0x00000002 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_LEQUAL          0x00000003 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_GREATER         0x00000004 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_NOTEQUAL        0x00000005 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_GEQUAL          0x00000006 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_ALWAYS          0x00000007 /* RW--V */
#define NV_PGRAPH_CONTROL_1_STENCIL_FUNC_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_1_STENCIL_REF                        15:8 /* RWXUF */
#define NV_PGRAPH_CONTROL_1_STENCIL_REF_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_1_STENCIL_MASK_READ                 23:16 /* RWXUF */
#define NV_PGRAPH_CONTROL_1_STENCIL_MASK_READ_097        0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_2                              0x00401954 /* RW-4R */
#define NV_PGRAPH_CONTROL_2_BUNDLE                       0x00000055 /* ----B */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL                     3:0 /* RWXVF */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_KEEP         0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_ZERO         0x00000002 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_REPLACE      0x00000003 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_INCRSAT      0x00000004 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_DECRSAT      0x00000005 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_INVERT       0x00000006 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_INCR         0x00000007 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_DECR         0x00000008 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_FAIL_097          0x00000001 /* RWC-V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL                    7:4 /* RWXVF */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_KEEP        0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_ZERO        0x00000002 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_REPLACE     0x00000003 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_INCRSAT     0x00000004 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_DECRSAT     0x00000005 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_INVERT      0x00000006 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_INCR        0x00000007 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_DECR        0x00000008 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZFAIL_097         0x00000001 /* RWC-V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS                   11:8 /* RWXVF */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_KEEP        0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_ZERO        0x00000002 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_REPLACE     0x00000003 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_INCRSAT     0x00000004 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_DECRSAT     0x00000005 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_INVERT      0x00000006 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_INCR        0x00000007 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_DECR        0x00000008 /* RW--V */
#define NV_PGRAPH_CONTROL_2_STENCIL_OP_ZPASS_097         0x00000001 /* RWC-V */
#define NV_PGRAPH_CONTROL_3                              0x00401958 /* RW-4R */
#define NV_PGRAPH_CONTROL_3_BUNDLE                       0x00000056 /* ----B */
#define NV_PGRAPH_CONTROL_3_PREMULTALPHA                        2:2 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_PREMULTALPHA_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_PREMULTALPHA_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_PREMULTALPHA_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_TEXTUREPERSPECTIVE                  6:6 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_TEXTUREPERSPECTIVE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_TEXTUREPERSPECTIVE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_TEXTUREPERSPECTIVE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_WBUFFER_SELECT                    13:10 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_WBUFFER_SELECT_0             0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_WBUFFER_SELECT_1             0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_WBUFFER_SELECT_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_FOG_MODE                          18:16 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_FOG_MODE_LINEAR              0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOG_MODE_EXP                 0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOG_MODE_EXP2                0x00000003 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOG_MODE_EXP_ABS             0x00000005 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOG_MODE_EXP2_ABS            0x00000007 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOG_MODE_LINEAR_ABS          0x00000004 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOG_MODE_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_FOGENABLE                           8:8 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_FOGENABLE_FALSE              0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOGENABLE_TRUE               0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FOGENABLE_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_POINTPARAMSENABLE                   9:9 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_POINTPARAMSENABLE_FALSE      0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_POINTPARAMSENABLE_TRUE       0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_POINTPARAMSENABLE_097        0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_SHADEMODE                           7:7 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_SHADEMODE_FLAT               0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_SHADEMODE_SMOOTH             0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_SHADEMODE_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_SPECULARENABLE                      5:5 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_SPECULARENABLE_FALSE         0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_SPECULARENABLE_TRUE          0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_SPECULARENABLE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_FLATSHADE_OP                        0:0 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_FLATSHADE_OP_LAST_VTX        0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FLATSHADE_OP_FIRST_VTX       0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_FLATSHADE_OP_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTROL_3_ZP                                20:20 /* RWXVF */
#define NV_PGRAPH_CONTROL_3_ZP_FALSE                     0x00000000 /* RW--V */
#define NV_PGRAPH_CONTROL_3_ZP_TRUE                      0x00000001 /* RW--V */
#define NV_PGRAPH_CONTROL_3_ZP_097                       0x00000000 /* RWC-V */
#define NV_PGRAPH_FOGCOLOR                               0x00401980 /* RW-4R */
#define NV_PGRAPH_FOGCOLOR_BUNDLE                        0x00000060 /* ----B */
#define NV_PGRAPH_FOGCOLOR_RED                                23:16 /* RWXUF */
#define NV_PGRAPH_FOGCOLOR_RED_097                       0x00000000 /* RWC-V */
#define NV_PGRAPH_FOGCOLOR_GREEN                               15:8 /* RWXUF */
#define NV_PGRAPH_FOGCOLOR_GREEN_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_FOGCOLOR_BLUE                                 7:0 /* RWXUF */
#define NV_PGRAPH_FOGCOLOR_BLUE_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_FOGCOLOR_ALPHA                              31:24 /* RWXUF */
#define NV_PGRAPH_FOGCOLOR_ALPHA_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_FOGPARAM0                              0x00401984 /* RW-4R */
#define NV_PGRAPH_FOGPARAM0_BUNDLE                       0x00000061 /* ----B */
#define NV_PGRAPH_FOGPARAM0_V                                  31:0 /* RWXFF */
#define NV_PGRAPH_FOGPARAM0_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_FOGPARAM1                              0x00401988 /* RW-4R */
#define NV_PGRAPH_FOGPARAM1_BUNDLE                       0x00000062 /* ----B */
#define NV_PGRAPH_FOGPARAM1_V                                  31:0 /* RWXFF */
#define NV_PGRAPH_FOGPARAM1_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_POINTSIZE                              0x0040198C /* RW-4R */
#define NV_PGRAPH_POINTSIZE_BUNDLE                       0x00000063 /* ----B */
#define NV_PGRAPH_POINTSIZE_V                                   8:0 /* RWXUF */
#define NV_PGRAPH_POINTSIZE_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER                            0x00401990 /* RW-4R */
#define NV_PGRAPH_SETUPRASTER_BUNDLE                     0x00000064 /* ----B */
#define NV_PGRAPH_SETUPRASTER_Z_FORMAT                        29:29 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_Z_FORMAT_FIXED             0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_Z_FORMAT_FLOAT             0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_Z_FORMAT_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_WINDOWCLIPTYPE                  31:31 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_WINDOWCLIPTYPE_INCLUSIVE   0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_WINDOWCLIPTYPE_EXCLUSIVE   0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_WINDOWCLIPTYPE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_CULLENABLE                      28:28 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_CULLENABLE_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_CULLENABLE_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_CULLENABLE_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_POINTSMOOTHENABLE                 9:9 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_POINTSMOOTHENABLE_FALSE    0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POINTSMOOTHENABLE_TRUE     0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POINTSMOOTHENABLE_097      0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_LINESMOOTHENABLE                10:10 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_LINESMOOTHENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_LINESMOOTHENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_LINESMOOTHENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_POLYSMOOTHENABLE                11:11 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_POLYSMOOTHENABLE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POLYSMOOTHENABLE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POLYSMOOTHENABLE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_STIPPLE_EN                        4:4 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_STIPPLE_EN_OFF             0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_STIPPLE_EN_POLYGON         0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_STIPPLE_EN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_POFFSETPOINTENABLE                6:6 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_POFFSETPOINTENABLE_FALSE   0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POFFSETPOINTENABLE_TRUE    0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POFFSETPOINTENABLE_097     0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_POFFSETLINEENABLE                 7:7 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_POFFSETLINEENABLE_FALSE    0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POFFSETLINEENABLE_TRUE     0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POFFSETLINEENABLE_097      0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_POFFSETFILLENABLE                 8:8 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_POFFSETFILLENABLE_FALSE    0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POFFSETFILLENABLE_TRUE     0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_POFFSETFILLENABLE_097      0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_LINEWIDTH                       20:12 /* RWXUF */
#define NV_PGRAPH_SETUPRASTER_LINEWIDTH_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_FRONTFACEMODE                     1:0 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_FRONTFACEMODE_POINT        0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_FRONTFACEMODE_LINE         0x00000002 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_FRONTFACEMODE_FILL         0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_FRONTFACEMODE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_BACKFACEMODE                      3:2 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_BACKFACEMODE_POINT         0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_BACKFACEMODE_LINE          0x00000002 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_BACKFACEMODE_FILL          0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_BACKFACEMODE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_CULLCTRL                        22:21 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_CULLCTRL_FRONT             0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_CULLCTRL_BACK              0x00000002 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_CULLCTRL_FRONT_AND_BACK    0x00000003 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_CULLCTRL_097               0x00000002 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_FRONTFACE                       23:23 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_FRONTFACE_CW               0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_FRONTFACE_CCW              0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_FRONTFACE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH                      27:25 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH_8               0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH_16              0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH_32              0x00000002 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH_64              0x00000003 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH_128             0x00000004 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH_OFF             0x00000007 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_SWATHWIDTH_097             0x00000002 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_CULL_NEAR_FAR_EN                30:30 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_CULL_NEAR_FAR_EN_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_CULL_NEAR_FAR_EN_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_CULL_NEAR_FAR_EN_097       0x00000001 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_IGNORE_WSIGN                      5:5 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_IGNORE_WSIGN_FALSE         0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_IGNORE_WSIGN_TRUE          0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_IGNORE_WSIGN_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_SETUPRASTER_TWO_SIDED_LIGHTING              24:24 /* RWXVF */
#define NV_PGRAPH_SETUPRASTER_TWO_SIDED_LIGHTING_FALSE   0x00000000 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_TWO_SIDED_LIGHTING_TRUE    0x00000001 /* RW--V */
#define NV_PGRAPH_SETUPRASTER_TWO_SIDED_LIGHTING_097     0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE                         0x00401994 /* RW-4R */
#define NV_PGRAPH_SHADERCLIPMODE_BUNDLE                  0x00000065 /* ----B */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_S                       0:0 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_S_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_S_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_S_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_T                       1:1 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_T_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_T_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_T_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_R                       2:2 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_R_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_R_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_R_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_Q                       3:3 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_Q_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_Q_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE0_Q_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_S                       4:4 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_S_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_S_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_S_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_T                       5:5 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_T_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_T_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_T_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_R                       6:6 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_R_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_R_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_R_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_Q                       7:7 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_Q_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_Q_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE1_Q_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_S                       8:8 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_S_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_S_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_S_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_T                       9:9 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_T_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_T_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_T_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_R                     10:10 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_R_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_R_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_R_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_Q                     11:11 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_Q_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_Q_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE2_Q_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_S                     12:12 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_S_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_S_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_S_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_T                     13:13 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_T_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_T_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_T_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_R                     14:14 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_R_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_R_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_R_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_Q                     15:15 /* RWXVF */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_Q_CLIPLTZ        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_Q_CLIPGEZ        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCLIPMODE_STAGE3_Q_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCTL                              0x00401998 /* RW-4R */
#define NV_PGRAPH_SHADERCTL_BUNDLE                       0x00000066 /* ----B */
#define NV_PGRAPH_SHADERCTL_MAP1                                2:0 /* RWXVF */
#define NV_PGRAPH_SHADERCTL_MAP1_ZERO_TO_1               0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_MINUS_1_TO_1_MS         0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_MINUS_1_TO_1_GL         0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_MINUS_1_TO_1_NV         0x00000003 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_HILO_1                  0x00000004 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_HILO_HEMISPHERE_MS      0x00000005 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_HILO_HEMISPHERE_GL      0x00000006 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_HILO_HEMISPHERE_NV      0x00000007 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP1_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCTL_MAP2                                5:3 /* RWXVF */
#define NV_PGRAPH_SHADERCTL_MAP2_ZERO_TO_1               0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_MINUS_1_TO_1_MS         0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_MINUS_1_TO_1_GL         0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_MINUS_1_TO_1_NV         0x00000003 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_HILO_1                  0x00000004 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_HILO_HEMISPHERE_MS      0x00000005 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_HILO_HEMISPHERE_GL      0x00000006 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_HILO_HEMISPHERE_NV      0x00000007 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP2_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCTL_MAP3                                8:6 /* RWXVF */
#define NV_PGRAPH_SHADERCTL_MAP3_ZERO_TO_1               0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_MINUS_1_TO_1_MS         0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_MINUS_1_TO_1_GL         0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_MINUS_1_TO_1_NV         0x00000003 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_HILO_1                  0x00000004 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_HILO_HEMISPHERE_MS      0x00000005 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_HILO_HEMISPHERE_GL      0x00000006 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_HILO_HEMISPHERE_NV      0x00000007 /* RW--V */
#define NV_PGRAPH_SHADERCTL_MAP3_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCTL_OUT1                              15:15 /* RWXVF */
#define NV_PGRAPH_SHADERCTL_OUT1_INSTAGE_0               0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCTL_OUT1_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCTL_OUT2                              16:16 /* RWXVF */
#define NV_PGRAPH_SHADERCTL_OUT2_INSTAGE_0               0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCTL_OUT2_INSTAGE_1               0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCTL_OUT2_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERCTL_OUT3                              21:20 /* RWXVF */
#define NV_PGRAPH_SHADERCTL_OUT3_INSTAGE_0               0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERCTL_OUT3_INSTAGE_1               0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERCTL_OUT3_INSTAGE_2               0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERCTL_OUT3_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERPROG                             0x0040199C /* RW-4R */
#define NV_PGRAPH_SHADERPROG_BUNDLE                      0x00000067 /* ----B */
#define NV_PGRAPH_SHADERPROG_PASSTHROUGH                        3:3 /* RWXVF */
#define NV_PGRAPH_SHADERPROG_PASSTHROUGH_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERPROG_PASSTHROUGH_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERPROG_PASSTHROUGH_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_0                       30:30 /* RWXVF */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_0_DISABLE          0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_0_ENABLE           0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_0_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_1                       31:31 /* RWXVF */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_1_DISABLE          0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_1_ENABLE           0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERPROG_W_DIVIDE_1_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERPROG_STAGE0                             2:0 /* RWXVF */
#define NV_PGRAPH_SHADERPROG_STAGE0_PROGRAM_NONE         0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE0_2D_PROJECTIVE        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE0_3D_PROJECTIVE        0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE0_CUBE_MAP             0x00000003 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE0_PASS_THROUGH         0x00000004 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE0_CLIP_PLANE           0x00000005 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE0_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERPROG_STAGE1                             9:5 /* RWXVF */
#define NV_PGRAPH_SHADERPROG_STAGE1_PROGRAM_NONE         0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_2D_PROJECTIVE        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_3D_PROJECTIVE        0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_CUBE_MAP             0x00000003 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_PASS_THROUGH         0x00000004 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_CLIP_PLANE           0x00000005 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_BUMPENVMAP           0x00000006 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_BUMPENVMAP_LUMINANCE 0x00000007 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_DEPENDENT_AR         0x0000000F /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_DEPENDENT_GB         0x00000010 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_DOT_PRODUCT          0x00000011 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE1_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERPROG_STAGE2                           14:10 /* RWXVF */
#define NV_PGRAPH_SHADERPROG_STAGE2_PROGRAM_NONE         0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_2D_PROJECTIVE        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_3D_PROJECTIVE        0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_CUBE_MAP             0x00000003 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_PASS_THROUGH         0x00000004 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_CLIP_PLANE           0x00000005 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_BUMPENVMAP           0x00000006 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_BUMPENVMAP_LUMINANCE 0x00000007 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_BRDF                 0x00000008 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_DOT_ST               0x00000009 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_DOT_ZW               0x0000000A /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_DOT_REFLECT_DIFFUSE  0x0000000B /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_DEPENDENT_AR         0x0000000F /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_DEPENDENT_GB         0x00000010 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_DOT_PRODUCT          0x00000011 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE2_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADERPROG_STAGE3                           19:15 /* RWXVF */
#define NV_PGRAPH_SHADERPROG_STAGE3_PROGRAM_NONE         0x00000000 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_2D_PROJECTIVE        0x00000001 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_3D_PROJECTIVE        0x00000002 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_CUBE_MAP             0x00000003 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_PASS_THROUGH         0x00000004 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_CLIP_PLANE           0x00000005 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_BUMPENVMAP           0x00000006 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_BUMPENVMAP_LUMINANCE 0x00000007 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_BRDF                 0x00000008 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DOT_ST               0x00000009 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DOT_ZW               0x0000000A /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DOT_REFLECT_SPECULAR 0x0000000C /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DOT_STR_3D           0x0000000D /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DOT_STR_CUBE         0x0000000E /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DEPENDENT_AR         0x0000000F /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DEPENDENT_GB         0x00000010 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_DOT_REFLECT_SPECULAR_CONST 0x00000012 /* RW--V */
#define NV_PGRAPH_SHADERPROG_STAGE3_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_SEMAPHOREOFFSET                        0x004019A0 /* RW-4R */
#define NV_PGRAPH_SEMAPHOREOFFSET_BUNDLE                 0x00000068 /* ----B */
#define NV_PGRAPH_SEMAPHOREOFFSET_V                            31:0 /* RWXUF */
#define NV_PGRAPH_SEMAPHOREOFFSET_V_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOWCTL                              0x004019A4 /* RW-4R */
#define NV_PGRAPH_SHADOWCTL_BUNDLE                       0x00000069 /* ----B */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC                        2:0 /* RWXVF */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_NEVER           0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_LESS            0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_EQUAL           0x00000002 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_LEQUAL          0x00000003 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_GREATER         0x00000004 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_NOTEQUAL        0x00000005 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_GEQUAL          0x00000006 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_ALWAYS          0x00000007 /* RW--V */
#define NV_PGRAPH_SHADOWCTL_SHADOW_ZFUNC_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOWZSLOPETHRESHOLD                  0x004019A8 /* RW-4R */
#define NV_PGRAPH_SHADOWZSLOPETHRESHOLD_BUNDLE           0x0000006A /* ----B */
#define NV_PGRAPH_SHADOWZSLOPETHRESHOLD_SHADOW_ZOFFSET         31:0 /* RWXFF */
#define NV_PGRAPH_SHADOWZSLOPETHRESHOLD_SHADOW_ZOFFSET_097 0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR0                         0x004019AC /* RW-4R */
#define NV_PGRAPH_SPECFOGFACTOR0_BUNDLE                  0x0000006B /* ----B */
#define NV_PGRAPH_SPECFOGFACTOR0_BLUE                           7:0 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR0_BLUE_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR0_GREEN                         15:8 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR0_GREEN_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR0_RED                          23:16 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR0_RED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR0_ALPHA                        31:24 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR0_ALPHA_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR1                         0x004019B0 /* RW-4R */
#define NV_PGRAPH_SPECFOGFACTOR1_BUNDLE                  0x0000006C /* ----B */
#define NV_PGRAPH_SPECFOGFACTOR1_BLUE                           7:0 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR1_BLUE_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR1_GREEN                         15:8 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR1_GREEN_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR1_RED                          23:16 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR1_RED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_SPECFOGFACTOR1_ALPHA                        31:24 /* RWXUF */
#define NV_PGRAPH_SPECFOGFACTOR1_ALPHA_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACECLIPX                           0x004019B4 /* RW-4R */
#define NV_PGRAPH_SURFACECLIPX_BUNDLE                    0x0000006D /* ----B */
#define NV_PGRAPH_SURFACECLIPX_X                               15:0 /* RWXUF */
#define NV_PGRAPH_SURFACECLIPX_X_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACECLIPX_WIDTH                          31:16 /* RWXUF */
#define NV_PGRAPH_SURFACECLIPX_WIDTH_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACECLIPY                           0x004019B8 /* RW-4R */
#define NV_PGRAPH_SURFACECLIPY_BUNDLE                    0x0000006E /* ----B */
#define NV_PGRAPH_SURFACECLIPY_Y                               15:0 /* RWXUF */
#define NV_PGRAPH_SURFACECLIPY_Y_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_SURFACECLIPY_HEIGHT                         31:16 /* RWXUF */
#define NV_PGRAPH_SURFACECLIPY_HEIGHT_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS0                            0x004019BC /* RW-4R */
#define NV_PGRAPH_TEXADDRESS0_BUNDLE                     0x0000006F /* ----B */
#define NV_PGRAPH_TEXADDRESS0_ADDRU                             2:0 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS0_ADDRU_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRU_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRU_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRU_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRU_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRU_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_U                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS0_WRAP_U_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_U_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_U_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS0_ADDRV                            10:8 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS0_ADDRV_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRV_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRV_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRV_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRV_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRV_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_V                          12:12 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS0_WRAP_V_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_V_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_V_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS0_ADDRP                           18:16 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS0_ADDRP_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRP_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRP_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRP_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRP_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_ADDRP_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_P                          20:20 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS0_WRAP_P_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_P_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_P_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_Q                          24:24 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS0_WRAP_Q_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_Q_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS0_WRAP_Q_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS1                            0x004019C0 /* RW-4R */
#define NV_PGRAPH_TEXADDRESS1_BUNDLE                     0x00000070 /* ----B */
#define NV_PGRAPH_TEXADDRESS1_ADDRU                             2:0 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS1_ADDRU_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRU_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRU_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRU_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRU_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRU_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_U                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS1_WRAP_U_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_U_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_U_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS1_ADDRV                            10:8 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS1_ADDRV_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRV_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRV_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRV_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRV_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRV_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_V                          12:12 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS1_WRAP_V_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_V_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_V_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS1_ADDRP                           18:16 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS1_ADDRP_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRP_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRP_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRP_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRP_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_ADDRP_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_P                          20:20 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS1_WRAP_P_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_P_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_P_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_Q                          24:24 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS1_WRAP_Q_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_Q_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS1_WRAP_Q_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS2                            0x004019C4 /* RW-4R */
#define NV_PGRAPH_TEXADDRESS2_BUNDLE                     0x00000071 /* ----B */
#define NV_PGRAPH_TEXADDRESS2_ADDRU                             2:0 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS2_ADDRU_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRU_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRU_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRU_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRU_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRU_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_U                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS2_WRAP_U_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_U_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_U_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS2_ADDRV                            10:8 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS2_ADDRV_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRV_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRV_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRV_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRV_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRV_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_V                          12:12 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS2_WRAP_V_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_V_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_V_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS2_ADDRP                           18:16 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS2_ADDRP_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRP_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRP_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRP_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRP_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_ADDRP_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_P                          20:20 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS2_WRAP_P_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_P_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_P_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_Q                          24:24 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS2_WRAP_Q_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_Q_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS2_WRAP_Q_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS3                            0x004019C8 /* RW-4R */
#define NV_PGRAPH_TEXADDRESS3_BUNDLE                     0x00000072 /* ----B */
#define NV_PGRAPH_TEXADDRESS3_ADDRU                             2:0 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS3_ADDRU_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRU_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRU_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRU_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRU_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRU_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_U                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS3_WRAP_U_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_U_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_U_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS3_ADDRV                            10:8 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS3_ADDRV_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRV_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRV_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRV_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRV_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRV_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_V                          12:12 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS3_WRAP_V_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_V_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_V_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS3_ADDRP                           18:16 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS3_ADDRP_WRAP                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRP_MIRROR               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRP_CLAMP_TO_EDGE        0x00000003 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRP_BORDER               0x00000004 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRP_CLAMP_OGL            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_ADDRP_097                  0x00000003 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_P                          20:20 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS3_WRAP_P_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_P_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_P_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_Q                          24:24 /* RWXVF */
#define NV_PGRAPH_TEXADDRESS3_WRAP_Q_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_Q_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXADDRESS3_WRAP_Q_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_0                              0x004019CC /* RW-4R */
#define NV_PGRAPH_TEXCTL0_0_BUNDLE                       0x00000073 /* ----B */
#define NV_PGRAPH_TEXCTL0_0_ENABLE                            30:30 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_0_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_0_MIN_LOD_CLAMP                     29:18 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_0_MIN_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_0_MAX_LOD_CLAMP                      17:6 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_0_MAX_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_0_LOG_MAX_ANISO                       5:4 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_0_LOG_MAX_ANISO_0              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_LOG_MAX_ANISO_1              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_LOG_MAX_ANISO_2              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_LOG_MAX_ANISO_3              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_LOG_MAX_ANISO_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_0_IMAGEFIELDEN                        3:3 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_0_IMAGEFIELDEN_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_IMAGEFIELDEN_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_IMAGEFIELDEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_0_ALPHAKILLEN                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_0_ALPHAKILLEN_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_ALPHAKILLEN_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_ALPHAKILLEN_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_0_COLORKEYOP                          1:0 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_0_COLORKEYOP_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_COLORKEYOP_ALPHA             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_COLORKEYOP_RGBA              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_COLORKEYOP_KILL              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_0_COLORKEYOP_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_1                              0x004019D0 /* RW-4R */
#define NV_PGRAPH_TEXCTL0_1_BUNDLE                       0x00000074 /* ----B */
#define NV_PGRAPH_TEXCTL0_1_ENABLE                            30:30 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_1_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_1_MIN_LOD_CLAMP                     29:18 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_1_MIN_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_1_MAX_LOD_CLAMP                      17:6 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_1_MAX_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_1_LOG_MAX_ANISO                       5:4 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_1_LOG_MAX_ANISO_0              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_LOG_MAX_ANISO_1              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_LOG_MAX_ANISO_2              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_LOG_MAX_ANISO_3              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_LOG_MAX_ANISO_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_1_IMAGEFIELDEN                        3:3 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_1_IMAGEFIELDEN_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_IMAGEFIELDEN_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_IMAGEFIELDEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_1_ALPHAKILLEN                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_1_ALPHAKILLEN_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_ALPHAKILLEN_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_ALPHAKILLEN_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_1_COLORKEYOP                          1:0 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_1_COLORKEYOP_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_COLORKEYOP_ALPHA             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_COLORKEYOP_RGBA              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_COLORKEYOP_KILL              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_1_COLORKEYOP_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_2                              0x004019D4 /* RW-4R */
#define NV_PGRAPH_TEXCTL0_2_BUNDLE                       0x00000075 /* ----B */
#define NV_PGRAPH_TEXCTL0_2_ENABLE                            30:30 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_2_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_2_MIN_LOD_CLAMP                     29:18 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_2_MIN_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_2_MAX_LOD_CLAMP                      17:6 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_2_MAX_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_2_LOG_MAX_ANISO                       5:4 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_2_LOG_MAX_ANISO_0              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_LOG_MAX_ANISO_1              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_LOG_MAX_ANISO_2              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_LOG_MAX_ANISO_3              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_LOG_MAX_ANISO_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_2_IMAGEFIELDEN                        3:3 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_2_IMAGEFIELDEN_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_IMAGEFIELDEN_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_IMAGEFIELDEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_2_ALPHAKILLEN                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_2_ALPHAKILLEN_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_ALPHAKILLEN_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_ALPHAKILLEN_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_2_COLORKEYOP                          1:0 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_2_COLORKEYOP_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_COLORKEYOP_ALPHA             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_COLORKEYOP_RGBA              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_COLORKEYOP_KILL              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_2_COLORKEYOP_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_3                              0x004019D8 /* RW-4R */
#define NV_PGRAPH_TEXCTL0_3_BUNDLE                       0x00000076 /* ----B */
#define NV_PGRAPH_TEXCTL0_3_ENABLE                            30:30 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_3_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_3_MIN_LOD_CLAMP                     29:18 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_3_MIN_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_3_MAX_LOD_CLAMP                      17:6 /* RWXUF */
#define NV_PGRAPH_TEXCTL0_3_MAX_LOD_CLAMP_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_3_LOG_MAX_ANISO                       5:4 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_3_LOG_MAX_ANISO_0              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_LOG_MAX_ANISO_1              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_LOG_MAX_ANISO_2              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_LOG_MAX_ANISO_3              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_LOG_MAX_ANISO_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_3_IMAGEFIELDEN                        3:3 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_3_IMAGEFIELDEN_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_IMAGEFIELDEN_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_IMAGEFIELDEN_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_3_ALPHAKILLEN                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_3_ALPHAKILLEN_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_ALPHAKILLEN_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_ALPHAKILLEN_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL0_3_COLORKEYOP                          1:0 /* RWXVF */
#define NV_PGRAPH_TEXCTL0_3_COLORKEYOP_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_COLORKEYOP_ALPHA             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_COLORKEYOP_RGBA              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_COLORKEYOP_KILL              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXCTL0_3_COLORKEYOP_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL1_0                              0x004019DC /* RW-4R */
#define NV_PGRAPH_TEXCTL1_0_BUNDLE                       0x00000077 /* ----B */
#define NV_PGRAPH_TEXCTL1_0_IMAGE_PITCH                       31:16 /* RWXUF */
#define NV_PGRAPH_TEXCTL1_0_IMAGE_PITCH_097              0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXCTL1_1                              0x004019E0 /* RW-4R */
#define NV_PGRAPH_TEXCTL1_1_BUNDLE                       0x00000078 /* ----B */
#define NV_PGRAPH_TEXCTL1_1_IMAGE_PITCH                       31:16 /* RWXUF */
#define NV_PGRAPH_TEXCTL1_1_IMAGE_PITCH_097              0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXCTL1_2                              0x004019E4 /* RW-4R */
#define NV_PGRAPH_TEXCTL1_2_BUNDLE                       0x00000079 /* ----B */
#define NV_PGRAPH_TEXCTL1_2_IMAGE_PITCH                       31:16 /* RWXUF */
#define NV_PGRAPH_TEXCTL1_2_IMAGE_PITCH_097              0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXCTL1_3                              0x004019E8 /* RW-4R */
#define NV_PGRAPH_TEXCTL1_3_BUNDLE                       0x0000007A /* ----B */
#define NV_PGRAPH_TEXCTL1_3_IMAGE_PITCH                       31:16 /* RWXUF */
#define NV_PGRAPH_TEXCTL1_3_IMAGE_PITCH_097              0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXCTL2_0                              0x004019EC /* RW-4R */
#define NV_PGRAPH_TEXCTL2_0_BUNDLE                       0x0000007B /* ----B */
#define NV_PGRAPH_TEXCTL2_0_PERTURB_DU                         11:0 /* RWXSF */
#define NV_PGRAPH_TEXCTL2_0_PERTURB_DU_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL2_0_PERTURB_DV                        23:12 /* RWXSF */
#define NV_PGRAPH_TEXCTL2_0_PERTURB_DV_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL2_0_IMAGE_LODF                        31:24 /* RWXUF */
#define NV_PGRAPH_TEXCTL2_0_IMAGE_LODF_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL2_1                              0x004019F0 /* RW-4R */
#define NV_PGRAPH_TEXCTL2_1_BUNDLE                       0x0000007C /* ----B */
#define NV_PGRAPH_TEXCTL2_1_PERTURB_DU                         11:0 /* RWXSF */
#define NV_PGRAPH_TEXCTL2_1_PERTURB_DU_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL2_1_PERTURB_DV                        23:12 /* RWXSF */
#define NV_PGRAPH_TEXCTL2_1_PERTURB_DV_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXCTL2_1_IMAGE_LODF                        31:24 /* RWXUF */
#define NV_PGRAPH_TEXCTL2_1_IMAGE_LODF_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0                             0x004019F4 /* RW-4R */
#define NV_PGRAPH_TEXFILTER0_BUNDLE                      0x0000007D /* ----B */
#define NV_PGRAPH_TEXFILTER0_MIPMAP_LOD_BIAS                   12:0 /* RWXSF */
#define NV_PGRAPH_TEXFILTER0_MIPMAP_LOD_BIAS_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0_CONVOLUTION_KERNEL               15:13 /* RWXVF */
#define NV_PGRAPH_TEXFILTER0_CONVOLUTION_KERNEL_QUINCUNX 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_CONVOLUTION_KERNEL_GAUSSIAN_3 0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_CONVOLUTION_KERNEL_097      0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0_MIN                              21:16 /* RWXVF */
#define NV_PGRAPH_TEXFILTER0_MIN_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MIN_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MIN_BOX_NEARESTLOD          0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MIN_TENT_NEARESTLOD         0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MIN_BOX_TENT_LOD            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MIN_TENT_TENT_LOD           0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MIN_CONVOLUTION_2D_LOD0     0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MIN_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0_MAG                              27:24 /* RWXVF */
#define NV_PGRAPH_TEXFILTER0_MAG_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MAG_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MAG_CONVOLUTION_2D_LOD0     0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_MAG_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0_ASIGNED                          28:28 /* RWXVF */
#define NV_PGRAPH_TEXFILTER0_ASIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_ASIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_ASIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0_RSIGNED                          29:29 /* RWXVF */
#define NV_PGRAPH_TEXFILTER0_RSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_RSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_RSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0_GSIGNED                          30:30 /* RWXVF */
#define NV_PGRAPH_TEXFILTER0_GSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_GSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_GSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER0_BSIGNED                          31:31 /* RWXVF */
#define NV_PGRAPH_TEXFILTER0_BSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_BSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER0_BSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1                             0x004019F8 /* RW-4R */
#define NV_PGRAPH_TEXFILTER1_BUNDLE                      0x0000007E /* ----B */
#define NV_PGRAPH_TEXFILTER1_MIPMAP_LOD_BIAS                   12:0 /* RWXSF */
#define NV_PGRAPH_TEXFILTER1_MIPMAP_LOD_BIAS_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1_CONVOLUTION_KERNEL               15:13 /* RWXVF */
#define NV_PGRAPH_TEXFILTER1_CONVOLUTION_KERNEL_QUINCUNX 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_CONVOLUTION_KERNEL_GAUSSIAN_3 0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_CONVOLUTION_KERNEL_097      0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1_MIN                              21:16 /* RWXVF */
#define NV_PGRAPH_TEXFILTER1_MIN_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MIN_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MIN_BOX_NEARESTLOD          0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MIN_TENT_NEARESTLOD         0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MIN_BOX_TENT_LOD            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MIN_TENT_TENT_LOD           0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MIN_CONVOLUTION_2D_LOD0     0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MIN_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1_MAG                              27:24 /* RWXVF */
#define NV_PGRAPH_TEXFILTER1_MAG_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MAG_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MAG_CONVOLUTION_2D_LOD0     0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_MAG_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1_ASIGNED                          28:28 /* RWXVF */
#define NV_PGRAPH_TEXFILTER1_ASIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_ASIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_ASIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1_RSIGNED                          29:29 /* RWXVF */
#define NV_PGRAPH_TEXFILTER1_RSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_RSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_RSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1_GSIGNED                          30:30 /* RWXVF */
#define NV_PGRAPH_TEXFILTER1_GSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_GSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_GSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER1_BSIGNED                          31:31 /* RWXVF */
#define NV_PGRAPH_TEXFILTER1_BSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_BSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER1_BSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2                             0x004019FC /* RW-4R */
#define NV_PGRAPH_TEXFILTER2_BUNDLE                      0x0000007F /* ----B */
#define NV_PGRAPH_TEXFILTER2_MIPMAP_LOD_BIAS                   12:0 /* RWXSF */
#define NV_PGRAPH_TEXFILTER2_MIPMAP_LOD_BIAS_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2_CONVOLUTION_KERNEL               15:13 /* RWXVF */
#define NV_PGRAPH_TEXFILTER2_CONVOLUTION_KERNEL_QUINCUNX 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_CONVOLUTION_KERNEL_GAUSSIAN_3 0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_CONVOLUTION_KERNEL_097      0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2_MIN                              21:16 /* RWXVF */
#define NV_PGRAPH_TEXFILTER2_MIN_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MIN_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MIN_BOX_NEARESTLOD          0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MIN_TENT_NEARESTLOD         0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MIN_BOX_TENT_LOD            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MIN_TENT_TENT_LOD           0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MIN_CONVOLUTION_2D_LOD0     0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MIN_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2_MAG                              27:24 /* RWXVF */
#define NV_PGRAPH_TEXFILTER2_MAG_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MAG_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MAG_CONVOLUTION_2D_LOD0     0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_MAG_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2_ASIGNED                          28:28 /* RWXVF */
#define NV_PGRAPH_TEXFILTER2_ASIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_ASIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_ASIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2_RSIGNED                          29:29 /* RWXVF */
#define NV_PGRAPH_TEXFILTER2_RSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_RSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_RSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2_GSIGNED                          30:30 /* RWXVF */
#define NV_PGRAPH_TEXFILTER2_GSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_GSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_GSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER2_BSIGNED                          31:31 /* RWXVF */
#define NV_PGRAPH_TEXFILTER2_BSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_BSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER2_BSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3                             0x00401A00 /* RW-4R */
#define NV_PGRAPH_TEXFILTER3_BUNDLE                      0x00000080 /* ----B */
#define NV_PGRAPH_TEXFILTER3_MIPMAP_LOD_BIAS                   12:0 /* RWXSF */
#define NV_PGRAPH_TEXFILTER3_MIPMAP_LOD_BIAS_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3_CONVOLUTION_KERNEL               15:13 /* RWXVF */
#define NV_PGRAPH_TEXFILTER3_CONVOLUTION_KERNEL_QUINCUNX 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_CONVOLUTION_KERNEL_GAUSSIAN_3 0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_CONVOLUTION_KERNEL_097      0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3_MIN                              21:16 /* RWXVF */
#define NV_PGRAPH_TEXFILTER3_MIN_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MIN_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MIN_BOX_NEARESTLOD          0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MIN_TENT_NEARESTLOD         0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MIN_BOX_TENT_LOD            0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MIN_TENT_TENT_LOD           0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MIN_CONVOLUTION_2D_LOD0     0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MIN_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3_MAG                              27:24 /* RWXVF */
#define NV_PGRAPH_TEXFILTER3_MAG_BOX_LOD0                0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MAG_TENT_LOD0               0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MAG_CONVOLUTION_2D_LOD0     0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_MAG_097                     0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3_ASIGNED                          28:28 /* RWXVF */
#define NV_PGRAPH_TEXFILTER3_ASIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_ASIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_ASIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3_RSIGNED                          29:29 /* RWXVF */
#define NV_PGRAPH_TEXFILTER3_RSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_RSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_RSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3_GSIGNED                          30:30 /* RWXVF */
#define NV_PGRAPH_TEXFILTER3_GSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_GSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_GSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFILTER3_BSIGNED                          31:31 /* RWXVF */
#define NV_PGRAPH_TEXFILTER3_BSIGNED_BIT_DISABLED        0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_BSIGNED_BIT_ENABLED         0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFILTER3_BSIGNED_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT0                                0x00401A04 /* RW-4R */
#define NV_PGRAPH_TEXFMT0_BUNDLE                         0x00000081 /* ----B */
#define NV_PGRAPH_TEXFMT0_CONTEXT_DMA                           1:1 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_CONTEXT_DMA_A                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT0_CONTEXT_DMA_B                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_CONTEXT_DMA_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_CUBEMAPENABLE                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_CUBEMAPENABLE_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT0_CUBEMAPENABLE_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_CUBEMAPENABLE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_BORDER_SOURCE                         3:3 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_BORDER_SOURCE_TEXTURE          0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BORDER_SOURCE_COLOR            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BORDER_SOURCE_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_ORIGIN_ZOH                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_ORIGIN_ZOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_ORIGIN_ZOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_ORIGIN_FOH                            5:5 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_ORIGIN_FOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_ORIGIN_FOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_DIMENSIONALITY                        7:6 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_DIMENSIONALITY_ONE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_DIMENSIONALITY_TWO             0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT0_DIMENSIONALITY_THREE           0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT0_DIMENSIONALITY_097             0x00000002 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_COLOR                                14:8 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_Y8                    0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_AY8                   0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_A1R5G5B5              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_X1R5G5B5              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_A4R4G4B4              0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_R5G6B5                0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_A8R8G8B8              0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_X8R8G8B8              0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_I8_A1R5G5B5           0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_I8_R5G6B5             0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_I8_A4R4G4B4           0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_I8_A8R8G8B8           0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_L_DXT1_A1R5G5B5          0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_L_DXT23_A8R8G8B8         0x0000000E /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_L_DXT45_A8R8G8B8         0x0000000F /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_A1R5G5B5        0x00000010 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_R5G6B5          0x00000011 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_A8R8G8B8        0x00000012 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_Y8              0x00000013 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_SY8             0x00000014 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_X7SY9           0x00000015 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_R8B8            0x00000016 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_G8B8            0x00000017 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_SG8SB8          0x00000018 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_A8                    0x00000019 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_A8Y8                  0x0000001A /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_AY8             0x0000001B /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_X1R5G5B5        0x0000001C /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_A4R4G4B4        0x0000001D /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_X8R8G8B8        0x0000001E /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_A8              0x0000001F /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_A8Y8            0x00000020 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LC_IMAGE_CR8YB8CB8YA8    0x00000024 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LC_IMAGE_YB8CR8YA8CB8    0x00000025 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_A8CR8CB8Y8      0x00000026 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_R6G5B5                0x00000027 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_G8B8                  0x00000028 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_R8B8                  0x00000029 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_DEPTH_X8_Y24_FIXED    0x0000002A /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_DEPTH_X8_Y24_FLOAT    0x0000002B /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_DEPTH_Y16_FIXED       0x0000002C /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_DEPTH_Y16_FLOAT       0x0000002D /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_DEPTH_X8_Y24_FIXED 0x0000002E /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_DEPTH_X8_Y24_FLOAT 0x0000002F /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_DEPTH_Y16_FIXED 0x00000030 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_DEPTH_Y16_FLOAT 0x00000031 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_Y16                   0x00000032 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_YB_16_YA_16           0x00000033 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LC_IMAGE_A4V6YB6A4U6YA6  0x00000034 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_Y16             0x00000035 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_YB16YA16        0x00000036 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_R6G5B5          0x00000037 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_R5G5B5A1              0x00000038 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_R4G4B4A4              0x00000039 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_A8B8G8R8              0x0000003A /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_B8G8R8A8              0x0000003B /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_SZ_R8G8B8A8              0x0000003C /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_R5G5B5A1        0x0000003D /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_R4G4B4A4        0x0000003E /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_A8B8G8R8        0x0000003F /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_B8G8R8A8        0x00000040 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_LU_IMAGE_R8G8B8A8        0x00000041 /* RW--V */
#define NV_PGRAPH_TEXFMT0_COLOR_097                      0x00000005 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_MIPMAP_LEVELS                       19:16 /* RWXUF */
#define NV_PGRAPH_TEXFMT0_MIPMAP_LEVELS_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U                         23:20 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_U_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V                         27:24 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_V_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P                         31:28 /* RWXVF */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT0_BASE_SIZE_P_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT1                                0x00401A08 /* RW-4R */
#define NV_PGRAPH_TEXFMT1_BUNDLE                         0x00000082 /* ----B */
#define NV_PGRAPH_TEXFMT1_CONTEXT_DMA                           1:1 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_CONTEXT_DMA_A                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT1_CONTEXT_DMA_B                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_CONTEXT_DMA_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_CUBEMAPENABLE                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_CUBEMAPENABLE_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT1_CUBEMAPENABLE_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_CUBEMAPENABLE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_BORDER_SOURCE                         3:3 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_BORDER_SOURCE_TEXTURE          0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BORDER_SOURCE_COLOR            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BORDER_SOURCE_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_ORIGIN_ZOH                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_ORIGIN_ZOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_ORIGIN_ZOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_ORIGIN_FOH                            5:5 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_ORIGIN_FOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_ORIGIN_FOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_DIMENSIONALITY                        7:6 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_DIMENSIONALITY_ONE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_DIMENSIONALITY_TWO             0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT1_DIMENSIONALITY_THREE           0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT1_DIMENSIONALITY_097             0x00000002 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_COLOR                                14:8 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_Y8                    0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_AY8                   0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_A1R5G5B5              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_X1R5G5B5              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_A4R4G4B4              0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_R5G6B5                0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_A8R8G8B8              0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_X8R8G8B8              0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_I8_A1R5G5B5           0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_I8_R5G6B5             0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_I8_A4R4G4B4           0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_I8_A8R8G8B8           0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_L_DXT1_A1R5G5B5          0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_L_DXT23_A8R8G8B8         0x0000000E /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_L_DXT45_A8R8G8B8         0x0000000F /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_A1R5G5B5        0x00000010 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_R5G6B5          0x00000011 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_A8R8G8B8        0x00000012 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_Y8              0x00000013 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_SY8             0x00000014 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_X7SY9           0x00000015 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_R8B8            0x00000016 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_G8B8            0x00000017 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_SG8SB8          0x00000018 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_A8                    0x00000019 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_A8Y8                  0x0000001A /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_AY8             0x0000001B /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_X1R5G5B5        0x0000001C /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_A4R4G4B4        0x0000001D /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_X8R8G8B8        0x0000001E /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_A8              0x0000001F /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_A8Y8            0x00000020 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LC_IMAGE_CR8YB8CB8YA8    0x00000024 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LC_IMAGE_YB8CR8YA8CB8    0x00000025 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_A8CR8CB8Y8      0x00000026 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_R6G5B5                0x00000027 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_G8B8                  0x00000028 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_R8B8                  0x00000029 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_DEPTH_X8_Y24_FIXED    0x0000002A /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_DEPTH_X8_Y24_FLOAT    0x0000002B /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_DEPTH_Y16_FIXED       0x0000002C /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_DEPTH_Y16_FLOAT       0x0000002D /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_DEPTH_X8_Y24_FIXED 0x0000002E /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_DEPTH_X8_Y24_FLOAT 0x0000002F /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_DEPTH_Y16_FIXED 0x00000030 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_DEPTH_Y16_FLOAT 0x00000031 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_Y16                   0x00000032 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_YB_16_YA_16           0x00000033 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LC_IMAGE_A4V6YB6A4U6YA6  0x00000034 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_Y16             0x00000035 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_YB16YA16        0x00000036 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_R6G5B5          0x00000037 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_R5G5B5A1              0x00000038 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_R4G4B4A4              0x00000039 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_A8B8G8R8              0x0000003A /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_B8G8R8A8              0x0000003B /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_SZ_R8G8B8A8              0x0000003C /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_R5G5B5A1        0x0000003D /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_R4G4B4A4        0x0000003E /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_A8B8G8R8        0x0000003F /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_B8G8R8A8        0x00000040 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_LU_IMAGE_R8G8B8A8        0x00000041 /* RW--V */
#define NV_PGRAPH_TEXFMT1_COLOR_097                      0x00000005 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_MIPMAP_LEVELS                       19:16 /* RWXUF */
#define NV_PGRAPH_TEXFMT1_MIPMAP_LEVELS_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U                         23:20 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_U_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V                         27:24 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_V_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P                         31:28 /* RWXVF */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT1_BASE_SIZE_P_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT2                                0x00401A0C /* RW-4R */
#define NV_PGRAPH_TEXFMT2_BUNDLE                         0x00000083 /* ----B */
#define NV_PGRAPH_TEXFMT2_CONTEXT_DMA                           1:1 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_CONTEXT_DMA_A                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT2_CONTEXT_DMA_B                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_CONTEXT_DMA_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_CUBEMAPENABLE                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_CUBEMAPENABLE_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT2_CUBEMAPENABLE_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_CUBEMAPENABLE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_BORDER_SOURCE                         3:3 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_BORDER_SOURCE_TEXTURE          0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BORDER_SOURCE_COLOR            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BORDER_SOURCE_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_ORIGIN_ZOH                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_ORIGIN_ZOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_ORIGIN_ZOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_ORIGIN_FOH                            5:5 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_ORIGIN_FOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_ORIGIN_FOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_DIMENSIONALITY                        7:6 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_DIMENSIONALITY_ONE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_DIMENSIONALITY_TWO             0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT2_DIMENSIONALITY_THREE           0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT2_DIMENSIONALITY_097             0x00000002 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_COLOR                                14:8 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_Y8                    0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_AY8                   0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_A1R5G5B5              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_X1R5G5B5              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_A4R4G4B4              0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_R5G6B5                0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_A8R8G8B8              0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_X8R8G8B8              0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_I8_A1R5G5B5           0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_I8_R5G6B5             0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_I8_A4R4G4B4           0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_I8_A8R8G8B8           0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_L_DXT1_A1R5G5B5          0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_L_DXT23_A8R8G8B8         0x0000000E /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_L_DXT45_A8R8G8B8         0x0000000F /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_A1R5G5B5        0x00000010 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_R5G6B5          0x00000011 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_A8R8G8B8        0x00000012 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_Y8              0x00000013 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_SY8             0x00000014 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_X7SY9           0x00000015 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_R8B8            0x00000016 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_G8B8            0x00000017 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_SG8SB8          0x00000018 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_A8                    0x00000019 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_A8Y8                  0x0000001A /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_AY8             0x0000001B /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_X1R5G5B5        0x0000001C /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_A4R4G4B4        0x0000001D /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_X8R8G8B8        0x0000001E /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_A8              0x0000001F /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_A8Y8            0x00000020 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LC_IMAGE_CR8YB8CB8YA8    0x00000024 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LC_IMAGE_YB8CR8YA8CB8    0x00000025 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_A8CR8CB8Y8      0x00000026 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_R6G5B5                0x00000027 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_G8B8                  0x00000028 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_R8B8                  0x00000029 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_DEPTH_X8_Y24_FIXED    0x0000002A /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_DEPTH_X8_Y24_FLOAT    0x0000002B /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_DEPTH_Y16_FIXED       0x0000002C /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_DEPTH_Y16_FLOAT       0x0000002D /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_DEPTH_X8_Y24_FIXED 0x0000002E /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_DEPTH_X8_Y24_FLOAT 0x0000002F /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_DEPTH_Y16_FIXED 0x00000030 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_DEPTH_Y16_FLOAT 0x00000031 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_Y16                   0x00000032 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_YB_16_YA_16           0x00000033 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LC_IMAGE_A4V6YB6A4U6YA6  0x00000034 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_Y16             0x00000035 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_YB16YA16        0x00000036 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_R6G5B5          0x00000037 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_R5G5B5A1              0x00000038 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_R4G4B4A4              0x00000039 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_A8B8G8R8              0x0000003A /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_B8G8R8A8              0x0000003B /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_SZ_R8G8B8A8              0x0000003C /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_R5G5B5A1        0x0000003D /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_R4G4B4A4        0x0000003E /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_A8B8G8R8        0x0000003F /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_B8G8R8A8        0x00000040 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_LU_IMAGE_R8G8B8A8        0x00000041 /* RW--V */
#define NV_PGRAPH_TEXFMT2_COLOR_097                      0x00000005 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_MIPMAP_LEVELS                       19:16 /* RWXUF */
#define NV_PGRAPH_TEXFMT2_MIPMAP_LEVELS_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U                         23:20 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_U_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V                         27:24 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_V_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P                         31:28 /* RWXVF */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT2_BASE_SIZE_P_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT3                                0x00401A10 /* RW-4R */
#define NV_PGRAPH_TEXFMT3_BUNDLE                         0x00000084 /* ----B */
#define NV_PGRAPH_TEXFMT3_CONTEXT_DMA                           1:1 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_CONTEXT_DMA_A                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT3_CONTEXT_DMA_B                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_CONTEXT_DMA_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_CUBEMAPENABLE                         2:2 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_CUBEMAPENABLE_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT3_CUBEMAPENABLE_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_CUBEMAPENABLE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_BORDER_SOURCE                         3:3 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_BORDER_SOURCE_TEXTURE          0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BORDER_SOURCE_COLOR            0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BORDER_SOURCE_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_ORIGIN_ZOH                            4:4 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_ORIGIN_ZOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_ORIGIN_ZOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_ORIGIN_FOH                            5:5 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_ORIGIN_FOH_CORNER              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_ORIGIN_FOH_097                 0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_DIMENSIONALITY                        7:6 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_DIMENSIONALITY_ONE             0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_DIMENSIONALITY_TWO             0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT3_DIMENSIONALITY_THREE           0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT3_DIMENSIONALITY_097             0x00000002 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_COLOR                                14:8 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_Y8                    0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_AY8                   0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_A1R5G5B5              0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_X1R5G5B5              0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_A4R4G4B4              0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_R5G6B5                0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_A8R8G8B8              0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_X8R8G8B8              0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_I8_A1R5G5B5           0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_I8_R5G6B5             0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_I8_A4R4G4B4           0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_I8_A8R8G8B8           0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_L_DXT1_A1R5G5B5          0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_L_DXT23_A8R8G8B8         0x0000000E /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_L_DXT45_A8R8G8B8         0x0000000F /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_A1R5G5B5        0x00000010 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_R5G6B5          0x00000011 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_A8R8G8B8        0x00000012 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_Y8              0x00000013 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_SY8             0x00000014 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_X7SY9           0x00000015 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_R8B8            0x00000016 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_G8B8            0x00000017 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_SG8SB8          0x00000018 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_A8                    0x00000019 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_A8Y8                  0x0000001A /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_AY8             0x0000001B /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_X1R5G5B5        0x0000001C /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_A4R4G4B4        0x0000001D /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_X8R8G8B8        0x0000001E /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_A8              0x0000001F /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_A8Y8            0x00000020 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LC_IMAGE_CR8YB8CB8YA8    0x00000024 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LC_IMAGE_YB8CR8YA8CB8    0x00000025 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_A8CR8CB8Y8      0x00000026 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_R6G5B5                0x00000027 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_G8B8                  0x00000028 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_R8B8                  0x00000029 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_DEPTH_X8_Y24_FIXED    0x0000002A /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_DEPTH_X8_Y24_FLOAT    0x0000002B /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_DEPTH_Y16_FIXED       0x0000002C /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_DEPTH_Y16_FLOAT       0x0000002D /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_DEPTH_X8_Y24_FIXED 0x0000002E /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_DEPTH_X8_Y24_FLOAT 0x0000002F /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_DEPTH_Y16_FIXED 0x00000030 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_DEPTH_Y16_FLOAT 0x00000031 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_Y16                   0x00000032 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_YB_16_YA_16           0x00000033 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LC_IMAGE_A4V6YB6A4U6YA6  0x00000034 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_Y16             0x00000035 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_YB16YA16        0x00000036 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_R6G5B5          0x00000037 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_R5G5B5A1              0x00000038 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_R4G4B4A4              0x00000039 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_A8B8G8R8              0x0000003A /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_B8G8R8A8              0x0000003B /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_SZ_R8G8B8A8              0x0000003C /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_R5G5B5A1        0x0000003D /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_R4G4B4A4        0x0000003E /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_A8B8G8R8        0x0000003F /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_B8G8R8A8        0x00000040 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_LU_IMAGE_R8G8B8A8        0x00000041 /* RW--V */
#define NV_PGRAPH_TEXFMT3_COLOR_097                      0x00000005 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_MIPMAP_LEVELS                       19:16 /* RWXUF */
#define NV_PGRAPH_TEXFMT3_MIPMAP_LEVELS_097              0x00000001 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U                         23:20 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_U_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V                         27:24 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_1024               0x0000000A /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_2048               0x0000000B /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_4096               0x0000000C /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_V_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P                         31:28 /* RWXVF */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_1                  0x00000000 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_2                  0x00000001 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_4                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_8                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_16                 0x00000004 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_32                 0x00000005 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_64                 0x00000006 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_128                0x00000007 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_256                0x00000008 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_512                0x00000009 /* RW--V */
#define NV_PGRAPH_TEXFMT3_BASE_SIZE_P_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT0                          0x00401A14 /* RW-4R */
#define NV_PGRAPH_TEXIMAGERECT0_BUNDLE                   0x00000085 /* ----B */
#define NV_PGRAPH_TEXIMAGERECT0_WIDTH                         28:16 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT0_WIDTH_097                0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT0_HEIGHT                         12:0 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT0_HEIGHT_097               0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT1                          0x00401A18 /* RW-4R */
#define NV_PGRAPH_TEXIMAGERECT1_BUNDLE                   0x00000086 /* ----B */
#define NV_PGRAPH_TEXIMAGERECT1_WIDTH                         28:16 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT1_WIDTH_097                0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT1_HEIGHT                         12:0 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT1_HEIGHT_097               0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT2                          0x00401A1C /* RW-4R */
#define NV_PGRAPH_TEXIMAGERECT2_BUNDLE                   0x00000087 /* ----B */
#define NV_PGRAPH_TEXIMAGERECT2_WIDTH                         28:16 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT2_WIDTH_097                0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT2_HEIGHT                         12:0 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT2_HEIGHT_097               0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT3                          0x00401A20 /* RW-4R */
#define NV_PGRAPH_TEXIMAGERECT3_BUNDLE                   0x00000088 /* ----B */
#define NV_PGRAPH_TEXIMAGERECT3_WIDTH                         28:16 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT3_WIDTH_097                0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXIMAGERECT3_HEIGHT                         12:0 /* RWXUF */
#define NV_PGRAPH_TEXIMAGERECT3_HEIGHT_097               0x00000008 /* RWC-V */
#define NV_PGRAPH_TEXOFFSET0                             0x00401A24 /* RW-4R */
#define NV_PGRAPH_TEXOFFSET0_BUNDLE                      0x00000089 /* ----B */
#define NV_PGRAPH_TEXOFFSET0_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_TEXOFFSET0_VALUE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXOFFSET1                             0x00401A28 /* RW-4R */
#define NV_PGRAPH_TEXOFFSET1_BUNDLE                      0x0000008A /* ----B */
#define NV_PGRAPH_TEXOFFSET1_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_TEXOFFSET1_VALUE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXOFFSET2                             0x00401A2C /* RW-4R */
#define NV_PGRAPH_TEXOFFSET2_BUNDLE                      0x0000008B /* ----B */
#define NV_PGRAPH_TEXOFFSET2_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_TEXOFFSET2_VALUE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXOFFSET3                             0x00401A30 /* RW-4R */
#define NV_PGRAPH_TEXOFFSET3_BUNDLE                      0x0000008C /* ----B */
#define NV_PGRAPH_TEXOFFSET3_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_TEXOFFSET3_VALUE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE0                            0x00401A34 /* RW-4R */
#define NV_PGRAPH_TEXPALETTE0_BUNDLE                     0x0000008D /* ----B */
#define NV_PGRAPH_TEXPALETTE0_CONTEXT_DMA                       0:0 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE0_CONTEXT_DMA_A              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE0_CONTEXT_DMA_B              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE0_CONTEXT_DMA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE0_LENGTH                            3:2 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE0_LENGTH_256                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE0_LENGTH_128                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE0_LENGTH_64                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXPALETTE0_LENGTH_32                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXPALETTE0_LENGTH_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE0_OFFSET                           31:6 /* RWXUF */
#define NV_PGRAPH_TEXPALETTE0_OFFSET_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE1                            0x00401A38 /* RW-4R */
#define NV_PGRAPH_TEXPALETTE1_BUNDLE                     0x0000008E /* ----B */
#define NV_PGRAPH_TEXPALETTE1_CONTEXT_DMA                       0:0 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE1_CONTEXT_DMA_A              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE1_CONTEXT_DMA_B              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE1_CONTEXT_DMA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE1_LENGTH                            3:2 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE1_LENGTH_256                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE1_LENGTH_128                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE1_LENGTH_64                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXPALETTE1_LENGTH_32                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXPALETTE1_LENGTH_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE1_OFFSET                           31:6 /* RWXUF */
#define NV_PGRAPH_TEXPALETTE1_OFFSET_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE2                            0x00401A3C /* RW-4R */
#define NV_PGRAPH_TEXPALETTE2_BUNDLE                     0x0000008F /* ----B */
#define NV_PGRAPH_TEXPALETTE2_CONTEXT_DMA                       0:0 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE2_CONTEXT_DMA_A              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE2_CONTEXT_DMA_B              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE2_CONTEXT_DMA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE2_LENGTH                            3:2 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE2_LENGTH_256                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE2_LENGTH_128                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE2_LENGTH_64                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXPALETTE2_LENGTH_32                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXPALETTE2_LENGTH_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE2_OFFSET                           31:6 /* RWXUF */
#define NV_PGRAPH_TEXPALETTE2_OFFSET_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE3                            0x00401A40 /* RW-4R */
#define NV_PGRAPH_TEXPALETTE3_BUNDLE                     0x00000090 /* ----B */
#define NV_PGRAPH_TEXPALETTE3_CONTEXT_DMA                       0:0 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE3_CONTEXT_DMA_A              0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE3_CONTEXT_DMA_B              0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE3_CONTEXT_DMA_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE3_LENGTH                            3:2 /* RWXVF */
#define NV_PGRAPH_TEXPALETTE3_LENGTH_256                 0x00000000 /* RW--V */
#define NV_PGRAPH_TEXPALETTE3_LENGTH_128                 0x00000001 /* RW--V */
#define NV_PGRAPH_TEXPALETTE3_LENGTH_64                  0x00000002 /* RW--V */
#define NV_PGRAPH_TEXPALETTE3_LENGTH_32                  0x00000003 /* RW--V */
#define NV_PGRAPH_TEXPALETTE3_LENGTH_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_TEXPALETTE3_OFFSET                           31:6 /* RWXUF */
#define NV_PGRAPH_TEXPALETTE3_OFFSET_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX0                           0x00401A44 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX0_BUNDLE                    0x00000091 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX0_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX0_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX0_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX0_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX1                           0x00401A48 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX1_BUNDLE                    0x00000092 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX1_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX1_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX1_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX1_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX2                           0x00401A4C /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX2_BUNDLE                    0x00000093 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX2_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX2_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX2_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX2_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX3                           0x00401A50 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX3_BUNDLE                    0x00000094 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX3_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX3_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX3_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX3_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX4                           0x00401A54 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX4_BUNDLE                    0x00000095 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX4_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX4_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX4_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX4_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX5                           0x00401A58 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX5_BUNDLE                    0x00000096 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX5_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX5_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX5_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX5_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX6                           0x00401A5C /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX6_BUNDLE                    0x00000097 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX6_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX6_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX6_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX6_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX7                           0x00401A60 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPX7_BUNDLE                    0x00000098 /* ----B */
#define NV_PGRAPH_WINDOWCLIPX7_XMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX7_XMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPX7_XMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPX7_XMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY0                           0x00401A64 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY0_BUNDLE                    0x00000099 /* ----B */
#define NV_PGRAPH_WINDOWCLIPY0_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY0_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY0_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY0_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY1                           0x00401A68 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY1_BUNDLE                    0x0000009A /* ----B */
#define NV_PGRAPH_WINDOWCLIPY1_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY1_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY1_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY1_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY2                           0x00401A6C /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY2_BUNDLE                    0x0000009B /* ----B */
#define NV_PGRAPH_WINDOWCLIPY2_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY2_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY2_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY2_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY3                           0x00401A70 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY3_BUNDLE                    0x0000009C /* ----B */
#define NV_PGRAPH_WINDOWCLIPY3_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY3_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY3_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY3_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY4                           0x00401A74 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY4_BUNDLE                    0x0000009D /* ----B */
#define NV_PGRAPH_WINDOWCLIPY4_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY4_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY4_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY4_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY5                           0x00401A78 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY5_BUNDLE                    0x0000009E /* ----B */
#define NV_PGRAPH_WINDOWCLIPY5_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY5_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY5_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY5_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY6                           0x00401A7C /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY6_BUNDLE                    0x0000009F /* ----B */
#define NV_PGRAPH_WINDOWCLIPY6_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY6_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY6_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY6_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY7                           0x00401A80 /* RW-4R */
#define NV_PGRAPH_WINDOWCLIPY7_BUNDLE                    0x000000A0 /* ----B */
#define NV_PGRAPH_WINDOWCLIPY7_YMIN                            11:0 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY7_YMIN_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_WINDOWCLIPY7_YMAX                           27:16 /* RWXUF */
#define NV_PGRAPH_WINDOWCLIPY7_YMAX_097                  0x000007FF /* RWC-V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE                       0x00401A84 /* RW-4R */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_BUNDLE                0x000000A1 /* ----B */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_ZCLAMP_EN                    4:4 /* RWXVF */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_ZCLAMP_EN_CULL        0x00000000 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_ZCLAMP_EN_CLAMP       0x00000001 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_ZCLAMP_EN_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_COMPRESS_ZEN                 0:0 /* RWXVF */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_COMPRESS_ZEN_DISABLE  0x00000000 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_COMPRESS_ZEN_ENABLE   0x00000001 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_COMPRESS_ZEN_097      0x00000000 /* RWC-V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_ZEN                  1:1 /* RWXVF */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_ZEN_DISABLE   0x00000000 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_ZEN_ENABLE    0x00000001 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_ZEN_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_STENCIL_EN           2:2 /* RWXVF */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_STENCIL_EN_DISABLE 0x00000000 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_STENCIL_EN_ENABLE 0x00000001 /* RW--V */
#define NV_PGRAPH_ZCOMPRESSOCCLUDE_OCCLUDE_STENCIL_EN_097 0x00000000 /* RWC-V */
#define NV_PGRAPH_ZSTENCILCLEARVALUE                     0x00401A88 /* RW-4R */
#define NV_PGRAPH_ZSTENCILCLEARVALUE_BUNDLE              0x000000A2 /* ----B */
#define NV_PGRAPH_ZSTENCILCLEARVALUE_V                         31:0 /* RWXUF */
#define NV_PGRAPH_ZSTENCILCLEARVALUE_V_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_ZCLIPMAX                               0x00401A8C /* RW-4R */
#define NV_PGRAPH_ZCLIPMAX_BUNDLE                        0x000000A3 /* ----B */
#define NV_PGRAPH_ZCLIPMAX_V                                   31:0 /* RWXFF */
#define NV_PGRAPH_ZCLIPMAX_V_097                         0x4B7FFFFF /* RWC-V */
#define NV_PGRAPH_ZCLIPMIN                               0x00401A90 /* RW-4R */
#define NV_PGRAPH_ZCLIPMIN_BUNDLE                        0x000000A4 /* ----B */
#define NV_PGRAPH_ZCLIPMIN_V                                   31:0 /* RWXFF */
#define NV_PGRAPH_ZCLIPMIN_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTEXTDMAA                            0x00401A94 /* RW-4R */
#define NV_PGRAPH_CONTEXTDMAA_BUNDLE                     0x000000A5 /* ----B */
#define NV_PGRAPH_CONTEXTDMAA_V                                15:0 /* RWXUF */
#define NV_PGRAPH_CONTEXTDMAA_V_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTEXTDMAA_TARGET                          25:24 /* RWXVF */
#define NV_PGRAPH_CONTEXTDMAA_TARGET_NVM                 0x00000000 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAA_TARGET_NVM_TILED           0x00000001 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAA_TARGET_PCI                 0x00000002 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAA_TARGET_AGP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAA_TARGET_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTEXTDMAB                            0x00401A98 /* RW-4R */
#define NV_PGRAPH_CONTEXTDMAB_BUNDLE                     0x000000A6 /* ----B */
#define NV_PGRAPH_CONTEXTDMAB_V                                15:0 /* RWXUF */
#define NV_PGRAPH_CONTEXTDMAB_V_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTEXTDMAB_TARGET                          25:24 /* RWXVF */
#define NV_PGRAPH_CONTEXTDMAB_TARGET_NVM                 0x00000000 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAB_TARGET_NVM_TILED           0x00000001 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAB_TARGET_PCI                 0x00000002 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAB_TARGET_AGP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CONTEXTDMAB_TARGET_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTEXTVTXA                            0x00401A9C /* RW-4R */
#define NV_PGRAPH_CONTEXTVTXA_BUNDLE                     0x000000A7 /* ----B */
#define NV_PGRAPH_CONTEXTVTXA_V                                15:0 /* RWXUF */
#define NV_PGRAPH_CONTEXTVTXA_V_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CONTEXTVTXB                            0x00401AA0 /* RW-4R */
#define NV_PGRAPH_CONTEXTVTXB_BUNDLE                     0x000000A8 /* ----B */
#define NV_PGRAPH_CONTEXTVTXB_V                                15:0 /* RWXUF */
#define NV_PGRAPH_CONTEXTVTXB_V_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_ZOFFSETBIAS                            0x00401AA4 /* RW-4R */
#define NV_PGRAPH_ZOFFSETBIAS_BUNDLE                     0x000000A9 /* ----B */
#define NV_PGRAPH_ZOFFSETBIAS_V                                31:0 /* RWXFF */
#define NV_PGRAPH_ZOFFSETBIAS_V_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_ZOFFSETFACTOR                          0x00401AA8 /* RW-4R */
#define NV_PGRAPH_ZOFFSETFACTOR_BUNDLE                   0x000000AA /* ----B */
#define NV_PGRAPH_ZOFFSETFACTOR_V                              31:0 /* RWXFF */
#define NV_PGRAPH_ZOFFSETFACTOR_V_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_EYEVEC0                                0x00401AAC /* RW-4R */
#define NV_PGRAPH_EYEVEC0_BUNDLE                         0x000000AB /* ----B */
#define NV_PGRAPH_EYEVEC0_V                                    31:0 /* RWXFF */
#define NV_PGRAPH_EYEVEC0_V_097                          0x00000000 /* RWC-V */
#define NV_PGRAPH_EYEVEC1                                0x00401AB0 /* RW-4R */
#define NV_PGRAPH_EYEVEC1_BUNDLE                         0x000000AC /* ----B */
#define NV_PGRAPH_EYEVEC1_V                                    31:0 /* RWXFF */
#define NV_PGRAPH_EYEVEC1_V_097                          0x00000000 /* RWC-V */
#define NV_PGRAPH_EYEVEC2                                0x00401AB4 /* RW-4R */
#define NV_PGRAPH_EYEVEC2_BUNDLE                         0x000000AD /* ----B */
#define NV_PGRAPH_EYEVEC2_V                                    31:0 /* RWXFF */
#define NV_PGRAPH_EYEVEC2_V_097                          0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE0                               0x00401C00 /* RW-4R */
#define NV_PGRAPH_STIPPLE0_BUNDLE                        0x00000100 /* ----B */
#define NV_PGRAPH_STIPPLE0_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE0_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE1                               0x00401C04 /* RW-4R */
#define NV_PGRAPH_STIPPLE1_BUNDLE                        0x00000101 /* ----B */
#define NV_PGRAPH_STIPPLE1_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE1_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE2                               0x00401C08 /* RW-4R */
#define NV_PGRAPH_STIPPLE2_BUNDLE                        0x00000102 /* ----B */
#define NV_PGRAPH_STIPPLE2_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE2_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE3                               0x00401C0C /* RW-4R */
#define NV_PGRAPH_STIPPLE3_BUNDLE                        0x00000103 /* ----B */
#define NV_PGRAPH_STIPPLE3_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE3_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE4                               0x00401C10 /* RW-4R */
#define NV_PGRAPH_STIPPLE4_BUNDLE                        0x00000104 /* ----B */
#define NV_PGRAPH_STIPPLE4_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE4_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE5                               0x00401C14 /* RW-4R */
#define NV_PGRAPH_STIPPLE5_BUNDLE                        0x00000105 /* ----B */
#define NV_PGRAPH_STIPPLE5_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE5_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE6                               0x00401C18 /* RW-4R */
#define NV_PGRAPH_STIPPLE6_BUNDLE                        0x00000106 /* ----B */
#define NV_PGRAPH_STIPPLE6_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE6_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE7                               0x00401C1C /* RW-4R */
#define NV_PGRAPH_STIPPLE7_BUNDLE                        0x00000107 /* ----B */
#define NV_PGRAPH_STIPPLE7_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE7_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE8                               0x00401C20 /* RW-4R */
#define NV_PGRAPH_STIPPLE8_BUNDLE                        0x00000108 /* ----B */
#define NV_PGRAPH_STIPPLE8_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE8_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE9                               0x00401C24 /* RW-4R */
#define NV_PGRAPH_STIPPLE9_BUNDLE                        0x00000109 /* ----B */
#define NV_PGRAPH_STIPPLE9_V                                   31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE9_V_097                         0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE10                              0x00401C28 /* RW-4R */
#define NV_PGRAPH_STIPPLE10_BUNDLE                       0x0000010A /* ----B */
#define NV_PGRAPH_STIPPLE10_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE10_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE11                              0x00401C2C /* RW-4R */
#define NV_PGRAPH_STIPPLE11_BUNDLE                       0x0000010B /* ----B */
#define NV_PGRAPH_STIPPLE11_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE11_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE12                              0x00401C30 /* RW-4R */
#define NV_PGRAPH_STIPPLE12_BUNDLE                       0x0000010C /* ----B */
#define NV_PGRAPH_STIPPLE12_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE12_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE13                              0x00401C34 /* RW-4R */
#define NV_PGRAPH_STIPPLE13_BUNDLE                       0x0000010D /* ----B */
#define NV_PGRAPH_STIPPLE13_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE13_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE14                              0x00401C38 /* RW-4R */
#define NV_PGRAPH_STIPPLE14_BUNDLE                       0x0000010E /* ----B */
#define NV_PGRAPH_STIPPLE14_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE14_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE15                              0x00401C3C /* RW-4R */
#define NV_PGRAPH_STIPPLE15_BUNDLE                       0x0000010F /* ----B */
#define NV_PGRAPH_STIPPLE15_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE15_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE16                              0x00401C40 /* RW-4R */
#define NV_PGRAPH_STIPPLE16_BUNDLE                       0x00000110 /* ----B */
#define NV_PGRAPH_STIPPLE16_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE16_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE17                              0x00401C44 /* RW-4R */
#define NV_PGRAPH_STIPPLE17_BUNDLE                       0x00000111 /* ----B */
#define NV_PGRAPH_STIPPLE17_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE17_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE18                              0x00401C48 /* RW-4R */
#define NV_PGRAPH_STIPPLE18_BUNDLE                       0x00000112 /* ----B */
#define NV_PGRAPH_STIPPLE18_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE18_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE19                              0x00401C4C /* RW-4R */
#define NV_PGRAPH_STIPPLE19_BUNDLE                       0x00000113 /* ----B */
#define NV_PGRAPH_STIPPLE19_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE19_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE20                              0x00401C50 /* RW-4R */
#define NV_PGRAPH_STIPPLE20_BUNDLE                       0x00000114 /* ----B */
#define NV_PGRAPH_STIPPLE20_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE20_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE21                              0x00401C54 /* RW-4R */
#define NV_PGRAPH_STIPPLE21_BUNDLE                       0x00000115 /* ----B */
#define NV_PGRAPH_STIPPLE21_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE21_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE22                              0x00401C58 /* RW-4R */
#define NV_PGRAPH_STIPPLE22_BUNDLE                       0x00000116 /* ----B */
#define NV_PGRAPH_STIPPLE22_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE22_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE23                              0x00401C5C /* RW-4R */
#define NV_PGRAPH_STIPPLE23_BUNDLE                       0x00000117 /* ----B */
#define NV_PGRAPH_STIPPLE23_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE23_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE24                              0x00401C60 /* RW-4R */
#define NV_PGRAPH_STIPPLE24_BUNDLE                       0x00000118 /* ----B */
#define NV_PGRAPH_STIPPLE24_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE24_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE25                              0x00401C64 /* RW-4R */
#define NV_PGRAPH_STIPPLE25_BUNDLE                       0x00000119 /* ----B */
#define NV_PGRAPH_STIPPLE25_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE25_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE26                              0x00401C68 /* RW-4R */
#define NV_PGRAPH_STIPPLE26_BUNDLE                       0x0000011A /* ----B */
#define NV_PGRAPH_STIPPLE26_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE26_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE27                              0x00401C6C /* RW-4R */
#define NV_PGRAPH_STIPPLE27_BUNDLE                       0x0000011B /* ----B */
#define NV_PGRAPH_STIPPLE27_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE27_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE28                              0x00401C70 /* RW-4R */
#define NV_PGRAPH_STIPPLE28_BUNDLE                       0x0000011C /* ----B */
#define NV_PGRAPH_STIPPLE28_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE28_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE29                              0x00401C74 /* RW-4R */
#define NV_PGRAPH_STIPPLE29_BUNDLE                       0x0000011D /* ----B */
#define NV_PGRAPH_STIPPLE29_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE29_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE30                              0x00401C78 /* RW-4R */
#define NV_PGRAPH_STIPPLE30_BUNDLE                       0x0000011E /* ----B */
#define NV_PGRAPH_STIPPLE30_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE30_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_STIPPLE31                              0x00401C7C /* RW-4R */
#define NV_PGRAPH_STIPPLE31_BUNDLE                       0x0000011F /* ----B */
#define NV_PGRAPH_STIPPLE31_V                                  31:0 /* RWXUF */
#define NV_PGRAPH_STIPPLE31_V_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0                            0x00400F90 /* RW-4R */
#define NV_PGRAPH_BEGINPATCH0_POSITION_DEGREE                   3:0 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_POSITION_DEGREE_097        0x00000001 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0_PARAM1_DEGREE                     7:4 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_PARAM1_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0_PARAM2_DEGREE                    11:8 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_PARAM2_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0_PARAM3_DEGREE                   15:12 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_PARAM3_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0_PARAM4_DEGREE                   19:16 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_PARAM4_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0_PARAM5_DEGREE                   23:20 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_PARAM5_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0_PARAM6_DEGREE                   27:24 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_PARAM6_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH0_PARAM7_DEGREE                   31:28 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH0_PARAM7_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1                            0x00400F94 /* RW-4R */
#define NV_PGRAPH_BEGINPATCH1_PARAM8_DEGREE                     3:0 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM8_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1_PARAM9_DEGREE                     7:4 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM9_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1_PARAM10_DEGREE                   11:8 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM10_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1_PARAM11_DEGREE                  15:12 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM11_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1_PARAM12_DEGREE                  19:16 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM12_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1_PARAM13_DEGREE                  23:20 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM13_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1_PARAM14_DEGREE                  27:24 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM14_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH1_PARAM15_DEGREE                  31:28 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH1_PARAM15_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH2                            0x00400F98 /* RW-4R */
#define NV_PGRAPH_BEGINPATCH2_SWATCH_ROWS                       7:0 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH2_SWATCH_ROWS_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH2_SWATCH_COLS                      15:8 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH2_SWATCH_COLS_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH2_SWATCH_SIZE                     20:16 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH2_SWATCH_SIZE_097            0x00000004 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH2_PARTIAL_SWATCH_WIDTH            25:21 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH2_PARTIAL_SWATCH_WIDTH_097   0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH2_PARTIAL_SWATCH_HEIGHT           30:26 /* RWXUF */
#define NV_PGRAPH_BEGINPATCH2_PARTIAL_SWATCH_HEIGHT_097  0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH3                            0x00400F9C /* RW-4R */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS                          2:0 /* RWXVF */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS_NONE              0x00000000 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS_FIRST             0x00000001 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS_LAST              0x00000002 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS_FIRST_AND_LAST    0x00000003 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS_REV_FIRST         0x00000005 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS_REV_LAST          0x00000006 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_ROW_TRNS_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS                          5:3 /* RWXVF */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS_NONE              0x00000000 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS_FIRST             0x00000001 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS_LAST              0x00000002 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS_FIRST_AND_LAST    0x00000003 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS_REV_FIRST         0x00000005 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS_REV_LAST          0x00000006 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_COL_TRNS_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH3_PRIM                            15:14 /* RWXVF */
#define NV_PGRAPH_BEGINPATCH3_PRIM_TRI_STRIP             0x00000000 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_PRIM_REVERSED_TRI_STRIP    0x00000001 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_PRIM_BW_TRI_STRIP          0x00000002 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_PRIM_BW_REVERSED_TRI_STRIP 0x00000003 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_PRIM_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINPATCH3_TESS                            16:16 /* RWXVF */
#define NV_PGRAPH_BEGINPATCH3_TESS_ADAPTIVE_STITCH       0x00000000 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_TESS_FIXED_STITCH          0x00000001 /* RW--V */
#define NV_PGRAPH_BEGINPATCH3_TESS_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CURVE                                  0x00400FA0 /* RW-4R */
#define NV_PGRAPH_CURVE_CMD                                     2:0 /* RWXVF */
#define NV_PGRAPH_CURVE_CMD_END_CURVE_DATA               0x00000000 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_STRIP_CURVE                  0x00000001 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_LEFT_GUARD_CURVE             0x00000002 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_RIGHT_GUARD_CURVE            0x00000003 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_OUTER_TRANSITION_CURVE       0x00000004 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_INNER_TRANSITION_CURVE       0x00000005 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_OUTER_END_PT                 0x00000006 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_INNER_END_PT                 0x00000007 /* RW--V */
#define NV_PGRAPH_CURVE_CMD_097                          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0                            0x00400FA4 /* RW-4R */
#define NV_PGRAPH_BEGINTRANS0_POSITION_DEGREE                   3:0 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_POSITION_DEGREE_097        0x00000001 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0_PARAM1_DEGREE                     7:4 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_PARAM1_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0_PARAM2_DEGREE                    11:8 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_PARAM2_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0_PARAM3_DEGREE                   15:12 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_PARAM3_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0_PARAM4_DEGREE                   19:16 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_PARAM4_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0_PARAM5_DEGREE                   23:20 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_PARAM5_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0_PARAM6_DEGREE                   27:24 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_PARAM6_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS0_PARAM7_DEGREE                   31:28 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS0_PARAM7_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1                            0x00400FA8 /* RW-4R */
#define NV_PGRAPH_BEGINTRANS1_PARAM8_DEGREE                     3:0 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM8_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1_PARAM9_DEGREE                     7:4 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM9_DEGREE_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1_PARAM10_DEGREE                   11:8 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM10_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1_PARAM11_DEGREE                  15:12 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM11_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1_PARAM12_DEGREE                  19:16 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM12_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1_PARAM13_DEGREE                  23:20 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM13_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1_PARAM14_DEGREE                  27:24 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM14_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_BEGINTRANS1_PARAM15_DEGREE                  31:28 /* RWXUF */
#define NV_PGRAPH_BEGINTRANS1_PARAM15_DEGREE_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D                                 0x00400FB4 /* RW-4R */
#define NV_PGRAPH_CSV0_D_FOG_MODE                             21:21 /* RWXVF */
#define NV_PGRAPH_CSV0_D_FOG_MODE_LINEAR                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOG_MODE_EXP                    0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOG_MODE_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_FOGGENMODE                           24:22 /* RWXVF */
#define NV_PGRAPH_CSV0_D_FOGGENMODE_SPEC_ALPHA           0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOGGENMODE_RADIAL               0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOGGENMODE_PLANAR               0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOGGENMODE_ABS_PLANAR           0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOGGENMODE_FOG_X                0x00000004 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOGGENMODE_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_FOGENABLE                            19:19 /* RWXVF */
#define NV_PGRAPH_CSV0_D_FOGENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOGENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_FOGENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_POINTPARAMSENABLE                    25:25 /* RWXVF */
#define NV_PGRAPH_CSV0_D_POINTPARAMSENABLE_FALSE         0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_POINTPARAMSENABLE_TRUE          0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_POINTPARAMSENABLE_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_SKIN                                 28:26 /* RWXVF */
#define NV_PGRAPH_CSV0_D_SKIN_OFF                        0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_SKIN_2G                         0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_SKIN_2                          0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_SKIN_3G                         0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_SKIN_3                          0x00000004 /* RW--V */
#define NV_PGRAPH_CSV0_D_SKIN_4G                         0x00000005 /* RW--V */
#define NV_PGRAPH_CSV0_D_SKIN_4                          0x00000006 /* RW--V */
#define NV_PGRAPH_CSV0_D_SKIN_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT0                                 1:0 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT0_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT0_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT0_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT0_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT0_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT1                                 3:2 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT1_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT1_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT1_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT1_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT1_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT2                                 5:4 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT2_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT2_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT2_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT2_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT2_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT3                                 7:6 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT3_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT3_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT3_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT3_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT3_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT4                                 9:8 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT4_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT4_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT4_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT4_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT4_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT5                               11:10 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT5_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT5_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT5_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT5_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT5_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT6                               13:12 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT6_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT6_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT6_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT6_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT6_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_LIGHT7                               15:14 /* RWXVF */
#define NV_PGRAPH_CSV0_D_LIGHT7_OFF                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT7_INFINITE                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT7_LOCAL                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT7_SPOT                     0x00000003 /* RW--V */
#define NV_PGRAPH_CSV0_D_LIGHT7_097                      0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_TEXGEN_REF                           20:20 /* RWXVF */
#define NV_PGRAPH_CSV0_D_TEXGEN_REF_LOCAL_VIEWER         0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_TEXGEN_REF_INFINITE_VIEWER      0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_TEXGEN_REF_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_PASSTHROUGH                          31:30 /* RWXVF */
#define NV_PGRAPH_CSV0_D_PASSTHROUGH_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_PASSTHROUGH_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_PASSTHROUGH_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_MODE                                 31:30 /* RWXVF */
#define NV_PGRAPH_CSV0_D_MODE_FIXED                      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_MODE_PROGRAM                    0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_D_MODE_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_D_RANGE_MODE                           18:18 /* RWXVF */
#define NV_PGRAPH_CSV0_D_RANGE_MODE_USER                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_RANGE_MODE_PRIV                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_RANGE_MODE_097                  0x00000001 /* RWC-V */
#define NV_PGRAPH_CSV0_D_CHEOPS_STALL                         29:29 /* RWXVF */
#define NV_PGRAPH_CSV0_D_CHEOPS_STALL_READ_ONLY          0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_D_CHEOPS_STALL_READ_WRITE         0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_D_CHEOPS_STALL_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C                                 0x00400FB8 /* RW-4R */
#define NV_PGRAPH_CSV0_C_EYETYPE_LOCAL                        30:30 /* RWXVF */
#define NV_PGRAPH_CSV0_C_EYETYPE_LOCAL_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_EYETYPE_LOCAL_TRUE              0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_EYETYPE_LOCAL_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_SOUT                                 17:17 /* RWXVF */
#define NV_PGRAPH_CSV0_C_SOUT_ZERO_OUT                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_SOUT_PASSTHROUGH                0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_SOUT_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_LIGHT_ATTENUATION                    28:28 /* RWXVF */
#define NV_PGRAPH_CSV0_C_LIGHT_ATTENUATION_INVERT        0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_LIGHT_ATTENUATION_NOT_INVERT    0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_LIGHT_ATTENUATION_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_SEPARATE_SPECULAR_ENABLE             18:18 /* RWXVF */
#define NV_PGRAPH_CSV0_C_SEPARATE_SPECULAR_ENABLE_FALSE  0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_SEPARATE_SPECULAR_ENABLE_TRUE   0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_SEPARATE_SPECULAR_ENABLE_097    0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_EMISSION                             26:25 /* RWXVF */
#define NV_PGRAPH_CSV0_C_EMISSION_DISABLE                0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_EMISSION_DIFFUSE_VTX_COLOR      0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_EMISSION_SPECULAR_VTX_COLOR     0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_EMISSION_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_AMBIENT                              24:23 /* RWXVF */
#define NV_PGRAPH_CSV0_C_AMBIENT_DISABLE                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_AMBIENT_DIFFUSE_VTX_COLOR       0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_AMBIENT_SPECULAR_VTX_COLOR      0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_AMBIENT_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_DIFFUSE                              22:21 /* RWXVF */
#define NV_PGRAPH_CSV0_C_DIFFUSE_DISABLE                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_DIFFUSE_DIFFUSE_VTX_COLOR       0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_DIFFUSE_SPECULAR_VTX_COLOR      0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_DIFFUSE_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_SPECULAR                             20:19 /* RWXVF */
#define NV_PGRAPH_CSV0_C_SPECULAR_DISABLE                0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_SPECULAR_DIFFUSE_VTX_COLOR      0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_SPECULAR_SPECULAR_VTX_COLOR     0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_SPECULAR_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_BCK_EMSSN                              7:6 /* RWXVF */
#define NV_PGRAPH_CSV0_C_BCK_EMSSN_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_EMSSN_DIFF_VTX_COLOR        0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_EMSSN_SPEC_VTX_COLOR        0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_EMSSN_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_BCK_AMBNT                              5:4 /* RWXVF */
#define NV_PGRAPH_CSV0_C_BCK_AMBNT_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_AMBNT_DIFF_VTX_COLOR        0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_AMBNT_SPEC_VTX_COLOR        0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_AMBNT_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_BCK_DFFUS                              3:2 /* RWXVF */
#define NV_PGRAPH_CSV0_C_BCK_DFFUS_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_DFFUS_DIFF_VTX_COLOR        0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_DFFUS_SPEC_VTX_COLOR        0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_DFFUS_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_BCK_SPCLR                              1:0 /* RWXVF */
#define NV_PGRAPH_CSV0_C_BCK_SPCLR_DISABLE               0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_SPCLR_DIFF_VTX_COLOR        0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_SPCLR_SPEC_VTX_COLOR        0x00000002 /* RW--V */
#define NV_PGRAPH_CSV0_C_BCK_SPCLR_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_LIGHTING                             31:31 /* RWXVF */
#define NV_PGRAPH_CSV0_C_LIGHTING_FALSE                  0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_LIGHTING_TRUE                   0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_LIGHTING_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_NORMALIZATION_ENABLE                 27:27 /* RWXVF */
#define NV_PGRAPH_CSV0_C_NORMALIZATION_ENABLE_FALSE      0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_NORMALIZATION_ENABLE_TRUE       0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_NORMALIZATION_ENABLE_097        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_SPECULARENABLE                       16:16 /* RWXVF */
#define NV_PGRAPH_CSV0_C_SPECULARENABLE_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_SPECULARENABLE_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_SPECULARENABLE_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_CHEOPS_PROGRAM_START                  15:8 /* RWXUF */
#define NV_PGRAPH_CSV0_C_CHEOPS_PROGRAM_START_097        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV0_C_TWO_SIDED_LIGHTING                   29:29 /* RWXVF */
#define NV_PGRAPH_CSV0_C_TWO_SIDED_LIGHTING_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_CSV0_C_TWO_SIDED_LIGHTING_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_CSV0_C_TWO_SIDED_LIGHTING_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B                                 0x00400FBC /* RW-4R */
#define NV_PGRAPH_CSV1_B_T2_S                                   6:4 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T2_S_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_S_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_S_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_S_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_S_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_S_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_S_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T2_T                                   9:7 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T2_T_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_T_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_T_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_T_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_T_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_T_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_T_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T2_R                                 12:10 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T2_R_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_R_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_R_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_R_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_R_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_R_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T2_Q                                 15:13 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T2_Q_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_Q_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_Q_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_Q_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T2_MODE                                1:1 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T2_MODE_FALSE                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_MODE_TRUE                    0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_MODE_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T2_TEXTURE                             2:2 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T2_TEXTURE_2D                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_TEXTURE_3D                   0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_TEXTURE_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T2_ENABLE                              0:0 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T2_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T2_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T3_S                                 22:20 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T3_S_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_S_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_S_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_S_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_S_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_S_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_S_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T3_T                                 25:23 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T3_T_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_T_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_T_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_T_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_T_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_T_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_T_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T3_R                                 28:26 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T3_R_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_R_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_R_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_R_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_R_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_R_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T3_Q                                 31:29 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T3_Q_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_Q_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_Q_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_Q_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T3_MODE                              17:17 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T3_MODE_FALSE                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_MODE_TRUE                    0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_MODE_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T3_TEXTURE                           18:18 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T3_TEXTURE_2D                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_TEXTURE_3D                   0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_TEXTURE_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_B_T3_ENABLE                            16:16 /* RWXVF */
#define NV_PGRAPH_CSV1_B_T3_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_B_T3_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A                                 0x00400FC0 /* RW-4R */
#define NV_PGRAPH_CSV1_A_T0_S                                   6:4 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T0_S_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_S_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_S_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_S_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_S_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_S_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_S_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T0_T                                   9:7 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T0_T_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_T_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_T_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_T_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_T_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_T_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_T_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T0_R                                 12:10 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T0_R_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_R_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_R_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_R_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_R_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_R_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T0_Q                                 15:13 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T0_Q_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_Q_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_Q_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_Q_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T0_MODE                                1:1 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T0_MODE_FALSE                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_MODE_TRUE                    0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_MODE_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T0_TEXTURE                             2:2 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T0_TEXTURE_2D                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_TEXTURE_3D                   0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_TEXTURE_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T0_ENABLE                              0:0 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T0_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T0_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T1_S                                 22:20 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T1_S_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_S_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_S_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_S_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_S_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_S_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_S_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T1_T                                 25:23 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T1_T_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_T_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_T_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_T_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_T_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_T_SPHERE_MAP                 0x00000003 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_T_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T1_R                                 28:26 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T1_R_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_R_NORMAL_MAP                 0x00000004 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_R_REFLECTION_MAP             0x00000005 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_R_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_R_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_R_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T1_Q                                 31:29 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T1_Q_DISABLE                    0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_Q_EYE_LINEAR                 0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_Q_OBJECT_LINEAR              0x00000002 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_Q_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T1_MODE                              17:17 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T1_MODE_FALSE                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_MODE_TRUE                    0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_MODE_097                     0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T1_TEXTURE                           18:18 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T1_TEXTURE_2D                   0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_TEXTURE_3D                   0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_TEXTURE_097                  0x00000000 /* RWC-V */
#define NV_PGRAPH_CSV1_A_T1_ENABLE                            16:16 /* RWXVF */
#define NV_PGRAPH_CSV1_A_T1_ENABLE_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_ENABLE_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_CSV1_A_T1_ENABLE_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_CHEOPS_OFFSET                          0x00400FC4 /* RW-4R */
#define NV_PGRAPH_CHEOPS_OFFSET_PROG_LD_PTR                     7:0 /* RWXUF */
#define NV_PGRAPH_CHEOPS_OFFSET_PROG_LD_PTR_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_CHEOPS_OFFSET_CONST_LD_PTR                   15:8 /* RWXUF */
#define NV_PGRAPH_CHEOPS_OFFSET_CONST_LD_PTR_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_ZCULLINTERLOCK                         0x00000000 /* ---4P */
#define NV_PGRAPH_ZCULLINTERLOCK_BUNDLE                       0x1D0 /* ----B */
#define NV_PGRAPH_ZCULLINTERLOCK_SEMA                           9:0 /* ---VF */
#define NV_PGRAPH_BLTFIRSTSPAN                           0x00000000 /* ---4P */
#define NV_PGRAPH_BLTFIRSTSPAN_BUNDLE                    0x000001D1 /* ----B */
#define NV_PGRAPH_BLTFIRSTSPAN_SRCMINUSDST                      6:0 /* ---VF */
#define NV_PGRAPH_BLTFIRSTSPAN_SRCANCHORPART                  17:16 /* ---VF */
#define NV_PGRAPH_BLTFIRSTSPAN_DSTANCHORPART                  19:18 /* ---VF */
#define NV_PGRAPH_BLTFIRSTSPAN_L2R                            20:20 /* ---VF */
#define NV_PGRAPH_BLTFIRSTSPAN_L2R_FALSE                 0x00000000 /* ----V */
#define NV_PGRAPH_BLTFIRSTSPAN_L2R_TRUE                  0x00000001 /* ----V */
#define NV_PGRAPH_BLTFIRSTSPAN_RRW                            21:21 /* ---VF */
#define NV_PGRAPH_BLTFIRSTSPAN_RRW_FALSE                 0x00000000 /* ----V */
#define NV_PGRAPH_BLTFIRSTSPAN_RRW_TRUE                  0x00000001 /* ----V */
#define NV_PGRAPH_BLTNTHSPAN                             0x00000000 /* ---4P */
#define NV_PGRAPH_BLTNTHSPAN_BUNDLE                      0x000001D2 /* ----B */
#define NV_PGRAPH_BLTNTHSPAN_SRCMINUSDST                        6:0 /* ---VF */
#define NV_PGRAPH_BLTNTHSPAN_SRCANCHORPART                    17:16 /* ---VF */
#define NV_PGRAPH_BLTNTHSPAN_DSTANCHORPART                    19:18 /* ---VF */
#define NV_PGRAPH_BLTNTHSPAN_L2R                              20:20 /* ---VF */
#define NV_PGRAPH_BLTNTHSPAN_L2R_FALSE                   0x00000000 /* ----V */
#define NV_PGRAPH_BLTNTHSPAN_L2R_TRUE                    0x00000001 /* ----V */
#define NV_PGRAPH_BLTNTHSPAN_RRW                              21:21 /* ---VF */
#define NV_PGRAPH_BLTNTHSPAN_RRW_FALSE                   0x00000000 /* ----V */
#define NV_PGRAPH_BLTNTHSPAN_RRW_TRUE                    0x00000001 /* ----V */
#define NV_PGRAPH_BLTEND                                 0x00000000 /* ---4P */
#define NV_PGRAPH_BLTEND_BUNDLE                          0x000001D3 /* ----B */
#define NV_PGRAPH_ROPFLUSH                               0x00000000 /* ---4P */
#define NV_PGRAPH_ROPFLUSH_BUNDLE                             0x1D4 /* ----B */
#define NV_PGRAPH_PALLOAD_BUNDLE                              0x1D5 /* ----B */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL                         2:0 /* ---VF */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_S0_N8            0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_S0_N4            0x00000001 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_S4_N4            0x00000002 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_S0_N2            0x00000003 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_S2_N2            0x00000004 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_S4_N2            0x00000005 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_S6_N2            0x00000006 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_ALLOCCTL_NONE             0x00000007 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_LOAD_FALSE                0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX0_LOAD_TRUE                 0x00000001 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL                         6:4 /* ---VF */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_S0_N8            0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_S0_N4            0x00000001 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_S4_N4            0x00000002 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_S0_N2            0x00000003 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_S2_N2            0x00000004 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_S4_N2            0x00000005 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_S6_N2            0x00000006 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_ALLOCCTL_NONE             0x00000007 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_LOAD_FALSE                0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX1_LOAD_TRUE                 0x00000001 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL                        10:8 /* ---VF */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_S0_N8            0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_S0_N4            0x00000001 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_S4_N4            0x00000002 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_S0_N2            0x00000003 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_S2_N2            0x00000004 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_S4_N2            0x00000005 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_S6_N2            0x00000006 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_ALLOCCTL_NONE             0x00000007 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_LOAD_FALSE                0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX2_LOAD_TRUE                 0x00000001 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL                       14:12 /* ---VF */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_S0_N8            0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_S0_N4            0x00000001 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_S4_N4            0x00000002 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_S0_N2            0x00000003 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_S2_N2            0x00000004 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_S4_N2            0x00000005 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_S6_N2            0x00000006 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_ALLOCCTL_NONE             0x00000007 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_LOAD_FALSE                0x00000000 /* ----V */
#define NV_PGRAPH_PALLOAD_TEX3_LOAD_TRUE                 0x00000001 /* ----V */
#define NV_PGRAPH_PIPE_ADDRESS                           0x00400F50 /* RW-4R */
#define NV_PGRAPH_PIPE_ADDRESS_VALUE                           16:2 /* RWXVF */
#define NV_PGRAPH_PIPE_DATA                              0x00400F54 /* RW-4R */
#define NV_PGRAPH_PIPE_DATA_VALUE                              31:0 /* RWXVF */
#define NV_PGRAPH_SHADOW                                 0x00400F5C /* RW-4R */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND                        0:0 /* RWXVF */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND_FALSE           0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND_TRUE            0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_SECONDARY_COLOR_EN                     2:2 /* RWXVF */
#define NV_PGRAPH_SHADOW_SECONDARY_COLOR_EN_FALSE        0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_SECONDARY_COLOR_EN_TRUE         0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_SECONDARY_COLOR_EN_097          0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_COLORMATERIAL_SPECULAR                 3:3 /* RWXVF */
#define NV_PGRAPH_SHADOW_COLORMATERIAL_SPECULAR_FALSE    0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_COLORMATERIAL_SPECULAR_TRUE     0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_COLORMATERIAL_SPECULAR_097      0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_PATCH                               4:4 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_PATCH_FALSE                  0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH_TRUE                   0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH_097                    0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_PATCH0                              5:5 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_PATCH0_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH0_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH0_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_PATCH1                              6:6 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_PATCH1_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH1_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH1_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_PATCH2                              7:7 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_PATCH2_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH2_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_PATCH2_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_SWATCH                              8:8 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_SWATCH_FALSE                 0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_SWATCH_TRUE                  0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_SWATCH_097                   0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_GUARD                                 10:9 /* RWXVF */
#define NV_PGRAPH_SHADOW_GUARD_FALSE                     0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_GUARD_LEFT_SET                  0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_GUARD_RIGHT_SET                 0x00000002 /* RW--V */
#define NV_PGRAPH_SHADOW_GUARD_BOTH_SET                  0x00000003 /* RW--V */
#define NV_PGRAPH_SHADOW_GUARD_097                       0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION                        11:11 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_TRANSITION_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION_TRUE              0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION0                       12:12 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_TRANSITION0_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION0_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION0_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION1                       13:13 /* RWXVF */
#define NV_PGRAPH_SHADOW_IN_TRANSITION1_FALSE            0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION1_TRUE             0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_IN_TRANSITION1_097              0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND_CURVE                15:15 /* RWXVF */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND_CURVE_FALSE     0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND_CURVE_TRUE      0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_WITHIN_BEGINEND_CURVE_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_SWATCH_DONE                          16:16 /* RWXVF */
#define NV_PGRAPH_SHADOW_SWATCH_DONE_FALSE               0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_SWATCH_DONE_TRUE                0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_SWATCH_DONE_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_OUTER_END_PT                         17:17 /* RWXVF */
#define NV_PGRAPH_SHADOW_OUTER_END_PT_FALSE              0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_OUTER_END_PT_TRUE               0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_OUTER_END_PT_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_OUTER_TRANSITION                     18:18 /* RWXVF */
#define NV_PGRAPH_SHADOW_OUTER_TRANSITION_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_OUTER_TRANSITION_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_OUTER_TRANSITION_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_INNER_TRANSITION                     19:19 /* RWXVF */
#define NV_PGRAPH_SHADOW_INNER_TRANSITION_FALSE          0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_INNER_TRANSITION_TRUE           0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_INNER_TRANSITION_097            0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_PARK                                 20:20 /* RWXVF */
#define NV_PGRAPH_SHADOW_PARK_FALSE                      0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_PARK_TRUE                       0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_PARK_097                        0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_DIRTY_ECOLMAT                        21:21 /* RWXVF */
#define NV_PGRAPH_SHADOW_DIRTY_ECOLMAT_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_DIRTY_ECOLMAT_TRUE              0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_DIRTY_ECOLMAT_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_DIRTY_ACOLMAT                        22:22 /* RWXVF */
#define NV_PGRAPH_SHADOW_DIRTY_ACOLMAT_FALSE             0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_DIRTY_ACOLMAT_TRUE              0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_DIRTY_ACOLMAT_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_INNER_END_PT                         23:23 /* RWXVF */
#define NV_PGRAPH_SHADOW_INNER_END_PT_FALSE              0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_INNER_END_PT_TRUE               0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_INNER_END_PT_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_SHADOW_FD_ERROR_DETECTED                    24:24 /* RWXVF */
#define NV_PGRAPH_SHADOW_FD_ERROR_DETECTED_FALSE         0x00000000 /* RW--V */
#define NV_PGRAPH_SHADOW_FD_ERROR_DETECTED_TRUE          0x00000001 /* RW--V */
#define NV_PGRAPH_SHADOW_FD_ERROR_DETECTED_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_DATA                                0x00400F60 /* RW-4R */
#define NV_PGRAPH_FD_DATA_COUNTER_COEFF                         9:0 /* RWXUF */
#define NV_PGRAPH_FD_DATA_COUNTER_COEFF_097               0x0000000 /* RWC-V */
#define NV_PGRAPH_FD_DATA_GUARD_CURVE_SPEC                    17:12 /* RWXUF */
#define NV_PGRAPH_FD_DATA_GUARD_CURVE_097                 0x0000000 /* RWC-V */
#define NV_PGRAPH_FD_DATA_CURVE_SPEC                          25:18 /* RWXUF */
#define NV_PGRAPH_FD_DATA_CURVE_SPEC_097                  0x0000000 /* RWC-V */
#define NV_PGRAPH_FD_DATA_PT_SPEC                             31:28 /* RWXUF */
#define NV_PGRAPH_FD_DATA_PT_SPEC_097                     0x0000000 /* RWC-V */
#define NV_PGRAPH_FD_SWATCH                              0x00400F64 /* RW-4R */
#define NV_PGRAPH_FD_SWATCH_CURVES_PER_SWATCH_SPEC              7:0 /* RWXUF */
#define NV_PGRAPH_FD_SWATCH_CURVES_PER_SWATCH_SPEC_097   0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_SWATCH_HT_COUNTER                         15:8 /* RWXUF */
#define NV_PGRAPH_FD_SWATCH_HT_COUNTER_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_SWATCH_WD_COUNTER                        23:16 /* RWXUF */
#define NV_PGRAPH_FD_SWATCH_WD_COUNTER_097               0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_SWATCH_NEW_SWATH                         24:24 /* RWXVF */
#define NV_PGRAPH_FD_SWATCH_NEW_SWATH_FALSE              0x00000000 /* RW--V */
#define NV_PGRAPH_FD_SWATCH_NEW_SWATH_TRUE               0x00000001 /* RW--V */
#define NV_PGRAPH_FD_SWATCH_NEW_SWATH_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_SWATCH_SKIP_FIRST_ROW                    25:25 /* RWXVF */
#define NV_PGRAPH_FD_SWATCH_SKIP_FIRST_ROW_FALSE         0x00000000 /* RW--V */
#define NV_PGRAPH_FD_SWATCH_SKIP_FIRST_ROW_TRUE          0x00000001 /* RW--V */
#define NV_PGRAPH_FD_SWATCH_SKIP_FIRST_ROW_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_SWATCH_SHORT_SWATCH                      26:26 /* RWXVF */
#define NV_PGRAPH_FD_SWATCH_SHORT_SWATCH_FULL_HEIGHT     0x00000000 /* RW--V */
#define NV_PGRAPH_FD_SWATCH_SHORT_SWATCH_PARTIAL_HEIGHT  0x00000001 /* RW--V */
#define NV_PGRAPH_FD_SWATCH_SHORT_SWATCH_097             0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_EXTRAS                              0x00400F68 /* RW-4R */
#define NV_PGRAPH_FD_EXTRAS_TRANSITION_COUNTER                  2:0 /* RWXUF */
#define NV_PGRAPH_FD_EXTRAS_TRANSITION_COUNTER_097       0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_EXTRAS_TRANSITION_TOTAL                    6:4 /* RWXUF */
#define NV_PGRAPH_FD_EXTRAS_TRANSITION_TOTAL_097         0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_EXTRAS_PT_SPEC0                          27:24 /* RWXUF */
#define NV_PGRAPH_FD_EXTRAS_PT_SPEC0_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_FD_EXTRAS_PT_SPEC1                          31:28 /* RWXUF */
#define NV_PGRAPH_FD_EXTRAS_PT_SPEC1_097                 0x00000000 /* RWC-V */
#define NV_PGRAPH_EMISSION_BACKUP_0                      0x00400F6C /* RW-4R */
#define NV_PGRAPH_EMISSION_BACKUP_0_V                          31:0 /* RWXFF */
#define NV_PGRAPH_EMISSION_BACKUP_0_V_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_EMISSION_BACKUP_1                      0x00400F70 /* RW-4R */
#define NV_PGRAPH_EMISSION_BACKUP_1_V                          31:0 /* RWXFF */
#define NV_PGRAPH_EMISSION_BACKUP_1_V_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_EMISSION_BACKUP_2                      0x00400F74 /* RW-4R */
#define NV_PGRAPH_EMISSION_BACKUP_2_V                          31:0 /* RWXFF */
#define NV_PGRAPH_EMISSION_BACKUP_2_V_097                0x00000000 /* RWC-V */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_0                 0x00400F78 /* RW-4R */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_0_V                     31:0 /* RWXFF */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_0_V_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_1                 0x00400F7C /* RW-4R */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_1_V                     31:0 /* RWXFF */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_1_V_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_2                 0x00400F80 /* RW-4R */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_2_V                     31:0 /* RWXFF */
#define NV_PGRAPH_SCENE_AMBIENT_BACKUP_2_V_097           0x00000000 /* RWC-V */
#define NV_PGRAPH_GETSTATE                               0x00400F84 /* RW-4R */
#define NV_PGRAPH_GETSTATE_DMA_INSTANCE                        15:0 /* RWXUF */
#define NV_PGRAPH_GETSTATE_DMA_INSTANCE_INVALID              0x0000 /* RW--V */
#define NV_PGRAPH_DMA_START_0                            0x00401000 /* RW-4R */
#define NV_PGRAPH_DMA_START_0_VALUE                            31:0 /* RWXUF */
#define NV_PGRAPH_DMA_START_1                            0x00401004 /* RW-4R */
#define NV_PGRAPH_DMA_START_1_VALUE                            31:0 /* RWXUF */
#define NV_PGRAPH_DMA_LENGTH                             0x00401008 /* RW-4R */
#define NV_PGRAPH_DMA_LENGTH_VALUE                             21:0 /* RWXUF */
#define NV_PGRAPH_DMA_MISC                               0x0040100C /* RW-4R */
#define NV_PGRAPH_DMA_MISC_COUNT                               15:0 /* RWXUF */
#define NV_PGRAPH_DMA_MISC_FMT_SRC                            18:16 /* RWXVF */
#define NV_PGRAPH_DMA_MISC_FMT_DST                            22:20 /* RWXVF */
#define NV_PGRAPH_DMA_DATA_0                             0x00401020 /* RW-4R */
#define NV_PGRAPH_DMA_DATA_0_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_DMA_DATA_1                             0x00401024 /* RW-4R */
#define NV_PGRAPH_DMA_DATA_1_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_DMA_RM                                 0x00401030 /* RW-4R */
#define NV_PGRAPH_DMA_RM_ASSIST_A                               0:0 /* RWIVF */
#define NV_PGRAPH_DMA_RM_ASSIST_A_NOT_PENDING            0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_RM_ASSIST_A_PENDING                0x00000001 /* R---V */
#define NV_PGRAPH_DMA_RM_ASSIST_A_RESET                  0x00000001 /* -W--C */
#define NV_PGRAPH_DMA_RM_ASSIST_B                               1:1 /* RWIVF */
#define NV_PGRAPH_DMA_RM_ASSIST_B_NOT_PENDING            0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_RM_ASSIST_B_PENDING                0x00000001 /* R---V */
#define NV_PGRAPH_DMA_RM_ASSIST_B_RESET                  0x00000001 /* -W--C */
#define NV_PGRAPH_DMA_RM_WRITE_REQ                              4:4 /* CWIVF */
#define NV_PGRAPH_DMA_RM_WRITE_REQ_NOT_PENDING           0x00000000 /* CWI-V */
#define NV_PGRAPH_DMA_RM_WRITE_REQ_PENDING               0x00000001 /* -W--T */
#define NV_PGRAPH_DMA_STATE                              0x00401034 /* R--4R */
#define NV_PGRAPH_DMA_STATE_PMA                                 2:0 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_PMA_DRP                      0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_PMA_DRA                      0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_PMA_DWA                      0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_PMA_DW0                      0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_PMA_DW1                      0x00000004 /* R---V */
#define NV_PGRAPH_DMA_STATE_PMA_DW2                      0x00000005 /* R---V */
#define NV_PGRAPH_DMA_STATE_PMA_DW3                      0x00000006 /* R---V */
#define NV_PGRAPH_DMA_STATE_PMA_DWX                      0x00000007 /* R---V */
#define NV_PGRAPH_DMA_STATE_FE                                  4:3 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_FE_0                         0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_FE_1                         0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_FE_2                         0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_FE_3                         0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_FBA                                 5:5 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_FBA_DR                       0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_FBA_DW                       0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA                              11:8 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_DRDMA_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_DRDMA_REQ                    0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_TIME_REQ               0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_ADJ                    0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_TLB                    0x00000004 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_PTE_REQ                0x00000005 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_PTE                    0x00000006 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_MEM_REQ                0x00000007 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_MEM                    0x00000008 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_PITCH                  0x00000009 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRDMA_INTR                   0x0000000A /* R---V */
#define NV_PGRAPH_DMA_STATE_DR                                13:12 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_DR_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_DR_TRX                       0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DR_PART                      0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRTLB                             15:14 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_DRTLB_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_DRTLB_TLB                    0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRTLB_LIM                    0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_DRTLB_PTE                    0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_DR_Q_FULL                         16:16 /* R-X-F */
#define NV_PGRAPH_DMA_STATE_DR_Q_EMPTY                        17:17 /* R-X-F */
#define NV_PGRAPH_DMA_STATE_DR_Q_BUSY                         18:18 /* R-X-F */
#define NV_PGRAPH_DMA_STATE_DR_C_FULL                         19:19 /* R-X-F */
#define NV_PGRAPH_DMA_STATE_DWDMA                             23:20 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_DWDMA_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_DWDMA_ADJ                    0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_TLB                    0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_PTE_REQ                0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_PTE                    0x00000004 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_MEM_REQ                0x00000005 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_MEM                    0x00000006 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_PITCH                  0x00000007 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_FE_TRX                 0x00000008 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWDMA_INTR                   0x00000009 /* R---V */
#define NV_PGRAPH_DMA_STATE_DW                                26:24 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_DW_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_DW_FIRST                     0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DW_SECOND                    0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_DW_MID                       0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_DW_WAIT                      0x00000004 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWTLB                             28:27 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_DWTLB_IDLE                   0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_DWTLB_TLB                    0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWTLB_LIM                    0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_DWTLB_PTE                    0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_DF                                31:29 /* R-IVF */
#define NV_PGRAPH_DMA_STATE_DF_IDLE                      0x00000000 /* R-I-V */
#define NV_PGRAPH_DMA_STATE_DF_REQ                       0x00000001 /* R---V */
#define NV_PGRAPH_DMA_STATE_DF_REQ2                      0x00000002 /* R---V */
#define NV_PGRAPH_DMA_STATE_DF_LO                        0x00000003 /* R---V */
#define NV_PGRAPH_DMA_STATE_DF_HI                        0x00000004 /* R---V */
#define NV_PGRAPH_DMA_RETURN                             0x00401038 /* RW-4R */
#define NV_PGRAPH_DMA_RETURN_VALUE                             31:0 /* RWXUF */
#define NV_PGRAPH_DMA_A_XLATE_INST                       0x00401040 /* RW-4R */
#define NV_PGRAPH_DMA_A_XLATE_INST_VALUE                       15:0 /* RWXUF */
#define NV_PGRAPH_DMA_A_CONTROL                          0x00401044 /* RW-4R */
#define NV_PGRAPH_DMA_A_CONTROL_PAGE_TABLE                    12:12 /* RWIVF */
#define NV_PGRAPH_DMA_A_CONTROL_PAGE_TABLE_NOT_PRESENT   0x00000000 /* RWI-V */
#define NV_PGRAPH_DMA_A_CONTROL_PAGE_TABLE_PRESENT       0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_A_CONTROL_PAGE_ENTRY                    13:13 /* RWXVF */
#define NV_PGRAPH_DMA_A_CONTROL_PAGE_ENTRY_NOT_LINEAR    0x00000000 /* RW--V */
#define NV_PGRAPH_DMA_A_CONTROL_PAGE_ENTRY_LINEAR        0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_A_CONTROL_TARGET_NODE                   17:16 /* RWXUF */
#define NV_PGRAPH_DMA_A_CONTROL_TARGET_NODE_NVM          0x00000000 /* RW--V */
#define NV_PGRAPH_DMA_A_CONTROL_TARGET_NODE_NVM_TILED    0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_A_CONTROL_TARGET_NODE_PCI          0x00000002 /* RW--V */
#define NV_PGRAPH_DMA_A_CONTROL_TARGET_NODE_AGP          0x00000003 /* RW--V */
#define NV_PGRAPH_DMA_A_CONTROL_ADJUST                        31:20 /* RWXUF */
#define NV_PGRAPH_DMA_A_LIMIT                            0x00401048 /* RW-4R */
#define NV_PGRAPH_DMA_A_LIMIT_OFFSET                           31:0 /* RWXUF */
#define NV_PGRAPH_DMA_A_TLB_PTE                          0x0040104C /* RW-4R */
#define NV_PGRAPH_DMA_A_TLB_PTE_ACCESS                          1:1 /* RWXVF */
#define NV_PGRAPH_DMA_A_TLB_PTE_ACCESS_READ_ONLY         0x00000000 /* RW--V */
#define NV_PGRAPH_DMA_A_TLB_PTE_ACCESS_READ_WRITE        0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_A_TLB_PTE_FRAME_ADDRESS                 31:12 /* RWXUF */
#define NV_PGRAPH_DMA_A_TLB_TAG                          0x00401050 /* RW-4R */
#define NV_PGRAPH_DMA_A_TLB_TAG_ADDRESS                       31:12 /* RWXUF */
#define NV_PGRAPH_DMA_A_ADJ_OFFSET                       0x00401054 /* RW-4R */
#define NV_PGRAPH_DMA_A_ADJ_OFFSET_VALUE                       31:0 /* RWXUF */
#define NV_PGRAPH_DMA_A_OFFSET                           0x00401058 /* RW-4R */
#define NV_PGRAPH_DMA_A_OFFSET_VALUE                           31:0 /* RWXUF */
#define NV_PGRAPH_DMA_A_SIZE                             0x0040105C /* RW-4R */
#define NV_PGRAPH_DMA_A_SIZE_VALUE                             24:0 /* RWXUF */
#define NV_PGRAPH_DMA_A_Y_SIZE                           0x00401060 /* RW-4R */
#define NV_PGRAPH_DMA_A_Y_SIZE_VALUE                           10:0 /* RWXUF */
#define NV_PGRAPH_DMA_B_XLATE_INST                       0x00401080 /* RW-4R */
#define NV_PGRAPH_DMA_B_XLATE_INST_VALUE                       15:0 /* RWXUF */
#define NV_PGRAPH_DMA_B_CONTROL                          0x00401084 /* RW-4R */
#define NV_PGRAPH_DMA_B_CONTROL_PAGE_TABLE                    12:12 /* RWIVF */
#define NV_PGRAPH_DMA_B_CONTROL_PAGE_TABLE_NOT_PRESENT   0x00000000 /* RWI-V */
#define NV_PGRAPH_DMA_B_CONTROL_PAGE_TABLE_PRESENT       0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_B_CONTROL_PAGE_ENTRY                    13:13 /* RWXVF */
#define NV_PGRAPH_DMA_B_CONTROL_PAGE_ENTRY_NOT_LINEAR    0x00000000 /* RW--V */
#define NV_PGRAPH_DMA_B_CONTROL_PAGE_ENTRY_LINEAR        0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_B_CONTROL_TARGET_NODE                   17:16 /* RWXUF */
#define NV_PGRAPH_DMA_B_CONTROL_TARGET_NODE_NVM          0x00000000 /* RW--V */
#define NV_PGRAPH_DMA_B_CONTROL_TARGET_NODE_NVM_TILED    0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_B_CONTROL_TARGET_NODE_PCI          0x00000002 /* RW--V */
#define NV_PGRAPH_DMA_B_CONTROL_TARGET_NODE_AGP          0x00000003 /* RW--V */
#define NV_PGRAPH_DMA_B_CONTROL_ADJUST                        31:20 /* RWXUF */
#define NV_PGRAPH_DMA_B_LIMIT                            0x00401088 /* RW-4R */
#define NV_PGRAPH_DMA_B_LIMIT_OFFSET                           31:0 /* RWXUF */
#define NV_PGRAPH_DMA_B_TLB_PTE                          0x0040108C /* RW-4R */
#define NV_PGRAPH_DMA_B_TLB_PTE_ACCESS                          1:1 /* RWXVF */
#define NV_PGRAPH_DMA_B_TLB_PTE_ACCESS_READ_ONLY         0x00000000 /* RW--V */
#define NV_PGRAPH_DMA_B_TLB_PTE_ACCESS_READ_WRITE        0x00000001 /* RW--V */
#define NV_PGRAPH_DMA_B_TLB_PTE_FRAME_ADDRESS                 31:12 /* RWXUF */
#define NV_PGRAPH_DMA_B_TLB_TAG                          0x00401090 /* RW-4R */
#define NV_PGRAPH_DMA_B_TLB_TAG_ADDRESS                       31:12 /* RWXUF */
#define NV_PGRAPH_DMA_B_ADJ_OFFSET                       0x00401094 /* RW-4R */
#define NV_PGRAPH_DMA_B_ADJ_OFFSET_VALUE                       31:0 /* RWXUF */
#define NV_PGRAPH_DMA_B_OFFSET                           0x00401098 /* RW-4R */
#define NV_PGRAPH_DMA_B_OFFSET_VALUE                           31:0 /* RWXUF */
#define NV_PGRAPH_DMA_B_SIZE                             0x0040109C /* RW-4R */
#define NV_PGRAPH_DMA_B_SIZE_VALUE                             24:0 /* RWXUF */
#define NV_PGRAPH_DMA_B_Y_SIZE                           0x004010A0 /* RW-4R */
#define NV_PGRAPH_DMA_B_Y_SIZE_VALUE                           10:0 /* RWXUF */
/* dev_int_graph.ref */
#define NV_IGRAPH                             0x0001FFFF:0x00000000 /* RW--D */
#define NV_IGRAPH_ATTR_OFFSET(i)                 (0x00000000+(i)*8) /* RW-4A */
#define NV_IGRAPH_ATTR_OFFSET__SIZE_1                            16 /*       */
#define NV_IGRAPH_ATTR_OFFSET_OFFSET_FIELD                     27:0 /* RWX-F */
#define NV_IGRAPH_ATTR_OFFSET_CTXDMA_FIELD                    31:31 /* RWX-F */
#define NV_IGRAPH_ATTR_OFFSET_CTXDMA_VTXA                       0x0 /* RW--V */
#define NV_IGRAPH_ATTR_OFFSET_CTXDMA_VTXB                       0x1 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT(i)                 (0x00000004+(i)*8) /* RW-4A */
#define NV_IGRAPH_ATTR_FORMAT__SIZE_1                            16 /*       */
#define NV_IGRAPH_ATTR_FORMAT_TYPE_FIELD                        2:0 /* RWX-F */
#define NV_IGRAPH_ATTR_FORMAT_TYPE_UB_D3D                       0x0 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_TYPE_S1                           0x1 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_TYPE_F                            0x2 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_TYPE_UB_OGL                       0x4 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_TYPE_S32K                         0x5 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_TYPE_CMP                          0x6 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_SIZE_FIELD                        6:4 /* RWI-F */
#define NV_IGRAPH_ATTR_FORMAT_DISABLED                          0x0 /* RWI-V */
#define NV_IGRAPH_ATTR_FORMAT_SIZE_1                            0x1 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_SIZE_2                            0x2 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_SIZE_3                            0x3 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_SIZE_4                            0x4 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_SIZE_3W                           0x7 /* RW--V */
#define NV_IGRAPH_ATTR_FORMAT_STRIDE_FIELD                     15:8 /* RWX-F */
#define NV_IGRAPH_ATTR_FORMAT_CMP_DATA_0H_FIELD                10:0 /* RWI-F */
#define NV_IGRAPH_ATTR_FORMAT_CMP_DATA_0L_FIELD                 9:5 /* RWI-F */
#define NV_IGRAPH_ATTR_FORMAT_CMP_DATA_1H_FIELD               21:11 /* RWI-F */
#define NV_IGRAPH_ATTR_FORMAT_CMP_DATA_1L_FIELD               20:16 /* RWI-F */
#define NV_IGRAPH_ATTR_FORMAT_CMP_DATA_2H_FIELD               31:22 /* RWI-F */
#define NV_IGRAPH_ATTR_FORMAT_CMP_DATA_2L_FIELD               30:25 /* RWI-F */
#define NV_IGRAPH_PRIM_TYPE                              0x00000080 /* RW-4R */
#define NV_IGRAPH_PRIM_TYPE_FIELD                               3:0 /* RWI-F */
#define NV_IGRAPH_PRIM_TYPE_NONE                                0x0 /* RWI-V */
#define NV_IGRAPH_PRIM_TYPE_POINT                               0x1 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_LINE                                0x2 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_LINEL                               0x3 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_LINES                               0x4 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_TRI                                 0x5 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_TRIS                                0x6 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_TRIF                                0x7 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_QUAD                                0x8 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_QUADS                               0x9 /* RW--V */
#define NV_IGRAPH_PRIM_TYPE_POLY                                0xA /* RW--V */
#define NV_IGRAPH_EDGE_FLAG                              0x00000084 /* RW-4R */
#define NV_IGRAPH_EDGE_FLAG_FIELD                               0:0 /* RWI-F */
#define NV_IGRAPH_EDGE_FLAG_INIT                                0x1 /* RWI-V */
#define NV_IGRAPH_INLINE_VTX_0                           0x000000C0 /* -W-4R */
#define NV_IGRAPH_INLINE_VTX_0_FIELD                           31:0 /* -W--F */
#define NV_IGRAPH_INLINE_VTX_1                           0x000000C4 /* -W-4R */
#define NV_IGRAPH_INLINE_VTX_1_FIELD                           31:0 /* -W--F */
#define NV_IGRAPH_IDX32_0                                0x000000C8 /* -W-4R */
#define NV_IGRAPH_IDX32_0_FIELD                                19:0 /* -W--F */
#define NV_IGRAPH_IDX32_0_SIGN_FIELD                          31:31 /* -W--F */
#define NV_IGRAPH_IDX32_1                                0x000000CC /* -W-4R */
#define NV_IGRAPH_IDX32_1_FIELD                                19:0 /* -W--F */
#define NV_IGRAPH_IDX32_1_SIGN_FIELD                          31:31 /* -W--F */
#define NV_IGRAPH_VERTEX_FILE_SIZE                             0x18 /* ----T */
#define NV_IGRAPH_MAX_REL_INDEX                                 0xf /* ----T */
#define NV_IGRAPH_IDX16_0                                0x000000D0 /* -W-4R */
#define NV_IGRAPH_IDX16_0_0_FIELD                              15:0 /* -W--F */
#define NV_IGRAPH_IDX16_0_1_FIELD                             31:16 /* -W--F */
#define NV_IGRAPH_IDX16_1                                0x000000D4 /* -W-4R */
#define NV_IGRAPH_IDX16_1_0_FIELD                              15:0 /* -W--F */
#define NV_IGRAPH_IDX16_1_1_FIELD                             31:16 /* -W--F */
#define NV_IGRAPH_IDX_ARRAY                              0x000000D8 /* -W-4R */
#define NV_IGRAPH_IDX_ARRAY_BASE_FIELD                         19:0 /* -W--F */
#define NV_IGRAPH_IDX_ARRAY_COUNT_FIELD                       31:24 /* -W--F */
#define NV_IGRAPH_INVALIDATE_CACHE                       0x000000F8 /* -W-4R */
#define NV_IGRAPH_INVALIDATE_CACHE_FIELD                        0:0 /* -W--F */
#define NV_IGRAPH_INVALIDATE_FILE                        0x000000FC /* -W-4R */
#define NV_IGRAPH_INVALIDATE_FILE_FIELD                         0:0 /* -W--F */
#define NV_IGRAPH_STATE_BUNDLE(i)                (0x00000800+(i)*4) /* -W-4A */
#define NV_IGRAPH_STATE_BUNDLE__SIZE_1                          512 /*       */
#define NV_IGRAPH_STATE_BUNDLE_FIELD                           31:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_1UB(i)                   (0x1100+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_1UB__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_1UB_FIELD                            7:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_2UB(i)                   (0x1200+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_2UB__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_2UB_0_FIELD                          7:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_2UB_1_FIELD                         15:8 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3UB(i)                   (0x1300+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_3UB__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_3UB_0_FIELD                          7:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3UB_1_FIELD                         15:8 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3UB_2_FIELD                        23:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4UB(i)                   (0x1000+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_4UB__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_4UB_0_FIELD                          7:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4UB_1_FIELD                         15:8 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4UB_2_FIELD                        23:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4UB_3_FIELD                        31:24 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_1S32K(i)                 (0x1500+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_1S32K__SIZE_1                         16 /*       */
#define NV_IGRAPH_VTX_ATTR_1S32K_FIELD                         15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_2S32K(i)                 (0x1600+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_2S32K__SIZE_1                         16 /*       */
#define NV_IGRAPH_VTX_ATTR_2S32K_0_FIELD                       15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_2S32K_1_FIELD                      31:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3S32K(i)                 (0x1700+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_3S32K__SIZE_1                         16 /*       */
#define NV_IGRAPH_VTX_ATTR_3S32K_0_FIELD                       15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3S32K_1_FIELD                      31:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4S32K(i)                 (0x1400+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_4S32K__SIZE_1                         16 /*       */
#define NV_IGRAPH_VTX_ATTR_4S32K_0_FIELD                       15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4S32K_1_FIELD                      31:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_1S1(i)                   (0x1900+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_1S1__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_1S1_FIELD                           15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_2S1(i)                   (0x1A00+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_2S1__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_2S1_0_FIELD                         15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_2S1_1_FIELD                        31:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3S1(i)                   (0x1B00+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_3S1__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_3S1_0_FIELD                         15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3S1_1_FIELD                        31:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4S1(i)                   (0x1800+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_4S1__SIZE_1                           16 /*       */
#define NV_IGRAPH_VTX_ATTR_4S1_0_FIELD                         15:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4S1_1_FIELD                        31:16 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_1F(i)                    (0x1D00+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_1F__SIZE_1                            16 /*       */
#define NV_IGRAPH_VTX_ATTR_1F_FIELD                            31:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_2F(i)                    (0x1E00+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_2F__SIZE_1                            16 /*       */
#define NV_IGRAPH_VTX_ATTR_2F_FIELD                            31:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_3F(i)                    (0x1F00+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_3F__SIZE_1                            16 /*       */
#define NV_IGRAPH_VTX_ATTR_3F_FIELD                            31:0 /* -W--F */
#define NV_IGRAPH_VTX_ATTR_4F(i)                    (0x1C00+(i)*16) /* -W-4A */
#define NV_IGRAPH_VTX_ATTR_4F__SIZE_1                            16 /*       */
#define NV_IGRAPH_VTX_ATTR_4F_FIELD                            31:0 /* -W--F */
#define NV_IGRAPH_FD(i)                              (0x4000+(i)*4) /* RW-4A */
#define NV_IGRAPH_FD__SIZE_1                                   4096 /*       */
#define NV_IGRAPH_FD_FIELD                                     31:0 /* -W--F */
#define NV_IGRAPH_FD2PIPE(c,a)                 (((c)<<10)|(a))      /* ----T */
#define NV_IGRAPH_PIPE2FD_CMD(a)                     (((a)>>10)&31) /* ----T */
#define NV_IGRAPH_PIPE2FD_ADDR(a)                       ((a)&0x3ff) /* ----T */
#define NV_IGRAPH_FD_CMD_END_PATCH                             0x16 /* ----T */
#define NV_IGRAPH_FD_CMD_END_TRANSITION                        0x17 /* ----T */
#define NV_IGRAPH_FD_CMD_REG                                   0x1a /* ----T */
#define NV_IGRAPH_FD_CMD_GUARD                                 0x19 /* ----T */
#define NV_IGRAPH_FD_CMD_COEFF                                 0x18 /* ----T */
#define NV_IGRAPH_FD_CMD_FLUSH                                 0x1f /* ----T */
#define NV_IGRAPH_FD_CMD_GO                                    0x11 /* ----T */
#define NV_IGRAPH_FD_CMD_NOP                                   0x10 /* ----T */
#define NV_IGRAPH_FD_REG_PATCH0                                0x00 /* ----T */
#define NV_IGRAPH_FD_REG_PATCH1                                0x04 /* ----T */
#define NV_IGRAPH_FD_REG_PATCH2                                0x10 /* ----T */
#define NV_IGRAPH_FD_REG_PATCH3                                0x14 /* ----T */
#define NV_IGRAPH_FD_REG_SWATCH                                0x20 /* ----T */
#define NV_IGRAPH_FD_REG_TRANSITION0                           0x00 /* ----T */
#define NV_IGRAPH_FD_REG_TRANSITION1                           0x04 /* ----T */
#define NV_IGRAPH_FD_REG_TRANSITION2                           0x30 /* ----T */
#define NV_IGRAPH_FD_REG_TRANSITION_CONTROL                    0x40 /* ----T */
#define NV_IGRAPH_FD_REG_CURVE                                 0x50 /* ----T */
#define NV_IGRAPH_XF(i)                             (0x10000+(i)*4) /* RW-4A */
#define NV_IGRAPH_XF__SIZE_1                                  16384 /*       */
#define NV_IGRAPH_XF_FIELD                                     31:0 /* -W--F */
#define NV_IGRAPH_XF_CMD_NOP                                    0x0 /* ----T */
#define NV_IGRAPH_XF_CMD_VAB                                    0x1 /* ----T */
#define NV_IGRAPH_XF_CMD_XFPR                                   0x2 /* ----T */
#define NV_IGRAPH_XF_CMD_LTPR                                   0x3 /* ----T */
#define NV_IGRAPH_XF_CMD_IBUF                                   0x4 /* ----T */
#define NV_IGRAPH_XF_CMD_PASSTHR                                0x5 /* ----T */
#define NV_IGRAPH_XF_CMD_PROSTART                               0x6 /* ----T */
#define NV_IGRAPH_XF_CMD_MODE                                   0x7 /* ----T */
#define NV_IGRAPH_XF_CMD_RSVD_8                                 0x8 /* ----T */
#define NV_IGRAPH_XF_CMD_XFCTX                                  0x9 /* ----T */
#define NV_IGRAPH_XF_CMD_LTCTX                                  0xa /* ----T */
#define NV_IGRAPH_XF_CMD_LTC0                                   0xb /* ----T */
#define NV_IGRAPH_XF_CMD_LTC1                                   0xc /* ----T */
#define NV_IGRAPH_XF_CMD_LTC2                                   0xd /* ----T */
#define NV_IGRAPH_XF_CMD_LTC3                                   0xe /* ----T */
#define NV_IGRAPH_XF_CMD_SYNC                                   0xf /* ----T */
#define NV_IGRAPH_XF_VAB_POS                                   0x00 /* ----T */
#define NV_IGRAPH_XF_VAB_WGHT                                  0x01 /* ----T */
#define NV_IGRAPH_XF_VAB_NRM                                   0x02 /* ----T */
#define NV_IGRAPH_XF_VAB_DIFF                                  0x03 /* ----T */
#define NV_IGRAPH_XF_VAB_SPEC                                  0x04 /* ----T */
#define NV_IGRAPH_XF_VAB_FOG                                   0x05 /* ----T */
#define NV_IGRAPH_XF_VAB_PS                                    0x06 /* ----T */
#define NV_IGRAPH_XF_VAB_BDIFF                                 0x07 /* ----T */
#define NV_IGRAPH_XF_VAB_BSPEC                                 0x08 /* ----T */
#define NV_IGRAPH_XF_VAB_TXT0                                  0x09 /* ----T */
#define NV_IGRAPH_XF_VAB_TXT1                                  0x0a /* ----T */
#define NV_IGRAPH_XF_VAB_TXT2                                  0x0b /* ----T */
#define NV_IGRAPH_XF_VAB_TXT3                                  0x0c /* ----T */
#define NV_IGRAPH_XF_VAB_TXT4                                  0x0d /* ----T */
#define NV_IGRAPH_XF_VAB_TXT5                                  0x0e /* ----T */
#define NV_IGRAPH_XF_VAB_TXT6                                  0x0f /* ----T */
#define NV_IGRAPH_XF_VAB_PASS                                  0x10 /* ----T */
#define NV_IGRAPH_XF_VAB_INVAL                                 0x1f /* ----T */
#define NV_IGRAPH_XF_VAB_0                                     0x00 /* ----T */
#define NV_IGRAPH_XF_VAB_1                                     0x01 /* ----T */
#define NV_IGRAPH_XF_VAB_2                                     0x02 /* ----T */
#define NV_IGRAPH_XF_VAB_3                                     0x03 /* ----T */
#define NV_IGRAPH_XF_VAB_4                                     0x04 /* ----T */
#define NV_IGRAPH_XF_VAB_5                                     0x05 /* ----T */
#define NV_IGRAPH_XF_VAB_6                                     0x06 /* ----T */
#define NV_IGRAPH_XF_VAB_7                                     0x07 /* ----T */
#define NV_IGRAPH_XF_VAB_8                                     0x08 /* ----T */
#define NV_IGRAPH_XF_VAB_9                                     0x09 /* ----T */
#define NV_IGRAPH_XF_VAB_A                                     0x0a /* ----T */
#define NV_IGRAPH_XF_VAB_B                                     0x0b /* ----T */
#define NV_IGRAPH_XF_VAB_C                                     0x0c /* ----T */
#define NV_IGRAPH_XF_VAB_D                                     0x0d /* ----T */
#define NV_IGRAPH_XF_VAB_E                                     0x0e /* ----T */
#define NV_IGRAPH_XF_VAB_F                                     0x0f /* ----T */
#define NV_IGRAPH_XF_OUT_POS                                   0x00 /* ----T */
#define NV_IGRAPH_XF_OUT_RSVD1                                 0x01 /* ----T */
#define NV_IGRAPH_XF_OUT_RSVD2                                 0x02 /* ----T */
#define NV_IGRAPH_XF_OUT_DIFF                                  0x03 /* ----T */
#define NV_IGRAPH_XF_OUT_SPEC                                  0x04 /* ----T */
#define NV_IGRAPH_XF_OUT_FOG                                   0x05 /* ----T */
#define NV_IGRAPH_XF_OUT_PS                                    0x06 /* ----T */
#define NV_IGRAPH_XF_OUT_BDIFF                                 0x07 /* ----T */
#define NV_IGRAPH_XF_OUT_BSPEC                                 0x08 /* ----T */
#define NV_IGRAPH_XF_OUT_TXT0                                  0x09 /* ----T */
#define NV_IGRAPH_XF_OUT_TXT1                                  0x0a /* ----T */
#define NV_IGRAPH_XF_OUT_TXT2                                  0x0b /* ----T */
#define NV_IGRAPH_XF_OUT_TXT3                                  0x0c /* ----T */
#define NV_IGRAPH_XF_OUT_TXT4                                  0x0d /* ----T */
#define NV_IGRAPH_XF_OUT_TXT5                                  0x0e /* ----T */
#define NV_IGRAPH_XF_OUT_TXT6                                  0x0f /* ----T */
#define NV_IGRAPH_XF_OUT_PASS                                  0x10 /* ----T */
#define NV_IGRAPH_XF_OUT_NOP                                   0x1f /* ----T */
#define NV_IGRAPH_XF_XFCTX_CMAT0                               0x00 /* ----T */
#define NV_IGRAPH_XF_XFCTX_PMAT0                               0x04 /* ----T */
#define NV_IGRAPH_XF_XFCTX_MMAT0                               0x08 /* ----T */
#define NV_IGRAPH_XF_XFCTX_IMMAT0                              0x0c /* ----T */
#define NV_IGRAPH_XF_XFCTX_MMAT1                               0x10 /* ----T */
#define NV_IGRAPH_XF_XFCTX_IMMAT1                              0x14 /* ----T */
#define NV_IGRAPH_XF_XFCTX_MMAT2                               0x18 /* ----T */
#define NV_IGRAPH_XF_XFCTX_IMMAT2                              0x1c /* ----T */
#define NV_IGRAPH_XF_XFCTX_MMAT3                               0x20 /* ----T */
#define NV_IGRAPH_XF_XFCTX_IMMAT3                              0x24 /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT0                                0x28 /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT1                                0x29 /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT2                                0x2a /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT3                                0x2b /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT4                                0x2c /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT5                                0x2d /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT6                                0x2e /* ----T */
#define NV_IGRAPH_XF_XFCTX_LIT7                                0x2f /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT0                               0x30 /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT1                               0x31 /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT2                               0x32 /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT3                               0x33 /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT4                               0x34 /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT5                               0x35 /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT6                               0x36 /* ----T */
#define NV_IGRAPH_XF_XFCTX_SPOT7                               0x37 /* ----T */
#define NV_IGRAPH_XF_XFCTX_EYEP                                0x38 /* ----T */
#define NV_IGRAPH_XF_XFCTX_FOG                                 0x39 /* ----T */
#define NV_IGRAPH_XF_XFCTX_VPSCL                               0x3a /* ----T */
#define NV_IGRAPH_XF_XFCTX_VPOFF                               0x3b /* ----T */
#define NV_IGRAPH_XF_XFCTX_CONS0                               0x3c /* ----T */
#define NV_IGRAPH_XF_XFCTX_CONS1                               0x3d /* ----T */
#define NV_IGRAPH_XF_XFCTX_CONS2                               0x3e /* ----T */
#define NV_IGRAPH_XF_XFCTX_CONS3                               0x3f /* ----T */
#define NV_IGRAPH_XF_XFCTX_TG0MAT                              0x40 /* ----T */
#define NV_IGRAPH_XF_XFCTX_T0MAT                               0x44 /* ----T */
#define NV_IGRAPH_XF_XFCTX_TG1MAT                              0x48 /* ----T */
#define NV_IGRAPH_XF_XFCTX_T1MAT                               0x4c /* ----T */
#define NV_IGRAPH_XF_XFCTX_TG2MAT                              0x50 /* ----T */
#define NV_IGRAPH_XF_XFCTX_T2MAT                               0x54 /* ----T */
#define NV_IGRAPH_XF_XFCTX_TG3MAT                              0x58 /* ----T */
#define NV_IGRAPH_XF_XFCTX_T3MAT                               0x5c /* ----T */
#define NV_IGRAPH_XF_XFCTX_PRSPACE                             0x60 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_AMB                              0x00 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_DIF                              0x01 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_SPC                              0x02 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_K                                0x03 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_SPT                              0x04 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_BAMB                             0x05 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_BDIF                             0x06 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L0_BSPC                             0x07 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_AMB                              0x08 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_DIF                              0x09 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_SPC                              0x0a /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_K                                0x0b /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_SPT                              0x0c /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_BAMB                             0x0d /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_BDIF                             0x0e /* ----T */
#define NV_IGRAPH_XF_LTCTX_L1_BSPC                             0x0f /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_AMB                              0x10 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_DIF                              0x11 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_SPC                              0x12 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_K                                0x13 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_SPT                              0x14 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_BAMB                             0x15 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_BDIF                             0x16 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L2_BSPC                             0x17 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_AMB                              0x18 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_DIF                              0x19 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_SPC                              0x1a /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_K                                0x1b /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_SPT                              0x1c /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_BAMB                             0x1d /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_BDIF                             0x1e /* ----T */
#define NV_IGRAPH_XF_LTCTX_L3_BSPC                             0x1f /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_AMB                              0x20 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_DIF                              0x21 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_SPC                              0x22 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_K                                0x23 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_SPT                              0x24 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_BAMB                             0x25 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_BDIF                             0x26 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L4_BSPC                             0x27 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_AMB                              0x28 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_DIF                              0x29 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_SPC                              0x2a /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_K                                0x2b /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_SPT                              0x2c /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_BAMB                             0x2d /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_BDIF                             0x2e /* ----T */
#define NV_IGRAPH_XF_LTCTX_L5_BSPC                             0x2f /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_AMB                              0x30 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_DIF                              0x31 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_SPC                              0x32 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_K                                0x33 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_SPT                              0x34 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_BAMB                             0x35 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_BDIF                             0x36 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L6_BSPC                             0x37 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_AMB                              0x38 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_DIF                              0x39 /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_SPC                              0x3a /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_K                                0x3b /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_SPT                              0x3c /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_BAMB                             0x3d /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_BDIF                             0x3e /* ----T */
#define NV_IGRAPH_XF_LTCTX_L7_BSPC                             0x3f /* ----T */
#define NV_IGRAPH_XF_LTCTX_EYED                                0x40 /* ----T */
#define NV_IGRAPH_XF_LTCTX_FR_AMB                              0x41 /* ----T */
#define NV_IGRAPH_XF_LTCTX_BR_AMB                              0x42 /* ----T */
#define NV_IGRAPH_XF_LTCTX_CM_COL                              0x43 /* ----T */
#define NV_IGRAPH_XF_LTCTX_BCM_COL                             0x44 /* ----T */
#define NV_IGRAPH_XF_LTCTX_FOG_K                               0x45 /* ----T */
#define NV_IGRAPH_XF_LTCTX_ZERO                                0x46 /* ----T */
#define NV_IGRAPH_XF_LTCTX_PT0                                 0x47 /* ----T */
#define NV_IGRAPH_XF_LTCTX_PT1                                 0x48 /* ----T */
#define NV_IGRAPH_XF_LTCTX_FOGLIN                              0x49 /* ----T */
#define NV_IGRAPH_XF_LTCTX_VPOFFSET                            0x4a /* ----T */
#define NV_IGRAPH_XF_LTCTX_ONE                                 0x4b /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L0_K                               0x00 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L0_SPT                             0x01 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L1_K                               0x02 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L1_SPT                             0x03 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L2_K                               0x04 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L2_SPT                             0x05 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L3_K                               0x06 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L3_SPT                             0x07 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L4_K                               0x08 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L4_SPT                             0x09 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L5_K                               0x0a /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L5_SPT                             0x0b /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L6_K                               0x0c /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L6_SPT                             0x0d /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L7_K                               0x0e /* ----T */
#define NV_IGRAPH_XF_LTCTXA_L7_SPT                             0x0f /* ----T */
#define NV_IGRAPH_XF_LTCTXA_EYED                               0x10 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_FR_AMB                             0x11 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_BR_AMB                             0x12 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_CM_COL                             0x13 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_BCM_COL                            0x14 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_FOG_K                              0x15 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_ZERO                               0x16 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_PT0                                0x17 /* ----T */
#define NV_IGRAPH_XF_LTCTXA_FOGLIN                             0x18 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L0_AMB                             0x00 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L0_DIF                             0x01 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L0_SPC                             0x02 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L0_BAMB                            0x03 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L0_BDIF                            0x04 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L0_BSPC                            0x05 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L1_AMB                             0x06 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L1_DIF                             0x07 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L1_SPC                             0x08 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L1_BAMB                            0x09 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L1_BDIF                            0x0a /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L1_BSPC                            0x0b /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L2_AMB                             0x0c /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L2_DIF                             0x0d /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L2_SPC                             0x0e /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L2_BAMB                            0x0f /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L2_BDIF                            0x10 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L2_BSPC                            0x11 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L3_AMB                             0x12 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L3_DIF                             0x13 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L3_SPC                             0x14 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L3_BAMB                            0x15 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L3_BDIF                            0x16 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L3_BSPC                            0x17 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L4_AMB                             0x18 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L4_DIF                             0x19 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L4_SPC                             0x1a /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L4_BAMB                            0x1b /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L4_BDIF                            0x1c /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L4_BSPC                            0x1d /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L5_AMB                             0x1e /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L5_DIF                             0x1f /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L5_SPC                             0x20 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L5_BAMB                            0x21 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L5_BDIF                            0x22 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L5_BSPC                            0x23 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L6_AMB                             0x24 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L6_DIF                             0x25 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L6_SPC                             0x26 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L6_BAMB                            0x27 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L6_BDIF                            0x28 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L6_BSPC                            0x29 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L7_AMB                             0x2a /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L7_DIF                             0x2b /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L7_SPC                             0x2c /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L7_BAMB                            0x2d /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L7_BDIF                            0x2e /* ----T */
#define NV_IGRAPH_XF_LTCTXB_L7_BSPC                            0x2f /* ----T */
#define NV_IGRAPH_XF_LTCTXB_PT1                                0x30 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_ONE                                0x31 /* ----T */
#define NV_IGRAPH_XF_LTCTXB_VPOFFSET                           0x32 /* ----T */
#define NV_IGRAPH_XF_LTC0_ONE0                                 0x00 /* ----T */
#define NV_IGRAPH_XF_LTC0_MONE                                 0x01 /* ----T */
#define NV_IGRAPH_XF_LTC0_l1                                   0x02 /* ----T */
#define NV_IGRAPH_XF_LTC0_Bl1                                  0x03 /* ----T */
#define NV_IGRAPH_XF_LTC1_ZERO1                                0x00 /* ----T */
#define NV_IGRAPH_XF_LTC1_l0                                   0x01 /* ----T */
#define NV_IGRAPH_XF_LTC1_Bl0                                  0x02 /* ----T */
#define NV_IGRAPH_XF_LTC1_PP                                   0x03 /* ----T */
#define NV_IGRAPH_XF_LTC1_r0                                   0x04 /* ----T */
#define NV_IGRAPH_XF_LTC1_r1                                   0x05 /* ----T */
#define NV_IGRAPH_XF_LTC1_r2                                   0x06 /* ----T */
#define NV_IGRAPH_XF_LTC1_r3                                   0x07 /* ----T */
#define NV_IGRAPH_XF_LTC1_r4                                   0x08 /* ----T */
#define NV_IGRAPH_XF_LTC1_r5                                   0x09 /* ----T */
#define NV_IGRAPH_XF_LTC1_r6                                   0x0a /* ----T */
#define NV_IGRAPH_XF_LTC1_r7                                   0x0b /* ----T */
#define NV_IGRAPH_XF_LTC1_L0                                   0x0c /* ----T */
#define NV_IGRAPH_XF_LTC1_L1                                   0x0d /* ----T */
#define NV_IGRAPH_XF_LTC1_L2                                   0x0e /* ----T */
#define NV_IGRAPH_XF_LTC1_L3                                   0x0f /* ----T */
#define NV_IGRAPH_XF_LTC1_L4                                   0x10 /* ----T */
#define NV_IGRAPH_XF_LTC1_L5                                   0x11 /* ----T */
#define NV_IGRAPH_XF_LTC1_L6                                   0x12 /* ----T */
#define NV_IGRAPH_XF_LTC1_L7                                   0x13 /* ----T */
#define NV_IGRAPH_XF_LTC2_ONE2                                 0x00 /* ----T */
#define NV_IGRAPH_XF_LTC2_m0                                   0x01 /* ----T */
#define NV_IGRAPH_XF_LTC2_Bm0                                  0x02 /* ----T */
#define NV_IGRAPH_XF_LTC2_m1                                   0x03 /* ----T */
#define NV_IGRAPH_XF_LTC2_Bm1                                  0x04 /* ----T */
#define NV_IGRAPH_XF_LTC2_n1                                   0x05 /* ----T */
#define NV_IGRAPH_XF_LTC2_Bn1                                  0x06 /* ----T */
#define NV_IGRAPH_XF_LTC2_M0                                   0x07 /* ----T */
#define NV_IGRAPH_XF_LTC2_M1                                   0x08 /* ----T */
#define NV_IGRAPH_XF_LTC2_M2                                   0x09 /* ----T */
#define NV_IGRAPH_XF_LTC2_M3                                   0x0a /* ----T */
#define NV_IGRAPH_XF_LTC2_M4                                   0x0b /* ----T */
#define NV_IGRAPH_XF_LTC2_M5                                   0x0c /* ----T */
#define NV_IGRAPH_XF_LTC2_M6                                   0x0d /* ----T */
#define NV_IGRAPH_XF_LTC2_M7                                   0x0e /* ----T */
#define NV_IGRAPH_XF_LTC3_ZERO3                                0x00 /* ----T */
#define NV_IGRAPH_XF_LTC3_PPADD                                0x01 /* ----T */
#define NV_IGRAPH_XF_LTC3_n0                                   0x02 /* ----T */
#define NV_IGRAPH_XF_LTC3_Bn0                                  0x03 /* ----T */
#define NV_IGRAPH_XF_LTC3_N0                                   0x04 /* ----T */
#define NV_IGRAPH_XF_LTC3_N1                                   0x05 /* ----T */
#define NV_IGRAPH_XF_LTC3_N2                                   0x06 /* ----T */
#define NV_IGRAPH_XF_LTC3_N3                                   0x07 /* ----T */
#define NV_IGRAPH_XF_LTC3_N4                                   0x08 /* ----T */
#define NV_IGRAPH_XF_LTC3_N5                                   0x09 /* ----T */
#define NV_IGRAPH_XF_LTC3_N6                                   0x0a /* ----T */
#define NV_IGRAPH_XF_LTC3_N7                                   0x0b /* ----T */
#define NV_IGRAPH_XF_LTC3_MATA                                 0x0c /* ----T */
#define NV_IGRAPH_XF_LTC3_BMATA                                0x0d /* ----T */
#define NV_IGRAPH_XF2PIPE(c,a)              ((1<<16)|((c)<<12)|(a)) /* ----T */
#define NV_IGRAPH_PIPE2XF_CMD(a)                    (((a)>>12)&0xf) /* ----T */
#define NV_IGRAPH_PIPE2XF_ADDR(a)                       ((a)&0xfff) /* ----T */
#define NV_IGRAPH_TC_MISSDEBUG_INDEX_SELECT              0x000000E9 /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_SELECT                  0x000000EA /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_CFG0_ADDRESS            0x00000000 /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_CFG1_ADDRESS            0x00000001 /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_SELECT_REQ_ADDRESS      0x00000002 /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_SELECT_REQ_BIT          16:16      /* RWIVF */
#define NV_IGRAPH_TC_MINTFCDEBUG_SELECT_REQ_BIT_DEFAULT  0x0        /* RWI-V */
#define NV_IGRAPH_TC_MINTFCDEBUG_ZOFFSET_ADDRESS         0x00000003 /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_TILE_ADDRESS(i)       (0x0004+(i)) /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_TLIMIT_ADDRESS(i)     (0x000c+(i)) /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_TPITCH_ADDRESS(i)     (0x0014+(i)) /* RW--V */
#define NV_IGRAPH_TC_MINTFCDEBUG_ZCOMP_ADDRESS(i)      (0x0024+(i)) /* RW--V */
#define NV_IGRAPH_TC_RBACKDEBUG_INDEX_SELECT             0x000000EB /* RW--V */
#define NV_IGRAPH_TC_TPA_INDEX_SELECT_FIELD                   24:16 /* RWXVF */
#define NV_IGRAPH_TC_TPA_INDEX_SELECT                    0x000000E0 /* RW--V */
#define NV_IGRAPH_TC_TPB_INDEX_SELECT_FIELD                   24:16 /* RWXVF */
#define NV_IGRAPH_TC_TPB_INDEX_SELECT                    0x000000E1 /* RW--V */
#define NV_IGRAPH_TC_TPA_CLEAR_INDEX_ADDRESS_FIELD             12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_CLEAR_INDEX_ADDRESS                   0x00 /* RW--V */
#define NV_IGRAPH_TC_TPA_CLEAR_FIELD                            0:0 /* -W--F */
#define NV_IGRAPH_TC_TPA_CLEAR_FALSE                     0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_CLEAR_TRUE                      0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_4SEC_INDEX_ADDRESS_FIELD          12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_FRC_4SEC_INDEX_ADDRESS                0x01 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_4SEC_FIELD                         0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_FRC_4SEC_FALSE                  0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_FRC_4SEC_TRUE                   0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_MISS_INDEX_ADDRESS_FIELD          12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_FRC_MISS_INDEX_ADDRESS                0x02 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_MISS_FIELD                         0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_FRC_MISS_FALSE                  0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_FRC_MISS_TRUE                   0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_HIT_INDEX_ADDRESS_FIELD           12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_FRC_HIT_INDEX_ADDRESS                 0x03 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_HIT_FIELD                          0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_FRC_HIT_FALSE                   0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_FRC_HIT_TRUE                    0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_LAST_INDEX_ADDRESS_FIELD          12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_FRC_LAST_INDEX_ADDRESS                0x04 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_LAST_FIELD                         0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_FRC_LAST_FALSE                  0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_FRC_LAST_TRUE                   0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_GT4_INDEX_ADDRESS_FIELD           12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_FRC_GT4_INDEX_ADDRESS                 0x05 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_GT4_FIELD                          0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_FRC_GT4_FALSE                   0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_FRC_GT4_ON                      0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_FRC_GT4_OFF                     0x00000002 /* RW--V */
#define NV_IGRAPH_TC_TPA_NOSYNC_INDEX_ADDRESS_FIELD            12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_NOSYNC_INDEX_ADDRESS                  0x06 /* RW--V */
#define NV_IGRAPH_TC_TPA_NOSYNC_FIELD                           0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_NOSYNC_FALSE                    0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_NOSYNC_TRUE                     0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_INUSE_SEL_INDEX_ADDRESS_FIELD         12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_INUSE_SEL_INDEX_ADDRESS               0x07 /* RW--V */
#define NV_IGRAPH_TC_TPA_INUSE_SEL_FIELD                        1:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_INUSE_SEL_NOP                   0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_TPA_INUSE_SEL_HIT                   0x00000001 /* RW--V */
#define NV_IGRAPH_TC_TPA_INUSE_SEL_SECMISS               0x00000002 /* RW--V */
#define NV_IGRAPH_TC_TPA_INUSE_SEL_REPMISS               0x00000003 /* RW--V */
#define NV_IGRAPH_TC_TPA_DONE0_INDEX_ADDRESS_FIELD             12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_DONE0_INDEX_ADDRESS                   0x08 /* RW--V */
#define NV_IGRAPH_TC_TPA_DONE0_FIELD                           31:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_DONE1_INDEX_ADDRESS_FIELD             12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_DONE1_INDEX_ADDRESS                   0x09 /* RW--V */
#define NV_IGRAPH_TC_TPA_DONE1_FIELD                           31:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_DONE2_INDEX_ADDRESS_FIELD             12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_DONE2_INDEX_ADDRESS                   0x0A /* RW--V */
#define NV_IGRAPH_TC_TPA_DONE2_FIELD                           31:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_DONE3_INDEX_ADDRESS_FIELD             12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_DONE3_INDEX_ADDRESS                   0x0B /* RW--V */
#define NV_IGRAPH_TC_TPA_DONE3_FIELD                           31:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_INDEX_ADDRESS_FIELD          12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_INDEX_ADDRESS                0x0C /* RW--V */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_WAVEID_FIELD                  7:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_WAVEID_PEND_FIELD            15:8 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_SYNC0_FIELD                 16:16 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_SYNC1_FIELD                 17:17 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_SYNC2_FIELD                 18:18 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_SYNC3_FIELD                 19:19 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_VALID0_FIELD                20:20 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_VALID1_FIELD                21:21 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_VALID2_FIELD                22:22 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_VALID3_FIELD                23:23 /* RWIVF */
#define NV_IGRAPH_TC_TPA_SYNCWAVE_PEND_FIELD                  28:28 /* RWIVF */
#define NV_IGRAPH_TC_TPA_IDLE_INDEX_ADDRESS_FIELD              12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_IDLE_INDEX_ADDRESS                    0x0D /* RW--V */
#define NV_IGRAPH_TC_TPA_IDLE_X_FIELD                           0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_IDLE_T_FIELD                           4:4 /* RWIVF */
#define NV_IGRAPH_TC_TPA_IDLE_R_FIELD                           8:8 /* RWIVF */
#define NV_IGRAPH_TC_TPA_IDLE_D_FIELD                         12:12 /* RWIVF */
#define NV_IGRAPH_TC_TPA_IDLE_W_FIELD                         16:16 /* RWIVF */
#define NV_IGRAPH_TC_TPA_IDLE_TP_FIELD                        20:20 /* RWIVF */
#define NV_IGRAPH_TC_TPA_RBFRDEPTH_INDEX_ADDRESS_FIELD         12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_RBFRDEPTH_INDEX_ADDRESS               0x0E /* RW--V */
#define NV_IGRAPH_TC_TPA_RBFRDEPTH_FIELD                        5:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_RBFRDEPTH_DEFAULT                     0x24 /* RWI-V */
#define NV_IGRAPH_TC_TPA_XBFR_SSTEP_INDEX_ADDRESS_FIELD        12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_XBFR_SSTEP_INDEX_ADDRESS              0x0F /* RW--V */
#define NV_IGRAPH_TC_TPA_XBFR_SSTEP_FIELD                       0:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_XBFR_SSTEP_FALSE                       0x0 /* RWI-V */
#define NV_IGRAPH_TC_TPA_XBFR_SSTEP_TRUE                        0x1 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_INDEX_ADDRESS_FIELD         12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_INDEX_ADDRESS               0x10 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_FIELD                        3:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_REPLACE                      0x0 /* RWI-V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_SECMISS                      0x1 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_HIT                          0x2 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_REGLD                        0x3 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_NOP                          0x4 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_PIXEL                        0x5 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_GT4                          0x6 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_COLLISION                    0x7 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMSTATSEL_ISAGP                        0x8 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMTEXIDSEL_INDEX_ADDRESS_FIELD        12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_PMTEXIDSEL_INDEX_ADDRESS              0x11 /* RW--V */
#define NV_IGRAPH_TC_TPA_PMTEXIDSEL_FIELD                       3:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_PMTEXIDSEL_DEFAULT                     0xf /* RW--V */
#define NV_IGRAPH_TC_TPA_XBFRDEPTH_INDEX_ADDRESS_FIELD         12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_XBFRDEPTH_INDEX_ADDRESS               0x12 /* RW--V */
#define NV_IGRAPH_TC_TPA_XBFRDEPTH_FIELD                        4:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_XBFRDEPTH_DEFAULT                     0x1f /* RWI-V */
#define NV_IGRAPH_TC_TPA_WAVEIDDEPTH_INDEX_ADDRESS_FIELD       12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_WAVEIDDEPTH_INDEX_ADDRESS             0x13 /* RW--V */
#define NV_IGRAPH_TC_TPA_WAVEIDDEPTH_FIELD                      4:0 /* RWIVF */
#define NV_IGRAPH_TC_TPA_WAVEIDDEPTH_DEFAULT                   0x16 /* RWI-V */
#define NV_IGRAPH_TC_TPA_DXTDITH_INDEX_ADDRESS_FIELD           12:2 /* RWXVF */
#define NV_IGRAPH_TC_TPA_DXTDITH_INDEX_ADDRESS                 0x14 /* RW--V */
#define NV_IGRAPH_TC_TPA_DXTDITH_FIELD                          0:0 /* -W--F */
#define NV_IGRAPH_TC_TPA_DXTDITH_FALSE                   0x00000000 /* RW--V */
#define NV_IGRAPH_TC_TPA_DXTDITH_TRUE                    0x00000001 /* RWI-V */
#define NV_IGRAPH_TC_DXP_INDEX_SELECT_FIELD                      24:16 /* RWXVF */
#define NV_IGRAPH_TC_DXP_INDEX_SELECT                       0x000000DF /* RW--V */
#define NV_IGRAPH_TC_DXP_BLOCKWEN_INDEX_ADDRESS_FIELD             12:2 /* RWXVF */
#define NV_IGRAPH_TC_DXP_BLOCKWEN_INDEX_ADDRESS                   0x00 /* RW--V */
#define NV_IGRAPH_TC_DXP_BLOCKWEN_FIELD                            0:0 /* -W--F */
#define NV_IGRAPH_TC_DXP_BLOCKWEN_FALSE                     0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_DXP_BLOCKWEN_TRUE                      0x00000001 /* RW--V */
#define NV_IGRAPH_TC_DXP_DLYRDAFTERWR_INDEX_ADDRESS_FIELD         12:2 /* RWXVF */
#define NV_IGRAPH_TC_DXP_DLYRDAFTERWR_INDEX_ADDRESS               0x01 /* RW--V */
#define NV_IGRAPH_TC_DXP_DLYRDAFTERWR_FIELD                        0:0 /* -W--F */
#define NV_IGRAPH_TC_DXP_DLYRDAFTERWR_FALSE                 0x00000000 /* RWI-V */
#define NV_IGRAPH_TC_DXP_DLYRDAFTERWR_TRUE                  0x00000001 /* RW--V */
#define NV_IGRAPH_TC_DXP_DXTDITH_INDEX_ADDRESS_FIELD              12:2 /* RWXVF */
#define NV_IGRAPH_TC_DXP_DXTDITH_INDEX_ADDRESS                    0x02 /* RW--V */
#define NV_IGRAPH_TC_DXP_DXTDITH_FIELD                             0:0 /* -W--F */
#define NV_IGRAPH_TC_DXP_DXTDITH_FALSE                      0x00000000 /* RW--V */
#define NV_IGRAPH_TC_DXP_DXTDITH_TRUE                       0x00000001 /* RWI-V */
#define NV_IGRAPH_TC_SHLAT_INDEX_SELECT_FIELD                 24:16 /* RWXVF */
#define NV_IGRAPH_TC_SHLAT_INDEX_SELECT                       0x000000EC /* RW--V */
#define NV_IGRAPH_TC_SHLAT_HIWATER_INDEX_ADDRESS_FIELD         12:2 /* RWXVF */
#define NV_IGRAPH_TC_SHLAT_HIWATER_INDEX_ADDRESS               0x00 /* RW--V */
#define NV_IGRAPH_TC_SHLAT_HIWATER_FIELD                        7:0 /* RWIVF */
#define NV_IGRAPH_TC_SHLAT_HIWATER_DEFAULT                     0x77 /* RWI-V */
/* dev_video.ref */
#define NV_PVIDEO                             0x00008FFF:0x00008000 /* RW--D */
#define NV_PVIDEO_DEBUG_0                                0x00008080 /* RW-4R */
#define NV_PVIDEO_DEBUG_0_HLF_RATE_ROW_RD                       0:0 /* RWIVF */
#define NV_PVIDEO_DEBUG_0_HLF_RATE_ROW_RD_DISABLED       0x00000000 /* RWI-V */
#define NV_PVIDEO_DEBUG_0_HLF_RATE_ROW_RD_ENABLED        0x00000001 /* RW--V */
#define NV_PVIDEO_DEBUG_0_LIMIT_CHECK                           4:4 /* RWIVF */
#define NV_PVIDEO_DEBUG_0_LIMIT_CHECK_DISABLED           0x00000000 /* RW--V */
#define NV_PVIDEO_DEBUG_0_LIMIT_CHECK_ENABLED            0x00000001 /* RWI-V */
#define NV_PVIDEO_DEBUG_0_HUE_FOLD                              8:8 /* RWIVF */
#define NV_PVIDEO_DEBUG_0_HUE_FOLD_DISABLED              0x00000000 /* RWI-V */
#define NV_PVIDEO_DEBUG_0_HUE_FOLD_ENABLED               0x00000001 /* RW--V */
#define NV_PVIDEO_DEBUG_0_ODD_FIELD_TOP                       12:12 /* RWIVF */
#define NV_PVIDEO_DEBUG_0_ODD_FIELD_TOP_FALSE            0x00000000 /* RWI-V */
#define NV_PVIDEO_DEBUG_0_ODD_FIELD_TOP_TRUE             0x00000001 /* RW--V */
#define NV_PVIDEO_DEBUG_1                                0x00008084 /* RW-4R */
#define NV_PVIDEO_DEBUG_1_REQ_DELAY                            10:0 /* RWIVF */
#define NV_PVIDEO_DEBUG_1_REQ_DELAY_DEFAULT              0x00000064 /* RWI-V */
#define NV_PVIDEO_DEBUG_1_REQ_DELAY_INIT                 0x00000050 /* RW--V */
#define NV_PVIDEO_DEBUG_2                                0x00008088 /* RW-4R */
#define NV_PVIDEO_DEBUG_2_BURST1                               11:6 /* RWIVF */
#define NV_PVIDEO_DEBUG_2_BURST1_DEFAULT                 0x00000008 /* RWI-V */
#define NV_PVIDEO_DEBUG_2_BURST1_INIT                    0x00000010 /* RW--V */
#define NV_PVIDEO_DEBUG_2_BURST2                              27:22 /* RWIVF */
#define NV_PVIDEO_DEBUG_2_BURST2_DEFAULT                 0x00000010 /* RWI-V */
#define NV_PVIDEO_DEBUG_2_BURST2_INIT                    0x00000018 /* RW--V */
#define NV_PVIDEO_DEBUG_3                                0x0000808c /* RW-4R */
#define NV_PVIDEO_DEBUG_3_WATER_MARK1                          11:4 /* RWIVF */
#define NV_PVIDEO_DEBUG_3_WATER_MARK1_DEFAULT            0x0000004b /* RWI-V */
#define NV_PVIDEO_DEBUG_3_WATER_MARK1_INIT               0x00000040 /* RW--V */
#define NV_PVIDEO_DEBUG_3_WATER_MARK2                         27:20 /* RWIVF */
#define NV_PVIDEO_DEBUG_3_WATER_MARK2_DEFAULT            0x0000003b /* RWI-V */
#define NV_PVIDEO_DEBUG_3_WATER_MARK2_INIT               0x00000040 /* RW--V */
#define NV_PVIDEO_DEBUG_4                                0x00008090 /* RW-4R */
#define NV_PVIDEO_DEBUG_4_V_COEFF_B                            23:5 /* RWIVF */
#define NV_PVIDEO_DEBUG_4_V_COEFF_B_DEFAULT              0x0000b505 /* RWI-V */
#define NV_PVIDEO_DEBUG_4_V_COEFF_B_ALWAYS               0x00000000 /* RW--V */
#define NV_PVIDEO_DEBUG_4_V_COEFF_B_NEVER                0x0007ffff /* RW--V */
#define NV_PVIDEO_DEBUG_5                                0x00008094 /* RW-4R */
#define NV_PVIDEO_DEBUG_5_H_L_COEFF_D                          21:4 /* RWIVF */
#define NV_PVIDEO_DEBUG_5_H_L_COEFF_D_DEFAULT            0x00018816 /* RWI-V */
#define NV_PVIDEO_DEBUG_5_H_L_COEFF_D_ALWAYS             0x00000000 /* RW--V */
#define NV_PVIDEO_DEBUG_5_H_L_COEFF_D_NEVER              0x0003ffff /* RW--V */
#define NV_PVIDEO_DEBUG_6                                0x00008098 /* RW-4R */
#define NV_PVIDEO_DEBUG_6_H_L_COEFF_C                          21:4 /* RWIVF */
#define NV_PVIDEO_DEBUG_6_H_L_COEFF_C_DEFAULT            0x00012c73 /* RWI-V */
#define NV_PVIDEO_DEBUG_6_H_L_COEFF_C_ALWAYS             0x00000000 /* RW--V */
#define NV_PVIDEO_DEBUG_6_H_L_COEFF_C_NEVER              0x0003ffff /* RW--V */
#define NV_PVIDEO_DEBUG_7                                0x0000809c /* RW-4R */
#define NV_PVIDEO_DEBUG_7_H_L_COEFF_B                          21:4 /* RWIVF */
#define NV_PVIDEO_DEBUG_7_H_L_COEFF_B_DEFAULT            0x00000000 /* RWI-V */
#define NV_PVIDEO_DEBUG_7_H_L_COEFF_B_ALWAYS             0x00000000 /* RW--V */
#define NV_PVIDEO_DEBUG_7_H_L_COEFF_B_NEVER              0x0003ffff /* RW--V */
#define NV_PVIDEO_DEBUG_8                                0x000080a0 /* RW-4R */
#define NV_PVIDEO_DEBUG_8_PIPE_FILL                            10:4 /* RWIVF */
#define NV_PVIDEO_DEBUG_8_PIPE_FILL_DEFAULT              0x0000000b /* RWI-V */
#define NV_PVIDEO_DEBUG_9                                0x000080a4 /* RW-4R */
#define NV_PVIDEO_DEBUG_9_FIFO_A_UNDERFLOW                      0:0 /* RWIVF */
#define NV_PVIDEO_DEBUG_9_FIFO_A_UNDERFLOW_FALSE         0x00000000 /* R-I-V */
#define NV_PVIDEO_DEBUG_9_FIFO_A_UNDERFLOW_TRUE          0x00000001 /* R---V */
#define NV_PVIDEO_DEBUG_9_FIFO_A_UNDERFLOW_RESET         0x00000001 /* -W--C */
#define NV_PVIDEO_DEBUG_9_FIFO_A_OVERFLOW                       4:4 /* RWIVF */
#define NV_PVIDEO_DEBUG_9_FIFO_A_OVERFLOW_FALSE          0x00000000 /* R-I-V */
#define NV_PVIDEO_DEBUG_9_FIFO_A_OVERFLOW_TRUE           0x00000001 /* R---V */
#define NV_PVIDEO_DEBUG_9_FIFO_A_OVERFLOW_RESET          0x00000001 /* -W--C */
#define NV_PVIDEO_DEBUG_9_FIFO_B_UNDERFLOW                      8:8 /* RWIVF */
#define NV_PVIDEO_DEBUG_9_FIFO_B_UNDERFLOW_FALSE         0x00000000 /* R-I-V */
#define NV_PVIDEO_DEBUG_9_FIFO_B_UNDERFLOW_TRUE          0x00000001 /* R---V */
#define NV_PVIDEO_DEBUG_9_FIFO_B_UNDERFLOW_RESET         0x00000001 /* -W--C */
#define NV_PVIDEO_DEBUG_9_FIFO_B_OVERFLOW                     12:12 /* RWIVF */
#define NV_PVIDEO_DEBUG_9_FIFO_B_OVERFLOW_FALSE          0x00000000 /* R-I-V */
#define NV_PVIDEO_DEBUG_9_FIFO_B_OVERFLOW_TRUE           0x00000001 /* R---V */
#define NV_PVIDEO_DEBUG_9_FIFO_B_OVERFLOW_RESET          0x00000001 /* -W--C */
#define NV_PVIDEO_DEBUG_10                               0x000080a8 /* R--4R */
#define NV_PVIDEO_DEBUG_10_SCREEN_LINE                         12:0 /* R-XVF */
#define NV_PVIDEO_DEBUG_10_SCREEN_LINE_FIRST             0x00000000 /* R---V */
#define NV_PVIDEO_DEBUG_10_SCAN_COUNT                         20:16 /* R-XVF */
#define NV_PVIDEO_DEBUG_10_SCAN_COUNT_FIRST              0x00000000 /* R---V */
#define NV_PVIDEO_DEBUG_10_SCAN_COUNT_OVERFLOW           0x00000010 /* R---V */
#define NV_PVIDEO_DEBUG_10_SCANNING                           25:24 /* R-XVF */
#define NV_PVIDEO_DEBUG_10_SCANNING_NEITHER              0x00000000 /* R---V */
#define NV_PVIDEO_DEBUG_10_SCANNING_BUFFER_0             0x00000002 /* R---V */
#define NV_PVIDEO_DEBUG_10_SCANNING_BUFFER_1             0x00000003 /* R---V */
#define NV_PVIDEO_INTR                                   0x00008100 /* RW-4R */
#define NV_PVIDEO_INTR_BUFFER_0                                 0:0 /* RWIVF */
#define NV_PVIDEO_INTR_BUFFER_0_NOT_PENDING              0x00000000 /* R-I-V */
#define NV_PVIDEO_INTR_BUFFER_0_PENDING                  0x00000001 /* R---V */
#define NV_PVIDEO_INTR_BUFFER_0_RESET                    0x00000001 /* -W--C */
#define NV_PVIDEO_INTR_BUFFER_1                                 4:4 /* RWIVF */
#define NV_PVIDEO_INTR_BUFFER_1_NOT_PENDING              0x00000000 /* R-I-V */
#define NV_PVIDEO_INTR_BUFFER_1_PENDING                  0x00000001 /* R---V */
#define NV_PVIDEO_INTR_BUFFER_1_RESET                    0x00000001 /* -W--C */
#define NV_PVIDEO_INTR_REASON                            0x00008104 /* R--4R */
#define NV_PVIDEO_INTR_REASON_BUFFER_0                          0:0 /* R-IVF */
#define NV_PVIDEO_INTR_REASON_BUFFER_0_NOTIFICATION      0x00000000 /* R-I-V */
#define NV_PVIDEO_INTR_REASON_BUFFER_0_PROTECTION_FAULT  0x00000001 /* R---V */
#define NV_PVIDEO_INTR_REASON_BUFFER_1                          4:4 /* R-IVF */
#define NV_PVIDEO_INTR_REASON_BUFFER_1_NOTIFICATION      0x00000000 /* R-I-V */
#define NV_PVIDEO_INTR_REASON_BUFFER_1_PROTECTION_FAULT  0x00000001 /* R---V */
#define NV_PVIDEO_INTR_EN                                0x00008140 /* RW-4R */
#define NV_PVIDEO_INTR_EN_BUFFER_0                              0:0 /* RWIVF */
#define NV_PVIDEO_INTR_EN_BUFFER_0_DISABLED              0x00000000 /* RWI-V */
#define NV_PVIDEO_INTR_EN_BUFFER_0_ENABLED               0x00000001 /* RW--V */
#define NV_PVIDEO_INTR_EN_BUFFER_1                              4:4 /* RWIVF */
#define NV_PVIDEO_INTR_EN_BUFFER_1_DISABLED              0x00000000 /* RWI-V */
#define NV_PVIDEO_INTR_EN_BUFFER_1_ENABLED               0x00000001 /* RW--V */
#define NV_PVIDEO_BUFFER                                 0x00008700 /* RW-4R */
#define NV_PVIDEO_BUFFER_0_USE                                  0:0 /* RWIVF */
#define NV_PVIDEO_BUFFER_0_USE_NOT_PENDING               0x00000000 /* R-I-V */
#define NV_PVIDEO_BUFFER_0_USE_PENDING                   0x00000001 /* R---V */
#define NV_PVIDEO_BUFFER_0_USE_SET                       0x00000001 /* -W--S */
#define NV_PVIDEO_BUFFER_1_USE                                  4:4 /* RWIVF */
#define NV_PVIDEO_BUFFER_1_USE_NOT_PENDING               0x00000000 /* R-I-V */
#define NV_PVIDEO_BUFFER_1_USE_PENDING                   0x00000001 /* R---V */
#define NV_PVIDEO_BUFFER_1_USE_SET                       0x00000001 /* -W--S */
#define NV_PVIDEO_STOP                                   0x00008704 /* RW-4R */
#define NV_PVIDEO_STOP_OVERLAY                                  0:0 /* RWIVF */
#define NV_PVIDEO_STOP_OVERLAY_INACTIVE                  0x00000000 /* RWI-V */
#define NV_PVIDEO_STOP_OVERLAY_ACTIVE                    0x00000001 /* RW--V */
#define NV_PVIDEO_STOP_METHOD                                   4:4 /* RWIVF */
#define NV_PVIDEO_STOP_METHOD_IMMEDIATELY                0x00000000 /* RW--V */
#define NV_PVIDEO_STOP_METHOD_NORMALLY                   0x00000001 /* RWI-V */
#define NV_PVIDEO_BASE(i)                        (0x00008900+(i)*4) /* RW-4A */
#define NV_PVIDEO_BASE__SIZE_1                                    2 /*       */
#define NV_PVIDEO_BASE_VALUE                                   31:6 /* RWXVF */
#define NV_PVIDEO_LIMIT(i)                       (0x00008908+(i)*4) /* RW-4A */
#define NV_PVIDEO_LIMIT__SIZE_1                                   2 /*       */
#define NV_PVIDEO_LIMIT_VALUE                                  31:6 /* RWXVF */
#define NV_PVIDEO_LIMIT_VALUE_MAX                        0xffffffff /* RW--V */
#define NV_PVIDEO_LUMINANCE(i)                   (0x00008910+(i)*4) /* RW-4A */
#define NV_PVIDEO_LUMINANCE__SIZE_1                               2 /*       */
#define NV_PVIDEO_LUMINANCE_CONTRAST                           12:3 /* RWXVF */
#define NV_PVIDEO_LUMINANCE_CONTRAST_47                  0x00000200 /* RWC-V */
#define NV_PVIDEO_LUMINANCE_CONTRAST_83                  0x00000200 /* RWC-V */
#define NV_PVIDEO_LUMINANCE_CONTRAST_UNITY               0x00000200 /* RW--V */
#define NV_PVIDEO_LUMINANCE_BRIGHTNESS                        25:16 /* RWXVF */
#define NV_PVIDEO_LUMINANCE_BRIGHTNESS_47                0x00000000 /* RWC-V */
#define NV_PVIDEO_LUMINANCE_BRIGHTNESS_83                0x00000000 /* RWC-V */
#define NV_PVIDEO_LUMINANCE_BRIGHTNESS_UNITY             0x00000000 /* RW--V */
#define NV_PVIDEO_CHROMINANCE(i)                 (0x00008918+(i)*4) /* RW-4A */
#define NV_PVIDEO_CHROMINANCE__SIZE_1                             2 /*       */
#define NV_PVIDEO_CHROMINANCE_SAT_COS                          13:2 /* RWXVF */
#define NV_PVIDEO_CHROMINANCE_SAT_COS_47                 0x00000400 /* RWC-V */
#define NV_PVIDEO_CHROMINANCE_SAT_COS_83                 0x00000400 /* RWC-V */
#define NV_PVIDEO_CHROMINANCE_SAT_COS_UNITY              0x00000400 /* RW--V */
#define NV_PVIDEO_CHROMINANCE_SAT_SIN                         29:18 /* RWXVF */
#define NV_PVIDEO_CHROMINANCE_SAT_SIN_47                 0x00000000 /* RWC-V */
#define NV_PVIDEO_CHROMINANCE_SAT_SIN_83                 0x00000000 /* RWC-V */
#define NV_PVIDEO_CHROMINANCE_SAT_SIN_UNITY              0x00000000 /* RW--V */
#define NV_PVIDEO_OFFSET(i)                      (0x00008920+(i)*4) /* RW-4A */
#define NV_PVIDEO_OFFSET__SIZE_1                                  2 /*       */
#define NV_PVIDEO_OFFSET_VALUE                                 31:6 /* RWXVF */
#define NV_PVIDEO_OFFSET_VALUE_47                        0x00000000 /* RWC-V */
#define NV_PVIDEO_OFFSET_VALUE_83                        0x00000000 /* RWC-V */
#define NV_PVIDEO_OFFSET_VALUE_ZERO                      0x00000000 /* RW--V */
#define NV_PVIDEO_SIZE_IN(i)                     (0x00008928+(i)*4) /* RW-4A */
#define NV_PVIDEO_SIZE_IN__SIZE_1                                 2 /*       */
#define NV_PVIDEO_SIZE_IN_WIDTH                                10:1 /* RWXVF */
#define NV_PVIDEO_SIZE_IN_WIDTH_47                       0x00000001 /* RWC-V */
#define NV_PVIDEO_SIZE_IN_WIDTH_83                       0x00000001 /* RWC-V */
#define NV_PVIDEO_SIZE_IN_HEIGHT                              26:16 /* RWXVF */
#define NV_PVIDEO_SIZE_IN_HEIGHT_47                      0x00000002 /* RWC-V */
#define NV_PVIDEO_SIZE_IN_HEIGHT_83                      0x00000002 /* RWC-V */
#define NV_PVIDEO_POINT_IN(i)                    (0x00008930+(i)*4) /* RW-4A */
#define NV_PVIDEO_POINT_IN__SIZE_1                                2 /*       */
#define NV_PVIDEO_POINT_IN_S                                   14:0 /* RWXVF */
#define NV_PVIDEO_POINT_IN_S_47                          0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_IN_S_83                          0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_IN_S_ORIGIN                      0x00000000 /* RW--V */
#define NV_PVIDEO_POINT_IN_T                                  31:17 /* RWXVF */
#define NV_PVIDEO_POINT_IN_T_47                          0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_IN_T_83                          0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_IN_T_ORIGIN                      0x00000000 /* RW--V */
#define NV_PVIDEO_DS_DX(i)                       (0x00008938+(i)*4) /* RW-4A */
#define NV_PVIDEO_DS_DX__SIZE_1                                   2 /*       */
#define NV_PVIDEO_DS_DX_RATIO                                  23:3 /* RWXVF */
#define NV_PVIDEO_DS_DX_RATIO_47                         0x00000000 /* RWC-V */
#define NV_PVIDEO_DS_DX_RATIO_83                         0x00000000 /* RWC-V */
#define NV_PVIDEO_DS_DX_RATIO_UNITY                      0x00020000 /* RW--V */
#define NV_PVIDEO_DT_DY(i)                       (0x00008940+(i)*4) /* RW-4A */
#define NV_PVIDEO_DT_DY__SIZE_1                                   2 /*       */
#define NV_PVIDEO_DT_DY_RATIO                                  23:4 /* RWXVF */
#define NV_PVIDEO_DT_DY_RATIO_47                         0x00000000 /* RWC-V */
#define NV_PVIDEO_DT_DY_RATIO_83                         0x00000000 /* RWC-V */
#define NV_PVIDEO_DT_DY_RATIO_UNITY                      0x00010000 /* RW--V */
#define NV_PVIDEO_POINT_OUT(i)                   (0x00008948+(i)*4) /* RW-4A */
#define NV_PVIDEO_POINT_OUT__SIZE_1                               2 /*       */
#define NV_PVIDEO_POINT_OUT_X                                  11:0 /* RWXVF */
#define NV_PVIDEO_POINT_OUT_X_47                         0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_OUT_X_83                         0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_OUT_X_ORIGIN                     0x00000000 /* RW--V */
#define NV_PVIDEO_POINT_OUT_Y                                 27:16 /* RWXVF */
#define NV_PVIDEO_POINT_OUT_Y_47                         0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_OUT_Y_83                         0x00000000 /* RWC-V */
#define NV_PVIDEO_POINT_OUT_Y_ORIGIN                     0x00000000 /* RW--V */
#define NV_PVIDEO_SIZE_OUT(i)                    (0x00008950+(i)*4) /* RW-4A */
#define NV_PVIDEO_SIZE_OUT__SIZE_1                                2 /*       */
#define NV_PVIDEO_SIZE_OUT_WIDTH                               11:0 /* RWXVF */
#define NV_PVIDEO_SIZE_OUT_WIDTH_47                      0x00000000 /* RWC-V */
#define NV_PVIDEO_SIZE_OUT_WIDTH_83                      0x00000000 /* RWC-V */
#define NV_PVIDEO_SIZE_OUT_HEIGHT                             27:16 /* RWXVF */
#define NV_PVIDEO_SIZE_OUT_HEIGHT_47                     0x00000000 /* RWC-V */
#define NV_PVIDEO_SIZE_OUT_HEIGHT_83                     0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT(i)                      (0x00008958+(i)*4) /* RW-4A */
#define NV_PVIDEO_FORMAT__SIZE_1                                  2 /*       */
#define NV_PVIDEO_FORMAT_PITCH                                 12:6 /* RWXVF */
#define NV_PVIDEO_FORMAT_PITCH_47                        0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT_PITCH_83                        0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT_COLOR                                17:16 /* RWXVF */
#define NV_PVIDEO_FORMAT_COLOR_47                        0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT_COLOR_83                        0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT_COLOR_LE_YB8CR8YA8CB8           0x00000000 /* RW--V */
#define NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8           0x00000001 /* RW--V */
#define NV_PVIDEO_FORMAT_COLOR_LE_EYB8ECR8EYA8ECB8       0x00000002 /* RW--V */
#define NV_PVIDEO_FORMAT_COLOR_LE_ECR8EYB8ECB8EYA8       0x00000003 /* RW--V */
#define NV_PVIDEO_FORMAT_DISPLAY                              20:20 /* RWXVF */
#define NV_PVIDEO_FORMAT_DISPLAY_47                      0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT_DISPLAY_83                      0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT_DISPLAY_ALWAYS                  0x00000000 /* RW--V */
#define NV_PVIDEO_FORMAT_DISPLAY_COLOR_KEY_EQUAL         0x00000001 /* RW--V */
#define NV_PVIDEO_FORMAT_MATRIX                               24:24 /* RWXVF */
#define NV_PVIDEO_FORMAT_MATRIX_ITURBT601                0x00000000 /* RW--V */
#define NV_PVIDEO_FORMAT_MATRIX_ITURBT709                0x00000001 /* RW--V */
#define NV_PVIDEO_FORMAT_FIELD                                28:28 /* RWXVF */
#define NV_PVIDEO_FORMAT_FIELD_2A                        0x00000000 /* RWC-V */
#define NV_PVIDEO_FORMAT_FIELD_TOP                       0x00000000 /* RW--V */
#define NV_PVIDEO_FORMAT_FIELD_BOTTOM                    0x00000001 /* RW--V */
#define NV_PVIDEO_COLOR_KEY                              0x00008b00 /* RW-4R */
#define NV_PVIDEO_COLOR_KEY_VALUE                              31:0 /* RWXVF */
#define NV_PVIDEO_COLOR_KEY_VALUE_47                     0x00000000 /* RWC-V */
#define NV_PVIDEO_COLOR_KEY_VALUE_83                     0x00000000 /* RWC-V */
#define NV_PVIDEO_COLOR_KEY_VALUE_DONT_CARE              0x00000000 /* RW--V */
#define NV_PVIDEO_TEST                                   0x00008d00 /* RW-4R */
#define NV_PVIDEO_TEST_MODE                                     0:0 /* RWIVF */
#define NV_PVIDEO_TEST_MODE_DISABLE                      0x00000000 /* RWI-V */
#define NV_PVIDEO_TEST_MODE_ENABLE                       0x00000001 /* RW--V */
#define NV_PVIDEO_TEST_ADDRESS                                 15:8 /* RWXVF */
#define NV_PVIDEO_TST_WRITE(i)                   (0x00008d10+(i)*4) /* -W-4A */
#define NV_PVIDEO_TST_WRITE__SIZE_1                              12 /*       */
#define NV_PVIDEO_TST_WRITE_VALUE                              31:0 /* -WXVF */
#define NV_PVIDEO_TST_READ(i)                    (0x00008d40+(i)*4) /* R--4A */
#define NV_PVIDEO_TST_READ__SIZE_1                               12 /*       */
#define NV_PVIDEO_TST_READ_VALUE                               31:0 /* R-XVF */
#define NV_PVIDEO_RCR                                    0x00008d70 /* RW-4R */
#define NV_PVIDEO_RCR_RNDM_REQ                                  7:0 /* RWIVF */
#define NV_PVIDEO_RCR_RNDM_REQ_NONE                      0x00000000 /* RWI-V */
#define NV_PVIDEO_RCR_RNDM_REQ_4B                        0x00000001 /* RW--V */
#define NV_PVIDEO_RCR_RNDM_REQ_8B                        0x00000003 /* RW--V */
#define NV_PVIDEO_RCR_RNDM_REQ_16B                       0x00000007 /* RW--V */
#define NV_PVIDEO_RCR_RNDM_REQ_32B                       0x0000000f /* RW--V */
#define NV_PVIDEO_RCR_RNDM_REQ_64B                       0x0000001f /* RW--V */
#define NV_PVIDEO_RCR_RNDM_REQ_128B                      0x0000003f /* RW--V */
#define NV_PVIDEO_RCR_RNDM_REQ_256B                      0x0000007f /* RW--V */
#define NV_PVIDEO_RCR_RNDM_REQ_512B                      0x000000ff /* RW--V */
#define NV_PVIDEO_RCR_MBI                                     16:16 /* RWIVF */
#define NV_PVIDEO_RCR_MBI_DISABLE                        0x00000000 /* RWI-V */
#define NV_PVIDEO_RCR_MBI_ENABLE                         0x00000001 /* RW--V */
/* dev_multichip_bridge.ref */
#define NV_PBRIDGE                            0x0000CFFF:0x0000C000 /* RW--D */
#define NV_PBRIDGE_SYS_CONFIG                            0x0000C800 /* R-X4R */
#define NV_PBRIDGE_SYS_CONFIG_NUM_DEVICES                       2:0 /* R-XVF */
#define NV_PBRIDGE_SYS_CONFIG_DEVICE_NUM                        6:4 /* R-XVF */
#define NV_PBRIDGE_SYS_CONFIG_NUM_DOWNSTREAM_DEVICES           10:8 /* R-XVF */
#define NV_PBRIDGE_SYS_CONFIG_TYPE                            12:12 /* R-XVF */
#define NV_PBRIDGE_SYS_CONFIG_TYPE_INTEGRATED            0x00000000 /* RW--V */
#define NV_PBRIDGE_SYS_CONFIG_TYPE_STANDALONE            0x00000001 /* RW--V */
#define NV_PBRIDGE_ARBITER                               0x0000C810 /* RWI4R */
#define NV_PBRIDGE_ARBITER_BRG_XACTIONS                         3:0 /* RWIVF */
#define NV_PBRIDGE_ARBITER_BRG_XACTIONS_DEFAULT          0x00000004 /* RWI-V */
#define NV_PBRIDGE_ARBITER_BRG_PRIORITY                         7:4 /* RWIVF */
#define NV_PBRIDGE_ARBITER_BRG_PRIORITY_DEFAULT          0x00000002 /* RWI-V */
#define NV_PBRIDGE_ARBITER_LOC_XACTIONS                        11:8 /* RWIVF */
#define NV_PBRIDGE_ARBITER_LOC_XACTIONS_DEFAULT          0x00000004 /* RWI-V */
#define NV_PBRIDGE_ARBITER_LOC_PRIORITY                       15:12 /* RWIVF */
#define NV_PBRIDGE_ARBITER_LOC_PRIORITY_DEFAULT          0x00000001 /* RWI-V */
#define NV_PBRIDGE_ARBITER_REM_XACTIONS                       19:16 /* RWIVF */
#define NV_PBRIDGE_ARBITER_REM_XACTIONS_DEFAULT          0x00000004 /* RWI-V */
#define NV_PBRIDGE_ARBITER_REM_PRIORITY                       23:20 /* RWIVF */
#define NV_PBRIDGE_ARBITER_REM_PRIORITY_DEFAULT          0x00000001 /* RWI-V */
#define NV_PBRIDGE_REDIRECT_RANGE_MIN                    0x0000C900 /* RWI4R */
#define NV_PBRIDGE_REDIRECT_RANGE_MIN_ADDR                     31:6 /* RWIVF */
#define NV_PBRIDGE_REDIRECT_RANGE_MIN_ADDR_ZERO          0x00000000 /* RWI-V */
#define NV_PBRIDGE_REDIRECT_RANGE_MAX                    0x0000C910 /* RWI4R */
#define NV_PBRIDGE_REDIRECT_RANGE_MAX_ADDR                     31:6 /* RWIVF */
#define NV_PBRIDGE_REDIRECT_RANGE_MAX_ADDR_DISABLE       0x00000000 /* RWI-V */
#define NV_PBRIDGE_REDIRECT_RANGE_MAX_ADDR_ZERO          0x00000000 /* RW--V */
#define NV_PBRIDGE_REDIRECT_LOCAL_MIN                    0x0000C920 /* RWI4R */
#define NV_PBRIDGE_REDIRECT_LOCAL_MIN_ADDR                     31:6 /* RWIVF */
#define NV_PBRIDGE_REDIRECT_LOCAL_MIN_ADDR_ZERO          0x00000000 /* RWI-V */
#define NV_PBRIDGE_REDIRECT_LOCAL_MAX                    0x0000C930 /* RWI4R */
#define NV_PBRIDGE_REDIRECT_LOCAL_MAX_ADDR                     31:6 /* RWIVF */
#define NV_PBRIDGE_REDIRECT_LOCAL_MAX_ADDR_DISABLE       0x00000000 /* RWI-V */
#define NV_PBRIDGE_REDIRECT_LOCAL_MAX_ADDR_ZERO          0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO                                  0x0000CA00 /* RWI4R */
#define NV_PBRIDGE_GPIO_0_OUTPUT                                 0:0 /* RWI-F */
#define NV_PBRIDGE_GPIO_0_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_0_ENABLE                                 1:1 /* R---F */
#define NV_PBRIDGE_GPIO_0_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_0_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_0_INPUT                                  2:2 /* R---F */
#define NV_PBRIDGE_GPIO_1_OUTPUT                                 4:4 /* RWI-F */
#define NV_PBRIDGE_GPIO_1_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_1_ENABLE                                 5:5 /* R---F */
#define NV_PBRIDGE_GPIO_1_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_1_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_1_INPUT                                  6:6 /* R---F */
#define NV_PBRIDGE_GPIO_2_OUTPUT                                 8:8 /* RWI-F */
#define NV_PBRIDGE_GPIO_2_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_2_ENABLE                                 9:9 /* R---F */
#define NV_PBRIDGE_GPIO_2_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_2_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_2_INPUT                                10:10 /* R---F */
#define NV_PBRIDGE_GPIO_3_OUTPUT                               12:12 /* RWI-F */
#define NV_PBRIDGE_GPIO_3_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_3_ENABLE                               13:13 /* R---F */
#define NV_PBRIDGE_GPIO_3_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_3_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_3_INPUT                                14:14 /* R---F */
#define NV_PBRIDGE_GPIO_4_OUTPUT                               16:16 /* RWI-F */
#define NV_PBRIDGE_GPIO_4_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_4_ENABLE                               17:17 /* R---F */
#define NV_PBRIDGE_GPIO_4_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_4_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_4_INPUT                                18:18 /* R---F */
#define NV_PBRIDGE_GPIO_5_OUTPUT                               20:20 /* RWI-F */
#define NV_PBRIDGE_GPIO_5_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_5_ENABLE                               21:21 /* R---F */
#define NV_PBRIDGE_GPIO_5_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_5_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_5_INPUT                                22:22 /* R---F */
#define NV_PBRIDGE_GPIO_6_OUTPUT                               24:24 /* RWI-F */
#define NV_PBRIDGE_GPIO_6_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_6_ENABLE                               25:25 /* R---F */
#define NV_PBRIDGE_GPIO_6_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_6_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_6_INPUT                                26:26 /* R---F */
#define NV_PBRIDGE_GPIO_7_OUTPUT                               28:28 /* RWI-F */
#define NV_PBRIDGE_GPIO_7_OUTPUT_0                        0x00000000 /* RWI-V */
#define NV_PBRIDGE_GPIO_7_ENABLE                               29:29 /* R---F */
#define NV_PBRIDGE_GPIO_7_ENABLE_DISABLE                  0x00000001 /* RWI-V */
#define NV_PBRIDGE_GPIO_7_ENABLE_ENABLE                   0x00000000 /* RW--V */
#define NV_PBRIDGE_GPIO_7_INPUT                                30:30 /* R---F */
/* dev_vga.ref */
#define NV_PRMCIO                             0x00601FFF:0x00601000 /* RW--D */
#define NV_PRMCIO_INP0                                   0x006013c2 /* R--1R */
#define NV_PRMCIO_INP0__MONO                             0x006013ba /* R--1R */
#define NV_PRMCIO_INP0__COLOR                            0x006013da /* R--1R */
#define NV_PRMCIO_INP0__READ_MONO                        0x006013ca /* R--1R */
#define NV_PRMCIO_INP0__WRITE_MONO                       0x006013ba /* -W-1R */
#define NV_PRMCIO_INP0__WRITE_COLOR                      0x006013da /* -W-1R */
#define NV_PRMCIO_ARX                                    0x006013c0 /* RW-1R */
#define NV_PRMCIO_AR_PALETTE__WRITE                      0x006013c0 /* -W-1R */
#define NV_PRMCIO_AR_PALETTE__READ                       0x006013c1 /* R--1R */
#define NV_PRMCIO_AR_MODE__WRITE                         0x006013c0 /* -W-1R */
#define NV_PRMCIO_AR_MODE__READ                          0x006013c1 /* R--1R */
#define NV_PRMCIO_AR_MODE_INDEX                          0x00000010 /*       */
#define NV_PRMCIO_AR_OSCAN__WRITE                        0x006013c0 /* -W-1R */
#define NV_PRMCIO_AR_OSCAN__READ                         0x006013c1 /* R--1R */
#define NV_PRMCIO_AR_OSCAN_INDEX                         0x00000011 /*       */
#define NV_PRMCIO_AR_PLANE__WRITE                        0x006013c0 /* -W-1R */
#define NV_PRMCIO_AR_PLANE__READ                         0x006013c1 /* R--1R */
#define NV_PRMCIO_AR_PLANE_INDEX                         0x00000012 /*       */
#define NV_PRMCIO_AR_HPP__WRITE                          0x006013c0 /* -W-1R */
#define NV_PRMCIO_AR_HPP__READ                           0x006013c1 /* R--1R */
#define NV_PRMCIO_AR_HPP_INDEX                           0x00000013 /*       */
#define NV_PRMCIO_AR_CSEL__WRITE                         0x006013c0 /* -W-1R */
#define NV_PRMCIO_AR_CSEL__READ                          0x006013c1 /* R--1R */
#define NV_PRMCIO_AR_CSEL_INDEX                          0x00000014 /*       */
#define NV_PRMCIO_CRX__MONO                              0x006013b4 /* RW-1R */
#define NV_PRMCIO_CRX__COLOR                             0x006013d4 /* RW-1R */
#define NV_PRMCIO_CR__MONO                               0x006013b5 /* RW-1R */
#define NV_PRMCIO_CR__COLOR                              0x006013d5 /* RW-1R */
#define NV_PRMCIO_CRE__MONO                              0x006013b5 /* RW-1R */
#define NV_PRMCIO_CRE__COLOR                             0x006013d5 /* RW-1R */
/* dev_vga.ref */
#define NV_PCRTC_INTR_0                                  0x00600100 /* RWI4R */
#define NV_PCRTC_INTR_0_VBLANK                                  0:0 /* RWI-F */
#define NV_PCRTC_INTR_0_VBLANK_NOT_PENDING               0x00000000 /* R-I-V */
#define NV_PCRTC_INTR_0_VBLANK_PENDING                   0x00000001 /* R---V */
#define NV_PCRTC_INTR_0_VBLANK_RESET                     0x00000001 /* -W--V */
#define NV_PCRTC_INTR_EN_0                               0x00600140 /* RWI4R */
#define NV_PCRTC_INTR_EN_0_VBLANK                               0:0 /* RWIVF */
#define NV_PCRTC_INTR_EN_0_VBLANK_DISABLED               0x00000000 /* RWI-V */
#define NV_PCRTC_INTR_EN_0_VBLANK_ENABLED                0x00000001 /* RW--V */
#define NV_PCRTC_START                                   0x00600800 /* RWI4R */
#define NV_PCRTC_START_ADDRESS                                 31:2 /* RWI-F */
#define NV_PCRTC_CONFIG                                  0x00600804 /* RWI4R */
#define NV_PCRTC_CONFIG_START_ADDRESS                           2:0 /* RWI-F */
#define NV_PCRTC_CONFIG_START_ADDRESS_VGA                0x00000000 /* RWI-V */
#define NV_PCRTC_CONFIG_START_ADDRESS_NON_VGA            0x00000001 /* RW--V */
#define NV_PCRTC_CONFIG_START_ADDRESS_HSYNC              0x00000002 /* RW--V */
#define NV_PCRTC_CONFIG_ENDIAN                                31:31 /* RWI-F */
#define NV_PCRTC_CONFIG_ENDIAN_LITTLE                    0x00000000 /* RWI-V */
#define NV_PCRTC_CONFIG_ENDIAN_BIG                       0x00000001 /* RWI-V */
#define NV_PCRTC_RASTER                                  0x00600808 /* R-I4R */
#define NV_PCRTC_RASTER_POSITION                               10:0 /* R---F */
#define NV_PCRTC_RASTER_SA_LOAD                               13:12 /* R---F */
#define NV_PCRTC_RASTER_SA_LOAD_DISPLAY                  0x00000000 /* R---V */
#define NV_PCRTC_RASTER_SA_LOAD_BEFORE                   0x00000001 /* R---V */
#define NV_PCRTC_RASTER_SA_LOAD_AFTER                    0x00000002 /* R---V */
#define NV_PCRTC_RASTER_VERT_BLANK                            16:16 /* R---F */
#define NV_PCRTC_RASTER_VERT_BLANK_ACTIVE                0x00000001 /* R---V */
#define NV_PCRTC_RASTER_VERT_BLANK_INACTIVE              0x00000000 /* R---V */
#define NV_PCRTC_RASTER_FIELD                                 20:20 /* R---F */
#define NV_PCRTC_RASTER_FIELD_EVEN                       0x00000000 /* R---V */
#define NV_PCRTC_RASTER_FIELD_ODD                        0x00000001 /* R---V */
#define NV_PCRTC_CURSOR                                  0x0060080c /* RWI4R */
#define NV_PCRTC_CURSOR_ADDRESS                                31:0 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG                           0x00600810 /* RWI4R */
#define NV_PCRTC_CURSOR_CONFIG_ENABLE                           0:0 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG_ENABLE_ENABLE             0x00000001 /* RW--V */
#define NV_PCRTC_CURSOR_CONFIG_ENABLE_DISABLE            0x00000000 /* RWI-V */
#define NV_PCRTC_CURSOR_CONFIG_SCAN_DOUBLE                      4:4 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG_SCAN_DOUBLE_ENABLE        0x00000001 /* RW--V */
#define NV_PCRTC_CURSOR_CONFIG_SCAN_DOUBLE_DISABLE       0x00000000 /* RWI-V */
#define NV_PCRTC_CURSOR_CONFIG_ADDRESS_SPACE                    8:8 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG_ADDRESS_SPACE_PNVM        0x00000001 /* RW--V */
#define NV_PCRTC_CURSOR_CONFIG_ADDRESS_SPACE_PINST       0x00000000 /* RWI-V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_BPP                        12:12 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG_CUR_BPP_16                0x00000000 /* RWI-V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_BPP_32                0x00000001 /* RW--V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_PIXELS                     16:16 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG_CUR_PIXELS_32             0x00000000 /* RWI-V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_PIXELS_64             0x00000001 /* RW--V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_LINES                      27:20 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG_CUR_LINES_32              0x00000020 /* RWI-V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_LINES_64              0x00000040 /* RW--V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_BLEND                      28:28 /* RW--F */
#define NV_PCRTC_CURSOR_CONFIG_CUR_BLEND_ROP             0x00000000 /* RWI-V */
#define NV_PCRTC_CURSOR_CONFIG_CUR_BLEND_ALPHA           0x00000001 /* RW--V */
#define NV_PCRTC_VIP_RASTER                              0x00600814 /* R-I4R */
#define NV_PCRTC_VIP_RASTER_POSITION                           10:0 /* R---F */
#define NV_PCRTC_GPIO                                    0x00600818 /* RWI4R */
#define NV_PCRTC_GPIO_1_OUTPUT                                  0:0 /* RWI-F */
#define NV_PCRTC_GPIO_1_OUTPUT_0                         0x00000000 /* RWI-V */
#define NV_PCRTC_GPIO_1_ENABLE                                  4:4 /* R---F */
#define NV_PCRTC_GPIO_1_ENABLE_DISABLE                   0x00000001 /* RWI-V */
#define NV_PCRTC_GPIO_1_ENABLE_ENABLE                    0x00000000 /* RW--V */
#define NV_PCRTC_GPIO_0_INPUT                                   8:8 /* R---F */
#define NV_PCRTC_GPIO_0_OUTPUT                                16:16 /* RWI-F */
#define NV_PCRTC_GPIO_0_OUTPUT_0                         0x00000000 /* RWI-V */
#define NV_PCRTC_GPIO_0_ENABLE                                20:20 /* R---F */
#define NV_PCRTC_GPIO_0_ENABLE_DISABLE                   0x00000001 /* RWI-V */
#define NV_PCRTC_GPIO_0_ENABLE_ENABLE                    0x00000000 /* RW--V */
#define NV_PCRTC_GPIO_1_INPUT                                 24:24 /* R---F */
#define NV_PCRTC_GPIO_EXT                                0x0060081C /* RWI4R */
#define NV_PCRTC_GPIO_EXT_2_OUTPUT                              0:0 /* RWI-F */
#define NV_PCRTC_GPIO_EXT_2_OUTPUT_0                     0x00000000 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_2_ENABLE                              1:1 /* R---F */
#define NV_PCRTC_GPIO_EXT_2_ENABLE_DISABLE               0x00000001 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_2_ENABLE_ENABLE                0x00000000 /* RW--V */
#define NV_PCRTC_GPIO_EXT_2_INPUT                               2:2 /* R---F */
#define NV_PCRTC_GPIO_EXT_3_OUTPUT                              4:4 /* RWI-F */
#define NV_PCRTC_GPIO_EXT_3_OUTPUT_0                     0x00000000 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_3_ENABLE                              5:5 /* R---F */
#define NV_PCRTC_GPIO_EXT_3_ENABLE_DISABLE               0x00000001 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_3_ENABLE_ENABLE                0x00000000 /* RW--V */
#define NV_PCRTC_GPIO_EXT_3_INPUT                               6:6 /* R---F */
#define NV_PCRTC_GPIO_EXT_4_OUTPUT                              8:8 /* RWI-F */
#define NV_PCRTC_GPIO_EXT_4_OUTPUT_0                     0x00000000 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_4_ENABLE                              9:9 /* R---F */
#define NV_PCRTC_GPIO_EXT_4_ENABLE_DISABLE               0x00000001 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_4_ENABLE_ENABLE                0x00000000 /* RW--V */
#define NV_PCRTC_GPIO_EXT_4_INPUT                             10:10 /* R---F */
#define NV_PCRTC_GPIO_EXT_5_OUTPUT                            12:12 /* RWI-F */
#define NV_PCRTC_GPIO_EXT_5_OUTPUT_0                     0x00000000 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_5_ENABLE                            13:13 /* R---F */
#define NV_PCRTC_GPIO_EXT_5_ENABLE_DISABLE               0x00000001 /* RWI-V */
#define NV_PCRTC_GPIO_EXT_5_ENABLE_ENABLE                0x00000000 /* RW--V */
#define NV_PCRTC_GPIO_EXT_5_INPUT                             14:14 /* R---F */
#define NV_PCRTC_RASTER_START                            0x00600830 /* RWI4R */
#define NV_PCRTC_RASTER_START_VAL                              15:0 /* RW--F */
#define NV_PCRTC_RASTER_POL                                   31:31 /* RW--F */
#define NV_PCRTC_RASTER_POL_IN_RANGE                              0 /* RWI-V */
#define NV_PCRTC_RASTER_POL_OUT_RANGE                             1 /* RW--V */
#define NV_PCRTC_RASTER_STOP                             0x00600834 /* RWI4R */
#define NV_PCRTC_RASTER_STOP_VAL                               15:0 /* RW--F */
#define NV_PCRTC_FIFO_CNTRL                              0x00600838 /* RWI4R */
#define NV_PCRTC_FIFO_CNTRL_ADDRESS                             6:0 /* RW--F */
#define NV_PCRTC_FIFO_CNTRL_RAM                               12:12 /* RW--F */
#define NV_PCRTC_FIFO_CNTR_TESTMODE                           16:16 /* RW--F */
#define NV_PCRTC_FIFO_CNTR_TESTMODE_ENABLE                        1 /* RW--V */
#define NV_PCRTC_FIFO_CNTR_TESTMODE_DISABLE                       0 /* RW--V */
#define NV_PCRTC_FIFO_DATA_0                             0x00600840 /* RWI4R */
#define NV_PCRTC_FIFO_DATA_0_VAL                               31:0 /* RW--F */
#define NV_PCRTC_FIFO_DATA_1                             0x00600844 /* RWI4R */
#define NV_PCRTC_FIFO_DATA_1_VAL                               31:0 /* RW--F */
#define NV_PCRTC_FIFO_DATA_2                             0x00600848 /* RWI4R */
#define NV_PCRTC_FIFO_DATA_2_VAL                               31:0 /* RW--F */
#define NV_PCRTC_FIFO_DATA_3                             0x0060084c /* RWI4R */
#define NV_PCRTC_FIFO_DATA_3_VAL                               31:0 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL                             0x00600860 /* RWI4R */
#define NV_PCRTC_ENGINE_CTRL_GPIO                               0:0 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL_GPIO_DEFAULT                0x00000000 /* RWI-F */
#define NV_PCRTC_ENGINE_CTRL_GPIO_ENABLE                 0x00000001 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL_I2C                                4:4 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL_I2C_DEFAULT                 0x00000000 /* RWI-F */
#define NV_PCRTC_ENGINE_CTRL_I2C_ENABLE                  0x00000001 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL_TV                                 8:8 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL_TV_DEFAULT                  0x00000000 /* RWI-F */
#define NV_PCRTC_ENGINE_CTRL_TV_ENABLE                   0x00000001 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL_VS                               12:12 /* RW--F */
#define NV_PCRTC_ENGINE_CTRL_VS_DEFAULT                  0x00000000 /* RWI-F */
#define NV_PCRTC_ENGINE_CTRL_VS_ENABLE                   0x00000001 /* RW--F */
/* dev_vga.ref */
#define NV_CIO                                          0x3DF:0x3B0 /* ----D */
#define NV_CIO_INP0                                      0x000003c2 /* R--1R */
#define NV_CIO_INP0__MONO                                0x000003ba /* R--1R */
#define NV_CIO_INP0__COLOR                               0x000003da /* R--1R */
#define NV_CIO_INP0__READ_MONO                           0x000003ca /* R--1R */
#define NV_CIO_INP0__WRITE_MONO                          0x000003ba /* -W-1R */
#define NV_CIO_INP0__WRITE_COLOR                         0x000003da /* -W-1R */
#define NV_CIO_ARX                                       0x000003c0 /* RW-1R */
#define NV_CIO_AR_PALETTE__WRITE                         0x000003c0 /* -W-1R */
#define NV_CIO_AR_PALETTE__READ                          0x000003c1 /* R--1R */
#define NV_CIO_AR_MODE__WRITE                            0x000003c0 /* -W-1R */
#define NV_CIO_AR_MODE__READ                             0x000003c1 /* R--1R */
#define NV_CIO_AR_MODE_INDEX                             0x00000010 /*       */
#define NV_CIO_AR_OSCAN__WRITE                           0x000003c0 /* -W-1R */
#define NV_CIO_AR_OSCAN__READ                            0x000003c1 /* R--1R */
#define NV_CIO_AR_OSCAN_INDEX                            0x00000011 /*       */
#define NV_CIO_AR_PLANE__WRITE                           0x000003c0 /* -W-1R */
#define NV_CIO_AR_PLANE__READ                            0x000003c1 /* R--1R */
#define NV_CIO_AR_PLANE_INDEX                            0x00000012 /*       */
#define NV_CIO_AR_HPP__WRITE                             0x000003c0 /* -W-1R */
#define NV_CIO_AR_HPP__READ                              0x000003c1 /* R--1R */
#define NV_CIO_AR_HPP_INDEX                              0x00000013 /*       */
#define NV_CIO_AR_CSEL__WRITE                            0x000003c0 /* -W-1R */
#define NV_CIO_AR_CSEL__READ                             0x000003c1 /* R--1R */
#define NV_CIO_AR_CSEL_INDEX                             0x00000014 /*       */
#define NV_CIO_CRX__MONO                                 0x000003b4 /* RW-1R */
#define NV_CIO_CRX__COLOR                                0x000003d4 /* RW-1R */
#define NV_CIO_CR__MONO                                  0x000003b5 /* RW-1R */
#define NV_CIO_CR__COLOR                                 0x000003d5 /* RW-1R */
#define NV_CIO_CR_HDT_INDEX                              0x00000000 /*       */
#define NV_CIO_CR_HDE_INDEX                              0x00000001 /*       */
#define NV_CIO_CR_HBS_INDEX                              0x00000002 /*       */
#define NV_CIO_CR_HBE_INDEX                              0x00000003 /*       */
#define NV_CIO_CR_HBE_4_0                                       4:0 /* RW--F */
#define NV_CIO_CR_HRS_INDEX                              0x00000004 /*       */
#define NV_CIO_CR_HRE_INDEX                              0x00000005 /*       */
#define NV_CIO_CR_HRE_HBE_5                                     7:7 /* RW--F */
#define NV_CIO_CR_HRE_4_0                                       4:0 /* RW--F */
#define NV_CIO_CR_VDT_INDEX                              0x00000006 /*       */
#define NV_CIO_CR_OVL_INDEX                              0x00000007 /*       */
#define NV_CIO_CR_OVL_VDE_8                                     1:1 /* RW--F */
#define NV_CIO_CR_OVL_VDE_9                                     6:6 /* RW--F */
#define NV_CIO_CR_OVL_VDT_8                                     0:0 /* RW--F */
#define NV_CIO_CR_OVL_VDT_9                                     5:5 /* RW--F */
#define NV_CIO_CR_OVL_VBS_8                                     3:3 /* RW--F */
#define NV_CIO_CR_OVL_VRS_8                                     2:2 /* RW--F */
#define NV_CIO_CR_OVL_VRS_9                                     7:7 /* RW--F */
#define NV_CIO_CR_RSAL_INDEX                             0x00000008 /*       */
#define NV_CIO_CR_RSAL_PANNING                                  6:5 /* RW--F */
#define NV_CIO_CR_CELL_HT_INDEX                          0x00000009 /*       */
#define NV_CIO_CR_CELL_HT_SCANDBL                               7:7 /* RW--F */
#define NV_CIO_CR_CELL_HT_VBS_9                                 5:5 /* RW--F */
#define NV_CIO_CR_CURS_ST_INDEX                          0x0000000A /*       */
#define NV_CIO_CR_CURS_END_INDEX                         0x0000000B /*       */
#define NV_CIO_CR_SA_HI_INDEX                            0x0000000C /*       */
#define NV_CIO_CR_SA_LO_INDEX                            0x0000000D /*       */
#define NV_CIO_CR_TCOFF_HI_INDEX                         0x0000000E /*       */
#define NV_CIO_CR_TCOFF_LO_INDEX                         0x0000000F /*       */
#define NV_CIO_CR_VRS_INDEX                              0x00000010 /*       */
#define NV_CIO_CR_VRE_INDEX                              0x00000011 /*       */
#define NV_CIO_CR_VRE_3_0                                       3:0 /* RW--F */
#define NV_CIO_CR_VDE_INDEX                              0x00000012 /*       */
#define NV_CIO_CR_OFFSET_INDEX                           0x00000013 /*       */
#define NV_CIO_CR_ULINE_INDEX                            0x00000014 /*       */
#define NV_CIO_CR_VBS_INDEX                              0x00000015 /*       */
#define NV_CIO_CR_VBE_INDEX                              0x00000016 /*       */
#define NV_CIO_CR_MODE_INDEX                             0x00000017 /*       */
#define NV_CIO_CR_LCOMP_INDEX                            0x00000018 /*       */
#define NV_CIO_CR_GDATA_INDEX                            0x00000022 /*       */
#define NV_CIO_CR_ARFF_INDEX                             0x00000024 /*       */
#define NV_CIO_CR_ARX_INDEX                              0x00000026 /*       */
#define NV_CIO_CRE__MONO                                 0x000003b5 /* RW-1R */
#define NV_CIO_CRE__COLOR                                0x000003d5 /* RW-1R */
#define NV_CIO_CRE_RPC0_INDEX                            0x00000019 /*       */
#define NV_CIO_CRE_RPC0_START                                   4:0 /* RW--F */
#define NV_CIO_CRE_RPC0_OFFSET_10_8                             7:5 /* RW--F */
#define NV_CIO_CRE_RPC1_INDEX                            0x0000001A /*       */
#define NV_CIO_CRE_RPC1_LARGE                                   2:2 /* RW--F */
#define NV_CIO_CRE_FF_INDEX                              0x0000001B /*       */
#define NV_CIO_CRE_FF_BURST                                     2:0 /* RW--F */
#define NV_CIO_CRE_FF_BURST_32                           0x00000000 /* RW--V */
#define NV_CIO_CRE_FF_BURST_64                           0x00000001 /* RW--V */
#define NV_CIO_CRE_FF_BURST_128                          0x00000002 /* RW--V */
#define NV_CIO_CRE_FF_BURST_256                          0x00000003 /* RW--V */
#define NV_CIO_CRE_FF_BURST_512                          0x00000004 /* RW--V */
#define NV_CIO_CRE_FF_BURST_1024                         0x00000005 /* RW--V */
#define NV_CIO_CRE_ENH_INDEX                             0x0000001C /*       */
#define NV_CIO_CRE_PAGE0_INDEX                           0x0000001D /*       */
#define NV_CIO_CRE_PAGE1_INDEX                           0x0000001E /*       */
#define NV_CIO_SR_LOCK_INDEX                             0x0000001F /*       */
#define NV_CIO_SR_UNLOCK_RW_VALUE                        0x00000057 /*       */
#define NV_CIO_SR_UNLOCK_RO_VALUE                        0x00000075 /*       */
#define NV_CIO_SR_LOCK_VALUE                             0x00000099 /*       */
#define NV_CIO_CRE_FFLWM__INDEX                          0x00000020 /*       */
#define NV_CIO_CRE_FFLWM_LWM                                    7:0 /* RW--F */
#define NV_CIO_CRE_FABID_INDEX                           0x00000025 /*       */
#define NV_CIO_CRE_LSR_INDEX                             0x00000025 /*       */
#define NV_CIO_CRE_LSR_SA_27                                    7:7 /* RW--F */
#define NV_CIO_CRE_LSR_SA_26                                    6:6 /* RW--F */
#define NV_CIO_CRE_LSR_VDE_10                                   1:1 /* RW--F */
#define NV_CIO_CRE_LSR_VDT_10                                   0:0 /* RW--F */
#define NV_CIO_CRE_LSR_HBE_6                                    4:4 /* RW--F */
#define NV_CIO_CRE_LSR_VBS_10                                   3:3 /* RW--F */
#define NV_CIO_CRE_LSR_VRS_10                                   2:2 /* RW--F */
#define NV_CIO_CRE_CHIP_ID_INDEX                         0x00000027 /*       */
#define NV_CIO_CRE_PIXEL_INDEX                           0x00000028 /*       */
#define NV_CIO_CRE_PIXEL_TV_ADJ                                 5:3 /* RW--F */
#define NV_CIO_CRE_PIXEL_FORMAT                                 1:0 /* RW--F */
#define NV_CIO_CRE_PIXEL_FORMAT_VGA                      0x00000000 /* RW--V */
#define NV_CIO_CRE_PIXEL_FORMAT_8BPP                     0x00000001 /* RW--V */
#define NV_CIO_CRE_PIXEL_FORMAT_16BPP                    0x00000002 /* RW--V */
#define NV_CIO_CRE_PIXEL_FORMAT_32BPP                    0x00000003 /* RW--V */
#define NV_CIO_CRE_PAGE_OVFL__INDEX                      0x00000029 /*       */
#define NV_CIO_CRE_OSCOL__INDEX                          0x0000002A /*       */
#define NV_CIO_CRE_SCRATCH0__INDEX                       0x0000002B /*       */
#define NV_CIO_CRE_SCRATCH1__INDEX                       0x0000002C /*       */
#define NV_CIO_CRE_HEB__INDEX                            0x0000002D /*       */
#define NV_CIO_CRE_HEB_SA_25                                    7:7 /* RW--F */
#define NV_CIO_CRE_HEB_SA_24                                    6:6 /* RW--F */
#define NV_CIO_CRE_HEB_SA_23                                    5:5 /* RW--F */
#define NV_CIO_CRE_HEB_ILC_8                                    4:4 /* RW--F */
#define NV_CIO_CRE_HEB_HRS_8                                    3:3 /* RW--F */
#define NV_CIO_CRE_HEB_HBS_8                                    2:2 /* RW--F */
#define NV_CIO_CRE_HEB_HDE_8                                    1:1 /* RW--F */
#define NV_CIO_CRE_HEB_HDT_8                                    0:0 /* RW--F */
#define NV_CIO_CRE_HCUR_ADDR2_INDEX                      0x0000002f /*       */
#define NV_CIO_CRE_HCUR_ADDR2_ADR                               7:0 /* RW--F */
#define NV_CIO_CRE_HCUR_ADDR0_INDEX                      0x00000030 /*       */
#define NV_CIO_CRE_HCUR_ASI                                     7:7 /* RW--F */
#define NV_CIO_CRE_HCUR_ADDR0_ADR                               6:0 /* RW--F */
#define NV_CIO_CRE_HCUR_ADDR1_INDEX                      0x00000031 /*       */
#define NV_CIO_CRE_HCUR_ADDR1_ADR                               7:2 /* RW--F */
#define NV_CIO_CRE_HCUR_ADDR1_CUR_DBL                           1:1 /* RW--F */
#define NV_CIO_CRE_HCUR_ADDR1_ENABLE                            0:0 /* RW--F */
#define NV_CIO_CRE_VID_END0__INDEX                       0x00000032 /*       */
#define NV_CIO_CRE_LCD__INDEX                            0x00000033 /*       */
#define NV_CIO_CRE_LCD_LCD_SELECT                               0:0 /* RW--F */
#define NV_CIO_CRE_LCD_EXT_SELECT                               4:4 /* RW--F */
#define NV_CIO_CRE_LCD_STEREO_ENABLE                            7:7 /* RW--F */
#define NV_CIO_GPIO0__INDEX                              0x00000034 /*       */
#define NV_CIO_GPIO1__INDEX                              0x00000035 /*       */
#define NV_CIO_CRE_DDC0_STATUS__INDEX                    0x00000036 /*       */
#define NV_CIO_CRE_DDC0_WR__INDEX                        0x00000037 /*       */
#define NV_CIO_CRE_RMA__INDEX                            0x00000038 /*       */
#define NV_CIO_CRE_ILACE__INDEX                          0x00000039 /*       */
#define NV_CIO_CRE_SCRATCH2__INDEX                       0x0000003A /*       */
#define NV_CIO_CRE_SCRATCH3__INDEX                       0x0000003B /*       */
#define NV_CIO_CRE_SCRATCH4__INDEX                       0x0000003C /*       */
#define NV_CIO_CRE_TREG__INDEX                           0x0000003D /*       */
#define NV_CIO_CRE_TREG_HCNT                                    6:6 /* RW--F */
#define NV_CIO_CRE_TREG_VCNT                                    4:4 /* RW--F */
#define NV_CIO_CRE_TREG_SHADOW                                  0:0 /* RW--F */
#define NV_CIO_CRE_TREG_HCNT_INDEX                       0x00000000 /*       */
#define NV_CIO_CRE_TREG_VCNTA_INDEX                      0x00000006 /*       */
#define NV_CIO_CRE_TREG_VCNTB_INDEX                      0x00000007 /*       */
#define NV_CIO_CRE_DDC_STATUS__INDEX                     0x0000003E /*       */
#define NV_CIO_CRE_DDC_WR__INDEX                         0x0000003F /*       */
#define NV_CIO_CRE_PCI_TO__INDEX                         0x00000040 /*       */
#define NV_CIO_CRE_PCI_TO_DELAY                                 7:0 /* -W--F */
#define NV_CIO_CRE_EBR_INDEX                             0x00000041 /*       */
#define NV_CIO_CRE_EBR_VBS_11                                   6:6 /* RW--F */
#define NV_CIO_CRE_EBR_VRS_11                                   4:4 /* RW--F */
#define NV_CIO_CRE_EBR_VDE_11                                   2:2 /* RW--F */
#define NV_CIO_CRE_EBR_VDT_11                                   0:0 /* RW--F */
#define NV_CIO_CRE_USA_INDEX                             0x00000042 /*       */
#define NV_CIO_CRE_USA_SA__31                                   3:3 /* RW--F */
#define NV_CIO_CRE_USA_SA__30                                   2:2 /* RW--F */
#define NV_CIO_CRE_USA_SA__29                                   1:1 /* RW--F */
#define NV_CIO_CRE_USA_SA__28                                   0:0 /* RW--F */
#define NV_CIO_CRE_MBI                                   0x00000043 /*       */
#define NV_CIO_CRE_MBI_EN                                       0:0 /* RW--F */
#define NV_CIO_CRE_MBI_EN_ENABLE                         0x00000001 /* RW--V */
#define NV_CIO_CRE_MBI_EN_DISABLE                        0x00000000 /* RW--V */
#define NV_CIO_CRE_H2OWNS                                0x00000044 /*       */
#define NV_CIO_CRE_H2OWNS_VGA                                   0:0 /* RW--F */
#define NV_CIO_CRE_H2OWNS_VGA_DEFAULT                    0x00000000 /* RWI-V */
#define NV_CIO_CRE_H2OWNS_VGA_DISABLE                    0x00000000 /* RW--V */
#define NV_CIO_CRE_H2OWNS_VGA_ENABLE                     0x00000001 /* RW--V */
#define NV_CIO_CRE_H2OWNS_DAC                                   1:1 /* RW--F */
#define NV_CIO_CRE_H2OWNS_DAC_DEFAULT                    0x00000000 /* RWI-V */
#define NV_CIO_CRE_H2OWNS_DAC_DISABLE                    0x00000000 /* RW--V */
#define NV_CIO_CRE_H2OWNS_DAC_ENABLE                     0x00000001 /* RW--V */
#define NV_CIO_CRE_H2OWNS_MIRROR                                2:2 /* RW--F */
#define NV_CIO_CRE_H2OWNS_MIRROR_DEFAULT                 0x00000000 /* RWI-V */
#define NV_CIO_CRE_H2OWNS_MIRROR_DISABLE                 0x00000000 /* RW--V */
#define NV_CIO_CRE_H2OWNS_MIRROR_ENABLE                  0x00000001 /* RW--V */
#define NV_CIO_CRE_CSB                                   0x00000045 /*       */
#define NV_CIO_CRE_CSB_VAL                                      1:0 /* RW--F */
#define NV_CIO_CRE_CSB_VAL_NONE                          0x00000000 /* RW--V */
#define NV_CIO_CRE_CSB_VAL_3BY16                         0x00000001 /* RW--V */
#define NV_CIO_CRE_CSB_VAL_3BY08                         0x00000002 /* RW--V */
#define NV_CIO_CRE_CSB_VAL_3BY04                         0x00000003 /* RW--V */
#define NV_CIO_CRE_RCR                                   0x00000046 /*       */
#define NV_CIO_CRE_RCR_RNDM_REQ                                 1:0 /* RW--F */
#define NV_CIO_CRE_RCR_RNDM_REQ_NONE                     0x00000000 /* RW--V */
#define NV_CIO_CRE_RCR_RNDM_REQ_08                       0x00000001 /* RW--V */
#define NV_CIO_CRE_RCR_RNDM_REQ_16                       0x00000002 /* RW--V */
#define NV_CIO_CRE_RCR_RNDM_REQ_32                       0x00000003 /* RW--V */
#define NV_CIO_CRE_RCR_ENDIAN                                   7:7 /* RW--F */
#define NV_CIO_CRE_RCR_ENDIAN_LITTLE                     0x00000000 /* RW--V */
#define NV_CIO_CRE_RCR_ENDIAN_BIG                        0x00000001 /* RW--V */
#define NV_CIO_CRE_FFLWM_MSB_INDEX                       0x00000047 /*       */
#define NV_CIO_CRE_FFLWM_MSB_LWM                                0:0 /* RW--F */
#define NV_CIO_CRE_EXT_PIXEL_INDEX                       0x00000048 /*       */
#define NV_CIO_CRE_EXT_PIXEL_FORMAT                             0:0 /* RW--F */
#define NV_CIO_CRE_EXT_PIXEL_FORMAT_RGB                  0x00000000 /* RWI-V */
#define NV_CIO_CRE_EXT_PIXEL_FORMAT_YUV                  0x00000001 /* RW--V */
#define NV_CIO_CRE_EXT_PIXEL_YUV_FMT                            1:1 /* RW--F */
#define NV_CIO_CRE_EXT_PIXEL_YUV_FMT_YVYU                0x00000000 /* RWI-V */
#define NV_CIO_CRE_EXT_PIXEL_YUV_FMT_VYUY                0x00000001 /* RW--V */
#define NV_CIO_CRE_ENGINE_CTRL                           0x00000049 /*       */
#define NV_CIO_CRE_ENGINE_CTRL_GPIO                             0:0 /* RW--F */
#define NV_CIO_CRE_ENGINE_CTRL_GPIO_DEFAULT              0x00000000 /* RWI-V */
#define NV_CIO_CRE_ENGINE_CTRL_GPIO_ENABLE               0x00000001 /* RW--V */
#define NV_CIO_CRE_ENGINE_CTRL_I2C                              2:2 /* RW--F */
#define NV_CIO_CRE_ENGINE_CTRL_I2C_DEFAULT               0x00000000 /* RWI-V */
#define NV_CIO_CRE_ENGINE_CTRL_I2C_ENABLE                0x00000001 /* RW--V */
#define NV_CIO_CRE_ENGINE_CTRL_TV                               4:4 /* RW--F */
#define NV_CIO_CRE_ENGINE_CTRL_TV_DEFAULT                0x00000000 /* RWI-V */
#define NV_CIO_CRE_ENGINE_CTRL_TV_ENABLE                 0x00000001 /* RW--V */
#define NV_CIO_CRE_ENGINE_CTRL_VS                               6:6 /* RW--F */
#define NV_CIO_CRE_ENGINE_CTRL_VS_DEFAULT                0x00000000 /* RWI-V */
#define NV_CIO_CRE_ENGINE_CTRL_VS_ENABLE                 0x00000001 /* RW--V */
#define NV_CIO_CRE_SCRATCH5__INDEX                       0x0000004A /*       */
#define NV_CIO_CRE_SCRATCH6__INDEX                       0x0000004B /*       */
#define NV_CIO_CRE_SCRATCH7__INDEX                       0x0000004C /*       */
#define NV_CIO_GPIO23_INDEX                              0x0000004D /*       */
#define NV_CIO_GPIO45_INDEX                              0x0000004E /*       */
#define NV_CIO_CRE_DDC2_STATUS__INDEX                     0x00000050 /*       */
#define NV_CIO_CRE_DDC2_WR__INDEX                         0x00000051 /*       */
#define NV_CIO_CRE_TVOUT_LATENCY                          0x00000052 /*       */
/* dev_vga.ref */
#define NV_VIO_MBEN                                      0x00000094 /* RW-1R */
#define NV_VIO_ADDEN                                     0x000046e8 /* RW-1R */
#define NV_VIO_VSE1                                      0x00000102 /* RW-1R */
#define NV_VIO_VSE2                                      0x000003c3 /* RW-1R */
#define NV_VIO_MISC__READ                                0x000003cc /* R--1R */
#define NV_VIO_MISC__WRITE                               0x000003c2 /* -W-1R */
#define NV_VIO_SRX                                       0x000003c4 /* RW-1R */
#define NV_VIO_SR_RESET                                  0x000003c5 /* RW-1R */
#define NV_VIO_SR_RESET_INDEX                            0x00000000 /*     V */
#define NV_VIO_SR_CLOCK                                  0x000003c5 /* RW-1R */
#define NV_VIO_SR_CLOCK_INDEX                            0x00000001 /*     V */
#define NV_VIO_SR_PLANE_MASK                             0x000003c5 /* RW-1R */
#define NV_VIO_SR_PLANE_MASK_INDEX                       0x00000002 /*     V */
#define NV_VIO_SR_CHAR_MAP                               0x000003c5 /* RW-1R */
#define NV_VIO_SR_CHAR_MAP_INDEX                         0x00000003 /*       */
#define NV_VIO_SR_MEM_MODE                               0x000003c5 /* RW-1R */
#define NV_VIO_SR_MEM_MODE_INDEX                         0x00000004 /*       */
#define NV_VIO_GRX                                       0x000003ce /* RW-1R */
#define NV_VIO_GX_SR                                     0x000003cf /* RW-1R */
#define NV_VIO_GX_SR_INDEX                               0x00000000 /*       */
#define NV_VIO_GX_SREN                                   0x000003cf /* RW-1R */
#define NV_VIO_GX_SREN_INDEX                             0x00000001 /*       */
#define NV_VIO_GX_CCOMP                                  0x000003cf /* RW-1R */
#define NV_VIO_GX_CCOMP_INDEX                            0x00000002 /*       */
#define NV_VIO_GX_ROP                                    0x000003cf /* RW-1R */
#define NV_VIO_GX_ROP_INDEX                              0x00000003 /*       */
#define NV_VIO_GX_READ_MAP                               0x000003cf /* RW-1R */
#define NV_VIO_GX_READ_MAP_INDEX                         0x00000004 /*       */
#define NV_VIO_GX_MODE                                   0x000003cf /* RW-1R */
#define NV_VIO_GX_MODE_INDEX                             0x00000005 /*       */
#define NV_VIO_GX_MISC                                   0x000003cf /* RW-1R */
#define NV_VIO_GX_MISC_INDEX                             0x00000006 /*       */
#define NV_VIO_GX_DONT_CARE                              0x000003cf /* RW-1R */
#define NV_VIO_GX_DONT_CARE_INDEX                        0x00000007 /*       */
#define NV_VIO_GX_BIT_MASK                               0x000003cf /* RW-1R */
#define NV_VIO_GX_BIT_MASK_INDEX                         0x00000008 /*       */
/* dev_vga.ref */
#define NV_PRMVIO                             0x000C7FFF:0x000C0000 /* RW--D */
#define NV_PRMVIO_MBEN                                   0x000C0094 /* RW-1R */
#define NV_PRMVIO_ADDEN                                  0x000C46e8 /* RW-1R */
#define NV_PRMVIO_VSE1                                   0x000C0102 /* RW-1R */
#define NV_PRMVIO_VSE2                                   0x000C03c3 /* RW-1R */
#define NV_PRMVIO_MISC__READ                             0x000C03cc /* R--1R */
#define NV_PRMVIO_MISC__WRITE                            0x000C03c2 /* -W-1R */
#define NV_PRMVIO_SRX                                    0x000C03c4 /* RW-1R */
#define NV_PRMVIO_SR_RESET                               0x000C03c5 /* RW-1R */
#define NV_PRMVIO_SR_RESET_INDEX                         0x00000000 /*     V */
#define NV_PRMVIO_SR_CLOCK                               0x000C03c5 /* RW-1R */
#define NV_PRMVIO_SR_CLOCK_INDEX                         0x00000001 /*     V */
#define NV_PRMVIO_SR_PLANE_MASK                          0x000C03c5 /* RW-1R */
#define NV_PRMVIO_SR_PLANE_MASK_INDEX                    0x00000002 /*     V */
#define NV_PRMVIO_SR_CHAR_MAP                            0x000C03c5 /* RW-1R */
#define NV_PRMVIO_SR_CHAR_MAP_INDEX                      0x00000003 /*       */
#define NV_PRMVIO_SR_MEM_MODE                            0x000C03c5 /* RW-1R */
#define NV_PRMVIO_SR_MEM_MODE_INDEX                      0x00000004 /*       */
#define NV_PRMVIO_GRX                                    0x000C03ce /* RW-1R */
#define NV_PRMVIO_GX_SR                                  0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_SR_INDEX                            0x00000000 /*       */
#define NV_PRMVIO_GX_SREN                                0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_SREN_INDEX                          0x00000001 /*       */
#define NV_PRMVIO_GX_CCOMP                               0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_CCOMP_INDEX                         0x00000002 /*       */
#define NV_PRMVIO_GX_ROP                                 0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_ROP_INDEX                           0x00000003 /*       */
#define NV_PRMVIO_GX_READ_MAP                            0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_READ_MAP_INDEX                      0x00000004 /*       */
#define NV_PRMVIO_GX_MODE                                0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_MODE_INDEX                          0x00000005 /*       */
#define NV_PRMVIO_GX_MISC                                0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_MISC_INDEX                          0x00000006 /*       */
#define NV_PRMVIO_GX_DONT_CARE                           0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_DONT_CARE_INDEX                     0x00000007 /*       */
#define NV_PRMVIO_GX_BIT_MASK                            0x000C03cf /* RW-1R */
#define NV_PRMVIO_GX_BIT_MASK_INDEX                      0x00000008 /*       */
/* dev_vga.ref */
#define NV_PRMVGA                             0x000BFFFF:0x000A0000 /* RW--D */
/* dev_media.ref */
#define NV_PME                                0x00200FFF:0x00200000 /* RW--D */
#define NV_PME_INTR_0                                    0x00200100 /* RWI4R */
#define NV_PME_INTR_0_TASKA_NOTIFY                              0:0 /* RWIVF */
#define NV_PME_INTR_0_TASKA_NOTIFY_NOT_PENDING           0x00000000 /* R-I-V */
#define NV_PME_INTR_0_TASKA_NOTIFY_PENDING               0x00000001 /* R---V */
#define NV_PME_INTR_0_TASKA_NOTIFY_RESET                 0x00000001 /* -W--V */
#define NV_PME_INTR_0_TASKB_NOTIFY                              4:4 /* RWIVF */
#define NV_PME_INTR_0_TASKB_NOTIFY_NOT_PENDING           0x00000000 /* R-I-V */
#define NV_PME_INTR_0_TASKB_NOTIFY_PENDING               0x00000001 /* R---V */
#define NV_PME_INTR_0_TASKB_NOTIFY_RESET                 0x00000001 /* -W--V */
#define NV_PME_INTR_0_ANC_NOTIFY                                8:8 /* RWIVF */
#define NV_PME_INTR_0_ANC_NOTIFY_NOT_PENDING             0x00000000 /* R-I-V */
#define NV_PME_INTR_0_ANC_NOTIFY_PENDING                 0x00000001 /* R---V */
#define NV_PME_INTR_0_ANC_NOTIFY_RESET                   0x00000001 /* -W--V */
#define NV_PME_INTR_0_FOUT_NOTIFY                             12:12 /* RWIVF */
#define NV_PME_INTR_0_FOUT_NOTIFY_NOT_PENDING            0x00000000 /* R-I-V */
#define NV_PME_INTR_0_FOUT_NOTIFY_PENDING                0x00000001 /* R---V */
#define NV_PME_INTR_0_FOUT_NOTIFY_RESET                  0x00000001 /* -W--V */
#define NV_PME_INTR_0_FIN_NOTIFY                              16:16 /* RWIVF */
#define NV_PME_INTR_0_FIN_NOTIFY_NOT_PENDING             0x00000000 /* R-I-V */
#define NV_PME_INTR_0_FIN_NOTIFY_PENDING                 0x00000001 /* R---V */
#define NV_PME_INTR_0_FIN_NOTIFY_RESET                   0x00000001 /* -W--V */
#define NV_PME_INTR_0_FOUTTIMEOUT_NOTIFY                      20:20 /* RWIVF */
#define NV_PME_INTR_0_FOUTTIMEOUT_NOTIFY_NOT_PENDING     0x00000000 /* R-I-V */
#define NV_PME_INTR_0_FOUTTIMEOUT_NOTIFY_PENDING         0x00000001 /* R---V */
#define NV_PME_INTR_0_FOUTTIMEOUT_NOTIFY_RESET           0x00000001 /* -W--V */
#define NV_PME_INTR_0_FINTIMEOUT_NOTIFY                       24:24 /* RWIVF */
#define NV_PME_INTR_0_FINTIMEOUT_NOTIFY_NOT_PENDING      0x00000000 /* R-I-V */
#define NV_PME_INTR_0_FINTIMEOUT_NOTIFY_PENDING          0x00000001 /* R---V */
#define NV_PME_INTR_0_FINTIMEOUT_NOTIFY_RESET            0x00000001 /* -W--V */
#define NV_PME_INTR_0_REGTIMEOUT_NOTIFY                       28:28 /* RWIVF */
#define NV_PME_INTR_0_REGTIMEOUT_NOTIFY_NOT_PENDING      0x00000000 /* R-I-V */
#define NV_PME_INTR_0_REGTIMEOUT_NOTIFY_PENDING          0x00000001 /* R---V */
#define NV_PME_INTR_0_REGTIMEOUT_NOTIFY_RESET            0x00000001 /* -W--V */
#define NV_PME_INTR_EN_0                                 0x00200140 /* RWI4R */
#define NV_PME_INTR_EN_0_TASKA_NOTIFY                           0:0 /* RWIVF */
#define NV_PME_INTR_EN_0_TASKA_NOTIFY_DISABLED           0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_TASKA_NOTIFY_ENABLED            0x00000001 /* RW--V */
#define NV_PME_INTR_EN_0_TASKB_NOTIFY                           4:4 /* RWIVF */
#define NV_PME_INTR_EN_0_TASKB_NOTIFY_DISABLED           0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_TASKB_NOTIFY_ENABLED            0x00000001 /* RW--V */
#define NV_PME_INTR_EN_0_ANC_NOTIFY                             8:8 /* RWIVF */
#define NV_PME_INTR_EN_0_ANC_NOTIFY_DISABLED             0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_ANC_NOTIFY_ENABLED              0x00000001 /* RW--V */
#define NV_PME_INTR_EN_0_FOUT_NOTIFY                          12:12 /* RWIVF */
#define NV_PME_INTR_EN_0_FOUT_NOTIFY_DISABLED            0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_FOUT_NOTIFY_ENABLED             0x00000001 /* RW--V */
#define NV_PME_INTR_EN_0_FIN_NOTIFY                           16:16 /* RWIVF */
#define NV_PME_INTR_EN_0_FIN_NOTIFY_DISABLED             0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_FIN_NOTIFY_ENABLED              0x00000001 /* RW--V */
#define NV_PME_INTR_EN_0_FOUTTIMEOUT_NOTIFY                   20:20 /* RWIVF */
#define NV_PME_INTR_EN_0_FOUTTIMEOUT_NOTIFY_DISABLED     0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_FOUTTIMEOUT_NOTIFY_ENABLED      0x00000001 /* RW--V */
#define NV_PME_INTR_EN_0_FINTIMEOUT_NOTIFY                    24:24 /* RWIVF */
#define NV_PME_INTR_EN_0_FINTIMEOUT_NOTIFY_DISABLED      0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_FINTIMEOUT_NOTIFY_ENABLED       0x00000001 /* RW--V */
#define NV_PME_INTR_EN_0_REGTIMEOUT_NOTIFY                    28:28 /* RWIVF */
#define NV_PME_INTR_EN_0_REGTIMEOUT_NOTIFY_DISABLED      0x00000000 /* RWI-V */
#define NV_PME_INTR_EN_0_REGTIMEOUT_NOTIFY_ENABLED       0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG                               0x00200200 /* RWI4R */
#define NV_PME_HOST_CONFIG_FIFOMAXTX                            5:0 /* RWIVF */
#define NV_PME_HOST_CONFIG_CLOCK_SELECT                         7:7 /* RWIVF */
#define NV_PME_HOST_CONFIG_CLOCK_SELECT_PCI_DIV_2        0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_CLOCK_SELECT_PCI              0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_TIMEOUT                             11:8 /* RWIVF */
#define NV_PME_HOST_CONFIG_SLAVE_NOTDETECTED                  16:16 /* RWIVF */
#define NV_PME_HOST_CONFIG_SLAVE_NOTDETECTED_FALSE       0x00000000 /* R---V */
#define NV_PME_HOST_CONFIG_SLAVE_NOTDETECTED_TRUE        0x00000001 /* R---V */
#define NV_PME_HOST_CONFIG_SLAVE_DETECTED                     20:20 /* RWIVF */
#define NV_PME_HOST_CONFIG_SLAVE_DETECTED_FALSE          0x00000000 /* R---V */
#define NV_PME_HOST_CONFIG_SLAVE_DETECTED_TRUE           0x00000001 /* R---V */
#define NV_PME_HOST_CONFIG_FOUT_SYSMEM                        24:24 /* RWIVF */
#define NV_PME_HOST_CONFIG_FOUT_SYSMEM_DISABLED          0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FOUT_SYSMEM_ENABLED           0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN_SYSMEM                         25:25 /* RWIVF */
#define NV_PME_HOST_CONFIG_FIN_SYSMEM_DISABLED           0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN_SYSMEM_ENABLED            0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_FOUT_PAUSE                         26:26 /* RWIVF */
#define NV_PME_HOST_CONFIG_FOUT_PAUSE_DISABLED           0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FOUT_PAUSE_ENABLED            0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN_PAUSE                          27:27 /* RWIVF */
#define NV_PME_HOST_CONFIG_FIN_PAUSE_DISABLED            0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN_PAUSE_ENABLED             0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN_VIP_HOST_4X                    28:28 /* RWIVF */
#define NV_PME_HOST_CONFIG_FIN_VIP_HOST_4X_DISABLED      0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN_VIP_HOST_4X_ENABLED       0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_FOUT_VIP_HOST_4X                   29:29 /* RWIVF */
#define NV_PME_HOST_CONFIG_FOUT_VIP_HOST_4X_DISABLED     0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FOUT_VIP_HOST_4X_ENABLED      0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN                                30:30 /* RWIVF */
#define NV_PME_HOST_CONFIG_FIN_DISABLED                  0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FIN_ENABLED                   0x00000001 /* RW--V */
#define NV_PME_HOST_CONFIG_FOUT                               31:31 /* RWIVF */
#define NV_PME_HOST_CONFIG_FOUT_DISABLED                 0x00000000 /* RW--V */
#define NV_PME_HOST_CONFIG_FOUT_ENABLED                  0x00000001 /* RW--V */
#define NV_PME_FOUT_ADDR                                 0x00200204 /* RWI4R */
#define NV_PME_FOUT_ADDR_FIFO                                   3:0 /* RWIVF */
#define NV_PME_FOUT_ADDR_DEVICE                                 9:8 /* RWIVF */
#define NV_PME_FIN_ADDR                                  0x00200208 /* RWI4R */
#define NV_PME_FIN_ADDR_FIFO                                    3:0 /* RWIVF */
#define NV_PME_FIN_ADDR_DEVICE                                  9:8 /* RWIVF */
#define NV_PME_656_CONFIG                                0x00200400 /* RWI4R */
#define NV_PME_656_CONFIG_TASKA_ENABLE                          0:0 /* RWXUF */
#define NV_PME_656_CONFIG_TASKB_ENABLE                          4:4 /* RWXUF */
#define NV_PME_656_CONFIG_TASKA_ONLY                            6:6 /* RWXUF */
#define NV_PME_656_CONFIG_TASKA_ONLY_DISABLED            0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_TASKA_ONLY_ENABLED             0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_MODE                              9:8 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_MODE_DISABLED              0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_MODE_VBI1                  0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_MODE_VBI2                  0x00000002 /* RW--V */
#define NV_PME_656_CONFIG_ANC_MODE_ANC                   0x00000003 /* RW--V */
#define NV_PME_656_CONFIG_ANC_TASKB                           10:10 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_TASKB_DISABLED             0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_TASKB_ENABLED              0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_TASKB_END                       11:11 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_TASKB_END_DISABLED         0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_TASKB_END_ENABLED          0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_VBI_VERT                            12:12 /* RWXUF */
#define NV_PME_656_CONFIG_VBI_VERT_DISABLED              0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_VBI_VERT_ENABLED               0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_HNOTV                           16:16 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_HNOTV_DISABLED             0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_HNOTV_ENABLED              0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_NOTHV                           17:17 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_NOTHV_DISABLED             0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_NOTHV_ENABLED              0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_NOTHNOTV                        18:18 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_NOTHNOTV_DISABLED          0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_NOTHNOTV_ENABLED           0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_HV                              19:19 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_HV_DISABLED                0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_HV_ENABLED                 0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_ANC_IGNORE_PITCH                    20:20 /* RWXUF */
#define NV_PME_656_CONFIG_ANC_IGNORE_PITCH_DISABLED      0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_ANC_IGNORE_PITCH_ENABLED       0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_SWAP_UYVY                           29:29 /* RWXUF */
#define NV_PME_656_CONFIG_SWAP_UYVY_DISABLED             0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_SWAP_UYVY_ENABLED              0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_INVERT_SIGN                         30:30 /* RWXUF */
#define NV_PME_656_CONFIG_INVERT_SIGN_DISABLED           0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_INVERT_SIGN_ENABLED            0x00000001 /* RW--V */
#define NV_PME_656_CONFIG_VIDEO                               31:31 /* RWIVF */
#define NV_PME_656_CONFIG_VIDEO_8                        0x00000000 /* RW--V */
#define NV_PME_656_CONFIG_VIDEO_16                       0x00000001 /* RW--V */
#define NV_PME_NULL_DATA                                 0x00200404 /* RWI4R */
#define NV_PME_NULL_DATA_COMPARE                                0:0 /* RWIVF */
#define NV_PME_NULL_DATA_COMPARE_DISABLED                0x00000000 /* RWI-V */
#define NV_PME_NULL_DATA_COMPARE_ENABLED                 0x00000001 /* RW--V */
#define NV_PME_NULL_DATA_LINE_DETECT                            4:4 /* RWIVF */
#define NV_PME_NULL_DATA_LINE_DETECT_DISABLED            0x00000000 /* RWI-V */
#define NV_PME_NULL_DATA_LINE_DETECT_ENABLED             0x00000001 /* RW--V */
#define NV_PME_NULL_DATA_BYTE                                 31:24 /* RWXVF */
#define NV_PME_VIPREG_NBYTES                             0x00200300 /* RW-4R */
#define NV_PME_VIPREG_ADDR                               0x00200304 /* RW-4R */
#define NV_PME_VIPREG_ADDR_LA                                   7:0 /* RW-VF */
#define NV_PME_VIPREG_ADDR_UA                                  15:8 /* RW-VF */
#define NV_PME_VIPREG_DATA                               0x00200308 /* RW-4R */
#define NV_PME_VIPREG_DATA_BITS                                31:0 /* RW_VF */
#define NV_PME_VIPREG_CTRL                               0x0020030c /* RW-4R */
#define NV_PME_VIPREG_CTRL_READ                                 0:0 /* RWIVF */
#define NV_PME_VIPREG_CTRL_READ_NOT_PENDING              0x00000000 /* RWI-V */
#define NV_PME_VIPREG_CTRL_READ_PENDING                  0x00000001 /* R---V */
#define NV_PME_VIPREG_CTRL_READ_START                    0x00000001 /* -WI-V */
#define NV_PME_VIPREG_CTRL_WRITE                                8:8 /* RWIVF */
#define NV_PME_VIPREG_CTRL_WRITE_NOT_PENDING             0x00000000 /* RWI-V */
#define NV_PME_VIPREG_CTRL_WRITE_PENDING                 0x00000001 /* R---V */
#define NV_PME_VIPREG_CTRL_WRITE_START                   0x00000001 /* -WI-V */
#define NV_PME_FOUT_BUFF0_START                          0x00200340 /* RWI4R */
#define NV_PME_FOUT_BUFF0_START_ADDRESS                        31:4 /* RWXUF */
#define NV_PME_FOUT_BUFF1_START                          0x00200344 /* RWI4R */
#define NV_PME_FOUT_BUFF1_START_ADDRESS                        31:4 /* RWXUF */
#define NV_PME_FOUT_BUFF0_LENGTH                         0x00200348 /* RWI4R */
#define NV_PME_FOUT_BUFF0_LENGTH_BITS                          23:4 /* RWXUF */
#define NV_PME_FOUT_BUFF1_LENGTH                         0x0020034c /* RWI4R */
#define NV_PME_FOUT_BUFF1_LENGTH_BITS                          23:4 /* RWXUF */
#define NV_PME_FOUT_ME_STATE                             0x00200350 /* RW-4R */
#define NV_PME_FOUT_ME_STATE_BUFF0_INTR_NOTIFY                  0:0 /* RWIVF */
#define NV_PME_FOUT_ME_STATE_BUFF1_INTR_NOTIFY                  4:4 /* RWXVF */
#define NV_PME_FOUT_ME_STATE_BUFF0_IN_USE                       8:8 /* RWXVF */
#define NV_PME_FOUT_ME_STATE_BUFF1_IN_USE                     12:12 /* RWXVF */
#define NV_PME_FOUT_ME_STATE_CURRENT_BUFFER                   16:16 /* RWXVF */
#define NV_PME_FOUT_ME_STATE_CURRENT_BUFFER_0            0x00000000 /* RW--V */
#define NV_PME_FOUT_ME_STATE_CURRENT_BUFFER_1            0x00000001 /* RW--V */
#define NV_PME_FOUT_SU_STATE                             0x00200354 /* RW-4R */
#define NV_PME_FOUT_SU_STATE_BUFF0_IN_USE                     16:16 /* RWXVF */
#define NV_PME_FOUT_SU_STATE_BUFF1_IN_USE                     20:20 /* RWXVF */
#define NV_PME_FOUT_RM_STATE                             0x00200358 /* RW-4R */
#define NV_PME_FOUT_RM_STATE_BUFF0_INTR_NOTIFY                  0:0 /* RWXVF */
#define NV_PME_FOUT_RM_STATE_BUFF1_INTR_NOTIFY                  4:4 /* RWXVF */
#define NV_PME_FOUT_CURRENT                              0x0020035c /* R-I4R */
#define NV_PME_FOUT_CURRENT_POS                                31:0 /* R-XUF */
#define NV_PME_FIN_BUFF0_START                           0x00200380 /* RWI4R */
#define NV_PME_FIN_BUFF0_START_ADDRESS                         31:4 /* RWXUF */
#define NV_PME_FIN_BUFF1_START                           0x00200384 /* RWI4R */
#define NV_PME_FIN_BUFF1_START_ADDRESS                         31:4 /* RWXUF */
#define NV_PME_FIN_BUFF0_LENGTH                          0x00200388 /* RWI4R */
#define NV_PME_FIN_BUFF0_LENGTH_BITS                           23:4 /* RWXUF */
#define NV_PME_FIN_BUFF1_LENGTH                          0x0020038c /* RWI4R */
#define NV_PME_FIN_BUFF1_LENGTH_BITS                           23:4 /* RWXUF */
#define NV_PME_FIN_ME_STATE                              0x00200390 /* RW-4R */
#define NV_PME_FIN_ME_STATE_BUFF0_INTR_NOTIFY                   0:0 /* RWIVF */
#define NV_PME_FIN_ME_STATE_BUFF1_INTR_NOTIFY                   4:4 /* RWXVF */
#define NV_PME_FIN_ME_STATE_BUFF0_IN_USE                        8:8 /* RWXVF */
#define NV_PME_FIN_ME_STATE_BUFF1_IN_USE                      12:12 /* RWXVF */
#define NV_PME_FIN_ME_STATE_CURRENT_BUFFER                    16:16 /* RWXVF */
#define NV_PME_FIN_ME_STATE_CURRENT_BUFFER_0             0x00000000 /* RW--V */
#define NV_PME_FIN_ME_STATE_CURRENT_BUFFER_1             0x00000001 /* RW--V */
#define NV_PME_FIN_SU_STATE                              0x00200394 /* RW-4R */
#define NV_PME_FIN_SU_STATE_BUFF0_IN_USE                      16:16 /* RWXVF */
#define NV_PME_FIN_SU_STATE_BUFF1_IN_USE                      20:20 /* RWXVF */
#define NV_PME_FIN_RM_STATE                              0x00200398 /* RW-4R */
#define NV_PME_FIN_RM_STATE_BUFF0_INTR_NOTIFY                   0:0 /* RWXVF */
#define NV_PME_FIN_RM_STATE_BUFF1_INTR_NOTIFY                   4:4 /* RWXVF */
#define NV_PME_FIN_CURRENT                               0x0020039c /* R-I4R */
#define NV_PME_FIN_CURRENT_POS                                 31:0 /* R-XUF */
#define NV_PME_VBI_REGION                                0x00200408 /* RWI4R */
#define NV_PME_VBI_REGION_START_LINE                            4:0 /* RWX-F */
#define NV_PME_VBI_REGION_NUM_LINES                           20:16 /* RWX-F */
#define NV_PME_ANC_BUFF0_START                           0x00200410 /* RWI4R */
#define NV_PME_ANC_BUFF0_START_ADDRESS                         26:4 /* RWXUF */
#define NV_PME_ANC_BUFF1_START                           0x00200414 /* RWI4R */
#define NV_PME_ANC_BUFF1_START_ADDRESS                         26:4 /* RWXUF */
#define NV_PME_ANC_BUFF0_PITCH                           0x00200418 /* RWI4R */
#define NV_PME_ANC_BUFF0_PITCH_VALUE                           13:4 /* RWXUF */
#define NV_PME_ANC_BUFF1_PITCH                           0x0020041c /* RWI4R */
#define NV_PME_ANC_BUFF1_PITCH_VALUE                           13:4 /* RWXUF */
#define NV_PME_ANC_BUFF0_LENGTH                          0x00200420 /* RWI4R */
#define NV_PME_ANC_BUFF0_LENGTH_VALUE                          19:4 /* RWXUF */
#define NV_PME_ANC_BUFF1_LENGTH                          0x00200424 /* RWI4R */
#define NV_PME_ANC_BUFF1_LENGTH_VALUE                          19:4 /* RWXUF */
#define NV_PME_ANC_ME_STATE                              0x00200428 /* RW-4R */
#define NV_PME_ANC_ME_STATE_BUFF0_INTR_NOTIFY                   0:0 /* RWXVF */
#define NV_PME_ANC_ME_STATE_BUFF1_INTR_NOTIFY                   4:4 /* RWXVF */
#define NV_PME_ANC_ME_STATE_BUFF0_ERROR_CODE                   10:8 /* RWXVF */
#define NV_PME_ANC_ME_STATE_BUFF1_ERROR_CODE                  14:12 /* RWXVF */
#define NV_PME_ANC_ME_STATE_BUFF0_IN_USE                      16:16 /* RWXVF */
#define NV_PME_ANC_ME_STATE_BUFF1_IN_USE                      20:20 /* RWXVF */
#define NV_PME_ANC_ME_STATE_CURRENT_BUFFER                    24:24 /* RWXVF */
#define NV_PME_ANC_ME_STATE_CURRENT_BUFFER_0             0x00000000 /* RW--V */
#define NV_PME_ANC_ME_STATE_CURRENT_BUFFER_1             0x00000001 /* RW--V */
#define NV_PME_ANC_SU_STATE                              0x0020042c /* RW-4R */
#define NV_PME_ANC_SU_STATE_BUFF0_FIELD                         8:8 /* RWXVF */
#define NV_PME_ANC_SU_STATE_BUFF1_FIELD                       12:12 /* RWXVF */
#define NV_PME_ANC_SU_STATE_BUFF0_IN_USE                      16:16 /* RWXVF */
#define NV_PME_ANC_SU_STATE_BUFF1_IN_USE                      20:20 /* RWXVF */
#define NV_PME_ANC_RM_STATE                              0x00200430 /* RW-4R */
#define NV_PME_ANC_RM_STATE_BUFF0_INTR_NOTIFY                   0:0 /* RWXVF */
#define NV_PME_ANC_RM_STATE_BUFF1_INTR_NOTIFY                   4:4 /* RWXVF */
#define NV_PME_ANC_CURRENT                               0x00200434 /* R--4R */
#define NV_PME_ANC_CURRENT_POS                                 27:0 /* R-XVF */
#define NV_PME_TASKA_BUFF0_START                         0x00200440 /* RWI4R */
#define NV_PME_TASKA_BUFF0_START_ADDRESS                       26:4 /* RWXUF */
#define NV_PME_TASKA_BUFF1_START                         0x00200444 /* RWI4R */
#define NV_PME_TASKA_BUFF1_START_ADDRESS                       26:4 /* RWXUF */
#define NV_PME_TASKA_BUFF0_PITCH                         0x00200448 /* RWI4R */
#define NV_PME_TASKA_BUFF0_PITCH_VALUE                         13:4 /* RWXUF */
#define NV_PME_TASKA_BUFF1_PITCH                         0x0020044c /* RWI4R */
#define NV_PME_TASKA_BUFF1_PITCH_VALUE                         13:4 /* RWXUF */
#define NV_PME_TASKA_BUFF0_LENGTH                        0x00200450 /* RWI4R */
#define NV_PME_TASKA_BUFF0_LENGTH_VALUE                        23:4 /* RWXUF */
#define NV_PME_TASKA_BUFF1_LENGTH                        0x00200454 /* RWI4R */
#define NV_PME_TASKA_BUFF1_LENGTH_VALUE                        23:4 /* RWXUF */
#define NV_PME_TASKA_LINE_LENGTH                         0x002004f0 /* RWI4R */
#define NV_PME_TASKA_LINE_LENGTH_VALUE                         13:2 /* RWXUF */
#define NV_PME_TASKA_ME_STATE                            0x00200458 /* RW-4R */
#define NV_PME_TASKA_ME_STATE_BUFF0_INTR_NOTIFY                 0:0 /* RWXVF */
#define NV_PME_TASKA_ME_STATE_BUFF1_INTR_NOTIFY                 4:4 /* RWXVF */
#define NV_PME_TASKA_ME_STATE_RP_FLAGS_BUFF0                    8:5 /* RW--- */
#define NV_PME_TASKA_ME_STATE_BUFF0_ERROR_CODE                 11:9 /* RWXVF */
#define NV_PME_TASKA_ME_STATE_BUFF1_ERROR_CODE                14:12 /* RWXVF */
#define NV_PME_TASKA_ME_STATE_BUFF0_IN_USE                    16:16 /* RWXVF */
#define NV_PME_TASKA_ME_STATE_BUFF1_IN_USE                    20:20 /* RWXVF */
#define NV_PME_TASKA_ME_STATE_CURRENT_BUFFER                  24:24 /* RWXVF */
#define NV_PME_TASKA_ME_STATE_CURRENT_BUFFER_0           0x00000000 /* RW--V */
#define NV_PME_TASKA_ME_STATE_CURRENT_BUFFER_1           0x00000001 /* RW--V */
#define NV_PME_TASKA_ME_STATE_RP_FLAGS_BUFF1                  28:25 /* RW--- */
#define NV_PME_TASKA_SU_STATE                            0x0020045c /* RW-4R */
#define NV_PME_TASKA_SU_STATE_BUFF0_FIELD                       8:8 /* RWXVF */
#define NV_PME_TASKA_SU_STATE_BUFF1_FIELD                     12:12 /* RWXVF */
#define NV_PME_TASKA_SU_STATE_BUFF0_IN_USE                    16:16 /* RWXVF */
#define NV_PME_TASKA_SU_STATE_BUFF1_IN_USE                    20:20 /* RWXVF */
#define NV_PME_TASKA_RM_STATE                            0x00200460 /* RW-4R */
#define NV_PME_TASKA_RM_STATE_BUFF0_INTR_NOTIFY                 0:0 /* RWXVF */
#define NV_PME_TASKA_RM_STATE_BUFF1_INTR_NOTIFY                 4:4 /* RWXVF */
#define NV_PME_TASKA_Y_CROP                              0x00200464 /* RW-4R */
#define NV_PME_TASKA_Y_CROP_STARTLINE                           8:0 /* RWXVF */
#define NV_PME_TASKA_Y_SCALE                             0x00200468 /* RW-4R */
#define NV_PME_TASKA_Y_SCALE_INCR                              10:0 /* RWXVF */
#define NV_PME_TASKA_X_SCALE                             0x0020046c /* RW-4R */
#define NV_PME_TASKA_X_SCALE_INCR                              27:0 /* RWXVF */
#define NV_PME_TASKA_X_SCALE_FILTER                           31:31 /* RWXVF */
#define NV_PME_TASKA_X_SCALE_FILTER_DISABLE              0x00000000 /* RWI-V */
#define NV_PME_TASKA_X_SCALE_FILTER_ENABLE               0x00000001 /* RW--V */
#define NV_PME_TASKB_BUFF0_START                         0x00200470 /* RWI4R */
#define NV_PME_TASKB_BUFF0_START_ADDRESS                       26:4 /* RWXUF */
#define NV_PME_TASKB_BUFF1_START                         0x00200474 /* RWI4R */
#define NV_PME_TASKB_BUFF1_START_ADDRESS                       26:4 /* RWXUF */
#define NV_PME_TASKB_BUFF0_PITCH                         0x00200478 /* RWI4R */
#define NV_PME_TASKB_BUFF0_PITCH_VALUE                         13:4 /* RWXUF */
#define NV_PME_TASKB_BUFF1_PITCH                         0x0020047c /* RWI4R */
#define NV_PME_TASKB_BUFF1_PITCH_VALUE                         13:4 /* RWXUF */
#define NV_PME_TASKB_BUFF0_LENGTH                        0x00200480 /* RWI4R */
#define NV_PME_TASKB_BUFF0_LENGTH_VALUE                        23:4 /* RWXUF */
#define NV_PME_TASKB_BUFF1_LENGTH                        0x00200484 /* RWI4R */
#define NV_PME_TASKB_BUFF1_LENGTH_VALUE                        23:4 /* RWXUF */
#define NV_PME_TASKB_LINE_LENGTH                         0x002004f4 /* RWI4R */
#define NV_PME_TASKB_LINE_LENGTH_VALUE                         13:2 /* RWXUF */
#define NV_PME_TASKB_ME_STATE                            0x00200488 /* RW-4R */
#define NV_PME_TASKB_ME_STATE_BUFF0_INTR_NOTIFY                 0:0 /* RWXVF */
#define NV_PME_TASKB_ME_STATE_BUFF1_INTR_NOTIFY                 4:4 /* RWXVF */
#define NV_PME_TASKB_ME_STATE_RP_FLAGS_BUFF0                    8:5 /* RW--- */
#define NV_PME_TASKB_ME_STATE_BUFF0_ERROR_CODE                 11:9 /* RWXVF */
#define NV_PME_TASKB_ME_STATE_BUFF1_ERROR_CODE                14:12 /* RWXVF */
#define NV_PME_TASKB_ME_STATE_BUFF0_IN_USE                    16:16 /* RWXVF */
#define NV_PME_TASKB_ME_STATE_BUFF1_IN_USE                    20:20 /* RWXVF */
#define NV_PME_TASKB_ME_STATE_CURRENT_BUFFER                  24:24 /* RWXVF */
#define NV_PME_TASKB_ME_STATE_CURRENT_BUFFER_0           0x00000000 /* RW--V */
#define NV_PME_TASKB_ME_STATE_CURRENT_BUFFER_1           0x00000001 /* RW--V */
#define NV_PME_TASKB_ME_STATE_RP_FLAGS_BUFF1                  28:25 /* R---- */
#define NV_PME_TASKB_SU_STATE                            0x0020048c /* RW-4R */
#define NV_PME_TASKB_SU_STATE_BUFF0_FIELD                       8:8 /* RWXVF */
#define NV_PME_TASKB_SU_STATE_BUFF1_FIELD                     12:12 /* RWXVF */
#define NV_PME_TASKB_SU_STATE_BUFF0_IN_USE                    16:16 /* RWXVF */
#define NV_PME_TASKB_SU_STATE_BUFF1_IN_USE                    20:20 /* RWXVF */
#define NV_PME_TASKB_RM_STATE                            0x00200490 /* RW-4R */
#define NV_PME_TASKB_RM_STATE_BUFF0_INTR_NOTIFY                 0:0 /* RWXVF */
#define NV_PME_TASKB_RM_STATE_BUFF1_INTR_NOTIFY                 4:4 /* RWXVF */
#define NV_PME_TASKB_Y_CROP                              0x00200494 /* RW-4R */
#define NV_PME_TASKB_Y_CROP_STARTLINE                           8:0 /* RWXVF */
#define NV_PME_TASKB_Y_SCALE                             0x00200498 /* RW-4R */
#define NV_PME_TASKB_Y_SCALE_INCR                              10:0 /* RWXVF */
#define NV_PME_TASKB_X_SCALE                             0x0020049c /* RW-4R */
#define NV_PME_TASKB_X_SCALE_INCR                              27:0 /* RWXVF */
#define NV_PME_TASKB_X_SCALE_FILTER                           31:31 /* RWXVF */
#define NV_PME_TASKB_X_SCALE_FILTER_DISABLE              0x00000000 /* RWI-V */
#define NV_PME_TASKB_X_SCALE_FILTER_ENABLE               0x00000001 /* RW--V */
#define NV_PME_TASK_CURRENT                              0x002004a0 /* RW-4R */
#define NV_PME_TASK_CURRENT_POS                                27:0 /* RWXVF */
#define NV_PME_TASK_CURRENT_TASK                              31:31 /* RWXVF */
#define NV_PME_HORIZ_WGHTS_A(i)                  (0x002004b0+(i)*4) /* -W-4A */
#define NV_PME_HORIZ_WGHTS_A__SIZE_1                              8 /*       */
#define NV_PME_HORIZ_WGHTS_A_0                                  7:0 /* -WXVF */
#define NV_PME_HORIZ_WGHTS_A_1                                 15:8 /* -WXVF */
#define NV_PME_HORIZ_WGHTS_A_2                                24:16 /* -WXVF */
#define NV_PME_HORIZ_WGHTS_B(i)                  (0x002004d0+(i)*4) /* -W-4A */
#define NV_PME_HORIZ_WGHTS_B__SIZE_1                              8 /*       */
#define NV_PME_HORIZ_WGHTS_B_3                                  7:0 /* -WXVF */
#define NV_PME_HORIZ_WGHTS_B_4                                 15:8 /* -WXVF */
/* usr_color_key.ref */
#define NV_IMAGE_COLOR_KEY                               0x00000015 /* ----C */
#define NV_UIMAGEKEY                          0x00591FFF:0x00590000 /* -W--D */
#define NV_UIMAGEKEY_CTX_SWITCH                          0x00590000 /* -W-4R */
#define NV_UIMAGEKEY_CTX_SWITCH_INSTANCE                       15:0 /* -W-UF */
#define NV_UIMAGEKEY_CTX_SWITCH_CHID                          22:16 /* -W-UF */
#define NV_UIMAGEKEY_CTX_SWITCH_VOLATILE                      31:31 /* -W-VF */
#define NV_UIMAGEKEY_CTX_SWITCH_VOLATILE_IGNORE          0x00000000 /* -W--V */
#define NV_UIMAGEKEY_CTX_SWITCH_VOLATILE_RESET           0x00000001 /* -W--V */
#define NV_UIMAGEKEY_NOTIFY                              0x00590104 /* -W-4R */
#define NV_UIMAGEKEY_NOTIFY_STYLE                              31:0 /* -W-VF */
#define NV_UIMAGEKEY_NOTIFY_STYLE_WRITE_ONLY             0x00000000 /* -W--V */
#define NV_UIMAGEKEY_NOTIFY_STYLE_WRITE_THEN_AWAKEN      0x00000001 /* -W--V */
#define NV_UIMAGEKEY_SET_CONTEXT_DMA_NOTIFY              0x00590180 /* -W-4R */
#define NV_UIMAGEKEY_SET_CONTEXT_DMA_NOTIFY_PARAMETER          31:0 /* -W-VF */
#define NV_UIMAGEKEY_SET_IMAGE_OUTPUT                    0x00590200 /* -W-4R */
#define NV_UIMAGEKEY_SET_IMAGE_OUTPUT_PARAMETER                31:0 /* -W-VF */
#define NV_UIMAGEKEY_SET_IMAGE_INPUT(i)          (0x00590204+(i)*4) /* -W-4A */
#define NV_UIMAGEKEY_SET_IMAGE_INPUT__SIZE_1                      2 /*       */
#define NV_UIMAGEKEY_SET_IMAGE_INPUT_PARAMETER                 31:0 /* -W-VF */
/* usr_beta_solid.ref */
#define NV_BETA_SOLID                                    0x00000012 /* ----C */
#define NV_UBETA                              0x00411FFF:0x00410000 /* -W--D */
#define NV_UBETA_CTX_SWITCH                              0x00410000 /* -W-4R */
#define NV_UBETA_CTX_SWITCH_INSTANCE                           15:0 /* -W-UF */
#define NV_UBETA_CTX_SWITCH_CHID                              22:16 /* -W-UF */
#define NV_UBETA_CTX_SWITCH_VOLATILE                          31:31 /* -W-VF */
#define NV_UBETA_CTX_SWITCH_VOLATILE_IGNORE              0x00000000 /* -W--V */
#define NV_UBETA_CTX_SWITCH_VOLATILE_RESET               0x00000001 /* -W--V */
#define NV_UBETA_NOTIFY                                  0x00410104 /* -W-4R */
#define NV_UBETA_NOTIFY_STYLE                                  31:0 /* -W-VF */
#define NV_UBETA_NOTIFY_STYLE_WRITE_ONLY                 0x00000000 /* -W--V */
#define NV_UBETA_NOTIFY_STYLE_WRITE_THEN_AWAKEN          0x00000001 /* -W--V */
#define NV_UBETA_SET_NOTIFY                              0x00410104 /* -W-4R */
#define NV_UBETA_SET_NOTIFY__ALIAS_1                NV_UBETA_NOTIFY /*       */
#define NV_UBETA_SET_NOTIFY_PARAMETER                          31:0 /* -W-VF */
#define NV_UBETA_SET_NOTIFY_PARAMETER_WRITE              0x00000000 /* -W--V */
#define NV_UBETA_SET_CONTEXT_DMA_NOTIFY                  0x00410180 /* -W-4R */
#define NV_UBETA_SET_CONTEXT_DMA_NOTIFY_PARAMETER              31:0 /* -W-VF */
#define NV_UBETA_SET_BETA_OUTPUT                         0x00410200 /* -W-4R */
#define NV_UBETA_SET_BETA_OUTPUT_PARAMETER                     31:0 /* -W-VF */
#define NV_UBETA_SET_BETA1D31                            0x00410300 /* -W-4R */
#define NV_UBETA_SET_BETA1D31_VALUE_FRACTION                  30:21 /* -W-UF */
#define NV_UBETA_SET_BETA1D31_VALUE                           31:31 /* -W-SF */
/* usr_rop_solid.ref */
#define NV_ROP5_SOLID                                    0x00000043 /* ----C */
#define NV_UROP                               0x00421FFF:0x00420000 /* -W--D */
#define NV_UROP_CTX_SWITCH                               0x00420000 /* -W-4R */
#define NV_UROP_CTX_SWITCH_INSTANCE                            15:0 /* -W-UF */
#define NV_UROP_CTX_SWITCH_CHID                               22:16 /* -W-UF */
#define NV_UROP_CTX_SWITCH_VOLATILE                           31:31 /* -W-VF */
#define NV_UROP_CTX_SWITCH_VOLATILE_IGNORE               0x00000000 /* -W--V */
#define NV_UROP_CTX_SWITCH_VOLATILE_RESET                0x00000001 /* -W--V */
#define NV_UROP_NOTIFY                                   0x00420104 /* -W-4R */
#define NV_UROP_NOTIFY_STYLE                                   31:0 /* -W-VF */
#define NV_UROP_NOTIFY_STYLE_WRITE_ONLY                  0x00000000 /* -W--V */
#define NV_UROP_NOTIFY_STYLE_WRITE_THEN_AWAKEN           0x00000001 /* -W--V */
#define NV_UROP_SET_NOTIFY                               0x00420104 /* -W-4R */
#define NV_UROP_SET_NOTIFY__ALIAS_1                  NV_UROP_NOTIFY /*       */
#define NV_UROP_SET_NOTIFY_PARAMETER                           31:0 /* -W-VF */
#define NV_UROP_SET_NOTIFY_PARAMETER_WRITE               0x00000000 /* -W--V */
#define NV_UROP_SET_CONTEXT_DMA_NOTIFY                   0x00420180 /* -W-4R */
#define NV_UROP_SET_CONTEXT_DMA_NOTIFY_PARAMETER               31:0 /* -W-VF */
#define NV_UROP_SET_ROP_OUTPUT                           0x00420200 /* -W-4R */
#define NV_UROP_SET_ROP_OUTPUT_PARAMETER                       31:0 /* -W-VF */
#define NV_UROP_SET_ROP5                                 0x00420300 /* -W-4R */
#define NV_UROP_SET_ROP5_VALUE                                  7:0 /* -W-VF */
#define NV_UROP_SET_ROP                                  0x00420300 /* -W-4R */
#define NV_UROP_SET_ROP__ALIAS_1                   NV_UROP_SET_ROP5 /*       */
#define NV_UROP_SET_ROP_VALUE                                   7:0 /* -W-VF */
/* usr_nv4_image_solid.ref */
#define NV_IMAGE_SOLID                                   0x00000057 /* ----C */
#define NV4_CONTEXT_COLOR_KEY                            0x00000057 /* ----C */
#define NV_UCHROMA                            0x00431FFF:0x00430000 /* -W--D */
#define NV_UCHROMA_CTX_SWITCH                            0x00430000 /* -W-4R */
#define NV_UCHROMA_CTX_SWITCH_INSTANCE                         15:0 /* -W-UF */
#define NV_UCHROMA_CTX_SWITCH_CHID                            22:16 /* -W-UF */
#define NV_UCHROMA_CTX_SWITCH_VOLATILE                        31:31 /* -W-VF */
#define NV_UCHROMA_CTX_SWITCH_VOLATILE_IGNORE            0x00000000 /* -W--V */
#define NV_UCHROMA_CTX_SWITCH_VOLATILE_RESET             0x00000001 /* -W--V */
#define NV_UCHROMA_NOP                                   0x00430100 /* -W-4R */
#define NV_UCHROMA_NOP_PARAMETER                               31:0 /* -W-VF */
#define NV_UCHROMA_NOTIFY                                0x00430104 /* -W-4R */
#define NV_UCHROMA_NOTIFY_STYLE                                31:0 /* -W-VF */
#define NV_UCHROMA_NOTIFY_STYLE_WRITE_ONLY               0x00000000 /* -W--V */
#define NV_UCHROMA_NOTIFY_STYLE_WRITE_THEN_AWAKEN        0x00000001 /* -W--V */
#define NV_UCHROMA_SET_NOTIFY                            0x00430104 /* -W-4R */
#define NV_UCHROMA_SET_NOTIFY__ALIAS_1            NV_UCHROMA_NOTIFY /*       */
#define NV_UCHROMA_SET_NOTIFY_PARAMETER                        31:0 /* -W-VF */
#define NV_UCHROMA_SET_NOTIFY_PARAMETER_WRITE            0x00000000 /* -W--V */
#define NV_UCHROMA_SET_CONTEXT_DMA_NOTIFY                0x00430180 /* -W-4R */
#define NV_UCHROMA_SET_CONTEXT_DMA_NOTIFY_PARAMETER            31:0 /* -W-VF */
#define NV_UCHROMA_SET_IMAGE_OUTPUT                      0x00430200 /* -W-4R */
#define NV_UCHROMA_SET_IMAGE_OUTPUT_PARAMETER                  31:0 /* -W-VF */
#define NV_UCHROMA_SET_COLOR_FORMAT                      0x00430300 /* -W-4R */
#define NV_UCHROMA_SET_COLOR_FORMAT_LE                         31:0 /* -W-VF */
#define NV_UCHROMA_SET_COLOR_FORMAT_LE_A16R5G6B5         0x00000001 /* -W--V */
#define NV_UCHROMA_SET_COLOR_FORMAT_LE_X16A1R5G5B5       0x00000002 /* -W--V */
#define NV_UCHROMA_SET_COLOR_FORMAT_LE_A8R8G8B8          0x00000003 /* -W--V */
#define NV_UCHROMA_SET_COLOR                             0x00430304 /* -W-4R */
#define NV_UCHROMA_SET_COLOR_VALUE                             31:0 /* -W-VF */
/* usr_clipping.ref */
#define NV_IMAGE_BLACK_RECTANGLE                         0x00000019 /* ----C */
#define NV_UCLIP                              0x00451FFF:0x00450000 /* -W--D */
#define NV_UCLIP_CTX_SWITCH                              0x00450000 /* -W-4R */
#define NV_UCLIP_CTX_SWITCH_INSTANCE                           15:0 /* -W-UF */
#define NV_UCLIP_CTX_SWITCH_CHID                              22:16 /* -W-UF */
#define NV_UCLIP_CTX_SWITCH_VOLATILE                          31:31 /* -W-VF */
#define NV_UCLIP_CTX_SWITCH_VOLATILE_IGNORE              0x00000000 /* -W--V */
#define NV_UCLIP_CTX_SWITCH_VOLATILE_RESET               0x00000001 /* -W--V */
#define NV_UCLIP_NOTIFY                                  0x00450104 /* -W-4R */
#define NV_UCLIP_NOTIFY_STYLE                                  31:0 /* -W-VF */
#define NV_UCLIP_NOTIFY_STYLE_WRITE_ONLY                 0x00000000 /* -W--V */
#define NV_UCLIP_NOTIFY_STYLE_WRITE_THEN_AWAKEN          0x00000001 /* -W--V */
#define NV_UCLIP_SET_NOTIFY                              0x00450104 /* -W-4R */
#define NV_UCLIP_SET_NOTIFY__ALIAS_1                NV_UCLIP_NOTIFY /*       */
#define NV_UCLIP_SET_NOTIFY_PARAMETER                          31:0 /* -W-VF */
#define NV_UCLIP_SET_NOTIFY_PARAMETER_WRITE              0x00000000 /* -W--V */
#define NV_UCLIP_SET_CONTEXT_DMA_NOTIFY                  0x00450180 /* -W-4R */
#define NV_UCLIP_SET_CONTEXT_DMA_NOTIFY_PARAMETER              31:0 /* -W-VF */
#define NV_UCLIP_SET_IMAGE_OUTPUT                        0x00450200 /* -W-4R */
#define NV_UCLIP_SET_IMAGE_OUTPUT_PARAMETER                    31:0 /* -W-VF */
#define NV_UCLIP_SET_RECT_0                              0x00450300 /* -W-4R */
#define NV_UCLIP_SET_RECT_0_X                                  15:0 /* -W-SF */
#define NV_UCLIP_SET_RECT_0_Y                                 31:16 /* -W-SF */
#define NV_UCLIP_SET_RECT_1                              0x00450304 /* -W-4R */
#define NV_UCLIP_SET_RECT_1_WIDTH                              15:0 /* -W-UF */
#define NV_UCLIP_SET_RECT_1_HEIGHT                            31:16 /* -W-UF */
/* usr_d3d0_triangle_zeta.ref */
#define NV_RENDER_D3D0_TRIANGLE_ZETA                     0x00000048 /* ----C */
#define NV_UD3D0Z                             0x00571FFF:0x00570000 /* -W--D */
#define NV_UD3D0Z_CTX_SWITCH                             0x00570000 /* -W-4R */
#define NV_UD3D0Z_CTX_SWITCH_INSTANCE                          15:0 /* -W-UF */
#define NV_UD3D0Z_CTX_SWITCH_CHID                             22:16 /* -W-UF */
#define NV_UD3D0Z_CTX_SWITCH_VOLATILE                         31:31 /* -W-VF */
#define NV_UD3D0Z_CTX_SWITCH_VOLATILE_IGNORE             0x00000000 /* -W--V */
#define NV_UD3D0Z_CTX_SWITCH_VOLATILE_RESET              0x00000001 /* -W--V */
#define NV_UD3D0Z_NOP                                    0x00570100 /* -W-4R */
#define NV_UD3D0Z_NOP_PARAMETER                                31:0 /* -W-VF */
#define NV_UD3D0Z_NOTIFY                                 0x00570104 /* -W-4R */
#define NV_UD3D0Z_NOTIFY_STYLE                                 31:0 /* -W-VF */
#define NV_UD3D0Z_NOTIFY_STYLE_WRITE_ONLY                0x00000000 /* -W--V */
#define NV_UD3D0Z_NOTIFY_STYLE_WRITE_THEN_AWAKEN         0x00000001 /* -W--V */
#define NV_UD3D0Z_NOTIFY_STYLE_NOT_PENDING               0x00000002 /* -W--V */
#define NV_UD3D0Z_SET_NOTIFY                             0x00570104 /* -W-4R */
#define NV_UD3D0Z_SET_NOTIFY__ALIAS_1              NV_UD3D0Z_NOTIFY /*       */
#define NV_UD3D0Z_SET_NOTIFY_PARAMETER                         31:0 /* -W-VF */
#define NV_UD3D0Z_SET_NOTIFY_PARAMETER_WRITE             0x00000000 /* -W--V */
#define NV_UD3D0Z_SET_PATCH                              0x0057010C /* -W-4R */
#define NV_UD3D0Z_SET_PATCH_PARAMETER                          31:0 /* -W-VF */
#define NV_UD3D0Z_SET_PATCH_PARAMETER_INVALIDATE         0x00000000 /* -W--V */
#define NV_UD3D0Z_SET_PATCH_PARAMETER_VALIDATE           0x00000001 /* -W--V */
#define NV_UD3D0Z_SET_CONTEXT_DMA_NOTIFY                 0x00570180 /* -W-4R */
#define NV_UD3D0Z_SET_CONTEXT_DMA_NOTIFY_PARAMETER             31:0 /* -W-VF */
#define NV_UD3D0Z_SET_CONTEXT_DMA_TEXTURE                0x00570184 /* -W-4R */
#define NV_UD3D0Z_SET_CONTEXT_DMA_TEXTURE_PARAMETER            31:0 /* -W-VF */
#define NV_UD3D0Z_SET_IMAGE_COLOR_OUTPUT                 0x00570200 /* -W-4R */
#define NV_UD3D0Z_SET_IMAGE_COLOR_OUTPUT_PARAMETER             31:0 /* -W-VF */
#define NV_UD3D0Z_SET_IMAGE_COLOR_INPUT                  0x00570204 /* -W-4R */
#define NV_UD3D0Z_SET_IMAGE_COLOR_INPUT_PARAMETER              31:0 /* -W-VF */
#define NV_UD3D0Z_SET_IMAGE_ZETA_OUTPUT                  0x00570208 /* -W-4R */
#define NV_UD3D0Z_SET_IMAGE_ZETA_OUTPUT_PARAMETER              31:0 /* -W-VF */
#define NV_UD3D0Z_SET_IMAGE_ZETA_INPUT                   0x0057020C /* -W-4R */
#define NV_UD3D0Z_SET_IMAGE_ZETA_INPUT_PARAMETER               31:0 /* -W-VF */
#define NV_UD3D0Z_TEXTURE_OFFSET                         0x00570304 /* -W-4R */
#define NV_UD3D0Z_TEXTURE_OFFSET_VALUE                         31:0 /* -W-UF */
#define NV_UD3D0Z_TEXTURE_FORMAT                         0x00570308 /* -W-4R */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_KEY_COLOR_MASK          15:0 /* -W-UF */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_KEY                    19:16 /* -W-UF */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_KEY_DISABLED      0x00000000 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_KEY_ENABLED       0x00000001 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_FORMAT                 23:20 /* -W-UF */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_FORMAT_A1R5G5B5   0x00000000 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_FORMAT_X1R5G5B5   0x00000001 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_FORMAT_A4R4G4B4   0x00000002 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_COLOR_FORMAT_R5G6B5     0x00000003 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN                     27:24 /* -W-UF */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_4X4            0x00000002 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_8X8            0x00000003 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_16X16          0x00000004 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_32X32          0x00000005 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_64X64          0x00000006 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_128X128        0x00000007 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_256X256        0x00000008 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_512X512        0x00000009 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_1024X1024      0x0000000a /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MIN_2048X2048      0x0000000b /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX                     31:28 /* -W-UF */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_4X4            0x00000002 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_8X8            0x00000003 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_16X16          0x00000004 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_32X32          0x00000005 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_64X64          0x00000006 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_128X128        0x00000007 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_256X256        0x00000008 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_512X512        0x00000009 /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_1024X1024      0x0000000a /* -W-UV */
#define NV_UD3D0Z_TEXTURE_FORMAT_SIZE_MAX_2048X2048      0x0000000b /* -W-UV */
#define NV_UD3D0Z_FILTER                                 0x0057030C /* -W-4R */
#define NV_UD3D0Z_FILTER_SPREADX                                4:0 /* -W-UF */
#define NV_UD3D0Z_FILTER_IGNORE0                                7:5 /* -W-UF */
#define NV_UD3D0Z_FILTER_SPREADY                               12:8 /* -W-UF */
#define NV_UD3D0Z_FILTER_IGNORE1                              15:13 /* -W-UF */
#define NV_UD3D0Z_FILTER_SIZEADJ                              23:16 /* -W-SF */
#define NV_UD3D0Z_FILTER_IGNORE2                              31:24 /* -W-SF */
#define NV_UD3D0Z_FOG_COLOR                              0x00570310 /* -W-4R */
#define NV_UD3D0Z_FOG_COLOR_BLU                                 7:0 /* -W-UF */
#define NV_UD3D0Z_FOG_COLOR_GRN                                15:8 /* -W-UF */
#define NV_UD3D0Z_FOG_COLOR_RED                               23:16 /* -W-UF */
#define NV_UD3D0Z_FOG_COLOR_VALUE                              31:0 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT                            0x00570314 /* -W-4R */
#define NV_UD3D0Z_CONTROL_OUT_INTERPOLATOR                      3:0 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_INTERPOLATOR_ZOH_MS        0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_INTERPOLATOR_ZOH           0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_INTERPOLATOR_FOH           0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_U                            5:4 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_U_CYLINDRICAL         0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_U_WRAP                0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_U_MIRROR              0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_U_CLAMP               0x00000003 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_V                            7:6 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_V_CYLINDRICAL         0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_V_WRAP                0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_V_MIRROR              0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_WRAP_V_CLAMP               0x00000003 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_FORMAT                      9:8 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_FORMAT_LE_X8R8G8B8   0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_FORMAT_LE_A8R8G8B8   0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_SRCCOLOR                        11:10 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_SRCCOLOR_NORMAL            0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_SRCCOLOR_COLOR_INVERSE     0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_SRCCOLOR_ALPHA_INVERSE     0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_SRCCOLOR_ALPHA_ONE         0x00000003 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_CULLING                         14:12 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_CULLING_NONE               0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_CULLING_COUNTERCLOCKWISE   0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_CULLING_CLOCKWISE          0x00000003 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZBUFFER                         15:15 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_ZBUFFER_SCREEN             0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZBUFFER_LINEAR             0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE                    19:16 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_FALSE         0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_LT            0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_EQ            0x00000003 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_LE            0x00000004 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_GT            0x00000005 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_NE            0x00000006 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_GE            0x00000007 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_COMPARE_TRUE          0x00000008 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_WRITE                      23:20 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_WRITE_NEVER           0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_WRITE_ALPHA           0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_WRITE_ALPHA_ZETA      0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_WRITE_ZETA            0x00000003 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ZETA_WRITE_ALWAYS          0x00000004 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_WRITE                     27:24 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_WRITE_NEVER          0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_WRITE_ALPHA          0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_WRITE_ALPHA_ZETA     0x00000002 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_WRITE_ZETA           0x00000003 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_COLOR_WRITE_ALWAYS         0x00000004 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ROP                             28:28 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_ROP_BLEND_AND              0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_ROP_ADD_WITH_SATURATION    0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_BETA                      29:29 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_BETA_SRCALPHA        0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_BETA_DESTCOLOR       0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_INPUT0                    30:30 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_INPUT0_DESTCOLOR     0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_INPUT0_ZERO          0x00000001 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_INPUT1                    31:31 /* -W-UF */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_INPUT1_SRCCOLOR      0x00000000 /* -W-UV */
#define NV_UD3D0Z_CONTROL_OUT_BLEND_INPUT1_ZERO          0x00000001 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL                          0x00570318 /* -W-4R */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_KEY                       7:0 /* -WXUF */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE                  31:8 /* -W-UF */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_ILLEGAL    0x00000000 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_FALSE      0x00000001 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_LT         0x00000002 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_EQ         0x00000003 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_LE         0x00000004 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_GT         0x00000005 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_NE         0x00000006 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_GE         0x00000007 /* -W-UV */
#define NV_UD3D0Z_ALPHA_CONTROL_ALPHA_COMPARE_TRUE       0x00000008 /* -W-UV */
#define NV_UD3D0Z_SPECULAR(i)                   (0x00571000+(i)*32) /* -W-4A */
#define NV_UD3D0Z_SPECULAR__SIZE_1                              128 /*       */
#define NV_UD3D0Z_SPECULAR_I0                                   3:0 /* -W-UF */
#define NV_UD3D0Z_SPECULAR_I1                                   7:4 /* -W-UF */
#define NV_UD3D0Z_SPECULAR_I2                                  11:8 /* -W-UF */
#define NV_UD3D0Z_SPECULAR_I3                                 15:12 /* -W-UF */
#define NV_UD3D0Z_SPECULAR_I4                                 19:16 /* -W-UF */
#define NV_UD3D0Z_SPECULAR_I5                                 23:20 /* -W-UF */
#define NV_UD3D0Z_SPECULAR_FOG                                31:24 /* -W-UF */
#define NV_UD3D0Z_COLOR(i)                      (0x00571004+(i)*32) /* -W-4A */
#define NV_UD3D0Z_COLOR__SIZE_1                                 128 /*       */
#define NV_UD3D0Z_COLOR_B8                                      7:0 /* -W-UF */
#define NV_UD3D0Z_COLOR_G8                                     16:8 /* -W-UF */
#define NV_UD3D0Z_COLOR_R8                                    23:16 /* -W-UF */
#define NV_UD3D0Z_COLOR_A8                                    32:24 /* -W-UF */
#define NV_UD3D0Z_X(i)                          (0x00571008+(i)*32) /* -W-4A */
#define NV_UD3D0Z_X__SIZE_1                                     128 /*       */
#define NV_UD3D0Z_X_VALUE                                      31:0 /* -W-FF */
#define NV_UD3D0Z_Y(i)                          (0x0057100C+(i)*32) /* -W-4A */
#define NV_UD3D0Z_Y__SIZE_1                                     128 /*       */
#define NV_UD3D0Z_Y_VALUE                                      31:0 /* -W-FF */
#define NV_UD3D0Z_Z(i)                          (0x00571010+(i)*32) /* -W-4A */
#define NV_UD3D0Z_Z__SIZE_1                                     128 /*       */
#define NV_UD3D0Z_Z_VALUE                                      31:0 /* -W-FF */
#define NV_UD3D0Z_M(i)                          (0x00571014+(i)*32) /* -W-4A */
#define NV_UD3D0Z_M__SIZE_1                                     128 /*       */
#define NV_UD3D0Z_M_VALUE                                      31:0 /* -W-FF */
#define NV_UD3D0Z_U(i)                          (0x00571018+(i)*32) /* -W-4A */
#define NV_UD3D0Z_U__SIZE_1                                     128 /*       */
#define NV_UD3D0Z_U_VALUE                                      31:0 /* -W-FF */
#define NV_UD3D0Z_V(i)                          (0x0057101c+(i)*32) /* -W-4A */
#define NV_UD3D0Z_V__SIZE_1                                     128 /*       */
#define NV_UD3D0Z_V_VALUE                                      31:0 /* -W-FF */
/* usr_dx5_textured_triangle.ref */
#define NV4_DX5_TEXTURE_TRIANGLE                         0x00000054 /* ----C */
#define NV_054                                0x005e1FFF:0x005e0000 /* -W--D */
#define NV_054_NV4_DX5_TEXTURE_TRIANGLE                  0x005e0000 /* -W-4R */
#define NV_054_NV4_DX5_TEXTURE_TRIANGLE_HANDLE                 31:0 /* -WXVF */
#define NV_054_NOP                                       0x005e0100 /* -W-4R */
#define NV_054_NOP_PARAMETER                                   31:0 /* -WXVF */
#define NV_054_NOTIFY                                    0x005e0104 /* -W-4R */
#define NV_054_NOTIFY_STYLE                                    31:0 /* -WXVF */
#define NV_054_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_054_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_054_NOTIFY__ALIAS_1                    NV_054_SET NOTIFY /*       */
#define NV_054_SET_NOTIFY_PARAMETER                            31:0 /* -WXVF */
#define NV_054_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_054_SET_CONTEXT_DMA_NOTIFY                    0x005e0180 /* -W-4R */
#define NV_054_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -WXVF */
#define NV_054_SET_CONTEXT_DMA_A                         0x005e0184 /* -W-4R */
#define NV_054_SET_CONTEXT_DMA_A_PARAMETER                     31:0 /* -WXVF */
#define NV_054_SET_CONTEXT_DMA_B                         0x005e0188 /* -W-4R */
#define NV_054_SET_CONTEXT_DMA_B_PARAMETER                     31:0 /* -WXVF */
#define NV_054_SET_CONTEXT_SURFACES                      0x005e018c /* -W-4R */
#define NV_054_SET_CONTEXT_SURFACES_PARAMETER                  31:0 /* -WXVF */
#define NV_054_COLORKEY                                  0x005e0300 /* -W-4R */
#define NV_054_COLORKEY_VALUE                                  31:0 /* -WXUF */
#define NV_054_OFFSET                                    0x005e0304 /* -W-4R */
#define NV_054_OFFSET_VALUE                                    31:0 /* -WXUF */
#define NV_054_FORMAT                                    0x005e0308 /* -W-4R */
#define NV_054_FORMAT_CONTEXT_DMA                               1:0 /* -WXUF */
#define NV_054_FORMAT_CONTEXT_DMA_A                      0x00000001 /* -W--V */
#define NV_054_FORMAT_CONTEXT_DMA_B                      0x00000002 /* -W--V */
#define NV_054_FORMAT_COLORKEYENABLE                            3:2 /* -WXUF */
#define NV_054_FORMAT_COLORKEYENABLE_FALSE               0x00000000 /* -W--V */
#define NV_054_FORMAT_COLORKEYENABLE_TRUE                0x00000001 /* -W--V */
#define NV_054_FORMAT_ORIGIN_ZOH                                5:4 /* -WXUF */
#define NV_054_FORMAT_ORIGIN_ZOH_CENTER                  0x00000001 /* -W--V */
#define NV_054_FORMAT_ORIGIN_ZOH_CORNER                  0x00000002 /* -W--V */
#define NV_054_FORMAT_ORIGIN_FOH                                7:6 /* -WXUF */
#define NV_054_FORMAT_ORIGIN_FOH_CENTER                  0x00000001 /* -W--V */
#define NV_054_FORMAT_ORIGIN_FOH_CORNER                  0x00000002 /* -W--V */
#define NV_054_FORMAT_COLOR                                    11:8 /* -WXUF */
#define NV_054_FORMAT_COLOR_LE_Y8                        0x00000001 /* -W--V */
#define NV_054_FORMAT_COLOR_LE_A1R5G5B5                  0x00000002 /* -W--V */
#define NV_054_FORMAT_COLOR_LE_X1R5G5B5                  0x00000003 /* -W--V */
#define NV_054_FORMAT_COLOR_LE_A4R4G4B4                  0x00000004 /* -W--V */
#define NV_054_FORMAT_COLOR_LE_R5G6B5                    0x00000005 /* -W--V */
#define NV_054_FORMAT_COLOR_LE_A8R8G8B8                  0x00000006 /* -W--V */
#define NV_054_FORMAT_COLOR_LE_X8R8G8B8                  0x00000007 /* -W--V */
#define NV_054_FORMAT_MIPMAP_LEVELS                           15:12 /* -WXUF */
#define NV_054_FORMAT_BASE_SIZE_U                             19:16 /* -WXUF */
#define NV_054_FORMAT_BASE_SIZE_U_1X1                    0x00000000 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_2X2                    0x00000001 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_4X4                    0x00000002 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_8X8                    0x00000003 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_16X16                  0x00000004 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_32X32                  0x00000005 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_64X64                  0x00000006 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_128X128                0x00000007 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_256X256                0x00000008 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_512X512                0x00000009 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_1024X1024              0x0000000A /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_U_2048X2048              0x0000000B /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V                             23:20 /* -WXUF */
#define NV_054_FORMAT_BASE_SIZE_V_1X1                    0x00000000 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_2X2                    0x00000001 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_4X4                    0x00000002 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_8X8                    0x00000003 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_16X16                  0x00000004 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_32X32                  0x00000005 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_64X64                  0x00000006 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_128X128                0x00000007 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_256X256                0x00000008 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_512X512                0x00000009 /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_1024X1024              0x0000000A /* -W--V */
#define NV_054_FORMAT_BASE_SIZE_V_2048X2048              0x0000000B /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSU                         26:24 /* -WXUF */
#define NV_054_FORMAT_TEXTUREADDRESSU_WRAP               0x00000001 /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSU_MIRROR             0x00000002 /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSU_CLAMP              0x00000003 /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSU_BORDER             0x00000004 /* -W--V */
#define NV_054_FORMAT_WRAPU                                   27:27 /* -WXUF */
#define NV_054_FORMAT_WRAPU_FALSE                        0x00000000 /* -W--V */
#define NV_054_FORMAT_WRAPU_TRUE                         0x00000001 /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSV                         30:28 /* -WXUF */
#define NV_054_FORMAT_TEXTUREADDRESSV_WRAP               0x00000001 /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSV_MIRROR             0x00000002 /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSV_CLAMP              0x00000003 /* -W--V */
#define NV_054_FORMAT_TEXTUREADDRESSV_BORDER             0x00000004 /* -W--V */
#define NV_054_FORMAT_WRAPV                                   31:31 /* -WXUF */
#define NV_054_FORMAT_WRAPV_FALSE                        0x00000000 /* -W--V */
#define NV_054_FORMAT_WRAPV_TRUE                         0x00000001 /* -W--V */
#define NV_054_FILTER                                    0x005e030c /* -W-4R */
#define NV_054_FILTER_KERNEL_SIZE_X                             7:0 /* -WXUF */
#define NV_054_FILTER_KERNEL_SIZE_Y                            14:8 /* -WXUF */
#define NV_054_FILTER_MIPMAP_DITHER_ENABLE                    15:15 /* -WXUF */
#define NV_054_FILTER_MIPMAP_DITHER_ENABLE_FALSE         0x00000000 /* -W--V */
#define NV_054_FILTER_MIPMAP_DITHER_ENABLE_TRUE          0x00000001 /* -W--V */
#define NV_054_FILTER_MIPMAPLODBIAS                           23:16 /* -WXUF */
#define NV_054_FILTER_TEXTUREMIN                              26:24 /* -WXUF */
#define NV_054_FILTER_TEXTUREMIN_NEAREST                 0x00000001 /* -W--V */
#define NV_054_FILTER_TEXTUREMIN_LINEAR                  0x00000002 /* -W--V */
#define NV_054_FILTER_TEXTUREMIN_MIPNEAREST              0x00000003 /* -W--V */
#define NV_054_FILTER_TEXTUREMIN_MIPLINEAR               0x00000004 /* -W--V */
#define NV_054_FILTER_TEXTUREMIN_LINEARMIPNEAREST        0x00000005 /* -W--V */
#define NV_054_FILTER_TEXTUREMIN_LINEARMIPLINEAR         0x00000006 /* -W--V */
#define NV_054_FILTER_ANISOTROPIC_MIN_ENABLE                  27:27 /* -WXUF */
#define NV_054_FILTER_ANISOTROPIC_MIN_ENABLE_FALSE       0x00000000 /* -W--V */
#define NV_054_FILTER_ANISOTROPIC_MIN_ENABLE_TRUE        0x00000001 /* -W--V */
#define NV_054_FILTER_TEXTUREMAG                              30:28 /* -WXUF */
#define NV_054_FILTER_TEXTUREMAG_NEAREST                 0x00000001 /* -W--V */
#define NV_054_FILTER_TEXTUREMAG_LINEAR                  0x00000002 /* -W--V */
#define NV_054_FILTER_TEXTUREMAG_MIPNEAREST              0x00000003 /* -W--V */
#define NV_054_FILTER_TEXTUREMAG_MIPLINEAR               0x00000004 /* -W--V */
#define NV_054_FILTER_TEXTUREMAG_LINEARMIPNEAREST        0x00000005 /* -W--V */
#define NV_054_FILTER_TEXTUREMAG_LINEARMIPLINEAR         0x00000006 /* -W--V */
#define NV_054_FILTER_ANISOTROPIC_MAG_ENABLE                  31:31 /* -WXUF */
#define NV_054_FILTER_ANISOTROPIC_MAG_ENABLE_FALSE       0x00000000 /* -W--V */
#define NV_054_FILTER_ANISOTROPIC_MAG_ENABLE_TRUE        0x00000001 /* -W--V */
#define NV_054_BLEND                                     0x005e0310 /* -W-4R */
#define NV_054_BLEND_TEXTUREMAPBLEND                            3:0 /* -WXVF */
#define NV_054_BLEND_TEXTUREMAPBLEND_DECAL               0x00000001 /* -W--V */
#define NV_054_BLEND_TEXTUREMAPBLEND_MODULATE            0x00000002 /* -W--V */
#define NV_054_BLEND_TEXTUREMAPBLEND_DECALALPHA          0x00000003 /* -W--V */
#define NV_054_BLEND_TEXTUREMAPBLEND_MODULATEALPHA       0x00000004 /* -W--V */
#define NV_054_BLEND_TEXTUREMAPBLEND_DECALMASK           0x00000005 /* -W--V */
#define NV_054_BLEND_TEXTUREMAPBLEND_MODULATEMASK        0x00000006 /* -W--V */
#define NV_054_BLEND_TEXTUREMAPBLEND_COPY                0x00000007 /* -W--V */
#define NV_054_BLEND_TEXTUREMAPBLEND_ADD                 0x00000008 /* -W--V */
#define NV_054_BLEND_OPERATION                                  5:4 /* -WXVF */
#define NV_054_BLEND_OPERATION_MUX_TALPHALSB             0x00000001 /* -W--V */
#define NV_054_BLEND_OPERATION_MUX_TALPHAMSB             0x00000002 /* -W--V */
#define NV_054_BLEND_SHADEMODE                                  7:6 /* -WXVF */
#define NV_054_BLEND_SHADEMODE_FLAT                      0x00000001 /* -W--V */
#define NV_054_BLEND_SHADEMODE_GOURAUD                   0x00000002 /* -W--V */
#define NV_054_BLEND_SHADEMODE_PHONG                     0x00000003 /* -W--V */
#define NV_054_BLEND_TEXTUREPERSPECTIVE                        11:8 /* -WXVF */
#define NV_054_BLEND_TEXTUREPERSPECTIVE_FALSE            0x00000000 /* -W--V */
#define NV_054_BLEND_TEXTUREPERSPECTIVE_TRUE             0x00000001 /* -W--V */
#define NV_054_BLEND_SPECULARENABLE                           15:12 /* -WXVF */
#define NV_054_BLEND_SPECULARENABLE_FALSE                0x00000000 /* -W--V */
#define NV_054_BLEND_SPECULARENABLE_TRUE                 0x00000001 /* -W--V */
#define NV_054_BLEND_FOGENABLE                                19:16 /* -WXVF */
#define NV_054_BLEND_FOGENABLE_FALSE                     0x00000000 /* -W--V */
#define NV_054_BLEND_FOGENABLE_TRUE                      0x00000001 /* -W--V */
#define NV_054_BLEND_ALPHABLENDENABLE                         23:20 /* -WXVF */
#define NV_054_BLEND_ALPHABLENDENABLE_FALSE              0x00000000 /* -W--V */
#define NV_054_BLEND_ALPHABLENDENABLE_TRUE               0x00000001 /* -W--V */
#define NV_054_BLEND_SRCBLEND                                 27:24 /* -WXVF */
#define NV_054_BLEND_SRCBLEND_ZERO                       0x00000001 /* -W--V */
#define NV_054_BLEND_SRCBLEND_ONE                        0x00000002 /* -W--V */
#define NV_054_BLEND_SRCBLEND_SRCCOLOR                   0x00000003 /* -W--V */
#define NV_054_BLEND_SRCBLEND_INVSRCCOLOR                0x00000004 /* -W--V */
#define NV_054_BLEND_SRCBLEND_SRCALPHA                   0x00000005 /* -W--V */
#define NV_054_BLEND_SRCBLEND_INVSRCALPHA                0x00000006 /* -W--V */
#define NV_054_BLEND_SRCBLEND_DESTALPHA                  0x00000007 /* -W--V */
#define NV_054_BLEND_SRCBLEND_INVDESTALPHA               0x00000008 /* -W--V */
#define NV_054_BLEND_SRCBLEND_DESTCOLOR                  0x00000009 /* -W--V */
#define NV_054_BLEND_SRCBLEND_INVDESTCOLOR               0x0000000A /* -W--V */
#define NV_054_BLEND_SRCBLEND_SRCALPHASAT                0x0000000B /* -W--V */
#define NV_054_BLEND_DESTBLEND                                31:28 /* -WXVF */
#define NV_054_BLEND_DESTBLEND_ZERO                      0x00000001 /* -W--V */
#define NV_054_BLEND_DESTBLEND_ONE                       0x00000002 /* -W--V */
#define NV_054_BLEND_DESTBLEND_SRCCOLOR                  0x00000003 /* -W--V */
#define NV_054_BLEND_DESTBLEND_INVSRCCOLOR               0x00000004 /* -W--V */
#define NV_054_BLEND_DESTBLEND_SRCALPHA                  0x00000005 /* -W--V */
#define NV_054_BLEND_DESTBLEND_INVSRCALPHA               0x00000006 /* -W--V */
#define NV_054_BLEND_DESTBLEND_DESTALPHA                 0x00000007 /* -W--V */
#define NV_054_BLEND_DESTBLEND_INVDESTALPHA              0x00000008 /* -W--V */
#define NV_054_BLEND_DESTBLEND_DESTCOLOR                 0x00000009 /* -W--V */
#define NV_054_BLEND_DESTBLEND_INVDESTCOLOR              0x0000000A /* -W--V */
#define NV_054_BLEND_DESTBLEND_SRCALPHASAT               0x0000000B /* -W--V */
#define NV_054_CONTROL                                   0x005e0314 /* -W-4R */
#define NV_054_CONTROL_ALPHAREF                                 7:0 /* -WXUF */
#define NV_054_CONTROL_ALPHAFUNC                               11:8 /* -WXVF */
#define NV_054_CONTROL_ALPHAFUNC_NEVER                   0x00000001 /* -W--V */
#define NV_054_CONTROL_ALPHAFUNC_LESS                    0x00000002 /* -W--V */
#define NV_054_CONTROL_ALPHAFUNC_EQUAL                   0x00000003 /* -W--V */
#define NV_054_CONTROL_ALPHAFUNC_LESSEQUAL               0x00000004 /* -W--V */
#define NV_054_CONTROL_ALPHAFUNC_GREATER                 0x00000005 /* -W--V */
#define NV_054_CONTROL_ALPHAFUNC_NOTEQUAL                0x00000006 /* -W--V */
#define NV_054_CONTROL_ALPHAFUNC_GREATEREQUAL            0x00000007 /* -W--V */
#define NV_054_CONTROL_ALPHAFUNC_ALWAYS                  0x00000008 /* -W--V */
#define NV_054_CONTROL_ALPHATESTENABLE                        12:12 /* -WXVF */
#define NV_054_CONTROL_ALPHATESTENABLE_FALSE             0x00000000 /* -W--V */
#define NV_054_CONTROL_ALPHATESTENABLE_TRUE              0x00000001 /* -W--V */
#define NV_054_CONTROL_ORIGIN                                 13:13 /* -WXVF */
#define NV_054_CONTROL_ORIGIN_CENTER                     0x00000000 /* -W--V */
#define NV_054_CONTROL_ORIGIN_CORNER                     0x00000001 /* -W--V */
#define NV_054_CONTROL_ZENABLE                                15:14 /* -WXVF */
#define NV_054_CONTROL_ZENABLE_FALSE                     0x00000000 /* -W--V */
#define NV_054_CONTROL_ZENABLE_TRUE                      0x00000001 /* -W--V */
#define NV_054_CONTROL_ZFUNC                                  19:16 /* -WXVF */
#define NV_054_CONTROL_ZFUNC_NEVER                       0x00000001 /* -W--V */
#define NV_054_CONTROL_ZFUNC_LESS                        0x00000002 /* -W--V */
#define NV_054_CONTROL_ZFUNC_EQUAL                       0x00000003 /* -W--V */
#define NV_054_CONTROL_ZFUNC_LESSEQUAL                   0x00000004 /* -W--V */
#define NV_054_CONTROL_ZFUNC_GREATER                     0x00000005 /* -W--V */
#define NV_054_CONTROL_ZFUNC_NOTEQUAL                    0x00000006 /* -W--V */
#define NV_054_CONTROL_ZFUNC_GREATEREQUAL                0x00000007 /* -W--V */
#define NV_054_CONTROL_ZFUNC_ALWAYS                      0x00000008 /* -W--V */
#define NV_054_CONTROL_CULLMODE                               21:20 /* -WXVF */
#define NV_054_CONTROL_CULLMODE_NONE                     0x00000001 /* -W--V */
#define NV_054_CONTROL_CULLMODE_CW                       0x00000002 /* -W--V */
#define NV_054_CONTROL_CULLMODE_CCW                      0x00000003 /* -W--V */
#define NV_054_CONTROL_DITHERENABLE                           22:22 /* -WXVF */
#define NV_054_CONTROL_DITHERENABLE_FALSE                0x00000000 /* -W--V */
#define NV_054_CONTROL_DITHERENABLE_TRUE                 0x00000001 /* -W--V */
#define NV_054_CONTROL_Z_PERSPECTIVE_ENABLE                   23:23 /* -WXVF */
#define NV_054_CONTROL_Z_PERSPECTIVE_ENABLE_FALSE        0x00000000 /* -W--V */
#define NV_054_CONTROL_Z_PERSPECTIVE_ENABLE_TRUE         0x00000001 /* -W--V */
#define NV_054_CONTROL_ZWRITEENABLE                           29:24 /* -WXVF */
#define NV_054_CONTROL_ZWRITEENABLE_FALSE                0x00000000 /* -W--V */
#define NV_054_CONTROL_ZWRITEENABLE_TRUE                 0x00000001 /* -W--V */
#define NV_054_CONTROL_Z_FORMAT                               31:30 /* -WXVF */
#define NV_054_CONTROL_Z_FORMAT_FIXED                    0x00000001 /* -W--V */
#define NV_054_CONTROL_Z_FORMAT_FLOAT                    0x00000002 /* -W--V */
#define NV_054_FOGCOLOR                                  0x005e0318 /* -W-4R */
#define NV_054_FOGCOLOR_VALUE                                  31:0 /* -WXUF */
#define NV_054_TLVERTEX_SX(i)                   (0x005e0400+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_SX__SIZE_1                               16 /*       */
#define NV_054_TLVERTEX_SX_VALUE                               31:0 /* -WXFF */
#define NV_054_TLVERTEX_SY(i)                   (0x005e0404+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_SY__SIZE_1                               16 /*       */
#define NV_054_TLVERTEX_SY_VALUE                               31:0 /* -WXFF */
#define NV_054_TLVERTEX_SZ(i)                   (0x005e0408+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_SZ__SIZE_1                               16 /*       */
#define NV_054_TLVERTEX_SZ_VALUE                               31:0 /* -WXFF */
#define NV_054_TLVERTEX_RHW(i)                  (0x005e040c+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_RHW__SIZE_1                              16 /*       */
#define NV_054_TLVERTEX_RHW_VALUE                              31:0 /* -WXFF */
#define NV_054_TLVERTEX_COLOR(i)                (0x005e0410+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_COLOR__SIZE_1                            16 /*       */
#define NV_054_TLVERTEX_COLOR_VALUE                            31:0 /* -WXUF */
#define NV_054_TLVERTEX_COLOR_BLUE                              7:0 /* -WXUF */
#define NV_054_TLVERTEX_COLOR_GREEN                            15:8 /* -WXUF */
#define NV_054_TLVERTEX_COLOR_RED                             23:16 /* -WXUF */
#define NV_054_TLVERTEX_COLOR_ALPHA                           31:24 /* -WXUF */
#define NV_054_TLVERTEX_SPECULAR(i)             (0x005e0414+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_SPECULAR__SIZE_1                         16 /*       */
#define NV_054_TLVERTEX_SPECULAR_VALUE                         31:0 /* -WXUF */
#define NV_054_TLVERTEX_SPECULAR_BLUE                           7:0 /* -WXUF */
#define NV_054_TLVERTEX_SPECULAR_GREEN                         15:8 /* -WXUF */
#define NV_054_TLVERTEX_SPECULAR_RED                          23:16 /* -WXUF */
#define NV_054_TLVERTEX_SPECULAR_FOG                          31:24 /* -WXUF */
#define NV_054_TLVERTEX_TU(i)                   (0x005e0418+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_TU__SIZE_1                               16 /*       */
#define NV_054_TLVERTEX_TU_VALUE                               31:0 /* -WXFF */
#define NV_054_TLVERTEX_TV(i)                   (0x005e041c+(i)*32) /* -W-4A */
#define NV_054_TLVERTEX_TV__SIZE_1                               16 /*       */
#define NV_054_TLVERTEX_TV_VALUE                               31:0 /* -WXFF */
#define NV_054_TLVERTEX_DRAWPRIMITIVE(i)         (0x005e0600+(i)*4) /* -W-4A */
#define NV_054_TLVERTEX_DRAWPRIMITIVE__SIZE_1                    64 /*       */
#define NV_054_TLVERTEX_DRAWPRIMITIVE_I0                        3:0 /* -WXUF */
#define NV_054_TLVERTEX_DRAWPRIMITIVE_I1                        7:4 /* -WXUF */
#define NV_054_TLVERTEX_DRAWPRIMITIVE_I2                       11:8 /* -WXUF */
#define NV_054_TLVERTEX_DRAWPRIMITIVE_I3                      15:12 /* -WXUF */
#define NV_054_TLVERTEX_DRAWPRIMITIVE_I4                      19:16 /* -WXUF */
#define NV_054_TLVERTEX_DRAWPRIMITIVE_I5                      31:20 /* -WXUF */
/* usr_dx6_multitextured_triangle.ref */
#define NV4_DX6_MULTI_TEXTURE_TRIANGLE                   0x00000055 /* ----C */
#define NV_055                                0x005f1FFF:0x005f0000 /* -W--D */
#define NV_055_NV4_DX6_MULTI_TEXTURE_TRIANGLE            0x005f0000 /* -W-4R */
#define NV_055_NV4_DX6_MULTI_TEXTURE_TRIANGLE_HANDLE           31:0 /* -WXVF */
#define NV_055_NOP                                       0x005f0100 /* -W-4R */
#define NV_055_NOP_PARAMETER                                   31:0 /* -WXVF */
#define NV_055_NOTIFY                                    0x005f0104 /* -W-4R */
#define NV_055_NOTIFY_STYLE                                    31:0 /* -WXVF */
#define NV_055_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_055_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_055_NOTIFY_STYLE_NOT_PENDING                  0x00000002 /* -W--V */
#define NV_055_SET_CONTEXT_DMA_NOTIFY                    0x005f0180 /* -W-4R */
#define NV_055_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -WXVF */
#define NV_055_SET_CONTEXT_DMA_A                         0x005f0184 /* -W-4R */
#define NV_055_SET_CONTEXT_DMA_A_PARAMETER                     31:0 /* -WXVF */
#define NV_055_SET_CONTEXT_DMA_B                         0x005f0188 /* -W-4R */
#define NV_055_SET_CONTEXT_DMA_B_PARAMETER                     31:0 /* -WXVF */
#define NV_055_SET_CONTEXT_SURFACES                      0x005f018c /* -W-4R */
#define NV_055_SET_CONTEXT_SURFACES_PARAMETER                  31:0 /* -WXVF */
#define NV_055_OFFSET(i)                         (0x005f0308+(i)*4) /* -W-4A */
#define NV_055_OFFSET__SIZE_1                                     2 /*       */
#define NV_055_OFFSET_VALUE                                    31:0 /* -WXUF */
#define NV_055_FORMAT(i)                         (0x005f0310+(i)*4) /* -W-4A */
#define NV_055_FORMAT__SIZE_1                                     2 /*       */
#define NV_055_FORMAT_CONTEXT_DMA                               3:0 /* -WXUF */
#define NV_055_FORMAT_CONTEXT_DMA_A                      0x00000001 /* -W--V */
#define NV_055_FORMAT_CONTEXT_DMA_B                      0x00000002 /* -W--V */
#define NV_055_FORMAT_ORIGIN_ZOH                                5:4 /* -WXUF */
#define NV_055_FORMAT_ORIGIN_ZOH_CENTER                  0x00000001 /* -W--V */
#define NV_055_FORMAT_ORIGIN_ZOH_CORNER                  0x00000002 /* -W--V */
#define NV_055_FORMAT_ORIGIN_FOH                                7:6 /* -WXUF */
#define NV_055_FORMAT_ORIGIN_FOH_CENTER                  0x00000001 /* -W--V */
#define NV_055_FORMAT_ORIGIN_FOH_CORNER                  0x00000002 /* -W--V */
#define NV_055_FORMAT_COLOR                                    11:8 /* -WXUF */
#define NV_055_FORMAT_COLOR_LE_AY8                       0x00000001 /* -W--V */
#define NV_055_FORMAT_COLOR_LE_A1R5G5B5                  0x00000002 /* -W--V */
#define NV_055_FORMAT_COLOR_LE_X1R5G5B5                  0x00000003 /* -W--V */
#define NV_055_FORMAT_COLOR_LE_A4R4G4G4                  0x00000004 /* -W--V */
#define NV_055_FORMAT_COLOR_LE_R5G6B5                    0x00000005 /* -W--V */
#define NV_055_FORMAT_COLOR_LE_A8R8G8B8                  0x00000006 /* -W--V */
#define NV_055_FORMAT_COLOR_LE_X8R8G8B8                  0x00000007 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS                           15:12 /* -WXUF */
#define NV_055_FORMAT_MIPMAP_LEVELS_1                    0x00000001 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_2                    0x00000002 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_3                    0x00000003 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_4                    0x00000004 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_5                    0x00000005 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_6                    0x00000006 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_7                    0x00000007 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_8                    0x00000008 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_9                    0x00000009 /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_10                   0x0000000A /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_11                   0x0000000B /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_12                   0x0000000C /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_13                   0x0000000D /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_14                   0x0000000E /* -W--V */
#define NV_055_FORMAT_MIPMAP_LEVELS_15                   0x0000000F /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U                             19:16 /* -WXUF */
#define NV_055_FORMAT_BASE_SIZE_U_1X1                    0x00000000 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_2X2                    0x00000001 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_4X4                    0x00000002 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_8X8                    0x00000003 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_16X16                  0x00000004 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_32X32                  0x00000005 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_64X64                  0x00000006 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_128X128                0x00000007 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_256X256                0x00000008 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_512X512                0x00000009 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_1024X1024              0x0000000A /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_U_2048X2048              0x0000000B /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V                             23:20 /* -WXUF */
#define NV_055_FORMAT_BASE_SIZE_V_1X1                    0x00000000 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_2X2                    0x00000001 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_4X4                    0x00000002 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_8X8                    0x00000003 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_16X16                  0x00000004 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_32X32                  0x00000005 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_64X64                  0x00000006 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_128X128                0x00000007 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_256X256                0x00000008 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_512X512                0x00000009 /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_1024X1024              0x0000000A /* -W--V */
#define NV_055_FORMAT_BASE_SIZE_V_2048X2048              0x0000000B /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSU                         26:24 /* -WXUF */
#define NV_055_FORMAT_TEXTUREADDRESSU_WRAP               0x00000001 /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSU_MIRROR             0x00000002 /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSU_CLAMP              0x00000003 /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSU_BORDER             0x00000004 /* -W--V */
#define NV_055_FORMAT_WRAPU                                   27:27 /* -WXUF */
#define NV_055_FORMAT_WRAPU_FALSE                        0x00000000 /* -W--V */
#define NV_055_FORMAT_WRAPU_TRUE                         0x00000001 /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSV                         30:28 /* -WXUF */
#define NV_055_FORMAT_TEXTUREADDRESSV_WRAP               0x00000001 /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSV_MIRROR             0x00000002 /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSV_CLAMP              0x00000003 /* -W--V */
#define NV_055_FORMAT_TEXTUREADDRESSV_BORDER             0x00000004 /* -W--V */
#define NV_055_FORMAT_WRAPV                                   31:31 /* -WXUF */
#define NV_055_FORMAT_WRAPV_FALSE                        0x00000000 /* -W--V */
#define NV_055_FORMAT_WRAPV_TRUE                         0x00000001 /* -W--V */
#define NV_055_FILTER(i)                         (0x005f0318+(i)*4) /* -W-4A */
#define NV_055_FILTER__SIZE_1                                     2 /*       */
#define NV_055_FILTER_KERNEL_SIZE_X                             7:0 /* -WXUF */
#define NV_055_FILTER_KERNEL_SIZE_Y                            14:8 /* -WXUF */
#define NV_055_FILTER_MIPMAP_DITHER_ENABLE                    15:15 /* -WXUF */
#define NV_055_FILTER_MIPMAP_DITHER_ENABLE_FALSE         0x00000000 /* -W--V */
#define NV_055_FILTER_MIPMAP_DITHER_ENABLE_TRUE          0x00000001 /* -W--V */
#define NV_055_FILTER_MIPMAPLODBIAS                           23:16 /* -WXUF */
#define NV_055_FILTER_TEXTUREMIN                              26:24 /* -WXUF */
#define NV_055_FILTER_TEXTUREMIN_NEAREST                 0x00000001 /* -W--V */
#define NV_055_FILTER_TEXTUREMIN_LINEAR                  0x00000002 /* -W--V */
#define NV_055_FILTER_TEXTUREMIN_MIPNEAREST              0x00000003 /* -W--V */
#define NV_055_FILTER_TEXTUREMIN_MIPLINEAR               0x00000004 /* -W--V */
#define NV_055_FILTER_TEXTUREMIN_LINEARMIPNEAREST        0x00000005 /* -W--V */
#define NV_055_FILTER_TEXTUREMIN_LINEARMIPLINEAR         0x00000006 /* -W--V */
#define NV_055_FILTER_ANISOTROPIC_MIN_ENABLE                  27:27 /* -WXUF */
#define NV_055_FILTER_ANISOTROPIC_MIN_ENABLE_FALSE       0x00000000 /* -W--V */
#define NV_055_FILTER_ANISOTROPIC_MIN_ENABLE_TRUE        0x00000001 /* -W--V */
#define NV_055_FILTER_TEXTUREMAG                              30:28 /* -WXUF */
#define NV_055_FILTER_TEXTUREMAG_NEAREST                 0x00000001 /* -W--V */
#define NV_055_FILTER_TEXTUREMAG_LINEAR                  0x00000002 /* -W--V */
#define NV_055_FILTER_TEXTUREMAG_MIPNEAREST              0x00000003 /* -W--V */
#define NV_055_FILTER_TEXTUREMAG_MIPLINEAR               0x00000004 /* -W--V */
#define NV_055_FILTER_TEXTUREMAG_LINEARMIPNEAREST        0x00000005 /* -W--V */
#define NV_055_FILTER_TEXTUREMAG_LINEARMIPLINEAR         0x00000006 /* -W--V */
#define NV_055_FILTER_ANISOTROPIC_MAG_ENABLE                  31:31 /* -WXUF */
#define NV_055_FILTER_ANISOTROPIC_MAG_ENABLE_FALSE       0x00000000 /* -W--V */
#define NV_055_FILTER_ANISOTROPIC_MAG_ENABLE_TRUE        0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA                           0x005f0320 /* -W-4R */
#define NV_055_COMBINE_0_ALPHA_INVERSE_0                        0:0 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_INVERSE_0_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_INVERSE_0_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ALPHA_0                          1:1 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0                       7:2 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0_ZERO           0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0_FACTOR         0x00000002 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0_DIFFUSE        0x00000003 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0_INPUT          0x00000004 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE0       0x00000005 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE1       0x00000006 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURELOD     0x00000007 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_INVERSE_1                        8:8 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_INVERSE_1_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_INVERSE_1_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ALPHA_1                          9:9 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1                     15:10 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1_ZERO           0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1_FACTOR         0x00000002 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1_DIFFUSE        0x00000003 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1_INPUT          0x00000004 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE0       0x00000005 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE1       0x00000006 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURELOD     0x00000007 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_INVERSE_2                      16:16 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_INVERSE_2_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_INVERSE_2_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ALPHA_2                        17:17 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2                     23:18 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2_ZERO           0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2_FACTOR         0x00000002 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2_DIFFUSE        0x00000003 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2_INPUT          0x00000004 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE0       0x00000005 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE1       0x00000006 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURELOD     0x00000007 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_INVERSE_3                      24:24 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_INVERSE_3_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_INVERSE_3_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ALPHA_3                        25:25 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3                     28:26 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3_ZERO           0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3_FACTOR         0x00000002 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3_DIFFUSE        0x00000003 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3_INPUT          0x00000004 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE0       0x00000005 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE1       0x00000006 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURELOD     0x00000007 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_OPERATION                      31:29 /* -WXVF */
#define NV_055_COMBINE_0_ALPHA_OPERATION_ADD             0x00000001 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_OPERATION_ADD2            0x00000002 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_OPERATION_ADD4            0x00000003 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_OPERATION_ADDSIGNED       0x00000004 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_OPERATION_MUX             0x00000005 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_OPERATION_ADDCOMPLEMENT   0x00000006 /* -W--V */
#define NV_055_COMBINE_0_ALPHA_OPERATION_ADDSIGNED2      0x00000007 /* -W--V */
#define NV_055_COMBINE_0_COLOR                           0x005f0324 /* -W-4R */
#define NV_055_COMBINE_0_COLOR_INVERSE_0                        0:0 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_INVERSE_0_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_INVERSE_0_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_0                          1:1 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_ALPHA_0_COLOR             0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_0_ALPHA             0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0                       7:2 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0_ZERO           0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0_FACTOR         0x00000002 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0_DIFFUSE        0x00000003 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0_INPUT          0x00000004 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE0       0x00000005 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE1       0x00000006 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURELOD     0x00000007 /* -W--V */
#define NV_055_COMBINE_0_COLOR_INVERSE_1                        8:8 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_INVERSE_1_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_INVERSE_1_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_1                          9:9 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_ALPHA_1_COLOR             0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_1_ALPHA             0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1                     15:10 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1_ZERO           0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1_FACTOR         0x00000002 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1_DIFFUSE        0x00000003 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1_INPUT          0x00000004 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE0       0x00000005 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE1       0x00000006 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURELOD     0x00000007 /* -W--V */
#define NV_055_COMBINE_0_COLOR_INVERSE_2                      16:16 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_INVERSE_2_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_INVERSE_2_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_2                        17:17 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_ALPHA_2_COLOR             0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_2_ALPHA             0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2                     23:18 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2_ZERO           0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2_FACTOR         0x00000002 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2_DIFFUSE        0x00000003 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2_INPUT          0x00000004 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE0       0x00000005 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE1       0x00000006 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURELOD     0x00000007 /* -W--V */
#define NV_055_COMBINE_0_COLOR_INVERSE_3                      24:24 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_INVERSE_3_NORMAL          0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_INVERSE_3_INVERSE         0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_3                        25:25 /* -WXVF */
#define NV_055_COMBINE_0_COLOR_ALPHA_3_COLOR             0x00000000 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ALPHA_3_ALPHA             0x00000001 /* -W--V */
#define NV_055_COMBINE_0_COLOR_ARGUMENT_3                     28:26 /* -WX