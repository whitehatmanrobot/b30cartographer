   0,   0,   0,   8,   6,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,  11,   0,   0,  25,   0,   0,  25,   0,   0,   0,   6,   3,   0,
   0,   0,   6,   0,   3,   0,   9,   0,   0,   0,   0,   9,   0,   0,   0,   0,
  17,   0,   0,   0,  17,   0,   0,  17,   0,   9,   0,   9,   0,   0,   9,   0,
   0,   0,  10,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,  25,   0,
  25,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  24,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,  19,   0,  23,   0,  23,   0,  23,   0,  23,   0,  19,   0,  22,   0,
  22,   0,  23,   0,  23,   0,  22,   0,  22,   0,  23,   0,  23,   0,  23,   0,
   0,   0,   0,  23,   0,  16,   0,  21,   0,   0,   0,  23,  22,   0,   0,   0,
   0,   0,   0,   0,  13,   0,  11,   0,  13,   0,  14,   0,  14,   0,  14,   0,
   0,   0,   9,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,  12,   0,
  11,   0,   0,   0,   0,  12,   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,
  11,   0,  11,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,  24,   0,  14,   0,  14,   0,  14,   0,   0,   0,
  14,   0,   0,   0,  14,   0,   0,   0,  11,   0,  10,   0,  10,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   9,   0,   8,   9,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   0,   0,   0,  25,   0,  22,   0,  25,   0,  25,   0,  25,   0,  25,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,  26,   0,   0,  26,   0,
  26,   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   6,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,
   0,  17,   0,  17,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   9,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,
  25,   0,  25,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,  10,   0,  10,  10,   0,   0,   0,   0,   6,   3,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,   5,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   5,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   4,   5,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,
  22,   0,   0,  20,   0,  23,   0,  20,   0,  23,   0,  17,   0,  23,   0,  23,
   0,   0,   6,   0,  23,   0,  23,   0,   0,   0,  23,   0,  23,   0,   0,  22,
   0,  17,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,   0,  18,
   0,  11,   0,  11,   0,  10,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   4,
   4,   0,   4,   4,   0,   8,   0,   8,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,  26,   0,
  26,   0,   0,  26,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,   0,  15,
   0,  15,   0,   0,  15,   0,  16,   0,  16,   0,  16,   0,  16,   0,  12,   0,
   0,   0,  12,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  25,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   7,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,  25,   0,   0,  25,   0,   0,   0,  25,   0,  25,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,  10,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   7,   0,  24,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,
   7,   0,   0,   0,   0,   0,  24,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,  18,   0,  17,   0,  18,   0,  18,   0,  18,   0,   0,   0,  18,
   0,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,  17,   0,  16,  17,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   7,   7,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,  14,   0,   0,  14,   0,   0,  13,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,  10,   4,   0,   8,   2,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,  38,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  16,   0,  15,   0,  17,   0,  19,   0,  19,   0,   0,   0,  19,   0,  19,   0,
   0,  18,   0,  19,   0,  19,   0,  19,   0,   0,   0,  19,   0,   0,   0,  19,
  19,   0,   0,   0,   0,   0,   0,   0,  11,   0,  10,   0,  11,   0,  11,  10,
   0,   0,   8,   0,   0,   0,   8,   6,   0,   0,   0,   0,   3,   0,   5,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,
  12,   0,   0,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,  38,   0,  38,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  25,   0,  11,   0,  10,   0,   0,   0,  11,   0,
   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   7,   0,  38,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  14,   0,  14,
   0,  12,   0,   0,   0,  14,   0,   0,   0,  14,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   8,   8,   0,   0,   0,   0,  14,   0,   0,
  14,   0,  10,   0,   7,   0,   0,  10,  10,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   9,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,  24,   0,  25,   0,
  25,   0,  25,   0,   7,   0,   0,   7,   0,  12,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,  16,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   4,
   0,  10,   0,  10,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  19,   0,   9,   0,  20,   0,  20,   0,  19,   0,
  19,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  16,   0,  20,  20,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   4,   0,  11,   0,  12,   0,  12,
   0,  12,   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   5,   4,   0,
   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,
   0,   0,  11,   0,   0,   0,   0,   0,  11,   0,   4,   4,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   9,   0,   0,   0,   9,   9,   0,   4,   0,   0,   4,   0,   0,   0,   4,   4,
   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,  16,   0,  16,   0,  16,   0,   6,   0,  16,   0,  15,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,
  12,   0,   0,  12,   0,  12,  12,   0,   8,   0,   0,   8,   0,   0,   0,   0,
  38,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,  16,   0,   0,  16,
   0,   0,  16,   0,   0,  16,   0,   0,   0,   7,   0,   0,   0,   7,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   6,   3,   0,   0,
   0,   0,   0,   6,   0,   3,   0,   0,   0,   0,   0,   0,   0,  24,   0,  38,
   0,   0,   0,   0,   0,  10,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,
  16,   0,  17,   0,   0,  17,   0,  17,   0,   0,  17,   0,   0,   0,   0,   0,
   0,  10,   0,  11,   0,  11,   0,  13,   0,  14,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,  10,   0,  10,  10,   0,   0,   0,   0,   0,
   0,   0,  11,   0,  11,   0,   0,  10,   0,  12,  10,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   7,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   7,   0,  25,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,  13,   0,  13,   0,  13,   0,   0,   0,
  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   5,
   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,
  10,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  25,   0,  15,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   8,   0,  10,
   0,   9,   0,   0,  10,   0,   0,   0,   0,   0,   0,   7,   0,   0,   8,   7,
   0,   0,   0,   0,   0,   0,   9,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   4,   4,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,
  12,  12,   0,   0,   0,   4,   0,   0,   4,   0,   0,  10,   0,   0,  10,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   4,   4,   0,   0,   0,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,  14,
   0,   0,   0,  10,   0,   0,  10,   0,   0,   0,   0,  10,   0,   4,   4,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
   0,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,  16,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,  13,   0,  25,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  15,   0,  16,   0,  16,   0,
  16,   0,  13,   0,  16,   0,  16,   0,  16,   0,  16,  16,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,
  12,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,  25,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,
   0,  14,   0,  14,   0,   0,   0,   4,   0,   0,   0,   4,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  14,   0,  12,   0,  12,   0,
  12,   0,   0,   0,  12,   0,  12,  12,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   4,   0,   0,  11,   0,  11,   0,  11,   0,   0,
   0,  11,  11,   0,   0,   0,   0,   0,   0,  24,   0,   8,   0,   0,   8,   0,
   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  10,   0,  11,   0,  10,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   3,   5,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,  11,   0,  17,   0,  15,   0,  17,   0,  17,
   0,  17,   0,   0,   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,  10,   0,  12,   0,  12,  12,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,  15,   0,  14,   0,  15,   0,  15,   0,   0,
   0,  13,   0,  15,   0,   0,   0,   0,  15,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   4,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,  13,   0,   0,  13,   0,   0,   0,  16,   0,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   3,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,  15,   0,  16,   0,
  16,   0,  38,   0,   0,   0,   0,   0,  38,   0,   6,   0,   8,   8,   0,   0,
   0,   0,   0,   5,   0,   0,   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,  10,   0,  10,   0,  10,   0,
   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   8,   0,   0,   0,
   5,   4,   0,   0,   0,   9,   0,   0,   0,   0,   9,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,  17,   0,  17,   0,  16,   0,  17,   0,  17,   0,   0,
   0,   0,   0,  17,   0,  17,   0,  17,  17,   0,   0,   0,   0,   0,  11,   0,
   9,   0,  13,   0,  13,   0,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   8,   6,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,
   0,   6,   0,   0,   8,   0,   8,   6,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,  11,   0,   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,   0,
   6,   0,   0,   3,   0,  35,   0,   0,  37,   0,   0,   0,   0,   0,   0,  36,
   0,   0,  38,   0,   5,   4,   0,   0,   0,   0,   0,  25,   0,  24,   0,   0,
  15,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,
   0,   9,   0,  38,   0,  38,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   6,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   4,   4,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   9,   0,   0,   0,   0,   9,   9,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  15,   0,   0,
  14,   0,   0,   0,  15,   0,  16,   0,  13,   0,  17,   0,  17,   0,   0,  17,
  17,   0,   0,   0,   7,   0,   0,   7,   0,   0,   7,   0,   4,   5,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,   9,   0,
   0,   9,   9,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,  37,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,
  12,   0,   0,  12,   0,   7,   0,   0,   0,   0,   7,   7,   0,   4,   5,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  15,   0,  15,   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,   9,
   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  16,   0,  16,
   0,  16,   0,  16,   0,   0,   0,  16,   0,  10,   0,   0,   0,   0,   0,  17,
   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,   0,   0,  17,   0,
  16,   0,   0,   0,  17,   0,  17,   0,   0,   0,  17,  17,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,  10,   0,  12,   0,  13,   0,  12,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,  12,   0,   0,  12,
   0,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   6,   3,   0,   0,   0,   9,   0,  11,   0,
   0,   9,   0,   0,   6,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   0,   0,   7,   0,   0,   0,   7,   0,   0,   7,
   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   7,   0,   7,   7,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   0,   0,   7,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,  11,   0,  12,   0,   0,  12,   0,   0,   0,  12,   0,  12,   0,  12,
   0,   0,   0,   0,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,   0,
  20,   0,  20,   0,  20,   0,   0,  20,   0,  19,   0,  20,   0,   0,   0,   0,
   0,   8,   0,   0,   8,   0,   0,   4,   0,   4,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   0,   9,   9,   0,   0,   4,   0,   4,   0,   0,   0,  11,   0,
   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,   8,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,
  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
  38,   0,   0,  38,   0,   0,  10,   0,  10,   0,  10,   0,  12,  12,   0,   0,
   4,   0,   0,   0,   4,   0,   3,   5,   0,   4,   0,   0,   0,   4,   0,  10,
   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,
   8,   0,   0,  10,   0,  10,   9,   0,   0,   0,   0,   0,   0,   0,   3,   5,
   0,   0,   0,   0,   0,   0,  25,   0,   0,  24,   0,   0,   0,  25,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   9,   0,  11,   0,  11,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   7,   0,  11,   0,  11,   0,   8,   0,   0,   0,   0,   0,
   8,   0,   7,   0,   7,   7,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,  12,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   7,   0,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,  14,   0,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,  38,   0,
  38,   0,  38,   0,  38,   0,   0,   0,  38,   0,  38,   0,   0,   0,  38,   0,
   0,  38,   0,  11,   0,  10,   0,  11,   0,   0,  10,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,  37,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   4,   4,   0,   0,   0,  10,   0,   0,   0,  11,   0,   0,  11,   0,   0,
   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   8,   0,  10,   0,  10,   0,   0,  10,   0,   0,   0,  16,   0,  16,   0,
   0,  16,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,  13,   0,
   0,  15,   0,   0,  17,   0,   0,  18,   0,  23,   0,  23,   0,   0,  23,   0,
   0,   0,   0,   0,  19,   0,   0,  15,   0,   0,   0,  17,   0,   0,  20,   0,
  23,   0,  21,   0,   0,   0,  23,   0,   0,  21,   0,  23,   0,  18,   0,  21,
   0,  25,   0,  24,   0,  25,   0,  25,   0,  25,   0,  20,   0,  24,   0,  25,
   0,  25,   0,  24,   0,  25,   0,  25,  25,   0,   0,   0,   0,   0,  14,   0,
  14,   0,  17,   0,  16,   0,  17,   0,  16,   0,  17,   0,  17,   0,  17,   0,
  17,  17,   0,   0,   0,   0,   0,  14,   0,  13,   0,  14,   0,  13,   0,  13,
   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,
   0,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,
   0,   5,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   6,   0,   8,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   4,   5,   0,   0,
   0,   0,   0,  38,   0,   0,  36,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,  10,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  11,
   0,  11,   0,  10,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   7,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   5,   4,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,
   9,   0,   4,   0,   4,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
  14,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,   0,   0,   0,  24,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   9,   9,   0,   0,   0,   0,   4,   4,   0,  38,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,  16,   0,  12,   0,  14,   0,  16,   0,  14,
   0,  16,   0,  17,  17,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,
   0,   0,  14,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,
   0,  11,   0,   0,   0,   0,  11,  11,   0,   0,   0,   0,  37,   0,  38,   0,
  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  24,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  25,   0,  14,   0,  14,   0,  14,   0,   9,   0,   0,  14,   0,  14,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,
   0,   0,   9,   0,   0,   0,   0,  24,   0,   0,  26,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   9,   0,  10,  10,   0,   0,   0,   0,   0,   0,   3,   0,
   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   4,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,
   9,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  38,   0,  38,   0,  37,
   0,  38,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   7,  10,
   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   9,   0,   0,   0,   9,   0,
   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,  10,   0,   8,  10,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  37,   0,  23,   0,  22,   0,  26,   0,  26,   0,  24,
   0,   0,  26,   0,   0,   0,  26,   0,  26,   0,  24,   0,  10,   0,  12,   0,
   0,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   6,   8,   0,   9,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   0,   0,   0,   0,  12,   0,  13,   0,   0,  13,   0,  13,   0,
  13,   0,  13,  13,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   3,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,  10,   0,  10,   8,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   8,   0,  12,   0,
  12,  12,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,   0,   0,  13,   0,  13,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   9,   0,
   9,   0,   0,   0,   9,   9,   0,   0,   0,   4,   0,   0,   0,   4,   0,   7,
   0,   0,   8,   0,   0,  37,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,  24,   0,   0,   0,  24,   0,   8,   0,   6,   8,   0,
   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   4,   0,   0,   5,   0,   0,   0,   0,  17,   0,   0,  16,
   0,  16,   0,   0,   0,  14,   0,   0,  17,   0,  17,   0,   0,  17,   0,  17,
   0,  17,   0,  17,   0,  17,  17,   0,   0,   0,   0,   0,   5,   4,   0,   0,
   0,   9,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  15,   0,  15,
   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,   0,   0,  14,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   6,   0,   0,   0,   8,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   0,  24,   0,  14,   0,  15,   0,   7,   0,
   7,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,   0,
   7,   0,   0,   0,   0,   4,   0,   4,   0,  11,   0,   0,   0,  12,   0,   9,
   0,   0,  12,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   4,   5,   0,
   0,   0,   7,   0,   0,   7,   0,   7,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   4,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,  26,   0,  26,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,
  13,   0,  14,   0,  14,   0,   0,   0,  14,   0,  14,   0,   0,   0,   0,   9,
   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,  11,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,  38,   0,
  38,   0,  25,   0,   0,  25,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,
   4,   0,   0,   4,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   6,   8,   0,   0,   0,   4,   0,   0,  24,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,
   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,  13,   0,  14,   0,  12,   0,  14,   0,  12,  14,   0,   0,   4,   4,   0,
   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,   0,   0,  12,   0,  13,   0,
   0,   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,  38,   0,   0,  24,   0,   0,   0,   4,   0,   0,   4,   0,   7,
   0,   7,   7,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   9,   0,   0,   0,   9,   9,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,  38,   0,  25,   0,   0,  25,   0,   0,   3,   5,   0,   0,   0,   0,
   0,   9,   0,   8,   0,   0,  10,   0,   0,   4,   0,   0,   7,   0,   0,   0,
   7,   7,   0,   0,  37,   0,   0,   0,   0,   6,   0,   0,   0,   0,   8,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,  10,   0,  10,   0,   0,
   0,   0,  10,   0,   0,  25,   0,   0,   0,  25,   0,   0,   5,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   0,  24,   0,  25,
   0,  25,   0,  25,   0,  25,   0,   0,  25,   0,  12,   0,  12,   0,  12,   0,
   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   8,   0,   0,   9,   0,
   0,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,
   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   0,   0,  15,   0,   0,  15,   0,   7,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   7,   0,   0,   7,   0,   7,   0,   0,   7,
   7,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  18,   0,  15,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,
  18,   0,  18,   0,   0,  18,   0,  18,   0,  18,   0,   0,   0,  18,  18,   0,
   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,   0,  14,   0,  14,
   0,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,   5,   0,   8,   8,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   8,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,  14,   0,  14,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,  38,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,
   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,  13,   0,  13,   0,  13,   0,   0,  13,   0,   0,  12,   0,  38,   0,   0,
  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,  10,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,  38,   0,  38,   0,
   0,   0,   0,   0,   0,   0,  12,   0,  11,   0,  12,   0,   0,   0,   0,  12,
   0,   0,   0,  12,   0,   0,   0,   4,   0,   0,   4,   0,  38,   0,   0,  38,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,
   0,   4,   4,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   4,   5,   0,   0,   0,   0,   0,   0,  11,   0,  10,   0,  11,   0,  14,   0,
   0,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
  13,   0,  14,   0,  15,   0,   0,   0,  15,   0,  15,   0,   0,   0,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   6,   0,   8,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,  11,   0,   0,   0,   9,   0,   0,   0,  38,   0,   0,   0,  37,   0,
   5,   4,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,   6,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   0,   0,   0,   0,   0,  10,   0,   7,   0,  10,  10,   0,   0,   0,
   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,  10,   0,  13,   0,  14,   0,  14,   0,  14,   0,
   0,  14,  14,   0,   0,   0,   9,   0,  10,   0,   0,  10,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,
   0,   0,   0,   0,   5,   0,   4,   0,   0,  25,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   4,
   4,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   0,   9,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,  12,  12,   0,   0,
   0,   0,  38,   0,  38,   0,  38,   0,  38,   0,   0,  38,   0,  38,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,  14,   0,  14,   0,  13,   0,   0,  14,   0,  14,   0,
   0,   0,  14,  14,   0,   0,   0,   0,   0,   4,   4,   0,  38,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   7,   0,
   0,   7,   0,   0,   0,   0,   7,   0,  25,   0,   0,   0,   0,  25,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,
   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,  12,   0,  12,   0,
  12,   0,  12,   0,  12,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,  11,
   0,  24,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,   0,   0,
  15,   0,  15,   0,  15,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   3,   7,   0,   0,   0,   0,  38,   0,   0,  37,   0,   0,   0,   0,  11,   0,
   0,  11,   0,  11,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   7,   0,   0,
   0,   0,   8,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  21,   0,  18,   0,   0,  17,   0,
  19,   0,  18,   0,  22,   0,  20,   0,  22,   0,  22,   0,  22,   0,  22,   0,
  20,   0,  22,   0,  22,   0,   0,   0,  22,   0,  21,   0,   0,   0,  21,   0,
   0,   0,  22,   0,   0,   0,   0,  22,   0,  22,   0,  38,   0,   0,  38,   0,
  38,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,  10,   0,   9,   0,   0,   0,  13,   0,  13,
   0,  12,   0,  13,   0,  13,   0,  13,   0,   0,   0,   0,   0,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,
   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,   0,   0,  23,   0,  24,
   0,  26,   0,  16,   0,  16,   0,   0,  16,   0,  38,   0,  14,   0,   0,   0,
  14,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,
   8,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  13,   0,  14,   0,   0,
   0,  11,   0,  14,   0,   0,   4,   0,   0,   4,   0,   0,   0,   7,   0,   0,
   7,   7,   0,   0,   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,  12,   0,  12,   0,   0,  10,   0,   0,   5,   4,   0,
   0,   0,   0,   0,   0,  11,   0,   0,  10,   0,   0,  19,   0,   0,  19,   0,
   0,  19,   0,  18,   0,  19,   0,   0,  19,   0,  19,   0,   0,  19,   0,   4,
   0,   0,   4,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  17,   0,  16,   0,  17,   0,  17,   0,   0,  17,   0,   0,  16,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,  15,   0,
  15,   0,   0,  15,   0,   0,  15,   0,   0,  15,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,  15,   0,   0,  15,   0,  15,   0,  15,   0,   0,   9,   0,   0,   0,
   0,   0,   9,   0,   0,  10,   0,   0,   0,  11,   0,   0,  11,   0,  25,   0,
   0,  24,   0,   0,   0,  38,   0,   0,  38,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   7,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,
  25,   0,   0,  25,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,   0,
  26,   0,   0,  26,   0,   0,   0,   0,   0,  26,   0,  38,   0,   0,  14,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,  25,   0,   0,
   0,   0,  25,   0,   0,   0,  11,   0,   0,   5,   0,   4,   0,   0,   0,  11,
   0,  11,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   7,   0,   0,   0,   7,   0,   4,
   5,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,  19,   0,  18,   0,  20,
   0,  18,   0,  21,   0,  20,   0,   0,  20,   0,  18,   0,   0,   0,  20,   0,
   0,   0,  21,   0,  21,   0,  21,   0,  21,   0,   0,  20,   0,  21,   0,  21,
   0,   0,   0,  21,   0,   0,  21,  21,   0,  25,   0,  25,   0,   0,   0,   7,
   0,   0,  19,   0,  12,   0,  11,   0,  12,   0,  12,   0,   0,  12,   0,   0,
  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,  38,   0,  38,   0,   0,  38,   0,  38,   0,  38,   0,
  38,   0,   0,   0,   0,  38,   0,  10,   0,   0,  10,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  13,   0,   0,   0,
  13,   0,   0,  13,   0,  14,   0,   0,  12,   0,  38,   0,   0,   0,   0,   0,
   0,  37,   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,  16,   0,   0,   0,
   0,  25,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,
  25,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,  15,   0,   0,  15,   0,  15,   0,   0,
   0,  14,   0,   0,  10,   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
  25,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,  25,   0,
  25,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   3,
   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,
   0,   0,   0,  25,   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,  17,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,
   6,   8,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,
   0,   0,   0,  12,   0,   0,   0,   4,   4,   0,   0,   0,   0,  24,   0,   0,
   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,
  25,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
  38,   0,  38,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   9,   0,  17,   0,  17,   0,  18,   0,   0,  19,   0,  19,   0,  17,
   0,  15,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,  19,  19,
   0,   0,   0,   0,  24,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,
   0,   0,   0,  25,   0,   0,   0,   0,  15,   0,   0,  15,   0,  15,   0,   0,
  15,   0,  15,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  37,   0,  37,   0,   0,   0,  38,   0,   0,   0,
  25,   0,   0,  25,   0,   0,   0,   4,   5,   0,   0,   7,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,  12,   0,   0,  12,   0,
   0,  12,   0,   0,  12,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,  11,   0,  11,   0,   0,  11,
   0,  12,   0,   0,  12,   0,  12,   0,   0,  12,   0,   0,   0,   0,  12,   0,
   0,   0,   0,  10,   0,   0,   0,   8,   0,   9,   0,   0,   9,   9,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   9,   0,  11,   0,   0,  10,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,  11,   0,  11,   0,
  11,   0,   0,  38,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
  13,   0,  13,   0,  13,   0,   7,   0,   7,   7,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,  18,
   0,  18,   0,  18,   0,   0,   0,  15,   0,  18,   0,  18,   0,  18,   0,  18,
   0,  18,   0,  17,   0,  18,   0,   0,   0,   0,  18,   0,   0,   0,  18,  18,
   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,  15,   0,  15,   0,  25,   0,   0,   0,  25,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  37,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,   0,   0,  26,   0,
   0,   0,  26,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   4,   0,   4,
   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,  10,   0,   0,  13,   0,   0,
  13,   0,  24,   0,   0,   0,  17,   0,  20,   0,   0,  20,   0,  20,   0,  20,
   0,   0,  20,   0,   0,  20,   0,   0,  20,   0,  19,   0,   0,   0,  20,   0,
   0,   0,  15,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   8,   0,   0,   8,   0,
   0,   0,   0,   0,   0,  26,   0,  26,   0,   0,   0,  26,   0,   0,   4,   5,
   0,   0,   0,   0,   0,  11,   0,   0,  10,   0,   0,   4,   4,   0,   0,   0,
   0,  25,   0,  25,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,
   0,  12,  12,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,  13,   0,  13,
   0,  13,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   4,   0,  24,   0,   0,   0,   0,   0,  14,   0,
   0,   0,   0,   8,   0,   0,  18,   0,   0,  17,   0,   0,  15,   0,   0,  17,
   0,  19,   0,   0,   0,   0,  15,   0,  28,   0,   0,  28,   0,   0,  28,   0,
  28,   0,   0,   0,   0,   0,  16,   0,  15,   0,  20,   0,  17,   0,  20,   0,
   0,  20,   0,   0,   0,  22,   0,  22,   0,  19,   0,   0,  18,   0,   0,   0,
  21,   0,  22,   0,  21,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,
   4,   4,   0,   0,   0,   0,  18,   0,  19,   0,  20,   0,   0,  20,   0,   0,
  20,   0,   0,  20,   0,  20,   0,  20,   0,  20,   0,   0,   0,  20,   0,  15,
   0,   0,   0,   0,   0,  20,   0,  20,   0,   0,  20,   0,   0,  20,   0,   9,
   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,  14,   0,   0,  14,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  16,   0,  16,   0,   0,  16,   0,   0,  16,   0,   0,   0,   0,
  24,   0,  25,   0,  25,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,
   0,   9,   9,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,
   0,   0,  17,   0,  17,   0,   0,  17,   0,   0,  17,   0,   0,   0,  17,   0,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,  14,   0,   0,   0,  14,   0,  14,   0,  14,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   9,   0,   0,   0,   0,   9,   0,   0,  19,   0,  19,
   0,  18,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,   0,  19,
   0,  19,   0,   0,   0,  19,   0,  19,   0,   0,  19,   0,   0,  19,   0,   0,
  17,   0,   9,   0,   9,   0,   9,   0,   9,   0,   0,   9,   0,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   4,   4,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   8,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,
  16,   0,   0,   0,  16,   0,   0,  16,  16,   0,   0,   0,  15,   0,  16,   0,
  16,   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,   0,   0,   0,   0,  15,
   0,   0,  16,   0,  16,   0,   0,   0,   4,   0,   0,   0,   4,   0,  16,   0,
   0,  16,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,  38,   0,   0,  38,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,  38,   0,  35,
   0,  38,   0,  36,   0,  38,   0,   0,   0,   0,  38,   0,   0,   0,  38,   0,
  38,   0,  38,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,
  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   4,   0,   0,   0,  13,   0,   0,  13,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,  26,   0,   0,  26,
   0,   3,   5,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  15,   0,  14,   0,
   0,  15,   0,  14,   0,   0,  15,   0,  15,   0,   0,  15,  15,   0,   0,   0,
   0,   0,   0,  13,   0,  14,   0,  14,   0,  14,   0,  13,   0,   0,   0,   0,
  14,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   9,   0,   0,
   9,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,  26,   0,  26,   0,  24,   0,  26,   0,   0,  26,   0,  25,   0,
  16,   0,  16,   0,   0,   0,  16,   0,  15,   0,   0,  37,   0,  11,   0,   0,
   0,  11,   0,   0,   0,  11,   0,   0,   0,  11,   0,   0,   4,   0,   0,   0,
   4,   0,   0,   0,   0,  13,   0,  13,   0,  25,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,  26,   0,  26,   0,   0,   0,  26,   0,  26,   0,   0,  26,
   0,   0,  26,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,  15,   0,  25,
   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  10,   0,  25,   0,  25,
   0,   0,  25,   0,   0,  15,   0,   0,   0,  15,   0,   0,   0,   0,   0,  13,
   0,  12,   0,  13,   0,   0,  13,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  11,   0,  13,   0,
   0,   0,  14,   0,   0,  14,   0,   0,   0,  24,   0,   0,   0,   3,   6,   0,
   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,  26,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,  38,
   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,  13,   0,  18,   0,  19,   0,  21,   0,   0,  23,   0,  21,   0,   0,  19,
   0,   0,   0,  20,   0,   0,  12,   0,  24,   0,  23,   0,  22,   0,  17,   0,
  24,   0,  24,   0,  24,   0,  24,   0,  20,   0,  24,   0,  24,   0,   0,  24,
  24,   0,   0,   0,   0,   0,   0,  16,   0,   0,  16,   0,   0,  15,   0,  17,
   0,  17,   0,  14,   0,  17,   0,  15,   0,  17,   0,  17,   0,   0,  16,   0,
   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  23,   0,   0,  25,   0,   6,   0,   0,   0,   8,   0,  13,   0,
  12,   0,   0,   0,   8,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,  12,   0,  12,   0,   0,   0,   0,   0,  10,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,  17,
   0,   0,   0,  17,   0,   9,   0,   0,   9,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   0,  25,   0,   0,  16,   0,  12,   0,  16,   0,
  15,   0,  16,   0,   0,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,  16,
   0,  26,   0,   0,  26,   0,   0,  26,   0,   0,  26,   0,   0,  26,   0,  26,
   0,  26,   0,   0,   0,  26,   0,   0,   0,  38,   0,  38,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   3,   0,   0,   0,   0,  24,   0,  22,   0,   0,   5,   0,   0,   0,   9,
   0,   9,   0,   0,  11,   0,   0,   8,   0,   0,   0,   8,   0,   8,   0,   0,
   6,   8,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,  10,   0,  13,   0,  13,   0,  12,   0,
  13,  13,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,
   0,  11,   0,   7,   0,   7,   7,   0,   0,  38,   0,   0,  38,   0,   0,   0,
   0,  26,   0,  15,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,  17,   0,  17,
   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,  16,   0,   0,
   0,  17,   0,   0,  17,  17,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   9,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   4,   0,  11,   0,  13,   0,  14,   0,   0,   0,  14,
   0,   0,   0,   0,  14,   0,   0,   0,  14,  14,   0,   0,   0,   4,   0,   4,
   0,   8,   0,   0,   0,   0,   9,   0,   0,   0,  10,  10,   0,   0,   0,   0,
   0,   3,   5,   0,   0,   0,   8,   0,   0,   0,   8,   0,   5,   0,   3,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   5,   4,   0,
   5,   4,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  24,   0,  26,   0,  26,   0,  25,   0,   0,   0,  26,   0,  26,   0,  23,
   0,   6,   3,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,  23,
   0,  26,   0,  26,   0,   0,   0,  26,   0,  26,   0,  24,   0,  26,   0,   0,
   4,   4,   0,   0,   0,   9,   0,   0,   6,   0,   3,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  38,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,  19,   0,   0,  18,   0,  19,   0,   0,  19,   0,
   0,  19,   0,  19,   0,   0,   0,  19,   0,   0,   0,  17,   0,   0,  17,   0,
   0,   0,   9,   0,   0,   0,   0,  18,   0,   0,   0,  16,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,
   9,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,  16,   0,   0,  16,   0,   0,  16,   0,  16,   0,
   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,  12,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,  12,  12,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,   6,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,  12,
   0,   9,  12,   0,   0,   0,   0,   0,   0,  10,   0,   6,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   7,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  10,   0,  13,   0,  11,   0,  14,  15,   0,   0,   0,   0,   0,
   0,  18,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,
   0,  20,   0,   0,  20,   0,   0,   0,  20,   0,  20,   0,  20,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,
   7,   0,   0,  17,   0,  17,   0,   0,  17,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,
   0,   0,   5,   4,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  37,   0,  38,   0,   0,   0,  38,   0,   0,  38,   0,
   0,  13,   0,   0,   0,  14,   0,   0,   0,   0,   0,   4,   0,   4,   0,  15,
   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   7,
   0,  17,   0,  17,   0,   0,  15,   0,  17,   0,  17,   0,  17,   0,  16,   0,
   0,  17,   0,  17,   0,  14,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   4,   0,   4,
   0,  24,   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   9,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   8,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,  15,   0,   0,
  15,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   4,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   6,   0,   0,
   0,   0,   0,   6,   0,   0,   3,   0,  17,   0,  17,   0,  17,   0,  17,   0,
  17,   0,  16,   0,   0,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,
   0,  17,   0,   4,   0,   0,   0,   4,   0,   0,   9,   0,   9,   0,   9,   0,
   0,  38,   0,  15,   0,  15,   0,  15,   0,   0,  15,   0,   0,   0,   4,   4,
   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  36,   0,  38,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,  12,   0,  15,
   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,   0,  10,   0,   0,
  13,   0,  13,   0,   0,  13,   0,  13,   0,   0,   0,  25,   0,  25,   0,  25,
   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  17,   0,  17,
   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,   0,  17,   0,   0,
   0,  17,   0,  16,   0,   0,   0,   0,   0,  17,   0,   0,   5,   4,   0,   0,
   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  37,
   0,  38,   0,  38,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   7,   0,
   0,   0,  13,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  11,   0,  11,   0,  11,
  11,   0,   9,   0,   0,   0,   0,   9,   0,  14,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   4,   0,   4,
   0,  19,   0,  21,   0,  20,   0,  17,   0,  22,   0,  21,   0,  18,   0,   0,
   0,  22,   0,   0,   0,  22,   0,  20,   0,  22,   0,  16,   0,  22,   0,   0,
   0,  22,   0,  22,   0,   0,   0,  20,   0,  22,   0,  22,   0,   0,   0,  22,
   0,   0,   0,  36,   0,   0,  38,   0,   0,  37,   0,  38,   0,  38,   0,  38,
   0,  38,   0,   0,   0,  38,   0,   0,   0,  38,   0,  38,   0,   0,   0,   0,
   0,  38,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,
   0,  16,   0,  16,   0,   0,  16,   0,   0,  16,   0,   0,   0,   0,  16,   0,
   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   4,   0,   4,   0,  14,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  17,   0,   0,  17,   0,
  17,   0,   0,  17,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   4,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,   0,   0,   0,
  16,   0,  16,  16,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,  14,   0,
  14,   0,   0,   0,   0,  38,   0,  37,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,  14,   0,   7,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  19,   0,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,
   0,  20,   0,   0,  20,   0,   0,   0,  20,   0,  20,   0,   0,  20,   0,   0,
  38,   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,  16,   0,
  16,   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,  14,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,   0,  16,   0,  16,   0,  16,   0,  15,   0,  16,
   0,  16,   0,   0,   0,  11,  16,   0,   0,   0,   0,   0,   0,   5,   0,   4,
   0,   0,   0,  38,   0,   0,  38,   0,  25,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,  12,   0,   0,  12,
   0,   0,   0,  12,   0,   0,   0,   0,   4,   0,   0,   0,  24,   0,  11,   0,
  11,   0,  11,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,  11,
   0,   0,  15,   0,  15,   0,  14,   0,   0,   0,  15,   0,  15,   0,  15,   0,
   0,  15,   0,   0,   0,   0,  12,   0,  24,   0,   0,   7,   0,   4,   5,   0,
   0,   0,   0,   0,  24,   0,   0,   0,  24,   0,  12,   0,   0,   0,   8,   0,
  12,   0,   0,   0,   0,   0,  12,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,  38,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,  12,
   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,  25,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,  13,   0,  13,   0,   0,   0,  13,   0,   0,   0,   0,  13,   0,   0,
  13,   0,   0,  13,  13,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,  11,   0,
   0,   4,   0,   0,   4,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,
  25,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   8,
   0,   0,  38,   0,  38,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,  16,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,  12,   0,   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  16,   0,   0,   0,
   0,  16,   0,   0,   0,   0,   0,   0,   0,   8,   0,  16,   0,  20,   0,   0,
  15,   0,   0,  12,   0,  21,   0,  21,   0,  20,   0,  21,   0,  20,   0,  20,
   0,  20,   0,  21,   0,  20,   0,  21,   0,   0,   0,  21,   0,   0,  20,   0,
  11,   0,   0,   0,  11,   0,   0,  11,   0,  17,   0,  17,   0,  17,   0,   0,
  15,   0,  15,   0,  16,   0,  16,   0,  17,   0,   0,  17,   0,  17,   0,   0,
   7,   0,   0,   7,   0,   0,   0,  24,   0,  25,   0,  25,   0,   0,  25,   0,
  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,
  10,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  23,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  12,   0,   0,   0,  11,   0,   0,   0,   0,   0,  12,   0,   0,
  13,   0,   0,  13,   0,  13,   0,   0,   0,  13,   0,   0,  13,  13,   0,   0,
   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  16,   0,  17,   0,
  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,
   0,  25,   0,   0,   0,  11,   0,  15,   0,  17,   0,  17,   0,  17,   0,   0,
  17,   0,  17,   0,   0,  17,   0,   0,   0,  17,   0,  38,   0,   0,   0,  38,
   0,   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,  25,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,
   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  26,   0,  26,
   0,  26,   0,  26,   0,  26,   0,  26,   0,  25,   0,   0,   0,  25,   0,  26,
   0,   0,   0,  26,   0,   0,  26,   0,   0,  38,   0,  38,   0,   0,  38,   0,
  38,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,  38,   0,  38,   0,  38,   0,  38,   0,  38,
   0,   0,   0,  38,   0,   0,  38,   0,  38,   0,   0,   0,   0,   0,  13,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  24,   0,   0,
  25,   0,  25,   0,   0,   0,   0,  25,   0,   0,  38,   0,   0,   0,   0,   0,
   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,  13,   0,   0,   0,   0,   0,   0,  25,   0,  24,   0,   0,   5,   4,   0,
  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   7,   0,   0,   7,
   0,  25,   0,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  38,   0,
   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   5,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   8,   0,  15,
   0,  15,   0,  15,  13,   0,  11,   0,  13,   0,  13,   0,   0,   0,  13,   0,
  13,   0,   0,   0,   0,   0,   0,  13,   0,   8,   0,   0,   0,   8,   0,   6,
   0,  26,   0,   0,  26,   0,  26,   0,  26,   0,   0,   0,   0,   0,   9,   0,
   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   4,   0,  10,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,   0,  16,  16,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,  18,   0,  18,   0,  18,
   0,   0,   0,  18,   0,   0,   0,  18,   0,  18,   0,   0,  18,   0,   0,  18,
   0,  18,   0,  18,   0,   0,   0,  18,   0,  18,   0,   0,   4,   0,   0,   4,
   0,   0,  10,   0,   0,   0,   7,   0,   0,  10,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   4,   0,   0,   7,   0,   7,   7,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,  26,   0,   0,   0,
  26,   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,  16,   0,  17,   0,  17,   0,  15,   0,  17,   0,
  17,   0,   0,  17,   0,   0,   0,   0,  16,   0,  26,   0,   0,  26,   0,  26,
   0,   0,  26,   0,  26,   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,  26,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   0,   0,   8,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,  16,   0,   0,
  16,   0,  16,   0,  16,   0,   0,   0,  15,   0,   7,   0,   0,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   8,   0,
   0,   8,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
  15,   0,  15,   0,  15,   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,  15,
   0,   0,   4,   0,   0,   0,   4,   0,  15,   0,   0,   0,  15,   0,   0,  15,
   0,   0,   0,  15,   0,  15,   0,   0,  15,   0,   0,   0,  15,   0,   0,  15,
   0,   7,   0,   0,   7,   0,   7,   0,   0,   0,   7,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  17,   0,
  17,   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,   0,  17,   0,   0,
  11,   0,  11,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  19,   0,  21,   0,  15,   0,   0,  20,   0,  21,   0,  21,   0,  21,   0,  21,
   0,   0,   0,   0,  21,   0,   0,  21,   0,  21,   0,  21,   0,  21,   0,  21,
   0,  21,   0,  21,   0,  21,   0,   0,   0,   0,  21,   0,   0,  21,   0,  21,
  21,   0,   0,   0,   0,   0,  17,   0,  17,   0,  18,   0,  18,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,   0,   0,  18,
   0,  18,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,
   0,   0,   9,   0,   0,   8,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,  25,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,   0,
  13,   0,  18,   0,   0,   0,  19,   0,  19,   0,   0,  19,   0,   0,  19,   0,
  19,   0,   0,  19,   0,   0,  19,   0,   8,   0,   8,   0,   0,   0,   0,  25,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,  10,   0,
  13,   0,  13,   0,   0,   7,   0,   0,   0,  38,   0,   0,   0,  38,   0,   0,
  38,   0,  37,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,
   0,   0,   0,  13,   0,   0,   4,   0,   4,   0,   0,   4,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,  13,   0,  12,   0,  13,   0,  13,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,
  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,   0,
  15,   0,   0,   0,  15,   0,   0,  15,   0,   0,   0,  15,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,  12,  12,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   4,
   0,   0,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   4,   5,   0,   0,   0,
   4,   4,   0,   0,   0,   4,   0,   0,   0,   0,   4,   0,  11,   0,  11,   0,
   0,   0,  11,   0,   0,   0,   0,  11,  11,   0,   0,   0,   0,   4,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,
  11,   0,  11,  11,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,  10,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,  19,   0,  19,   0,  19,
   0,  19,   0,  19,   0,  19,   0,   0,   0,  19,   0,   0,   0,   0,   0,  19,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,  16,   0,   0,  10,   0,   0,   0,   0,  14,   0,  19,   0,   0,  27,
   0,  27,   0,  27,   0,  26,   0,   0,   0,  27,   0,   0,  27,   0,  27,   0,
   0,  27,   0,   0,   0,  24,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,
   0,   0,   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,   5,   4,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   4,   0,   0,   5,
   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  21,   0,
   0,  21,   0,  18,   0,  19,   0,  24,   0,  24,   0,  22,   0,   0,  21,   0,
  24,   0,   0,  24,   0,  20,   0,   0,   0,   0,  16,   0,  24,   0,  24,   0,
  17,   0,   0,  24,   0,  24,   0,  24,   0,   0,  24,   0,   0,   0,  24,  24,
   0,   0,   0,   0,   0,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,
  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,   0,   0,
  20,   0,  20,   0,  20,   0,   0,   0,   0,  11,   0,  12,   0,  12,   0,   0,
  12,   0,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,  12,   0,  12,   0,
  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,  10,   0,  11,   0,
   0,  11,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   5,   4,   0,   0,
   0,   0,   5,   0,   4,   0,  25,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   9,   0,   0,   7,   0,   0,
   0,   7,   0,   7,   0,   7,   7,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,  38,   0,  25,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  17,   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,
   0,   0,   0,  17,   0,   8,   0,   0,   0,   8,   0,   0,   0,   0,   8,   0,
   0,   0,   8,   0,   0,   0,  10,   0,   0,   0,  10,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  18,   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,
   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,   0,  19,
   0,  19,   0,  19,   0,   0,   0,   0,   0,  10,   0,   0,  11,   0,   0,  11,
   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,  10,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,   0,  11,
   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,  13,   0,   0,
   0,   0,  13,  13,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,  25,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,  16,   0,  16,   0,  16,
   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,
   9,   0,  15,   0,  14,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,  12,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,  15,   0,   0,  15,   0,  15,   0,  14,   0,  15,   0,  15,
   0,  25,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   4,
   0,   4,   0,  15,   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,  15,   0,
  15,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   7,   0,   0,   0,  24,   0,   0,   0,   0,  14,   0,  15,   0,
  14,   0,   0,  15,   0,  14,   0,   0,   0,   0,   4,   0,   0,   4,   0,  13,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   7,   0,   7,   0,   0,   0,
   0,   0,   0,  26,   0,   0,  23,   0,  24,   0,  25,   0,  24,   0,   0,  26,
   0,  26,   0,   0,   0,  26,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,  11,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,  13,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,
   0,  11,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  36,   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   6,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  17,   0,  16,   0,   0,  14,   0,  15,   0,  17,   0,
  17,   0,  17,   0,  17,   0,  17,   0,  17,  17,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,  25,   0,
  25,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,
   0,   0,   4,   0,   0,   4,   0,  17,   0,  17,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   9,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,  26,   0,  26,
   0,  26,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
  25,   0,   0,   0,  25,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,  14,   0,  14,   0,   0,   0,  14,   0,
  14,   0,   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,  10,   0,  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   4,
   4,   0,  25,   0,  25,   0,   0,  25,   0,   9,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   4,   0,   0,   0,   0,   0,  24,   0,   0,  17,   0,   0,   0,   0,  12,   0,
   0,  12,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   4,   0,   0,   4,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   0,   0,   4,   4,   0,   0,   8,   0,   0,
   0,   8,   0,  13,   0,   0,  13,   0,   0,   0,  11,   0,   0,   0,  11,   0,
  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,  10,   0,   0,  24,   0,   0,   9,   0,   0,  11,   0,   0,
  11,   0,   0,  11,   0,  11,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,  10,   0,  11,   0,   0,  11,  11,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,  10,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   8,   0,   0,   0,   8,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,  25,
   0,   0,   0,  25,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,
  16,   0,  16,   0,   0,   0,  16,   0,   0,   0,  13,   0,   0,   0,  16,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   7,   0,   0,
   0,   7,   7,   0,   0,   0,   0,   0,  17,   0,  17,   0,   0,   0,  11,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   3,   0,   0,   0,
  25,   0,  25,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,  11,  11,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,
   0,   4,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   3,
   7,   0,   0,   0,   0,   0,   0,  10,   0,   0,  10,   0,   0,   0,   0,  10,
   0,   8,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,  18,   0,   0,  16,   0,  14,   0,  19,   0,
   0,  19,   0,  20,   0,  19,   0,  17,   0,  20,   0,   0,   0,  19,   0,   0,
  20,   0,  20,   0,  20,   0,  20,   0,   0,   0,   0,   0,   0,  24,   0,  21,
   0,   0,  21,   0,   0,   0,  20,   0,  21,   0,  21,   0,  21,   0,  21,   0,
  21,   0,  21,   0,  20,   0,  20,   0,  21,   0,  21,   0,  21,   0,  21,   0,
  21,   0,  21,   0,  21,   0,  21,   0,  21,  21,   0,   0,   0,   0,   0,   0,
  38,   0,   0,  38,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,
   0,   0,  14,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   6,   0,   0,
   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,  26,   0,   0,  26,   0,  26,   0,   0,  26,   0,
   0,   0,  26,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,  16,   0,  17,   0,  17,   0,
  17,   0,  17,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,  14,   0,  15,   0,   0,
   0,  15,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,  11,   0,  11,   0,  11,
   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   4,   0,   4,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,  11,   0,  11,   0,   0,  11,   0,   0,
  11,  11,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,  12,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,   0,   7,   7,   0,   0,   0,
   0,  26,   0,   0,   0,   7,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,
  18,   0,   0,  16,   0,   0,   0,   0,  18,   0,  18,   0,  18,   0,  18,   0,
  16,   0,  18,   0,   0,  18,   0,  17,   0,  16,   0,   6,   0,   8,   8,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   3,   0,  11,   0,   0,   9,   0,   0,
   0,   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,  15,   0,  15,
   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   4,   4,   0,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,
  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,  15,   0,   0,  15,   0,   0,   0,  15,   0,  15,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   8,   0,   0,   0,   0,   8,   0,
   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,  23,   0,  25,   0,
   0,  25,   0,   0,  23,   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,  26,
   0,   0,  26,   0,  11,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,  14,
   0,   0,  14,   0,  14,   0,   0,   0,   0,   0,   0,   0,  12,   0,  15,   0,
   0,  15,   0,   0,  15,   0,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,
  15,   0,   0,   0,   7,   0,   0,   7,   0,   7,   0,   0,   4,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,  14,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   5,   4,   0,   4,   5,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   7,   0,   0,   4,   5,   0,   0,  10,   0,   0,   0,
  10,   0,  17,   0,   0,   0,  17,   0,   0,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,  13,   0,   0,   0,  13,   0,   0,   0,   0,   0,  10,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
  10,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,
  16,   0,  16,   0,   0,   0,   0,  16,   0,  16,   0,  16,  16,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,  11,   0,
   0,   0,  11,  11,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,  14,   0,   0,  14,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,
   0,   0,  18,   0,  18,   0,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,
   0,   0,   0,  18,   0,  17,   0,  17,   0,   0,  38,   0,   0,  25,   0,   0,
   0,   0,  25,   0,   0,   0,   7,   0,   7,   0,   7,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   4,   0,   0,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,  14,   0,   0,  14,   0,  24,   0,   0,   0,   0,   0,   0,  11,   0,
  11,   0,   0,   0,   0,  11,   0,   0,   0,   0,  10,  11,   0,   0,   4,   0,
   0,   4,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   6,   8,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   8,   0,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,  38,   0,
  38,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,  10,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  18,   0,  14,   0,  19,   0,  22,   0,  23,   0,  20,   0,  23,   0,  21,   0,
  12,   0,  23,   0,  18,   0,  23,   0,  23,   0,  21,   0,  23,   0,   0,  23,
   0,   0,  23,   0,   0,   0,  23,  23,   0,   0,   0,   0,   0,   0,   0,   0,
  16,   0,  16,   0,  13,   0,  15,   0,  16,   0,  16,   0,   0,  16,   0,  12,
  16,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,  16,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,  16,   0,  16,   0,   0,
  16,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,  14,   0,   0,  14,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,
   0,   0,  14,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  12,   0,   0,   0,  12,   0,   0,   0,  12,   0,   0,  12,   0,
   0,   0,  12,  12,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   9,   0,   0,   9,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,  18,   0,  18,   0,  18,
   0,   0,   0,  10,   0,  18,   0,   0,  18,   0,  18,   0,  18,   0,  18,   0,
   0,  16,   0,  10,   0,   8,   0,   0,  10,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,   0,   4,   0,   5,   0,
   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,
   0,  25,   0,  25,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   7,   0,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   0,   7,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,  23,   0,   0,  24,   0,  26,   0,   0,  26,   0,  25,   0,   0,   0,   0,
   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,  10,   0,   0,  10,   0,   4,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  37,
   0,  23,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,  38,   0,  38,   0,
  38,   0,   0,  36,   0,   0,  15,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,   0,
   4,   5,   0,   0,   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
  24,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
  15,   0,  15,   0,   0,  15,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,  12,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,  16,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   4,   0,  24,   0,  25,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,  15,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,  38,   0,   0,  38,
   0,   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,  38,   0,  38,   0,   0,
   0,  38,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   8,   0,   0,   0,   0,  10,   0,  10,   0,
   0,   0,   4,   0,   0,   4,   0,  15,   0,  15,   0,  15,   0,   0,  15,   0,
  15,   0,   0,   5,   0,   0,   0,   0,  15,   0,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,  25,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   4,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,  10,   0,  14,   0,  13,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   0,   9,   0,   9,   0,   0,   9,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,   0,  38,   0,   0,   0,  24,   0,  23,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  17,   0,  19,   0,  14,   0,   0,   0,  17,   0,
  15,   0,  21,   0,  21,   0,  19,   0,  21,   0,  20,   0,  21,   0,  21,   0,
   0,  21,   0,   0,  21,   0,  21,  21,   0,   0,   0,   0,   0,   0,  24,   0,
  12,   0,  14,   0,  14,   0,  12,   0,  14,   0,  14,  14,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,
  14,  14,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   8,   0,   0,   0,   0,  24,   0,  25,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,  26,   0,   0,   0,  26,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   4,   0,   4,   0,  24,   0,   0,   0,   0,   0,
  25,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,  10,   0,   0,   8,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,  14,   0,  14,   0,   0,   0,  14,   0,
   0,  13,   0,  14,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,  11,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,  13,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
  14,   0,  38,   0,   0,  38,   0,   0,   4,   4,   0,   0,   0,   6,   0,  38,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,  12,   0,  12,   0,   0,  12,  12,   0,
   0,   0,  24,   0,   0,   8,   0,   0,   0,  13,   0,   0,   0,  13,   0,  13,
   0,  13,  13,   0,   0,   0,   0,   0,  21,   0,  23,   0,   0,   0,  25,   0,
   0,   0,   5,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,  13,   0,  13,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,
   0,  14,   0,   0,  13,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,  24,   0,   8,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   7,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,  11,   0,   0,  13,   0,
   0,  13,   0,  13,  13,   0,   0,   0,   0,  14,   0,   0,  15,   0,   0,  15,
   0,   0,  12,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   3,   6,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   8,   0,  13,
   0,  13,   0,  13,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,  16,
   0,  16,   0,   0,  16,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,   0,   0,  14,   0,
  14,   0,  14,   0,  14,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   4,   4,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  15,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,  15,   0,
  15,   0,   0,   0,  15,   0,  16,   0,  16,   0,  16,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   8,   7,   0,   4,   5,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  24,   0,   7,
   0,   7,   7,   0,   4,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,
   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,  15,
   0,  15,   0,  15,   0,   0,   0,  15,   0,   0,   0,  15,   0,  15,   0,  15,
   0,  15,  15,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,  19,   0,  13,   0,  19,
   0,  19,   0,  19,   0,   0,  19,   0,  15,   0,  18,   0,  19,   0,  19,   0,
  19,   0,  19,   0,  19,  19,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,
   0,  13,   0,   0,  13,   0,   0,  13,  13,   0,   0,   0,   0,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,
  18,   0,   0,   0,  18,   0,  18,   0,  18,  18,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,  14,   0,  15,   0,  13,   0,   0,  15,
   0,  15,   0,  15,  15,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,
   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   9,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   7,   0,  10,   0,  10,  10,   0,   0,   0,   0,
   0,  35,   0,  13,   0,   0,  11,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
  11,   0,  11,   0,  11,   0,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,  13,   0,  13,   0,   0,   0,  13,   0,   0,  13,   0,  13,   0,
   0,   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
  38,   0,   0,  38,   0,   0,   0,  13,   0,   0,  13,   0,  25,   0,  25,   0,
   0,  25,   0,   0,  14,   0,  14,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   7,   7,   0,  38,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,
   0,   8,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   8,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,
   0,   0,  25,   0,  25,   0,   0,   0,  38,   0,  24,   0,  14,   0,  14,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,  23,   0,   0,  25,   0,
   0,   0,   0,   0,  11,   0,   0,   3,   0,   0,  26,   0,   0,  28,   0,   0,
  26,   0,  35,   0,   0,  35,   0,  31,   0,  33,   0,  38,   0,   0,  38,   0,
  38,   0,   4,   0,   4,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   6,   0,
   0,   8,   0,   8,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,  14,   0,
  15,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,
   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,  15,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   4,
   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,  13,   0,   0,   9,
   0,  15,   0,  15,   0,   0,  15,   0,  10,   0,   9,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,  15,   0,  16,   0,
  18,   0,  18,   0,  19,   0,   0,  18,   0,  19,   0,  19,   0,   0,   0,  19,
   0,  18,   0,   0,  19,   0,   0,   0,  19,   0,  19,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   7,   0,  17,   0,  18,   0,  17,   0,  18,   0,  18,   0,
  17,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,   0,
  18,  18,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,  14,   0,   0,   0,  14,   0,  14,   0,  38,   0,   0,   0,   0,
   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   8,   8,   0,   0,
   0,   0,   0,   0,   6,   0,   0,   8,   8,   0,   0,   0,   0,   0,   0,   0,
   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,
   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,   0,  25,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,  10,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   9,   0,  10,  10,   0,  24,
   0,   0,   0,  24,   0,  12,   0,   0,  13,   0,  13,   0,  11,   0,   0,  13,
   0,   0,   0,  13,   0,   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   8,   0,   0,
   9,   0,   0,   0,   0,   0,  10,   0,   0,   0,   5,   3,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
  15,   0,   0,   0,  14,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,  38,   0,   0,
  38,   0,   0,   6,   0,  25,   0,  24,   0,   0,   0,  25,   0,  25,   0,  25,
   0,  25,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   7,   0,   7,   7,   0,   0,
   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   4,   0,   4,   0,  25,   0,   0,  25,   0,   0,  25,   0,  26,   0,   0,
   0,   0,  26,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,  14,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   4,   4,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,  18,   0,  19,   0,
  19,   0,  19,   0,  18,   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,  19,
   0,  19,   0,   0,   0,  19,   0,  19,   0,  19,   0,  19,  19,   0,   0,   0,
   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,   0,  13,  13,
   0,   0,   7,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,  14,   0,   0,   0,   7,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  14,   0,  15,   0,  15,   0,
  15,   0,  15,   0,   0,   0,  15,   0,  14,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,  11,   0,   0,   0,   0,  11,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,
   9,   9,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   8,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   7,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,  25,   0,
  25,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,  25,
   0,   0,   0,  25,   0,  13,   0,  17,   0,  17,   0,  17,   0,   0,  12,   0,
   0,   0,  17,   0,  17,   0,   0,   0,   0,  17,   0,   0,   0,  17,   0,  17,
   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,  37,   0,  10,   0,   0,   7,
   0,  10,  10,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,  13,   0,   9,
   0,   0,   0,  12,   0,  13,   0,   0,  13,   0,   0,  13,   0,   0,  13,   0,
   0,   0,   0,   0,   3,   0,  26,   0,   0,   0,  26,   0,   4,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   7,
   0,   7,   7,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,  38,   0,  35,   0,   0,   0,   0,  38,   0,   0,   0,   0,   8,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,  15,   0,  16,   0,   0,   0,  16,
   0,  16,   0,  16,   0,  16,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,   0,   0,  14,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,
   8,   0,   0,   8,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,  19,
   0,  19,   0,  19,   0,   0,  19,   0,   0,   0,  19,   0,   0,  19,   0,  13,
   0,  13,   0,   0,  13,   0,  13,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   4,   4,   0,   0,   0,   7,   0,   0,  38,   0,   0,   7,   0,
   7,   0,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  14,
   0,  15,   0,   0,   0,   0,  15,   0,   0,   0,   0,   4,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,  15,   0,  14,   0,   0,
   0,  15,   0,  19,   0,  16,   0,  20,   0,  19,   0,  20,   0,   0,  19,   0,
  20,   0,  20,   0,   0,   0,   0,  20,  20,   0,   0,   0,   0,   0,  16,   0,
   0,  15,   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,   0,  16,   0,  16,
   0,   0,   0,  16,   0,  16,   0,   0,   0,  16,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,   0,
  24,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  11,   0,  11,   0,  11,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   9,   0,   9,   9,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,
  14,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  15,   0,   0,  16,   0,
  16,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,  37,   0,   0,  38,
   0,   0,   7,   0,   7,   7,   0,   0,   4,   4,   0,   0,   0,   0,  25,   0,
  25,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,  17,
   0,   0,   0,   0,  14,   0,   0,   7,   0,   7,   0,  15,   0,  14,   0,   0,
   0,  38,   0,   0,  37,   0,  15,   0,   0,   0,  15,   0,  25,   0,  25,   0,
   0,   0,   0,  25,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,
   0,   0,   7,   0,   0,   2,   0,   0,  12,   0,  11,   0,  11,   0,  12,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,  15,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,  14,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   9,   0,   0,
  17,   0,  15,   0,   0,  16,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,
  17,   0,   8,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,  38,   0,  38,
   0,  38,   0,   0,  38,   0,   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   6,   0,   6,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,  25,
   0,   0,  25,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,
  25,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,   4,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   3,   6,   0,   0,   0,   0,   0,  16,   0,  17,   0,  16,   0,  17,   0,   0,
  15,   0,  25,   0,  25,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   9,
   0,   9,   0,   9,   0,  10,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,  26,   0,  26,   0,   0,  26,   0,   0,   0,   8,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   4,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
  26,   0,   0,  26,   0,  26,   0,   0,   0,  26,   0,   0,  26,   0,   0,  26,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,  20,   0,   0,  21,   0,  21,   0,  21,   0,  18,   0,  17,
   0,  21,   0,   0,   0,  18,   0,  21,   0,   0,  21,   0,  21,   0,  21,   0,
  15,   0,   0,  21,   0,  21,   0,  21,   0,   0,   0,   0,  21,  21,   0,  24,
   0,   7,   0,  13,   0,  14,   0,  14,   0,   0,  14,   0,   0,  14,   0,  14,
   0,   0,  14,   0,   0,  14,   0,  38,   0,   0,  38,   0,   0,   0,  25,   0,
  25,   0,  25,   0,   0,   0,  25,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  20,   0,  20,   0,  20,
   0,  20,   0,  20,   0,  20,   0,   0,   0,  20,   0,   0,   0,  20,   0,   0,
  20,   0,  20,   0,   0,  20,   0,  20,   0,  25,   0,   0,  25,   0,   0,   0,
   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,  25,
   0,  25,   0,   0,  25,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,  11,   0,   0,  38,   0,   0,  38,   0,   0,  16,   0,  16,   0,   0,
   0,  16,   0,  16,   0,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   0,   0,   9,   0,   0,   4,   0,   4,   0,   8,   0,   0,   8,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  14,   0,   0,  14,   0,  14,
   0,   0,  14,   0,  14,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,
  11,   0,   0,   0,  38,   0,   0,   0,  21,   0,  16,   0,  16,   0,   0,  16,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,  10,   0,   0,   0,   7,   0,  16,   0,  16,   0,
  15,   0,  16,   0,   0,  16,   0,   0,   0,   0,  16,   0,   0,  15,   0,   0,
   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,
  26,   0,  26,   0,  26,   0,   0,  26,   0,   0,  25,   0,   0,  25,   0,   7,
   0,   7,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,   9,
   0,   0,   0,   5,   0,  26,   0,  26,   0,   0,  26,   0,  26,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,  25,   0,
  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,  14,   0,   0,   0,   0,   0,  15,   0,   0,  15,   0,  38,   0,   0,   0,
   0,   0,   0,   0,  24,   0,  38,   0,  38,   0,   0,   0,   0,   0,  38,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,  13,   0,   0,  13,   0,
   0,   0,  13,   0,   0,  13,   0,   0,   7,   0,   0,   0,   7,   0,  25,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  20,   0,  21,   0,  20,   0,   0,  20,   0,   0,  20,   0,   0,   0,   0,
  20,   0,   0,  21,   0,  20,   0,  21,   0,  22,   0,  22,   0,   0,  21,   0,
  20,   0,  19,   0,  22,   0,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,
   0,   0,   0,   0,   0,  21,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,
   0,   0,   0,   0,  17,   0,   0,   0,  17,   0,  17,   0,  17,   0,   0,   0,
  17,   0,  17,   0,   0,  17,   0,  12,   0,   0,   0,  12,   0,   0,  12,   0,
  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   8,   0,  15,   0,   0,   0,   0,   0,  14,   0,   4,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  14,   0,  13,   0,
  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   7,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,
   0,  15,   0,  16,   0,  15,   0,  16,   0,   0,  16,   0,  16,   0,   0,  16,
   0,   0,   0,  16,   0,   0,  15,   0,  25,   0,   0,  25,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  24,   0,  26,
   0,   0,   0,  26,   0,  26,   0,   0,   0,  26,   0,   7,   0,   0,   0,   0,
   7,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,  13,   0,
  11,   0,   0,   0,  13,   0,  13,   0,   0,  13,  13,   0,   0,  15,   0,  15,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   7,   0,   0,  38,   0,   0,  38,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   4,   0,   0,   0,   0,   7,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,  25,   0,  25,   0,  38,   0,
   0,   0,   0,  26,   0,   0,   0,   0,  25,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   9,   0,   0,
   9,   0,   8,   0,   9,   0,  26,   0,  26,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,  25,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   6,   3,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  24,   0,   7,   0,   0,
   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,  38,   0,   0,  38,   0,
   0,  38,   0,   0,  24,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,  11,   0,   0,   0,   2,   0,   0,  24,   0,  21,   0,  29,   0,
  23,   0,  14,   0,  32,  32,   0,   0,   0,   0,   0,   0,  12,   0,  22,   0,
  23,   0,  14,   0,  11,   0,   0,   0,  17,   0,   0,   0,   0,  11,   0,   0,
   0,  23,   0,  23,   0,  23,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   4,   0,  12,   0,   0,   0,   3,  10,   0,   0,   7,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   8,   0,   8,   0,  14,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,
   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,
   0,   0,  15,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,
   9,   0,   9,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   0,   4,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   0,   0,   8,   0,   0,   0,   4,   4,   0,  14,   0,   0,  14,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,  12,   0,   0,   0,   4,   0,   0,  12,   0,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   1,   0,   8,   0,   0,   8,
   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   9,   9,   0,   0,   0,   0,   0,   0,   8,   0,   8,   0,  12,   0,  13,
  13,   0,   4,   4,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,  14,
   0,  19,   0,  19,   0,  19,   0,   0,   0,  19,   0,   0,   0,  19,   0,  19,
   0,   0,   0,  17,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,
  10,   0,  12,   0,   0,   0,  12,   0,   0,  11,   0,   0,   9,   0,   0,   4,
   4,   0,   0,   4,   0,   0,   4,   0,   0,   3,   0,   5,   0,  26,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   8,   0,  36,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   5,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,  17,   0,   0,  13,   0,
  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,   7,   0,  17,  17,
   0,   0,  12,   0,   0,  24,   0,   0,   0,  22,   0,  25,   0,  38,   0,   0,
   0,   0,  25,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,   0,   3,   6,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   4,   0,   7,   0,   7,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,
  12,   0,   0,   0,  12,   0,   0,   0,  13,   0,  13,   0,   0,  13,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,  14,   0,   0,   0,  14,   0,  14,   0,   0,
   0,  11,   0,   0,   0,   0,   0,  38,   0,  38,   0,  38,   0,  38,   0,  38,
   0,   0,   0,   4,   4,   0,   0,   4,   0,   0,   0,   4,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,  14,   0,  11,   0,   9,   0,   4,   5,   0,   0,   0,   0,
   0,   5,   0,   3,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   6,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,
   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,
   0,   0,   0,   0,   0,  12,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  19,   0,   0,   0,   0,   2,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   7,   0,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,  24,   0,   0,  19,   0,
  12,   0,  20,   0,   0,  19,   0,  20,   0,   0,  20,   0,  19,   0,  20,   0,
  20,   0,   0,  20,   0,  20,   0,  20,   0,  20,   0,   0,  20,   0,   0,  20,
   0,   0,   0,   8,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,
   0,   0,  19,   0,  19,   0,   0,  19,   0,   0,  19,   0,  19,   0,  19,   0,
   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,  13,   0,  13,
   0,  13,  13,   0,   0,   0,   0,   0,   9,   0,  18,   0,   0,   0,  15,   0,
   0,  18,   0,   0,  18,   0,   0,   0,  18,   0,  18,   0,   0,   0,  18,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,
   0,  26,   0,   0,   0,  26,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   4,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,  38,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,
   0,  12,   0,  12,   0,   0,   9,   0,   0,   0,   0,   0,   9,   0,   0,  26,
   0,  26,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   9,   0,   0,   0,   0,  25,   0,
  25,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,
  38,   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   7,   0,  10,   0,  10,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,  14,   0,  18,   0,   0,   0,  19,   0,  19,   0,  19,   0,
  19,   0,  19,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,  19,   0,
   0,   0,   0,   0,   0,   0,  13,   0,  17,   0,   0,  17,   0,   0,   0,  17,
   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,  16,   0,  15,   0,  16,
   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,  16,   0,  16,   0,   0,  16,
   0,   0,  16,  16,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,
   3,   5,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,
   9,   9,   0,   0,   0,   0,   0,   0,  14,   0,   0,  14,   0,  14,   0,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  25,   0,  26,
   0,  25,   0,  26,   0,  26,   0,   0,   0,  22,   0,  26,   0,   0,  26,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,  12,   0,  12,   0,  11,   0,
   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,  38,
   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,  26,   0,
   0,  26,   0,   0,   0,   0,   0,  26,   0,   7,   0,   0,   0,   7,   0,  25,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   7,   0,   8,   0,   0,   8,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   9,   0,  11,   0,   0,   0,   0,   6,  13,
   0,   0,   0,   4,   4,   0,   0,   7,   0,  15,   0,  15,   0,  13,   0,  15,
   0,   0,  15,   0,  13,   0,   0,  15,  13,   0,   0,   0,  38,   0,  38,   0,
  38,   0,   0,  38,   0,   0,  25,   0,  25,   0,   0,   0,  38,   0,   0,   0,
  24,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,  38,   0,   9,   0,   9,   0,   9,   8,   0,   0,   4,   4,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,  38,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,  10,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,  16,   0,   0,   0,  21,   0,   0,
  19,   0,   0,  16,   0,  21,   0,  14,   0,  24,   0,  24,   0,  23,   0,  25,
   0,  24,   0,  24,   0,  25,   0,  25,   0,  27,   0,  26,   0,  27,   0,  27,
   0,  27,   0,  27,   0,   0,  27,   0,   0,  23,   0,   0,  34,   0,   0,   0,
  34,   0,  38,   0,  38,   0,   0,  38,   0,   0,  38,   0,   0,  38,   0,   0,
  38,   0,   0,   0,  38,   0,   0,   0,  38,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,  11,  11,   0,
   0,   0,   4,   0,   0,   0,   4,   0,   0,   7,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  16,
   0,  14,   0,  15,   0,  13,   0,  18,   0,  18,   0,  18,   0,  19,   0,  19,
  18,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  12,   0,  14,   0,  14,
   0,  13,   0,  14,  14,   0,   0,   4,   0,   0,   0,   4,   0,  10,   0,   9,
   0,  12,   0,   0,  12,  12,   0,   4,   4,   0,   0,  25,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   4,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   5,   0,  11,   0,   0,  10,   0,   5,   4,   0,
   0,   0,   5,   4,   0,   0,   0,  36,   0,   5,   0,   4,   0,   0,   0,   0,
   0,  38,   0,   0,  38,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,
   0,  10,   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   6,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,  10,   0,   0,  10,   9,   0,   5,   4,
   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   9,   0,   0,   9,   0,   0,   0,   9,   0,   9,   0,  10,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,
  10,   0,   9,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   0,   0,  24,   0,   4,   5,   0,   0,   4,   0,   4,   0,
   5,   0,   4,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,  10,
   0,  10,   0,  11,   0,   0,  11,  11,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,  11,   0,  11,  11,   0,
   0,   0,   0,   0,   4,   0,   4,   0,  15,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,   0,  16,  16,   0,   0,   0,   0,   4,   5,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   5,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   5,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   7,   0,   7,   8,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,  10,   0,   9,   0,   9,   0,   0,   0,   9,   0,   9,   0,
   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,  24,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  15,   0,  15,   0,  14,   0,
  15,   0,  15,   0,   0,   0,  15,  14,   0,   4,   5,   0,   0,   0,   0,   0,
   0,   0,  37,   0,   0,   0,   0,  10,   0,  10,   0,  11,   0,  12,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   3,   0,  36,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,
   0,   0,   0,   0,   4,   5,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   5,   4,   0,  12,   0,   0,   0,  11,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,  13,   0,   0,
  13,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  10,   0,  11,   0,
   6,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  24,
   0,   0,  10,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,  14,
   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   7,   0,   0,   0,   7,   0,   3,   0,   6,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  34,   0,  11,   0,   0,   9,   0,  10,   0,   7,   0,
  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   4,
   0,  25,   0,  24,   0,   0,  25,   0,   0,  25,   0,   0,  10,   0,   0,   0,
  10,   0,   0,   0,  23,   0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  36,   0,   0,  38,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   8,   0,   9,
   0,   9,   9,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   9,   0,   9,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,  14,   0,  14,
   0,  14,   0,  13,   0,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
  38,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   4,   4,   0,   4,   4,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,  21,   0,   0,   0,  18,   0,
  22,   0,  22,   0,  21,   0,  21,   0,  22,   0,  22,   0,  22,   0,  19,   0,
  22,   0,  21,   0,  21,   0,  22,   0,  22,   0,  19,   0,   0,   0,   0,  22,
   0,  22,   0,  22,   0,   0,   0,   0,  22,  21,   0,   0,   0,   4,   0,   5,
   0,  12,   0,  13,   0,  14,   0,  12,   0,  13,   0,   0,  14,  14,   0,   0,
   0,   4,   4,   0,   0,   0,   4,   0,   0,   0,   4,   0,  13,   0,  13,   0,
   0,  13,   0,   0,   0,   0,  12,   0,   0,  13,   0,   0,   0,  13,  13,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   4,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   8,   0,   8,   0,   8,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,  14,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,  14,   0,  15,
   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,  15,   0,   0,   0,
   0,   0,   0,   0,   9,   0,  10,   0,   0,   9,   0,   4,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   4,   0,  24,
   0,  25,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   9,
   0,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   8,   0,  11,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  15,   0,  16,   0,  16,   0,  15,   0,  16,   0,   0,   0,  16,   0,
   0,   0,  16,   0,   0,  16,   0,   0,  16,   0,  16,  16,   0,   0,   0,   0,
   0,   0,  15,   0,  14,   0,   0,   0,  15,   0,  15,   0,  15,   0,  15,   0,
  15,   0,   0,   0,  15,  15,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
  38,   0,  26,   0,   0,  26,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,
   0,   0,  12,  12,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,
  13,   0,  13,   0,  13,  13,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   8,   0,  10,   0,  10,   0,   0,
   0,   0,   0,  10,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   7,   0,   0,   8,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,
   0,   0,   4,   0,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,  25,   0,   3,   5,   0,   9,   0,   0,  10,   0,   0,   0,
   0,   6,   3,   0,   8,   0,   6,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   5,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   4,   5,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,
   0,   6,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,  14,   0,  12,   0,  14,   0,  15,
   0,  15,   0,  14,   0,   0,   0,  15,  15,   0,   0,   0,   7,   0,   7,   0,
   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,  12,  12,
   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,  10,   0,  11,   0,  11,   0,
   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  12,   0,  12,   0,   0,  12,   0,  12,   0,  12,  12,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   4,   0,   0,   4,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,  25,   0,   0,  25,
   0,  12,   0,   0,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,  15,   0,  15,   0,  15,   0,  15,   0,  14,   0,  15,   0,
   0,  15,   0,   0,   0,   0,   3,   5,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   8,   0,   6,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,  14,   0,  14,
   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   4,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   6,   0,  14,   0,   0,  15,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,  11,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   5,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,  17,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,
   0,  18,   0,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,   9,   0,  12,
   0,  13,   0,  13,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  23,   0,  25,   0,  25,   0,  23,   0,   4,   4,   0,   0,   0,   4,   0,
   0,   4,   0,   5,   4,   0,   0,   0,   0,   0,   0,   7,   0,  16,   0,  15,
   0,  16,   0,  16,   0,  16,   0,   0,  16,   0,  15,   0,  16,   0,  16,  16,
   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,
   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,   0,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   7,   0,   0,   7,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   5,   3,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   7,   0,  14,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   4,   4,   0,
   4,   0,   4,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,  13,   0,
  13,   0,  13,   0,  13,   0,  13,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,  10,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   5,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   4,   4,   0,  14,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   4,   0,  13,  13,   0,   7,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,  17,   0,   0,   0,  20,   0,   0,   0,   0,   4,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   9,   0,  11,
   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,  14,   0,   0,  14,   0,
  12,   0,   0,   0,  11,   0,  10,   0,   9,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   5,   0,   0,   0,   0,  38,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  13,
   0,  11,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   0,  11,   0,  11,
   0,  12,   0,  12,   0,   0,  12,  12,   0,   0,   4,   4,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,  24,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,  11,   0,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   8,   0,
   9,   0,   0,   0,   9,   9,   0,   7,   0,   0,   0,   7,   0,   0,   6,   0,
   0,   0,   8,   8,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
  14,   0,  14,   0,  14,   0,  14,   0,  10,   0,  14,   0,   4,   4,   0,   0,
   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,  10,   0,   0,  14,   0,  12,   0,
  17,   0,  17,  12,   0,   0,   0,   0,  15,   0,   0,  17,   0,   0,  16,   0,
  17,   0,  17,   0,  17,   0,  17,   0,   0,  16,   0,   0,  17,   0,   0,  17,
   0,  17,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,  18,   0,  18,   0,
   0,   0,   0,  16,   0,  18,   0,   0,  18,   0,  18,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,  25,
   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   4,   0,   0,   5,   0,   0,
   4,   0,   0,   4,   0,   0,   0,   4,   0,   4,   0,   4,   0,   0,   4,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,  12,   0,   9,
   0,   0,  12,   0,   0,   0,   0,   8,   0,   0,   8,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   7,   0,   0,   6,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,  23,   0,   0,
   4,   0,   4,   0,   0,   0,   2,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  13,   0,  13,   0,  13,   0,
  13,   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,   0,   0,  15,   0,  13,
   0,  15,   0,  15,   0,  15,  15,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,
   0,  24,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   3,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  15,   0,
  14,   0,  16,   0,  15,   0,  16,  16,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,  38,   0,   0,  38,   0,  26,   0,  26,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,  25,   0,   0,  24,   0,   0,
  25,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,
   7,   0,   0,   6,   0,   7,   9,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,  14,   0,  11,   0,  14,   0,  14,   0,  14,  14,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,  23,   0,   0,  24,   0,   0,   0,   0,  37,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,  10,
   0,   9,   0,  12,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,  24,   0,   0,  15,   0,   0,   0,  15,   0,   0,   0,   0,
   0,  14,   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,   0,   0,
  15,   0,   0,  15,  15,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
  10,   0,   0,   0,  11,   0,   0,  11,   0,   0,  11,  11,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   7,   7,   0,   0,
   0,   0,  13,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   7,   7,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
  10,   0,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,  13,   0,  13,   0,  13,   0,  13,   0,
  13,  13,   0,   0,   0,   0,   0,   0,   8,   0,  10,   0,   0,  10,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,
   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   5,   4,   0,   5,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   9,   0,  11,   0,
  11,  11,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   9,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,  14,   0,   7,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,  12,   0,  13,   0,  13,   0,  13,   0,
   0,   0,  13,   0,  13,  13,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,
  12,   0,   0,  12,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,  10,   0,  11,
   0,  11,  11,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,  38,   0,   0,
   0,  38,   0,   0,   0,   0,   0,  37,   0,   0,   0,  12,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,
   0,  13,  13,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,   0,   5,   0,
   0,  22,   0,  30,   0,  26,   0,  29,   0,   0,   0,  11,   0,  30,   0,   0,
   0,  14,   0,  30,   0,  30,   0,  30,   0,  30,   0,  30,   0,   0,   0,   0,
  25,   0,  30,   0,  30,   0,   0,   0,   0,  14,   0,   0,  16,   0,   0,  18,
   0,   0,  16,   0,   0,  21,   0,   0,  22,   0,  24,   0,  23,   0,  23,   0,
  22,   0,  25,   0,  24,   0,  16,   0,  25,   0,  25,   0,  25,   0,  25,   0,
  25,   0,  25,   0,  25,   0,  25,   0,  25,  25,   0,   0,   0,   0,   7,   0,
   0,  14,   0,   0,   0,   0,  10,   0,  15,   0,  15,  15,   0,   0,   0,   9,
   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   6,   0,
   0,  14,   0,  13,   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,
   0,  20,   0,  21,   0,  21,   0,  21,   0,  21,   0,  18,   0,  20,   0,  20,
   0,  21,   0,  21,   0,  20,   0,  21,   0,  17,   0,  20,   0,  20,   0,  21,
   0,  21,   0,  20,   0,  21,  21,   0,   0,   0,   0,   0,  11,   0,  10,   0,
   0,  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   9,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,
  11,  11,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,
  14,   0,   0,  14,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,
   0,   0,   9,   0,   0,   0,   0,   0,  24,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,   0,   0,
  38,   0,  38,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,  13,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   4,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,  11,   0,  11,   0,  11,  11,   0,  14,
   0,  14,   0,   0,  13,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
  37,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   8,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   7,   0,   8,   6,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   0,   7,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   5,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   9,   0,   0,   9,   0,   8,   0,   0,   0,   8,   0,   9,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,  11,   0,  11,   0,
  10,   0,  11,  11,   0,   7,   0,   0,   0,   7,   0,   9,   0,   9,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,  38,   0,  38,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,  12,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,
   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  16,   0,  16,   0,  15,   0,  15,   0,  11,   0,  15,   0,  11,
   0,  14,   0,   0,  38,   0,  37,   0,   0,   0,  38,   0,   0,   0,   0,  11,
   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,  11,  11,   0,   0,   0,   4,   4,   0,   0,   0,   0,  11,   0,  11,
   0,   0,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,  38,   0,
   0,  38,   0,  38,   0,  38,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,  23,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   4,   0,   0,   8,   0,   0,   8,   0,   0,   0,   9,   0,   9,   0,
   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
  12,   0,   0,  12,   0,   0,   0,  12,   0,   0,  12,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  11,   0,  11,   0,   0,
  11,  11,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   2,   7,   0,   0,   0,   0,   0,   0,   0,  12,   0,   9,   0,   9,
   4,   0,   0,   5,   0,   3,   0,   5,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   4,   0,   4,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   2,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,  38,   0,   0,   0,  38,   0,   0,  24,   0,  12,   0,  15,   0,
  12,   0,  15,   0,  16,   0,  16,   0,  16,   0,   0,  16,  16,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,  12,   0,  10,   0,   0,  10,   0,   0,   4,   5,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  24,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,  10,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   9,   0,   9,   0,   0,   9,   0,   0,   4,
   4,   0,   0,  38,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,  11,   0,  11,   0,  10,   0,  11,  11,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,  38,   0,  38,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,  10,   0,  14,   0,  14,   0,  13,   0,  14,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,  11,   0,  10,   0,  11,  11,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   0,   4,
   0,   8,   0,  10,   0,  10,   0,  13,  13,   0,   0,   0,   0,   0,  14,   0,
  12,   0,  13,   0,  14,   0,  14,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
  12,   0,  13,   0,   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,   0,   6,
   0,   8,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,  17,
   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  13,   0,  17,   0,   0,
   0,  17,   0,  17,  16,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,
   9,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   6,   3,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   0,  10,   0,   7,   0,  10,  10,   0,
   0,   0,   0,  38,   0,  38,   0,   0,  25,   0,  25,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   7,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  12,   0,  14,   0,  14,
   0,  13,   0,  13,   0,  13,  13,   0,   4,   5,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,  10,   0,  11,   0,   0,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   4,   5,   0,  12,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
  13,   0,   0,   0,  13,   0,  13,   0,  13,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,  11,   0,  11,   0,   0,   0,  10,  11,   0,   0,   0,
   0,   0,   4,   0,   4,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   7,   0,   0,   0,   7,
   7,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,  25,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,  11,   0,  10,  11,   0,   0,   0,   0,   0,   0,   0,
  11,   0,  12,   0,  12,   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,
   0,  25,   0,  24,   0,   0,  25,   0,  25,   0,   0,   0,  15,   0,   0,   0,
  15,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,  15,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   9,   9,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,  12,   0,
  12,   0,   0,   0,  12,   0,   0,  12,   0,   0,  12,   0,   8,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   8,   0,   3,   5,
   0,   0,   0,   0,   0,   0,   0,   0,   3,   5,   0,   0,   0,   0,   7,   0,
   0,   8,   0,   0,   0,   0,   0,   0,  15,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,  12,   0,  12,   0,   0,  12,   0,
   0,  12,  12,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   4,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,  15,   0,  15,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,  16,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,
   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,  10,   0,  11,   0,  11,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   9,   0,  10,   0,   9,
   0,   6,   0,   0,   0,   8,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   4,   4,   0,  14,
   0,   0,  14,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,  25,
   0,  25,   0,  25,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   5,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   7,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,  10,   1,   0,   4,
   0,  13,   0,   0,   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   9,   4,   0,   9,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   4,   4,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,
   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,  18,   0,  18,
   0,  18,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   8,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   7,   0,   0,  11,   0,  11,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
  24,   0,  22,   0,  24,   0,  25,   0,  26,   0,  25,   0,  12,   0,  12,   0,
   0,   0,  12,   0,  12,   0,  12,  11,   0,   0,   0,   0,   5,   0,   0,   4,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,
  13,  13,   0,   4,   4,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,
   0,  14,   0,   0,  14,   0,   0,   0,  14,  14,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   8,   0,   0,   0,
   0,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,
   0,  11,   0,  10,   0,  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,  15,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   8,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   4,   0,   4,   0,
  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,
   0,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,  11,   0,  13,
   0,  13,   0,   0,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  35,   0,  38,   0,  38,   0,   0,   0,  12,   0,   0,   0,
  12,   0,   5,   0,   0,   8,   0,   0,   0,   3,   6,   0,   0,   0,   9,   0,
   9,   0,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,
   0,   0,  11,  10,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   7,   0,   7,
   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,   0,   0,  12,   0,   0,
  13,   0,  13,  13,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,  14,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,
  11,   0,  11,   0,  10,   0,  11,  10,   0,   6,   0,   8,   8,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   5,   0,  11,   0,  11,   0,  11,   0,  11,
  11,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   0,   0,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,  11,   0,  10,   0,   0,   0,  11,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,  11,   0,  10,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,  12,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,  16,
   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,
  16,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,  11,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,  13,   0,  13,   0,   0,  13,   0,  13,   0,   0,  13,   0,   0,
  13,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  22,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,
   0,   0,   0,   0,   0,  23,   0,  23,   0,  25,   0,   0,   0,   4,   4,   0,
   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   8,   0,   6,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   6,   0,   8,   8,   0,   0,   0,   0,   0,   0,   0,
   5,   4,   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,  11,   0,  11,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   8,   0,  25,   0,  25,
   0,  25,   0,  25,   0,  25,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   7,   0,   0,   7,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,  11,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,  12,   0,  10,   0,  12,
   0,  13,   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,  13,   0,  14,   0,
  14,   0,  14,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   8,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
  37,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,  26,   0,   0,  26,   0,   7,   0,
   0,   7,   7,   0,   0,   0,   7,   0,   0,   0,   7,   0,  10,   0,   0,   0,
   0,   0,  10,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,
   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,
   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   7,   7,   0,   7,   0,   0,   7,   0,   7,   0,   7,   0,  38,   0,   0,
  38,   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   7,   0,   0,   0,   7,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,
  14,   0,  14,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   9,   0,   0,
  17,   0,   0,  14,   0,   0,  18,   0,   0,  10,   0,   0,  15,   0,   0,  23,
   0,   0,  28,   0,   0,   0,  28,   0,   0,  28,   0,  28,   0,   0,  28,   0,
   0,   0,   7,   0,   0,  22,   0,  17,   0,  24,   0,  25,   0,   0,   0,  25,
   0,  25,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,  24,   0,  25,
   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,
  25,   0,  19,   0,   0,   0,  14,   0,   0,  17,   0,  19,   0,  19,   0,  19,
   0,  19,   0,  15,   0,   0,  19,   0,   0,  19,   0,  19,   0,   0,   0,  19,
   0,  19,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,  20,
   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,
   0,  20,   0,  20,   0,  20,   0,   0,   0,  20,   0,   0,   0,  20,   0,  20,
   0,   0,   0,  20,   0,  20,   0,   0,   0,   0,  20,  20,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,
   9,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,  25,
   0,   0,  25,   0,   9,   0,   0,   0,   9,   0,   0,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   7,   0,
   0,  13,   0,   0,  13,   0,   7,   0,   0,   7,   0,   7,   0,   0,   0,   7,
   0,   7,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,  11,   0,
   0,   0,   0,   0,   0,  11,   0,   8,   0,   0,   0,   0,   8,   0,   0,   0,
   7,   0,   0,   7,   0,   7,   0,   7,   0,   7,   0,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  13,   0,  14,   0,  14,
   0,  14,   0,   0,   0,  14,   0,  11,  12,   0,   5,   0,   4,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   7,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   8,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,  24,   0,   0,   0,  25,   0,  26,   0,
   0,  26,   0,   0,  26,   0,   0,   0,  16,   0,   0,   0,  16,   0,  16,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,
   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   8,   0,   0,   0,  11,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   3,   7,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  10,   0,
   0,   0,  10,   0,   0,  26,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   5,   0,
   0,   0,   0,   0,   0,   0,  18,   0,  18,   0,  18,   0,   0,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,   0,  18,   0,   0,  18,
   0,  18,   0,  18,   0,   0,   0,   0,   8,   0,   8,   0,   0,   4,   0,   4,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,   0,   4,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,  11,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,  10,   0,  12,  12,   0,   0,   0,   0,   0,   0,   2,   9,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,
  25,   0,   0,   0,   4,   0,   5,   0,   0,   0,   0,   0,   0,   0,   6,   0,
   0,   8,   8,   0,   0,   7,   0,   0,   7,   7,   0,   0,  13,   0,   0,   0,
   4,   5,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,  26,   0,   9,
   0,   9,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,  14,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   5,   0,   4,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  11,
   0,  11,   0,   0,   0,  11,   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   7,   0,   0,   0,   0,   0,  37,   0,  24,   0,   0,   0,
   0,   0,  10,   0,  10,   0,   0,  13,   0,  13,   0,  12,   0,   0,  14,   0,
  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,   0,   0,  16,
   0,  16,   0,   0,   0,  16,   0,  16,   0,   0,   7,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  19,   0,   0,   0,  19,   0,  15,   0,  19,   0,  19,   0,  19,
   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,  19,
   0,  19,   0,   0,  19,   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,
  26,   0,   0,  26,   0,   0,  26,   0,  26,   0,   0,  26,   0,  26,   0,   0,
   0,   0,   0,  38,   0,   0,  38,   0,   0,  14,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,  13,   0,   0,  12,   0,  13,   0,  13,
   0,   4,   0,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   9,   0,   9,   0,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,  15,   0,   0,
  15,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   8,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,
  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,   0,  15,   0,  21,   0,
  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   7,   0,   0,   7,   0,   7,   0,  11,   0,  11,
   0,   0,   0,   0,   0,   0,  11,   0,  26,   0,  26,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,  12,
   0,   0,   0,  12,   0,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,  24,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
  25,   0,   0,   0,   0,  24,   0,   0,   7,   0,   0,   0,   7,   0,  18,   0,
  17,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  17,   0,  18,   0,
   0,   0,  18,   0,   0,  18,   0,   0,   0,  18,   0,   0,  18,  18,   0,   0,
   0,  24,   0,   0,   7,   0,   7,   7,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,  12,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   4,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   8,
   0,   0,   0,  14,   0,  15,   0,  15,   0,   0,   0,  15,   0,  15,   0,  14,
   0,   0,   0,  14,   0,   0,   0,  15,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   7,   0,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,  15,   0,   0,  15,
   0,  14,   0,  13,   0,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,
   0,  14,   0,  11,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  25,   0,   0,   0,  25,   0,   0,   0,  15,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,  14,   0,  11,   0,  21,   0,  20,   0,
  21,   0,  21,   0,   0,   0,  19,   0,   0,   0,  21,   0,  21,   0,  20,   0,
  20,   0,   0,  19,   0,  21,   0,  21,  16,   0,   0,   0,   0,   0,   0,   0,
  25,   0,  24,   0,  24,   0,   0,  25,   0,   0,   0,  22,   0,  26,   0,  26,
   0,   0,   0,  26,   0,   0,   9,   0,   9,   0,   9,   0,   0,   0,   0,   4,
   4,   0,   9,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,  25,   0,  24,
   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,  14,   0,   0,  14,
   0,  14,   0,  14,   0,  13,   0,   0,   0,   0,  14,   0,   0,   0,   0,  14,
   0,  17,   0,  17,   0,   0,   0,   0,  17,   0,   0,   0,  37,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,  15,   0,   0,
   0,   0,   0,   9,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,  14,   0,   8,   0,  15,   0,   0,   0,  15,   0,  18,   0,  18,   0,
  13,   0,   0,  18,   0,   0,  18,   0,   0,  18,   0,   0,  18,   0,   0,   0,
  18,   0,   0,  18,   0,   0,  18,   0,   0,  18,   0,  18,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,  11,   0,  11,   0,   0,
  11,   0,   0,   0,  11,   0,   7,   0,   0,   0,   7,   0,   0,   0,   7,   0,
   7,   0,   7,   0,   0,   0,   7,   0,   0,   7,   7,   0,   4,   0,   4,   0,
   2,   0,   0,   0,   7,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,
   0,  38,   0,   0,  38,   0,  37,   0,  38,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
  14,   0,   0,  14,   0,  14,   0,   0,  14,   0,  14,   0,   0,  14,   0,  14,
   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,  25,   0,  25,
   0,  13,   0,   0,   0,  13,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,
   0,  17,   0,   0,  17,   0,   0,  17,   0,   0,   0,   0,  17,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   9,   0,   9,   9,   0,   0,   0,   0,   0,  19,   0,  19,   0,   0,  19,   0,
  19,   0,  19,   0,   0,   0,  19,   0,  19,   0,   0,  19,   0,   0,   0,   0,
   0,  19,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,  11,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,  11,   0,  11,   0,   0,   0,   0,  11,   0,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  10,   0,   0,   0,   0,   0,
   0,  38,   0,   0,  38,   0,  25,   0,  25,   0,  25,   0,   0,   0,  25,   0,
   4,   4,   0,   8,   0,   0,   0,   8,   0,   4,   4,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,
  11,   0,   9,   0,  10,   0,   0,  10,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   7,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,  24,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   8,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,  10,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   7,   7,   0,   0,   0,   0,   0,   0,  19,   0,   0,  17,   0,   0,  17,
   0,  20,   0,   0,  20,   0,  19,   0,  20,   0,  20,   0,  16,   0,  20,   0,
  18,   0,  20,   0,  20,   0,  20,   0,  20,   0,   0,   0,  20,   0,   0,   0,
  12,   0,  12,   0,   0,  12,   0,  12,   0,   0,  12,   0,   0,   0,   0,   9,
   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   4,   0,  10,   0,  11,   0,
  11,   0,   0,  11,   0,  16,   0,   0,  15,   0,   0,  16,   0,  11,   0,  11,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,  11,   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   5,   0,   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,  15,   0,  15,   0,   0,   0,   0,   0,
  14,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,  15,   0,   0,   0,   5,
   3,   0,   0,   0,  38,   0,  38,   0,   0,  37,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,  11,   0,   0,  11,   0,  11,   0,   0,
  11,  11,   0,   0,   0,   0,   4,   0,   4,   0,   0,  13,   0,  13,   0,  13,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,
   0,  12,   0,  12,   0,   0,  12,   0,   0,   7,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  15,   0,   0,   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,
   0,  15,   0,  15,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,
  38,   0,  10,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   6,   0,   8,   8,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,  24,   0,  25,   0,  25,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,  11,   0,  11,   0,  11,   0,  10,   0,   0,   0,  11,   0,
  11,   0,   0,   0,  11,   0,  11,   0,   0,   0,   0,   0,  26,   0,  26,   0,
  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  11,   0,  11,
   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,  25,   0,   5,   0,   0,
   8,   9,   0,   0,   0,   0,   0,   5,   0,   0,   0,   9,   0,   0,   4,   5,
   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,  25,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,  15,   0,  19,   0,
  17,   0,   3,   0,   0,   0,  19,  15,   0,   8,   0,  12,   0,  12,   0,   0,
  12,  12,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,  16,   0,  17,   0,
  17,   0,   0,  17,   0,   0,  16,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,  15,   0,  15,   0,  12,   0,  15,   0,  15,
   0,   0,   0,  15,  14,   0,   4,   5,   0,   0,   0,   0,   0,   0,  24,   0,
  38,   0,  38,   0,  38,   0,  38,   0,  38,   0,  38,   0,   0,  36,   0,  38,
   0,   0,  38,   0,  38,   0,  37,   0,   0,   0,   0,   0,   8,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,  12,
   0,   0,  13,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   4,   5,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  16,   0,  16,   0,  15,   0,  16,   0,  16,   0,  16,   0,  16,
   0,   0,  16,   0,   0,   0,   0,   0,  16,   0,   0,   9,   0,   0,   9,   0,
   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  38,   0,   4,
   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,  38,   0,  12,   0,  12,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,  24,
   0,   0,   0,   0,   0,  16,   0,  16,   0,  17,   0,   0,   0,  17,   0,  17,
   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,  17,   0,  17,   0,  17,
   0,   0,   0,   0,   7,   0,   0,   0,   8,   0,   0,  24,   0,   0,  24,   0,
   0,   0,   0,   0,  24,   0,  25,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   5,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   8,   0,   0,   0,  15,   0,   0,   0,  15,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  17,   0,  19,   0,  19,   0,  20,   0,  20,   0,
   0,   0,  10,   0,   0,   0,   7,   0,  19,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,  16,   0,  21,
   0,  20,   0,  23,   0,   0,  16,   0,  23,   0,   0,  22,   0,  22,   0,  21,
   0,  23,   0,  23,   0,  23,   0,  23,   0,   0,   0,  18,   0,   0,   0,  23,
   0,   0,  23,   0,   0,   0,   0,  10,   0,  16,   0,  16,   0,   0,  16,   0,
  16,   0,  16,   0,   0,  16,   0,  16,   0,   0,   7,   0,   0,   0,   0,   7,
   0,  12,   0,   0,   0,  12,   0,   6,   0,  12,  12,   0,   8,   0,   0,   8,
   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   8,   0,  10,  10,   0,   0,   0,   0,
   0,   0,  24,   0,  25,   0,   0,   0,  38,   0,  13,   0,   0,  13,   0,   0,
   0,  38,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,  38,   0,   0,   0,
   4,   0,   0,   0,   4,   0,  38,   0,  38,   0,   0,  38,   0,   0,   0,   0,
   0,  37,   0,   0,   0,   0,   0,  11,   0,   0,  10,   0,  11,   0,   0,   0,
   0,  10,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,   0,   0,  15,   0,   0,  15,
   0,  15,   0,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,
  12,   0,   0,  13,   0,  13,   0,   0,   0,   0,   7,   0,  12,   0,  12,   0,
   0,   0,  12,   0,   0,  12,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   4,   4,   0,   0,   0,   8,   0,   0,   8,   0,   0,   5,   4,
   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   9,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,  15,   0,  17,   0,  14,   0,  17,
   0,  16,   0,  17,   0,  17,   0,  17,   0,  17,  16,   0,   0,   0,   0,   0,
  26,   0,  25,   0,  26,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,  38,   0,  38,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,   0,
   0,  26,   0,   0,   5,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,
   9,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,  16,   0,
  16,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   9,   0,   0,   0,  11,   0,   0,  11,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   9,   0,
   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   8,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   8,   0,   0,
  14,   0,   0,   0,  10,   0,  22,   0,   0,   0,  12,   0,   0,  27,   0,   0,
  27,   0,   0,  27,   0,  27,   0,  27,   0,  26,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,  15,  16,   0,   0,
   0,   0,   0,  38,   0,  38,   0,  38,   0,   0,  38,   0,  12,   0,  12,   0,
  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,  17,
   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,
   0,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   7,   0,   0,   7,   0,   0,   0,   7,   0,
   7,   7,   0,   4,   0,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  26,   0,  26,   0,   0,
   0,  26,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,  18,   0,  21,   0,
  23,   0,   0,  24,   0,   0,   0,  13,   0,  21,   0,   0,  23,   0,  23,   0,
   0,  23,   0,  22,   0,  24,   0,  24,   0,   0,   0,  24,   0,  11,   0,  24,
   0,   0,   0,  17,   0,   0,  24,   0,  15,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,  18,   0,  19,
   0,  19,   0,  19,   0,  19,   0,  19,   0,  17,   0,  19,   0,   0,   0,  19,
   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,   0,   0,   0,   0,  16,
   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,
   0,   0,  16,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   7,   0,
   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  26,   0,
  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,  10,   0,   0,  10,
   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,
  16,   0,  19,   0,  19,   0,  18,   0,  19,   0,   0,   0,  19,   0,  19,   0,
  17,   0,   0,   0,  19,   0,   0,  19,   0,   0,  19,   0,   0,  19,   0,  19,
  19,   0,   0,   0,   0,   0,  11,   0,   0,   0,  12,   0,   4,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
  11,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   9,   0,   4,
   0,   0,   4,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   5,   0,   4,   0,  12,   0,  12,   0,   0,  12,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,  17,   0,   0,   0,  13,   0,
  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,  17,   0,  17,   0,
   0,  17,   0,  25,   0,  25,   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,  11,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   6,   0,   0,   8,
   8,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,  18,   0,  18,   0,  18,
   0,  18,   0,   0,   0,  16,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   4,   0,   0,   0,   0,  14,   0,   0,  24,   0,  38,   0,   0,  38,   0,  38,
   0,   0,  38,   0,  38,   0,  38,   0,  38,   0,   9,   0,   0,  38,   0,  38,
   0,  38,   0,   0,  38,   0,  25,   0,   0,  25,   0,  25,   0,   0,  25,   0,
   0,   0,   0,   0,  12,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,  14,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   6,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,   8,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  10,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,  11,   0,   0,   0,   0,  11,   0,   0,   0,  11,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,
   0,  37,   0,   0,   0,   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,   6,
   0,   8,   8,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   7,   0,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  14,
   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   7,   0,   4,   4,   0,   0,   0,   0,   0,  38,
   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,  38,   0,  38,
   0,   0,  38,   0,  38,   0,   0,   0,  38,   0,   4,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,  13,   0,  14,   0,   0,   2,   0,   0,   0,   4,   0,
   4,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,  20,   0,  18,   0,  21,   0,  21,   0,  17,   0,  22,   0,  20,
   0,  21,   0,   0,  21,   0,  22,   0,  21,   0,   0,   0,   0,  14,   0,   0,
  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,   0,   0,   0,   0,
   0,  22,   0,   0,   0,  10,   0,  12,   0,  12,   0,  12,   0,  12,  12,   0,
   0,   0,   0,   0,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,
   0,  19,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,
  12,  12,   0,   0,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   0,  17,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   0,  15,   0,  15,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
  16,   0,   0,  15,   0,  16,   0,  15,   0,  13,   0,  16,   0,  16,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,
   0,   4,   0,   0,   4,   0,  26,   0,   0,  25,   0,   0,   0,   0,  26,   0,
   0,   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,   0,  13,   0,  13,   0,  14,   0,   0,  14,   0,
  14,   0,  14,   0,  14,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,   0,   0,  12,   0,  11,   0,  12,   0,   0,   0,
  12,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  37,   0,  38,   0,  38,   0,  38,   0,  37,   0,   0,   0,  10,   0,  10,
   0,  10,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,  12,
   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   5,   0,   0,   8,   0,   0,   4,   5,   0,   0,   0,   0,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,   0,  16,
   0,  16,   0,   0,  16,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   7,
   0,  16,   0,  16,   0,   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,  16,
   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,  26,   0,  26,   0,   0,  26,   0,  26,   0,  26,   0,   0,   0,
   0,  25,   0,   0,  25,   0,  13,   0,  14,   0,  14,   0,   0,  13,   0,  25,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,  25,   0,
   7,   0,   0,   7,   7,   0,   0,   0,   0,  38,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,  15,   0,  15,   0,
   0,   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,   4,   4,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   0,   0,  16,   0,  16,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  13,   0,   9,   0,  13,   0,   0,  13,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,  13,   0,   0,
   0,   0,  15,   0,  18,   0,  22,   0,  22,   0,  22,   0,  22,   0,  20,   0,
   0,  22,   0,  22,   0,   0,  22,   0,  22,   0,  22,   0,  22,   0,   0,   0,
   0,  22,   0,  22,   0,  22,   0,  22,   0,   0,   0,  22,   0,  22,   0,   4,
   5,   0,   0,   0,   0,   0,   0,  11,   0,   0,  12,   0,  13,   0,   9,   0,
   0,   0,  15,   0,  14,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,  21,   0,   0,  21,   0,  21,   0,  21,   0,  21,   0,  21,   0,
  21,   0,  21,   0,  21,   0,  21,   0,  21,   0,  21,   0,   0,  21,   0,  21,
   0,   0,  21,   0,  21,   0,   4,   4,   0,   0,   0,   0,   0,  14,   0,   0,
  14,   0,  10,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   7,   0,   7,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,  12,   0,  19,   0,
  19,   0,  19,   0,   0,  19,   0,   0,  19,   0,   0,   0,  19,   0,  19,   0,
   0,  19,   0,  19,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   7,   7,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   7,   0,   0,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   6,   0,   0,   8,   0,   0,   7,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,
   0,   8,   0,   0,   0,   5,   0,   0,   4,   0,  26,   0,  20,   0,   0,   0,
   8,   0,   0,   0,   7,   0,   0,   0,  16,   0,  16,   0,  18,   0,   0,   0,
  17,   0,   0,  17,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,
   0,  18,   0,   0,  18,  18,   0,   0,   0,   0,   0,  15,   0,  15,   0,   0,
   0,  15,   0,  15,   0,   0,   0,  15,   0,  15,   0,  15,   0,   0,   0,   0,
   0,   0,  15,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,  24,   0,
  25,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   9,   0,   0,   9,   0,
   0,   0,   9,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,
   0,   0,   7,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,  14,   0,   0,  11,   0,  14,   0,   0,  13,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,  11,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,
   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,  25,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,  11,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,  12,   0,  13,   0,  13,   0,  13,   0,   0,  13,   0,  13,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,  10,   0,
  11,   0,   0,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   7,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   9,   0,   0,   9,   0,   0,
   0,   9,   0,  11,   0,   0,  11,   0,   0,  11,   0,   0,  11,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   4,   0,  37,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   9,   0,  11,   0,  11,   0,   0,
  11,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,   0,  25,   0,  25,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,   0,   0,   0,   0,   4,
   0,   4,   4,   0,   4,   4,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  16,   0,  16,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,
   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,   0,  19,   0,   0,   0,   0,
   0,  19,   0,  23,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,
   0,   0,  26,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,  25,   0,
   0,  25,   0,   0,   8,   0,   8,   0,   0,   9,   0,   0,   9,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  22,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,  26,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,  11,   0,   0,   0,  11,   0,  11,   0,  11,   9,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   9,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  11,   0,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,  38,   0,   0,  25,   0,  25,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  17,   0,   0,   0,   9,   0,  21,   0,  20,   0,  21,   0,
   0,  21,   0,  21,   0,  21,   0,  21,   0,  21,   0,  21,   0,  21,   0,   0,
  21,   0,   0,   0,  17,   0,   0,  20,   0,  11,   0,   0,   0,  11,   0,  11,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   2,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,  26,   0,   0,  26,   0,  25,   0,   0,   0,  26,   0,  26,
   0,   0,  26,   0,   0,  26,   0,  26,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   6,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
  11,   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,   0,  12,   0,   0,
   0,  11,   0,  16,   0,   0,   0,  15,   0,  16,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,
   9,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   4,   0,
  25,   0,   0,  24,   0,   0,  38,   0,  38,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,  15,   0,   0,  15,   0,   0,  18,   0,  22,
   0,   0,   0,   0,   0,  12,   0,   0,  13,   0,  22,   0,  22,  22,   0,   9,
   0,   0,   0,   9,   0,   0,   9,   0,   7,   0,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,   0,   0,  13,
   0,  11,   0,   0,   7,   0,  16,   0,  11,   0,  16,  17,   0,   0,   0,   0,
  18,   0,  19,   0,  17,   0,  19,   0,  18,   0,  18,   0,  18,   0,   0,  18,
   0,  17,   0,  19,   0,   0,   0,  18,   0,  17,   0,   0,   0,   0,  19,   0,
   0,  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,  14,   0,   0,  14,
   0,  14,   0,   0,  14,   0,  14,   0,  14,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,
  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,  15,   0,   0,  15,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,
   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  24,   0,  25,   0,  24,
   0,   0,   4,   0,   5,   0,  25,   0,   0,   0,   0,   0,  25,   0,   4,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   7,
   0,   7,   7,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  24,   0,   0,   0,  15,   0,   0,  14,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   7,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   5,   0,
   4,   0,  38,   0,   0,  37,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,
  11,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,  18,   0,  18,   0,  18,   0,  18,
   0,   0,   0,   0,  18,   0,  18,   0,   0,   0,  18,   0,  18,   0,  18,   0,
   0,   0,  11,   0,  15,   0,   0,   0,   0,  12,   0,  14,   0,  13,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  12,   0,  13,   0,   0,
  13,   0,   0,   0,   0,  38,   0,  38,   0,  38,   0,   0,  37,   0,  38,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,  38,   0,   0,   0,  38,   0,   0,
   4,   0,   0,   0,   0,   4,   0,   0,   0,   0,  24,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,   0,
  15,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,
   0,  17,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,  38,   0,   9,   0,
   0,   0,   9,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,  38,   0,   0,  38,   0,  25,
   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   0,   0,  18,   0,  11,   0,  13,   0,  15,   0,
  14,   0,   0,  15,   0,   0,  15,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   5,   0,   0,   9,   8,   0,   0,   0,   0,   0,  10,   0,  15,   0,  15,   0,
  15,   0,  15,   0,   0,  15,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   3,   0,  11,   0,  11,   0,   0,
   0,  11,   0,   0,  11,  11,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,  13,   0,  13,   0,  13,
   0,  13,   0,   0,   0,  13,   0,   0,   0,   0,  13,  13,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   5,   4,   0,   0,   0,  18,   0,
   0,   0,   0,   0,   4,   0,   5,   0,  19,   0,  20,   0,  16,   0,   0,  19,
   0,  18,   0,  20,   0,  18,   0,  20,   0,  19,   0,  20,   0,  20,   0,  20,
   0,  20,   0,  20,   0,   0,  19,   0,   0,   0,  20,  20,   0,   0,   0,   0,
   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,   0,   0,  26,
   0,   0,  26,   0,   0,  26,   0,   0,   0,  26,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   7,   0,   0,   0,   0,   0,  26,   0,   0,  26,   0,   7,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  25,
   0,  25,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,  12,
   0,   0,   0,   7,   0,   0,   7,   0,  16,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,  14,   0,  14,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,
  25,   0,   0,  24,   0,   0,  21,   0,  26,   0,   0,   0,  26,   0,   0,   0,
  26,   0,   0,  26,   0,   0,  15,   0,   0,  16,   0,   0,  16,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   0,   9,   0,   0,   0,   0,   0,   0,  14,   0,  15,   0,   0,  15,   0,
  15,   0,   0,  15,   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   9,   0,   0,   9,   0,   9,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,  14,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   7,   0,  10,   0,   0,  10,   0,   0,   0,   0,  38,   0,
  38,   0,  38,   0,  38,   0,  38,   0,   0,   0,  38,   0,   0,  38,   0,   0,
  14,   0,  14,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,  12,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
  36,   0,   0,   0,   0,  24,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  16,   0,   0,  16,   0,   0,  16,   0,  16,   0,  16,   0,   0,  16,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,   0,  25,   0,  15,
   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   9,   0,  11,   0,   0,  11,
   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,  26,   0,  26,   0,  26,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   7,   0,
   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,  16,   0,  18,   0,  18,   0,  18,   0,  18,   0,
  18,   0,   0,   0,  15,   0,  18,   0,  18,   0,  18,   0,   0,   0,   0,  18,
  18,   0,   0,   0,   0,   0,  10,   0,  13,   0,  14,   0,  14,   0,  14,   0,
  14,  14,   0,   0,   4,   0,   0,   4,   0,   7,   0,   0,   0,  10,   0,   0,
  10,  10,   0,   0,   0,   0,  24,   0,   5,   0,   0,   9,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,  23,   0,   0,   0,   8,   0,   0,
   0,   8,   0,  24,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,
  37,   0,   0,  38,   0,  12,   0,  12,   0,   0,  12,   0,   0,   0,   0,  12,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  13,   0,
   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  13,   0,  13,
   0,  13,   0,  13,   0,   0,  13,   0,   0,   0,  13,  13,   0,   0,   0,   0,
   0,  25,   0,  25,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   4,   0,   7,   0,   7,   7,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   4,   0,   5,   0,  25,   0,   0,   0,  25,
   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,  38,   0,
   0,  38,   0,  38,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,  10,   0,  12,   0,  13,   0,  12,   0,  13,  12,   0,   4,
   5,   0,   4,   4,   0,   0,   0,   0,   0,  10,   0,   0,  10,   0,   0,   0,
   0,  15,   0,  17,   0,  17,   0,   0,   0,  14,   0,  17,   0,  17,   0,  17,
   0,  17,   0,   0,   0,  17,   0,   0,  17,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,  25,   0,  24,   0,   0,  14,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   8,   0,   0,   0,   0,   8,   0,   0,  15,   0,   0,  15,   0,   0,
  25,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
  14,   0,  14,   0,  13,   0,  14,   0,   0,  14,   0,  14,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   4,   0,  16,   0,   0,  16,   0,   0,   0,
  16,   0,   0,  16,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,  12,   0,  12,   0,   0,   0,   4,   4,   0,   0,   8,   0,   0,   8,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   5,   4,   0,   0,   0,
  24,   0,   0,  38,   0,   0,  23,   0,   0,   4,   0,   0,   4,   0,   0,   9,
   0,   0,   0,   0,   9,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
  37,   0,  38,   0,  37,   0,  38,   0,   0,  38,   0,  38,   0,  25,   0,   0,
  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,  12,   0,   0,   0,   4,
   0,   0,   4,   0,  18,   0,  18,   0,   0,  18,   0,  18,   0,  18,   0,  18,
   0,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,   0,   0,  18,   0,   0,
   0,  18,   0,   0,   0,  18,  18,   0,   0,   0,   0,   0,   0,   0,  11,   0,
  11,   0,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   9,   9,   0,   0,   0,   0,   0,   7,   0,   7,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,  25,   0,   0,  25,
   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,
   9,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,  11,   0,  11,
   0,   0,  11,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   4,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,  16,   0,  16,   0,
   0,  16,   0,  16,   0,   0,  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,
  16,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,
  11,   0,  11,   0,  11,   0,   0,  11,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   7,   0,   7,   7,   0,  14,   0,   0,   0,  14,
   0,   0,  25,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   7,   0,   0,
   7,   0,  38,   0,  38,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,
  11,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,  24,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   0,  38,   0,   0,  38,   0,   7,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,  20,   0,  20,   0,  20,   0,  18,
   0,  20,   0,  20,   0,  20,   0,   0,   0,  17,   0,  20,   0,  18,   0,   0,
  20,   0,  20,   0,  20,   0,   0,  20,   0,   0,   0,  20,   0,   0,  20,   0,
   4,   4,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,  16,   0,  16,   0,
   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  38,   0,   0,
  25,   0,   0,   0,  25,   0,  18,   0,  18,   0,   0,  18,   0,  18,   0,   0,
   0,  18,   0,  17,   0,   0,   0,  18,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,  14,   0,  14,   0,   0,  13,   0,  14,   0,
   0,   0,  14,   0,  14,   0,   0,  14,  14,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  14,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,  13,   0,   0,
  13,   0,  13,   0,  13,   0,  13,   0,   4,   4,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   8,   0,   0,   0,  15,   0,   0,   9,   0,   8,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,  15,   0,  16,   0,  16,   0,   0,  16,   0,   0,
   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,  11,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  22,   0,  25,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,  25,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  18,   0,
  18,   0,  18,   0,   0,  14,   0,  18,   0,  14,   0,  18,   0,  18,   0,   0,
  18,   0,  18,  18,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,  13,   0,
   9,   0,   0,  13,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,  11,   0,   0,   0,  11,
   0,  11,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,   0,   6,  10,   0,   0,   0,
   9,   0,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   3,   7,   0,   0,   0,   0,   0,  12,   0,
   0,   0,  11,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   4,   0,   4,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,  38,   0,   0,   0,  38,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   4,   4,   0,   0,
   4,   4,   0,  24,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,  24,   0,   0,
   0,  26,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   9,   0,   0,  11,   0,   0,  12,   0,   0,  21,   0,   0,   0,  23,   0,   0,
  23,   0,  23,   0,  23,   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,
   0,   0,  15,   0,   0,  15,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   8,   0,   0,   8,   0,   0,   0,   4,   4,   0,   0,   7,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  18,   0,  21,   0,  21,   0,  18,   0,  15,   0,  21,   0,  19,   0,
  18,   0,  21,   0,   0,   0,   0,  20,   0,   0,  21,   0,   0,   0,  21,   0,
  21,   0,  21,   0,  21,   0,  21,   0,   0,  21,   0,  21,  21,   0,   0,   0,
   0,   0,   0,   0,  12,   0,  15,   0,  15,   0,  15,   0,   0,  15,   0,  15,
   0,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,  14,   0,  15,
   0,  15,   0,   0,   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,  15,   0,
   0,  15,  15,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,  37,
   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,   3,   0,   0,   0,   0,   0,   0,  38,   0,  26,   0,   0,  26,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,
   0,  25,   0,   0,   0,   0,  25,   0,  12,   0,  12,   0,   0,  12,   0,   0,
  12,   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,  15,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,  19,   0,  19,   0,   0,  18,   0,   0,   0,   0,  19,   0,   0,  19,   0,
  19,   0,  19,   0,   0,  19,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,  25,   0,   0,  25,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,  13,   0,
  13,   0,  13,   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,  12,   0,   0,   0,  13,   0,  13,   0,   0,
  13,   0,   0,  13,   0,   8,   0,   0,   8,   0,   0,   0,  24,   0,   0,   0,
  24,   0,   0,   0,  38,   0,  38,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,   9,   0,  16,   0,  15,   0,   0,
  16,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   0,   0,  11,   0,   6,   0,   0,   7,   9,   0,   0,   0,   6,   0,   3,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,
   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,
   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,  25,
   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,  15,   0,   0,
  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   0,  14,   0,   0,   0,   0,  14,   0,  14,   0,
  14,   0,   0,  10,   0,   0,  24,   0,   0,   0,   0,  25,   0,  13,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,  25,   0,   9,   0,   9,
   0,   0,   0,   9,   9,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,   0,  14,   0,   0,   0,
  15,   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,  13,   0,  13,   0,   0,
  13,   0,   0,  13,   0,   0,  13,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   4,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,  14,   0,  14,
   0,  13,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  10,   0,   0,   0,   0,   0,
   5,   0,   0,   0,   4,   0,  21,   0,   0,  17,   0,  22,   0,  21,   0,  16,
   0,  18,   0,  16,   0,  21,   0,  21,   0,  22,   0,  17,   0,   0,  21,   0,
  21,   0,  21,   0,   0,  22,   0,  22,   0,  22,   0,   0,  22,   0,  22,   0,
   0,   0,   0,   0,   0,   0,  15,   0,  16,   0,   0,  15,   0,  16,   0,  16,
   0,  16,   0,   0,  16,   0,   0,  16,   0,  16,  16,   0,   0,   0,   0,  16,
   0,   0,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,
   0,  16,   0,   9,   0,   9,   0,   0,   0,   0,   9,   0,   7,   0,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  12,   0,  12,   0,  15,   0,
   0,   0,  15,   0,   0,  15,   0,  15,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   8,   0,   0,   8,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,
  11,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   9,   0,   0,   9,   0,
   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  18,   0,   0,  18,   0,  17,   0,   0,  18,   0,
  18,   0,   0,  18,   0,   0,   0,  18,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,   0,
  15,   0,   0,   0,  15,   0,  25,   0,   0,  25,   0,   0,   4,   4,   0,   0,
   0,   5,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,  13,   0,  13,   0,
   0,  12,   0,  13,   0,   0,   0,  13,   0,   0,  13,  13,   0,   0,   0,   0,
   9,   0,  10,   0,   0,   0,   0,  10,   0,   0,   4,   4,   0,   0,   0,   4,
   0,   0,   0,   0,   4,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   3,   0,   7,   0,  25,   0,   0,   0,  25,
   0,   0,   0,   0,  15,   0,  14,   0,  15,   0,  15,   0,   0,  15,   0,   0,
  15,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   4,   5,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   8,   0,
   0,   0,   0,   0,   0,  12,   0,   0,  11,   0,  11,   0,   0,   0,  10,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,  25,   0,  25,   0,   0,   4,   0,   0,   4,   0,  11,   0,  11,   0,
  11,   0,  10,  11,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   9,   0,   0,   8,   0,   9,   0,  10,   0,   0,  10,   0,
   4,   0,   4,   0,  25,   0,  24,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   9,   0,  11,   0,   0,   0,   0,  11,   0,  11,   0,   0,
  11,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,  16,   0,   0,
  16,   0,  15,   0,  16,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,  12,
   0,   0,  11,   0,   0,  12,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,
  17,   0,   0,   0,   0,   0,  21,   0,  17,   0,   0,   0,  22,   0,  16,   0,
  22,   0,  22,   0,  22,   0,   0,   0,  19,   0,  22,   0,  22,   0,  22,   0,
  22,   0,   0,   0,  22,   0,  22,   0,  20,   0,  22,   0,   0,  22,   0,  22,
   0,  22,   0,  22,   0,  22,   0,   0,   0,   0,  12,   0,   0,  12,   0,  12,
   0,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   9,
   0,   9,   0,   9,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,  24,
   0,  25,   0,   0,   0,  25,   0,   0,   0,   8,   0,  13,   0,  12,   0,  13,
   0,   0,   0,   0,  13,   0,   0,  13,   0,   0,  13,   0,  12,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   8,   0,   0,   8,   0,  14,   0,   0,  14,   0,   0,  14,   0,   0,  13,
   0,   0,  37,   0,   0,  15,   0,   0,   0,   0,   0,   0,  15,   0,  12,   0,
   9,   0,  10,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,   0,   0,
   0,  26,   0,   0,  26,   0,  26,   0,  26,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,  24,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,
   0,   2,   8,   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,  13,
   0,  13,   0,  11,   0,  13,   0,  13,   0,   0,  13,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,   0,
  12,   0,   0,   0,  12,   0,   0,  12,   0,  11,   0,  11,   0,  11,   0,   0,
  11,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  12,   0,   0,  12,   0,  13,   0,  13,   0,  13,   0,  13,   0,
  13,   0,   0,   0,   0,   0,  13,   0,   0,   7,   0,   0,   0,   7,   0,   0,
   0,  15,   0,  24,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,  11,   0,   0,  12,   0,   0,  12,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,  25,   0,   0,   0,   0,  23,   0,  26,   0,   0,  26,   0,   0,  26,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,  14,   0,
   0,  25,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,
   0,   0,  12,   0,   0,   0,   0,  11,   0,   0,   0,  12,   0,   0,   0,  12,
   0,  12,  12,   0,   0,   0,  10,   0,   0,  10,   0,   0,  10,   0,   0,  12,
   0,   0,   0,  12,   0,  12,   0,   0,  12,   0,  38,   0,   0,  38,   0,   4,
   5,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,  37,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,  10,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,  18,
   0,  18,   0,  20,   0,   0,   0,  20,   0,  21,   0,  19,   0,   0,  21,   0,
  20,   0,  21,   0,  21,   0,   0,  21,   0,   0,  20,   0,  21,   0,  21,   0,
  20,   0,   0,  19,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
  16,   0,   0,  14,   0,   0,  17,   0,   0,  17,   0,  16,   0,  17,   0,  17,
   0,  17,   0,  15,   0,   0,   3,   6,   0,   0,   0,   0,   0,   0,   0,   6,
   0,   3,   0,  17,   0,   0,  17,   0,   0,   0,   0,   0,   0,  17,   0,   0,
   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,  36,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   9,   0,   0,  10,   0,   0,   0,   9,
   8,   0,   0,   0,   0,  13,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,
   0,  25,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,  13,   0,  14,   0,  14,   0,  13,   0,  14,   0,
  11,  14,   0,   0,   0,   0,   0,  10,   0,  10,   0,   9,   0,   0,   0,   5,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,  13,   0,  13,   0,   0,   0,   0,   0,   0,   0,  15,   0,
  15,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,
   0,   0,   8,   0,   8,   0,   9,   0,   0,   9,   0,   9,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   4,   5,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   8,   0,   8,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,  12,   0,   0,  15,   0,
   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,   0,  12,   0,   0,  10,   0,
  11,   0,  11,   0,   0,   0,   0,  10,   0,   0,   0,  11,  11,   0,   0,   0,
   0,   0,   0,   0,  12,   0,  12,   0,   0,  12,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,  38,   0,   0,
  38,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,  10,   0,
   0,   0,  10,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,
   0,   0,  14,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,  25,
   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,  11,   0,   0,  11,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   7,
   0,   7,   0,   7,   0,   0,   0,   0,  17,   0,  17,   0,  18,   0,  17,   0,
  18,   0,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,
   0,   0,  18,  18,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  10,   0,
   0,  11,   0,   0,  11,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  26,
   0,   0,   0,   0,   7,   0,   0,   7,   8,   0,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   0,   9,   9,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,  37,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,  25,
   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,  10,   0,  11,
   0,   0,  11,   0,  11,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,  24,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   9,   0,   0,   0,  14,   0,  21,   0,  22,   0,
   0,  11,   0,  22,   0,  22,   0,  22,   0,  22,   0,   0,   0,   0,  22,   0,
   0,  22,   0,   0,  22,   0,   0,  22,  22,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  18,   0,   0,  23,   0,   0,  23,   0,   0,  15,   0,   0,  23,   0,
   0,  23,   0,  23,   0,  23,   0,  21,   0,  23,   0,  21,   0,  22,   0,  23,
   0,  23,   0,  23,   0,  23,   0,  23,   0,  23,   0,  23,   0,  23,   0,  23,
   0,  23,   0,  23,   0,  23,   0,   0,   0,   0,  23,  23,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,  14,   0,  14,   0,  14,   0,  14,
   0,   0,  14,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,  11,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,
   0,  16,   0,   0,   0,  16,  16,   0,   0,   0,   0,   0,  18,   0,  20,   0,
  20,   0,  20,   0,  20,   0,  20,   0,  19,   0,  20,   0,  18,   0,  20,   0,
  20,   0,  20,   0,  19,   0,  20,   0,  20,   0,  20,   0,  20,  20,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  13,   0,  13,
   0,  13,   0,   0,   0,  13,   0,   0,  13,  13,   0,   0,   0,   0,   6,   0,
   8,   8,   0,   0,   0,   0,   6,   0,   0,   8,   8,   0,   0,   0,   0,   0,
   0,   0,  25,   0,  24,   0,   0,   0,   0,   0,   0,   0,   9,   0,   8,   0,
   0,   0,   8,   0,   0,   4,   4,   0,   0,   0,   0,   0,   8,   0,   0,   0,
   8,   0,   0,   0,   0,   8,   0,  11,   0,  11,   0,  11,   0,   0,   0,  11,
  11,   0,   4,   4,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   8,   0,
   0,   0,   8,   0,   4,   4,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   9,   0,   0,   9,   0,   0,  25,   0,   0,  24,   0,   0,  14,   0,   0,   0,
   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   8,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   7,   0,   7,   8,   0,   0,   8,   0,   4,   5,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,  13,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   4,   4,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   9,   0,
   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,  12,   0,   0,   4,   4,
   0,   4,   0,   4,   0,   0,   4,   4,   0,   4,   0,   0,   4,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,
   0,  16,   0,  16,   0,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,
  11,  11,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   4,
   0,  38,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,
   0,   0,   0,  12,   0,   0,   4,   0,   0,   4,   0,   0,   0,   7,   0,   7,
   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,
  15,   0,  15,  15,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,
  14,   0,  14,   0,  14,  14,   0,   0,   4,   4,   0,   0,   0,   0,  14,   0,
  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   4,
   4,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,
   9,   0,  25,   0,   0,  25,   0,   0,   0,   0,  11,   0,   0,  13,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,
   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,  11,   0,   9,   0,   9,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,  13,   0,   0,
   0,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   4,   0,   7,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  18,   0,  18,   0,  18,   0,  17,   0,  18,   0,  18,   0,  18,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,  18,   0,   0,   0,   0,  14,   0,
  14,   0,  14,   0,  14,   0,  14,   0,   0,   0,  14,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
  12,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,  11,   0,  11,   0,  11,   0,   0,   0,  11,  11,
   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   4,
   0,  18,   0,  18,   0,  17,   0,  18,   0,  18,   0,  18,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   0,  14,   0,   0,   0,   0,  14,   0,   0,   0,  14,   0,
  14,   0,  14,   0,   0,   0,  14,   0,   0,   4,   4,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,  11,   0,
  11,   0,  11,   0,  11,  11,   0,   0,   7,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   7,   0,   0,   0,   7,   7,   0,   0,
   0,   4,   0,   0,   4,   0,   7,   0,   7,   0,   0,   7,   0,   0,   0,   4,
   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
  15,   0,  18,   0,  18,   0,   0,  11,   0,  16,   0,  18,   0,  18,   0,  18,
   0,  17,  18,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,
   0,  14,   0,  14,   0,   0,   0,   0,  14,  14,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   4,   0,   4,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,
   7,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   8,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   6,   0,   0,   3,
   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   0,   0,   0,   0,  10,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,  12,   0,   0,  12,   0,  12,   0,  12,   7,
   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,  18,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,
   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,
   0,   0,   9,   9,   0,   4,   0,   0,   0,   4,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   4,   0,   4,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   4,
   0,   0,   4,   0,   9,   0,   9,   0,   9,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,  13,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,
   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,
   9,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,  38,   0,   7,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,  11,   0,  11,   0,   0,  11,  11,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   7,   0,   0,  11,   0,
  11,   0,   0,  11,   0,   0,  11,  11,   0,   0,   0,   0,   0,  12,   0,  12,
   0,   0,  12,   0,  12,   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,
  11,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,  17,   0,  17,   0,  17,
   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,
   0,  17,  17,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,
   0,  14,   0,   0,  14,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   8,
   0,   0,   8,   0,  11,   0,  11,   0,  11,   0,   0,   0,  11,  11,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   9,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,
   0,   0,   0,   4,   0,   4,   4,   0,   0,   0,   7,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,  12,   0,  13,   0,  13,   0,  13,   0,
  13,   0,  13,  13,   0,   0,   7,   0,   0,   7,   0,   0,   7,   0,  10,   0,
  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   4,   0,   4,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   9,   0,   0,   0,   9,   0,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   0,   7,   7,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,  11,   0,  10,  11,   0,   0,   0,   0,  20,
   0,  14,   0,  13,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   9,   9,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   4,   4,   0,  38,   0,   0,   0,
   0,   0,   0,  12,   0,  12,   0,   0,  12,   0,  12,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   8,   7,   0,   0,   0,   9,   0,
   9,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,  12,   0,  13,
   0,  13,   0,  13,   0,  13,   0,  13,  13,   0,   0,   4,   4,   0,   0,   0,
   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,  12,   0,  12,
   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   4,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,  12,   0,   0,   0,  13,   0,  13,   0,   0,   0,  13,
   0,  13,  13,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,   0,
  13,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,   8,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  15,   0,  12,   0,  15,   0,  15,   0,   0,   0,  15,   0,  15,   0,  15,   0,
   0,  15,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,  11,   0,
   0,   0,   0,   0,  10,   0,  10,   0,  10,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
  15,   0,  15,   0,   0,   0,  12,   0,   0,   0,  15,   0,   0,   0,   0,  13,
   0,  13,   0,   0,   0,  13,   0,  13,   0,   0,   0,  13,   0,   0,   0,   0,
  13,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   7,   0,   0,   0,   4,   0,   0,   4,   0,   0,  16,   0,  16,   0,  16,
   0,  15,   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,  16,
  16,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   4,   0,
   0,   4,   0,  11,   0,  11,   0,  11,   0,   0,  11,  11,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,  10,   0,  11,   0,   0,   0,   0,  11,   0,  11,   0,  11,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   8,   8,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   6,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,
   0,  11,  11,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,   0,  12,
   0,  12,   0,  12,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,
  38,   0,   0,   0,  10,   0,   9,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,
  11,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,
  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,  11,
   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,  10,   0,   0,   0,
  10,   0,   0,  10,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,  12,
   0,  12,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,  12,
   0,   0,   0,  12,   0,   0,   0,   0,  12,   0,  11,   0,   0,  11,   0,  11,
   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   9,   0,   9,   9,   0,  14,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   9,   0,   9,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,
   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   9,   0,   0,   9,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,  12,  12,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,
   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   6,   0,   0,   9,   0,   9,   0,
   0,   0,   0,   9,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   8,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  18,   0,  17,   0,  18,   0,
  16,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,
   0,  18,   0,  17,  18,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,
  13,   0,  13,   0,   0,  13,  13,   0,   0,   0,   4,   4,   0,   0,   4,   0,
   0,   4,   0,  11,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  24,   0,   6,   0,   0,
   0,   4,   0,   7,   0,   7,   7,   0,   0,   0,   4,   4,   0,   0,   0,  24,
   0,   7,   0,   0,   0,   8,   0,   0,   0,   0,   0,  25,   0,   7,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   5,   3,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   7,   0,   7,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   6,   0,
   0,   0,   7,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,  17,   0,  16,   0,  17,   0,  17,   0,   0,  17,   0,   0,
  17,   0,   0,  17,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,
   0,   0,   9,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,  12,   0,
  12,   0,  12,   0,  12,   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,  25,   0,  11,   0,   0,   0,   7,   0,  14,   0,  14,  11,   0,   0,
   0,   0,   8,   0,   5,   8,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,  15,   0,  14,   0,  15,   0,
   0,  10,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,   0,   0,
   0,   0,   0,  26,   0,   0,  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
  24,   0,   7,   0,   7,   7,   0,   0,   0,   4,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
  22,   0,   0,  26,   0,   0,   0,   0,  19,   0,   0,  27,   0,   0,  27,   0,
   0,   0,   0,   6,   0,  31,   0,   0,   0,  13,   0,   0,  30,   0,  27,   0,
  31,   0,  31,   0,  31,   0,  25,   0,  30,   0,  31,   0,  20,   0,  31,   0,
  31,   0,   0,   0,  31,   0,   0,  31,   0,   0,  31,   0,  31,   0,  31,   0,
  31,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,  13,   0,  13,   0,
  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   2,   0,  22,   0,  22,   0,  21,   0,  22,   0,  22,   0,  22,   0,
  22,   0,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,
   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,  22,   0,   0,
  22,   0,  22,   0,  22,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,  16,   0,   0,   0,   0,  16,   0,   0,  16,   0,   0,  16,
  16,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,  11,   0,   0,
  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  14,   0,
   0,  14,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   9,   9,   0,   7,   0,   0,   0,   0,   7,   0,   4,   4,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,
   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
  37,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,
   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,
   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,   0,
   0,   0,   0,   0,  25,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,  12,
  12,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   7,
   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,  24,   0,  11,   0,  11,   0,  11,   0,  11,   0,  16,   0,  16,
   0,   0,  16,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,
  14,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   4,   4,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,  25,   0,   0,
   0,  16,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   4,   0,   4,   0,  14,   0,  14,
   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,  10,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   7,   0,
   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,
   9,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   0,   0,   8,   0,   0,   0,  11,   0,   0,  16,   0,   0,   0,   0,
  10,   0,  15,   0,  15,   0,  16,   0,   0,   0,  16,   0,  20,   0,  19,   0,
  20,   0,  20,   0,  20,   0,  20,   0,  19,   0,  20,   0,  19,   0,  20,   0,
  20,   0,  20,   0,  20,   0,  20,   0,   0,  20,   0,  20,   0,  20,   0,   9,
   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   4,   0,   0,  10,   0,   0,  10,   0,  14,   0,  14,   0,  14,   0,  14,
   0,   0,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   0,   0,   4,   4,
   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   4,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,   4,   4,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,
  11,   0,  11,   0,  11,   0,   0,  11,   0,   9,   0,   9,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,   0,  25,   0,   0,
   0,   4,   0,   0,   4,   0,  11,   0,  11,   0,   0,  11,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,
  12,   0,   0,   4,   4,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   4,   0,   7,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,  11,   0,   0,  10,   0,   0,  11,  11,   0,   4,   4,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  16,
   0,  17,   0,  16,   0,  14,   0,  17,   0,   0,  17,   0,  17,   0,   0,   0,
  17,   0,  17,  17,   0,   0,   0,   0,   5,   0,   9,   0,  11,   0,  11,   0,
   0,   0,  11,  11,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   6,
   0,   0,   0,   8,   8,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,
   6,   0,  23,   0,   0,   0,   0,   0,  25,   0,   0,   7,   0,   7,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   9,   9,   0,   0,   0,
   4,   0,   9,   0,   9,   0,   0,   9,   0,   0,  12,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   9,   0,   0,   9,   0,   0,  16,   0,  16,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,
   0,  11,   0,   0,   0,   0,  24,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,  24,   0,  25,   0,  25,   0,  27,
   0,  27,   0,  27,   0,  27,   0,  27,   0,  27,   0,  27,   0,  27,   0,  27,
   0,   0,   0,   0,   4,   4,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   8,   0,   0,
   8,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,  11,   0,  11,   0,
   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   6,   3,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   4,   0,   4,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  12,   0,  15,   0,   0,   0,
   0,   0,   0,   6,   0,   3,   0,  10,   0,   0,  11,   0,  11,   0,   0,  11,
   0,   0,   7,   0,   0,   0,   8,   7,   0,  38,   0,   0,  37,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,  11,
   0,  11,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,
   0,   0,  10,   0,   4,   4,   0,   0,  13,   0,   0,  13,   0,   9,   0,   0,
   9,   0,   0,   0,   9,   9,   0,   0,   0,   5,   0,   4,   0,  24,   0,   6,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,  24,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   7,   0,  12,
   0,  14,   0,  14,   0,  15,   0,  15,   0,  15,   0,  15,  15,   0,   0,   0,
   0,   5,   0,   0,   4,   0,  14,   0,  14,   0,  14,   0,   0,   0,  12,   0,
  14,   0,   0,  14,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,
   0,  25,   0,   0,  25,   0,  24,   0,   8,   0,   7,   0,   7,   0,   0,   0,
   0,  10,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,
   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   4,   5,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,  24,   0,   0,   0,   0,   0,   0,   0,   2,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,
  14,   0,   0,   0,   0,   0,   7,   0,  10,   0,  10,  10,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   5,   0,   9,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   9,   0,   9,   0,   7,   0,   0,   7,   0,   0,
   0,   0,   7,   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  25,   0,  25,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,  10,   0,  12,   0,  13,   0,   0,   0,  13,   0,  12,
   0,   0,  11,   0,  11,   0,   0,  10,   0,   0,  11,  11,   0,   0,   0,   0,
   0,  12,   0,   0,  16,   0,   5,   0,   0,   3,   0,   0,   8,   0,   0,   0,
   8,   0,   0,   0,   0,   5,   4,   0,   0,   0,   5,   0,   4,   0,   0,   7,
   0,   0,   7,   0,   7,   0,   4,   0,   5,   0,  10,   0,  10,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,
   0,   0,  12,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  20,   0,   0,   0,   9,   0,  20,   0,  17,   0,  13,   0,
  20,   0,  20,   0,  20,   0,  20,   0,   0,   0,  20,   0,   0,  20,   0,   0,
  20,   0,  11,   0,  11,   0,   0,  11,   0,   0,  11,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   9,   0,   0,   0,  10,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   3,   6,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  14,   0,  15,   0,  15,   0,
   0,  15,   0,   0,  15,   0,   0,  15,   0,   0,  15,  15,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,
   6,   0,   8,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,  10,   0,   0,   0,   7,  10,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   0,   9,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   4,   0,   7,   0,   7,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   0,   0,  11,   0,   0,   0,   0,   0,  11,   0,   9,   0,   9,
   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,
   9,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   0,  24,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
  13,   0,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,  25,   0,  25,   0,
   0,   0,  25,   0,   0,  38,   0,   0,  38,   0,  25,   0,   0,  25,   0,  38,
   0,   0,  36,   0,   0,   0,  34,   0,  37,   0,   0,  38,   0,   5,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   4,
   5,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,   3,
   0,  13,   0,   0,  14,  14,   0,   0,   0,   4,   4,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   5,   0,   5,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   4,   0,  11,   0,   0,  10,   0,   0,  13,   0,   0,   9,   0,   0,   0,   0,
  14,   0,  28,   0,   0,  28,   0,   0,  28,  22,   0,  13,   0,   8,   0,  13,
   0,   0,  13,   0,  13,  13,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,  26,   0,   0,   0,   0,   0,   0,  26,   0,
  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,  35,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,  12,   0,   8,   0,   0,  12,   0,   9,   0,
  25,   0,   0,  23,   0,  24,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,  24,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,  10,   0,  11,
   0,   0,  11,   0,   0,  11,   0,  10,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,  17,   0,  16,   0,
   0,   0,  10,   0,  17,   0,  21,   0,  19,   0,  22,   0,  22,   0,   0,   0,
  18,   0,  22,   0,  22,   0,  22,   0,   0,   0,  21,   0,  22,   0,  22,  22,
   0,   0,   0,  20,   0,   0,  20,   0,   0,  20,   0,  20,   0,  20,   0,   0,
  20,   0,  20,   0,   0,  20,   0,   0,   0,  20,   0,  20,   0,  20,   0,   0,
  20,   0,   0,  25,   0,   0,   0,  25,   0,   7,   0,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,  25,   0,
  25,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   5,   0,   0,   0,   0,  11,   0,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   8,  10,   0,  25,   0,   0,  25,   0,   0,
   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,  19,
   0,   0,  19,   0,   0,  19,   0,   0,   7,   0,   0,   0,   0,   7,   0,   4,
   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  24,   0,   7,   0,   0,
   0,   0,   7,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   4,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  14,   0,   0,   0,  14,
   0,   0,  14,   0,  14,   0,   0,   0,  14,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,  11,   0,  11,   0,   0,
  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,
   0,   0,   0,  25,   0,  25,   0,  24,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,  26,
   0,  26,   0,  26,   0,  26,   0,  26,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  12,   0,  14,   0,  14,   0,
  14,   0,   0,   0,   0,  38,   0,  38,   0,  38,   0,   0,  38,   0,  38,   0,
   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,
   0,   3,   0,   0,   0,   0,  13,   0,  13,   0,  12,   0,   0,  13,   0,  13,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,  13,   0,
   0,  12,   0,  13,   0,   0,  13,   0,   0,  13,   0,   0,   0,  25,   0,  25,
   0,   0,  25,   0,  25,   0,  24,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,  38,   0,   0,   0,  35,   0,
   9,   0,   8,   0,   0,   0,   9,   0,   0,   0,  25,   0,   0,   0,  24,   0,
   0,  25,   0,   0,  25,   0,   0,   0,  26,   0,   0,  26,   0,  26,   0,   0,
   0,  26,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,  14,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,
   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,  11,   0,   0,   0,  10,   0,   0,  11,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   9,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,  17,   0,   0,   8,   0,
  13,   0,  21,   0,  19,   0,  21,   0,  21,   0,  22,   0,  22,   0,  22,   0,
  22,   0,  22,   0,   0,   0,   0,  22,  21,   0,   0,   0,   0,   0,  37,   0,
  38,   0,   0,   0,  36,   0,   0,  38,   0,  38,   0,  38,   0,   0,  37,   0,
   0,  38,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,  20,   0,  20,   0,  20,   0,   0,  20,
   0,  20,   0,  20,   0,   0,  20,   0,   0,  20,   0,   0,  20,   0,   0,   0,
   0,  20,   0,   0,  20,   0,  20,   0,   0,   0,  20,   0,   0,   0,  11,   0,
   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,
   9,   0,   0,   0,   0,   9,   0,   0,   0,  11,   0,   0,  12,   0,  12,   0,
  12,   0,   0,  12,   0,   0,   0,   0,   0,   0,  24,   0,  38,   0,   0,   0,
  35,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,  14,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   3,   0,   0,   0,   0,  12,   0,  26,   0,
  26,   0,  26,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,  14,   0,   0,   0,  13,   0,  11,   0,  13,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,  37,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,  11,   0,  18,   0,   0,  18,   0,  25,
   0,  25,   0,  25,   0,  25,   0,   4,   4,   0,   0,   0,   0,   0,   0,   8,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,  24,   0,  25,   0,  25,   0,  25,   0,   0,   0,  25,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  23,   0,   0,  38,   0,   0,   0,  37,   0,   0,  38,   0,  38,
   0,  38,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,
  38,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,  10,   0,  10,  10,   0,   0,   0,   0,   0,  19,   0,
   0,   0,   8,   0,   0,  11,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   3,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,   0,  25,   0,  38,   0,  25,   0,  25,   0,   5,   0,   0,   4,   0,
   4,   0,   4,   4,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   4,
   0,   7,   0,  19,   0,  17,   0,   0,  17,   0,  20,   0,  19,   0,  15,   0,
  20,   0,  20,   0,   0,  20,   0,   0,   0,   0,   0,   9,   0,  17,   0,   0,
  15,   0,  16,   0,  17,   0,  17,   0,   0,  18,   0,   0,  18,  12,   0,   0,
   0,   0,  25,   0,   0,   0,  25,   0,   0,  17,   0,  18,   0,  19,   0,  18,
   0,  19,   0,  18,   0,  15,   0,  19,   0,  19,   0,   0,   0,  18,   0,  19,
   0,  19,   0,  19,   0,  19,  19,   0,   0,   4,   4,   0,   0,   9,   0,   0,
   8,   0,   6,   8,   0,   4,   4,   0,   0,   0,   0,   0,   0,   8,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,  16,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   2,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,  25,
   0,   0,  25,   0,  17,   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,
   0,   0,  17,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,
   0,   4,   0,  38,   0,   0,   0,   0,   0,   5,   4,   0,   0,  11,   0,   0,
  10,   0,   5,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   9,   0,   0,
   0,   9,   0,  25,   0,   0,   0,   0,  25,   0,   0,  25,   0,  26,   0,   0,
  26,   0,   0,  26,   0,  18,   0,   0,  17,   0,  18,   0,  18,   0,  18,   0,
  18,   0,  18,   0,   4,   4,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,  14,   0,   0,  14,   0,   4,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   8,   0,   8,   6,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   9,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   2,   0,   7,   0,   0,   0,   8,   0,
   7,   0,   0,   0,   5,   4,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,  24,   0,   8,   0,  25,   0,   0,  25,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   3,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
  25,   0,   0,   0,   0,   0,   0,  24,   0,   3,   0,   7,   0,   9,   0,   0,
   0,   0,  10,   0,  18,  14,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,
   0,   6,   0,  10,   0,   0,   0,   9,   0,   0,   0,  10,   8,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,  17,   0,
  14,   0,  18,   0,   0,  18,   0,  18,   0,  18,   0,  18,   0,  13,   0,   0,
  18,   0,   0,  18,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,
  11,   0,   0,   0,   0,  11,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,
   0,   0,  17,   0,  17,   0,   0,  17,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,  25,   0,   0,  13,
   0,   0,   0,   0,  13,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   9,
   0,   0,   7,   0,   8,   0,   8,   0,   0,   0,   0,   0,   7,   0,  12,   0,
  12,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,  25,   0,  25,
   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
  11,   0,  15,   0,  15,   0,   0,  15,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  33,   0,   0,  38,   0,   0,   0,  36,   0,  19,
   0,  12,   0,  19,   0,   0,   0,  11,   0,  19,   0,  18,   0,   6,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   0,
  38,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,  15,   0,  16,   0,  16,   0,   0,  16,   0,  16,   0,   0,  16,
   0,  16,   0,   0,  16,   0,  16,   0,   0,   0,   0,  17,   0,   8,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,  15,   0,  16,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,   0,  15,
   0,  16,   0,  16,   0,  15,   0,   0,   4,   5,   0,   0,   0,   0,   0,   5,
   0,   0,   4,   0,   0,   8,   0,   8,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,  13,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,  18,   0,  18,   0,  20,
   0,  18,   0,  13,   0,   0,  19,   0,  20,   0,  18,   0,  12,   0,   0,   0,
  20,   0,  20,   0,   0,   0,  20,   0,  20,   0,  19,   0,   9,   0,   9,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,  15,   0,   0,
  15,   0,   0,  14,   0,  14,   0,  14,   0,  15,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,
  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,
   0,   0,  25,   0,   0,  10,   0,  10,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,  12,   0,  12,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,
  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,  11,   0,
  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,  25,   0,   3,   6,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   2,   0,   9,
   0,   0,   9,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,  25,   0,   0,   0,   0,   0,  14,   0,   0,  15,   0,  25,   0,  25,
   0,   0,   0,  25,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,  25,   0,   0,   0,   0,  23,   0,   0,   1,   9,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   0,   9,   0,   0,  13,   0,   0,  16,   0,  18,   0,  22,   0,  22,
   0,  22,   0,   0,  24,   0,   0,  21,   0,   0,   0,   0,  12,   0,   0,  17,
   0,  21,   0,  21,   0,  20,   0,  21,   0,  21,   0,  21,   0,  21,   0,   0,
  21,   0,  21,   0,  21,   0,   0,   0,  20,   0,   0,  21,   0,   0,   0,  21,
   0,  21,   0,   0,   0,   0,   0,   0,  21,   0,  20,   0,  20,   0,  20,   0,
  20,   0,  20,   0,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,
   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,   0,  20,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,  11,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,  13,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,
   0,   0,   0,   4,   0,   4,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,  13,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
  24,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,  11,   0,  11,
  11,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   7,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   4,   0,   0,   0,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  14,   0,  14,   0,
   0,  13,   0,  13,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   8,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   0,  36,   0,  24,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   6,   0,   6,   0,   9,
   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,
  17,   0,  17,   0,  17,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,  15,   0,  25,   0,   0,   0,  25,   0,  10,   0,   0,   0,  10,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,  12,   0,  25,   0,  25,   0,
   0,   0,   0,   0,  25,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  21,   0,   0,   0,   0,  15,   0,  20,
   0,  22,   0,  22,   0,  18,   0,  20,   0,   0,  20,   0,  21,   0,  18,   0,
  22,   0,  21,   0,  22,   0,  22,   0,  19,   0,  22,   0,   0,  21,   0,  22,
   0,  22,   0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,  14,   0,   0,  14,   0,  14,
   0,   0,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,
   0,   0,  16,   0,  16,   0,   0,   0,  16,   0,  19,   0,  18,   0,  19,   0,
   0,   0,  19,   0,   0,  19,   0,   0,   0,  19,   0,   0,  19,   0,   0,   0,
  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,  10,   0,  10,  10,   0,   0,   0,
   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,  26,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,  38,
   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   3,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,   0,
  13,   0,   0,   0,  13,   0,   0,   0,  13,  13,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  16,   0,   0,  17,   0,   0,   0,  17,   0,  17,   0,   0,   0,   0,  16,   0,
   0,  37,   0,   0,   0,   0,  15,   0,   0,  15,   0,  15,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   8,   0,   0,   0,   0,   0,
   0,  13,   0,   0,  13,   0,   0,   0,  12,   0,   0,   0,  12,   0,  13,   0,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,   0,   0,   9,   0,   9,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   4,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  20,   0,  20,   0,
  19,   0,  20,   0,  17,   0,  20,   0,  20,   0,  20,   0,  20,   0,   0,   0,
  20,   0,  20,   0,  20,   0,   0,  20,   0,  20,   0,   0,   0,   0,   7,   0,
  12,   0,   8,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,  25,   0,  24,
   0,   0,   0,   3,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,  10,   0,  10,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,   0,  16,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   8,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,  25,   0,  25,   0,  25,   0,  25,   0,   0,
  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,  34,   0,   0,   0,   0,   9,   0,   0,   9,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,   7,   0,   0,   7,   7,
   0,   0,   0,  24,   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,  17,   0,
  18,   0,  17,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,   0,  18,   0,
  18,   0,  18,   0,   0,  18,   0,   0,   0,   0,   0,   0,  18,   0,   9,   0,
   7,   0,  10,  10,   0,   0,   0,   0,   0,   0,   8,   0,   6,   8,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   5,   4,   0,   0,
   0,   0,  23,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,
   0,   0,   0,   0,  12,   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   6,
   0,   0,   0,   8,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   4,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,  24,   0,  16,   0,  18,   0,  17,   0,  19,   0,
  19,   0,   0,   0,   0,  19,   0,  19,   0,   0,   0,  19,   0,  19,   0,  19,
   0,   0,   0,  19,   0,   0,   0,  19,   0,  19,   0,   0,  19,   0,  25,   0,
  25,   0,   0,  25,   0,   7,   0,   7,   0,   9,   0,   9,   0,   9,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,  10,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   3,   6,   0,   4,   4,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,   0,  17,   0,   0,   0,
  17,   0,   0,   0,  17,   0,   0,  17,   0,  17,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   4,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
  10,   0,   0,   8,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   8,   0,
  25,   0,  25,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,  15,   0,   0,   0,  15,   0,   0,
  10,   0,  10,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,  11,   0,  11,
   0,   0,  11,   0,   0,  15,   0,  18,   0,   0,  18,   0,   0,  18,   0,   0,
   0,  18,   0,  19,   0,  18,   0,  18,   0,  17,   0,  20,   0,  20,   0,  20,
   0,  20,   0,  20,   0,  18,   0,  20,   0,  20,   0,   0,   0,  20,   0,  20,
   0,   0,  20,   0,   0,   0,  20,   0,  13,   0,  13,   0,  13,   0,  13,   0,
  13,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  10,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,
   0,   0,  24,   0,  24,   0,   0,   0,   0,  11,   0,   0,  12,   0,  12,   0,
  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   8,   0,   8,   6,
   0,   0,   0,  25,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,  24,   0,   0,   6,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   8,   0,   7,   0,  10,   0,  10,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   4,   0,   0,   0,   4,   0,  13,   0,  14,   0,
  14,   0,  14,   0,  14,   0,   0,  11,   0,   5,   0,   0,   4,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,
  25,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   5,   0,  25,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,
   0,   0,   9,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,   0,   0,  11,   0,
   0,   0,   0,  24,   0,  12,   0,  17,   0,  17,   0,  18,   0,  18,   0,  18,
   0,  17,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  18,   0,  18,   0,  15,   0,  18,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,   0,  13,   0,  25,   0,
   0,  25,   0,   0,  25,   0,  25,   0,   0,   4,   0,   4,   0,   0,   4,   0,
   4,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,  12,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,   6,
   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,
   4,   0,   0,   0,  25,   0,   0,   0,  25,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,
  12,   0,   0,  12,   0,   0,  12,   0,   0,   0,   7,   0,   7,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,
  14,   0,   0,  13,   0,  25,   0,  25,   0,  24,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   7,   0,
   9,   0,   0,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   6,   0,  25,
   0,  25,   0,  25,   0,   0,  25,   0,   0,  15,   0,  15,   0,   0,   0,   0,
  12,   0,  12,   0,  12,   0,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,  25,   0,  25,   0,   0,
   0,   0,  25,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,   0,   0,  11,   0,   0,
   0,  17,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  18,
   0,  14,   0,   0,  17,   0,  16,   0,  18,   0,  18,   0,  18,   0,  18,   0,
  18,   0,   0,  18,  18,   0,   0,   0,   0,   0,  13,   0,  13,   0,  14,   0,
  13,   0,   0,  14,   0,  12,   0,  38,   0,   0,  35,   0,   8,   0,   0,   0,
   0,   6,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  25,   0,  24,
   0,  25,   0,  25,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   7,   0,   0,   8,   0,   9,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   8,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,  12,   0,  12,   0,   0,  12,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   8,   0,  10,   0,   8,  10,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,
  13,   0,   0,   0,  13,   0,  11,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  25,   0,  26,   0,
   0,   0,  26,   0,   8,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,  11,   0,   0,   0,  10,   0,  11,   0,   0,  10,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   3,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  17,   0,
  17,   0,  17,   0,  16,   0,  17,   0,   0,  17,   0,   0,   0,  17,   0,   0,
  17,   0,   0,  17,  17,   0,   0,   0,   0,  17,   0,  16,   0,  17,   0,  17,
   0,  17,   0,  16,   0,  11,   0,  11,   0,  11,   0,   0,  11,   0,   0,   5,
   4,   0,   0,   4,   5,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,  25,   0,   0,   0,  25,   0,   7,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   9,   0,  10,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,  24,   0,   0,   0,
   0,   8,   0,   0,   0,   8,   0,   0,  38,   0,  14,   0,  14,   0,   0,  14,
   0,   0,   0,   0,   4,   4,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  29,   0,
   0,   6,   0,   0,   8,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   7,
   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,  15,   0,   9,   0,  10,   0,
  15,   0,  15,   0,  15,  15,   0,   0,   0,   0,   7,   0,  19,   0,  19,   0,
   0,  18,   0,   0,   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,   0,   0,
  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,   0,
   0,  19,  19,   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,  38,   0,  38,   0,  38,   0,  38,   0,
   0,   0,  38,   0,  38,   0,  38,   0,   0,  38,   0,  38,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,  38,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  25,   0,
  25,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  25,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,  19,   0,  18,   0,
  17,   0,  13,   0,  18,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,  19,
   0,  19,   0,  19,   0,  19,  19,   0,   4,   4,   0,   0,   0,   0,  11,   0,
  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   0,   7,   0,   0,   4,   5,   0,   0,   0,   0,  15,   0,   0,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   8,   0,   0,  13,   0,  13,   0,  12,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,  24,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
  17,   0,  18,   0,  19,   0,   0,   0,  19,   0,   0,   0,   0,  17,   0,  19,
   0,  19,   0,  19,   0,  19,   0,  17,   0,  19,   0,   0,   0,   0,  19,   0,
  19,   0,  19,  19,   0,   0,   0,   0,   0,   0,   8,   0,   0,  10,   0,   0,
  10,   0,   0,   3,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,  10,   0,  24,
   0,   0,  25,   0,   0,  25,   0,  38,   0,  38,   0,   0,  38,   0,   0,   5,
   0,   4,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   4,   0,   0,   4,
   0,   4,   4,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,  38,
   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  25,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,  16,
   0,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,  17,   0,  17,
   0,  17,   0,  17,   0,   0,  17,  17,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,  10,  11,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,
   0,   0,  38,   0,   0,   0,  38,   0,   0,   0,  25,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  10,   0,   0,   0,
   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,  15,   0,  15,   0,
   0,  15,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   4,   0,   7,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  20,   0,   0,  15,   0,  18,   0,  19,   0,  23,   0,  23,   0,  23,
   0,  23,   0,  23,   0,   0,  23,   0,  23,   0,  23,   0,   0,   0,  23,   0,
  23,   0,  23,   0,  23,   0,  23,   0,  23,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,  17,   0,   0,  17,   0,  16,   0,  16,   0,  17,   0,  17,   0,
  17,   0,  17,   0,  17,   0,   0,   0,  17,  17,   0,   0,   0,   0,   0,  10,
   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,  12,   0,  25,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,  13,   0,  12,   0,  13,   0,  13,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   9,   0,   0,   0,   9,   0,  13,   0,   0,  13,   0,  13,   0,
   0,  24,   0,  26,   0,   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,   0,
  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,  25,
   0,  25,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   4,   0,   7,   0,   0,   0,   0,   7,   7,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
  37,   0,  38,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,  25,   0,
   0,   0,  25,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,  12,   0,  13,   0,  13,  13,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,  13,   0,  13,   0,  13,   0,   0,   0,   0,   0,   6,   0,  10,   0,   0,
   0,  12,   0,   0,   0,   9,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,
   0,  24,   0,   0,  16,   0,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,
   0,   0,   0,  38,   0,  38,   0,   0,  38,   0,   0,  38,   0,   0,   0,  38,
   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   4,
   4,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,  38,   0,   0,   0,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,  17,
   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,  13,   0,  38,   0,  38,
   0,  34,   0,   0,  38,   0,  38,   0,  38,   0,   0,   0,  38,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   0,   0,   7,   0,   9,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,  26,   0,  26,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,
  13,   0,  16,   0,  17,   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,
  17,  17,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   7,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,
   0,  13,   0,  13,   0,   0,  13,   0,   0,  13,   0,  13,   0,   0,  13,  13,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,
   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  27,   0,   0,  27,   0,   0,   0,   0,  27,   0,  29,   0,  29,
   0,  29,   0,   0,  29,   0,  29,   0,  29,   0,   0,  29,   0,   0,  29,   0,
  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,
   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,
   0,  29,   0,   0,   0,  29,   0,   0,   0,  29,   0,   0,  29,   0,   0,  29,
   0,  29,   0,  29,   0,  29,   0,  29,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,  17,   0,  18,   0,  17,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,
   0,  18,  18,   0,   0,   0,   0,  19,   0,   0,  19,   0,  19,   0,  19,   0,
  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   4,   5,
   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,  12,   0,   0,  12,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  12,   0,   0,  13,   0,   0,
   0,  13,   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  11,   0,  11,   0,   0,
   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,   0,  11,  11,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,  11,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
  13,   0,  13,   0,  13,   0,  13,   0,  13,  13,   0,   0,   0,  12,   0,  11,
   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   8,   6,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
  11,   0,  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,  10,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,
   0,  16,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,  11,  11,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,  16,   0,   0,   0,  14,   0,  14,   0,  14,
   0,  14,   0,  14,   0,  13,   0,   0,   0,   5,   0,   0,   0,   4,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,
   0,  12,   0,  13,   0,  13,   0,   0,  13,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,
   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,
  19,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   9,   0,   9,   0,
   9,   9,   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,   0,   0,   7,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,   0,   0,  11,  11,   0,   4,   4,   0,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,   0,   0,  16,   0,   0,   0,   0,  13,   0,  13,   0,  13,
   0,  13,   0,   0,  13,   0,   0,   0,  13,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,
  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,
  13,   0,  13,   0,   0,   0,  13,   0,   0,   0,  11,   0,   0,   0,  11,   0,
  11,   0,   0,   0,   0,  11,   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
   0,   0,   0,   0,  11,   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   0,
   9,   0,   0,   0,   9,   0,   9,   0,   9,   0,   0,   9,   0,   0,   8,   0,
   0,   8,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   4,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   4,   0,   4,   0,  22,   0,
   0,  24,   0,  23,   0,  22,   0,  24,   0,  24,   0,   0,  24,   0,   0,  24,
   0,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,
   0,   0,  24,   0,   0,   0,  24,   0,  24,   0,  24,   0,   0,   0,  24,   0,
  24,   0,   0,  24,   0,   0,  24,   0,   0,   0,  24,   0,   0,  24,   0,  24,
   0,  24,   0,  24,   0,  24,   0,  24,   0,  24,   0,  24,   0,  24,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,  19,   0,  19,   0,  19,   0,  19,
   0,   0,   0,  19,   0,  19,   0,  18,   0,  19,   0,  19,   0,  19,   0,  19,
   0,  19,   0,  19,   0,  19,   0,   0,   0,  19,   0,  19,   0,  19,   0,   0,
   0,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,
   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,   0,  17,   0,   0,   0,
   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,
  13,   0,  13,   0,   0,  13,   0,  13,   0,   0,  13,   0,   0,  13,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,
  16,   0,  16,   0,  16,   0,   0,   0,   0,  16,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,  11,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,  11,   0,  11,   0,   0,   0,  11,   0,  11,  11,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,
   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,  11,   0,  11,   0,   0,  11,   0,   0,   9,   0,   0,   0,   9,   0,   0,
   8,   0,   4,   5,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   4,   0,   0,   4,   0,   0,   4,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,  17,
   0,  17,   0,  17,   0,   0,   0,   0,  17,   0,   0,  17,  17,   0,   0,   0,
   0,   0,  14,   0,  14,   0,  14,   0,   0,   0,  14,   0,   0,  14,   0,   0,
   0,  14,   0,   0,  14,  14,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,
  12,   0,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,  12,   0,   0,  12,
   0,  12,   0,  12,   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,   0,  13,   0,   0,
  13,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,
  17,   0,  17,   0,  17,   0,   0,   0,   0,  17,   0,  17,   0,   0,  17,   0,
   0,   0,  17,  17,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,   0,   7,   0,   7,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,
  16,   0,   0,   0,   0,   0,  13,   0,   0,   0,  13,   0,  13,   0,   0,   0,
  12,   0,   0,  13,   0,  13,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,
  10,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,
   0,  12,   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   9,   0,
   0,   9,   0,   0,   9,   0,   9,   0,   0,   7,   0,   0,   7,   0,   0,   7,
   0,   0,   4,   0,   0,   0,   4,   0,   0,   9,   0,   0,   9,   0,   0,   9,
   0,   9,   0,   0,   4,   0,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,  11,   0,   9,   0,
   9,   0,   0,   9,   0,   0,   0,   7,   0,   0,   7,   0,   7,   0,   0,   0,
   7,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,   0,   0,   7,
   0,   7,   0,   0,   7,   0,   8,   0,   0,   8,   0,   7,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   5,   0,
  10,   0,   7,   0,   9,   0,   0,  12,   0,   9,   0,   0,   0,   9,   0,   0,
   9,   0,   7,   0,   7,   0,   7,   0,   0,  24,   0,  15,   0,   0,  15,   0,
  25,   0,   0,  25,   0,   0,   0,   0,  18,   0,  18,   0,  17,   0,  17,   0,
  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,   0,  18,   0,  18,   0,
   0,  18,   0,   0,  18,   0,  10,   0,  10,   0,  10,   0,  25,   0,  25,   0,
   0,  25,   0,   0,  25,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   0,   7,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   0,   7,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,
   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   7,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,  17,   0,  18,   0,
   0,  18,   0,  20,   0,  20,   0,  20,   0,   0,  20,   0,   0,   0,  20,   0,
   0,  20,   0,   0,   0,  20,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   9,   0,   9,   0,   9,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   5,   0,   4,   0,   0,  25,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,  23,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  14,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  14,   0,
  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   9,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   9,   0,  25,   0,   0,  21,   0,  26,   0,
  20,   0,  26,   0,  25,   0,   0,  26,   0,  26,   0,  26,   0,   0,  26,   0,
  25,   0,  26,   0,  26,   0,   0,  26,   0,   0,  26,   0,  26,   0,   0,  26,
   0,   0,  26,   0,  26,   0,   0,  26,   0,   0,  26,   0,   0,  26,   0,  26,
   0,   0,  26,   0,   0,  26,   0,  26,   0,  26,   0,   0,   0,   0,  26,   0,
  26,   0,   0,  26,   0,   0,  26,   0,   0,  26,   0,   0,   0,   0,  26,   0,
   0,   0,  26,   0,   0,  26,   0,   0,   0,   0,  26,   0,   0,  26,   0,   0,
   0,  26,   0,   0,   0,  26,   0,   0,  26,   0,   0,  26,   0,  26,   0,  26,
  26,   0,   0,   0,   0,   0,   0,  15,   0,  14,   0,  14,   0,   0,  14,   0,
   0,  15,   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,   0,  15,  15,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,  11,   0,
  11,   0,  11,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,  11,   0,
  10,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,
   0,   0,   9,   0,   9,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  25,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   7,   7,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,  17,   0,  12,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,
  17,   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,  14,
   0,  14,   0,   9,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   9,   0,   9,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,
   0,  17,   0,  17,   0,   0,  17,   0,   0,   0,  17,   0,  17,   0,  17,  17,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,  16,   0,  16,   0,  16,   0,  16,   0,
  16,   0,  16,   0,   0,   0,  16,   0,  18,   0,   0,   9,   2,   0,   0,   0,
   9,   2,   0,   0,   0,   0,   0,   0,  19,   0,   9,   0,   0,   7,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   7,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  12,   0,  13,
   0,  13,   0,  13,   0,   0,  13,  13,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
  11,   0,  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   5,
   3,   0,   6,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,   0,   0,   0,  15,   0,   0,   0,  15,   0,   0,
   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,   0,  15,   0,   0,   0,   9,
   0,   0,   9,   0,   0,   0,   9,   0,  12,   0,  12,   0,  12,   0,  12,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   5,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,  12,   0,  12,   0,   0,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,
  11,   0,   0,  11,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,
   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   0,   9,   0,   9,   0,   0,   9,   0,   0,   9,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   7,   0,   0,   7,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  29,   0,  29,   0,  27,   0,  29,   0,  29,   0,  29,   0,  29,
   0,  29,   0,  29,   0,  29,   0,  29,   0,  29,   0,   0,  29,   0,   0,  29,
   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,   0,  29,   0,   0,  29,
   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,
   0,  29,   0,  29,   0,   0,   0,  29,   0,   0,  29,   0,  29,   0,  29,   0,
  29,   0,   0,  29,   0,   0,  29,   0,   0,   0,  29,   0,  29,   0,  29,   0,
  29,   0,   0,   0,   0,   0,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,
   0,  18,   0,  19,   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,  19,   0,
  19,   0,   0,   0,  19,   0,  19,   0,  19,  19,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,
   9,   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,  10,   0,  11,   0,   0,  11,  11,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   9,   9,   0,
   9,   0,   0,   9,   0,   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  10,
   0,   0,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,  10,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   9,   0,   9,   0,   9,   0,  13,   0,  13,   0,
  11,   0,  13,   0,  13,   0,  13,  13,   0,   0,   0,  11,   0,  11,   0,   0,
  11,   0,   0,  11,  11,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   0,  11,   0,   0,  11,   0,   0,  11,   0,
   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
  17,   0,  17,   0,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,
  17,   0,   0,  17,   0,  17,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,  13,   0,   0,  13,   0,   0,   0,   0,  13,   0,   0,
   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,  15,   0,
  16,   0,   0,   0,  16,   0,   0,   0,  16,   0,  16,  16,   0,   0,   0,   0,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,   0,  16,   0,  15,   0,  16,  16,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
  13,   0,  13,   0,  13,   0,  13,   0,   0,   0,  13,   0,  13,  13,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,
   7,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,  11,
   0,  11,   0,  11,   0,  11,   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,
  11,   0,  11,   0,   0,   0,  11,   0,   0,   9,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,  10,   0,   0,   0,   9,
   0,   9,   0,   0,   9,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,
   0,   7,   0,   0,   7,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   4,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  23,   0,   0,  23,   0,  27,   0,  27,   0,  29,   0,  29,   0,  29,   0,
   0,  29,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  28,
   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,
   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,   0,  29,   0,   0,  29,
   0,  29,   0,  29,   0,  29,   0,  29,   0,  29,   0,   0,   0,   0,   0,  12,
   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,
  17,   0,  17,   0,  17,  17,   0,   0,   0,   0,   0,   0,   0,  38,   0,  38,
   0,  38,   0,  38,   0,  32,   0,  38,   0,  38,   0,  38,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,
   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,   0,   0,  13,   0,
  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,  12,   0,
   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   8,   0,  13,   0,  13,   0,  13,  13,   0,   0,   0,   0,   0,  16,   0,
  15,   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,  16,   0,
  16,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,  14,   0,  14,   0,  14,   0,   9,   0,  11,   0,   7,
   0,   0,   0,   0,  12,   0,   5,   4,   0,   0,   0,   0,   0,   0,   7,   2,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   7,   0,   0,
   0,   7,   0,   7,   0,   0,   4,   0,   0,   4,   0,  11,   0,  12,   0,  12,
   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   5,   4,   0,   0,  10,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   9,   0,
   9,   0,   9,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,  18,   0,
  19,   0,  18,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,
   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,   0,  19,  19,
   0,   0,   0,   0,   0,  13,   0,  12,   0,  13,   0,   0,   0,  13,   0,  13,
   0,   0,   0,  13,  13,   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,  12,   0,   0,  12,   0,   0,   0,  12,   0,   0,  12,  12,   0,   0,
   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,  10,   0,   0,   0,  11,   0,   0,   0,
  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,  11,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,  19,   0,   0,   0,  19,   0,
  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,
  19,   0,  19,   0,   0,   0,  19,   0,   0,  19,   0,   0,  19,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,
  13,   0,  13,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,
   0,  14,   0,  14,   0,  14,   0,   0,   0,   0,  14,   0,   0,  14,  14,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,  12,   0,
  12,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,
   0,   0,   9,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   8,   0,
   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,   0,  24,   0,
  25,   0,  25,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,
  25,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,  25,   0,   0,   0,   0,
  25,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,   0,
  25,   0,   0,  25,   0,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,  25,
   0,   0,  25,   0,   0,  25,   0,   0,   0,  25,   0,  25,   0,  25,   0,  25,
   0,  25,   0,  25,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
  17,   0,  18,   0,  18,   0,  18,   0,   0,   0,  18,   0,  18,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,  18,   0,   0,   0,   0,   0,  11,
   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   7,   0,   7,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   7,   0,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,
   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,
   0,  16,   0,  16,   0,  16,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,
   0,  16,  16,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,
  13,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,  13,   0,  14,   0,  14,   0,  14,   0,
  14,   0,  14,  14,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,  12,
   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  10,   0,  11,  11,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   5,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   4,   0,
   0,   0,   0,   0,  11,   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,  12,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   8,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,  11,   0,  11,
   0,   0,  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   7,   0,   0,   4,   0,   0,   4,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,
  13,   0,   0,   0,  13,   0,  13,   0,   0,  13,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,
   0,   7,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,   9,   0,   0,
   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   7,   0,   0,   7,   0,   7,   0,   7,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
  28,   0,  28,   0,  28,   0,  27,   0,  28,   0,   0,  28,   0,   0,  28,   0,
   0,  28,   0,   0,  28,   0,   0,  28,   0,  28,   0,   0,   0,   0,  28,   0,
   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,   0,  28,   0,
   0,   0,  28,   0,   0,   0,  28,   0,   0,   0,   0,  28,   0,   0,   0,  28,
   0,  28,   0,  28,   0,  28,   0,  28,   0,  12,   0,  12,   0,  12,   0,   0,
   0,  12,   0,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,  27,   0,  27,   0,  27,   0,  27,   0,
  27,   0,   0,   0,  27,   0,  27,   0,  27,   0,  27,   0,  27,   0,   0,  27,
   0,  27,   0,  27,   0,  27,   0,   0,  27,   0,   0,  27,   0,   7,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,  38,   0,   4,   4,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   4,
   0,   4,   0,   4,   0,   4,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,
  16,   0,  16,  16,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,
   0,   9,   9,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   9,   0,   0,
   0,   0,   0,   4,   0,   4,   0,   0,   0,   4,   0,   0,   0,   4,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,
   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,
   0,   0,   0,  17,   0,   0,   0,   0,  17,   0,  17,  17,   0,   0,   0,   4,
   0,   0,   0,   4,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,  11,
   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,
   0,  17,   0,   0,   0,  17,   0,   0,  17,   0,   0,   0,  17,   0,   0,  17,
  17,   0,   0,   0,  10,   0,  10,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,
   0,  17,   0,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,   0,  17,   0,
   0,  17,   0,   9,   0,   0,   9,   0,   0,   0,   9,   0,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,   0,  11,   0,  25,   0,  25,   0,   0,  25,   0,   0,   0,   7,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,
  28,   0,  27,   0,  28,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,
   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,   0,  28,   0,   0,   0,
  28,   0,   0,  28,   0,   0,   0,  28,   0,   0,   0,  28,   0,   0,   0,  28,
   0,  28,   0,  28,   0,  28,   0,   0,  28,   0,  19,   0,  19,   0,  19,   0,
  19,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,
   0,  19,   0,  19,   0,   0,   0,   0,  19,   0,   0,  19,   0,   0,   0,   0,
   0,  13,   0,  13,   0,  13,   0,   0,  13,   0,  13,   0,  13,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   0,   4,   0,   0,   4,
   4,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   4,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,
   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,   0,
  12,   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,
  17,   0,  17,   0,  17,  17,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   9,   0,   0,   0,   0,   9,   9,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,  11,   0,  11,   0,   0,   0,  11,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   7,   0,   4,   0,   0,   0,   4,
   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  14,   0,  15,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,  15,   0,   0,
  15,   0,   0,   0,   0,   0,  12,   0,  11,   0,   0,  12,   0,  12,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,  16,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,
   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,
  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   0,
   0,   0,   0,  25,   0,  25,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,  12,   0,  12,
   0,   0,  12,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  27,   0,  27,   0,  28,   0,   0,
   0,  28,   0,  28,   0,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,
  28,   0,  28,   0,   0,  28,   0,  28,   0,   0,   0,   0,  28,   0,   0,  28,
   0,   0,   0,   0,  28,   0,   0,  28,   0,   0,   0,  28,   0,   0,   0,  28,
   0,   0,  28,   0,   0,   0,  28,   0,   0,   0,  28,   0,   0,  28,   0,  28,
   0,  28,   0,  28,   0,  28,   0,  28,   0,  28,   0,   0,   0,   0,   0,  19,
   0,  19,   0,  19,   0,   0,   0,  18,   0,  19,   0,  19,   0,  19,   0,   0,
   0,   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,
   0,  19,   0,  19,   0,   0,  19,   0,  19,   0,   0,   0,  12,   0,  12,   0,
   0,   0,  12,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   8,   0,   0,   0,   0,   6,   0,   8,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,   0,  16,   0,   0,  16,
  16,   0,   0,   0,  16,   0,   0,  17,   0,  17,   0,   0,   0,  17,   0,  17,
   0,  17,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,  13,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,  10,   0,   0,  10,   0,  14,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,  15,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,
   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,   0,  16,   0,   0,   0,  12,
   0,  12,   0,  12,   0,   0,   0,  11,   0,   0,   0,  12,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   4,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,
   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,   0,  16,   0,   0,   0,   0,
   0,  14,   0,  14,   0,  14,   0,   0,   0,   0,  14,   0,   0,  14,   0,   0,
   0,  14,   0,   0,   0,  14,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,  12,   0,   0,  12,   0,   0,  12,   0,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   0,
   9,   0,   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   0,   4,   4,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   4,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  27,   0,  28,   0,  28,   0,
  28,   0,   0,  27,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,
   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,
   0,  28,   0,   0,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,
   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,
  28,   0,  28,   0,  28,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,
   0,  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,   0,   0,  11,   0,  11,
   0,  10,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,
   0,  17,   0,  17,   0,  17,   0,   0,   0,  17,  17,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   4,   0,   4,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,  15,   0,  15,   0,   0,  15,
   0,  15,   0,  15,   0,   0,  15,   0,   0,   0,   0,  15,   0,   7,   0,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,
   0,  14,   0,  14,   0,   0,  14,   0,  14,   0,   7,   0,   0,   7,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,   4,   0,   4,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,  12,   0,   0,
  13,   0,   0,  13,   0,   0,  13,   0,   0,   0,  13,   0,   0,  13,   0,  13,
   0,   0,   0,   4,   0,   0,   4,   0,   0,   8,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,  24,   0,   7,   0,   0,
   0,   7,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   9,   0,   9,   0,
   0,   9,   0,   9,   0,   9,   0,   0,   9,   0,   7,   0,   0,   7,   0,   7,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   7,   0,   7,   0,   0,
   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,   0,  29,
   0,  23,   0,  29,   0,  29,   0,  29,   0,  29,   0,   0,  29,   0,   0,  29,
   0,   0,  29,   0,   0,  29,   0,  29,   0,   0,   0,   0,  29,   0,   0,  29,
   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,   0,  29,   0,   0,  29,
   0,   0,  29,   0,  29,   0,   0,   0,   0,   0,  29,   0,   0,  29,   0,  29,
   0,   0,   0,  29,   0,  29,   0,  29,   0,  29,   0,   0,  29,   0,  10,   0,
  11,   0,  11,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,  12,   0,  12,   0,  12,   0,   0,  12,  12,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,
   0,   0,  12,   0,  12,   0,   0,  12,   0,   0,  12,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,  18,   0,   0,   0,  18,   0,
  18,   0,   0,  18,   0,   0,   0,  18,   0,  18,   0,  18,  18,   0,   0,   0,
   0,   9,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   4,   0,   0,   0,   0,  14,   0,   0,   0,  14,   0,   4,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,
   7,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,  13,   0,   0,   0,  13,   0,
   0,   0,  13,  13,   0,   0,   0,   0,   0,   9,   0,  13,   0,  13,   0,  13,
   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  10,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   6,   0,
   0,   0,   0,   0,   0,   0,   0,   3,   6,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,  26,   0,  26,   0,  26,   0,  26,   0,  26,   0,
  26,   0,   0,   0,  26,   0,   7,   0,   0,   7,   7,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,
   0,   0,   0,  13,   0,   0,  13,   0,  13,  13,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   4,   4,   0,   0,   4,   0,   0,   4,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,  11,   0,
   4,   4,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   7,   0,  14,   0,   0,   0,  14,   0,   0,
   0,   0,   0,  14,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,   0,  11,   0,   0,
  11,   0,  11,   0,  11,   0,   0,   9,   0,   9,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  23,   0,   0,  24,   0,   0,  24,   0,  23,   0,  24,   0,
  24,   0,  24,   0,   0,  24,   0,  24,   0,  22,   0,   0,  24,   0,  24,   0,
   0,  24,   0,   0,   0,  24,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,
  24,   0,  24,   0,   0,  24,   0,   0,  24,   0,  24,   0,  24,   0,   0,  24,
   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,   0,  24,   0,
   0,  24,   0,  24,   0,  24,   0,   0,   0,  24,   0,   0,   7,   0,   0,   7,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  13,   0,  13,   0,
  13,   0,   0,  13,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   4,   0,   8,   0,   9,   0,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,
  16,   0,   0,  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,  16,  16,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   9,   0,   9,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   7,   0,   8,   0,   0,   0,   8,   0,  11,   0,   0,
  11,   0,   0,  11,   0,  11,   0,   0,   0,   0,  11,   0,  11,   0,  11,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   0,  11,   0,   0,   0,  11,   0,   0,  11,   0,   0,   4,   4,
   0,   0,   0,   0,   0,  13,   0,  13,   0,  13,   0,  13,   0,  13,   0,   0,
  13,   0,   7,   0,   4,   4,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,   0,  11,   0,  11,   0,   0,   0,  11,   0,   0,   0,  11,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   9,   0,   9,   0,   0,   0,   9,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   7,   0,   0,   7,   0,   7,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  28,   0,  27,   0,  27,   0,  28,   0,  28,   0,  28,   0,  28,   0,
   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,
  28,   0,   0,  28,   0,   0,   0,   0,  28,   0,   0,  28,   0,   0,   0,   0,
  28,   0,   0,  28,   0,   0,   0,   0,  28,   0,   0,  28,   0,   0,   0,  28,
   0,   0,  28,   0,   0,   0,  28,   0,   0,   0,   0,   0,  28,   0,   0,  28,
   0,   0,   0,  28,   0,  28,   0,  28,   0,   9,   0,   9,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,  17,   0,  17,   0,
   0,  17,   0,  17,   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,  17,   0,
  17,   0,  17,  17,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,
   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   7,   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   7,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
  18,   0,  18,   0,  18,   0,  18,   0,   0,  18,   0,  18,   0,   0,   0,  18,
   0,   0,  16,   0,   3,   5,   0,   0,   0,  12,   0,   0,  10,   0,   4,   4,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,
   0,  16,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,  12,   0,   0,  12,
   0,   0,  11,   0,   7,   0,   0,   7,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,  15,   0,  14,   0,  15,   0,  15,   0,   0,  15,   0,  15,   0,   0,  15,
  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   4,   0,
   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,  11,  11,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,  10,   0,   0,   0,  11,   0,   0,   0,  11,   0,   0,   9,   0,   9,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   0,   7,   0,   0,   0,   4,   0,   4,   0,   7,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   7,   0,   0,   0,   0,   0,  10,   0,  19,   0,   7,   0,
  20,   0,  20,   0,  20,   0,   9,   0,   0,   0,   9,   0,   9,   0,   0,   0,
   0,   0,   0,  19,   0,   6,   0,  15,   0,   0,  16,   0,  16,   0,  16,   0,
   0,   0,   0,   0,  14,   0,   0,   0,   2,   0,   0,  12,  12,   0,   0,   0,
  13,   0,  13,   0,   0,  13,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   8,   0,   2,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   5,   0,  14,   0,  14,
   0,  14,   0,  14,   0,   0,   0,  14,   0,   0,  14,   0,   0,  14,   0,  26,
   0,   0,   0,  26,   0,   0,   9,   0,   9,   0,   0,   0,   0,   0,   9,   0,
   7,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,  16,   0,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   5,   0,  18,   0,  18,   0,   0,  18,   0,   0,  18,   0,  18,   0,   0,   0,
  18,  18,   0,   0,   0,   0,   0,   0,  10,   0,  13,   0,   0,  10,   0,   6,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   9,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   9,   0,  10,   8,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,   0,
   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   4,   4,   0,   0,   0,   0,  21,   0,
  22,   0,  21,   0,  22,   0,  21,   0,  21,   0,   0,  22,   0,   0,  22,   0,
   0,   0,   0,  22,   0,   0,  22,   0,   0,  22,   0,   0,  22,   0,   0,  22,
   0,   0,  22,   0,   0,  22,   0,   0,  22,   0,   0,  22,   0,   0,  22,   0,
   0,   0,   0,  22,   0,   0,   0,  22,   0,   0,   0,  22,   0,   0,   0,  22,
   0,  22,   0,   0,   0,   0,   0,   0,  22,   0,  19,   0,  19,   0,  19,   0,
  19,   0,  19,   0,  19,   0,  19,   0,  19,   0,  18,   0,  19,   0,  19,   0,
   0,   0,  19,   0,  19,   0,   0,  19,   0,  19,  19,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,  13,   0,  13,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   4,   4,   0,   0,   4,   0,   4,   0,   0,   7,   0,   0,   0,   7,
   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,
   0,  16,   0,  16,   0,   0,  16,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,  12,
   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,
   9,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,  16,   0,  16,   0,   0,   0,  16,   0,
  16,   0,  16,   0,  16,   0,   0,  16,   0,  16,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,
   9,   0,   7,   0,   0,   7,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   0,   4,   0,   4,   0,   7,   0,   0,   0,   0,   0,
   0,  27,   0,  29,   0,  29,   0,  27,   0,   0,  29,   0,  28,   0,   0,  29,
   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,
  29,   0,   0,  29,   0,   0,  29,   0,   0,  29,   0,   0,   0,   0,  29,   0,
   0,  29,   0,   0,  29,   0,   0,   0,  29,   0,   0,   0,  29,   0,   0,  29,
   0,   0,   0,  29,   0,   0,  29,   0,   0,   0,  29,   0,  29,   0,  29,   0,
  29,   0,  29,   0,   7,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   6,   8,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   8,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   5,
   3,   0,   3,   5,   0,   4,   4,   0,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   0,   8,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,
   0,  13,   0,  13,   0,  13,   0,   0,  13,  13,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   0,   4,   0,   0,   4,   0,   0,   4,   0,   0,   0,
   4,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,   0,  11,   0,  11,   0,  11,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   6,   8,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   5,   3,   0,   5,   3,   0,   0,   0,   3,   5,   0,   0,   0,
   0,   0,   0,  13,   0,   0,  13,   0,   0,  13,   0,  13,   0,  13,   0,   0,
  13,   0,   0,   0,   0,   7,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,  11,   0,
  11,   0,   0,  11,   0,   0,  16,   0,   7,   0,   0,   7,   7,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   4,   0,   0,   4,   0,   0,   7,   0,   7,   0,
   7,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,  21,   0,
  24,   0,  22,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,
  24,   0,   0,  24,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,
   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,
  24,   0,  24,   0,   0,   0,  24,   0,   0,  24,   0,  24,   0,   0,  24,   0,
   0,  24,   0,  24,   0,   0,   0,   0,  24,   0,   0,   0,  24,   0,  24,   0,
   0,  24,   0,   0,   0,  24,   0,  24,   0,   0,  24,   0,  11,   0,  14,   0,
  14,   0,  14,   0,   0,  14,   0,   0,  14,   0,   0,  14,  14,   0,   0,   0,
   0,   0,   0,   0,   6,   0,   9,   0,   7,   0,   7,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,  12,   0,  12,  12,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,
   0,   0,  16,   0,   0,   0,  16,   0,   0,  16,   0,   0,  16,   0,   0,   0,
  16,   0,   0,  16,   0,   0,   0,  16,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,  13,   0,   0,  13,   0,   0,  13,   0,   0,   0,  13,   0,  13,
   0,   0,  13,   0,   0,   0,   0,   0,  11,   0,  11,   0,   0,  11,   0,   0,
   0,   0,  11,   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   9,   0,   4,
   4,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   9,   0,   0,
   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   7,   0,   7,   0,   0,   0,
   0,   0,   0,   7,   0,   7,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,  15,   0,  18,   0,  18,   0,
   0,   0,   0,  19,   0,  19,   0,   0,   0,  19,   0,   0,  19,   0,   0,  19,
   0,   0,  19,   0,  19,   0,  19,   0,  19,   0,  17,   0,  13,   0,  13,   0,
  12,   0,  13,   0,  13,   0,   0,   0,   0,   0,  13,   0,   0,   0,   4,   5,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,  15,   0,   0,   0,
  15,   0,   0,  15,   0,   0,   5,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  16,   0,  16,   0,   0,  15,   0,  14,   0,  15,   0,
  16,   0,  16,   0,  16,   0,   0,  16,   0,   0,   0,   0,  11,   0,  11,   0,
  11,   0,   0,  11,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   6,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,  17,   0,  17,
   0,   0,  17,   0,  17,   0,  17,   0,  17,   0,   0,   0,   0,   0,   4,   5,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   4,   4,   0,   0,
   0,   0,   4,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,  14,   0,
  14,   0,   0,   0,  13,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   9,   0,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  28,   0,  27,   0,  28,   0,  28,   0,  28,   0,  28,
   0,  28,   0,   0,   0,   0,  28,   0,   0,   0,  28,   0,  28,   0,   0,   0,
   0,  28,   0,   0,  28,   0,   0,   0,  28,   0,  28,   0,  28,   0,  28,   0,
  28,   0,  28,   0,  28,   0,  28,   0,  28,   0,   0,   7,   0,   0,   0,   0,
   0,   7,   0,  16,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,   0,   0,
  16,   0,  16,   0,   0,   0,  16,   0,  16,   0,   0,  16,  16,   0,   0,   0,
   0,   0,   0,   0,  16,   0,   0,  16,   0,   0,  16,   0,  16,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,   0,  15,   0,   0,   0,  15,   0,  12,   0,
  12,   0,  12,   0,   0,  12,   0,   0,   0,   0,   4,   0,   0,   4,   0,   7,
   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  14,
   0,  14,   0,  14,   0,  14,   0,  14,   0,   0,  14,   0,   0,   0,   0,   0,
  12,   0,   0,  11,   0,  12,   0,  12,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   7,   0,  14,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,
   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   9,   0,   9,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,
   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,  12,   0,  12,   0,   0,  12,   0,  12,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,  16,   0,   0,  16,   0,
  16,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  27,   0,  27,   0,  28,   0,  28,   0,  28,   0,
   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,   0,   0,  28,   0,
   0,  28,   0,   0,  28,   0,   0,   0,  28,   0,   0,  28,   0,   0,  28,   0,
   0,   0,   0,  28,   0,   0,   0,   0,  28,   0,  28,   0,  28,   0,  28,   0,
  28,   0,  28,   0,  27,   0,   0,   5,   4,   0,   0,   0,  16,   0,  16,   0,
  16,   0,  16,   0,  16,   0,  15,   0,  16,   0,  16,   0,   0,  16,   0,   0,
   0,   0,   0,   0,  16,   0,  12,   0,   0,  12,   0,  12,   0,   0,  12,   0,
   0,  12,  12,   0,  10,   0,   0,   0,   0,  10,   0,   0,   0,   0,   9,   0,
   9,   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,   4,
   4,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,  13,   0,
  13,   0,  13,   0,  13,   0,  13,  13,   0,   0,   0,   0,   0,  11,   0,   0,
   0,  12,   0,   0,  12,   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   5,
   4,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,
  12,   0,  12,   0,  12,   0,  12,   0,  12,   0,  12,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
  12,   0,  12,   0,  12,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   9,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,  13,   0,  13,   0,  12,   0,
  13,   0,  13,   0,  13,  13,   0,   0,   0,   0,   0,   0,   0,  12,   0,  12,
   0,  12,   0,  12,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   9,   0,
   0,  10,   0,  10,   0,   0,   0,  10,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,  14,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,  15,   0,  15,   0,  15,   0,  15,   0,   0,
   0,  15,   0,  15,   0,   0,  15,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   3,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   9,   0,   9,   0,   9,   9,
   0,   0,   7,   0,   0,   0,   9,   0,   0,   9,   0,   0,   0,   9,   9,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   9,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,  23,   0,  24,   0,   0,
  24,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,   0,  24,   0,
   0,   0,   0,  24,   0,  24,   0,  24,   0,   0,  24,   0,  24,   0,  24,   0,
   0,  24,   0,  24,   0,   0,   0,  24,   0,   0,   0,  24,   0,   0,  24,   0,
   0,   0,  24,   0,   0,   0,  24,   0,   0,  24,   0,  24,   0,  24,   0,  24,
   0,  24,   0,   0,  24,   0,  24,   0,  24,   0,  24,   0,  24,   0,  24,   0,
   0,   0,  24,   0,   0,   4,   0,   0,   0,   0,   4,   0,   9,   0,   9,   0,
   0,   9,   9,   0,   0,   0,  11,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,  12,   0,  12,   0,   0,  12,   0,
  12,  12,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  11,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,  11,  11,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,  12,   0,  12,   0,   0,   0,  12,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,
   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,
  20,   0,  20,   0,   0,  20,   0,  20,   0,   0,  20,   0,   0,  20,   0,   0,
  20,   0,   0,  20,   0,   0,  20,   0,   0,   0,  20,   0,   0,   0,  20,   0,
   0,  20,   0,   0,  20,   0,  20,   0,  20,   0,  20,   0,   0,   0,   0,  14,
   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,   0,  14,  14,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   4,   4,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   0,   4,   4,   0,   0,   0,   0,  11,   0,  11,   0,  11,
   0,   0,  11,  11,   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,
   0,   4,   4,   0,   0,   0,   0,   0,   0,  10,   0,  10,   0,  10,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,  11,   0,  11,   0,   0,   0,  11,  11,   0,   0,   0,   0,   7,   0,
   7,   7,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   4,   0,   4,   4,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,  11,   0,   0,   0,  11,   0,   0,   0,   0,  11,   0,   0,   7,   0,
   0,   0,   7,   0,   7,   0,   7,   0,   0,   0,   7,   0,   0,   4,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  21,   0,  21,   0,   0,  21,   0,  21,   0,  21,
   0,   0,  21,   0,  21,   0,  21,   0,  21,   0,   0,  21,   0,   0,  21,   0,
  21,   0,   0,  21,   0,   0,   0,  21,   0,   0,  21,   0,   0,   0,  21,   0,
   0,  21,   0,   0,  21,   0,  21,   0,  21,   0,  21,   0,  21,   0,   4,   0,
   4,   0,   0,  16,   0,   0,  16,   0,   0,  16,   0,   0,  16,   0,   0,   0,
  16,   0,   0,  16,   0,   0,   0,  16,   0,  16,   0,  16,   0,  16,   0,   0,
   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   7,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   7,   0,   7,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   4,
   0,   0,   0,   4,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  27,
   0,  25,   0,  25,   0,  26,   0,   0,  27,   0,   0,  27,   0,   0,   0,   0,
  27,   0,   0,   0,  27,   0,  27,   0,   0,   0,  27,   0,  27,   0,  27,   0,
  27,   0,   0,   0,   0,  11,   0,  11,   0,  11,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   7,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   5,   0,   0,   0,   0,   0,   8,   0,   0,   0,   9,   0,
   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,   0,  12,   0,  12,
   0,  12,   0,  12,   0,   0,   0,  12,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   9,   0,   9,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   7,   0,   0,  15,   0,   0,  15,   0,   0,   0,  15,   0,  15,
   0,  15,   0,  15,   0,  15,   0,  15,   0,   9,   0,   9,   0,   9,   9,   0,
   4,   0,   0,   4,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   9,   0,   0,   9,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   7,   0,   7,   7,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,  13,   0,   0,   9,   0,
   0,  25,   0,   0,   0,  25,   0,   0,   0,  17,   0,   0,  11,   0,   0,   9,
   0,   0,   7,   0,   0,  12,   0,   0,   9,   0,   0,  12,   0,   0,  15,   0,
   0,   0,  38,   0,   0,   0,  14,   0,   0,   0,   7,   0,   0,   7,   0,   0,
   0,  26,   0,   0,  14,   0,   0,  13,   0,   0,   0,  12,   0,   0,  38,   0,
   0,   7,   0,   0,  25,   0,   0,  26,   0,   0,   0,  25,   0,   0,   0,  25,
   0,   0,  16,   0,   0,  14,   0,   0,  38,   0,   0,  25,   0,   0,  24,   0,
   0,  25,   0,   0,   9,   0,   0,  11,   0,   0,  25,   0,   0,  38,   0,   0,
   7,   0,   0,   0,  25,   0,   0,  15,   0,   0,  25,   0,   0,  10,   0,   0,
   8,   0,   0,   7,   0,   7,   0,   0,  16,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  17,   0,   0,  13,   0,   0,  23,   0,   0,  13,   0,
   0,  10,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  29,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,  18,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   4,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,  24,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   6,   0,   9,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  22,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   3,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  25,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  21,   0,   0,   0,   0,   0,   9,   0,   0,  10,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  22,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,   0,  24,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,   0,   0,   0,  23,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   4,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  36,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   3,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,
   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,  25,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,  15,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,  25,   0,   0,   0,   4,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   4,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,  25,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   4,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,  27,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  29,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   8,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  23,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   6,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,  25,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  17,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  19,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  27,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,   0,   0,  13,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
  24,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  25,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,
   0,   6,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,  25,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   1,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  15,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,  25,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   4,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   8,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   5,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   4,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   5,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,  26,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,  14,   0,   0,   0,   4,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   4,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  37,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   6,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   1,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   4,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   9,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,  19,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   6,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  34,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,  25,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  12,   0,   0,   0,   0,  19,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,  25,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  15,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,
  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   9,   0,   8,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,  25,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   4,   0,  19,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,  34,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  23,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,  25,   0,   0,  23,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,  13,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  38,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   4,   0,   0,  25,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   4,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  36,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   4,  25,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,  25,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   3,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,  25,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  33,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,  13,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   4,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,  11,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   4,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  10,   0,
   0,   0,   0,   0,   0,   4,   0,   0,  36,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   4,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  35,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,  25,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,  25,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  19,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   7,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,  16,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  35,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,
   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,  14,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  34,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,
   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,  15,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   3,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
  20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   4,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   6,   0,  25,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   5,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  14,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   5,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   5,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,   0,   1,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   8,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,  19,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,  26,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   4,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  27,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   4,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  10,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,  38,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,  25,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,
   0,   0,  27,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   4,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   9,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  24,
   0,   4,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   3,   0,   0,   0,  19,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,
   0,  25,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   2,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  36,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   5,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  12,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   4,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  10,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  27,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,  17,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,
   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,  18,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   2,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   3,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,  13,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,  14,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   4,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   3,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,  25,   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   4,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
   0,   0,   0,   0,   0,   0,   4,   0,   0,  23,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  36,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,
   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,  17,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   7,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
  15,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,  17,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   3,   0,  10,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   6,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  26,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   7,   0,   0,
  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,  25,   0,   0,   0,   0,  38,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,  10,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   4,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,  16,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   0,   0,  26,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,  26,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,  38,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  11,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   5,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  21,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   2,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   5,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   3,   0,
   5,   0,   0,   0,   5,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   4,   0,   0,
   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   5,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   6,   0,   0,   5,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   8,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  34,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   4,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,  26,   0,  38,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,  22,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  26,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,
   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,  26,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  21,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   6,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
   0,  38,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  21,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  19,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,  25,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  36,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,  10,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   9,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,  36,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   1,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   0,   8,   0,   0,   4,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  12,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   7,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  37,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   6,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,  26,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   8,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  13,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  21,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,  38,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,
   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,  25,   0,   0,   5,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   4,   0,   0,  12,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,
   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,  25,   0,  14,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   4,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  26,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,  13,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,  18,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   7,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   5,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   0,   0,   4,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   4,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   7,   0,   0,   0,
   7,   0,   0,   0,   7,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   4,   0,   4,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   7,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,  21,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,  25,   0,   8,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,  25,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   6,   0,   0,
   0,   0,   0,   0,   0,   0,   2,   0,   5,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   8,   0,   0,   7,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   4,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,  12,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   9,   0,   0,  11,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,  23,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
  14,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,  14,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  25,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,
   0,   7,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   4,   0,   0,   4,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   8,   0,   0,   7,   0,   0,   0,   0,   0,   4,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,
   0,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,
   0,   0,   0,   0,   0,   0,   0,   4,   0,  10,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  22,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  34,   0,
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\inferno\src\usa\tpunc.h ===
// tpunc.h
// Angshuman Guha
// aguha
// Jan 9, 2001

#ifndef __INC_TPUNC_H
#define __INC_TPUNC_H

#include "fsa.h"

#ifdef __cplusplus
extern "C" {
#endif

extern const STATE_DESCRIPTION aStateDescTPUNC[];

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\inferno\src\usa\snet.h ===
// snet.h
// computed from <space.net,space.ist> (79880000) by net2c at Mon Mar 04 15:10:13 2002
#ifndef __INC_SNET_H
#define __INC_SNET_H

// Time Stamp
#define NET_TIME_STAMP_S	0x3c83fed5

// Type definitions

typedef short INP_HID_WEIGHT_S;
typedef short HID_BIAS_S;
typedef char HID_OUT_WEIGHT_S;
typedef short OUT_BIAS_S;
typedef unsigned short INP_BIAS_S;


// Hidden Layer
#define gcHiddenNode_S 23
#define gcHiddenWeightHeight_S 46
#define gcHiddenWeightWidth_S 3
extern int giHiddenScale_S;
extern ROMMABLE  INP_HID_WEIGHT_S grgHiddenWeight_S[gcHiddenNode_S*gcHiddenWeightHeight_S*gcHiddenWeightWidth_S];
extern ROMMABLE  HID_BIAS_S grgHiddenBias_S[gcHiddenNode_S];


// Output Layer
#define gcOutputNode_S 1
#define gcOutputWeightHeight_S 23
#define gcOutputWeightWidth_S 3
extern int giOutputScale_S;
extern ROMMABLE  HID_OUT_WEIGHT_S grgOutputWeight_S[gcOutputNode_S*gcOutputWeightHeight_S*gcOutputWeightWidth_S];
extern ROMMABLE  OUT_BIAS_S grgOutputBias_S[gcOutputNode_S];


// Input Layer
extern ROMMABLE INP_BIAS_S grgInputBias_S[gcHiddenWeightHeight_S];

#endif // __INC_SNET_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\inferno\src\usa\viterbixlate.c ===
/****************************************************
 *
 * viterbiXlate.c
 *
 * Provides translation services between activataions and supported characters
 * for the viterbi search
 *
 * This is language specific, because activations construct virtual activation USA does not therefore
 * cannot simply use net outputs activations as surrogate
 * for character activations
 *
 ********************************************************/  
#include <common.h>
#include <nfeature.h>
#include <engine.h>
#include <infernop.h>
#include "charmap.h"
#include <charcost.h>
#include <outDict.h>
#include <viterbi.h>


void BuildActiveMap(const REAL *pActivation, int cSegments, int cOutput, BYTE rgbActiveChar[C_CHAR_ACTIVATIONS])
{
	int				row, col, cActive, cIteration = 5;
	const REAL		*pAct;
	REAL			MinActivation = (REAL)
#ifdef FIXEDPOINT
	655;
#else
	0.01;
#endif

	do 
	{
		cActive = 0;
		memset(rgbActiveChar, 0, C_CHAR_ACTIVATIONS*sizeof(*rgbActiveChar));
		pAct = pActivation;

		for (col=cSegments; col; col--)
		{
			pAct++;

			for (row = 1 ; row < cOutput ; row++, pAct++)
			{
				if (*pAct > MinActivation)
				{
					rgbActiveChar[row] = 1;
					++cActive;
				}
			}
		}

		// Keep doubling the min activation if there are too many active characters
		MinActivation *= 2;

	} while ((cActive > OD_MAX_ACTIVE_CHAR) && --cIteration);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\inferno\src\usa\shrtlist.c ===
// shrtlist.c  (factoids which are short lists of words)
// Angshuman Guha
// aguha
// Feb 7, 2001

#include "common.h"
#include "shrtlist.h"

/********************* DAYOFWEEK ********************************/

// text generated by re2fsa at Wed Feb 07 10:23:50 2001

// the input-file of rules:
// Sun
// Mon
// Tue
// Wed
// Thu
// Fri
// Sat
// Sunday
// Monday
// Tuesday
// Wednesday
// Thursday
// Friday
// Saturday

// 24 states

static const unsigned char gaSDAYOFWEEK[] = 
	/* gaStringDAYOFWEEK+0 */	"F\000"
	/* gaStringDAYOFWEEK+2 */	"M\000"
	/* gaStringDAYOFWEEK+4 */	"S\000"
	/* gaStringDAYOFWEEK+6 */	"T\000"
	/* gaStringDAYOFWEEK+8 */	"W\000"
	/* gaStringDAYOFWEEK+10 */	"r\000"
	/* gaStringDAYOFWEEK+12 */	"o\000"
	/* gaStringDAYOFWEEK+14 */	"a\000"
	/* gaStringDAYOFWEEK+16 */	"u\000"
	/* gaStringDAYOFWEEK+18 */	"h\000"
	/* gaStringDAYOFWEEK+20 */	"e\000"
	/* gaStringDAYOFWEEK+22 */	"d\000"
	/* gaStringDAYOFWEEK+24 */	"s\000"
	/* gaStringDAYOFWEEK+26 */	"y\000"
	/* gaStringDAYOFWEEK+28 */	"t\000"
	/* gaStringDAYOFWEEK+30 */	"n\000"
	/* gaStringDAYOFWEEK+32 */	"i\000"
;

static const STATE_TRANSITION gaTDAYOFWEEK[] = {
	{gaSDAYOFWEEK+0,	1}, // +0: state 0 transitions
	{gaSDAYOFWEEK+2,	3},
	{gaSDAYOFWEEK+4,	4},
	{gaSDAYOFWEEK+6,	5},
	{gaSDAYOFWEEK+8,	6},
	{gaSDAYOFWEEK+10,	17}, // +5: state 1 transitions
	{gaSDAYOFWEEK+10,	10}, // +6: state 2 transitions
	{gaSDAYOFWEEK+12,	16}, // +7: state 3 transitions
	{gaSDAYOFWEEK+14,	15}, // +8: state 4 transitions
	{gaSDAYOFWEEK+16,	16},
	{gaSDAYOFWEEK+18,	13}, // +10: state 5 transitions
	{gaSDAYOFWEEK+16,	14},
	{gaSDAYOFWEEK+20,	8}, // +12: state 6 transitions
	{gaSDAYOFWEEK+20,	9}, // +13: state 7 transitions
	{gaSDAYOFWEEK+22,	18}, // +14: state 8 transitions
	{gaSDAYOFWEEK+24,	10}, // +15: state 9 transitions
	{gaSDAYOFWEEK+22,	11}, // +16: state 10 transitions
	{gaSDAYOFWEEK+14,	12}, // +17: state 11 transitions
	{gaSDAYOFWEEK+26,	19}, // +18: state 12 transitions
	{gaSDAYOFWEEK+16,	21}, // +19: state 13 transitions
	{gaSDAYOFWEEK+20,	20}, // +20: state 14 transitions
	{gaSDAYOFWEEK+28,	23}, // +21: state 15 transitions
	{gaSDAYOFWEEK+30,	22}, // +22: state 16 transitions
	{gaSDAYOFWEEK+32,	22}, // +23: state 17 transitions
	{gaSDAYOFWEEK+30,	7}, // +24: state 18 transitions
	{gaSDAYOFWEEK+24,	10}, // +25: state 20 transitions
	{gaSDAYOFWEEK+10,	9}, // +26: state 21 transitions
	{gaSDAYOFWEEK+22,	11}, // +27: state 22 transitions
	{gaSDAYOFWEEK+16,	2}, // +28: state 23 transitions
};

const STATE_DESCRIPTION aStateDescDAYOFWEEK[24] = {
	/* state valid cTrans Trans */
	/*   0 */ {0, 5, gaTDAYOFWEEK+0},
	/*   1 */ {0, 1, gaTDAYOFWEEK+5},
	/*   2 */ {0, 1, gaTDAYOFWEEK+6},
	/*   3 */ {0, 1, gaTDAYOFWEEK+7},
	/*   4 */ {0, 2, gaTDAYOFWEEK+8},
	/*   5 */ {0, 2, gaTDAYOFWEEK+10},
	/*   6 */ {0, 1, gaTDAYOFWEEK+12},
	/*   7 */ {0, 1, gaTDAYOFWEEK+13},
	/*   8 */ {0, 1, gaTDAYOFWEEK+14},
	/*   9 */ {0, 1, gaTDAYOFWEEK+15},
	/*  10 */ {0, 1, gaTDAYOFWEEK+16},
	/*  11 */ {0, 1, gaTDAYOFWEEK+17},
	/*  12 */ {0, 1, gaTDAYOFWEEK+18},
	/*  13 */ {0, 1, gaTDAYOFWEEK+19},
	/*  14 */ {0, 1, gaTDAYOFWEEK+20},
	/*  15 */ {0, 1, gaTDAYOFWEEK+21},
	/*  16 */ {0, 1, gaTDAYOFWEEK+22},
	/*  17 */ {0, 1, gaTDAYOFWEEK+23},
	/*  18 */ {1, 1, gaTDAYOFWEEK+24},
	/*  19 */ {1, 0, NULL},
	/*  20 */ {1, 1, gaTDAYOFWEEK+25},
	/*  21 */ {1, 1, gaTDAYOFWEEK+26},
	/*  22 */ {1, 1, gaTDAYOFWEEK+27},
	/*  23 */ {1, 1, gaTDAYOFWEEK+28},
};

// end of text generated by re2fsa

/********************* MONTH ********************************/

// text generated by re2fsa at Wed Feb 07 10:32:20 2001

// the input-file of rules:
// Jan
// Feb
// Mar
// Apr
// May
// Jun
// Jul
// Aug
// Sep
// Oct
// Nov
// Dec
// January
// February
// March
// April
// May
// June
// July
// August
// September
// October
// November
// December

// 43 states

static const unsigned char gaSMONTH[] = 
	/* gaStringMONTH+0 */	"A\000"
	/* gaStringMONTH+2 */	"D\000"
	/* gaStringMONTH+4 */	"F\000"
	/* gaStringMONTH+6 */	"S\000"
	/* gaStringMONTH+8 */	"J\000"
	/* gaStringMONTH+10 */	"M\000"
	/* gaStringMONTH+12 */	"N\000"
	/* gaStringMONTH+14 */	"O\000"
	/* gaStringMONTH+16 */	"p\000"
	/* gaStringMONTH+18 */	"u\000"
	/* gaStringMONTH+20 */	"e\000"
	/* gaStringMONTH+22 */	"a\000"
	/* gaStringMONTH+24 */	"o\000"
	/* gaStringMONTH+26 */	"c\000"
	/* gaStringMONTH+28 */	"m\000"
	/* gaStringMONTH+30 */	"b\000"
	/* gaStringMONTH+32 */	"r\000"
	/* gaStringMONTH+34 */	"t\000"
	/* gaStringMONTH+36 */	"v\000"
	/* gaStringMONTH+38 */	"y\000"
	/* gaStringMONTH+40 */	"h\000"
	/* gaStringMONTH+42 */	"n\000"
	/* gaStringMONTH+44 */	"l\000"
	/* gaStringMONTH+46 */	"g\000"
	/* gaStringMONTH+48 */	"s\000"
	/* gaStringMONTH+50 */	"i\000"
;

static const STATE_TRANSITION gaTMONTH[] = {
	{gaSMONTH+0,	1}, // +0: state 0 transitions
	{gaSMONTH+2,	2},
	{gaSMONTH+4,	3},
	{gaSMONTH+6,	4},
	{gaSMONTH+8,	7},
	{gaSMONTH+10,	8},
	{gaSMONTH+12,	10},
	{gaSMONTH+14,	11},
	{gaSMONTH+16,	16}, // +8: state 1 transitions
	{gaSMONTH+18,	29},
	{gaSMONTH+20,	28}, // +10: state 2 transitions
	{gaSMONTH+20,	26}, // +11: state 3 transitions
	{gaSMONTH+20,	12}, // +12: state 4 transitions
	{gaSMONTH+20,	13}, // +13: state 5 transitions
	{gaSMONTH+20,	15}, // +14: state 6 transitions
	{gaSMONTH+22,	22}, // +15: state 7 transitions
	{gaSMONTH+18,	23},
	{gaSMONTH+22,	20}, // +17: state 8 transitions
	{gaSMONTH+22,	24}, // +18: state 9 transitions
	{gaSMONTH+24,	19}, // +19: state 10 transitions
	{gaSMONTH+26,	17}, // +20: state 11 transitions
	{gaSMONTH+16,	32}, // +21: state 12 transitions
	{gaSMONTH+28,	14}, // +22: state 13 transitions
	{gaSMONTH+30,	6}, // +23: state 14 transitions
	{gaSMONTH+32,	33}, // +24: state 15 transitions
	{gaSMONTH+32,	42}, // +25: state 16 transitions
	{gaSMONTH+34,	34}, // +26: state 17 transitions
	{gaSMONTH+34,	33}, // +27: state 18 transitions
	{gaSMONTH+36,	35}, // +28: state 19 transitions
	{gaSMONTH+38,	33}, // +29: state 20 transitions
	{gaSMONTH+32,	36},
	{gaSMONTH+40,	33}, // +31: state 21 transitions
	{gaSMONTH+42,	39}, // +32: state 22 transitions
	{gaSMONTH+44,	37}, // +33: state 23 transitions
	{gaSMONTH+42,	38},
	{gaSMONTH+32,	25}, // +35: state 24 transitions
	{gaSMONTH+38,	33}, // +36: state 25 transitions
	{gaSMONTH+30,	41}, // +37: state 26 transitions
	{gaSMONTH+18,	9}, // +38: state 27 transitions
	{gaSMONTH+26,	35}, // +39: state 28 transitions
	{gaSMONTH+46,	40}, // +40: state 29 transitions
	{gaSMONTH+48,	18}, // +41: state 30 transitions
	{gaSMONTH+44,	33}, // +42: state 31 transitions
	{gaSMONTH+34,	5}, // +43: state 32 transitions
	{gaSMONTH+24,	14}, // +44: state 34 transitions
	{gaSMONTH+20,	13}, // +45: state 35 transitions
	{gaSMONTH+26,	21}, // +46: state 36 transitions
	{gaSMONTH+38,	33}, // +47: state 37 transitions
	{gaSMONTH+20,	33}, // +48: state 38 transitions
	{gaSMONTH+18,	9}, // +49: state 39 transitions
	{gaSMONTH+18,	30}, // +50: state 40 transitions
	{gaSMONTH+32,	27}, // +51: state 41 transitions
	{gaSMONTH+50,	31}, // +52: state 42 transitions
};

const STATE_DESCRIPTION aStateDescMONTH[43] = {
	/* state valid cTrans Trans */
	/*   0 */ {0, 8, gaTMONTH+0},
	/*   1 */ {0, 2, gaTMONTH+8},
	/*   2 */ {0, 1, gaTMONTH+10},
	/*   3 */ {0, 1, gaTMONTH+11},
	/*   4 */ {0, 1, gaTMONTH+12},
	/*   5 */ {0, 1, gaTMONTH+13},
	/*   6 */ {0, 1, gaTMONTH+14},
	/*   7 */ {0, 2, gaTMONTH+15},
	/*   8 */ {0, 1, gaTMONTH+17},
	/*   9 */ {0, 1, gaTMONTH+18},
	/*  10 */ {0, 1, gaTMONTH+19},
	/*  11 */ {0, 1, gaTMONTH+20},
	/*  12 */ {0, 1, gaTMONTH+21},
	/*  13 */ {0, 1, gaTMONTH+22},
	/*  14 */ {0, 1, gaTMONTH+23},
	/*  15 */ {0, 1, gaTMONTH+24},
	/*  16 */ {0, 1, gaTMONTH+25},
	/*  17 */ {0, 1, gaTMONTH+26},
	/*  18 */ {0, 1, gaTMONTH+27},
	/*  19 */ {0, 1, gaTMONTH+28},
	/*  20 */ {0, 2, gaTMONTH+29},
	/*  21 */ {0, 1, gaTMONTH+31},
	/*  22 */ {0, 1, gaTMONTH+32},
	/*  23 */ {0, 2, gaTMONTH+33},
	/*  24 */ {0, 1, gaTMONTH+35},
	/*  25 */ {0, 1, gaTMONTH+36},
	/*  26 */ {0, 1, gaTMONTH+37},
	/*  27 */ {0, 1, gaTMONTH+38},
	/*  28 */ {0, 1, gaTMONTH+39},
	/*  29 */ {0, 1, gaTMONTH+40},
	/*  30 */ {0, 1, gaTMONTH+41},
	/*  31 */ {0, 1, gaTMONTH+42},
	/*  32 */ {1, 1, gaTMONTH+43},
	/*  33 */ {1, 0, NULL},
	/*  34 */ {1, 1, gaTMONTH+44},
	/*  35 */ {1, 1, gaTMONTH+45},
	/*  36 */ {1, 1, gaTMONTH+46},
	/*  37 */ {1, 1, gaTMONTH+47},
	/*  38 */ {1, 1, gaTMONTH+48},
	/*  39 */ {1, 1, gaTMONTH+49},
	/*  40 */ {1, 1, gaTMONTH+50},
	/*  41 */ {1, 1, gaTMONTH+51},
	/*  42 */ {1, 1, gaTMONTH+52},
};

// end of text generated by re2fsa

/********************* GENDER ********************************/

// text generated by re2fsa at Wed Feb 07 10:34:39 2001

// the input-file of rules:
// M
// F
// Male
// male
// Female
// female

// 9 states

static const unsigned char gaSGENDER[] = 
	/* gaStringGENDER+0 */	"f\000"
	/* gaStringGENDER+2 */	"m\000"
	/* gaStringGENDER+4 */	"F\000"
	/* gaStringGENDER+6 */	"M\000"
	/* gaStringGENDER+8 */	"e\000"
	/* gaStringGENDER+10 */	"a\000"
	/* gaStringGENDER+12 */	"l\000"
;

static const STATE_TRANSITION gaTGENDER[] = {
	{gaSGENDER+0,	1}, // +0: state 0 transitions
	{gaSGENDER+2,	2},
	{gaSGENDER+4,	6},
	{gaSGENDER+6,	7},
	{gaSGENDER+8,	5}, // +4: state 1 transitions
	{gaSGENDER+10,	3}, // +5: state 2 transitions
	{gaSGENDER+12,	4}, // +6: state 3 transitions
	{gaSGENDER+8,	8}, // +7: state 4 transitions
	{gaSGENDER+2,	2}, // +8: state 5 transitions
	{gaSGENDER+8,	5}, // +9: state 6 transitions
	{gaSGENDER+10,	3}, // +10: state 7 transitions
};

const STATE_DESCRIPTION aStateDescGENDER[9] = {
	/* state valid cTrans Trans */
	/*   0 */ {0, 4, gaTGENDER+0},
	/*   1 */ {0, 1, gaTGENDER+4},
	/*   2 */ {0, 1, gaTGENDER+5},
	/*   3 */ {0, 1, gaTGENDER+6},
	/*   4 */ {0, 1, gaTGENDER+7},
	/*   5 */ {0, 1, gaTGENDER+8},
	/*   6 */ {1, 1, gaTGENDER+9},
	/*   7 */ {1, 1, gaTGENDER+10},
	/*   8 */ {1, 0, NULL},
};

// end of text generated by re2fsa
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\inferno\src\usa\tpunc.c ===
// tpunc.c (trailing punctuation)
// Angshuman Guha
// aguha
// Nov 15, 2000

// John's rules allowed a specific finite set of short strings composed of "'`,.:;?!)]}/*
// He also imposed the restriction that two identical quote marks couldn't be adjacent.
// I am allowing a string unlimited in length.
// I am enforcing two adjacent quote marks to be different.
// I am including 's and (s) here: they are allowed only at the beginning.

#include "common.h"
#include "tpunc.h"

// text generated by re2fsa at Fri Feb 02 15:37:41 2001

// the input-file of rules:
// T = DQ 
// T = t
// T = DQ t
// T = t DQ 
// T = SQ 
// T = SQ t
// T = t SQ 
// T = SQ DQ 
// T = t SQ DQ 
// T = SQ DQ t
// T = DQ SQ 
// T = t DQ SQ 
// T = DQ SQ t
// T = rparen DQ dot 
// T = rparen SQ dot 
// t = comma 
// t = dot 
// t = dot dot dot 
// t = dot dot dot dot 
// t = colon 
// t = semicolon 
// t = question 
// t = question question 
// t = question question question 
// t = exclamation 
// t = exclamation exclamation 
// t = exclamation exclamation exclamation 
// t = rparen 
// t = rparen comma 
// t = rparen dot 
// t = rparen colon 
// t = rparen semicolon 
// t = rparen question 
// t = rparen question question 
// t = rparen question question question 
// t = rparen exclamation 
// t = rparen exclamation exclamation 
// t = rparen exclamation exclamation exclamation 
// t = rparen rparen 
// t = rparen rparen comma 
// t = rparen rparen dot 
// t = rparen rparen colon 
// t = rparen rparen semicolon 
// t = rparen rparen question 
// t = rparen rparen question question 
// t = rparen rparen question question question 
// t = rparen rparen exclamation 
// t = rparen rparen exclamation exclamation 
// t = rparen rparen exclamation exclamation exclamation 
// t = comma rparen 
// t = dot rparen 
// t = colon rparen 
// t = semicolon rparen 
// t = question rparen 
// t = question question rparen 
// t = question question question rparen 
// t = exclamation rparen 
// t = exclamation exclamation rparen 
// t = exclamation exclamation exclamation rparen 
// t = dot dot dot rparen 
// t = rbracket 
// t = rbracket comma 
// t = rbracket dot 
// t = rbracket colon 
// t = rbracket semicolon 
// t = rbracket question 
// t = rbracket question question 
// t = rbracket question question question 
// t = rbracket exclamation 
// t = rbracket exclamation exclamation 
// t = rbracket exclamation exclamation exclamation 
// t = rbrace 
// t = rbrace comma 
// t = rbrace dot 
// t = rbrace colon 
// t = rbrace semicolon 
// t = rbrace question 
// t = rbrace question question 
// t = rbrace question question question 
// t = rbrace exclamation 
// t = rbrace exclamation exclamation 
// t = rbrace exclamation exclamation exclamation 
// t = "*" ["*" ["*"]]
// t = "/"
// DQ = "\""
// SQ = "'"
// rparen = ")"
// dot = "."
// comma = ","
// colon = ":"
// semicolon = ";"
// question = "?"
// exclamation = "!"
// rbracket = "]"
// rbrace = "}"
// ess = "'" "sS"
// ess = "(" "sS" ")"
// final = ess
// final = [ess] T
// = final

// 46 states

static const unsigned char gaSTPUNC[] = 
	/* gaStringTPUNC+0 */	"(\000"
	/* gaStringTPUNC+2 */	"!\000"
	/* gaStringTPUNC+4 */	"\"\000"
	/* gaStringTPUNC+6 */	"'\000"
	/* gaStringTPUNC+8 */	")\000"
	/* gaStringTPUNC+10 */	"*\000"
	/* gaStringTPUNC+12 */	",:;\000"
	/* gaStringTPUNC+16 */	".\000"
	/* gaStringTPUNC+18 */	"/\000"
	/* gaStringTPUNC+20 */	"?\000"
	/* gaStringTPUNC+22 */	"]}\000"
	/* gaStringTPUNC+25 */	"Ss\000"
	/* gaStringTPUNC+28 */	",.:;\000"
	/* gaStringTPUNC+33 */	").\000"
	/* gaStringTPUNC+36 */	"'.\000"
	/* gaStringTPUNC+39 */	"\".\000"
;

static const STATE_TRANSITION gaTTPUNC[] = {
	{gaSTPUNC+0,	1}, // +0: state 0 transitions
	{gaSTPUNC+2,	5},
	{gaSTPUNC+4,	7},
	{gaSTPUNC+6,	8},
	{gaSTPUNC+8,	9},
	{gaSTPUNC+10,	10},
	{gaSTPUNC+12,	12},
	{gaSTPUNC+16,	13},
	{gaSTPUNC+18,	14},
	{gaSTPUNC+20,	15},
	{gaSTPUNC+22,	17},
	{gaSTPUNC+25,	4}, // +11: state 1 transitions
	{gaSTPUNC+16,	25}, // +12: state 2 transitions
	{gaSTPUNC+16,	45}, // +13: state 3 transitions
	{gaSTPUNC+8,	28}, // +14: state 4 transitions
	{gaSTPUNC+2,	6}, // +15: state 5 transitions
	{gaSTPUNC+8,	14},
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+2,	12}, // +19: state 6 transitions
	{gaSTPUNC+8,	14},
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+18,	24}, // +23: state 7 transitions
	{gaSTPUNC+2,	30},
	{gaSTPUNC+6,	32},
	{gaSTPUNC+8,	33},
	{gaSTPUNC+10,	34},
	{gaSTPUNC+12,	36},
	{gaSTPUNC+16,	37},
	{gaSTPUNC+20,	38},
	{gaSTPUNC+22,	40},
	{gaSTPUNC+18,	24}, // +32: state 8 transitions
	{gaSTPUNC+25,	28},
	{gaSTPUNC+2,	30},
	{gaSTPUNC+4,	32},
	{gaSTPUNC+8,	33},
	{gaSTPUNC+10,	34},
	{gaSTPUNC+12,	36},
	{gaSTPUNC+16,	37},
	{gaSTPUNC+20,	38},
	{gaSTPUNC+22,	40},
	{gaSTPUNC+28,	14}, // +42: state 9 transitions
	{gaSTPUNC+8,	17},
	{gaSTPUNC+2,	18},
	{gaSTPUNC+20,	22},
	{gaSTPUNC+4,	26},
	{gaSTPUNC+6,	27},
	{gaSTPUNC+10,	11}, // +48: state 10 transitions
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+10,	14}, // +51: state 11 transitions
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+8,	14}, // +54: state 12 transitions
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+16,	2}, // +57: state 13 transitions
	{gaSTPUNC+8,	14},
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+4,	20}, // +61: state 14 transitions
	{gaSTPUNC+6,	21},
	{gaSTPUNC+8,	14}, // +63: state 15 transitions
	{gaSTPUNC+20,	16},
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+20,	12}, // +67: state 16 transitions
	{gaSTPUNC+8,	14},
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+28,	14}, // +71: state 17 transitions
	{gaSTPUNC+2,	18},
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+20,	22},
	{gaSTPUNC+2,	19}, // +76: state 18 transitions
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+2,	14}, // +79: state 19 transitions
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+6,	24}, // +82: state 20 transitions
	{gaSTPUNC+4,	24}, // +83: state 21 transitions
	{gaSTPUNC+4,	20}, // +84: state 22 transitions
	{gaSTPUNC+6,	21},
	{gaSTPUNC+20,	23},
	{gaSTPUNC+20,	14}, // +87: state 23 transitions
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+33,	14}, // +90: state 25 transitions
	{gaSTPUNC+4,	20},
	{gaSTPUNC+6,	21},
	{gaSTPUNC+36,	24}, // +93: state 26 transitions
	{gaSTPUNC+39,	24}, // +94: state 27 transitions
	{gaSTPUNC+2,	5}, // +95: state 28 transitions
	{gaSTPUNC+4,	7},
	{gaSTPUNC+8,	9},
	{gaSTPUNC+10,	10},
	{gaSTPUNC+12,	12},
	{gaSTPUNC+16,	13},
	{gaSTPUNC+18,	14},
	{gaSTPUNC+20,	15},
	{gaSTPUNC+22,	17},
	{gaSTPUNC+6,	29},
	{gaSTPUNC+18,	24}, // +105: state 29 transitions
	{gaSTPUNC+2,	30},
	{gaSTPUNC+4,	32},
	{gaSTPUNC+8,	33},
	{gaSTPUNC+10,	34},
	{gaSTPUNC+12,	36},
	{gaSTPUNC+16,	37},
	{gaSTPUNC+20,	38},
	{gaSTPUNC+22,	40},
	{gaSTPUNC+8,	24}, // +114: state 30 transitions
	{gaSTPUNC+2,	31},
	{gaSTPUNC+8,	24}, // +116: state 31 transitions
	{gaSTPUNC+2,	36},
	{gaSTPUNC+18,	24}, // +118: state 32 transitions
	{gaSTPUNC+2,	30},
	{gaSTPUNC+8,	33},
	{gaSTPUNC+10,	34},
	{gaSTPUNC+12,	36},
	{gaSTPUNC+16,	37},
	{gaSTPUNC+20,	38},
	{gaSTPUNC+22,	40},
	{gaSTPUNC+28,	24}, // +126: state 33 transitions
	{gaSTPUNC+8,	40},
	{gaSTPUNC+2,	41},
	{gaSTPUNC+20,	43},
	{gaSTPUNC+10,	35}, // +130: state 34 transitions
	{gaSTPUNC+10,	24}, // +131: state 35 transitions
	{gaSTPUNC+8,	24}, // +132: state 36 transitions
	{gaSTPUNC+16,	3}, // +133: state 37 transitions
	{gaSTPUNC+8,	24},
	{gaSTPUNC+8,	24}, // +135: state 38 transitions
	{gaSTPUNC+20,	39},
	{gaSTPUNC+8,	24}, // +137: state 39 transitions
	{gaSTPUNC+20,	36},
	{gaSTPUNC+28,	24}, // +139: state 40 transitions
	{gaSTPUNC+2,	41},
	{gaSTPUNC+20,	43},
	{gaSTPUNC+2,	42}, // +142: state 41 transitions
	{gaSTPUNC+2,	24}, // +143: state 42 transitions
	{gaSTPUNC+20,	44}, // +144: state 43 transitions
	{gaSTPUNC+20,	24}, // +145: state 44 transitions
	{gaSTPUNC+33,	24}, // +146: state 45 transitions
};

const STATE_DESCRIPTION aStateDescTPUNC[46] = {
	/* state valid cTrans Trans */
	/*   0 */ {0, 11, gaTTPUNC+0},
	/*   1 */ {0, 1, gaTTPUNC+11},
	/*   2 */ {0, 1, gaTTPUNC+12},
	/*   3 */ {0, 1, gaTTPUNC+13},
	/*   4 */ {0, 1, gaTTPUNC+14},
	/*   5 */ {1, 4, gaTTPUNC+15},
	/*   6 */ {1, 4, gaTTPUNC+19},
	/*   7 */ {1, 9, gaTTPUNC+23},
	/*   8 */ {1, 10, gaTTPUNC+32},
	/*   9 */ {1, 6, gaTTPUNC+42},
	/*  10 */ {1, 3, gaTTPUNC+48},
	/*  11 */ {1, 3, gaTTPUNC+51},
	/*  12 */ {1, 3, gaTTPUNC+54},
	/*  13 */ {1, 4, gaTTPUNC+57},
	/*  14 */ {1, 2, gaTTPUNC+61},
	/*  15 */ {1, 4, gaTTPUNC+63},
	/*  16 */ {1, 4, gaTTPUNC+67},
	/*  17 */ {1, 5, gaTTPUNC+71},
	/*  18 */ {1, 3, gaTTPUNC+76},
	/*  19 */ {1, 3, gaTTPUNC+79},
	/*  20 */ {1, 1, gaTTPUNC+82},
	/*  21 */ {1, 1, gaTTPUNC+83},
	/*  22 */ {1, 3, gaTTPUNC+84},
	/*  23 */ {1, 3, gaTTPUNC+87},
	/*  24 */ {1, 0, NULL},
	/*  25 */ {1, 3, gaTTPUNC+90},
	/*  26 */ {1, 1, gaTTPUNC+93},
	/*  27 */ {1, 1, gaTTPUNC+94},
	/*  28 */ {1, 10, gaTTPUNC+95},
	/*  29 */ {1, 9, gaTTPUNC+105},
	/*  30 */ {1, 2, gaTTPUNC+114},
	/*  31 */ {1, 2, gaTTPUNC+116},
	/*  32 */ {1, 8, gaTTPUNC+118},
	/*  33 */ {1, 4, gaTTPUNC+126},
	/*  34 */ {1, 1, gaTTPUNC+130},
	/*  35 */ {1, 1, gaTTPUNC+131},
	/*  36 */ {1, 1, gaTTPUNC+132},
	/*  37 */ {1, 2, gaTTPUNC+133},
	/*  38 */ {1, 2, gaTTPUNC+135},
	/*  39 */ {1, 2, gaTTPUNC+137},
	/*  40 */ {1, 3, gaTTPUNC+139},
	/*  41 */ {1, 1, gaTTPUNC+142},
	/*  42 */ {1, 1, gaTTPUNC+143},
	/*  43 */ {1, 1, gaTTPUNC+144},
	/*  44 */ {1, 1, gaTTPUNC+145},
	/*  45 */ {1, 1, gaTTPUNC+146},
};

// end of text generated by re2fsa
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\linebrk.h ===
#ifndef __LINEBRK_H__

#define __LINEBRK_H__

int		NNLineSep				(GLYPH *pGlyph, LINEBRK *pLineBrk);
int		GuideLineSep			(GLYPH *pGlyph, GUIDE *pGuide, LINEBRK *pLineBrk);
void	CompareLineBrk			(LINEBRK *pNewLineBrk, LINEBRK *pOldLineBrk);
int		IsComplexStroke			(int cPt, POINT *pPt, RECT *pr);
GLYPH *	TranslateAndScaleLine	(INKLINE *pLine, GUIDE *pGuide);
BOOL	CreateSingleLine		(XRC *pxrc);
BOOL    InitLine                (INKLINE *pLine);
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\combiner.h ===
#ifndef __COMBINER__

#define __COMBINER__

#include "common.h"
#include "candinfo.h"

#define NUM_CAND			10


#define	PP_MAX_HMM				10000000
#define	PP_MAX_CHAR_UNIGRAM		99999
#define	PP_MAX_ASPECT			99999
#define PP_MAX_BLINE			99999
#define PP_MAX_HEIGHT			99999
#define PP_MAX_NN				MAX_NN
#define PP_MAX_UNIGRAM			MAX_UNIGRAM

#define	NN_SCALE			1000
#define UNIGRAM_SCALE		500
#define HMM_SCALE			100000
#define	CHAR_UNIGRAM_SCALE	10000
#define	ASPECT_SCALE		10000
#define BLINE_SCALE			10000
#define HEIGHT_SCALE		10000

#define WORST_SCALED_NN			100
#define WORST_SCALED_UNIGRAM	20
#define WORST_SCALED_HMM		500
#define WORST_SCALED_ASPECT		50
#define WORST_SCALED_BLINE		50
#define WORST_SCALED_HGT		50

typedef struct tagALTINFO
{
	int			NumCand;
	
	CANDINFO	aCandInfo[MAXMAXALT];
	
	int			MinNN;
	int			MinUnigram;
	int			MinHMM;
	int			MinAspect;
	int			MinCharUnigram;
	int			MinBaseLine;
	int			MinHgt;
}ALTINFO;

int CombineHMMScore (GLYPH *pGlyph, ALTERNATES *pAlt, int iPrint);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\madapi.c ===
// madapi.c
// Angshuman Guha,  aguha
// April 11, 2000

#include "tchar.h"

#include "common.h"
#include "inferno.h"

#include "nfeature.h"
#include "engine.h"

#include "Panel.h"
#include "PorkyPost.h"
#include "combiner.h"
#include "nnet.h"
#include "langmod.h"
#include "privdefs.h"
#include <udictP.h>
#include "recoutil.h"

#ifdef DUMPDICT

char hack_sz[200] = "";
int hack_pos = 0;
LM_FLAGS	hack_LMflags;			// Language model stuff
int hack_counter = 0;

static BOOL	TmpBeamCallBack(WCHAR wch, LMSTATE state, TAGDATA *pTag, void *pCallBackInfo)
{
	FILE *f = (FILE *) pCallBackInfo;

	if (wch)
	{
		hack_sz[hack_pos++] = (char)wch;
		hack_sz[hack_pos] = 0;

		fprintf(f, "%s\n", hack_sz);

		ExpandState(FALSE, state, &hack_LMflags, TmpBeamCallBack, (void *)f);
		hack_sz[--hack_pos] = 0;
	}
	else
	{
		hack_sz[hack_pos] = 0;

		fprintf(f, "%s|\n", hack_sz);
	}

	return TRUE;
}

#endif


int WINAPI ProcessHRC(HRC hrc, DWORD dwRecoMode)
{
	XRC		*pxrc = (XRC *)hrc;

	// Check the validity of the xrc and the ink
	if (!pxrc || !pxrc->pGlyph || CframeGLYPH(pxrc->pGlyph) <= 0)
		return HRCR_ERROR;	

	// if we have a prefix or a suffix in the xrc make sure the mode supports this
	// the current implmentation supports prefixes and suffixes
	// only in word mode and only if the coerce flag is on
	if (pxrc->szPrefix || pxrc->szSuffix)
	{
		if (!(pxrc->flags & RECOFLAG_WORDMODE))
		{
			return HRCR_ERROR;
		}

		if (!(pxrc->flags & RECOFLAG_COERCE))
		{
			return HRCR_ERROR;
		}
	}

	// to provide backwards compatiblity setting dwRecoMode to 0 or PH_MAX
	// is equivalent to RECO_MODE_REMAINING
	if (dwRecoMode == 0 || dwRecoMode == PH_MAX)
	{
		dwRecoMode	=	RECO_MODE_REMAINING;
	}

	// In word mode only RECO_MODE_REMAINING (full mode) is allowed
	if (pxrc->flags & RECOFLAG_WORDMODE)
	{
		if (dwRecoMode != RECO_MODE_REMAINING)
		{
			return HRCR_ERROR;
		}
	}

	// WARNING: START
	// Save the ink: Should be normally commented out. Only enabled in a special version of the recognizer
	//	SaveInk (pxrc->bGuide ? &pxrc->guide : NULL, pxrc->pGlyph);
	// WARNING: END

	// set the ProcessCalled flag to TRUE. 
	// After we have passed all these checks we can regard ourseleves called
	pxrc->bProcessCalled	=	TRUE;
	
	if (pxrc->hwl)
	{
		// MultiProcess synchro
		UDictGetLock(pxrc->hwl, READER);
	}

	// Panel Mode processing
	if (!(pxrc->flags & RECOFLAG_WORDMODE))
	{
#ifdef DUMPDICT
		{
			LMSTATE		state;
			FILE *f;

			hack_counter++;
			InitializeLMSTATE(&state, &hack_LMflags, TRUE, 0, 0, pxrc->hwl);
			f = fopen("d:\\dumpdict.txt", "w");
			ExpandState(FALSE, state, &hack_LMflags, TmpBeamCallBack, (void *)f);
			fclose(f);
		}
#endif
		pxrc->iProcessRet = PanelModeRecognize (pxrc, dwRecoMode);
	}
	// Word Mode processing
	else
	{
		pxrc->iProcessRet = WordModeRecognize (pxrc);
	}

	// if we had a user dictionary attached, do the necessary un-locking
	if (pxrc->hwl)
	{
		// MultiProcess synchro
		UDictReleaseLock(pxrc->hwl, READER);
	}

	return pxrc->iProcessRet;
}
// To generate a version of the dll that saves the ink, we
// need to uncomment the following prototype and also the
// call to SaveInk in MadProcessHRC.  We also need to add
// saveink.c into madusa.dsp.
//
// void SaveInk (GUIDE *pGuide, GLYPH *pGlyph);

/*
int WINAPI OldProcessHRC(HRC hrc, DWORD dwUnused)
{
	XRC *pxrc = (XRC *)hrc;
	XY *xy;

	if (!pxrc)
		return HRCR_ERROR;	

	if (pxrc->szPrefix || pxrc->szSuffix)
	{
		// the current implmentation supports prefixes and suffixes
		// only in word mode and only if the coerce flag is on
		if (!(pxrc->flags & RECOFLAG_WORDMODE))
			return HRCR_ERROR;

		if (!(pxrc->flags & RECOFLAG_COERCE))
			return HRCR_ERROR;
	}

	//SaveInk (&pxrc->guide, pxrc->pGlyph);

	xy = SaveRawxyGLYPH(pxrc->pGlyph);
	if (pxrc->pGlyph && !xy)
	{
		pxrc->iProcessRet = HRCR_ERROR;
		return pxrc->iProcessRet;
	}

	if (pxrc->hwl)
	{
		// MultiProcess synchro
		UDictGetLock(pxrc->hwl, READER);
	}

	if (!(pxrc->flags & RECOFLAG_WORDMODE))
	{
#ifdef DUMPDICT
		{
			LMSTATE		state;
			FILE *f;

			hack_counter++;
			InitializeLMSTATE(&state, &hack_LMflags, TRUE, 0, 0, pxrc->hwl);
			f = fopen("d:\\dumpdict.txt", "w");
			ExpandState(FALSE, state, &hack_LMflags, TmpBeamCallBack, (void *)f);
			fclose(f);
		}
#endif
		pxrc->iProcessRet = RecognizePanel(pxrc, &(pxrc->answer));
	}
	else
	{
		XRCRESULT *pRes;
		int cRes;

		pxrc->iProcessRet = InfProcessHRC(hrc, -1);

		if (HRCR_OK == pxrc->iProcessRet && pxrc->answer.cAlt > 1)
		{
			pRes = pxrc->answer.aAlt;
			cRes = pxrc->answer.cAlt;
			pxrc->iProcessRet = bNnonlyEnabledXRC(pxrc) ? HRCR_OK : CombineHMMScore(pxrc->pGlyph, &(pxrc->answer), pxrc->nfeatureset->iPrint);
		}

		// generate the line segmentation
		if (!WordModeGenLineSegm (pxrc))
			return HRCR_ERROR;
	}

	if (pxrc->hwl)
	{
		// MultiProcess synchro
		UDictReleaseLock(pxrc->hwl, READER);
	}

	RestoreRawxyGLYPH(pxrc->pGlyph, xy);
	ExternFree(xy);

	return pxrc->iProcessRet;
}
*/
// **************************************************************************
// private API
// **************************************************************************
#if defined(HWX_INTERNAL) && defined(HWX_TIMING)

#include <madTime.h>

static MAD_TIMING s_madTime = {0, 0, 0, 0};

void setMadTiming(DWORD dwTime, int iElement)
{
	s_madTime.dCnt[iElement]++;
	s_madTime.dTime[iElement] += dwTime;

}

__declspec(dllexport) DWORD WINAPI HwxGetTiming(void *pVoid, BOOL bReset)
{
	*(MAD_TIMING *) pVoid = s_madTime;

	if (bReset)
	{
		memset(&s_madTime, 0, sizeof(s_madTime));
	}

	return s_madTime.dTime[MM_TOT];
}

#endif // #if defined(HWX_INTERNAL) && defined(HWX_TIMING)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\dllmain.c ===
#include "common.h"

#include "nfeature.h"
#include "engine.h"

#include "PorkyPost.h"
#include <tpgHandle.h>

HINSTANCE g_hInstanceDll;

// July 2001 - mrevow Add heap checking code when DBG is defined
#ifdef DBG
#include <crtdbg.h>
	extern void initMemMgr();
	extern void destroyMemMgr();
	//_CrtMemState g_HeapStateStart, g_HeapStateEnd, g_HeapStateDiff;
#endif

BOOL WINAPI DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
    if (dwReason == DLL_PROCESS_ATTACH)
    {
		g_hInstanceDll = hDll;
#ifdef DBG
		initMemMgr();

//		_CrtMemCheckpoint(&g_HeapStateStart);
#endif

		if (FALSE == initTpgHandleManager())
		{
			return FALSE;
		}

#if !defined(ROM_IT) || !defined(NDEBUG)
        return PorkPostInit() && InitRecognition(hDll);
#else
        return InitRecognition(hDll);
#endif
	}
    
    if (dwReason == DLL_PROCESS_DETACH)
    {
        CloseRecognition();
		closeTpgHandleManager();

#ifdef DBG
		destroyMemMgr();
//		_CrtMemCheckpoint(&g_HeapStateEnd);
//
//		if (TRUE == _CrtMemDifference(&g_HeapStateDiff, &g_HeapStateStart, &g_HeapStateEnd))
//		{
//			_CrtMemDumpStatistics(&g_HeapStateDiff);
//		}
//		_CrtDumpMemoryLeaks();
#endif
    }

    return((int)TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\combiner.c ===
#include <limits.h>

#include "combiner.h"
#include "common.h"
#include "PorkyPost.h"
#include "postproc.h"


// max word length, word lengths > than this values are just folded to that value
#define	MAX_WORD_LEN	10

// score sorting callback function
static int _cdecl ResultCmp(const XRCRESULT *a, const XRCRESULT *b)
{
	if (a->cost > b->cost)
		return 1;

	if (a->cost == b->cost)
		return 0;

	return -1;
}

// evaluate the combined score of the NN, HMM and the unigram
// and then resort ALT list
int CombineHMMScore (GLYPH *pGlyph, ALTERNATES *pAlt, int iPrint)
{
	XRCRESULT		*pRes;
	ALTINFO			AltInfo;
#ifdef HWX_TIMING
#include <madTime.h>
	extern void setMadTiming(DWORD, int);
	TCHAR	 aDebugString[256];
	DWORD	iStartTime, iEndTime;

	iStartTime = GetTickCount();
#endif


	// validate pointer
	if (!pAlt || pAlt->cAlt < 1)
		return HRCR_ERROR;

	pRes = pAlt->aAlt;
	if (!pRes)
	{
		ASSERT (0);
		return HRCR_ERROR;
	}
	// call the HMM to get thier scores for each cand in the altlist
	// the call returns which cand has the best HMM score
	if (PorkPostProcess(pGlyph, pAlt, &AltInfo) == -1)
		return HRCR_OK;

#ifdef HWX_TIMING
	iEndTime = GetTickCount();
	_stprintf(aDebugString, TEXT("HMM run %d\n"), iEndTime - iStartTime); 
	OutputDebugString(aDebugString);
	setMadTiming(iEndTime - iStartTime, MM_HMM);
	iStartTime = GetTickCount();
#endif

	// Call the nnet
	AltInfo.NumCand	=	pAlt->cAlt;
	RunNNet (AltInfo.MinHMM == 0, pRes, &AltInfo, iPrint);

#ifdef HWX_TIMING
	iEndTime = GetTickCount();
	_stprintf(aDebugString, TEXT("PP Net %d\n"), iEndTime - iStartTime); 
	OutputDebugString(aDebugString);
	ASSERT(iEndTime >= iStartTime);
	setMadTiming(iEndTime - iStartTime, MM_PP);
#endif

	// re-sort based on new scores
	qsort(pRes, pAlt->cAlt, sizeof(XRCRESULT), ResultCmp);

	return HRCR_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\linebrk.c ===
// linebrk.c
// Ahmad A. AbdulKader
// Nov. 29th 1999

// breaks a glyph of ink into lines. Goes thru each stroke, passes it to the linebreaker
// the linebreaker decides whether a certain stroke starts a new line or belongs to one of the
// last CAND_LINES lines.

#include <limits.h>

#include "common.h"
#include "nfeature.h"
#include "engine.h"


#define	WORST_SCORE				0			// Worst score
#define	BEST_SCORE				65535		// Best score

#define	MIN_NON_DOT_PTS			5			// Min # of pts for a non-simple stroke 
#define	MIN_COMPLEX_HGT			5			// Min Width for a non-simple stroke 
#define	MIN_COMPLEX_WID			5			// Min height for a non-simple stroke 

#define	CAND_LINES				2			// max # of lines the linebreaker considers for a new stroke

#define HYSTERESIS				0			// hysteresis value used in getting the extrema pts of a stroke

#define MAX_GAUSSIAN			1157		// # of entries in the gaussian table
#define GAUSSIAN_SHIFT_BITS		8			// shift this many bits before looking up the gaussian table

#define STROKE_CHUNK			16			// # of strokes to alloc each time we need room for more strokes in a line
#define PEAK_CHUNK				10			// # of peaks per stroke we allocate everytime


int LineSegNN (int *pFeat);

unsigned short aGaussianDensityTable[MAX_GAUSSIAN]	=	
{
 26144, 26144, 26143, 26142, 26141, 26139, 26137, 26134, 26131, 26128, 26124, 26120, 26115, 26110, 26105, 26099,
 26093, 26087, 26080, 26072, 26065, 26056, 26048, 26039, 26030, 26020, 26010, 25999, 25988, 25977, 25965, 25953,
 25941, 25928, 25915, 25901, 25887, 25873, 25858, 25843, 25827, 25811, 25795, 25778, 25761, 25743, 25725, 25707,
 25689, 25670, 25650, 25630, 25610, 25590, 25569, 25548, 25526, 25504, 25482, 25459, 25436, 25412, 25389, 25364,
 25340, 25315, 25290, 25264, 25238, 25212, 25185, 25158, 25130, 25103, 25074, 25046, 25017, 24988, 24958, 24928,
 24898, 24868, 24837, 24806, 24774, 24742, 24710, 24677, 24644, 24611, 24577, 24543, 24509, 24475, 24440, 24405,
 24369, 24333, 24297, 24260, 24224, 24187, 24149, 24111, 24073, 24035, 23996, 23957, 23918, 23879, 23839, 23799,
 23758, 23717, 23676, 23635, 23593, 23551, 23509, 23467, 23424, 23381, 23338, 23294, 23250, 23206, 23162, 23117,
 23072, 23027, 22981, 22936, 22890, 22844, 22797, 22750, 22703, 22656, 22609, 22561, 22513, 22465, 22416, 22368,
 22319, 22269, 22220, 22170, 22121, 22071, 22020, 21970, 21919, 21868, 21817, 21766, 21714, 21662, 21610, 21558,
 21506, 21453, 21400, 21347, 21294, 21241, 21187, 21133, 21079, 21025, 20971, 20916, 20862, 20807, 20752, 20697,
 20641, 20586, 20530, 20474, 20418, 20362, 20306, 20249, 20193, 20136, 20079, 20022, 19965, 19907, 19850, 19792,
 19735, 19677, 19619, 19561, 19502, 19444, 19385, 19327, 19268, 19209, 19150, 19091, 19032, 18973, 18913, 18854,
 18794, 18734, 18675, 18615, 18555, 18495, 18434, 18374, 18314, 18254, 18193, 18132, 18072, 18011, 17950, 17890,
 17829, 17768, 17707, 17646, 17584, 17523, 17462, 17401, 17339, 17278, 17216, 17155, 17093, 17032, 16970, 16909,
 16847, 16785, 16723, 16662, 16600, 16538, 16476, 16414, 16352, 16291, 16229, 16167, 16105, 16043, 15981, 15919,
 15857, 15795, 15733, 15671, 15609, 15547, 15485, 15424, 15362, 15300, 15238, 15176, 15114, 15052, 14991, 14929,
 14867, 14806, 14744, 14682, 14621, 14559, 14498, 14436, 14375, 14313, 14252, 14191, 14129, 14068, 14007, 13946,
 13885, 13824, 13763, 13702, 13641, 13580, 13520, 13459, 13399, 13338, 13278, 13217, 13157, 13097, 13037, 12977,
 12917, 12857, 12797, 12737, 12678, 12618, 12559, 12499, 12440, 12381, 12322, 12263, 12204, 12145, 12087, 12028,
 11969, 11911, 11853, 11795, 11736, 11678, 11621, 11563, 11505, 11448, 11390, 11333, 11276, 11219, 11162, 11105,
 11048, 10992, 10935, 10879, 10823, 10767, 10711, 10655, 10599, 10544, 10488, 10433, 10378, 10323, 10268, 10213,
 10158, 10104, 10049, 9995, 9941, 9887, 9833, 9780, 9726, 9673, 9620, 9567, 9514, 9461, 9408, 9356,
 9303, 9251, 9199, 9147, 9096, 9044, 8993, 8942, 8890, 8840, 8789, 8738, 8688, 8637, 8587, 8537,
 8487, 8438, 8388, 8339, 8290, 8241, 8192, 8143, 8095, 8046, 7998, 7950, 7902, 7855, 7807, 7760,
 7713, 7666, 7619, 7572, 7526, 7480, 7433, 7387, 7342, 7296, 7251, 7205, 7160, 7115, 7070, 7026,
 6981, 6937, 6893, 6849, 6806, 6762, 6719, 6676, 6633, 6590, 6547, 6505, 6462, 6420, 6378, 6336,
 6295, 6253, 6212, 6171, 6130, 6090, 6049, 6009, 5969, 5929, 5889, 5849, 5810, 5770, 5731, 5692,
 5654, 5615, 5577, 5539, 5501, 5463, 5425, 5387, 5350, 5313, 5276, 5239, 5203, 5166, 5130, 5094,
 5058, 5022, 4987, 4951, 4916, 4881, 4846, 4812, 4777, 4743, 4709, 4675, 4641, 4607, 4574, 4541,
 4507, 4474, 4442, 4409, 4377, 4344, 4312, 4281, 4249, 4217, 4186, 4155, 4124, 4093, 4062, 4031,
 4001, 3971, 3941, 3911, 3881, 3852, 3822, 3793, 3764, 3735, 3707, 3678, 3650, 3621, 3593, 3566,
 3538, 3510, 3483, 3456, 3429, 3402, 3375, 3348, 3322, 3296, 3269, 3243, 3218, 3192, 3166, 3141,
 3116, 3091, 3066, 3041, 3017, 2992, 2968, 2944, 2920, 2896, 2873, 2849, 2826, 2802, 2779, 2756,
 2734, 2711, 2689, 2666, 2644, 2622, 2600, 2578, 2557, 2535, 2514, 2493, 2472, 2451, 2430, 2409,
 2389, 2369, 2348, 2328, 2308, 2289, 2269, 2249, 2230, 2211, 2192, 2173, 2154, 2135, 2116, 2098,
 2080, 2061, 2043, 2025, 2007, 1990, 1972, 1955, 1937, 1920, 1903, 1886, 1869, 1853, 1836, 1820,
 1803, 1787, 1771, 1755, 1739, 1723, 1708, 1692, 1677, 1661, 1646, 1631, 1616, 1601, 1587, 1572,
 1557, 1543, 1529, 1515, 1500, 1486, 1473, 1459, 1445, 1432, 1418, 1405, 1392, 1379, 1366, 1353,
 1340, 1327, 1315, 1302, 1290, 1277, 1265, 1253, 1241, 1229, 1217, 1205, 1194, 1182, 1171, 1159,
 1148, 1137, 1126, 1115, 1104, 1093, 1083, 1072, 1061, 1051, 1041, 1030, 1020, 1010, 1000, 990,
 980, 970, 961, 951, 942, 932, 923, 913, 904, 895, 886, 877, 868, 859, 851, 842,
 833, 825, 816, 808, 800, 792, 783, 775, 767, 759, 752, 744, 736, 728, 721, 713,
 706, 698, 691, 684, 677, 670, 663, 656, 649, 642, 635, 628, 622, 615, 608, 602,
 595, 589, 583, 577, 570, 564, 558, 552, 546, 540, 534, 529, 523, 517, 511, 506,
 500, 495, 489, 484, 479, 473, 468, 463, 458, 453, 448, 443, 438, 433, 428, 424,
 419, 414, 409, 405, 400, 396, 391, 387, 383, 378, 374, 370, 366, 361, 357, 353,
 349, 345, 341, 337, 333, 330, 326, 322, 318, 315, 311, 307, 304, 300, 297, 293,
 290, 287, 283, 280, 277, 273, 270, 267, 264, 261, 258, 255, 252, 249, 246, 243,
 240, 237, 234, 231, 229, 226, 223, 220, 218, 215, 213, 210, 207, 205, 202, 200,
 198, 195, 193, 190, 188, 186, 184, 181, 179, 177, 175, 173, 170, 168, 166, 164,
 162, 160, 158, 156, 154, 152, 150, 148, 147, 145, 143, 141, 139, 138, 136, 134,
 132, 131, 129, 127, 126, 124, 123, 121, 120, 118, 117, 115, 114, 112, 111, 109,
 108, 106, 105, 104, 102, 101, 100, 98, 97, 96, 95, 93, 92, 91, 90, 89,
 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 76, 75, 74, 73, 72, 71,
 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 62, 61, 60, 59, 58, 57,
 57, 56, 55, 54, 54, 53, 52, 51, 51, 50, 49, 49, 48, 47, 47, 46,
 45, 45, 44, 43, 43, 42, 42, 41, 41, 40, 39, 39, 38, 38, 37, 37,
 36, 36, 35, 35, 34, 34, 33, 33, 32, 32, 31, 31, 30, 30, 30, 29,
 29, 28, 28, 27, 27, 27, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23,
 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 19, 18, 18,
 18, 17, 17, 17, 17, 16, 16, 16, 16, 15, 15, 15, 15, 15, 14, 14,
 14, 14, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 11, 11, 11, 11,
 11, 11, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 8,
 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6,
 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5,
 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 0
};


__int64 I64Sqrt(__int64 x)
{
	__int64 n, lastN;

	if (x <= 0)
		return 0i64;

	if (x==1)
		return 1i64;

	n = x >> 1i64;

	do 
	{
		lastN = n;
		n = (n + x/n) >> 1;
	}
	while (n < lastN);

	return n;
}


// multiply two intergers and avoid overflows and undeflows
__int64 IntMult (__int64 v1, __int64 v2)
{
	return (__int64)v1 * (__int64)v2;
}

// returns a measure of a stroke's complexity
int IsComplexStroke (int cPt, POINT *pPt, RECT *pr)
{
	int		i, sum, dx, dy, iComplex;
	int		w	=	pr->right - pr->left;
	int		h	=	pr->bottom - pr->top;

	// ok we'll define complexity as:
	// 65535 * sum (max(dx, dy)) / max (dx, dy)
	if (cPt < MIN_NON_DOT_PTS || (w < MIN_COMPLEX_HGT && h < MIN_COMPLEX_HGT))
		return WORST_SCORE;

	for (i = 1, sum = 0; i < cPt; i++)
	{
		dx	=	abs (pPt[i].x - pPt[i - 1].x);
		dy	=	abs (pPt[i].y - pPt[i - 1].y);

		sum	+=	max (dx, dy);
	}

	// w and sum will have a max of 65535
	w	=	min (max (w, h), USHRT_MAX);
	sum	=	min (sum, USHRT_MAX);

	iComplex	=	BEST_SCORE - (unsigned)(BEST_SCORE - WORST_SCORE) * w / sum;

	return iComplex;
}

// returns a measure of possibility of stroke being the starting stroke of a new line
// based on how much it went back in the x-direction
int IsLineStart(RECT *pr, int cLine, INKLINE *pLine)
{
	int	xLineMax;
	int	xLineMin;
	int	xStrkMid;
	int dx;
	int	iScore;

	if (!cLine)
		return BEST_SCORE;

	xLineMax	=	pLine[cLine - 1].rect.right;
	xLineMin	=	pLine[cLine - 1].rect.left;
	xStrkMid	=	(pr->left + pr->right) / 2;

	if (pr->left > xLineMax)
		return WORST_SCORE;

	if (pr->right < xLineMin)
		return BEST_SCORE;

	dx	=	max (0, (xStrkMid - xLineMin));

	iScore	=	BEST_SCORE - ((BEST_SCORE - WORST_SCORE) * dx) / 
		(xLineMax - xLineMin + 1);

	iScore	=	min (max (WORST_SCORE, iScore), BEST_SCORE);

	return iScore;
}


// initializes the members of a new line
BOOL InitLine (INKLINE *pLine)
{
	memset (pLine, 0, sizeof (INKLINE));
	
	pLine->bRecognized	=	FALSE;
	pLine->dwCheckSum	=	0;

	pLine->rect.left	=	pLine->rect.top		=	INT_MAX;
	pLine->rect.right	=	pLine->rect.bottom	=	INT_MIN;

	pLine->pGlyph		=	NewGLYPH ();

	if (!pLine->pGlyph)
		return FALSE;

	// create an empty line segmentation
	pLine->pResults	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pLine->pResults));
	if (!pLine->pResults)
		return FALSE;

	memset (pLine->pResults, 0, sizeof (*pLine->pResults));

	return TRUE;
}

// finds the peaks points of a stroke (Stole angshuman's code)
int GetStrokePeaks(int cPt, POINT *pPt, int **ppPeak, RECT *pr)
{
	int	i, y, diff, iToggle;
	int	yPrev, yMin, yMax, imin, imax;
	int	*pPeak, cPeak;

	pPeak	=	NULL;
	cPeak	=	0;
	yPrev	=	yMin	=	yMax	=	pPt[0].y;

	if (pr)
	{
		pr->top		=	pr->bottom	=	pPt[0].y;
		pr->left	=	pr->right	=	pPt[0].x;
	}

	iToggle	=	0;
	imax	=	imin	=	0;

	// 1st pt
	pPeak	=	(int *) ExternAlloc (PEAK_CHUNK * sizeof (int));
	if (!pPeak)
	{
		pPeak = NULL;
		return 0;
	}

	pPeak[cPeak++] = 0;
	
	for (i = 1; i < cPt; i++, pPt++)
	{
		if (pr)
		{
			pr->left	=	min (pPt->x, pr->left);
			pr->top		=	min (pPt->y, pr->top);
			pr->right	=	max (pPt->x, pr->right);
			pr->bottom	=	max (pPt->y, pr->bottom);
		}

		y = pPt->y;

		if (y < yMin)
		{
			yMin = y;
			imin = i;
		}

		if (y > yMax)
		{
			yMax = y;
			imax = i;
		}

		if (y > yPrev)
		{
			// y is currently increasing
			diff = y - yMin;
			if (iToggle < 0 && (diff > HYSTERESIS))
			{
				// found a local maxima
				if (!(cPeak % PEAK_CHUNK))
				{
					pPeak	=	(int *) ExternRealloc (pPeak, (cPeak + PEAK_CHUNK) * sizeof (int));
					if (!pPeak)
					{
						pPeak = NULL;
						return 0;
					}
				}

				pPeak[cPeak++] = imin;
				
				iToggle = 1;
				yMax	= y;
				imax	= i;
			}
			else if ((!iToggle) && (diff > HYSTERESIS))
				iToggle = 1;
		}
		else
		{
			// y is currently decreasing
			diff = yMax - y;
			if ((iToggle > 0) && (diff > HYSTERESIS))
			{
				// found a local minima
				if (!(cPeak % PEAK_CHUNK))
				{
					pPeak	=	(int *) ExternRealloc (pPeak, (cPeak + PEAK_CHUNK) * sizeof (int));
					if (!pPeak)
					{
						pPeak = NULL;
						return 0;
					}
				}

				pPeak[cPeak++] = imax;

				iToggle = -1;
				yMin	= y;
				imin	= i;
			}
			else if ((!iToggle) && (diff > HYSTERESIS))
				iToggle = -1;
		}

		yPrev = y;
	}

	// last pt
	if (!(cPeak % PEAK_CHUNK))
	{
		pPeak	=	(int *) ExternRealloc (pPeak, (cPeak + PEAK_CHUNK) * sizeof (int));
		if (!pPeak)
		{
			pPeak = NULL;
			return 0;
		}
	}

	pPeak[cPeak++] = cPt - 1;
	

	(*ppPeak)	=	pPeak;
	return cPeak;
}

BOOL RecomputeModel(INKLINE *pLine)
{
	int			i, cPeak, *pPeak;
	
	if (!pLine->cStroke)
		return TRUE;

	// now construct the line model
	// Avg
	if (pLine->cPt >= 2)
	{
		int			p, n, *py;
		__int64		sum;

		// alloc memory for y peaks
		py	=	(int *) ExternAlloc (pLine->cPt * sizeof (int));
		if (!py)
			return FALSE;

		pLine->rect.left	=	INT_MAX;
		pLine->rect.right	=	INT_MIN;
		pLine->rect.top		=	INT_MAX;
		pLine->rect.bottom	=	INT_MIN;

		for (i = n = 0; i < pLine->cStroke; i++)
		{
			RECT	r;

			// peaks
			cPeak	=	GetStrokePeaks (pLine->pcPt[i], pLine->ppPt[i], &pPeak, &r);
			if (!cPeak)
			{
				ExternFree (py);
				return FALSE;
			}

			pLine->rect.left		=	min (r.left, pLine->rect.left);
			pLine->rect.right		=	max (r.right, pLine->rect.right);
			pLine->rect.top			=	min (r.top, pLine->rect.top);
			pLine->rect.bottom		=	max (r.bottom, pLine->rect.bottom);

			for (p = 0; p < cPeak; p++, n++)
				py[n]	=	pLine->ppPt[i][pPeak[p]].y;
			
			if (cPeak)
				ExternFree (pPeak);
		}

		for (p = 0, sum = 0; p < n; p++)
			sum		+=	(py[p] - pLine->rect.top);

		// the mean 
		pLine->Mean	=	(int) (sum / pLine->cPt) + pLine->rect.top;
		
		// S.D
		sum	=	0;
		for (i = 0; i < pLine->cPt; i++)
		{
			__int64	q	= IntMult(py[i] - pLine->Mean, py[i] - pLine->Mean);
			sum	+=	q;
		}
		
		pLine->SD	=	I64Sqrt (sum / (n - 1));
		
		ExternFree (py);
	}
	else
	{
		pLine->SD		=	0;

		pLine->rect.left		=	INT_MAX;
		pLine->rect.right		=	INT_MIN;
		pLine->rect.top			=	INT_MAX;
		pLine->rect.bottom		=	INT_MIN;

		for (i = 0; i < pLine->cStroke; i++)
		{
			RECT	r;

			// peaks
			cPeak	=	GetStrokePeaks (pLine->pcPt[i], pLine->ppPt[i], &pPeak, &r);
			if (!cPeak)
				return FALSE;

			pLine->rect.left		=	min (r.left, pLine->rect.left);
			pLine->rect.right		=	max (r.right, pLine->rect.right);
			pLine->rect.top			=	min (r.top, pLine->rect.top);
			pLine->rect.bottom		=	max (r.bottom, pLine->rect.bottom);

			if (cPeak)
				ExternFree (pPeak);
		}

	}

	return TRUE;
}

BOOL AddNewStroke2Line (int cPt, POINT *pPt, FRAME *pFrame, INKLINE *pLine)
{
	int			cPeak, *pPeak;
	RECT		r;
	//int		iShift;

	// add the new stroke to our buffers
	if (!(pLine->cStroke % STROKE_CHUNK))
	{
		pLine->pcPt	=	(int *) ExternRealloc (pLine->pcPt, 
			(pLine->cStroke + STROKE_CHUNK) * sizeof (int));

		if (!pLine->pcPt)
			return FALSE;

		pLine->ppPt	=	(POINT **) ExternRealloc (pLine->ppPt, 
			(pLine->cStroke + STROKE_CHUNK) * sizeof (POINT *));

		if (!pLine->ppPt)
			return FALSE;
	}

	pLine->pcPt[pLine->cStroke]			=	cPt;
	pLine->ppPt[pLine->cStroke]			=	pPt;
	pLine->cStroke++;

	ASSERT(pLine->pGlyph);
	// add the from to the line Glyph
	if (!AddFrameGLYPH (pLine->pGlyph, pFrame))
		return FALSE;

	// get the peaks of the new stroke
	cPeak	=	GetStrokePeaks (cPt, pPt, &pPeak, &r);
	if (!cPeak)
		return FALSE;

	if (cPeak)
		ExternFree (pPeak);

	// update # of pts
	pLine->cPt			+=	cPeak;

	// update the check sum
	pLine->dwCheckSum	+=	cPt;

	return RecomputeModel(pLine);
}

int GetAvgDist2Line(int cPt, POINT *pPt, INKLINE *pLine)
{
	__int64	sum;
	int		i, cPeak;
	int		*pPeak;

	cPeak	=	GetStrokePeaks (cPt, pPt, &pPeak, NULL);
	if (!cPeak)
		return INT_MAX;

	for (i = 0, sum = 0; i < cPeak; i++)
		sum	+=	(pPt[pPeak[i]].y - pLine->Mean);

	sum	/=	cPeak;
	
	if (cPeak)
		ExternFree (pPeak);

	return (int)sum;
}

__int64 GetProbLine (int cPt, POINT *pPt, INKLINE *pLine)
{
	__int64		d, t, sum, SD;
	int			i, cPeak, w, h;
	int			*pPeak;
	RECT		r;

	cPeak	=	GetStrokePeaks (cPt, pPt, &pPeak, &r);
	if (!cPeak)
		return WORST_SCORE;

	w	=	r.right - r.left;
	h	=	r.bottom - r.top;

	for (i = 0, sum = 0; i < cPeak; i++)
	{
		d	=	pPt[pPeak[i]].y;
		sum	+=	d;
	}

	sum	/=	cPeak;

	sum	=	abs (sum - pLine->Mean);

	if (cPeak > 0)
		ExternFree (pPeak);

	SD	=	pLine->SD;
	if (SD == 0)
		return WORST_SCORE;

	// index the gaussian table
	t	=	(sum << GAUSSIAN_SHIFT_BITS) / SD;

	if (t >= MAX_GAUSSIAN)
		return WORST_SCORE;

	t	=	aGaussianDensityTable[t];

	// scale the value by S.D
	return t / SD;
}


int GetLineVertOverlap (INKLINE *pLine, RECT *prect)
{
	return (min (pLine->rect.bottom, prect->bottom) - 
		max (pLine->rect.top, prect->top));
}

// make a line decision after the introduction of a new stroke iStrk
int LineSepDecide (FRAME *pFrame, FRAME *pPrevFrame, LINEBRK *pLineBrk)
{
	int			j, iStLine, cPat = 0, iLine, iOutput;
	__int64		prb;
	int			prbFitsLineModel[CAND_LINES], prbComplexStroke, prbLineStart;
	int			cCandLine, aCandLine[CAND_LINES], NormHgt, xMid, yMid;
	int			iOvrlap[CAND_LINES], xDist[CAND_LINES], yDist[CAND_LINES];

	int		cPt		=	pFrame->info.cPnt;
	POINT	*pPt	=	pFrame->rgrawxy;

	RECT	rect, rectPrev;

	int		aFeat[40];

	// the 1st stroke is never featurized
	if (pLineBrk->cLine < 1)
		return -1;

	rectPrev	=	*(RectFRAME (pPrevFrame));
	rectPrev.right--;
	rectPrev.bottom--;

	rect		=	*(RectFRAME (pFrame));
	rect.right--;
	rect.bottom--;

	prbComplexStroke	=	IsComplexStroke (cPt, pPt, &rect);
	prbLineStart		=	IsLineStart (&rect, pLineBrk->cLine, pLineBrk->pLine);

	NormHgt				=	(pLineBrk->pLine[pLineBrk->cLine -1].rect.bottom - 
		pLineBrk->pLine[pLineBrk->cLine -1].rect.top + 1);

	xMid				=	(rect.right + rect.left) / 2;
	yMid				=	(rect.bottom + rect.top) / 2;

	// find the closest CAND_LINES lines
	//iStLine				=	0;
	iStLine				=	max (0, pLineBrk->cLine - CAND_LINES);

	for (j = 0; j < CAND_LINES; j++)
	{
		aCandLine[j]		=	-1;
		prbFitsLineModel[j]	=	WORST_SCORE;
	}

	cCandLine	=	0;


	for (j = pLineBrk->cLine -1; j >= iStLine ; j--)
	{
		prb	=	GetProbLine (cPt, pPt, pLineBrk->pLine + j);

		aCandLine[cCandLine]			=	j;

		if (prb > INT_MAX)
			prb	=	INT_MAX;

		prbFitsLineModel[cCandLine]	=	(int) prb;

		if (pLineBrk->pLine[j].SD == 0)
		{
			iOvrlap[cCandLine]	=	0;
			xDist[cCandLine]	=	0;
			yDist[cCandLine]	=	0;
		}
		else
		{
			int iovr = GetLineVertOverlap (pLineBrk->pLine + j, &rect);

			iOvrlap[cCandLine]			=	65535 * iovr / 
				(pLineBrk->pLine[j].rect.bottom - pLineBrk->pLine[j].rect.top + 1);

			iOvrlap[cCandLine]			=	max (min (iOvrlap[cCandLine],  65535), -65535);

			xDist[cCandLine]	=	6553 * (xMid - pLineBrk->pLine[j].rect.left) /
				(pLineBrk->pLine[j].rect.bottom - pLineBrk->pLine[j].rect.top + 1);

			xDist[cCandLine]			=	max (min (xDist[cCandLine], 6553), -6553);

			yDist[cCandLine]	=	6553 * (yMid - pLineBrk->pLine[j].rect.bottom) / 
				(pLineBrk->pLine[j].rect.bottom - pLineBrk->pLine[j].rect.top + 1);

			yDist[cCandLine]			=	max (min (yDist[cCandLine], 6553), -6553);
		}

		cCandLine++;
	}

	// featurize

	// 0- Stroke Complexity
	aFeat[0]	=	prbComplexStroke;

	// 1 & 2- Size relative to BBox of the ink
	aFeat[1]	=	65535 * (rect.bottom - rect.top + 1) / NormHgt;
	aFeat[2]	=	65535 * (rect.right - rect.left + 1) / NormHgt;

	// 3- dx of mid strk from mid of prev stroke
	// 4- dy of mid strk from mid of prev stroke
	aFeat[3] =	32767 + (32767 * (xMid - ((rectPrev.right + rectPrev.left) / 2)) / 
		NormHgt);

	aFeat[4] =	32767 + (32767 * (yMid - ((rectPrev.bottom + rectPrev.top) / 2)) / 
		NormHgt);


	// 3- Prb of fitting line model
	// 4- SD of line model
	// 5- Stroke up or below line
	// 6- Slope of line 0
	// 7- intercept of line 0 relative to hgt of ink
	// ...
	// next cand line 8-12
	for (j = 0; j < CAND_LINES; j++)
	{
		if (aCandLine[j] == -1)
		{
			aFeat[5	+ j * 7]	=	0;
			aFeat[6 + j * 7]	=	0;
			aFeat[7 + j * 7]	=	0;
			aFeat[8 + j * 7]	=	0;
			aFeat[9 + j * 7]	=	0;
			aFeat[10 + j * 7]	=	0;
			aFeat[11 + j * 7]	=	0;
		}
		else
		{
			int	d	=	GetAvgDist2Line (cPt, pPt, pLineBrk->pLine + aCandLine[j]);

			aFeat[5	+ j * 7]	=	prbFitsLineModel[j] * 100;
			aFeat[6 + j * 7]	=	(unsigned short) min (65535i64, IntMult (pLineBrk->pLine[aCandLine[j]].SD ,65535) / 
				(pLineBrk->pLine[aCandLine[j]].rect.bottom - pLineBrk->pLine[aCandLine[j]].rect.top + 1));
			aFeat[7 + j * 7]	=	d > 0 ? 0 : 65535;
			aFeat[8 + j * 7]	=	32767;
			aFeat[9 + j * 7]	=	iOvrlap[j];
			aFeat[10 + j * 7]	=	xDist[j];
			aFeat[11 + j * 7]	=	yDist[j];
		}
	}
	
	// send to net, output is 0 based index of the line
	iOutput	=	LineSegNN (aFeat);

	cPat++;

	if (iOutput ==	CAND_LINES)
		iLine	=	-1;
	else
		iLine	=	aCandLine[iOutput];

	return iLine;
}


// go thru all strokes and construct the lines
// returns #of lines, and -1 on failure
int NNLineSep(GLYPH *pGlyph, LINEBRK *pLineBrk)
{
	int		i, xOff, yOff;
	UINT	j;
	GLYPH	*pgl;
	FRAME	*pPrevFrame	=	NULL;
	int		cStroke	=	CframeGLYPH (pGlyph);

	// init structure
	memset (pLineBrk, 0, sizeof (LINEBRK));

	// get glyph bounding rect, the common library func adds 1 pixel, we do not want that
	GetRectGLYPH (pGlyph, &pLineBrk->Rect);
	pLineBrk->Rect.right--;
	pLineBrk->Rect.bottom--;

	// offset to middle
	xOff	=	pLineBrk->Rect.left;
	yOff	=	pLineBrk->Rect.top;

	// offset glyph 
	pgl	=	pGlyph;

	for (i = 0; i < cStroke; i++, pgl = pgl->next)
	{
		FRAME	*pFrame	=	pgl->frame;

		for (j = 0; j < pFrame->info.cPnt; j++)
		{
			pFrame->rgrawxy[j].x	-=	xOff;
			pFrame->rgrawxy[j].y	-=	yOff;
		}

		pFrame->rect.left	-=	xOff;
		pFrame->rect.right	-=	xOff;
		pFrame->rect.top	-=	yOff;
		pFrame->rect.bottom	-=	yOff;
	}

	GetRectGLYPH (pGlyph, &pLineBrk->Rect);
	pLineBrk->Rect.right--;
	pLineBrk->Rect.bottom--;
	
	// for all strokes
	pgl	=	pGlyph;

	for (i = 0; i < cStroke; i++, pgl = pgl->next)
	{
		FRAME	*pFrame	=	pgl->frame;

		// pass the current and the prev frame to the Line breaker to make a decision
		int		iLine	=	LineSepDecide (pFrame, pPrevFrame, pLineBrk);

		// It thinks that the last stroke starts a new line
		if (iLine == -1)
		{
			pLineBrk->pLine	=	(INKLINE *) ExternRealloc (pLineBrk->pLine, (pLineBrk->cLine + 1) * sizeof (INKLINE));
			if (!pLineBrk->pLine)
				return -1;

			if (!InitLine (pLineBrk->pLine + pLineBrk->cLine))
				return -1;

			iLine				=	pLineBrk->cLine;
			pLineBrk->cLine++;
		}

		// add stroke to line
		if (!AddNewStroke2Line (pFrame->info.cPnt, pFrame->rgrawxy, pFrame, pLineBrk->pLine + iLine))
			return -1;
		
		// save the last frame
		pPrevFrame	=	pFrame;
	}

	// de-offset glyph 
	pgl	=	pGlyph;

	for (i = 0; i < cStroke; i++, pgl = pgl->next)
	{
		FRAME	*pFrame	=	pgl->frame;

		for (j = 0; j < pFrame->info.cPnt; j++)
		{
			pFrame->rgrawxy[j].x	+=	xOff;
			pFrame->rgrawxy[j].y	+=	yOff;
		}

		pFrame->rect.left	+=	xOff;
		pFrame->rect.right	+=	xOff;
		pFrame->rect.top	+=	yOff;
		pFrame->rect.bottom	+=	yOff;
	}

	return pLineBrk->cLine;	
}

// Computes the line number of a glyph from a multi-line guide.
int GuideLine(const GUIDE *pGuide, FRAME *pFrame)
{
	POINT *pPt = RgrawxyFRAME(pFrame);
	int cPt = CrawxyFRAME(pFrame);
	int line = 0;
	int c = cPt;

	// could this overflow?

	for (; cPt; cPt--, pPt++)
		line += pPt->y;

	line = line / c;

	line = (line - pGuide->yOrigin) / pGuide->cyBox;

	if (line < 0)
		line = 0;
	else if (pGuide->cVertBox <= line)
		line = pGuide->cVertBox - 1;

	return line;
}

// Guide based line sep
int GuideLineSep(GLYPH *pGlyph, GUIDE *pGuide, LINEBRK *pLineBrk)
{
	int	i;

	// init structure
	memset (pLineBrk, 0, sizeof (LINEBRK));

	for (; pGlyph; pGlyph = pGlyph->next)
	{
		FRAME *pFrame = pGlyph->frame;
		int line = GuideLine(pGuide, pFrame);

		if (line >= pLineBrk->cLine)
		{
			pLineBrk->pLine	=	(INKLINE *) ExternRealloc (pLineBrk->pLine, (line + 1) * sizeof (INKLINE));
			if (!pLineBrk->pLine)
				return -1;

			for (i = pLineBrk->cLine; i <= line; i++)
			{
				if (!InitLine (pLineBrk->pLine + i))
					return -1;
			}

			pLineBrk->cLine = line + 1;
		}

		if (!AddNewStroke2Line (pFrame->info.cPnt, pFrame->rgrawxy, pFrame, pLineBrk->pLine + line))
				return -1;
	}

	return pLineBrk->cLine;
}


// Compare a new line breaking structure to an old one. 
// Label all new lines (or ones that changed) as dirty
void CompareLineBrk (LINEBRK *pNewLineBrk, LINEBRK *pOldLineBrk)
{
	INKLINE		*pNewLine, *pOldLine;
	int			iOldLine, iLine;
	GLYPH		*pglNew, *pglOld;

	// find out the dirty lines and the ones that did not change
	for (iLine = 0; iLine < pNewLineBrk->cLine; iLine++)
	{
		pNewLine	=	pNewLineBrk->pLine + iLine;

		// if a line is not empty
		if (pNewLine->pGlyph && pNewLine->cStroke > 0)
		{
			// for each new line try to find an identical line in the old line regime if there exists one
			pOldLine	=	pOldLineBrk->pLine;
			for (iOldLine = 0; iOldLine < pOldLineBrk->cLine; iOldLine++, pOldLine++)
			{
				// check necessary conditions
				if	(	pNewLine->dwCheckSum != pOldLine->dwCheckSum ||
						pNewLine->cStroke != pOldLine->cStroke
					)
				{
					continue;
				}
				
				// compare the glyphs now (compare the frame Ids)
				// could check for more than just frame ID.
				pglNew	=	pNewLine->pGlyph;
				pglOld	=	pOldLine->pGlyph;

				while (pglNew && pglOld && pglNew->frame->iframe == pglOld->frame->iframe)
				{
					pglOld	=	pglOld->next;
					pglNew	=	pglNew->next;
				}

				// did the glyphs fully match
				if (!pglNew && !pglOld)
				{
					break;
				}
			}

			// did we find a match,
			// YES: So this line has not changed : 'Clean'
			if (iOldLine < pOldLineBrk->cLine)
			{
				// we want to keep the old linesegm structre, so we'll swap it
				if (pNewLine->pResults)
				{
					FreeLineSegm (pNewLine->pResults);
					ExternFree (pNewLine->pResults);
				}

				pNewLine->pResults		=	pOldLine->pResults;
				pNewLine->bRecognized	=	pOldLine->bRecognized;
				pOldLine->pResults		=	NULL;
			}
			// NO: This is a dirty line
			else
			{
				pNewLine->bRecognized	=	FALSE;
			}
		}
		// empty lines will be labeled recognized
		else
		{
			pNewLine->bRecognized		=	TRUE;
		}
	}
}

// translates and scales a line of ink pre-recognition,
GLYPH *TranslateAndScaleLine (INKLINE *pLine, GUIDE *pGuide)
{
	GLYPH	*pScaledGlyph	=	NULL;
	int		yDev;
	BOOL	bRet;
	
	// sanity checks
	if (!pLine || !pLine->pGlyph)
	{
		return NULL;
	}

	// clone the line glyph
	pScaledGlyph	=	CopyGlyph (pLine->pGlyph);
	if (!pScaledGlyph)
	{
		return NULL;
	}

	// do any necessary ink translation
	bRet = CheckInkBounds (pScaledGlyph, pGuide);

	// normalize ink if have not been normalized before
	if (TRUE == bRet && pGuide)
	{
		bRet = GuideNormalizeInk (pGuide, pScaledGlyph);		
	}
	else if (TRUE == bRet)
	{
		yDev =	YDeviation (pScaledGlyph);
		bRet = NormalizeInk (pScaledGlyph, yDev);		
	}

	if (TRUE == bRet)
	{
		return pScaledGlyph;
	}

	if (pScaledGlyph)
	{
		DestroyFramesGLYPH (pScaledGlyph);
		DestroyGLYPH (pScaledGlyph);
	}
	return NULL;
}


// Creates a linebrk structure where all the ink lines in one line
BOOL CreateSingleLine (XRC *pxrc)
{
	GLYPH	*pGlyph;
	
	// Allocate a line breaking structure in the XRC if needed
	if (!pxrc->pLineBrk)
	{
		// alloc a line brk structure if needed
		pxrc->pLineBrk	=	(LINEBRK *) ExternAlloc (sizeof (*pxrc->pLineBrk));
		if (!pxrc->pLineBrk)
		{
			return FALSE;
		}		
	}
	else
	{
		FreeLines (pxrc->pLineBrk);
	}

	// init
	memset (pxrc->pLineBrk, 0, sizeof (*pxrc->pLineBrk));

	// create the single line
	pxrc->pLineBrk->pLine	=	(INKLINE *) ExternAlloc (sizeof (INKLINE));
	if (!pxrc->pLineBrk->pLine)
	{
		return FALSE;
	}

	pxrc->pLineBrk->cLine	=	1;

	if (!InitLine (pxrc->pLineBrk->pLine))
	{
		return FALSE;
	}


	pGlyph	=	pxrc->pGlyph;
	while (pGlyph)
	{
		// add stroke to line
		if	(	!AddNewStroke2Line	(	pGlyph->frame->info.cPnt, 
									pGlyph->frame->rgrawxy, 
									pGlyph->frame, 
									pxrc->pLineBrk->pLine
								)
			)
		{
			return FALSE;
		}

		pGlyph	=	pGlyph->next;
	}

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\porkypost.c ===
// PorkyPost.c
// James A. Pittman
// November 6, 1997

// Interface to the Porky HMM English cursive word recognizer post-processor.

#include <stdlib.h>
#include <stdio.h>

#include "common.h"

#include "nfeature.h"
#include "engine.h"

#include "PorkyPost.h"

#include "HMMp.h"
#include "Preprocess.h"
#include "HMMGeo.h"

extern int UnigramCost(char *szWord);

// Returns a documentation string describing all recognition settings.
#if FEATUREMODE != 'd'
#error PorkyPostDoc has wrong feature mode.
#endif

const char *PorkyPostDoc()
{
	static char doc[1024];

#ifdef NDEBUG
#define BUILD "Retail"
#else
#define BUILD "Debug"
#endif

	sprintf(doc,
			"Porky Post-Processor (%s): CodeBook %d, HMMModels %d (%d models)\n",
			BUILD, VQKey, HMMKey, MAXHMMMODELS);

	return doc;
}

#if !defined(ROM_IT) || !defined(NDEBUG)
int PorkPostInit(void)
{
	const TCHAR *err = HMMValidate();

	if (err)
	{
		MessageBox(NULL, err, TEXT("Error"), MB_OK | MB_ICONWARNING);
		return 0;
	}

	return 1;
}
#endif

// Does the Porky Post-Preprocessing.  Caller should pass in a glyph, and a
// set of answers with scores.  If we can preprocess the ink we will run
// the post-processor, adjust the scores, and resort them.

#if MAXFEATURES != 2
#error PorkPostProcess() written only for 2-feature version.
#endif

int PorkPostProcess(GLYPH *pGlyph, ALTERNATES *pAlt, ALTINFO *pAltInfo)
{
	unsigned int i;
	unsigned int cTokens;
	FRAME *pPrep;
	CODE *pTokens;
	XRCRESULT *pRes = pAlt->aAlt;
	
	// validate pointer
	if (!pAltInfo)
		return -1;

	// This code assumes we have at least 1 alternate.
	ASSERT(pAlt->cAlt);

	// If this returns 0, then either we have only 1 point,
	// and can't make deltas, or we ran out of memory.
	cTokens = Preprocess(pGlyph, &pPrep, &pTokens);

	if (cTokens)
	{
		for (i = 0; i < pAlt->cAlt; i++, pRes++)
		{
			unsigned char wordx[256], wordxx[256];

			// Preset the worst score, in case any of the functions fail.

			pAltInfo->aCandInfo[i].NN		=	MAX_NN;
			pAltInfo->aCandInfo[i].Height	=	MAX_HEIGHT;
			pAltInfo->aCandInfo[i].HMM		=	MAX_HMM;
			pAltInfo->aCandInfo[i].Aspect	=	MAX_ASPECT;
			pAltInfo->aCandInfo[i].BaseLine	=	MAX_BLINE;
			pAltInfo->aCandInfo[i].Unigram	=	MAX_UNIGRAM;

			if (HMMAlias(pRes->szWord, wordx, 256))
			{
				if (HMMDecoration(wordx, wordxx, 256))
				{
					int hmm, aspect, height, y;

					HMMPostProcessor(wordxx, pPrep, pTokens, cTokens,
									 &hmm, &aspect, &height, &y);

					if (hmm == WORSTPROB)
					{
						pAltInfo->aCandInfo[i].NN		=	MAX_NN;
						pAltInfo->aCandInfo[i].Unigram	=	MAX_UNIGRAM;
					}
					else
					{
						pAltInfo->aCandInfo[i].NN		=	pRes->cost;
						pAltInfo->aCandInfo[i].Unigram	=	UnigramCost(pRes->szWord);
					}

					pAltInfo->aCandInfo[i].HMM		=	min(MAX_HMM, hmm);
					pAltInfo->aCandInfo[i].Height	=	min(MAX_HEIGHT, height);
					pAltInfo->aCandInfo[i].BaseLine	=	min(MAX_BLINE, y);
					pAltInfo->aCandInfo[i].Aspect	=	min(MAX_ASPECT, aspect);
					pAltInfo->aCandInfo[i].WordLen	=	strlen(pRes->szWord);
				}
			}

			// get the minimum value of each 6 members
			if (!i)
			{
				pAltInfo->MinAspect		=	0;
				pAltInfo->MinBaseLine	=	0;
				pAltInfo->MinHgt		=	0;
				pAltInfo->MinHMM		=	0;
				pAltInfo->MinUnigram	=	0;
				pAltInfo->MinNN			=	0;
			}
			else
			{
				if (pAltInfo->aCandInfo[i].NN		< pAltInfo->aCandInfo[pAltInfo->MinNN].NN)
					pAltInfo->MinNN = i;

				if (pAltInfo->aCandInfo[i].HMM		< pAltInfo->aCandInfo[pAltInfo->MinHMM].HMM)
					pAltInfo->MinHMM = i;

				if (pAltInfo->aCandInfo[i].Unigram	< pAltInfo->aCandInfo[pAltInfo->MinUnigram].Unigram)
					pAltInfo->MinUnigram = i;

				if (pAltInfo->aCandInfo[i].Aspect	< pAltInfo->aCandInfo[pAltInfo->MinAspect].Aspect)
					pAltInfo->MinAspect = i;

				if (pAltInfo->aCandInfo[i].BaseLine < pAltInfo->aCandInfo[pAltInfo->MinBaseLine].BaseLine)
					pAltInfo->MinBaseLine = i;

				if (pAltInfo->aCandInfo[i].Height	< pAltInfo->aCandInfo[pAltInfo->MinHgt].Height)
					pAltInfo->MinHgt = i;
			}
		}

		DestroyFRAME(pPrep);
		ExternFree(pTokens);

		// this should pass to the postprocessor
		return 1;
	}
	// If there is only 1 frame, with only 1 point, this must be a period
	else if (!(pGlyph->next) && (CrawxyFRAME(pGlyph->frame) == 1))
	{
		for (i = 0; i < pAlt->cAlt; i++, pRes++)
		{
			if (!((pRes->szWord[0] == '.') && (pRes->szWord[1] == '\0')))
				pRes->cost	=	INT_MAX;
			else
				pRes->cost	=	0;
		}

		// do not pass this to the postprocessor
		return -1;
	}
	else
	{
		return -1;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\panel.h ===
// Panel.h
// James A. Pittman
// July 23, 1998

// Recognizes an entire panel at once by looping over lines, then looping over
// ink blobs that have large gaps between them, and finally looping over the strokes
// within a blob, using recognition scores to help decide what is a word and what is not.

// Eventually we should include a look at the gaps between the strokes, and include
// the mean and std dev from such breaks from labeled data.

#ifndef _PANEL_
#define _PANEL_

// These are already included by those who include this header file,
// and they are not protected from being included twice.

//#include "nfeature.h"
//#include "engine.h"

#include "common.h"

// Number of alternates to generate in Word and panel mode
#define MAX_ALT_WORD		(10)
#define MAX_ALT_PHRASE		(10)

//extern int RecognizePanel(XRC *pxrc, unsigned char *szPanel, int max, __int64 *pCost);
extern int		WordModeRecognize	(XRC *pxrc);
extern int		PanelModeRecognize	(XRC *pxrc, DWORD dwRecoMode);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\panel.c ===
// Panel.c
// James A. Pittman
// July 23, 1998

// Recognizes an entire panel at once by looping over lines, then looping over
// ink blobs that have large gaps between them, and finally looping over the strokes
// within a blob, using recognition scores to help decide what is a word and what is not.

#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "common.h"
#include "inferno.h"

#include "nfeature.h"
#include "engine.h"
#include "Panel.h"

#include "PorkyPost.h"
#include "combiner.h"

#include "Normal.h"
#include "linebrk.h"
#include "privdefs.h"
#include "recoutil.h"

#define STREQ(s,t) !strcmp(s,t)
#define STRDIFF(s,t) strcmp(s,t)

#define PHRASE_GROW_SIZE			4

#define NOT_RECOGNIZED  "\a"

#define BASELIMIT 700				// scale ink to this guide hgt if we have a guide
#define MAX_SCALE 10				// We will not scale more than this.



#define MAXPHRASES 50

static int _cdecl ResultCmp(const XRCRESULT *a, const XRCRESULT *b)
{
	if (a->cost > b->cost)
		return(1);
	else if (a->cost < b->cost)
		return(-1);

	return(0);
}

// Add a map structere to the XRCRESULT containing the stroke
// iDs in the glyph
static int AddStrokeIdFromGlyph(GLYPH *pGlyph, XRCRESULT *pAns)
{
	int		ret = HRCR_ERROR;

	ASSERT(pGlyph);
	ASSERT(pAns);
	ASSERT(pAns->pMap);

	if (pGlyph && pAns && pAns->pMap)
	{
		int		iLastIdx = -1, *piIdx;
		
		pAns->pMap->cStrokes = CframeGLYPH(pGlyph);
		piIdx = pAns->pMap->piStrokeIndex = (int *)ExternAlloc(sizeof(*pAns->pMap->piStrokeIndex) * pAns->pMap->cStrokes);
		
		ASSERT(pAns->pMap->piStrokeIndex);
		if (!pAns->pMap->piStrokeIndex)
		{
			return HRCR_MEMERR;
		}
		
		// Add the strokes in ascending order
		for ( ; pGlyph ; pGlyph = pGlyph->next)
		{
			if (pGlyph->frame)
			{
				int		iFrame = pGlyph->frame->iframe;
				
				ASSERT(iFrame != iLastIdx);
				
				if (iFrame < iLastIdx)
				{
					int		*piInsert = pAns->pMap->piStrokeIndex;
					
					// Search to find insertion point
					for (  ; piInsert < piIdx ; ++piInsert)
					{
						if (iFrame < *piInsert)
						{
							int		iSwap = *piInsert;
							
							*piInsert = iFrame;
							iFrame = iSwap;
						}
					}
				}
				
				iLastIdx = *piIdx = iFrame;
				++piIdx;
				
				ASSERT (piIdx - pAns->pMap->piStrokeIndex <= pAns->pMap->cStrokes);
			}
		}

		ret = HRCR_OK;
	}

	return ret;
}
// This function was pulled out of MadHwxProcess(), and then modified.  I took out the test that
// allows us to skip the post processor when its answer appears certain, so that the numerical
// score on the top 1 word is on the same scale for every word.


static int RecognizeWord(XRC *pxrc, int yDev)
{
	XRCRESULT *pAns;
	int cAns, ret;

	ret = InfProcessHRC((HRC)pxrc, yDev);

	if (HRCR_OK != ret)
		return ret;

	pAns = pxrc->answer.aAlt;
	cAns = pxrc->answer.cAlt;

	// Inferno, if it cannot featurize the ink, 
	// Fill in 0 words recognized

	if (!(pxrc->nfeatureset) || 0 == cAns)
	{
		GLYPH		*pGlyph = pxrc->pGlyph;

		if (pAns[0].szWord)
		{
			ExternFree(pAns[0].szWord);
		}

		pAns[0].cost = INT_MAX;

		pAns->szWord = (char *)ExternAlloc(sizeof(*pAns->szWord)*(strlen(NOT_RECOGNIZED) + 1));
		ASSERT(pAns->szWord);
		if (!pAns->szWord)
		{
			return HRCR_MEMERR;
		}
		strcpy(pAns->szWord , NOT_RECOGNIZED);

		pxrc->answer.cAlt = 1;
		pAns->cWords = 1;
		pAns->pXRC = pxrc;

		pAns->pMap = ExternAlloc(sizeof(*pAns->pMap));
		ASSERT(pAns->pMap);
		if (!pAns->pMap)
		{
			ret = HRCR_MEMERR;
			goto fail;
		}
		pAns->pMap->start = 0;
		pAns->pMap->len = strlen(pAns->szWord);

		memset(&pAns->pMap->alt, 0, sizeof(pAns->pMap->alt));
		
		ret = AddStrokeIdFromGlyph(pGlyph, pAns);
	}

	return ret;

fail:
	if (pAns->szWord)
	{
		ExternFree(pAns->szWord);
	}

	return ret;
}


//!!! BUG - This should be setting up the HRC from the values set in the xrc
//!!! for madcow.  We need that xrc passed down to here and set the exact 
//!!! same alc, dict mode, lang mode etc in from it.

// set up a the HRC for word recognition (Do not allow white space)
static int initWordHRC(XRC *pMainXrc, GLYPH	*pGlyph, HRC *phrc)
{
	int		cFrame;
	HRC		hrc = CreateCompatibleHRC((HRC)pMainXrc, NULL);
	int		ret = HRCR_OK;
	XRC		*pxrcNew;

	*phrc = (HRC)0;

	if (!hrc)  // don't go to failure as we do not need to destroy an HRC
		return HRCR_MEMERR;

	// disable ALC_WHITE
	//ret = SetAlphabetHRC(hrc, pMainXrc->alc & ~ALC_WHITE, NULL);
	ret = SetHwxFlags(hrc, pMainXrc->flags | RECOFLAG_WORDMODE);
	if (ret != HRCR_OK)
		goto failure;

	pxrcNew	=	(XRC *) hrc;
	pxrcNew->answer.cAltMax = MAX_ALT_WORD;

	// build glyph of specific frames inside hrc
	// we later may be able to alter the API to allow additional frames to be
	// added after recognition has already been run

	for ( cFrame = 0 ; pGlyph; pGlyph = pGlyph->next, ++cFrame)
	{
		FRAME *pFrame = pGlyph->frame, *pAddedFrame;
		ASSERT(pFrame);

		if (!pFrame)
		{
			ret = HRCR_ERROR;
			goto failure;
		}

		ret = AddPenInputHRC(hrc, RgrawxyFRAME(pFrame), NULL, 0, &(pFrame->info));
		if (ret != HRCR_OK)
			goto failure;

		// Keep globally allocated frame numbers
		if ( (pAddedFrame = FrameAtGLYPH(((XRC *)hrc)->pGlyph, cFrame)))
		{
			pAddedFrame->iframe = pFrame->iframe;
			pAddedFrame->rect = pFrame->rect;
		}
	}

	*phrc = hrc;
	return HRCR_OK;

failure:
	DestroyHRC(hrc);
	*phrc = (HRC)0;
	return ret;
}



// set up a the HRC for phrase recognition (Allow white space)
static int initPhraseHRC(XRC *pMainXrc, GLYPH *pGlyph, HRC *phrc)
{
	int ret = HRCR_OK;

	if (HRCR_OK == initWordHRC(pMainXrc, pGlyph, phrc))
	{
		XRC	*pxrcNew	=	(XRC *)(*phrc);

		ret = SetHwxFlags(*phrc, pMainXrc->flags & ~RECOFLAG_WORDMODE);
		pxrcNew->answer.cAltMax = MAX_ALT_PHRASE;
		
		if (ret != HRCR_OK)
			goto failure;
	}

	return HRCR_OK;

failure:
	DestroyHRC(*phrc);
	*phrc = (HRC)0;
	return ret;
}



// Special efficient version of ClearRCRESALT() that knows
// there are no mappings.

static void clearAlt(ALTERNATES *p)
{
	unsigned int i;

	for (i = 0; i < p->cAlt; i++)
		ExternFree(p->aAlt[i].szWord);
	p->cAlt = 0;
}

/******************************************************************
* 
* isolate
*
* Store away a recognized isolated word together with all its alternates
* in the answer set
*
**********************************************************************/
static int isolate(XRC *pXrc, ANSWER_SET *pAnsSet)
{
	ALTERNATES		*pAlt;

	// Only add cases that were succesfully recognized
	if (pXrc->answer.cAlt > 0)
	{
		if (pAnsSet->cAnsSets >= pAnsSet->capSegments)
		{
			pAnsSet->pAlternates = ExternRealloc(pAnsSet->pAlternates,  sizeof(*pAnsSet->pAlternates) * (pAnsSet->cAnsSets + PHRASE_GROW_SIZE) );
		}
		
		ASSERT(pAnsSet->pAlternates);
		if (! pAnsSet->pAlternates)
		{
			return HRCR_MEMERR;
		}
		
		pAlt = pAnsSet->pAlternates + pAnsSet->cAnsSets;
		
		// Copy over the answers
		memcpy(pAlt, &pXrc->answer, sizeof(*pAnsSet->pAlternates));
		
		// Because we copied over the pointers to allocated
		// memory make sure allocated buffers in the XRC are not freed
		memset(&(pXrc->answer), 0, sizeof(pXrc->answer));
		
		++pAnsSet->cAnsSets;

#ifndef NDEBUG
	ValidateALTERNATES(pAlt);
#endif

	}

	DestroyHRC((HRC)pXrc);

	return HRCR_OK;
}




/*******************************************************************************
 *
 * ProcessPhraseAlts
 *
 * Process phrase alternates. First collect all alternates that have
 * a single word and post process them to get modified scores.
 *   Combine the best multiple words together into a single phrase 
 *
 *******************************************************************************/
static int ProcessPhraseAlts(XRC *pXrc)
{
	XRCRESULT		*pRes;
	unsigned int	iAlt, cAlt;
	int				ret = HRCR_OK;
	int				cMultWord = 0;
	ALTERNATES		alt;

	memset(&alt, 0, sizeof(alt));

	alt.cAltMax = MAXMAXALT;

	ASSERT(pXrc);
	pRes = pXrc->answer.aAlt;
	//cAlt = pXrc->answer.cAlt;
	if (pXrc->iSpeed < 50)
	{
		ASSERT(pXrc->iSpeed >= 0);
		cAlt = 10 - (7 * pXrc->iSpeed) / 50;
	}
	else
	{
		ASSERT(pXrc->iSpeed <= 100);
		cAlt = 10 - (3 * pXrc->iSpeed) / 50 - 4;
	}

	cAlt = min(cAlt, pXrc->answer.cAlt);

	// Dont bother if nothing was recognized
	if ( cAlt <= 1)
	{
		return ret;
	}

	ASSERT(pRes);


	for (iAlt = 0 ; iAlt < cAlt ; ++iAlt, ++pRes)
	{
		if (1 == pRes->cWords)
		{
			XRCRESULT		*pWordRes = alt.aAlt + alt.cAlt;

			memcpy(pWordRes, pRes, sizeof(*pRes));

			++alt.cAlt;
		}
		else
		{
			// For now dont deal with multi-word phrases alternates
			// Free their memory
			FreeIdxWORDMAP(pRes);
			if (pRes->pMap)
			{
				ExternFree(pRes->pMap);
			}
			if (pRes->szWord)
			{
				ExternFree(pRes->szWord);
			}
		}
	}

	// Combiner recognizer scores
	// for cases with a single word
	ret = bNnonlyEnabledXRC(pXrc) ? HRCR_OK : CombineHMMScore(pXrc->pGlyph, &alt, pXrc->nfeatureset->iPrint);

	if (ret != HRCR_OK)
	{
		return ret;
	}

	// Run on multiple words and copy back results from single words
	// WARNING: only copy back the number you asked the Post processor to
	// process. So that the sosts for the unprocessed alternates will be on
	// a very different scale
	pRes = pXrc->answer.aAlt;

	for (iAlt = 0 ; HRCR_OK == ret  && iAlt < alt.cAlt ; ++iAlt, ++pRes)
	{
		memcpy(pRes, alt.aAlt + iAlt, sizeof(*pRes));
	}
	return ret;
}


// Search for a frame by frame ID
static FRAME *FindFrame(GLYPH *pGlyph, int iFrame)
{
	for  ( ; pGlyph ; pGlyph = pGlyph->next)
	{
		if (pGlyph->frame  && pGlyph->frame->iframe == iFrame)
		{
			return pGlyph->frame;
		}
	}

	return NULL;
}

/***********************************************************************
*
* RecognizePhrase
*
* Run recognition on a "chunk" (or phrase) of ink. Calls the recognizer.
* If search comes back with a white space break. Then recurse till get
* single words
*
***********************************************************************/
static int RecognizePhrase(XRC *pMainXrc, GLYPH *pGlyph, int yDev, int iDepth, ANSWER_SET *pAnsSet)
{
	int				ret;
	HRC				full;
	XRC				*pXrc;
	int				bRedo = 0;


	if (iDepth > 0)
	{
		// When called recursively use Word mode

	    ret = initWordHRC(pMainXrc, pGlyph, &full);
	}
	else
	{
		// First call use panel mode

	    ret = initPhraseHRC(pMainXrc, pGlyph, &full);
	}


	if (ret != HRCR_OK)
		return ret;

	pXrc = (XRC *)full;

	ret = RecognizeWord(pXrc, yDev);
	if (ret != HRCR_OK)
	{
        DestroyHRC(full);
		return ret;
	}

	++iDepth;

	// Check if any alternates have a word break
	if (iDepth <= 1)
	{
		unsigned int	i;
		XRCRESULT		*pRes = pXrc->answer.aAlt;


		for (i  = 0 ; i < pXrc->answer.cAlt && !bRedo ; ++i, ++pRes)
		{
			if (pRes->cWords > 1)
			{
				bRedo = 1;
			}
		}

	}


	// Did we get a multiword back?
	if (pXrc->answer.aAlt->cWords > 1 || bRedo)
	{
		// Keep recursing till get no word breaks
		unsigned int	i;
		XRCRESULT		*pRes = pXrc->answer.aAlt;

		for (i = 0 ; i < pRes->cWords && HRCR_OK == ret ; ++i)
		{
			int			iStroke;
			GLYPH		*pNewGlyph = NULL;
			WORDMAP		*pMap = pRes->pMap + i;

			ASSERT(pMap);
			pNewGlyph = NewGLYPH();

			if (!pNewGlyph)
			{
				ret = HRCR_MEMERR;
				break;
			}

			for (iStroke = 0 ; pMap && iStroke < pMap->cStrokes ; ++iStroke)
			{
				FRAME		*pFrame = FindFrame(pGlyph, pMap->piStrokeIndex[iStroke]);

				ASSERT(pFrame);
				if (!pFrame)
				{
					ret = HRCR_ERROR;
					break;
				}

				if (!AddFrameGLYPH(pNewGlyph, pFrame))
				{
					ret = HRCR_MEMERR;
					break;
				}
			}

			if (HRCR_OK == ret)
			{
				ret = RecognizePhrase(pMainXrc, pNewGlyph, yDev, iDepth, pAnsSet);
			}

			if (pNewGlyph)
			{
				DestroyGLYPH(pNewGlyph);
			}
		}

		// Throw away this contect as we have delt with it word by word
		DestroyHRC(full);
		return (ret);
	}

	ret = ProcessPhraseAlts(pXrc);

	if (ret != HRCR_OK)
	{
		DestroyHRC(full);
		return ret;
	}

	return isolate(pXrc, pAnsSet);
}

// Finds between-stroke gaps large enough to disallow grouping together within a single word,
// and calls RecognizePhrase() for each group of strokes between such gaps.

// Need to be able to go back and put a long-delayed stroke back in the right group.
// Anything stradling 2 groups, or between 2 groups, should be its own group.

// pGuide points to a 1-line guide that we already know our ink is within, so we don't need
// to compute the line number.

static int RecognizeLine	(	XRC			*pxrc, 
								INKLINE		*pLine,
								ANSWER_SET	*pAnsSet
							)

{
	GLYPH	**aGlyphs;
	int		cGlyphs			=	0, 
			i, 
			last, 
			right			=	INT_MIN;
	int		maxgap;

	GLYPH	*pScaledGlyph	=	NULL;
	int		iRet			=	HRCR_ERROR;
	int		cOldAnsSet;
	
	int		yDev;
	GUIDE	OrigGuide; 

	if (!pxrc || !pLine || !pAnsSet || !pLine->pGlyph)
	{
		return HRCR_ERROR;
	}

	// init the output line segmentation
	pLine->pResults	=	NULL;

	// point to the guide
	if (pxrc->bGuide)
	{
		OrigGuide		=	pxrc->guide;

		// scale the ink & guide
		pScaledGlyph	=	TranslateAndScaleLine (pLine, &pxrc->guide);
	}
	else
	{
		// scale the ink
		pScaledGlyph	=	TranslateAndScaleLine (pLine, NULL);
	}
	
	// compute yDev of the scaled ink
	yDev				=	YDeviation (pScaledGlyph);

	// compute maxgap
	maxgap				=	11 * yDev / 2;

	// Do the hard breaking of the line based on obvious gaps
	aGlyphs = (GLYPH **)_alloca(CframeGLYPH(pScaledGlyph) * sizeof(GLYPH *));

	for (; pScaledGlyph; pScaledGlyph = pScaledGlyph->next)
	{
		FRAME *pFrame = pScaledGlyph->frame;
		RECT *pRect = RectFRAME(pFrame);

		ASSERT((pRect->left - maxgap) >= INT_MIN);
		if (right < (pRect->left - maxgap))
		{
			if (!(cGlyphs < MAXPHRASES))
				goto exit;

			aGlyphs[cGlyphs] = NewGLYPH();

			if (!aGlyphs[cGlyphs])
				goto exit;

			aGlyphs[cGlyphs]->frame = pFrame;
			right = pRect->right;
			cGlyphs++;
		}
		else
		{
			if (!AddFrameGLYPH(aGlyphs[cGlyphs-1], pFrame))
				goto exit;

			if (right < pRect->right)
				right = pRect->right;
		}
	}

	cOldAnsSet	=	pAnsSet->cAnsSets;

	last = cGlyphs - 1;

	for (i = 0; i < cGlyphs; i++)
	{
		iRet = RecognizePhrase(pxrc, aGlyphs[i], yDev, 0, pAnsSet);
		if (iRet != HRCR_OK)
			goto exit;

		DestroyGLYPH(aGlyphs[i]);
		aGlyphs[i] = NULL;
	}

	// convert the last answerset alternates to linesegm
	if (pAnsSet->cAnsSets > cOldAnsSet)
	{
		pLine->pResults	=	GenLineSegm (pAnsSet->cAnsSets - cOldAnsSet, pAnsSet->pAlternates + cOldAnsSet);
		if (!pLine->pResults)
			goto exit;
	}

	iRet	=	HRCR_OK;

exit:

	// restore the xrc's guide
	if (pxrc->bGuide)
	{
		pxrc->guide	=	OrigGuide;
	}

	for (i = 0; i < cGlyphs; i++)
	{
		if (aGlyphs[i])
		{
			DestroyGLYPH(aGlyphs[i]);
		}
	}

	return iRet;
}

/***********************************************************************
*
* BuildStringFromParts
*
* Merge the isolated words in a array of alternates into a single string
* and keep the alternates for each word in the compound
*************************************************************************/
int BuildStringFromParts(XRC *pXrc, ALTERNATES *ppWords, unsigned int cWords)
{
	XRCRESULT		*pRes;
    WORDMAP			*pMaps;
	unsigned int	len, pos;
	char			*sz;
	int				cStroke = 0;
	int				cTotStroke;
	int				*piIndex;

	cTotStroke = CframeGLYPH(pXrc->pGlyph);
	ASSERT(pXrc);

	pRes = pXrc->answer.aAlt;
	ASSERT(pRes);

    pRes->cWords = cWords;

	if (cWords <=0)
	{
		pRes->pMap = NULL;
		pRes->szWord = NULL;
		pXrc->answer.cAlt = 0;
		return cWords;
	}

	pXrc->answer.cAlt = 1;

	ASSERT(cWords);

    pMaps = (WORDMAP *)ExternAlloc(sizeof(WORDMAP) * cWords);
	ASSERT(pMaps);
	if (!pMaps)
		goto failure;

	// Count total number of chars and number of strokes
	// across all alternates
	for (len = 0, pos = 0; pos < cWords; pos++)
	{
		if (ppWords[pos].cAlt)
		{
			len += strlen(ppWords[pos].aAlt[0].szWord) + 1;

			if (ppWords[pos].aAlt[0].pMap)
			{
				cStroke += ppWords[pos].aAlt[0].pMap->cStrokes;
			}
		}
	}
	ASSERT(len);

	// ??? Are all strokes accounted for
	ASSERT(cStroke == cTotStroke);

	piIndex = (int *)ExternAlloc(sizeof(*pMaps->piStrokeIndex) * cStroke);

    pRes->cWords = cWords;
	pRes->pMap = pMaps;
	pRes->szWord = (char *)ExternAlloc(len * sizeof(*pRes->szWord));
	ASSERT(pRes->szWord);

	if (!(pRes->szWord))
	{
		ExternFree(pMaps);
		goto failure;
	}
	pRes->cost = 0;
	pRes->pXRC = pXrc;

	pos = 0;
	sz = pRes->szWord;

	// Finally build the string and
	// set alternate lists for each word in the string
	for (; cWords; cWords--, ppWords++, pMaps++)
	{
		int				cAlt = ppWords->cAlt;
		char			*szWord;
		XRCRESULT		*pAltRes;
		unsigned int	iAlt;

		// Should always have something recognized
		ASSERT (cAlt > 0);
		if (cAlt <= 0)
		{
			
			continue;
		}

		szWord = ppWords->aAlt[0].szWord;

		if (pos)
		{
			pos++;
			*sz++ = ' ';
		}

		pMaps->start = (unsigned short int)pos;
		strcpy(sz, szWord);

		pMaps->len = (unsigned short int)strlen(szWord);
		pos += pMaps->len;
		sz += pMaps->len;

		if (cAlt > 0)
		{
			pMaps->cStrokes = ppWords->aAlt->pMap->cStrokes;
			cStroke -= pMaps->cStrokes;
			ASSERT(cStroke >= 0);

			pMaps->piStrokeIndex = piIndex + cStroke;

			memcpy(pMaps->piStrokeIndex, ppWords->aAlt->pMap->piStrokeIndex, sizeof(*pMaps->piStrokeIndex) * pMaps->cStrokes);
		}
		else
		{
			pMaps->cStrokes = 0;
			ASSERT(cStroke >= 0);
			pMaps->piStrokeIndex = piIndex + cStroke;
		}

		// Special Case Check for recognition failure
		if (1 == cAlt && strcmp(szWord, NOT_RECOGNIZED) == 0)
		{
			// Free up the memory associated with the alternates
			// because we now say there are 0 alternates
			ExternFree(ppWords->aAlt[0].szWord);
			ExternFree(ppWords->aAlt->pMap->piStrokeIndex);
			ExternFree(ppWords->aAlt->pMap);
			memset(&pMaps->alt, 0, sizeof(pMaps->alt));
		}
		else
		{
			memcpy(&(pMaps->alt), ppWords, sizeof(ALTERNATES));
		}

		// Set correct backPointers for each alternate
		pAltRes = pMaps->alt.aAlt;
		for (iAlt = 0 ; iAlt < pMaps->alt.cAlt ; ++iAlt, ++pAltRes)
		{
			pAltRes->pXRC = pXrc;
		}
		
		pRes->cost += ppWords->aAlt->cost;

		if (pRes->cost < 0)
			pRes->cost = INT_MAX;
		
		ppWords->cAlt = 0;
	}

	// Check that we have not forgot a terminating null
	ASSERT(strlen(pRes->szWord)  < 400);
	ASSERT(strlen(pRes->szWord)  < len);

	ASSERT(cStroke == 0);
	return 1;

failure:
    pRes->cWords = 0;
	pRes->pMap = NULL;
	pRes->szWord = NULL;
	pRes->cost = 0;
	pRes->pXRC = NULL;
	return 0;
}

// Update the line information in an xrc presumeably after new ink had been added
BOOL UpdateLineInfo (XRC *pxrc)
{
	BOOL		bRet	=	FALSE;
	GUIDE		*pGuide	=	&(pxrc->guide);
	LINEBRK		LineBrk;

	// do we have a guide?
	if (pxrc->bGuide)
	{
		if (GuideLineSep (pxrc->pGlyph, pGuide, &LineBrk) < 1)
			goto exit;
	}
	// We do not have a guide
	else
	{
		// Run the nn line sep
		if (NNLineSep (pxrc->pGlyph, &LineBrk) < 1)
			goto exit;
	}

	// Allocate a line breaking structure in the XRC if needed
	if (!pxrc->pLineBrk)
	{
		// alloc a line brk structure if needed
		pxrc->pLineBrk	=	(LINEBRK *) ExternAlloc (sizeof (*pxrc->pLineBrk));
		if (!pxrc->pLineBrk)
		{
			goto exit;
		}

		memset (pxrc->pLineBrk, 0, sizeof (*pxrc->pLineBrk));
	}

	// compare the lines with the old configuration
	CompareLineBrk (&LineBrk, pxrc->pLineBrk);

	// free the contents of the old structure
	FreeLines (pxrc->pLineBrk);

	// copy the new one
	memcpy (pxrc->pLineBrk, &LineBrk, sizeof (*pxrc->pLineBrk));
	
	bRet	=	TRUE;

exit:
	return bRet;
}

// Performs recognition of a piece of ink in word mode
int WordModeRecognize (XRC *pxrc)
{
	GLYPH			*pglAll;
	INKLINE			*pLine;
	GUIDE			LocalGuide, *pLocalGuide;
	int				iRet;
	XRCRESULT		*pRes;
	int				cRes;

	// check the validity of the xrc
	if (!pxrc)
	{
		return HRCR_ERROR;
	}

	// Preset in case we abort
	iRet				=	HRCR_ERROR;
	pxrc->answer.cAlt	=	0;

	// save the original glyph
	pglAll				=	pxrc->pGlyph;

	// refresh the the line information
	if (!CreateSingleLine (pxrc) || !pxrc->pLineBrk)
	{
		goto exit;
	}

	// point to the guide if any
	if (pxrc->bGuide)
	{
		LocalGuide	=	pxrc->guide;
		pLocalGuide	=	&LocalGuide;
	}
	else
	{
		pLocalGuide	=	NULL;
	}

	pLine		=	pxrc->pLineBrk->pLine;

	// if this line is not dirty, or the line is empty then exit
	if (!pLine->pGlyph || pLine->cStroke <= 0)
	{
		goto exit;
	}

	// Ink preprocessing: scale and translate the line ink if necessary
	pxrc->pGlyph	=	TranslateAndScaleLine (pLine, pLocalGuide);
	if (!pxrc->pGlyph)
	{
		goto exit;
	}

	// make sure that the line segmentation info is freed
	if (pLine->pResults)
	{
		FreeLineSegm (pLine->pResults);
		ExternFree (pLine->pResults);

		pLine->pResults	=	NULL;
	}

	if (InfProcessHRC ((HRC)pxrc, -1) != HRCR_OK || pxrc->answer.cAlt <= 0)
	{
		goto exit;
	}

	pRes = pxrc->answer.aAlt;
	cRes = pxrc->answer.cAlt;

	if (!bNnonlyEnabledXRC(pxrc))
	{
		if (CombineHMMScore(pxrc->pGlyph, &(pxrc->answer), pxrc->nfeatureset->iPrint) != HRCR_OK)
		{
			goto exit;
		}
	}

	// we no longer need this glyph
	DestroyFramesGLYPH (pxrc->pGlyph);

	// generate the line segmentation
	// if this function fail, we'll fail as well
	if (!WordModeGenLineSegm (pxrc))
	{
		goto exit;
	}

	iRet	=	HRCR_OK;

exit:
	// restore back the original ink
	pxrc->pGlyph	=	pglAll;

	return iRet;	
}


// recognizes a whole panel of ink
// first breaks the lines and then each line is recognized separately
int PanelModeRecognize (XRC *pxrc, DWORD dwRecoMode)
{
	ANSWER_SET		AnsSet;
	INKLINE			*pLine;
	int				iRet, iLine;
	
	// check the validity of the xrc
	if (!pxrc)
	{
		return HRCR_ERROR;
	}

	// Preset in case we abort
	iRet				=	HRCR_ERROR;
	pxrc->answer.cAlt	=	0;

	// init the AnsSet
	memset(&AnsSet, 0, sizeof(AnsSet));
	
	// Prepare the AnsSet
	AnsSet.capSegments	=	0;
	AnsSet.cAnsSets		=	0;
    AnsSet.pAlternates	=	NULL;

	// refresh the the line information
	if (!UpdateLineInfo (pxrc) || !pxrc->pLineBrk)
	{
		goto exit;
	}

	// go thru all the lines
	for (iLine = 0; iLine < pxrc->pLineBrk->cLine; iLine++)
	{
		pLine		=	pxrc->pLineBrk->pLine + iLine;

		// if this line empty then skip it
		if (!pLine->pGlyph || pLine->cStroke <= 0)
		{
			continue;
		}

		// make sure that the line segmentation info is freed
		if (pLine->pResults)
		{
			FreeLineSegm (pLine->pResults);
			ExternFree (pLine->pResults);

			pLine->pResults	=	NULL;
		}

		// Recognize this line
		iRet		=	RecognizeLine (pxrc, pLine, &AnsSet);	
		if (iRet != HRCR_OK)
		{
			goto exit;
		}

		// if we are in partial incremental mode, then we stop processing here
		if (dwRecoMode == RECO_MODE_INCREMENTAL)
		{
			break;
		}
	} // iLine Loop


exit:
	// if we succeeded, build the answer
	if (iRet == HRCR_OK)
	{
		BuildStringFromParts(pxrc, AnsSet.pAlternates, AnsSet.cAnsSets);
	}

	// free the answer set
	ExternFree(AnsSet.pAlternates);
	
	return iRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\postproc.c ===
// C file for fixed and floating point NN's used by postprocessor
#include <common.h>
#include "postproc.h"

#ifdef _FIXEDPOINTNN_
#include <limits.h>
#else // _FIXEDPOINTNN_

#include <math.h>
#endif // _FIXEDPOINTNN_

#ifdef _FIXEDPOINTNN_

// Net Weights
#include <postProc.ci>
#include <printPostproc.ci>

const unsigned short int aSigm[SIGM_PREC * (MAX_SIGM - MIN_SIGM) + 1] = 
{
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 
	6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 
	7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 
	9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 
	12, 12, 13, 13, 13, 13, 14, 14, 15, 15, 
	15, 16, 16, 16, 17, 17, 18, 18, 18, 19, 
	19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 
	24, 25, 26, 26, 27, 27, 28, 29, 29, 30, 
	31, 31, 32, 33, 34, 34, 35, 36, 37, 37, 
	38, 39, 40, 41, 42, 43, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 
	58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 
	70, 71, 72, 73, 75, 76, 78, 79, 80, 82, 
	83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 
	98, 99, 101, 102, 104, 105, 107, 108, 110, 112, 
	113, 115, 116, 118, 120, 121, 123, 124, 126, 127, 
	129, 131, 132, 134, 135, 137, 139, 140, 142, 143, 
	145, 147, 148, 150, 151, 153, 154, 156, 157, 159, 
	160, 162, 163, 165, 166, 168, 169, 171, 172, 173, 
	175, 176, 177, 179, 180, 182, 183, 184, 185, 187, 
	188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 212, 212, 213, 214, 215, 216, 217, 218, 
	218, 219, 220, 221, 221, 222, 223, 224, 224, 225, 
	226, 226, 227, 228, 228, 229, 229, 230, 231, 231, 
	232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 
	237, 237, 237, 238, 238, 239, 239, 239, 240, 240, 
	240, 241, 241, 242, 242, 242, 242, 243, 243, 243, 
	244, 244, 244, 244, 245, 245, 245, 245, 246, 246, 
	246, 246, 247, 247, 247, 247, 247, 248, 248, 248, 
	248, 248, 249, 249, 249, 249, 249, 249, 249, 250, 
	250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 
	};

int	Sigmoid (int val)
{
	val	= val >> BITS;

	if (val <= MIN_SIGM)
		return 0;

	if (val >= MAX_SIGM)
		return (int) (SCALE_IN - 1);

	return aSigm[(val * SIGM_PREC) + SIGM_OFFSET];
}
#else // _FIXEDPOINTNN_

// Net weights
#include <postProc.cf>
#include <printPostProc.cf>

double 	Sigmoid (double val)
{
	double	d;

	if (val < -10.0)
		return 0;

	if (val > 10.0)
		return 1.0;

	d = exp (-val);
	return 1.0 / (1.0 + d);
}
#endif // _FIXEDPOINTNN_

int NNetFeedForward (int iNet, BOOL bAgree, BOOL bPrint, 
#ifdef _FIXEDPOINTNN_
	int		aInput[NUM_CAND][CAND_INPUTS],
	int		aOutput[OUTPUT_NODES]
#else
	double		aInput[NUM_CAND][CAND_INPUTS],
	double		aOutput[OUTPUT_NODES]
#endif	
)
{
	int		h, i, j, c, iMax = 0;

#ifdef _FIXEDPOINTNN_
	int		Sum;
	int		*pBias;
	int		iTmp;
	int		aHidden[HIDDEN_NODES];

#else // _FIXEDPOINTNN_
	double		Sum;
	double		*pBias;
	double		aHidden[HIDDEN_NODES];
#endif // _FIXEDPOINTNN_

	INP2HID		*pHidWt;
	HID2OUT		*pOutWt;

	if (bAgree)
	{
		pBias	= (bPrint) ? aHidBiasPrint[iNet] : aHidBias[iNet];
	}
	else
	{
		pBias	= (bPrint) ? dHidBiasPrint[iNet] : dHidBias[iNet];
	}
	if (bAgree)
	{
		pHidWt	= ((bPrint) ? aInp2HidPrint :	aInp2Hid) + iNet;
	}
	else
	{
		pHidWt	= ((bPrint) ? dInp2HidPrint : dInp2Hid) + iNet;
	}

	for (i = 0, c = 0; i < NUM_CAND; i++)
	{

		for (h = 0, h = 0; h < CAND_HIDDEN_NODES; h++, c++)
		{

#ifdef _FIXEDPOINTNN_
			Sum		= 0;
#else // _FIXEDPOINTNN_
			Sum		= 0.0;
#endif // _FIXEDPOINTNN_

			for (j = 0, j = 0; j < CAND_INPUTS; j++)
			{

#ifdef _FIXEDPOINTNN_
				iTmp = (*pHidWt)[i][j][h] * aInput[i][j];
				if (Sum <= 0 && (INT_MIN - Sum) > iTmp)
					Sum	=	INT_MIN;
				else
				if  (Sum >= 0 && (INT_MAX - Sum) < iTmp)
					Sum	=	INT_MAX;
				else
					Sum += iTmp;

#else // _FIXEDPOINTNN_
				Sum	+=	((*pHidWt)[i][j][h] * aInput[i][j]);
#endif // _FIXEDPOINTNN_
			}
			aHidden[c]	=	Sigmoid(Sum + pBias[c]);
		}
	}

	if (bAgree)
	{
		pBias	=	(bPrint) ? aOutBiasPrint[iNet] : aOutBias[iNet];
	}
	else
	{
		pBias	=	(bPrint) ? dOutBiasPrint[iNet] : dOutBias[iNet];
	}
	if (bAgree)
	{
		pOutWt	=	((bPrint) ? aHid2OutPrint :  aHid2Out) + iNet;
	}
	else
	{
		pOutWt	=	((bPrint) ? dHid2OutPrint :  dHid2Out) + iNet;
	}

	for (i = 0; i < NUM_CAND; i++)
	{

#ifdef _FIXEDPOINTNN_
		Sum		= 0;
#else // _FIXEDPOINTNN_
		Sum		= 0.0;
#endif // _FIXEDPOINTNN_


		for (h = 0, h = 0; h < HIDDEN_NODES; h++)
		{

#ifdef _FIXEDPOINTNN_
			iTmp = (*pOutWt)[h][i] * aHidden[h];
			if (Sum <= 0 && (INT_MIN - Sum) > iTmp )
				Sum	=	INT_MIN;
			else
			if  (Sum >= 0 && (INT_MAX - Sum) < iTmp)
				Sum	=	INT_MAX;
			else
				Sum += iTmp;
#else // _FIXEDPOINTNN_
			Sum	+=	((*pOutWt)[h][i] * aHidden[h]);
#endif // _FIXEDPOINTNN_
		}

		//aOutput[i]	+=	Sigmoid(Sum + pBias[i]) * iLambda;
		//aOutput[i]	=	Sigmoid(Sum + pBias[i]);

#ifdef _FIXEDPOINTNN_
		if (Sum > 0 && INT_MAX - Sum < pBias[i])
			aOutput[i] = INT_MAX;
		else if (Sum < 0 && pBias[i] < INT_MIN - Sum )
				aOutput[i]	=	INT_MIN;
		else
			aOutput[i]	=	Sum + pBias[i];
#else // _FIXEDPOINTNN_
			aOutput[i]	=	Sum + pBias[i];
#endif // _FIXEDPOINTNN_


		if (i == 0 || aOutput[i] > aOutput[iMax])
			iMax = i;
	}

	return iMax;
}

#ifdef _FIXEDPOINTNN_
int Scale (int Val, int Scale)
#else
double Scale (int Val, int Scale)
#endif
{
#ifdef _FIXEDPOINTNN_
	int	Rem, x;

	if (Val < 0)
		return 0;

	x	=	Val	/	Scale;
	Rem	=	Val	%	Scale;

	if ((INT_MAX / SCALE_IN) < x)
		x	=	INT_MAX;
	else
		x	=	x * SCALE_IN;

	if ((INT_MAX / SCALE_IN) < Rem)
		Rem	=	INT_MAX;
	else
		Rem	=	Rem * SCALE_IN;

	x	+=	(Rem / Scale);

	return x;
#else // _FIXEDPOINTNN_ 

	if (Val < 0.0)
		return 0.0;

	return 1.0 * Val / Scale;
#endif //_FIXEDPOINTNN_
}

void RunNNet (BOOL bAgree, XRCRESULT *pRes, ALTINFO *pAltInfo, int iPrint)
{
	int		i, iLen, iMax;
#ifdef _FIXEDPOINTNN_
	int		aInput[NUM_CAND][CAND_INPUTS];
	int		aOutput[OUTPUT_NODES];

#else // _FIXEDPOINTNN_
	double		aInput[NUM_CAND][CAND_INPUTS];
	double		aOutput[OUTPUT_NODES];
#endif

	if (bAgree) {
		return;
	}

	memset(aOutput, 0, sizeof(aOutput));
	
	iLen = pAltInfo->aCandInfo[0].WordLen;
	if (iLen > NUM_WORDLEN)
		iLen = NUM_WORDLEN;

	iLen--;

	if (iLen < 0)
		return;

	if (pAltInfo->NumCand > NUM_CAND)
		return;

	//max values out
	for (i = 0; i < pAltInfo->NumCand; i++)
	{
		pAltInfo->aCandInfo[i].Aspect	=	min (pAltInfo->aCandInfo[i].Aspect, PP_MAX_ASPECT);
		pAltInfo->aCandInfo[i].BaseLine	=	min (pAltInfo->aCandInfo[i].BaseLine, PP_MAX_BLINE);
		pAltInfo->aCandInfo[i].Height	=	min (pAltInfo->aCandInfo[i].Height, PP_MAX_HEIGHT);
		pAltInfo->aCandInfo[i].HMM		=	min (pAltInfo->aCandInfo[i].HMM, PP_MAX_HMM);
		pAltInfo->aCandInfo[i].NN		=	min (pAltInfo->aCandInfo[i].NN, PP_MAX_NN);
		pAltInfo->aCandInfo[i].Unigram	=	min (pAltInfo->aCandInfo[i].Unigram, PP_MAX_UNIGRAM);
	}

	for (i = 0; i < pAltInfo->NumCand; i++)
	{
		aInput[i][0]	=
			Scale (pAltInfo->aCandInfo[i].NN - pAltInfo->aCandInfo[pAltInfo->MinNN].NN, NN_SCALE);

		aInput[i][1]	=
			Scale (pAltInfo->aCandInfo[i].Unigram - pAltInfo->aCandInfo[pAltInfo->MinUnigram].Unigram, UNIGRAM_SCALE);

		aInput[i][2]	=
			Scale (pAltInfo->aCandInfo[i].HMM - pAltInfo->aCandInfo[pAltInfo->MinHMM].HMM, HMM_SCALE);

		aInput[i][3]	=
			Scale (pAltInfo->aCandInfo[i].Aspect - pAltInfo->aCandInfo[pAltInfo->MinAspect].Aspect, ASPECT_SCALE);

		aInput[i][4]	=
			Scale (pAltInfo->aCandInfo[i].BaseLine - pAltInfo->aCandInfo[pAltInfo->MinBaseLine].BaseLine, BLINE_SCALE);

		aInput[i][5]	=
			Scale (pAltInfo->aCandInfo[i].Height - pAltInfo->aCandInfo[pAltInfo->MinHgt].Height, HEIGHT_SCALE);
	}

	for (i = pAltInfo->NumCand; i < NUM_CAND; i++)
	{
		aInput[i][0]	=	Scale (WORST_SCALED_NN, 1);
		aInput[i][1]	=	Scale (WORST_SCALED_UNIGRAM, 1);
		aInput[i][2]	=	Scale (WORST_SCALED_HMM, 1);
		aInput[i][3]	=	Scale (WORST_SCALED_ASPECT, 1);
		aInput[i][4]	=	Scale (WORST_SCALED_BLINE, 1);
		aInput[i][5]	=	Scale (WORST_SCALED_HGT, 1);
	}

	if (iPrint < 500)
	{
		iMax = NNetFeedForward (iLen, bAgree, FALSE, aInput, aOutput);
	}
	else
	{
		if (!bAgree)
		{
			iMax = NNetFeedForward (iLen, bAgree, TRUE, aInput, aOutput);
		}
		else
		{
			// Dont run any post processor
			return;
		}
	}
	
/*
	if (!bAgree)
	{

		iCurs = 1000 - g_iPrint;

		iMax = NNetFeedForward (iLen, bAgree, FALSE, 1);

		if (g_iPrint > 0)
		{
			iMax = NNetFeedForward (iLen, bAgree, TRUE, g_iPrint);
		}
		if ( iCurs > 0)
		{
			iMax = NNetFeedForward (iLen, bAgree, FALSE, iCurs);
		}
*/
		for (i = 0; i < pAltInfo->NumCand; i++)
		{
#ifdef _FIXEDPOINTNN_
			//ASSERT(aOutput[i] / 1000 < SCALE_IN);
			//pRes[i].cost	=	SCALE_IN - aOutput[i] / 1000;
			//pRes[i].cost	=	SCALE_IN - aOutput[i] ;
			//pRes[i].cost	=	(aOutput[iMax] - aOutput[i]) / 1000;
			pRes[i].cost	=	(aOutput[iMax] - aOutput[i]);
#else // _FIXEDPOINTNN_
			
			//pRes[i].cost	=	(int) (100.0 * (1.0 - aOutput[i]));
			pRes[i].cost	=	(int) (100.0 * (aOutput[iMax] - aOutput[i]));
#endif // _FIXEDPOINTNN_
			
		}
	//}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\postproc.h ===
// Header file for fixed and floating point NN's used by postprocessor
#ifndef __NNHEADER__
#define __NNHEADER__

#include "common.h"
#include "combiner.h"

#define _FIXEDPOINTNN_

#ifdef _FIXEDPOINTNN_
#define WTS_BITS		8
#define IN_BITS			8
#define BITS			(WTS_BITS + IN_BITS)
#define SCALE_WTS		(1 << WTS_BITS)
#define SCALE_IN		(1 << IN_BITS)
#define SCALE_BIAS		(SCALE_WTS * SCALE_IN)
#define MIN_SIGM		-4
#define MAX_SIGM		4
#define SIGM_PREC		40
#define SIGM_OFFSET		(-1 * MIN_SIGM * SIGM_PREC)
#endif // _FIXEDPOINTNN_

#define	NUM_WORDLEN	10
#define	CAND_INPUTS	6
#define	NUM_CAND		10
#define	CAND_HIDDEN_NODES	5
#define	HIDDEN_NODES	(CAND_HIDDEN_NODES * NUM_CAND)
#define	OUTPUT_NODES	10


#if (CAND_INPUTS != 6)
#error "CAND_INPUTS has be equal to 6"
#endif

#ifdef _FIXEDPOINTNN_
typedef const short int INP2HID[NUM_CAND][CAND_INPUTS][CAND_HIDDEN_NODES];
typedef const short int HID2OUT[HIDDEN_NODES][OUTPUT_NODES];
typedef int HIDBIAS[HIDDEN_NODES];
typedef int OUTBIAS[OUTPUT_NODES];

#else // _FIXEDPOINTNN_

typedef double INP2HID[NUM_CAND][CAND_INPUTS][CAND_HIDDEN_NODES];
typedef double HID2OUT[HIDDEN_NODES][OUTPUT_NODES];
typedef double HIDBIAS[HIDDEN_NODES];
typedef double OUTBIAS[OUTPUT_NODES];
#endif // _FIXEDPOINTNN_

void RunNNet (BOOL bAgree, XRCRESULT *pRes, ALTINFO *pAltInfo, int iPrint);
#endif // __NNHEADER__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\porkypost.h ===
// PorkyPost.h
// James A. Pittman
// November 6, 1997

// Interface to the Porky HMM English cursive word recognizer post-processor.

#ifndef _PORKYPOST_
#define _PORKYPOST_

#include "common.h"
#include "combiner.h"

extern const char *PorkyPostDoc();

#if !defined(ROM_IT) || !defined(NDEBUG)
extern int PorkPostInit(void);
#endif

extern int PorkPostProcess(GLYPH *pGlyph, ALTERNATES *pAlt, ALTINFO *pAltInfo);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\recoutil.c ===
// This file contains utility functions a recognizer should provide for WISP 
// Author: Ahmad A. AbdulKader (ahmadab)
// August 10th 2001

#include <common.h>
#include <limits.h>
#include <string.h>

#include "xrcreslt.h"
#include "nfeature.h"
#include "engine.h"
#include "recoutil.h"

// computes the final alt list for a wordmap
// Madcow currently does not provide multiple segmentations
// so every word_map should have an inferno alt list by now
// oterwise we will fail
BOOL WordMapRecognize	(	XRC					*pxrc, 
							LINE_SEGMENTATION	*pLineSeg, 
							WORD_MAP			*pMap, 
							ALTERNATES			*pAlt
						)
{
	BOOL		bRet			=	FALSE;
	
	// do we already have a final altlist
	if (pMap->pFinalAltList)
		return TRUE;

	// if we do not have an inferno altlist we will fail
	if (!pMap->pInfernoAltList)
	{
		goto exit;
	}


	// the final alt list is the same as the inferno one
	pMap->pFinalAltList	=	pMap->pInfernoAltList;

	// does the caller also need an old style altlist
	if (pAlt)
	{
		if (!AltListNew2Old ((HRC)pxrc, pMap, pMap->pFinalAltList, pAlt, TRUE))
		{
			goto exit;
		}
	}

	bRet	=	TRUE;

exit:
	
	return bRet;
}



// generates a degenerate linesegmentation representation of the single segmentation
// present in the input words
LINE_SEGMENTATION	*GenLineSegm (int cWord, ALTERNATES *pAlt)
{
	BOOL				bRet		=	FALSE;
	LINE_SEGMENTATION	*pLineSegm	=	NULL;
	SEG_COLLECTION		*pSegCol;
	SEGMENTATION		*pSeg;
	int					w;
	WORDMAP				*pOldWordMap;
	
	if (pAlt->cAlt <= 0)
		goto exit;

	// allocate and init the output struct
	pLineSegm			=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pLineSegm));
	if (!pLineSegm)
		goto exit;

	memset (pLineSegm, 0, sizeof (*pLineSegm));

	// there is only going to be a one segcol and one segmentation
	pSegCol				=	AddNewSegCol (pLineSegm);
	if (!pSegCol)
		goto exit;

	// reserve room for one segmentation
	pSegCol->ppSeg		=	(SEGMENTATION **) ExternAlloc (sizeof (*pSegCol->ppSeg));
	if (!pSegCol->ppSeg)
		goto exit;

	// alloc, init the segmentation and add to the segcol
	pSeg				=	(SEGMENTATION *) ExternAlloc (sizeof (*pSeg));
	if (!pSeg)
		goto exit;

	pSegCol->ppSeg[0]	=	pSeg;
	pSegCol->cSeg		=	1;

	memset (pSeg, 0, sizeof (*pSeg));

	// preallocate and init buffer for wordmaps in linesegm
	pLineSegm->ppWord	=	(WORD_MAP **) ExternAlloc (cWord * sizeof (*pLineSegm->ppWord));
	if (!pLineSegm->ppWord)
		goto exit;

	memset (pLineSegm->ppWord, 0, cWord * sizeof (*pLineSegm->ppWord));

	pLineSegm->cWord	=	cWord;

	// preallocate and init buffer for wordmaps in segmentation
	pSeg->ppWord	=	(WORD_MAP **) ExternAlloc (cWord * sizeof (*pSeg->ppWord));
	if (!pSeg->ppWord)
		goto exit;

	memset (pSeg->ppWord, 0, cWord * sizeof (*pSeg->ppWord));

	pSeg->cWord	=	cWord;

	for (w = 0; w < cWord; w++)
	{
		WORD_MAP	*pMap;
		int			iStrk;

		pOldWordMap	=	pAlt[w].aAlt[0].pMap;

		// add a new wordmap to linesegm and seg
		pMap	=	(WORD_MAP *) ExternAlloc (sizeof (*pMap));
		if (!pMap)
			goto exit;

		memset (pMap, 0, sizeof (*pMap));

		pSeg->ppWord[w]	=	pLineSegm->ppWord[w]	=	pMap;
		
		for (iStrk = 0; iStrk < pOldWordMap->cStrokes; iStrk++)
		{
			if (!AddNewStroke (pMap, pOldWordMap->piStrokeIndex[iStrk]))
				return FALSE;
		}

		// copy the confidence value
		pMap->iConfidence	=	pOldWordMap->alt.iConfidence;

		// allocate the final alt list
		pMap->pFinalAltList	=	
			(WORD_ALT_LIST *) ExternAlloc (sizeof (*pMap->pFinalAltList));
		if (!pMap->pFinalAltList)
			goto exit;

		memset (pMap->pFinalAltList, 0, sizeof (*pMap->pFinalAltList));

		// copy the alt list to the final alt list of the new wordmap
		AltListOld2New (pAlt + w, pMap->pFinalAltList, TRUE);
	}

	bRet	=	TRUE;

exit:
	if (bRet)
	{
		return pLineSegm;
	}
	else
	{
		if (pLineSegm)
			FreeLineSegm (pLineSegm);

		ExternFree (pLineSegm);

		return NULL;
	}
}

// generates a wordmode degenerate linesegmentation representation of 
// the single segmentation present in the Xrc
BOOL	WordModeGenLineSegm		(XRC *pxrc)
{
	BOOL				bRet		=	FALSE;
	LINE_SEGMENTATION	*pLineSegm	=	NULL;
	SEG_COLLECTION		*pSegCol;
	SEGMENTATION		*pSeg;
	WORDMAP				*pOldWordMap;
	WORD_MAP			*pMap;
	int					iStrk;
	INKLINE				*pLine;
	
	// are we realy in wordmode
	if (!(pxrc->flags & RECOFLAG_WORDMODE))
		return FALSE;

	// make sure we have a wordmode valid line breaking
	if (!pxrc->pLineBrk || pxrc->pLineBrk->cLine != 1)
		return FALSE;

	// point to the one and only line
	pLine	=	pxrc->pLineBrk->pLine;

	// does the linsesegm info already exist
	if (pLine->pResults)
		return TRUE;

	// allocate and init the output struct
	pLine->pResults	=	pLineSegm	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pLineSegm));
	if (!pLineSegm)
		goto exit;

	memset (pLineSegm, 0, sizeof (*pLineSegm));

	// there is only going to be a one segcol and one segmentation
	pSegCol				=	AddNewSegCol (pLineSegm);
	if (!pSegCol)
		goto exit;

	// reserve room for one segmentation
	pSegCol->ppSeg		=	(SEGMENTATION **) ExternAlloc (sizeof (*pSegCol->ppSeg));
	if (!pSegCol->ppSeg)
		goto exit;

	// alloc, init the segmentation and add to the segcol
	pSeg				=	(SEGMENTATION *) ExternAlloc (sizeof (*pSeg));
	if (!pSeg)
		goto exit;

	pSegCol->ppSeg[0]	=	pSeg;
	pSegCol->cSeg		=	1;

	memset (pSeg, 0, sizeof (*pSeg));

	// preallocate and init buffer for wordmaps in linesegm
	pLineSegm->ppWord	=	(WORD_MAP **) ExternAlloc (sizeof (*pLineSegm->ppWord));
	if (!pLineSegm->ppWord)
		goto exit;

	memset (pLineSegm->ppWord, 0, sizeof (*pLineSegm->ppWord));

	pLineSegm->cWord	=	1;

	// preallocate and init buffer for wordmaps in segmentation
	pSeg->ppWord		=	(WORD_MAP **) ExternAlloc (sizeof (*pSeg->ppWord));
	if (!pSeg->ppWord)
		goto exit;

	memset (pSeg->ppWord, 0, sizeof (*pSeg->ppWord));

	pSeg->cWord			=	1;
	
	// point to the only wordmap
	pOldWordMap	=	pxrc->answer.aAlt[0].pMap;

	// add a new wordmap to linesegm and seg
	pMap	=	(WORD_MAP *) ExternAlloc (sizeof (*pMap));
	if (!pMap)
		goto exit;

	memset (pMap, 0, sizeof (*pMap));

	pSeg->ppWord[0]	=	pLineSegm->ppWord[0]	=	pMap;
	
	for (iStrk = 0; iStrk < pOldWordMap->cStrokes; iStrk++)
	{
		if (!AddNewStroke (pMap, pOldWordMap->piStrokeIndex[iStrk]))
			return FALSE;
	}

	// copy the confidence value
	pMap->iConfidence	=	pxrc->answer.iConfidence;

	// allocate the final alt list
	pMap->pFinalAltList	=	
		(WORD_ALT_LIST *) ExternAlloc (sizeof (*pMap->pFinalAltList));
	if (!pMap->pFinalAltList)
		goto exit;

	memset (pMap->pFinalAltList, 0, sizeof (*pMap->pFinalAltList));

	// copy the alt list to the final alt list of the new wordmap
	AltListOld2New (&pxrc->answer, pMap->pFinalAltList, TRUE);

	bRet	=	TRUE;

exit:
	return bRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\recoutil.h ===
// This file contains utility functions a recognizer should provide for WISP 
// Author: Ahmad A. AbdulKader (ahmadab)
// August 10th 2001

#include <common.h>
#include <limits.h>
#include <string.h>

#include "xrcreslt.h"

#ifndef __RECOUTIL_H__

#define __RECOUTIL_H__


// In madcow there is no need to differentiate between
// the wrapper and actual functions
#define WordMapRecognizeWrap(a, b, c, d)	WordMapRecognize(a,b,c,d)
	
// Any recognizer must implement this function
BOOL	WordMapRecognize	(	XRC					*pxrc, 
								LINE_SEGMENTATION	*pLineSeg, 
								WORD_MAP			*pMap, 
								ALTERNATES			*pAlt
							);

BOOL	WordModeGenLineSegm		(XRC *pxrc);

LINE_SEGMENTATION	*GenLineSegm (int cWord, ALTERNATES *pAlt);

#endif  // __RECOUTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\stub.c ===
/****************************************************************
*
* NAME: stub.c
*
*
* DESCRIPTION:
*
*    Short stub file that is used to make madcow compile
*    These functions should not be called in the normal
*    runs of madcow, except if you use the maanged WSIP API's
*
*
***************************************************************/


#include <common.h>
#include "xrcreslt.h"
#include "bear.h"
#include "avalanche.h"
#include "avalanchep.h"
#include <GeoFeats.h>

BOOL loadCharNets(HINSTANCE hInst)
{
	return TRUE;
}

BOOL WordMapRecognizeWrap	(	XRC				*pxrc, 
								BEARXRC			*pxrcBear,
								LINE_SEGMENTATION	*pLineSeg, 
								WORD_MAP			*pMap, 
								ALTERNATES			*pAlt
							)
{
	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\saveink.c ===
#include <stdio.h>
#include <direct.h>
#include <time.h>

#include "common.h"

#define INK_MAGIC_NUMBER	0xab56e921
#define INK_ROOT_DIR		"\\madcow"

void SaveInk2File (GUIDE *pGuide, GLYPH *pGlyph, char *pszFileName)
{
	FILE	*fp;
	int		cStrk	=	CframeGLYPH (pGlyph);
	GLYPH	*gl;
	DWORD	dw		=	INK_MAGIC_NUMBER;

	fp	= fopen (pszFileName, "wb");
	if (!fp)
		return;

	// write the magic#
	fwrite (&dw, sizeof (dw), 1, fp);
	
	// save the guide
	if (pGuide)
		fwrite (pGuide, sizeof (GUIDE), 1, fp);

	if (pGlyph)
	{
		// save the ink
		fwrite (&cStrk, 1, sizeof (int), fp);

		for (gl = pGlyph; gl; gl = gl->next)
		{
			fwrite (&gl->frame->info.cPnt, 1, sizeof (int), fp);
			fwrite (gl->frame->rgrawxy, gl->frame->info.cPnt, sizeof (XY), fp);
		}
	}

	fclose (fp);
}

void SaveInk(GUIDE *pGuide, GLYPH *pGlyph)
{
	char		aszDate[10], aszTime[10];
	char		aszTodaysDir[128];
	char		aszFileName[256];
	time_t		ltime;
	struct	tm	*pNow;

	
	// make sure our root dir exists, if not create it
	if (_chdir (INK_ROOT_DIR))
	{
		// we failed to create dir
		if (_mkdir (INK_ROOT_DIR))
			return;
	}

	time( &ltime );
	pNow = localtime( &ltime );
    
	// now does a dir with today's date exist
	strftime(aszDate, sizeof (aszDate), "%m%d%Y", pNow);

	sprintf (aszTodaysDir, "%s\\%s", INK_ROOT_DIR, aszDate);

	if (_chdir (aszTodaysDir))
	{
		// we failed to create dir
		if (_mkdir (aszTodaysDir))
			return;
	}

	// generate file name
	strftime(aszTime, sizeof (aszTime), "%H%M%S", pNow);
	sprintf (aszFileName, "%s\\%s.ink", aszTodaysDir, aszTime);

	SaveInk2File (pGuide, pGlyph, aszFileName);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\esp\linesegnn.c ===
#include <limits.h>
#include "common.h"

// generated by trntrex from 3560
// layer 0
static const int cInput = 19;
// layer 1
static const int cHidden = 8;
static const int rgWeightHidden[8*19] = {
	// rgWeightHidden+0*19
	-448, -528, -394, 430, 572,
	5490, 8288, 3350, 4027, 2114,
	-1173, 4162, -686, -761, -1264,
	2508, 959, -225, -2091,	// rgWeightHidden+1*19
 -2599,
	-2722, -800, -634, 26, 177,
	-1150, 933, 1221, 1764, 112,
	264, 2847, 317, 788, 460,
	3133, -1511, -508,	// rgWeightHidden+2*19
 363, -3731,
	-83, 1454, 51, -2340, 2049,
	-3503, -318, 1767, -285, 1363,
	-535, -880, 1783, 262, -275,
	540, 121,	// rgWeightHidden+3*19
 -2039, 4152, 5881,
	2994, -4703, 1713, 1657, 4205,
	972, -983, 4452, -839, 2089,
	-734, 1200, 442, 135, -499,
	-1390,	// rgWeightHidden+4*19
 -4495, 3142, 1603, 6589,
	-3935, 1469, -293, 2404, -444,
	-618, 6542, -1311, 694, -847,
	-174, 2004, 2336, 920, -987,
	// rgWeightHidden+5*19
	1570, -3065, -1683, -588, -3089,
	11, 2088, -771, 3734, 3088,
	-7386, 1678, -1124, 192, -80,
	908, 1627, -5474, -38,	// rgWeightHidden+6*19
 1954,
	7294, 10833, 1000, 2099, 2369,
	1242, 626, 454, 2572, -2882,
	421, -753, -98, -2647, -1421,
	-3539, 349, 604,	// rgWeightHidden+7*19
 896, -4607,
	-12399, -1664, 171, -51, 300,
	-710, 719, 2085, -1675, 115,
	-1096, -1275, -284, -1564, -2993,
	-415, 358};  // rgWeightHidden[8*19]

static const int rgBiasHidden[8] = {
	-4639, -1667, -512, 375, -1028,
	-1585, 2654, 1088
};  // rgBiasHidden[8]

// layer 2
static const int cOutput = 3;
static const int rgWeightOutput[3*8] = {
	// rgWeightOutput+0*8
	1335, -382, 1151, 397, 829,
	-2413, 356, 343,	// rgWeightOutput+1*8
 -979, 572,
	-1, 253, 642, -300, -766,
	-8,	// rgWeightOutput+2*8
 -1043, -379, -1402, -528,
	-968, 3093, 999, -290};  // rgWeightOutput[3*8]

static const int rgBiasOutput[3] = {
	-1597, -423, 264
};  // rgBiasOutput[3]



#include "math16.h"


static void ForwardFeedLayer(int cLayer0, int *rgLayer0, int cLayer1, unsigned short *rgLayer1, const int *rgWeight, const int *rgBias)
{
	int i, j;
	__int64 sum;
	__int64 iVal;
	int *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++))<< 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum += iVal;
		}

		sum	=	(sum >> 8);

		sum	=	max (INT_MIN + 1, min(INT_MAX - 1, sum));
		
		j = Sigmoid16((int)sum);
		if (j > 0xFFFF)
			j = 0xFFFF;

		*rgLayer1++ = (unsigned short)j;
	}
}

static __int64 ForwardFeedLayerNoSig(int cLayer0, unsigned short *rgLayer0, int cLayer1, __int64 *rgLayer1,const int *rgWeight,const int *rgBias)
{
	int i, j;
	__int64 sum, Tot = 0;
	__int64 iVal;
	unsigned short *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++)) << 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum	 += iVal;
			
		}

		sum	= (sum >> 8);

		*rgLayer1++ =	sum;
		Tot		+=	abs (sum);
	}

	return Tot;
}

void ForwardFeed	(	int				*rgFeat, 
						unsigned short	*rgHidden, 
						__int64			*rgOutput
					)
{

	ForwardFeedLayer	(	cInput, 
							rgFeat, 
							cHidden, 
							rgHidden, 
							rgWeightHidden,
							rgBiasHidden
						);

	ForwardFeedLayerNoSig	(	cHidden, 
								rgHidden, 
								cOutput, 
								rgOutput, 
								rgWeightOutput,
								rgBiasOutput
							);

}

int LineSegNN (int *pFeat)
{
	unsigned short	aHidden[50];
	__int64			aOutput[10];
	int				i, iBest	=	0;

	ForwardFeed (pFeat, aHidden, aOutput);

	for (i = 1; i < cOutput; i++)
	{
		if (aOutput[i]	> aOutput[iBest])
			iBest	=	i;
	}

	return iBest;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\deu\linesegnn.c ===
#include <limits.h>
#include "common.h"

// generated by trntrex from 3560
// layer 0
static const int cInput = 19;
// layer 1
static const int cHidden = 8;
static const int rgWeightHidden[8*19] = {
	// rgWeightHidden+0*19
	-448, -528, -394, 430, 572,
	5490, 8288, 3350, 4027, 2114,
	-1173, 4162, -686, -761, -1264,
	2508, 959, -225, -2091,	// rgWeightHidden+1*19
 -2599,
	-2722, -800, -634, 26, 177,
	-1150, 933, 1221, 1764, 112,
	264, 2847, 317, 788, 460,
	3133, -1511, -508,	// rgWeightHidden+2*19
 363, -3731,
	-83, 1454, 51, -2340, 2049,
	-3503, -318, 1767, -285, 1363,
	-535, -880, 1783, 262, -275,
	540, 121,	// rgWeightHidden+3*19
 -2039, 4152, 5881,
	2994, -4703, 1713, 1657, 4205,
	972, -983, 4452, -839, 2089,
	-734, 1200, 442, 135, -499,
	-1390,	// rgWeightHidden+4*19
 -4495, 3142, 1603, 6589,
	-3935, 1469, -293, 2404, -444,
	-618, 6542, -1311, 694, -847,
	-174, 2004, 2336, 920, -987,
	// rgWeightHidden+5*19
	1570, -3065, -1683, -588, -3089,
	11, 2088, -771, 3734, 3088,
	-7386, 1678, -1124, 192, -80,
	908, 1627, -5474, -38,	// rgWeightHidden+6*19
 1954,
	7294, 10833, 1000, 2099, 2369,
	1242, 626, 454, 2572, -2882,
	421, -753, -98, -2647, -1421,
	-3539, 349, 604,	// rgWeightHidden+7*19
 896, -4607,
	-12399, -1664, 171, -51, 300,
	-710, 719, 2085, -1675, 115,
	-1096, -1275, -284, -1564, -2993,
	-415, 358};  // rgWeightHidden[8*19]

static const int rgBiasHidden[8] = {
	-4639, -1667, -512, 375, -1028,
	-1585, 2654, 1088
};  // rgBiasHidden[8]

// layer 2
static const int cOutput = 3;
static const int rgWeightOutput[3*8] = {
	// rgWeightOutput+0*8
	1335, -382, 1151, 397, 829,
	-2413, 356, 343,	// rgWeightOutput+1*8
 -979, 572,
	-1, 253, 642, -300, -766,
	-8,	// rgWeightOutput+2*8
 -1043, -379, -1402, -528,
	-968, 3093, 999, -290};  // rgWeightOutput[3*8]

static const int rgBiasOutput[3] = {
	-1597, -423, 264
};  // rgBiasOutput[3]



#include "math16.h"


static void ForwardFeedLayer(int cLayer0, int *rgLayer0, int cLayer1, unsigned short *rgLayer1, const int *rgWeight, const int *rgBias)
{
	int i, j;
	__int64 sum;
	__int64 iVal;
	int *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++))<< 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum += iVal;
		}

		sum	=	(sum >> 8);

		sum	=	max (INT_MIN + 1, min(INT_MAX - 1, sum));
		
		j = Sigmoid16((int)sum);
		if (j > 0xFFFF)
			j = 0xFFFF;

		*rgLayer1++ = (unsigned short)j;
	}
}

static __int64 ForwardFeedLayerNoSig(int cLayer0, unsigned short *rgLayer0, int cLayer1, __int64 *rgLayer1,const int *rgWeight,const int *rgBias)
{
	int i, j;
	__int64 sum, Tot = 0;
	__int64 iVal;
	unsigned short *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++)) << 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum	 += iVal;
			
		}

		sum	= (sum >> 8);

		*rgLayer1++ =	sum;
		Tot		+=	abs (sum);
	}

	return Tot;
}

void ForwardFeed	(	int				*rgFeat, 
						unsigned short	*rgHidden, 
						__int64			*rgOutput
					)
{

	ForwardFeedLayer	(	cInput, 
							rgFeat, 
							cHidden, 
							rgHidden, 
							rgWeightHidden,
							rgBiasHidden
						);

	ForwardFeedLayerNoSig	(	cHidden, 
								rgHidden, 
								cOutput, 
								rgOutput, 
								rgWeightOutput,
								rgBiasOutput
							);

}

int LineSegNN (int *pFeat)
{
	unsigned short	aHidden[50];
	__int64			aOutput[10];
	int				i, iBest	=	0;

	ForwardFeed (pFeat, aHidden, aOutput);

	for (i = 1; i < cOutput; i++)
	{
		if (aOutput[i]	> aOutput[iBest])
			iBest	=	i;
	}

	return iBest;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\unigram.c ===
// unigram.c
// generated by "uni2c 10 \\jpittman1\c\hwx\inferno\tools\corp2uni\debug\debug.frq unigram.c"
// Time: Tue Dec 22 10:06:58 1998

// JPittman (Dec 22, 1998): Modified corp2uni.exe to include apostrophies within words when they
// do not begin or end the word.  We do this to avoid apostrophies when they were used as
// single quotes, but because of this we will omit 'twas and bitchin' (which probably will
// not make our 10-word frequency cut-off anyway).
#include <common.h>
#include <ctype.h>
#include "trie.h"
#include "sysdict.h"

#define UNIGRAM_MAXCOST 4222

// This version converts the word to lowercase, strips off leading
// and trailing punctuation, and even sums the scores of compound
// words, whether they are delimited by hyphens, ampersands, underscores,
// or whatever.
// The table is lowercase alpha and apostrophies.
// This code treats the apostrophy is if it were another letter in the alphabet.

static int isletter(unsigned char c)
{
	//      upper case                lower case                  apost
	return (((64 < c) && (c < 91)) || ((96 < c) && (c < 123)) || (c == 39));
}

// This is currently very specific to plain ASCII.
// I will convert to a 1252-specific version soon.

static void strlower(unsigned char *s)
{
	for (; *s; s++)
	{
		if ((64 < *s) && (*s < 91))
			*s += 32;
	}
}

static int
LookupInDict(unsigned char *pWord)
{
	DWORD	cost;

	// Look up word as is.
	if (Word2Tag(pWord, &cost)) {
		return (cost & 0x0000FFFF);
	}

	// Look up word with all but first in lower case.
	strlower(pWord + 1);
	if (Word2Tag(pWord, &cost)) {
		return (cost & 0x0000FFFF);
	}

	// Look up word with all in lower case.
	strlower(pWord);
	if (Word2Tag(pWord, &cost)) {
		return (cost & 0x0000FFFF);
	}

	// Not in dict, use default cost.
	return UNIGRAM_MAXCOST;
}

int UnigramCost(unsigned char *szWord)
{
	unsigned char szBuffer[64], *psz, *p;
	int cost = 0;

	// Check word length
	if (63 < strlen(szWord))
		return UNIGRAM_MAXCOST;

	// Put word in local buffer.
	strcpy(szBuffer, szWord);

	// Find first letter.
	psz = szBuffer;
	while (*psz && !isletter(*psz))
		psz++;
	
	// No first letter -> max cost for now.
	if (!*psz)
		return UNIGRAM_MAXCOST;

	// Find last letter
	p = strchr(psz, '\0') - 1;
	while (!isletter(*p))
		p--;
	p++;
	*p = '\0';

	while (*psz)
	{
		p = psz;
		while (isletter(*p))
			p++;

		if (*p)
		{
			*p = '\0';
			p++;
		}
		cost += LookupInDict(psz);
		psz = p;
	}
	return cost;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\fra\linesegnn.c ===
#include <limits.h>
#include "common.h"

// generated by trntrex from 3560
// layer 0
static const int cInput = 19;
// layer 1
static const int cHidden = 8;
static const int rgWeightHidden[8*19] = {
	// rgWeightHidden+0*19
	-448, -528, -394, 430, 572,
	5490, 8288, 3350, 4027, 2114,
	-1173, 4162, -686, -761, -1264,
	2508, 959, -225, -2091,	// rgWeightHidden+1*19
 -2599,
	-2722, -800, -634, 26, 177,
	-1150, 933, 1221, 1764, 112,
	264, 2847, 317, 788, 460,
	3133, -1511, -508,	// rgWeightHidden+2*19
 363, -3731,
	-83, 1454, 51, -2340, 2049,
	-3503, -318, 1767, -285, 1363,
	-535, -880, 1783, 262, -275,
	540, 121,	// rgWeightHidden+3*19
 -2039, 4152, 5881,
	2994, -4703, 1713, 1657, 4205,
	972, -983, 4452, -839, 2089,
	-734, 1200, 442, 135, -499,
	-1390,	// rgWeightHidden+4*19
 -4495, 3142, 1603, 6589,
	-3935, 1469, -293, 2404, -444,
	-618, 6542, -1311, 694, -847,
	-174, 2004, 2336, 920, -987,
	// rgWeightHidden+5*19
	1570, -3065, -1683, -588, -3089,
	11, 2088, -771, 3734, 3088,
	-7386, 1678, -1124, 192, -80,
	908, 1627, -5474, -38,	// rgWeightHidden+6*19
 1954,
	7294, 10833, 1000, 2099, 2369,
	1242, 626, 454, 2572, -2882,
	421, -753, -98, -2647, -1421,
	-3539, 349, 604,	// rgWeightHidden+7*19
 896, -4607,
	-12399, -1664, 171, -51, 300,
	-710, 719, 2085, -1675, 115,
	-1096, -1275, -284, -1564, -2993,
	-415, 358};  // rgWeightHidden[8*19]

static const int rgBiasHidden[8] = {
	-4639, -1667, -512, 375, -1028,
	-1585, 2654, 1088
};  // rgBiasHidden[8]

// layer 2
static const int cOutput = 3;
static const int rgWeightOutput[3*8] = {
	// rgWeightOutput+0*8
	1335, -382, 1151, 397, 829,
	-2413, 356, 343,	// rgWeightOutput+1*8
 -979, 572,
	-1, 253, 642, -300, -766,
	-8,	// rgWeightOutput+2*8
 -1043, -379, -1402, -528,
	-968, 3093, 999, -290};  // rgWeightOutput[3*8]

static const int rgBiasOutput[3] = {
	-1597, -423, 264
};  // rgBiasOutput[3]



#include "math16.h"


static void ForwardFeedLayer(int cLayer0, int *rgLayer0, int cLayer1, unsigned short *rgLayer1, const int *rgWeight, const int *rgBias)
{
	int i, j;
	__int64 sum;
	__int64 iVal;
	int *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++))<< 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum += iVal;
		}

		sum	=	(sum >> 8);

		sum	=	max (INT_MIN + 1, min(INT_MAX - 1, sum));
		
		j = Sigmoid16((int)sum);
		if (j > 0xFFFF)
			j = 0xFFFF;

		*rgLayer1++ = (unsigned short)j;
	}
}

static __int64 ForwardFeedLayerNoSig(int cLayer0, unsigned short *rgLayer0, int cLayer1, __int64 *rgLayer1,const int *rgWeight,const int *rgBias)
{
	int i, j;
	__int64 sum, Tot = 0;
	__int64 iVal;
	unsigned short *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++)) << 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum	 += iVal;
			
		}

		sum	= (sum >> 8);

		*rgLayer1++ =	sum;
		Tot		+=	abs (sum);
	}

	return Tot;
}

void ForwardFeed	(	int				*rgFeat, 
						unsigned short	*rgHidden, 
						__int64			*rgOutput
					)
{

	ForwardFeedLayer	(	cInput, 
							rgFeat, 
							cHidden, 
							rgHidden, 
							rgWeightHidden,
							rgBiasHidden
						);

	ForwardFeedLayerNoSig	(	cHidden, 
								rgHidden, 
								cOutput, 
								rgOutput, 
								rgWeightOutput,
								rgBiasOutput
							);

}

int LineSegNN (int *pFeat)
{
	unsigned short	aHidden[50];
	__int64			aOutput[10];
	int				i, iBest	=	0;

	ForwardFeed (pFeat, aHidden, aOutput);

	for (i = 1; i < cOutput; i++)
	{
		if (aOutput[i]	> aOutput[iBest])
			iBest	=	i;
	}

	return iBest;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\uk\linesegnn.c ===
#include <limits.h>
#include "common.h"

// generated by trntrex from 3560
// layer 0
static const int cInput = 19;
// layer 1
static const int cHidden = 8;
static const int rgWeightHidden[8*19] = {
	// rgWeightHidden+0*19
	-448, -528, -394, 430, 572,
	5490, 8288, 3350, 4027, 2114,
	-1173, 4162, -686, -761, -1264,
	2508, 959, -225, -2091,	// rgWeightHidden+1*19
 -2599,
	-2722, -800, -634, 26, 177,
	-1150, 933, 1221, 1764, 112,
	264, 2847, 317, 788, 460,
	3133, -1511, -508,	// rgWeightHidden+2*19
 363, -3731,
	-83, 1454, 51, -2340, 2049,
	-3503, -318, 1767, -285, 1363,
	-535, -880, 1783, 262, -275,
	540, 121,	// rgWeightHidden+3*19
 -2039, 4152, 5881,
	2994, -4703, 1713, 1657, 4205,
	972, -983, 4452, -839, 2089,
	-734, 1200, 442, 135, -499,
	-1390,	// rgWeightHidden+4*19
 -4495, 3142, 1603, 6589,
	-3935, 1469, -293, 2404, -444,
	-618, 6542, -1311, 694, -847,
	-174, 2004, 2336, 920, -987,
	// rgWeightHidden+5*19
	1570, -3065, -1683, -588, -3089,
	11, 2088, -771, 3734, 3088,
	-7386, 1678, -1124, 192, -80,
	908, 1627, -5474, -38,	// rgWeightHidden+6*19
 1954,
	7294, 10833, 1000, 2099, 2369,
	1242, 626, 454, 2572, -2882,
	421, -753, -98, -2647, -1421,
	-3539, 349, 604,	// rgWeightHidden+7*19
 896, -4607,
	-12399, -1664, 171, -51, 300,
	-710, 719, 2085, -1675, 115,
	-1096, -1275, -284, -1564, -2993,
	-415, 358};  // rgWeightHidden[8*19]

static const int rgBiasHidden[8] = {
	-4639, -1667, -512, 375, -1028,
	-1585, 2654, 1088
};  // rgBiasHidden[8]

// layer 2
static const int cOutput = 3;
static const int rgWeightOutput[3*8] = {
	// rgWeightOutput+0*8
	1335, -382, 1151, 397, 829,
	-2413, 356, 343,	// rgWeightOutput+1*8
 -979, 572,
	-1, 253, 642, -300, -766,
	-8,	// rgWeightOutput+2*8
 -1043, -379, -1402, -528,
	-968, 3093, 999, -290};  // rgWeightOutput[3*8]

static const int rgBiasOutput[3] = {
	-1597, -423, 264
};  // rgBiasOutput[3]



#include "math16.h"


static void ForwardFeedLayer(int cLayer0, int *rgLayer0, int cLayer1, unsigned short *rgLayer1, const int *rgWeight, const int *rgBias)
{
	int i, j;
	__int64 sum;
	__int64 iVal;
	int *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++))<< 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum += iVal;
		}

		sum	=	(sum >> 8);

		sum	=	max (INT_MIN + 1, min(INT_MAX - 1, sum));
		
		j = Sigmoid16((int)sum);
		if (j > 0xFFFF)
			j = 0xFFFF;

		*rgLayer1++ = (unsigned short)j;
	}
}

static __int64 ForwardFeedLayerNoSig(int cLayer0, unsigned short *rgLayer0, int cLayer1, __int64 *rgLayer1,const int *rgWeight,const int *rgBias)
{
	int i, j;
	__int64 sum, Tot = 0;
	__int64 iVal;
	unsigned short *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++)) << 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum	 += iVal;
			
		}

		sum	= (sum >> 8);

		*rgLayer1++ =	sum;
		Tot		+=	abs (sum);
	}

	return Tot;
}

void ForwardFeed	(	int				*rgFeat, 
						unsigned short	*rgHidden, 
						__int64			*rgOutput
					)
{

	ForwardFeedLayer	(	cInput, 
							rgFeat, 
							cHidden, 
							rgHidden, 
							rgWeightHidden,
							rgBiasHidden
						);

	ForwardFeedLayerNoSig	(	cHidden, 
								rgHidden, 
								cOutput, 
								rgOutput, 
								rgWeightOutput,
								rgBiasOutput
							);

}

int LineSegNN (int *pFeat)
{
	unsigned short	aHidden[50];
	__int64			aOutput[10];
	int				i, iBest	=	0;

	ForwardFeed (pFeat, aHidden, aOutput);

	for (i = 1; i < cOutput; i++)
	{
		if (aOutput[i]	> aOutput[iBest])
			iBest	=	i;
	}

	return iBest;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\arcparm.h ===
// arcparm.h

#ifndef __INCLUDE_ARCPARM
#define	__INCLUDE_ARCPARM

typedef struct tagARCPARM
{
// Resolution Dependent threshholds

	short	arcRawHysterAbs;    
	short	arcRawHysInfAbs;	// Inflection Pt hysteresis window
	short	arcRawDistTurn;		// Distance of the curve of a turn
	short	arcRawDistStr;		// Min straightness distance
	short	arcRawDistHook;		// Max length of a removable hook

// Resolution Independent threshholds

	short	arcMinSmooth;		// Pts < this distance are averaged
	short	arcHysInfRel;		// Inf Pt hysteresis. = %(stroke leng)
	short	arcInfAngMin;		// Inflection Pt '?' case threshhold
	short	arcThinTangent;		// 100/tangent(20 degrees)
	short	arcTurnSlack;		// Slack allowed in straightness
	short	arcTurnMult;		// Factor relating turn to straightness
	short	arcHookPts;			// Number of points from the end
	short	arcHookAngle;		// Max angle for hook (larger -> more dehooking)
	short	arcHookFactor;		// dehook if factor*(size hook) < diameter(stroke)
	short	arcMergeRatio;		// Merge extremum arcs 1/8 size next
	short	arcStrokeSize;		// Size of normalized strokes
} ARCPARM;

extern const ARCPARM arcparmG;

#endif	//__INCLUDE_ARCPARM
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\arcs.c ===
#include "common.h"
#include "otterp.h"
#include <math.h>

#define NEAR_ARCPARM ARCPARM
#define ABSVAL(x)       ((x) < 0 ? -(x) : (x))
#define ABS(x)  ((x) < 0 ? -(x) : (x))
typedef POINT           RAWXY;

#define FIXED float

#define WArctan2 Arctan2


#define Square(x) ((x)*(x))
#define LCrossProd(xy1, xy2) ((long)(xy1.x) * (long)(xy2.y) - (long)(xy1.y) * (long)(xy2.x))
#define distcmp(a,b,c,csq) (a > c ? FALSE : (b > c ? FALSE : \
       ((((long)a*(long)a)+((long)b*(long)b) > (long)csq) ? FALSE : TRUE)))

#define angldiff(a,b,c)  c=b-a; if (c > 180) c -= 360; \
                    else if (c < -180) c += 360;

// Approximate the hypotenuse given perpendicular sides of lengths a, b
#define approxlens(a,b) ( (b) > (a) ? ((b) + ((a) >> 1)) : ((a) + ((b) >> 1)))
//#define approxlens(a,b) ((int)sqrt(((long)a * (long)a) + ((long)b * (long)b)))

// Approximate the straight line length between POINT points a,b.
#define approxlenp(a,b) (approxlens(ABSVAL((b.y)-(a.y)), ABSVAL((b.x)-(a.x))))

// Calc d = the angle betw (the extension of rgxy[a]:rgxy[b]) and
//          (rgxy[b]:rgxy[c]).  The sign of d reflects clockwise vs
//          counterclockwise turns.
#define calcangle(a,b,c,d)  \
    angldiff(WArctan2(rgxy[b].y - rgxy[a].y, rgxy[b].x - rgxy[a].x),    \
             WArctan2(rgxy[c].y - rgxy[b].y, rgxy[c].x - rgxy[b].x),    \
             d);
#define calcanglep(a,b,c,d)  \
    angldiff(WArctan2(b.y - a.y, b.x - a.x),    \
             WArctan2(c.y - b.y, c.x - b.x),    \
             d);

#define Malloc ExternAlloc
#define Free   ExternFree

///////////////   Local functions
void   NormalizeParmARCS(ARCS *self, NEAR_ARCPARM *arcparm);
void   NormalizeDataARCS(ARCS *self, NEAR_ARCPARM *arcparm);
int    FindHookJointARCS(ARCS *self, NEAR_ARCPARM *arcparm, BOOL fBeginOrEnd, int * angleTurn);
int           DehookARCS(ARCS *self, NEAR_ARCPARM *arcparm);
void     LabelDehookARCS(ARCS *self, NEAR_ARCPARM *arcparm, int idehook);
int      ArcYExtremaARCS(ARCS *self, NEAR_ARCPARM *arcparm);
void            ThinARCS(ARCS *self, NEAR_ARCPARM *arcparm, BOOL fThinAll);
void      ArcTurnPtsARCS(ARCS *self, NEAR_ARCPARM *arcparm);
void   ArcInflectionARCS(ARCS *self, NEAR_ARCPARM *arcparm);
void        MergeEndARCS(ARCS *self, NEAR_ARCPARM *arcparm);
XY           FindCogARCS(ARCS *self, int ixyBeg, int ixyEnd, long *arclength);
void  SpecialCaseDelARCS(ARCS * self, NEAR_ARCPARM * arcparm);
int       CreateMeasARCS(ARCS *self, NEAR_ARCPARM *arcparm);
void UnNormalizeMeasARCS(ARCS *self);
#ifdef NOTYET
int        FindPointARCS(ARCS * self, int ixyStart, int distGoal, BOOL fDirection);
#endif
int        CheckTurnARCS(ARCS *self, NEAR_ARCPARM *arcparm, int ixyBeg, int ixyEnd,
                                int ixyCheck);
void       MergeArcsARCS(ARCS *self, NEAR_ARCPARM *arcparm, int NEAR *rgArcNew, int cNew,
                              int iType);
int     HysterExtremARCS(ARCS *self, int ixyBeg, int ixyEnd, int NEAR * pExtrem,
                              BOOL fYDirection, int hysThresh, int extMax);

ARCS *NewARCS(int cRaw)
{
    ARCS *arcs = ExternAlloc(sizeof(ARCS));

	if (arcs != (ARCS *) NULL)
	{
		// Initialize the memory, because subsequent code relies on this and
		// ExternAlloc doesn't do it for us.
		memset(arcs,0,sizeof(ARCS));

        arcs->rgxy = ExternAlloc(sizeof(ARCSXY) * cRaw);
        if (arcs->rgxy == NULL)
        {
            ExternFree(arcs);
            arcs = NULL;
        } else {
			// Initialize the memory, because subsequent code relies on this and
			// ExternAlloc doesn't do it for us.
			memset(arcs->rgxy,0,sizeof(ARCSXY)*cRaw);
		}
	}

	return arcs;
}

void DestroyARCS(ARCS *arcs)
{
	if (arcs != (ARCS *) NULL)
	{
		ExternFree(arcs->rgxy);
	    ExternFree(arcs);
	}
}

#if defined(DBG)
// PURPOSE: Quick hack to get stroke center of gravity
// RETURN:  xy
// CONDITIONS: ditch it when we figure something out

XY XyCogStrokeARCS(ARCS *self, NEAR_ARCPARM *arcparm)
{
    long arclength;
    SmoothPntsARCS(self, arcparm);
    return FindCogARCS(self, 0, self->cxy-1, &arclength);
}
#endif //defined(DBG) || defined(OS2)

// PURPOSE: Main stroke processor routine - arc the data - i.e.,
//          1 - find the "feature points" of the stroke which subdivide the
//              stroke into substrokes or arcs.
//          2 - Compute the measurements of each arc
//          Features consist of y-extrema, points of inflection, turning
//          points and loops(as in an alpha, B, 2, 3...).
// RETURN:  Fills self->rgmeas with the self->cmeas measurements of the stroke
// CONDITIONS:
// COMMENTS: The order of call of the arcing routines matters.
//  Y-extrema are found first and thinned, defining new arcing points.
//  Turning points are currently found within the arc-candidates.
//  Turning points are then merged, creating new arc-candidates.
//  Inflection points are then found within these new arc-candidates,
//  which probably is necessary unless both corners and inflection points
//  are desired in every Z, 2, S, and 8.

int CmeasARCS(ARCS *self, NEAR_ARCPARM *arcparm)
{
   BOOL  fThinAll;

#ifndef WSTATS
//WSTATS -> generate statistics re dehooking

   int idehook;
#endif

   ASSERT (self->crawxy > 0);
   self->ierror = SmoothPntsARCS(self, arcparm);
   if (self->ierror < 0)
   {
      self->cmeas = ARC_CMEASTOOMANY;
      return self->cmeas;
   }
   NormalizeParmARCS(self, arcparm);
   NormalizeDataARCS(self, arcparm);

#ifndef WSTATS
   idehook = DehookARCS(self, arcparm);
#endif

   self->ierror |= ArcYExtremaARCS(self, arcparm);
#ifndef WSTATS
   LabelDehookARCS( self, arcparm, idehook);
#endif
   ArcTurnPtsARCS ( self, arcparm );
   ThinARCS ( self, arcparm, fThinAll=FALSE );
   ArcInflectionARCS(self, arcparm);
   MergeEndARCS(self, arcparm);
   SpecialCaseDelARCS(self, arcparm);
   self->ierror |= CreateMeasARCS(self, arcparm);
   UnNormalizeMeasARCS(self);
   if (self->ierror < 0)
      self->cmeas = ARC_CMEASTOOMANY;

   return self->cmeas;
}


// PURPOSE: Normalize the resolution dependent threshhold parameters
// RETURN:
// CONDITIONS:

void NormalizeParmARCS(ARCS *self, NEAR_ARCPARM *arcparm)
{
   short sizeStrokeMax, sizeFactor, nshift, nhalf;

   ASSERT (arcparm->arcStrokeSize != 0);
   self->sizeNormStrokeV = (self->rawrect.bottom - self->rawrect.top);
   self->sizeNormStrokeH = (self->rawrect.right - self->rawrect.left);
   sizeStrokeMax  = max (self->sizeNormStrokeV, self->sizeNormStrokeH);

   self->arcNormHysterAbs = arcparm->arcRawHysterAbs;
   self->arcNormHysInfAbs = arcparm->arcRawHysInfAbs;
   self->arcNormDistTurn  = arcparm->arcRawDistTurn;
   self->arcNormDistHook  = arcparm->arcRawDistHook;
   self->arcDataShift     = 0;

// Shrink the stroke to prevent overflow problems.

   if (sizeStrokeMax >= arcparm->arcStrokeSize)
   {
      sizeFactor  = sizeStrokeMax / arcparm->arcStrokeSize;

      for (nshift = 0; (nshift < 16) && sizeFactor ; nshift++)
         sizeFactor >>= 1;

      nhalf = 1 << (nshift - 1);

      self->arcNormHysterAbs  = (arcparm->arcRawHysterAbs + nhalf) >> nshift;
      self->arcNormHysInfAbs  = (arcparm->arcRawHysInfAbs + nhalf) >> nshift;
      self->arcNormDistHook   = (arcparm->arcRawDistHook  + nhalf) >> nshift;
      self->arcNormDistTurn   = (arcparm->arcRawDistTurn  + nhalf) >> nshift;
      self->arcNormDistStr    = (arcparm->arcRawDistStr   + nhalf) >> nshift;
      self->sizeNormStrokeV   = (self->sizeNormStrokeV    + nhalf) >> nshift;
      self->sizeNormStrokeH   = (self->sizeNormStrokeH    + nhalf) >> nshift;
      self->arcDataShift      = nshift;
   }
   else
   {
      ASSERT (sizeStrokeMax < arcparm->arcStrokeSize);

   //Enlarge the stroke so the computation has more bits to work with.

      if ((sizeStrokeMax) && (sizeStrokeMax < (arcparm->arcStrokeSize >> 1)))
      {
         ASSERT(sizeStrokeMax != 0);
         sizeFactor = arcparm->arcStrokeSize / sizeStrokeMax;

         for ( nshift = 0; (nshift < 16) && sizeFactor ; nshift++)
            sizeFactor >>= 1;

         self->arcNormHysterAbs  = arcparm->arcRawHysterAbs << nshift;
         self->arcNormHysInfAbs  = arcparm->arcRawHysInfAbs << nshift;
         self->arcNormDistHook   = arcparm->arcRawDistHook  << nshift;
         self->arcNormDistTurn   = arcparm->arcRawDistTurn  << nshift;
         self->arcNormDistStr    = arcparm->arcRawDistStr   << nshift;
         self->sizeNormStrokeV   = self->sizeNormStrokeV    << nshift;
         self->sizeNormStrokeH   = self->sizeNormStrokeH    << nshift;
         self->arcDataShift      = - nshift;
      }
   }
}


// PURPOSE: Normalize the smoothed data
// RETURN:
// CONDITIONS:  First, NormalizeParm must have been called.

void NormalizeDataARCS(ARCS * self, NEAR_ARCPARM * arcparm)
{
   ARCSXY *rgxy;
   int     ixy, nshift, nhalf;

   ASSERT(self->cxy > 0);
   ASSERT(ABSVAL(self->arcDataShift < 15));
   rgxy    = self->rgxy;
   nshift  = self->arcDataShift;
   nhalf   = 1 << (nshift - 1);

   if (nshift < 0)
   {
      nshift = -nshift;
      for (ixy = 0; ixy < self->cxy; ixy++)
      {
         rgxy[ixy].x = (rgxy[ixy].x - self->rawrect.left) << nshift;
         rgxy[ixy].y = (rgxy[ixy].y - self->rawrect.top ) << nshift;
      }
   }
   else if (nshift)
   {
      for (ixy = 0; ixy < self->cxy; ixy++)
      {
         rgxy[ixy].x = (rgxy[ixy].x - self->rawrect.left + nhalf) >> nshift;
         rgxy[ixy].y = (rgxy[ixy].y - self->rawrect.top  + nhalf) >> nshift;
      }
   }
   else
   {
      for (ixy = 0; ixy < self->cxy; ixy++)
      {
         rgxy[ixy].x = (rgxy[ixy].x - self->rawrect.left);
         rgxy[ixy].y = (rgxy[ixy].y - self->rawrect.top );
      }
   }
}

// PURPOSE: Un-normalize the measurements. i.e., put them back in the same
//          dimensions as the original raw data.
// RETURN:
// GLOBALS:
// CONDITIONS:

void UnNormalizeMeasARCS( ARCS * self )
{
   int NEAR *rgmeas;
   int       imeas, nshift;

   rgmeas = self->rgmeas;
   ASSERT(ABSVAL(self->arcDataShift < 15));
   nshift = self->arcDataShift;

   if (nshift < 0)
   {
      nshift = -nshift;

      for (imeas = 0; imeas < self->cmeas; )
      {
#ifdef WIN32
         rgmeas[imeas++] = (rgmeas[imeas] / (1 << nshift)) + self->rawrect.left;
         rgmeas[imeas++] = (rgmeas[imeas] / (1 << nshift)) + self->rawrect.top;
#else
         rgmeas[imeas++] = (rgmeas[imeas] >> nshift) + self->rawrect.left;
         rgmeas[imeas++] = (rgmeas[imeas] >> nshift) + self->rawrect.top;
#endif
      }
   }
   else if (nshift)
   {
      for (imeas = 0; imeas < self->cmeas; )
      {
#ifdef WIN32
         rgmeas[imeas++] = (rgmeas[imeas] * (1 << nshift)) + self->rawrect.left;
         rgmeas[imeas++] = (rgmeas[imeas] * (1 << nshift)) + self->rawrect.top;
#else
         rgmeas[imeas++] = (rgmeas[imeas] << nshift) + self->rawrect.left;
         rgmeas[imeas++] = (rgmeas[imeas] << nshift) + self->rawrect.top;
#endif
      }
   }
   else
   {
      for (imeas = 0; imeas < self->cmeas; )
      {
         rgmeas[imeas++] += self->rawrect.left;
         rgmeas[imeas++] += self->rawrect.top;
      }
   }
}

// PURPOSE: Smooth the high density points from the raw data
//          Points closer than sqrt(arcMinSmooth) are joined.
//          Only when the new point is a threshhold distance from the
//          running average of the averaged point(s) is the old (point or
//          average) entered as a smoothed point.
// RETURN:
// CONDITIONS:
// COMMENTS: Noise is generated in two ways: by the tablet and the user.
//          User generated noise appears to be much greater in magnitude.
//          The speed of writing is itself a noise filter in that fast
//          writing results in well spaced points along a path close to
//          what the writer intended.  Slow writing can generated a mess
//          of convoluted points.  This smoother averages points within a
//          threshhold distance and is therefore effective where local
//          angle is critical - it has been shown to enable the
//          FindHookJointARCS to be highly effective in identifying the
//          correct joint, both in absolute terms and compared to the same
//          applied to the raw data.  This algorithm is good at smoothing the
//          garbage that sometimes occurs at turning points.
//          It doesn't do everything, however, and what it does not do is
//          smooth the user generated noise at a faster speed, and therefore
//          noise tolerance was designed into each of the feature
//          finders with this version of SmoothPntsARCS.
//
//          This routine is probably useful enough to dehooking to be retained
//          long term.  If filtering or interpolation is considered, it
//          might be applied to the smoothed data.  The gain is unclear
//          but might be tested at some point.  It is worth recording here
//          that the essential difficulty with inflection points is
//          primarily the difficulty of calling the threshhold between
//          wobble that writers put into h's, n's, m's and even l's versus
//          wobble significant enough to warrant an inflection point feature,
//          which filtering does not address.  There is more likely to be
//          some statistical improvement to turning point detection, although
//          there is larger gain there in making that code more observant of
//          long slow turns.
//
// Notes:   When points are averaged, the 'base' of the point is subtracted
//          so that all averaging can be done without overflow.
// Notes:   If scaling changes, ArcifyTapSTROKE must also be changed!

int SmoothPntsARCS(ARCS * self, NEAR_ARCPARM * arcparm)
{
   RAWXY  *rgrawxy;                    // array: Raw (x,y) data
   ARCSXY *rgxy;                       // array: Smoothed Data
   XY      xy,xyOld,xyOlder;
   int     irawxy, cxy, crawxy, arcMinSmooth, arcMinSqr;
   int     delx, dely, avgx, avgy, basex, basey;
   int     sizeStrokeV, sizeStrokeH, sizeStroke;
   int     cPointsAveraged = 1;        //number of points being averaged
   BOOL    fStart = TRUE;              //flags beginning of stroke
   rgrawxy      = self->rgrawxy;
   crawxy       = self->crawxy;
   rgxy         = self->rgxy;
   arcMinSmooth = arcparm->arcMinSmooth;

//
// Throw away the first point and last point and see if that helps
//

    if (crawxy > 14)
    {
        rgrawxy += 1;
        crawxy -= 2;
    }

// Modify arcMinSmooth for small characters to keep the stems of r's
// from being mimimized.  This is neither a net gain or loss based
// upon testing output.

   sizeStrokeV  = self->rawrect.bottom - self->rawrect.top;
   sizeStrokeH  = self->rawrect.right - self->rawrect.left;
   sizeStroke   = approxlens (sizeStrokeV, sizeStrokeH );
   arcMinSmooth = min(arcMinSmooth, ((sizeStroke + 8) >> 4));
   arcMinSqr    = arcMinSmooth * arcMinSmooth;

   cPointsAveraged    = 1;
   fStart       = TRUE;

   xyOld.x      = rgrawxy[0].x;
   xyOld.y      = rgrawxy[0].y;
   cxy          = 0;    // initialize count of smoothed points
   xyOlder      = xyOld;

   if (crawxy == 1)
   {
      rgxy[cxy++] = xyOld;
      self->cxy   = cxy;
      return 0;
   }

   for (irawxy = 1; irawxy < crawxy-1; irawxy++)
   {
      if ((cxy + 4) > ARC_CSMOOTHXYMAX)
      {
         self->cxy = cxy;
         return -1;
      }

      ASSERT (cPointsAveraged >= 1);
      xy.x = rgrawxy[irawxy].x;
      xy.y = rgrawxy[irawxy].y;

      if (cPointsAveraged == 1)
      { // not averaging
         delx = xyOld.x - xy.x;
         dely = xyOld.y - xy.y;
      }
      else
      { // Points are being averaged together...
         delx = ((avgx + (cPointsAveraged >> 1)) / cPointsAveraged) - (xy.x - basex);
         dely = ((avgy + (cPointsAveraged >> 1)) / cPointsAveraged) - (xy.y - basey);
      }

   // Is the new point the required threshhold distance away?
   //     if ( (delx*delx + dely*dely) < arcMinSqr )

      if ( distcmp(delx,dely,arcMinSmooth,arcMinSqr) )
      {
         if ( cPointsAveraged == 1 )
         {
            basex = xyOld.x;
            basey = xyOld.y;
            avgx = avgy = 0;
            if (!fStart)
            {
            // Insert one point because averaged points loses turning
            // information.  Order of calculation matters.
               rgxy[cxy].x = ((xyOlder.x + 2) >> 2) + (3 * ((xyOld.x + 2) >> 2));
               rgxy[cxy].y = ((xyOlder.y + 2) >> 2) + (3 * ((xyOld.y + 2) >> 2));

               if ((rgxy[cxy-1].x != rgxy[cxy].x) || (rgxy[cxy-1].y != rgxy[cxy].y))
                  cxy++;
            }
         }

         avgx = avgx + (xy.x - basex);
         avgy = avgy + (xy.y - basey);
         cPointsAveraged++;
      }
      else
      {
      // The distance between points is sufficient to not average.
      // Enter the last point(s) in the smoothed data

         if (cPointsAveraged != 1)
         {
            xyOld.x = basex + ((avgx + (cPointsAveraged >> 1)) / cPointsAveraged);
            xyOld.y = basey + ((avgy + (cPointsAveraged >> 1)) / cPointsAveraged);
         }

         if ((!cxy) || (xyOld.x != rgxy[cxy-1].x) || (xyOld.y != rgxy[cxy-1].y))
         {
         // avoid the once in a blue moon case of adjacent
         // points being in the exact same place...
            rgxy[cxy++] = xyOld;
            fStart = FALSE;
         }

         cPointsAveraged = 1;
         xyOlder = xyOld;
         xyOld = xy;
      }
   }

//At last point of stroke
//If averaging data, include the next-to-the-last point in the avg.

   if (cPointsAveraged > 1)
   {
      xyOld.x = basex + ((avgx + (cPointsAveraged >> 1)) / cPointsAveraged);
      xyOld.y = basey + ((avgy + (cPointsAveraged >> 1)) / cPointsAveraged);
   }

//Record the old point/avg in the smoothed data (it has not yet been)

   if ((!cxy) || (xyOld.x != rgxy[cxy-1].x) || (xyOld.y != rgxy[cxy-1].y))
      rgxy[cxy++] = xyOld;

//Record the current (last point) (Asymmetrical from beginning of stroke)

   xy.x = rgrawxy[crawxy-1].x;
   xy.y = rgrawxy[crawxy-1].y;
   if ((xy.x != rgxy[cxy-1].x) || (xy.y != rgxy[cxy-1].y))
      rgxy[cxy++] = xy;

    ASSERT(cxy <= self->crawxy);

   self->cxy = cxy;
   return 0;
}



// COMMENT: Much of the remaining code relies on
//  calcangle(i, j, k, alpha), defined in an include file.  For understanding,
//  note that calcangle calculates the angle between the straight line
//  continuation of vector rgxy[i]:rgxy[j], and the line defined by
//  vector rgxy[j]:rgxy[k].  The result alpha always lies between 0
//  and 180 degrees and is signed.  ABS(Alpha) increases as the angle of
//  turn increases.

// PURPOSE: Dehook strokes
// RETURN: logical or of (ARC_hook_begin if beginning hook removed,
//                        ARC_hook_end if end removed)
// CONDITIONS:
// COMMENTS:Statistics showed that dehooking is more effectual on smoothed
//          than raw data.  The effect of this is therefore that if the
//          smoothing routine is changed, the decision criteria here will
//          also need to change.

int DehookARCS(ARCS * self, NEAR_ARCPARM * arcparm)
{
   ARCSXY *rgxy;                 // array: Smoothed Data
   int     cxy;                  // index into smoothed data
   int     ixy, ixyTurn, ixyEdge, ixyEnd, sizeHook;
   int     alpha, angleTurn, angleHook, ireturn;
   int     tiltStroke, sizeStroke, sizeHookRel;

   rgxy        = self->rgxy;
   cxy         = self->cxy;
   ixyEnd      = cxy-1;
   ireturn     = 0;

   if (cxy < 4)
      return ireturn;

   sizeStroke = approxlens(self->sizeNormStrokeV, self->sizeNormStrokeH);

//Beginning-of-stroke hook:

   ixyTurn = FindHookJointARCS (self, arcparm, ARC_hook_begin, &angleTurn);
   sizeHook = approxlenp(rgxy[ixyTurn], rgxy[0]);

// Note: The normal assertions (of sizeHook != 0) don't always apply,
// since smoothing is done in the raw domain, and normalization could
// conceivably map points on to each other...
// case of doubling back on itself; candidate off by 1

   if (sizeHook == 0 && ixyTurn > 1)
   {
      ixyTurn--;
      sizeHook = approxlenp(rgxy[ixyTurn], rgxy[0]);
   }

// avoid overflow problems now and avoid (long)s: forget large hooks now.

   if ( IsHookSmallARCS(self, sizeHook) && ( sizeHook && (sizeHook < 1024 )))
   {
      ASSERT( sizeHook != 0 );
      sizeHookRel = sizeStroke / sizeHook;
      tiltStroke = WArctan2(rgxy[ixyTurn+2].y - rgxy[ixyTurn].y, rgxy[ixyTurn+2].x - rgxy[ixyTurn].x);
      tiltStroke = ABSVAL(180 - tiltStroke);
      angleHook = 0;
      for (ixy = 1; ixy < ixyTurn; ixy++)
      {
         ixyEdge = ((ixy == 1) ? 0 : (ixy - 2));
         calcangle(ixyEdge, ixy, ixy+2, alpha);
         angleHook = angleHook + ABSVAL(alpha);
      }

   //If either the beta release called for dehooking, or if ... dehook

      AssertMul(3, self->sizeNormStrokeV);
      AssertMul(3, self->sizeNormStrokeH);
      AssertMul(3, sizeHook);
      AssertMul(arcparm->arcHookFactor, sizeHook);
      AssertMul(5, tiltStroke);

      if ((((sizeHook * arcparm->arcHookFactor) < sizeStroke)
           &&  ((180 - angleTurn) < (arcparm->arcHookAngle)))
           ||
           ( (sizeHookRel > 4) &&
           (angleTurn > 84) &&
           (tiltStroke > 35) &&
           (((-5)*tiltStroke + 8*angleTurn + 3*sizeHookRel + 2*angleHook) > 30)))
      {
               cxy -= ixyTurn;
               ixyEnd = cxy - 1;
               memmove(&rgxy[0], &rgxy[ixyTurn], (sizeof(ARCSXY))*cxy);
               self->cxy = cxy;
               ireturn = ARC_hook_begin;
      }
   }


   //End-of-stroke hook:
   //Find point that separates the hook candidate from the stroke proper

   ixyTurn = FindHookJointARCS (self, arcparm, ARC_hook_end, &angleTurn);

   sizeHook = approxlenp(rgxy[ixyTurn], rgxy[ixyEnd]);

   if (sizeHook > 1024 || !(IsHookSmallARCS(self, sizeHook))) //avoid overflow
      return ireturn;

// case of doubling back on itself; candidate off by 1

   if ((sizeHook == 0) && (ixyTurn < cxy - 2))
   {
      ixyTurn++;
      sizeHook = approxlenp(rgxy[ixyTurn], rgxy[ixyEnd]);
   }

   if ( sizeHook && (sizeHook < 1024 ))
   {
      ASSERT( sizeHook != 0 );
      sizeHookRel    = ((!sizeHook) ? 20 : (sizeStroke / sizeHook));
      tiltStroke = WArctan2(rgxy[ixyTurn].y - rgxy[ixyTurn-2].y, rgxy[ixyTurn].x - rgxy[ixyTurn-2].x);
      tiltStroke = ABSVAL(180 - tiltStroke);
      angleHook = 0;

      for (ixy = cxy-2; ixy > ixyTurn; ixy--)
      {
         ixyEdge = ((ixy == cxy-2) ? (cxy-1) : (ixy + 2));
         calcangle(ixy-2, ixy, ixyEdge, alpha);
         angleHook = angleHook + ABSVAL(alpha);
      }

      AssertMul(sizeHook, arcparm->arcHookFactor);
      if (((sizeHook * arcparm->arcHookFactor) < sizeStroke)
          &&  ((180 - angleTurn) < (arcparm->arcHookAngle)))
      {
         (self->cxy) -= (ixyEnd - ixyTurn);
         ireturn |= ARC_hook_end;
      }
   }

   return ireturn;
}


//PURPOSE:  Find the Hook Candidate.
//          Finds the smoothed point (near the beginning or the end of the
//          stroke) of greatest local curvature.  This is the joint between
//          the hook candidate and the stroke proper.
// RETURN:
// CONDITIONS:

int FindHookJointARCS(ARCS * self, NEAR_ARCPARM * arcparm, BOOL fBeginOrEnd, int * angleTurn)
{
   ARCSXY *rgxy;
   int     ixy, ixyEdgeLeft, ixyEdgeRight, indxJoint, ixyEnd, ixyStop;
   int     alpha, alphafirst, alphasecond;

   rgxy        = RgxyARCS(self);
   *angleTurn  = 0;

   if (fBeginOrEnd == ARC_hook_begin)
   {
      indxJoint = 1;
      ixyStop = min(arcparm->arcHookPts, 1 + ((self->cxy)/3));

      for (ixy = 1; ixy < ixyStop; ixy++)
      {
         ixyEdgeLeft = ((ixy == 1) ? 0 : (ixy - 2));
         calcangle(ixyEdgeLeft, ixy, ixy+2, alpha);
         alpha = ABSVAL(alpha);

         if (alpha > (*angleTurn))
         {
            *angleTurn   = alpha;
            indxJoint     = ixy;
         }

         if ((180 - *angleTurn) < ARC_hook_find)
            break;
      }

   // Adjust joint candidate??  Select the tightest local angle.

      ASSERT (indxJoint > 0);
      calcangle(indxJoint-1, indxJoint, indxJoint+1, alphafirst);
      calcangle(indxJoint, indxJoint+1, indxJoint+2, alphasecond);
      if ((ABSVAL(alphasecond) > ABSVAL(alphafirst)) && (indxJoint != ixyStop-1))
      {
         indxJoint++;
         ixyEdgeLeft = ((ixy == 1) ? 0 : indxJoint - 2);
         ixyEdgeRight = ((ixy >= (self->cxy)-1) ? ((self->cxy)-1) : indxJoint+2);
         calcangle(ixyEdgeLeft, indxJoint, ixyEdgeRight, alpha);
         *angleTurn = ABSVAL(alpha);
      }
   }
   else
   {
      ixyEnd = (self->cxy) - 1;
      indxJoint = ixyEnd - 1;
      ixyStop = ixyEnd - min(arcparm->arcHookPts, 1 + ((self->cxy)/3));

      for (ixy = ixyEnd-1; ixy > ixyStop; ixy--)
      {
         ixyEdgeRight = ((ixy == ixyEnd - 1) ? ixyEnd : (ixy + 2));
         calcangle(ixy - 2, ixy, ixyEdgeRight, alpha);
         alpha = ABSVAL(alpha);

         if (alpha > (*angleTurn))
         {
            *angleTurn   = alpha;
            indxJoint     = ixy;
         }

         if ((180 - *angleTurn) < ARC_hook_find)
            break;
      }

   // Adjust joint candidate??  Select the tightest local angle.

      ASSERT (indxJoint < ixyEnd);
      calcangle(indxJoint+1, indxJoint, indxJoint-1, alphafirst);
      calcangle(indxJoint, indxJoint-1, indxJoint-2, alphasecond);
      if ((ABSVAL(alphasecond) > ABSVAL(alphafirst)) && (indxJoint != ixyStop+1))
      {
         indxJoint--;
         ixyEdgeRight = ((indxJoint == ixyEnd-1) ? ixyEnd : (indxJoint + 2));
         ixyEdgeLeft = (indxJoint == 1 ? 0 : indxJoint - 2);
         calcangle(ixyEdgeLeft, indxJoint, ixyEdgeRight, alpha);
         *angleTurn = ABSVAL(alpha);
      }
   }

   return indxJoint;
}

// PURPOSE: Label dehooked end (for benefit of the viewer only)
// RETURN:
// CONDITIONS:

void  LabelDehookARCS(ARCS * self, NEAR_ARCPARM * arcparm, int idehook )
{
   if (idehook & ARC_hook_begin)
      self->rgArcType[0]  |= ARC_type_hook;

   if (idehook & ARC_hook_end)
      self->rgArcType[(self->cArcEnd) - 1]   |= ARC_type_hook;
}

// PURPOSE: Locate the y-extrema in the smoothed data by a hysteresis finder
//          Include endpoints.  Thin these, based on angle.
// RETURN:
// CONDITIONS:
// COMMENTS: It is straightforward - any shortage of y-extrema is due to
//          thinning, not to the threshhold in ArcYExtremaARCS.

int ArcYExtremaARCS(ARCS *self, NEAR_ARCPARM *arcparm)
{
   int NEAR *pExtrem;            // argument to hand to HysterExtremARCS
   BOOL      fYDirection, fThinAll;
   int       cExtrema, extMax;
   int       itype, ixyBegin, ixyEnd, ierror, arcHysterAbs;

   ierror       = 0;
   pExtrem      = self->rgArcEnd;
   pExtrem++[0] = 0;
   arcHysterAbs = self->arcNormHysterAbs;

   ixyBegin    = 0;
   ixyEnd      = self->cxy-1;
   extMax  = ARC_CARCENDMAX - 2; // error if more extrema than this

// Find all y-extrema candidates
   cExtrema    = HysterExtremARCS(self, ixyBegin, ixyEnd, pExtrem, fYDirection=TRUE,
                                arcHysterAbs, extMax );

// Note: should ASSERT that number of points >=2 or change the next lines
// ArcifyTapSTROKE prevents single point strokes from getting here.

   pExtrem[cExtrema] = self->cxy - 1;
   self->cArcEnd = cExtrema + 2;    //+2 for the endpoints

// Thin the candidates
   ThinARCS(self, arcparm, fThinAll=TRUE);

// (Thinning potentially modifies self->cArcEnd)

   if (self->cArcEnd > ARC_CARCTYPEMAX)
   {
      ierror = -1;
      self->cArcEnd = ARC_CARCTYPEMAX;
   }

   for (itype = 0; itype < self->cArcEnd; itype++)
      self->rgArcType[itype] = ARC_type_ext;

   return ierror;
}


// PURPOSE: Hysteresis Extrema finder : (direction spec by fYDirection)
// RETURN:  count found - extrema are returned in pExtrem[].
// CONDITIONS:
//       ixyBeg,ixyEnd; //Indices in smoothed data defining the arc-candidate
//          pExtrem;       //where to store the indices of the result
//      fYDirection;    //TRUE-> extrema in Y, FALSE-> perpend. to base
//       hysThresh;      //hysteresis window
//      extMax;         //maximum extrema allowed
// COMMENTS:This is the basis of the y-extrema finder when fYDirection is
//          TRUE.  If FALSE, HysterExtremARCS locates extrema perpendicular
//          to the line joining rgxy[ixyBeg] and rgxy[ixyEnd].

int  HysterExtremARCS(ARCS *self, int ixyBeg, int ixyEnd,
                      int NEAR *pExtrem, BOOL fYDirection, int hysThresh,
                      int extMax)
{
   ARCSXY *rgxy;           //array: smoothed data
   int     toggle;        //toggles min vs max search
   int     iExt, ixy, ixyMin, ixyMax;
   int     x, yprevious, y, yMax, yMin, yDiff;
   XY      xyMidBase, xyMidCurve;
   long    xTranslation, yTranslation;
   long    cosAng, sinAng, radiusSq, radius;

   rgxy        = self->rgxy;
   yprevious   = rgxy[ixyBeg].y;

//If we need to rotate (ie, all cases that are Not finding y-extrema)

   if (!fYDirection)
   {
      xTranslation = rgxy[ixyBeg].x;
      yTranslation = rgxy[ixyBeg].y;

//Minimal Substroke Rotation:

      xyMidBase.x = (rgxy[ixyBeg].x + rgxy[ixyEnd].x + 1) >> 1;
      xyMidBase.y = (rgxy[ixyBeg].y + rgxy[ixyEnd].y + 1) >> 1;
      xyMidCurve.x   = rgxy[(ixyBeg + ixyEnd) >> 1].x;
      xyMidCurve.y   = rgxy[(ixyBeg + ixyEnd) >> 1].y;

      if (approxlenp(xyMidCurve, xyMidBase) > 2 * approxlenp(xyMidBase, rgxy[ixyBeg]))
      {
      //will want the dimension (xyMidBase,xyMidCurve)

         cosAng =  (long)(xyMidCurve.y - xyMidBase.y);
         sinAng = -(long)(xyMidCurve.x - xyMidBase.x);
      }
      else  //End of Substroke Rotation - rotate based on the arc base.
      {
      // the division by radius in cos and sin is 'remembered'
         cosAng = ((long)rgxy[ixyEnd].x - xTranslation);
         sinAng = ((long)rgxy[ixyEnd].y - yTranslation);
      }

      radiusSq  = cosAng * cosAng + sinAng * sinAng;

#ifdef WIN32
      {
         float fradius;

         fradius = (float)radiusSq/(FIXED)65536;
         fradius = (float) sqrt(fradius);
         fradius = fradius * (float)256;
         radius = (long)fradius;
      }
#else
      radius    = ((long)SqrtFIXED((FIXED)radiusSq)) >> 8;
#endif
      yprevious = 0;

      if (radius < 1)
         return 0;

      ASSERT ( radius != 0 );
   }

   yMax = yprevious;
   yMin = yprevious;
   iExt = toggle = 0;

// Measure the increases and decreases of the stroke

   for (ixy = ixyBeg+1; ixy <= ixyEnd; ixy++)
   {
      x = rgxy[ixy].x;
      y = rgxy[ixy].y;

      if (!fYDirection)
      {
         x = x - (int)xTranslation;
         y = y - (int)yTranslation;

      // Rotate the point - compute y coord only

         ASSERT ( radius != 0 );
         y = (int)(((radius >> 1) + (((long)y * cosAng) - ((long)x * sinAng)) ) / radius);
      }

      if (y < yMin)
      {
         yMin = y;
         ixyMin = ixy;
      }

      if (y > yMax)
      {
         yMax = y;
         ixyMax = ixy;
      }

      if (y - yprevious > 0)
      {
      // y is increasing

         yDiff = y - yMin;
         if ((toggle < 0) && (yDiff > hysThresh))
         {
         // if y has increased beyond the hysteresis bound,
         // then log the previous minimum as an extremum

            pExtrem[iExt] = ixyMin;
            iExt++;
            toggle = 1;
            yMax = y;
            ixyMax = ixy;
         }
         else if ((!toggle) && (yDiff > hysThresh))
            toggle = 1;
      }
      else
      {
         // y is decreasing
         yDiff = yMax - y;
         if (toggle > 0 && yDiff > hysThresh)
         {
         // if y has decreased beyond the hysteresis bound,
         // then log the previous maximum as an extremum
            pExtrem[iExt] = ixyMax;
            iExt++;
            toggle = -1;
            yMin = y;
            ixyMin = ixy;
         }
         else if ((!toggle) && yDiff > hysThresh)
            toggle = -1;
      }

      if (iExt == extMax)
         return iExt;

      yprevious = y;
   }

   return iExt;
}

// PURPOSE: Remove the second or next to last arcing endpoint if it is too
//          close to the stroke endpoint.
// RETURN:
// CONDITIONS:  Called before cog's are computed.  Angle also needs to be
//          a factor; otherwise reconstruction can be bad.

void MergeEndARCS(ARCS * self, NEAR_ARCPARM * arcparm)
    {
    int NEAR * rgArcEnd;            //array: of arc indices
    int NEAR * rgArcType;           //type of arc pt (turn, infl...)
    ARCSXY   * rgxy;                //array: smoothed data
    int         cArcEnd;            //count: arc endpoints
    int         imidpoint, ilengthEnd, ilengthNext;
    int         arcMergeRatio;      //ratio of lengths ( < that -> merge)

    rgArcEnd    = self->rgArcEnd;   // array of arc indices into rgxy
    cArcEnd     = self->cArcEnd;
    rgArcType   = self->rgArcType;
    rgxy        = self->rgxy;
    arcMergeRatio   = arcparm->arcMergeRatio;

    if (cArcEnd <= 2)
        return;

    if (!(rgArcType[cArcEnd-2] & ~ARC_type_ext))  //if an extremum only
        {
      if (rgArcEnd[cArcEnd-1] - rgArcEnd[cArcEnd-2] < 2)
         {
         ilengthEnd  = approxlenp(rgxy[rgArcEnd[cArcEnd-1]], rgxy[rgArcEnd[cArcEnd-2]]);
         }
      else
         {
         imidpoint   = (rgArcEnd[cArcEnd-1] + rgArcEnd[cArcEnd-2]) >> 1;
         ilengthEnd  = (approxlenp(rgxy[rgArcEnd[cArcEnd-1]], rgxy[imidpoint])
                              + approxlenp(rgxy[rgArcEnd[cArcEnd-2]], rgxy[imidpoint]));
         }

      if (rgArcEnd[cArcEnd-2] - rgArcEnd[cArcEnd-3] < 2)
         {
         ilengthNext = approxlenp(rgxy[rgArcEnd[cArcEnd-2]], rgxy[rgArcEnd[cArcEnd-3]]);
         }
      else
         {
         imidpoint   = (rgArcEnd[cArcEnd-2] + rgArcEnd[cArcEnd-3]) >> 1;
         ilengthNext = 2 * approxlenp(rgxy[rgArcEnd[cArcEnd-2]], rgxy[imidpoint]);
         }

        if ((ilengthEnd < (int)(200L * (long)(arcparm->arcStrokeSize) / 1024L)) &&           //avoid needing (long)s
            (ilengthEnd * arcMergeRatio < ilengthNext))
            { // Remove the extremum
            memmove(&rgArcEnd[cArcEnd-2], &rgArcEnd[cArcEnd-1], sizeof(int));
            memmove(&rgArcType[cArcEnd-2], &rgArcType[cArcEnd-1], sizeof(int));
            cArcEnd--;
            self->cArcEnd = cArcEnd;
            //if (cArcEnd == 3)
            //    return;     //don't merge at both ends if result is 1 arc
            }

        }

    if (cArcEnd <=2)
        return;

    if(!(rgArcType[1] & ~ARC_type_ext))  //if an extremum only...
        {
        //note: because of dehooking, we can't assume rgArcEnd[0]=0
        imidpoint   = (rgArcEnd[0] + rgArcEnd[1]) >> 1;
        ilengthEnd  = (rgArcEnd[1] - rgArcEnd[0] < 2 ?
                        approxlenp(rgxy[rgArcEnd[0]], rgxy[rgArcEnd[1]]) :
                        (approxlenp(rgxy[rgArcEnd[0]], rgxy[imidpoint])
                            + approxlenp(rgxy[rgArcEnd[1]], rgxy[imidpoint])) );

        imidpoint   = (rgArcEnd[1] + rgArcEnd[2]) >> 1;
        ilengthNext = (rgArcEnd[2] - rgArcEnd[1] < 2 ?
                        approxlenp(rgxy[rgArcEnd[1]], rgxy[rgArcEnd[2]]) :
                        2 * approxlenp(rgxy[rgArcEnd[1]], rgxy[imidpoint]) );

        if ((ilengthEnd < (int)(200L * (long)arcparm->arcStrokeSize / 1024L))  &&           //avoid needing (long)s
            (ilengthEnd * arcMergeRatio < ilengthNext))
            { // Remove the extremum
            memmove(&rgArcEnd[1], &rgArcEnd[2], sizeof(int)*(cArcEnd-1));
            memmove(&rgArcType[1], &rgArcType[2], sizeof(int)*(cArcEnd-1));
            cArcEnd--;
            self->cArcEnd = cArcEnd;
            }
        }

    }


// PURPOSE: Remove any YExtremum that is not significantly different in elevation
//      from either of its neighboring arcing-endpoints.
// RETURN: None.
// CONDITIONS:

// HAR: disable optimization in this function, to make the results of the
// debug and release builds consistent with one another.  See comments in the
// code for more details about what the bug actually is.
#pragma optimize("",off)

void ThinARCS(ARCS *self, NEAR_ARCPARM *arcparm, BOOL fThinAll)
{
    ARCSXY    * rgxy;               //array: smoothed data
    int NEAR * rgArcEnd;           //array: array of arc indices
    int NEAR * rgArcType;           //type of arc pt (turn, infl...)
    int         cxy, cArcEnd, iArc, arcThinTangent;
    int         x, y;
    unsigned   dx1, dx2, dy1, dy2;
    int         angl0, angl1, angl2, angl3, alpha;
	int			status;

    rgArcEnd    = self->rgArcEnd;   // array of arc indices into rgxy
    rgxy       = self->rgxy;
    cArcEnd     = self->cArcEnd;
    rgArcType   = self->rgArcType;
    arcThinTangent   = arcparm->arcThinTangent;
    cxy         = self->cxy;

   if (cArcEnd <= 2 || arcThinTangent <= 0)
      return ;

    for (iArc = 1; iArc < cArcEnd-1; iArc++)
      {
        if (fThinAll || (!(rgArcType[iArc] & ~ARC_type_ext)))
         {
         // Ymax or Ymin and not anything else
            // Used to merge if minimum angle was below threshold, now merge
         // if max of two angles.  (Switched back to min)

            x   = rgxy[rgArcEnd[iArc]].x;
            y   = rgxy[rgArcEnd[iArc]].y;
            dx2 =  ABS(x - rgxy[rgArcEnd[iArc+1]].x);
            dy2 =  ABS(y - rgxy[rgArcEnd[iArc+1]].y);
            dx1 =  ABS(x - rgxy[rgArcEnd[iArc-1]].x);
            dy1 =  ABS(y - rgxy[rgArcEnd[iArc-1]].y);

            if (((long)arcThinTangent * (long)dy1 < 100L * (long)dx1) ||
               ((long)arcThinTangent * (long)dy2 < 100L * (long)dx2))
                {  //Two final checks:  don't eliminate cusps
                if (rgArcEnd[iArc] > 1 && rgArcEnd[iArc] < cxy-2)
                    {
                    angl0 = WArctan2((rgxy[rgArcEnd[iArc]+2].y-y), (rgxy[rgArcEnd[iArc]+2].x-x));
                    angl1 = WArctan2((y-rgxy[rgArcEnd[iArc]-2].y), (x-rgxy[rgArcEnd[iArc]-2].x));
                    angldiff(angl0, angl1, alpha);
                    if (ABSVAL(alpha) > 90)
                        {
                        rgArcType[iArc] |= ARC_type_turn;
                        continue;
                        }
                    }

                //Dont eliminate loops either (as in a cut gesture)
                //Rationale: An alpha has two extrema.  If both are thinned, fine,
                //other routines will find the loop feature.  If one is, however,
                //the other routines won't - so don't thin either, and alphas will
                //be well recognized.  Not essential code, but helpful.

                if ((rgArcEnd[iArc] - rgArcEnd[iArc-1] > 3) &&
                    (rgArcEnd[iArc+1] - rgArcEnd[iArc] > 3))
                    {
                    calcangle (rgArcEnd[iArc]-2, rgArcEnd[iArc], rgArcEnd[iArc]+2, angl0);
                    angl1 = angl0;
					angl2 = angl3 = 0;

					/*
					 * Aug 98
					 * This is included for the same reason as described in the next comment
					 * below. I have not verified that buggy code actually occurs here
					 * but too be safe...
					 */
					status = (iArc + 2 < cArcEnd);
                    if (((long)arcThinTangent * (long)dy1 < 100L * (long)dx1) &&
                         status)
                        {
                        calcangle (rgArcEnd[iArc-1], rgArcEnd[iArc], rgArcEnd[iArc+2], angl1);
                        calcangle (rgArcEnd[iArc-1], rgArcEnd[iArc], rgArcEnd[iArc+1], angl2);
                        calcangle (rgArcEnd[iArc], rgArcEnd[iArc+1], rgArcEnd[iArc+2], angl3);
                        }

					/*
					 * Aug 98
					 * This intermediate variable is introduced to get around an
					 * optimizing bug in VC 5. Putting the comparison directly in the if
					 * statement generates incorrect code in the release version
					 */
					/* 
					 * July 2000
					 * With VC6 there is still a bug.  Apparently the compiler tries to
					 * keep values like iArc-1, iArc, iArc+1 as separate variables, but 
					 * it messes up the initialization and updating of the one used to
					 * compute the status in the line below.
					 */
					status = (iArc > 1);
                    if (((long)arcThinTangent * (long)dy2 < 100L * (long)dx2) &&
                         status)
                        {
                        calcangle (rgArcEnd[iArc-2], rgArcEnd[iArc], rgArcEnd[iArc+1], angl1);
                        calcangle (rgArcEnd[iArc-1], rgArcEnd[iArc], rgArcEnd[iArc+1], angl2);
                        calcangle (rgArcEnd[iArc-2], rgArcEnd[iArc-1], rgArcEnd[iArc], angl3);
                        }
                    if (((angl0 >= 0) != (angl1 >= 0)) &&   //check turns back on itself
                        ((angl2 >= 0) == (angl3 >= 0)) &&   //check same turning direction
                        (ABSVAL(angl2) > 40) &&                  //dont retain colinear endpoints
                        ((ABSVAL(90 - ABSVAL(angl0)) < 80) && (ABSVAL(90 - ABSVAL(angl3)) < 80)))  // colinear measurements are useless
                        {
                        rgArcType[iArc] |= ARC_type_loop;
                        continue;
                        }
                    }

                // Remove the extrema
                memmove(&rgArcEnd[iArc], &rgArcEnd[iArc+1], sizeof(rgArcEnd[0])*(cArcEnd-(iArc+1)));
                if (!fThinAll)
                    memmove(&rgArcType[iArc], &rgArcType[iArc+1], sizeof(rgArcEnd[0])*(cArcEnd-(iArc+1)));
                cArcEnd--;
                iArc--;
             }
         }
      }
    ASSERT(cArcEnd > 1);   // Endpoints must be left

   self->cArcEnd = cArcEnd;  // Reset number of arc endpoints
   }

// Turn optimization back on
#pragma optimize("",on)

//
// PURPOSE: Locate the turning points in a input array of points.
//          Merge the arcing points into pNewArcPts.
// RETURN:
// CONDITIONS:
// COMMENTS:Together with the in-lined walk-to-the-corner adjustment in
//          CheckTurnARCS, this tests to be highly accurate in identifying
//          all turning point candidates.  It also generates very few
//          poor candidates and inherits noise tolerance from the
//          hysteresis extrema finder.  The lone exception is the brace.

void ArcTurnPtsARCS ( ARCS * self, NEAR_ARCPARM * arcparm )
{
    ARCSXY    * rgxy;           //array: smoothed data
    int NEAR * rgArcEnd;        //array: array of arc indices
    int NEAR * rgArcNew;        //array: turning points
    int NEAR * rgArcExt1;       // holds extrema
    int NEAR * rgArcExt2;       // holds second level extrema
    BOOL        fYDirection;    // direction to look for extrema
    int         arcHysInfAbs, arcHysInfRel, hysThresh, radius;
    int         cExtMax, cArc, cExt, cTurn, cExt2;
    int         ixyTurn, iArc, ixy, iextrem, ixyCheck;
    int         ixyBeg, ixyEnd, ixyBegY, ixyEndY, ixyBeg2, ixyEnd2, ixyY;

    rgxy        = self->rgxy;
    rgArcEnd    = self->rgArcEnd;
    cArc        = (self->cArcEnd) - 1;
    rgArcNew    = self->rgArcNew;
    rgArcExt1   = self->rgArcExt1;
    rgArcExt2   = self->rgArcExt2;
    arcHysInfRel    = arcparm->arcHysInfRel;
    arcHysInfAbs    = self->arcNormHysInfAbs;

    cTurn = 0;

    for (iArc = 0; ((iArc < cArc) && (cTurn < ARC_CARCNEWMAX)); iArc++)
    {
        //
        // For each substroke defined by the arc-candidates:
        //

        ixyBeg = rgArcEnd[iArc];
        ixyEnd = rgArcEnd[iArc+1]; // Points to last point in arc

        if ( (ixyEnd - ixyBeg) < 4 )
            continue;   // Not enough points in arc

        //
        // Locate all extrema perpendicular to the line joining
        // the arc endpoints  - these will be candidates for turning
        // points.
        //

        cExtMax  = ARC_CARCEXTMAX;
        radius = approxlenp(rgxy[ixyBeg], rgxy[ixyEnd]);
        hysThresh = max((int)((50L + ((long)arcHysInfRel * radius))/100L), arcHysInfAbs);
        cExt    = HysterExtremARCS ( self,ixyBeg,ixyEnd,(int NEAR *)rgArcExt1,
                                  fYDirection=FALSE,hysThresh,cExtMax );

        for (iextrem = 0; iextrem <= cExt; iextrem++)
        {
            ixy = ((iextrem == cExt) ? ixyEnd : rgArcExt1[iextrem]);
            if ((!cExt) || (ixy - ixyBeg < 3)) continue;

            //
            // Turning points are entered in the array in order.
            // So first check turning point candidates between extrema.
            //

            ixyBeg2 = ((!iextrem)  ? ixyBeg : rgArcExt1[iextrem-1]);
            ixyEnd2 = ((iextrem > cExt-2) ? ixyEnd : rgArcExt1[iextrem+1]);

            if (ixy - ixyBeg2 > 3)
            {
                cExtMax  = 1;
                cExt2 = HysterExtremARCS ( self, ixyBeg2, ixy, (int NEAR *)rgArcExt2,
                                  fYDirection=FALSE, hysThresh, cExtMax );
                if (cExt2)
                {
                    ixyCheck    = rgArcExt2[0];
                    ixyBeg2 = ((iextrem < 2)  ? ixyBeg : rgArcExt1[iextrem-2]);
                    ixyTurn   = CheckTurnARCS(self, arcparm, ixyBeg2, ixyEnd2, ixyCheck);
                    if ((ixyTurn) &&
                        ((!cTurn) || (ixyTurn > rgArcNew[cTurn-1] + 1)))
                    {
                        rgArcNew[cTurn]   = ixyTurn;

                        if (cTurn < (ARC_CARCNEWMAX - 1))
                        {
                            cTurn++;
                        }

                        ixyBeg2 = ixyTurn;
                    }
                }
            }

            // Check extremum ixy for being a turning point

            if (ixyEnd - ixy < 3) continue;
            ixyEnd2 = (iextrem != cExt-1 ? rgArcExt1[iextrem+1] : ixyEnd);
            ixyTurn   = CheckTurnARCS(self, arcparm, ixyBeg2, ixyEnd2, ixy);
            if ((ixyTurn) &&
                    ((!cTurn) || (ixyTurn > rgArcNew[cTurn-1] + 1)))
            {
                rgArcNew[cTurn] = ixyTurn;

                if (cTurn < (ARC_CARCNEWMAX - 1))
                {
                    cTurn++;
                }
            }
        }

        // also, all original y-extrema are candidates

        if (iArc+1 < cArc)
        {
            ixyBegY = ixyBeg;
            ixyY    = ixyEnd;
            ixyEndY = rgArcEnd[iArc+2];
            ixyTurn   = CheckTurnARCS(self, arcparm, ixyBegY, ixyEndY, ixyY);
            if ((ixyTurn) &&
                    ((!cTurn) || (ixyTurn > rgArcNew[cTurn-1] + 1)))
            {
                rgArcNew[cTurn] = ixyTurn;

                if (cTurn < (ARC_CARCNEWMAX - 1))
                {
                    cTurn++;
                }
            }
        }
    }

    //
    // merge these points in as arc ARC_type_turn points
    //

    if (cTurn)
    {
        MergeArcsARCS ( self, arcparm, rgArcNew, cTurn, ARC_type_turn );
    }

    ASSERT(cTurn < ARC_CARCNEWMAX);
}

//
// PURPOSE: Check one candidate turning point
// RETURN:  The index of the actual turn in ixyTurn
// CONDITIONS:
// COMMENTS: This gets ~all the right candidates - it fails on rounded turns.

int CheckTurnARCS( ARCS * self, NEAR_ARCPARM * arcparm, int ixyBeg,
                        int ixyEnd, int ixyCheck )
// ixyBeg:     Index of first point in arc-section
// ixyEnd:     Index of last point in arc-section
// ixyCheck:   Index of THE point to check as a candidate turning pt

    {
    ARCSXY * rgxy;
    int     ixyTurn;
    int     arcDistTurn, arcTurnSlack, arcTurnMult, arcDistStr;
    int     threshOneSide, threshCurv, amountStr, curvatureL, curvatureR;
    int     alphaAbs, alphaG, alphaMax, anglMoreL, anglMoreR;
    int     alpha, alphaR, alphaL, x0, y0;
    int     ixyWalk, ixyEdgeB, ixyEdgeE;
    int     ixy0, ixy1, ixyM, ixyR, ixyL, nmove;
    int     distAnglL, distAnglR, distAngl, distStr, distGoal;
    int     sizeStrokeV, sizeStrokeH, sizeStroke, distSideL, distSideR;
    BOOL    fLeft;
    int     alphaClump;

    //Note: Throughout, angle of turn is actually 180-(computed angles).

    rgxy        = self->rgxy;
    sizeStrokeV = self->sizeNormStrokeV;
    sizeStrokeH = self->sizeNormStrokeH;
    arcDistTurn = self->arcNormDistTurn;
    arcDistStr  = self->arcNormDistStr;
    arcTurnSlack = arcparm->arcTurnSlack;
    arcTurnMult  = arcparm->arcTurnMult;

    ixyTurn   = ixyCheck;
    if ((ixyCheck - ixyBeg < 2) || (ixyEnd - ixyCheck < 2))
        return 0;

    // Cusp test
    calcangle(ixyCheck-1, ixyCheck, ixyCheck+1, alpha);
    alphaAbs = ABSVAL(alpha);
    if ( alphaAbs > 110 )
        return  ixyTurn;


    // Walk the candidate if nearby angles are sharper:
    // (In-lined here rather than repetetively called from ArcTurnARCS)
    nmove = max ((ixyEnd-ixyBeg)/12, 1);
    ixy0 = max(ixyBeg+2, ixyCheck - nmove);
    ixy1 = min(ixyEnd-2, ixyCheck + nmove);
    for (ixyWalk = ixy0; ixyWalk <= ixy1; ixyWalk++)
        {
        ixyEdgeB = max(ixyBeg, ixyWalk-1);
        ixyEdgeE = min(ixyEnd, ixyWalk+1);
        calcangle (ixyEdgeB, ixyWalk, ixyEdgeE, alphaMax);
        if (ABSVAL(alphaMax) > ABSVAL(alphaAbs))
            {
            alphaAbs = alphaMax;
            ixyCheck = ixyWalk;
            }
        }
    calcangle(ixyCheck-1, ixyCheck, ixyCheck+1, alpha);
    alphaAbs = ABSVAL(alpha);


    //Compute the distance on each side of the candidate point
    distSideL  = approxlenp(rgxy[ixyCheck], rgxy[ixyBeg]);
    distSideR  = approxlenp(rgxy[ixyEnd], rgxy[ixyCheck]);


    // Compute the threshhold for the distance over which a turn takes place.
    // Temper the increase (threshCurv) by the lengths of the nearby sides.
    threshCurv = (distSideL + distSideR) >> 3;
    threshCurv = min(arcDistTurn, threshCurv);
    fLeft   = (BOOL)( alpha > 0 );

#ifdef NOTYET
    //Not yet ready
    // - gets 2 turning pts around some turns.
    distAnglR = distAnglL = threshCurv >> 1;
    ixyR = FindPointARCS(self, ixyCheck, distAnglR, fDirection=TRUE);
    ixyR = min(ixyEnd-2, ixyR);
    ASSERT (ixyR >= ixyCheck);
    for (ixy0 = ixyCheck+1; (ixy0 <= ixyR) && (ixy0+1 < self->cxy); ixy0++)
        {
        calcangle(ixy0-1, ixy0, ixy0+1, anglMoreR);
        alpha += anglMoreR;
        }

    ixyL = FindPointARCS(self, ixyCheck, distAnglL, fDirection=FALSE);
    ixyL = max(ixyBeg+2, ixyL);
    ASSERT (ixyL <= ixyCheck);
    for (ixy0 = ixyCheck-1; (ixy0 >= ixyL) && (ixy0 > 0); ixy0--)
        {
        calcangle(ixy0-1, ixy0, ixy0+1, anglMoreL);
        alpha += anglMoreL;
        }
    alphaAbs = ABSVAL(alpha);
    distAngl = 0;
    if (ixyR != ixyCheck)
        distAngl += approxlenp(rgxy[ixyR], rgxy[ixyCheck]);
    if (ixyL != ixyCheck)
        distAngl += approxlenp(rgxy[ixyL], rgxy[ixyCheck]);
#endif

#ifndef NOTYET
    // Increase the turning angle by that of immediate neighboring points.
    ixyR   = ixyCheck;
    ixyL   = ixyCheck;
    alphaClump = alpha;
    nmove = distAngl = 0;

    if (alphaAbs < 90)
        {
        distAnglR = approxlenp(rgxy[ixyCheck], rgxy[ixyCheck+1]);
        anglMoreR = 0;
        if ((distAnglR < threshCurv) && (ixyCheck+2 < ixyEnd))
            {
            calcangle(ixyCheck, ixyCheck+1, ixyCheck+2, anglMoreR);
            if (fLeft != (BOOL)(anglMoreR > 0))
                anglMoreR   = 0;
            }

        distAnglL   = approxlenp(rgxy[ixyCheck-1], rgxy[ixyCheck]);
        anglMoreL   = 0;
        if ((distAnglL < threshCurv) && (ixyCheck-2 > ixyBeg))
            {
            calcangle(ixyCheck-2, ixyCheck-1, ixyCheck, anglMoreL);
            if (fLeft != (BOOL)(anglMoreL > 0))
                anglMoreL = 0;
            }

        // Only add the distance to the turn if the increase in angle
        // is at least a little significant
        if ((ABSVAL(anglMoreL) > ABSVAL(anglMoreR)) && (ABSVAL(anglMoreL) > 7))
            {
            if (ABSVAL(anglMoreL) > alphaAbs) nmove = -1;
            distAngl    += distAnglL;
            ixyL--;
            alphaClump  += anglMoreL;
            if ((distAnglL + distAnglR < threshCurv)&& (ABSVAL(anglMoreR) > 7))
                {
                distAngl += distAnglR;
                ixyR++;
                alphaClump  += anglMoreR;
                }
            }
        else if (ABSVAL(anglMoreR) > 7)
            {
            if (ABSVAL(anglMoreR) > alphaAbs) nmove = 1;
            distAngl    += distAnglR;
            ixyR++;
            alphaClump  += anglMoreR;
            if ((distAnglL + distAnglR < threshCurv) && (ABSVAL(anglMoreL) > 7))
                {
                distAngl += distAnglL;
                ixyL--;
                alphaClump  += anglMoreL;
                }
            }

        // normalize
        if (alphaClump > 180) alphaClump -= 360;
        else if (alphaClump < -180) alphaClump += 360;
        }

    // if this gives a tighter angle, use it - else don't
    if (ABSVAL(alphaClump) > alphaAbs)
        {
        alpha = alphaClump;
        alphaAbs = ABSVAL(alpha);
        if (nmove == 1)
            {
            ixyCheck++;
            ixyL++;
            }
        else if (nmove == -1)
            {
            ixyCheck--;
            ixyR--;
            }
        ixyTurn = ixyCheck;
        }
    else
        {
        ixyL = ixyCheck;
        ixyR = ixyCheck;
        }
#endif

    //
    // Check straightness:
    // First define the length along which straightness is required.
    // The length required will be greater if the turn is slow,
    // proportionally larger if the substroke is smaller,
    // and dependent on the size of the whole stroke as well.
    sizeStroke = approxlens (sizeStrokeV, sizeStrokeH );

    x0 = max(rgxy[ixyEnd].x - rgxy[ixyCheck].x, rgxy[ixyCheck].x - rgxy[ixyBeg].x);
    y0 = max(rgxy[ixyEnd].y - rgxy[ixyCheck].y, rgxy[ixyCheck].y - rgxy[ixyBeg].y);
    distGoal =  3 * (ABSVAL(max(x0, y0)) >> 2);
    distGoal = max(distGoal, arcDistStr);
    distGoal = max(distGoal, (distAngl << 2) );
    distGoal = max(distGoal, (sizeStroke >> 2));

    // Potentially shrink the distance viewed for straightness
    // Note: Mathematical curvature here applies since the straight sides
    // are ~smooth.  The decision can be based on it.
    ixy0 = ixyBeg;
    distStr = distSideL;
    if (distStr > distGoal)
        {
        ixy0 = ixyL - (int)(((long)distGoal * (long)(ixyL-ixy0))/(long)distStr);
        // Adjust for slowing down at turns
        if (ixy0 > ixyBeg)
            ixy0--;
        if (ixy0 > ixyBeg)
            ixy0--;
        }
    else
        if (ixyL - ixy0 > 4)
            ixy0++;

    ixyM = (ixyL + ixy0) >> 1;
    calcangle(ixy0, ixyM, ixyL, alphaL);

	// HAR added the following ASSERT, which seems reasonable based on the /distGoal 
	// operations which appear in later asserts.  For safety in the release versions,
	// we make sure distGoal has a value of at least 1.  The smoothing code probably
	// makes this case unlikely to happen, but it is hard to tell with all the 
	// heuristic tests in there.
	ASSERT(distGoal != 0);
	if (distGoal <= 0)
		distGoal = 1;

    AssertMul ((100/distGoal), alphaL);
    AssertMul (100, alphaL);
    curvatureL = (distGoal < 10 ? ((1000 / distGoal) * alphaL) :
                                  ((100 * alphaL) / (distGoal / 10)));

    //  Repeat for the other side.
    ixy1 = ixyEnd;
    distStr = distSideR;
    if (distStr > distGoal)
        {
        ixy1 = ixyR + (int)(((long)distGoal * (long)(ixy1-ixyR)) / (long)distStr);
        // Adjust for slowing down at turns
        if (ixy1 < ixyEnd)
            ixy1++;
        if (ixy1 < ixyEnd)
            ixy1++;
        }
    else
        if (ixy1 - ixyR > 4)
            ixy1--;

    ixyM = (ixyR + ixy1) >> 1;
    calcangle(ixyR, ixyM, ixy1, alphaR);
	AssertMul ((100/distGoal), alphaR);
    AssertMul (100, alphaR);
    curvatureR = (distGoal < 10 ? ((1000 / distGoal) * alphaR) :
                                  ((100 * alphaR) / (distGoal / 10)));


    // The global angle needs to be sufficiently small in a turn.
    calcangle(ixy0, ixyCheck, ixy1, alphaG);
    if ((ABSVAL(alphaG) < 65) || (alphaAbs < 50))
        {
        ixyTurn = 0;
        return ixyTurn;
        }

    // The final test - as a function of the amount of turn and of the
    // curvature on each side of the turn.

    fLeft = (BOOL)(alpha > 0);
    amountStr = 0;
    //if ((BOOL)(alphaL > 0) == fLeft) amountStr += ABSVAL(alphaL);
    //if ((BOOL)(alphaR > 0) == fLeft) amountStr += ABSVAL(alphaR);
    if ((BOOL)(alphaL > 0) == fLeft) amountStr += ABSVAL(curvatureL);
    if ((BOOL)(alphaR > 0) == fLeft) amountStr += ABSVAL(curvatureR);


    //Force greater straightness the wider the turn (the smaller alpha)
    //Force each side separately to satisfy certain straightness
//  AssertMul(amountStr, arcTurnMult);
//*no*    if ( (alphaAbs > 54 + (amountStr * arcTurnMult)) &&
//*better*    if ( (127 * alphaAbs > (arcTurnMult * (Square(amountStr-4)))) &&
//        (((BOOL)(alphaL > 0) != fLeft) || (ABSVAL(alphaL) < arcTurnSlack)) &&
//        (((BOOL)(alphaR > 0) != fLeft) || (ABSVAL(alphaR) < arcTurnSlack)))
    if ((alphaAbs - amountStr > arcTurnMult ) &&
          (((BOOL)(alphaL > 0) != fLeft) || (ABSVAL(alphaL) < 20)) &&
          (((BOOL)(alphaR > 0) != fLeft) || (ABSVAL(alphaR) < 20)))
          return ixyTurn;

    // or a tighter angle and concavity on one side
    // (previous non-curvature test retained since it does not produce
    // undesirable extraneous turning points and since one-sided straightness
    // is marginally desirable at best.)
    threshOneSide = arcTurnSlack >> 1;
    if ((alphaAbs > 80 ) &&  (distAngl < (arcDistTurn >> 1)) &&
        (((fLeft != (BOOL)(alphaL > 0)) || (ABSVAL(alphaL) < threshOneSide))
        || ((fLeft != (BOOL)(alphaR > 0)) || (ABSVAL(alphaR) < threshOneSide))))

        {
        return ixyTurn;
        }
    ixyTurn = 0;
    return ixyTurn;
    }


#ifdef NOTYET
// PURPOSE: Find the point on the curve a specified arclength distance from
//          a specified point.
// RETURN:  the index in rgxy to the point
// GLOBALS:
// CONDITIONS:
int FindPointARCS(ARCS * self, int ixyStart, int distGoal, BOOL fDirection)
    {
    ARCSXY* rgxy;
    int     ixy, dist, deltaDist, step;

    rgxy        = self->rgxy;

    ASSERT ( ixyStart < self->cxy );
    step = (fDirection == TRUE ? 1 : -1);
    dist = deltaDist = 0;
    for (ixy = ixyStart; ixy > 0 && ixy < (self->cxy) - 1; ixy += step)
        {
        deltaDist = approxlenp(rgxy[ixy], rgxy[ixy+step]);
        if (dist + deltaDist >= distGoal)
            break;
        dist += deltaDist;
        }
    return ixy;
    }
#endif


// PURPOSE: Locate the inflection points
// RETURN:
// CONDITIONS: M is rgxy, V1 is rgArcEnd, V2 is pNewArcPnts
//          Question mark shapes are the least robust; they should be
//          dealt with more carefully at some point. (= case cExt = 1)
//          Otherwise, ArcInflectionARCS succeeds in being both
//          predictable and noise tolerant.
void  ArcInflectionARCS(ARCS * self, NEAR_ARCPARM * arcparm)
   {
    ARCSXY* rgxy;       // Array of points.
    int NEAR *rgArcExt1;         // pointer to extrema storage
    int NEAR *rgArcNew;          // pointer to new arc points
    int NEAR * rgArcEnd;         // Indices into rgxy of arc endpoints
    int     cArc, cExt, cExtMax;
    int     iArc, iNew, ixy, ixyBegin, ixyEnd, ixyM, ixyM2;
    int     hysThresh, arcHysInfRel, arcHysInfAbs, threshC;
    int     alpha, alpha2, xTranslation, yTranslation;
    long    lCrossProd, radius, cosAng, sinAng;
    BOOL    fYDirection=FALSE;      // Specifies perpendicular to base
   XY xyA, xyB;

    rgxy        = self->rgxy;
    rgArcEnd    = self->rgArcEnd;
    rgArcExt1   = self->rgArcExt1;
    rgArcNew    = self->rgArcNew;
    arcHysInfAbs = self->arcNormHysInfAbs;
    arcHysInfRel = arcparm->arcHysInfRel;
    threshC     = arcparm->arcInfAngMin;
    cArc        = self->cArcEnd - 1;

    cExtMax = 3;
   iNew = 0;

    // In each substroke defined by the arc-candidates:
   for (iArc=0; iArc<cArc; iArc++)
      {
        ixyBegin  = rgArcEnd[iArc];
        ixyEnd  = rgArcEnd[iArc+1];
        if (ixyEnd - ixyBegin < 6)
          continue;     // Not seven points in stroke, no Inflection point.

        xTranslation = rgxy[ixyBegin].x;
        yTranslation = rgxy[ixyBegin].y;
        radius = (long)approxlens(ABSVAL(rgxy[ixyEnd].x - xTranslation), ABSVAL(rgxy[ixyEnd].y - yTranslation));
        if (!radius)
            continue;       //Could happen on a flat loop.  No zero divides.
        cosAng = (long)(rgxy[ixyEnd].x - xTranslation);
        sinAng = (long)(rgxy[ixyEnd].y - yTranslation);
        hysThresh = max((int)((50L + ((long)arcHysInfRel * radius))/100L), arcHysInfAbs);
        cExt      = HysterExtremARCS(self,ixyBegin,ixyEnd,(int NEAR *)rgArcExt1,
                                          fYDirection,hysThresh,cExtMax );

        //Too many extrema are ignored.
        cExt = min (3, cExt);
        if (!cExt)
            continue;

        // Test for a non-inflection point case (as in a loopy-2, 3 or B)

        // Check the first extremum for being a loop-feature
        ixy = rgArcExt1[0];
        if ((ixy - ixyBegin > 2) && (ixyEnd - ixy > 2))
            {
            calcangle (ixyBegin, ixy, ixyEnd, alpha);
            calcangle (ixy-2, ixy, ixy+2, alpha2)
            if ((alpha >= 0) != (alpha2 >= 0))
                {
                // arc at that turn
                rgArcNew[iNew++] = rgArcExt1[0];
				if (iNew >= ARC_CARCNEWMAX) break;
                // and at subsequent inflection point
                if (cExt == 3)
                    rgArcNew[iNew++] = (rgArcExt1[1]+rgArcExt1[2]) >> 1;
				if (iNew >= ARC_CARCNEWMAX) break;
                ASSERT(iNew < ARC_CARCNEWMAX);

                   continue;
                }
            }

        // Check the second extremum for being a loop-feature
        if (cExt > 1)
            {
            ixy = rgArcExt1[cExt-1];
            if (ixyEnd - ixy > 2)
                {
                calcangle (ixyBegin, ixy, ixyEnd, alpha);
                calcangle (ixy-2, ixy, ixy+2, alpha2)
                if ((alpha >= 0) != (alpha2 >= 0))
                    { // the order matters...
                    if (cExt == 3)
                        rgArcNew[iNew++] = (rgArcExt1[0]+rgArcExt1[1]) >> 1;
 					if (iNew >= ARC_CARCNEWMAX) break;
                    rgArcNew[iNew++] = rgArcExt1[cExt-1];
 					if (iNew >= ARC_CARCNEWMAX) break;
					ASSERT(iNew < ARC_CARCNEWMAX);

                    continue;
                    }
                }
            }

        // if 3 extrema, arc at center turn, not at inflection pts
        if (cExt == 3)
            {
            rgArcNew[iNew++] = rgArcExt1[1];
 			if (iNew >= ARC_CARCNEWMAX) break;
            ASSERT(iNew < ARC_CARCNEWMAX);

         continue;
            }

        // if 2 extrema
        // arc at midpoint between first and second extrema
        if (cExt == 2)
            {
            rgArcNew[iNew++] = (rgArcExt1[0]+rgArcExt1[1]) >> 1;
 			if (iNew >= ARC_CARCNEWMAX) break;
            ASSERT(iNew < ARC_CARCNEWMAX);

         continue;
            }

        // Catch the question mark case
        // check concavity on both sides of the x-extrema

        ASSERT (cExt = 1);
        ixy = rgArcExt1[0];
        if (ixy - ixyBegin < 4)
            continue;

        //ixyM  = (ixyBegin + ixy) >> 1;
        //calcangle(ixyBegin, ixyM, ixy, alpha);
        ixyM  = (ixyBegin + 1 + ixy) >> 1;
        calcangle((ixyBegin + 1), ixyM, ixy, alpha);

        if (ixyEnd - ixy < 4)
            continue;

        //ixyM2 = (ixyEnd + ixy) >> 1;
        //calcangle(ixy, ixyM2, ixyEnd, alpha2);
        ixyM2 = (ixyEnd + ixy - 1) >> 1;
        calcangle(ixy, ixyM2, (ixyEnd - 1), alpha2);

        // compute direction of arc
        xyA.x = rgxy[ixyEnd].x - rgxy[ixyBegin].x;
        xyA.y = rgxy[ixyEnd].y - rgxy[ixyBegin].y;
        xyB.x = rgxy[ixy].x    - rgxy[ixyBegin].x;
        xyB.y = rgxy[ixy].y    - rgxy[ixyBegin].y;
        lCrossProd = LCrossProd(xyA, xyB);

        // Check concavity
        if (((lCrossProd < 0) && (alpha < -threshC)) ||
                ((lCrossProd > 0) && (alpha > threshC)))
         {
            rgArcNew[iNew++] = ixyM;
 			if (iNew >= ARC_CARCNEWMAX) break;
            ASSERT(iNew < ARC_CARCNEWMAX);

         continue;
         }
        if (((lCrossProd < 0) && (alpha2 < -threshC)) ||
                ((lCrossProd > 0) && (alpha2 > threshC)))
         {
            rgArcNew[iNew++] = ixyM2;
 			if (iNew >= ARC_CARCNEWMAX) break;
            ASSERT(iNew < ARC_CARCNEWMAX);

         continue;
         }
        }

    // merge these points in as arc ARC_type_infl points
    if (iNew)
        MergeArcsARCS(self, arcparm, rgArcNew, iNew, ARC_type_infl );
    return;
    }


// PURPOSE: Special case the delete gesture that is 3 straight superimposed
//          lines - (the turning points are colinear with the line joining
//          the endpoints, so the candidate finder misses it)
// RETURN:
// CONDITIONS:
//       * rgArcNew;    // pointer to indices of new points
//       cNew;           // count of new points
//       iType;          // Type of new arc point being merged (e.g., infl pt)
void  SpecialCaseDelARCS(ARCS * self, NEAR_ARCPARM * arcparm)
    {
    int NEAR *  rgArcEnd;   // pointer to the arcing endpoints
    ARCSXY    * rgxy;         // array: smoothed data
    XY      cog;
    long    arclength;
    int     arcbaselength, angle, ixyEnd;
    int     ixyBegin = 0;

    rgxy     = self->rgxy;

    if (((self->cArcEnd) != 2) || ((self->cxy) < 6))  // only one arc strokes
        return;

    rgArcEnd  = self->rgArcEnd;
    ixyEnd = rgArcEnd[1];

    cog = FindCogARCS(self, ixyBegin, ixyEnd, &arclength);
    arcbaselength = approxlenp(rgxy[0], rgxy[ixyEnd]);

    if (((int)arclength/2) > arcbaselength)
        {
        calcanglep(rgxy[0], cog, rgxy[ixyEnd], angle);
        if (ABSVAL(angle) < 20)
            {
            //  Find the two missing turning points using a cusp finder
            int ixy, cturns;
            cturns = 0;
            for (ixy = 1; ixy < (self->cxy)-1; ixy++)
                {
                calcangle(ixy-1, ixy, ixy+1, angle);
                if (ABSVAL(angle) > 90)
                    {
                    self->rgArcNew[cturns++] = ixy;
                    ASSERT(cturns < ARC_CARCENDMAX);

                    ixy += 4;       //don't duplicate turns
                    }
                if (cturns == 2)
                    break;
                }
            if (cturns)
                MergeArcsARCS(self, arcparm, self->rgArcNew, cturns, ARC_type_turn );
            }
        }
    }

// PURPOSE: Merge new points of arcing (turning points or inflection pts)
//          into the established arcing points.  Retain the order of writing.
// RETURN:
// CONDITIONS:
//       * rgArcNew;    // pointer to indices of new points
//       cNew;           // count of new points
//       iType;          // Type of new arc point being merged (e.g., infl pt)

void MergeArcsARCS(ARCS *self, NEAR_ARCPARM *arcparm, int NEAR *rgArcNew, int cNew, int iType)
{
   int NEAR *  rgArcOld;   // pointer to old (extrema) arc endpoints
   int    cArcEnd;         // count of rgArcOld
   int NEAR *  rgArcType;  // type array (corresponds to parcold)
   int    iArc, iNew, i;   // indices

   if (!cNew)
      return;
   rgArcOld  = self->rgArcEnd;
   cArcEnd   = self->cArcEnd;

   rgArcType = self->rgArcType;

   iNew = 0;
   for (iArc = 1; iArc < cArcEnd; iArc++)
      {
      while(rgArcNew[iNew] < rgArcOld[iArc])
         {
         // while there are new points less than the next old point.
         if (rgArcNew[iNew] <= rgArcOld[iArc-1] + 1)
            {
            // if the new point is ~the same as the last old one.
            rgArcType[iArc-1] |= iType;
            iNew++;
            }
         else if (rgArcNew[iNew] >= rgArcOld[iArc] - 1)
            {
            // if the new point is ~the same as the next old one.
            rgArcType[iArc] |= iType;
            iNew++;
            }
         else
            {
			// If no space left, exit
            if (cArcEnd >= ARC_CARCENDMAX)
               {
               self->cArcEnd = ARC_CARCENDMAX;
               return;
               }
            ASSERT(cArcEnd < ARC_CARCENDMAX);
            for (i = cArcEnd; i > iArc; i--)
               {
               rgArcOld[i] = rgArcOld[i-1];
               rgArcType[i] = rgArcType[i-1];
               }

            // and add the new one in
            rgArcOld[iArc] = rgArcNew[iNew];
            rgArcType[iArc] = iType;
            iNew++;
            iArc++;
            cArcEnd++;
            }

         if (iNew == cNew)
            {
            self->cArcEnd = cArcEnd;
            return;
            }
         }
      }

   self->cArcEnd = cArcEnd;
   }


// PURPOSE: Generate the Arcs from the indices into the smoothed data of
//          the arcing points.  This calls the center of gravity routine.
// RETURN: Error if too many arcs
//         Measurements are in same dimensions as raw (not smoothed) data.
// CONDITIONS:

int CreateMeasARCS(ARCS *self, NEAR_ARCPARM *arcparm)
{
   ARCSXY   *rgxy;         // array: smoothed data
   int NEAR *rgmeas;       // array: to measurements
   int       cArcEnd;      // count: of arc endpoints
   int NEAR *rgArcEnd;    // array: to arc indices
   XY        cog;          // center of gravity
   int       iArc, imeas, ixyBegin, ixyEnd, ierror;
   long      arclength;

   ierror   = 0;
   rgxy     = self->rgxy;
   rgArcEnd = self->rgArcEnd;
   cArcEnd  = self->cArcEnd;
   rgmeas   = self->rgmeas;

   ASSERT(cArcEnd > 0);

// for a single point

   if (cArcEnd == 1)
   {
      rgmeas[0] = rgxy[rgArcEnd[0]].x;
      rgmeas[1] = rgxy[rgArcEnd[1]].y;
      rgmeas[2] = rgmeas[0];
      rgmeas[3] = rgmeas[1];
      rgmeas[4] = rgmeas[0];
      rgmeas[5] = rgmeas[1];
      return ierror;
   }

// If too many measurements, truncate.

   if ((ierror = cArcEnd-1) > ARC_CARCMAX)
   {
      cArcEnd = ARC_CARCMAX + 1;
      ierror  = -1;
   }

   imeas = 0;

   for (iArc = 0; iArc < cArcEnd-1; iArc++)
   {
      ixyBegin        = rgArcEnd[iArc];
      ixyEnd          = rgArcEnd[iArc+1];
      cog             = FindCogARCS(self, ixyBegin, ixyEnd, &arclength);
      rgmeas[imeas++] = rgxy[ixyBegin].x;
      rgmeas[imeas++] = rgxy[ixyBegin].y;
      rgmeas[imeas++] = cog.x;
      rgmeas[imeas++] = cog.y;
   }

   rgmeas[imeas++] = rgxy[ixyEnd].x;
   rgmeas[imeas++] = rgxy[ixyEnd].y;
   self->cmeas     = (cArcEnd << 2) - 2;

   return ierror;
}


// PURPOSE: Calculate center of gravity of a substroke
// RETURN:  The cog.
// GLOBALS:
// CONDITIONS:
//      ixyBegin, ixyEnd index into the smoothed points, identifying the arc
//       within the stroke

XY FindCogARCS(ARCS *self, int ixyBegin, int ixyEnd, long *arclength)
{
   ARCSXY *pxy;                  //ptr: smoothed data
   ARCSXY *pxyLast, * pxyNext;
   XY      xy;
   long    x0,x1,y0,y1;
   long    arclen, deltaArclen, xCog, yCog;
   FIXED   deltaTemp;
   pxyLast = (ARCSXY NEAR *)&self->rgxy[ixyEnd];
   pxy     = (ARCSXY NEAR *)&self->rgxy[ixyBegin];

   if (ixyBegin == ixyEnd)
   {
      xy.x = pxy->x;
      xy.y = pxy->y;
      pxy++;
      *arclength = 0;
      return xy;
   }

   xCog = 0;
   yCog = 0;
   arclen = 0;
   for ( ; pxy < pxyLast; pxy++)
   {
      x0 = (long)pxy->x;
      y0 = (long)pxy->y;
      pxyNext = pxy;
      pxyNext++;
      x1 = (long)pxyNext->x;
      y1 = (long)pxyNext->y;

      deltaTemp = (FIXED)(Square((long)(x1-x0))+Square((long)(y1-y0)));

#ifdef WIN32
      deltaArclen = (long)sqrt(deltaTemp);
#else
      deltaArclen = ((long)(SqrtFIXED(deltaTemp))) >> 8;
#endif
      arclen += deltaArclen;
      xCog += ((deltaArclen * (x0 + x1)) + 1) >> 1;
      yCog += ((deltaArclen * (y0 + y1)) + 1) >> 1;
   }

   if (!arclen)    //crash protection
   {
      xy.x = (int)xCog;
      xy.y = (int)yCog;
   }
   else
   {
      xy.x = (int)((xCog + (arclen >> 1)) / arclen);
      xy.y = (int)((yCog + (arclen >> 1)) / arclen);
   }

   *arclength = arclen;

   return xy;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\arcs.h ===
// arcs.h

#ifndef	__INCLUDE_ARCS
#define	__INCLUDE_ARCS

#include "arcparm.h"

#define FEATURE ARCS
typedef XY		ARCSXY;

//************Sizes******************
// there needs to be at least craw points allocated to rgsmoothxy
// rgixyArcEnd needs to include all noise generated y-extrema 

#define ARC_CARCMAX  	7					//Max # arcs
#define ARC_CMEASMAX 	(ARC_CARCMAX*4 + 2) //Max # measurements per arc

#define ARC_CSMOOTHXYMAX 512
#define ARC_CARCENDMAX 	100
#define ARC_CARCTYPEMAX 100   //Includes y-extrema that will defer to turn pts
#define ARC_CARCNEWMAX  10
#define ARC_CARCEXTMAX  5
#define ARC_CMEASTOOMANY 64

// Fields flagged PL must be preloaded before CmeasARCS is called 
// Fields flagged R are set on return from CmeasARCS 
// The allocation for smoothed data should be as large as for raw data

typedef struct tagARCS
{
    RECT	rawrect;			// bounding rectangle of raw points.
    int		cxy;				// R count: smoothed (x,y) coordinates
    XY	   *rgxy;				// PL ptr: smoothed (x,y) data
    int		crawxy;				// PL count: raw (x,y) coordinates
    XY	   *rgrawxy;			// PL ptr: raw (x,y) data
    int		cmeas;				// R count: measurements
    int     rgmeas[ARC_CMEASMAX]; // PL measurements
    int		ierror;				// R If stroke was truncated, eg., too wiggly

    // the remainder need preloading (of addresses), but is
    // only of local use : for the arcing processor only 
	
								// Computed from arcRaw... Normalized threshholds
    int arcNormHysterAbs;   // Normalized Y-extrema hysteresis window
    int arcNormHysInfAbs;   // Normalized Inflection Pt hysteresis window
    int arcNormDistHook;    // Normalized Max Distance of a dehookable hook
    int arcNormDistTurn;    // Normalized Distance of the curve of a turn
    int arcNormDistStr;     // Normalized min Straightness distance (turn pts)
    int sizeNormStrokeV;    // Normalized Vertical length of stroke
    int sizeNormStrokeH;    // Normalized Horizontal length of stroke
    int arcDataShift;       // Number of bits of normalizing shift of data

    int rgArcEnd[ARC_CARCENDMAX];   // ptr:extrema&arc endpoint storage:
    int cArcEnd;                    // count:arc endpoints
    int rgArcType[ARC_CARCENDMAX];  // ptr: arc types
    int rgArcNew[ARC_CARCNEWMAX];   // ptr: new arc pts (e.g. infl pts)
    int rgArcExt1[ARC_CARCEXTMAX];  // ptr: small storage for extrema
    int rgArcExt2[ARC_CARCEXTMAX];  // ptr: small storage for extrema
} ARCS;

ARCS *NewARCS(int cRaw);
void DestroyARCS(ARCS *self);

int CmeasARCS(ARCS *self, ARCPARM * arcparm);
int SmoothPntsARCS(ARCS *self, ARCPARM *arcparm);

#define    RgxyARCS(arcs)     ((arcs)->rgxy)
#define     CxyARCS(arcs)     ((arcs)->cxy)
#define    XyAtARCS(arcs,i)   ((arcs)->rgxy[i])
#define RgrawxyARCS(arcs)     ((arcs)->rgrawxy)
#define  CrawxyARCS(arcs)     ((arcs)->crawxy)
#define RawxyAtARCS(arcs,i)   ((arcs)->rgrawxy[i])
#define  CnmeasARCS(arcs)     ((arcs)->cmeas)
#define  MeasAtARCS(arcs,i)   ((arcs)->rgmeas[i])
#define  TypeAtARCS(arcs,i)   ((arcs)->rgArcType[i])

#define CalccmeasARCS(carcs)                (4*(carcs) + 2)
#define CalccmeasAllARCS(carcs,cstrokes)    (4*(carcs) + 2*(cstrokes))
#define CalccARCS(cmeas)                    (((cmeas) - 2) / 4)
#define CalcIndexARCS(cmeas)                (((cmeas) - 2) / 4)

/*  Hex masks indicating the type of arcing point */
#define ARC_type_ext   0x0001  //Includes start and end points too
#define ARC_type_infl  0x0002  //Found by Inflection point finder
#define ARC_type_cusp  0x0004  //Cusp
#define ARC_type_turn  0x0008  //Looser turning pt than a cusp
#define ARC_type_loop  0x0010  //Loop (alpha, eg)
#define ARC_type_hook  0x0020  //Label dehooking explicitly occurred

#define ARC_hook_begin 0x0001  //The hook was at the beginning of the stroke
#define ARC_hook_end   0x0002  //The hook was at the end of the stroke
#define ARC_hook_find   90     //For Finding candidates, not deciding hooks

#define AssertMul(a,b) ASSERT((long)(a) * (long)(b) == (long)((int)(a) * (int)(b)));

#define IsHookSmallARCS(self,sizeHook) ((sizeHook) < ((self)->arcNormDistHook))

#endif	//__INCLUDE_ARCS
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\inc\otter.h ===
/******************************Module*Header*******************************\
* Module Name: otter.h
*
* Primary data structures for the Otter recognizer.
*
* Created: 20-Jul-1995 09:42:38
* Author: Patrick Haluptzok patrickh
*
* Copyright (c) 1994 Microsoft Corporation
\**************************************************************************/

#ifndef __INCLUDE_OTTER
#define __INCLUDE_OTTER
																		

#ifdef __cplusplus
extern "C" 
{
#endif

/************ Settings for different versions of Otter *****************\
*
*	OTTER_FIB	- Use the old otter database "fib.dat" with Fibonacci indices
*
\***********************************************************************/

// #define OTTER_FIB

#ifdef OTTER_FIB
#define OTTER_NUM_SPACES 32		// Old (Fibonacci) number of spaces
#else
#define OTTER_NUM_SPACES 52
#endif

#define OTTER_CMEASMAX  50

typedef struct tagOTTER_PROTO
{
    XY      size;                           // unscaled size in xy
    UINT    index;                          // space index
	FLOAT   rgmeas[OTTER_CMEASMAX];         // measurements
} OTTER_PROTO;

OTTER_PROTO *OtterFeaturize(GLYPH *);

#define	OTTER_SPLIT			0x01		// Constants for masking bDBType
#define	OTTER_FLIP			0x02

typedef struct tagOTTER_DB_STATIC
{
	WORD	acProtoInSpace[OTTER_NUM_SPACES];               // Count of prototypes
	BYTE	*apjDataInSpace[OTTER_NUM_SPACES];              // Pointers to features
	WORD	*apwTokensInSpace[OTTER_NUM_SPACES];            // Tokens
	WORD	*apwDensityInSpace[OTTER_NUM_SPACES];		    // Densities
	BYTE	bDBType;										// Type of the database
} OTTER_DB_STATIC;

extern OTTER_DB_STATIC	gStaticOtterDb;	// Otter lib external variable!

typedef struct tagOTTER_LOAD_INFO
{
	void * pLoadInfo1;
	void * pLoadInfo2;
	void * pLoadInfo3;
} OTTER_LOAD_INFO;

//
// Implemented in "otterfl.c", used a lot

BOOL OtterLoadRes(HINSTANCE, int, int, LOCRUN_INFO * pLocRunInfo);
BOOL OtterLoadFile(LOCRUN_INFO * pLocRunInfo, OTTER_LOAD_INFO * pLoadInfo, wchar_t * pathName);
BOOL OtterUnLoadFile(OTTER_LOAD_INFO * pLoadInfo);

//
// Implemented in "omatch.c" and "omatch2.c", used a lot

int OtterMatch(ALT_LIST *pAlt, int cAlt, GLYPH *pGlyph, CHARSET *pCS,LOCRUN_INFO * pLocRunInfo);
int OtterMatch2(ALT_LIST *pAlt, int cAlt, GLYPH *pGlyph, CHARSET *pCS,LOCRUN_INFO * pLocRunInfo, int *pSpaceNum);

//
// Functions for Otter tools (some used in Otter itself)

// 
// Implemented in "otter.c", used a lot

int CountMeasures(int index);	// I: Otter index (non-compact)

//
// Functions for tranforming one index into another

int Index2CompIndex(int index);
int CompIndex2Index(int iCompact);

BOOL IsActiveCompSpace(int iCompSpace);	// I: ID of Otter compact space



#ifndef HWX_PRODUCT

//
// Implemented in "otter.c", used in "prune" only!
int CountStrokes(int index);	// I: Otter index (non-compact)

//
// Implemented in "otrain.c", used in "prune" only!

int OtterTrain
(
	double     *pjTrainProto,       // Pointer to the train clusters packed together.
	int		   *awTrainTokens,      // Pointer to the token labels for the train clusters.
	int		   *awDensity,          // Pointer to the density labels for the train clusters.
	int		   *aiValid,            // Array that tells which clusters are valid to map to.
	int			cTrainProto,		// Count of train prototypes to look through.
	int			cFeat,              // Count of features per prototype.
	double	   *pjTestProto,        // Pointer to the prototype we are trying to classify.
	int		   *awToken,            // Array of WORD's we return our best matches into.
	double	   *aeProbMatch,        // Array of Error associated with each guess.
	int			cMaxReturn          // Count of maximum number of guesses we should return.
);

//
// Implemented in "io.c", used in "ink2mars" only!

BOOL	OtterWrite(FILE *, wchar_t *, int, OTTER_PROTO *, int, wchar_t, wchar_t);
BOOL    OtterRead(FILE *, OTTER_PROTO *);	// Not used anywhere!!!

#endif

#ifdef __cplusplus
};
#endif

#endif // __INCLUDE_OTTER
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\madcow\src\usa\linesegnn.c ===
#include <limits.h>
#include "common.h"

// generated by trntrex from 3560
// layer 0
static const int cInput = 19;
// layer 1
static const int cHidden = 8;
static const int rgWeightHidden[8*19] = {
	// rgWeightHidden+0*19
	-448, -528, -394, 430, 572,
	5490, 8288, 3350, 4027, 2114,
	-1173, 4162, -686, -761, -1264,
	2508, 959, -225, -2091,	// rgWeightHidden+1*19
 -2599,
	-2722, -800, -634, 26, 177,
	-1150, 933, 1221, 1764, 112,
	264, 2847, 317, 788, 460,
	3133, -1511, -508,	// rgWeightHidden+2*19
 363, -3731,
	-83, 1454, 51, -2340, 2049,
	-3503, -318, 1767, -285, 1363,
	-535, -880, 1783, 262, -275,
	540, 121,	// rgWeightHidden+3*19
 -2039, 4152, 5881,
	2994, -4703, 1713, 1657, 4205,
	972, -983, 4452, -839, 2089,
	-734, 1200, 442, 135, -499,
	-1390,	// rgWeightHidden+4*19
 -4495, 3142, 1603, 6589,
	-3935, 1469, -293, 2404, -444,
	-618, 6542, -1311, 694, -847,
	-174, 2004, 2336, 920, -987,
	// rgWeightHidden+5*19
	1570, -3065, -1683, -588, -3089,
	11, 2088, -771, 3734, 3088,
	-7386, 1678, -1124, 192, -80,
	908, 1627, -5474, -38,	// rgWeightHidden+6*19
 1954,
	7294, 10833, 1000, 2099, 2369,
	1242, 626, 454, 2572, -2882,
	421, -753, -98, -2647, -1421,
	-3539, 349, 604,	// rgWeightHidden+7*19
 896, -4607,
	-12399, -1664, 171, -51, 300,
	-710, 719, 2085, -1675, 115,
	-1096, -1275, -284, -1564, -2993,
	-415, 358};  // rgWeightHidden[8*19]

static const int rgBiasHidden[8] = {
	-4639, -1667, -512, 375, -1028,
	-1585, 2654, 1088
};  // rgBiasHidden[8]

// layer 2
static const int cOutput = 3;
static const int rgWeightOutput[3*8] = {
	// rgWeightOutput+0*8
	1335, -382, 1151, 397, 829,
	-2413, 356, 343,	// rgWeightOutput+1*8
 -979, 572,
	-1, 253, 642, -300, -766,
	-8,	// rgWeightOutput+2*8
 -1043, -379, -1402, -528,
	-968, 3093, 999, -290};  // rgWeightOutput[3*8]

static const int rgBiasOutput[3] = {
	-1597, -423, 264
};  // rgBiasOutput[3]



#include "math16.h"


static void ForwardFeedLayer(int cLayer0, int *rgLayer0, int cLayer1, unsigned short *rgLayer1, const int *rgWeight, const int *rgBias)
{
	int i, j;
	__int64 sum;
	__int64 iVal;
	int *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++))<< 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum += iVal;
		}

		sum	=	(sum >> 8);

		sum	=	max (INT_MIN + 1, min(INT_MAX - 1, sum));
		
		j = Sigmoid16((int)sum);
		if (j > 0xFFFF)
			j = 0xFFFF;

		*rgLayer1++ = (unsigned short)j;
	}
}

static __int64 ForwardFeedLayerNoSig(int cLayer0, unsigned short *rgLayer0, int cLayer1, __int64 *rgLayer1,const int *rgWeight,const int *rgBias)
{
	int i, j;
	__int64 sum, Tot = 0;
	__int64 iVal;
	unsigned short *pInput;

	for (i=cLayer1; i; i--)
	{
		sum = ((__int64)(*rgBias++)) << 16;
		pInput = rgLayer0;
		for (j=cLayer0; j; j--)
		{
			iVal = (__int64)(*rgWeight++) * (*pInput++);
			sum	 += iVal;
			
		}

		sum	= (sum >> 8);

		*rgLayer1++ =	sum;
		Tot		+=	abs (sum);
	}

	return Tot;
}

void ForwardFeed	(	int				*rgFeat, 
						unsigned short	*rgHidden, 
						__int64			*rgOutput
					)
{

	ForwardFeedLayer	(	cInput, 
							rgFeat, 
							cHidden, 
							rgHidden, 
							rgWeightHidden,
							rgBiasHidden
						);

	ForwardFeedLayerNoSig	(	cHidden, 
								rgHidden, 
								cOutput, 
								rgOutput, 
								rgWeightOutput,
								rgBiasOutput
							);

}

int LineSegNN (int *pFeat)
{
	unsigned short	aHidden[50];
	__int64			aOutput[10];
	int				i, iBest	=	0;

	ForwardFeed (pFeat, aHidden, aOutput);

	for (i = 1; i < cOutput; i++)
	{
		if (aOutput[i]	> aOutput[iBest])
			iBest	=	i;
	}

	return iBest;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\database.c ===
// Code for Otter database handler

#include "common.h"
#include "otterp.h"
#include "stdio.h"

extern OTTER_DB_STATIC	gStaticOtterDb;

BOOL OtterLoadRes(
	HINSTANCE	hInst, 
	int			resNumber, 
	int			resType,
	LOCRUN_INFO *pLocRunInfo
)
{	
	HANDLE		hres;
	HGLOBAL		hglb;
    BYTE		*pjOtter;

    //
    // Load and lock the resource and set the pointers into the data
    //
    hres = FindResource(hInst, (LPCTSTR) resNumber, (LPCTSTR) resType);

    if (hres == NULL)
    {
        ASSERT(hres);
        return FALSE;
    }

    hglb = LoadResource(hInst, hres);

    if (hglb == NULL)
    {
        ASSERT(hglb);
        return FALSE;
    }

    pjOtter = (BYTE *) LockResource(hglb);

    if (pjOtter == NULL)
    {
        ASSERT(pjOtter);
        return FALSE;
    }
	return OtterLoadPointer(pjOtter, pLocRunInfo);
}

BOOL OtterLoadPointer(void * pData, LOCRUN_INFO * pLocRunInfo)
{
    int		iSpace;
	int		iIndex, cProto, iProto;
	UNALIGNED OTTER_DATS *pOtterDat;
	WORD	wMaxDenseCode = pLocRunInfo->cCodePoints + pLocRunInfo->cFoldingSets;
	BYTE	*pjOtter = (BYTE *)pData;
	const OTTERDB_HEADER	*pHeader = (OTTERDB_HEADER *)pjOtter;

	if ( (pHeader->fileType != OTTERDB_FILE_TYPE)
		|| (pHeader->headerSize < sizeof(*pHeader))
		|| (pHeader->minFileVer > OTTERDB_CUR_FILE_VERSION)
		|| (pHeader->curFileVer < OTTERDB_OLD_FILE_VERSION) 
		|| memcmp (pLocRunInfo->adwSignature, pHeader->adwSignature, sizeof(pLocRunInfo->adwSignature))
	)
	{
		return FALSE;
	}

	memset(&gStaticOtterDb, 0, sizeof(gStaticOtterDb));

	//
	// Get database type from the binary file (otter.dat or fib.dat)

#ifdef OTTER_FIB
	gStaticOtterDb.bDBType = OTTER_FLIP;	// Default for fib files
#else
	gStaticOtterDb.bDBType = pHeader->bDBType; // OTTER_SPLIT;
#endif
	
	pjOtter += pHeader->headerSize;

	for (iSpace = 0; iSpace < OTTER_NUM_SPACES; iSpace++)	// Loop over all (compact Otter) spaces
	{
		// 
		// If the space is one of the (i,j) spaces with i > j (i.e. a "split" space)
		// skip it if we are not in the OTTER_SPLIT mode
		if ( ! IsActiveCompSpace(iSpace) )
		{
			// gStaticOtterDb.acProtoInSpace[iSpace] = 0;
			// gStaticOtterDb.apwDensityInSpace[iSpace] = (WORD *) NULL;
			// gStaticOtterDb.apwTokensInSpace[iSpace] = (WORD *) NULL;
			// gStaticOtterDb.apjDataInSpace[iSpace] = (BYTE *) NULL;
			continue;
		}

        pOtterDat = (UNALIGNED OTTER_DATS *) pjOtter;

#ifndef OTTER_FIB	// Do the checks only in new Otter
		ASSERT( CompIndex2Index(iSpace) == (int)pOtterDat->iSpaceID );
		ASSERT( CountMeasures( CompIndex2Index(iSpace) ) == pOtterDat->cFeats );
#endif
        gStaticOtterDb.acProtoInSpace[iSpace] = (WORD) pOtterDat->cPrototypes;
        gStaticOtterDb.apwDensityInSpace[iSpace] = (WORD *) (((LPBYTE) pOtterDat) +
                                                              sizeof(OTTER_DATS));

        gStaticOtterDb.apwTokensInSpace[iSpace] = (WORD *)
												(((LPBYTE) pOtterDat) +
												sizeof(OTTER_DATS) +
                                                (sizeof(WORD) * pOtterDat->cPrototypes));

		cProto = pOtterDat->cPrototypes;

        for (iIndex = 0, iProto = 0; iProto < cProto;)
        {
			if (gStaticOtterDb.apwTokensInSpace[iSpace][iIndex] > wMaxDenseCode)
            {
                iProto += (gStaticOtterDb.apwTokensInSpace[iSpace][iIndex] - wMaxDenseCode);
                iIndex += 2;
            }
            else
            {
                iProto += 1;
                iIndex += 1;
            }
        }

        gStaticOtterDb.apjDataInSpace[iSpace] = (BYTE *)
										 ((LPBYTE) pOtterDat) +
                                         sizeof(OTTER_DATS) +
                                         iIndex * 2 +
                                         (sizeof(WORD) * pOtterDat->cPrototypes);

        pjOtter = pjOtter +
                  sizeof(OTTER_DATS) +
                  (sizeof(WORD) * pOtterDat->cPrototypes) +
                  iIndex * 2 +
                  (sizeof(BYTE) * pOtterDat->cPrototypes * pOtterDat->cFeats);
	}

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\ofeature.c ===
// Code for Otter featurizer

#include "common.h"
#include "otterp.h"
#include <math.h>

const ARCPARM arcparmG = {8, 20, 28, 40, 40, 13, 8, 20, 275, 13, 43, 5, 90, 6, 8, 1024};

OTTER_PROTO *OtterFeaturize(GLYPH *self)
{
	int				cmeas, imeas, index, cmeasframe;
    int				iframe, cframe;
	UINT			aIndex, bIndex;
	GLYPH		   *glyph;
	OTTER_PROTO	   *xproto;
    FRAME		   *rgframe[GLYPH_CFRAMEMAX], *frame;
	RECT			rect;
	FLOAT			fixmeanx, fixmeany, fixsumsq;
	FLOAT			sumsq;
	FLOAT		   *rgmeas;

	ASSERT(self && self->frame);

    xproto = (OTTER_PROTO *) ExternAlloc(sizeof(OTTER_PROTO));

	if (xproto == (OTTER_PROTO *) NULL)
		return (OTTER_PROTO *) NULL;

	// Compute some stuff

	rgmeas = xproto->rgmeas;

	GetRectGLYPH(self, &rect);
	xproto->size.x = rect.right - rect.left;
	xproto->size.y = rect.bottom - rect.top;

    // calculate the otter index, perform an insertion sort on the
    // frames based on frame index (= # of arcs)

    cframe = 0;

    for (glyph = self; glyph; glyph = glyph->next)
    {
        frame = glyph->frame;
        if (IsVisibleFRAME(frame))
        {
            for (iframe = 0; iframe < cframe; iframe++)
            {
                // this insertion is stable because as frames with the same
                // order come along their order is preserved

				if ((!OtterIndex(rgframe[iframe], &aIndex)) || (!OtterIndex(frame, &bIndex)))
					goto cleanup;

				if ( (aIndex > bIndex) &&		// Re-order the strokes
					 !(gStaticOtterDb.bDBType & OTTER_SPLIT) )
                {
					FRAME	*frameT;
                    frameT = rgframe[iframe];
                    rgframe[iframe] = frame;
                    frame = frameT;
                }
            }

			ASSERT(cframe < GLYPH_CFRAMEMAX);
            rgframe[cframe++] = frame;
        }
    }

	// blast in the measurements

    cmeas = 0;
	index = 0;

    for (iframe = 0; iframe < cframe; iframe++)
    {
		if (!OtterIndex(rgframe[iframe], &aIndex))
			goto cleanup;

        index = 10 * index + aIndex;

        cmeasframe = OTTER_MEASURES(rgframe[iframe]);

        if (aIndex <= 0 || aIndex >= 8)
        {
			if (cframe == 1)
			{
	            xproto->index = INVALID_1;
			}
			else
			{
				ASSERT(cframe <= 2);
				xproto->index = INVALID_2;	// 2-stroke Otter only!!!
			}				
			return xproto;
        }

        if (cmeas + cmeasframe > OTTER_CMEASMAX)
        {
            xproto->index = INVALID_2;		// 2-stroke Otter only!!!
            return xproto;
        }

        for (imeas = 0; imeas < cmeasframe; ++imeas)
        {
			rgmeas[cmeas + imeas] = ((OTTER_FRAME *) rgframe[iframe]->pvData)->rgmeas[imeas];
        }

        // we are only redirecting 1 arc frames for now

		if (!OtterIndex(rgframe[iframe], &aIndex))
			goto cleanup;

        if ( (aIndex == 1) &&
			 (gStaticOtterDb.bDBType & OTTER_FLIP) )
        {
			FLOAT	meas;
		    FLOAT	dx, dy;
			FLOAT	*pmeasStart, *pmeasEnd;
			// redirect each frame as necessary by comparing the x coordinate
			// of the endpoints
			// rotate the coordinates to a new critical angle so as to minimize
			// the amount of data that falls near the discontinuity

			dx = rgmeas[cmeas + cmeasframe - 2] - rgmeas[cmeas];
			dy = rgmeas[cmeas + cmeasframe - 1] - rgmeas[cmeas + 1];

            // hardcoded tangent -30 degrees

			if (dy < (dx * -.577350269))
			{
				pmeasStart = &rgmeas[cmeas];
				pmeasEnd   = pmeasStart + (cmeasframe - 2);

				while (pmeasStart < pmeasEnd)
				{
					meas = *pmeasStart, *pmeasStart = *pmeasEnd,  *pmeasEnd = meas;
					++pmeasStart;
					++pmeasEnd;
					meas = *pmeasStart, *pmeasStart = *pmeasEnd,  *pmeasEnd = meas;
					++pmeasStart;
					pmeasEnd -= 3;
				}
			}
        }
        cmeas += cmeasframe;
    }

	xproto->index = index;

    fixmeanx = 0.0F;
    fixmeany = 0.0F;

    for (imeas = 0; imeas < cmeas; imeas += 2)
    {
        fixmeanx += rgmeas[imeas];
        fixmeany += rgmeas[imeas+1];
    }

	fixmeanx = fixmeanx / (cmeas/2);
	fixmeany = fixmeany / (cmeas/2);

    fixsumsq = 0.0F;

	for (imeas = 0; imeas < cmeas; imeas += 2)
	{
		rgmeas[imeas]   = rgmeas[imeas] - fixmeanx;
		rgmeas[imeas+1] = rgmeas[imeas+1] - fixmeany;

		fixsumsq += rgmeas[imeas] * rgmeas[imeas];
		fixsumsq += rgmeas[imeas+1] * rgmeas[imeas+1];
	}

	if (fixsumsq < 0.001)
	{
		// All the feats are 0

		sumsq = 1.0F;
	}
	else
		sumsq = (FLOAT) sqrt(fixsumsq);

	ASSERT(sumsq != 0);

    for (imeas = 0; imeas < cmeas; ++imeas)
    {
        rgmeas[imeas]  = rgmeas[imeas] / sumsq;
        rgmeas[imeas] *= 128.0F;
        rgmeas[imeas] += 128.0F;
        ASSERT(rgmeas[imeas] >= 0.0);
        ASSERT(rgmeas[imeas] <= 255.0);
    }

    return xproto;

cleanup:
    ExternFree(xproto);
	return (OTTER_PROTO *) NULL;
}


BOOL OtterIndex(FRAME *self, UINT *pIndex)
{
	if (self->pvData == (void *) NULL)
	{
		if ((self->pvData = (void *) ExternAlloc(sizeof(OTTER_FRAME))) == (void *) NULL)
			return FALSE;

		memset(self->pvData, '\0', sizeof(OTTER_FRAME));
	}

	if (!((OTTER_FRAME *) self->pvData)->index)
	{
		if (!OtterExtract(self))
		{
			 return(FALSE);
		}
	}

	
    *pIndex = ((OTTER_FRAME *) self->pvData)->index;
	return TRUE;
}


ARCS *OtterGetFeatures(FRAME *self)
{
	ARCS   *arcs;
	
    arcs = NewARCS(CrawxyFRAME(self));

	if (arcs != (ARCS *) NULL)
	{
		arcs->rgrawxy   = RgrawxyFRAME(self);
		arcs->crawxy	= CrawxyFRAME(self);
		arcs->rawrect   = *RectFRAME(self);
	}

	return (FEATURE *) arcs;
}

const float rgPeriodMean[]    = { (float) 19.1553318,  (float) 18.782377 };
const float rgPeriodCovInv[]  = { (float)  0.00558371, (float) -0.00553402, (float) 0.00572476 };

// computes log prob of period using 2 dimensional gaussian model

float GetPeriodProb(FRAME *self)
{
	float distance, Width, Height;

	Width    = RectFRAME(self)->right - RectFRAME(self)->left - rgPeriodMean[0];
	Height   = RectFRAME(self)->bottom - RectFRAME(self)->top - rgPeriodMean[1];
	distance = rgPeriodCovInv[0] * Width  * Width +
			   rgPeriodCovInv[1] * Width  * Height +
			   rgPeriodCovInv[2] * Height * Height;
	if (distance > (float) 10.0)
		return((float) 2.90);
	distance *= (float) 0.3333;
	return distance;
}

ARCS *OtterGetTapFeatures(FRAME *self)
{
	ARCS   *arcs = (ARCS *) NULL;
	RECT	rect = *RectFRAME(self);

	ASSERT(self);

    // if bounding box < 25 in width and height then definitely a period

	if (IsTapRECT(rect))
    {
		arcs = (ARCS *) OtterGetFeatures(self);
		((OTTER_FRAME *) self->pvData)->ePeriod = (float) 0.0;

        // create the fake meassurments

		((OTTER_FRAME *) self->pvData)->cmeas 	= 6;
		((OTTER_FRAME *) self->pvData)->index	 = CalcIndexARCS(6);
		((OTTER_FRAME *) self->pvData)->rgmeas[0] = (float) ((rect.right + rect.left) >> 1);
		((OTTER_FRAME *) self->pvData)->rgmeas[1] = (float) ((rect.bottom + rect.top) >> 1);
		((OTTER_FRAME *) self->pvData)->rgmeas[2] = ((OTTER_FRAME *) self->pvData)->rgmeas[0];
		((OTTER_FRAME *) self->pvData)->rgmeas[3] = ((OTTER_FRAME *) self->pvData)->rgmeas[1];
		((OTTER_FRAME *) self->pvData)->rgmeas[4] = ((OTTER_FRAME *) self->pvData)->rgmeas[0];
		((OTTER_FRAME *) self->pvData)->rgmeas[5] = ((OTTER_FRAME *) self->pvData)->rgmeas[1];

        // following code is for viewer only!

        if (arcs)
        {
            arcs->cmeas     = ((OTTER_FRAME *) self->pvData)->cmeas;
            arcs->rgmeas[0] = (int) ((OTTER_FRAME *) self->pvData)->rgmeas[0];
            arcs->rgmeas[1] = (int) ((OTTER_FRAME *) self->pvData)->rgmeas[1];
            arcs->rgmeas[2] = (int) ((OTTER_FRAME *) self->pvData)->rgmeas[2];
            arcs->rgmeas[3] = (int) ((OTTER_FRAME *) self->pvData)->rgmeas[3];
            arcs->rgmeas[4] = (int) ((OTTER_FRAME *) self->pvData)->rgmeas[4];
            arcs->rgmeas[5] = (int) ((OTTER_FRAME *) self->pvData)->rgmeas[5];
        }
    }

    // if bounding box > 25 and < 70 in width and height then possibly
    // a period so add to list of shape choices with a log prob.

	else if (IsPeriodRECT(rect))
	{
		((OTTER_FRAME *) self->pvData)->ePeriod = GetPeriodProb(self);		
	}
	// if bounding box > 70 then not a period.
	else
	{
		((OTTER_FRAME *) self->pvData)->ePeriod = (float) 4.0;
	}

	return (FEATURE *) arcs;
}

BOOL OtterExtract(FRAME *self)
{
	ARCS   *arcs;
	int		cmeas, imeas;
	BOOL    bRet = TRUE;

	if (!(arcs = OtterGetTapFeatures(self)))
    {
		arcs = OtterGetFeatures(self);

        if (arcs)
        {
            cmeas = CmeasARCS(arcs, (ARCPARM *) &arcparmG);

            ASSERT(cmeas);

            if (cmeas <= OTTER_CMEASMAX)
            {
                for (imeas = 0; imeas < cmeas; ++imeas)
                {
                    ((OTTER_FRAME *) self->pvData)->rgmeas[imeas] = (FLOAT) arcs->rgmeas[imeas];
                }
            }

            ((OTTER_FRAME *) self->pvData)->index = CalcIndexARCS(cmeas);
            ((OTTER_FRAME *) self->pvData)->cmeas = cmeas;
        }
		else
		{
			bRet = FALSE;
		}
    }

    DestroyARCS(arcs);

	return(bRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\io.c ===
// Otter I/O functions.

#include "common.h"
#include "otter.h"

BOOL OtterRead(FILE *fp, OTTER_PROTO *pproto)
{
	return FALSE;
}

BOOL OtterWrite(FILE *fp, wchar_t *pszFile, int iitem, OTTER_PROTO *pproto, int cframe, wchar_t wcUni, wchar_t dch)
{
	UINT	imeas, cmeas;
	BOOL	bRet;

	// If there is no prototype, print a place holder item
	if (pproto == (OTTER_PROTO *) NULL)
	{
		bRet = (fwprintf(fp, L"f.%d ", iitem) > 0)	&&					// sample
			   (fwprintf(fp, L"#zz ") > 0)			&&					// space index
			   (fwprintf(fp, L"%d ", cframe) > 0)	&&					// #frames
			   (fwprintf(fp, L"%04x ", wcUni) > 0)	&&					// unicode
			   (fwprintf(fp, L"%04x ", dch) > 0)	&&					// dense code
			   (fwprintf(fp, L"#zz\n") > 0) ;							// space index

		return bRet;
	}

	// Otherwise, print the full version
	bRet =	fwprintf(fp, L"%s.%d ", pszFile, iitem) > 0 &&			// sample
			fwprintf(fp, L"#%02d ", pproto->index) > 0 &&				// space index
			fwprintf(fp, L"%d ", cframe) > 0 &&						// #frames
			fwprintf(fp, L"%04x ", wcUni) > 0 &&					// unicode
			fwprintf(fp, L"%04x ", dch) > 0;						// dense code

    cmeas = CountMeasures(pproto->index);

	for (imeas = 0; imeas < cmeas; ++imeas)
	{
		if ( bRet )
		{
			bRet  = (fwprintf(fp, L"%d ", (int) pproto->rgmeas[imeas]) > 0);	// measurements
		}
		else
		{
			break;
		}
	}
	
	if ( bRet )
	{
		bRet = (fwprintf(fp, L"#%02d\n", pproto->index) > 0);		// space index
	}

	return bRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\omatch.c ===
// Code for Otter shape match function

#include "common.h"
#include "otterp.h"
#include "score.h"

//--------------------------- davestei add -----------------------
#ifdef MSRHOOK
#include "msrhook.h"
#endif

// Two sets of conditional defines are included in this file:
// KEEP_NEIGHBOR_LIST: Keeps track of several top-N lists for the research on converting
// kNN results to probabilities.  Keeps track of alt lists of prototype IDs, dense codes,
// and dense codes in which a code is allowed to appear only once.  At the end, unicode
// versions of the dense code lists are produced by unfolding and translating the dense
// code alt lists.
// KEEP_TOP_NEIGHBOR: Keeps track of a "verification distance" for the closest prototype.

int OtterMatch(ALT_LIST *pAlt, int cAlt, GLYPH *pGlyph, CHARSET *pCS,LOCRUN_INFO * pLocRunInfo)
{
	OTTER_PROTO	   *pproto;
	int             index, count;
	int				cFeat;
	int				iFeat;
	int				cMatch;
	BYTE			ajProto[OTTER_CMEASMAX];
	FLOAT			aeProb[MAX_ALT_LIST];
	WORD			awSym[MAX_ALT_LIST];
	const WORD	   *pwList;
	int				iFirstPrototypeID = 0;

	// Create a prototype, featurization.                                      
    if ((pproto = OtterFeaturize(pGlyph)) == (OTTER_PROTO *) NULL)
		return 0;

	cFeat = CountMeasures(pproto->index);

#ifdef OTTER_FIB		// If we are in old Otter, have to change to compact Fibonacci index
	index = Index2CompFib(pproto->index);
#else
	index = Index2CompIndex(pproto->index);	
#endif
	// Initialize the token array

	memset(awSym, '\0', sizeof(awSym));

	// Copy the featurization to a working array

    for (iFeat = 0; iFeat < cFeat; iFeat++)
    {
        ajProto[iFeat] = (BYTE) ((unsigned int) pproto->rgmeas[iFeat]);
    }

#if defined (KEEP_NEIGHBOR_LISTS) || defined(KEEP_TOP_NEIGHBOR) || defined(MSRHOOK)
	// Compute the ID of the first prototype in the space
	iFirstPrototypeID = 0;
	for (int jndex = 0; jndex < index; jndex ++) {
		iFirstPrototypeID += gStaticOtterDb.acProtoInSpace[jndex];
	}
#endif

	// Check for the best match.

	cMatch = OtterMatchInternal(gStaticOtterDb.apjDataInSpace[index],
								gStaticOtterDb.apwTokensInSpace[index],
								gStaticOtterDb.apwDensityInSpace[index],
								gStaticOtterDb.acProtoInSpace[index],
								cFeat,
								ajProto,
								awSym,
								aeProb,
								MAX_ALT_LIST,
								pCS,
								pLocRunInfo,
								iFirstPrototypeID,
								index);

	// Now, copy the results to the passed in alt-list, unfold tokens as we go.

    for (count = 0; (count < cMatch) && (count < cAlt); count++)
	{
		pwList = NULL;
		pAlt->aeScore[count] = aeProb[count];
        pAlt->awchList[count] = awSym[count];
	}

	pAlt->cAlt = count;

	// Finally, clean up the temporary stuff

	ExternFree(pproto);
	return count;
}

#ifdef KEEP_NEIGHBOR_LISTS
// An alternate list, with character labels stored in ints so it can also
// hold prototype numbers, and scores stored as integers, since that is how
// they are computed.

typedef struct WIDE_ALT_LIST_TAG {
	int awchList[MAX_ALT_LIST];
	int aiScore[MAX_ALT_LIST];
	int cAlt;
} WIDE_ALT_LIST;

static void UnfoldCodes(WIDE_ALT_LIST *pAltList, LOCRUN_INFO *pLocRunInfo)
{
	int i, cOut=0;
	WIDE_ALT_LIST newAltList;	// This will be where the new alt list is constructed.

	// For each alternate in the input list and while we have space in the output list
	for (i=0; i<(int)pAltList->cAlt && (int)cOut<MAX_ALT_LIST; i++) {

		// Check if the alternate is a folded coded
		if (LocRunIsFoldedCode(pLocRunInfo, pAltList->awchList[i])) {
			int kndex;
			// If it is a folded code, look up the folding set
			wchar_t *pFoldingSet = LocRunFolded2FoldingSet(pLocRunInfo, pAltList->awchList[i]);

			// Run through the folding set, adding non-NUL items to the output list
			// (until the output list is full)
			for (kndex = 0; kndex < LOCRUN_FOLD_MAX_ALTERNATES && (int)cOut<MAX_ALT_LIST; kndex++)
				if (pFoldingSet[kndex]) {
					newAltList.awchList[cOut]=pFoldingSet[kndex];
					newAltList.aiScore[cOut]=pAltList->aiScore[i];
					cOut++;
				}
		} else {
			// Dense codes that are not folded get added directly
			newAltList.awchList[cOut]=pAltList->awchList[i];
			newAltList.aiScore[cOut]=pAltList->aiScore[i];
			cOut++;
		}
	}	
	// Store the length of the output list
	newAltList.cAlt=cOut;

	// Copy the output list over the input.
	*pAltList=newAltList;
}

// Convert the alt list to unicode codes instead of dense codes, first unfolding the folded codes.
static void ListToUnicode(WIDE_ALT_LIST *pAltList, LOCRUN_INFO *pLocRunInfo) 
{
	int i;
	UnfoldCodes(pAltList, pLocRunInfo);
	for (i = 0; i < pAltList->cAlt; i++) {
		pAltList->awchList[i] = LocRunDense2Unicode(pLocRunInfo, pAltList->awchList[i]);
	}
}

// Insert a code into the alt list, optionally checking for duplicate codes and making
// sure only the highest score for a given code is recorded.
static void InsertCode(WIDE_ALT_LIST *pAltList, int code, int score, BOOL fDiversity)
{
	// Index of the item to be deleted if there is not enough space, 
	// by default the item beyond the last one in the list (or the 
	// last one if the alt list is full).
	int iDel = MAX_ALT_LIST - 1;

	// Index of location at which to insert the item in the list
	int iIns = 0;

	// Find the insert location
	int i;
	for (i = pAltList->cAlt - 1; i >= 0; i --) {
		if (score >= pAltList->aiScore[i]) {
			iIns = i + 1;
			break;
		}
	}

	// Nothing to do if the new code falls off the end of the list.
	if (iIns == MAX_ALT_LIST) {
		return;
	}

	// Find any other occurance of the item in the list
	if (fDiversity) {
		for (i = pAltList->cAlt - 1; i >= 0; i --) {
			if (pAltList->awchList[i] == code) {
				iDel = i;
				pAltList->cAlt --;
				break;
			}
		}
	}

	// Adjust the alt list size
	pAltList->cAlt = __min(MAX_ALT_LIST, pAltList->cAlt + 1);

	// Nothing to do if the same code is already higher in the list.
	if (iDel < iIns) {
		return;
	}

	// Replace the old occurence of the code with the new one
	if (iDel == iIns) {
		pAltList->awchList[iIns] = code;
		pAltList->aiScore[iIns] = score;
		return;
	}

	// Otherwise shift the items from ins..del-1 (inclusive) to ins+1..del
	memmove(pAltList->awchList + iIns + 1, pAltList->awchList + iIns, sizeof(pAltList->awchList[0]) * (iDel - iIns));
	memmove(pAltList->aiScore + iIns + 1, pAltList->aiScore + iIns, sizeof(pAltList->aiScore[0]) * (iDel - iIns));

	// And insert the new item
	pAltList->awchList[iIns] = code;
	pAltList->aiScore[iIns] = score;
}
#endif

/******************************Public*Routine******************************\
* OtterMatchInternal
*
* This is the integer version of the matching code.
*
* History:
*  13-Feb-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int OtterMatchInternal
(
	BYTE	   *pjTrainProto,	// Pointer to the train clusters packed together.
	WORD	   *awTrainTokens,  // Pointer to the token labels for the train clusters.
	WORD	   *awDensity,		// Pointer to the density labels for the train clusters.
	int			cTrainProto,	// Count of train prototypes to look through.
	int			cFeat,			// Count of features per prototype.
	BYTE	   *pjTestProto,	// Pointer to the prototype we are trying to classify.
	WORD	   *awToken,        // Array of WORD's we return our best matches into.
	float	   *aeProbMatch,	// Array of Error associated with each guess.
	int			cMaxReturn,		// Count of maximum number of guesses we should return.
	CHARSET	   *cs,				// Charset specifying what chars we can match to.
	LOCRUN_INFO * pLocRunInfo,	// Specifies the dense table and folding table for unicode support
	int			iFirstPrototypeID, // Number of the first prototype in this space
	int			iSpace			// Space number
)
{
    int iFeat, iTrainData, iLoop, iLabel;
    int iProbMatch;
	WORD wMaxDenseCode = pLocRunInfo->cCodePoints + pLocRunInfo->cFoldingSets;
    //
    // We want the whole loop in integer so we have a special array of integer just
    // to avoid touch float ever.
    //

    int     aiProbMatch[MAX_ALT_LIST];

#ifdef KEEP_TOP_NEIGHBOR
	// If we're keeping track of the "verification distance" to the top prototype, initialize that.
	extern int g_iBestPrototype;
	extern int g_iBestScore;
	int iBestScore = 0;
#endif

#ifdef KEEP_NEIGHBOR_LISTS
	// Initialize variables to keep track of the top N lists
	WIDE_ALT_LIST denseCodeList;
	WIDE_ALT_LIST diversityDenseCodeList;
	WIDE_ALT_LIST unicodeList;
	WIDE_ALT_LIST diversityUnicodeList;
	WIDE_ALT_LIST prototypeList;
	WIDE_ALT_LIST diversityPrototypeList;

	prototypeList.cAlt = 0;
	diversityPrototypeList.cAlt = 0;
	unicodeList.cAlt = 0;
	diversityUnicodeList.cAlt = 0;
	denseCodeList.cAlt = 0;
	diversityDenseCodeList.cAlt = 0;
#endif

#ifdef KEEP_TOP_NEIGHBOR
	// If we're keeping track of the "verification distance" to the top prototype, initialize that.
	g_iBestScore = 0;
	g_iBestPrototype = -1;
#endif

    ASSERT(cMaxReturn == MAX_ALT_LIST);

    for (iTrainData = 0; iTrainData < MAX_ALT_LIST; iTrainData++)
    {
		aiProbMatch[iTrainData] = -((int) ((1U << 31) / 10));	// I looked for a constant but didn't find one.
    }

#ifdef MSRHOOK
	// dump out per-sample info (currently just the space ID)
	MSR_PKNN_Sample(
		iSpace							// Space ID number
		);
	// dump out feature vector for this sample.
	for (iFeat = 0; iFeat < cFeat; iFeat++)
	{
		MSR_PKNN_Feature( (int)pjTestProto[iFeat] );
	}
#endif // MSRHOOK

    //
    // Loop through the train data and find the nearest neighbors for this
    // test sample.
    //

    for (iTrainData = 0, iLabel = 0; iTrainData < cTrainProto;)
    {
        int iDistTotal;
        int cLabel;
        WORD wCurrentLabel;

        wCurrentLabel = awTrainTokens[iLabel];

		if ( wCurrentLabel > wMaxDenseCode )
        {
			cLabel = wCurrentLabel - wMaxDenseCode;
            wCurrentLabel = awTrainTokens[iLabel + 1];
            iLabel += 2;
        }
        else
        {
            cLabel = 1;
            iLabel += 1;
        }

        if (!IsAllowedChar(pLocRunInfo, cs, wCurrentLabel))
        {
            iTrainData += cLabel;
            continue;
        }

        //
        // OK we know this char label is good and we know all the prototypes for this
        // char label are right in a row following this one, so let's plow through
        // them finding the probability this prototype was generated from the clusters
        // for this char label.
        //

        iProbMatch = -500000;

        for (;cLabel > 0; iTrainData++, cLabel--)
        {
            //
            // Let's see how far the train cluster is from the prototype.
            // We could use a table of squares and a little asm here for a perf boost.
            // Could do pjTrainProto += cFeat for continues above and do *pjTrainProto++
            // below.  Do perf when it all works.
            //
#ifdef KEEP_TOP_NEIGHBOR
			int iDistMax = 0;
#endif

            iDistTotal = 0;

            for (iFeat = 0; iFeat < cFeat; iFeat++)
            {
                int iDistMeas;

                iDistMeas = ((int) pjTrainProto[iTrainData * cFeat + iFeat])
                                 - ((int)pjTestProto[iFeat]);
#ifdef KEEP_TOP_NEIGHBOR
				// For the verification distance, the metric is the maximum distance along any dimension
				iDistMax = __max(iDistMax, abs(iDistMeas));
#endif
                iDistMeas = (iDistMeas * iDistMeas);
                iDistTotal += iDistMeas;
            }

#ifdef KEEP_TOP_NEIGHBOR
			if (g_iBestPrototype == -1 || iBestScore > iDistTotal) {
				iBestScore = iDistTotal;
				g_iBestPrototype = iFirstPrototypeID + iTrainData;
				g_iBestScore = iDistMax;
			}
#endif

#ifdef KEEP_NEIGHBOR_LISTS
			// Record this alternate and distance
			InsertCode(&prototypeList, iFirstPrototypeID + iTrainData, iDistTotal, FALSE);
			InsertCode(&denseCodeList, wCurrentLabel, iDistTotal, FALSE);

			InsertCode(&diversityPrototypeList, iFirstPrototypeID + iTrainData, iDistTotal, TRUE);
			InsertCode(&diversityDenseCodeList, wCurrentLabel, iDistTotal, TRUE);
#endif

#ifdef MSRHOOK
			// Record the distance between a given prototype and the sample
			MSR_PKNN_Distance(
				iFirstPrototypeID + iTrainData,		// Prototype ID number
				wCurrentLabel,						// Prototype label (dense folded)
				((short*)awDensity)[iTrainData],	// Prototype density
				iDistTotal							// Euclidean distance from unit normed sample to unit normed prototype
				);
#endif

			iDistTotal *= giKfactor;          // times -1/(2 sigma ^ 2)

			iDistTotal += ((int) ((short *) awDensity)[iTrainData]); // Attribute density of cluster.

            iProbMatch = AddLogProb((int) iProbMatch, iDistTotal);  // Sum up the cumulative probability
        }

        //
        // Check for quick out, if the probability of match is less than
        // our worst match so far.
        //

        if (iProbMatch <= aiProbMatch[cMaxReturn - 1])
        {
            continue;
        }

        //
        // Stick it in the table where it belongs.
        //

        for (iFeat = 0; iFeat < cMaxReturn; iFeat++)
        {
            //
            // If we already have matched against this token update
            // error if necesary and continue.  Note this case is as
            // we are running down the list and we hit this character
            // who is in the correct place.  We know the new weight
            // can't move us any higher or we wouldn't have got here.
            // We know it can't move us lower because we won't update
            // the weight if it's not lower than the weight already
            // there.
            //

            ASSERT(awToken[iFeat] != wCurrentLabel);

            if (iProbMatch > aiProbMatch[iFeat])
            {
                //
                // Copy all the old values down a bit so we can add our new
                // entry to the return list.
                //

                for (iLoop = (cMaxReturn - 1); iLoop > iFeat; iLoop--)
                {
                    awToken[iLoop] = awToken[iLoop - 1];
                    aiProbMatch[iLoop] = aiProbMatch[iLoop - 1];
                    ASSERT(awToken[iLoop] != wCurrentLabel);
                }

                //
                // Write in our new token.
                //


                aiProbMatch[iFeat] = iProbMatch;
                awToken[iFeat] = wCurrentLabel;
                break;
            }
        }
    }

    //
    // Count how many unique tokens are in the table.
    //

    for (iFeat = 0; iFeat < cMaxReturn; iFeat++)
    {
        if (awToken[iFeat] == 0)
        {
            break;
        }

        aeProbMatch[iFeat] = ((float) aiProbMatch[iFeat]) *
                             0.002707606174062F;    // ln(2) / 256
    }

#ifdef KEEP_NEIGHBOR_LISTS
	// Convert the alt lists to Unicode (unfolding folded codes)
	unicodeList = denseCodeList;
	ListToUnicode(&unicodeList, pLocRunInfo);

	diversityUnicodeList = diversityDenseCodeList;
	ListToUnicode(&diversityUnicodeList, pLocRunInfo);

	// Record NN lists here 
	// This example code just stores away the top prototype in a global variable
/*	{
		extern int g_iBestPrototype;
		extern int g_iBestScore;
		if (prototypeList.cAlt > 0) {
			g_iBestPrototype = prototypeList.awchList[0];
			g_iBestScore = prototypeList.aiScore[0];
		} else {
			g_iBestPrototype = -1;
			g_iBestScore = 0;
		}
	}
	*/

#endif	// KEEP_NEIGHBOR_LISTS

    return(iFeat);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\otrain.c ===
/******************************Module*Header*******************************\
* Module Name: train.c
*
* This implements a simple nearest neighbor classifier using the MARS
* featurization scheme.
*
* Created: 05-Jun-1995 16:22:55
* Author: Patrick Haluptzok patrickh
*
* Modified: 15-Jan-2000
* Author: Petr Slavik pslavik
*
* Copyright (c) 1995 Microsoft Corporation
\**************************************************************************/

#include "float.h"
#include "math.h"
#include "common.h"
#include "otterp.h"

float geKfactor= (float) KFACTOR;


/******************************Public*Routine******************************\
* OtterTrain
*
* Given a pointer to a test prototype, find the cMaxReturn nearest matching
* prototypes.  Basically all the prototypes are stored in sorted order by char
* class.
*
* We just go through them accumulating the probability for each character
* class and then seeing if that is enough to go in our N-Best List.
*
* Returns how many matches were found.
*
\**************************************************************************/

int OtterTrain
(
	double	   *pjTrainProto,	// Pointer to the train clusters packed together.
	int		   *awTrainTokens,	// Pointer to the token labels for the train clusters.
	int		   *awDensity,		// Pointer to the density labels for the train clusters.
	int		   *aiValid,		// Array that tells which clusters are valid to map to.
	int			cTrainProto,	// Count of train prototypes to look through.
	int			cFeat,			// Count of features per prototype.
	double	   *pjTestProto,	// Pointer to the prototype we are trying to classify.
	int		   *awToken,		// Array of WORD's we return our best matches into.
	double	   *aeProbMatch,	// Array of Error associated with each guess.
	int			cMaxReturn		// Count of maximum number of guesses we should return.
)
{
    int		iFeat, iTrainData, iLoop;
    WORD	wCurrentLabel = 0;
    BOOL	bCurrentLabelGood = FALSE;
    double	eProbMatch, eProbTemp;

    // Fill in return buffers with defaults

    for (iLoop = 0; iLoop < cMaxReturn; ++iLoop)
    {
        awToken[iLoop] = 0;
        aeProbMatch[iLoop] = -DBL_MAX;
    }

    // Loop through the train data and find the nearest neighbors for this
    // test sample.

    for (iTrainData = 0; iTrainData < cTrainProto;)
    {
        DWORD	dwDistTotal;

        wCurrentLabel = (WORD) awTrainTokens[iTrainData];

        if (aiValid[iTrainData] == 0)
        {
            iTrainData++;
            continue;
        }

        // OK we know this char label is good and we know all the prototypes for this
        // char label are right in a row following this one, so let's plow through
        // them finding the probability this prototype was generated from the clusters
        // for this char label.

        eProbMatch = 0.0;

        while ((iTrainData < cTrainProto)  &&
			(wCurrentLabel == awTrainTokens[iTrainData]))
        {
            // Let's see how far the train cluster is from the prototype.
            // We could use a table of squares and a little asm here for a perf boost.
            // Could do pjTrainProto += cFeat for continues above and do *pjTrainProto++
            // below.  Do perf when it all works.

            dwDistTotal = 0;

            for (iFeat = 0; iFeat < cFeat; iFeat++)
            {
                int iDistMeas;
                iDistMeas = ((int) pjTrainProto[iTrainData * cFeat + iFeat])
                                 - ((int)pjTestProto[iFeat]);
                iDistMeas = (iDistMeas * iDistMeas);
                dwDistTotal += iDistMeas;
            }

            eProbTemp = (double) dwDistTotal;
            // eProbTemp /= ((double) cFeat);     // This is like changing it into a
                                               // univariate distribution (I hope!)
            eProbTemp *= geKfactor;            // times -1/(2 sigma ^ 2)
            eProbTemp = exp(eProbTemp);        // Compute the prob
            ASSERT(_finite(eProbTemp));
            eProbTemp = eProbTemp * awDensity[iTrainData]; // Attribute density of cluster.
            eProbMatch += eProbTemp;           // Sum up the cumulative probability
            iTrainData++;
        }

        // Multiply the probability by the proportion of points that went
        // into that cluster.
        eProbMatch /= ((double) DynamicNumberOfSamples(wCurrentLabel));

        // Check for quick out, if the probability of match is less than
        // our worst match so far.

        if (eProbMatch <= aeProbMatch[cMaxReturn - 1])
        {
            continue;
        }

        // Stick it in the table where it belongs.

        for (iFeat = 0; iFeat < cMaxReturn; iFeat++)
        {
            // If we already have matched against this token update
            // error if necesary and continue.  Note this case is as
            // we are running down the list and we hit this character
            // who is in the correct place.  We know the new weight
            // can't move us any higher or we wouldn't have got here.
            // We know it can't move us lower because we won't update
            // the weight if it's not lower than the weight already
            // there.

            ASSERT(awToken[iFeat] != wCurrentLabel);

            if (eProbMatch > aeProbMatch[iFeat])
            {
                // Copy all the old values down a bit so we can add our new
                // entry to the return list.

                for (iLoop = (cMaxReturn - 1); iLoop > iFeat; iLoop--)
                {
                    awToken[iLoop] = awToken[iLoop - 1];
                    aeProbMatch[iLoop] = aeProbMatch[iLoop - 1];
                    ASSERT(awToken[iLoop] != wCurrentLabel);
                }

                // Write in our new token.

                aeProbMatch[iFeat] = eProbMatch;
                awToken[iFeat] = wCurrentLabel;
                break;
            }
        }
    }

    // Count how many unique tokens are in the table.

    for (iFeat = 0; iFeat < cMaxReturn; iFeat++)
    {
        if (awToken[iFeat] == 0)
        {
            break;
        }

        // Convert it back to a log prob.  Don't compute the 1/2pi gunk
        // since it just adds a constant amount in and doesn't effect the
        // net result.

        if (aeProbMatch[iFeat] == 0.0)
        {
            break;
        }

        // aeProbMatch[iFeat] = log(aeProbMatch[iFeat] * geLfactor);

        aeProbMatch[iFeat] = log(aeProbMatch[iFeat]);
    }

    return(iFeat);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\otter.c ===
/******************************Module*Header*******************************\
* Module Name: otter.c
*
* Globals and common support functions for Otter recognizer
*
* Created: 05-Jun-1995 16:22:55
* Author: Patrick Haluptzok patrickh
* Completely changed: 10-Jan-2001 and again chnged a lot on 30-Mar-2001
* Author: Petr Slavik, pslavik
* Copyright (c) 1995-2001 Microsoft Corporation
\**************************************************************************/

#include "common.h"
#include "otterp.h"

OTTER_DB_STATIC	gStaticOtterDb;

/*************************** Otter split spaces *********************************\
*                                                                                *
*  Encoding is as follows:                                                       *
*    (#arcs, #arcs) : otter index : compact index                                *
*    (  0  ,  1   ) :       1     :        0                                     *
*    (  0  ,  2   ) :       2     :        1                                     *
*    (  0  ,  3   ) :       3     :        2                                     *
*    (  0  ,  4   ) :       4     :        3                                     *
*    (  0  ,  5   ) :       5     :        4                                     *
*    (  0  ,  6   ) :       6     :        5                                     *
*    (  0  ,  7   ) :       7     :        6                                     *
*                                                                                *
*    (  1  ,  1   ) :      11     :        7                                     *
*    (  1  ,  2   ) :      12     :        8                                     *
*    (  1  ,  3   ) :      13     :        9                                     *
*    (  1  ,  4   ) :      14     :       10                                     *
*    (  1  ,  5   ) :      15     :       11                                     *
*    (  1  ,  6   ) :      16     :       12                                     *
*    (  1  ,  7   ) :      17     :       13                                     *
*                                                                                *
*    (  2  ,  1   ) :      21     :       14									 *
*    (  2  ,  2   ) :      22     :       15                                     *
*    (  2  ,  3   ) :      23     :       16                                     *
*    (  2  ,  4   ) :      24     :       17                                     *
*    (  2  ,  5   ) :      25     :       18                                     *
*    (  2  ,  6   ) :      26     :       19                                     *
*    (  2  ,  7   ) :      27     :       20                                     *
*                                                                                *
*    (  3  ,  1   ) :      31     :       21                                     *
*    (  3  ,  2   ) :      32     :       22                                     *
*    (  3  ,  3   ) :      33     :       23                                     *
*    (  3  ,  4   ) :      34     :       24                                     *
*    (  3  ,  5   ) :      35     :       25                                     *
*    (  3  ,  6   ) :      36     :       26                                     *
*    (  3  ,  7   ) :      37     :       27                                     *
*                                                                                *
*    (  4  ,  1   ) :      41     :       28                                     *
*    (  4  ,  2   ) :      42     :       29                                     *
*    (  4  ,  3   ) :      43     :       30                                     *
*    (  4  ,  4   ) :      44     :       31                                     *
*    (  4  ,  5   ) :      45     :       32                                     *
*    (  4  ,  6   ) :      46     :       33                                     *
*    (  4  ,  7   ) :      47     :       34                                     *
*                                                                                *
*    (  5  ,  1   ) :      51     :       35                                     *
*    (  5  ,  2   ) :      52     :       36                                     *
*    (  5  ,  3   ) :      53     :       37                                     *
*    (  5  ,  4   ) :      54     :       38                                     *
*    (  5  ,  5   ) :      55     :       39                                     *
*    (  5  ,  6   ) :      56     :       40                                     *
*                                                                                *
*    (  6  ,  1   ) :      61     :       41                                     *
*    (  6  ,  2   ) :      62     :       42                                     *
*    (  6  ,  3   ) :      63     :       43                                     *
*    (  6  ,  4   ) :      64     :       44                                     *
*    (  6  ,  5   ) :      65     :       45                                     *
*                                                                                *
*    (  7  ,  1   ) :      71     :       46                                     *
*    (  7  ,  2   ) :      72     :       47                                     *
*    (  7  ,  3   ) :      73     :       48                                     *
*    (  7  ,  4   ) :      74     :       49                                     *
*                                                                                *
*    (  0  ,  8+  ) : INVALID_1=91  :     50   Space of invalid 1-stroke glyphs  *
*    (  1+ ,  8+  ) : INVALID_2=92  :     51   Space of invalid 2-stroke glyphs  *
*                                                                                *
\********************************************************************************/

static const int aiOffset[] =
{
	-1, 6, 13, 20, 27, 34, 40, 45
};


static const int aiMaxCompIndex[] =
{
	6, 13, 20, 27, 34, 40, 45, 49
};


// Transform space index to compact index

int Index2CompIndex(int index)
{
	ASSERT(index > 0);
	if (index >= INVALID_1)
		return index - INVALID_1 + OTTER_NUM_SPACES - 2;
	return aiOffset[index/10] + index%10;
}


// Transform compact index to space index

int CompIndex2Index(int iCompact)
{
	int i;
	ASSERT(iCompact >= 0);
	ASSERT(iCompact < OTTER_NUM_SPACES);

	if (iCompact >= OTTER_NUM_SPACES - 2)		// Take care of invalid spaces first
		return iCompact - (OTTER_NUM_SPACES - 2) + INVALID_1;

	for (i = 0; ; i++)
		if (aiMaxCompIndex[i] >= iCompact)
			break;
	ASSERT(iCompact - aiOffset[i] <= 7);
	ASSERT(iCompact - aiOffset[i] >= 1);
	return 10 * i + iCompact - aiOffset[i];
}


// Given space index, return # of features

int CountMeasures(int index)	// I: Otter index (non-compact)
{
	int icount = 0;
	if (index >= INVALID_1)		// Take care of invalid spaces
	{
		return 0;
	}

	if (index > 10)				// If 2-stroke glyph
	{
		icount = (index/10) * 4 + 2;	// #arcs * 4 + 2;
		index %= 10;
	}

	icount += index * 4 + 2;			// #arcs * 4 + 2;

	ASSERT (icount <= OTTER_CMEASMAX);
	return icount;
}

// Given space index, return # of strokes

int CountStrokes(int index)		// I: Otter index (non-compact)
{
	if ( (index == INVALID_1) ||
		 (index < 10) )
	{
		return 1;
	}
	return 2;
}

/***************************************************************************\
*	IsActiveCompSpace:														*
*																			*
*	Return TRUE if the current database supports split spaces or if the		*
*	space is non-split one, i.e. its ID is "ij" with i <= j or it is an		*
*	invalid space.															*
\***************************************************************************/

BOOL
IsActiveCompSpace(int iCompSpace)	// I: ID of Otter compact space
{
#ifdef OTTER_FIB	// All Fib spaces are active
	return TRUE;
#else
	int iSpace;
	ASSERT(iCompSpace >= 0);
	ASSERT(iCompSpace < OTTER_NUM_SPACES);
	if (gStaticOtterDb.bDBType & OTTER_SPLIT)
	{
		return TRUE;
	}

	iSpace = CompIndex2Index(iCompSpace);
	
	return (iSpace >= INVALID_1) || (iSpace/10 <= iSpace%10);
#endif
}



/************* Fixes to make new version work on the old data ************/

/***************************************************************************\
*																			*
*	Functions for changing otter index to Fibonacci or compact Fibonacci	*
*	indices. Both functions allow index to be 0. This is useful for the		*
*	makedat tool.															*
*																			*
*	These functions are here only to make the new Otter work with old data	*
*	(in which case OTTER_FIB must be defined), or create old data (in which *
*	case OTTER_FIB must be undefined and -f must be specified in makedat).	*
*																			*
****************************************************************************/

// Offsets into arrays aiFib[] and aiCompFib

static const int gaiFibOffset[] = { 0, 7, 13, 18, 22, 25 };

//
// Change Otter index to Fibonacci index

int
Index2Fib(int index)		// I: Otter index
{
	static const int aiFib[] =
	{
		0,  1,  2,  3,  5,  8, 13, 21,	// 0, 01-07
			4,  6,  9, 14, 22, 35, 56,	// 11-17
			   10, 15, 23, 36, 57, 91,	// 22-27
				   24, 37, 58, 92,147,	// 33-37
					   60, 94,149,238,	// 44-47
						  152,241		// 55-56
	};
	
	if (index >= INVALID_1)
		return 0;

	ASSERT( 0 <= index && index <= 56);
	ASSERT( index/10 <= index%10 );
	
	return aiFib[ gaiFibOffset[index/10] + index%10 ];
}

//
// Change Otter index to compact Fibonacci index

int
Index2CompFib(int index)	// I: Otter index
{
	static const int aiCompFib[] =
	{
		 0,	 1,  2,  3,  5,  7, 10, 13,		// 0, 01-07
			 4,  6,  8, 11, 14, 17, 20,		// 11-17
				 9, 12, 15, 18, 21, 24,		// 22-27
					16, 19, 22, 25, 27,		// 33-37
						23, 26, 28, 30,		// 44-47
							29, 31			// 55-56
	};
	
	if (index >= INVALID_1)
		return 0;

	ASSERT( 0 <= index && index <= 56);
	ASSERT( index/10 <= index%10 );
	
	return aiCompFib[ gaiFibOffset[index/10] + index%10 ];
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\win2kunicode\makefile.inc ===
# Rules for compiling .cfgs from .xmls
.SUFFIXES: .cfg .h .xml

{..\}.xml{$(O)}.cfg:
    copy $** $(O)
	$(_TPG_ROOT)\Tools\gc.exe -h $*.h $*.xml

# Automatic Registration
!if defined(MAKEDLL) && defined(AUTOREG)
$(TARGETNAME).cpy: $(O)\$(TARGETNAME).dll
    regsvr32 /s $** > $@
!else
$(TARGETNAME).cpy:
    echo File not registered: $** > $@
!endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\omatch2.c ===
// Code for Otter shape match function, alternate copy to return space number.

#include "common.h"
#include "otterp.h"

// Two sets of conditional defines are included in this file:
// KEEP_NEIGHBOR_LIST: Keeps track of several top-N lists for the research on converting
// kNN results to probabilities.  Keeps track of alt lists of prototype IDs, dense codes,
// and dense codes in which a code is allowed to appear only once.  At the end, unicode
// versions of the dense code lists are produced by unfolding and translating the dense
// code alt lists.
// KEEP_TOP_NEIGHBOR: Keeps track of a "verification distance" for the closest prototype.

int OtterMatch2(
	ALT_LIST	*pAlt,
	int			cAlt,
	GLYPH		*pGlyph,
	CHARSET		*pCS,
	LOCRUN_INFO	*pLocRunInfo,
	int			*pSpaceNum
) {
	OTTER_PROTO	   *pproto;
	int             index, count;
	int				cFeat;
	int				iFeat;
	int				cMatch;
	BYTE			ajProto[OTTER_CMEASMAX];
	FLOAT			aeProb[MAX_ALT_LIST];
	WORD			awSym[MAX_ALT_LIST];
	const WORD	   *pwList;
	int				iFirstPrototypeID = 0;

	// Create a prototype, featurization.                                      
                                                                               
    if ((pproto = OtterFeaturize(pGlyph)) == (OTTER_PROTO *) NULL)
		return 0;

	cFeat = CountMeasures(pproto->index);

#ifdef OTTER_FIB		// If we are in old Otter, have to change to compact Fibonacci index
	index = Index2CompFib(pproto->index);
#else
	index = Index2CompIndex(pproto->index);	
#endif

	*pSpaceNum = index;

	// Initialize the token array

	memset(awSym, '\0', sizeof(awSym));

	// Copy the featurization to a working array

    for (iFeat = 0; iFeat < cFeat; iFeat++)
    {
        ajProto[iFeat] = (BYTE) ((unsigned int) pproto->rgmeas[iFeat]);
    }

#if defined (KEEP_NEIGHBOR_LISTS) || defined(KEEP_TOP_NEIGHBOR) || defined(MSRHOOK)
	// Compute the ID of the first prototype in the space
	iFirstPrototypeID = 0;
	for (int jndex = 0; jndex < index; jndex ++) {
		iFirstPrototypeID += gStaticOtterDb.acProtoInSpace[jndex];
	}
#endif

	// Check for the best match.

	cMatch = OtterMatchInternal(gStaticOtterDb.apjDataInSpace[index],
								gStaticOtterDb.apwTokensInSpace[index],
								gStaticOtterDb.apwDensityInSpace[index],
								gStaticOtterDb.acProtoInSpace[index],
								cFeat,
								ajProto,
								awSym,
								aeProb,
								MAX_ALT_LIST,
								pCS,
								pLocRunInfo,
								iFirstPrototypeID,
								index);

	// Now, copy the results to the passed in alt-list, unfold tokens as we go.

    count = 0;

    for (count = 0; (count < cMatch) && (count < cAlt); count++)
	{
		pwList = NULL;
		pAlt->aeScore[count] = aeProb[count];
        pAlt->awchList[count] = awSym[count];
	}

	pAlt->cAlt = count;

	// Finally, clean up the temporary stuff

	ExternFree(pproto);
	return count;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\proto.h ===
// xproto.h

#ifndef __INCLUDE_XPROTO
#define __INCLUDE_XPROTO

#define	CLUSTER_CMEASMAX	50

typedef struct tagXPROTO
{
	UINT	index;                     // fibonacci space index
	XY		size;                      // unscaled size in xy
	FLOAT	rgmeas[CLUSTER_CMEASMAX];  // measurements
} XPROTO;

#define XPROTO_SMALLX 30
#define XPROTO_SMALLY 30

XPROTO *NewXPROTO();
void	DestroyXPROTO(XPROTO *self);

UINT	CmeasFromXPROTO(XPROTO *self);
void	ReverseMeasXPROTO(XPROTO *self, int iStart, int iEnd);
void	ScaleXPROTO(XPROTO *self, int cmeas);

XPROTO *OtterXPROTOFromGLYPH(GLYPH *glyph);

#define IndexXPROTO(self)		(self)->index
#define IsSmallXPROTO(self)		((self)->size.x < XPROTO_SMALLX && (self)->size.y < XPROTO_SMALLY)
#define CleanUpXPROTO()			CollapseCLASS(Class(XPROTO))

#endif // XPROTO_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\otterfl.c ===
#include "common.h"
#include "otterp.h"
#include <stdio.h>

BOOL OtterLoadFile(
	LOCRUN_INFO		* pLocRunInfo,
	OTTER_LOAD_INFO	* pLoadInfo,
	wchar_t			* pathName
) {
	HANDLE			hFile, hMap;
	BYTE			*pByte;
	wchar_t			aPath[128];

	// Generate path to file.

#ifdef OTTER_FIB
	FormatPath(aPath, pathName, (wchar_t *)0, (wchar_t *)0, (wchar_t *)0, L"fib.dat");
//	printf("Loading fib.dat ...\n");
#else
	FormatPath(aPath, pathName, (wchar_t *)0, (wchar_t *)0, (wchar_t *)0, L"otter.dat");
//	printf("Loading otter.dat ...\n");
#endif

	// Try to open the file.
	hFile = CreateMappingCall(
		aPath, 
		GENERIC_READ, 
		FILE_SHARE_READ,
		NULL, 
		OPEN_EXISTING, 
		FILE_ATTRIBUTE_NORMAL, 
		NULL
	);

	if (hFile == INVALID_HANDLE_VALUE) 
	{
		goto error1;
	}

	// Create a mapping handle
	hMap = CreateFileMapping(hFile, NULL, PAGE_READONLY, 0, 0, NULL);
	if (hMap == NULL) 
	{
		goto error2;
	}

	// Map the entire file starting at the first byte
	pByte = (LPBYTE) MapViewOfFile(hMap, FILE_MAP_READ, 0, 0, 0);
	if (pByte == NULL) {
		goto error3;
	}

	// Extract info from mapped data.
	if (!OtterLoadPointer((void *)pByte, pLocRunInfo))
	{
		goto error4;
	}

	// Save away the pointers so we can close up cleanly latter
	pLoadInfo->pLoadInfo1 = hFile;
	pLoadInfo->pLoadInfo2 = hMap;
	pLoadInfo->pLoadInfo3 = pByte;

	return TRUE;

	// Error handling
error4:
	UnmapViewOfFile(pByte);
	pByte = NULL;

error3:
	CloseHandle(hMap);
	hMap	= INVALID_HANDLE_VALUE;

error2:
	CloseHandle(hFile);
	hFile	= INVALID_HANDLE_VALUE;

error1:
	memset(&gStaticOtterDb, 0, sizeof(gStaticOtterDb));
	pLoadInfo->pLoadInfo1	= INVALID_HANDLE_VALUE;
	pLoadInfo->pLoadInfo2	= INVALID_HANDLE_VALUE;
	pLoadInfo->pLoadInfo3	= INVALID_HANDLE_VALUE;

	return FALSE;
}

BOOL OtterUnLoadFile(OTTER_LOAD_INFO * pLoadInfo)
{
	if ( (pLoadInfo->pLoadInfo1 == INVALID_HANDLE_VALUE) ||
		 (pLoadInfo->pLoadInfo2 == INVALID_HANDLE_VALUE) ||
		 (pLoadInfo->pLoadInfo3 == INVALID_HANDLE_VALUE) ) 
	{
		return FALSE;
	}

	UnmapViewOfFile((BYTE *)pLoadInfo->pLoadInfo3);
	CloseHandle((HANDLE)pLoadInfo->pLoadInfo2);
	CloseHandle((HANDLE)pLoadInfo->pLoadInfo1);

	pLoadInfo->pLoadInfo1	= INVALID_HANDLE_VALUE;
	pLoadInfo->pLoadInfo2	= INVALID_HANDLE_VALUE;
	pLoadInfo->pLoadInfo3	= INVALID_HANDLE_VALUE;

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\otterp.h ===
// Private includes for Otter components

#ifndef	__INCLUDE_OTTERP
#define	__INCLUDE_OTTERP

#include "otter.h"
#include "arcs.h"

#define SIGMA		8.294155
#define KFACTOR		(-1.0 / (SIGMA * SIGMA * 2))
#define SQRT_2_PI	(2.506628274631)	// Square root of 2pi
#define LFACTOR		( 1.0 / (SQRT_2_PI * SIGMA))

#define GLYPH_CFRAMEMAX	2

extern	float		geKfactor;
#define giKfactor	-3					// (int) ((KFACTOR) * INTEGER_LOG_SCALE / ln(2));

int OtterMatchInternal
(
	BYTE	   *pjTrainProto,	// Pointer to the train clusters packed together.
	WORD	   *awTrainTokens,	// Pointer to the token labels for the train clusters.
	WORD	   *awDensity,		// Pointer to the density labels for the train clusters.
	int			cTrainProto,	// Count of train prototypes to look through.
	int			cFeat,			// Count of features per prototype.
	BYTE	   *pjTestProto,	// Pointer to the prototype we are trying to classify.
	WORD	   *awToken,		// Array of WORD's we return our best matches into.
	FLOAT	   *aeProbMatch,	// Array of Error associated with each guess.
	int			cMaxReturn,		// Count of maximum number of guesses we should return.
	CHARSET	   *cs,				// Charset specifying what chars we can match to.
	LOCRUN_INFO * pLocRunInfo,	// Specifies the dense table and folding table for UNICODE support
	int			iFirstPrototypeID, // Number of the first prototype in this space
	int			iSpace			// Space number
);

typedef struct _OTTER_DATS
{
    WORD iSpaceID;     // Space Index.
    WORD cFeats;       // Count of features.
    DWORD cPrototypes; // Count of prototypes.
} OTTER_DATS;


#define INVALID_1		91		// ID of 1-stroke invalid space
#define INVALID_2		92		// ID of 2-stroke invalid space


// For backwards compatibility

int Index2Fib(int index);		// I: Otter index (non-compact)
int Index2CompFib(int index);	// I: Otter index (non-compact)

// Otter caches some private data off the frame

typedef	struct tagOTTER_FRAME
{
	UINT	index;
	UINT	cmeas;
	FLOAT	ePeriod;
	FLOAT	rgmeas[OTTER_CMEASMAX];
} OTTER_FRAME;


// Magic keys the identifies the costcalc and geostat files
#define	OTTERDB_FILE_TYPE	0xAAAABBBB

#ifdef OTTER_FIB
#define OTTERDB_CUR_FILE_VERSION	0		// Old version of code.
#define	OTTERDB_OLD_FILE_VERSION	0		// Oldest file version this code can read.
#define	OTTERDB_MIN_FILE_VERSION	0		// Oldest version of the code that can read this file
#else
#define OTTERDB_CUR_FILE_VERSION	1		// New version of code.
#define	OTTERDB_OLD_FILE_VERSION	1		// Oldest file version this code can read.
#define	OTTERDB_MIN_FILE_VERSION	1		// Oldest version of the code that can read this file
#endif


// The header of the fib.dat/otter.dat file
// The field bDBType is used only in otter.dat files
// Its values are created by bitwise OR and extracted by bitwise AND
// The following values are used so far:
//		OTTER_SPLIT = 1
//		OTTER_FLIP  = 2
// If the value of bDBType were used in fib.dat, it would be 2 (i.e. don't split but flip)
typedef struct tagOTTERDB_HEADER {
	DWORD		fileType;		// This should always be set to LOCRUN_FILE_TYPE.
	DWORD		headerSize;		// Size of the header.
	BYTE		minFileVer;		// Earliest version of code that can read this file
	BYTE		curFileVer;		// Current version of code that wrote the file.
	wchar_t		locale[4];		// Locale ID string.
	DWORD		adwSignature[3];	// Locale signature
	BYTE		bDBType;		// Type of the database
	BYTE		reserved1;
	DWORD		reserved2[3];
} OTTERDB_HEADER;

#define	OTTER_MEASURES(x)	(((OTTER_FRAME *) (x)->pvData)->cmeas)

#define IsTapRECT(rc)		((rc).right - (rc).left < 25 && (rc).bottom - (rc).top < 25)
#define IsPeriodRECT(rc)	((rc).right - (rc).left < 70 && (rc).bottom - (rc).top < 70)


BOOL OtterIndex(FRAME *, UINT *);
BOOL OtterExtract(FRAME *);
ARCS *OtterGetFeatures(FRAME *);
ARCS *OtterGetTapFeatures(FRAME *);
BOOL OtterLoadPointer(void * pData, LOCRUN_INFO * pLocRunInfo);
#endif	//__INCLUDE_OTTERP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\sole\inc\sole.h ===
#ifndef __INCLUDE_SOLE_H__
#define __INCLUDE_SOLE_H__

#ifdef __cplusplus
extern "C" {
#endif

BOOL SoleRecog(GLYPH *pGlyph, GUIDE *pGuide, ALTERNATES *pAlt,BOOL bGuide);

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\otter\src\sources.inc ===
TARGETNAME=otter
TARGETTYPE=LIBRARY

USE_MSVCRT=1

INCLUDES= $(INCLUDES) \
          $(_TPG_ROOT)\hwx\commonu\inc; \
          $(_TPG_ROOT)\hwx\otter\inc; \

TARGETLIBS= $(TARGETLIBS) \

SOURCES= \
         ..\arcs.c \
         ..\database.c \
         ..\io.c \
         ..\ofeature.c \
         ..\omatch.c \
         ..\omatch2.c \
         ..\otrain.c \
         ..\otter.c \
         ..\otterfl.c \
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\sole\inc\solefeat.h ===
#ifndef _OUTPUT_H
#define _OUTPUT_H

#ifdef __cplusplus
extern "C" {
#endif

int SoleFeaturize(GLYPH *pGlyph, GUIDE *pGuide, int *aFeat,BOOL bGuide);

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\sole\inc\solep.h ===
// private includes for sole

#ifndef __INCLUDE_SOLEP
#define __INCLUDE_SOLEP

#ifdef __cplusplus
extern "C" {
#endif
#define SOLE_CNEURALINPUTGUIDE  64
#define SOLE_CNEURALINPUTNOGUIDE 60
#define SOLE_CNEURALHIDDEN 150
#define SOLE_CNEURALOUTPUT 94

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\sole\src\charaltlist.c ===
#include <common.h>
#include "math16.h"
#include "runnet.h"

//This is the lookup table for the neural net outputs

extern const unsigned char g_supportChar [] ;

//This variable stores the number of supported characters

extern const int g_cSupportChar ;


/***************************************************************************************
//This function is used to return the final alt list given the sole outputs
//Comments written by Manish Goyal--mango--09/15/2001
*Explanation of parameters
cAlt--Total number of output candidates
aProb--The output of scores from the Sole Net
pAlt--The list of alternates

************************************************************************************/
BOOL GetSoleAltList(int *aProb, ALTERNATES *pAlt)
{
	int i;
	unsigned char szAns[2];


	for (i = 0; i < g_cSupportChar; i++)
	{

		szAns[0]= g_supportChar[i];
		szAns[1]=0;

		InsertALTERNATES(pAlt, SOFT_MAX_UNITY-aProb[i],szAns,NULL);
		
	}

	return TRUE;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\height.h ===
#ifndef	__INCLUDE_HEIGHT
#define	__INCLUDE_HEIGHT

#ifdef __cplusplus
extern "C" 
{
#endif

typedef struct tagBOXINFO
{
    int   size;     // Absolute size.
    int   xheight;  // Absolute height to midline.
    int   baseline; // Baseline in tablet coordinates.
    int   midline;  // Midline in tablet coordinates.
} BOXINFO;

void GetBoxinfo(BOXINFO * boxinfo, int iBox, LPGUIDE lpguide, HRC HRC);

#ifdef __cplusplus
};
#endif

#endif	//__INCLUDE_HEIGHT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\global.h ===
// global.h

#ifndef GLOBAL_H
#define GLOBAL_H

// all static and dynamic objects must go here so we can avoid all that nasty
// forward referencing currently going on in the .h files

typedef void *GHANDLE;

typedef struct tagGLOBAL
{
#ifndef	WINCE
	CRITICAL_SECTION	cs;
#endif
	GHANDLE			   *rgHandle;
	int					cHandle;
	int					cHandleMax;
	ABSTIME				atTickRef;
	int					nSamplingRate;			// samples / second
} GLOBAL;

#define CLUSTER_DELTAMEAS 2
#define CLUSTER_CMEASMAX 50

extern GLOBAL global;

#ifdef	WINCE
#define	ENTER_HANDLE_MANAGER
#define	LEAVE_HANDLE_MANAGER
#else
#define	ENTER_HANDLE_MANAGER	EnterCriticalSection(&global.cs);
#define	LEAVE_HANDLE_MANAGER	LeaveCriticalSection(&global.cs);
#endif

#define RgHandleValidGlobal()    global.rgHandleValid
#define CHandleValidGlobal()     global.cHandleValid
#define CHandleValidMaxGlobal()  global.cHandleValidMax
#define AtTickRefGlobal()        global.atTickRef
#define NSamplingRateGlobal()    global.nSamplingRate

#ifdef DBG
#	define  CB_DEBUGSTRING 256
	extern wchar_t szDebugString[];
#endif //DBG

#define CHANDLE_ALLOC      8

#define AddValidHRC(hrc)      AddValidHANDLE((GHANDLE) hrc)
#define RemoveValidHRC(hrc)   RemoveValidHANDLE((GHANDLE) hrc)
#define VerifyHRC(hrc)        VerifyHANDLE((GHANDLE) hrc)

BOOL InitGLOBAL(VOID);
void DestroyGLOBAL(VOID);

BOOL PUBLIC AddValidHANDLE(GHANDLE handle);
VOID PUBLIC RemoveValidHANDLE(GHANDLE handle);
BOOL PUBLIC VerifyHANDLE(GHANDLE handle);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\recognizer.h ===
#ifndef __RECOGNIZER__

#define __RECOGNIZER__

#ifndef _WIN64

typedef	int HWX_FUNC_1(DWORD);
typedef	int HWX_FUNC_2(DWORD, DWORD);
typedef	int HWX_FUNC_3(DWORD, DWORD, DWORD);
typedef	int HWX_FUNC_4(DWORD, DWORD, DWORD, DWORD);
typedef	int HWX_FUNC_5(DWORD, DWORD, DWORD, DWORD, DWORD);
// JRB: Added to support hacked call to HwxGetResults!
typedef	int HWX_FUNC_6(DWORD, DWORD, DWORD, DWORD, DWORD, DWORD);

#define	CALL_FUNC_1(id, a)				((HWX_FUNC_1 *) g_apfn[(id)])((DWORD) (a))
#define	CALL_FUNC_2(id, a, b)			((HWX_FUNC_2 *) g_apfn[(id)])((DWORD) (a), (DWORD) (b))
#define	CALL_FUNC_3(id, a, b, c)		((HWX_FUNC_3 *) g_apfn[(id)])((DWORD) (a), (DWORD) (b), (DWORD) (c))
#define	CALL_FUNC_4(id, a, b, c, d)		((HWX_FUNC_4 *) g_apfn[(id)])((DWORD) (a), (DWORD) (b), (DWORD) (c), (DWORD) (d))
#define	CALL_FUNC_5(id, a, b, c, d, e)	((HWX_FUNC_5 *) g_apfn[(id)])((DWORD) (a), (DWORD) (b), (DWORD) (c), (DWORD) (d), (DWORD) (e))
// JRB: Added to support hacked call to HwxGetResults!
#define	CALL_FUNC_6(id, a, b, c, d, e, f)	((HWX_FUNC_6 *) g_apfn[(id)])((DWORD) (a), (DWORD) (b), (DWORD) (c), (DWORD) (d), (DWORD) (e), (DWORD) (f))

#endif

// common to both platforms 

typedef	int HWX_FUNC(void);
typedef	int HWX_FUNC_0(void);

#define	CALL_FUNC_0(id)					((HWX_FUNC_0 *) g_apfn[(id)])()

/************************************************************************
*
* These are the additional functions necessary to make porting of HWXTest 
* to 64 bit platform successful.  Many of the DWORD arguments passed to 
* functions above were modified to types such as HANDLE and PVOID because 
* 8 byte pointers passed as DWORDs will cause a loss of data.
* August 1, 2000
* modified by Radmila Sarac (rsarac)
*
* each of the functions below has the following naming convention:
* the number in the function name is followed by the first letter
* of return type and first letters of paramteres passed to functions 
* which are not DWORDs, where
* I stands for int  
* H stands for HANDLE
* P stands for PVOID
*************************************************************************/

typedef HANDLE HWX_FUNC_1H(DWORD); 
typedef int HWX_FUNC_1IH(HANDLE);	
typedef	int HWX_FUNC_2IH(HANDLE, DWORD);	
typedef	int HWX_FUNC_2IHP(HANDLE, PVOID);	
typedef	int HWX_FUNC_3IHPP(HANDLE, PVOID, PVOID);	
typedef	int HWX_FUNC_4IHP(HANDLE, PVOID, DWORD, DWORD);	
typedef	int HWX_FUNC_5IHP(HANDLE, DWORD, DWORD, DWORD, PVOID);	
typedef	int HWX_FUNC_6IHPPP(HANDLE, DWORD, DWORD, PVOID, PVOID, PVOID);	

#define	CALL_FUNC_1H(id, a)						((HWX_FUNC_1H *) g_apfn[(id)])((DWORD) (a))
#define	CALL_FUNC_1IH(id, a)					((HWX_FUNC_1IH *) g_apfn[(id)])((HANDLE) (a))
#define	CALL_FUNC_2IH(id, a, b)					((HWX_FUNC_2IH *) g_apfn[(id)])((HANDLE) (a), (DWORD) (b))
#define	CALL_FUNC_2IHP(id, a, b)				((HWX_FUNC_2IHP *) g_apfn[(id)])((HANDLE) (a), (PVOID) (b))
#define	CALL_FUNC_3IHPP(id, a, b, c)			((HWX_FUNC_3IHPP *) g_apfn[(id)])((HANDLE) (a), (PVOID) (b), (PVOID) (c))
#define CALL_FUNC_4IHP(id, a, b, c, d)			((HWX_FUNC_4IHP *) g_apfn[(id)])((HANDLE) (a), (PVOID) (b), (DWORD) (c), (DWORD) (d))
#define CALL_FUNC_5IHP(id, a, b, c, d, e)		((HWX_FUNC_5IHP *) g_apfn[(id)])((HANDLE) (a), (DWORD) (b), (DWORD) (c), (DWORD) (d), (PVOID) (e))
#define	CALL_FUNC_6IHPPP(id, a, b, c, d, e, f)	((HWX_FUNC_6IHPPP *) g_apfn[(id)])((HANDLE) (a), (DWORD) (b), (DWORD) (c), (PVOID) (d), (PVOID) (e), (PVOID) (f))

#define	HWXCONFIG				0
#define	HWXCREATE				1
#define	HWXDESTROY				2
#define	HWXINPUT				3
#define	HWXENDINPUT				4
#define	HWXSETGUIDE				5
#define	HWXPROCESS				6
#define	HWXGETRESULTS			7
#define	HWXSETMAX				8
#define	HWXSETALPHABET			9
#define	HWXSETPARTIAL			10
#define	HWXSETCONTEXT			11
#define	HWXAVAILABLE			12
#define GETPRIVATERECINFOHRC	13
#define SETPRIVATERECINFOHRC	14
#define HWXALCVALID				15
#define	HWXFUNCS				16				// Total number of functions in table


extern BOOL		g_bOldAPI;				// True is the recog supports the Old API
extern BOOL		g_bMultiLing;			// True if the recognizer is multilingual

extern HWX_FUNC	*g_apfn[HWXFUNCS];

BOOL LoadRecognizer	(	wchar_t *pwRecogDLL, 
						wchar_t *pwLocale, 
						wchar_t *pwConfigDir
					);

BOOL HasPrivateAPI	();

void CloseRecognizer ();

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\prob.h ===
// FILE: Prob.h

#define	MAX_PROB	((WORD)0xFFFF)
#define	ZERO_PROB	((WORD)0x0000)

#define		MAX_PROB_ENTRY	(128 * 1024)
#define		MAX_PROB_ALT	(1024 * 1024)

typedef struct tagPROB_ALT {
	wchar_t		wchAlt;
	WORD		prob;
} PROB_ALT;

typedef struct tagPROB_ENTRY {
	wchar_t		wch;
	WORD		cAlts;
} PROB_ENTRY;

typedef struct tagPROB_HEADER {
	DWORD	aEntryOffset[30];
	DWORD	aAltOffset[30];
} PROB_HEADER;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\sole\src\solefeat.c ===
#include "common.h"
#include "solefeat.h"
#include "cheby.h"
#include "cowmath.h"
#include "nfeature.h" //This is included for the call to yDeviation
#include "math16.h"


#define ABS(x) (((x) > 0) ? (x) : -(x))
#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))
#define SIGN(x) ((x) > 0 ? 1 : ((x) < 0 ? -1 : 0))
#define PEN_UP_VALUE  LSHFT(-1)
#define PEN_DOWN_VALUE LSHFT(1)

#define XCHB 10
#define YCHB 10
#define ZCHB 10

#define MAXTMP 3

// assumption: GRIDSIZE <= 256 //This is beacuse the pointers to the mapped values are defined as Byte pointers
#define GRIDSIZE 32


//The structure DRECTS is used to store the beginning x coordinate and y coor of the current guide box that we are in
//the fields w and h store the width and height of the current guide box
typedef struct tagDRECTS
{
    long   x;
    long   y;
    long   w;
    long   h;
} DRECTS;

typedef struct
{
	int *xy; //Stores the sampled XY points
	int *z;  //Stores the z points--values are either PEN_UP or PEN_DOWN
	int cPoint;//Stores the number of points that are there 
	int cPointMax; //Stores the max number of points that can be allocated
	int iStepSize; //Stores the length of the step size--at present this is taken to be 1.5 % of the guide size
	int iStepSizeSqr; //Stroes the square of the step size
} POINTINFO;
//This macro is used for seeing if two points are neighbours to one another--ie the distance between them <=1
#define Neighbor(a, b) ((a)-(b) < 2 && (b)-(a) < 2)

/******************************Private*Routine******************************\
* AddPointSole
*
* Given a new point and a sequence of points so far, zero or more points
* are added at the end of the sequence.  The points are effectively resampled
* at a pre-computed interval (a distance of pPointinfo->iStepSize between
* successive points).  This function also effectively does a linear interpolation
* of a pen-upstroke between the last point of a pen-down stroke and the first
* point of the next pen-down stroke.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha


  Explanation of parameters
pPointInfo--The pointer to the Point Info structure--The points are added to the xy array of this structure
x--The x coordinate of the point to be added
y--The y coordinate of the point to be added
bFirstPointOfStroke--If true indicates that this is the first point of the stroke
                     Else it it not the first point
* Wrote this comment.Addtional comments added by Mango
\**************************************************************************/
BOOL AddPointSole(POINTINFO *pPointinfo, int x, int y, int bFirstPointOfStroke)
{
	int dx, dy, dist2, dist;
	int bChangeLastPoint, x0, y0, zval;
	int *pTemp;

	if (!pPointinfo->cPoint)
	{
		pPointinfo->xy[0] = x;
		pPointinfo->xy[1] = y;
		pPointinfo->z[0] = PEN_DOWN_VALUE;
		pPointinfo->cPoint = 1;
		
		return TRUE;
	}

	bChangeLastPoint = 0;
	x0 = pPointinfo->xy[2*pPointinfo->cPoint-2];
	y0 = pPointinfo->xy[2*pPointinfo->cPoint-1];
	zval = bFirstPointOfStroke ? PEN_UP_VALUE : PEN_DOWN_VALUE;
	for (;;)
	{
		dx = x - x0;
		dy = y - y0;
		dist2 = dx*dx + dy*dy;
		if (dist2 < pPointinfo->iStepSizeSqr)
			break;

		// add a point at given step size
		dist = ISqrt(dist2);
		x0 += pPointinfo->iStepSize*dx/dist;
		y0 += pPointinfo->iStepSize*dy/dist;
		// a minimum iStepSize of 2 and the fact that ((float)dx/dist)^2 + ((float)dy/dist)^2 = 1 guarantees that
		// the previous two assignments change atleast one of x0 and y0 i.e. its not an infinite loop
		if (pPointinfo->cPoint == pPointinfo->cPointMax)
		{
			// need more space
			// hopefully we don't come here too often
			pPointinfo->cPointMax *= 2;
			pTemp = (int *) ExternRealloc(pPointinfo->xy, 2*pPointinfo->cPointMax*sizeof(int));
			if (!pTemp)
			{
				return FALSE;
			}
			pPointinfo->xy = pTemp;
			pTemp = (int *) ExternRealloc(pPointinfo->z, 2*pPointinfo->cPointMax*sizeof(int));
			if (!pTemp)
			{
				return FALSE;
			}
			pPointinfo->z = pTemp;
		}
		pPointinfo->xy[2*pPointinfo->cPoint] = x0;
		pPointinfo->xy[2*pPointinfo->cPoint+1] = y0;
		pPointinfo->z[2*pPointinfo->cPoint] = zval;
		pPointinfo->cPoint++;
		bChangeLastPoint = bFirstPointOfStroke;
	}

	// if we have interpolated from the last point of a stroke to the first point of another
	if (bChangeLastPoint)
	{
		ASSERT(pPointinfo->z[2*pPointinfo->cPoint - 2] == PEN_UP_VALUE);
		pPointinfo->z[2*pPointinfo->cPoint - 2] = PEN_DOWN_VALUE;
	}
	// this last "if" could be changed to a test on bFirstPointOfStroke and the ASSERT can be removed
	return TRUE;
}

/******************************Private*Routine******************************\
* AddGuideFeatures
*
* Given a piece of ink in a box, compute five features related to the size 
* and position of ink in the box.
* The four features are:-
*	//1 feature--Top of the ink relative to the guide box height
*	//2 feature--Bottom of the ink relative to the guide box height
*	//3 feature--The width of the ink relative to the sum of its width and height
*	//4 feature--the iYMean value relative to the guide box height
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote this comment.
\**************************************************************************/
int AddGuideFeatures(GUIDE *pGuide, RECT *pRect, int iYMean, int *rgFeat)
{
	// get normalized ink size/position (box is 1000x1000 with top-left at 0,0)
	DRECTS drcs;
	RECT inkRect = *pRect;
	int x, chorz, iBox;
	int *rgFeatBase=rgFeat;

	//Count of the number of horizontal boxes--is set to 1 if the pGuide->cHorzBox parameter is not set originally.
	chorz  = pGuide->cHorzBox ? pGuide->cHorzBox : 1;

	// which box (in x direction)
	iBox = ((pRect->left + pRect->right)/2 - pGuide->xOrigin) / pGuide->cxBox;

	//The x coordinate of the top left corner of the current box(note--you are adding the cxBase Value) 
	drcs.x = pGuide->xOrigin + iBox * pGuide->cxBox + pGuide->cxBase;

	// which box (in y direction)
	iBox = ((pRect->top + pRect->bottom)/2 - pGuide->yOrigin) / pGuide->cyBox;
	
	//The y coordinate of the top left corner of the current box
	drcs.y = pGuide->yOrigin + iBox * pGuide->cyBox;

	//This gives us the width of the current guide box
	drcs.w = pGuide->cxBox - 2 * pGuide->cxBase;

	//This gives us the height of the current guide box
	drcs.h = pGuide->cyBox;

	// Translate, convert to delta form
	//Stores the relative position w.rt. the top left of the guide box
	inkRect.left   -= drcs.x;
	inkRect.top    -= drcs.y;
	//Stores the width of the ink
	inkRect.right  -= (drcs.x + inkRect.left);
	//Stores the height of the ink
	inkRect.bottom -= (drcs.y + inkRect.top);
	//Converts the yMean wrt a form relative to the top of the guide box
	iYMean         -= drcs.y;

	// Scale.  We do isotropic scaling and center the shorter dimension.
	//Y Mean as a fraction of the guide box size
	iYMean = ((1000 * iYMean) / drcs.h);
	//Sees where the top of the ink is relative to the guide box height
	drcs.y = ((1000 * inkRect.top) / drcs.h);
	//The width of the ink relative to the guide box width
	drcs.w = ((1000 * inkRect.right) / drcs.h);
	//The height of the ink relative to the guide box height
	drcs.h = ((1000 * inkRect.bottom) / drcs.h);
	
	//Why would any of these conditions happen 
	if (drcs.y < 0) 
		drcs.y = 0;
	else if (drcs.y > 1000) 
		drcs.y = 1000;
	if (drcs.w < 0) 
		drcs.w = 0;
	else if (drcs.w > 1000) 
		drcs.w = 1000;
	if (drcs.h < 0) 
		drcs.h = 0;
	else if (drcs.h > 1000) 
		drcs.h = 1000;

	// 4 guide features

	//First feature--Top of the ink relative to the guide box height
	x = drcs.y;
	x = LSHFT(x)/1000;
	if (x >= 0x10000)
		x = 0xFFFF;
	*rgFeat++ = x;

	//Second feature--Bottom of the ink relative to the guide box height
	x = drcs.h;
	x = LSHFT(x)/1000;
	if (x >= 0x10000)
		x = 0xFFFF;
	*rgFeat++ = x;

	//Third feature--The width of the ink relative to the sum of its width and height
	if (drcs.w <= 0)
		x = 0;
	else
	{
		x = drcs.w;
		x = LSHFT(x)/(drcs.w+drcs.h);
		if (x >= 0x10000)
			x = 0xFFFF;
	}
	*rgFeat++ = x;

	//Fourth feature--the iYMean value relative to the guide box height

	// one more guide feature: y-CG
	if (iYMean < 0)
		iYMean = 0;
	else if (iYMean > 1000)
		iYMean = 1000;
	x = iYMean;
	x = LSHFT(x)/1000;
	if (x >= 0x10000)
		x = 0xFFFF;
	*rgFeat++ = x;
	
	return rgFeat-rgFeatBase;
}

/******************************Private*Routine******************************\
* SmoothPoints
*
* Given an array of points and a destination array, this function fills the
* destination array a smoothed version of the raw points.  Smoothing is
* done by local averaging ona window of 5 points with weights 1/8 1/4 1/4 1/4 1/8.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote this comment.
\**************************************************************************/
void SmoothPoints(XY *rgSrc, XY *rgDst, int cXY)
{
   int i,j;

   for (i=0; i<cXY; i++)
   {
      j = cXY - i - 1;
      if (i < j) 
         j = i;

      switch (j) 
      {
      case 0: 
	  case 1: 
         *rgDst = *rgSrc;
         break;
	//+4 is added here so that rounding off takes place rather than truncation
      default:
            rgDst->x = (int)((
							   (rgSrc-2)->x              + 
							  ((rgSrc-1)->x         <<1) + 
							   (rgSrc->x            <<1) + 
							  ((rgSrc+1)->x         <<1) + 
							   (rgSrc+2)->x              +
							  4
                            ) >> 3);
            rgDst->y = (int)((
							   (rgSrc-2)->y              + 
							  ((rgSrc-1)->y         <<1) + 
							   (rgSrc->y            <<1) + 
							  ((rgSrc+1)->y         <<1) + 
							   (rgSrc+2)->y              +
							  4
                            ) >> 3);
         break;
      }
	  rgSrc++;
	  rgDst++;
   }

}

/******************************Private*Routine******************************\
* ComputeCurvedness
*
* Given a stroke, computes three curvature features--namely
*--The sum of the modular change in angle with respect to + and - for the angles
*--The total curviness of the stoke--just directly measure the change in angles.
*--The maximum change in angle that occurs in that stroke in one sampling distance
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote this comment.
\**************************************************************************/
void ComputeCurvedness(XY *rgXY, int cXY, int iStepSizeSqr, int *pSum1, int *pSum2, int *pMaxAngle)
{
	int sum1, sum2;
	int x, y;
	XY *rgxy, *rgxySave;
	int ang, lastAng, diff, dx, dy;

	if (cXY <= 2)
	{
		*pSum1 = *pSum2 = 0;
		return;
	}
	
	// smooth points
	rgxySave = rgxy = (XY *) ExternAlloc(cXY*sizeof(XY));
	if (!rgxy)
	{
		*pSum1 = *pSum2 = 0;
		return;
	}
	SmoothPoints(rgXY, rgxy, cXY);

	sum1 = sum2 = 0;
	x = rgxy->x;
	y = rgxy->y;
	rgxy++;
	cXY--;
	// find first angle
	while (cXY)
	{
		dy = rgxy->y - y;
		dx = rgxy->x - x;
		if (dx*dx+dy*dy >= iStepSizeSqr)
		{ 
			//Function from common/mathx--returns the integer approx in degrees
			lastAng = Arctan2(dy, dx);
			cXY--;
			x = rgxy->x;
			y = rgxy->y;
			rgxy++;
			break;
		}
		cXY--;
		rgxy++;
	}
	// now find difference of every subsequent angle with its previous angle
	while (cXY)
	{
		dy = rgxy->y - y;
		dx = rgxy->x - x;
		if (dx*dx+dy*dy >= iStepSizeSqr)
		{
			ang = Arctan2(dy, dx);
			ANGLEDIFF(lastAng, ang, diff)
			sum1 += diff;
			if (diff < 0)
				diff = -diff;
			sum2 += diff;
			lastAng = ang;
			x = rgxy->x;
			y = rgxy->y;
			if (diff > *pMaxAngle)
				*pMaxAngle = diff;
		}
		cXY--;
		rgxy++;
	}

	// clean up
	ExternFree(rgxySave);
	*pSum1 = sum1;
	*pSum2 = sum2;
}

/******************************Private*Routine******************************\
* AddCurveFeatures
*
* Given an ink (one or more strokes), computes three curvature features.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote this comment.
\**************************************************************************/
int AddCurveFeatures(GLYPH *pGlyph, int iStepSizeSqr, int *rgFeat)
{
	GLYPH *glyph;
	FRAME *frame;
	int cXY;
	XY *rgXY;
	int sum1=0, sum2=0, ang1, ang2, maxAngle=0;
	int *rgFeatBase=rgFeat;

	for (glyph=pGlyph; glyph; glyph=glyph->next)
	{
		frame = glyph->frame;
		if (!IsVisibleFRAME(frame))
			continue;
		rgXY = RgrawxyFRAME(frame);
		cXY = CrawxyFRAME(frame);
		ASSERT(cXY > 0);
		//For each frame compute the curvedness
		ComputeCurvedness(rgXY, cXY, iStepSizeSqr, &ang1, &ang2, &maxAngle);
		//sum1 represents the sum of the modular change in angle(with respect to + and - for the angles
		sum1 += ang1;
		//sum2 represent the total curviness of the stoke--just directly measures the change in angles.
		sum2 += ang2;
	}

	// based on emperical obsevations, truncate sum1 between -1000 to 1000
	//    and sum2 between 0 and 1200  
	// (this results in no truncation in more than 99% cases)
	if (sum1 < -1000)
		sum1 = -1000;
	else if (sum1 > 1000)
		sum1 = 1000;
	if (sum2 < 0)
		sum2 = 0;
	else if (sum2 > 1200)
		sum2 = 1200;
	sum1 += 1000;  // now between 0 and 2000
	sum1 = LSHFT(sum1)/2000;
	if (sum1 > 0xFFFF)
		sum1 = 0xFFFF;
	sum2 = LSHFT(sum2)/1200;
	if (sum2 > 0xFFFF)
		sum2 = 0xFFFF;
	// maxAngle should be between 0 and 180
	if (maxAngle < 0)
		maxAngle = 0;
	else if (maxAngle > 180)
		maxAngle = 180;
	maxAngle = LSHFT(maxAngle)/180;
	if (maxAngle > 0xFFFF)
		maxAngle = 0xFFFF;

	*rgFeat++ = sum1;
	*rgFeat++ = sum2;
	*rgFeat++   = maxAngle;
	return rgFeat-rgFeatBase;
}

/******************************Private*Routine******************************\
* AddStrokeCountFeature
*
* Defines a single feature derived from stroke count of a char.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote this comment.
\**************************************************************************/
int AddStrokeCountFeature(int cStroke, int *rgFeat)
{
	int tmp = LSHFT(cStroke-1)/cStroke;
	int *rgFeatBase=rgFeat;
	*rgFeat++ = tmp;
	return rgFeat-rgFeatBase;
}

/******************************Private*Routine******************************\
* DoOneContour
*
* Once a contour has been found (defined by a sequence of values, X-values
* for left- or right-contour, Y-values for top- or bottom-contour), this function
* is called to fit a Chebychev polynomial to the contour generating 9 new
* features.
*
* The arg "contour" is of length GRIDSIZE.  The output features are filled in
* the arg rgFeat and the count of features generated is returned.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote it.
\**************************************************************************/
int DoOneContour(int *contour, int *rgFeat)
{
	int rgX[2*GRIDSIZE], *pX;  //The rgX array is of 2*GRIDSIZE because the Chebyshev function takes alternate array values
	int chby[10];
	int norm = 0;
	int dT, i;
	int *rgFeatBase=rgFeat;

	// copy points into required format
	pX = rgX;
	for (i=0; i<GRIDSIZE; i++)
	{
		int x;
		x = 2 * (*contour++);
		//We are now LSHFTing--this is the first place where the 16.16 format surfaces
		//Why do we have to make the value between -1 and +1 ?
		*pX++ = LSHFT(x-GRIDSIZE)/(GRIDSIZE);  // values are in the range -1 to +1
		pX++;
	}
	// fit a chebychev polynomial
	if (!LSCheby(rgX, GRIDSIZE, chby, 10))
	{
		ASSERT(0);
		return 0;
	}

	// find rms of coefficients
	//dT and norm are both in 16.16 notation
	for (i = 0; i < 10; ++i)
	{
		Mul16(chby[i], chby[i], dT)
        norm += dT;
	}
	norm = ISqrt(norm) << 8;
	if (norm < LSHFT(1))
		norm = LSHFT(1);//The normalization value should at least be 1

	// normalize coeffcients
    for (i = 0; i < 10; i++)
    {
		//Why this LSHFT(1) ??
		dT = Div16(chby[i], norm) + LSHFT(1);
		//Why this ??
		dT >>= 1;
		if (dT >= 0x10000)
			dT = 0xFFFF; //Fill it with 1's for the lower 16 bits
		else if (dT < 0)
			dT = 0;
		//Does converting to an unsigned short always take the lowest 16 bits ??
		*rgFeat++ = dT;
    }
	return rgFeat-rgFeatBase;
}

/******************************Private*Routine******************************\
* MakeLine
*
* Given a point in the GRIDSIZE x GRIDSIZE grid (bitmap) and given the 
* sequence of points so far, this function adds one or more points in a
* straight line joining the last point and the given point.  
*
* Returns the number of points added.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote it.
*  06-Oct-1997 -by- Angshuman Guha aguha
* Fixed a bug.
\**************************************************************************/
int MakeLine(BYTE x, BYTE y, BYTE *pX, BYTE *pY, int space)
{
	BYTE midx, midy;
	BYTE ts1,ts2;
	int c, c2;

	if (space <= 0)
	{
		return 0;
	}
    ASSERT(x != *pX || y != *pY);
    if (Neighbor(*pX, x) && Neighbor(*pY, y))
    {
			ASSERT(x >= 0);
			ASSERT(x < GRIDSIZE);
	        ASSERT(y >= 0);
			ASSERT(y < GRIDSIZE);
        *++pX = x;
        *++pY = y;
        return 1;
    }
	ts1=(*pX+x)/2;
	ts2=(*pY+y)/2;
	midx=ts1;
	midy=ts2;

    c = MakeLine(midx, midy, pX, pY, space);
	if (!c)
		return 0;
	c2 = MakeLine(x, y, pX+c, pY+c, space-c);
	if (!c2)
		return 0;
    return c + c2;
}

/******************************Private*Routine******************************\
* AddContourFeatures
*
* Given a sequence of already-resampled points (pen-down strokes joined by
* intervening pen-up strokes) and the bounding rect for the ink, this function
* computes some contour features, fills up rgFeat with the features and
* returns the count of features computed.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote it.
*  06-Oct-1997 -by- Angshuman Guha aguha
* Fixed a bug.  Added Realloc for rgMappedX and rgMappedY.

  Comments added by Mango

  The idea of this function is to first map the points that we have to 2 GRIDSIZE*GRIDSIZE bitmap.
  Once the bitmap is made we use the contour features.
Explanation of the arguments to the function
pointinfo--Contains the strructure from which the points will be taken
pRect--pointer to the bounding rectangle of the original ink
rgFeat--This contains the final contour features
\**************************************************************************/
int AddContourFeatures(POINTINFO *pointinfo, RECT *pRect, int *rgFeat)
{
	//BYTE rgGrid[GRIDSIZE][GRIDSIZE];
	int xMin = pRect->left; //Stores the minimum value of x
	int yMin = pRect->top; //Stores the minimum value of y
	int xRange = pRect->right - xMin; //Stores the width of the bounding rectangle
	int yRange = pRect->bottom - yMin; //Stores the height of the bounding rectangle
	int range, xOrigin, yOrigin;//Range stores the greated of the xRange and yRange 
	int iPoint, *xy, *z, i, cMapped, cMappedMax; //cMapped stores the number of points that have been mapped. cMappedMAx--the max number of points that could be mapped
	BYTE *pMappedX, *pMappedY, *rgMappedX, *rgMappedY;//Since we are using BYTE * here,we are assuming that GRIDSIZE <256--a byte size
	int rgMaxX[GRIDSIZE], rgMinY[GRIDSIZE], rgMaxY[GRIDSIZE], lastz; //GRIDSIZE=32
	int *rgFeatBase=rgFeat;
	int lastx,lasty;
	int iRetValue;
	BYTE *pbTmpX = NULL, *pbTmpY = NULL;
	ASSERT(xRange > 0);
	ASSERT(yRange > 0);
//We want to map the points to a GRIDSIZE*GRIDSIZE bitmap--but at the same time we want to preserve the aspect ratio
//It xRange >yRange,then the xValues will span the whole of the bit map 
//The y values will not span the entire bit map--but will simply be centered on the bit map.This helps to preserve the aspect ratio

	if (xRange > yRange)
	{
		range = xRange;
		xOrigin = 0;
		yOrigin = (GRIDSIZE - GRIDSIZE*(yRange-1)/range) / 2;
	}
	else if (yRange > 1)
	{   //In this case the y will span the entire grid map.xOrigin is scaled according to the earlier comment 
		range = yRange;
		xOrigin = (GRIDSIZE - GRIDSIZE*(xRange-1)/range) / 2;
		yOrigin = 0;
	}
	else // xRange == yRange == 1
	{ //In this case the Ink will be centered
		range = 1;
		xOrigin = GRIDSIZE/2;
		yOrigin = GRIDSIZE/2;
	}

	// make list of grid points which will make up the binary pixel map--we will map only the pen down points
	
	//Initialize the pointers to the raw points
	xy = pointinfo->xy;
	z = pointinfo->z;
	

	//In case there is a continuation of a line,then the bit map should not have any vacant spaces in the grid
	//connecting the points of the line.Hence we add extra space by 2*GRIDSIZE in case we need to connect the points
	//cMappedMax represents the maximum number of points that will be mapped
	
	cMappedMax = 2*(pointinfo->cPoint+GRIDSIZE);
	rgMappedX = (BYTE *) ExternAlloc(cMappedMax*sizeof(BYTE));
	rgMappedY = (BYTE *) ExternAlloc(cMappedMax*sizeof(BYTE));
	if (!rgMappedX || !rgMappedY)
	{
		//Allocatation failed.FLEE !!
		ASSERT(0);
		iRetValue = 0;
		goto cleanup;
	}
	cMapped = 0; //This contains the total number of points that have been mapped
	//The pointer to which it has been initialized is one less than the actual start.
	//Hence need to use an increment operator prior to using the first time.
	//After that the pointer always points to the last value that was allocated

	pMappedX = rgMappedX - 1;
	pMappedY = rgMappedY - 1;
	lastz = PEN_UP_VALUE;
	for (iPoint=0; iPoint<pointinfo->cPoint; iPoint++)
	{
		int xRaw, yRaw, x, y, zRaw;
		// get point
		xRaw = *xy++;
		yRaw = *xy++;
		zRaw = *z++;
		z++;
		if (zRaw > 0) // pen-down point
		{
			// map x to grid
			x = xOrigin + GRIDSIZE*(xRaw - xMin)/range;
			ASSERT(x >= 0);
			ASSERT(x < GRIDSIZE);
			// map y to grid
			y = yOrigin + GRIDSIZE*(yRaw - yMin)/range;
			ASSERT(y >= 0);
			ASSERT(y < GRIDSIZE);
			// save this point in the list
			if (lastz < 0)
			{
				if (cMapped==cMappedMax)
				{  //If the max space has already been used up then we ned to realloc.
					cMappedMax *= 2;
					pbTmpX = ExternRealloc(rgMappedX, cMappedMax*sizeof(BYTE));
					if (!pbTmpX)
					{
						ASSERT(0);
						iRetValue = 0;
						goto cleanup;
					}
					rgMappedX = pbTmpX;
					pMappedX = rgMappedX - 1 + cMapped;

					pbTmpY = ExternRealloc(rgMappedY, cMappedMax*sizeof(BYTE));
					if (!pbTmpY)
					{
						ASSERT(0);
						iRetValue = 0;
						goto cleanup;
					}
					rgMappedY = pbTmpY;
					pMappedY = rgMappedY - 1 + cMapped;
				}

				// first point of a stroke
				*++pMappedX = (BYTE)x;
				*++pMappedY = (BYTE)y;
				cMapped++;
			}
			else if (x != *pMappedX || y != *pMappedY)
			{
				// next unique mapped point
				//i contains the count of the number of points that have been added thru MakeLine
				ASSERT(*pMappedX < GRIDSIZE);
				ASSERT(*pMappedY <GRIDSIZE);
				ASSERT(*pMappedX >=0);
				ASSERT(*pMappedY >=0);


				while (!(i = MakeLine((BYTE)x, (BYTE)y, pMappedX, pMappedY, cMappedMax - cMapped)))
				{
					// these reallocs happen on 0.4% of the samples of gtrain02.ste (1860 of 443292 samples)
					cMappedMax *= 2;
					pbTmpX = ExternRealloc(rgMappedX, cMappedMax*sizeof(BYTE));
					if (!pbTmpX)
					{
						ASSERT(0);
						iRetValue = 0;
						goto cleanup;
					}
					rgMappedX = pbTmpX;
					pMappedX = rgMappedX - 1 + cMapped;

					pbTmpY = ExternRealloc(rgMappedY, cMappedMax*sizeof(BYTE));
					if (!pbTmpY)
					{
						ASSERT(0);
						iRetValue = 0;
						goto cleanup;
					}
					rgMappedY = pbTmpY;
					pMappedY = rgMappedY - 1 + cMapped;
				}

				//Increment the count of mapped points by the number of points that have been added.
				cMapped += i;
				ASSERT(cMapped <=cMappedMax);
				//Increment the pointers accordingly
				pMappedX += i;
				pMappedY += i;
			}
		} // if zRaw > 0
		lastz = zRaw;
	} // for iPoint=0

	// now dump the mapped point list into the grid, deleting redundant points along the way
	//memset(rgGrid, 0, sizeof(rgGrid));
	for (i=0; i<GRIDSIZE; i++)
	{
		rgMaxX[i] = -1;
		rgMinY[i] = GRIDSIZE;
		rgMaxY[i] = -1;
	}
	pMappedX = rgMappedX;
	pMappedY = rgMappedY;
	for (iPoint=0; iPoint<cMapped; iPoint++)
	{
		int x, y;

	
		x = *pMappedX++;
		y = *pMappedY++;


	    if (iPoint > 0 && iPoint < cMapped-1)
	    {
			int nextx = *pMappedX;
			int nexty = *pMappedY;
	        if (Neighbor(lastx, nextx) &&
	            Neighbor(lasty, nexty) &&
				lastx != nextx &&
				lasty != nexty)
	            continue;
	    }
	    lastx = x;
	    lasty = y;
	   
		//rgGrid[x][y]=1;
		ASSERT(x >= 0);
		ASSERT(x < GRIDSIZE);
		ASSERT(y >= 0);
		ASSERT(y < GRIDSIZE);
		if (x > rgMaxX[y])
			rgMaxX[y] = x;
		if (y < rgMinY[x])
			rgMinY[x] = y;
		if (y > rgMaxY[x])
			rgMaxY[x] = y;
	}

	// now Chebychev'ize the three contours

	// right contour
	rgFeat += DoOneContour(rgMaxX, rgFeat);
	// top contour
	rgFeat += DoOneContour(rgMinY, rgFeat);
	// bottom contour
	rgFeat += DoOneContour(rgMaxY, rgFeat);

	iRetValue = rgFeat-rgFeatBase;

cleanup:		// Clean up temp space

	if (rgMappedX)
		ExternFree(rgMappedX);
	if (rgMappedY)
		ExternFree(rgMappedY);

	return iRetValue;
}

/******************************Private*Routine******************************\
* NormalizeCheby
*
* Routine to normalize the three (x, y and z) Chebychev polynomials.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Wrote this comment.
\**************************************************************************/
void NormalizeCheby(int *chbyX, int *chbyY, int *chbyZ, int *rgFeat)
{
	int norm = 0;
	int dT;
	int cFeat = 0, i;
	int *rgFeatBase=rgFeat;
	//The norm is applied both to x and y prior to dividing,so that the relative sizes of x and y can be kept intact
	// 
	for (i = 1; i < XCHB; ++i)  // 1st X coeff skipped
	{
		Mul16(chbyX[i], chbyX[i], dT)
        norm += dT;
	}
	for (i = 1; i < YCHB; ++i)  // 1st Y coeff skipped
	{
		Mul16(chbyY[i], chbyY[i], dT)
        norm += dT;
	}
	norm = ISqrt(norm) << 8;
	if (norm < LSHFT(1))
		norm = LSHFT(1);

	for (i=1; i<XCHB; i++)
	{
		dT = Div16(chbyX[i], norm) + LSHFT(1);  // now between 0 and 2
		dT >>= 1;  // now between 0 and 1
		if (dT >= 0x10000)
			dT = 0xFFFF;
		else if (dT < 0)
			dT = 0;
		rgFeat[cFeat++] = dT;
	}

	for (i=1; i<YCHB; i++)
	{
		dT = Div16(chbyY[i], norm) + LSHFT(1);
		dT >>= 1;
		if (dT >= 0x10000)
			dT = 0xFFFF;
		else if (dT < 0)
			dT = 0;
		rgFeat[cFeat++] = dT;
	}

    // Z
    norm = 0;
	for (i = 0; i < 8; ++i)
	{
		Mul16(chbyZ[i], chbyZ[i], dT)
        norm += dT;
	}
	norm = ISqrt(norm) << 8;
	if (norm < LSHFT(1))
		norm = LSHFT(1);

    for (i = 0; i < 8; i++)
    {
		dT = Div16(chbyZ[i], norm) + LSHFT(1);
		dT >>= 1;
		if (dT >= 0x10000)
			dT = 0xFFFF;
		else if (dT < 0)
			dT = 0;
		rgFeat[cFeat++] = dT;
    }
	ASSERT(cFeat == 26);
	
}

/******************************Public*Routine******************************\
* SoleFeaturize
*
* The top-level routine for featurizing ink for a char.
*
* History:
*  26-Sep-1997 -by- Angshuman Guha aguha
* Modified it.
*Comments,bug fix,optional guide features--Manish Goyal--mango
* 15th September,2001
Explantion of parameters
pGlyph--pointer to the Glyph that needs to be featurized
pGuide--Pointer to guide(if a guide is passed)
rgFeat--Array containing the feature vector
bGuide--Indicates whether the guide is passed or not
\**************************************************************************/
int SoleFeaturize(GLYPH *pGlyph, GUIDE *pGuide, int *rgFeat,BOOL bGuide)
{
	int cStroke, iStroke;
    int iPoint;
    int sumX, sumY, sum;
    int var;
	int isumX, isumY;//These store the mean values of x and y
    int chbyX[IMAXCHB], chbyY[IMAXCHB], chbyZ[IMAXCHB]; 
	int retval= 0;
	XY *rgXY, lastXY;
	int cXY, iXY, dx, dy, t;
	GLYPH *glyph;
	FRAME *frame;
	int ydev; //Stores the ydev value used for storing the step size
	POINTINFO pointinfo;
	RECT rect;
	int *rgFeatBase; //This stores the original value of the feature vector pointer

	rgFeatBase=rgFeat;

	// compute cStroke
	for (cStroke=0, glyph=pGlyph; glyph; glyph=glyph->next)
	{
		frame = glyph->frame;
		if (!IsVisibleFRAME(frame))
			continue;
		cXY = CrawxyFRAME(frame);
		ASSERT(cXY > 0);
		cStroke++;
	}

	if (cStroke < 1)
		return 0;

	// compute step size--originally this was done using the box height
//	pointinfo.iStepSize = pGuide->cyBox*3/200; // 1.5% of box height
	


	ydev= YDeviation(pGlyph);
	if (ydev < 1)
		ydev = 1;  // a "-" or a "."
	//The step size is computed from the ydev value
	pointinfo.iStepSize =  ydev/5; 

	if (pointinfo.iStepSize < 2)
		pointinfo.iStepSize = 2;
	pointinfo.iStepSizeSqr = pointinfo.iStepSize * pointinfo.iStepSize;

	// estimate total count of points
	pointinfo.cPointMax = 1;  // make sure it does not end up being zero
	for (iStroke=0, glyph=pGlyph; glyph; glyph=glyph->next)
	{
		frame = glyph->frame;
		if (!IsVisibleFRAME(frame))
			continue;
		rgXY = RgrawxyFRAME(frame);
		cXY = CrawxyFRAME(frame);
		ASSERT(cXY > 0);

		sum = 0;
		for (iXY=1; iXY<cXY; iXY++)
		{
			dx = rgXY[iXY].x - rgXY[iXY-1].x;
			if (dx < 0)
				dx = -dx;
			dy = rgXY[iXY].y - rgXY[iXY-1].y;
			if (dy < 0)
				dy = -dy;
			if (dx > dy)
				sum += dx;
			else
				sum += dy;
		}

		//The sum that we are computing here is an underestimate--we are only taking the max on |x| or |y|.The distance will
		// be more
		pointinfo.cPointMax += sum/pointinfo.iStepSize;

		//TO DO--Temporary hack--this happens in rare cases if the step size is very small for say a horizontal line--in this case we fail
		// if the new count of points >10 times the orig count.Need to revisit this later
		if (sum/pointinfo.iStepSize >10*cXY)
			return 0;
		// if not first stroke simulate pen-up stroke
		if (iStroke)
		{
			dx = lastXY.x - rgXY->x;
			dy = lastXY.y - rgXY->y;
			t = ISqrt(dx*dx + dy*dy)/pointinfo.iStepSize;
			if (t >= 2)
				pointinfo.cPointMax += t-1;
		}
		lastXY = rgXY[cXY-1];
		iStroke++;
	}

	//Since we have computed an underestimate multiply by two
	pointinfo.cPointMax *= 2;

	// allocate space
	pointinfo.xy = (int *) ExternAlloc(2*pointinfo.cPointMax*sizeof(int));
	if (!pointinfo.xy)
		return 0;

	//The array size for z is double of what actually needs to be allocated because-
	//--the chebyshev function expects the array to be spaced in this manner
	//--indexing is easier in the functions--can exactly mirror what you do for the x and y
	pointinfo.z = (int *) ExternAlloc(2*pointinfo.cPointMax*sizeof(int));
	if (!pointinfo.z)
	{
		ExternFree(pointinfo.xy);
		return 0;
	}

    // join all strokes into one stream
    pointinfo.cPoint = 0;
	for (glyph=pGlyph; glyph; glyph=glyph->next)
	{
		frame = glyph->frame;
		if (!IsVisibleFRAME(frame))
			continue;
		rgXY = RgrawxyFRAME(frame);
		cXY = CrawxyFRAME(frame);
        for (iXY = 0; iXY < cXY; iXY++)
			if (!AddPointSole(&pointinfo, rgXY[iXY].x, rgXY[iXY].y, !iXY))
			{
				retval = 0;
				goto freeReturn;
			}
	}

	// contour features (computed from resampled raw points)
	GetRectGLYPH(pGlyph, &rect);

	//PLEASE NOTE--rgFeat is unsigned short.Its value comes from the lower 16 bits of the 16.16 format that had been defined earlier.
	rgFeat += AddContourFeatures(&pointinfo, &rect, rgFeat);

	//IS there any reason why the mean and the variance has been subtracted only AFTER the contour features ??Maybe because there we are dumping to a bit map ??

    // compute X-mean and Y-mean
    sumX = sumY = 0;
	for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint+=2)
	{
		sumX += pointinfo.xy[iPoint] - rect.left;
		sumY += pointinfo.xy[iPoint+1] - rect.top;
	}
	//isumX and isumY represent the mean values of the x and y coordinates.


	isumX = (sumX / pointinfo.cPoint) + rect.left;
	isumY = (sumY / pointinfo.cPoint) + rect.top;

	ASSERT(sumX>=0);
	ASSERT(sumY>=0);
	ASSERT(isumX>=0);
	ASSERT(isumY>=0);
    // shift points by means
	for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint+=2)
	{
		pointinfo.xy[iPoint] -= isumX;
		pointinfo.xy[iPoint+1] -= isumY;
	}

    // compute variance
	var = 0;
	for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint++)
    {
		
		if (pointinfo.xy[iPoint]<0)
			var+=(-pointinfo.xy[iPoint]);
		else
			var+=pointinfo.xy[iPoint];
			
		//var += pointinfo.xy[iPoint] * pointinfo.xy[iPoint];
        ASSERT(var >= 0);
    }
	var=var/(2*pointinfo.cPoint);
//	var = ISqrt(var/pointinfo.cPoint);
	if (var < 1)
		var = 1;

    // scale points by standard deviation


	// From this point on,the pointinfo values are in 16.16
	//IMPORTTANT NOTE---THE pointinfo array is not directly used after this point
	//If it is,you will have to use 16.16 arithmetic

	for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint++)
	{
		pointinfo.xy[iPoint] = LSHFT(pointinfo.xy[iPoint])/var;
	}
	//Basically,since we effectively have a normal distribution(hopefully)most of the values will be between +-3.
    // chebychev'ize!
	if (!LSCheby(pointinfo.xy, pointinfo.cPoint, chbyX, XCHB))
	{
		goto freeReturn;
	}
	if (!LSCheby(pointinfo.xy+1, pointinfo.cPoint, chbyY, YCHB))
	{
		goto freeReturn;
	}
	if (!LSCheby(pointinfo.z, pointinfo.cPoint, chbyZ, ZCHB))
	{
        goto freeReturn;
	}

	NormalizeCheby(chbyX, chbyY, chbyZ, rgFeat);
	rgFeat += 26;

	// stroke count feature--1 feature is added
	rgFeat += AddStrokeCountFeature(cStroke, rgFeat);

	// guide features
	//The rect had been comptured prior to scaling the points --by mean and standard deviation
	//isumY represents the mean Y value
	//We add 5 guide features
	if (bGuide)
	{
		rgFeat += AddGuideFeatures(pGuide, &rect, isumY, rgFeat);
	}
	// curved-ness features
	//Note the original glyph is being passed here
	//Why not simply use the sampled points ??
	rgFeat += AddCurveFeatures(pGlyph, pointinfo.iStepSizeSqr, rgFeat);
	retval=rgFeat-rgFeatBase;

freeReturn:
	ExternFree(pointinfo.xy);
    ExternFree(pointinfo.z);
	return retval;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\reginfo.h ===
#ifndef	__INCLUDE_REGINFO__
#define	__INCLUDE_REGINFO__

#define		REGINFO_FATAL_ERROR		-1
#define		REGINFO_FAILURE			0
#define		REGINFO_SUCCESS			1

#define		REGINFO_STORE_COMMON	1
#define		REGINFO_STORE_SEPARATOR	2
#define		REGINFO_STORE_COLLECTOR	4
#define		REGINFO_STORE_INSTALL	8
#define		REGINFO_STORE_ALL		7

#include "question.h"
#include "unicom.h"

class CRegInfo
{
public:
	int			Valid();			// Initialize and test
	void		Clean();			// Clean up allocated objects
	BOOL		Fetch();			// Load information from registry
	BOOL		Store(int nMask = REGINFO_STORE_ALL);			// Save information into registry

	HKEY		m_hkRoot;			// The main registry key

	QUESTION   *m_pquest;			// The question list
	USERNAME   *m_pusers;			// User names

	TCHAR		m_szInstall[256];	// Root of install path
	TCHAR		m_szLocal[256];		// Root directory of FFF files on local machine
	TCHAR		m_szNetwork[256];	// Root directory of FFF files on network
	TCHAR		m_szScript[256];	// Full path name of current script
	TCHAR		m_szUser[256];		// Full path name of users.txt
	TCHAR		m_szQuest[256];		// Full path name of quest.txt
	TCHAR		m_szFont[32];		// Font face name
	TCHAR		m_szLang[32];		// Language
	TCHAR		m_szRecog[32];		// Name of recognizer
	TCHAR		m_szStation[4];		// Collection station ID

	DWORD		m_cpRecog;			// Codepage recognizer uses
	DWORD		m_cpIn;				// Codepage to read in from FFF files
	DWORD		m_cpOut;			// Codepage to write out to FFF files
	DWORD		m_cpKbd;			// Codepage to read in from keyboard
	DWORD		m_cpScr;			// Codepage to write out to screen
	DWORD		m_dwALC;			// Call the recognizer with this mask
	DWORD		m_cset;				// Character set (e.g. HANGEUL_CHARSET, SHIFTJIS_CHARSET)
	DWORD		m_cxMargin;			// Empty space on left/right
	DWORD		m_cyMargin;			// Empty space on top/bottom
	DWORD		m_cxGuides;			// Number of horizontal guides
	DWORD		m_cyGuides;			// Number of vertical guides
	DWORD		m_cxGap;			// Size of horizontal gap
	DWORD		m_cyGap;			// Size of vertical gap
	DWORD		m_cAllow;			// Allow certain failures to be recognized
	DWORD		m_cAlts;			// Allow choice this deep in alternates list
	DWORD		m_cInterval;		// Screens before we make user wait
	DWORD		m_cRetry;			// Max retry count

	BOOL		m_bRemove;			// Remove spaces while separating?
	BOOL		m_bContext;			// Use context in while recognizing?
	BOOL		m_bVerifySafe;		// Is Verify 1 (safe) mode enabled?
	BOOL		m_bVerifyUnsafe;	// Is Verify 1 (unsafe) mode enabled?
	BOOL		m_bVerify2;			// Is Verify 2 mode enabled?
	BOOL		m_bReconcile;		// Is Reconcile mode enabled?
	BOOL		m_bSpecial;			// Is Special mode enabled?
	BOOL		m_bBatch;			// Is Batch mode enabled?
	BOOL		m_bMidline;			// Is there a midline?
	BOOL		m_bBaseline;		// Is there a baseline?
	BOOL		m_bWrap;			// Do word wrapping?

public:
	CRegInfo()						{ m_hkRoot = (HKEY) NULL; m_pquest = (QUESTION *) NULL, m_pusers = (USERNAME *) NULL; }
   ~CRegInfo()						{ Clean(); }

protected:
	void	ReadUserList();
	void	ReadQuestionList();
};

#endif//__INCLUDE__REGINFO__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\sole\src\soleapi.c ===
/* A small note on how the arithmetic is being done.
The integers are stored as 16.16 numbers with the first 16 bits representing the integer part and the last 16 bits
representing the fractional part.
To convert from normal fraction to our format LSHFT by 16
To convert from our format to normal mode--right shift by 16
The Features are all fractional number.Hence they are defined as unisgned shorts and can simply take the lower 16 bits of the 
integer that we have defined above.(the features are all normalized and thus lie between zero and one
The Hidden node outputs are also between zero and one--since we have used a sigmoid thresholding function
The Outputs are however not between zero and one--and so they are stored as integers

The original points that we get from the glyph and those that are stored in the pointinfo structure are not in this format--they are in
the normal integer format.
This comment probably needs to move elsewhere
*/

#include "common.h"
#include "solefeat.h"
#include "runnet.h"

//This stores the number of supported characters

extern const int g_cSupportChar ;

extern int * RunSoleNets(int * pMem,BOOL bGuide);

BOOL GetSoleAltList(int *aProb, ALTERNATES *pAlt);

BOOL GetSoleNetValues(int *icSoleNetMem,int *icSoleFeat,int *icSoleOutput,int bGuide);


/**********************************************************************\
* SoleRecog--Top Level Function for Calling Sole
*
* 
*
* History:
*  Originally written  -by- Angshuman Guha aguha
* Changed by Manish Goyal--mango--09/15/2001
*Explanation of parameters
*pGlyph--Pointer to the glpyh of ink being passed
*pGuide--Pointer to guide being passed--used only if the bGuide flag is set
*pAlt--returns the final character alt list from Sole Recognition
*bGuide--Boolean indicating that the guide has been set.If the guide is set,Sole 
		  calls the net for the guide(using the guide features)If not set,the Net without
		  the guide features is called.
\**************************************************************************/


BOOL SoleRecog(GLYPH *pGlyph, GUIDE *pGuide, ALTERNATES *pAlt,BOOL bGuide)
{
	int cStroke; //Counts the total number of strokes in the glyph being passed
	RREAL *pOutput=NULL; //Denotes the output nodes of the sole net
	int icSoleNetMem;  //Memory required by the Sole Net
	int  icSoleFeat;    //Number of features for the Sole Net
	int icSoleOutput;        //Number of outputs in the net supported by sole
	int nFeat; //Number of features that are generated by the featurizer
	RREAL *pMem; //Pointer to the Sole Net inputs/outputs
	BOOL retval=FALSE; //Stores the return value of the function
	
	// sanity check
	if (!pGlyph || !pAlt)
		return FALSE;

	//First we need to get the memory required and the number of input features for the Sole Nets

	if (!GetSoleNetValues(&icSoleNetMem,&icSoleFeat,&icSoleOutput,bGuide))
			return FALSE;

	//Allocate space for the net to be run

	if (!(pMem = ExternAlloc(icSoleNetMem * sizeof(*pMem))))
		    goto fail;



	//Depending on whether or not the guide is present the number of input features will vary
	//We now call the function to figure out what the net parameters are

	//Count the number of strokes
	cStroke=CframeGLYPH(pGlyph);

	if (cStroke <= 0)
		goto fail;

	// featurize!
	nFeat=SoleFeaturize(pGlyph, pGuide, pMem,bGuide);

	if (!nFeat)
		goto fail;

	//We now need to make sure that we are running the correct net

	
	//First,make sure that the number of feature vectors are equal to the number of input features for the Net
	ASSERT(nFeat == icSoleFeat);


	//Second,make sure that the number of outputs match
	ASSERT(g_cSupportChar==icSoleOutput); 

	//Run the sole net 

	pOutput=RunSoleNets(pMem,bGuide);


	if (!pOutput)
		goto fail;
	

	// put the results in the passed in alt-list
	if (!GetSoleAltList(pOutput, pAlt))
		goto fail;

	//The function has succeeded--the return value has to be set to 1
	retval=TRUE;

fail:
	ExternFree(pMem);
	return retval;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\path.h ===
#ifndef	__INCLUDE_PATH
#define	__INCLUDE_PATH

#define CSTROKE_MAX 511
#define	CCHAR_MAX	255
#define	CCHAR_WORD	64

#define 	MAX_FRAME_GLYPH 		30		// max strokes per glyph

#define	SyvFromSYM(s)	(((s) == SYM_UNKNOWN) ? SYV_NULL : SyvKanjiToSymbol(s))
#define  SymFromSYV(s)	(((s) == SYV_NULL) ? SYM_UNKNOWN : (SYM)WSyvToKanji(s))
#define	IsDigitSYM(s)	((s) >= 0x824f && (s) <= 0x8258)
#define	IsUpperSYM(s)	((s) >= 0x8260 && (s) <= 0x8279)
#define	IsLowerSYM(s)	((s) >= 0x8281 && (s) <= 0x829a)
#define	IsAlphaSYM(s)	(IsLowerSYM(s) || IsUpperSYM(s))
#define	IsPuncSYM(s)	(FALSE)									// TODO: fix this
#define	ToLowerSYM(s)	(IsUpperSYM(s) ? (s) + 0x0021 : (s))
#define	ToUpperSYM(s)	(IsLowerSYM(s) ? (s) - 0x0021 : (s))

int PUBLIC StrlenSYM(LPSYM lpsym);
int PUBLIC StrncmpSYM(LPSYM lpsym1, LPSYM lpsym2, int len);
VOID PUBLIC StrrevSYM(LPSYM lpsym);
VOID PUBLIC StrlwrSYM(LPSYM lpsym);

#define	SYM_NULL	(SYM)0

#define  IsSpaceSYM(s)        ((s) == SYM_SPACE || (s) == SYM_TAB || (s) == SYM_RETURN)

#define	INIT						1
#define	NOINIT					0
#define	INDEX_NULL				-1

#define	SYM_UNKNOWN				((SYM)0xFFFE)

#define	ENGINE_ERROR			-1

#define  AddCOST(a,b)         ((a) + (b))
#define  IncCOST(a,b)         ((a) += (b))
#define  DecCOST(a,b)         ((a) -= (b))
#define  SubCOST(a,b)         ((a) - (b))
#define  MultCOST(a,b)        MultFIXED(a,b)
#define  MultAddCOST(c,a,b)   ((c) += MultFIXED((a),(b)))
#define  NegCOST(a)           (-(a))
#define  AbsCOST(a)           ((a > 0.0) ? a : NegCOST(a))
#define  SquareCOST(a)        SquareFIXED(a)
// #define  DivCOST(a,b)         DivFIXED(a,b)

typedef	unsigned	PWMODE;
#define	PW_PREVIOUS					0x0001
#define	PW_CURRENT					0x0002
#define	PW_END						0x0004

typedef	unsigned	SMODE;
#define	SMODE_DICTIONARY			0x0001
#define	SMODE_RELAX_COERCION		0x0002
#define	SMODE_STRICT_COERCION	0x0004

typedef struct tagRECSTATUS
{
	int   cframeHgm;     // # of frames processed by HGM
} RECSTATUS;

#endif	//__INCLUDE_PATH
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\map.h ===
// map.h

#ifndef MAP_H
#define MAP_H

#define BASE_NORMAL		0x00	// kanji, kana, numbers, etc
#define BASE_QUOTE		0x01	// upper punctuation, etc
#define BASE_DASH       0x02    // middle punctuation, etc
#define BASE_DESCENDER  0x03    // gy, anything that descends.
#define BASE_THIRD      0x04    // something that starts a third way up.

#define XHEIGHT_NORMAL	0x00	// lower-case, small kana, etc
#define XHEIGHT_KANJI	0x10	// upper-case, kana, kanji, numbers, etc
#define XHEIGHT_PUNC		0x20	// comma, quote, etc
#define XHEIGHT_DASH        0x30    // dash, period, etc

#endif // MAP_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\testtune.h ===
// FILE: testtune.h
//
// Stuff shared between hwxtest and hwxtune.  Nothing else should use this.

//
// Constants
//

// Max alternates in alt list.
#define	ALT_MAX				10

// Size of box results structure with altlist included.
#define	SIZE_HWXRESULTS		(sizeof(HWXRESULTS) + (ALT_MAX - 1) * sizeof(WCHAR))
#define	SIZE_BOXRESULTS		(sizeof(BOXRESULTS) + (ALT_MAX - 1) * sizeof(SYV))

// Max prompt characters allowed on a panel.
#define	MAX_PANEL_SIZE		128

// Max prompt size for a whole file.
#define	MAX_FILE_PROMPT		(64 * MAX_PANEL_SIZE)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\recognizer.c ===
// Recognizer.c: 
//
//////////////////////////////////////////////////////////////////////
#include "Windows.h"
#include "Recognizer.h"

/***************\
 *	JRB: MAJOR HACK.  If something sets this flag, we load the alternate
 *		version of HwxGetResults.  It takes different parameters, so this
 *		can cause major problems if you are not careful!!!!
\***************/
BOOL	fLoadAltGetResults	= FALSE;

HINSTANCE	g_hRecogDLL;			// A handle to the Recognizer DLL
BOOL		g_bOldAPI;				// True is the recog supports the Old API
BOOL		g_bMultiLing;			// True if the recognizer is multilingual

HWX_FUNC	*g_apfn[HWXFUNCS];

BOOL
LoadRecognizer	(	wchar_t *pwRecogDLL, 
					wchar_t *pwLocale, 
					wchar_t *pwConfigDir
				)
{
	// attemp to load the DLL
	g_hRecogDLL=LoadLibrary (pwRecogDLL);
	if (!g_hRecogDLL)
		return FALSE;
	
	// locate either HWXConfig or HWXConfigEx and then call either
	g_apfn[HWXCONFIG] = (HWX_FUNC *)GetProcAddress (g_hRecogDLL,"HwxConfigEx");

	// Multiling, new API
	if (g_apfn[HWXCONFIG])
	{
		g_apfn[HWXSETALPHABET] = (HWX_FUNC *)GetProcAddress (g_hRecogDLL,"HwxALCPriority");
		if (!g_apfn[HWXSETALPHABET])
			return FALSE;

		// a multilingual recognizer
		g_bOldAPI		=	FALSE;
		g_bMultiLing	=	TRUE;
	}
	else
	{
		// UniLing
		g_apfn[HWXCONFIG] = (HWX_FUNC *)GetProcAddress (g_hRecogDLL,"HwxConfig");
		if (!g_apfn[HWXCONFIG])
			return FALSE;

		g_bMultiLing	=	FALSE;

		g_apfn[HWXSETALPHABET] = (HWX_FUNC *)GetProcAddress (g_hRecogDLL,"HwxALCPriority");
		if (g_apfn[HWXSETALPHABET])
			g_bOldAPI	=	FALSE;
		else
		{
			g_apfn[HWXSETALPHABET] = (HWX_FUNC *)GetProcAddress (g_hRecogDLL,"HwxSetAlphabet");
			if (!g_apfn[HWXSETALPHABET])
				return FALSE;

			g_bOldAPI	=	TRUE;
		}
	}

	g_apfn[HWXALCVALID]   = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxALCValid");
	if (!g_apfn[HWXALCVALID]) 
		return FALSE;

	g_apfn[HWXCREATE]	  =	(HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxCreate");
	if (!g_apfn[HWXCREATE])
		return FALSE;

	g_apfn[HWXDESTROY]     = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxDestroy");
	if (!g_apfn[HWXDESTROY])
		return FALSE;

	g_apfn[HWXINPUT]       = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxInput");
	if (!g_apfn[HWXINPUT])
		return FALSE;

	g_apfn[HWXENDINPUT]    = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxEndInput");
	if (!g_apfn[HWXENDINPUT])
		return FALSE;

	g_apfn[HWXSETGUIDE]    = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxSetGuide");
	if (!g_apfn[HWXSETGUIDE])
		return FALSE;

	g_apfn[HWXPROCESS]     = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxProcess");
	if (!g_apfn[HWXPROCESS])
		return FALSE;

	//	JRB: MAJOR HACK: optionally load alternate (and incompatable) version of
	//		the HwxGetResults function.
	if (!fLoadAltGetResults) {
		g_apfn[HWXGETRESULTS]  = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxGetResults");
	} else {
		g_apfn[HWXGETRESULTS]  = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxGetResults2");
	}
	if (!g_apfn[HWXGETRESULTS])
		return FALSE;

	//g_apfn[HWXSETMAX]      = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "SetMaxResultsHRC");
	//if (!g_apfn[HWXSETMAX])
	//	return FALSE;

	g_apfn[HWXSETPARTIAL]  = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxSetPartial");
	if (!g_apfn[HWXSETPARTIAL])
		return FALSE;

	g_apfn[HWXSETCONTEXT]  = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxSetContext");
	if (!g_apfn[HWXSETCONTEXT])
		return FALSE;

	g_apfn[HWXAVAILABLE]	  = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "HwxResultsAvailable");
	if (!g_apfn[HWXAVAILABLE])
		return FALSE;

	// those two API are private ones. They do not exist in the shippable DLL
	// so we will not check whether they exist or not.
	// If an app needs them, It must check whether they exist in the loaded recognizer
	// or not. Call the HasPrivateAPI to check that
	g_apfn[GETPRIVATERECINFOHRC]  = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "GetPrivateRecInfoHRC");
	g_apfn[SETPRIVATERECINFOHRC]  = (HWX_FUNC *) GetProcAddress (g_hRecogDLL, "SetPrivateRecInfoHRC");
	
	// Old Api
	if (g_bOldAPI)
	{
		return CALL_FUNC_0 (HWXCONFIG);
	}
	else
	{
		if (g_bMultiLing)
		{
			return CALL_FUNC_3IHPP (HWXCONFIG, pwLocale, pwConfigDir, pwConfigDir);
		}
		else
			return CALL_FUNC_0 (HWXCONFIG);
	}
}

BOOL HasPrivateAPI ()
{
	return (g_apfn[GETPRIVATERECINFOHRC] && g_apfn[SETPRIVATERECINFOHRC]);
}

void CloseRecognizer()
{
	if (g_hRecogDLL)
	{
		FreeLibrary (g_hRecogDLL);
	}

	g_hRecogDLL=NULL;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\question.cpp ===
/***************************************************************************
 * question.cpp
 *
 * All the question specific stuff.
 *
 ****************************************************************************/

#include "stdafx.h"
#include "common.h"
#include "gdw.h"
#include "unicom.h"
#include "question.h"
#include "reginfo.h"

typedef struct tagOLD_TO_NEW_MAP
{
    ULONG  QuestionId;
    ULONG  OldMask;
} OLD_TO_NEW_MAP;

OLD_TO_NEW_MAP MappingArray[] = 
{
  {KSB_EXTRA_STROKES,HUMAN_STROKE_ADDED},
  {KSB_OUT_OF_ORDER,HUMAN_STROKE_ORDER},
  {KSB_MISSING_STROKES,HUMAN_STROKE_OMITTED},
  {KSB_BASELINE_SHIFT,HUMAN_CHAR_OTHER}
};

#define NO   0
#define YES  1

// Warning do not change the order of these question since it will cause
// previously verified FFF files to become mixed up.  Instead, add new 
// questions at the end and remove old question by having their review 1
// filters return FALSE.

/*
QUESTION gaQuestions[MAX_QUESTIONS] = 
{
{KSB_MACHINE_READABLE,"*Did the machine recognize the character?"),"recog",TRUE},
{KSB_CORRECT_CHAR,
"Does the ink match the character despite the writing style or form?","match",TRUE},
{KSB_KANJI_CHAR,"*Is this a kanji character?","kanji",TRUE},
{KSB_JOINED_STROKES,"Are there any joined strokes?","sjoin",TRUE},
{KSB_GYOSHO,"Is this gyosho?","gyosh",TRUE},
{KSB_MISSING_STROKES,"Are strokes missing?","smsng", FALSE},
{KSB_EXTRA_STROKES, "Are there extra strokes?  (For example added strokes, strokes from \
 other characters, touch-up, or pen skip).","sxtra", FALSE},
{KSB_OUT_OF_ORDER, "Is the order of the strokes incorrect?","sordr", FALSE},
{KSB_BASELINE_SHIFT,"Is the baseline of the character shifted?","bshft",FALSE},
{KSB_ONE_STROKE_CHAR, "*Is this a one stroke character?", "1strk",FALSE},
{KSB_TRAINING_DATA,"*Is this training data?", "trndt", FALSE},
};
*/

extern	CRegInfo	gri;

ULONG QuestionMask(ULONG QuestionNumber)    
{
//	ASSERT(QuestionNumber<MAX_QUESTIONS);
    
    return(0x1 << gri.m_pquest[QuestionNumber].nIndex);
}


int QuestionState(ULONG *pStatus, INT Question)
{
    ULONG Mask = QuestionMask(Question);
    return(((pStatus[0] & Mask) ? 4 : 0) + ((pStatus[1] & Mask) ? 2 : 0) +
           ((pStatus[2] & Mask) ? 1 : 0));
}

ULONG QuestionDone(ULONG *pStatus, INT Question)
{
    int State = QuestionState(pStatus,Question);
    
    return((State==SAMPLE_DONE_YES)||(State==SAMPLE_DONE_NO));
}

BOOL ComputerRecognized(ULONG *pStatus)
{
    return(QuestionState(pStatus,KSB_MACHINE_READABLE)==SAMPLE_DONE_YES);
}

TCHAR *QuestionAbreviation(ULONG QuestionNumber)
{
    return(gri.m_pquest[QuestionNumber].szShort);
}

BOOL ReviewOneFilter(
    ULONG State, 
    ULONG ReviewMode, 
    ULONG Default,
    ULONG Answer)
{
    if(State==SAMPLE_DONE_YES)
    {
        return(Answer==YES);
    }
    
    if(State==SAMPLE_DONE_NO)
    {
        return(Answer==NO);
    }

    if(ReviewMode==REVIEW_LOW_CHANCE)
    {
        return(TRUE);
    }
    
    if(ReviewMode==REVIEW_REVIEW1)
    {
        return(FALSE);
    }

//	ASSERT(ReviewMode==REVIEW_HIGH_CHANCE);
    
    
    if((State==SAMPLE_VERIFY1_YES) && (Answer==YES))
    {
        return(TRUE);
    }
    
    if((State==SAMPLE_VERIFY1_NO) && (Answer==NO))
    {
        return(TRUE);
    }
    
    if(State==SAMPLE_UNTOUCHED)
    {
        // if the sample is untouched then we assume that the 
        // when it gets answered the answer will be the default
        
        return(Default==Answer);
    }
        
    if((State==SAMPLE_CONFLICT_YES)||(State==SAMPLE_CONFLICT_NO))
    {
        // if there is a conflic then we assum that when it 
        // gets resolved the answer will be the opposite of the
        // default
        
        return(Default!=Answer);
    }

    if((State==SAMPLE_VERIFY1_YES) && (Answer==YES))
    {
        return(TRUE);
    }
    
    if((State==SAMPLE_VERIFY1_NO) && (Answer==NO))
    {
        return(TRUE);
    }

    return(FALSE);

}


BOOL CharacterFilter(
    ULONG *pStatus, 
    INT Question, 
    INT ReviewMode, 
    BOOL TouchedOK)
{
    int State = QuestionState(pStatus,Question);
        
    switch(ReviewMode)
    {
      case REVIEW_RECONCILE:
        return((State == SAMPLE_CONFLICT_YES)||(State == SAMPLE_CONFLICT_NO));
      case REVIEW_REVIEW2:
        return((State == SAMPLE_VERIFY1_YES)||(State == SAMPLE_VERIFY1_NO));
    }
    
//	ASSERT((ReviewMode == REVIEW_REVIEW1) || (ReviewMode == REVIEW_HIGH_CHANCE) || (ReviewMode == REVIEW_LOW_CHANCE));
    

    if((State!=SAMPLE_UNTOUCHED) && !TouchedOK)
    {
        return(FALSE);
    }
    
        
    switch(gri.m_pquest[Question].nIndex)
    {
        
      case KSB_MACHINE_READABLE:
        // can only be set by recog so it's impossible for it to be in any
        // state of VERIFY1

        return(FALSE);

      case KSB_CORRECT_CHAR:
        State = QuestionState(pStatus,KSB_MACHINE_READABLE);
        return(ReviewOneFilter(State,ReviewMode,YES,NO));
        
      case KSB_EXTRA_STROKES:
        if(!CharacterFilter(pStatus,KSB_CORRECT_CHAR,ReviewMode,TRUE))
        {
            return(FALSE);
        }
                        
        State = QuestionState(pStatus,KSB_CORRECT_CHAR);

        return(ReviewOneFilter(State,ReviewMode,YES,YES));

      case KSB_BASELINE_SHIFT:
        if(!CharacterFilter(pStatus,KSB_CORRECT_CHAR,ReviewMode,TRUE))
        {
            return(FALSE);
        }
                        
        State = QuestionState(pStatus,KSB_TRAINING_DATA);
        
        if(!ReviewOneFilter(State,ReviewMode,FALSE,TRUE))
        {
            return(FALSE);
        }
        
        State = QuestionState(pStatus,KSB_CORRECT_CHAR);

        return(ReviewOneFilter(State,ReviewMode,YES,YES));

      case KSB_JOINED_STROKES:        
      case KSB_MISSING_STROKES:
      case KSB_OUT_OF_ORDER:
        if(!CharacterFilter(pStatus,KSB_EXTRA_STROKES,ReviewMode,TRUE))
        {
            return(FALSE);
        }

        State = QuestionState(pStatus,KSB_TRAINING_DATA);
        
        if(!ReviewOneFilter(State,ReviewMode,FALSE,TRUE))
        {
            return(FALSE);
        }
        
        State = QuestionState(pStatus,KSB_ONE_STROKE_CHAR);
        return(ReviewOneFilter(State,ReviewMode,NO,NO));
        
      case KSB_ONE_STROKE_CHAR:
      case KSB_KANJI_CHAR:
	  case KSB_TRAINING_DATA:
        // can only be set by recog so it's impossible for it to be in any
        // state of VERIFY1

        return(FALSE);
                
      case KSB_GYOSHO:
        if(!CharacterFilter(pStatus,KSB_JOINED_STROKES,ReviewMode,TRUE))
        {
            return(FALSE);
        }

        State = QuestionState(pStatus,KSB_JOINED_STROKES);
        
        if(!ReviewOneFilter(State,ReviewMode,YES,YES))
        {
            return(FALSE);
        }
        
        State = QuestionState(pStatus,KSB_KANJI_CHAR);
        
        return(ReviewOneFilter(State,ReviewMode,YES,YES));
    }  
        
//	ASSERT(FALSE);
	return(FALSE); // we should never get here but the compiler complains
}

ULONG NewToOldStatus(ULONG *pStatus, ULONG OldStatus)
{
    int State = QuestionState(pStatus,KSB_MACHINE_READABLE);
    if(State==SAMPLE_DONE_NO)
        // computer missed it so mark COMPUTER_INTERVENTION_MASK
        OldStatus |= COMPUTER_INTERVENTION_MASK;
    
    State = QuestionState(pStatus,KSB_CORRECT_CHAR);
	if (State == SAMPLE_DONE_YES || State == SAMPLE_DONE_NO)
	{
		OldStatus &= ~HUMAN_READABILITY_MASK;
		OldStatus |= State==SAMPLE_DONE_NO ? HUMAN_READABILITY_UNREADABLE : HUMAN_READABILITY_READABLE;
	}
    
	State = QuestionState(pStatus,KSB_JOINED_STROKES);
	if (State == SAMPLE_DONE_YES || State == SAMPLE_DONE_NO)
	{
		if(State==SAMPLE_DONE_YES)
		{       
			OldStatus |= HUMAN_STROKE_JOINED;
			State = QuestionState(pStatus, KSB_GYOSHO);
			if (State == SAMPLE_DONE_YES || State == SAMPLE_DONE_NO)
			{
				OldStatus &= ~HUMAN_STYLE_MASK;
				OldStatus |= State==SAMPLE_DONE_YES ? HUMAN_STYLE_GYOSHO : HUMAN_STYLE_KAIGYOSHO;
			}
		}
		else
		{
			OldStatus &= ~HUMAN_STYLE_MASK;
			OldStatus |= HUMAN_STYLE_KAISHO;
		}
	}

    for(int i = 0; i < sizeof(MappingArray) / sizeof(OLD_TO_NEW_MAP);i++)
    {
        State = QuestionState(pStatus,MappingArray[i].QuestionId);

        if(State==SAMPLE_DONE_YES)
            OldStatus |= MappingArray[i].OldMask;
    }
    
    return(OldStatus);
}

void SetQuestion(ULONG *pStatus, int Question, int State)
{
    ULONG Mask = QuestionMask(Question);    

    switch(State)
    {
      case SAMPLE_DONE_YES:
        pStatus[0] |=  Mask;
        pStatus[1] |= Mask;
        pStatus[2] |= Mask;
        break;
      case SAMPLE_DONE_NO:
        pStatus[0] |= Mask;
        pStatus[1] &= ~Mask;
        pStatus[2] &= ~Mask;
        break;
      case SAMPLE_VERIFY1_YES:
        pStatus[0] &= ~Mask;
        pStatus[1] |= Mask;
        pStatus[2] |= Mask;
        break;
      case SAMPLE_VERIFY1_NO:
        pStatus[0] &= ~Mask;
        pStatus[1] |= Mask;
        pStatus[2] &= ~Mask;
        break;
	  case SAMPLE_CONFLICT_YES:
		  pStatus[0] |= Mask;
		  pStatus[1] &= ~Mask;
		  pStatus[2] |= Mask;
		  break;
	  case SAMPLE_CONFLICT_NO:
		  pStatus[0] |= Mask;
		  pStatus[1] |= Mask;
		  pStatus[2] &= ~Mask;
		  break;
	  case SAMPLE_UNTOUCHED:
		  pStatus[0] &= ~Mask;
		  pStatus[1] &= ~Mask;
		  pStatus[2] &= ~Mask;
		  break;
	  default:
//		  ASSERT(0);
		  break;
    }

    return;
}

void OldToNewStatus(ULONG *pStatus, ULONG OldStatus)
{
	pStatus[0] = 0;
	pStatus[1] = 0;
	pStatus[2] = 0;

    if((OldStatus & HUMAN_READABILITY_MASK) != HUMAN_READABILITY_UNREADABLE)
    {
        SetQuestion(pStatus,KSB_CORRECT_CHAR,SAMPLE_VERIFY1_YES);
    }
    else
    {
        SetQuestion(pStatus,KSB_CORRECT_CHAR,SAMPLE_VERIFY1_NO);
    }
    

    if(OldStatus & 
       (HUMAN_STYLE_GYOSHO|HUMAN_STYLE_KAIGYOSHO|HUMAN_STYLE_SOSHO|
        HUMAN_STYLE_OTHER|HUMAN_STROKE_JOINED))
    {
        SetQuestion(pStatus,KSB_JOINED_STROKES,SAMPLE_VERIFY1_YES);
    }
    else
    {
        SetQuestion(pStatus,KSB_JOINED_STROKES,SAMPLE_VERIFY1_NO);
    }
    
    if(OldStatus & HUMAN_STYLE_GYOSHO)    
    {
        SetQuestion(pStatus,KSB_GYOSHO,SAMPLE_VERIFY1_YES);
    }
    else
    {
        SetQuestion(pStatus,KSB_GYOSHO,SAMPLE_VERIFY1_NO);
    }

    if(OldStatus & HUMAN_STROKE_OMITTED)    
    {
        SetQuestion(pStatus,KSB_MISSING_STROKES,SAMPLE_VERIFY1_YES);
    }
    else
    {
        SetQuestion(pStatus,KSB_MISSING_STROKES,SAMPLE_VERIFY1_NO);
    }
    
    if(OldStatus & 
       (HUMAN_STROKE_ADDED|HUMAN_CHAR_MULTIPLE|HUMAN_WRITING_TOUCHED|
        HUMAN_WRITING_SKIPPED))
    {
        SetQuestion(pStatus,KSB_EXTRA_STROKES,SAMPLE_VERIFY1_YES);
    }
    else
    {
        SetQuestion(pStatus,KSB_EXTRA_STROKES,SAMPLE_VERIFY1_NO);
    }
        
    if(OldStatus & HUMAN_STROKE_ORDER)    
    {
        SetQuestion(pStatus,KSB_OUT_OF_ORDER,SAMPLE_VERIFY1_YES);
    }
    else
    {
        SetQuestion(pStatus,KSB_OUT_OF_ORDER,SAMPLE_VERIFY1_NO);
    }            

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\ttune.h ===
/******************************************************************************\
 *	FILE:	unigram.h
 *
 *	Public structures and functions library that are used to access the 
 *	unigram information.
 *
 *	Note that the code to create the binary file is in mkuni, not in the
 *	common library.
\******************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/************************************************************************************************\
 *	Public interface to unigram data.
\************************************************************************************************/

//
// Structures and types
//

// Structure holding basic set of tuning weights.
typedef struct tagTTUNE_COST_SET {
    FLOAT	UniWeight;			// mult weight for unigram cost
    FLOAT	BaseWeight;			// mult weight for baseline
    FLOAT	HeightWeight;		// mult weight for height transition between chars.
    FLOAT	BoxBaselineWeight;	// mult weight for baseline cost given the baseline and
								// size of box they were given to write in.
    FLOAT	BoxHeightWeight;	// mult weight for height/size cost given size of box
								// they were supposed to write in.
	FLOAT	CARTAddWeight;		// Weight to add to top score when CART updates top choice
} TTUNE_COST_SET;

// This pulls togather all the tuning weights used in the Tsunami Viterbi search.  It gives a
// set for each recognizer for each of string and character.  It also gives some other misc.
// weights needed.
typedef struct tagTTUNE_COSTS {
    FLOAT			ZillaGeo;		// General zilla vs. otter weight.
    FLOAT			ZillaStrFudge;	// ??? document this!
    FLOAT			BiWeight;		// ??? document this!
    FLOAT			BiClassWeight;	// ??? document this!

	TTUNE_COST_SET	OtterChar;		// Otter character weights
	TTUNE_COST_SET	OtterString;	// Otter string weights
	TTUNE_COST_SET	ZillaChar;		// Zilla character weights
	TTUNE_COST_SET	ZillaString;	// Zilla string weights
} TTUNE_COSTS;

// Structure giving access to a loaded copy of the tsunami tune weights. 
typedef struct tagTTUNE_INFO {
	TTUNE_COSTS			*pTTuneCosts;		// Pointer to tune values.
	LOAD_INFO			info;				// Handles for loading and unloading
} TTUNE_INFO;

//
// Functions.
//

// Load unigram information from a file.
extern BOOL	TTuneLoadFile(TTUNE_INFO *pTTuneInfo, wchar_t *pPath);

// Unload runtime localization information that was loaded from a file.
extern BOOL	TTuneUnloadFile(TTUNE_INFO *pTTuneInfo);

// Load unigram information from a resource.
// Note, don't need to unload resources.
extern BOOL	TTuneLoadRes(
	TTUNE_INFO		*pTTuneInfo,
	HINSTANCE		hInst,
	int				nResID,
	int				nType
);

// Write a properly formated binary file containing the tuning constants.
extern BOOL	TTuneWriteFile(TTUNE_INFO *pTTuneInfo, wchar_t *pLocale, FILE *pFile);

#ifdef __cplusplus
};
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\inc\tsunami.h ===
// Header file for TSUNAMI

#ifndef	__INCLUDE_TSUNAMI
#define	__INCLUDE_TSUNAMI

#include "common.h"
#include "global.h"
#include "height.h"
#include "map.h"

#endif	// __INCLUDE_TSUNAMI
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\height.c ===
// height.c

// We have to include a bunch of junk to use the XRC in our hack for 
// free input.  Because of the is we need tsunamip.h instead of 
// tsunami.h
//#include "tsunami.h"
#include "tsunamip.h"


VOID PUBLIC GetBoxinfo(BOXINFO * boxinfo, int iBox, LPGUIDE lpguide, HRC hrc)
{
	// Test for free guide.
	if (lpguide->cHorzBox == 0) {
		XRC		*pXRC	= (XRC *)hrc;
		int		realBase, realHeight;

		//// No guide, compute a quick hack to guess at what we want.
		//// We use the size of the box that was precomputed for us.
		//// But we have to figure out where to place it.

		// We have to fake up an absolute baseline.  First we find the
		// base and height of this cell.
		realBase	= pXRC->ppQueue[iBox]->rect.bottom;
		realHeight	= realBase - pXRC->ppQueue[iBox]->rect.top;

		// Now center the ink in computed box size.  E.g. add half the
		// difference in heights to the baseline.
		boxinfo->baseline	= realBase + (lpguide->cyBox - realHeight)/2;

		// Everything else can be computed from the numbers we now have.
		boxinfo->size		= lpguide->cyBox;
		boxinfo->xheight	= boxinfo->size / 2;
		boxinfo->midline	= boxinfo->baseline - boxinfo->xheight;
	} else {
		//
		// The size of the writing area is computed first.
		//

		if (lpguide->cyBase == 0)
			boxinfo->size = lpguide->cyBox;
		else
			boxinfo->size = lpguide->cyBase;

		if (lpguide->cyMid == 0)
			boxinfo->xheight = boxinfo->size / 2;
		else
			boxinfo->xheight = lpguide->cyMid;

		boxinfo->baseline = boxinfo->size + lpguide->yOrigin + (iBox / lpguide->cHorzBox) * lpguide->cyBox;

		boxinfo->midline = boxinfo->baseline - boxinfo->xheight;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\global.c ===
#include "tsunami.h"

GLOBAL	global;

#ifdef	DBG
	wchar_t		szDebugString[CB_DEBUGSTRING];
#endif // DBG

//PURPOSE: Initializes general global variables.
//RETURN:
//GLOBALS:
//CONDITIONS:
//TODO:

BOOL InitGLOBAL(VOID)
{
	memset(&global, 0, sizeof(GLOBAL));

#ifndef	WINCE
	InitializeCriticalSection(&global.cs);
#endif

	global.rgHandle = (GHANDLE *) ExternAlloc(CHANDLE_ALLOC * sizeof(GHANDLE));

	if (global.rgHandle == NULL)
	{
		return(FALSE);
	}		
	
	memset(global.rgHandle, '\0', CHANDLE_ALLOC * sizeof(GHANDLE));

	global.cHandleMax = CHANDLE_ALLOC;
	global.nSamplingRate = 67;
	global.atTickRef.sec = 0;
	global.atTickRef.ms = 0;

	return (global.rgHandle != (GHANDLE *) NULL);
}

void DestroyGLOBAL(VOID)
{
	if (global.rgHandle)
	{
#ifdef DBG
		int ihandle, chandle;

		chandle = 0;
		for (ihandle = 0; ihandle < global.cHandle; ihandle++)
		{
			if (global.rgHandle[ihandle] != 0)
			chandle++;
		}

		if (chandle)
		{
			wsprintf(szDebugString, __TEXT("RODAN: %d objects not destroyed!\r\n"), chandle);
			OutputDebugString(szDebugString);
		}
#endif // DBG

#ifndef	WINCE
		DeleteCriticalSection(&global.cs);
#endif

		ExternFree(global.rgHandle);
		global.rgHandle = 0;
	}
}

BOOL PUBLIC AddValidHANDLE(GHANDLE handle)
{
	HANDLE *rgHandle;
	int		iHandle, cHandleMax;

	ASSERT(handle);

	ENTER_HANDLE_MANAGER

	if (global.rgHandle)
	{
		for (iHandle = (global.cHandle) - 1; iHandle >= 0; iHandle--)
		{
			if (global.rgHandle[iHandle] == 0)
			{
				global.rgHandle[iHandle] = handle;
				
				LEAVE_HANDLE_MANAGER

				return(TRUE);
			}
		}

		iHandle = global.cHandle;

		if (iHandle >= global.cHandleMax)
		{
			cHandleMax = (global.cHandleMax) + CHANDLE_ALLOC;
            rgHandle   = (GHANDLE *) ExternRealloc(global.rgHandle, cHandleMax * sizeof(GHANDLE));
			if (!rgHandle)
			{
				LEAVE_HANDLE_MANAGER

				return(FALSE);
			}

			global.rgHandle = rgHandle;
			global.cHandleMax = cHandleMax;
		}

		global.cHandle = iHandle + 1;
		global.rgHandle[iHandle] = handle;

		LEAVE_HANDLE_MANAGER

		return(TRUE);
	}

	LEAVE_HANDLE_MANAGER

	return(FALSE);
}

VOID PUBLIC RemoveValidHANDLE(GHANDLE handle)
{
	int		  iHandle;
	
	ASSERT(handle);
	
	ENTER_HANDLE_MANAGER

	if (global.rgHandle)
	{
		for (iHandle = (global.cHandle) - 1; iHandle >= 0; iHandle--)
		{
			if (handle == global.rgHandle[iHandle])
			{
				global.rgHandle[iHandle] = 0;

				if (iHandle == (global.cHandle) - 1)
					global.cHandle--;
				break;
			}
		}
	}

	LEAVE_HANDLE_MANAGER
}

BOOL PUBLIC VerifyHANDLE(GHANDLE handle)
{
    int		  iHandle;

	ENTER_HANDLE_MANAGER

    if ((global.rgHandle == NULL) || (handle == (GHANDLE) 0))
	{
		LEAVE_HANDLE_MANAGER

		return(FALSE);
	}
	
    for (iHandle = global.cHandle - 1; iHandle >= 0; iHandle--)
    {
        if (handle == global.rgHandle[iHandle])
		{
			LEAVE_HANDLE_MANAGER

            return(TRUE);
		}
    }

	LEAVE_HANDLE_MANAGER

    return(FALSE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\panel.cpp ===
// panel.cpp : implementation of the CPanel class
//

#include "stdafx.h"
#include "panel.h"		 
#include "unicom.h"
#include "reginfo.h"

extern	CRegInfo	gri;

#if	0
void VerifyHeap()
{
	int		heapstatus;

	heapstatus = _heapchk();

	switch(heapstatus)
	{
	case _HEAPOK:
	case _HEAPEMPTY:
		break;

	case _HEAPBADBEGIN:
	case _HEAPBADNODE:
		MessageBox((HWND) NULL, TEXT("Heap Corruption Detected\n"), TEXT("Heap Error"), MB_ICONSTOP | MB_OK);
		break;
	}
}
#endif

/////////////////////////////////////////////////////////////////////////////
// CPanel construction/destruction

CPanel::CPanel()
{
	m_cSamples   = 0;
	m_rgX        = NULL;
	m_rgY        = NULL;
	m_rgT        = NULL;
	m_rgS        = NULL;
}

CPanel::~CPanel()
{
	FreeCachedObjects();
}

/////////////////////////////////////////////////////////////////////////////
// CPanel management

void CPanel::FreeCachedObjects()
{
	if (m_rgX)
	{
		delete m_rgX;
		m_rgX = DGNULL;
	}

	if (m_rgY)
	{
		delete m_rgY;
		m_rgY = DGNULL;
	}

	if (m_rgT)
	{
		delete m_rgT;
		m_rgT = DGNULL;
	}

	if (m_rgS)
	{
		delete m_rgS;
		m_rgS = DGNULL;
	}

	m_cSamples = 0;
}

inline int FieldIntValueFromName(DATA *pdata, char *psz)
{
	FIELDINT   *pfi  = (FIELDINT *) pdata->FieldFromName(psz);
	int			iRet = pfi ? pfi->Value() : 0;

    return iRet;
}

inline BOOL BoolFromField(DATA *pdata, char *psz)
{
	FIELDBOOL  *pfb  = (FIELDBOOL *) pdata->FieldFromName(psz);
	BOOL		bRet = pfb ? pfb->Value() : FALSE;

	return bRet;
}

// This doesn't do the whole compatibility zone, it only maps half width to full width.  

static const wchar_t awchPartialCompZone[] =
{
	0x0000, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,		// 0xff00
	0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,		// 0xff08
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,		// 0xff10
	0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,		// 0xff18
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,		// 0xff20
	0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,		// 0xff28
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,		// 0xff30
	0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x005f,		// 0xff38
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,		// 0xff40
	0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,		// 0xff48
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,		// 0xff50
	0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e, 0x0000,		// 0xff58
	0x0000, 0x3002, 0x300c, 0x300d, 0x3001, 0x30fb, 0x30f2, 0x30a1,		// 0xff60
	0x30a3, 0x30a5, 0x30a7, 0x30a9, 0x30e3, 0x30e5, 0x30e7, 0x30c3,		// 0xff68
	0x30fc, 0x30a2, 0x30a4, 0x30a6, 0x30a8, 0x30aa, 0x30ab,	0x30ad,		// 0xff70
	0x30af, 0x30b1, 0x30b3, 0x30b5, 0x30b7, 0x30b9, 0x30bb, 0x30bd,		// 0xff78
	0x30bf, 0x30c1, 0x30c4, 0x30c6, 0x30c8, 0x30ca, 0x30cb, 0x30cc,		// 0xff80
	0x30cd, 0x30ce, 0x30cf, 0x30d2, 0x30d5, 0x30d8, 0x30db, 0x30de,		// 0xff88
	0x30df, 0x30e0, 0x30e1, 0x30e2, 0x30e4, 0x30e6, 0x30e8, 0x30e9,		// 0xff90
	0x30ea, 0x30eb, 0x30ec, 0x30ed, 0x30ef, 0x30f3, 0x309b, 0x309c,		// 0xff98
	0x3164, 0x3131, 0x3132, 0x3133, 0x3134, 0x3135, 0x3136, 0x3137,		// 0xffa0
	0x3138, 0x3139, 0x313a, 0x313b, 0x313c, 0x313d, 0x313e, 0x313f,		// 0xffa8
	0x3140, 0x3141, 0x3142, 0x3143, 0x3144, 0x3145, 0x3146, 0x3147,		// 0xffb0
	0x3148, 0x3149, 0x314a, 0x314b, 0x314c, 0x314d, 0x314e, 0x0000,		// 0xffb8
	0x0000, 0x0000, 0x314f, 0x3150, 0x3151, 0x3152, 0x3153, 0x3154,		// 0xffc0
	0x0000, 0x0000, 0x3155, 0x3156, 0x3157, 0x3158, 0x3159, 0x315a,		// 0xffc8
	0x0000, 0x0000, 0x315b, 0x315c, 0x315d, 0x315e, 0x315f, 0x3160,		// 0xffd0
	0x0000, 0x0000, 0x3161, 0x3162, 0x3163, 0x0000, 0x0000, 0x0000,		// 0xffd8
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,		// 0xffe0
	0x2502, 0x2190, 0x2191, 0x2192, 0x2193, 0x25a0, 0x25cb, 0x0000,		// 0xffe8
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,		// 0xfff0
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfffd, 0xfffe, 0xffff		// 0xfff8
};

wchar_t PartialMapFromCompZone(wchar_t wch)
{
// If the character is in the compatibility zone, map it back to reality.

	if ((wch & 0xff00) == 0xff00)
	{
		wchar_t	wchMap;

		wchMap = awchPartialCompZone[wch & 0x00ff];
		return wchMap ? wchMap : wch;
	}
	else
		return wch;
}

void CPanel::GetForm()
{
	DATA   *pForm   = ((FIELDREF*) m_pData->FieldFromName("Form"))->Data();

	m_aiForm[FORM_XSTART]     = FieldIntValueFromName(pForm, "xstart");
	m_aiForm[FORM_YSTART]     = FieldIntValueFromName(pForm, "ystart");
	m_aiForm[FORM_XWIDTH]     = FieldIntValueFromName(pForm, "xwidth");
	m_aiForm[FORM_YHEIGHT]    = FieldIntValueFromName(pForm, "yheight");
	m_aiForm[FORM_XGAP]       = FieldIntValueFromName(pForm, "xgap");
	m_aiForm[FORM_YGAP]       = FieldIntValueFromName(pForm, "ygap");
	m_aiForm[FORM_XGUIDES]    = FieldIntValueFromName(pForm, "xguides");
	m_aiForm[FORM_YGUIDES]    = FieldIntValueFromName(pForm, "yguides");
	m_aiForm[FORM_LEFTRECT]   = FieldIntValueFromName(pForm, "leftrect");
	m_aiForm[FORM_TOPRECT]    = FieldIntValueFromName(pForm, "toprect");
	m_aiForm[FORM_RIGHTRECT]  = FieldIntValueFromName(pForm, "rightrect");
	m_aiForm[FORM_BOTTOMRECT] = FieldIntValueFromName(pForm, "botrect");

// Now for some sleight of hand.  The RIGHTRECT and BOTTOMRECT values need to be
// converted back to device space, but we don't have TPtoDP to help us in NT land. 
// So we have to fake it.

	m_aiForm[FORM_RIGHTRECT]  = (int) (((float) m_aiForm[FORM_RIGHTRECT])  * 370.0 / ((float) (m_ptTablet.x)));
	m_aiForm[FORM_BOTTOMRECT] = (int) (((float) m_aiForm[FORM_BOTTOMRECT]) * 210.0 / ((float) (m_ptTablet.y)));

// Finally, get the type of the guide structure

	m_bBox  = (BOOL) BoolFromField(pForm, "box");
	m_bComb = (BOOL) BoolFromField(pForm, "comb");
	m_bLine = (BOOL) BoolFromField(pForm, "lineguide");

	m_bFree = !(m_bLine || m_bBox || m_bComb);
}

void CPanel::GetGuide()
{
	GetForm();

	m_guide.xOrigin  = m_aiForm[FORM_XSTART] - m_aiForm[FORM_XGAP] / 2;
	m_guide.yOrigin  = m_aiForm[FORM_YSTART];
	m_guide.cxBox    = m_aiForm[FORM_XWIDTH] + m_aiForm[FORM_XGAP];
	m_guide.cyBox    = m_aiForm[FORM_YHEIGHT] + m_aiForm[FORM_YGAP];
	m_guide.cxBase   = m_aiForm[FORM_XGAP] / 2;
	m_guide.cyBase   = m_guide.cyBox - m_aiForm[FORM_YGAP];
	m_guide.cHorzBox = m_aiForm[FORM_XGUIDES];
	m_guide.cVertBox = m_aiForm[FORM_YGUIDES];
	m_guide.cyMid    = 0;
}

void CPanel::GetTablet()
{
	DATA   *pTablet   = ((FIELDREF*) m_pData->FieldFromName("Tablet"))->Data();

	m_ptTablet.x = FieldIntValueFromName(pTablet, "distX");
	m_ptTablet.y = FieldIntValueFromName(pTablet, "distY");

// Deal with sloppy PRT files

	if (!m_ptTablet.x)
		m_ptTablet.x = 2000;

	if (!m_ptTablet.y)
		m_ptTablet.y = 1600;
}

void CPanel::GetInkSamples()
{
	FIELDREF   *pfri = (FIELDREF *) m_pData->FieldFromName("Ink");
	DATA	   *pfrd = pfri->Data();
	FIELDINK   *pink = (FIELDINK *) pfrd->FieldFromName("FieldInk");
	int			cink = pink->CSamples();
	int			iink;

// See if the buffers are large enough to hold the data.

	if (cink > m_cSamples)
	{	
		m_cSamples = cink;

		if (m_rgX)
		{
			delete m_rgX;
			delete m_rgY;
			delete m_rgT;
			delete m_rgS;
		}

		m_rgX = new DGWORD[cink];
		m_rgY = new DGWORD[cink];
		m_rgT = new DGWORD[cink];
		m_rgS = new DGBOOL[cink];
	}

	pink->GetSamples(cink, m_rgX, m_rgY, DGNULL, DGNULL, DGNULL, DGNULL, m_rgS, m_rgT);

// Now remove the offset from the ink

	for (iink = 0; iink < cink; iink++)
	{
		m_rgX[iink] -= m_aiForm[FORM_LEFTRECT];
		m_rgY[iink] -= m_aiForm[FORM_TOPRECT];
	}
}

void CPanel::ReadyPanel(FIELDARRAYREF *pfar, int iPanel)
{
	FreeCachedObjects();

	m_pData   = pfar->DataAtIndex(iPanel);
	m_pCMA    = (FIELDARRAYREF *) m_pData->FieldFromName("CharMappingArray");
	m_pPrompt = ((FIELDREF *) m_pData->FieldFromName("Prompt"))->Data();

	GetTablet();
	GetGuide();
	GetInkSamples();
}

int CPanel::GetBox(int xPos, int yPos)
{
// We can't compute boxes for free or line date

	if (m_bFree || m_bLine)
		return 0;

// For old .BOX files with one character per panel there's no work to do

	if (m_pCMA->ArraySize() == 1)
		return 1;

// For most data we have to do real work

	int		xCol = (xPos - m_guide.xOrigin) / m_guide.cxBox;
	int		yRow = (yPos - m_guide.yOrigin) / m_guide.cyBox;

// We aren't interested in ink outside the guides

	if ((xCol < 0) || (xCol >= m_aiForm[FORM_XGUIDES]) || (yRow < 0) || (yRow >= m_aiForm[FORM_YGUIDES]))
		return 0;

// Return the 1-based box number

	return yRow * m_aiForm[FORM_XGUIDES] + xCol + 1;
}

void CPanel::SeparateInk(DOC *pdoc)
{
// We can't properly separate free or lineguide panels, so don't do it!

	if (m_bFree || m_bLine)
		return;

// Bail out on trivial data

	if (m_cSamples < 2)
		return;

// Now, count the number of strokes in this panel

	int		iPnt = 0;
	int		cStrokes = 0;

	while (iPnt < m_cSamples)
	{
		while (!(m_rgS[iPnt] & STATE_DOWN))
			iPnt++;

		cStrokes++;

		while(iPnt < m_cSamples)
		{
			iPnt++;

			if (!(m_rgS[iPnt] & STATE_DOWN) || (iPnt && (m_rgT[iPnt] != m_rgT[iPnt - 1] + 1)))
				goto next_stroke;

		} while (iPnt < m_cSamples);

next_stroke:;
	}

	if (!cStrokes)
		return;

	cStrokes--;

// Allocate buffers for mapping and keeping track of the start and final points 

	int	   *rgMap   = (int *) malloc(cStrokes * sizeof(int));
	int	   *rgStart = (int *) malloc(cStrokes * sizeof(int));
	int	   *rgFinal = (int *) malloc(cStrokes * sizeof(int));

// How many boxes are there?

	int		cBoxes = m_pCMA->ArraySize() == 1 ? 2 : 1 + m_aiForm[FORM_XGUIDES] * m_aiForm[FORM_YGUIDES];

// This buffer is used for each stroke to determine its likely box number

	long   *rgHits  = (long *) malloc(cBoxes * sizeof(long));
	
// Initialize the stroke map

	memset(rgMap, '\0', cStrokes * sizeof(int));
	iPnt = 0;

// Now find where each stroke belongs

	int		iBox;
	int		cBox;
	int		iHigh;
	int		cHigh;
	int		iFirst;
	int		iLast;
	int		iStroke;

	iLast  = 0;

	for (iStroke = 0; iStroke < cStrokes; iStroke++)
	{
	// Initialize the hits list

		memset(rgHits, '\0', cBoxes * sizeof(long));

	// Find the beginning of this stroke;

		while (!(m_rgS[iPnt] & STATE_DOWN))
			iPnt++;

	// Remember where it starts

		rgStart[iStroke] = iPnt;

	// Find it's end

		while(TRUE)
		{
			rgHits[GetBox(m_rgX[iPnt], m_rgY[iPnt])]++;

			iPnt++;

			if (!(m_rgS[iPnt] & STATE_DOWN) || (iPnt && (m_rgT[iPnt] != m_rgT[iPnt - 1] + 1)))
				break;
		}

	// Remember where it ends

		rgFinal[iStroke] = iPnt;

	// Find the box with the highest hit count, total boxes hit and first box hit

		iHigh  = 0;
		cHigh  = 0;
		cBox   = 0;
		iFirst = 0;

	// Box #0 is for strokes not in a box

		for (iBox = 1; iBox < cBoxes; iBox++)
		{
			if (rgHits[iBox] > cHigh)
			{
				iHigh = iBox;
				cHigh = rgHits[iBox];
			}	
			
			if (rgHits[iBox])
			{
				cBox++;			

				if (!iFirst)
					iFirst = iBox;
			}
		}

	// Now, remember the box of this stroke

		if (cBox == 1)
			rgMap[iStroke] = iFirst;
		else
			rgMap[iStroke] = iHigh;

	// Finally, see if this is farthest ink has gotten.

		if (rgMap[iStroke] > iLast)
			iLast = rgMap[iStroke];													   	
	}

// Bozhe moi!  We now have all the mapping info. Now, deal with half-width and other
// bizzare compatibility issues.  This can also convert the file to and from UNICODE

	CSET		cset = ((FIELDSTRING *) m_pPrompt->FieldFromName("promptstring"))->Cset();
	char	   *pszAnsi;
	wchar_t	   *pszWide;
	wchar_t		achWide[64];
	int			cchAnsi;
	int			cchWide;
	int			ich;
	int			jch;
	wchar_t		wch;

// If the FFF file isn't UNICODE and its supposed to be or visa-versa, flag an error

	if (((cset != CSET_UNICODE) && (!gri.m_cpIn)) || ((cset == CSET_UNICODE) && (gri.m_cpIn)))
	{
		MessageBox((HWND) NULL, TEXT("Incompatible FFF file found"), TEXT("File Error"), MB_ICONSTOP | MB_OK);
		free(rgHits);
		return;
	}

// If this file isn't in UNICODE, convert the buffer

	if (cset != CSET_UNICODE)
	{
		pszAnsi = (char *) ((FIELDSTRING *) m_pPrompt->FieldFromName("promptstring"))->Value();
		cchWide = MultiByteToWideChar(gri.m_cpIn, MB_PRECOMPOSED, pszAnsi, -1, NULL, 0);
		MultiByteToWideChar(gri.m_cpIn, MB_PRECOMPOSED, pszAnsi, -1, achWide, cchWide);
	}
	else
	{
		memset(achWide, 0, sizeof(achWide));
		((FIELDSTRING *) m_pPrompt->FieldFromName("promptstring"))->GetString(&cset, (char *) achWide, sizeof(achWide));
		pszWide = achWide;
	}

// Now, deal with compatibility zone glitches and remove spaces (if requested)

	cchWide = wcslen(pszWide) + 1;
	for (ich = 0, jch = 0; ich < cchWide; ich++)
	{
		wch = PartialMapFromCompZone(pszWide[ich]);

		if ((gri.m_bRemove) && ((wch == 0x0020) || (wch == 0x3000)))
			continue;

		if (!wch)
			wch = 0xfffd;

		pszWide[jch++] = wch;
	}
	cchWide = wcslen(pszWide) + 1;

// OK, if required, convert the string back to the ANSI code page

	if ((cset != CSET_UNICODE) && (gri.m_cpOut))
	{
		cchAnsi = WideCharToMultiByte(gri.m_cpIn, 0, pszWide, cchWide, NULL, 0, NULL, NULL);
		pszAnsi = (char *) malloc(cchAnsi);
		WideCharToMultiByte(gri.m_cpIn, 0, pszWide, cchWide, pszAnsi, cchAnsi, NULL, NULL);
	}

// Finally, write the corrected string back to the file.  Note that we could save UNICODE to a file
// that was previously MBCS.  We will probably NEVER do this, but heh, you could.

	if (gri.m_cpOut)
		((FIELDSTRING *) m_pPrompt->FieldFromName("promptstring"))->Set(pszAnsi);
	else
	{
		cset = CSET_UNICODE;
		((FIELDSTRING *) m_pPrompt->FieldFromName("promptstring"))->Set(CSET_UNICODE, pszWide, 2 * cchWide);
	}

// Run down the CharMappingArray and set all the information.  We will map 'geta' for 
// extra boxes without prompt characters.  

	int				iPrev;
	int				cThis;
	int				cMaps = m_pCMA->ArraySize();
	FIELDARRAYINT  *rgInkStart;
	FIELDARRAYINT  *rgInkStop;
	DATA		   *pdata;

	iBox = 1;
	ich  = 0;

	while (iBox <= iLast)
	{
		if (ich >= cMaps)
		{
			m_pCMA->SetArraySize(ich + 1);
			pdata = (pdoc->NewData("MAPPING")).Data();
			m_pCMA->SetDataAtIndex(ich, pdata);
			cMaps++;
		}
		else
			pdata = m_pCMA->DataAtIndex(ich);

	// Since we've separated the ink, wipe the status entries

		if(!pdata->FieldFromName(STATUS0))
        {
            pdata->AddField(STATUS0, FIELDLONG(0));
        }
        else
        {
            ((FIELDLONG *) pdata->FieldFromName(STATUS0))->Set(0);
        }
        
        // It's safe to assume that if STATUS1 does not exist then neither
        // do STATUS2 and STATUS3.  However, we can't assume make that assumption
        // about STATUS0 since it will exist in files seperated under the old 
        // verification scheme.

        if(!pdata->FieldFromName(STATUS1))
        {
            pdata->AddField(STATUS1, FIELDLONG(0));
            pdata->AddField(STATUS2, FIELDLONG(0));
            pdata->AddField(STATUS3, FIELDLONG(0));
        }
		else
        {
            ((FIELDLONG *) pdata->FieldFromName(STATUS1))->Set(0);
            ((FIELDLONG *) pdata->FieldFromName(STATUS2))->Set(0);
            ((FIELDLONG *) pdata->FieldFromName(STATUS3))->Set(0);
        }

		((FIELDREF *) pdata->FieldFromName("Ink"))->SetData(((FIELDREF *) m_pData->FieldFromName("Ink"))->Data());
		((FIELDREF *) pdata->FieldFromName("Prompt"))->SetData(((FIELDREF *) m_pData->FieldFromName("Prompt"))->Data());

	// Set the prompt position

		((FIELDINT *) pdata->FieldFromName("promptstart"))->Set(ich);
		((FIELDINT *) pdata->FieldFromName("promptstop"))->Set(ich);

	// Now compute the ink start and stop positions

		rgInkStart = (FIELDARRAYINT *) pdata->FieldFromName("rginkstart");
    	rgInkStop  = (FIELDARRAYINT *) pdata->FieldFromName("rginkstop");

		cThis = 0;
		rgInkStart->SetArraySize(cThis);
		rgInkStop->SetArraySize(cThis);

	// Find all the strokes associated with this box

		iPrev = -2;

		for (iStroke = 0; iStroke < cStrokes; iStroke++)
		{
		// Look for a stroke mapped to this box

			if (rgMap[iStroke] == iBox)
			{
			// If this wasn't a consecutive stroke, update the stroke array size and init the new stroke

				if ((iStroke - 1) != (iPrev))
				{
					cThis++;
					rgInkStart->SetArraySize(cThis);
					rgInkStop->SetArraySize(cThis);

				   	rgInkStart->SetIntAtIndex(cThis - 1, rgStart[iStroke]);
				}

			// Update the end of stroke information

				iPrev = iStroke;
				rgInkStop->SetIntAtIndex(cThis - 1, rgFinal[iStroke] - 1);
			}			
		}

	// If we got some ink or the character was a space, advance the character pointer

		if (cThis || (pszWide[ich] == 0x0020) || (pszWide[ich] == 0x3000))
			ich++;

	// Always go to the next box

		iBox++;
	}
		
// Clean up and go home

	if (cset != CSET_UNICODE)
		free(pszAnsi);

	free(rgMap);
	free(rgHits);
	free(rgStart);
	free(rgFinal);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\sources.inc ===
TARGETNAME=tsunami
TARGETTYPE=LIBRARY

USE_MSVCRT=1

INCLUDES= $(INCLUDES) \
          $(_TPG_ROOT)\Wisp\public\sdk\inc; \
          $(_TPG_ROOT)\hwx\tsunami\src; \
          $(_TPG_ROOT)\hwx\tsunami\dll; \
          $(_TPG_ROOT)\hwx\commonu\inc; \
          $(_TPG_ROOT)\hwx\tsunami\inc; \
          $(_TPG_ROOT)\hwx\zilla\inc; \
          $(_TPG_ROOT)\hwx\otter\inc; \
          $(_TPG_ROOT)\hwx\crane\inc; \

SOURCES= \
         ..\ttune.c \
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by all HWXxxx.RC files
// DO NOT EDIT THIS FILE
//

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        103
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\ttunep.h ===
// FILE: TTuneP.h
//
// Structures and functions internal to the library that are used to access the 
// Tsunami tuning information.


/************************************************************************************************\
 *	Stuff to access binary unigram file.
\************************************************************************************************/

// The format for the Tsunami tune file is:
//		Header:
//			DWORD				File type indicator.
//			DWORD				Size of header.
//			BYTE				Lowest version this code that can read this file.
//			BYTE				Version of this code that wrote this file.
//			wchar_t[4]			Locale ID (3 characters plus null).
//			WORD				Reserved for future use.
//			DWORD * 3			Reserved for future use.
//		Tunning values:
//			TTUNE_COSTS			Tuning value structure.
//

//
// Constants
//

// Magic key the identifies the Local Runtime files
#define	TTUNE_FILE_TYPE	0xABC123EF

// Version information for file.
#define	TTUNE_MIN_FILE_VERSION		0	// First version of code that can read this file
#define TTUNE_CUR_FILE_VERSION		0	// Current version of code.
#define	TTUNE_OLD_FILE_VERSION		0	// Oldest file version this code can read.

//
// Structures and types
//

// Structure to hold file header.
typedef struct tagTTUNE_HEADER {
	DWORD		fileType;		// This should always be set to TTUNE_FILE_TYPE.
	DWORD		headerSize;		// Size of the header.
	BYTE		minFileVer;		// Earliest version of code that can read this file
	BYTE		curFileVer;		// Current version of code that wrote the file.
	wchar_t		locale[4];		// Locale ID string.
	DWORD		dwTimeStamp;	// A creation time stamp
	BYTE		reserved1;		
	DWORD		reserved2[3];
} TTUNE_HEADER;

// Load runtime localization information from an image already loaded into
// memory.
BOOL	TTuneLoadPointer(TTUNE_INFO *pTTuneInfo, void *pData, int iSize);

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\eng\glyphsym.c ===
//
// File: glyphsym.c
//
// Contains ADT for GLYPHSYM object.
// This object is responsible for keeping the symbol
// information associated with a glyph (group of strokes).
// It invokes the classifier to get the possible symbol
// interpretation for the given ink.  Maintains this information
// for the ENGINE object to use.
//

#include "tsunamip.h"

/******************************Public*Routine******************************\
* IsSymInGLYPHSYM
*
* When looking through returned shapes we don't want to add the token
* to the list if it's already being returned.
*
* History:
*  24-Mar-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

BOOL PUBLIC IsSymInGLYPHSYM(GLYPHSYM * gs, SYM sym, int * index)
{
    UINT i;

    ASSERT(gs);
    ASSERT(index);

    *index = INDEX_NULL;

    for (i = 0; i < CSymGLYPHSYM(gs); i++)
    {
        if (sym == SymAtGLYPHSYM(gs, i))
        {
            *index = i;
            return TRUE;
        }
    }

    return FALSE;
}

// *******************************
// 
// CreateGLYPHSYM()
//
// constructor for GLYPHSYM object
//
// Arguments:  iFrame = index of the last frame in the glyph
//
// Returns:    
//
// Note:       glyph is destroyed by the object
//                                
// *******************************

VOID PUBLIC InitializeGLYPHSYM(GLYPHSYM *glyphsym, DWORD status, int iBox, GLYPH * glyph, CHARSET * cs)
{
   ASSERT(glyphsym);
   ASSERT(glyph);

   glyphsym->status = status;
   glyphsym->iLayer = -1;
   glyphsym->iBox = iBox;
   glyphsym->cFrame = CframeGLYPH(glyph);
   glyphsym->iEnd = IFrameFRAME(FrameAtGLYPH(glyph, CframeGLYPH(glyph)-1));
   glyphsym->iBegin = IFrameFRAME(FrameAtGLYPH(glyph, 0));
   ASSERT(glyphsym->iBegin >= 0);

	GetRectGLYPH(glyph, LprectGLYPHSYM(glyphsym));

	glyphsym->glyph = glyph;
}


// *******************************
//
// DestroyGLYPHSYM()
//
// destroys a glyphsym object.
//
// Arguments:  glyphsym - object to be destroyed
//
// Returns:    none
//
// Note:       none
//
// *******************************

void PUBLIC DestroyGLYPHSYM(GLYPHSYM * glyphsym)
{
    if (!glyphsym)
    {
        return;
    }

    if (glyphsym->glyph)
	{
		DestroyFramesGLYPH(glyphsym->glyph);
        DestroyGLYPH(glyphsym->glyph);
	}

    ExternFree(glyphsym);
}

// *******************************
// 
// AddFrameGLYPHSYM()
//
// changes the content of GS by adding a new frame to the glyph.
// updates all the internal fields.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************

BOOL PUBLIC AddFrameGLYPHSYM(GLYPHSYM * glyphsym, FRAME * frame, CHARSET * cs, XRC *xrc)
{
    GLYPH *glyph;

    ASSERT(frame);

    glyph = GlyphGLYPHSYM(glyphsym);

    if (glyph != NULL)
    {
        if (!AddFrameGLYPH(glyph, frame))
			return FALSE;

        GetRectGLYPH(glyph, LprectGLYPHSYM(glyphsym));

        glyphsym->iEnd = IFrameFRAME(frame);
        glyphsym->cFrame = CframeGLYPH(glyph);
        glyphsym->iBegin = IFrameFRAME(FrameAtGLYPH(glyph, 0));
        
		return TRUE;
    }
    else
    {
        WARNING(FALSE);
        return(FALSE);
    }
}

void GetNeuralProbGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc)
{
	GLYPH   *glyph = GlyphGLYPHSYM(gs);

    ASSERT(glyph);

	gs->altlist.cAlt = 0;

    TrexMatch(&gs->altlist, MAX_ALT_LIST, glyph, &(xrc->guide), &(gs->rect), gs->iBox);
}

/******************************Public*Routine******************************\
* DispatchGLYPHSYM
*
* Sends the glyph to the appropriate shape classifier.
*
* History:
*  23-Jan-1995 -by- Patrick Haluptzok patrickh
* Commented it.
\**************************************************************************/
VOID PUBLIC DispatchGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc)
{
	ASSERT(IsDirtyGLYPHSYM(gs));

    GetNeuralProbGLYPHSYM(gs, cs, xrc);

	MarkCleanGLYPHSYM(gs);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\ttunegn.c ===
/************************************************************************************************
 * FILE: TTuneGn.c
 *
 *	Code to generate runtime localization tables in a binary file.
 *
 ***********************************************************************************************/

#include <time.h>
#include <stdio.h>
#include "common.h"
#include "ttune.h"
#include "ttunep.h"


// Write a properly formated binary file containing the tuning constants.
BOOL
TTuneWriteFile(TTUNE_INFO *pTTuneInfo, wchar_t *pLocale, FILE *pFile)
{
	TTUNE_HEADER		header;
	DWORD				count;

	// Setup the header
	memset(&header, 0, sizeof(header));
	header.fileType			= TTUNE_FILE_TYPE;
	header.headerSize		= sizeof(header);
	header.minFileVer		= TTUNE_MIN_FILE_VERSION;
	header.curFileVer		= TTUNE_CUR_FILE_VERSION;
	header.locale[0]		= pLocale[0];
	header.locale[1]		= pLocale[1];
	header.locale[2]		= pLocale[2];
	header.locale[3]		= L'\0';
	header.dwTimeStamp      = (DWORD)time(NULL);
	
	memset (&header.reserved1, 0, sizeof(header.reserved1));
	memset (header.reserved2, 0, sizeof(header.reserved2));

	// Write it out.
	if (fwrite(&header, sizeof(header), 1, pFile) != 1) {
		goto error;
	}

	// write the cost structure now
	count	= 1;
	if (fwrite(pTTuneInfo->pTTuneCosts, sizeof(*pTTuneInfo->pTTuneCosts), count, pFile)
		!= count
	) {
		goto error;
	}
	
	return TRUE;
error:
	return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\ttunefl.c ===
/***********************************************************************************************\
 * FILE: TTuneFl.c
 *
 *	Code to load and unload Tsunami tunning weights from files.
\***********************************************************************************************/

#include <stdio.h>
#include "common.h"
#include "ttune.h"
#include "ttunep.h"

// Load tuning information from a file.
BOOL
TTuneLoadFile(TTUNE_INFO *pTTuneInfo, wchar_t *pPath)
{
	wchar_t			aFullName[MAX_PATH];

	// Generate path to file.
	FormatPath(aFullName, pPath, (wchar_t *)0, (wchar_t *)0, (wchar_t *)0, L"ttune.bin");

    if (!DoOpenFile(&pTTuneInfo->info, aFullName)) 
    {
        return FALSE;
    }

	// Extract info from mapped data.
	if (!TTuneLoadPointer(pTTuneInfo, pTTuneInfo->info.pbMapping, pTTuneInfo->info.iSize)) 
	{
		DoCloseFile(&pTTuneInfo->info);
		return FALSE;
	}
	return TRUE;
}

// Unload runtime localization information that was loaded from a file.
BOOL
TTuneUnloadFile(TTUNE_INFO *pTTuneInfo)
{
	return DoCloseFile(&pTTuneInfo->info);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\hwxapi\makefile.inc ===
# Rules for compiling .cfgs from .xmls
.SUFFIXES: .cfg .h .xml

{..\}.xml{$(O)}.cfg:
    copy $** $(O)
	$(_TPG_ROOT)\Tools\gc.exe -h $*.h $*.xml

# Automatic Registration
!if defined(MAKEDLL) && defined(AUTOREG)
$(TARGETNAME).cpy: $(O)\$(TARGETNAME).dll
    regsvr32 /s $** > $@
!else
$(TARGETNAME).cpy:
    echo File not registered: $** > $@
!endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\ttune.c ===
/************************************************************************************************
 * FILE: ttune.c
 *
 *	Code to load the tsunami tuning tables.
 ***********************************************************************************************/

#include <stdio.h>
#include "common.h"
#include "ttune.h"
#include "ttunep.h"

// Load unigram information from a resource.
BOOL
TTuneLoadRes(TTUNE_INFO *pTTuneInfo, HINSTANCE hInst, int nResID, int nType)
{
	BYTE		*pb;

	if (IsBadWritePtr(pTTuneInfo, sizeof(*pTTuneInfo)) || hInst == NULL)
	{
		return FALSE;
	}

	// Load the fugu database resource
	pb	= DoLoadResource(&pTTuneInfo->info, hInst, nResID, nType);
	if (!pb) 
    {
		return FALSE;
	}

	// Check the format of the resource
	return TTuneLoadPointer(pTTuneInfo, pb, pTTuneInfo->info.iSize);
}

// Load unigram information from an image already loaded into memory.
BOOL
TTuneLoadPointer(TTUNE_INFO *pTTuneInfo, void *pData, int iSize)
{
	const TTUNE_HEADER	*pHeader	= (TTUNE_HEADER *)pData;
	BYTE					*pScan;

	// Verify there is space for the header
	if (sizeof(TTUNE_HEADER) > iSize)
	{
		goto error;
	}

	// Verify that it is a valid file.
	if (
		(pHeader->fileType != TTUNE_FILE_TYPE)
		|| (pHeader->headerSize < sizeof(*pHeader))
		|| (pHeader->minFileVer > TTUNE_CUR_FILE_VERSION)
		|| (pHeader->curFileVer < TTUNE_OLD_FILE_VERSION)
	) {
		goto error;
	}

	// Fill in pointers to the other data in the file
	pScan						= (BYTE *)pData + pHeader->headerSize;
	pTTuneInfo->pTTuneCosts		= (TTUNE_COSTS *)pScan;

	// Verify that we don't point past end of the database
	if (sizeof(TTUNE_HEADER) + sizeof(TTUNE_COSTS) > iSize)
	{
		goto error;
	}

	return TRUE;

error:
	return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\reginfo.cpp ===
#include "stdafx.h"
#include "reginfo.h"

int CRegInfo::Valid()
{
	DWORD	dwRes;
	DWORD	dwType;

	if (ERROR_SUCCESS != RegCreateKeyEx(HKEY_CURRENT_USER, 
		TEXT("Software\\Microsoft\\Handwriting\\Collection"), 
		0, TEXT("REG_SZ"), REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &m_hkRoot, &dwRes))
	{
		MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
		return REGINFO_FATAL_ERROR;
	}

	dwRes = sizeof(m_szLang);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Language"), NULL, &dwType, (BYTE *) &m_szLang, &dwRes)) || (dwType != REG_SZ))
		return REGINFO_FAILURE;

	return REGINFO_SUCCESS;
}

void CRegInfo::Clean()
{
	if (m_pusers != (USERNAME *) NULL)
	{
		free(m_pusers);
		m_pusers = (USERNAME *) NULL;
	}

	if (m_pquest != (QUESTION *) NULL)
	{
		int		iQuest = 0;

		while (m_pquest[iQuest].pszQuestion)
		{
			free(m_pquest[iQuest].pszQuestion);
			iQuest++;
		}

		free(m_pquest);
		m_pquest = (QUESTION *) NULL;
	}

	RegCloseKey(m_hkRoot);
}

int	CountLines(FILE *fp)
{
	int		cLines = 0;
	char	ach[256];

	while (!feof(fp))
	{
		fgets(ach, 256, fp);
		cLines++;
	}

	fseek(fp, 0, SEEK_SET);

	return cLines;
}

void CRegInfo::ReadUserList()
{
// Open the file and count the lines

	FILE   *fp = _tfopen(m_szUser, TEXT("r"));

	if (fp == (FILE *) NULL)
		return;

	int		cUser = CountLines(fp);

	if ((m_pusers = (USERNAME *) malloc(sizeof(USERNAME) * cUser)) == (USERNAME *) NULL)
		return;

	cUser--;

// Note: the USERS.TXT file is stored in ANSI, convert to UNICODE while reading it into memory

	char	ach[256];
	int		iUser;
	int		cch;
	int		ich;

	for (iUser = 0; iUser < cUser; iUser++)
	{
		fgets(ach, 256, fp);
		cch = strlen(ach) - 1;				// Trim the NEWLINE

		for (ich = 0; ich < cch; ich++)
			m_pusers[iUser][ich] = (TCHAR) ach[ich];

		m_pusers[iUser][cch] = (TCHAR) 0;
	}

	m_pusers[cUser][0] = 0;					// Terminates the list
	fclose(fp);
}

void CRegInfo::ReadQuestionList()
{

// Open the file and count the lines
	FILE   *fp = _tfopen(m_szQuest, TEXT("r"));

	if (fp == (FILE *) NULL)
		return;

	int		cQuest = CountLines(fp);

	if ((m_pquest = (QUESTION *) malloc(sizeof(QUESTION) * cQuest)) == (QUESTION *) NULL)
		return ;

	cQuest--;

// Note: the QUEST.TXT file is stored in ANSI, convert to UNICODE while reading it into memory

	char	ach[256];
	char   *pch;
	int		iQuest;
	int		cch;
	int		ich;
	int		jch;

	for (iQuest = 0; iQuest < cQuest; iQuest++)
	{
	// Set the index

		m_pquest[iQuest].nIndex = iQuest;

	// Read the question from the file

		fgets(ach, 256, fp);
		cch = strlen(ach) - 1;				
		ach[cch] = '\0';					// Trim the NEWLINE

	// The question is stored in the form LONG FORM OF QUESTION TEXT%SHORT FORM%BOOLEAN
	// Find the first % character

		pch = strchr(ach, '%');

	// Added 11/17/97 by JCG a-jglen
	// added code to catch a corrupt or invalid question file

		if(pch == NULL) {
			//this question file is corrupt or invalid
			m_pquest = NULL;
			fclose(fp);
			return;
		}

		jch = pch - &ach[0];

		m_pquest[iQuest].pszQuestion = (TCHAR *) malloc(sizeof(TCHAR) * (jch + 2));

		for (ich = 0; ich < jch; ich++)
			m_pquest[iQuest].pszQuestion[ich] = (TCHAR) ach[ich];

		m_pquest[iQuest].pszQuestion[jch] = (TCHAR) 0;

	// Now, point to the beginning of the short form of the question and copy it into the question array

		jch++;
		for (ich = 0; ich < 5; ich++)
			m_pquest[iQuest].szShort[ich] = (TCHAR) ach[jch++];

		m_pquest[iQuest].szShort[5] = (TCHAR) 0;

	// Finally, point to the boolean and look at the first character

		jch++;
		m_pquest[iQuest].bYesDefault = ach[jch] == 'T';
	}

	m_pquest[cQuest].pszQuestion = (TCHAR *) NULL;
	fclose(fp);

	return;
}

BOOL CRegInfo::Fetch()
{
	if (m_hkRoot == (HKEY) NULL)
	{
		MessageBox((HWND) NULL, TEXT("Unable to fetch registry"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
		return FALSE;
	}

	DWORD	dwRes;
	DWORD	dwType;

	dwRes = sizeof(m_szInstall);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Install Root"), NULL, &dwType, (BYTE *) &m_szInstall, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szInstall, TEXT("c:\\unitools\\"));

	dwRes = sizeof(m_szLang);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Language"), NULL, &dwType, (BYTE *) &m_szLang, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szLang, TEXT("English (USA)"));

	dwRes = sizeof(m_szRecog);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Recognizer"), NULL, &dwType, (BYTE *) &m_szRecog, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szRecog, TEXT("HWXUSA.DLL"));

	dwRes = sizeof(m_szFont);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Font"), NULL, &dwType, (BYTE *) &m_szFont, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szFont, TEXT("Arial"));

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Character Set"), NULL, &dwType, (BYTE *) &m_cset, &dwRes)) || (dwType != REG_DWORD))
		m_cset = 0;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("HWX Codepage"), NULL, &dwType, (BYTE *) &m_cpRecog, &dwRes)) || (dwType != REG_DWORD))
		m_cpRecog = 0;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("FFF Input"), NULL, &dwType, (BYTE *) &m_cpIn, &dwRes)) || (dwType != REG_DWORD))
		m_cpIn = 0;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("FFF Output"), NULL, &dwType, (BYTE *) &m_cpOut, &dwRes)) || (dwType != REG_DWORD))
		m_cpOut = m_cpIn;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Keyboard"), NULL, &dwType, (BYTE *) &m_cpKbd, &dwRes)) || (dwType != REG_DWORD))
		m_cpKbd = 0;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Display"), NULL, &dwType, (BYTE *) &m_cpScr, &dwRes)) || (dwType != REG_DWORD))
		m_cpScr = 0;

	dwRes = sizeof(m_szUser);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("User File"), NULL, &dwType, (BYTE *) &m_szUser, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szUser, TEXT("users.txt"));

	dwRes = sizeof(m_szQuest);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Question File"), NULL, &dwType, (BYTE *) &m_szQuest, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szQuest, TEXT("quest.txt"));

	dwRes = sizeof(m_szLocal);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Local Root"), NULL, &dwType, (BYTE *) &m_szLocal, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szLocal, TEXT("\\"));

	dwRes = sizeof(m_szNetwork);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Network Root"), NULL, &dwType, (BYTE *) &m_szNetwork, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szNetwork, TEXT("\\\\"));

	dwRes = sizeof(m_szScript);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Current Script"), NULL, &dwType, (BYTE *) &m_szScript, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szScript, TEXT("scrip000.sct"));

	dwRes = sizeof(m_szStation);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Station"), NULL, &dwType, (BYTE *) &m_szStation, &dwRes)) || (dwType != REG_SZ))
		_tcscpy(m_szStation, TEXT("RD"));

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Remove Spaces"), NULL, &dwType, (BYTE *) &m_bRemove, &dwRes)) || (dwType != REG_DWORD))
		m_bRemove = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Use Context"), NULL, &dwType, (BYTE *) &m_bContext, &dwRes)) || (dwType != REG_DWORD))
		m_bContext = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("ALC"), NULL, &dwType, (BYTE *) &m_dwALC, &dwRes)) || (dwType != REG_DWORD))
		m_dwALC = 0;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Verify (safe)"), NULL, &dwType, (BYTE *) &m_bVerifySafe, &dwRes)) || (dwType != REG_DWORD))
		m_bVerifySafe = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Verify (unsafe)"), NULL, &dwType, (BYTE *) &m_bVerifyUnsafe, &dwRes)) || (dwType != REG_DWORD))
		m_bVerifyUnsafe = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Verify 2"), NULL, &dwType, (BYTE *) &m_bVerify2, &dwRes)) || (dwType != REG_DWORD))
		m_bVerify2 = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Reconcile"), NULL, &dwType, (BYTE *) &m_bReconcile, &dwRes)) || (dwType != REG_DWORD))
		m_bReconcile = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Special"), NULL, &dwType, (BYTE *) &m_bSpecial, &dwRes)) || (dwType != REG_DWORD))
		m_bSpecial = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Batch"), NULL, &dwType, (BYTE *) &m_bBatch, &dwRes)) || (dwType != REG_DWORD))
		m_bBatch = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Vertical Margin"), NULL, &dwType, (BYTE *) &m_cyMargin, &dwRes)) || (dwType != REG_DWORD))
		m_cyMargin = 1;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Horizontal Margin"), NULL, &dwType, (BYTE *) &m_cxMargin, &dwRes)) || (dwType != REG_DWORD))
		m_cxMargin = 4;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Vertical Guides"), NULL, &dwType, (BYTE *) &m_cyGuides, &dwRes)) || (dwType != REG_DWORD))
		m_cyGuides = 3;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Horizontal Guides"), NULL, &dwType, (BYTE *) &m_cxGuides, &dwRes)) || (dwType != REG_DWORD))
		m_cxGuides = 8;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Vertical Gap"), NULL, &dwType, (BYTE *) &m_cyGap, &dwRes)) || (dwType != REG_DWORD))
		m_cyGap = 1;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Horizontal Gap"), NULL, &dwType, (BYTE *) &m_cxGap, &dwRes)) || (dwType != REG_DWORD))
		m_cxGap = 1;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Interval"), NULL, &dwType, (BYTE *) &m_cInterval, &dwRes)) || (dwType != REG_DWORD))
		m_cInterval = 10;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Allowance"), NULL, &dwType, (BYTE *) &m_cAllow, &dwRes)) || (dwType != REG_DWORD))
		m_cAllow = 0;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Alternate"), NULL, &dwType, (BYTE *) &m_cAlts, &dwRes)) || (dwType != REG_DWORD))
		m_cAlts = 1;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Retry Limit"), NULL, &dwType, (BYTE *) &m_cRetry, &dwRes)) || (dwType != REG_DWORD))
		m_cRetry = 1;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Midline"), NULL, &dwType, (BYTE *) &m_bMidline, &dwRes)) || (dwType != REG_DWORD))
		m_bMidline = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Baseline"), NULL, &dwType, (BYTE *) &m_bBaseline, &dwRes)) || (dwType != REG_DWORD))
		m_bBaseline = FALSE;

	dwRes = sizeof(DWORD);
	if ((ERROR_SUCCESS != RegQueryValueEx(m_hkRoot, TEXT("Word Wrap"), NULL, &dwType, (BYTE *) &m_bWrap, &dwRes)) || (dwType != REG_DWORD))
		m_bWrap = FALSE;

// Now, load the user and questions lists into memory
	
	ReadUserList();
	ReadQuestionList();

// Added 12/09.97 JCG a-jglen
// Make sure all the codepages are installed in the system
	
	TCHAR szWarningString[256];

	if(m_cpIn)
	{
		if(!IsValidCodePage(m_cpIn))
		{
			wsprintf(szWarningString, TEXT("CodePage %d is not installed on your system."), m_cpIn);
			MessageBox(NULL, szWarningString, TEXT("Warning..."), MB_ICONEXCLAMATION | MB_OK);
			return TRUE;
		
		}
	}

	if(m_cpOut)
	{
		if(!IsValidCodePage(m_cpOut))
		{
			wsprintf(szWarningString, TEXT("CodePage %d is not installed on your system."), m_cpOut);
			MessageBox(NULL, szWarningString, TEXT("Warning..."), MB_ICONEXCLAMATION | MB_OK);
			return TRUE;
		
		}
	}

	if(m_cpRecog)
	{
		if(!IsValidCodePage(m_cpRecog))
		{
			wsprintf(szWarningString, TEXT("CodePage %d is not installed on your system."), m_cpRecog);
			MessageBox(NULL, szWarningString, TEXT("Warning..."), MB_ICONEXCLAMATION | MB_OK);
			return TRUE;
		
		}
	}

	if(m_cpKbd)
	{
		if(!IsValidCodePage(m_cpKbd))
		{
			wsprintf(szWarningString, TEXT("CodePage %d is not installed on your system."), m_cpKbd);
			MessageBox(NULL, szWarningString, TEXT("Warning..."), MB_ICONEXCLAMATION | MB_OK);
			return TRUE;
		
		}
	}

	if(m_cpScr)
	{
		if(!IsValidCodePage(m_cpScr))
		{
			wsprintf(szWarningString, TEXT("CodePage %d is not installed on your system."), m_cpScr);
			MessageBox(NULL, szWarningString, TEXT("Warning..."), MB_ICONEXCLAMATION | MB_OK);
			return TRUE;
		
		}
	}

	return TRUE;
}

BOOL CRegInfo::Store(int nMask)
{
	DWORD	dwRes;

	if (nMask & REGINFO_STORE_INSTALL)
	{
		dwRes = sizeof(TCHAR) * (_tcslen(m_szInstall) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Install Root"), NULL, REG_SZ, (BYTE *) m_szInstall, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}
	}

	if (nMask & REGINFO_STORE_COMMON)
	{
		dwRes = sizeof(TCHAR) * (_tcslen(m_szLocal) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Local Root"), NULL, REG_SZ, (BYTE *) m_szLocal, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = sizeof(TCHAR) * (_tcslen(m_szNetwork) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Network Root"), NULL, REG_SZ, (BYTE *) m_szNetwork, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = sizeof(TCHAR) * (_tcslen(m_szLang) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Language"), NULL, REG_SZ, (BYTE *) m_szLang, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = sizeof(TCHAR) * (_tcslen(m_szRecog) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Recognizer"), NULL, REG_SZ, (BYTE *) m_szRecog, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = sizeof(TCHAR) * (_tcslen(m_szFont) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Font"), NULL, REG_SZ, (BYTE *) m_szFont, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cset;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Character Set"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cpRecog;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("HWX Codepage"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cpIn;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("FFF Input"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cpOut;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("FFF Output"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cpKbd;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Keyboard"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cpScr;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Display"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}
	}

	if (nMask & REGINFO_STORE_SEPARATOR)
	{
		dwRes = sizeof(TCHAR) * (_tcslen(m_szUser) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("User File"), NULL, REG_SZ, (BYTE *) m_szUser, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = sizeof(TCHAR) * (_tcslen(m_szQuest) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Question File"), NULL, REG_SZ, (BYTE *) m_szQuest, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bVerifySafe;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Verify (safe)"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bVerifyUnsafe;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Verify (unsafe)"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bVerify2;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Verify 2"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bReconcile;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Reconcile"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bBatch;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Batch"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bSpecial;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Special"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bRemove;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Remove Spaces"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}
	}

	if (nMask & REGINFO_STORE_COLLECTOR)
	{
		dwRes = sizeof(TCHAR) * (_tcslen(m_szScript) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Current Script"), NULL, REG_SZ, (BYTE *) m_szScript, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = sizeof(TCHAR) * (_tcslen(m_szStation) + 1);
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Station"), NULL, REG_SZ, (BYTE *) m_szStation, dwRes))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cxMargin;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Horizontal Margin"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cyMargin;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Vertical Margin"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cxGuides;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Horizontal Guides"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cyGuides;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Vertical Guides"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cxGap;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Horizontal Gap"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cyGap;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Vertical Gap"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cInterval;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Interval"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cAllow;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Allowance"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cAlts;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Alternate"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_cRetry;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Retry Limit"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bMidline;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Midline"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bBaseline;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Baseline"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}

		dwRes = m_bWrap;
		if (ERROR_SUCCESS != RegSetValueEx(m_hkRoot, TEXT("Word Wrap"), NULL, REG_DWORD, (BYTE *) &dwRes, sizeof(DWORD)))
		{
			MessageBox((HWND) NULL, TEXT("Unable to create registry key"), TEXT("Fatal Application Error"), MB_ICONSTOP | MB_OK);
			return FALSE;
		}
	}

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\eng\tsunamip.h ===
// Private includes for TSUNAMI.  This should include all the internal data types
// as well as including all recognizers used by TSUNAMI class products

#ifndef	__INCLUDE_TSUNAMIP
#define	__INCLUDE_TSUNAMIP

#include "common.h"
#include "tsunami.h"
#include "trex.h"
#include "dict.h"

// This defines the value we decide to use the Zilla recognizer

#define	TSUNAMI_USE_ZILLA	3

// Private API for training/tuning

int  WINAPI GetPrivateRecInfoHRC(HRC, WPARAM, LPARAM);
int  WINAPI SetPrivateRecInfoHRC(HRC, WPARAM, LPARAM);
BOOL LoadRecognizer(VOID);
VOID UnloadRecognizer(VOID);

// This structure is used by the training/tuning APIs

typedef struct tagRECCOSTS
{
    // Weights for Viterbi search.  We have seperate weights for
    // both Char and String.  We then have seperate weights for
    // both Mars and Zilla since the range of the scores returned by
    // each classifier might vary greatly.  Also 1 and 2 stroke chars
    // probably would weight b/h more that the multi-stroke chars do.

    FLOAT BigramWeight;
    FLOAT DictWeight;
    FLOAT AnyOkWeight;
    FLOAT StateTransWeight;
    FLOAT NumberWeight;
    FLOAT BeginPuncWeight;
    FLOAT EndPuncWeight;

    // Char Weights

    FLOAT CharUniWeight;          // mult weight for unigram cost
    FLOAT CharBaseWeight;         // mult weight for baseline
    FLOAT CharHeightWeight;       // mult weight for height transition between chars.
    FLOAT CharBoxBaselineWeight;  // mult weight for baseline cost given the baseline and
                                  // size of box they were given to write in.
    FLOAT CharBoxHeightWeight;    // mult weight for height/size cost given size of box
                                  // they were supposed to write in.
    // String Weights

    FLOAT StringUniWeight;          // mult weight for unigram cost
    FLOAT StringBaseWeight;         // mult weight for baseline
    FLOAT StringHeightWeight;       // mult weight for height transition between chars.
    FLOAT StringBoxBaselineWeight;  // mult weight for baseline cost given the baseline and
                                    // size of box they were given to write in.
    FLOAT StringBoxHeightWeight;    // mult weight for height/size cost given size of box
                                    // they were supposed to write in.
} RECCOSTS;

// These are internal defines that have no clear home.  Many came from the old primitiv.h
// file, but that is no longer appropriate.

#define	PROCESS_IDLE		0
#define	PROCESS_READY		1
#define	PROCESS_OK			2
#define	PROCESS_EXIT		3
#define	PROCESS_TIMEOUT		4
#define	PROCESS_GESTURE		5

#define  PRI_WEIGHT       (WPARAM) 0
#define  PRI_GUIDE        (WPARAM) 1
#define  PRI_GLYPHSYM     (WPARAM) 2
#define  PRI_SIGMA        (WPARAM) 3

#define COST_ZERO				((FLOAT)  0.0)
#define COST_FORCE				((FLOAT)  2.0)
#define COST_ADJUST_PRIORITY	((FLOAT)  2.0)
#define COST_REJECT				((FLOAT)  3.0)
#define COST_UNKNOWN			((FLOAT) -1.0)
#define	COST_MAXIMUM			((FLOAT)  10000.0)
#define	COST_MINIMUM			((FLOAT) -10000.0)

#define DbcsResultsCHARSET(cs, csDef)								\
			(((cs)->recmaskPriority & RECMASK_GLOBALPRIORITY) ?		\
			(((csDef)->recmaskPriority & RECMASK_DBCS) != 0) :		\
			(((cs)->recmaskPriority & RECMASK_DBCS) != 0))

#define RecmaskPriorityCHARSET(cs, csDef)                                                               \
			(((cs)->recmaskPriority & RECMASK_GLOBALPRIORITY) ?     \
			(csDef)->recmaskPriority :                                                                              \
			(cs)->recmaskPriority)

// This includes all the internal engine data types.  This list is VERY 
// sensitive to order.  Change this under GREAT risk of personal harm 
// or worse yet, ridicule by your peers.

#include "height.h"
#include "glyphsym.h"
#include "path.h"
#include "xrc.h"
#include "input.h"
#include "xrcparam.h"
#include "sinfo.h"
#include "pathsrch.h"
#include "engine.h"
#include "global.h"
#include "bigram.h"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\engine.h ===
#ifndef	__INCLUDE_ENGINE
#define	__INCLUDE_ENGINE

// The ENGINE object has been moved directly into the XRC object [donalds] 02-05-97

void PUBLIC InitializeENGINE(XRC *xrc);
int  PUBLIC ProcessENGINE(XRC *xrc, BOOL fEnd, BOOL bComplete);
BOOL PUBLIC IsDoneENGINE(XRC *xrc);
int  PUBLIC GetBoxResultsENGINE(XRC *xrc, int cAlt, int iSyv, LPBOXRESULTS lpboxres, BOOL fInkset);

#define IncRefcountENGINE(a)    ((a)->refcount++)
#define DecRefcountENGINE(a)    ((a)->refcount--)

#define CResultENGINE(xrc)        (CResultPATHSRCH((xrc)->pathsrch))
#define ResultENGINE(xrc, i)      (ResultPATHSRCH((xrc)->pathsrch, i))

#endif	//__INCLUDE_ENGINE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\bidata.c ===
#include "tsunamip.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\bigram.h ===
/* Structure containing second half of Bigram info */

typedef struct BIGRAM {
	unsigned char wch; 	// second char of bigram, 0 == unknown
	unsigned char prob;	// conditional probability
} BIGRAM, FAR *PBIGRAM;

typedef struct CHARACTER {
	unsigned short wch;	// first character of bigram, 0 == unknown
	unsigned short iBigram;	// index into BIGRAM array for first bigram. (last is always 0).
} CHARACTER, FAR *PCHARACTER;

FLOAT BigramTransitionCost(unsigned char wchPrev, int iBoxPrev, unsigned char wch, int iBox);

extern const int cBigramCharacters;
extern const BIGRAM FAR rgBigrams[];
extern const CHARACTER FAR rgCharacter[];
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\dict.c ===
#include "tsunamip.h"
#include "xjis.h"
#include "unicode.h"
#include "dict.h"
#include "trie.h"
#include "tchar.h"

LPTRIECTRL lpTrieCtrl = NULL;
LPBYTE gBaseAddress = NULL;
HANDLE ghFile = INVALID_HANDLE_VALUE;
HANDLE ghMap = INVALID_HANDLE_VALUE;

void TrieDecompressNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

#define StateToFlags(state) ((WORD)((0xFF000000 & state) >> 24))
#define StateToAddress(state) ((LPBYTE)(gBaseAddress + (DWORD)(state & 0x00FFFFFF)))
#define FlagsToState(flags) ((DWORD)(((BYTE)flags) << 24))
#define AddressToState(address) (DWORD)((address) ? (address) - gBaseAddress : 0x00FFFFFF)

/*******************************************************************************
BOOL DictFinalState(DWORD state)
	- given a state, return TRUE iff it is the end of a word
********************************************************************************/

BOOL DictFinalState(DWORD state)
{
	return StateToFlags(state) & fTrieNodeValid ? 1 : 0;
}


BOOL DictionaryValidState(const PATHNODE * const pNode)
{
	return DictFinalState(pNode->state);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\dict.h ===
#include "common.h"
#include "glyphsym.h"

void *LoadDictionary(HINSTANCE hInst);
void FreeDictionary(void);

//DWORD DictNextState(DWORD state, wchar_t wch);
//BOOL DictFinalState(DWORD state);

int StartDictionary(wchar_t wch, PATHNODE *rgPathNode, int cMaxNode);
BOOL DictionaryNextState(const PATHNODE * const pNode,
						wchar_t wch,
						PATHNODE *pNextNode);

BOOL DictionaryValidState(const PATHNODE * const pNode);
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\engine.c ===
//
// File: engine.c
//
// Contains the ADT for ENGINE object.
// The ENGINE object is one of the main objects
// that is pointed to by the HRC object and is
// responsible for performing the viterbi and A*
// searchs as well as packaging up the results.
//

#include "tsunamip.h"

// *******************************
// 
// IsDoneENGINE()
//
// checks the processing state of the engine
//
// Arguments:  
//
// Returns:    returns TRUE iff engine does not have any more processing left
//
// Note:       none
//                                
// *******************************

BOOL IsDoneENGINE(XRC *xrc)
{
	ASSERT(xrc);

	if (!FBoxedInputXRCPARAM(xrc))
		return(TRUE);

	if (xrc->fUpdate)
		return(FALSE);

	if (IsDonePATHSRCH(xrc))
		return(TRUE);

	return(FALSE);
}

// *******************************
// 
// ProcessENGINE()
//
// perform one granularity of Viterbi & A* search
//
// Arguments:  
//
// Returns:    PROCESS_IDLE if no work was done
//             PROCESS_READY if finished doing some work
//
// Note:       none
//                                
// *******************************

int PUBLIC ProcessENGINE(XRC *xrc, BOOL fEndOfInk, BOOL bComplete)
{
    int		ret;
    FRAME  *frame = NULL;

    ASSERT(xrc);

    if (CFrameProcessedSINFO(xrc) == 0)
        return(PROCESS_IDLE);

// See if we have any glyphsyms ready to be recognized.

    if (xrc->fUpdate)
    {
        GLYPHSYM *gs;

        if (fEndOfInk)
        {
            // Start at the last box, clean them all.

            gs = GetGlyphsymSINFO(xrc, CLayerSINFO(xrc) - 1);
        }
        else
        {
            //
            // Start at the box in front of the last box to get ink added and
            // clean up all the glyphsyms from there forward.
            //

            gs = xrc->gsLastInkAdded;
            ASSERT(gs);

            gs = GetPrevGLYPHSYM(xrc->gsLastInkAdded);
            xrc->gsLastInkAdded = NULL;
        }

        while (gs)
        {
            if (IsDirtyGLYPHSYM(gs))
            {
                DispatchGLYPHSYM(gs, CharsetSINFO(xrc), xrc);

                //
                // If we already have glyphs with updated information only update
                // gsMinUpdated if we are any glyph before it.  The path search code treats
                // gsMinUpdated as the earliest glyph in the input that has been changed.
                //
                
                if (ILayerGLYPHSYM(gs) < CLayerPATHSRCH(xrc))
                {
                    xrc->cLayer = ILayerGLYPHSYM(gs);
                }

                if (xrc->gsMinUpdated)
                {
                    if (ILayerGLYPHSYM(gs) < ILayerGLYPHSYM(xrc->gsMinUpdated))
                    {
                        xrc->gsMinUpdated = gs;
                    }
                }
                else
                {
                    xrc->gsMinUpdated = gs;
                }
            }

            gs = GetPrevGLYPHSYM(gs);
        }

        xrc->fUpdate = FALSE;  // We no longer have any glyphsyms to process.
    }

    //
    // All of the glyphsyms have been updated now, do the path work.
    //

    if (!FBoxedInputXRCPARAM(xrc))
        return(PROCESS_IDLE);

    ret = PROCESS_READY;

    while (ret == PROCESS_READY)
    {
        ret = ProcessPATHSRCH(xrc);
    }

    return(ret);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\eng\hwx.c ===
/******************************Module*Header*******************************\
* Module Name: hwx.c
*
* Don has a simpler restricted functionality API that he has written for
* KIME/MITSU to use that does boxed character recognition.
*
* I've #ifdefed out the code KIME doesn't need and I've added those
* new API's here as a wrapper for the old API's.  This way our development
* DLL can run with KIME/MITSU.
*
* Created: 15-Feb-1996 12:23:42
* Author: Patrick Haluptzok patrickh
*
* Copyright (c) 1996 Microsoft Corporation
\**************************************************************************/

#include "tsunamip.h"

#if defined(DBG)
BOOL bLogEverything = FALSE;  // Logs what is going on everywhere.
#endif

// iUseCount tells if we have successfully loaded and is incremented to 1 when that happens.

int iUseCount = 0;

// hInstanceDll is refered to to load resources.

HINSTANCE hInstanceDll;

//////////////////   Local functions

BOOL WINAPI DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
	if (dwReason == DLL_PROCESS_DETACH)
	{
		return(TRUE);
	}

	hInstanceDll = hDll;
	return((int) TRUE);
}

VOID PRIVATE UnloadRecognizer(VOID)
{
	if (iUseCount == 0)
		return;

    DestroyGLOBAL();
    iUseCount = 0;
}

/******************************Public*Routine******************************\
* HwxConfig
*
* Initialize the recognizer when it loads.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

BOOL WINAPI HwxConfig()
{
    BOOL  fLoad = TRUE;

	if (iUseCount == 1)
		return(TRUE);

    //
    // Initialize the handle table, otter, zilla and cart
    //

    if (InitGLOBAL() &&
		((void *) NULL != TrexLoad(hInstanceDll, 0, 0)) &&
        ((void *) NULL != LoadDictionary(hInstanceDll)))
	{
		iUseCount = 1;
	}
	else
	{
        if (!fLoad)
            UnloadRecognizer();

		iUseCount = 0;
	}

    return (iUseCount);
}

/******************************Public*Routine******************************\
* HwxCreate
*
* Create an HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

HRC WINAPI HwxCreate(HRC hrctemplate)
{
	XRC	   *xrc;
	XRC	   *xrctemplate = (XRC *) hrctemplate;

	if (xrctemplate && !VerifyHRC(xrctemplate))
		return((HRC) NULL);

	xrc = ExternAlloc(sizeof(XRC));

	if (!xrc)
		return (HRC) NULL;

	if (!InitializeXRC(xrc, xrctemplate, NULL))
	{
		DestroyXRC(xrc);
		return (HRC) NULL;
	}

	return (HRC) xrc;
}

/******************************Public*Routine******************************\
* HwxDestroy
*
* Destroy an HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxDestroy(HRC hrc)
{
	XRC	   *xrc = (XRC *) hrc;

	if (!VerifyHRC(xrc))
		return HRCR_ERROR;

	DestroyXRC(xrc);

	return HRCR_OK;
}

/******************************Public*Routine******************************\
* HwxSetGuide
*
* Sets the guide structure to use.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxSetGuide(HRC hrc, GUIDE *lpguide, UINT nFirstVisible)
{
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return(HRCR_ERROR);

   return(SetGuideXRC(xrc, lpguide, nFirstVisible));
}

/******************************Public*Routine******************************\
* HwxSetAlphabet			
*
* Tells what character sets to prefer.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxSetAlphabet(HRC hrc, ALC alc)
{
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return HRCR_ERROR;

    return(SetAlphabetXRC(xrc, alc, NULL));
}


/******************************Public*Routine******************************\
* HwxProcess
*
* Process the ink and return the results.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxProcess(HRC hrc)
{
    int     iRet;
    XRC *   xrc = (XRC *)hrc;

    //
    // Search a linear list of pointers we have given out and see if this is
    // one of them.  By design we hand out pointers and the first dword is used
    // by penwin to write in.
    //

    if (!VerifyHRC(xrc))
    {
        return HRCR_ERROR;
    }

    //
    // Once Process HRC is called we set the BeginProcess flag to
    // TRUE which causes any API calls that try to change the
    // recognition settings (ALC,GUIDE,MAXRESULTS,etc) to fail.
    //

    SetBeginProcessXRCPARAM(xrc, TRUE);

    iRet = SchedulerXRC(xrc);

    return(iRet);
}

/******************************Public*Routine******************************\
* HwxEndInput
*
* No more ink is coming (or can be added) once this is called.
*
* History:
*  27-Mar-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxEndInput(HRC hrc)
{
    XRC *   xrc = (XRC *)hrc;

    if (!VerifyHRC(xrc))
    {
        return HRCR_ERROR;
    }

    SetEndInputXRC(xrc, TRUE);  // Sets the fEndInput to TRUE in XRCPARAM.
    xrc->fUpdate = TRUE;		// Let's engine know we have to clean up glyphsyms.

    return HRCR_OK;
}


/******************************Public*Routine******************************\
* HwxInput
*
* Add Ink to the HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxInput(HRC hrc, POINT  *lppnt, STROKEINFO *lpsi)
{
    DWORD dwDuration;
    int iRet;
    XRC *xrc = (XRC *) hrc;

    if (!VerifyHRC(xrc) || IsEndOfInkXRC(xrc))
    {
        return(HRCR_ERROR);
    }

    ASSERT(xrc);

    ASSERT(NSamplingRateGlobal());

    dwDuration = ((DWORD)lpsi->cPnt * 1000) / (DWORD)NSamplingRateGlobal();

    if (AddPenInputINPUT(xrc, lppnt, lpsi, (UINT)dwDuration))
    {
        iRet = HRCR_OK;
    }
    else
    {
        iRet = HRCR_ERROR;
    }

	return(iRet);
}

/******************************Public*Routine******************************\
* HwxGetResults
*
* Returns the results from the recognizer.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxGetResults(HRC hrc, UINT cAlt, UINT iSyv, UINT cBoxRes, BOXRESULTS *rgBoxResults)
{
   XRC   *xrc = (XRC *)hrc;

   if (!VerifyHRC(xrc) ||
		 rgBoxResults == NULL)
        return(HRCR_ERROR);

    return(GetBoxResultsXRC(xrc, cAlt, iSyv, cBoxRes, rgBoxResults, FALSE));
}

/******************************Public*Routine******************************\
* HwxSetContext
*
* Handwriting recognition performance can be improved if the recognizer has context
* information available during processing.  Context information is added to an HRC
* via the HwxSetContext function which provides one character of prior context for
* the recognizer.  This function should be called prior to using the HwxProcess
* function.
*
* Remarks
* If this function is not called, the recognizer will assume that no prior context
* is available.  Performance of the recognizer is improved if context can be
* provided.  Currently this function improves performance only for the first
* character in the HRC.  If the HRC contains ink for multiple characters,
* the recognition process itself will provide context information for characters
* after the first character, but no context information is available for the first
* character in the HRC unless it is provided via the HwxSetContext function.
* This is especially important for situations where ink are recognized one
* character at a time.
*
* History:
*  09-Apr-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxSetContext(HRC hrc, WCHAR wchContext)
{
	XRC	   *xrc = (XRC *) hrc;

	// Validate the XRC and that context setting is still allowed on this XRC.

	if (!VerifyHRC(xrc) || FBeginProcessXRCPARAM(xrc))
	{
		return(HRCR_ERROR);
	}

	// Validate context character input

	if ((wchContext < 0x8140) || (wchContext > 0xEEF0))
	{
#ifdef DBG
		wsprintf(szDebugString, __TEXT("HwxSetContext invalid context char[%lx]\r\n"), (DWORD) wchContext);
		OutputDebugString(szDebugString);
#endif
		return(HRCR_ERROR);
	}

	xrc->symPrev = wchContext;

	return HRCR_OK;
}

/******************************Public*Routine******************************\
* HwxResultsAvailable
*
* Warnings: This assumes the writer can't go back and touch up previous
* characters.
*
* Returns the number of characters that can be gotten and displayed safely
* because the viterbi search has folded to one path at this point.
*
* Return the number of characters available in the
* path that are ready to get.  This API looks at the viterbi search and
* any characters far enough back in the input that all the paths merge
* to 1 are done and can be displayed because nothing further out in the
* input will change the best path back once it's merged to a single path.
*
* History:
*  15-Jan-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxResultsAvailable(HRC hrc)
{
    GLYPHSYM   *glyphsymCurr;
    GLYPHSYM   *glyphsymBack;
    XRC		   *xrc = (XRC *) hrc;
    int        iPath, cChosen, iLayer;
    wchar_t    wch;

    //
    // Search a linear list of pointers we have given out and see if this is
    // one of them.  By design we hand out pointers and the first dword is used
    // by penwin to write in.
    //

    if (!VerifyHRC(xrc))
    {
        return(0);
    }

    iPath = min(CLayerProcessedSINFO(xrc), CLayerPATHSRCH(xrc));

    if (iPath == 0)
    {
        return(0);
    }

    if (IsEndOfInkXRC(xrc))
    {
        //
        // Well if they have called end of ink we can give them at least
        // this much.  If they haven't called HwxProcess yet it may not
        // be all the characters.
        //

        return(iPath);
    }

    ASSERT(iPath <= xrc->cQueue);

    glyphsymCurr = xrc->ppQueue[iPath - 1];

    ASSERT(glyphsymCurr);

    memset(glyphsymCurr->rgReferenced, 0xff, MAX_PATH_LIST * sizeof(char));

    while (glyphsymBack = glyphsymCurr->prev)
    {
        memset(glyphsymBack->rgReferenced, 0, MAX_PATH_LIST * sizeof(char));

        //
        // Mark who is pointed to in the previous layer.
        //

        cChosen = 0;

        for (iPath = 0; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                glyphsymBack->rgReferenced[glyphsymCurr->rgPathnode[iPath].indexPrev] = 1;
                cChosen += 1;
            }
        }

        if (cChosen <= 1)
        {
            return(glyphsymBack->iLayer + 1);
        }

		glyphsymCurr = glyphsymBack;
    }

    //
    // Well we weren't so lucky to converge to 1 path by now, but we really didn't expect to.
    // We need to start at the beginning and look for glyphsyms where all paths converge to the
    // same character.
    //

    cChosen = min(CLayerProcessedSINFO(xrc), CLayerPATHSRCH(xrc));

    ASSERT(cChosen <= xrc->cQueue);

    for (iLayer = 0; iLayer < cChosen; iLayer++)
    {
        glyphsymCurr = xrc->ppQueue[iLayer];

        //
        // Look for the first valid pathnode and record it's label.
        //

        for (iPath = 0; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                wch = glyphsymCurr->rgPathnode[iPath].wch;
                break;
            }
        }

        //
        // Now see if any other valid node has a different label.
        //

        for (; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                if (wch != glyphsymCurr->rgPathnode[iPath].wch)
                {
                    return(iLayer);
                }
            }
        }
    }

    return(iLayer);
}

int WINAPI HwxSetPartial(HRC hrc, DWORD dw)
{
    return HRCR_ERROR;
}

int WINAPI HwxSetAbort(HRC hrc, DWORD *pdw)
{
    return HRCR_ERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\height.h ===
#ifndef	__INCLUDE_HEIGHT
#define	__INCLUDE_HEIGHT

#ifdef __cplusplus
extern "C" {
#endif

#define TYPE_BASE_MASK		(BYTE)0x0f
#define TYPE_HEIGHT_MASK    (BYTE)0xf0

#define BASE_NORMAL		0x00	// kanji, kana, numbers, etc
#define BASE_QUOTE		0x01	// upper punctuation, etc
#define BASE_DASH       0x02    // middle punctuation, etc
#define BASE_DESCENDER  0x03    // gy, anything that descends.
#define BASE_THIRD      0x04    // something that starts a third way up.

#define XHEIGHT_HALF  0x00    // lower-case, small kana, etc
#define XHEIGHT_FULL  0x10    // upper-case, kana, kanji, numbers, etc
#define XHEIGHT_PUNC  0x20    // comma, quote, etc
#define XHEIGHT_DASH  0x30    // dash, period, etc
#define XHEIGHT_3Q    0x40

typedef struct tagBOXINFO
{
    int   size;     // Absolute size.
    int   xheight;  // Absolute height to midline.
    int   baseline; // Baseline in tablet coordinates.
    int   midline;  // Midline in tablet coordinates.
} BOXINFO;

BYTE TypeFromSYM(SYM sym);
void GetBoxinfo(BOXINFO * boxinfo, int iBox, LPGUIDE lpguide);

#ifdef __cplusplus
}
#endif

#endif	//__INCLUDE_HEIGHT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\glyphsym.c ===
//
// File: glyphsym.c
//
// Contains ADT for GLYPHSYM object.
// This object is responsible for keeping the symbol
// information associated with a glyph (group of strokes).
// It invokes the classifier to get the possible symbol
// interpretation for the given ink.  Maintains this information
// for the ENGINE object to use.
//

#include "tsunamip.h"

// *******************************
// 
// CreateGLYPHSYM()
//
// constructor for GLYPHSYM object
//
// Arguments:  iFrame = index of the last frame in the glyph
//
// Returns:    
//
// Note:       glyph is destroyed by the object
//                                
// *******************************

VOID PUBLIC InitializeGLYPHSYM(GLYPHSYM *glyphsym, DWORD status, int iBox, GLYPH * glyph, CHARSET * cs)
{
   ASSERT(glyphsym);
   ASSERT(glyph);

   glyphsym->status = status;
   glyphsym->iLayer = -1;
   glyphsym->iBox = iBox;
   glyphsym->cFrame = CframeGLYPH(glyph);
   glyphsym->iEnd = IFrameFRAME(FrameAtGLYPH(glyph, CframeGLYPH(glyph)-1));
   glyphsym->iBegin = IFrameFRAME(FrameAtGLYPH(glyph, 0));
   ASSERT(glyphsym->iBegin >= 0);

	GetRectGLYPH(glyph, LprectGLYPHSYM(glyphsym));

	glyphsym->glyph = glyph;
}


// *******************************
//
// DestroyGLYPHSYM()
//
// destroys a glyphsym object.
//
// Arguments:  glyphsym - object to be destroyed
//
// Returns:    none
//
// Note:       none
//
// *******************************

void PUBLIC DestroyGLYPHSYM(GLYPHSYM * glyphsym)
{
    if (!glyphsym)
    {
        return;
    }

    if (glyphsym->glyph)
	{
		DestroyFramesGLYPH(glyphsym->glyph);
        DestroyGLYPH(glyphsym->glyph);
	}

    ExternFree(glyphsym);
}

// *******************************
// 
// AddFrameGLYPHSYM()
//
// changes the content of GS by adding a new frame to the glyph.
// updates all the internal fields.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************

BOOL PUBLIC AddFrameGLYPHSYM(GLYPHSYM * glyphsym, FRAME * frame, CHARSET * cs, XRC *xrc)
{
    GLYPH *glyph;

    ASSERT(frame);

    glyph = GlyphGLYPHSYM(glyphsym);

    if (glyph != NULL)
    {
        if (!AddFrameGLYPH(glyph, frame))
			return FALSE;

        GetRectGLYPH(glyph, LprectGLYPHSYM(glyphsym));

        glyphsym->iEnd = IFrameFRAME(frame);
        glyphsym->cFrame = CframeGLYPH(glyph);
        glyphsym->iBegin = IFrameFRAME(FrameAtGLYPH(glyph, 0));
        
		return TRUE;
    }
    else
    {
        WARNING(FALSE);
        return(FALSE);
    }
}

/******************************Public*Routine******************************\
* DispatchGLYPHSYM
*
* Sends the glyph to the appropriate shape classifier.
*
* History:
*  23-Jan-1995 -by- Patrick Haluptzok patrickh
* Commented it.
\**************************************************************************/
VOID PUBLIC DispatchGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc)
{
    void *v;
    GLYPH   *glyph = GlyphGLYPHSYM(gs);

    gs->altlist.cAlt = 0;

    ASSERT(IsDirtyGLYPHSYM(gs));

	if (!glyph)
		return;
    
    v = TigerMatch(&gs->altlist, MAX_ALT_LIST, glyph, &xrc->guide, &gs->rect, gs->iBox, cs);
	MarkCleanGLYPHSYM(gs);
    TigerMatchCleanUp(v);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\height.c ===
// height.c

#include "tsunamip.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\global.h ===
// global.h

#ifndef GLOBAL_H
#define GLOBAL_H

extern ROMMABLE RECCOSTS defRecCosts;

// all static and dynamic objects must go here so we can avoid all that nasty
// forward referencing currently going on in the .h files

typedef  VOID FAR *GHANDLE;

typedef struct tagGLOBAL
{
   GHANDLE		*rgHandleValid;
   int			cHandleValid;
   int			cHandleValidMax;
   ABSTIME		atTickRef;
   int			nSamplingRate;	// samples / second
} GLOBAL;

#define CLUSTER_DELTAMEAS 2
#define CLUSTER_CMEASMAX 50

extern GLOBAL NEAR global;

#define RgHandleValidGlobal()    global.rgHandleValid
#define CHandleValidGlobal()     global.cHandleValid
#define CHandleValidMaxGlobal()  global.cHandleValidMax
#define AtTickRefGlobal()        global.atTickRef
#define NSamplingRateGlobal()    global.nSamplingRate

#ifdef DBG
#define  CB_DEBUGSTRING 256
extern TCHAR szDebugString[];
#endif //DBG

#define CHANDLE_ALLOC      8

#define AddValidHRC(hrc)      AddValidHANDLE((GHANDLE)hrc, &RgHandleValidGlobal(), &CHandleValidGlobal(), &CHandleValidMaxGlobal())
#define RemoveValidHRC(hrc)   RemoveValidHANDLE((GHANDLE)hrc, RgHandleValidGlobal(), &CHandleValidGlobal())
#define VerifyHRC(hrc)        VerifyHANDLE((GHANDLE)hrc, RgHandleValidGlobal(), CHandleValidGlobal())

#define AddValidWORDLIST(hwl)    AddValidHANDLE((GHANDLE)hwl, &RgHandleValidGlobal(), &CHandleValidGlobal(), &CHandleValidMaxGlobal())
#define RemoveValidWORDLIST(hwl) RemoveValidHANDLE((GHANDLE)hwl, RgHandleValidGlobal(), &CHandleValidGlobal())
#define VerifyWORDLIST(hwl)      VerifyHANDLE((GHANDLE)hwl, RgHandleValidGlobal(), CHandleValidGlobal())

#define AddValidHRCRESULT(hrcres)      AddValidHANDLE((GHANDLE)hrcres, &RgHandleValidGlobal(), &CHandleValidGlobal(), &CHandleValidMaxGlobal())
#define RemoveValidHRCRESULT(hrcres)   RemoveValidHANDLE((GHANDLE)hrcres, RgHandleValidGlobal(), &CHandleValidGlobal())
#define VerifyHRCRESULT(hrcres)        VerifyHANDLE((GHANDLE)hrcres, RgHandleValidGlobal(), CHandleValidGlobal())

BOOL InitGLOBAL(VOID);
void DestroyGLOBAL(VOID);

BOOL PUBLIC AddValidHANDLE(GHANDLE handle, GHANDLE **prgHandle, int *pcHandle, int *pcHandleMax);
VOID PUBLIC RemoveValidHANDLE(GHANDLE handle, GHANDLE *rgHandle, int *pcHandle);
BOOL PUBLIC VerifyHANDLE(GHANDLE handle, GHANDLE *rgHandle, int cHandle);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\input.c ===
#include "tsunamip.h"

// ----------------------------------------------
// PURPOSE   : constructor for INPUT object
// RETURNS   : 
// CONDITION : 
// ----------------------------------------------

BOOL InitializeINPUT(XRC *xrc)
{
    ASSERT(xrc);

    xrc->rgFrame  = (FRAME **) ExternAlloc(sizeof(FRAME *) * DEF_BUFFER_SIZE);

	if (xrc->rgFrame == (FRAME **) NULL)
		return FALSE;

    xrc->cInputMax = DEF_BUFFER_SIZE;

	return TRUE;
}

// ----------------------------------------------
// PURPOSE   : destructor for INPUT object
// RETURNS   : TRUE iff object is destroyed
// CONDITION : 
// ----------------------------------------------

void DestroyINPUT(XRC *xrc)
{
    int i;

    if (xrc->rgFrame)
    {
        for (i=0; i < xrc->cInput; i++)
		{
			if (xrc->rgFrame[i] != (FRAME *) NULL)
				DestroyFRAME(xrc->rgFrame[i]);
		}

        ExternFree(xrc->rgFrame);
    }
}

// ----------------------------------------------
// PURPOSE   : store the ink input given by the user.
// RETURNS   : 
// CONDITION : lppnt may only contain portion of an entire stroke.
//					hence, we need to store the information from the 
//					previous stroke.  lppnt will not contain more than
//					one stroke.
// ----------------------------------------------

#ifdef PEGASUS
// ADDPOINTS is the count of "synthetic" points added between each pair of successive input points
#define ADDPOINTS 0
#else
#define ADDPOINTS 0
#endif

#define SQUARE(x) ((x)*(x))

BOOL AddPenInputINPUT(XRC *xrc, LPPOINT lppnt, LPSTROKEINFO lpsi, UINT duration)
{
    BOOL	bNewStroke;
	DWORD	cb;
	FRAME  *frame;
	POINT  *rgpnt;
	int		i;
	int		cPntTotal = lpsi->cPnt;
	int		cPntPrev = 0;
	int		cInput;
#if ADDPOINTS
	LPPOINT newLppnt = NULL;
	STROKEINFO newSi;
#endif

	ASSERT(xrc);
	ASSERT(xrc->rgFrame);
	ASSERT(lppnt);
    ASSERT(lpsi);

    //
    // We don't record the up strokes
    //

	if (!(lpsi->wPdk & PDK_DOWN))
    {
		xrc->si = *lpsi;
		return(TRUE);
    }

    if (lpsi->cPnt == 0)
    {
        return(TRUE);
    }

#if ADDPOINTS
	if (cPntTotal > 1)
	{
		int j, newCpntTotal, dx, dy, k;

		newCpntTotal = cPntTotal + ADDPOINTS*(cPntTotal-1);
		newLppnt = (LPPOINT) ExternAlloc(newCpntTotal*sizeof(POINT));
		if (newLppnt)
		{
			newLppnt[0] = lppnt[0];
			for (i=1, j=1; i<cPntTotal; i++)
			{
				dx = (lppnt[i].x - lppnt[i-1].x)/(ADDPOINTS+1);
				dy = (lppnt[i].y - lppnt[i-1].y)/(ADDPOINTS+1);
				for (k=0; k<ADDPOINTS; k++)
				{
					newLppnt[j].x = newLppnt[j-1].x + dx;
					newLppnt[j].y = newLppnt[j-1].y + dy;
					j++;
				}
				newLppnt[j++] = lppnt[i];
			}
			ASSERT(j == newCpntTotal);

			lppnt = newLppnt;
			newSi = *lpsi;
			lpsi = &newSi;
			lpsi->cPnt = cPntTotal = newCpntTotal;
			lpsi->cbPnts = lpsi->cPnt * sizeof(POINT);
		}
	}
#endif

    //
    // Double the stroke buffer size if we run out of room.
    //

	if (xrc->cInput == xrc->cInputMax)
    {
		FRAME **ppframe;

		i = xrc->cInputMax * 2;
		ppframe = (FRAME **) ExternRealloc(xrc->rgFrame, i * sizeof(FRAME *));

		if (ppframe == (FRAME **) NULL)
			return FALSE;

		xrc->rgFrame = ppframe;
		xrc->cInputMax = i;
    }

    //
    // Get the previous frame if it's still around.
    //

    if (xrc->cInput > 0)
        frame = xrc->rgFrame[xrc->cInput - 1];
    else
        frame = NULL;

    bNewStroke = (lpsi->wPdk & PDK_TRANSITION);

    //
    // If the beginning of the new stroke is really close to the end of the last
    // stroke we assume it was a pen skip and merge it in.  Basically we just
    // erase the PDK_TRANSITION bit so it doesn't get put in a new character.
    //

    if ((frame != NULL) &&        // Do we have a previous frame ?
        bNewStroke)              // Are we starting a new stroke ?
    {
        POINT ptLast, ptFirst;

        cPntPrev = frame->info.cPnt;
        ptLast = frame->rgrawxy[cPntPrev - 1];
        ptFirst = lppnt[0];

        if ((SQUARE(ptFirst.x - ptLast.x) + SQUARE(ptFirst.y - ptLast.y)) <= 100)
            bNewStroke = FALSE;

        cPntPrev = 0;
    }

    //
    // If we have received more of a stroke for an already down stroke record it.
    //

	cInput = xrc->cInput;

    if ((xrc->si.wPdk & PDK_DOWN) &&
         (!bNewStroke) &&
         (frame != NULL))
    {
        //
        // This is a continuation of an old frame.
        //

        ASSERT(xrc->cInput > 0);
		cPntPrev = frame->info.cPnt;
		cPntTotal += cPntPrev;

        cb = (DWORD)cPntTotal * (DWORD)sizeof(POINT);

		rgpnt = (POINT *) ExternRealloc(frame->rgrawxy, cb);
    }
    else
    {
        //
        // This is a new frame.
        //

        cb = (DWORD) cPntTotal * (DWORD) sizeof(POINT);

        if ((frame = NewFRAME()) == (FRAME *) NULL)
			return FALSE;

		xrc->rgFrame[xrc->cInput] = frame;
		frame->info = *lpsi;

		SetIFrameFRAME(frame, xrc->cInput);
		xrc->cInput++;

		rgpnt = (POINT *) ExternAlloc(cb);
    }

	// In the normal model we would clean up the allocation of the frames, but that will
	// be handled by its owner, not here.  We only have to verify that the new rawxy
	// buffer was successfully allocated.

	if (rgpnt == (POINT *) NULL)
	{
	// We may have to clean up the FRAME we allocated

		if (cInput != xrc->cInput)
		{
			xrc->cInput = cInput;
			xrc->rgFrame[cInput] = (FRAME *) NULL;
			DestroyFRAME(frame);
		}

		return FALSE;
	}

	ASSERT(rgpnt);
    ASSERT(duration);

    //
    // Copy the new points into the frame.
    //

	frame->info.cPnt = cPntTotal;
	frame->rgrawxy = (XY *)rgpnt;

    for (i = cPntPrev; i < cPntTotal; ++i)
    {
        rgpnt[i] = lppnt[i-cPntPrev];
    }

	DeInitRectFRAME(frame);

	xrc->si = *lpsi;

#if ADDPOINTS
	if (newLppnt)
	{
		ExternFree(newLppnt);
	}
#endif

	return TRUE;
}

// ----------------------------------------------
// PURPOSE   : retrieve a pointer to the processed ink xrc given by the user.
// RETURNS   : the size of the specified stroke, a pointer to the strokeinfo.
// ----------------------------------------------

UINT GetPenInputINPUT(XRC *xrc, int istroke, LPPOINT far * lplppnt, LPSTROKEINFO far * lplpsi)
	{
	int cPnt;
	FRAME* frame;

	if (istroke >= xrc->cInput)
		{
		*lplppnt = 0;
		return 0;
		}

	frame = xrc->rgFrame[istroke];

	cPnt = frame->info.cPnt;
	*lplpsi = &(frame->info);
	ASSERT(*lplpsi);

	*lplppnt = (LPPOINT) frame->rgrawxy;
	ASSERT(*lplppnt);

	return cPnt;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\global.c ===
#include "tsunamip.h"

GLOBAL	global;

#ifdef	DBG
TCHAR	szDebugString[CB_DEBUGSTRING];
#endif // DBG

// Weights for Viterbi search.  We have seperate weights for both Char and String.  
// We then have seperate weights for both Mars and Zilla since the range of the 
// scores returned by each classifier might vary greatly.  Also 1 and 2 stroke chars
// probably would weight baseline height more that the multi-stroke chars do.

//PURPOSE: Initializes general global variables.
//RETURN:
//GLOBALS:
//CONDITIONS:
//TODO:

BOOL InitGLOBAL(VOID)
{
	memset(&global, 0, sizeof(GLOBAL));
	global.rgHandleValid = (GHANDLE *) ExternAlloc(CHANDLE_ALLOC * sizeof(GHANDLE));

	if (global.rgHandleValid == NULL)
	{
		return(FALSE);
	}		
	
	memset(global.rgHandleValid, '\0', CHANDLE_ALLOC * sizeof(GHANDLE));

	global.cHandleValidMax = CHANDLE_ALLOC;
	global.nSamplingRate = 67;
	global.atTickRef.sec = 0;
	global.atTickRef.ms = 0;

	return (global.rgHandleValid != (GHANDLE *) NULL);
}

void DestroyGLOBAL(VOID)
{
	if (global.rgHandleValid)
	{
#ifdef DBG
		int ihandle, chandle;

		chandle = 0;
		for (ihandle = 0; ihandle < global.cHandleValid; ihandle++)
		{
			if (global.rgHandleValid[ihandle] != 0)
			chandle++;
		}

		if (chandle)
		{
			wsprintf(szDebugString, __TEXT("RODAN: %d objects not destroyed!\r\n"), chandle);
			WARNING(FALSE);
		}
#endif // DBG

		ExternFree(global.rgHandleValid);
		global.rgHandleValid = 0;
	}
}

BOOL PUBLIC AddValidHANDLE(GHANDLE handle, GHANDLE **prgHandle, int *pcHandle, int *pcHandleMax)
{
	int iHandle, cHandleMax;
	GHANDLE *rgHandle = *prgHandle;

	ASSERT(handle);

	if (rgHandle)
	{
		for (iHandle = (*pcHandle) - 1; iHandle >= 0; iHandle--)
		{
			if (rgHandle[iHandle] == 0)
			{
				rgHandle[iHandle] = handle;
				return(TRUE);
			}
		}

		iHandle = *pcHandle;

		if (iHandle >= *pcHandleMax)
		{
			cHandleMax = (*pcHandleMax) + CHANDLE_ALLOC;


            rgHandle = (GHANDLE *) ExternRealloc(*prgHandle, cHandleMax * sizeof(GHANDLE));
			if (!rgHandle)
				return(FALSE);

			*prgHandle = rgHandle;
			*pcHandleMax = cHandleMax;
		}

		*pcHandle = iHandle + 1;
		rgHandle[iHandle] = handle;

		return(TRUE);
	}

	return(FALSE);
}

VOID PUBLIC RemoveValidHANDLE(GHANDLE handle, GHANDLE *rgHandle, int *pcHandle)
	{
	int iHandle;
	
	ASSERT(handle);
	
	if (rgHandle)
		{
		for (iHandle = (*pcHandle) - 1; iHandle >= 0; iHandle--)
			{
			if (handle == rgHandle[iHandle])
				{
				rgHandle[iHandle] = 0;
				if (iHandle == (*pcHandle) - 1)
					*pcHandle = (*pcHandle) - 1;
				break;
				}
			}
		}
	}

BOOL PUBLIC VerifyHANDLE(GHANDLE handle, GHANDLE *rgHandle, int cHandle)
{
    int iHandle;

    if ((rgHandle == NULL) || (handle == (GHANDLE) 0))
	{
		return(FALSE);
	}
	
    for (iHandle = cHandle - 1; iHandle >= 0; iHandle--)
    {
        if (handle == rgHandle[iHandle])
            return(TRUE);
    }

    return(FALSE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\glyphsym.h ===
#ifndef  _INCLUDE_GLYPHSYM
#define  _INCLUDE_GLYPHSYM

#define MAX_PATH_LIST        512
#define DEF_BOX_INDEX        -1

#define  GSST_BOX             (DWORD)2      // Box input mode
#define  GSST_DIRTY           (DWORD)64     // This GS needs to be recognized - frames have
                                            // been added to it.
// The PATHNODE is stored in the GLYPHSYM, but used by the PATH code.

typedef struct tagPATHNODE
{
    DWORD state;        // State the node is in.
    WORD extra;         // State within the state the node is in.
    BYTE iAutomaton;    // Automaton the node is in.
    BYTE bReferenced;   // If this node is referenced by the following layer.
    FLOAT pathcost;     // cummulative path cost including this node
    short indexPrev;    // index in the prev GLYPHSYM of the previous node in this path
    wchar_t wch;        // The character this node represents.
} PATHNODE;

// GLYPHSYM object abstract data type

typedef struct tagGLYPHSYM
{
	ALT_LIST	altlist;		// The best guesses from the shape matcher
	DWORD		status;			// GSST status values (above)
	int			iBox;			// Box number in the GUIDE	
	GLYPH	   *glyph;			// digested ink associated with these guesses
	RECT		rect;			// bounding rect of ink in the glyph(s)
	SYV			syvBestPath;	// What the syv is on the best path by context.
	int			iBegin;			// index of the first frame in the glyph
	int			iEnd;			// index of the last frame in the glyph
	int			cFrame;			// number of frames in the glyph
	int			iLayer;			// layer index in SINFO
    struct tagGLYPHSYM *prev;   // previous glyphsym

    char        rgReferenced[MAX_PATH_LIST];
    PATHNODE    rgPathnode[MAX_PATH_LIST];

	int cPath;

} GLYPHSYM;

VOID PUBLIC InitializeGLYPHSYM(GLYPHSYM *gs, DWORD status, int iBox, GLYPH * glyph, CHARSET * cs);
void PUBLIC DestroyGLYPHSYM(GLYPHSYM * glyphsym); 
BOOL PUBLIC IsSymInGLYPHSYM(GLYPHSYM * gs, SYM sym, int * index);

#define	CopyGLYPHSYM(gsDest, gsSrc)	(*(gsDest) = *(gsSrc))
#define	IsFrameInGLYPHSYM(gs, iframe)	(IsFrameInGLYPH((gs)->glyph, iframe))

#define	CSymGLYPHSYM(gs)				((gs)->altlist.cAlt)
#define	SymAtGLYPHSYM(gs, i)			((gs)->altlist.awchList[i])
#define	LprectGLYPHSYM(gs)			((LPRECT)&((gs)->rect))

#define	PathnodeAtGLYPHSYM(gs, i)	((PATHNODE *)&((gs)->rgPathnode[i]))
#define	ProbAtGLYPHSYM(gs, i)    ((gs)->altlist.aeScore[i])
#define  GlyphGLYPHSYM(gs)        ((gs) ? ((gs)->glyph) : (NULL))
#define  GetPrevGLYPHSYM(gs)      ((gs)->prev)
#define  IFrameBeginGLYPHSYM(gs)  ((gs)->iBegin)
#define  IFrameEndGLYPHSYM(gs)    ((gs)->iEnd)
#define  CFrameGLYPHSYM(gs)       ((gs)->cFrame)
#define  ILayerGLYPHSYM(gs)       ((gs)->iLayer)
#define  IBoxGLYPHSYM(gs)         ((gs)->iBox)
#define  SetILayerGLYPHSYM(gs,i)  ((gs)->iLayer = (i))

FLOAT PUBLIC MinShapeCostGLYPHSYM(GLYPHSYM *gs);

#define	IsDirtyGLYPHSYM(gs)		(((gs)->status & GSST_DIRTY) != 0)
#define	MarkDirtyGLYPHSYM(gs)	((gs)->status = (gs)->status | GSST_DIRTY)
#define	MarkCleanGLYPHSYM(gs)	((gs)->status = (gs)->status & ~GSST_DIRTY)

BOOL PUBLIC IsCharValidInCharset(WORD wDbcs, CHARSET *cs, UINT iBox);

#endif	//__INCLUDE_GLYPHSYM
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\hwx.c ===
/******************************Module*Header*******************************\
* Module Name: hwx.c
*
* Don has a simpler restricted functionality API that he has written for
* KIME/MITSU to use that does boxed character recognition.
*
* I've #ifdefed out the code KIME doesn't need and I've added those
* new API's here as a wrapper for the old API's.  This way our development
* DLL can run with KIME/MITSU.
*
* Created: 15-Feb-1996 12:23:42
* Author: Patrick Haluptzok patrickh
*
* Copyright (c) 1996 Microsoft Corporation
\**************************************************************************/

#include "tsunamip.h"

#if defined(DBG)
BOOL bLogEverything = FALSE;  // Logs what is going on everywhere.
#endif

// iUseCount tells if we have successfully loaded and is incremented to 1 when that happens.

int iUseCount = 0;

// hInstanceDll is refered to to load resources.

HINSTANCE hInstanceDll;

//////////////////   Local functions

BOOL WINAPI DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
	if (dwReason == DLL_PROCESS_DETACH)
	{
		return(TRUE);
	}

	hInstanceDll = hDll;
	return((int) TRUE);
}

VOID PRIVATE UnloadRecognizer(VOID)
{
	if (iUseCount == 0)
		return;

    DestroyGLOBAL();
    iUseCount = 0;
}

/******************************Public*Routine******************************\
* HwxConfig
*
* Initialize the recognizer when it loads.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

BOOL WINAPI HwxConfig()
{
    BOOL  fLoad = TRUE;

	if (iUseCount == 1)
		return(TRUE);

    //
    // Initialize the handle table, otter, zilla and cart
    //

    if (InitGLOBAL())
	{
		iUseCount = 1;
	}
	else
	{
        if (!fLoad)
            UnloadRecognizer();

		iUseCount = 0;
	}

    return (iUseCount);
}

/******************************Public*Routine******************************\
* HwxCreate
*
* Create an HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

HRC WINAPI HwxCreate(HRC hrctemplate)
{
	XRC	   *xrc;
	XRC	   *xrctemplate = (XRC *) hrctemplate;

	if (xrctemplate && !VerifyHRC(xrctemplate))
		return((HRC) NULL);

	xrc = ExternAlloc(sizeof(XRC));

	if (!xrc)
		return (HRC) NULL;

	if (!InitializeXRC(xrc, xrctemplate, NULL))
	{
		DestroyXRC(xrc);
		return (HRC) NULL;
	}

	return (HRC) xrc;
}

/******************************Public*Routine******************************\
* HwxDestroy
*
* Destroy an HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxDestroy(HRC hrc)
{
	XRC	   *xrc = (XRC *) hrc;

	if (!VerifyHRC(xrc))
		return HRCR_ERROR;

	DestroyXRC(xrc);

	return HRCR_OK;
}

/******************************Public*Routine******************************\
* HwxSetGuide
*
* Sets the guide structure to use.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxSetGuide(HRC hrc, GUIDE *lpguide, UINT nFirstVisible)
{
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return(HRCR_ERROR);

   return(SetGuideXRC(xrc, lpguide, nFirstVisible));
}

/******************************Public*Routine******************************\
* HwxSetAlphabet			
*
* Tells what character sets to prefer.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxSetAlphabet(HRC hrc, ALC alc)
{
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return HRCR_ERROR;

    return(SetAlphabetXRC(xrc, alc, NULL));
}


/******************************Public*Routine******************************\
* HwxProcess
*
* Process the ink and return the results.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxProcess(HRC hrc)
{
    int     iRet;
    XRC *   xrc = (XRC *)hrc;

    //
    // Search a linear list of pointers we have given out and see if this is
    // one of them.  By design we hand out pointers and the first dword is used
    // by penwin to write in.
    //

    if (!VerifyHRC(xrc))
    {
        return HRCR_ERROR;
    }

    //
    // Once Process HRC is called we set the BeginProcess flag to
    // TRUE which causes any API calls that try to change the
    // recognition settings (ALC,GUIDE,MAXRESULTS,etc) to fail.
    //

    SetBeginProcessXRCPARAM(xrc, TRUE);

    iRet = SchedulerXRC(xrc);

    return(iRet);
}

/******************************Public*Routine******************************\
* HwxEndInput
*
* No more ink is coming (or can be added) once this is called.
*
* History:
*  27-Mar-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxEndInput(HRC hrc)
{
    XRC *   xrc = (XRC *)hrc;

    if (!VerifyHRC(xrc))
    {
        return HRCR_ERROR;
    }

    SetEndInputXRC(xrc, TRUE);  // Sets the fEndInput to TRUE in XRCPARAM.
    xrc->fUpdate = TRUE;		// Let's engine know we have to clean up glyphsyms.

    return HRCR_OK;
}


/******************************Public*Routine******************************\
* HwxInput
*
* Add Ink to the HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxInput(HRC hrc, POINT  *lppnt, STROKEINFO *lpsi)
{
    DWORD dwDuration;
    int iRet;
    XRC *xrc = (XRC *) hrc;

    if (!VerifyHRC(xrc) || IsEndOfInkXRC(xrc))
    {
        return(HRCR_ERROR);
    }

    ASSERT(xrc);

    ASSERT(NSamplingRateGlobal());

    dwDuration = ((DWORD)lpsi->cPnt * 1000) / (DWORD)NSamplingRateGlobal();

    if (AddPenInputINPUT(xrc, lppnt, lpsi, (UINT)dwDuration))
    {
        iRet = HRCR_OK;
    }
    else
    {
        iRet = HRCR_ERROR;
    }

	return(iRet);
}

/******************************Public*Routine******************************\
* HwxGetResults
*
* Returns the results from the recognizer.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxGetResults(HRC hrc, UINT cAlt, UINT iSyv, UINT cBoxRes, BOXRESULTS *rgBoxResults)
{
   XRC   *xrc = (XRC *)hrc;

   if (!VerifyHRC(xrc) ||
		 rgBoxResults == NULL)
        return(HRCR_ERROR);

    return(GetBoxResultsXRC(xrc, cAlt, iSyv, cBoxRes, rgBoxResults, FALSE));
}

/******************************Public*Routine******************************\
* HwxResultsAvailable
*
* Warnings: This assumes the writer can't go back and touch up previous
* characters.
*
* Returns the number of characters that can be gotten and displayed safely
* because the viterbi search has folded to one path at this point.
*
* Return the number of characters available in the
* path that are ready to get.  This API looks at the viterbi search and
* any characters far enough back in the input that all the paths merge
* to 1 are done and can be displayed because nothing further out in the
* input will change the best path back once it's merged to a single path.
*
* History:
*  15-Jan-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxResultsAvailable(HRC hrc)
{
    GLYPHSYM   *glyphsymCurr;
    GLYPHSYM   *glyphsymBack;
    XRC		   *xrc = (XRC *) hrc;
    int        iPath, cChosen, iLayer;
    wchar_t    wch;

    //
    // Search a linear list of pointers we have given out and see if this is
    // one of them.  By design we hand out pointers and the first dword is used
    // by penwin to write in.
    //

    if (!VerifyHRC(xrc))
    {
        return(0);
    }

    iPath = min(CLayerProcessedSINFO(xrc), CLayerPATHSRCH(xrc));

    if (iPath == 0)
    {
        return(0);
    }

    if (IsEndOfInkXRC(xrc))
    {
        //
        // Well if they have called end of ink we can give them at least
        // this much.  If they haven't called HwxProcess yet it may not
        // be all the characters.
        //

        return(iPath);
    }

    ASSERT(iPath <= xrc->cQueue);

    glyphsymCurr = xrc->ppQueue[iPath - 1];

    ASSERT(glyphsymCurr);

    memset(glyphsymCurr->rgReferenced, 0xff, MAX_PATH_LIST * sizeof(char));

    while (glyphsymBack = glyphsymCurr->prev)
    {
        memset(glyphsymBack->rgReferenced, 0, MAX_PATH_LIST * sizeof(char));

        //
        // Mark who is pointed to in the previous layer.
        //

        cChosen = 0;

        for (iPath = 0; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                glyphsymBack->rgReferenced[glyphsymCurr->rgPathnode[iPath].indexPrev] = 1;
                cChosen += 1;
            }
        }

        if (cChosen <= 1)
        {
            return(glyphsymBack->iLayer + 1);
        }

		glyphsymCurr = glyphsymBack;
    }

    //
    // Well we weren't so lucky to converge to 1 path by now, but we really didn't expect to.
    // We need to start at the beginning and look for glyphsyms where all paths converge to the
    // same character.
    //

    cChosen = min(CLayerProcessedSINFO(xrc), CLayerPATHSRCH(xrc));

    ASSERT(cChosen <= xrc->cQueue);

    for (iLayer = 0; iLayer < cChosen; iLayer++)
    {
        glyphsymCurr = xrc->ppQueue[iLayer];

        //
        // Look for the first valid pathnode and record it's label.
        //

        for (iPath = 0; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                wch = glyphsymCurr->rgPathnode[iPath].wch;
                break;
            }
        }

        //
        // Now see if any other valid node has a different label.
        //

        for (; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                if (wch != glyphsymCurr->rgPathnode[iPath].wch)
                {
                    return(iLayer);
                }
            }
        }
    }

    return(iLayer);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\log.h ===
extern const float rgLogarithm[];

#define LOGPROB(prob) \
	((prob) < 0 ? rgLogarithm[0] :   \
	 (prob) > 1 ? rgLogarithm[100] : \
	 rgLogarithm[(int)(100*(prob))])
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\input.h ===
#ifndef	__INCLUDE_INPUT
#define	__INCLUDE_INPUT

#define DEF_BUFFER_SIZE 100

// =================
//
// INPUT object
//
// This object is responsible for processing ink into
// a form usable by the recognizer.  It stores the
// processed ink (FRAMES) and makes it available to the
// public via the macro FrameAtINPUT.
//
// =================

BOOL InitializeINPUT(XRC *xrc);
void DestroyINPUT(XRC *xrc);
BOOL AddPenInputINPUT(XRC *xrc, LPPOINT lppnt, LPSTROKEINFO lpsi, UINT duration);
int  ProcessINPUT(XRC *xrc);
UINT GetPenInputINPUT(XRC *xrc, int istroke, LPPOINT far *lplppnt, LPSTROKEINFO far *lplpsi);

#define CFrameINPUT(input)  ((input)->cInput)
#define FrameAtINPUT(input, i)  ((i) < (input)->cInput ? (input)->rgFrame[i] : (FRAME *) NULL)

#endif	//__INCLUDE_INPUT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\log.c ===
#include "log.h"

const float rgLogarithm[101] = {
	(float)-6.907755, (float)-4.605170, (float)-3.912023, (float)-3.506558, (float)-3.218876, (float)-2.995732,
	(float)-2.813411, (float)-2.659260, (float)-2.525729, (float)-2.407946, (float)-2.302585, (float)-2.207275,
	(float)-2.120264, (float)-2.040221, (float)-1.966113, (float)-1.897120, (float)-1.832581, (float)-1.771957,
	(float)-1.714798, (float)-1.660731, (float)-1.609438, (float)-1.560648, (float)-1.514128, (float)-1.469676,
	(float)-1.427116, (float)-1.386294, (float)-1.347074, (float)-1.309333, (float)-1.272966, (float)-1.237874,
	(float)-1.203973, (float)-1.171183, (float)-1.139434, (float)-1.108663, (float)-1.078810, (float)-1.049822,
	(float)-1.021651, (float)-0.994252, (float)-0.967584, (float)-0.941609, (float)-0.916291, (float)-0.891598,
	(float)-0.867501, (float)-0.843970, (float)-0.820981, (float)-0.798508, (float)-0.776529, (float)-0.755023,
	(float)-0.733969, (float)-0.713350, (float)-0.693147, (float)-0.673345, (float)-0.653926, (float)-0.634878,
	(float)-0.616186, (float)-0.597837, (float)-0.579818, (float)-0.562119, (float)-0.544727, (float)-0.527633,
	(float)-0.510826, (float)-0.494296, (float)-0.478036, (float)-0.462035, (float)-0.446287, (float)-0.430783,
	(float)-0.415515, (float)-0.400478, (float)-0.385662, (float)-0.371064, (float)-0.356675, (float)-0.342490,
	(float)-0.328504, (float)-0.314711, (float)-0.301105, (float)-0.287682, (float)-0.274437, (float)-0.261365,
	(float)-0.248461, (float)-0.235722, (float)-0.223144, (float)-0.210721, (float)-0.198451, (float)-0.186330,
	(float)-0.174353, (float)-0.162519, (float)-0.150823, (float)-0.139262, (float)-0.127833, (float)-0.116534,
	(float)-0.105361, (float)-0.094311, (float)-0.083382, (float)-0.072571, (float)-0.061875, (float)-0.051293,
	(float)-0.040822, (float)-0.030459, (float)-0.020203, (float)-0.010050, (float)0.000000};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by all HWXxxx.RC files
// DO NOT EDIT THIS FILE
//

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        103
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\path.h ===
#ifndef	__INCLUDE_PATH
#define	__INCLUDE_PATH

#define CSTROKE_MAX 511
#define	CCHAR_MAX	255
#define	CCHAR_WORD	64

#define 	MAX_FRAME_GLYPH 		30		// max strokes per glyph

// TODO:  put the correct values in here
#define	SYM_SPACE		(SYM)' '
#define  SYM_TAB        (SYM)'\t'
#define  SYM_RETURN     (SYM)0x0d
#define	SYM_QUOTE		(SYM)0x8166		// TODO:  is this correct?
#define	SYM_DBLQUOTE	(SYM)0x8168		// TODO:  is this correct?
#define  SYM_PERIOD		(SYM)0x8144
#define  SYM_COMMA		(SYM)0x8143
#define  SYM_SEMICOLON	(SYM)0x8147
#define  SYM_COLON		(SYM)0x8146
#define  SYM_EXCLAMATION	(SYM)0x8149
#define  SYM_EQUAL		(SYM)0x8181
#define  SYM_HYPHEN		(SYM)0x817c		// TODO:  is this correct?
#define  SYM_QUESTION	(SYM)0x8148
#define  SYM_BAR			(SYM)0x8162		// TODO:  is this correct?
#define  SYM_BACKSLASH	(SYM)0x815f		// TODO:  is this correct?
#define  SYM_SLASH		(SYM)0x815e		// TODO:  is this correct?
#define  SYM_OPENPAREN	(SYM)0x8169
#define  SYM_CLOSEPAREN	(SYM)0x816a
#define  SYM_OPENBRACE	(SYM)0x816d
#define  SYM_CLOSEBRACE	(SYM)0x816e
#define  SYM_OPENBRACKET	(SYM)0x816f
#define  SYM_CLOSEBRACKET	(SYM)0x8170
#define	SYM_0				(SYM)0x824f
#define	SYM_A				(SYM)0x8260
#define	SYM_S				(SYM)0x8272
#define	SYM_a				(SYM)0x8281
#define	SYM_d				(SYM)0x8284
#define	SYM_h				(SYM)0x8288
#define	SYM_n				(SYM)0x828e
#define	SYM_r				(SYM)0x8292
#define	SYM_s				(SYM)0x8293
#define	SYM_t				(SYM)0x8294

#define	SyvFromSYM(s)	(((s) == SYM_UNKNOWN) ? SYV_NULL : SyvKanjiToSymbol(s))
#define  SymFromSYV(s)	(((s) == SYV_NULL) ? SYM_UNKNOWN : (SYM)WSyvToKanji(s))
#define	IsDigitSYM(s)	((s) >= 0x824f && (s) <= 0x8258)
#define	IsUpperSYM(s)	((s) >= 0x8260 && (s) <= 0x8279)
#define	IsLowerSYM(s)	((s) >= 0x8281 && (s) <= 0x829a)
#define	IsAlphaSYM(s)	(IsLowerSYM(s) || IsUpperSYM(s))
#define	IsPuncSYM(s)	(FALSE)									// TODO: fix this
#define	ToLowerSYM(s)	(IsUpperSYM(s) ? (s) + 0x0021 : (s))
#define	ToUpperSYM(s)	(IsLowerSYM(s) ? (s) - 0x0021 : (s))

int PUBLIC StrlenSYM(LPSYM lpsym);
int PUBLIC StrncmpSYM(LPSYM lpsym1, LPSYM lpsym2, int len);
VOID PUBLIC StrrevSYM(LPSYM lpsym);
VOID PUBLIC StrlwrSYM(LPSYM lpsym);

#define	SYM_NULL	(SYM)0

#define  IsSpaceSYM(s)        ((s) == SYM_SPACE || (s) == SYM_TAB || (s) == SYM_RETURN)

#define	INIT						1
#define	NOINIT					0
#define	INDEX_NULL				-1

#define	SYM_UNKNOWN				((SYM)0x02)

#define	ENGINE_ERROR			-1

#define  AddCOST(a,b)         ((a) + (b))
#define  IncCOST(a,b)         ((a) += (b))
#define  DecCOST(a,b)         ((a) -= (b))
#define  SubCOST(a,b)         ((a) - (b))
#define  MultCOST(a,b)        MultFIXED(a,b)
#define  MultAddCOST(c,a,b)   ((c) += MultFIXED((a),(b)))
#define  NegCOST(a)           (-(a))
#define  AbsCOST(a)           ((a > 0.0) ? a : NegCOST(a))
#define  SquareCOST(a)        SquareFIXED(a)
// #define  DivCOST(a,b)         DivFIXED(a,b)

typedef	unsigned	PWMODE;
#define	PW_PREVIOUS					0x0001
#define	PW_CURRENT					0x0002
#define	PW_END						0x0004

typedef	unsigned	SMODE;
#define	SMODE_DICTIONARY			0x0001
#define	SMODE_RELAX_COERCION		0x0002
#define	SMODE_STRICT_COERCION	0x0004

typedef struct tagRECSTATUS
{
	int   cframeHgm;     // # of frames processed by HGM
} RECSTATUS;

#endif	//__INCLUDE_PATH
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\msapi.c ===
#ifndef ROM_IT

#include "tsunamip.h"

HRC WINAPI CreateCompatibleHRC(HRC hrctemplate, HREC hrec)
{
    hrec = hrec;
    return(HwxCreate(hrctemplate));
}

int WINAPI DestroyHRC(HRC hrc)
{
    return(HwxDestroy(hrc));
}

int WINAPI AddPenInputHRC(HRC hrc, POINT *lppnt, void *lpvOem, UINT oemdatatype, STROKEINFO *lpsi)
{
    lpvOem = lpvOem;
    oemdatatype = oemdatatype;
    return(HwxInput(hrc, lppnt, lpsi));
}

int WINAPI ProcessHRC(HRC hrc, DWORD timeout)
{
    timeout = timeout;
    return(HwxProcess(hrc));
}

int WINAPI EndPenInputHRC(HRC hrc)
{
    return(HwxEndInput(hrc));
}

int WINAPI GetBoxResultsHRC(HRC hrc, UINT cAlt, UINT iSyv, UINT cBoxRes,
										LPBOXRESULTS rgBoxResults, BOOL fInkset)
{
   fInkset = fInkset;
   return (HwxGetResults(hrc, cAlt, iSyv, cBoxRes, rgBoxResults));
}

int WINAPI SetGuideHRC(HRC hrc, LPGUIDE lpguide, UINT nFirstVisible)
{
    return HwxSetGuide(hrc, lpguide, nFirstVisible);
}

int WINAPI SetMaxResultsHRC(HRC hrc, UINT cMax)
{
   XRC *xrc = (XRC*)hrc;

   if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return HRCR_ERROR;

    return(SetMaxResultsXRC(xrc, cMax) ? HRCR_OK : HRCR_ERROR);
}

int WINAPI SetAlphabetHRC(HRC hrc, ALC alc, LPBYTE rgbfAlc)
{
    rgbfAlc = rgbfAlc;

    return(HwxSetAlphabet(hrc, alc));
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\pathsrch.c ===
#include "tsunamip.h"
#include "log.h"
#include "unicode.h"

VOID UndoPATHSRCH(XRC *xrc, int ilayer);
VOID AddLayerPATHSRCH(XRC *xrc, GLYPHSYM *gs, BOOL bString);
FLOAT PRIVATE UnigramCost(SYM sym);

BOOL PUBLIC IsDonePATHSRCH(XRC *xrc)
{
   ASSERT(xrc);

   if (!FEndOfInkSINFO(xrc))
      return(FALSE);

   if (CLayerPATHSRCH(xrc) < CLayerSINFO(xrc))
      return(FALSE);

   ASSERT(!xrc->fUpdate);

   return(TRUE);
}

// *******************************
// 
// ProcessPATHSRCH()
//
// Note: This is the real entry point into the 'context' part of Rodan.
//                                
// *******************************

int PUBLIC ProcessPATHSRCH(XRC *xrc)
{
	GLYPHSYM   *gs = NULL;

	ASSERT(xrc);

    // See if any glyphsyms were updated. gsMinUpdated is the
    // glyphsym with the smallest iLayer that was re-matched.
    // Invalidate anything we did after that glyph.

    if (xrc->gsMinUpdated)
    {
        //
        // Grab the updated glyphsym, mark it as gone.
        //

        gs = xrc->gsMinUpdated;
        ASSERT(gs);
        xrc->gsMinUpdated = NULL;

        //
        // Undo anything done after that layer.
        //

        UndoPATHSRCH(xrc, ILayerGLYPHSYM(gs));
    }

    if (CLayerPATHSRCH(xrc) < CLayerProcessedSINFO(xrc))
    {
        //
        // Grab the next glyphsym that's available.
        //

		gs = GetGlyphsymSINFO(xrc, CLayerPATHSRCH(xrc));
	}

	if (gs)
	{
        AddLayerPATHSRCH(xrc, gs, FALSE);

		return(PROCESS_READY);
	}

	return(PROCESS_IDLE);
}

void AddPathnodeToGLYPHSYM(GLYPHSYM *gs, PATHNODE *ppnode)
{
	FLOAT cost = ppnode->pathcost;
	int cPath = gs->cPath;
	PATHNODE *rgPathnode = gs->rgPathnode;
	int i;

    //
    // Check for duplicates.
    //

	for (i=0; i<cPath; i++)
	{
		if (rgPathnode[i].wch==ppnode->wch 
			&& rgPathnode[i].iAutomaton==ppnode->iAutomaton 
            && rgPathnode[i].state==ppnode->state
            && rgPathnode[i].extra==ppnode->extra)
        {
            //
            // Remember the guy who has the least cost path back.
            //

            if (rgPathnode[i].pathcost < ppnode->pathcost)
            {
                rgPathnode[i].pathcost = ppnode->pathcost;
                rgPathnode[i].indexPrev = ppnode->indexPrev;
            }

            return;
        }
    }

    //
    // Insert it at the end of the list.
    //

    if (cPath >= MAX_PATH_LIST)
    {
        return;
    }

    rgPathnode[cPath++] = *ppnode;

	gs->cPath = cPath;
}

/******************************Public*Routine******************************\
* AddLayerPATHSRCH
*
* This extends the Viterbi search forward one step.
*
* History:
*  30-Apr-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

const PATHNODE gNodeStart = {NONE_AUTOMATON_INITIAL_STATE, 0, 0,FSM_START, 0.0, 0, 0x0020 };

#ifdef DBG
int gcPathMax = 0;
#endif

VOID PRIVATE AddLayerPATHSRCH(XRC *xrc, GLYPHSYM *gs, BOOL bString)
{
	int isym;
	GLYPHSYM *gsPrev;
    FLOAT cost, costChar;
	SYM sym;
    int iPath;
    PATHNODE pnode, *ppNode;
    LPGUIDE lpguide;

	ASSERT(xrc);
	ASSERT(gs);

    gsPrev = GetPrevGLYPHSYM(gs);

    //
    // If we have a space find the end of the last word to point
    // back to in iPath.
    //

    iPath = 0;  // Well if the previous guy only has 1 meatball
                // we need to point at it.

    if (gsPrev)
    {
        //
        // Find the first valid node for our initial cost.
        //

        for (iPath=0; iPath < gsPrev->cPath; iPath++)
        {
            ppNode = PathnodeAtGLYPHSYM(gsPrev, iPath);

            if (ppNode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(ppNode))
                continue;
            else
            {
                isym = iPath;
                cost = ppNode->pathcost;
                break;
            }
        }

        ASSERT(isym < gsPrev->cPath);

        //
        // Now see if anyone else has a better score.
        //

        for (iPath=isym+1; iPath < gsPrev->cPath; iPath++)
        {
            ppNode = PathnodeAtGLYPHSYM(gsPrev, iPath);

            if (ppNode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(ppNode))
                continue;

            if (ppNode->pathcost > cost)
            {
                isym = iPath;
                cost = ppNode->pathcost;
            }
        }

        gsPrev = (GLYPHSYM *)0;
        iPath = isym;
    }

    lpguide = LpguideXRCPARAM(xrc);

    ASSERT(CSymGLYPHSYM(gs) > 0);

    gs->cPath = 0;

    {
        //
        // Single character mode.
        //

        for (isym = 0; isym < ((int) CSymGLYPHSYM(gs)); isym++)
        {
            sym = SymAtGLYPHSYM(gs, isym);

            //
            // This is the first glyphsym so no path yet
            //

            cost = ProbAtGLYPHSYM(gs, isym);
            costChar = LOGPROB(cost);

            pnode.pathcost = costChar;
            pnode.indexPrev = 0;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = 0;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }
    }

	xrc->cLayer++;
}

/******************************Public*Routine******************************\
* UndoPATHSRCH
*
* Sometimes GLYPHSYMS that we already computed a path through get changed
* with new strokes.
*
* History:
*  30-Apr-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

VOID PRIVATE UndoPATHSRCH(XRC *xrc, int ilayer)
{
    ASSERT(xrc);

    //
    // We prune back to iLayer if we had processed past it already.  Otherwise
    // just stay where we are.
    //

    xrc->cLayer = min(ilayer, xrc->cLayer);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\res.h ===
// res.h: defines for resources

#ifndef __INCLUDE_RES
#define __INCLUDE_RES

#define RESID_TAIL	5500
#define RESID_DICT 	5600

#define RESID_CPROTO	    5000

#define RESID_OTTER_FIRST   5300
#define RESID_FIB_0			5300
#define RESID_FIB_1			5301
#define RESID_FIB_2			5302
#define RESID_FIB_3			5303
#define RESID_FIB_4			5304
#define RESID_FIB_5			5305
#define RESID_FIB_6			5306
#define RESID_FIB_8			5307
#define RESID_FIB_9			5308
#define RESID_FIB_10	    5309
#define RESID_FIB_13	    5310
#define RESID_FIB_14	    5311
#define RESID_FIB_15	    5312
#define RESID_FIB_21	    5313
#define RESID_FIB_22	    5314
#define RESID_FIB_23	    5315
#define RESID_FIB_24	    5316
#define RESID_FIB_35	    5317
#define RESID_FIB_36	    5318
#define RESID_FIB_37	    5319
#define RESID_FIB_56	    5320
#define RESID_FIB_57	    5321
#define RESID_FIB_58	    5322
#define RESID_FIB_60	    5323
#define RESID_FIB_91	    5324
#define RESID_FIB_92	    5325
#define RESID_FIB_94	    5326
#define RESID_FIB_147	    5327
#define RESID_FIB_149	    5328
#define RESID_FIB_152	    5329
#define RESID_FIB_238	    5330
#define RESID_FIB_241	    5331
#define RESID_OTTER_LAST    5331

#define RESID_TREE01	    5401
#define RESID_TREE02	    5402
#define RESID_TREE03	    5403
#define RESID_TREE04	    5404
#define RESID_TREE05	    5405
#define RESID_TREE06	    5406
#define RESID_TREE07	    5407
#define RESID_TREE08	    5408
#define RESID_TREE09	    5409
#define RESID_TREE10	    5410
#define RESID_TREE11	    5411
#define RESID_TREE12	    5412
#define RESID_TREE13	    5413
#define RESID_TREE14	    5414
#define RESID_TREE15	    5415
#define RESID_TREE16	    5416
#define RESID_TREE17	    5417
#define RESID_TREE18	    5418
#define RESID_TREE19	    5419
#define RESID_TREE20	    5420
#define RESID_TREE21	    5421
#define RESID_TREE22	    5422
#define RESID_TREE23	    5423
#define RESID_TREE24	    5424
#define RESID_TREE25	    5425
#define RESID_TREE26	    5426
#define RESID_TREE27	    5427
#define RESID_TREE28	    5428
#define RESID_TREE29	    5429
#define RESID_TREE30	    5430

#define RESID_HEAD01	    5501
#define RESID_HEAD02	    5502
#define RESID_HEAD03	    5503
#define RESID_HEAD04	    5504
#define RESID_HEAD05	    5505
#define RESID_HEAD06	    5506
#define RESID_HEAD07	    5507
#define RESID_HEAD08	    5508
#define RESID_HEAD09	    5509
#define RESID_HEAD10	    5510
#define RESID_HEAD11	    5511
#define RESID_HEAD12	    5512
#define RESID_HEAD13	    5513
#define RESID_HEAD14	    5514
#define RESID_HEAD15	    5515
#define RESID_HEAD16	    5516
#define RESID_HEAD17	    5517
#define RESID_HEAD18	    5518
#define RESID_HEAD19	    5519
#define RESID_HEAD20	    5520
#define RESID_HEAD21	    5521
#define RESID_HEAD22	    5522
#define RESID_HEAD23	    5523
#define RESID_HEAD24	    5524
#define RESID_HEAD25	    5525
#define RESID_HEAD26	    5526
#define RESID_HEAD27	    5527
#define RESID_HEAD28	    5528
#define RESID_HEAD29	    5529
#define RESID_HEAD30	    5530

#define GRECORES     296

// window class types--do not translate
#define  szErrMsgClass     "ErrMsgClass"
#define  szClassShadeGroup "MARSShade"
#define  szClassInkDraw    "MARSInkDraw"
#define  szClassInkSize    "MARSSize"
#define  szClassInkSelect  "MARSInk"

// error msgs:
#define rsDbLoadFail 1003
#define rsDbLoadOk      1004
#define rsDbSaveFail 1005
#define rsDbInvalid     1006
#define rsDbNotFound 1007
#define rsTrainSave     1008
#define rsDbNotAvail 1009
#define  rsDefaultUser  1010
#define  rsConfirmLoad  1011
#define  rsNoRecog      1012
#define  rsHelpFailed   1014

#define rsAppName    1001
#define rsRecogId    1002

#define  rsBRMeaning       1050
#define  rsBRMeanText      1051
#define  rsBRLookLike      1052
#define  rsBRGesture       1053
#define  rsBRAnything      1054

// Gesture resource IDs:
#define  rsGesTap    1410
#define  rsGesXSelect   1411
#define  rsGesSelect    1412
#define  rsGesDTap      1413
#define  rsGesUndo      1414
#define  rsGesCopy      1415
#define  rsGesCut    1416
#define  rsGesPaste     1417
#define  rsGesCutWord   1418
#define  rsGesCorrect   1419
#define  rsGesBackspace 1420
#define  rsGesSpace     1421
#define  rsGesReturn    1422
#define  rsGesTab    1423
#define  rsGesClear     1424
#define  rsGesClearWord 1425
#define  rsGesInsert    1426
#define  rsGesHelp      1427

#define  rsGesInline    1450
#define  rsTrainConflict   2100
#define  rsszOOM     3200
#define  rsszLoad 3201
#define  rsszSave 3202
#define rsszFilter   3203

#endif   // _H_RES
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\pathsrch.h ===
#ifndef	__INCLUDE_PATHSRCH
#define	__INCLUDE_PATHSRCH

int  ProcessPATHSRCH(XRC *xrc);
BOOL IsDonePATHSRCH(XRC *xrc);

#define XrcparamPATHSRCH(xrc)	((xrc)->xrcparam)
#define CResultPATHSRCH(xrc)	((xrc)->cResult)
#define ResultPATHSRCH(xrc, i)	((i) < (xrc)->cResult ? (xrc)->rgResult[i] : (RESULT *) NULL)
#define CResultMaxPATHSRCH(xrc)	(ResultMaxXRCPARAM((xrc)->xrcparam))
#define CoercionPATHSRCH(xrc)	(CoercionXRCPARAM((xrc)->xrcparam))
#define CLayerPATHSRCH(xrc)     ((xrc)->cLayer)

#define AUTOMATON_ID_NONE 0
#define AUTOMATON_ID_DICT 1
#define AUTOMATON_ID_ANYTHINGOK 2

#define FSM_START        0    // In the start state
#define FSM_DICT         1    // In the dictionary state
#define FSM_ANYOK        2    // In the anything goes state
#define FSM_NUMBERS      3    // In the Numbers FSM
#define FSM_FILE         4    // In the begin file/net name state
#define FSM_BEGIN_PUNC   5    // In the punctuation state
#define FSM_POSSESIVE    6    // 's support

#define NONE_AUTOMATON_INITIAL_STATE 0
#define NONE_AUTOMATON_FINAL_STATE 1

#define DICT_MODE_LITERAL 0
#define DICT_MODE_CAPITALIZED 1
#define DICT_MODE_ALLCAPS 2

#endif	//__INCLUDE_PATHSRCH
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\trie.h ===
#ifndef TRIE_H
#define TRIE_H

#include <windows.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Abstract trie node structure.  wch is a character to transition on; flags describe various things 
about the compressed trie; lpbNode points to the first byte of the next node in this state, and
lpbDown points to the first byte referenced by the down pointer, if any */

typedef struct tagTRIESCAN 
{
	WCHAR   wch;		// Unicode character
	WORD  	wFlags;		// see below
	LPBYTE 	lpbNode;	// Address of next byte within the compressed trie
	LPBYTE	lpbDown;	// Address referenced by down pointer, if any
	LPBYTE	lpbSRDown;	// Last single-ref address referenced 
} TRIESCAN, *PTRIESCAN, *LPTRIESCAN;

/* Trie node flags */
			
#define fTrieNodeValid		0x0001	// wch is the last letter of a valid word
#define fTrieNodeDown		0x0002	// iDown is valid (word so far is a valid prefix)
#define fTrieNodeEnd		0x0004	// Last node in the state (no more alternatives to wch)
#define fTrieNodeInline		0x0008	// iDown omitted, since it points to next consecutive node
#define fTrieNodeMultiref 	0x0010	// pointer is a second reference or worse
#define fTrieNodeSegment    0x0020  // Offset references another segment
#define fTrieNodeRestrict   0x0040  // The word is restricted.
#define fTrieNodeS          0x8000  // Temporarily used to mark a node singleref
#define fTrieNodeM          0x4000  // Temporarily used to mark a node multiref
#define fTrieNodeRef        0x2000  // Temporarily used to mark a node has been moved.

/* Macro to access the data in the node, works for dawgs and tries */

#define DAWGDATA(pdawg)       ((pdawg)->wch)
#define DAWGDOWNFLAG(pdawg)   ((pdawg)->wFlags & fTrieNodeDown)
#define DAWGENDFLAG(pdawg)    ((pdawg)->wFlags & fTrieNodeEnd)
#define DAWGWORDFLAG(pdawg)   ((pdawg)->wFlags & fTrieNodeValid)
#define DAWGRESTRICTED(pdawg) ((pdawg)->wFlags & fTrieNodeRestrict)

/* Fixed-length part of the compressed trie header */

typedef struct tagTRIESTATS 
{
	WORD version;			// version of this particular compressed trie
	WORD cMaxWord;			// number of characters in longest word
	WORD cMaxState;			// number of nodes in longest state (max alternatives)
	WORD cUniqueCharFlags;	// unique char/flags pairs
	WORD cCharFlagsCodesMax;	// bytes in longest char/flags code
 	WORD cUniqueMRPointers;	// unique multi-ref pointers
	WORD cMRPointersCodesMax;	// bytes in longest MR pointer code
	WORD cUniqueSROffsets;	// unique offsets in Single-ref segment
	WORD cSROffsetsCodesMax;	// bytes in longest Single-ref code
	WORD cbHeader;				// bytes in header & tables	
	DWORD cbTrie;			  // bytes in trie
} TRIESTATS, *PTRIESTATS, *LPTRIESTATS;

/* Primary unit of a node.  Nodes usually contain a pointer too */

typedef struct tagCHARFLAGS {
	wchar_t wch;
	short wFlags;
} CHARFLAGS, *PCHARFLAGS, *LPCHARFLAGS;

/* Control structure used to decompress the trie */

typedef struct tagTRIECTRL {
	LPTRIESTATS lpTrieStats;	// Pointer to base of header segment

	LPWORD	lpwCharFlagsCodes;	// decoding table for Char/flags
	LPWORD	lpwMRPointersCodes;	// decoding table for multiref pointers
	LPWORD  lpwSROffsetsCodes;	// decoding table for singleref offsets
	LPCHARFLAGS lpCharFlags;	// table to convert codes to char/flags
	LPDWORD  lpwMRPointers;		// table to convert codes to multiref pointers
	LPDWORD	lpwSROffsets;		// table to convert codes to Singleref offsets    

	LPBYTE lpbTrie;		        // Pointer to the trie.
} TRIECTRL, *PTRIECTRL, *LPTRIECTRL;

/* Useful Constants */

#define cwchTrieWordMax	128	// We'll fail on any words longer than this

// The prototypes below are plain C	(this is required for use with C++)

/* Given a pointer to a mapped file or resource containing a compressed trie,
read the trie into memory, making all the allocations required */

TRIECTRL * TrieInit(LPBYTE lpByte);

/* Free all the allocations associated with a trie */

void TrieFree(LPTRIECTRL lpTrieCtrl);

void TrieDecompressNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

/* Given a compressed trie and a pointer to a decompresed node from it, find and decompress
the next node in the same state. lpTrieScan is a user-allocated structure that holds the
decompressed node and into which the new node is copied.
This is equivalent to traversing a right pointer or finding the next alternative
letter at the same position. If there is no next node (i.e.this is the end of the state)
then TrieGetNextNode returns FALSE. To scan from the beginning of the trie, set the lpTrieScan
structure to zero */

BOOL
TrieGetNextNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

/* Follow the down pointer to the next state.  This is equivalent to accepting the character
in this node and advancing to the next character position.  Returns FALSE if there is no
down pointer.  This also decompresses the first node in the state, so all the values in
lpTrieScan will be good. */

BOOL
TrieGetNextState(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

/* Check the validity of a word or prefix. Starts from the root of pTrie looking for
pwszWord.  If it finds it, it returns TRUE and the user-provided lpTrieScan structure 
contains the final node in the word.  If there is no path, TrieCheckWord returns FALSE
To distinguisha valid word from a valid prefix, caller must test 
wFlags for fTrieNodeValid. */

BOOL
TrieCheckWord(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan, wchar_t * lpwszWord);

/* Walk the trie from pTrieNode, calling pfnTrieWord on every valid word.  pvParam is passed through
to pfnTrieWord.  If pfnTrieWord returns non-zero, the enumeration stops.  lpwszWord must point to a 
space of cwchTrieWordMax+1 wchar_t's.  To walk the entire trie, set *pTrieScan to all zeros.  Returns
the number of words traversed. pfnTrieWord may be null if all you want is the count of words. */

int
TrieEnumerate(
	LPTRIECTRL lpTrieCtrl,		// Trie to enumerate
	LPTRIESCAN lpTrieScan, 	// structure holding starting point, all-zero for whole trie
	wchar_t *pwszWord, 			// buffer to hold words being enumerated
	void *pvParam, 				// parameter to pass to pfnTrieWord
	int (*pfnTrieWord)(wchar_t *pwszWord, void *pvParam)
);

/**** Subroutines for traversing Directed Acyclic Word Graphs ****/

/* Abstract trie node structure.  wch is a character to transition on; flags describe various things 
about the compressed trie; iDown indexes the first node in the state wch transitions to. DAWG is a special
kind of trie: a "Directed Acyclic Word Graph," essentially an ending-compressed trie. */

typedef struct tagDAWGNODE 
{
	WCHAR wch;		// Unicode character
	WORD  wFlags;	// see below
	DWORD iDown;	// Offset of first node in next state
} DAWGNODE, *PDAWGNODE, *LPDAWGNODE;

/* Given a trie and a pointer to a node in it, find the next node in that state.
This is equivalent to traversing a right pointer or finding the next alternative
letter at the same position. Returns a pointer to the new node, NULL if there is 
no next node (i.e. if this is the end of a state).*/

DAWGNODE *DawgGetNextNode(void *pTrie, DAWGNODE *pTrieNode);

/* From this node, find the first node in the state it points to.  This is equivalent
to traversing a down pointer or extending the word one letter and finding the first
alternative.  Returns a pointer to the first node in the new state, NULL if there is 
no down pointer. To find the first state in the trie, use pTrieNode == NULL */

DAWGNODE *DawgGetNextState(void *pTrie, DAWGNODE *pTrieNode);

/* Check the validity of a word or prefix. Starts from the root of pTrie looking for
pwszWord.  If it finds it, it returns a pointer to the terminal node in pTrie Returns
NULL if there is no path through the trie that corresponds to pwszWord. To distinguish
a valid word from a valid prefix, caller must test wFlags for fTrieNodeValid. */

DAWGNODE *DawgCheckWord(void *pTrie, wchar_t *pwszWord);

/* Walk the trie from pTrieNode, calling pfnTrieWord on every valid word.  pvParam is passed through
to pfnTrieWord.  If pfnTrieWord returns non-zero, the enumeration stops.  pwszWord must point to a 
space of cwchTrieWordMax+1 wchar_t's.  To walk the entire trie, pass NULL for pTrieNode. Returns
the number of words traversed. pfnTrieWord may be null if all you want is the count of words. */

int
DawgEnumerate(
	void *pTrie,				// Trie to enumerate
	DAWGNODE *pTrieNodeStart, 	// point to enumerate from, NULL if all
	wchar_t *pwszWord, 			// buffer to hold words being enumerated
	void *pvParam, 				// parameter to pass to pfnTrieWord
	int (*pfnTrieWord)(wchar_t *pwszWord, void *pvParam)
);

// end plain C Prototypes

#ifdef __cplusplus
}
#endif

#endif // TRIE_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\sinfo.c ===
//
// File:  sinfo.c
//
// SINFO object contains search information to be used by the ENGINE.
// It contains GLYPHSYMs, i.e. glyphs and symbols they represent,
// for every allowable stroke combination in the given group.
//
// The GLYPHSYMs are stored differently depending on whether we are
// doing boxed input recognition or free input recognition.  For
// boxed input, the array (ppQueue) represents an array of glyphsyms
// stored according to box indices.  For example, if the user writes
// an 'a' in box 2 and another 'a' in box 4, sinfo->ppQueue[0] contains
// the glyphsym for box 2 and sinfo->ppQueue[1] contains the glyphsym
// for box 4.
//
// For free input, the array represents stroke indices.  Hence,
// sinfo->ppQueue[2] has a linked list of all the glyphsyms that end
// at the 3rd stroke.  Each of those glyphsyms will correspond to
// whether it has 1, 2, or 3 stroke combinations.
//

#include "tsunamip.h"

ROMMABLE CHARSET csDefault =
{
   RECMASK_ALL_DEFAULTS,
   RECMASK_DBCS,         // Make this 0 to get greco functionality / SBCS functionality.
   SSH_RD,
};

#define DEF_LAYER_MAX           100

void PRIVATE GrowArraySINFO(XRC *xrc);
BOOL PRIVATE GetBoxSyvsAtSINFO(XRC *xrc, int iSyv, int cAlt, LPSYV lpsyv);
int  PRIVATE GetBoxInkAtSINFO(XRC *xrc, int iBox, LPHINKSET lphinksetBox);
int  PRIVATE ProcessBoxSINFO(XRC *xrc, FRAME * frame, int iframe);
int  PRIVATE ProcessFreeSINFO(XRC *xrc, FRAME * frame, int iframe);
int  PRIVATE GetBoxIndexSINFO(XRC *xrc, FRAME * frame, LPGUIDE lpguide, int nFirstBox);
void PRIVATE AddGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs);

// *******************************
// 
// CreateSINFO()
//
// creates an SINFO object
//
// Arguments:  input - INPUT object with which to get the frames
//                                      xrcparam - XRCPARAM object which contains recog parameters
//
// Returns:    SINFO
//
// Note:       none
//                                
// *******************************
BOOL InitializeSINFO(XRC *xrc)
{
	ASSERT(xrc);

	xrc->cQueueMax = DEF_LAYER_MAX;
	xrc->ppQueue = (GLYPHSYM **) ExternAlloc(xrc->cQueueMax * sizeof(GLYPHSYM *));

	if (xrc->ppQueue == (GLYPHSYM **) NULL)
		return FALSE;

	xrc->iyBox = -1;
	xrc->cQueue = 0;

	return TRUE;
}


// *******************************
// 
// DestroySINFO()
//
// destroys an SINFO object
//
// Arguments:  sinfo - object to be destroyed
//
// Returns:    none
//
// Note:       INPUT object is read only, so it's deallocation is not
//             handled in this function.
//                                
// *******************************
void PUBLIC DestroySINFO(XRC *xrc)
{
	int     i;
	GLYPHSYM *gs;

	if (!xrc)
		return;

	for (i = 0; i < xrc->cQueue; i++ )
	{
		gs = xrc->ppQueue[i];
		if (gs)
			DestroyGLYPHSYM(gs);
	}

	if (xrc->ppQueue)
		ExternFree(xrc->ppQueue);
}

// *******************************
// 
// GetBoxResultsSINFO()
//
// retrieves one piece of box information from SINFO object at a time.
//
// Arguments:  sinfo - object
//             cAlt - # of box alternatives
//             iSyv - index of syv result (== index of the layer)
//             lpboxres - LPBOXRESULT buffer to store the information
//
// Returns:    
//
// Note:       none
//                                
// *******************************

int PUBLIC GetBoxResultsSINFO(XRC *xrc, int cAlt, int iSyv, LPBOXRESULTS lpboxres, BOOL fInkset)
{
    SYV syv, tmp, tmp1;
	int i;
	int iRet = HWX_SUCCESS;

	ASSERT(xrc);
    ASSERT(lpboxres);
    ASSERT(FBoxedSINFO(xrc));
    ASSERT(iSyv < CLayerProcessedSINFO(xrc));

    if (iSyv >= xrc->cQueue)
	{
		return(HWX_FAILURE);
	}

    lpboxres->indxBox = IBoxGLYPHSYM(xrc->ppQueue[iSyv]) - FirstBoxXRCPARAM(xrc);

    //
    // This copies the SYMs to be SYV's in the output boxresults structure and
    // does some more unfolding.
    //

	GetBoxSyvsAtSINFO(xrc, iSyv, cAlt, (LPSYV)(&lpboxres->rgSyv[0]));

	// We need to move the SYV that was the top context choice to be the top of the list
	// even if it wasn't the best shape matcher choice.

    if (iRet == HWX_SUCCESS)
    {
        GLYPHSYM *gs = GetGlyphsymSINFO(xrc, iSyv);

		tmp = syv = gs->syvBestPath;

        //
        // Insert the result from the engine processing
		// this SYV may or may not be the same as the best choice
        // returned by SINFO.
        //

        for (i = 0; i < cAlt; i++)
        {
            if ((lpboxres->rgSyv[i] == syv) ||
                (lpboxres->rgSyv[i] == SYV_NULL))
            {
                lpboxres->rgSyv[i] = tmp;      // Good we are finished.
                break;
            }

            //
            // Well slide everthing down by one.
            //

            tmp1 = lpboxres->rgSyv[i];
            lpboxres->rgSyv[i] = tmp;
            tmp = tmp1;
        }
    }

	return(iRet);
}

// *******************************
// 
// ProcessSINFO()
//
// processes SINFO object.  retrieves a frame from INPUT object
// and creates a corresponding FRAMESYM (which contains the results
// of shape recognition/baseline-height).
//
// Arguments:  sinfo - SINFO object to process
//
// Returns:    PROCESS_IDLE - if all the frames in INPUT were processed
//             PROCESS_READY - if used up time slice and more processing
//                needs to be done.
//
// Note:       for boxed input, needs to perform segmentation and delayed
//             stroke processing.  that means identifying the box that
//             the frame belongs to and reordering framesyms.
//                                
// *******************************

int PUBLIC ProcessSINFO(XRC *xrc, BOOL fEnd)
{
    FRAME    *frame;
    int      iRet = PROCESS_IDLE;
    ASSERT(xrc);

#if 1

    //
    // On Pegasus we add each stroke in it's entirety in one call, thus
    // we can always grab all the strokes, (though we do lose our skipping fix code then>.
    //
    // On Pegasus currently we don't support entering partial strokes, though we may in the
    // future do this.  It would be quicker to just put the ink directly in the recognizer
    // rather than passing it through messages and at some point in the future I may do that
    // but at present we don't.  To do it properly we need to mark frames when they are done
    // rather than just being afraid to touch the last stroke in the buffer.  So we can
    // optimally process ahead.
    //

    if (xrc->cFrame >= CFrameINPUT(xrc))
        return(PROCESS_IDLE);

#else

    //
    // In the old days you could add partial strokes at a time so you couldn't
    // access the last stroke until your done.
    //

    if (fEnd)
    {
        //
        // No more input can be added, last frame is complete
        // for sure so finish it off.
        //

        if (xrc->cFrame >= CFrameINPUT(xrc))
            return(PROCESS_IDLE);
    }
    else
    {
        //
        // We can't access the last frame since input may
        // still get added to it.
        //

        if (xrc->cFrame >= (CFrameINPUT(xrc) - 1))
            return(PROCESS_IDLE);   // no state changes
    }

#endif

    frame = FrameAtINPUT(xrc, xrc->cFrame);     // next frame
    ASSERT(frame);
    xrc->cPntLastFrame = CrawxyFRAME(frame);

    if (FBoxedSINFO(xrc))   // boxed processing?
    {
        iRet = ProcessBoxSINFO(xrc, frame, xrc->cFrame);
    }
    else
    {
        iRet = PROCESS_IDLE;
    }

    xrc->cFrame++;

    //
    // We return this so we won't fall down to engine processing
    // till all the frames available have been placed in their
    // corresponding GLYPHSYM.
    //

    return(PROCESS_READY);
}

#define CYBASE_FUDGE    4

// *******************************
// 
// GetBoxIndex()
//
// This function was copied from MARS implementation.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
int  PRIVATE GetBoxIndexSINFO(XRC *xrc, FRAME * frame, LPGUIDE lpguide, int nFirstBox)
   {
   XY    xy;
   int   ixBox, iyBox, iBox, cyBaseHt, iyBoxBiased;
   RECT  *rect;

   ASSERT(frame);
   ASSERT(lpguide);
	ASSERT(lpguide->cHorzBox > 0);
	ASSERT(lpguide->cVertBox > 0);

	rect = RectFRAME(frame);

	if (rect->right < lpguide->xOrigin ||
		rect->bottom < lpguide->yOrigin ||
		rect->left > lpguide->xOrigin + lpguide->cxBox * lpguide->cHorzBox ||
		rect->top > lpguide->yOrigin + lpguide->cyBox * lpguide->cVertBox)
		return(INDEX_NULL);

	xy.x = (rect->left + rect->right) / 2;

	cyBaseHt = lpguide->cyBase ? lpguide->cyBox - lpguide->cyBase : 0;
	xy.y = (rect->top * (CYBASE_FUDGE - 1) + rect->bottom) / CYBASE_FUDGE;

	ixBox = (xy.x - lpguide->xOrigin) / lpguide->cxBox;
	if (ixBox < 0)
		ixBox = 0;
	else if (ixBox > lpguide->cHorzBox - 1)
		ixBox = lpguide->cHorzBox - 1;

	iyBox = (xy.y - lpguide->yOrigin) / lpguide->cyBox;
	if (iyBox < 0)
		iyBox = 0;
	else if (iyBox > lpguide->cVertBox - 1)
		iyBox = lpguide->cVertBox - 1;

	if (xrc->iyBox >= 0)
		{
		// Help dots, accents, etc land on their respective boxes...
		if (iyBox < xrc->iyBox)
			{
			if (cyBaseHt > 0)
				{
				// expand the box below to the bottom of the previous box's baseline
				xy.y += (cyBaseHt - 1);
		
				iyBoxBiased = (xy.y - lpguide->yOrigin) / lpguide->cyBox;
				if (iyBoxBiased > (lpguide->cVertBox - 1))
					iyBoxBiased = lpguide->cVertBox - 1;
				else if (iyBoxBiased < 0)
					iyBoxBiased = 0;
	
				// TODO:  is this check good enough???
				if (iyBoxBiased == xrc->iyBox)
					iyBox = iyBoxBiased;
				}
			}
		else if (iyBox > xrc->iyBox && ixBox >= xrc->ixBox)
			{
			xy.y = (rect->top + xy.y) / 2;
			
			iyBoxBiased = (xy.y - lpguide->yOrigin) / lpguide->cyBox;
			if (iyBoxBiased > (lpguide->cVertBox - 1))
				iyBoxBiased = lpguide->cVertBox - 1;
			else if (iyBoxBiased < 0)
				iyBoxBiased = 0;
  
			// TODO:  is this check good enough???
			if (iyBoxBiased == xrc->iyBox)
				iyBox = iyBoxBiased;
			}
		}

	xrc->ixBox = ixBox;
	xrc->iyBox = iyBox;

	iBox = ixBox + (iyBox * lpguide->cHorzBox) + nFirstBox;

   return(iBox);
   }


// *******************************
// 
// ProcessBoxSINFO()
//
// performs boxed input SINFO processing.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
int PRIVATE ProcessBoxSINFO(XRC *xrc, FRAME *frame, int iframe)
{
    int      iBox;
    GLYPHSYM *gs;

    ASSERT(xrc);
    ASSERT(frame);
    ASSERT(FBoxedSINFO(xrc));

    iBox = GetBoxIndexSINFO(xrc, frame, LpguideXRCPARAM(xrc), FirstBoxXRCPARAM(xrc));

    if (iBox == INDEX_NULL)
    {
        return(PROCESS_READY);
    }

    if (gs = GetBoxGlyphsymSINFO(xrc, iBox))
    {
        //
        // Add the frame to an existing box.  re-recognize the box.
        //

        if (!AddFrameGLYPHSYM(gs, frame, &CharsetXRCPARAM(xrc), xrc))
        {
            WARNING(FALSE);
            return(PROCESS_READY);
        }
    }
    else
    {
        //
        // Create a new box containing the frame.  Recognize the box.
        //

        GLYPH *glyph = NewGLYPH();    // destroyed by GLYPHSYM object

		if (glyph == (GLYPH *) NULL)
			return PROCESS_READY;

        if (!AddFrameGLYPH(glyph, frame))
			return PROCESS_READY;

        gs = (GLYPHSYM *) ExternAlloc(sizeof(GLYPHSYM));

		if (gs == (GLYPHSYM *) NULL)
		{
			DestroyGLYPH(glyph);
			return PROCESS_READY;
		}

        InitializeGLYPHSYM(gs, GSST_BOX, iBox, glyph, &CharsetXRCPARAM(xrc));
		ASSERT(gs->glyph);

        AddBoxGlyphsymSINFO(xrc, gs);
    }

    // OK, now the GLYPH knows about this frame.  Remove it from the XRC

	xrc->rgFrame[xrc->cFrame] = (FRAME *) NULL;

    // Mark the GLYPHSYM dirty so we know to recognize it.

    MarkDirtyGLYPHSYM(gs);

    xrc->gsLastInkAdded = gs;
    xrc->fUpdate = TRUE;

    return(PROCESS_READY);
}

GLYPHSYM* PUBLIC GetBoxGlyphsymSINFO(XRC *xrc, int iBox)
{
    int   i;

    ASSERT(xrc);

    for (i = 0; i < xrc->cQueue ;i++ )
    {
        if (IBoxGLYPHSYM(xrc->ppQueue[i]) == iBox)
            return(xrc->ppQueue[i]);
    }

    return(NULL);
}

// *******************************
// 
// AddBoxGlyphsymSINFO()
//
// stores the gs object for boxed input.
// stores it based on the index of the box.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
BOOL AddBoxGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs)
{
   int   iLayer = 0, i;
   int   iBox;

   ASSERT(xrc);
   ASSERT(gs);

   iBox = IBoxGLYPHSYM(gs);

   GrowArraySINFO(xrc);

   while (iLayer < CLayerSINFO(xrc))
   {
      if (iBox < IBoxGLYPHSYM(xrc->ppQueue[iLayer]))
          break;
      iLayer++;
   }

   for (i = CLayerSINFO(xrc);i > iLayer ; i-- )
   {
      xrc->ppQueue[i] = xrc->ppQueue[i-1];
      SetILayerGLYPHSYM(xrc->ppQueue[i], i);
   }

   // set the current glyphsym
   xrc->ppQueue[iLayer] = gs;
   SetILayerGLYPHSYM(gs, iLayer);
   gs->prev = GetGlyphsymSINFO(xrc, iLayer-1);

   // the new glyphsym is inserted in the middle and
   // the previous pointer for the old glyphsym needs
   // to be properly updated.

   if (iLayer < xrc->cQueue)
      xrc->ppQueue[iLayer+1]->prev = gs;

   xrc->cQueue++;

   return(TRUE);
}


// *******************************
// 
// GrowArraySINFO()
//
// private function to handle array reallocation.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
void PRIVATE GrowArraySINFO(XRC *xrc)
   {
	if (xrc->cQueue >= xrc->cQueueMax)
		{
		// Allocate more space.

		xrc->cQueueMax += DEF_LAYER_MAX;
		xrc->ppQueue = (GLYPHSYM**) ExternRealloc(xrc->ppQueue,
			(xrc->cQueueMax)*sizeof(GLYPHSYM*));
		ASSERT(xrc->ppQueue);

		}
   }

void PRIVATE AddGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs)
   {
   int   ilayer;
   ASSERT(xrc);
   ASSERT(gs);

   GrowArraySINFO(xrc); 
	xrc->ppQueue[xrc->cQueue] = gs;

   ilayer = xrc->cQueue;
   SetILayerGLYPHSYM(gs, ilayer);
   ilayer -= CFrameGLYPHSYM(gs);
   gs->prev = GetGlyphsymSINFO(xrc, ilayer);
   
	xrc->cQueue++;
   }

GLYPHSYM* PUBLIC GetGlyphsymSINFO(XRC *xrc, int iLayer)
   {
   ASSERT(xrc);
   ASSERT(iLayer < xrc->cQueue);

   if (iLayer < 0 || iLayer >= xrc->cQueue)
      return(NULL);

   return(xrc->ppQueue[iLayer]);
   }

/******************************Public*Routine******************************\
* GetBoxSyvsAtSINFO
*
* For boxed results this returns the alternative shapes proposed.
*
* History:
*  01-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

BOOL PRIVATE GetBoxSyvsAtSINFO(XRC *xrc, int iSyv, int cAlt, LPSYV lpsyv)
{
    int iSym, cSym, iAlt;
    SYM sym;
    GLYPHSYM *gs;
    CHARSET *cs;

    ASSERT(xrc);
    ASSERT(lpsyv);
    ASSERT(FBoxedSINFO(xrc));
    ASSERT(iSyv < CLayerProcessedSINFO(xrc));

    memset(lpsyv, 0, sizeof(SYV) * cAlt);

    gs = GetGlyphsymSINFO(xrc, iSyv);

    ASSERT(gs);

    cs = CharsetSINFO(xrc);

    ASSERT(cs);

    cSym = CSymGLYPHSYM(gs);

    //
    // Check for no results available.
    //

    if ((cAlt == 0) || (cSym == 0))
    {
        lpsyv[0] = SYV_UNKNOWN;
        return (TRUE);
    }

    //
    // Stick the Syv's into the boxinfo struct.
    //

    iAlt = 0;

    for (iSym = 0; ((iSym < cSym) && (iAlt < cAlt)); iSym++)
    {
        sym = SymAtGLYPHSYM(gs, iSym);

        if (sym == SYM_UNKNOWN)
        {
            // if its a SYM_UNKNOWN then it only interests us if
            // its the only sym.  otherwise there is no point in
            // putting a SYV_UNKNOWN in because clearly something
            // has been recognized.

            if (cSym == 1)
            {
                lpsyv[iAlt++] = SYV_UNKNOWN;
            }
        }
        else
        {
            //
            // Make sure the syv hasn't already been added.
            //

            int iDup;
            SYV syvAlt;
            syvAlt = sym;

            for (iDup = 0; iDup < iAlt; iDup++)
            {
                if (lpsyv[iDup] == syvAlt)
                {
                    break;
                }
            }

            if (iDup >= iAlt)
            {
                //
                // The syv isn't already in the table.
                //

                lpsyv[iAlt++] = syvAlt;
            }
        }
    }

    return(TRUE);
}

int PUBLIC CLayerProcessedSINFO(XRC *xrc)
{
	GLYPHSYM *gs;
	int cLayerProc = 0;

	while (cLayerProc < CLayerSINFO(xrc))
    {
		gs = GetGlyphsymSINFO(xrc, cLayerProc);
		if (IsDirtyGLYPHSYM(gs))
			break;
		cLayerProc++;
    }

	return(cLayerProc);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\sinfo.h ===
#ifndef _INC_SINFO_H
#define _INC_SINFO_H

extern ROMMABLE CHARSET csDefault;

// ----------
// SINFO object abstract data type
// ----------

#define GlyphAtSINFO(s, t, k)      (((FRAMESYM*)((xrc)->rgLayer[t]))->rgglyphsym[(k)-1]->glyph)

BOOL InitializeSINFO(XRC *xrc);
void DestroySINFO(XRC *xrc);
int  ProcessSINFO(XRC *xrc, BOOL fEnd);
int	 GetBoxResultsSINFO(XRC *xrc, int cAlt, int iSyv, LPBOXRESULTS lpboxres, BOOL fInkset);
int  GetLayerPrevSINFO(XRC *xrc, GLYPHSYM * gs);
int  ILayerFromIFrameSINFO(XRC *xrc, int iFrame);
int  CLayerProcessedSINFO(XRC *xrc);
BOOL AddBoxGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs);
GLYPHSYM *GetGlyphsymSINFO(XRC *xrc, int iLayer);
GLYPHSYM *GetBoxGlyphsymSINFO(XRC *xrc, int iBox);
GLYPHSYM *GlyphsymFromSINFO(XRC *xrc, int iFrameEnd, int cFrame, BOOL *fDestroy);

#define CFrameSINFO(xrc)				((xrc)->cFrame)
#define CFrameProcessedSINFO(xrc)		((xrc)->cFrame)
#define CLayerSINFO(xrc)				((xrc)->cQueue)
#define IsDoneSINFO(xrc)                ((xrc)->cFrame == (xrc)->cInput)
#define FEndOfInkSINFO(xrc)             (FEndInputXRCPARAM(xrc))
#define FBoxedSINFO(xrc)                (FBoxedInputXRCPARAM(xrc))
#define LpguideSINFO(xrc)               (LpguideXRCPARAM(xrc))
#define FirstBoxSINFO(xrc)              (FirstBoxXRCPARAM(xrc))
#define CharsetSINFO(xrc)               (&((xrc)->cs))

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\trie.c ===
#include "trie.h"

/******************************Public*Routine******************************\
* TrieInit
*
* Given a pointer to a resource or mapped file of a mapped file this
* function allocates and initializes the trie structure.
*
* Returns NULL for failure, trie control structure pointer for success.
*
* History:
*  16-Jun-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

TRIECTRL * TrieInit(LPBYTE lpByte)
{
    size_t cbTrieCtrl;
	LPWORD lpwTables;
    TRIECTRL *lpTrieCtrl;
    LPTRIESTATS lpTrieStats;

    lpTrieStats = (LPTRIESTATS) lpByte;

    if (lpTrieStats == NULL)
    {
        return(NULL);
    }

    //
    // Allocate space for the control structure and the table of SR offsets
    //

    cbTrieCtrl = sizeof(*lpTrieCtrl);
    lpTrieCtrl = malloc(cbTrieCtrl);    

    if (lpTrieCtrl == NULL)
    {
        return(NULL);
    }

    //
    // Allocate space for the complete header, copy the fixed part and read in the rest
    //

	lpByte += lpTrieStats->cbHeader;
	lpTrieCtrl->lpTrieStats = lpTrieStats;

    //
    // Set up the table pointers (all these tables are inside the TRIECTRL allocation)
    //

	lpwTables = (LPWORD)(lpTrieStats+1);

	lpTrieCtrl->lpwCharFlagsCodes = lpwTables;
    lpwTables += lpTrieStats->cCharFlagsCodesMax;
	lpTrieCtrl->lpwMRPointersCodes = lpwTables;
    lpwTables += lpTrieStats->cMRPointersCodesMax;
	lpTrieCtrl->lpwSROffsetsCodes = lpwTables;
	lpwTables += lpTrieStats->cSROffsetsCodesMax; 

	lpTrieCtrl->lpCharFlags = (LPCHARFLAGS)lpwTables;
	lpwTables = (LPWORD)(lpTrieCtrl->lpCharFlags + lpTrieStats->cUniqueCharFlags);

	lpTrieCtrl->lpwMRPointers = (DWORD *) lpwTables;
	lpwTables += (2 * lpTrieStats->cUniqueMRPointers);

	lpTrieCtrl->lpwSROffsets = (DWORD *) lpwTables;
	lpwTables += (2 * lpTrieStats->cUniqueSROffsets);

    //
    // These tables should exactly fill the allocation
    //
	 
    //
    // Init trie pointers
    //

	lpTrieCtrl->lpbTrie = (LPBYTE)lpByte;
	
	return (void *)lpTrieCtrl;
}

/******************************Public*Routine******************************\
* TrieFree
*
* Free the resources allocated for the control structure.
*
* History:
*  16-Jun-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void TrieFree(LPTRIECTRL lpTrieCtrl)
{
    //
    // Finally free the control structure and all the tables.  STILL MUST FREE THIS FOR ROM
    //

    free(lpTrieCtrl);

}

/* Deompress a single symbol using base-256 huffman from a compressed data structure. piSymbol
points to a space to hold the decompressed value, which is an index to a frequency-ordered
table of symbols (0 is most frequent).  pcCodes is a table of code lengths returned from 
HuffmanComputeTable.  pbData is a pointer to memory that contains the encoded data.  The 
return value is the number of bytes decoded. */

int DecompressSymbol(WORD *piSymbol, WORD *pcCodes, unsigned char *pbData)
{
	int cBytes = 0;
	WORD wCode = 0, wiSymbol = 0;

	/* At each stage in this loop, we're trying to see if we've got a length-n code. 
	dwCode is which length-n code it would have to be.  If there aren't that many length-n codes,
	we have to try n+1.  To do that, we subtract the number of length-n codes and shift in
	the next byte. dwiSymbol is the symbol number of the first length-n code. */

    while (1)
    {
		wCode += *pbData++;
		++cBytes;
        if (wCode < *pcCodes)
        {
			break;
		}
		wiSymbol += *pcCodes;
		wCode -= *pcCodes++;
		wCode <<= 8;
   	}

	/* Now that dwCode is a valid number of a length-cBytes code, we can just add it to
	dwiSymbol, because we've already added the counts of the shorter codes to it. */ 

	wiSymbol += wCode;
	
	*piSymbol = wiSymbol;

	return cBytes;
}

void TrieDecompressNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan)
{
	WORD wCode;
    DWORD wOffset;
	LPTRIESTATS lpTrieStats;

	lpTrieStats = lpTrieCtrl->lpTrieStats;

	/* If this is an initial call, use the first byte in the first SR segment */

    if (lpTrieScan->wFlags == 0)
    {
        lpTrieScan->lpbSRDown = 0;
        lpTrieScan->lpbNode = lpTrieCtrl->lpbTrie;
	}

	/* Decompress the char/flags */

	lpTrieScan->lpbNode += DecompressSymbol(&wCode,lpTrieCtrl->lpwCharFlagsCodes,
                                            lpTrieScan->lpbNode);

	lpTrieScan->wch = lpTrieCtrl->lpCharFlags[wCode].wch;
	lpTrieScan->wFlags = lpTrieCtrl->lpCharFlags[wCode].wFlags;

	/* Code to decompress enumeration goes here */

	/* Code to decompress right pointers goes here */

	/* There are 4 kinds of down pointer: Segement, Inline, Multiref, and Singleref Offset.
	Each requires different decompression */

    if (lpTrieScan->wFlags&fTrieNodeInline)
    {
		/* Inline: The down pointer points to the next sequential byte (so it isn't stored) */


		lpTrieScan->lpbSRDown = lpTrieScan->lpbDown = lpTrieScan->lpbNode;
    }
    else if (lpTrieScan->wFlags&fTrieNodeMultiref)
    {
		/* Multiref: The down pointer is encoded directly */

		lpTrieScan->lpbNode += DecompressSymbol(&wCode,lpTrieCtrl->lpwMRPointersCodes,
			lpTrieScan->lpbNode);

		lpTrieScan->lpbDown = lpTrieCtrl->lpbTrie + lpTrieCtrl->lpwMRPointers[wCode];
    }
    else if (lpTrieScan->wFlags&fTrieNodeDown)
    {
		/* SR Offset.  The down pointer is encoded as an offset from the LAST downpointer
		into this singleref segment.  So we have to keep the old one around so we can add to it */

		lpTrieScan->lpbNode += DecompressSymbol(&wCode,lpTrieCtrl->lpwSROffsetsCodes,
			lpTrieScan->lpbNode);

        if (lpTrieScan->lpbSRDown == 0)
        {
            lpTrieScan->lpbSRDown = lpTrieScan->lpbNode;  // We offset from the end of the first node when going into a new state.
        }

        wOffset = lpTrieCtrl->lpwSROffsets[wCode];
		lpTrieScan->lpbSRDown += wOffset;
		lpTrieScan->lpbDown = lpTrieScan->lpbSRDown;
    }
    else
    {
		lpTrieScan->lpbDown = NULL;
    }

} // TrieDecompressNode

/* Given a compressed trie and a pointer to a decompresed node from it, find and decompress
the next node in the same state. lpTrieScan is a user-allocated structure that holds the
decompressed node and into which the new node is copied.
This is equivalent to traversing a right pointer or finding the next alternative
letter at the same position. If there is no next node (i.e.this is the end of the state)
then TrieGetNextNode returns FALSE. To scan from the beginning of the trie, set the lpTrieScan
structure to zero */

BOOL TrieGetNextNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan)
{
	/* If this is the last node, quit here */

    if (lpTrieScan->wFlags&fTrieNodeEnd)
    {
		return FALSE;
    }

	TrieDecompressNode(lpTrieCtrl,lpTrieScan);

	return TRUE;
}

/* Follow the down pointer to the next state.  This is equivalent to accepting the character
in this node and advancing to the next character position.  Returns FALSE if there is no
down pointer.  This also decompresses the first node in the state, so all the values in
lpTrieScan will be good. */

BOOL TrieGetNextState(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan)
{
	/* Flags can't normally be zero; that always means "top node" */

    if (lpTrieScan->wFlags == 0)
    {
        TrieDecompressNode(lpTrieCtrl, lpTrieScan);
		return TRUE;
	}

    if (!(lpTrieScan->wFlags&fTrieNodeDown))
    {
		return FALSE;
	}

    lpTrieScan->lpbSRDown = 0;
    lpTrieScan->lpbNode = lpTrieScan->lpbDown;

	TrieDecompressNode(lpTrieCtrl, lpTrieScan);

	return TRUE;

} // TrieGetNextState

/* Check the validity of a word or prefix. Starts from the root of pTrie looking for
pwszWord.  If it finds it, it returns TRUE and the user-provided lpTrieScan structure 
contains the final node in the word.  If there is no path, TrieCheckWord returns FALSE
To distinguish a valid word from a valid prefix, caller must test 
wFlags for fTrieNodeValid. */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\tsunamip.h ===
// Private includes for TSUNAMI.  This should include all the internal data types
// as well as including all recognizers used by TSUNAMI class products

#ifndef	__INCLUDE_TSUNAMIP
#define	__INCLUDE_TSUNAMIP

#include "common.h"
#include "tsunami.h"
#include "tcrane.h"
#include "tigerp.h"
#include "dict.h"

// This defines the value we decide to use the Zilla recognizer

#define	TSUNAMI_USE_ZILLA	3

// Private API for training/tuning

int  WINAPI GetPrivateRecInfoHRC(HRC, WPARAM, LPARAM);
int  WINAPI SetPrivateRecInfoHRC(HRC, WPARAM, LPARAM);
BOOL LoadRecognizer(VOID);
VOID UnloadRecognizer(VOID);

// This structure is used by the training/tuning APIs

typedef struct tagRECCOSTS
{
    // Weights for Viterbi search.  We have seperate weights for
    // both Char and String.  We then have seperate weights for
    // both Mars and Zilla since the range of the scores returned by
    // each classifier might vary greatly.  Also 1 and 2 stroke chars
    // probably would weight b/h more that the multi-stroke chars do.

    FLOAT BigramWeight;
    FLOAT DictWeight;
    FLOAT AnyOkWeight;
    FLOAT StateTransWeight;
    FLOAT NumberWeight;
    FLOAT BeginPuncWeight;
    FLOAT EndPuncWeight;

    // Char Weights

    FLOAT CharUniWeight;          // mult weight for unigram cost
    FLOAT CharBaseWeight;         // mult weight for baseline
    FLOAT CharHeightWeight;       // mult weight for height transition between chars.
    FLOAT CharBoxBaselineWeight;  // mult weight for baseline cost given the baseline and
                                  // size of box they were given to write in.
    FLOAT CharBoxHeightWeight;    // mult weight for height/size cost given size of box
                                  // they were supposed to write in.
    // String Weights

    FLOAT StringUniWeight;          // mult weight for unigram cost
    FLOAT StringBaseWeight;         // mult weight for baseline
    FLOAT StringHeightWeight;       // mult weight for height transition between chars.
    FLOAT StringBoxBaselineWeight;  // mult weight for baseline cost given the baseline and
                                    // size of box they were given to write in.
    FLOAT StringBoxHeightWeight;    // mult weight for height/size cost given size of box
                                    // they were supposed to write in.
} RECCOSTS;

// These are internal defines that have no clear home.  Many came from the old primitiv.h
// file, but that is no longer appropriate.

#define	PROCESS_IDLE		0
#define	PROCESS_READY		1
#define	PROCESS_OK			2
#define	PROCESS_EXIT		3
#define	PROCESS_TIMEOUT		4
#define	PROCESS_GESTURE		5

#define  PRI_WEIGHT       (WPARAM) 0
#define  PRI_GUIDE        (WPARAM) 1
#define  PRI_GLYPHSYM     (WPARAM) 2
#define  PRI_SIGMA        (WPARAM) 3

#define COST_ZERO				((FLOAT)  0.0)
#define COST_FORCE				((FLOAT)  2.0)
#define COST_ADJUST_PRIORITY	((FLOAT)  2.0)
#define COST_REJECT				((FLOAT)  3.0)
#define COST_UNKNOWN			((FLOAT) -1.0)
#define	COST_MAXIMUM			((FLOAT)  10000.0)
#define	COST_MINIMUM			((FLOAT) -10000.0)

#define DbcsResultsCHARSET(cs, csDef)								\
			(((cs)->recmaskPriority & RECMASK_GLOBALPRIORITY) ?		\
			(((csDef)->recmaskPriority & RECMASK_DBCS) != 0) :		\
			(((cs)->recmaskPriority & RECMASK_DBCS) != 0))

#define RecmaskPriorityCHARSET(cs, csDef)                                                               \
			(((cs)->recmaskPriority & RECMASK_GLOBALPRIORITY) ?     \
			(csDef)->recmaskPriority :                                                                              \
			(cs)->recmaskPriority)

// This includes all the internal engine data types.  This list is VERY 
// sensitive to order.  Change this under GREAT risk of personal harm 
// or worse yet, ridicule by your peers.

#include "height.h"
#include "glyphsym.h"
#include "path.h"
#include "xrc.h"
#include "input.h"
#include "xrcparam.h"
#include "sinfo.h"
#include "pathsrch.h"
#include "engine.h"
#include "global.h"
#include "bigram.h"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\nnet.c ===
// generated by trntrex from 192766
// layer 0
const int cInput = 35;
// layer 1
const int cHidden = 150;
const short rgWeightHidden[150*35] = {
	// rgWeightHidden+0*35
	-1442, -539, -422, 408, -749,
	-8, -23, 234, 22, 1006,
	-980, 1281, -1207, -1690, -244,
	430, -197, -699, -1106, 6148,
	1226, 3203, 1144, 1501, 363,
	-503, 1, 0, -1, -2,
	2, 2, -1, 1, 0,
	// rgWeightHidden+1*35
	-225, 359, 391, 1025, 962,
	-195, 1205, 739, 773, 10,
	36, 163, -529, -149, -663,
	-933, -1195, -1107, 570, -7368,
	-5713, -794, -1742, -392, 1163,
	-177, -1, -1, 2, 0,
	-1, -2, 0, 0, -1,
	// rgWeightHidden+2*35
	1291, 575, 305, 2208, 85,
	-384, 277, 165, 331, -1931,
	-1270, 655, -815, -558, 1210,
	473, -257, 132, -300, -252,
	2460, -964, 1050, 2105, -801,
	-1907, 1, 0, 0, -2,
	0, -1, 0, -1, -1,
	// rgWeightHidden+3*35
	443, 176, -5, 826, 214,
	-37, 402, 385, 263, -641,
	1088, 605, -175, 721, 174,
	-27, 268, 245, 328, 164,
	122, 308, -310, -382, -57,
	206, -1, -1, 2, 0,
	0, 2, 0, 0, 0,
	// rgWeightHidden+4*35
	5875, -3714, -6439, -550, 242,
	1560, 2605, 621, -536, -1412,
	688, -155, -688, -3336, 1362,
	157, 793, 656, -934, 186,
	965, -543, 75, -533, -1529,
	-208, -1, -1, 1, 0,
	-1, -1, 0, -1, 0,
	// rgWeightHidden+5*35
	-919, 595, -6200, -923, 3143,
	2140, 1161, 427, 167, -1445,
	3534, 2228, -4059, -56, 2214,
	972, 255, -245, -928, -779,
	-36, -362, 1820, -2110, -1488,
	843, 1, 0, 2, 1,
	-2, 0, -2, 1, 0,
	// rgWeightHidden+6*35
	-303, 74, 505, 121, 248,
	331, 341, 382, 170, -277,
	997, 498, 335, 199, 209,
	277, 251, 381, -297, -310,
	274, 87, -355, -150, 274,
	41, 0, 2, 0, -2,
	-1, 0, 1, 0, 0,
	// rgWeightHidden+7*35
	-544, -615, 202, 203, 1496,
	836, 413, 670, 572, 1216,
	-98, 266, 913, 358, 493,
	577, 565, 734, -363, -1155,
	-276, 371, 659, -157, -2166,
	-1584, 1, -2, 0, 1,
	0, 0, -1, 0, 1,
	// rgWeightHidden+8*35
	-2353, 702, -1896, -3509, -397,
	3821, 1216, -111, 1131, -5731,
	-451, -1206, 4887, -2463, 1387,
	1978, 567, 1426, -650, 742,
	-1013, 524, -581, 624, 3479,
	-670, 0, -1, 0, -1,
	0, -1, 1, 1, 0,
	// rgWeightHidden+9*35
	-1495, -2435, -2444, 1425, 2142,
	909, 851, 999, 718, -1794,
	-1240, 3059, 122, -60, 1122,
	463, 868, 1451, -488, -978,
	915, -1213, 1121, 379, 700,
	527, 2, 1, 2, -1,
	0, 2, 0, 1, 2,
	// rgWeightHidden+10*35
	-2603, 524, -2268, 878, -463,
	-347, 366, -220, -109, 2451,
	4268, -379, -1481, 585, 849,
	-340, -617, 115, 646, 2041,
	-1798, 2323, -863, 944, 2271,
	-448, 1, 0, 0, 0,
	-2, 2, 2, -1, -2,
	// rgWeightHidden+11*35
	-1006, -462, -2247, 1271, 2417,
	-198, 378, 1054, 497, -198,
	-133, -900, 1937, -969, 466,
	-487, 1181, 866, -100, 175,
	323, 396, 164, -895, -4292,
	-3022, -1, 0, -2, -1,
	-2, 0, 1, -1, -1,
	// rgWeightHidden+12*35
	146, -894, 177, 17, 131,
	817, 780, 615, -346, 513,
	683, 1961, 1460, -131, -61,
	-260, -543, -273, -1961, 3093,
	2951, 1137, -2385, -664, -1465,
	405, 1, 0, 0, -1,
	0, 0, 1, 2, -1,
	// rgWeightHidden+13*35
	-769, 608, -1086, 946, 824,
	211, 699, 569, 460, -371,
	21, 989, 238, -88, 541,
	647, 342, 372, -1066, -488,
	470, -245, -161, -480, 327,
	43, 1, 0, 0, 0,
	-2, 0, 1, 1, -2,
	// rgWeightHidden+14*35
	2058, 968, 927, -681, 547,
	742, 686, 511, 635, -337,
	-1596, 1384, -219, -1439, 244,
	1086, 879, -59, 1868, -805,
	987, -833, 2467, -550, -2260,
	1006, 0, -1, 0, 0,
	-1, 1, -1, 1, 0,
	// rgWeightHidden+15*35
	-2250, 976, 275, -378, 1192,
	346, 194, 446, 331, -168,
	1174, -561, -489, 754, 806,
	585, -4, 281, 723, -182,
	-235, 645, -120, 1167, -737,
	708, 0, -1, 1, 0,
	2, -2, 1, 0, 0,
	// rgWeightHidden+16*35
	-3179, -2833, 906, -2315, -2597,
	86, 870, -618, -1088, 7104,
	-1652, -4824, -1428, 758, 2637,
	1440, -689, 326, -832, 1465,
	-1461, 1662, 2591, 1886, -1139,
	-712, 1, 2, 0, 0,
	2, 0, -1, -1, 1,
	// rgWeightHidden+17*35
	1244, 4141, 1830, -814, 930,
	83, -337, -706, 211, -1802,
	809, -779, 777, 655, -832,
	-786, -225, -1933, 272, -1003,
	-5184, 2450, -2212, -698, -1371,
	205, 0, -1, 2, -1,
	0, 2, -1, -1, 1,
	// rgWeightHidden+18*35
	-677, -2170, 251, -206, 438,
	792, 708, 768, 486, -1558,
	606, 1540, 239, 203, 520,
	957, 469, 785, 188, -1132,
	868, -850, 154, 602, 527,
	-8, 0, -1, 0, -2,
	1, 0, 0, 1, 0,
	// rgWeightHidden+19*35
	-469, 118, -149, -24, -101,
	429, 762, 334, 52, -429,
	354, 125, -333, 380, 585,
	470, 226, 320, 348, 368,
	735, 268, 282, 654, -500,
	225, 2, -2, 0, 0,
	0, -2, 1, 2, 0,
	// rgWeightHidden+20*35
	1374, 1119, 856, 2298, -501,
	-852, 620, 602, 1147, -2433,
	365, 9, -1947, -17, 1721,
	592, -240, 82, 1331, 707,
	358, -144, 1467, -1310, 353,
	536, 1, 1, -2, -1,
	-1, 0, 0, 0, 0,
	// rgWeightHidden+21*35
	8622, -2374, 140, -2872, 753,
	163, -1274, -460, -732, -3361,
	530, 435, -1941, 88, -1416,
	-1611, -194, 146, -315, 22,
	312, -1802, 12, 222, -498,
	170, -2, 0, 0, -1,
	0, -1, -1, -2, 1,
	// rgWeightHidden+22*35
	-2513, -833, 41, -3725, -1342,
	4505, 2722, -214, -940, 1889,
	-1674, -2782, 1034, 86, 840,
	-137, 1342, 732, 1471, 126,
	-300, 1313, 2108, 483, -1807,
	-1017, 2, 1, 0, 0,
	1, 1, 1, 0, -1,
	// rgWeightHidden+23*35
	8715, -1738, -2230, -2899, -771,
	1151, 155, -37, -641, 265,
	-277, -157, -816, -434, -1456,
	-894, 100, 139, 844, 525,
	288, -259, -211, -860, 289,
	-512, 1, 2, -1, 0,
	-1, 0, 1, 0, -2,
	// rgWeightHidden+24*35
	-1456, 856, 1744, -364, -535,
	431, 332, 272, 199, 1212,
	64, 640, 273, 583, -93,
	218, 389, 425, -366, -750,
	963, -849, 250, 1255, 102,
	363, -2, 1, 0, 0,
	1, -1, 0, -1, 0,
	// rgWeightHidden+25*35
	1137, -6464, 4353, 2208, -1121,
	-635, 900, 1080, 507, -2795,
	-4183, 1904, 587, 961, -240,
	1224, 922, 248, -1472, -974,
	-869, -104, 1150, 1208, -353,
	232, -2, 0, 2, -1,
	-2, 0, -1, 1, 2,
	// rgWeightHidden+26*35
	-758, 924, -291, 181, 221,
	86, -26, 248, 336, 1359,
	556, -469, 514, 610, 50,
	-61, 188, 384, -677, 333,
	110, 829, -865, 516, 1465,
	70, 0, -1, 0, -1,
	1, 0, 1, -2, 2,
	// rgWeightHidden+27*35
	8685, -1705, 554, 335, 92,
	78, -1394, -1100, 137, 1852,
	-811, 302, 893, -2004, -1919,
	-1036, 1107, -158, -696, -298,
	-349, -1081, 1214, -1801, 473,
	-107, 0, 0, 1, 2,
	0, 0, -2, 0, -2,
	// rgWeightHidden+28*35
	-4744, -577, 976, 1378, -58,
	-558, -189, -256, -383, 3592,
	5884, 1237, -632, -174, -717,
	-409, 909, -69, -461, -284,
	-282, 177, 504, 63, 973,
	-563, -1, -1, 2, 0,
	0, 1, 0, 0, 0,
	// rgWeightHidden+29*35
	-935, 3813, -7301, 313, 1143,
	-146, -1540, -585, 420, 4677,
	-3819, -1504, 2468, -4125, 1151,
	632, 709, 1731, -2629, -62,
	-2150, -51, 2490, 1865, 386,
	-389, 0, 2, -1, -1,
	0, 0, 1, 0, 0,
	// rgWeightHidden+30*35
	-1662, -1869, -814, 980, -1440,
	484, 70, 21, -640, 275,
	-2917, -104, 1058, 205, 75,
	-435, 226, -667, 5627, 1793,
	18, 2088, 2453, -1008, 2980,
	-593, -1, 0, 1, 1,
	0, 1, 0, 0, 0,
	// rgWeightHidden+31*35
	-123, 1004, 710, 2430, -187,
	-385, 559, 255, -40, -1956,
	156, 259, -10, 129, 540,
	-234, -740, -555, -3216, 3726,
	821, 976, -1766, -301, 2850,
	-409, 0, 2, 0, 2,
	2, 0, 2, 0, 1,
	// rgWeightHidden+32*35
	1373, -3044, -2742, -385, 2665,
	489, -1657, -63, 1302, -1265,
	-1145, -629, 305, -1332, 802,
	1109, 251, 248, 2656, 798,
	-3398, 2067, 1229, 1232, 2331,
	-338, 0, 0, 2, 1,
	-2, 0, 0, 1, 0,
	// rgWeightHidden+33*35
	12, -1280, 76, 29, 338,
	478, 432, 458, 378, -129,
	302, 840, -35, 46, 335,
	406, 326, 388, -658, 461,
	495, 203, -126, 338, -39,
	314, 0, 0, -2, -2,
	0, 0, 0, 0, -2,
	// rgWeightHidden+34*35
	2989, -6680, 3650, -12, 430,
	-1424, -1147, 713, 1187, 1255,
	-3549, -3293, 191, 2404, 869,
	-844, -159, 326, 144, -153,
	-1372, 2753, 2046, 571, 2716,
	-793, 1, 2, 1, 0,
	0, 0, 2, -1, 1,
	// rgWeightHidden+35*35
	1078, 367, 891, 1473, 3363,
	-379, 386, 865, 614, -1252,
	-295, -1955, 2592, -503, 896,
	97, 1082, 37, -1365, -1442,
	-486, 194, -236, -4617, -3679,
	949, 2, -1, 0, 0,
	1, -2, 2, 0, 1,
	// rgWeightHidden+36*35
	38, 386, -101, 1380, 205,
	-287, 69, 145, 349, 1703,
	-705, 100, -820, 367, 204,
	8, 333, -97, -484, 1516,
	289, 1560, 559, 1, -394,
	120, 0, 0, 1, 0,
	0, 1, 0, 0, 2,
	// rgWeightHidden+37*35
	37, 384, 3586, -1348, 1238,
	938, -159, 815, 667, -2139,
	-1554, -4787, 2527, 2010, 292,
	580, 788, 535, -457, 1199,
	565, -395, -238, -2132, -7868,
	651, 0, 1, 1, -1,
	0, 0, 2, 1, 0,
	// rgWeightHidden+38*35
	-508, -419, 376, -44, 618,
	445, 202, 330, 229, 12,
	521, 170, 445, -150, 308,
	559, 345, 285, 482, 639,
	29, 553, 408, -233, -483,
	-44, -1, -2, 0, 0,
	2, 1, 2, 0, 0,
	// rgWeightHidden+39*35
	-144, 110, 23, 150, 348,
	278, 558, 531, 225, -565,
	353, 279, 1025, -180, 285,
	606, 335, 448, -546, 442,
	321, 558, -673, 471, -1074,
	178, -1, 0, 1, 1,
	0, 0, 0, 1, 1,
	// rgWeightHidden+40*35
	-1651, -854, -964, 287, 1083,
	500, 354, 302, 361, 520,
	-1042, 618, 420, 168, 830,
	741, 464, 839, 339, -245,
	805, -263, 1020, 392, 857,
	226, 2, 1, 2, 0,
	0, -2, -1, 0, 1,
	// rgWeightHidden+41*35
	4782, 4890, -1074, 445, 212,
	-1176, -211, -248, -145, 635,
	396, -2075, 490, 90, -443,
	576, -315, -107, -1586, 443,
	-689, 566, -900, -1300, -1082,
	-43, 0, 1, 1, -2,
	0, -1, 0, -2, 0,
	// rgWeightHidden+42*35
	2742, 1220, -1504, 331, 1178,
	841, 259, -142, 387, 436,
	-1308, -1694, -536, -111, 682,
	-569, -292, 566, -4457, 3360,
	4625, -279, -114, -760, -1289,
	-130, 0, 0, 0, -1,
	0, 0, -1, 0, 1,
	// rgWeightHidden+43*35
	439, 244, 2198, -591, 356,
	763, 331, 233, 43, 818,
	-286, -29, 2225, -781, -279,
	775, 454, 287, -935, -661,
	-736, 470, -772, 1041, -1943,
	641, -2, -2, 1, 0,
	-1, 0, 0, 0, 2,
	// rgWeightHidden+44*35
	9186, -1718, -2161, -3128, 1601,
	457, -2158, -642, 38, 1972,
	384, 1784, -1431, 988, -2565,
	-1819, 311, -415, 135, 419,
	-78, 167, -321, -227, -523,
	163, 1, 0, 1, -1,
	-1, 0, 0, 0, -2,
	// rgWeightHidden+45*35
	-613, -843, -702, 3002, 1194,
	-928, -64, 333, 37, -2563,
	-2159, -721, 3019, 200, -185,
	684, 1115, 626, 442, -78,
	-4749, 968, -1429, -407, -94,
	-375, -1, -2, -2, 0,
	-1, -2, -1, 0, 0,
	// rgWeightHidden+46*35
	9263, 259, 1757, -1535, -821,
	-286, -361, -204, -67, -2119,
	-488, 1241, -1669, 53, -667,
	1019, -454, -693, -319, -263,
	-276, 27, -631, 161, 89,
	-268, 2, -2, -1, 2,
	0, 2, 0, 0, -1,
	// rgWeightHidden+47*35
	7011, -755, -2127, 181, -136,
	-903, -491, -742, -637, 80,
	-83, -143, -1488, -1455, -191,
	-116, -513, -1031, -557, 1335,
	-1661, 758, 958, 575, -442,
	58, -1, -1, 2, 0,
	1, 0, 1, 0, -1,
	// rgWeightHidden+48*35
	485, -1760, 546, -607, -563,
	830, 437, 955, 1318, -1073,
	97, 1421, -1009, 2099, -328,
	327, -601, 538, -9236, -417,
	-278, 1908, -3867, 484, 118,
	-749, 0, 0, 1, 0,
	1, 2, 0, -1, -2,
	// rgWeightHidden+49*35
	629, 3682, -6655, 4014, -598,
	-674, 1369, 149, 460, -1146,
	-715, -53, 6214, -1130, -1900,
	-350, 1276, 218, 1195, -914,
	864, 961, -1390, -754, -1387,
	20, -1, -1, -1, 0,
	1, 0, 1, -1, 0,
	// rgWeightHidden+50*35
	557, 801, -431, -147, 426,
	528, 490, 297, 463, -1156,
	699, 471, -214, -281, 965,
	703, -40, 366, 576, -542,
	68, -401, 362, 240, 654,
	-188, 2, 0, -1, 0,
	-1, 2, 0, 0, 0,
	// rgWeightHidden+51*35
	1274, 457, 21, -45, 127,
	306, 423, 392, 297, -287,
	962, 425, -94, 390, 99,
	169, 243, 174, 597, -475,
	-420, 293, -324, -9, 37,
	-12, 0, 0, 2, -2,
	-2, 0, 0, -2, 0,
	// rgWeightHidden+52*35
	17, 287, 458, 1332, 405,
	-139, 476, 473, 573, -578,
	268, 687, -570, 450, 638,
	414, 12, 100, -735, -792,
	-559, 277, -285, -140, 45,
	158, 1, -1, 2, 0,
	1, 1, 1, -1, 2,
	// rgWeightHidden+53*35
	338, 1857, 476, -2261, 246,
	1704, 1239, 826, 435, -1430,
	378, -466, 670, -633, 1162,
	1534, 330, 1064, -1703, 312,
	-730, 756, -2425, 1708, -1119,
	-411, -1, 0, 0, -1,
	1, -1, 0, 0, -1,
	// rgWeightHidden+54*35
	152, 544, 364, 300, 270,
	142, 99, 129, 195, 669,
	567, 357, -52, 204, 148,
	240, 260, 190, -117, -491,
	115, -142, 130, -174, -69,
	399, -1, 0, 0, -1,
	2, -1, 2, 2, 0,
	// rgWeightHidden+55*35
	598, -1173, -4484, 3767, 499,
	464, 1948, 465, 373, -5572,
	99, 2047, 4155, -1903, 1075,
	2148, 132, 566, -1191, -938,
	-1043, -957, 3071, 993, 325,
	-672, 1, -2, 0, -1,
	0, 1, -1, -1, 0,
	// rgWeightHidden+56*35
	800, 1442, 970, 870, 1123,
	58, 73, 586, 889, -276,
	266, 652, 270, 711, 570,
	223, 266, 148, -1377, 1283,
	-1391, 2363, -1761, -2018, -1474,
	690, 2, -2, 0, -2,
	1, 1, 1, 1, -1,
	// rgWeightHidden+57*35
	-921, -138, 575, -336, -190,
	779, 705, 433, 308, -1194,
	600, 343, 236, 530, 394,
	272, 260, 458, 254, 604,
	942, 168, 87, 216, 151,
	160, 0, -1, 1, -1,
	0, -1, 0, 2, 1,
	// rgWeightHidden+58*35
	5042, 602, 383, -924, -124,
	1419, 2284, 640, 618, -8671,
	-561, 2877, 378, -104, 800,
	1139, -72, -313, -1622, -510,
	-451, -2289, 2556, 656, -710,
	-128, 0, 0, -1, 0,
	1, -2, -1, 0, 1,
	// rgWeightHidden+59*35
	-1297, -417, -58, 676, 204,
	292, 894, 596, 162, -779,
	950, 1762, 166, 3, 467,
	520, 442, 458, -250, -115,
	525, 34, 54, -621, -101,
	-210, 0, 1, -1, 0,
	0, 0, 0, 0, 0,
	// rgWeightHidden+60*35
	1882, 124, -59, -145, 748,
	144, -166, 159, 277, -81,
	1386, 468, 581, 117, -194,
	-149, 48, 182, 464, 468,
	189, 259, -92, -106, -974,
	454, -2, 0, -2, 1,
	-1, -1, 1, -1, -1,
	// rgWeightHidden+61*35
	-1887, 2280, -696, 3832, 833,
	-865, 1082, 807, 818, -500,
	788, 132, -1513, -543, 1779,
	348, 152, -772, 168, -576,
	-487, 571, 996, -7689, -578,
	-2822, -1, 0, 0, -1,
	0, 1, 0, -2, -2,
	// rgWeightHidden+62*35
	-1328, 456, 65, 141, 440,
	368, 493, 421, 332, -433,
	310, -19, 168, 296, 750,
	504, 74, 164, 244, 438,
	-84, 639, 28, 51, -134,
	441, 0, 1, 0, 0,
	0, -2, 1, 2, 0,
	// rgWeightHidden+63*35
	-61, 80, -351, 395, 856,
	253, 402, 468, 412, 146,
	-243, -278, 474, 362, 537,
	561, 454, 492, -425, -1501,
	54, -638, 379, 195, 57,
	-5, 1, 2, 1, 1,
	0, -1, 0, 2, 0,
	// rgWeightHidden+64*35
	-1818, -529, 483, 551, -534,
	560, 1230, 703, 340, -1685,
	726, -411, 724, 1216, 453,
	156, 446, 665, 312, 305,
	927, 299, -219, -185, -97,
	646, 0, 1, 1, -1,
	-1, 1, 0, 0, 2,
	// rgWeightHidden+65*35
	-790, -702, -302, 1166, 12,
	6, 798, 528, 283, -796,
	103, 583, 166, 747, 339,
	151, 418, 377, 17, 785,
	221, 777, -5, -133, 145,
	294, 1, 1, -1, -1,
	1, 1, 0, 1, 0,
	// rgWeightHidden+66*35
	658, -1879, 2827, -1920, 1866,
	378, -985, -77, 1090, 4633,
	-5073, 538, -511, -1552, -298,
	2472, 800, -1531, -387, -360,
	-898, 481, 1119, 828, -3082,
	391, 1, 0, 2, 0,
	-2, -2, 1, 0, 1,
	// rgWeightHidden+67*35
	2267, -35, 452, -1056, -1183,
	-48, 443, 496, 1111, -5381,
	-785, 461, -882, -362, 1131,
	-298, -1404, -393, 3750, 1041,
	3180, -2592, 4473, 453, 1222,
	-244, 1, 2, 0, 1,
	-2, -2, 1, 0, -1,
	// rgWeightHidden+68*35
	4857, -592, 5310, -1610, 1656,
	509, -163, 592, 951, -3771,
	-1283, 3741, -236, -3669, 100,
	1649, -479, -745, -3097, -933,
	-1653, -2792, 2235, 427, 71,
	231, 0, -2, 0, 1,
	0, 2, 1, 2, -2,
	// rgWeightHidden+69*35
	-4365, 1915, 2658, -1364, -238,
	1523, 680, 284, 281, -2558,
	1772, 576, 1768, 28, 451,
	745, 134, 527, 448, 633,
	365, 468, -1215, -246, 118,
	549, -1, 0, 2, -1,
	0, 2, 2, 2, 2,
	// rgWeightHidden+70*35
	293, 686, -98, 781, 291,
	-18, 178, 114, 438, -313,
	-376, 387, -161, -22, 545,
	419, 89, 39, 506, 848,
	-344, 616, 740, 199, 42,
	29, 1, -2, 0, 0,
	0, 0, 0, 1, 1,
	// rgWeightHidden+71*35
	-924, -7727, -366, 17, 1210,
	-187, 125, 1806, 739, -2958,
	4255, 2737, 2012, -322, 344,
	405, -342, 1470, 3280, 215,
	527, 234, -2389, -535, 3036,
	-556, 0, -1, 1, 2,
	-1, -1, 2, -2, 1,
	// rgWeightHidden+72*35
	-580, -59, -253, 444, 313,
	292, 422, 237, 115, 861,
	-94, -4, 30, 321, 369,
	335, 383, 352, -460, 347,
	631, 295, 337, -254, -148,
	261, 1, 2, 0, -1,
	-2, 0, 1, 0, 0,
	// rgWeightHidden+73*35
	1642, -217, 104, 595, 53,
	70, 560, 377, -42, -950,
	798, 791, 455, -216, -14,
	329, 449, 343, 266, -174,
	953, -462, 310, 222, -952,
	80, 0, -1, 2, 2,
	2, 0, 0, 0, 0,
	// rgWeightHidden+74*35
	350, -3774, -1990, -4588, -1472,
	1286, 1766, 1389, -1414, 505,
	1453, -393, 1036, 5632, -2150,
	-1118, 1049, 1178, -640, 434,
	947, 1357, -1436, 3090, -1761,
	-300, 0, 0, 0, -2,
	0, 1, -1, 1, 1,
	// rgWeightHidden+75*35
	-1342, 1747, -4243, -118, 706,
	1066, 1521, 502, -69, 1124,
	1794, 1161, -225, -166, 667,
	800, 668, 399, -115, -294,
	605, -434, 660, -404, -835,
	579, 1, -1, 2, -1,
	-1, 0, 1, 1, 0,
	// rgWeightHidden+76*35
	-886, -178, -427, -693, -1455,
	-388, 449, 137, -715, 2016,
	5044, 291, -529, 860, -32,
	-771, -111, 300, 2019, 2568,
	-892, 1285, -1802, 258, 1913,
	-220, -1, 0, -1, -1,
	-1, 2, 0, 2, 0,
	// rgWeightHidden+77*35
	-912, -62, -825, 740, -13,
	-60, 446, 299, 191, 1219,
	-2145, 951, -470, -211, 513,
	507, 498, -16, 507, 1981,
	-602, 2241, -33, 289, -528,
	-792, 2, 0, 0, 0,
	-1, 1, 1, 0, 0,
	// rgWeightHidden+78*35
	59, 270, 17, 534, 384,
	170, 428, 353, 351, -261,
	166, 53, -135, 250, 524,
	501, 181, 148, -181, -188,
	-230, 421, -66, 201, -267,
	169, -1, -1, 0, 0,
	-1, 1, 1, -1, 1,
	// rgWeightHidden+79*35
	382, -6357, -5016, -1612, -1350,
	172, 1494, 1871, 142, -2154,
	11088, -3519, -3755, 113, 1879,
	1474, -163, 1753, 4339, 682,
	1931, 690, -4115, 1607, 930,
	204, 0, 0, 2, 0,
	0, 1, 0, 2, -1,
	// rgWeightHidden+80*35
	-681, 117, 392, -94, 326,
	344, 270, 308, 106, 131,
	480, 21, 87, 235, 401,
	381, 251, 385, 26, 89,
	420, 245, 126, 517, -524,
	343, 2, 0, 2, 0,
	0, 0, 0, -2, -2,
	// rgWeightHidden+81*35
	367, -1425, -562, -381, 267,
	748, 526, 575, 450, -95,
	1008, 428, 263, 28, 437,
	408, 361, 758, -59, -1036,
	1460, -1222, 147, 883, 1099,
	192, 1, -2, 0, 1,
	0, 0, -1, 1, -2,
	// rgWeightHidden+82*35
	-2271, -1343, -8313, 1784, 1644,
	-821, 38, 551, -612, 1385,
	3340, -916, -565, 2031, -323,
	-337, 1897, 187, 3254, 495,
	1172, 2126, -2560, 289, -339,
	-217, -1, -1, -1, 0,
	-2, 0, -1, 1, 0,
	// rgWeightHidden+83*35
	-3010, -1155, -1803, -46, 394,
	943, 745, 258, 157, 463,
	-213, 1303, -256, -235, 1677,
	1168, 92, 602, 1435, 315,
	792, 401, 1716, 681, 2885,
	-492, 1, -1, -2, 0,
	-2, 0, -2, 0, 0,
	// rgWeightHidden+84*35
	-949, -5, -27, 155, 342,
	386, 584, 448, 216, -579,
	414, 509, 379, 190, 458,
	513, 268, 314, -414, 105,
	241, 315, -113, 74, 105,
	476, -1, -2, 2, -1,
	-2, 2, 1, 0, 0,
	// rgWeightHidden+85*35
	-3854, -839, 1235, 470, -886,
	253, 846, 906, 321, -874,
	2635, -532, 1011, 1774, -161,
	-724, 219, 1107, 1366, -25,
	261, 1205, -526, 1082, 1510,
	16, 1, -1, -2, 2,
	0, 0, -1, -1, 0,
	// rgWeightHidden+86*35
	-1752, -1015, -943, -428, 466,
	622, 402, 220, 43, 2229,
	671, -317, -305, 944, 407,
	245, 695, 774, 948, 433,
	742, 649, 288, 406, -183,
	595, -2, -2, 1, 0,
	0, 0, 2, 0, -2,
	// rgWeightHidden+87*35
	-1994, 294, 456, 711, 345,
	10, -147, 156, 437, 2359,
	223, 97, -83, 484, 378,
	233, 240, 239, 103, 121,
	513, 64, 674, 354, 1192,
	198, 1, 2, -1, -1,
	1, 0, 1, 0, -1,
	// rgWeightHidden+88*35
	-1375, -1531, 1604, -1100, 436,
	1812, 478, 425, 1423, -4003,
	-4278, 3615, -536, -378, 1374,
	1748, -394, 639, -679, 2099,
	-2074, 1340, 2314, 27, 1727,
	-482, 0, 0, 1, -1,
	-2, 0, 1, 0, 1,
	// rgWeightHidden+89*35
	-1991, 1671, 131, -1352, 447,
	680, 375, 358, -174, 2235,
	2361, -91, -160, 471, 449,
	428, 431, 815, -223, -918,
	829, -306, -288, -309, -66,
	125, 2, 0, 1, 1,
	1, -1, 1, -2, 2,
	// rgWeightHidden+90*35
	-1021, -308, 456, 100, 289,
	341, 286, 386, 38, 646,
	1305, -130, -30, 405, 289,
	168, 365, 470, 99, 395,
	1090, 171, -78, -237, 163,
	111, -1, 1, 0, 1,
	0, -1, 0, -2, 0,
	// rgWeightHidden+91*35
	691, -1004, 330, -179, -1164,
	394, 479, 271, 266, 2094,
	-238, 433, 552, 2389, -1389,
	-1072, 731, 83, -1699, 737,
	1310, -209, 309, 2497, 554,
	-104, 0, 1, -2, 1,
	-2, -2, 1, 0, 1,
	// rgWeightHidden+92*35
	-1770, -1455, -261, 176, 146,
	462, 893, 1086, 58, -278,
	342, -267, -405, 1816, 789,
	-33, 896, 821, 1446, -372,
	-112, 878, -85, -5, 2237,
	-875, 1, 0, 0, -1,
	-1, 1, 2, 0, -1,
	// rgWeightHidden+93*35
	-2464, 276, 4608, -201, -1262,
	381, -19, -140, -128, 989,
	2150, 501, 59, 507, -330,
	-70, -404, -284, 1308, 1471,
	-1751, 2087, -395, 1177, 2300,
	-166, 1, -1, 1, 0,
	1, 0, 0, -1, 0,
	// rgWeightHidden+94*35
	-1210, -179, 452, 227, 36,
	321, 593, 482, 246, -526,
	120, -172, 381, 621, 505,
	294, 297, 431, 567, -42,
	305, 328, 155, 247, 528,
	359, 0, 0, 0, 2,
	1, 0, 0, 0, 0,
	// rgWeightHidden+95*35
	2601, 1960, 1163, 2920, -1215,
	-2185, -1939, -2414, -2559, 5045,
	5363, 153, 1069, -1043, -2356,
	-3199, -302, 116, 1540, 2000,
	-327, 1018, 72, -469, 1474,
	-147, 0, 0, 0, 0,
	-2, -1, 0, 0, 1,
	// rgWeightHidden+96*35
	7361, 89, 68, -1650, -167,
	-559, -1115, -330, -861, -635,
	35, -372, -130, 927, -2139,
	-2129, -93, -625, 934, 847,
	-434, -307, -872, 2, -851,
	-478, -1, 1, 0, -2,
	-2, 1, 0, 0, 0,
	// rgWeightHidden+97*35
	4227, 222, 181, 1501, 833,
	-419, 398, 689, 1060, -2243,
	414, -429, 171, -95, 397,
	283, 74, 221, -632, -864,
	-602, 211, -354, 551, 880,
	7, 0, 0, 0, -2,
	1, 2, -1, 0, 0,
	// rgWeightHidden+98*35
	-953, 556, -239, -113, 429,
	445, 303, 293, 204, 451,
	497, 476, 398, -205, 384,
	563, 277, 415, -325, -502,
	562, -270, 209, 377, 566,
	194, 0, 1, -2, 0,
	-1, 2, -1, 2, 0,
	// rgWeightHidden+99*35
	4871, 1092, -6308, 1094, 15,
	59, 1576, 535, -479, -1470,
	-2039, 2749, 480, -561, -251,
	-357, 993, 818, -1057, -2692,
	1328, -2485, 1650, -543, -2289,
	346, 0, 0, 0, 1,
	0, 2, 0, 0, 1,
	// rgWeightHidden+100*35
	-2281, 4062, 802, 3287, -612,
	-1747, -437, -161, -87, 1801,
	-2310, -433, 41, -791, 824,
	523, -355, -547, 992, 1755,
	-1680, 1928, 968, -970, 122,
	808, 0, 0, 1, 0,
	0, -2, -1, 1, 0,
	// rgWeightHidden+101*35
	-1210, 839, 638, 462, 88,
	180, 472, 429, 393, -292,
	-336, -554, 391, 832, 510,
	111, -6, 23, 213, 632,
	-318, 1072, 162, 231, 504,
	111, 0, 0, -1, -1,
	0, -1, 2, 0, -2,
	// rgWeightHidden+102*35
	-2042, 8510, -651, -3964, 2356,
	3462, -1601, -1895, 1238, -3275,
	-1225, -3289, 2342, 2966, 820,
	-1389, -224, 354, 1068, 694,
	128, -102, 416, 440, 2098,
	-668, -2, 1, 2, 0,
	-1, 0, 0, -1, 0,
	// rgWeightHidden+103*35
	-1434, 1776, -446, 503, 391,
	147, 540, 291, 106, 220,
	945, -357, 517, 349, 861,
	334, 0, 55, 566, 354,
	-813, 1061, -220, -1414, 616,
	495, -2, 2, 1, 0,
	1, 0, 0, -1, -2,
	// rgWeightHidden+104*35
	7885, 1164, -1641, -651, -446,
	-191, 576, 494, 465, -3001,
	590, -1306, -735, -745, 223,
	43, -221, -480, 646, -879,
	201, 529, -1337, 847, 246,
	-255, 1, 1, 2, 0,
	2, -1, 0, 1, 1,
	// rgWeightHidden+105*35
	1141, -442, 7212, -5849, 573,
	1321, -832, 307, -853, -1649,
	6433, -2491, -1112, 387, -406,
	-208, 116, 135, 3206, 1454,
	1223, -471, -2888, 210, -947,
	281, 1, 2, -1, -2,
	0, 1, 0, 0, -2,
	// rgWeightHidden+106*35
	324, 622, 8226, -3167, -382,
	1251, -565, 157, -785, -1343,
	2230, -2785, 1119, -1047, -538,
	-95, -189, -82, 1086, -48,
	2220, -384, -1706, 3347, -7538,
	1533, -2, 0, -2, 1,
	-1, 0, -1, 1, -2,
	// rgWeightHidden+107*35
	-1587, -466, 878, 34, -15,
	424, 450, 387, -70, 1542,
	429, -758, 140, 716, 225,
	435, 357, 362, -1093, 965,
	361, 1284, -710, 1006, -671,
	584, -2, -2, 0, 0,
	0, 1, 0, 0, 0,
	// rgWeightHidden+108*35
	-5542, -418, 2908, 1066, 2074,
	386, -456, 694, 1405, -3025,
	212, 3492, -116, -1021, 152,
	1188, 503, 43, -1869, 182,
	-725, 326, 923, 1060, -463,
	-536, 2, -1, 1, 2,
	0, 2, 0, 2, 1,
	// rgWeightHidden+109*35
	43, 329, 49, 493, 275,
	142, 404, 280, 160, -244,
	574, 357, -105, 253, 385,
	298, 254, 302, -321, 292,
	738, 38, 111, -387, -424,
	304, 2, 1, 0, 0,
	-1, 0, 1, 0, 2,
	// rgWeightHidden+110*35
	817, -664, -801, -3713, 1645,
	1994, -602, -580, -182, 2485,
	2699, 1319, -1142, 1045, -604,
	-49, -86, 127, 478, -9,
	817, -208, 39, 588, -7461,
	1868, 0, 0, 0, -1,
	0, 0, 1, 0, 0,
	// rgWeightHidden+111*35
	85, -628, 1098, 876, 177,
	113, 260, 329, 388, 197,
	-975, -130, 360, 190, 319,
	443, 411, 216, -585, 334,
	299, 302, 638, -424, -135,
	46, 0, 0, 1, 0,
	0, 2, -1, 1, 0,
	// rgWeightHidden+112*35
	1960, -3562, 637, -1667, 155,
	188, -720, 181, -169, -2251,
	5930, 4498, 2102, -3726, -29,
	330, 483, 419, 2209, -1093,
	-162, -1667, -901, 1115, 551,
	45, -2, 0, 1, 0,
	2, -2, -1, -2, 0,
	// rgWeightHidden+113*35
	-135, 1983, 94, -1102, -60,
	2187, 1567, 163, 310, -6792,
	1938, 1629, -772, -1870, 1379,
	1612, -103, 555, -604, -2034,
	-2366, 1477, -1656, 68, 2044,
	-1133, 1, -1, 0, 0,
	-2, 0, 0, 0, -2,
	// rgWeightHidden+114*35
	-2698, 116, -29, 227, 540,
	491, 585, 375, 338, 139,
	200, 216, 29, 274, 767,
	598, 301, 349, 274, 525,
	234, 968, 78, -74, -404,
	598, 0, 0, 0, 0,
	0, 0, 0, 0, 0,
	// rgWeightHidden+115*35
	3017, 194, -187, -451, 185,
	611, -224, -16, 386, -567,
	306, 690, 875, -858, 202,
	354, 181, 386, 394, 331,
	310, -285, 225, 1313, 1444,
	-271, 0, 0, -1, 0,
	1, 1, -1, -1, 1,
	// rgWeightHidden+116*35
	-3307, -562, 4618, 4518, -240,
	-209, 672, 180, 492, -3516,
	-4989, -1414, 3961, 3345, -987,
	-516, 232, 194, -231, 112,
	1877, 778, 566, 129, 396,
	-7, -2, 1, 0, -2,
	-2, -1, 0, -1, 0,
	// rgWeightHidden+117*35
	2025, -712, -4061, -1960, 3858,
	744, -492, 907, 1025, -4617,
	1583, 2614, -3862, 2863, 387,
	-284, 920, 654, 1785, 821,
	607, 793, -582, 168, -88,
	-237, 0, 1, -1, 0,
	-1, 0, 1, 0, -1,
	// rgWeightHidden+118*35
	518, 450, 597, 252, 296,
	147, 267, 311, 393, -547,
	193, -40, -327, 665, 521,
	215, 132, 201, 425, 308,
	60, 390, 344, -542, -283,
	387, 0, 1, -1, 2,
	-1, 0, 2, -1, -2,
	// rgWeightHidden+119*35
	-1670, 884, -49, 115, 374,
	377, 347, 247, 213, 484,
	480, 268, 669, 33, 236,
	352, 238, 222, -14, 62,
	-112, 627, 62, -66, -55,
	594, 1, 0, 0, -2,
	2, 0, 1, 1, 0,
	// rgWeightHidden+120*35
	5196, -1419, -1526, -1135, 209,
	-411, -635, -401, -313, 334,
	-696, -1288, -1609, -208, -438,
	-578, -324, -630, -476, 1048,
	-1156, 920, -379, -992, -1251,
	-317, -1, -1, -2, 0,
	0, 0, 0, 2, 0,
	// rgWeightHidden+121*35
	-1284, -694, 5813, -258, -2792,
	147, 587, -688, -764, 1683,
	3313, 1022, -4761, -1656, 1219,
	943, -1108, -850, 97, 464,
	-1177, 1162, 1228, 2201, -1062,
	1169, 1, -1, 0, -1,
	0, 0, 1, 0, 0,
	// rgWeightHidden+122*35
	-601, -535, 595, 739, 356,
	369, 419, 380, 642, -1038,
	-811, 666, 286, -222, 688,
	833, 197, 207, 137, 695,
	-551, 822, 754, 38, 334,
	-24, -2, 0, 1, 0,
	2, 1, 0, -2, 0,
	// rgWeightHidden+123*35
	11, -121, 683, 1048, -79,
	-26, 583, 473, 369, -799,
	99, 52, 253, 734, 372,
	318, 281, 309, 94, -848,
	-57, -104, 22, 166, 211,
	166, 0, -1, 0, -1,
	0, 0, -1, 0, 2,
	// rgWeightHidden+124*35
	-106, -1896, 381, 401, -148,
	294, 622, 510, 10, -1229,
	425, -355, 236, 561, -173,
	-170, 354, 530, -772, 1235,
	2573, 1333, -310, 191, 757,
	647, 0, 0, 0, 0,
	-1, 1, 0, 1, 0,
	// rgWeightHidden+125*35
	592, -498, 196, 591, 1360,
	182, 190, 549, 451, 319,
	-411, -270, 1676, -477, 699,
	659, 353, 684, -89, -94,
	-874, 713, 242, 44, -999,
	-1476, 1, 1, -2, 1,
	0, -2, 2, 0, 0,
	// rgWeightHidden+126*35
	1017, 289, 768, 201, 356,
	487, 575, 496, 650, -193,
	-183, 531, 168, -326, 19,
	540, 169, -284, -1447, -691,
	-776, 538, -838, 340, 22,
	754, -2, 2, -2, 2,
	-1, -1, 0, 2, 1,
	// rgWeightHidden+127*35
	1540, 714, 1022, 41, -41,
	620, 801, 544, 255, -2382,
	128, 621, 896, -466, 146,
	747, 611, 332, 126, 604,
	-1244, 1395, 41, 482, -911,
	55, -2, 1, 1, 0,
	1, 1, -1, 0, 1,
	// rgWeightHidden+128*35
	1207, 622, 1849, -2542, 1284,
	669, 743, 403, -1125, 127,
	-2293, 968, 2056, -1163, -239,
	88, 438, 1011, -262, 87,
	950, 242, 1561, -946, -5111,
	2182, 0, 1, 0, -1,
	-2, 0, 0, -1, 1,
	// rgWeightHidden+129*35
	-236, 310, -590, 1229, 466,
	150, 927, 461, 526, -1338,
	-407, 822, -641, 77, 995,
	996, 234, 212, -524, -866,
	629, -821, 854, 416, -413,
	404, 0, -1, -2, 0,
	0, -2, 2, -1, 2,
	// rgWeightHidden+130*35
	-793, 2071, 33, 791, -1434,
	-482, 2208, 941, 656, -6669,
	2330, 76, -4086, -531, 4207,
	583, -721, 1217, 3677, -714,
	1550, -1881, 2552, -1979, -148,
	254, -1, -1, 1, 0,
	2, 2, -1, 1, 0,
	// rgWeightHidden+131*35
	2135, 1703, -4633, -856, 2128,
	331, -1026, 298, 181, -2198,
	4952, -2153, 3496, -1826, 258,
	168, -926, -116, 3035, -1093,
	1416, -573, -1761, 719, 3777,
	-947, -1, -2, -1, 0,
	0, -1, 0, 1, 2,
	// rgWeightHidden+132*35
	363, 348, -512, 808, 191,
	22, 522, 320, 193, -3,
	681, 760, 315, 6, 102,
	369, 400, 218, -194, -911,
	151, -386, 140, 42, -50,
	70, 0, 0, -1, 1,
	2, 0, 0, 0, 1,
	// rgWeightHidden+133*35
	-1721, 1854, -834, -628, 472,
	727, 472, 177, 54, 460,
	1408, 752, -95, -111, 613,
	659, 251, 469, 219, -740,
	679, -368, -86, 545, 179,
	278, 0, -2, 0, 1,
	-1, -2, -2, 1, 2,
	// rgWeightHidden+134*35
	6996, -1552, 369, -2534, 1737,
	-425, -1867, -422, 32, -2138,
	725, 327, -2093, 926, -980,
	-1278, -699, -153, -111, -3,
	1191, -1636, -220, 412, -549,
	-434, 0, 1, 0, -1,
	0, 0, 0, 0, 0,
	// rgWeightHidden+135*35
	-1475, 8223, 4667, 3424, -1306,
	-2700, -109, 63, -462, -1549,
	4790, 991, -647, 136, -1323,
	34, -481, -661, -341, 64,
	-691, -776, -4387, 69, -438,
	102, -1, 1, 1, 0,
	0, -1, 0, -1, 0,
	// rgWeightHidden+136*35
	-915, 482, 869, 58, 86,
	382, 421, 370, 110, -560,
	1016, 430, 362, 211, 315,
	382, 251, 459, -335, -623,
	625, -283, -10, 115, 392,
	151, 1, 0, -1, 1,
	0, 0, 0, 1, -1,
	// rgWeightHidden+137*35
	-729, -1876, 822, 1007, -30,
	198, 618, 580, 273, -1013,
	-404, 799, 1072, -266, 253,
	670, 434, 567, -479, -368,
	281, -86, 779, 859, 1009,
	162, -1, -1, -2, -1,
	-1, 0, 0, 0, 1,
	// rgWeightHidden+138*35
	-2264, -836, 904, 127, -337,
	512, 835, 694, 323, -422,
	-715, 52, -59, 996, 819,
	427, 426, 522, 1430, 563,
	538, 587, 190, 335, 728,
	-37, -1, 1, 1, 0,
	1, 0, 2, -1, -2,
	// rgWeightHidden+139*35
	-982, -2913, 1973, -1934, 638,
	2923, 1464, 787, -14, -1560,
	647, 1408, 6510, -3737, -918,
	1922, 1150, 1293, -267, -363,
	727, 1, -1637, 2815, -3541,
	1183, -1, -1, -2, -2,
	0, 0, 0, 0, 0,
	// rgWeightHidden+140*35
	-1824, -3534, 4038, 2453, 719,
	-142, -991, -216, 391, -2736,
	3679, 5171, 1135, -1441, -271,
	-326, -324, 130, -431, 243,
	95, -241, -818, 1678, 1184,
	-652, 0, -1, 0, 0,
	2, 1, 0, 1, 2,
	// rgWeightHidden+141*35
	-3331, 3309, -556, 292, 611,
	1800, 254, -468, 788, -1243,
	927, -369, 652, -2926, 1665,
	2181, 564, -315, -1153, 676,
	-128, 467, -579, -305, -1095,
	24, 0, -2, 1, 1,
	2, 0, -2, 0, -1,
	// rgWeightHidden+142*35
	-1256, -1737, -2837, 3517, 280,
	11, 1488, 1091, 948, 1023,
	-1655, -1524, -1608, -596, 1550,
	1464, 653, 236, -1265, 1786,
	1503, 251, 4360, -918, 904,
	-590, -2, 0, 0, 0,
	1, -1, 2, 0, 0,
	// rgWeightHidden+143*35
	2361, 1338, 1736, 1132, 1168,
	-930, -564, 351, 375, 255,
	-59, -821, 70, 587, -478,
	-654, -448, -434, -33, 4711,
	297, 1690, -32, 419, -768,
	341, -1, -2, 0, 1,
	1, -1, 0, 1, -2,
	// rgWeightHidden+144*35
	-520, -485, -610, 993, 1017,
	-271, -202, 326, 500, 436,
	-354, 624, -1096, 237, 677,
	217, 58, 44, 108, 4346,
	1007, 2215, 733, 17, 140,
	99, 2, -1, -2, -2,
	-2, 1, 1, -2, 0,
	// rgWeightHidden+145*35
	-93, -240, 539, 1251, 145,
	-55, 579, 481, 387, -923,
	233, 675, 63, 511, 403,
	345, 238, 298, -380, -693,
	62, -129, 105, -114, 185,
	52, -1, 1, 0, -2,
	1, -1, 1, 2, 0,
	// rgWeightHidden+146*35
	-2229, 5750, 1160, 184, -2478,
	774, 2003, 177, -493, -4122,
	1448, -1795, 414, 349, 1176,
	-557, -484, 778, 2215, 2402,
	498, 620, 328, 3175, 28,
	-793, -2, -1, 2, -1,
	0, 0, 0, -1, 1,
	// rgWeightHidden+147*35
	-481, 500, -920, 241, -58,
	213, 698, 354, 243, 412,
	-501, 164, 89, 511, 411,
	287, 292, 170, 769, 303,
	-507, 913, -71, 473, 391,
	-29, 2, 0, -1, 2,
	0, 0, -1, -2, 2,
	// rgWeightHidden+148*35
	-520, -541, -152, 11, 6,
	427, 612, 409, 64, -1032,
	932, -252, 596, 672, 220,
	95, 455, 513, 791, 1377,
	1104, 660, 174, -211, 61,
	380, 1, 0, 2, 0,
	0, -1, 0, 0, -1,
	// rgWeightHidden+149*35
	-1631, 1242, 5463, -44, -1925,
	88, 261, -72, -128, 782,
	2834, -697, -250, -529, -62,
	209, 219, 82, 458, 109,
	-77, -192, -663, 1529, 558,
	-1060, 0, 0, 0, 1,
	1, -2, -1, -2, -2
};  // rgWeightHidden[150*35]

const short rgBiasHidden[150] = {
	-587, 2084, 353, 496, 912,
	1284, 689, 1437, 2420, 1972,
	73, 464, 1999, 1087, 387,
	878, 770, 1467, 1345, 634,
	676, -1562, 1501, -898, 460,
	1505, 400, -1399, -225, 59,
	-110, 668, 550, 771, 144,
	933, 283, 754, 612, 798,
	1031, -870, 139, 673, -1979,
	1408, -673, -1379, 2775, 354,
	733, 531, 936, 1565, 369,
	1935, 1176, 756, 782, 989,
	115, 1301, 820, 1014, 1118,
	848, 198, 226, -419, 954,
	358, 1260, 618, 442, 692,
	930, -859, 560, 754, 1672,
	578, 881, 703, 1469, 849,
	1069, 627, 390, 1638, 692,
	587, 181, 1314, -331, 788,
	-3688, -2242, 943, 657, 462,
	-501, 685, -22, 765, -125,
	-568, -689, 757, 1674, 532,
	-230, 643, -1213, 1855, 996,
	92, 333, 1071, 531, 617,
	-1297, -726, 926, 857, 478,
	1052, 799, 863, -267, 1041,
	953, -67, 592, 723, -1354,
	-1639, 733, 910, 1009, 1770,
	84, 1103, 1528, -914, 361,
	893, -275, 638, 609, -165
};  // rgBiasHidden[150]

// layer 2
const int cOutput = 94;
const short rgWeightOutput[94*150] = {
	// rgWeightOutput+0*150
	-4020, -395, -4538, -4668, -1665,
	-3472, -4674, -2795, -3595, -3649,
	-4484, -1396, -3956, -4423, -3752,
	-4214, -2509, -1118, -4218, -4661,
	-4247, -1062, -3605, -1929, -4636,
	-2958, -4710, -3273, -3922, -2678,
	-2045, -4254, -2374, -4535, -3487,
	-3207, -4543, -1712, -4593, -4492,
	-4646, -2331, -4143, -3880, -1685,
	-1308, -3444, -766, -3122, -4225,
	-4456, -4458, -4558, -3898, -4720,
	-4291, -3978, -4647, -2861, -4565,
	-4431, -1483, -4698, -4185, -4573,
	-4562, -3729, -2367, -2805, -4539,
	-4691, -4036, -4694, -4504, -2844,
	-4133, -4371, -4590, -4648, -2973,
	-4680, -4214, -2528, -4415, -4715,
	-4371, -4550, -4582, -3929, -4430,
	-4653, -4088, -3562, -4424, -4671,
	-3015, -929, -3895, -4705, -2384,
	-4232, -4712, -3812, -4453, -3595,
	-2784, -2240, -4626, -4358, -4656,
	-3211, -4645, -2427, -1960, -4676,
	-4097, -4334, -3469, -4578, -4795,
	-599, -3432, -4598, -4608, -4616,
	-3792, -4428, -4368, -3698, -4429,
	-1895, -3841, -4701, -4563, -1068,
	-3097, -4697, -4614, -4325, -2617,
	-4477, -4476, -4028, -4237, -4308,
	-4595, -4207, -4667, -4638, -4254,
	// rgWeightOutput+1*150
	-4019, -395, -4537, -4668, -1662,
	-3474, -4673, -2796, -3593, -3652,
	-4483, -1395, -3957, -4426, -3753,
	-4213, -2511, -1117, -4220, -4659,
	-4243, -1059, -3607, -1928, -4633,
	-2955, -4710, -3273, -3921, -2676,
	-2047, -4251, -2375, -4536, -3487,
	-3205, -4548, -1711, -4594, -4491,
	-4643, -2329, -4143, -3882, -1684,
	-1311, -3442, -769, -3121, -4221,
	-4460, -4458, -4558, -3898, -4720,
	-4287, -3979, -4644, -2864, -4565,
	-4434, -1482, -4698, -4186, -4575,
	-4560, -3728, -2364, -2807, -4536,
	-4689, -4036, -4696, -4502, -2842,
	-4134, -4370, -4590, -4648, -2975,
	-4685, -4212, -2527, -4416, -4717,
	-4369, -4551, -4578, -3928, -4431,
	-4656, -4086, -3560, -4426, -4672,
	-3016, -927, -3896, -4702, -2385,
	-4232, -4713, -3813, -4455, -3598,
	-2787, -2239, -4625, -4354, -4659,
	-3209, -4645, -2427, -1961, -4673,
	-4094, -4331, -3467, -4583, -4794,
	-599, -3433, -4601, -4609, -4619,
	-3793, -4430, -4369, -3695, -4425,
	-1896, -3839, -4697, -4562, -1065,
	-3097, -4700, -4611, -4328, -2615,
	-4477, -4473, -4027, -4238, -4310,
	-4596, -4206, -4668, -4639, -4257,
	// rgWeightOutput+2*150
	-4018, -396, -4538, -4667, -1662,
	-3475, -4674, -2794, -3593, -3651,
	-4484, -1395, -3959, -4424, -3748,
	-4214, -2508, -1117, -4219, -4661,
	-4244, -1058, -3604, -1929, -4633,
	-2955, -4709, -3274, -3921, -2680,
	-2047, -4252, -2378, -4539, -3490,
	-3203, -4545, -1711, -4595, -4492,
	-4644, -2330, -4139, -3879, -1683,
	-1309, -3445, -769, -3120, -4221,
	-4458, -4461, -4560, -3894, -4718,
	-4292, -3981, -4647, -2862, -4564,
	-4432, -1487, -4694, -4186, -4573,
	-4562, -3726, -2366, -2805, -4539,
	-4691, -4036, -4697, -4504, -2846,
	-4134, -4371, -4592, -4652, -2976,
	-4684, -4212, -2526, -4412, -4716,
	-4368, -4549, -4580, -3929, -4433,
	-4656, -4086, -3561, -4428, -4672,
	-3012, -930, -3894, -4705, -2383,
	-4231, -4711, -3812, -4454, -3594,
	-2786, -2242, -4625, -4353, -4660,
	-3209, -4645, -2424, -1961, -4675,
	-4094, -4332, -3468, -4580, -4794,
	-599, -3432, -4598, -4607, -4619,
	-3791, -4433, -4372, -3698, -4428,
	-1897, -3839, -4700, -4560, -1067,
	-3099, -4700, -4614, -4326, -2615,
	-4477, -4473, -4029, -4236, -4307,
	-4597, -4206, -4665, -4634, -4256,
	// rgWeightOutput+3*150
	-4019, -396, -4540, -4668, -1664,
	-3475, -4670, -2798, -3592, -3652,
	-4486, -1399, -3959, -4423, -3748,
	-4217, -2509, -1114, -4219, -4659,
	-4247, -1060, -3607, -1929, -4636,
	-2955, -4710, -3274, -3920, -2677,
	-2046, -4250, -2375, -4535, -3488,
	-3203, -4545, -1714, -4597, -4495,
	-4642, -2333, -4142, -3879, -1682,
	-1307, -3443, -770, -3123, -4224,
	-4458, -4458, -4559, -3899, -4722,
	-4290, -3980, -4649, -2862, -4568,
	-4434, -1482, -4695, -4185, -4577,
	-4564, -3726, -2368, -2804, -4537,
	-4689, -4038, -4694, -4505, -2845,
	-4131, -4370, -4593, -4648, -2974,
	-4681, -4216, -2529, -4414, -4715,
	-4368, -4550, -4577, -3930, -4429,
	-4655, -4084, -3563, -4427, -4670,
	-3017, -931, -3893, -4704, -2384,
	-4230, -4711, -3810, -4452, -3596,
	-2785, -2241, -4624, -4357, -4660,
	-3209, -4647, -2426, -1958, -4676,
	-4093, -4332, -3466, -4582, -4794,
	-601, -3432, -4601, -4609, -4618,
	-3794, -4429, -4372, -3698, -4427,
	-1895, -3842, -4696, -4564, -1070,
	-3098, -4699, -4612, -4326, -2617,
	-4478, -4473, -4025, -4234, -4310,
	-4597, -4206, -4666, -4636, -4256,
	// rgWeightOutput+4*150
	-4023, -400, -4535, -4671, -1663,
	-3473, -4673, -2799, -3592, -3653,
	-4483, -1396, -3958, -4426, -3749,
	-4213, -2510, -1118, -4220, -4662,
	-4245, -1062, -3606, -1928, -4637,
	-2955, -4710, -3276, -3918, -2678,
	-2045, -4255, -2376, -4536, -3490,
	-3205, -4544, -1712, -4594, -4492,
	-4643, -2331, -4144, -3883, -1684,
	-1312, -3444, -767, -3123, -4221,
	-4460, -4462, -4562, -3896, -4718,
	-4290, -3978, -4647, -2862, -4565,
	-4434, -1485, -4698, -4183, -4576,
	-4561, -3727, -2363, -2807, -4539,
	-4691, -4037, -4695, -4505, -2844,
	-4131, -4372, -4592, -4652, -2976,
	-4681, -4212, -2526, -4413, -4717,
	-4372, -4549, -4583, -3930, -4429,
	-4653, -4088, -3565, -4426, -4671,
	-3016, -928, -3894, -4702, -2384,
	-4234, -4713, -3813, -4452, -3599,
	-2784, -2242, -4627, -4357, -4657,
	-3210, -4647, -2427, -1960, -4673,
	-4096, -4332, -3470, -4580, -4795,
	-600, -3431, -4598, -4606, -4620,
	-3792, -4429, -4370, -3695, -4425,
	-1898, -3842, -4698, -4565, -1065,
	-3097, -4698, -4611, -4326, -2617,
	-4476, -4475, -4025, -4236, -4308,
	-4596, -4207, -4669, -4636, -4257,
	// rgWeightOutput+5*150
	622, -1202, -65, -272, -1233,
	-883, -312, -80, 1887, -969,
	-1003, -1522, -78, -294, 2355,
	-290, -2014, 688, -305, -7,
	1225, -1051, 2465, -661, -100,
	201, -680, -1048, 1876, -2172,
	-1595, 480, -512, -457, -185,
	-643, 231, -2696, -239, -339,
	-1009, 918, 1111, -152, -1481,
	-2231, 233, -576, 1811, 4046,
	-514, -188, -459, 872, -309,
	1550, -369, -12, 1234, -191,
	-739, 98, -243, -614, 92,
	-249, 427, 363, 79, 237,
	-285, -3417, -215, -100, -445,
	667, -1176, 723, -286, -859,
	-405, -88, 3601, -914, -110,
	-1506, -384, -274, -1230, 365,
	-22, 361, 352, 338, -209,
	-340, -241, -16, -249, 22,
	1330, -208, 791, -206, 127,
	400, 773, -337, -1095, -191,
	-2886, -331, -1628, 968, -72,
	-425, 1956, 149, -386, -267,
	-971, 1337, -225, -131, -435,
	-802, 39, 124, -1535, -58,
	673, -2511, -211, -207, -1288,
	861, 25, 96, -245, 279,
	-96, 510, 453, 1, -20,
	-171, 786, -154, -488, 422,
	// rgWeightOutput+6*150
	-4022, -399, -4538, -4667, -1663,
	-3471, -4673, -2797, -3592, -3650,
	-4483, -1397, -3956, -4425, -3750,
	-4215, -2506, -1118, -4220, -4660,
	-4246, -1060, -3603, -1926, -4634,
	-2954, -4707, -3271, -3917, -2680,
	-2042, -4251, -2374, -4538, -3488,
	-3203, -4547, -1712, -4593, -4494,
	-4642, -2331, -4142, -3883, -1684,
	-1307, -3444, -769, -3119, -4220,
	-4459, -4459, -4561, -3897, -4721,
	-4289, -3979, -4647, -2865, -4568,
	-4431, -1486, -4694, -4185, -4576,
	-4561, -3728, -2367, -2803, -4540,
	-4687, -4036, -4695, -4505, -2844,
	-4134, -4370, -4592, -4648, -2975,
	-4681, -4211, -2527, -4416, -4715,
	-4370, -4551, -4579, -3928, -4431,
	-4656, -4088, -3563, -4425, -4669,
	-3016, -931, -3896, -4703, -2380,
	-4229, -4711, -3813, -4454, -3593,
	-2783, -2242, -4626, -4353, -4658,
	-3210, -4647, -2423, -1961, -4675,
	-4092, -4332, -3468, -4581, -4795,
	-599, -3431, -4602, -4607, -4619,
	-3789, -4429, -4370, -3696, -4425,
	-1896, -3840, -4701, -4559, -1069,
	-3097, -4699, -4612, -4328, -2619,
	-4479, -4476, -4029, -4234, -4308,
	-4596, -4205, -4667, -4638, -4254,
	// rgWeightOutput+7*150
	768, 303, -146, -359, 105,
	1404, -296, 154, -2172, -185,
	310, -213, 108, -165, -235,
	-190, 2072, -542, -900, -389,
	-611, -26, 816, 144, 144,
	-2444, 233, 275, 10, 2340,
	-2284, 925, 282, -679, -1081,
	-1273, 616, -1637, -398, -424,
	-386, 720, 687, 78, 1159,
	-243, -66, 825, -1588, 119,
	-572, -285, -255, -250, 176,
	-812, -682, -745, -1176, -401,
	-492, 1506, -485, -119, -1177,
	-610, 2485, -29, 1134, -754,
	-163, -1197, -49, -153, 1139,
	802, 537, -69, -292, -5828,
	-299, -1276, 108, -370, -547,
	-1106, -102, 215, -1960, 436,
	-394, 629, -999, 431, -750,
	2978, 54, -154, -43, -152,
	2774, -573, 2710, -332, -1433,
	452, 1279, -356, -732, -160,
	2890, -219, -2169, -1688, -575,
	-20, -195, -441, -513, -92,
	280, 1514, -690, -519, -516,
	-514, -177, -854, 965, -119,
	-861, 2812, 54, 298, 38,
	1811, -233, -552, -873, -898,
	892, 427, -1032, 1020, -378,
	-396, 1894, -377, -782, -311,
	// rgWeightOutput+8*150
	2038, -360, -629, -621, 216,
	-689, -359, 483, -2070, 694,
	-889, 1378, 522, -487, -1416,
	-774, 1577, -483, -224, -412,
	-1216, 356, 1152, 42, 82,
	1437, -162, 535, -387, 5704,
	-1097, 83, -1945, -3, 2082,
	-295, 270, -1186, -261, -533,
	436, -1286, 707, 278, 150,
	-901, -797, 123, 467, 316,
	-888, -609, -570, -1067, -189,
	-209, -319, -565, -235, -475,
	-623, -2019, -626, -40, -709,
	-569, 1267, -1808, 363, -535,
	-590, 3151, 52, -80, 2892,
	-462, -549, 424, -470, 2803,
	-265, 121, 805, 175, -509,
	-286, 276, -249, -811, 326,
	-192, 816, -512, -645, -478,
	610, 1129, -392, -254, 1455,
	-660, -875, -3072, -925, -1260,
	3977, 1955, 162, -480, -436,
	2387, 151, -1319, -2008, -629,
	-415, -1041, -1352, -643, -626,
	572, 1522, -535, -459, 389,
	-265, -294, -254, 2234, -521,
	-2501, -700, -157, -598, -306,
	-2171, -436, 289, -668, 2311,
	-27, -964, 638, -687, -1084,
	-448, -1897, -396, -93, -193,
	// rgWeightOutput+9*150
	-4019, -398, -4539, -4667, -1661,
	-3474, -4671, -2798, -3592, -3649,
	-4485, -1395, -3958, -4424, -3752,
	-4212, -2508, -1115, -4221, -4659,
	-4244, -1062, -3603, -1926, -4638,
	-2958, -4710, -3273, -3917, -2680,
	-2045, -4253, -2376, -4539, -3487,
	-3206, -4544, -1711, -4595, -4495,
	-4642, -2331, -4141, -3881, -1684,
	-1309, -3444, -769, -3122, -4223,
	-4460, -4460, -4559, -3897, -4720,
	-4292, -3976, -4649, -2866, -4568,
	-4434, -1485, -4698, -4186, -4573,
	-4560, -3730, -2367, -2804, -4536,
	-4691, -4035, -4697, -4503, -2846,
	-4132, -4374, -4589, -4648, -2974,
	-4683, -4213, -2525, -4415, -4715,
	-4369, -4548, -4580, -3929, -4431,
	-4655, -4085, -3560, -4426, -4669,
	-3012, -932, -3893, -4704, -2384,
	-4230, -4708, -3813, -4454, -3595,
	-2785, -2239, -4625, -4354, -4660,
	-3212, -4645, -2425, -1957, -4675,
	-4096, -4332, -3468, -4582, -4796,
	-600, -3433, -4597, -4606, -4616,
	-3794, -4432, -4367, -3698, -4425,
	-1897, -3839, -4700, -4563, -1068,
	-3099, -4699, -4612, -4326, -2617,
	-4475, -4476, -4026, -4234, -4305,
	-4599, -4207, -4667, -4639, -4254,
	// rgWeightOutput+10*150
	-4022, -399, -4538, -4670, -1666,
	-3475, -4673, -2799, -3593, -3648,
	-4485, -1396, -3959, -4422, -3748,
	-4213, -2509, -1114, -4220, -4662,
	-4244, -1059, -3604, -1927, -4638,
	-2955, -4709, -3271, -3921, -2680,
	-2043, -4251, -2377, -4534, -3487,
	-3206, -4543, -1714, -4596, -4495,
	-4644, -2333, -4139, -3884, -1685,
	-1309, -3446, -767, -3121, -4223,
	-4458, -4460, -4558, -3896, -4719,
	-4289, -3980, -4645, -2866, -4568,
	-4430, -1482, -4695, -4184, -4573,
	-4563, -3729, -2364, -2807, -4538,
	-4691, -4038, -4694, -4506, -2845,
	-4132, -4372, -4590, -4648, -2976,
	-4681, -4215, -2529, -4415, -4712,
	-4368, -4550, -4582, -3931, -4431,
	-4655, -4088, -3560, -4424, -4672,
	-3013, -928, -3894, -4703, -2385,
	-4231, -4712, -3813, -4452, -3598,
	-2786, -2240, -4627, -4354, -4657,
	-3213, -4646, -2424, -1957, -4673,
	-4096, -4334, -3470, -4583, -4794,
	-598, -3432, -4600, -4609, -4618,
	-3793, -4431, -4370, -3694, -4424,
	-1897, -3843, -4699, -4560, -1070,
	-3097, -4697, -4614, -4329, -2616,
	-4478, -4473, -4027, -4237, -4305,
	-4594, -4206, -4669, -4635, -4255,
	// rgWeightOutput+11*150
	-1515, -1595, -1312, -115, -940,
	-57, -31, 155, 219, 881,
	-934, 1296, -34, -471, -186,
	311, 5, -2010, 572, -171,
	-411, -806, -894, 83, 152,
	-350, 296, 256, -1906, 1084,
	981, -1552, 2204, -275, 2438,
	-132, -592, 306, -58, -226,
	657, -1311, -3199, 490, 114,
	-919, 362, -446, 122, 1274,
	172, 49, -36, 27, 125,
	159, -1007, -224, -359, -233,
	-263, -621, -234, -69, -315,
	-207, 80, 312, -414, 393,
	-234, -499, -111, 268, -254,
	-186, -765, 276, -252, 542,
	-109, 267, -193, 1434, -8,
	277, 96, 327, -476, 105,
	66, 178, 823, 731, 407,
	956, -198, 264, 192, 65,
	-87, -522, -463, -101, -404,
	1511, 351, -229, -196, -145,
	-798, -352, 1720, 601, -462,
	679, -1368, -75, -254, -139,
	-296, 376, -244, 121, 2622,
	-454, -505, -1089, -685, -482,
	414, -910, 59, 274, -1157,
	-1084, 198, 541, -245, 6,
	-903, 92, 1198, -808, -1014,
	-28, -953, 224, 398, 433,
	// rgWeightOutput+12*150
	1940, -1490, -1935, -131, 1602,
	-448, -388, 963, -192, -2207,
	304, 927, 721, -883, -249,
	61, -1895, 3575, -751, -355,
	137, 414, 766, 606, -950,
	1311, -750, -939, -601, -2088,
	1219, 735, 1918, -303, 1116,
	857, -58, 2110, -80, 13,
	-967, 6, -878, 716, 1847,
	3631, 518, 1323, 411, -1199,
	-571, -144, -311, 570, -622,
	-28, 716, -142, 1778, -581,
	32, -313, -212, -1005, -247,
	-112, 1068, -270, 1858, -335,
	-326, 713, -672, -546, 1251,
	-1405, 374, 56, -152, 2075,
	-379, -899, 791, -1024, -398,
	-792, -711, -1037, 321, -1077,
	-585, -1297, 76, 261, -579,
	235, 1344, -172, -836, -1231,
	564, -99, 116, -235, 331,
	564, 1687, -341, -632, -461,
	252, -340, 1537, 2494, -358,
	-360, -689, 1207, 44, -662,
	2030, 549, -144, -325, -372,
	-59, 47, 302, -1003, -932,
	-388, -1978, -663, -891, 948,
	613, -728, -803, -170, 644,
	-346, -1073, -1574, 660, 1003,
	-476, 204, -230, -37, -545,
	// rgWeightOutput+13*150
	-463, 4343, 467, -28, 328,
	-156, 28, 505, -1633, -1041,
	553, -1828, -2613, -60, 871,
	494, 48, 3122, 279, -352,
	-292, -5, 890, 400, -562,
	1248, -563, -573, 1096, 307,
	1256, -2722, 2306, -409, 105,
	-479, -414, -505, 63, -551,
	160, 523, -3618, 409, -340,
	3153, -143, 298, -3646, -80,
	377, 525, 691, -358, 18,
	353, -496, -545, 774, -279,
	-503, 1142, 52, 469, -574,
	-99, -358, -32, 51, -391,
	-89, -130, -379, -364, -162,
	-586, 202, 51, 325, -216,
	-178, -483, 599, -337, -200,
	128, -161, -130, -845, -559,
	-509, -751, 808, 12, 102,
	-857, 511, 992, 7, -578,
	-75, 472, 298, 435, 782,
	-396, 153, -818, 517, -517,
	-527, -384, 1387, 657, 187,
	-385, -612, 37, 99, 173,
	819, -283, -31, 601, -1541,
	268, 878, 691, -804, -42,
	625, 247, 141, -184, -327,
	327, -87, -380, 363, 168,
	-711, -955, -1286, -1169, -543,
	303, 588, 442, -750, -347,
	// rgWeightOutput+14*150
	-249, -1042, -1110, -401, -2072,
	1582, -150, -128, -1419, 1698,
	-638, 141, 902, -9, -409,
	777, 2357, -1739, -367, 0,
	-772, -1474, 1269, -2200, -23,
	-1676, -66, -3143, 1296, 377,
	757, -419, -1142, -39, -2745,
	-1923, 15, 1402, 101, -88,
	311, -3433, 1333, -381, -2027,
	-763, -2656, -1294, -60, -940,
	-789, -774, -448, 188, -436,
	-686, -442, -53, -3208, 281,
	-859, 178, 224, -389, 146,
	-56, 0, -2171, -2079, 377,
	-356, 268, 57, -785, 1951,
	632, -567, -45, -323, 463,
	191, -450, 511, 647, -36,
	427, 428, 121, 1334, 649,
	300, 920, 572, -447, 80,
	-1966, -1394, -1844, -111, -789,
	292, 78, -180, 571, -3889,
	2020, 521, 307, 72, -32,
	-653, 0, -2469, -1825, 342,
	-1332, -168, -645, -405, 143,
	-1059, 1467, -191, -652, 41,
	-384, -686, -883, -914, -524,
	-1917, -3401, -813, 319, -1363,
	3477, -80, -17, 446, 989,
	-136, 326, 1443, -668, 233,
	-479, 340, -361, 38, 226,
	// rgWeightOutput+15*150
	-4019, -397, -4536, -4669, -1661,
	-3474, -4674, -2797, -3593, -3648,
	-4483, -1398, -3959, -4423, -3753,
	-4214, -2508, -1118, -4218, -4663,
	-4246, -1061, -3604, -1927, -4637,
	-2958, -4707, -3273, -3919, -2680,
	-2044, -4251, -2375, -4537, -3491,
	-3206, -4543, -1715, -4592, -4496,
	-4641, -2333, -4140, -3883, -1683,
	-1309, -3443, -769, -3123, -4221,
	-4459, -4458, -4560, -3896, -4722,
	-4291, -3977, -4649, -2862, -4565,
	-4433, -1486, -4694, -4183, -4576,
	-4564, -3728, -2368, -2805, -4539,
	-4689, -4035, -4697, -4504, -2844,
	-4134, -4373, -4593, -4648, -2974,
	-4683, -4213, -2528, -4414, -4716,
	-4370, -4551, -4581, -3929, -4432,
	-4656, -4087, -3564, -4424, -4669,
	-3012, -929, -3894, -4702, -2384,
	-4232, -4709, -3809, -4453, -3596,
	-2783, -2242, -4625, -4357, -4656,
	-3209, -4649, -2427, -1962, -4673,
	-4096, -4331, -3469, -4578, -4795,
	-599, -3432, -4601, -4607, -4619,
	-3791, -4428, -4372, -3695, -4425,
	-1896, -3839, -4697, -4564, -1066,
	-3098, -4697, -4614, -4327, -2618,
	-4479, -4474, -4028, -4234, -4306,
	-4597, -4204, -4667, -4639, -4253,
	// rgWeightOutput+16*150
	-4019, -396, -4536, -4669, -1661,
	-3474, -4671, -2794, -3594, -3652,
	-4483, -1395, -3958, -4423, -3752,
	-4215, -2507, -1116, -4219, -4662,
	-4245, -1060, -3606, -1926, -4635,
	-2955, -4709, -3275, -3917, -2676,
	-2046, -4254, -2378, -4538, -3487,
	-3205, -4548, -1713, -4594, -4493,
	-4646, -2333, -4141, -3880, -1682,
	-1311, -3442, -768, -3120, -4223,
	-4460, -4460, -4561, -3895, -4722,
	-4291, -3981, -4648, -2862, -4567,
	-4430, -1483, -4696, -4186, -4576,
	-4561, -3728, -2366, -2808, -4538,
	-4690, -4040, -4695, -4504, -2847,
	-4131, -4370, -4591, -4648, -2975,
	-4681, -4215, -2525, -4416, -4713,
	-4372, -4550, -4582, -3928, -4430,
	-4656, -4086, -3560, -4426, -4671,
	-3014, -929, -3893, -4705, -2384,
	-4232, -4713, -3811, -4453, -3598,
	-2784, -2242, -4623, -4357, -4658,
	-3210, -4644, -2425, -1962, -4673,
	-4096, -4332, -3466, -4578, -4797,
	-600, -3431, -4597, -4609, -4619,
	-3790, -4432, -4371, -3694, -4425,
	-1899, -3843, -4701, -4560, -1068,
	-3098, -4700, -4613, -4326, -2616,
	-4478, -4472, -4028, -4235, -4310,
	-4596, -4208, -4668, -4636, -4258,
	// rgWeightOutput+17*150
	1032, -623, -539, -457, -374,
	-2533, -277, 110, -21, -2150,
	-352, -115, -6, -1349, -384,
	-452, 2231, -82, -605, -328,
	-204, -2463, 1156, 271, 89,
	-203, 284, -811, -948, 792,
	261, 372, -386, -501, 2572,
	-277, -41, -241, -188, -152,
	-994, 1704, 636, 225, -2192,
	-784, 888, 2461, 1335, 1587,
	-669, -154, -660, -297, -185,
	1880, -590, -384, 553, -638,
	-275, -1477, -443, -808, -343,
	-441, 1172, -50, 547, 6,
	-298, -83, -267, 12, 2847,
	-1227, 1050, -161, -316, 226,
	-233, -387, -404, -511, -418,
	-6, -549, -774, -1139, -607,
	-351, 938, -771, 1447, -285,
	2877, -1838, -91, -96, -2641,
	2155, -202, 333, -230, -724,
	3046, -293, 127, -3266, -416,
	-168, -73, -29, 671, -952,
	152, 1142, -2405, -436, -172,
	140, 2548, -305, -273, -447,
	35, -96, -125, 899, -1001,
	-2261, 401, -156, -867, -1435,
	944, -99, 172, -670, 335,
	-167, -559, 332, 1172, -634,
	-431, 677, -350, -393, 174,
	// rgWeightOutput+18*150
	654, -759, -280, -682, -906,
	-1025, -199, 35, 3262, 183,
	-338, -445, 234, -572, -1208,
	-453, 1990, -1149, 56, -505,
	-1323, 290, 1744, -149, 46,
	1499, 533, 1313, 764, 2336,
	-289, -88, 522, 57, 1294,
	-589, -294, -2183, -164, -463,
	71, -395, 610, 71, 1528,
	-721, -408, -827, 1563, -1242,
	-469, -272, -847, 44, -360,
	401, -1060, -184, -2691, -606,
	-307, -1806, -540, -319, -518,
	-754, 1141, -1450, -324, 598,
	-725, 1311, -135, -815, 2176,
	-894, -100, -41, -485, 2037,
	-267, 137, 430, 641, -364,
	820, 278, 277, -1250, 30,
	-20, 858, -85, 414, -396,
	-510, -49, -788, -56, -1560,
	-1199, -512, 874, -662, -260,
	2295, -279, 536, -1183, -588,
	-459, -157, 1714, -1844, -293,
	339, -474, 163, -534, -224,
	-533, 1691, -497, -692, -86,
	-51, -366, -644, 330, -1138,
	-2671, 2337, -671, -309, 7,
	-1590, -337, 24, -259, 1240,
	282, 83, -954, -682, -412,
	-762, -570, -313, -311, 83,
	// rgWeightOutput+19*150
	2143, -1557, 906, -60, 578,
	405, -108, -958, -428, -303,
	350, -2135, 1211, -173, -1188,
	1236, -4359, 693, 169, -355,
	668, 63, -2279, -182, -140,
	-1096, -104, -2896, 1407, -177,
	-3095, 210, -1380, -188, 1156,
	413, -96, 3162, -348, -270,
	-171, 614, 693, -385, -437,
	-2005, 57, -543, 723, -1705,
	-24, -135, 196, 193, -159,
	652, 195, -575, 3065, 154,
	79, -1518, -211, -667, -706,
	-60, -1303, -1597, 281, -983,
	-159, 1764, -423, -209, 872,
	-1226, 470, -14, -184, -1658,
	-137, -692, -301, -46, -219,
	817, -186, -317, 1987, 971,
	-71, -178, -422, -439, -264,
	1295, 368, -606, -269, -422,
	2180, -72, -121, 142, 729,
	1744, 223, -422, 160, -91,
	817, -507, 1590, -46, -79,
	-412, -2179, 1418, -257, -170,
	469, -1318, -262, -228, -251,
	-728, -321, -634, 1903, 13,
	1376, 870, -256, -362, 425,
	-515, -151, -492, 189, -1048,
	1219, -857, -676, 519, 1510,
	81, -3453, -112, -456, -351,
	// rgWeightOutput+20*150
	749, -78, -823, 7, -1914,
	-896, -175, 463, -2077, 462,
	336, -122, 93, -88, -745,
	-239, 3490, -1217, -90, 191,
	-457, -1539, 1547, 2673, 958,
	-496, -197, -2081, 845, -883,
	209, 627, 641, -103, -818,
	-361, 331, -3196, -134, -423,
	174, -544, -1470, -132, 436,
	326, 3110, 957, 1800, 2221,
	-307, -95, 1, -520, 20,
	-27, -1030, 103, -2814, 343,
	-576, -1725, -410, -160, -76,
	-3, 1893, -175, -1666, -4380,
	203, 845, 111, -332, 1488,
	-244, 96, 374, 29, 823,
	-224, -552, 1484, 786, -123,
	-226, 559, -27, 1367, -202,
	-468, 1814, 349, 396, -329,
	180, -662, -1152, -345, 974,
	917, -326, -524, -526, -1005,
	-1342, -3022, 605, 720, -173,
	357, -390, -1512, 145, 614,
	-822, 71, 164, -172, 22,
	112, 1278, -198, -181, -522,
	-223, 101, 136, -364, 80,
	-3020, -2680, 160, -70, -1328,
	187, -396, -707, -169, -246,
	125, -1781, 1130, -200, -218,
	-152, -501, 552, -472, 506,
	// rgWeightOutput+21*150
	474, -346, -583, -253, -632,
	1790, -232, 633, 593, 425,
	389, 381, 423, 287, -512,
	-444, -120, -1073, -730, -561,
	-1630, -785, 1147, 468, -217,
	-735, 171, 223, 1827, 2514,
	1093, 585, -144, -132, 544,
	1655, 437, -1552, -70, -454,
	519, 211, 1090, -339, 1288,
	-477, -513, 317, 949, 939,
	-621, -292, -327, -995, 80,
	109, 26, -543, -935, 287,
	-215, 2068, -277, -160, -620,
	-22, 1219, -1534, -527, -678,
	-61, -153, 346, -544, -786,
	591, 68, 503, -311, -4340,
	-317, -573, 1528, 771, -79,
	-746, 123, 755, 1148, -23,
	-212, 578, -407, -149, -424,
	-116, -938, -1362, 70, 1859,
	16, -283, -1162, 30, -877,
	-3091, -2190, -460, 390, -114,
	906, 197, -691, -1885, -233,
	-492, 46, -620, -411, -42,
	27, -2101, 39, -529, -333,
	85, -367, -663, 1365, -681,
	-2887, 1029, -71, -173, -1321,
	-1937, -460, -391, -378, -758,
	-815, 213, 1236, -232, 176,
	-279, -1652, -31, -119, -886,
	// rgWeightOutput+22*150
	1284, -975, -314, 202, 109,
	1006, -102, 147, -3111, 303,
	-426, -56, 471, -761, -1294,
	-314, -91, -772, -150, -163,
	-736, 118, -860, 433, -429,
	-102, -11, 557, 1549, -2948,
	-598, 115, 1939, -160, 1487,
	-756, 256, -521, -149, -289,
	-651, -245, 440, 419, 1019,
	-1228, 933, 63, 490, 961,
	-822, -105, -337, 257, 36,
	-875, -590, -403, -1465, -157,
	223, -1894, -453, -508, -238,
	-94, 405, -1004, -1630, 7,
	-536, 1569, -135, 53, 2883,
	-561, 452, 72, -328, 2578,
	-210, -344, 2113, -1323, -429,
	909, 620, -186, -2606, 411,
	146, 863, -375, 611, -390,
	2794, 325, -325, -424, -2000,
	135, -702, -2535, -856, 49,
	2268, 594, 207, -1148, -152,
	1485, -348, 2138, -744, -182,
	-481, -1063, -476, -389, -338,
	455, 792, -710, -255, 391,
	80, -353, -509, -948, -698,
	-4129, 416, -105, -344, 718,
	1967, -266, -339, -619, 672,
	436, -1171, -723, 1017, 34,
	-221, -13, -360, 191, -522,
	// rgWeightOutput+23*150
	708, -1323, 207, -476, -567,
	-2349, -127, 1021, 1227, -1012,
	231, -1344, -439, 255, -23,
	-492, 1577, -49, -483, -268,
	352, -1488, 427, -863, 249,
	891, -46, -1817, -402, 1123,
	718, 362, -450, -286, -922,
	1887, -405, -506, -177, 135,
	-248, -359, 758, 617, -2625,
	824, 440, -900, 1932, 555,
	-113, -90, -177, 1283, -518,
	-220, -631, -211, -260, -351,
	-477, -169, -209, -114, 47,
	-350, -584, 647, -193, -33,
	-350, -36, -324, -61, -367,
	-907, 305, -296, -119, -834,
	-258, 129, -1314, -304, -154,
	1124, -691, -333, -532, -318,
	-326, -272, 574, 1913, 91,
	-1704, -1244, 672, -185, 1117,
	-2727, 92, 1441, -85, 508,
	953, -896, -138, -678, -307,
	-2887, 168, 190, 781, -278,
	31, 853, 327, -303, -581,
	-848, -2287, -278, 154, -400,
	1108, 176, -164, -1282, -137,
	-993, 1214, -196, -487, -1735,
	153, -10, -46, 108, 283,
	-469, -71, 795, -236, -240,
	-143, 473, -124, -80, 2005,
	// rgWeightOutput+24*150
	171, -1521, -2048, 303, 565,
	1352, 105, 977, -396, -352,
	296, 404, 746, -24, -982,
	-312, -2354, 148, 60, -275,
	-655, 99, 1931, -220, -75,
	-2125, 715, 303, 774, 1685,
	-754, -537, -482, -14, -1168,
	-774, -123, -2260, 51, -217,
	48, -1450, 1145, -799, 274,
	-1204, -567, -3, 1799, -294,
	-149, 118, -293, -401, -17,
	-96, -221, -240, -768, 388,
	245, -220, -140, -114, -549,
	-95, -831, -1240, -521, 166,
	-297, 2257, 17, -103, -1174,
	1058, 131, 31, -267, 2546,
	-150, 145, 1534, -268, 70,
	-1297, 28, 349, -481, 521,
	273, 162, 1146, 57, -329,
	2424, -115, -405, 238, 12,
	-2105, -264, -1271, -380, -867,
	-810, -1830, -411, -182, 20,
	114, -296, 3509, -1016, -659,
	233, -895, 278, -383, -31,
	-412, -72, -380, -308, -288,
	201, -415, -253, -1243, -561,
	-2638, 1575, 55, 599, -1092,
	1542, 38, -427, -472, -730,
	1006, 1159, -993, -489, 94,
	-183, -627, -72, -58, -190,
	// rgWeightOutput+25*150
	-4023, -396, -4538, -4666, -1663,
	-3472, -4674, -2797, -3596, -3649,
	-4484, -1399, -3959, -4422, -3751,
	-4214, -2510, -1118, -4218, -4663,
	-4246, -1060, -3604, -1925, -4634,
	-2956, -4711, -3274, -3920, -2679,
	-2044, -4250, -2375, -4539, -3491,
	-3205, -4544, -1711, -4594, -4492,
	-4643, -2332, -4143, -3882, -1684,
	-1310, -3447, -766, -3121, -4225,
	-4456, -4459, -4558, -3899, -4720,
	-4290, -3979, -4649, -2865, -4565,
	-4434, -1487, -4699, -4186, -4573,
	-4564, -3731, -2367, -2806, -4538,
	-4691, -4036, -4695, -4507, -2843,
	-4131, -4374, -4592, -4652, -2973,
	-4682, -4214, -2528, -4415, -4715,
	-4369, -4552, -4581, -3933, -4430,
	-4652, -4087, -3562, -4425, -4670,
	-3014, -928, -3894, -4701, -2382,
	-4233, -4710, -3812, -4452, -3598,
	-2786, -2241, -4626, -4355, -4661,
	-3211, -4648, -2423, -1962, -4672,
	-4095, -4333, -3470, -4580, -4795,
	-598, -3432, -4600, -4609, -4617,
	-3794, -4433, -4370, -3694, -4429,
	-1897, -3840, -4697, -4561, -1067,
	-3098, -4701, -4611, -4325, -2616,
	-4480, -4473, -4026, -4234, -4310,
	-4595, -4204, -4666, -4637, -4254,
	// rgWeightOutput+26*150
	-4019, -399, -4536, -4668, -1662,
	-3472, -4673, -2795, -3594, -3649,
	-4482, -1394, -3957, -4423, -3750,
	-4212, -2508, -1117, -4219, -4663,
	-4243, -1059, -3605, -1927, -4638,
	-2954, -4709, -3272, -3921, -2676,
	-2044, -4254, -2378, -4539, -3490,
	-3207, -4544, -1711, -4597, -4494,
	-4645, -2330, -4143, -3882, -1685,
	-1310, -3444, -768, -3121, -4220,
	-4460, -4460, -4558, -3897, -4719,
	-4290, -3976, -4645, -2862, -4569,
	-4433, -1483, -4695, -4184, -4576,
	-4561, -3730, -2364, -2805, -4537,
	-4688, -4038, -4698, -4504, -2846,
	-4131, -4371, -4591, -4651, -2976,
	-4684, -4212, -2526, -4415, -4716,
	-4371, -4553, -4581, -3929, -4433,
	-4657, -4087, -3562, -4428, -4670,
	-3016, -931, -3894, -4705, -2381,
	-4231, -4710, -3811, -4452, -3598,
	-2786, -2244, -4624, -4355, -4656,
	-3209, -4648, -2427, -1962, -4676,
	-4094, -4331, -3468, -4579, -4797,
	-600, -3431, -4597, -4608, -4620,
	-3793, -4430, -4369, -3697, -4424,
	-1897, -3841, -4699, -4560, -1065,
	-3099, -4699, -4614, -4324, -2615,
	-4476, -4477, -4027, -4236, -4308,
	-4595, -4206, -4665, -4638, -4256,
	// rgWeightOutput+27*150
	-4022, -397, -4537, -4666, -1664,
	-3473, -4673, -2795, -3594, -3648,
	-4484, -1397, -3956, -4422, -3753,
	-4213, -2508, -1115, -4220, -4661,
	-4246, -1058, -3604, -1927, -4637,
	-2953, -4709, -3271, -3919, -2680,
	-2046, -4250, -2379, -4536, -3490,
	-3207, -4544, -1714, -4595, -4495,
	-4642, -2333, -4139, -3880, -1684,
	-1308, -3446, -765, -3122, -4222,
	-4458, -4458, -4561, -3895, -4721,
	-4289, -3978, -4647, -2865, -4566,
	-4432, -1486, -4696, -4185, -4576,
	-4563, -3728, -2366, -2804, -4539,
	-4687, -4039, -4695, -4503, -2842,
	-4131, -4372, -4590, -4648, -2972,
	-4681, -4213, -2527, -4414, -4716,
	-4370, -4551, -4581, -3932, -4429,
	-4655, -4089, -3561, -4424, -4670,
	-3015, -929, -3895, -4704, -2381,
	-4230, -4712, -3809, -4451, -3599,
	-2786, -2243, -4627, -4355, -4656,
	-3212, -4648, -2428, -1958, -4676,
	-4096, -4330, -3469, -4578, -4794,
	-597, -3433, -4599, -4609, -4617,
	-3789, -4428, -4372, -3694, -4429,
	-1895, -3841, -4697, -4564, -1070,
	-3095, -4700, -4611, -4328, -2619,
	-4476, -4474, -4029, -4238, -4306,
	-4597, -4205, -4667, -4635, -4255,
	// rgWeightOutput+28*150
	-4022, -395, -4536, -4670, -1666,
	-3476, -4670, -2794, -3596, -3653,
	-4485, -1396, -3957, -4424, -3751,
	-4215, -2511, -1118, -4218, -4660,
	-4244, -1059, -3603, -1927, -4634,
	-2956, -4708, -3274, -3918, -2681,
	-2043, -4254, -2379, -4537, -3491,
	-3206, -4544, -1711, -4594, -4496,
	-4643, -2329, -4141, -3879, -1684,
	-1309, -3445, -768, -3123, -4221,
	-4461, -4461, -4560, -3899, -4721,
	-4289, -3976, -4647, -2863, -4567,
	-4433, -1485, -4694, -4185, -4573,
	-4564, -3727, -2365, -2804, -4538,
	-4687, -4039, -4695, -4506, -2846,
	-4130, -4370, -4594, -4649, -2973,
	-4683, -4211, -2528, -4416, -4717,
	-4370, -4548, -4580, -3931, -4433,
	-4656, -4086, -3562, -4425, -4671,
	-3012, -930, -3895, -4705, -2386,
	-4233, -4711, -3812, -4454, -3596,
	-2784, -2244, -4625, -4354, -4658,
	-3209, -4646, -2425, -1961, -4675,
	-4094, -4332, -3466, -4582, -4794,
	-602, -3431, -4597, -4607, -4618,
	-3792, -4429, -4369, -3695, -4429,
	-1897, -3842, -4700, -4563, -1066,
	-3097, -4702, -4610, -4326, -2619,
	-4478, -4476, -4027, -4236, -4306,
	-4597, -4208, -4666, -4635, -4256,
	// rgWeightOutput+29*150
	-4022, -399, -4535, -4666, -1663,
	-3474, -4669, -2794, -3591, -3652,
	-4486, -1395, -3957, -4426, -3751,
	-4212, -2511, -1118, -4219, -4662,
	-4245, -1061, -3605, -1928, -4634,
	-2958, -4706, -3271, -3917, -2677,
	-2045, -4251, -2377, -4538, -3490,
	-3203, -4546, -1715, -4597, -4491,
	-4644, -2333, -4142, -3879, -1683,
	-1308, -3442, -769, -3118, -4221,
	-4459, -4459, -4560, -3898, -4721,
	-4289, -3979, -4645, -2864, -4567,
	-4431, -1484, -4694, -4184, -4573,
	-4564, -3730, -2367, -2804, -4537,
	-4687, -4035, -4697, -4504, -2845,
	-4132, -4373, -4591, -4650, -2973,
	-4683, -4215, -2527, -4415, -4716,
	-4369, -4552, -4580, -3931, -4433,
	-4652, -4086, -3564, -4428, -4670,
	-3014, -929, -3894, -4704, -2386,
	-4229, -4710, -3809, -4452, -3596,
	-2787, -2239, -4623, -4356, -4655,
	-3211, -4644, -2423, -1961, -4675,
	-4095, -4330, -3468, -4579, -4795,
	-598, -3429, -4601, -4606, -4617,
	-3794, -4431, -4368, -3695, -4424,
	-1898, -3843, -4698, -4560, -1067,
	-3096, -4700, -4613, -4328, -2615,
	-4477, -4477, -4027, -4235, -4309,
	-4596, -4205, -4669, -4636, -4256,
	// rgWeightOutput+30*150
	-4022, -395, -4536, -4668, -1662,
	-3474, -4672, -2798, -3596, -3649,
	-4481, -1395, -3956, -4426, -3749,
	-4213, -2508, -1116, -4219, -4663,
	-4246, -1061, -3603, -1927, -4638,
	-2954, -4708, -3273, -3921, -2678,
	-2047, -4254, -2374, -4535, -3487,
	-3206, -4545, -1715, -4593, -4494,
	-4642, -2329, -4139, -3883, -1685,
	-1309, -3445, -770, -3120, -4224,
	-4457, -4462, -4561, -3898, -4720,
	-4292, -3978, -4648, -2864, -4568,
	-4432, -1483, -4694, -4184, -4574,
	-4561, -3728, -2367, -2803, -4538,
	-4687, -4039, -4696, -4504, -2842,
	-4132, -4373, -4589, -4651, -2973,
	-4685, -4213, -2527, -4417, -4715,
	-4368, -4548, -4580, -3933, -4431,
	-4655, -4087, -3563, -4428, -4669,
	-3013, -930, -3894, -4703, -2384,
	-4232, -4710, -3811, -4452, -3598,
	-2784, -2243, -4623, -4354, -4658,
	-3210, -4647, -2427, -1961, -4675,
	-4094, -4333, -3466, -4579, -4794,
	-599, -3432, -4599, -4607, -4618,
	-3790, -4428, -4368, -3695, -4428,
	-1898, -3839, -4700, -4564, -1069,
	-3095, -4701, -4613, -4324, -2619,
	-4479, -4476, -4029, -4235, -4307,
	-4596, -4206, -4668, -4636, -4257,
	// rgWeightOutput+31*150
	2091, -2790, 1041, 84, -381,
	-512, 58, -1248, -386, -1021,
	327, -1302, 458, -226, -1023,
	-1177, -1654, -1826, -547, -417,
	604, -695, -607, -853, -303,
	303, 229, 1007, 1492, -2177,
	1916, 972, 854, -6, 2950,
	1622, 316, -2235, -219, -405,
	-293, -90, 1443, -849, -2285,
	1463, -198, -1086, 118, -2520,
	-280, -354, 214, -722, -188,
	-2250, 739, 96, -609, -206,
	-336, 606, -219, -549, 124,
	-19, -3999, -690, 381, 444,
	-55, 835, -157, -360, -790,
	-1661, 252, 499, -340, 386,
	-370, -359, -1985, -269, -187,
	1213, -616, 173, 1465, -853,
	55, -299, 720, 315, 12,
	860, -284, -11, -226, -1153,
	-608, 169, 1346, -156, -1195,
	-485, -1912, -289, 635, -61,
	-3184, 297, 200, 2599, -446,
	-302, 866, 244, -160, -158,
	-519, -490, 52, 121, 36,
	-315, -208, -70, -336, -557,
	-16, 1115, -264, -472, -120,
	-221, 154, -353, 58, -915,
	394, 636, 617, 474, 1173,
	150, 161, -345, -33, -1080,
	// rgWeightOutput+32*150
	-4023, -397, -4538, -4671, -1663,
	-3474, -4671, -2796, -3596, -3649,
	-4486, -1396, -3956, -4424, -3749,
	-4215, -2510, -1117, -4220, -4664,
	-4245, -1059, -3604, -1928, -4635,
	-2957, -4708, -3275, -3921, -2679,
	-2045, -4251, -2379, -4535, -3487,
	-3206, -4544, -1712, -4593, -4494,
	-4642, -2330, -4143, -3880, -1682,
	-1307, -3444, -766, -3122, -4221,
	-4456, -4461, -4559, -3896, -4723,
	-4288, -3977, -4650, -2863, -4568,
	-4432, -1487, -4696, -4184, -4575,
	-4561, -3726, -2368, -2804, -4539,
	-4688, -4036, -4698, -4503, -2844,
	-4132, -4372, -4592, -4648, -2973,
	-4684, -4215, -2526, -4414, -4713,
	-4369, -4552, -4579, -3931, -4430,
	-4652, -4089, -3563, -4424, -4673,
	-3014, -929, -3896, -4703, -2382,
	-4232, -4712, -3813, -4452, -3595,
	-2785, -2243, -4626, -4355, -4657,
	-3210, -4648, -2425, -1958, -4673,
	-4095, -4335, -3469, -4583, -4797,
	-601, -3433, -4599, -4606, -4619,
	-3794, -4431, -4370, -3694, -4428,
	-1894, -3840, -4700, -4564, -1067,
	-3098, -4697, -4614, -4326, -2615,
	-4480, -4473, -4028, -4233, -4306,
	-4598, -4206, -4666, -4637, -4253,
	// rgWeightOutput+33*150
	1188, -3922, -1628, -136, -462,
	801, 90, -173, -353, 687,
	-836, 790, 2246, -168, -1254,
	-165, 121, 977, -75, -108,
	-831, -1042, 319, -1616, -617,
	-390, -54, -1508, 1013, -464,
	1935, 881, -9, -273, -147,
	989, -33, -737, -143, 188,
	-206, -327, -3286, 55, -1719,
	1494, -858, -886, 258, -137,
	-449, -404, 24, 661, -306,
	-516, -294, -182, 549, 113,
	-108, 130, -177, -299, -152,
	-193, -637, -2507, -1243, 197,
	-545, 847, -43, 59, 943,
	-222, -347, 17, -137, 1463,
	-4, 184, 927, 62, 46,
	307, 12, -652, -3028, -344,
	93, -1063, 196, -633, -126,
	631, -1139, -855, -200, -732,
	-61, -313, 860, -200, -1044,
	818, 601, 708, 10, -61,
	168, -208, -822, -18, 70,
	-703, 240, -1080, -243, 214,
	-758, 414, -698, 16, 351,
	-352, -143, -1, 352, -309,
	-240, 1131, -247, 126, -1241,
	2677, -12, -148, -145, 1112,
	-158, 250, 533, -337, 1066,
	-22, -537, -328, 135, -167,
	// rgWeightOutput+34*150
	-4020, -395, -4535, -4666, -1665,
	-3475, -4672, -2798, -3595, -3651,
	-4483, -1394, -3958, -4424, -3753,
	-4217, -2507, -1119, -4221, -4659,
	-4247, -1062, -3607, -1928, -4638,
	-2954, -4706, -3273, -3918, -2677,
	-2046, -4252, -2376, -4538, -3488,
	-3205, -4546, -1714, -4593, -4494,
	-4641, -2330, -4140, -3883, -1682,
	-1311, -3443, -766, -3121, -4224,
	-4458, -4458, -4557, -3898, -4722,
	-4289, -3978, -4648, -2863, -4568,
	-4433, -1484, -4696, -4185, -4574,
	-4560, -3727, -2367, -2805, -4537,
	-4690, -4039, -4693, -4502, -2842,
	-4133, -4373, -4592, -4648, -2975,
	-4683, -4216, -2525, -4412, -4712,
	-4370, -4549, -4579, -3930, -4433,
	-4656, -4088, -3564, -4428, -4673,
	-3017, -930, -3896, -4705, -2383,
	-4230, -4709, -3809, -4451, -3596,
	-2785, -2243, -4624, -4356, -4660,
	-3208, -4646, -2426, -1958, -4673,
	-4095, -4334, -3468, -4579, -4797,
	-599, -3430, -4599, -4608, -4620,
	-3790, -4428, -4370, -3697, -4424,
	-1896, -3841, -4699, -4560, -1070,
	-3095, -4701, -4610, -4324, -2619,
	-4476, -4475, -4028, -4237, -4306,
	-4594, -4206, -4666, -4636, -4257,
	// rgWeightOutput+35*150
	-2546, 3274, -548, 3, -11,
	-431, 307, 1017, 29, -731,
	630, 352, 1344, 238, -542,
	112, 512, 2756, 191, -483,
	-457, -697, -37, -92, 106,
	883, 64, -730, 254, 575,
	-2826, 191, 304, -84, -642,
	1357, -687, -113, -313, 26,
	-542, 643, -731, 524, -880,
	3212, 838, -486, 3227, 742,
	-130, 411, 442, 494, 84,
	-113, 863, -475, -551, 58,
	-188, 240, -98, 418, -330,
	-115, 224, -2137, 325, 59,
	-534, 381, -251, -218, 225,
	-454, -661, -269, 207, -242,
	-153, -265, 617, -856, 75,
	513, -473, -446, -724, 93,
	-332, -364, 372, -177, -113,
	-365, 38, 922, 4, -268,
	-1392, -93, -1205, 1, -467,
	172, 309, -254, 415, -209,
	-386, -56, 830, 2089, -71,
	-299, -876, -483, -269, 276,
	-900, -20, -113, 282, -352,
	360, 720, 458, -200, -193,
	-729, -907, 311, -140, -642,
	154, 276, -35, -365, 882,
	-611, -901, -1648, -1117, -1637,
	258, -1619, -35, -742, -595,
	// rgWeightOutput+36*150
	-4019, -397, -4538, -4668, -1666,
	-3476, -4670, -2795, -3592, -3653,
	-4485, -1398, -3959, -4423, -3748,
	-4217, -2508, -1116, -4217, -4662,
	-4245, -1060, -3606, -1928, -4638,
	-2954, -4706, -3274, -3918, -2679,
	-2046, -4250, -2375, -4535, -3491,
	-3206, -4546, -1716, -4596, -4493,
	-4645, -2333, -4143, -3880, -1682,
	-1311, -3443, -770, -3122, -4220,
	-4460, -4459, -4557, -3897, -4721,
	-4288, -3981, -4648, -2862, -4565,
	-4430, -1485, -4698, -4184, -4575,
	-4562, -3727, -2367, -2803, -4538,
	-4688, -4036, -4695, -4506, -2845,
	-4132, -4371, -4591, -4648, -2975,
	-4684, -4212, -2527, -4414, -4712,
	-4371, -4549, -4582, -3930, -4430,
	-4656, -4087, -3561, -4423, -4673,
	-3012, -929, -3897, -4702, -2382,
	-4230, -4708, -3811, -4452, -3594,
	-2786, -2240, -4627, -4355, -4656,
	-3213, -4649, -2427, -1958, -4676,
	-4094, -4331, -3467, -4579, -4794,
	-601, -3429, -4601, -4607, -4616,
	-3793, -4430, -4368, -3697, -4426,
	-1895, -3843, -4701, -4562, -1066,
	-3097, -4698, -4611, -4328, -2615,
	-4479, -4475, -4026, -4235, -4308,
	-4599, -4207, -4666, -4635, -4257,
	// rgWeightOutput+37*150
	-4019, -399, -4536, -4671, -1663,
	-3474, -4670, -2798, -3592, -3652,
	-4481, -1394, -3960, -4423, -3751,
	-4216, -2510, -1118, -4220, -4661,
	-4243, -1063, -3606, -1928, -4638,
	-2957, -4706, -3274, -3918, -2680,
	-2046, -4253, -2375, -4537, -3488,
	-3204, -4546, -1712, -4597, -4492,
	-4645, -2331, -4140, -3879, -1684,
	-1307, -3442, -770, -3122, -4222,
	-4458, -4459, -4562, -3897, -4720,
	-4291, -3976, -4645, -2862, -4566,
	-4433, -1487, -4694, -4183, -4576,
	-4562, -3727, -2366, -2806, -4537,
	-4691, -4036, -4698, -4504, -2843,
	-4130, -4371, -4593, -4648, -2974,
	-4681, -4214, -2528, -4415, -4713,
	-4369, -4551, -4580, -3930, -4430,
	-4653, -4089, -3561, -4426, -4673,
	-3016, -931, -3893, -4705, -2383,
	-4230, -4710, -3813, -4452, -3598,
	-2787, -2240, -4623, -4357, -4657,
	-3211, -4648, -2427, -1961, -4676,
	-4093, -4335, -3470, -4580, -4795,
	-599, -3431, -4598, -4608, -4618,
	-3792, -4429, -4369, -3697, -4425,
	-1896, -3840, -4699, -4563, -1067,
	-3097, -4697, -4613, -4328, -2616,
	-4478, -4475, -4025, -4237, -4307,
	-4596, -4207, -4666, -4638, -4255,
	// rgWeightOutput+38*150
	-4019, -395, -4537, -4669, -1662,
	-3476, -4671, -2794, -3596, -3652,
	-4481, -1398, -3959, -4425, -3752,
	-4216, -2508, -1117, -4221, -4661,
	-4248, -1061, -3605, -1929, -4634,
	-2956, -4708, -3273, -3919, -2679,
	-2046, -4251, -2378, -4536, -3490,
	-3203, -4546, -1715, -4593, -4495,
	-4642, -2334, -4139, -3881, -1684,
	-1310, -3444, -768, -3121, -4222,
	-4459, -4459, -4561, -3899, -4722,
	-4290, -3978, -4645, -2866, -4568,
	-4431, -1482, -4698, -4187, -4577,
	-4561, -3728, -2364, -2806, -4537,
	-4688, -4037, -4694, -4504, -2844,
	-4132, -4370, -4589, -4648, -2975,
	-4681, -4213, -2526, -4413, -4716,
	-4371, -4549, -4579, -3931, -4430,
	-4655, -4084, -3562, -4428, -4669,
	-3015, -927, -3893, -4706, -2385,
	-4232, -4713, -3809, -4451, -3597,
	-2784, -2243, -4624, -4354, -4656,
	-3211, -4645, -2426, -1962, -4673,
	-4097, -4333, -3470, -4581, -4795,
	-599, -3429, -4599, -4607, -4616,
	-3793, -4431, -4367, -3695, -4425,
	-1897, -3842, -4697, -4564, -1065,
	-3097, -4699, -4613, -4327, -2615,
	-4477, -4476, -4026, -4236, -4309,
	-4596, -4204, -4667, -4636, -4253,
	// rgWeightOutput+39*150
	-4019, -395, -4538, -4668, -1665,
	-3472, -4670, -2798, -3592, -3649,
	-4481, -1397, -3958, -4423, -3748,
	-4212, -2511, -1117, -4218, -4663,
	-4245, -1058, -3607, -1927, -4635,
	-2956, -4706, -3272, -3918, -2677,
	-2047, -4254, -2376, -4538, -3491,
	-3204, -4546, -1711, -4596, -4491,
	-4641, -2332, -4139, -3880, -1684,
	-1307, -3446, -769, -3120, -4221,
	-4459, -4462, -4561, -3894, -4718,
	-4290, -3977, -4648, -2864, -4567,
	-4433, -1484, -4697, -4186, -4574,
	-4561, -3726, -2368, -2806, -4540,
	-4689, -4039, -4695, -4505, -2844,
	-4134, -4371, -4592, -4651, -2975,
	-4684, -4215, -2525, -4415, -4714,
	-4369, -4550, -4581, -3929, -4432,
	-4656, -4086, -3563, -4427, -4671,
	-3015, -930, -3893, -4704, -2385,
	-4231, -4708, -3809, -4451, -3595,
	-2786, -2243, -4623, -4355, -4656,
	-3208, -4644, -2425, -1960, -4673,
	-4094, -4330, -3470, -4580, -4796,
	-600, -3428, -4600, -4610, -4616,
	-3791, -4430, -4368, -3694, -4427,
	-1898, -3841, -4696, -4562, -1065,
	-3096, -4701, -4613, -4325, -2616,
	-4477, -4477, -4029, -4236, -4305,
	-4597, -4206, -4669, -4636, -4257,
	// rgWeightOutput+40*150
	-4020, -398, -4539, -4666, -1662,
	-3472, -4672, -2795, -3592, -3649,
	-4485, -1396, -3958, -4425, -3748,
	-4217, -2509, -1119, -4219, -4663,
	-4243, -1059, -3607, -1927, -4633,
	-2953, -4708, -3270, -3918, -2680,
	-2047, -4254, -2379, -4534, -3488,
	-3203, -4547, -1716, -4596, -4491,
	-4644, -2332, -4143, -3882, -1685,
	-1311, -3443, -770, -3120, -4220,
	-4456, -4458, -4560, -3897, -4721,
	-4292, -3980, -4646, -2862, -4566,
	-4433, -1485, -4696, -4186, -4572,
	-4562, -3728, -2364, -2804, -4537,
	-4687, -4037, -4694, -4504, -2845,
	-4132, -4373, -4589, -4652, -2976,
	-4685, -4213, -2529, -4412, -4712,
	-4370, -4552, -4581, -3931, -4430,
	-4652, -4087, -3559, -4428, -4671,
	-3012, -928, -3894, -4705, -2384,
	-4232, -4708, -3813, -4455, -3595,
	-2784, -2239, -4626, -4355, -4657,
	-3209, -4646, -2424, -1957, -4674,
	-4097, -4334, -3470, -4583, -4796,
	-600, -3430, -4601, -4607, -4616,
	-3793, -4432, -4370, -3697, -4428,
	-1895, -3840, -4698, -4560, -1067,
	-3099, -4701, -4614, -4326, -2616,
	-4479, -4476, -4026, -4237, -4309,
	-4596, -4204, -4668, -4635, -4255,
	// rgWeightOutput+41*150
	-4021, -396, -4537, -4668, -1663,
	-3474, -4669, -2797, -3595, -3649,
	-4483, -1398, -3957, -4425, -3752,
	-4212, -2507, -1115, -4220, -4660,
	-4245, -1057, -3605, -1926, -4636,
	-2956, -4709, -3274, -3920, -2677,
	-2045, -4249, -2375, -4536, -3487,
	-3205, -4544, -1711, -4596, -4491,
	-4643, -2329, -4142, -3880, -1681,
	-1308, -3445, -769, -3122, -4219,
	-4456, -4462, -4559, -3894, -4719,
	-4289, -3980, -4646, -2863, -4567,
	-4433, -1484, -4695, -4183, -4574,
	-4562, -3726, -2364, -2803, -4538,
	-4690, -4038, -4697, -4502, -2845,
	-4132, -4370, -4593, -4649, -2975,
	-4682, -4213, -2527, -4413, -4715,
	-4368, -4551, -4582, -3932, -4429,
	-4653, -4086, -3560, -4427, -4671,
	-3014, -930, -3895, -4705, -2385,
	-4229, -4710, -3809, -4453, -3597,
	-2783, -2243, -4627, -4353, -4658,
	-3212, -4646, -2426, -1957, -4672,
	-4096, -4334, -3470, -4582, -4796,
	-601, -3433, -4600, -4610, -4619,
	-3789, -4431, -4371, -3696, -4424,
	-1896, -3843, -4697, -4564, -1065,
	-3094, -4697, -4610, -4325, -2618,
	-4477, -4476, -4025, -4235, -4307,
	-4597, -4207, -4667, -4636, -4255,
	// rgWeightOutput+42*150
	-4018, -396, -4535, -4666, -1663,
	-3474, -4670, -2795, -3593, -3651,
	-4482, -1397, -3960, -4426, -3752,
	-4214, -2508, -1114, -4220, -4662,
	-4243, -1060, -3604, -1928, -4635,
	-2954, -4709, -3274, -3921, -2677,
	-2046, -4250, -2376, -4538, -3488,
	-3204, -4545, -1713, -4593, -4495,
	-4645, -2329, -4143, -3882, -1681,
	-1310, -3443, -768, -3122, -4222,
	-4457, -4461, -4558, -3899, -4722,
	-4288, -3978, -4648, -2863, -4568,
	-4433, -1485, -4698, -4183, -4576,
	-4564, -3730, -2367, -2804, -4538,
	-4691, -4035, -4694, -4504, -2842,
	-4130, -4373, -4594, -4648, -2975,
	-4682, -4216, -2527, -4415, -4716,
	-4371, -4550, -4582, -3932, -4431,
	-4653, -4085, -3564, -4424, -4669,
	-3012, -927, -3895, -4703, -2382,
	-4232, -4710, -3811, -4455, -3597,
	-2788, -2242, -4627, -4356, -4657,
	-3209, -4644, -2427, -1960, -4673,
	-4095, -4333, -3469, -4581, -4796,
	-599, -3431, -4600, -4606, -4616,
	-3790, -4431, -4372, -3695, -4429,
	-1899, -3843, -4699, -4559, -1066,
	-3099, -4701, -4610, -4324, -2615,
	-4479, -4475, -4027, -4233, -4307,
	-4595, -4206, -4665, -4635, -4256,
	// rgWeightOutput+43*150
	1387, -415, -648, -608, 107,
	1241, -621, 63, -236, -1083,
	349, 238, -388, -741, -103,
	-310, 2267, 784, -1068, -374,
	-601, 251, 1551, -390, 48,
	184, -47, 520, -1024, 3539,
	-907, 888, -128, -638, 2392,
	852, 772, 590, -598, -467,
	-763, 1483, 1005, -223, 499,
	-133, 926, 861, 309, 609,
	-565, -373, -416, -275, 28,
	155, -254, -793, -100, -944,
	-361, -2043, -398, -193, -1100,
	-750, 1458, 49, 673, -1147,
	-16, -2067, -87, -647, 1411,
	471, 550, 103, -200, -3278,
	-221, -863, -3223, -610, -564,
	-1770, -433, -8, 1498, -195,
	-965, 595, -1418, 1069, -632,
	1130, 932, -228, -452, 2791,
	1647, -230, 1528, -490, 784,
	585, -83, -120, -926, -335,
	1568, 87, -3478, -749, -467,
	-305, 482, 124, -190, -216,
	1950, 1350, -674, -492, -773,
	-410, -10, -565, 832, -91,
	-1527, -1005, -202, -530, 497,
	-245, -721, -717, -1041, -1107,
	156, 186, 578, 1366, 76,
	-591, -423, -276, -906, -168,
	// rgWeightOutput+44*150
	-4019, -399, -4539, -4669, -1661,
	-3475, -4673, -2797, -3593, -3648,
	-4482, -1397, -3959, -4426, -3749,
	-4217, -2506, -1119, -4221, -4659,
	-4245, -1059, -3603, -1926, -4638,
	-2953, -4710, -3273, -3921, -2677,
	-2047, -4252, -2375, -4538, -3489,
	-3205, -4543, -1715, -4593, -4495,
	-4644, -2330, -4142, -3881, -1682,
	-1309, -3442, -767, -3122, -4221,
	-4458, -4459, -4560, -3898, -4718,
	-4290, -3977, -4646, -2865, -4565,
	-4429, -1485, -4693, -4183, -4575,
	-4559, -3730, -2368, -2807, -4536,
	-4691, -4038, -4698, -4502, -2845,
	-4132, -4372, -4594, -4651, -2975,
	-4685, -4211, -2526, -4416, -4715,
	-4368, -4553, -4582, -3932, -4432,
	-4656, -4087, -3560, -4426, -4672,
	-3017, -930, -3894, -4701, -2384,
	-4229, -4711, -3809, -4452, -3595,
	-2785, -2241, -4624, -4357, -4656,
	-3210, -4644, -2423, -1961, -4674,
	-4097, -4332, -3465, -4581, -4795,
	-600, -3428, -4598, -4605, -4618,
	-3790, -4428, -4368, -3696, -4428,
	-1898, -3838, -4698, -4563, -1066,
	-3095, -4701, -4612, -4328, -2616,
	-4479, -4475, -4026, -4236, -4307,
	-4595, -4203, -4669, -4637, -4256,
	// rgWeightOutput+45*150
	-4020, -399, -4536, -4669, -1664,
	-3474, -4673, -2797, -3596, -3650,
	-4483, -1399, -3958, -4425, -3749,
	-4213, -2509, -1118, -4220, -4663,
	-4244, -1060, -3604, -1926, -4636,
	-2955, -4708, -3275, -3918, -2680,
	-2043, -4250, -2376, -4538, -3490,
	-3207, -4546, -1714, -4594, -4492,
	-4642, -2333, -4140, -3882, -1685,
	-1310, -3442, -769, -3119, -4222,
	-4459, -4461, -4560, -3895, -4723,
	-4289, -3981, -4650, -2863, -4565,
	-4432, -1486, -4694, -4184, -4577,
	-4562, -3726, -2364, -2807, -4540,
	-4689, -4035, -4694, -4502, -2842,
	-4133, -4369, -4591, -4649, -2973,
	-4682, -4212, -2525, -4417, -4715,
	-4372, -4549, -4580, -3931, -4430,
	-4655, -4087, -3563, -4424, -4670,
	-3016, -928, -3896, -4704, -2382,
	-4231, -4708, -3809, -4455, -3599,
	-2787, -2243, -4627, -4357, -4658,
	-3209, -4649, -2425, -1959, -4674,
	-4097, -4332, -3467, -4579, -4794,
	-598, -3431, -4601, -4609, -4616,
	-3793, -4430, -4370, -3694, -4428,
	-1898, -3843, -4700, -4563, -1065,
	-3097, -4700, -4614, -4325, -2618,
	-4477, -4472, -4027, -4236, -4309,
	-4597, -4206, -4669, -4638, -4255,
	// rgWeightOutput+46*150
	-4022, -400, -4539, -4670, -1666,
	-3474, -4671, -2798, -3594, -3650,
	-4483, -1394, -3958, -4424, -3751,
	-4213, -2507, -1114, -4220, -4662,
	-4245, -1059, -3605, -1928, -4637,
	-2954, -4708, -3272, -3919, -2677,
	-2043, -4251, -2376, -4537, -3488,
	-3205, -4547, -1713, -4595, -4496,
	-4645, -2334, -4140, -3882, -1686,
	-1309, -3445, -767, -3120, -4221,
	-4458, -4459, -4559, -3897, -4721,
	-4291, -3977, -4647, -2862, -4565,
	-4429, -1485, -4698, -4186, -4573,
	-4561, -3730, -2365, -2805, -4537,
	-4687, -4040, -4694, -4506, -2843,
	-4131, -4374, -4591, -4651, -2977,
	-4681, -4212, -2529, -4412, -4716,
	-4370, -4550, -4578, -3929, -4430,
	-4657, -4085, -3563, -4428, -4671,
	-3016, -929, -3897, -4704, -2385,
	-4232, -4713, -3809, -4452, -3599,
	-2785, -2240, -4626, -4358, -4656,
	-3211, -4647, -2426, -1960, -4673,
	-4096, -4331, -3468, -4583, -4794,
	-598, -3432, -4598, -4608, -4617,
	-3790, -4431, -4368, -3697, -4426,
	-1895, -3842, -4698, -4561, -1066,
	-3097, -4700, -4614, -4329, -2620,
	-4478, -4474, -4027, -4237, -4309,
	-4597, -4206, -4665, -4639, -4257,
	// rgWeightOutput+47*150
	-4019, -399, -4534, -4669, -1664,
	-3475, -4670, -2794, -3594, -3652,
	-4482, -1394, -3958, -4422, -3750,
	-4215, -2506, -1118, -4218, -4663,
	-4247, -1062, -3606, -1928, -4636,
	-2954, -4709, -3270, -3921, -2675,
	-2043, -4253, -2377, -4537, -3488,
	-3206, -4547, -1715, -4593, -4491,
	-4646, -2333, -4143, -3882, -1685,
	-1311, -3443, -770, -3119, -4220,
	-4457, -4462, -4561, -3895, -4723,
	-4290, -3976, -4647, -2862, -4569,
	-4431, -1483, -4695, -4185, -4573,
	-4563, -3726, -2365, -2805, -4537,
	-4691, -4038, -4698, -4503, -2844,
	-4131, -4369, -4592, -4650, -2975,
	-4685, -4215, -2527, -4414, -4714,
	-4368, -4551, -4578, -3931, -4430,
	-4654, -4088, -3561, -4428, -4669,
	-3013, -927, -3894, -4702, -2381,
	-4229, -4709, -3808, -4454, -3596,
	-2783, -2241, -4623, -4357, -4659,
	-3210, -4648, -2427, -1959, -4675,
	-4096, -4333, -3470, -4580, -4795,
	-601, -3430, -4598, -4606, -4620,
	-3789, -4431, -4368, -3694, -4427,
	-1899, -3840, -4697, -4563, -1068,
	-3095, -4701, -4611, -4328, -2616,
	-4477, -4473, -4025, -4236, -4307,
	-4599, -4205, -4667, -4637, -4252,
	// rgWeightOutput+48*150
	-4020, -397, -4536, -4669, -1665,
	-3476, -4672, -2799, -3595, -3652,
	-4481, -1395, -3958, -4422, -3749,
	-4214, -2510, -1116, -4218, -4663,
	-4247, -1060, -3607, -1926, -4636,
	-2956, -4708, -3274, -3922, -2678,
	-2047, -4250, -2375, -4537, -3489,
	-3207, -4547, -1711, -4595, -4492,
	-4641, -2330, -4141, -3880, -1682,
	-1310, -3444, -766, -3119, -4224,
	-4457, -4462, -4561, -3899, -4722,
	-4292, -3977, -4646, -2865, -4565,
	-4429, -1483, -4698, -4183, -4573,
	-4561, -3727, -2367, -2806, -4540,
	-4689, -4039, -4696, -4504, -2843,
	-4134, -4370, -4593, -4648, -2974,
	-4684, -4215, -2525, -4416, -4712,
	-4370, -4549, -4577, -3932, -4433,
	-4654, -4084, -3561, -4428, -4670,
	-3014, -929, -3894, -4701, -2381,
	-4233, -4708, -3813, -4454, -3596,
	-2787, -2243, -4623, -4353, -4658,
	-3213, -4646, -2425, -1960, -4674,
	-4097, -4333, -3468, -4582, -4794,
	-600, -3433, -4602, -4610, -4619,
	-3791, -4433, -4368, -3698, -4426,
	-1895, -3840, -4698, -4563, -1065,
	-3099, -4697, -4611, -4325, -2615,
	-4480, -4473, -4026, -4234, -4310,
	-4596, -4205, -4665, -4635, -4253,
	// rgWeightOutput+49*150
	-4020, -398, -4535, -4670, -1664,
	-3472, -4669, -2798, -3595, -3651,
	-4486, -1394, -3960, -4425, -3749,
	-4214, -2511, -1115, -4217, -4663,
	-4246, -1061, -3605, -1927, -4637,
	-2958, -4709, -3270, -3919, -2677,
	-2044, -4253, -2379, -4536, -3487,
	-3204, -4546, -1714, -4597, -4494,
	-4645, -2331, -4140, -3879, -1683,
	-1309, -3446, -769, -3120, -4223,
	-4460, -4463, -4559, -3896, -4718,
	-4290, -3979, -4646, -2862, -4568,
	-4430, -1485, -4697, -4185, -4575,
	-4561, -3727, -2364, -2805, -4537,
	-4688, -4039, -4695, -4502, -2842,
	-4134, -4371, -4590, -4650, -2972,
	-4685, -4215, -2526, -4416, -4716,
	-4368, -4549, -4580, -3930, -4431,
	-4656, -4088, -3564, -4424, -4671,
	-3014, -931, -3897, -4702, -2382,
	-4231, -4709, -3811, -4455, -3598,
	-2784, -2241, -4625, -4355, -4657,
	-3213, -4645, -2426, -1961, -4674,
	-4096, -4330, -3468, -4582, -4795,
	-599, -3434, -4602, -4607, -4615,
	-3793, -4432, -4369, -3694, -4428,
	-1895, -3843, -4700, -4563, -1070,
	-3095, -4700, -4610, -4326, -2617,
	-4479, -4473, -4027, -4235, -4306,
	-4595, -4206, -4666, -4636, -4255,
	// rgWeightOutput+50*150
	-4021, -398, -4537, -4670, -1666,
	-3472, -4671, -2796, -3594, -3649,
	-4486, -1395, -3960, -4426, -3751,
	-4215, -2509, -1115, -4219, -4663,
	-4246, -1062, -3604, -1927, -4637,
	-2955, -4707, -3275, -3918, -2678,
	-2045, -4253, -2378, -4539, -3491,
	-3208, -4545, -1712, -4592, -4494,
	-4644, -2332, -4142, -3879, -1682,
	-1311, -3446, -767, -3124, -4220,
	-4457, -4463, -4562, -3895, -4720,
	-4289, -3979, -4649, -2862, -4566,
	-4431, -1487, -4695, -4186, -4573,
	-4561, -3726, -2364, -2804, -4541,
	-4687, -4038, -4696, -4503, -2844,
	-4131, -4373, -4590, -4648, -2975,
	-4682, -4211, -2525, -4413, -4717,
	-4372, -4549, -4582, -3932, -4430,
	-4653, -4085, -3560, -4426, -4672,
	-3014, -931, -3892, -4702, -2384,
	-4234, -4711, -3812, -4453, -3596,
	-2784, -2239, -4623, -4358, -4658,
	-3210, -4648, -2424, -1962, -4676,
	-4094, -4333, -3467, -4581, -4795,
	-602, -3431, -4598, -4608, -4618,
	-3794, -4433, -4368, -3694, -4426,
	-1899, -3842, -4700, -4561, -1066,
	-3099, -4697, -4611, -4327, -2616,
	-4477, -4476, -4026, -4235, -4310,
	-4595, -4205, -4669, -4639, -4257,
	// rgWeightOutput+51*150
	-4022, -399, -4539, -4667, -1664,
	-3476, -4673, -2795, -3592, -3652,
	-4485, -1398, -3957, -4426, -3750,
	-4213, -2511, -1115, -4218, -4659,
	-4247, -1059, -3604, -1928, -4637,
	-2953, -4709, -3273, -3918, -2677,
	-2046, -4252, -2378, -4535, -3487,
	-3204, -4545, -1711, -4596, -4491,
	-4645, -2332, -4141, -3883, -1685,
	-1311, -3444, -766, -3123, -4223,
	-4457, -4458, -4560, -3899, -4722,
	-4289, -3977, -4647, -2863, -4566,
	-4433, -1487, -4694, -4183, -4575,
	-4563, -3729, -2364, -2806, -4541,
	-4689, -4039, -4696, -4502, -2846,
	-4133, -4373, -4593, -4648, -2976,
	-4683, -4213, -2528, -4416, -4714,
	-4372, -4553, -4580, -3933, -4430,
	-4654, -4085, -3563, -4427, -4670,
	-3015, -930, -3894, -4702, -2383,
	-4231, -4709, -3810, -4453, -3598,
	-2786, -2241, -4625, -4354, -4660,
	-3213, -4648, -2423, -1962, -4674,
	-4098, -4331, -3467, -4579, -4795,
	-597, -3431, -4597, -4607, -4620,
	-3790, -4429, -4368, -3697, -4426,
	-1894, -3839, -4699, -4561, -1069,
	-3097, -4702, -4612, -4328, -2616,
	-4479, -4473, -4029, -4233, -4305,
	-4596, -4205, -4669, -4635, -4257,
	// rgWeightOutput+52*150
	-4018, -397, -4536, -4669, -1665,
	-3474, -4670, -2794, -3592, -3650,
	-4485, -1398, -3959, -4426, -3750,
	-4215, -2509, -1117, -4220, -4662,
	-4247, -1062, -3605, -1925, -4636,
	-2954, -4708, -3270, -3918, -2677,
	-2042, -4254, -2379, -4534, -3490,
	-3207, -4544, -1713, -4593, -4491,
	-4641, -2334, -4142, -3883, -1683,
	-1308, -3447, -766, -3122, -4223,
	-4458, -4458, -4561, -3896, -4720,
	-4290, -3976, -4647, -2863, -4564,
	-4429, -1485, -4693, -4184, -4575,
	-4560, -3730, -2363, -2805, -4536,
	-4690, -4035, -4696, -4504, -2844,
	-4133, -4371, -4592, -4651, -2975,
	-4685, -4213, -2525, -4413, -4714,
	-4367, -4550, -4580, -3928, -4433,
	-4653, -4085, -3564, -4427, -4670,
	-3015, -928, -3892, -4702, -2383,
	-4231, -4710, -3811, -4452, -3595,
	-2785, -2239, -4625, -4356, -4659,
	-3208, -4648, -2423, -1960, -4676,
	-4097, -4330, -3467, -4582, -4797,
	-600, -3433, -4601, -4610, -4619,
	-3790, -4431, -4369, -3697, -4427,
	-1896, -3841, -4699, -4563, -1069,
	-3098, -4700, -4613, -4326, -2618,
	-4477, -4477, -4025, -4236, -4309,
	-4595, -4207, -4668, -4636, -4256,
	// rgWeightOutput+53*150
	-4021, -399, -4539, -4667, -1661,
	-3471, -4674, -2795, -3594, -3651,
	-4483, -1397, -3958, -4423, -3751,
	-4214, -2507, -1114, -4217, -4663,
	-4245, -1062, -3603, -1928, -4637,
	-2956, -4709, -3271, -3918, -2679,
	-2046, -4251, -2376, -4537, -3490,
	-3202, -4546, -1712, -4592, -4492,
	-4645, -2329, -4143, -3881, -1685,
	-1309, -3446, -770, -3122, -4221,
	-4460, -4461, -4559, -3898, -4719,
	-4288, -3977, -4647, -2862, -4567,
	-4433, -1482, -4695, -4184, -4576,
	-4559, -3728, -2367, -2807, -4537,
	-4690, -4039, -4695, -4504, -2842,
	-4132, -4371, -4591, -4649, -2976,
	-4680, -4212, -2525, -4415, -4714,
	-4370, -4553, -4581, -3930, -4431,
	-4655, -4086, -3560, -4428, -4672,
	-3015, -927, -3896, -4703, -2383,
	-4232, -4712, -3812, -4451, -3595,
	-2783, -2242, -4625, -4357, -4655,
	-3211, -4644, -2424, -1957, -4675,
	-4096, -4334, -3469, -4582, -4797,
	-601, -3432, -4601, -4605, -4618,
	-3792, -4432, -4370, -3696, -4427,
	-1898, -3842, -4700, -4563, -1067,
	-3098, -4696, -4610, -4324, -2616,
	-4475, -4474, -4027, -4233, -4306,
	-4595, -4204, -4665, -4639, -4254,
	// rgWeightOutput+54*150
	-4022, -396, -4535, -4670, -1666,
	-3474, -4672, -2797, -3594, -3651,
	-4483, -1396, -3957, -4423, -3750,
	-4214, -2507, -1117, -4219, -4663,
	-4244, -1060, -3603, -1926, -4636,
	-2955, -4709, -3274, -3919, -2679,
	-2045, -4253, -2378, -4535, -3490,
	-3207, -4546, -1712, -4595, -4494,
	-4641, -2331, -4142, -3879, -1682,
	-1307, -3445, -766, -3123, -4221,
	-4458, -4461, -4558, -3899, -4719,
	-4289, -3980, -4645, -2862, -4568,
	-4430, -1484, -4698, -4187, -4574,
	-4562, -3727, -2367, -2806, -4538,
	-4687, -4038, -4698, -4504, -2845,
	-4134, -4370, -4594, -4650, -2973,
	-4682, -4212, -2528, -4412, -4717,
	-4371, -4549, -4577, -3928, -4431,
	-4652, -4085, -3562, -4424, -4674,
	-3012, -931, -3894, -4701, -2386,
	-4234, -4709, -3812, -4452, -3594,
	-2787, -2242, -4623, -4357, -4658,
	-3211, -4648, -2425, -1959, -4673,
	-4096, -4331, -3468, -4583, -4795,
	-600, -3432, -4597, -4606, -4620,
	-3792, -4428, -4372, -3698, -4425,
	-1897, -3842, -4700, -4564, -1069,
	-3099, -4698, -4613, -4325, -2617,
	-4480, -4473, -4026, -4233, -4307,
	-4599, -4204, -4666, -4637, -4253,
	// rgWeightOutput+55*150
	-4020, -396, -4537, -4670, -1663,
	-3475, -4670, -2796, -3593, -3649,
	-4484, -1395, -3960, -4423, -3751,
	-4212, -2511, -1116, -4218, -4659,
	-4245, -1062, -3608, -1928, -4635,
	-2957, -4709, -3274, -3917, -2676,
	-2046, -4254, -2376, -4539, -3491,
	-3204, -4543, -1713, -4596, -4491,
	-4643, -2330, -4142, -3883, -1683,
	-1310, -3446, -768, -3119, -4222,
	-4459, -4460, -4558, -3898, -4719,
	-4292, -3981, -4647, -2861, -4569,
	-4431, -1483, -4697, -4186, -4575,
	-4559, -3726, -2368, -2805, -4539,
	-4689, -4037, -4697, -4503, -2845,
	-4131, -4371, -4594, -4650, -2973,
	-4684, -4213, -2529, -4415, -4716,
	-4372, -4553, -4582, -3930, -4432,
	-4655, -4085, -3561, -4427, -4669,
	-3013, -931, -3893, -4704, -2381,
	-4230, -4711, -3813, -4452, -3598,
	-2785, -2241, -4625, -4358, -4657,
	-3208, -4647, -2428, -1960, -4672,
	-4094, -4333, -3466, -4581, -4795,
	-598, -3430, -4600, -4610, -4616,
	-3793, -4430, -4371, -3698, -4427,
	-1899, -3842, -4700, -4562, -1066,
	-3099, -4698, -4610, -4327, -2616,
	-4480, -4474, -4027, -4237, -4308,
	-4597, -4206, -4665, -4638, -4253,
	// rgWeightOutput+56*150
	-4020, -397, -4540, -4670, -1666,
	-3472, -4673, -2799, -3596, -3653,
	-4484, -1396, -3956, -4424, -3750,
	-4213, -2511, -1116, -4221, -4661,
	-4246, -1058, -3607, -1929, -4636,
	-2957, -4710, -3275, -3920, -2677,
	-2047, -4252, -2375, -4536, -3486,
	-3203, -4544, -1711, -4594, -4492,
	-4643, -2330, -4138, -3883, -1683,
	-1309, -3443, -768, -3119, -4222,
	-4458, -4462, -4562, -3897, -4718,
	-4289, -3976, -4645, -2863, -4566,
	-4433, -1486, -4695, -4184, -4576,
	-4560, -3727, -2365, -2803, -4540,
	-4687, -4035, -4695, -4505, -2846,
	-4132, -4374, -4594, -4651, -2973,
	-4683, -4215, -2526, -4413, -4715,
	-4372, -4551, -4578, -3928, -4430,
	-4654, -4088, -3562, -4426, -4670,
	-3017, -929, -3895, -4704, -2382,
	-4234, -4710, -3809, -4454, -3595,
	-2786, -2242, -4626, -4355, -4659,
	-3210, -4645, -2427, -1958, -4672,
	-4096, -4332, -3468, -4580, -4797,
	-598, -3433, -4600, -4606, -4619,
	-3793, -4433, -4372, -3694, -4425,
	-1896, -3843, -4697, -4561, -1067,
	-3096, -4699, -4611, -4329, -2616,
	-4480, -4477, -4028, -4236, -4306,
	-4597, -4208, -4669, -4635, -4255,
	// rgWeightOutput+57*150
	-4021, -397, -4536, -4669, -1662,
	-3473, -4670, -2798, -3595, -3650,
	-4482, -1393, -3957, -4421, -3751,
	-4212, -2510, -1117, -4220, -4659,
	-4243, -1060, -3602, -1928, -4637,
	-2955, -4710, -3274, -3920, -2677,
	-2045, -4254, -2377, -4536, -3489,
	-3204, -4543, -1710, -4593, -4495,
	-4645, -2331, -4143, -3882, -1682,
	-1308, -3445, -769, -3118, -4222,
	-4458, -4460, -4560, -3898, -4722,
	-4287, -3975, -4646, -2865, -4568,
	-4432, -1486, -4695, -4183, -4576,
	-4561, -3729, -2367, -2804, -4539,
	-4689, -4037, -4697, -4503, -2845,
	-4129, -4373, -4593, -4647, -2972,
	-4682, -4211, -2525, -4412, -4714,
	-4370, -4551, -4578, -3929, -4432,
	-4655, -4087, -3562, -4423, -4668,
	-3016, -930, -3893, -4701, -2383,
	-4233, -4712, -3813, -4451, -3597,
	-2787, -2240, -4624, -4356, -4655,
	-3208, -4647, -2426, -1961, -4674,
	-4097, -4333, -3468, -4579, -4794,
	-601, -3430, -4599, -4605, -4615,
	-3793, -4431, -4369, -3695, -4426,
	-1898, -3840, -4698, -4564, -1067,
	-3095, -4698, -4611, -4326, -2618,
	-4477, -4472, -4024, -4236, -4308,
	-4598, -4203, -4667, -4637, -4254,
	// rgWeightOutput+58*150
	-4020, -397, -4537, -4666, -1663,
	-3475, -4670, -2798, -3595, -3650,
	-4485, -1398, -3957, -4425, -3750,
	-4214, -2508, -1116, -4218, -4662,
	-4247, -1062, -3606, -1928, -4634,
	-2955, -4707, -3273, -3920, -2677,
	-2045, -4253, -2378, -4538, -3490,
	-3206, -4547, -1711, -4593, -4495,
	-4644, -2330, -4139, -3879, -1682,
	-1309, -3442, -767, -3122, -4223,
	-4459, -4462, -4557, -3897, -4718,
	-4290, -3977, -4649, -2862, -4568,
	-4432, -1482, -4695, -4183, -4573,
	-4560, -3729, -2367, -2806, -4540,
	-4691, -4035, -4693, -4506, -2844,
	-4133, -4372, -4591, -4651, -2972,
	-4681, -4212, -2526, -4415, -4715,
	-4371, -4549, -4578, -3932, -4430,
	-4652, -4086, -3563, -4423, -4671,
	-3016, -931, -3893, -4704, -2382,
	-4233, -4710, -3810, -4450, -3597,
	-2785, -2243, -4626, -4353, -4660,
	-3208, -4647, -2427, -1959, -4675,
	-4093, -4330, -3466, -4582, -4795,
	-599, -3431, -4597, -4608, -4616,
	-3790, -4432, -4372, -3693, -4425,
	-1898, -3842, -4698, -4560, -1065,
	-3096, -4698, -4613, -4326, -2615,
	-4478, -4477, -4024, -4237, -4308,
	-4595, -4206, -4669, -4638, -4254,
	// rgWeightOutput+59*150
	553, -875, -312, 0, 2056,
	37, -452, -313, -1482, -1235,
	-289, 46, 337, -663, -343,
	-566, 655, -50, -1073, -167,
	143, 1416, 684, 1928, -589,
	-1010, -192, 1327, 526, 323,
	-833, -533, 62, -274, -104,
	1000, 395, 441, -197, -222,
	-633, 1176, 851, -5, 2913,
	-1179, 788, 1533, 125, 999,
	-539, -14, -746, 720, -103,
	-259, 248, -453, 1561, -737,
	468, -661, -521, -339, -822,
	-462, 342, 73, 537, -1384,
	-62, 1980, -96, 26, 2357,
	-192, 522, 98, -293, 1809,
	-211, -695, 1005, -1164, -642,
	-1616, -180, -494, -126, -343,
	-184, 515, -1151, 0, -632,
	3037, 1531, -270, -484, 72,
	2262, -618, 1927, -684, 1041,
	1044, 755, -177, -2803, -138,
	1031, -248, -1050, -2281, -400,
	50, 191, 404, -83, -536,
	1657, 556, -706, -693, -120,
	-418, -332, -230, 196, -691,
	-2408, 167, -254, -427, 1113,
	-708, -650, -941, -833, -912,
	32, -586, 1036, 859, -206,
	-736, 1080, -281, -167, -659,
	// rgWeightOutput+60*150
	-4019, -398, -4535, -4670, -1662,
	-3474, -4672, -2799, -3594, -3649,
	-4481, -1395, -3955, -4424, -3749,
	-4217, -2507, -1116, -4218, -4659,
	-4246, -1058, -3603, -1928, -4638,
	-2954, -4707, -3272, -3922, -2680,
	-2046, -4249, -2375, -4538, -3487,
	-3204, -4546, -1712, -4596, -4491,
	-4643, -2329, -4138, -3882, -1684,
	-1309, -3444, -766, -3121, -4222,
	-4457, -4462, -4560, -3896, -4719,
	-4290, -3978, -4648, -2862, -4567,
	-4432, -1486, -4696, -4186, -4577,
	-4561, -3729, -2363, -2806, -4540,
	-4688, -4036, -4696, -4505, -2846,
	-4130, -4372, -4591, -4648, -2973,
	-4684, -4213, -2526, -4414, -4713,
	-4370, -4552, -4580, -3932, -4431,
	-4655, -4088, -3564, -4426, -4669,
	-3015, -928, -3892, -4701, -2385,
	-4233, -4711, -3813, -4455, -3595,
	-2784, -2244, -4627, -4357, -4656,
	-3211, -4647, -2424, -1961, -4675,
	-4096, -4332, -3469, -4579, -4797,
	-598, -3429, -4602, -4609, -4619,
	-3791, -4432, -4371, -3698, -4425,
	-1895, -3843, -4699, -4563, -1066,
	-3094, -4700, -4612, -4325, -2615,
	-4475, -4477, -4028, -4236, -4305,
	-4599, -4203, -4669, -4639, -4256,
	// rgWeightOutput+61*150
	-4021, -399, -4537, -4670, -1663,
	-3474, -4669, -2794, -3594, -3652,
	-4483, -1395, -3959, -4425, -3749,
	-4216, -2510, -1114, -4217, -4663,
	-4248, -1059, -3603, -1927, -4634,
	-2957, -4708, -3274, -3917, -2679,
	-2043, -4254, -2378, -4538, -3487,
	-3205, -4544, -1712, -4595, -4494,
	-4643, -2332, -4143, -3881, -1683,
	-1309, -3445, -768, -3120, -4224,
	-4459, -4459, -4560, -3895, -4719,
	-4291, -3976, -4645, -2865, -4567,
	-4432, -1485, -4695, -4184, -4577,
	-4564, -3727, -2365, -2806, -4537,
	-4688, -4038, -4695, -4506, -2844,
	-4134, -4372, -4590, -4650, -2971,
	-4683, -4213, -2527, -4415, -4717,
	-4369, -4548, -4581, -3933, -4431,
	-4655, -4088, -3560, -4424, -4668,
	-3016, -930, -3894, -4704, -2383,
	-4229, -4711, -3811, -4454, -3597,
	-2785, -2242, -4625, -4355, -4657,
	-3212, -4644, -2427, -1958, -4676,
	-4097, -4331, -3467, -4582, -4795,
	-600, -3431, -4599, -4607, -4616,
	-3789, -4428, -4371, -3695, -4428,
	-1895, -3841, -4698, -4561, -1068,
	-3098, -4700, -4614, -4324, -2615,
	-4477, -4474, -4026, -4234, -4306,
	-4594, -4205, -4669, -4634, -4257,
	// rgWeightOutput+62*150
	-4021, -397, -4535, -4665, -1664,
	-3472, -4672, -2799, -3594, -3652,
	-4481, -1398, -3958, -4423, -3749,
	-4217, -2511, -1114, -4217, -4662,
	-4243, -1058, -3606, -1928, -4637,
	-2955, -4708, -3274, -3918, -2680,
	-2047, -4252, -2378, -4536, -3486,
	-3203, -4544, -1713, -4594, -4494,
	-4641, -2329, -4142, -3882, -1686,
	-1309, -3445, -766, -3122, -4222,
	-4459, -4462, -4562, -3896, -4719,
	-4288, -3979, -4648, -2865, -4565,
	-4432, -1483, -4694, -4186, -4576,
	-4559, -3728, -2366, -2806, -4540,
	-4687, -4035, -4697, -4503, -2846,
	-4134, -4371, -4592, -4652, -2975,
	-4681, -4214, -2525, -4415, -4712,
	-4368, -4550, -4580, -3930, -4432,
	-4654, -4087, -3561, -4425, -4669,
	-3012, -929, -3895, -4703, -2381,
	-4233, -4709, -3812, -4450, -3595,
	-2783, -2241, -4625, -4357, -4658,
	-3208, -4645, -2424, -1960, -4673,
	-4093, -4332, -3468, -4580, -4797,
	-599, -3432, -4600, -4609, -4618,
	-3794, -4430, -4370, -3695, -4428,
	-1895, -3842, -4696, -4562, -1066,
	-3097, -4697, -4613, -4325, -2619,
	-4478, -4474, -4028, -4233, -4309,
	-4597, -4207, -4668, -4635, -4255,
	// rgWeightOutput+63*150
	-4018, -397, -4536, -4668, -1666,
	-3473, -4673, -2798, -3594, -3648,
	-4483, -1397, -3958, -4422, -3750,
	-4214, -2509, -1115, -4220, -4663,
	-4244, -1062, -3604, -1927, -4636,
	-2956, -4708, -3273, -3922, -2676,
	-2045, -4251, -2377, -4536, -3488,
	-3203, -4544, -1713, -4596, -4491,
	-4644, -2333, -4140, -3882, -1681,
	-1310, -3446, -770, -3119, -4224,
	-4460, -4459, -4559, -3895, -4720,
	-4291, -3979, -4649, -2861, -4564,
	-4432, -1486, -4694, -4185, -4573,
	-4561, -3730, -2368, -2806, -4536,
	-4691, -4039, -4695, -4502, -2843,
	-4130, -4374, -4592, -4651, -2975,
	-4682, -4215, -2526, -4417, -4715,
	-4367, -4551, -4579, -3931, -4431,
	-4654, -4087, -3562, -4426, -4673,
	-3015, -928, -3894, -4703, -2382,
	-4232, -4709, -3810, -4454, -3599,
	-2785, -2243, -4623, -4358, -4659,
	-3210, -4645, -2426, -1957, -4674,
	-4094, -4334, -3467, -4583, -4794,
	-599, -3430, -4599, -4607, -4617,
	-3794, -4429, -4368, -3695, -4425,
	-1899, -3842, -4698, -4563, -1067,
	-3096, -4699, -4611, -4325, -2619,
	-4476, -4477, -4029, -4237, -4309,
	-4598, -4205, -4668, -4635, -4253,
	// rgWeightOutput+64*150
	-73, -1925, -450, -268, -829,
	-379, -290, 80, 743, -1126,
	-101, -1606, -79, -508, -180,
	-803, 206, 563, -1230, -393,
	316, -2615, 758, 350, -164,
	-994, -475, 447, 825, 114,
	1805, 889, 2154, -559, -1189,
	2007, -128, -2933, -153, -248,
	-928, 240, 1007, 84, -404,
	3, 1452, -100, -1545, -1831,
	-374, -198, -199, 847, -198,
	1472, 328, -472, 1557, -55,
	-6, -649, -263, -700, -747,
	-599, 1014, -1249, 1162, 684,
	-63, 1094, -469, -317, -1250,
	606, -49, 13, -222, -1997,
	-412, -1182, 1162, -521, -285,
	-281, -1078, -115, 1827, -277,
	-656, -685, -463, 184, -606,
	2046, 137, 187, -425, -554,
	845, -240, -860, -161, 172,
	-256, 252, -465, 1361, -389,
	-171, -123, 638, 968, -347,
	447, 257, -627, -285, 154,
	-478, -1398, 37, -481, -598,
	466, 58, 1311, 1269, -764,
	-793, -238, -287, -303, -1624,
	2346, -628, -825, -700, -215,
	366, 870, 337, 1431, -744,
	-424, 634, -260, -559, -215,
	// rgWeightOutput+65*150
	-672, -235, -180, -481, 604,
	1458, -328, -228, 2145, 1083,
	-425, -1290, -116, 19, -6,
	-269, 2151, -954, 238, 102,
	-400, 228, 621, -676, -10,
	604, -93, 398, -335, 1336,
	-533, -647, -499, 37, 47,
	-1257, 13, 102, -272, -296,
	667, 87, 721, -304, -1288,
	-1040, -503, 216, 702, 428,
	68, -318, -126, 42, -113,
	1191, -938, -306, 3219, 11,
	-623, -192, -229, 141, -474,
	-386, 70, 48, 1706, 596,
	-186, 112, 190, -535, 994,
	660, -989, 15, -17, 603,
	-161, 69, -1357, 890, -94,
	-653, 793, 448, 554, 99,
	-340, 835, -260, -246, -233,
	-1157, -479, -299, 91, 700,
	-238, -382, -621, -231, -707,
	-1553, -1779, -158, -293, -173,
	-198, -33, 891, -2831, -68,
	-15, -2197, -332, -272, -178,
	-581, 2120, -27, -388, -245,
	-109, 55, -629, 821, 515,
	-2735, 554, -83, 69, -553,
	-2611, -340, 136, 24, -29,
	-318, 346, 874, -1146, -1052,
	-288, -526, 134, -484, 134,
	// rgWeightOutput+66*150
	745, -485, -464, -93, -356,
	1458, -512, -751, 819, -3062,
	1609, 386, -189, -436, -374,
	477, 1368, 1132, -1800, -21,
	1195, -1737, 1367, 804, 191,
	-1614, 310, -198, -2773, 25,
	198, -302, -899, -641, 1977,
	127, 810, -407, -230, -190,
	-730, 1867, 459, -420, 285,
	106, 945, 1132, -1342, -318,
	-270, -32, -211, 745, 2,
	-1759, 727, -444, -366, -997,
	-155, 646, 185, -280, -593,
	-273, 523, -980, -1249, -377,
	425, -2482, -24, -853, -784,
	206, 865, 370, 81, -169,
	-196, -908, 346, -1281, -353,
	-794, -318, 71, 552, -121,
	-540, 177, -948, 1467, -50,
	2897, 1286, -423, -433, -1262,
	1405, 554, 1790, 1165, 1325,
	480, 183, 177, -39, -147,
	2465, -224, -1346, -1110, 290,
	-335, 1177, 793, 221, 407,
	768, -603, -395, -302, -781,
	-313, -104, -162, 1349, -754,
	-400, 1807, -276, -52, -558,
	1051, -732, -1345, -519, -4177,
	-2832, 620, -466, 1651, 391,
	-606, 1401, 491, -128, -202,
	// rgWeightOutput+67*150
	248, -814, -340, -296, 3089,
	1050, -128, 335, 291, 902,
	306, 438, 704, 36, -897,
	-595, 3733, -868, 115, -25,
	61, 261, 814, -811, -1406,
	756, -788, 613, 402, 233,
	-890, 1302, 250, -16, -1672,
	905, -493, -246, -108, -141,
	-385, -652, 123, -165, -1031,
	-308, -931, -109, 1053, 463,
	-185, -281, 283, 417, -388,
	533, -321, -195, -419, -107,
	6, 663, -201, 53, -109,
	-152, -3418, -114, 3700, 653,
	-89, -1086, -251, -5, -2102,
	449, -1673, 248, -149, -492,
	-495, -557, -604, 9, -191,
	-315, -1435, -703, 3507, -258,
	-681, -872, -643, -722, -675,
	1173, -815, -407, -422, -1204,
	1149, -685, -382, -87, 1,
	-1462, -1223, 154, 1840, -69,
	515, -417, -685, 704, -403,
	-251, 635, -1480, -350, -283,
	-361, -441, 341, -438, -290,
	1094, -25, 214, 3256, 145,
	1143, -2040, -262, -24, 250,
	2038, -198, 87, -1416, -64,
	787, 507, 1066, -650, -373,
	35, 1274, -375, -755, -54,
	// rgWeightOutput+68*150
	601, -1731, 290, 24, -2101,
	557, -127, 1622, -493, -1021,
	-1, -431, 249, -749, -500,
	-325, 763, 590, -368, -439,
	563, 761, 1692, -872, -707,
	-2341, -329, 1281, 152, -884,
	170, 1586, 493, -608, 1409,
	-298, -381, 695, -112, -323,
	-971, -695, -240, 393, 657,
	-861, 313, -1207, -67, -2508,
	-231, 248, -612, 1016, -150,
	-327, 733, -220, 711, -893,
	312, 1494, -498, -451, -434,
	-777, 1826, 497, 1063, 618,
	-388, 506, -489, 100, 731,
	-966, 788, 4, -390, 731,
	-284, -511, -466, -1049, -780,
	-169, -646, -728, 139, 552,
	-8, -880, 220, 253, -468,
	872, 348, 463, -634, -1477,
	415, -361, -566, 278, -301,
	1625, 1787, -528, -1821, -253,
	710, -303, 626, 924, -621,
	-49, 670, 1436, 148, -437,
	595, 275, -512, -415, -226,
	583, -374, -71, 1133, -920,
	1401, 2137, -591, -928, 491,
	1918, -246, -976, -73, -1668,
	-54, -516, -1103, -791, 130,
	-550, 623, -468, -76, 129,
	// rgWeightOutput+69*150
	-1179, -2432, 671, -362, -775,
	-96, -343, 602, -382, -365,
	-484, 950, 1212, -90, 455,
	17, 1374, -352, -72, 73,
	-194, -252, -179, -1002, 40,
	-151, 160, -237, -5318, -633,
	-3, 669, -2500, -430, -135,
	486, -232, -635, -785, 203,
	-184, 943, 714, 346, -967,
	167, -63, 4, 289, 1656,
	-215, -195, -303, -134, -412,
	-1209, -537, 156, -943, -32,
	-586, -890, -60, -115, 508,
	-453, 1137, 1, -2629, -130,
	-324, 1807, -645, 91, 66,
	-438, -1729, -437, -209, 1467,
	-155, 399, 2245, -269, -414,
	613, 1199, -1018, -946, -2273,
	-742, -299, -614, -1513, 22,
	-17, -249, -361, -388, 100,
	2127, -836, 3961, -477, 1686,
	-1116, 2501, 634, -1059, -234,
	738, -187, -595, 460, 343,
	-739, 374, -325, -457, -34,
	-241, 3065, -382, -90, 328,
	150, -325, -288, 2812, -83,
	20, 2421, 32, -171, -489,
	-431, -133, -684, -266, 985,
	464, 453, -953, -524, -1331,
	-301, -82, 54, 496, 214,
	// rgWeightOutput+70*150
	1475, -1305, 94, -171, -1,
	-2077, -322, -25, 1303, -236,
	1088, -1011, -424, -472, -618,
	-372, 1135, -984, -256, 178,
	1346, -929, 1701, 298, 367,
	-92, -163, 452, -1124, 1265,
	-383, 131, 157, -335, -280,
	-202, 49, -60, -364, -550,
	-190, -860, 2648, -493, -960,
	-1967, -330, -642, -1330, 3752,
	-183, -356, -570, 322, -321,
	376, -1337, 280, -1252, -549,
	-372, -580, -316, -631, 474,
	21, -123, 783, -810, -476,
	184, -627, -363, -228, -44,
	-1368, 684, -24, -304, -641,
	-476, -140, -445, 97, -586,
	925, -139, -461, -411, -1718,
	-273, 679, 324, -907, 67,
	1350, 173, 475, -395, 151,
	1438, -217, -81, -148, -1098,
	-585, -1558, -1236, 1009, -182,
	-362, -264, 492, -1497, 449,
	774, -2981, 164, -354, -197,
	-1219, 99, -264, -212, 235,
	-263, -765, -45, -582, -165,
	2126, 2753, -205, -268, -1460,
	-938, -341, 185, -49, -1132,
	3433, 1812, 799, -1601, -40,
	-310, -174, 219, 64, 519,
	// rgWeightOutput+71*150
	-2583, 275, 59, -291, 120,
	-148, -83, 642, -117, 549,
	-861, -1240, 56, -408, 109,
	-626, -1708, -608, 38, -231,
	-1083, 967, 2745, 2440, 514,
	-1068, -381, -963, 712, 560,
	-826, -662, -1166, -331, -1448,
	752, -1095, -2546, -451, -361,
	-412, 1383, 883, -55, 1357,
	-1802, -229, -245, 516, -363,
	-302, 17, -608, 1157, 17,
	863, -855, -216, 4013, 38,
	133, -1470, -647, -192, -573,
	-649, -1691, 260, 1571, -239,
	-533, 691, -474, 316, 1181,
	616, 1268, -3136, -523, -1609,
	-461, -99, -1933, -1289, -372,
	-178, -1099, -375, -143, 593,
	-111, 635, -269, 716, -399,
	2484, 468, -722, 128, 1522,
	182, -576, 3339, -397, 1087,
	-412, 736, -989, -730, -128,
	-213, -351, 194, -1145, -924,
	792, 825, -464, -301, -207,
	-1118, 846, -685, -602, -342,
	-97, -242, -34, 1581, -395,
	-1065, 1004, 63, -94, 616,
	354, -99, -113, -803, 1146,
	1486, -920, -995, 572, -2088,
	-455, 3065, -626, -222, 632,
	// rgWeightOutput+72*150
	-4019, -400, -4538, -4668, -1665,
	-3476, -4672, -2798, -3596, -3650,
	-4482, -1397, -3958, -4422, -3749,
	-4215, -2509, -1115, -4220, -4661,
	-4248, -1062, -3607, -1925, -4636,
	-2955, -4709, -3272, -3919, -2681,
	-2045, -4251, -2376, -4535, -3487,
	-3208, -4546, -1714, -4596, -4492,
	-4645, -2334, -4139, -3879, -1682,
	-1312, -3446, -768, -3124, -4222,
	-4461, -4460, -4561, -3899, -4723,
	-4288, -3979, -4649, -2866, -4567,
	-4434, -1483, -4694, -4184, -4577,
	-4561, -3730, -2364, -2804, -4537,
	-4688, -4035, -4695, -4502, -2843,
	-4132, -4372, -4593, -4649, -2975,
	-4684, -4212, -2526, -4412, -4716,
	-4372, -4553, -4582, -3929, -4429,
	-4655, -4088, -3561, -4426, -4674,
	-3013, -929, -3894, -4705, -2382,
	-4234, -4710, -3810, -4451, -3595,
	-2785, -2240, -4626, -4355, -4660,
	-3212, -4645, -2423, -1958, -4677,
	-4098, -4334, -3466, -4580, -4795,
	-600, -3432, -4600, -4606, -4616,
	-3792, -4430, -4369, -3695, -4427,
	-1899, -3841, -4697, -4563, -1067,
	-3099, -4698, -4611, -4325, -2619,
	-4476, -4478, -4028, -4238, -4307,
	-4596, -4205, -4668, -4639, -4253,
	// rgWeightOutput+73*150
	1141, -1622, -1054, -720, -998,
	-1523, -418, -42, 890, 1127,
	-1091, 23, 350, -391, 509,
	8, 428, -2023, 277, -101,
	-1072, -982, 1446, -362, 192,
	1033, -604, -517, -720, -305,
	193, -1566, -692, -157, 2313,
	823, 33, 81, 0, -302,
	354, -2294, 2806, 676, -1347,
	-686, -1185, -535, -1820, -810,
	-603, -990, -466, 369, -407,
	-991, -274, -139, -1376, -59,
	-707, -723, 5, -118, 81,
	-171, 742, 968, -1672, -547,
	-341, 690, 70, -625, -215,
	-328, -313, -26, -398, -1967,
	-51, -133, -98, 1538, -138,
	-109, 284, 85, -376, 276,
	-155, 1235, -354, -147, 88,
	-1020, -971, -1749, -154, 1054,
	258, -266, -52, -332, -1499,
	-1134, 2960, -71, -383, -302,
	1574, 148, -1353, -1545, 164,
	-746, 118, -458, -402, -62,
	-820, 2065, -11, -303, 26,
	346, -466, -337, 1401, -303,
	-657, -185, -612, -303, -882,
	-2476, -269, 367, 300, 3220,
	973, 498, 1341, -578, 253,
	-344, -1443, -336, 165, 366,
	// rgWeightOutput+74*150
	-2027, -636, -659, -131, -3355,
	-724, -113, -1125, -1026, -738,
	-139, -1707, -617, -210, -317,
	466, -3186, 1677, -404, -433,
	588, 362, -2303, -435, 102,
	-492, 143, 1510, 2680, 786,
	-1613, 562, 782, -410, 2999,
	-1261, -327, -27, -319, -565,
	97, 1702, 1534, -431, 634,
	-210, 694, -177, 2698, 1171,
	-338, -271, 172, -540, 174,
	1034, -317, -518, 2442, -637,
	42, -2131, -257, 8, -797,
	-387, 1015, 903, 504, -80,
	143, 2070, -192, -268, -2511,
	-654, -961, -1511, -25, 271,
	-206, 236, -1336, -1345, -242,
	-807, -556, 220, 1732, 51,
	-323, 258, -1246, 341, -276,
	1317, 127, 865, -4, -562,
	1128, -109, 2033, -482, 212,
	-484, -1950, -735, -1610, -63,
	556, 99, 73, -3087, -238,
	-72, 1311, 502, -72, -299,
	228, 301, 31, -64, -312,
	-732, -135, -519, 451, -124,
	904, 1503, 4, -194, 1255,
	2301, 157, -191, -812, -732,
	-2642, 471, 1022, 778, -82,
	-93, -2602, -580, -851, 594,
	// rgWeightOutput+75*150
	-1047, -1446, -205, -214, -1038,
	1420, 232, 31, -1316, 859,
	-1105, -79, -433, -82, 1043,
	902, 880, -856, 570, -131,
	286, -955, 584, -636, 406,
	1903, -409, -1193, -458, 1135,
	-1353, -2777, -162, -187, 499,
	735, 215, 858, -302, -44,
	518, 544, 990, -152, -1365,
	-1207, -1302, -738, -1407, -1370,
	287, 259, 559, 637, 272,
	204, -1641, -307, 508, -484,
	178, 498, -401, 574, -468,
	-431, -1711, -1317, 1523, -1043,
	-506, 1040, 55, 443, 850,
	112, -1532, -1183, 13, -649,
	123, 376, -283, -1980, -58,
	141, -96, -239, -1981, 686,
	68, -457, 127, -514, -73,
	-2102, -1132, 1893, 265, 181,
	-1126, -375, 1321, -594, 1415,
	678, 1079, -340, 262, 161,
	638, 187, 916, -107, -122,
	310, 1090, -2149, 12, 581,
	-930, 1059, -424, 392, 722,
	-233, 1171, -677, -531, 951,
	-145, 81, 321, 220, -561,
	2930, 496, 162, -36, -1177,
	-2200, -147, 1431, -1511, -664,
	374, -418, -939, -495, 710,
	// rgWeightOutput+76*150
	1242, -629, 497, 145, 458,
	113, -307, -1249, 1470, -822,
	276, -1648, -161, -604, -962,
	-1259, -2789, 318, -587, -436,
	578, 1961, -877, 2041, -377,
	303, -12, 848, 841, -741,
	878, 805, 505, -323, 661,
	-1075, -502, -1987, -834, -463,
	-678, 1055, 518, -551, 2796,
	-1083, 762, -149, -295, 1262,
	-227, -210, -469, -178, -473,
	479, -316, -181, 2113, -343,
	224, -2715, -698, -713, -139,
	-61, -1636, 2110, 528, -616,
	-471, 1079, -659, -294, 1862,
	-494, 530, -463, -547, 699,
	-596, -57, 764, -1036, -361,
	86, -791, -915, -396, -991,
	-395, 981, -506, 583, -420,
	3407, 2202, -94, -582, 409,
	-1561, -380, 1810, -746, 890,
	-544, -997, -640, -1520, -385,
	-1008, -798, 3805, 810, -917,
	358, 3330, 1199, -370, -839,
	285, -261, -570, -280, -165,
	-788, -674, -19, 334, -684,
	-547, 1528, -135, -610, 2197,
	1827, -342, -456, -965, -641,
	300, -1520, -1568, 721, 30,
	-280, 160, -165, -270, -178,
	// rgWeightOutput+77*150
	-889, -1249, -48, -574, 652,
	-539, -390, 121, 211, -44,
	-407, -1681, -311, -865, -26,
	-137, -1571, 629, -218, -334,
	-980, 1254, 545, 892, -422,
	-140, -645, 2287, 403, 282,
	-1113, -675, 2858, -517, -567,
	163, -836, -3052, -68, -329,
	-890, 1997, -88, 332, 2270,
	-1536, 1308, -441, -986, -501,
	203, 56, -852, 1075, -203,
	463, -789, -480, 2265, -726,
	97, -1634, -369, -507, -1566,
	-1239, 2504, 2530, 1789, 25,
	-177, 914, -543, -252, -130,
	304, 119, -784, -412, 223,
	-280, -723, -587, -511, -570,
	-1484, -668, -495, 496, -33,
	-343, -1203, -1059, 40, -860,
	2776, 674, -352, -294, -336,
	1160, -824, 3060, -461, 797,
	848, 888, -924, 16, -486,
	924, -851, -327, 1711, -390,
	524, -3114, 1765, -570, -307,
	1621, 795, -398, -1026, -1066,
	-68, -220, 337, 240, -531,
	479, 2246, -519, 510, 1439,
	125, -607, -985, -1455, 881,
	619, 2737, -1051, 965, -1273,
	-978, 674, -522, -948, -32,
	// rgWeightOutput+78*150
	-203, -3103, 407, -255, 939,
	804, -240, 612, 1105, -376,
	633, 1598, 351, -36, 150,
	-319, -816, -290, -345, -260,
	563, -1427, -598, -387, -975,
	-590, -764, 824, -794, -181,
	1214, 2406, 278, -39, 511,
	-694, -395, 670, -1, 27,
	25, -636, -33, -729, -2108,
	1430, 690, -873, -804, -650,
	-149, -386, -345, 657, -368,
	744, 819, -7, 2586, -334,
	-205, 709, 79, -272, 415,
	-256, 1703, 1402, 873, 1237,
	-84, -676, -120, -153, -109,
	-101, 168, 492, -193, -761,
	-400, -601, 1216, 770, -28,
	-939, -1545, -1289, 944, -980,
	-238, -1089, 33, -724, 20,
	-1766, -1696, 830, -421, -114,
	-520, -250, -2178, -197, -311,
	554, 668, -464, 616, -78,
	-2605, -23, 199, 1232, 524,
	-226, 117, 149, -15, -28,
	-676, 105, -149, -168, -498,
	481, -165, 824, 764, -135,
	-729, -677, -386, -809, -1222,
	-722, -339, -714, 485, 890,
	-3073, 345, 234, 530, 171,
	-342, 2099, -257, 144, -3295,
	// rgWeightOutput+79*150
	320, -1404, 389, -438, 1708,
	-367, -341, -245, 1707, 930,
	-273, -115, 64, -49, 234,
	34, -3047, -1669, 700, 225,
	-54, 679, -857, 800, -220,
	836, -669, -607, 244, -218,
	35, 672, 1728, 92, -1628,
	-2351, -892, -1695, -99, -22,
	42, -978, 122, -653, -1082,
	-3013, 476, -88, -1583, -509,
	462, -124, -611, 569, -554,
	290, -1051, 317, 1916, 131,
	-225, -2286, -168, -366, 403,
	-132, -22, 1981, 448, 159,
	-263, -146, -439, 225, 441,
	596, 29, -622, -320, -481,
	-75, 373, 521, 616, -58,
	-513, -205, -689, -128, -496,
	-7, 434, -161, -392, -90,
	-4039, -1035, -619, -51, 276,
	-2302, -691, -164, -870, 854,
	-256, 302, -426, 407, -176,
	870, -688, 2737, 2007, -57,
	413, 119, -18, -437, -614,
	-1025, 462, -28, -403, -112,
	-579, -512, 379, -978, 288,
	941, 1440, -203, 260, 716,
	-1047, -103, 352, 207, 1153,
	316, 629, 270, -441, -244,
	-246, 194, -210, 21, 150,
	// rgWeightOutput+80*150
	16, -895, 2237, 81, -420,
	954, -201, -66, -988, 943,
	438, -902, 233, -146, 154,
	21, -919, -3407, 6, 268,
	-159, -1353, 154, -338, -294,
	-296, -355, -381, -732, -300,
	-1, 656, -343, -376, -791,
	756, -380, -2663, -148, -229,
	746, 770, -1769, -573, -559,
	-1082, 654, -186, -3376, 1731,
	98, 189, -298, -921, -162,
	89, -1959, -202, 957, -111,
	-160, 741, -212, -39, -234,
	-258, 828, 938, 92, 210,
	93, 422, -89, 162, -597,
	913, 13, -490, -72, 1642,
	-123, -800, 121, 1610, -24,
	-659, -88, 637, -683, 762,
	-406, -61, 75, 256, -145,
	-1770, -1171, -362, -80, -93,
	788, -122, 705, 451, 750,
	292, -2464, -733, -2519, -8,
	-1027, -302, -218, -3043, -336,
	-146, 921, -56, -36, -449,
	-167, -361, -493, -99, 57,
	79, -128, -770, 1788, 29,
	453, 674, -71, 137, -291,
	1320, -146, -371, 131, 301,
	-2244, -445, 530, 1524, -465,
	-207, 1418, 129, -179, -133,
	// rgWeightOutput+81*150
	-695, -2807, 26, -307, -1978,
	-449, -218, -1238, 712, -581,
	957, -1526, 576, -679, 839,
	-436, -1747, 699, -193, -340,
	-77, 1439, -280, -434, 166,
	831, -626, 955, -2173, 318,
	-334, 2090, 4083, -481, -521,
	1109, -530, 254, -333, -75,
	-937, -482, 1109, 259, -354,
	1246, -909, -642, -560, 381,
	-119, -490, -193, 781, -220,
	544, -292, -9, 1052, -409,
	204, -778, -215, -829, -99,
	-283, -2041, 2330, -1027, 822,
	157, 126, -643, -268, -306,
	-419, -822, -456, -236, -796,
	-315, -444, -690, -974, -185,
	-522, -632, -572, 896, -1131,
	-427, -318, -735, 1002, -300,
	-1328, 936, -312, -689, 562,
	1773, 152, 1099, -98, -1091,
	-127, 1269, -794, 833, -226,
	763, -208, 1349, -130, -630,
	107, 1170, -562, 39, -366,
	-1732, 1855, 90, -85, -345,
	-461, -16, 348, 411, 151,
	-86, -758, -182, -430, 512,
	1985, -145, -241, -336, 613,
	-10, 494, -1183, 1748, -339,
	-145, 611, -289, -280, 1245,
	// rgWeightOutput+82*150
	1324, -1396, 42, -230, 1157,
	-981, -491, 225, 66, -10,
	279, 1000, 130, -156, -1103,
	-321, 3790, -417, -808, -325,
	-556, -1523, 1809, -3955, -1011,
	-198, 299, 1542, 520, 1518,
	-9, -363, -733, -358, 675,
	2078, 182, -2622, -331, 154,
	243, 237, 451, -36, -369,
	410, -3237, -1667, -2815, 1977,
	-839, -467, -215, 186, -378,
	-160, -658, -863, -784, -513,
	139, 217, 248, -110, -744,
	-282, 541, -2234, -976, 813,
	-293, -428, 50, -558, 1243,
	-612, 318, -26, -161, 1654,
	-54, -622, -641, 447, -57,
	944, -18, 264, -739, -1042,
	-104, 4, -359, -387, -125,
	1048, -1319, 548, -229, -909,
	920, 242, 643, -73, 1220,
	246, -2817, 277, -384, -282,
	-1260, -237, -594, -1202, 562,
	-921, -882, -601, -423, 269,
	-886, -569, -658, -297, 11,
	503, -221, -58, 658, -595,
	-2857, 177, -162, -989, -1244,
	-320, -544, -389, -51, -206,
	201, 748, 612, 827, 451,
	-362, 648, -177, 139, -369,
	// rgWeightOutput+83*150
	-4022, -397, -4539, -4666, -1666,
	-3472, -4672, -2799, -3594, -3651,
	-4482, -1394, -3960, -4424, -3753,
	-4214, -2508, -1118, -4219, -4663,
	-4247, -1059, -3605, -1925, -4635,
	-2954, -4709, -3271, -3920, -2678,
	-2045, -4251, -2377, -4539, -3489,
	-3206, -4546, -1711, -4595, -4495,
	-4646, -2332, -4139, -3881, -1686,
	-1307, -3447, -770, -3122, -4222,
	-4459, -4460, -4559, -3898, -4721,
	-4292, -3979, -4646, -2866, -4565,
	-4432, -1486, -4697, -4183, -4575,
	-4560, -3729, -2366, -2807, -4536,
	-4687, -4037, -4698, -4502, -2845,
	-4130, -4372, -4591, -4649, -2972,
	-4685, -4215, -2528, -4412, -4715,
	-4370, -4552, -4578, -3933, -4434,
	-4654, -4088, -3560, -4428, -4671,
	-3013, -929, -3896, -4705, -2383,
	-4233, -4712, -3811, -4452, -3594,
	-2786, -2242, -4626, -4357, -4656,
	-3209, -4648, -2424, -1958, -4676,
	-4094, -4335, -3468, -4580, -4796,
	-598, -3433, -4599, -4606, -4620,
	-3790, -4428, -4368, -3696, -4425,
	-1899, -3841, -4698, -4561, -1070,
	-3098, -4698, -4614, -4325, -2620,
	-4480, -4474, -4025, -4237, -4307,
	-4599, -4209, -4665, -4636, -4254,
	// rgWeightOutput+84*150
	378, -579, 192, -289, 1449,
	774, -510, -159, -1199, -660,
	549, 13, -641, 255, 441,
	-1055, -3267, -333, -799, -608,
	1245, 2431, -1197, 1310, -1374,
	1945, -1100, 2598, 1494, 992,
	-10, 515, 1088, -320, 1291,
	2072, -144, 1514, -487, -324,
	-304, 1356, 448, 499, 2466,
	-5, 1121, 2947, -726, 460,
	-265, -410, -168, -821, -167,
	785, -49, -773, 2674, -275,
	257, -262, -775, 217, -947,
	-210, 2646, 2338, 2503, -1511,
	232, -1962, -476, 164, -539,
	-1402, -1964, -158, -323, 292,
	-617, -976, -1546, -1303, -567,
	-1559, -890, -1010, 2041, -1777,
	-594, -194, -1181, -2063, -736,
	1139, -197, 841, -1045, -328,
	-1469, -926, -3567, -811, 761,
	-1615, -1895, -1181, 1022, -298,
	1252, 208, 1011, 675, -658,
	378, 2152, 1287, -338, -998,
	-11, -1071, 531, -326, -665,
	-165, 3, 1217, 927, -53,
	-562, 51, 172, -1776, 3258,
	-29, -825, 176, -1253, 708,
	-1087, 988, 1213, 1546, -234,
	-95, 2339, -598, -756, -492,
	// rgWeightOutput+85*150
	181, -804, 117, -447, 3134,
	-1620, -441, 773, 766, -272,
	-2557, -767, -107, -564, 897,
	-848, -1548, 238, -345, -447,
	224, 858, -286, 2321, -724,
	1533, -841, 1836, -5059, -750,
	-28, 186, -525, -256, 644,
	2325, -714, 407, -127, 51,
	-626, 1253, 574, 1386, -120,
	1394, 508, -323, 153, 142,
	-540, -372, -672, 459, -444,
	475, -335, -251, 2140, -647,
	-126, -952, -597, -204, -239,
	-303, 799, 995, 2016, 235,
	-339, -856, -461, 39, 143,
	-1576, 1327, -736, -385, -2954,
	-395, -466, -2405, -1382, -459,
	-1094, -696, -1153, 824, -1180,
	-764, -294, -754, 1799, -435,
	-2350, 3128, 228, -544, 2248,
	-161, -512, 313, -953, 617,
	-238, 2278, -431, -858, -354,
	156, 171, 168, -654, -1027,
	87, 229, -392, -216, -860,
	1017, -3192, -58, -254, -271,
	275, 149, 206, 208, -453,
	-176, -144, -418, -908, 1179,
	-1393, -600, -383, -573, 3435,
	-462, -879, 2395, 284, -354,
	-440, -368, -645, -188, 2766,
	// rgWeightOutput+86*150
	1131, -448, 614, -153, 2367,
	672, -452, -347, 396, -797,
	854, -1958, -836, -285, 76,
	-556, -2128, -21, -243, -99,
	967, 2848, 89, 1284, -732,
	1523, -628, 1151, -3697, -1267,
	-24, 414, 599, 29, 1612,
	1884, 31, -1770, -541, -424,
	-342, 21, 545, -997, 1258,
	-439, 323, 2021, 392, -357,
	74, -390, 212, 578, -412,
	559, 463, -115, 1869, -693,
	-488, -587, -318, -459, -206,
	-38, 781, 2422, 1892, -1941,
	143, -336, -370, -400, -82,
	-1066, 905, 130, -5, 730,
	-452, -481, -1308, -28, -338,
	-1462, -664, -667, 917, -1194,
	-495, -53, 0, 417, -212,
	-1671, 865, 216, -601, -1329,
	-47, -17, 686, -597, 331,
	30, -2158, -483, -463, -193,
	-2067, 157, -1711, 1212, -715,
	-43, 526, 1209, 208, -861,
	2030, 778, 217, 34, -275,
	38, -138, 246, -448, 448,
	1291, -1065, -381, -724, 2189,
	-1644, -509, -148, -39, -3438,
	-291, -838, 1385, 564, 356,
	93, 416, -71, -296, 661,
	// rgWeightOutput+87*150
	-4021, -396, -4535, -4670, -1666,
	-3474, -4671, -2796, -3593, -3653,
	-4482, -1397, -3957, -4425, -3752,
	-4217, -2511, -1114, -4217, -4660,
	-4245, -1063, -3606, -1925, -4637,
	-2955, -4706, -3273, -3919, -2678,
	-2044, -4254, -2378, -4537, -3490,
	-3205, -4547, -1715, -4596, -4492,
	-4645, -2333, -4143, -3881, -1682,
	-1309, -3446, -767, -3122, -4221,
	-4457, -4460, -4561, -3898, -4722,
	-4288, -3979, -4645, -2864, -4565,
	-4432, -1484, -4695, -4185, -4575,
	-4564, -3727, -2366, -2807, -4536,
	-4687, -4039, -4695, -4505, -2845,
	-4133, -4374, -4591, -4649, -2976,
	-4683, -4214, -2526, -4416, -4716,
	-4370, -4548, -4578, -3931, -4430,
	-4654, -4085, -3561, -4424, -4671,
	-3014, -932, -3892, -4701, -2385,
	-4233, -4712, -3809, -4454, -3597,
	-2784, -2239, -4628, -4354, -4656,
	-3211, -4648, -2425, -1959, -4676,
	-4095, -4330, -3466, -4580, -4798,
	-601, -3433, -4597, -4609, -4618,
	-3792, -4432, -4372, -3698, -4429,
	-1895, -3839, -4697, -4563, -1068,
	-3098, -4698, -4612, -4324, -2615,
	-4476, -4476, -4027, -4236, -4305,
	-4595, -4204, -4667, -4634, -4253,
	// rgWeightOutput+88*150
	255, -958, 1340, 136, 175,
	-299, -85, 346, -947, 760,
	-645, -922, 246, -463, -69,
	-496, -75, -889, 807, -170,
	870, -170, 700, -481, 211,
	2654, -804, 138, -1077, -1626,
	-104, -242, -457, 36, 1012,
	-144, 155, -567, 5, -432,
	13, -1004, 1988, -594, 294,
	-1086, 60, -178, -2083, -1706,
	-535, 49, -54, -1088, -112,
	585, -1254, 27, 1288, -85,
	-96, 57, -252, -189, -377,
	-79, 1135, 2131, 471, -902,
	-114, -702, -150, 332, 1696,
	-680, 632, -63, -230, -910,
	-80, -63, 1343, 282, -205,
	-97, -354, 208, -80, -198,
	147, 1588, 327, -647, -115,
	-106, -307, -297, -388, -89,
	-512, 142, -1534, -960, -387,
	2110, -773, -217, 1367, -21,
	-813, 358, -439, -4216, -1076,
	-705, 839, 871, 37, -667,
	-610, 1789, 63, 151, 104,
	-88, -293, -609, 453, 56,
	390, -147, -532, -792, -486,
	-178, 26, 342, 393, -1110,
	1372, -2161, 1795, 348, -484,
	215, -1557, -424, -285, 26,
	// rgWeightOutput+89*150
	2026, -652, -476, -320, -2685,
	-2355, -435, -121, -1120, -1200,
	-175, -1557, 43, -597, 59,
	-692, 2607, 395, -658, -316,
	-144, 2228, 959, 141, 431,
	101, 85, 1385, -1178, -309,
	247, -508, -212, -343, 1651,
	-195, 422, 322, -252, -542,
	-343, 89, -101, -114, 2322,
	279, 238, -2080, -1913, -1133,
	-461, -281, -610, 119, 13,
	-2519, 256, -296, -1770, -931,
	-152, -2535, -226, -207, -521,
	-602, 511, 259, -570, 426,
	-235, -384, -36, -708, 2110,
	-592, 758, 422, -383, -119,
	-227, -18, -465, -597, -486,
	-250, 446, 757, 1456, 402,
	-200, 1618, -410, 1069, -203,
	1187, 2059, -1016, -492, -1321,
	521, -42, 550, -426, 1517,
	1286, -123, 139, 963, -466,
	1225, -33, -199, -2086, 321,
	-103, 1120, 2382, -56, -482,
	-157, 871, -387, -492, -78,
	-259, -152, -656, -467, -841,
	-2374, -220, -553, -107, 1028,
	598, -686, -295, -30, -551,
	631, 775, -549, 467, 269,
	-617, 936, -95, -46, 434,
	// rgWeightOutput+90*150
	-4019, -396, -4538, -4668, -1665,
	-3473, -4669, -2799, -3595, -3652,
	-4482, -1398, -3956, -4423, -3750,
	-4213, -2511, -1116, -4219, -4661,
	-4248, -1058, -3603, -1925, -4638,
	-2953, -4708, -3275, -3919, -2676,
	-2043, -4250, -2377, -4534, -3489,
	-3207, -4544, -1715, -4597, -4495,
	-4641, -2333, -4143, -3882, -1684,
	-1311, -3442, -770, -3121, -4224,
	-4460, -4460, -4559, -3895, -4719,
	-4288, -3976, -4648, -2864, -4565,
	-4431, -1483, -4696, -4187, -4574,
	-4563, -3728, -2367, -2806, -4540,
	-4690, -4038, -4694, -4502, -2846,
	-4133, -4373, -4593, -4650, -2973,
	-4683, -4216, -2527, -4416, -4713,
	-4368, -4550, -4577, -3930, -4429,
	-4655, -4087, -3560, -4427, -4672,
	-3012, -931, -3892, -4701, -2383,
	-4231, -4710, -3812, -4453, -3598,
	-2783, -2241, -4624, -4355, -4659,
	-3208, -4645, -2425, -1961, -4675,
	-4096, -4330, -3468, -4579, -4797,
	-597, -3429, -4598, -4608, -4616,
	-3789, -4428, -4369, -3697, -4428,
	-1898, -3841, -4700, -4560, -1066,
	-3097, -4698, -4610, -4327, -2616,
	-4477, -4476, -4028, -4236, -4309,
	-4595, -4208, -4669, -4635, -4253,
	// rgWeightOutput+91*150
	-4020, -399, -4536, -4666, -1662,
	-3476, -4671, -2795, -3592, -3648,
	-4483, -1395, -3956, -4425, -3752,
	-4213, -2511, -1115, -4221, -4661,
	-4243, -1062, -3605, -1927, -4635,
	-2956, -4707, -3271, -3920, -2677,
	-2045, -4250, -2374, -4536, -3487,
	-3205, -4546, -1714, -4594, -4491,
	-4644, -2330, -4139, -3879, -1685,
	-1308, -3442, -769, -3121, -4223,
	-4459, -4461, -4557, -3898, -4723,
	-4292, -3976, -4644, -2865, -4566,
	-4432, -1482, -4697, -4185, -4573,
	-4563, -3730, -2366, -2803, -4536,
	-4687, -4036, -4693, -4506, -2845,
	-4130, -4369, -4590, -4652, -2976,
	-4684, -4215, -2529, -4413, -4714,
	-4372, -4552, -4578, -3929, -4432,
	-4656, -4087, -3560, -4427, -4670,
	-3013, -930, -3893, -4704, -2385,
	-4233, -4712, -3813, -4451, -3597,
	-2787, -2243, -4624, -4355, -4656,
	-3211, -4645, -2424, -1959, -4676,
	-4096, -4332, -3469, -4582, -4798,
	-598, -3432, -4597, -4607, -4618,
	-3793, -4431, -4372, -3694, -4428,
	-1896, -3843, -4697, -4564, -1069,
	-3096, -4701, -4610, -4325, -2619,
	-4476, -4475, -4028, -4233, -4308,
	-4594, -4204, -4665, -4634, -4256,
	// rgWeightOutput+92*150
	-4021, -397, -4536, -4668, -1665,
	-3475, -4670, -2797, -3593, -3652,
	-4481, -1395, -3956, -4425, -3750,
	-4215, -2511, -1115, -4221, -4660,
	-4245, -1061, -3606, -1926, -4634,
	-2953, -4708, -3274, -3922, -2676,
	-2043, -4252, -2379, -4535, -3490,
	-3206, -4547, -1716, -4593, -4494,
	-4645, -2330, -4142, -3880, -1682,
	-1309, -3444, -770, -3120, -4224,
	-4457, -4459, -4560, -3899, -4722,
	-4290, -3978, -4647, -2861, -4565,
	-4432, -1485, -4698, -4184, -4575,
	-4561, -3730, -2365, -2807, -4540,
	-4688, -4035, -4695, -4504, -2844,
	-4131, -4374, -4591, -4650, -2972,
	-4684, -4215, -2528, -4417, -4714,
	-4373, -4551, -4582, -3930, -4431,
	-4652, -4085, -3562, -4424, -4670,
	-3013, -928, -3896, -4702, -2383,
	-4232, -4710, -3809, -4454, -3594,
	-2787, -2241, -4625, -4354, -4657,
	-3212, -4646, -2425, -1959, -4673,
	-4097, -4331, -3468, -4580, -4794,
	-598, -3433, -4600, -4609, -4618,
	-3794, -4428, -4371, -3694, -4428,
	-1899, -3842, -4697, -4560, -1068,
	-3095, -4699, -4615, -4328, -2619,
	-4479, -4476, -4029, -4236, -4305,
	-4599, -4207, -4666, -4637, -4257,
	// rgWeightOutput+93*150
	-4019, -395, -4539, -4668, -1663,
	-3472, -4674, -2797, -3591, -3648,
	-4485, -1397, -3957, -4422, -3751,
	-4215, -2508, -1114, -4218, -4659,
	-4247, -1062, -3606, -1929, -4638,
	-2953, -4708, -3274, -3920, -2680,
	-2043, -4251, -2375, -4538, -3487,
	-3206, -4545, -1712, -4593, -4494,
	-4642, -2331, -4139, -3881, -1684,
	-1309, -3443, -769, -3119, -4220,
	-4461, -4460, -4561, -3897, -4719,
	-4290, -3978, -4646, -2865, -4569,
	-4431, -1482, -4698, -4185, -4573,
	-4564, -3730, -2367, -2803, -4537,
	-4687, -4036, -4696, -4503, -2842,
	-4130, -4373, -4590, -4651, -2976,
	-4683, -4213, -2524, -4416, -4714,
	-4367, -4552, -4578, -3929, -4430,
	-4654, -4086, -3563, -4428, -4668,
	-3015, -929, -3896, -4703, -2381,
	-4231, -4710, -3812, -4450, -3596,
	-2783, -2242, -4626, -4355, -4656,
	-3212, -4644, -2424, -1962, -4676,
	-4095, -4332, -3468, -4581, -4795,
	-597, -3430, -4599, -4610, -4616,
	-3793, -4430, -4367, -3696, -4427,
	-1897, -3840, -4697, -4561, -1065,
	-3097, -4699, -4614, -4328, -2618,
	-4480, -4476, -4028, -4235, -4307,
	-4599, -4204, -4668, -4638, -4256
};  // rgWeightOutput[94*150]

const short rgBiasOutput[94] = {
	-4902, -4905, -4901, -4901, -4902,
	-296, -4902, -332, -398, -4905,
	-4901, -38, -538, -178, -625,
	-4903, -4903, 35, -258, -539,
	69, -253, -238, -338, -163,
	-4902, -4905, -4904, -4902, -4904,
	-4902, -312, -4904, -322, -4902,
	-261, -4905, -4902, -4903, -4901,
	-4903, -4905, -4903, -144, -4904,
	-4902, -4903, -4904, -4904, -4903,
	-4902, -4901, -4905, -4904, -4906,
	-4902, -4905, -4903, -4903, -136,
	-4904, -4903, -4901, -4901, -28,
	-235, -23, -542, -339, -377,
	-141, -241, -4903, -489, -12,
	-239, -424, -310, -327, -565,
	-276, -352, -362, -4904, -450,
	-591, -530, -4904, -152, 5,
	-4905, -4905, -4903, -4905
};  // rgBiasOutput[94]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\tune.c ===
#ifndef ROM_IT

/******************************Module*Header*******************************\
* Module Name: tune.c
*
* All the tuning functions go here.  This is stuff that we need during
* tuning but we don't want in the retail product.  Also this maybe a good
* place to stick anything we know we need in future versions of the
* recognizer but don't need in this version.
*
* Created: 12-Feb-1997 09:40:45
* Author: Patrick Haluptzok patrickh
*
* Copyright (c) 1996 Microsoft Corporation
\**************************************************************************/

#include "tsunamip.h"
#include <stdio.h>
#include <ctype.h>

ROMMABLE RECCOSTS defRecCosts =
{
    (FLOAT)(0.0  ), // BigramWeight
    (FLOAT)(0.0), // DictWeight
    (FLOAT)(0.0  ), // AnyOkWeight
    (FLOAT)(0.0  ), // StateTransWeight
    (FLOAT)(0.0  ), // NumberWeight;
    (FLOAT)(0.0 ), // BeginPuncWeight;
    (FLOAT)(0.0  ), // EndPuncWeight;
    (FLOAT)(0.000000  ), // CharUniWeight           mult weight for unigram cost
    (FLOAT)(0.000000  ), // CharBaseWeight          mult weight for baseline
    (FLOAT)(0.0 ), // CharHeightWeight        mult weight for height transition between chars.
    (FLOAT)(0.0 ), // CharBoxBaselineWeight   mult weight for baseline cost given the baseline and size of box they were given to write in.
    (FLOAT)(0.0 ), // CharBoxHeightWeight     mult weight for height/size cost given size of box they were supposed to write in.
    (FLOAT)(0.0 ), // StringUniWeight         mult weight for unigram cost
    (FLOAT)(0.0 ), // StringBaseWeight        mult weight for baseline
    (FLOAT)(0.0  ), // StringHeightWeight      mult weight for height transition between chars.
    (FLOAT)(0.0  ), // StringBoxBaselineWeight mult weight for baseline cost given the baseline and size of box they were given to write in.
    (FLOAT)(0.0)  // StringBoxHeightWeight   mult weight for height/size cost given size of box they were supposed to write in.
};


/******************************Public*Routine******************************\
* OutputGLYPHSYMS
*
* CRattJ has an option to record all the GLYPHSYMS in a file for study and
* so they can be replayed with many different engine weights quickly for
* tuning the engine.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void PUBLIC OutputGLYPHSYMS(XRC *xrc, LPARAM lparam)
{
    FILE *fpOut;
    int iLayer;
	UINT	iSym;
    GLYPHSYM *pGlyphsym;

    fpOut = fopen("c:\\crattj.rat", "a");

    fprintf(fpOut, "SINFO %d %d\n", xrc->cFrame, xrc->cQueue);

    for (iLayer = 0; iLayer < xrc->cQueue; iLayer++)
    {
        pGlyphsym = xrc->ppQueue[iLayer];

        fprintf(fpOut, "GLYPHSYM %d %d %d %d %d %d %d %d %d %d %d\n",
                        pGlyphsym->status,
                        pGlyphsym->iBox,
                        pGlyphsym->altlist.cAlt,
                        pGlyphsym->rect.left,
                        pGlyphsym->rect.top,
                        pGlyphsym->rect.right,
                        pGlyphsym->rect.bottom,
                        pGlyphsym->iBegin,
                        pGlyphsym->iEnd,
                        pGlyphsym->cFrame,
                        pGlyphsym->iLayer);

        for (iSym = 0; iSym < pGlyphsym->altlist.cAlt; iSym++)
        {
            fprintf(fpOut, "SYV %04x %f\n", pGlyphsym->altlist.awchList[iSym],
                                            pGlyphsym->altlist.aeScore[iSym]);
        }
    }

    fclose(fpOut);
}

/******************************Public*Routine******************************\
* InputGLYPHSYMS
*
* CRattJ has an option to record all the GLYPHSYMS in a file for study and
* so they can be replayed with many different engine weights quickly for
* tuning the engine.  This function adds them back in for play back.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void PUBLIC InputGLYPHSYMS(XRC *xrc, LPARAM lparam)
{
    GLYPHSYM *pGlyphsym, *gs;

    pGlyphsym = (GLYPHSYM *) lparam; // Init Glyphsym from Crattj

    gs = (GLYPHSYM *) ExternAlloc(sizeof(GLYPHSYM));
    memset(gs, 0, sizeof(GLYPHSYM));
    ASSERT(gs);    

    gs->altlist      = pGlyphsym->altlist;
    gs->status       = pGlyphsym->status;
    gs->iBox         = pGlyphsym->iBox;
    gs->rect.left    = pGlyphsym->rect.left;
    gs->rect.top     = pGlyphsym->rect.top;
    gs->rect.right   = pGlyphsym->rect.right;
    gs->rect.bottom  = pGlyphsym->rect.bottom;
    gs->iBegin       = pGlyphsym->iBegin;
    gs->iEnd         = pGlyphsym->iEnd;
    gs->cFrame       = pGlyphsym->cFrame;
    gs->iLayer       = pGlyphsym->iLayer;

    AddBoxGlyphsymSINFO(xrc, gs);
}

/******************************Public*Routine******************************\
* GetPrivateRecInfoXRC
*
* This retrieves private info in debug builds which is used for tuning
* the engine.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Modified it.
\**************************************************************************/

int PUBLIC GetPrivateRecInfoXRC(XRC * xrc, WPARAM wparam, LPARAM lparam)
{
    ASSERT(xrc);

    switch (wparam)
    {
    case PRI_WEIGHT:
        break;

    case PRI_GLYPHSYM:

        //
        // Outputs the GLYPHSYMs to the file handle provided in lparam.
        //

        OutputGLYPHSYMS(xrc, lparam);
        break;
    }

    return(0);
}

/******************************Public*Routine******************************\
* SetPrivateRecInfoXRC
*
* Sets info into XRC that's not settable through the api easily.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Modified it.
\**************************************************************************/

int PUBLIC SetPrivateRecInfoXRC(XRC * xrc, WPARAM wparam, LPARAM lparam)
{
    switch (wparam)
    {
    case PRI_WEIGHT:

        memcpy(&defRecCosts, (void *) lparam, sizeof(RECCOSTS));
        break;

    case PRI_GUIDE:

        ASSERT(xrc);
        return(SetGuideXRC(xrc, (LPGUIDE)lparam, 0));
        break;

    case PRI_GLYPHSYM:

        ASSERT(xrc);

        //
        // Outputs the GLYPHSYMs to the file handle provided in lparam.
        //

        InputGLYPHSYMS(xrc, lparam);
        break;
    }

    return(0);
}

int WINAPI SetAlphabetPriorityHRC(HRC hrc, ALC alc, LPBYTE rgbfAlc)
{
	int iRet;
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return HRCR_ERROR;

	iRet = SetAlphabetPriorityXRC(xrc, alc, rgbfAlc);

	return(iRet);
}

int WINAPI GetPrivateRecInfoHRC(HRC hrc, WPARAM wparam, LPARAM lparam)
{
    XRC   *xrc = (XRC*)hrc;

	if (!VerifyHRC(xrc))
		return HRCR_ERROR;

	GetPrivateRecInfoXRC(xrc, wparam, lparam);

	return(HRCR_OK);
}

int WINAPI SetPrivateRecInfoHRC(HRC hrc, WPARAM wparam, LPARAM lparam)
{
    XRC   *xrc = (XRC*)hrc;

    //
    // We allow NULL for certain settings.
    //

    if (xrc)
    {
        if (!VerifyHRC(xrc))
            return HRCR_ERROR;
    }

	SetPrivateRecInfoXRC(xrc, wparam, lparam);

	return(HRCR_OK);
}

/******************************Public*Routine******************************\
* ConfigRecognizer
*
* In tuning mode this gives us an API to send stuff in through.
*
* History:
*  20-Mar-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

UINT WINAPI ConfigRecognizer(UINT uSubFunction, WPARAM wParam, LPARAM lParam)
{
	UINT uiRet = 0;

	switch(uSubFunction)
	{
	case WCR_INITRECOGNIZER:
        uiRet = (UINT) HwxConfig();
		break;

	case WCR_CLOSERECOGNIZER:
		UnloadRecognizer();
		uiRet = 1;
        break;
	}

	return uiRet;
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\unicode.c ===
#include "common.h"

//
// rgrecmaskUnicode
//

// ALC_ALPHA - panel 1 or 2
// ALC_NUMERIC - panel 3
// ALC_BOTH - all 3

#define ALC_BOTH (ALC_ALPHA | ALC_NUMERIC)

const RECMASK rgrecmaskUnicode[94] =
{
    0,                                      // 0x0021 !
    0,                                      // 0x0022 "
    0,                                      // 0x0023 #
    0,                                      // 0x0024 $
    0,                                      // 0x0025 %
    ALC_NUMERIC,                            // 0x0026 &
    0,                                      // 0x0027 '
    ALC_NUMERIC,                            // 0x0028 (
    ALC_NUMERIC,                            // 0x0029 )
    0,                                      // 0x002A *
    0,                                      // 0x002B +
    ALC_NUMERIC,                            // 0x002C ,
    ALC_BOTH,                               // 0x002D -
    ALC_NUMERIC,                            // 0x002E .
    ALC_BOTH,                               // 0x002F /
    0,                                      // 0x0030 0
    0,                                      // 0x0031 1
	ALC_NUMERIC,                            // 0x0032 2
	ALC_NUMERIC,                            // 0x0033 3
	ALC_NUMERIC,                            // 0x0034 4
	ALC_NUMERIC,                            // 0x0035 5
	ALC_NUMERIC,                            // 0x0036 6
    ALC_BOTH,                               // 0x0037 7
	ALC_NUMERIC,                            // 0x0038 8
	ALC_NUMERIC,                            // 0x0039 9
    0,                                      // 0x003A :
    0,                                      // 0x003B ;
    0,                                      // 0x003C <
    0,                                      // 0x003D =
    0,                                      // 0x003E >
    0,                                      // 0x003F ?
    ALC_NUMERIC,                            // 0x0040 @
    0,                                      // 0x0041 A
    ALC_BOTH,                               // 0x0042 B
    0,                                      // 0x0043 C
    ALC_OTHER,                              // 0x0044 D
    0,                                      // 0x0045 E
    0,                                      // 0x0046 F
    0,                                      // 0x0047 G
    0,                                      // 0x0048 H
    0,                                      // 0x0049 I
    0,                                      // 0x004A J
    0,                                      // 0x004B K
    ALC_BOTH,                               // 0x004C L
    0,                                      // 0x004D M
    0,                                      // 0x004E N
    0,                                      // 0x004F O
    0,                                      // 0x0050 P
    0,                                      // 0x0051 Q
    0,                                      // 0x0052 R
    0,                                      // 0x0053 S
    0,                                      // 0x0054 T
    0,                                      // 0x0055 U
    0,                                      // 0x0056 V
    0,                                      // 0x0057 W
    0,                                      // 0x0058 X
    0,                                      // 0x0059 Y
    0,                                      // 0x005A Z
    0,                                      // 0x005B [
    ALC_BOTH,                               // 0x005C
    0,                                      // 0x005D ]
    0,                                      // 0x005E ^
    0,                                      // 0x005F _
    0,                                      // 0x0060 `
    ALC_ALPHA,                              // 0x0061 a
    ALC_ALPHA,                              // 0x0062 b
    ALC_ALPHA,                              // 0x0063 c
    ALC_ALPHA,                              // 0x0064 d
    ALC_ALPHA,                              // 0x0065 e
    ALC_ALPHA,                              // 0x0066 f
    ALC_ALPHA,                              // 0x0067 g
    ALC_ALPHA,                              // 0x0068 h
    0,                                      // 0x0069 i
    ALC_ALPHA,                              // 0x006A j
    ALC_ALPHA,                              // 0x006B k
    ALC_BOTH,                               // 0x006C l
    ALC_ALPHA,                              // 0x006D m
    ALC_ALPHA,                              // 0x006E n
    ALC_BOTH,                               // 0x006F o
    ALC_ALPHA,                              // 0x0070 p
    ALC_ALPHA,                              // 0x0071 q
    ALC_ALPHA,                              // 0x0072 r
    ALC_ALPHA,                              // 0x0073 s
    ALC_ALPHA,                              // 0x0074 t
    ALC_ALPHA,                              // 0x0075 u
    ALC_ALPHA,                              // 0x0076 v
    ALC_ALPHA,                              // 0x0077 w
    0,                                      // 0x0078 x
    ALC_ALPHA,                              // 0x0079 y
    ALC_ALPHA,                              // 0x007A z
    0,                                      // 0x007B {
    0,                                      // 0x007C |
    0,                                      // 0x007D }
    0                                       // 0x007E ~
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\bigram.h ===
/* Structure containing second half of Bigram info */

typedef struct BIGRAM {
	unsigned char wch; 	// second char of bigram, 0 == unknown
	unsigned char prob;	// conditional probability
} BIGRAM, FAR *PBIGRAM;

typedef struct CHARACTER {
	unsigned short wch;	// first character of bigram, 0 == unknown
	unsigned short iBigram;	// index into BIGRAM array for first bigram. (last is always 0).
} CHARACTER, FAR *PCHARACTER;

FLOAT BigramTransitionCost(unsigned char wchPrev, int iBoxPrev, unsigned char wch, int iBox);

extern const int cBigramCharacters;
extern const BIGRAM FAR rgBigrams[];
extern const CHARACTER FAR rgCharacter[];
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\unidata.c ===
#include "tsunami.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\dict.h ===
#include "common.h"
#include "glyphsym.h"

void *LoadDictionary(HINSTANCE hInst);
void FreeDictionary(void);

//DWORD DictNextState(DWORD state, wchar_t wch);
//BOOL DictFinalState(DWORD state);

int StartDictionary(wchar_t wch, PATHNODE *rgPathNode, int cMaxNode);
BOOL DictionaryNextState(const PATHNODE * const pNode,
						wchar_t wch,
						PATHNODE *pNextNode);

BOOL DictionaryValidState(const PATHNODE * const pNode);
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\engine.c ===
//
// File: engine.c
//
// Contains the ADT for ENGINE object.
// The ENGINE object is one of the main objects
// that is pointed to by the HRC object and is
// responsible for performing the viterbi and A*
// searchs as well as packaging up the results.
//

#include "tsunamip.h"

// *******************************
// 
// IsDoneENGINE()
//
// checks the processing state of the engine
//
// Arguments:  
//
// Returns:    returns TRUE iff engine does not have any more processing left
//
// Note:       none
//                                
// *******************************

BOOL IsDoneENGINE(XRC *xrc)
{
	ASSERT(xrc);

	if (!FBoxedInputXRCPARAM(xrc))
		return(TRUE);

	if (xrc->fUpdate)
		return(FALSE);

	if (IsDonePATHSRCH(xrc))
		return(TRUE);

	return(FALSE);
}

// *******************************
// 
// ProcessENGINE()
//
// perform one granularity of Viterbi & A* search
//
// Arguments:  
//
// Returns:    PROCESS_IDLE if no work was done
//             PROCESS_READY if finished doing some work
//
// Note:       none
//                                
// *******************************

int PUBLIC ProcessENGINE(XRC *xrc, BOOL fEndOfInk, BOOL bComplete)
{
    int		ret;
    FRAME  *frame = NULL;

    ASSERT(xrc);

    if (CFrameProcessedSINFO(xrc) == 0)
        return(PROCESS_IDLE);

// See if we have any glyphsyms ready to be recognized.

    if (xrc->fUpdate)
    {
        GLYPHSYM *gs;

        if (fEndOfInk)
        {
            // Start at the last box, clean them all.

            gs = GetGlyphsymSINFO(xrc, CLayerSINFO(xrc) - 1);
        }
        else
        {
            //
            // Start at the box in front of the last box to get ink added and
            // clean up all the glyphsyms from there forward.
            //

            gs = xrc->gsLastInkAdded;
            ASSERT(gs);

            gs = GetPrevGLYPHSYM(xrc->gsLastInkAdded);
            xrc->gsLastInkAdded = NULL;
        }

        while (gs)
        {
            if (IsDirtyGLYPHSYM(gs))
            {
                DispatchGLYPHSYM(gs, CharsetSINFO(xrc), xrc);

                //
                // If we already have glyphs with updated information only update
                // gsMinUpdated if we are any glyph before it.  The path search code treats
                // gsMinUpdated as the earliest glyph in the input that has been changed.
                //
                
                if (ILayerGLYPHSYM(gs) < CLayerPATHSRCH(xrc))
                {
                    xrc->cLayer = ILayerGLYPHSYM(gs);
                }

                if (xrc->gsMinUpdated)
                {
                    if (ILayerGLYPHSYM(gs) < ILayerGLYPHSYM(xrc->gsMinUpdated))
                    {
                        xrc->gsMinUpdated = gs;
                    }
                }
                else
                {
                    xrc->gsMinUpdated = gs;
                }
            }

            gs = GetPrevGLYPHSYM(gs);
        }

        xrc->fUpdate = FALSE;  // We no longer have any glyphsyms to process.
    }

    //
    // All of the glyphsyms have been updated now, do the path work.
    //

    if (!FBoxedInputXRCPARAM(xrc))
        return(PROCESS_IDLE);

    ret = PROCESS_READY;

    while (ret == PROCESS_READY)
    {
        ret = ProcessPATHSRCH(xrc);
    }

    return(ret);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\engine.h ===
#ifndef	__INCLUDE_ENGINE
#define	__INCLUDE_ENGINE

// The ENGINE object has been moved directly into the XRC object [donalds] 02-05-97

void PUBLIC InitializeENGINE(XRC *xrc);
int  PUBLIC ProcessENGINE(XRC *xrc, BOOL fEnd, BOOL bComplete);
BOOL PUBLIC IsDoneENGINE(XRC *xrc);
int  PUBLIC GetBoxResultsENGINE(XRC *xrc, int cAlt, int iSyv, LPBOXRESULTS lpboxres, BOOL fInkset);

#define IncRefcountENGINE(a)    ((a)->refcount++)
#define DecRefcountENGINE(a)    ((a)->refcount--)

#define CResultENGINE(xrc)        (CResultPATHSRCH((xrc)->pathsrch))
#define ResultENGINE(xrc, i)      (ResultPATHSRCH((xrc)->pathsrch, i))

#endif	//__INCLUDE_ENGINE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\xrc.c ===
#include "tsunamip.h"

BOOL InitializeCHARSET(CHARSET *cs, CHARSET *csTemplate);

// ----------------------------------------------
// PURPOSE   : constructor for the XRC object
// RETURNS   : 
// CONDITION : 
// ----------------------------------------------

/******************************Public*Routine******************************\
* InitializeXRC
*
* Called to initialize an XRC at creation time.
*
* History:
*  24-Mar-1995 -by- Patrick Haluptzok patrickh
* Commented it.
\**************************************************************************/

BOOL InitializeXRC(XRC *xrc, XRC *xrcDef, HANDLE hrec)
{
    ASSERT(xrc);
    AddValidHRC(xrc);  // Adds the handle to the global handle table.

	memset(xrc, '\0', sizeof(XRC));

    if (!xrcDef)
    {        
        InitializeCHARSET(&(xrc->cs), NULL);
        xrc->cResultMax = CRESULT_DEFAULT;        
    }
    else
    {        
		SetGuideXRC(xrc, &(xrcDef->guide), xrcDef->nFirstBox);
        InitializeCHARSET(&(xrc->cs), &(xrcDef->cs));
        xrc->cResultMax = xrcDef->cResultMax;        
    }

    ASSERT(xrc->fEndInput == FALSE);
    ASSERT(xrc->fBeginProcess == FALSE);

    return InitializeINPUT(xrc) && InitializeSINFO(xrc);
}

/******************************Public*Routine******************************\
* DestroyXRC
*
* Deletes the XRC, cleans up the objects inside, deletes the handle from
* the global handle table.
*
* History:
*  24-Mar-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

void PUBLIC DestroyXRC(XRC *xrc)
{
    if (!xrc)
        return;

    DestroyINPUT(xrc);
    DestroySINFO(xrc);
    RemoveValidHRC(xrc);  // Remove the handle from the global handle table.
    ExternFree(xrc);
}

int PUBLIC SetGuideXRC(XRC *xrc, LPGUIDE lpguide, UINT nFirst)
{
	ASSERT(xrc);

	if ((lpguide == NULL) ||
       (lpguide->cxBox == 0 && lpguide->cyBox == 0 && lpguide->cHorzBox == 0 && lpguide->cVertBox == 0))
	{		
		xrc->uGuideType = XPGUIDE_NONE;
		return(HRCR_ERROR);		// [donalds] 8/6/97 We no longer support FREE input mode
	}
	
	xrc->guide = *lpguide;
    xrc->nFirstBox = nFirst;

	if (lpguide->cxBox == 0)
		xrc->uGuideType = XPGUIDE_LINED;
	else
		xrc->uGuideType = XPGUIDE_BOXED;

	return(HRCR_OK);
}

// ----------------------------------------------
// PURPOSE   : Time scheduling for the recognizer object.
// RETURNS   : status of the recognizer
// ----------------------------------------------

int PUBLIC SchedulerXRC(XRC *xrc)
{
    int     status = PROCESS_READY;

    ASSERT(xrc);
    
    //
    // The way we want to process the data is:
    //
    // 1.  Copy all completed frames to the appropriate Glyphsyms
    //     looking for gestures as we go.
    //     When all complete frames are copied to Glyphsyms goto 2
    //
    // 2.  Do shape matching with all the glyphsyms that are dirty.
    //     When all dirty glyphsyms have updated shape searches goto 3
    //
    // 3.  Do the path search using context info.  Throw away any old
    //     paths that are invalidated by a new recognition result.
    //

    //
    // Copy all frames completed from the SINFO to their appropriate GLYPHSYMS.
    // We process all frames that are available at once so we can return a gesture
    // right away.
    //

    while (status == PROCESS_READY)
    {
        //
        // ProcessSINFO will stick all the frames in the correct GLYPHSYMs.
        //

        status = ProcessSINFO(xrc, IsEndOfInkXRC(xrc));
    }

    //
    // ProcessENGINE will do some hard work like recognize dirty GLYPHSYMs
    // or explore a recognition path.
    //

    ProcessENGINE(xrc, IsEndOfInkXRC(xrc), TRUE);

    //
    // This is a measure necessary to deal with the case when no
    // end of ink is called.  If no end of ink is called, the engine
    // will never finish, in which case the scheduler loops indefinitely.
    // in order to avoid this, we need to do another check.
    //

    if (IsEndOfInkXRC(xrc))
    {
        return HRCR_COMPLETE;
    }

    return HRCR_OK;
}

/******************************Public*Routine******************************\
* FindBestPath
*
* Finds the best path context has found and puts the syv in the glyphsym
*
* History:
*  17-Jan-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void FindBestPathXRC(XRC *xrc)
{
    int			inode, ibest, iLayer;
    GLYPHSYM   *gs, *gsPrev;
    PATHNODE   *pnode;
    FLOAT		cost;
    SYM			sym;

	//
	// Search a linear list of pointers we have given out and see if this is
	// one of them.  By design we hand out pointers and the first dword is used
	// by penwin to write in.
	//

    iLayer = min(CLayerPATHSRCH(xrc), CLayerProcessedSINFO(xrc));

	if (iLayer == 0)
		return;

	ASSERT(iLayer <= xrc->cQueue);

	iLayer--;

    gs = GetGlyphsymSINFO(xrc, iLayer);

	ASSERT(CSymGLYPHSYM(gs) > 0);

    //
    // Find the first valid node for our initial cost.
    //

    for (inode=0; inode < gs->cPath; inode++)
    {
        pnode = PathnodeAtGLYPHSYM(gs, inode);

        if (pnode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(pnode))
            continue;
        else
        {
            ibest = inode;
            cost = pnode->pathcost;
            break;
        }
    }

    ASSERT(ibest < gs->cPath);

    //
    // Now see if anyone else has a better score.
    //

    for (inode=ibest+1; inode < gs->cPath; inode++)
    {
        pnode = PathnodeAtGLYPHSYM(gs, inode);

        if (pnode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(pnode))
            continue;

        if (pnode->pathcost > cost)
        {
            ibest = inode;
            cost = pnode->pathcost;
        }
    }

    //
    // Now trace the path back and write the best path character in syvBestPath
    // 

	while (gs)
    {
        ASSERT(iLayer >= 0);
        ASSERT(ILayerGLYPHSYM(gs) == iLayer);

		sym = gs->rgPathnode[ibest].wch;
		if (sym == SYM_UNKNOWN)
            gs->syvBestPath = SYV_NULL;
		else
            gs->syvBestPath = sym;

		pnode = PathnodeAtGLYPHSYM(gs, ibest);
        ibest = pnode->indexPrev;
        gsPrev = GetPrevGLYPHSYM(gs);
		gs = gsPrev;

        iLayer--;
    }
}

// *******************************
//
// GetBoxResultsXRC()
//
// fills in the current boxed input results.
//
// Arguments:
//
// Returns:
//
// Note:       none
//
// *******************************

int PUBLIC GetBoxResultsXRC(XRC *xrc, int cAlt, int iSyv, int cSyv, LPBOXRESULTS rgBoxResults, BOOL fInkset)
{
    int  i, iSyvRet, iSyvMax;
    int  iRet = 0;
    int  res = HWX_SUCCESS;
    LPBOXRESULTS lpbox = rgBoxResults;

    ASSERT(xrc);
    ASSERT(rgBoxResults);

    if (!FBoxedSINFO(xrc))
    {
        return(HRCR_ERROR);
    }

    iSyvMax = CLayerProcessedSINFO(xrc);

    iSyvMax = min(iSyvMax, CLayerPATHSRCH(xrc));

    iSyvMax = min((iSyv + cSyv), iSyvMax);

    FindBestPathXRC(xrc);  // Says to find the best path available.

    for (i=iSyv; i < iSyvMax; i++)
    {
        lpbox->hinksetBox = (HINKSET)NULL;

        res = GetBoxResultsSINFO(xrc, cAlt, i, lpbox, fInkset);

        if (res != HWX_SUCCESS)
        {
            //
            // There are no more results so no point in continuing
            // or there has been an error
            //

            break;
        }

        iRet++;

        //
        // Delete duplicates in Alt list.  Folding to SBCS or
        // unfolding of alternates may have created duplicates
        // in the list.
        //

        for (iSyvRet = 0; iSyvRet < cAlt; iSyvRet++)
        {
            int iRest;

            if (lpbox->rgSyv[iSyvRet] == SYV_NULL)
            {
                break;  // All done.
            }

            for (iRest = iSyvRet + 1; iRest < cAlt; iRest++)
            {
                if (lpbox->rgSyv[iSyvRet] == lpbox->rgSyv[iRest])
                {
                    int iCopy;

                    for (iCopy = iRest; iCopy < (cAlt - 1); iCopy++)
                    {
                        lpbox->rgSyv[iCopy] = lpbox->rgSyv[iCopy + 1];
                    }

                    lpbox->rgSyv[cAlt-1] = SYV_NULL;
                }
            }
        }

        lpbox = (LPBOXRESULTS)(((LPBYTE)lpbox) +
                    (sizeof(BOXRESULTS) + (cAlt - 1) * sizeof(SYV)));
    }

    return(iRet);
}

int PUBLIC SetAlphabet(RECMASK *precmask, ALC alcIn, RECMASK recmaskDef)
{
	RECMASK recmask;

    if (alcIn == ALC_DEFAULT)
    {
		recmask = recmaskDef;
    }
	else
    {
		if (UnsupportedOrBitmapALC(alcIn))
            return(HRCR_ERROR);

		recmask = RecmaskFromALC(alcIn);
    }

	// we know that everything is kosher now so the recmask can be set now

	*precmask = recmask;

    return(HRCR_OK);
}

/******************************Public*Routine******************************\
* InitializeCHARSET
*
* Inits the Charset info with the default info if a template wasn't provided.
* Otherwise uses the info in the template.
*
* History:
*  24-Mar-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

BOOL InitializeCHARSET(CHARSET *cs, CHARSET *csTemplate)
{
    if (!csTemplate)
        *cs = csDefault;			// use the global default settings.
    else
    {
        *cs = *csTemplate;
    }

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\xrc.h ===
#ifndef __INCLUDE_XRC
#define __INCLUDE_XRC

#define XRC_PROCESS_IDLE       0
#define XRC_PROCESS_TIMEOUT    1
#define XRC_PROCESS_GESTURE    5

#define CRESULT_DEFAULT        32
#define SCH_DEFAULT            SCH_ADVISE

typedef struct tagXRC
{
// These fields used to be in the PATHSRCH object

	int			cLayer;         // number of layers (boxes) processed so far
	int			cResult;
	int			cResultBuf;

// For partial character recognition and aborting any recognition

	int			nPartial;		// What type of completion should we do?
	DWORD		cstrkRaw;		// Unprocessed stroke count
	DWORD	   *pdwAbort;		// Abort address

// These fields used to be in the SINFO object

    BOOL		fUpdate;		// True when event (ink / EndOfInk) occurs that makes
								// us need to try classifying dirty glyphsyms.

	int			ixBox;			// boxed input:  index of last ixBox in GUIDE
    int			iyBox;			// boxed input:  index of last iyBox in GUIDE
    int			cPntLastFrame;	// number of points in the last frame processed

    int			cFrame;			// number of frames processed
    int			cQueue;			// number of queue elements
    int			cQueueMax;		// size of the queue

    GLYPHSYM  **ppQueue;		// Array of Glyphsyms.
    GLYPHSYM   *gsMinUpdated;	// Smallest iLayer of modified GLYPHSYMS that
								// has been re-classified - restart the path
								// search at this glyphsym.
    GLYPHSYM   *gsLastInkAdded;	// Box that the last ink was added to, we only
								// work up to the box before the box that is still
								// getting ink added.
				
// These fields used to be in the XRCPARAM object

    GUIDE       guide;          // guide structure
    UINT		uGuideType;     // guide type.
    UINT		nFirstBox;
    UINT		cResultMax;
    WCHAR		symPrev;        // 0 if no previous character, otherwise hex value of char.
    CHARSET		cs;
    BOOL		fEndInput;      // Set when no more input for this HRC is coming.
    BOOL		fBeginProcess;  // Set when ProcessHRC is called.  Once set we don't allow
								// the HRC's recognition settings (ALC,Guide,Maxresults,etc)
								// to be changed.

// These fields used to be in the INPUT object

	STROKEINFO	si;				// current strokeinfo
	int			cInput;			// number of frames processed so far
	int			cInputMax;		// size of the array
	FRAME	  **rgFrame;		// array of frame elements
} XRC;

#define	GetAlphabetXRC(xrc, lpalcIn, rgbfalcIn) 		\
				(GetAlphabet((xrc)->cs.recmask,	lpalcIn))

#define	SetAlphabetXRC(xrc, alcIn, rgbfalcIn)				\
				(SetAlphabet(&((xrc)->cs.recmask), alcIn,	\
				csDefault.recmask))

#define	GetAlphabetPriorityXRC(xrc, lpalcIn, rgbfalcIn) 		\
				(GetAlphabet((xrc)->cs.recmaskPriority, lpalcIn))

#define	SetAlphabetPriorityXRC(xrc, alcIn, rgbfalcIn)				\
				(SetAlphabet(&((xrc)->cs.recmaskPriority), alcIn,	\
				RECMASK_NOPRIORITY))

#define	SetEndInputXRC(xrc, f)		(SetEndInputXRCPARAM((xrc), f))
#define	IsEndOfInkXRC(xrc)			(FEndInputXRCPARAM((xrc)))
#define	GetMaxResultsXRC(xrc)	((int)((xrc)->cResultMax))
#define	SetMaxResultsXRC(xrc, c)	((xrc)->cResultMax = (UINT)(c), TRUE)

int  PUBLIC SetPrivateRecInfoXRC(XRC *xrc, WPARAM wparam, LPARAM lparam);
int  PUBLIC GetPrivateRecInfoXRC(XRC *xrc, WPARAM wparam, LPARAM lparam);
BOOL PUBLIC InitializeXRC(XRC *xrc, XRC *xrcDefault, HANDLE hrec);
void PUBLIC DestroyXRC(XRC *xrc);
int	 PUBLIC SchedulerXRC(XRC *xrc);
int	 PUBLIC SetGuideXRC(XRC *xrc, LPGUIDE lpguide, UINT nFirst);
BOOL PUBLIC SetTimeoutXRC(XRC *xrc, DWORD timeout);
int	 PUBLIC GetBoxResultsXRC(XRC *xrc, int cAlt, int iBox, int cBox, LPBOXRESULTS rgBoxResults, BOOL fInkset);
int	 PUBLIC ProcessTimeoutXRC(XRC *xrc);
int	 PUBLIC GetAlphabet(RECMASK recmask, LPALC lpalcIn);
int  PUBLIC SetAlphabet(RECMASK *precmask, ALC alcIn, RECMASK recmaskDef);
BOOL PUBLIC SetPartialXRC(XRC *xrc, DWORD dw);
BOOL PUBLIC SetAbortXRC(XRC *xrc, DWORD *pdw);

#endif	// __INCLUDE_XRC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\global.h ===
// global.h

#ifndef GLOBAL_H
#define GLOBAL_H

extern ROMMABLE RECCOSTS defRecCosts;

// all static and dynamic objects must go here so we can avoid all that nasty
// forward referencing currently going on in the .h files

typedef  VOID FAR *GHANDLE;

typedef struct tagGLOBAL
{
   GHANDLE		*rgHandleValid;
   int			cHandleValid;
   int			cHandleValidMax;
   ABSTIME		atTickRef;
   int			nSamplingRate;	// samples / second
} GLOBAL;

#define CLUSTER_DELTAMEAS 2
#define CLUSTER_CMEASMAX 50

extern GLOBAL NEAR global;

#define RgHandleValidGlobal()    global.rgHandleValid
#define CHandleValidGlobal()     global.cHandleValid
#define CHandleValidMaxGlobal()  global.cHandleValidMax
#define AtTickRefGlobal()        global.atTickRef
#define NSamplingRateGlobal()    global.nSamplingRate

#ifdef DBG
#define  CB_DEBUGSTRING 256
extern TCHAR szDebugString[];
#endif //DBG

#define CHANDLE_ALLOC      8

#define AddValidHRC(hrc)      AddValidHANDLE((GHANDLE)hrc, &RgHandleValidGlobal(), &CHandleValidGlobal(), &CHandleValidMaxGlobal())
#define RemoveValidHRC(hrc)   RemoveValidHANDLE((GHANDLE)hrc, RgHandleValidGlobal(), &CHandleValidGlobal())
#define VerifyHRC(hrc)        VerifyHANDLE((GHANDLE)hrc, RgHandleValidGlobal(), CHandleValidGlobal())

#define AddValidWORDLIST(hwl)    AddValidHANDLE((GHANDLE)hwl, &RgHandleValidGlobal(), &CHandleValidGlobal(), &CHandleValidMaxGlobal())
#define RemoveValidWORDLIST(hwl) RemoveValidHANDLE((GHANDLE)hwl, RgHandleValidGlobal(), &CHandleValidGlobal())
#define VerifyWORDLIST(hwl)      VerifyHANDLE((GHANDLE)hwl, RgHandleValidGlobal(), CHandleValidGlobal())

#define AddValidHRCRESULT(hrcres)      AddValidHANDLE((GHANDLE)hrcres, &RgHandleValidGlobal(), &CHandleValidGlobal(), &CHandleValidMaxGlobal())
#define RemoveValidHRCRESULT(hrcres)   RemoveValidHANDLE((GHANDLE)hrcres, RgHandleValidGlobal(), &CHandleValidGlobal())
#define VerifyHRCRESULT(hrcres)        VerifyHANDLE((GHANDLE)hrcres, RgHandleValidGlobal(), CHandleValidGlobal())

BOOL InitGLOBAL(VOID);
void DestroyGLOBAL(VOID);

BOOL PUBLIC AddValidHANDLE(GHANDLE handle, GHANDLE **prgHandle, int *pcHandle, int *pcHandleMax);
VOID PUBLIC RemoveValidHANDLE(GHANDLE handle, GHANDLE *rgHandle, int *pcHandle);
BOOL PUBLIC VerifyHANDLE(GHANDLE handle, GHANDLE *rgHandle, int cHandle);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\glyphsym.c ===
//
// File: glyphsym.c
//
// Contains ADT for GLYPHSYM object.
// This object is responsible for keeping the symbol
// information associated with a glyph (group of strokes).
// It invokes the classifier to get the possible symbol
// interpretation for the given ink.  Maintains this information
// for the ENGINE object to use.
//

#include "tsunamip.h"

// *******************************
// 
// CreateGLYPHSYM()
//
// constructor for GLYPHSYM object
//
// Arguments:  iFrame = index of the last frame in the glyph
//
// Returns:    
//
// Note:       glyph is destroyed by the object
//                                
// *******************************

VOID PUBLIC InitializeGLYPHSYM(GLYPHSYM *glyphsym, DWORD status, int iBox, GLYPH * glyph, CHARSET * cs)
{
   ASSERT(glyphsym);
   ASSERT(glyph);

   glyphsym->status = status;
   glyphsym->iLayer = -1;
   glyphsym->iBox = iBox;
   glyphsym->cFrame = CframeGLYPH(glyph);
   glyphsym->iEnd = IFrameFRAME(FrameAtGLYPH(glyph, CframeGLYPH(glyph)-1));
   glyphsym->iBegin = IFrameFRAME(FrameAtGLYPH(glyph, 0));
   ASSERT(glyphsym->iBegin >= 0);

	GetRectGLYPH(glyph, LprectGLYPHSYM(glyphsym));

	glyphsym->glyph = glyph;
}


// *******************************
//
// DestroyGLYPHSYM()
//
// destroys a glyphsym object.
//
// Arguments:  glyphsym - object to be destroyed
//
// Returns:    none
//
// Note:       none
//
// *******************************

void PUBLIC DestroyGLYPHSYM(GLYPHSYM * glyphsym)
{
    if (!glyphsym)
    {
        return;
    }

    if (glyphsym->glyph)
	{
		DestroyFramesGLYPH(glyphsym->glyph);
        DestroyGLYPH(glyphsym->glyph);
	}

    ExternFree(glyphsym);
}

// *******************************
// 
// AddFrameGLYPHSYM()
//
// changes the content of GS by adding a new frame to the glyph.
// updates all the internal fields.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************

BOOL PUBLIC AddFrameGLYPHSYM(GLYPHSYM * glyphsym, FRAME * frame, CHARSET * cs, XRC *xrc)
{
    GLYPH *glyph;

    ASSERT(frame);

    glyph = GlyphGLYPHSYM(glyphsym);

    if (glyph != NULL)
    {
        if (!AddFrameGLYPH(glyph, frame))
			return FALSE;

        GetRectGLYPH(glyph, LprectGLYPHSYM(glyphsym));

        glyphsym->iEnd = IFrameFRAME(frame);
        glyphsym->cFrame = CframeGLYPH(glyph);
        glyphsym->iBegin = IFrameFRAME(FrameAtGLYPH(glyph, 0));
        
		return TRUE;
    }
    else
    {
        WARNING(FALSE);
        return(FALSE);
    }
}

/******************************Public*Routine******************************\
* DispatchGLYPHSYM
*
* Sends the glyph to the appropriate shape classifier.
*
* History:
*  23-Jan-1995 -by- Patrick Haluptzok patrickh
* Commented it.
\**************************************************************************/
VOID PUBLIC DispatchGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc)
{
    void *v;
    GLYPH   *glyph = GlyphGLYPHSYM(gs);

    gs->altlist.cAlt = 0;

    ASSERT(IsDirtyGLYPHSYM(gs));

	if (!glyph)
		return;
    
    v = TigerMatch(&gs->altlist, MAX_ALT_LIST, glyph, &xrc->guide, &gs->rect, gs->iBox, cs);
	MarkCleanGLYPHSYM(gs);
    TigerMatchCleanUp(v);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\glyphsym.h ===
#ifndef  _INCLUDE_GLYPHSYM
#define  _INCLUDE_GLYPHSYM

#define MAX_PATH_LIST        512
#define DEF_BOX_INDEX        -1

#define  GSST_BOX             (DWORD)2      // Box input mode
#define  GSST_DIRTY           (DWORD)64     // This GS needs to be recognized - frames have
                                            // been added to it.
// The PATHNODE is stored in the GLYPHSYM, but used by the PATH code.

typedef struct tagPATHNODE
{
    DWORD state;        // State the node is in.
    WORD extra;         // State within the state the node is in.
    BYTE iAutomaton;    // Automaton the node is in.
    BYTE bReferenced;   // If this node is referenced by the following layer.
    FLOAT pathcost;     // cummulative path cost including this node
    short indexPrev;    // index in the prev GLYPHSYM of the previous node in this path
    wchar_t wch;        // The character this node represents.
} PATHNODE;

// GLYPHSYM object abstract data type

typedef struct tagGLYPHSYM
{
	ALT_LIST	altlist;		// The best guesses from the shape matcher
	DWORD		status;			// GSST status values (above)
	int			iBox;			// Box number in the GUIDE	
	GLYPH	   *glyph;			// digested ink associated with these guesses
	RECT		rect;			// bounding rect of ink in the glyph(s)
	SYV			syvBestPath;	// What the syv is on the best path by context.
	int			iBegin;			// index of the first frame in the glyph
	int			iEnd;			// index of the last frame in the glyph
	int			cFrame;			// number of frames in the glyph
	int			iLayer;			// layer index in SINFO
    struct tagGLYPHSYM *prev;   // previous glyphsym

    char        rgReferenced[MAX_PATH_LIST];
    PATHNODE    rgPathnode[MAX_PATH_LIST];

	int cPath;

} GLYPHSYM;

VOID PUBLIC InitializeGLYPHSYM(GLYPHSYM *gs, DWORD status, int iBox, GLYPH * glyph, CHARSET * cs);
void PUBLIC DestroyGLYPHSYM(GLYPHSYM * glyphsym); 
BOOL PUBLIC IsSymInGLYPHSYM(GLYPHSYM * gs, SYM sym, int * index);

#define	CopyGLYPHSYM(gsDest, gsSrc)	(*(gsDest) = *(gsSrc))
#define	IsFrameInGLYPHSYM(gs, iframe)	(IsFrameInGLYPH((gs)->glyph, iframe))

#define	CSymGLYPHSYM(gs)				((gs)->altlist.cAlt)
#define	SymAtGLYPHSYM(gs, i)			((gs)->altlist.awchList[i])
#define	LprectGLYPHSYM(gs)			((LPRECT)&((gs)->rect))

#define	PathnodeAtGLYPHSYM(gs, i)	((PATHNODE *)&((gs)->rgPathnode[i]))
#define	ProbAtGLYPHSYM(gs, i)    ((gs)->altlist.aeScore[i])
#define  GlyphGLYPHSYM(gs)        ((gs) ? ((gs)->glyph) : (NULL))
#define  GetPrevGLYPHSYM(gs)      ((gs)->prev)
#define  IFrameBeginGLYPHSYM(gs)  ((gs)->iBegin)
#define  IFrameEndGLYPHSYM(gs)    ((gs)->iEnd)
#define  CFrameGLYPHSYM(gs)       ((gs)->cFrame)
#define  ILayerGLYPHSYM(gs)       ((gs)->iLayer)
#define  IBoxGLYPHSYM(gs)         ((gs)->iBox)
#define  SetILayerGLYPHSYM(gs,i)  ((gs)->iLayer = (i))

FLOAT PUBLIC MinShapeCostGLYPHSYM(GLYPHSYM *gs);

#define	IsDirtyGLYPHSYM(gs)		(((gs)->status & GSST_DIRTY) != 0)
#define	MarkDirtyGLYPHSYM(gs)	((gs)->status = (gs)->status | GSST_DIRTY)
#define	MarkCleanGLYPHSYM(gs)	((gs)->status = (gs)->status & ~GSST_DIRTY)

BOOL PUBLIC IsCharValidInCharset(WORD wDbcs, CHARSET *cs, UINT iBox);

#endif	//__INCLUDE_GLYPHSYM
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\snot\xrcparam.h ===
/******************************Module*Header*******************************\
* Module Name: xrcparam.h
*
* This is the structure that holds all the parameters that can be set into
* an HRC by the application.  When creating a compatible HRC these are most
* of the settings that need to be copied to the new HRC.
*
* Created: 27-Mar-1995 15:35:41
*
* Copyright (c) 1995 Microsoft Corporation
\**************************************************************************/

#ifndef __INCLUDE_XRCPARAM
#define __INCLUDE_XRCPARAM

#define	XPGUIDE_NONE	0
#define	XPGUIDE_BOXED	1
#define	XPGUIDE_LINED	2

#define	LpguideXRCPARAM(xrc)			(&((xrc)->guide))
#define	FirstBoxXRCPARAM(xrc)			((xrc)->nFirstBox)
#define	ResultMaxXRCPARAM(xrc)			((xrc)->cResultMax)
#define	CharsetXRCPARAM(xrc)			((xrc)->cs)
#define	FBoxedInputXRCPARAM(xrc)		((xrc)->uGuideType == XPGUIDE_BOXED)
#define	FLinedInputXRCPARAM(xrc)		((xrc)->uGuideType == XPGUIDE_LINED)
#define	FFreeInputXRCPARAM(xrc)			((xrc)->uGuideType == XPGUIDE_NONE)
#define	FEndInputXRCPARAM(xrc)			((xrc)->fEndInput)
#define	SetEndInputXRCPARAM(xrc, f)		((xrc)->fEndInput = (f))
#define	FBeginProcessXRCPARAM(xrc)		((xrc)->fBeginProcess)
#define	SetBeginProcessXRCPARAM(xrc, f)	((xrc)->fBeginProcess = (f))

void DestroyXRCPARAM(XRC *xrc);
void InitializeGesturesXRCPARAM(XRC *xrc, XRC *xrcDef);
BOOL AddFrameGLYPHSYM(GLYPHSYM * gs, FRAME * frame, CHARSET * cs, XRC *xrc);
void GetShapeProbGLYPHSYM(GLYPHSYM *gs, CHARSET * cs, XRC *xrc);
void GetMatchProbGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc);
void InsertWildCardGLYPHSYM(GLYPHSYM * gs, CHARSET *cs, XRC *xrc);
void DispatchGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc);

#endif	//__INCLUDE_XRCPARAM
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\height.h ===
#ifndef	__INCLUDE_HEIGHT
#define	__INCLUDE_HEIGHT

#ifdef __cplusplus
extern "C" {
#endif

#define TYPE_BASE_MASK		(BYTE)0x0f
#define TYPE_HEIGHT_MASK    (BYTE)0xf0

#define BASE_NORMAL		0x00	// kanji, kana, numbers, etc
#define BASE_QUOTE		0x01	// upper punctuation, etc
#define BASE_DASH       0x02    // middle punctuation, etc
#define BASE_DESCENDER  0x03    // gy, anything that descends.
#define BASE_THIRD      0x04    // something that starts a third way up.

#define XHEIGHT_HALF  0x00    // lower-case, small kana, etc
#define XHEIGHT_FULL  0x10    // upper-case, kana, kanji, numbers, etc
#define XHEIGHT_PUNC  0x20    // comma, quote, etc
#define XHEIGHT_DASH  0x30    // dash, period, etc
#define XHEIGHT_3Q    0x40

typedef struct tagBOXINFO
{
    int   size;     // Absolute size.
    int   xheight;  // Absolute height to midline.
    int   baseline; // Baseline in tablet coordinates.
    int   midline;  // Midline in tablet coordinates.
} BOXINFO;

BYTE TypeFromSYM(SYM sym);
void GetBoxinfo(BOXINFO * boxinfo, int iBox, LPGUIDE lpguide);

#ifdef __cplusplus
}
#endif

#endif	//__INCLUDE_HEIGHT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\input.c ===
#include "tsunamip.h"

// ----------------------------------------------
// PURPOSE   : constructor for INPUT object
// RETURNS   : 
// CONDITION : 
// ----------------------------------------------

BOOL InitializeINPUT(XRC *xrc)
{
    ASSERT(xrc);

    xrc->rgFrame  = (FRAME **) ExternAlloc(sizeof(FRAME *) * DEF_BUFFER_SIZE);

	if (xrc->rgFrame == (FRAME **) NULL)
		return FALSE;

    xrc->cInputMax = DEF_BUFFER_SIZE;

	return TRUE;
}

// ----------------------------------------------
// PURPOSE   : destructor for INPUT object
// RETURNS   : TRUE iff object is destroyed
// CONDITION : 
// ----------------------------------------------

void DestroyINPUT(XRC *xrc)
{
    int i;

    if (xrc->rgFrame)
    {
        for (i=0; i < xrc->cInput; i++)
		{
			if (xrc->rgFrame[i] != (FRAME *) NULL)
				DestroyFRAME(xrc->rgFrame[i]);
		}

        ExternFree(xrc->rgFrame);
    }
}

// ----------------------------------------------
// PURPOSE   : store the ink input given by the user.
// RETURNS   : 
// CONDITION : lppnt may only contain portion of an entire stroke.
//					hence, we need to store the information from the 
//					previous stroke.  lppnt will not contain more than
//					one stroke.
// ----------------------------------------------

#ifdef PEGASUS
// ADDPOINTS is the count of "synthetic" points added between each pair of successive input points
#define ADDPOINTS 0
#else
#define ADDPOINTS 0
#endif

#define SQUARE(x) ((x)*(x))

BOOL AddPenInputINPUT(XRC *xrc, LPPOINT lppnt, LPSTROKEINFO lpsi, UINT duration)
{
    BOOL	bNewStroke;
	DWORD	cb;
	FRAME  *frame;
	POINT  *rgpnt;
	int		i;
	int		cPntTotal = lpsi->cPnt;
	int		cPntPrev = 0;
	int		cInput;
#if ADDPOINTS
	LPPOINT newLppnt = NULL;
	STROKEINFO newSi;
#endif

	ASSERT(xrc);
	ASSERT(xrc->rgFrame);
	ASSERT(lppnt);
    ASSERT(lpsi);

    //
    // We don't record the up strokes
    //

	if (!(lpsi->wPdk & PDK_DOWN))
    {
		xrc->si = *lpsi;
		return(TRUE);
    }

    if (lpsi->cPnt == 0)
    {
        return(TRUE);
    }

#if ADDPOINTS
	if (cPntTotal > 1)
	{
		int j, newCpntTotal, dx, dy, k;

		newCpntTotal = cPntTotal + ADDPOINTS*(cPntTotal-1);
		newLppnt = (LPPOINT) ExternAlloc(newCpntTotal*sizeof(POINT));
		if (newLppnt)
		{
			newLppnt[0] = lppnt[0];
			for (i=1, j=1; i<cPntTotal; i++)
			{
				dx = (lppnt[i].x - lppnt[i-1].x)/(ADDPOINTS+1);
				dy = (lppnt[i].y - lppnt[i-1].y)/(ADDPOINTS+1);
				for (k=0; k<ADDPOINTS; k++)
				{
					newLppnt[j].x = newLppnt[j-1].x + dx;
					newLppnt[j].y = newLppnt[j-1].y + dy;
					j++;
				}
				newLppnt[j++] = lppnt[i];
			}
			ASSERT(j == newCpntTotal);

			lppnt = newLppnt;
			newSi = *lpsi;
			lpsi = &newSi;
			lpsi->cPnt = cPntTotal = newCpntTotal;
			lpsi->cbPnts = lpsi->cPnt * sizeof(POINT);
		}
	}
#endif

    //
    // Double the stroke buffer size if we run out of room.
    //

	if (xrc->cInput == xrc->cInputMax)
    {
		FRAME **ppframe;

		i = xrc->cInputMax * 2;
		ppframe = (FRAME **) ExternRealloc(xrc->rgFrame, i * sizeof(FRAME *));

		if (ppframe == (FRAME **) NULL)
			return FALSE;

		xrc->rgFrame = ppframe;
		xrc->cInputMax = i;
    }

    //
    // Get the previous frame if it's still around.
    //

    if (xrc->cInput > 0)
        frame = xrc->rgFrame[xrc->cInput - 1];
    else
        frame = NULL;

    bNewStroke = (lpsi->wPdk & PDK_TRANSITION);

    //
    // If the beginning of the new stroke is really close to the end of the last
    // stroke we assume it was a pen skip and merge it in.  Basically we just
    // erase the PDK_TRANSITION bit so it doesn't get put in a new character.
    //

    if ((frame != NULL) &&        // Do we have a previous frame ?
        bNewStroke)              // Are we starting a new stroke ?
    {
        POINT ptLast, ptFirst;

        cPntPrev = frame->info.cPnt;
        ptLast = frame->rgrawxy[cPntPrev - 1];
        ptFirst = lppnt[0];

        if ((SQUARE(ptFirst.x - ptLast.x) + SQUARE(ptFirst.y - ptLast.y)) <= 100)
            bNewStroke = FALSE;

        cPntPrev = 0;
    }

    //
    // If we have received more of a stroke for an already down stroke record it.
    //

	cInput = xrc->cInput;

    if ((xrc->si.wPdk & PDK_DOWN) &&
         (!bNewStroke) &&
         (frame != NULL))
    {
        //
        // This is a continuation of an old frame.
        //

        ASSERT(xrc->cInput > 0);
		cPntPrev = frame->info.cPnt;
		cPntTotal += cPntPrev;

        cb = (DWORD)cPntTotal * (DWORD)sizeof(POINT);

		rgpnt = (POINT *) ExternRealloc(frame->rgrawxy, cb);
    }
    else
    {
        //
        // This is a new frame.
        //

        cb = (DWORD) cPntTotal * (DWORD) sizeof(POINT);

        if ((frame = NewFRAME()) == (FRAME *) NULL)
			return FALSE;

		xrc->rgFrame[xrc->cInput] = frame;
		frame->info = *lpsi;

		SetIFrameFRAME(frame, xrc->cInput);
		xrc->cInput++;

		rgpnt = (POINT *) ExternAlloc(cb);
    }

	// In the normal model we would clean up the allocation of the frames, but that will
	// be handled by its owner, not here.  We only have to verify that the new rawxy
	// buffer was successfully allocated.

	if (rgpnt == (POINT *) NULL)
	{
	// We may have to clean up the FRAME we allocated

		if (cInput != xrc->cInput)
		{
			xrc->cInput = cInput;
			xrc->rgFrame[cInput] = (FRAME *) NULL;
			DestroyFRAME(frame);
		}

		return FALSE;
	}

	ASSERT(rgpnt);
    ASSERT(duration);

    //
    // Copy the new points into the frame.
    //

	frame->info.cPnt = cPntTotal;
	frame->rgrawxy = (XY *)rgpnt;

    for (i = cPntPrev; i < cPntTotal; ++i)
    {
        rgpnt[i] = lppnt[i-cPntPrev];
    }

	DeInitRectFRAME(frame);

	xrc->si = *lpsi;

#if ADDPOINTS
	if (newLppnt)
	{
		ExternFree(newLppnt);
	}
#endif

	return TRUE;
}

// ----------------------------------------------
// PURPOSE   : retrieve a pointer to the processed ink xrc given by the user.
// RETURNS   : the size of the specified stroke, a pointer to the strokeinfo.
// ----------------------------------------------

UINT GetPenInputINPUT(XRC *xrc, int istroke, LPPOINT far * lplppnt, LPSTROKEINFO far * lplpsi)
	{
	int cPnt;
	FRAME* frame;

	if (istroke >= xrc->cInput)
		{
		*lplppnt = 0;
		return 0;
		}

	frame = xrc->rgFrame[istroke];

	cPnt = frame->info.cPnt;
	*lplpsi = &(frame->info);
	ASSERT(*lplpsi);

	*lplppnt = (LPPOINT) frame->rgrawxy;
	ASSERT(*lplppnt);

	return cPnt;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\input.h ===
#ifndef	__INCLUDE_INPUT
#define	__INCLUDE_INPUT

#define DEF_BUFFER_SIZE 100

// =================
//
// INPUT object
//
// This object is responsible for processing ink into
// a form usable by the recognizer.  It stores the
// processed ink (FRAMES) and makes it available to the
// public via the macro FrameAtINPUT.
//
// =================

BOOL InitializeINPUT(XRC *xrc);
void DestroyINPUT(XRC *xrc);
BOOL AddPenInputINPUT(XRC *xrc, LPPOINT lppnt, LPSTROKEINFO lpsi, UINT duration);
int  ProcessINPUT(XRC *xrc);
UINT GetPenInputINPUT(XRC *xrc, int istroke, LPPOINT far *lplppnt, LPSTROKEINFO far *lplpsi);

#define CFrameINPUT(input)  ((input)->cInput)
#define FrameAtINPUT(input, i)  ((i) < (input)->cInput ? (input)->rgFrame[i] : (FRAME *) NULL)

#endif	//__INCLUDE_INPUT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\log.h ===
extern const float rgLogarithm[];

#define LOGPROB(prob) \
	((prob) < 0 ? rgLogarithm[0] :   \
	 (prob) > 1 ? rgLogarithm[100] : \
	 rgLogarithm[(int)(100*(prob))])
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\log.c ===
#include "log.h"

const float rgLogarithm[101] = {
	(float)-6.907755, (float)-4.605170, (float)-3.912023, (float)-3.506558, (float)-3.218876, (float)-2.995732,
	(float)-2.813411, (float)-2.659260, (float)-2.525729, (float)-2.407946, (float)-2.302585, (float)-2.207275,
	(float)-2.120264, (float)-2.040221, (float)-1.966113, (float)-1.897120, (float)-1.832581, (float)-1.771957,
	(float)-1.714798, (float)-1.660731, (float)-1.609438, (float)-1.560648, (float)-1.514128, (float)-1.469676,
	(float)-1.427116, (float)-1.386294, (float)-1.347074, (float)-1.309333, (float)-1.272966, (float)-1.237874,
	(float)-1.203973, (float)-1.171183, (float)-1.139434, (float)-1.108663, (float)-1.078810, (float)-1.049822,
	(float)-1.021651, (float)-0.994252, (float)-0.967584, (float)-0.941609, (float)-0.916291, (float)-0.891598,
	(float)-0.867501, (float)-0.843970, (float)-0.820981, (float)-0.798508, (float)-0.776529, (float)-0.755023,
	(float)-0.733969, (float)-0.713350, (float)-0.693147, (float)-0.673345, (float)-0.653926, (float)-0.634878,
	(float)-0.616186, (float)-0.597837, (float)-0.579818, (float)-0.562119, (float)-0.544727, (float)-0.527633,
	(float)-0.510826, (float)-0.494296, (float)-0.478036, (float)-0.462035, (float)-0.446287, (float)-0.430783,
	(float)-0.415515, (float)-0.400478, (float)-0.385662, (float)-0.371064, (float)-0.356675, (float)-0.342490,
	(float)-0.328504, (float)-0.314711, (float)-0.301105, (float)-0.287682, (float)-0.274437, (float)-0.261365,
	(float)-0.248461, (float)-0.235722, (float)-0.223144, (float)-0.210721, (float)-0.198451, (float)-0.186330,
	(float)-0.174353, (float)-0.162519, (float)-0.150823, (float)-0.139262, (float)-0.127833, (float)-0.116534,
	(float)-0.105361, (float)-0.094311, (float)-0.083382, (float)-0.072571, (float)-0.061875, (float)-0.051293,
	(float)-0.040822, (float)-0.030459, (float)-0.020203, (float)-0.010050, (float)0.000000};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\bidata.c ===
#include "tsunamip.h"

const int cBigramCharacters = 82;

const BIGRAM rgBigrams[] = {

/*0000*/
        0x20, 14,
        0x00, 130,

/*0020*/
        0x20, 65,
        0x22, 123,
        0x23, 40,
        0x26, 67,
        0x27, 139,
        0x28, 118,
        0x2D, 104,
        0x2E, 152,
        0x30, 95,
        0x31, 51,
        0x32, 42,
        0x33, 52,
        0x34, 51,
        0x35, 52,
        0x36, 48,
        0x37, 53,
        0x38, 54,
        0x39, 57,
        0x41, 37,
        0x42, 48,
        0x43, 48,
        0x44, 60,
        0x45, 57,
        0x46, 56,
        0x47, 60,
        0x48, 59,
        0x49, 68,
        0x4A, 63,
        0x4B, 67,
        0x4C, 52,
        0x4D, 42,
        0x4E, 52,
        0x4F, 64,
        0x50, 52,
        0x51, 113,
        0x52, 55,
        0x53, 34,
        0x54, 65,
        0x55, 94,
        0x56, 79,
        0x57, 49,
        0x58, 137,
        0x59, 56,
        0x5A, 101,
        0x61, 76,
        0x62, 87,
        0x63, 89,
        0x64, 96,
        0x65, 99,
        0x66, 89,
        0x67, 107,
        0x68, 92,
        0x69, 85,
        0x6A, 130,
        0x6B, 126,
        0x6C, 100,
        0x6D, 94,
        0x6E, 103,
        0x6F, 85,
        0x70, 93,
        0x71, 141,
        0x72, 97,
        0x73, 85,
        0x74, 73,
        0x75, 109,
        0x76, 117,
        0x77, 88,
        0x79, 116,
        0x00, 255,

/*0021*/
        0x00, 123,

/*0022*/
        0x20, 12,
        0x00, 131,

/*0023*/
        0x20, 0,
        0x2C, 109,
        0x00, 245,

/*0024*/
        0x00, 123,

/*0026*/
        0x20, 0,
        0x2C, 72,
        0x00, 240,

/*0027*/
        0x20, 55,
        0x41, 65,
        0x42, 60,
        0x43, 60,
        0x44, 68,
        0x48, 73,
        0x4C, 74,
        0x4D, 76,
        0x4E, 61,
        0x52, 76,
        0x53, 3,
        0x64, 76,
        0x73, 43,
        0x74, 59,
        0x00, 173,

/*0028*/
        0x29, 100,
        0x32, 10,
        0x33, 24,
        0x34, 43,
        0x35, 50,
        0x36, 36,
        0x37, 29,
        0x38, 59,
        0x39, 117,
        0x65, 127,
        0x00, 220,

/*0029*/
        0x20, 0,
        0x2C, 109,
        0x2E, 112,
        0x00, 255,

/*002A*/
        0x2A, 3,
        0x00, 148,

/*002C*/
        0x20, 81,
        0x22, 140,
        0x28, 22,
        0x30, 65,
        0x31, 34,
        0x32, 48,
        0x33, 52,
        0x34, 54,
        0x35, 62,
        0x36, 53,
        0x37, 50,
        0x38, 55,
        0x39, 42,
        0x41, 56,
        0x42, 63,
        0x43, 41,
        0x44, 56,
        0x46, 80,
        0x47, 72,
        0x48, 55,
        0x49, 67,
        0x4B, 89,
        0x4C, 46,
        0x4D, 56,
        0x4E, 27,
        0x4F, 65,
        0x50, 85,
        0x52, 142,
        0x53, 64,
        0x54, 55,
        0x55, 139,
        0x57, 56,
        0x00, 255,

/*002D*/
        0x20, 81,
        0x2D, 114,
        0x30, 27,
        0x31, 32,
        0x32, 34,
        0x33, 35,
        0x34, 36,
        0x35, 37,
        0x36, 36,
        0x37, 34,
        0x38, 36,
        0x39, 39,
        0x41, 99,
        0x42, 99,
        0x43, 86,
        0x44, 107,
        0x45, 107,
        0x46, 109,
        0x47, 104,
        0x48, 106,
        0x49, 108,
        0x4A, 111,
        0x4B, 116,
        0x4C, 105,
        0x4D, 101,
        0x4E, 110,
        0x4F, 120,
        0x50, 103,
        0x51, 119,
        0x52, 107,
        0x53, 98,
        0x54, 107,
        0x55, 122,
        0x56, 127,
        0x57, 112,
        0x59, 125,
        0x61, 86,
        0x62, 87,
        0x63, 86,
        0x64, 84,
        0x65, 92,
        0x66, 87,
        0x67, 98,
        0x68, 88,
        0x69, 94,
        0x6A, 118,
        0x6B, 116,
        0x6C, 91,
        0x6D, 91,
        0x6E, 104,
        0x6F, 88,
        0x70, 86,
        0x72, 90,
        0x73, 79,
        0x74, 81,
        0x75, 95,
        0x76, 125,
        0x77, 94,
        0x79, 125,
        0x00, 240,

/*002E*/
        0x20, 4,
        0x22, 55,
        0x2E, 37,
        0x30, 40,
        0x63, 63,
        0x68, 66,
        0x00, 160,

/*002F*/
        0x41, 0,
        0x00, 211,

/*0030*/
        0x20, 40,
        0x29, 50,
        0x2B, 64,
        0x2C, 26,
        0x2D, 59,
        0x2E, 144,
        0x30, 18,
        0x31, 40,
        0x32, 34,
        0x33, 39,
        0x34, 47,
        0x35, 49,
        0x36, 44,
        0x37, 52,
        0x38, 55,
        0x39, 57,
        0x45, 118,
        0x4B, 143,
        0x4E, 130,
        0x53, 121,
        0x54, 88,
        0x57, 117,
        0x00, 245,

/*0031*/
        0x20, 44,
        0x2C, 40,
        0x2D, 39,
        0x2E, 120,
        0x30, 24,
        0x31, 31,
        0x32, 32,
        0x33, 26,
        0x34, 47,
        0x35, 47,
        0x36, 47,
        0x37, 39,
        0x38, 51,
        0x39, 48,
        0x41, 117,
        0x42, 122,
        0x43, 124,
        0x44, 130,
        0x45, 126,
        0x46, 138,
        0x47, 141,
        0x48, 139,
        0x53, 79,
        0x54, 113,
        0x00, 243,

/*0032*/
        0x20, 64,
        0x29, 31,
        0x2C, 42,
        0x2D, 44,
        0x2E, 118,
        0x30, 26,
        0x31, 23,
        0x32, 36,
        0x33, 41,
        0x34, 43,
        0x35, 42,
        0x36, 46,
        0x37, 48,
        0x38, 50,
        0x39, 47,
        0x41, 119,
        0x42, 138,
        0x43, 139,
        0x4E, 78,
        0x54, 100,
        0x00, 244,

/*0033*/
        0x20, 53,
        0x29, 24,
        0x2C, 34,
        0x2D, 38,
        0x2E, 136,
        0x30, 32,
        0x31, 28,
        0x32, 45,
        0x33, 38,
        0x34, 45,
        0x35, 46,
        0x36, 44,
        0x37, 48,
        0x38, 48,
        0x39, 49,
        0x41, 125,
        0x42, 133,
        0x52, 73,
        0x54, 90,
        0x57, 131,
        0x00, 245,

/*0034*/
        0x20, 51,
        0x29, 41,
        0x2C, 32,
        0x2D, 39,
        0x30, 28,
        0x31, 37,
        0x32, 39,
        0x33, 41,
        0x34, 33,
        0x35, 38,
        0x36, 42,
        0x37, 43,
        0x38, 39,
        0x39, 48,
        0x41, 127,
        0x42, 129,
        0x44, 128,
        0x54, 72,
        0x00, 233,

/*0035*/
        0x20, 34,
        0x29, 57,
        0x2C, 31,
        0x2D, 38,
        0x30, 27,
        0x31, 38,
        0x32, 34,
        0x33, 45,
        0x34, 48,
        0x35, 32,
        0x36, 45,
        0x37, 42,
        0x38, 47,
        0x39, 47,
        0x45, 116,
        0x54, 58,
        0x57, 122,
        0x00, 232,

/*0036*/
        0x20, 55,
        0x29, 44,
        0x2C, 31,
        0x2D, 38,
        0x30, 29,
        0x31, 30,
        0x32, 35,
        0x33, 40,
        0x34, 42,
        0x35, 40,
        0x36, 39,
        0x37, 42,
        0x38, 42,
        0x39, 50,
        0x41, 125,
        0x54, 68,
        0x00, 234,

/*0037*/
        0x20, 54,
        0x29, 41,
        0x2C, 32,
        0x2D, 36,
        0x30, 28,
        0x31, 28,
        0x32, 43,
        0x33, 46,
        0x34, 48,
        0x35, 39,
        0x36, 50,
        0x37, 30,
        0x38, 47,
        0x39, 50,
        0x46, 122,
        0x54, 64,
        0x00, 239,

/*0038*/
        0x20, 53,
        0x29, 70,
        0x2C, 32,
        0x2D, 35,
        0x30, 30,
        0x31, 27,
        0x32, 38,
        0x33, 42,
        0x34, 45,
        0x35, 41,
        0x36, 43,
        0x37, 40,
        0x38, 35,
        0x39, 41,
        0x54, 66,
        0x00, 232,

/*0039*/
        0x20, 44,
        0x29, 118,
        0x2C, 32,
        0x2D, 34,
        0x30, 19,
        0x31, 43,
        0x32, 44,
        0x33, 42,
        0x34, 47,
        0x35, 40,
        0x36, 39,
        0x37, 45,
        0x38, 40,
        0x39, 43,
        0x45, 118,
        0x54, 66,
        0x00, 233,

/*003A*/
        0x20, 1,
        0x00, 160,

/*003B*/
        0x20, 0,
        0x00, 177,

/*003E*/
        0x00, 123,

/*0041*/
        0x20, 40,
        0x27, 97,
        0x2C, 28,
        0x2D, 118,
        0x41, 102,
        0x42, 75,
        0x43, 55,
        0x44, 58,
        0x45, 72,
        0x46, 76,
        0x47, 55,
        0x48, 77,
        0x49, 62,
        0x4A, 105,
        0x4B, 70,
        0x4C, 41,
        0x4D, 48,
        0x4E, 23,
        0x4F, 109,
        0x50, 70,
        0x51, 119,
        0x52, 35,
        0x53, 39,
        0x54, 37,
        0x55, 55,
        0x56, 37,
        0x57, 63,
        0x58, 101,
        0x59, 59,
        0x5A, 88,
        0x62, 124,
        0x63, 131,
        0x64, 99,
        0x65, 137,
        0x66, 126,
        0x67, 135,
        0x6B, 139,
        0x6C, 103,
        0x6D, 110,
        0x6E, 104,
        0x70, 128,
        0x72, 107,
        0x73, 111,
        0x74, 120,
        0x75, 118,
        0x76, 136,
        0x00, 239,

/*0042*/
        0x20, 45,
        0x2C, 63,
        0x2D, 95,
        0x41, 33,
        0x42, 69,
        0x43, 98,
        0x44, 108,
        0x45, 24,
        0x48, 95,
        0x49, 47,
        0x4C, 22,
        0x4D, 104,
        0x4E, 103,
        0x4F, 26,
        0x52, 33,
        0x53, 68,
        0x55, 46,
        0x57, 88,
        0x59, 62,
        0x61, 70,
        0x65, 72,
        0x69, 89,
        0x6C, 92,
        0x6F, 57,
        0x72, 76,
        0x75, 77,
        0x79, 110,
        0x00, 207,

/*0043*/
        0x20, 43,
        0x2C, 34,
        0x2D, 120,
        0x41, 19,
        0x43, 81,
        0x44, 107,
        0x45, 37,
        0x47, 122,
        0x48, 24,
        0x49, 39,
        0x4B, 49,
        0x4C, 44,
        0x4D, 114,
        0x4E, 112,
        0x4F, 38,
        0x50, 88,
        0x51, 108,
        0x52, 65,
        0x53, 89,
        0x54, 51,
        0x55, 60,
        0x59, 74,
        0x5A, 103,
        0x61, 80,
        0x65, 112,
        0x68, 85,
        0x69, 114,
        0x6C, 101,
        0x6F, 75,
        0x72, 100,
        0x75, 106,
        0x79, 121,
        0x00, 226,

/*0044*/
        0x20, 19,
        0x27, 94,
        0x2C, 19,
        0x2D, 109,
        0x41, 38,
        0x42, 90,
        0x43, 38,
        0x44, 69,
        0x45, 36,
        0x46, 97,
        0x47, 73,
        0x48, 97,
        0x49, 44,
        0x4B, 109,
        0x4C, 76,
        0x4D, 72,
        0x4E, 88,
        0x4F, 47,
        0x52, 46,
        0x53, 58,
        0x54, 94,
        0x55, 70,
        0x56, 101,
        0x57, 52,
        0x59, 69,
        0x5A, 101,
        0x61, 90,
        0x65, 89,
        0x69, 91,
        0x6F, 94,
        0x72, 110,
        0x75, 100,
        0x00, 221,

/*0045*/
        0x20, 25,
        0x27, 92,
        0x2C, 39,
        0x2D, 107,
        0x41, 46,
        0x42, 83,
        0x43, 69,
        0x44, 56,
        0x45, 56,
        0x46, 76,
        0x47, 74,
        0x48, 90,
        0x49, 64,
        0x4A, 123,
        0x4B, 94,
        0x4C, 29,
        0x4D, 70,
        0x4E, 38,
        0x4F, 77,
        0x50, 71,
        0x51, 125,
        0x52, 30,
        0x53, 30,
        0x54, 51,
        0x55, 79,
        0x56, 57,
        0x57, 41,
        0x58, 78,
        0x59, 46,
        0x5A, 88,
        0x61, 124,
        0x64, 129,
        0x69, 135,
        0x6C, 121,
        0x6D, 123,
        0x6E, 124,
        0x70, 138,
        0x72, 123,
        0x73, 124,
        0x75, 120,
        0x76, 130,
        0x78, 124,
        0x00, 237,

/*0046*/
        0x20, 35,
        0x2C, 61,
        0x41, 35,
        0x43, 76,
        0x44, 108,
        0x45, 32,
        0x46, 28,
        0x47, 106,
        0x49, 24,
        0x4B, 104,
        0x4C, 33,
        0x4D, 68,
        0x4E, 99,
        0x4F, 35,
        0x52, 33,
        0x53, 87,
        0x54, 68,
        0x55, 61,
        0x57, 58,
        0x59, 92,
        0x61, 85,
        0x65, 87,
        0x69, 75,
        0x6C, 93,
        0x6F, 81,
        0x72, 74,
        0x75, 95,
        0x00, 209,

/*0047*/
        0x20, 39,
        0x27, 102,
        0x2C, 56,
        0x2D, 110,
        0x41, 33,
        0x42, 93,
        0x44, 98,
        0x45, 15,
        0x46, 99,
        0x47, 78,
        0x48, 57,
        0x49, 55,
        0x4B, 118,
        0x4C, 55,
        0x4D, 94,
        0x4E, 74,
        0x4F, 33,
        0x52, 35,
        0x53, 77,
        0x54, 30,
        0x55, 47,
        0x57, 85,
        0x59, 69,
        0x61, 86,
        0x65, 88,
        0x69, 101,
        0x6C, 108,
        0x6F, 89,
        0x72, 87,
        0x75, 98,
        0x00, 222,

/*0048*/
        0x20, 25,
        0x27, 98,
        0x2C, 39,
        0x2D, 100,
        0x41, 31,
        0x42, 100,
        0x43, 100,
        0x44, 103,
        0x45, 34,
        0x46, 106,
        0x47, 107,
        0x48, 123,
        0x49, 22,
        0x4B, 112,
        0x4C, 72,
        0x4D, 75,
        0x4E, 52,
        0x4F, 25,
        0x50, 112,
        0x52, 59,
        0x53, 91,
        0x54, 52,
        0x55, 49,
        0x56, 106,
        0x57, 73,
        0x59, 68,
        0x61, 85,
        0x65, 84,
        0x69, 96,
        0x6F, 89,
        0x75, 101,
        0x00, 234,

/*0049*/
        0x20, 53,
        0x27, 102,
        0x2C, 43,
        0x2D, 108,
        0x41, 38,
        0x42, 82,
        0x43, 28,
        0x44, 51,
        0x45, 49,
        0x46, 69,
        0x47, 52,
        0x48, 98,
        0x49, 69,
        0x4A, 110,
        0x4B, 80,
        0x4C, 32,
        0x4D, 61,
        0x4E, 21,
        0x4F, 55,
        0x50, 71,
        0x51, 92,
        0x52, 43,
        0x53, 38,
        0x54, 41,
        0x55, 95,
        0x56, 65,
        0x57, 114,
        0x58, 88,
        0x59, 105,
        0x5A, 75,
        0x66, 131,
        0x6C, 130,
        0x6E, 84,
        0x72, 119,
        0x73, 112,
        0x74, 107,
        0x00, 230,

/*004A*/
        0x20, 21,
        0x27, 98,
        0x2C, 92,
        0x41, 24,
        0x45, 28,
        0x49, 59,
        0x4F, 20,
        0x52, 33,
        0x55, 47,
        0x61, 69,
        0x65, 76,
        0x69, 97,
        0x6F, 74,
        0x75, 77,
        0x00, 198,

/*004B*/
        0x20, 22,
        0x27, 87,
        0x2C, 16,
        0x2D, 106,
        0x41, 36,
        0x42, 104,
        0x43, 111,
        0x45, 30,
        0x46, 85,
        0x48, 74,
        0x49, 36,
        0x4B, 105,
        0x4C, 54,
        0x4D, 75,
        0x4E, 74,
        0x4F, 52,
        0x52, 64,
        0x53, 58,
        0x54, 103,
        0x55, 63,
        0x57, 77,
        0x59, 57,
        0x61, 78,
        0x65, 83,
        0x68, 104,
        0x69, 88,
        0x6C, 110,
        0x6F, 90,
        0x72, 100,
        0x75, 100,
        0x00, 209,

/*004C*/
        0x20, 35,
        0x27, 103,
        0x2C, 42,
        0x2D, 108,
        0x41, 30,
        0x42, 80,
        0x43, 84,
        0x44, 55,
        0x45, 22,
        0x46, 85,
        0x47, 95,
        0x48, 95,
        0x49, 40,
        0x4B, 85,
        0x4C, 38,
        0x4D, 75,
        0x4E, 82,
        0x4F, 27,
        0x50, 82,
        0x52, 86,
        0x53, 51,
        0x54, 64,
        0x55, 57,
        0x56, 41,
        0x57, 101,
        0x59, 59,
        0x5A, 77,
        0x61, 96,
        0x65, 100,
        0x69, 57,
        0x6F, 104,
        0x75, 109,
        0x79, 122,
        0x00, 239,

/*004D*/
        0x20, 35,
        0x27, 103,
        0x2C, 69,
        0x2D, 123,
        0x41, 21,
        0x42, 62,
        0x43, 56,
        0x44, 22,
        0x45, 34,
        0x46, 116,
        0x47, 114,
        0x48, 117,
        0x49, 28,
        0x4B, 113,
        0x4C, 101,
        0x4D, 61,
        0x4E, 103,
        0x4F, 37,
        0x50, 53,
        0x52, 97,
        0x53, 65,
        0x54, 97,
        0x55, 62,
        0x57, 122,
        0x59, 77,
        0x61, 71,
        0x63, 106,
        0x65, 85,
        0x69, 87,
        0x6F, 84,
        0x75, 99,
        0x00, 224,

/*004E*/
        0x20, 31,
        0x27, 94,
        0x2C, 32,
        0x2D, 108,
        0x2F, 25,
        0x41, 48,
        0x42, 87,
        0x43, 53,
        0x44, 45,
        0x45, 31,
        0x46, 98,
        0x47, 31,
        0x48, 99,
        0x49, 51,
        0x4A, 107,
        0x4B, 79,
        0x4C, 98,
        0x4D, 115,
        0x4E, 50,
        0x4F, 61,
        0x50, 133,
        0x52, 93,
        0x53, 53,
        0x54, 43,
        0x55, 76,
        0x56, 93,
        0x57, 50,
        0x59, 45,
        0x5A, 97,
        0x61, 108,
        0x65, 106,
        0x69, 116,
        0x6F, 111,
        0x75, 141,
        0x00, 250,

/*004F*/
        0x20, 53,
        0x27, 84,
        0x2C, 47,
        0x2D, 115,
        0x41, 56,
        0x42, 61,
        0x43, 60,
        0x44, 55,
        0x45, 79,
        0x46, 55,
        0x47, 72,
        0x48, 47,
        0x49, 65,
        0x4A, 115,
        0x4B, 76,
        0x4C, 46,
        0x4D, 57,
        0x4E, 21,
        0x4F, 52,
        0x50, 62,
        0x51, 136,
        0x52, 26,
        0x53, 27,
        0x54, 62,
        0x55, 38,
        0x56, 76,
        0x57, 57,
        0x58, 86,
        0x59, 77,
        0x5A, 101,
        0x63, 127,
        0x66, 132,
        0x6B, 134,
        0x6C, 122,
        0x6E, 120,
        0x72, 113,
        0x73, 121,
        0x74, 133,
        0x00, 229,

/*0050*/
        0x20, 40,
        0x2C, 51,
        0x41, 24,
        0x42, 86,
        0x43, 107,
        0x45, 23,
        0x46, 93,
        0x48, 34,
        0x49, 38,
        0x4B, 65,
        0x4C, 37,
        0x4D, 88,
        0x4E, 107,
        0x4F, 37,
        0x50, 60,
        0x52, 44,
        0x53, 57,
        0x54, 50,
        0x55, 56,
        0x59, 79,
        0x61, 72,
        0x65, 77,
        0x68, 94,
        0x69, 87,
        0x6C, 93,
        0x6F, 81,
        0x72, 73,
        0x75, 99,
        0x79, 106,
        0x00, 208,

/*0051*/
        0x20, 24,
        0x2C, 27,
        0x55, 8,
        0x75, 48,
        0x00, 175,

/*0052*/
        0x20, 34,
        0x27, 98,
        0x2C, 42,
        0x2D, 104,
        0x41, 36,
        0x42, 74,
        0x43, 60,
        0x44, 40,
        0x45, 31,
        0x46, 87,
        0x47, 60,
        0x48, 96,
        0x49, 37,
        0x4A, 119,
        0x4B, 33,
        0x4C, 58,
        0x4D, 62,
        0x4E, 40,
        0x4F, 34,
        0x50, 77,
        0x51, 121,
        0x52, 55,
        0x53, 50,
        0x54, 45,
        0x55, 64,
        0x56, 80,
        0x57, 90,
        0x58, 134,
        0x59, 46,
        0x5A, 104,
        0x61, 106,
        0x65, 93,
        0x68, 126,
        0x69, 110,
        0x6F, 99,
        0x75, 113,
        0x00, 248,

/*0053*/
        0x20, 22,
        0x27, 124,
        0x2C, 26,
        0x2D, 112,
        0x2E, 131,
        0x41, 50,
        0x42, 92,
        0x43, 61,
        0x44, 102,
        0x45, 46,
        0x46, 120,
        0x47, 129,
        0x48, 38,
        0x49, 57,
        0x4B, 77,
        0x4C, 80,
        0x4D, 77,
        0x4E, 90,
        0x4F, 48,
        0x50, 74,
        0x51, 87,
        0x52, 108,
        0x53, 55,
        0x54, 17,
        0x55, 62,
        0x56, 94,
        0x57, 70,
        0x59, 72,
        0x5A, 110,
        0x61, 95,
        0x63, 107,
        0x65, 97,
        0x68, 104,
        0x69, 63,
        0x6B, 135,
        0x6C, 132,
        0x6D, 135,
        0x6E, 137,
        0x6F, 105,
        0x70, 115,
        0x74, 98,
        0x75, 106,
        0x77, 128,
        0x79, 121,
        0x7A, 136,
        0x00, 247,

/*0054*/
        0x20, 25,
        0x27, 113,
        0x2C, 34,
        0x2D, 112,
        0x41, 40,
        0x42, 120,
        0x43, 83,
        0x44, 100,
        0x45, 40,
        0x46, 110,
        0x47, 92,
        0x48, 33,
        0x49, 46,
        0x4B, 106,
        0x4C, 46,
        0x4D, 92,
        0x4E, 93,
        0x4F, 25,
        0x50, 129,
        0x52, 44,
        0x53, 71,
        0x54, 39,
        0x55, 61,
        0x56, 124,
        0x57, 88,
        0x58, 42,
        0x59, 59,
        0x5A, 75,
        0x61, 102,
        0x65, 103,
        0x68, 88,
        0x69, 111,
        0x6F, 104,
        0x72, 110,
        0x75, 114,
        0x77, 135,
        0x79, 134,
        0x00, 242,

/*0055*/
        0x20, 63,
        0x2C, 59,
        0x2D, 107,
        0x2E, 116,
        0x41, 60,
        0x42, 52,
        0x43, 48,
        0x44, 57,
        0x45, 36,
        0x46, 75,
        0x47, 53,
        0x48, 86,
        0x49, 49,
        0x4A, 96,
        0x4B, 72,
        0x4C, 39,
        0x4D, 52,
        0x4E, 38,
        0x4F, 79,
        0x50, 57,
        0x51, 112,
        0x52, 24,
        0x53, 20,
        0x54, 39,
        0x56, 101,
        0x57, 114,
        0x58, 94,
        0x59, 84,
        0x5A, 80,
        0x6E, 94,
        0x72, 111,
        0x73, 116,
        0x00, 213,

/*0056*/
        0x20, 66,
        0x2C, 71,
        0x41, 39,
        0x43, 75,
        0x44, 24,
        0x45, 8,
        0x49, 30,
        0x4C, 96,
        0x4E, 110,
        0x4F, 68,
        0x52, 97,
        0x53, 107,
        0x55, 112,
        0x59, 80,
        0x61, 87,
        0x65, 92,
        0x69, 87,
        0x6F, 111,
        0x00, 213,

/*0057*/
        0x20, 11,
        0x2C, 50,
        0x41, 21,
        0x42, 106,
        0x43, 118,
        0x44, 101,
        0x45, 39,
        0x46, 102,
        0x48, 68,
        0x49, 33,
        0x4B, 109,
        0x4C, 88,
        0x4D, 97,
        0x4E, 69,
        0x4F, 46,
        0x52, 71,
        0x53, 75,
        0x54, 89,
        0x55, 104,
        0x59, 62,
        0x61, 89,
        0x65, 93,
        0x68, 95,
        0x69, 89,
        0x6F, 100,
        0x72, 116,
        0x79, 121,
        0x00, 225,

/*0058*/
        0x20, 43,
        0x2C, 3,
        0x41, 53,
        0x43, 83,
        0x45, 73,
        0x49, 47,
        0x4C, 87,
        0x4D, 86,
        0x4F, 80,
        0x50, 64,
        0x54, 73,
        0x56, 87,
        0x57, 95,
        0x58, 94,
        0x00, 192,

/*0059*/
        0x20, 19,
        0x27, 68,
        0x2C, 18,
        0x2D, 95,
        0x41, 62,
        0x42, 96,
        0x43, 82,
        0x44, 76,
        0x45, 60,
        0x46, 88,
        0x48, 114,
        0x49, 96,
        0x4B, 95,
        0x4C, 49,
        0x4D, 60,
        0x4E, 56,
        0x4F, 23,
        0x50, 103,
        0x52, 84,
        0x53, 31,
        0x54, 79,
        0x55, 88,
        0x56, 105,
        0x57, 87,
        0x61, 103,
        0x65, 113,
        0x6F, 103,
        0x75, 116,
        0x00, 225,

/*005A*/
        0x20, 20,
        0x2C, 28,
        0x2D, 79,
        0x41, 23,
        0x42, 79,
        0x45, 34,
        0x47, 72,
        0x48, 81,
        0x49, 36,
        0x4B, 72,
        0x4C, 71,
        0x4D, 62,
        0x4E, 79,
        0x4F, 46,
        0x52, 81,
        0x53, 85,
        0x54, 84,
        0x55, 54,
        0x56, 84,
        0x57, 77,
        0x59, 66,
        0x5A, 38,
        0x61, 78,
        0x65, 81,
        0x69, 85,
        0x00, 184,

/*005C*/
        0x00, 123,

/*005F*/
        0x00, 123,

/*0061*/
        0x20, 66,
        0x27, 122,
        0x2C, 110,
        0x2D, 99,
        0x2E, 111,
        0x61, 104,
        0x62, 46,
        0x63, 41,
        0x64, 47,
        0x65, 73,
        0x66, 69,
        0x67, 51,
        0x68, 78,
        0x69, 50,
        0x6A, 96,
        0x6B, 64,
        0x6C, 30,
        0x6D, 46,
        0x6E, 28,
        0x6F, 99,
        0x70, 48,
        0x71, 101,
        0x72, 31,
        0x73, 38,
        0x74, 27,
        0x75, 58,
        0x76, 61,
        0x77, 70,
        0x78, 79,
        0x79, 60,
        0x7A, 77,
        0x00, 255,

/*0062*/
        0x20, 81,
        0x2D, 94,
        0x61, 29,
        0x62, 51,
        0x63, 86,
        0x64, 80,
        0x65, 28,
        0x66, 97,
        0x68, 70,
        0x69, 29,
        0x6A, 81,
        0x6C, 25,
        0x6D, 84,
        0x6E, 91,
        0x6F, 31,
        0x70, 100,
        0x72, 35,
        0x73, 50,
        0x74, 73,
        0x75, 36,
        0x76, 91,
        0x77, 99,
        0x79, 59,
        0x00, 208,

/*0063*/
        0x20, 73,
        0x2D, 110,
        0x2E, 115,
        0x43, 113,
        0x61, 27,
        0x63, 60,
        0x64, 109,
        0x65, 32,
        0x68, 29,
        0x69, 37,
        0x6B, 38,
        0x6C, 47,
        0x6D, 115,
        0x6E, 105,
        0x6F, 25,
        0x71, 96,
        0x72, 41,
        0x73, 64,
        0x74, 37,
        0x75, 44,
        0x79, 59,
        0x7A, 112,
        0x00, 209,

/*0064*/
        0x20, 29,
        0x2C, 67,
        0x2D, 64,
        0x2E, 82,
        0x61, 40,
        0x62, 77,
        0x63, 85,
        0x64, 54,
        0x65, 20,
        0x66, 84,
        0x67, 63,
        0x68, 79,
        0x69, 25,
        0x6A, 88,
        0x6C, 50,
        0x6D, 74,
        0x6E, 60,
        0x6F, 38,
        0x70, 88,
        0x72, 45,
        0x73, 41,
        0x74, 88,
        0x75, 49,
        0x76, 77,
        0x77, 75,
        0x79, 61,
        0x7A, 105,
        0x00, 204,

/*0065*/
        0x20, 40,
        0x27, 121,
        0x28, 120,
        0x2C, 57,
        0x2D, 72,
        0x2E, 93,
        0x61, 45,
        0x62, 72,
        0x63, 49,
        0x64, 35,
        0x65, 55,
        0x66, 66,
        0x67, 65,
        0x68, 83,
        0x69, 67,
        0x6A, 102,
        0x6B, 90,
        0x6C, 43,
        0x6D, 53,
        0x6E, 33,
        0x6F, 67,
        0x70, 58,
        0x71, 87,
        0x72, 25,
        0x73, 23,
        0x74, 45,
        0x75, 73,
        0x76, 64,
        0x77, 71,
        0x78, 62,
        0x79, 70,
        0x7A, 96,
        0x00, 221,

/*0066*/
        0x20, 40,
        0x2D, 53,
        0x61, 35,
        0x62, 100,
        0x65, 30,
        0x66, 35,
        0x69, 26,
        0x6C, 35,
        0x6E, 101,
        0x6F, 29,
        0x70, 101,
        0x72, 37,
        0x73, 61,
        0x74, 48,
        0x75, 37,
        0x79, 63,
        0x00, 194,

/*0067*/
        0x20, 40,
        0x2C, 54,
        0x2D, 77,
        0x2E, 92,
        0x61, 35,
        0x62, 87,
        0x63, 108,
        0x64, 96,
        0x65, 26,
        0x66, 94,
        0x67, 50,
        0x68, 40,
        0x69, 33,
        0x6C, 28,
        0x6D, 70,
        0x6E, 50,
        0x6F, 43,
        0x70, 98,
        0x72, 33,
        0x73, 43,
        0x74, 78,
        0x75, 45,
        0x77, 88,
        0x79, 59,
        0x7A, 108,
        0x00, 210,

/*0068*/
        0x20, 50,
        0x2C, 101,
        0x2D, 75,
        0x2E, 99,
        0x61, 27,
        0x62, 81,
        0x63, 94,
        0x64, 92,
        0x65, 18,
        0x66, 87,
        0x67, 109,
        0x68, 99,
        0x69, 27,
        0x6B, 98,
        0x6C, 61,
        0x6D, 69,
        0x6E, 64,
        0x6F, 28,
        0x70, 90,
        0x72, 49,
        0x73, 59,
        0x74, 49,
        0x75, 50,
        0x77, 76,
        0x79, 44,
        0x00, 218,

/*0069*/
        0x20, 106,
        0x2D, 106,
        0x61, 45,
        0x62, 62,
        0x63, 35,
        0x64, 50,
        0x65, 40,
        0x66, 59,
        0x67, 53,
        0x68, 105,
        0x69, 114,
        0x6A, 113,
        0x6B, 81,
        0x6C, 42,
        0x6D, 52,
        0x6E, 19,
        0x6F, 38,
        0x70, 58,
        0x71, 93,
        0x72, 53,
        0x73, 32,
        0x74, 37,
        0x75, 76,
        0x76, 53,
        0x77, 116,
        0x78, 86,
        0x79, 121,
        0x7A, 53,
        0x00, 237,

/*006A*/
        0x61, 22,
        0x65, 24,
        0x69, 36,
        0x6F, 22,
        0x75, 19,
        0x00, 179,

/*006B*/
        0x20, 48,
        0x2C, 82,
        0x2D, 57,
        0x2E, 87,
        0x61, 39,
        0x62, 64,
        0x63, 78,
        0x64, 85,
        0x65, 18,
        0x66, 73,
        0x67, 85,
        0x68, 61,
        0x69, 24,
        0x6A, 93,
        0x6B, 80,
        0x6C, 44,
        0x6D, 70,
        0x6E, 47,
        0x6F, 51,
        0x70, 74,
        0x72, 66,
        0x73, 29,
        0x74, 70,
        0x75, 63,
        0x76, 92,
        0x77, 67,
        0x79, 52,
        0x00, 210,

/*006C*/
        0x20, 57,
        0x2C, 110,
        0x2D, 81,
        0x2E, 104,
        0x61, 30,
        0x62, 80,
        0x63, 75,
        0x64, 51,
        0x65, 22,
        0x66, 65,
        0x67, 81,
        0x68, 95,
        0x69, 26,
        0x6B, 73,
        0x6C, 32,
        0x6D, 72,
        0x6E, 73,
        0x6F, 34,
        0x70, 76,
        0x72, 99,
        0x73, 50,
        0x74, 56,
        0x75, 48,
        0x76, 75,
        0x77, 94,
        0x79, 35,
        0x7A, 117,
        0x00, 226,

/*006D*/
        0x20, 60,
        0x2C, 99,
        0x2D, 89,
        0x2E, 99,
        0x61, 25,
        0x62, 44,
        0x63, 98,
        0x65, 23,
        0x66, 85,
        0x68, 104,
        0x69, 26,
        0x6C, 83,
        0x6D, 46,
        0x6E, 64,
        0x6F, 31,
        0x70, 36,
        0x72, 94,
        0x73, 41,
        0x74, 103,
        0x75, 47,
        0x76, 102,
        0x77, 104,
        0x79, 59,
        0x00, 208,

/*006E*/
        0x20, 46,
        0x27, 98,
        0x2C, 94,
        0x2D, 75,
        0x2E, 93,
        0x61, 40,
        0x62, 83,
        0x63, 43,
        0x64, 37,
        0x65, 26,
        0x66, 66,
        0x67, 24,
        0x68, 82,
        0x69, 38,
        0x6A, 89,
        0x6B, 64,
        0x6C, 77,
        0x6D, 84,
        0x6E, 59,
        0x6F, 45,
        0x70, 89,
        0x71, 93,
        0x72, 85,
        0x73, 35,
        0x74, 31,
        0x75, 63,
        0x76, 73,
        0x77, 87,
        0x78, 111,
        0x79, 72,
        0x7A, 91,
        0x00, 223,

/*006F*/
        0x20, 60,
        0x2C, 115,
        0x2D, 80,
        0x2E, 120,
        0x61, 60,
        0x62, 59,
        0x63, 48,
        0x64, 52,
        0x65, 67,
        0x66, 56,
        0x67, 46,
        0x68, 82,
        0x69, 58,
        0x6A, 108,
        0x6B, 68,
        0x6C, 36,
        0x6D, 40,
        0x6E, 24,
        0x6F, 48,
        0x70, 44,
        0x71, 98,
        0x72, 30,
        0x73, 42,
        0x74, 43,
        0x75, 37,
        0x76, 55,
        0x77, 52,
        0x78, 73,
        0x79, 77,
        0x7A, 84,
        0x00, 234,

/*0070*/
        0x20, 70,
        0x2D, 78,
        0x2E, 102,
        0x61, 32,
        0x62, 92,
        0x63, 102,
        0x64, 102,
        0x65, 26,
        0x66, 96,
        0x68, 32,
        0x69, 34,
        0x6B, 103,
        0x6C, 37,
        0x6D, 88,
        0x6E, 83,
        0x6F, 31,
        0x70, 45,
        0x72, 30,
        0x73, 45,
        0x74, 47,
        0x75, 47,
        0x77, 96,
        0x79, 63,
        0x00, 213,

/*0071*/
        0x75, 0,
        0x00, 190,

/*0072*/
        0x20, 53,
        0x27, 123,
        0x2C, 95,
        0x2D, 78,
        0x2E, 98,
        0x61, 28,
        0x62, 63,
        0x63, 56,
        0x64, 52,
        0x65, 25,
        0x66, 74,
        0x67, 60,
        0x68, 77,
        0x69, 28,
        0x6A, 111,
        0x6B, 64,
        0x6C, 64,
        0x6D, 53,
        0x6E, 55,
        0x6F, 31,
        0x70, 64,
        0x71, 105,
        0x72, 54,
        0x73, 35,
        0x74, 45,
        0x75, 52,
        0x76, 70,
        0x77, 81,
        0x79, 53,
        0x7A, 107,
        0x00, 227,

/*0073*/
        0x20, 37,
        0x27, 116,
        0x29, 117,
        0x2C, 76,
        0x2D, 84,
        0x2E, 75,
        0x3B, 118,
        0x61, 47,
        0x62, 82,
        0x63, 46,
        0x64, 94,
        0x65, 27,
        0x66, 87,
        0x67, 96,
        0x68, 41,
        0x69, 36,
        0x6A, 114,
        0x6B, 65,
        0x6C, 58,
        0x6D, 51,
        0x6E, 60,
        0x6F, 46,
        0x70, 47,
        0x71, 78,
        0x72, 94,
        0x73, 31,
        0x74, 24,
        0x75, 46,
        0x76, 103,
        0x77, 71,
        0x79, 64,
        0x7A, 109,
        0x00, 221,

/*0074*/
        0x20, 47,
        0x27, 117,
        0x28, 118,
        0x2C, 94,
        0x2D, 72,
        0x2E, 94,
        0x43, 121,
        0x53, 118,
        0x61, 36,
        0x62, 91,
        0x63, 67,
        0x64, 108,
        0x65, 24,
        0x66, 86,
        0x67, 99,
        0x68, 34,
        0x69, 22,
        0x6C, 61,
        0x6D, 82,
        0x6E, 83,
        0x6F, 34,
        0x70, 96,
        0x72, 37,
        0x73, 40,
        0x74, 50,
        0x75, 50,
        0x77, 74,
        0x79, 53,
        0x7A, 89,
        0x00, 213,

/*0075*/
        0x20, 92,
        0x61, 47,
        0x62, 47,
        0x63, 45,
        0x64, 51,
        0x65, 48,
        0x66, 66,
        0x67, 50,
        0x68, 98,
        0x69, 47,
        0x6A, 104,
        0x6B, 80,
        0x6C, 33,
        0x6D, 38,
        0x6E, 29,
        0x6F, 71,
        0x70, 46,
        0x72, 29,
        0x73, 28,
        0x74, 35,
        0x75, 111,
        0x76, 80,
        0x77, 113,
        0x78, 83,
        0x79, 92,
        0x7A, 83,
        0x00, 221,

/*0076*/
        0x61, 28,
        0x65, 9,
        0x69, 22,
        0x6F, 37,
        0x72, 85,
        0x73, 76,
        0x75, 65,
        0x76, 87,
        0x79, 75,
        0x00, 204,

/*0077*/
        0x20, 51,
        0x2D, 66,
        0x61, 23,
        0x62, 67,
        0x63, 88,
        0x64, 67,
        0x65, 26,
        0x66, 78,
        0x68, 36,
        0x69, 27,
        0x6B, 75,
        0x6C, 56,
        0x6D, 81,
        0x6E, 42,
        0x6F, 28,
        0x70, 81,
        0x72, 50,
        0x73, 45,
        0x74, 75,
        0x75, 87,
        0x77, 90,
        0x79, 80,
        0x00, 201,

/*0078*/
        0x20, 55,
        0x2D, 66,
        0x61, 36,
        0x63, 38,
        0x65, 25,
        0x68, 54,
        0x69, 23,
        0x6F, 43,
        0x70, 30,
        0x73, 69,
        0x74, 29,
        0x75, 50,
        0x79, 45,
        0x00, 177,

/*0079*/
        0x20, 24,
        0x27, 96,
        0x2C, 66,
        0x2D, 52,
        0x2E, 67,
        0x3A, 86,
        0x46, 96,
        0x4C, 95,
        0x61, 45,
        0x62, 61,
        0x63, 44,
        0x64, 51,
        0x65, 39,
        0x66, 82,
        0x67, 61,
        0x68, 77,
        0x69, 48,
        0x6B, 93,
        0x6C, 41,
        0x6D, 42,
        0x6E, 44,
        0x6F, 46,
        0x70, 40,
        0x72, 47,
        0x73, 31,
        0x74, 45,
        0x75, 78,
        0x76, 96,
        0x77, 69,
        0x78, 81,
        0x7A, 76,
        0x00, 201,

/*007A*/
        0x61, 25,
        0x65, 12,
        0x68, 71,
        0x69, 26,
        0x6C, 55,
        0x6D, 80,
        0x6F, 35,
        0x75, 68,
        0x79, 52,
        0x7A, 43,
        0x00, 176,
};

const CHARACTER rgCharacter[] = {
    0x0000,     0,
    0x0020,     2,
    0x0021,    71,
    0x0022,    72,
    0x0023,    74,
    0x0024,    77,
    0x0026,    78,
    0x0027,    81,
    0x0028,    96,
    0x0029,   107,
    0x002A,   111,
    0x002C,   113,
    0x002D,   146,
    0x002E,   206,
    0x002F,   213,
    0x0030,   215,
    0x0031,   238,
    0x0032,   263,
    0x0033,   284,
    0x0034,   305,
    0x0035,   324,
    0x0036,   342,
    0x0037,   359,
    0x0038,   376,
    0x0039,   392,
    0x003A,   409,
    0x003B,   411,
    0x003E,   413,
    0x0041,   414,
    0x0042,   461,
    0x0043,   489,
    0x0044,   522,
    0x0045,   555,
    0x0046,   598,
    0x0047,   626,
    0x0048,   657,
    0x0049,   689,
    0x004A,   726,
    0x004B,   741,
    0x004C,   772,
    0x004D,   806,
    0x004E,   838,
    0x004F,   873,
    0x0050,   912,
    0x0051,   942,
    0x0052,   947,
    0x0053,   984,
    0x0054,  1030,
    0x0055,  1068,
    0x0056,  1101,
    0x0057,  1120,
    0x0058,  1148,
    0x0059,  1163,
    0x005A,  1192,
    0x005C,  1218,
    0x005F,  1219,
    0x0061,  1220,
    0x0062,  1252,
    0x0063,  1276,
    0x0064,  1299,
    0x0065,  1327,
    0x0066,  1360,
    0x0067,  1377,
    0x0068,  1403,
    0x0069,  1429,
    0x006A,  1458,
    0x006B,  1464,
    0x006C,  1492,
    0x006D,  1520,
    0x006E,  1544,
    0x006F,  1576,
    0x0070,  1607,
    0x0071,  1631,
    0x0072,  1633,
    0x0073,  1664,
    0x0074,  1697,
    0x0075,  1727,
    0x0076,  1754,
    0x0077,  1764,
    0x0078,  1787,
    0x0079,  1801,
    0x007A,  1833,
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\msapi.c ===
#ifndef ROM_IT

#include "tsunamip.h"

HRC WINAPI CreateCompatibleHRC(HRC hrctemplate, HREC hrec)
{
    hrec = hrec;
    return(HwxCreate(hrctemplate));
}

int WINAPI DestroyHRC(HRC hrc)
{
    return(HwxDestroy(hrc));
}

int WINAPI AddPenInputHRC(HRC hrc, POINT *lppnt, void *lpvOem, UINT oemdatatype, STROKEINFO *lpsi)
{
    lpvOem = lpvOem;
    oemdatatype = oemdatatype;
    return(HwxInput(hrc, lppnt, lpsi));
}

int WINAPI ProcessHRC(HRC hrc, DWORD timeout)
{
    timeout = timeout;
    return(HwxProcess(hrc));
}

int WINAPI EndPenInputHRC(HRC hrc)
{
    return(HwxEndInput(hrc));
}

int WINAPI GetBoxResultsHRC(HRC hrc, UINT cAlt, UINT iSyv, UINT cBoxRes,
										LPBOXRESULTS rgBoxResults, BOOL fInkset)
{
   fInkset = fInkset;
   return (HwxGetResults(hrc, cAlt, iSyv, cBoxRes, rgBoxResults));
}

int WINAPI SetGuideHRC(HRC hrc, LPGUIDE lpguide, UINT nFirstVisible)
{
    return HwxSetGuide(hrc, lpguide, nFirstVisible);
}

int WINAPI SetMaxResultsHRC(HRC hrc, UINT cMax)
{
   XRC *xrc = (XRC*)hrc;

   if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return HRCR_ERROR;

    return(SetMaxResultsXRC(xrc, cMax) ? HRCR_OK : HRCR_ERROR);
}

int WINAPI SetAlphabetHRC(HRC hrc, ALC alc, LPBYTE rgbfAlc)
{
    rgbfAlc = rgbfAlc;

    return(HwxSetAlphabet(hrc, alc));
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\global.c ===
#include "tsunamip.h"

GLOBAL	global;

#ifdef	DBG
TCHAR	szDebugString[CB_DEBUGSTRING];
#endif // DBG

// Weights for Viterbi search.  We have seperate weights for both Char and String.  
// We then have seperate weights for both Mars and Zilla since the range of the 
// scores returned by each classifier might vary greatly.  Also 1 and 2 stroke chars
// probably would weight baseline height more that the multi-stroke chars do.

ROMMABLE RECCOSTS defRecCosts =
{
    (FLOAT)(1.058183  ), // BigramWeight
    (FLOAT)(-10.241106 ), // DictWeight
    (FLOAT)(1.939242  ), // AnyOkWeight
    (FLOAT)(3.977542  ), // StateTransWeight
    (FLOAT)(0.370370  ), // NumberWeight;
    (FLOAT)(0.740741  ), // BeginPuncWeight;
    (FLOAT)(1.728395  ), // EndPuncWeight;
    (FLOAT)(0.000000  ), // CharUniWeight           mult weight for unigram cost
    (FLOAT)(0.000000  ), // CharBaseWeight          mult weight for baseline
    (FLOAT)(15.999991 ), // CharHeightWeight        mult weight for height transition between chars.
    (FLOAT)(1.635000  ), // CharBoxBaselineWeight   mult weight for baseline cost given the baseline and size of box they were given to write in.
    (FLOAT)(0.308802  ), // CharBoxHeightWeight     mult weight for height/size cost given size of box they were supposed to write in.
    (FLOAT)(-3.497943 ), // StringUniWeight         mult weight for unigram cost
    (FLOAT)(3.399851 ), // StringBaseWeight        mult weight for baseline
    (FLOAT)(1.423395  ), // StringHeightWeight      mult weight for height transition between chars.
    (FLOAT)(5.275263  ), // StringBoxBaselineWeight mult weight for baseline cost given the baseline and size of box they were given to write in.
    (FLOAT)(-1.234569 )  // StringBoxHeightWeight   mult weight for height/size cost given size of box they were supposed to write in.
};

//PURPOSE: Initializes general global variables.
//RETURN:
//GLOBALS:
//CONDITIONS:
//TODO:

BOOL InitGLOBAL(VOID)
{
	memset(&global, 0, sizeof(GLOBAL));
	global.rgHandleValid = (GHANDLE *) ExternAlloc(CHANDLE_ALLOC * sizeof(GHANDLE));

	if (global.rgHandleValid == NULL)
	{
		return(FALSE);
	}		
	
	memset(global.rgHandleValid, '\0', CHANDLE_ALLOC * sizeof(GHANDLE));

	global.cHandleValidMax = CHANDLE_ALLOC;
	global.nSamplingRate = 67;
	global.atTickRef.sec = 0;
	global.atTickRef.ms = 0;

	return (global.rgHandleValid != (GHANDLE *) NULL);
}

void DestroyGLOBAL(VOID)
{
	if (global.rgHandleValid)
	{
#ifdef DBG
		int ihandle, chandle;

		chandle = 0;
		for (ihandle = 0; ihandle < global.cHandleValid; ihandle++)
		{
			if (global.rgHandleValid[ihandle] != 0)
			chandle++;
		}

		if (chandle)
		{
			wsprintf(szDebugString, __TEXT("RODAN: %d objects not destroyed!\r\n"), chandle);
			WARNING(FALSE);
		}
#endif // DBG

		ExternFree(global.rgHandleValid);
		global.rgHandleValid = 0;
	}
}

BOOL PUBLIC AddValidHANDLE(GHANDLE handle, GHANDLE **prgHandle, int *pcHandle, int *pcHandleMax)
{
	int iHandle, cHandleMax;
	GHANDLE *rgHandle = *prgHandle;

	ASSERT(handle);

	if (rgHandle)
	{
		for (iHandle = (*pcHandle) - 1; iHandle >= 0; iHandle--)
		{
			if (rgHandle[iHandle] == 0)
			{
				rgHandle[iHandle] = handle;
				return(TRUE);
			}
		}

		iHandle = *pcHandle;

		if (iHandle >= *pcHandleMax)
		{
			cHandleMax = (*pcHandleMax) + CHANDLE_ALLOC;


            rgHandle = (GHANDLE *) ExternRealloc(*prgHandle, cHandleMax * sizeof(GHANDLE));
			if (!rgHandle)
				return(FALSE);

			*prgHandle = rgHandle;
			*pcHandleMax = cHandleMax;
		}

		*pcHandle = iHandle + 1;
		rgHandle[iHandle] = handle;

		return(TRUE);
	}

	return(FALSE);
}

VOID PUBLIC RemoveValidHANDLE(GHANDLE handle, GHANDLE *rgHandle, int *pcHandle)
	{
	int iHandle;
	
	ASSERT(handle);
	
	if (rgHandle)
		{
		for (iHandle = (*pcHandle) - 1; iHandle >= 0; iHandle--)
			{
			if (handle == rgHandle[iHandle])
				{
				rgHandle[iHandle] = 0;
				if (iHandle == (*pcHandle) - 1)
					*pcHandle = (*pcHandle) - 1;
				break;
				}
			}
		}
	}

BOOL PUBLIC VerifyHANDLE(GHANDLE handle, GHANDLE *rgHandle, int cHandle)
{
    int iHandle;

    if ((rgHandle == NULL) || (handle == (GHANDLE) 0))
	{
		return(FALSE);
	}
	
    for (iHandle = cHandle - 1; iHandle >= 0; iHandle--)
    {
        if (handle == rgHandle[iHandle])
            return(TRUE);
    }

    return(FALSE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\path.h ===
#ifndef	__INCLUDE_PATH
#define	__INCLUDE_PATH

#define CSTROKE_MAX 511
#define	CCHAR_MAX	255
#define	CCHAR_WORD	64

#define 	MAX_FRAME_GLYPH 		30		// max strokes per glyph

// TODO:  put the correct values in here
#define	SYM_SPACE		(SYM)' '
#define  SYM_TAB        (SYM)'\t'
#define  SYM_RETURN     (SYM)0x0d
#define	SYM_QUOTE		(SYM)0x8166		// TODO:  is this correct?
#define	SYM_DBLQUOTE	(SYM)0x8168		// TODO:  is this correct?
#define  SYM_PERIOD		(SYM)0x8144
#define  SYM_COMMA		(SYM)0x8143
#define  SYM_SEMICOLON	(SYM)0x8147
#define  SYM_COLON		(SYM)0x8146
#define  SYM_EXCLAMATION	(SYM)0x8149
#define  SYM_EQUAL		(SYM)0x8181
#define  SYM_HYPHEN		(SYM)0x817c		// TODO:  is this correct?
#define  SYM_QUESTION	(SYM)0x8148
#define  SYM_BAR			(SYM)0x8162		// TODO:  is this correct?
#define  SYM_BACKSLASH	(SYM)0x815f		// TODO:  is this correct?
#define  SYM_SLASH		(SYM)0x815e		// TODO:  is this correct?
#define  SYM_OPENPAREN	(SYM)0x8169
#define  SYM_CLOSEPAREN	(SYM)0x816a
#define  SYM_OPENBRACE	(SYM)0x816d
#define  SYM_CLOSEBRACE	(SYM)0x816e
#define  SYM_OPENBRACKET	(SYM)0x816f
#define  SYM_CLOSEBRACKET	(SYM)0x8170
#define	SYM_0				(SYM)0x824f
#define	SYM_A				(SYM)0x8260
#define	SYM_S				(SYM)0x8272
#define	SYM_a				(SYM)0x8281
#define	SYM_d				(SYM)0x8284
#define	SYM_h				(SYM)0x8288
#define	SYM_n				(SYM)0x828e
#define	SYM_r				(SYM)0x8292
#define	SYM_s				(SYM)0x8293
#define	SYM_t				(SYM)0x8294

#define	SyvFromSYM(s)	(((s) == SYM_UNKNOWN) ? SYV_NULL : SyvKanjiToSymbol(s))
#define  SymFromSYV(s)	(((s) == SYV_NULL) ? SYM_UNKNOWN : (SYM)WSyvToKanji(s))
#define	IsDigitSYM(s)	((s) >= 0x824f && (s) <= 0x8258)
#define	IsUpperSYM(s)	((s) >= 0x8260 && (s) <= 0x8279)
#define	IsLowerSYM(s)	((s) >= 0x8281 && (s) <= 0x829a)
#define	IsAlphaSYM(s)	(IsLowerSYM(s) || IsUpperSYM(s))
#define	IsPuncSYM(s)	(FALSE)									// TODO: fix this
#define	ToLowerSYM(s)	(IsUpperSYM(s) ? (s) + 0x0021 : (s))
#define	ToUpperSYM(s)	(IsLowerSYM(s) ? (s) - 0x0021 : (s))

int PUBLIC StrlenSYM(LPSYM lpsym);
int PUBLIC StrncmpSYM(LPSYM lpsym1, LPSYM lpsym2, int len);
VOID PUBLIC StrrevSYM(LPSYM lpsym);
VOID PUBLIC StrlwrSYM(LPSYM lpsym);

#define	SYM_NULL	(SYM)0

#define  IsSpaceSYM(s)        ((s) == SYM_SPACE || (s) == SYM_TAB || (s) == SYM_RETURN)

#define	INIT						1
#define	NOINIT					0
#define	INDEX_NULL				-1

#define	SYM_UNKNOWN				((SYM)0x02)

#define	ENGINE_ERROR			-1

#define  AddCOST(a,b)         ((a) + (b))
#define  IncCOST(a,b)         ((a) += (b))
#define  DecCOST(a,b)         ((a) -= (b))
#define  SubCOST(a,b)         ((a) - (b))
#define  MultCOST(a,b)        MultFIXED(a,b)
#define  MultAddCOST(c,a,b)   ((c) += MultFIXED((a),(b)))
#define  NegCOST(a)           (-(a))
#define  AbsCOST(a)           ((a > 0.0) ? a : NegCOST(a))
#define  SquareCOST(a)        SquareFIXED(a)
// #define  DivCOST(a,b)         DivFIXED(a,b)

typedef	unsigned	PWMODE;
#define	PW_PREVIOUS					0x0001
#define	PW_CURRENT					0x0002
#define	PW_END						0x0004

typedef	unsigned	SMODE;
#define	SMODE_DICTIONARY			0x0001
#define	SMODE_RELAX_COERCION		0x0002
#define	SMODE_STRICT_COERCION	0x0004

typedef struct tagRECSTATUS
{
	int   cframeHgm;     // # of frames processed by HGM
} RECSTATUS;

#endif	//__INCLUDE_PATH
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\pathsrch.h ===
#ifndef	__INCLUDE_PATHSRCH
#define	__INCLUDE_PATHSRCH

int  ProcessPATHSRCH(XRC *xrc);
BOOL IsDonePATHSRCH(XRC *xrc);

#define XrcparamPATHSRCH(xrc)	((xrc)->xrcparam)
#define CResultPATHSRCH(xrc)	((xrc)->cResult)
#define ResultPATHSRCH(xrc, i)	((i) < (xrc)->cResult ? (xrc)->rgResult[i] : (RESULT *) NULL)
#define CResultMaxPATHSRCH(xrc)	(ResultMaxXRCPARAM((xrc)->xrcparam))
#define CoercionPATHSRCH(xrc)	(CoercionXRCPARAM((xrc)->xrcparam))
#define CLayerPATHSRCH(xrc)     ((xrc)->cLayer)

#define AUTOMATON_ID_NONE 0
#define AUTOMATON_ID_DICT 1
#define AUTOMATON_ID_ANYTHINGOK 2

#define FSM_START        0    // In the start state
#define FSM_DICT         1    // In the dictionary state
#define FSM_ANYOK        2    // In the anything goes state
#define FSM_NUMBERS      3    // In the Numbers FSM
#define FSM_FILE         4    // In the begin file/net name state
#define FSM_BEGIN_PUNC   5    // In the punctuation state
#define FSM_POSSESIVE    6    // 's support

#define NONE_AUTOMATON_INITIAL_STATE 0
#define NONE_AUTOMATON_FINAL_STATE 1

#define DICT_MODE_LITERAL 0
#define DICT_MODE_CAPITALIZED 1
#define DICT_MODE_ALLCAPS 2

#endif	//__INCLUDE_PATHSRCH
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\res.h ===
// res.h: defines for resources

#ifndef __INCLUDE_RES
#define __INCLUDE_RES

#define RESID_TAIL	5500
#define RESID_DICT 	5600

#define RESID_CPROTO	    5000

#define RESID_OTTER_FIRST   5300
#define RESID_FIB_0			5300
#define RESID_FIB_1			5301
#define RESID_FIB_2			5302
#define RESID_FIB_3			5303
#define RESID_FIB_4			5304
#define RESID_FIB_5			5305
#define RESID_FIB_6			5306
#define RESID_FIB_8			5307
#define RESID_FIB_9			5308
#define RESID_FIB_10	    5309
#define RESID_FIB_13	    5310
#define RESID_FIB_14	    5311
#define RESID_FIB_15	    5312
#define RESID_FIB_21	    5313
#define RESID_FIB_22	    5314
#define RESID_FIB_23	    5315
#define RESID_FIB_24	    5316
#define RESID_FIB_35	    5317
#define RESID_FIB_36	    5318
#define RESID_FIB_37	    5319
#define RESID_FIB_56	    5320
#define RESID_FIB_57	    5321
#define RESID_FIB_58	    5322
#define RESID_FIB_60	    5323
#define RESID_FIB_91	    5324
#define RESID_FIB_92	    5325
#define RESID_FIB_94	    5326
#define RESID_FIB_147	    5327
#define RESID_FIB_149	    5328
#define RESID_FIB_152	    5329
#define RESID_FIB_238	    5330
#define RESID_FIB_241	    5331
#define RESID_OTTER_LAST    5331

#define RESID_TREE01	    5401
#define RESID_TREE02	    5402
#define RESID_TREE03	    5403
#define RESID_TREE04	    5404
#define RESID_TREE05	    5405
#define RESID_TREE06	    5406
#define RESID_TREE07	    5407
#define RESID_TREE08	    5408
#define RESID_TREE09	    5409
#define RESID_TREE10	    5410
#define RESID_TREE11	    5411
#define RESID_TREE12	    5412
#define RESID_TREE13	    5413
#define RESID_TREE14	    5414
#define RESID_TREE15	    5415
#define RESID_TREE16	    5416
#define RESID_TREE17	    5417
#define RESID_TREE18	    5418
#define RESID_TREE19	    5419
#define RESID_TREE20	    5420
#define RESID_TREE21	    5421
#define RESID_TREE22	    5422
#define RESID_TREE23	    5423
#define RESID_TREE24	    5424
#define RESID_TREE25	    5425
#define RESID_TREE26	    5426
#define RESID_TREE27	    5427
#define RESID_TREE28	    5428
#define RESID_TREE29	    5429
#define RESID_TREE30	    5430

#define RESID_HEAD01	    5501
#define RESID_HEAD02	    5502
#define RESID_HEAD03	    5503
#define RESID_HEAD04	    5504
#define RESID_HEAD05	    5505
#define RESID_HEAD06	    5506
#define RESID_HEAD07	    5507
#define RESID_HEAD08	    5508
#define RESID_HEAD09	    5509
#define RESID_HEAD10	    5510
#define RESID_HEAD11	    5511
#define RESID_HEAD12	    5512
#define RESID_HEAD13	    5513
#define RESID_HEAD14	    5514
#define RESID_HEAD15	    5515
#define RESID_HEAD16	    5516
#define RESID_HEAD17	    5517
#define RESID_HEAD18	    5518
#define RESID_HEAD19	    5519
#define RESID_HEAD20	    5520
#define RESID_HEAD21	    5521
#define RESID_HEAD22	    5522
#define RESID_HEAD23	    5523
#define RESID_HEAD24	    5524
#define RESID_HEAD25	    5525
#define RESID_HEAD26	    5526
#define RESID_HEAD27	    5527
#define RESID_HEAD28	    5528
#define RESID_HEAD29	    5529
#define RESID_HEAD30	    5530

#define GRECORES     296

// window class types--do not translate
#define  szErrMsgClass     "ErrMsgClass"
#define  szClassShadeGroup "MARSShade"
#define  szClassInkDraw    "MARSInkDraw"
#define  szClassInkSize    "MARSSize"
#define  szClassInkSelect  "MARSInk"

// error msgs:
#define rsDbLoadFail 1003
#define rsDbLoadOk      1004
#define rsDbSaveFail 1005
#define rsDbInvalid     1006
#define rsDbNotFound 1007
#define rsTrainSave     1008
#define rsDbNotAvail 1009
#define  rsDefaultUser  1010
#define  rsConfirmLoad  1011
#define  rsNoRecog      1012
#define  rsHelpFailed   1014

#define rsAppName    1001
#define rsRecogId    1002

#define  rsBRMeaning       1050
#define  rsBRMeanText      1051
#define  rsBRLookLike      1052
#define  rsBRGesture       1053
#define  rsBRAnything      1054

// Gesture resource IDs:
#define  rsGesTap    1410
#define  rsGesXSelect   1411
#define  rsGesSelect    1412
#define  rsGesDTap      1413
#define  rsGesUndo      1414
#define  rsGesCopy      1415
#define  rsGesCut    1416
#define  rsGesPaste     1417
#define  rsGesCutWord   1418
#define  rsGesCorrect   1419
#define  rsGesBackspace 1420
#define  rsGesSpace     1421
#define  rsGesReturn    1422
#define  rsGesTab    1423
#define  rsGesClear     1424
#define  rsGesClearWord 1425
#define  rsGesInsert    1426
#define  rsGesHelp      1427

#define  rsGesInline    1450
#define  rsTrainConflict   2100
#define  rsszOOM     3200
#define  rsszLoad 3201
#define  rsszSave 3202
#define rsszFilter   3203

#endif   // _H_RES
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by all HWXxxx.RC files
// DO NOT EDIT THIS FILE
//

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        103
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\sinfo.h ===
#ifndef _INC_SINFO_H
#define _INC_SINFO_H

extern ROMMABLE CHARSET csDefault;

// ----------
// SINFO object abstract data type
// ----------

#define GlyphAtSINFO(s, t, k)      (((FRAMESYM*)((xrc)->rgLayer[t]))->rgglyphsym[(k)-1]->glyph)

BOOL InitializeSINFO(XRC *xrc);
void DestroySINFO(XRC *xrc);
int  ProcessSINFO(XRC *xrc, BOOL fEnd);
int	 GetBoxResultsSINFO(XRC *xrc, int cAlt, int iSyv, LPBOXRESULTS lpboxres, BOOL fInkset);
int  GetLayerPrevSINFO(XRC *xrc, GLYPHSYM * gs);
int  ILayerFromIFrameSINFO(XRC *xrc, int iFrame);
int  CLayerProcessedSINFO(XRC *xrc);
BOOL AddBoxGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs);
GLYPHSYM *GetGlyphsymSINFO(XRC *xrc, int iLayer);
GLYPHSYM *GetBoxGlyphsymSINFO(XRC *xrc, int iBox);
GLYPHSYM *GlyphsymFromSINFO(XRC *xrc, int iFrameEnd, int cFrame, BOOL *fDestroy);

#define CFrameSINFO(xrc)				((xrc)->cFrame)
#define CFrameProcessedSINFO(xrc)		((xrc)->cFrame)
#define CLayerSINFO(xrc)				((xrc)->cQueue)
#define IsDoneSINFO(xrc)                ((xrc)->cFrame == (xrc)->cInput)
#define FEndOfInkSINFO(xrc)             (FEndInputXRCPARAM(xrc))
#define FBoxedSINFO(xrc)                (FBoxedInputXRCPARAM(xrc))
#define LpguideSINFO(xrc)               (LpguideXRCPARAM(xrc))
#define FirstBoxSINFO(xrc)              (FirstBoxXRCPARAM(xrc))
#define CharsetSINFO(xrc)               (&((xrc)->cs))

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\trie.c ===
#include "trie.h"

/******************************Public*Routine******************************\
* TrieInit
*
* Given a pointer to a resource or mapped file of a mapped file this
* function allocates and initializes the trie structure.
*
* Returns NULL for failure, trie control structure pointer for success.
*
* History:
*  16-Jun-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

TRIECTRL * TrieInit(LPBYTE lpByte)
{
    size_t cbTrieCtrl;
	LPWORD lpwTables;
    TRIECTRL *lpTrieCtrl;
    LPTRIESTATS lpTrieStats;

    lpTrieStats = (LPTRIESTATS) lpByte;

    if (lpTrieStats == NULL)
    {
        return(NULL);
    }

    //
    // Allocate space for the control structure and the table of SR offsets
    //

    cbTrieCtrl = sizeof(*lpTrieCtrl);
    lpTrieCtrl = malloc(cbTrieCtrl);    

    if (lpTrieCtrl == NULL)
    {
        return(NULL);
    }

    //
    // Allocate space for the complete header, copy the fixed part and read in the rest
    //

	lpByte += lpTrieStats->cbHeader;
	lpTrieCtrl->lpTrieStats = lpTrieStats;

    //
    // Set up the table pointers (all these tables are inside the TRIECTRL allocation)
    //

	lpwTables = (LPWORD)(lpTrieStats+1);

	lpTrieCtrl->lpwCharFlagsCodes = lpwTables;
    lpwTables += lpTrieStats->cCharFlagsCodesMax;
	lpTrieCtrl->lpwMRPointersCodes = lpwTables;
    lpwTables += lpTrieStats->cMRPointersCodesMax;
	lpTrieCtrl->lpwSROffsetsCodes = lpwTables;
	lpwTables += lpTrieStats->cSROffsetsCodesMax; 

	lpTrieCtrl->lpCharFlags = (LPCHARFLAGS)lpwTables;
	lpwTables = (LPWORD)(lpTrieCtrl->lpCharFlags + lpTrieStats->cUniqueCharFlags);

	lpTrieCtrl->lpwMRPointers = (DWORD *) lpwTables;
	lpwTables += (2 * lpTrieStats->cUniqueMRPointers);

	lpTrieCtrl->lpwSROffsets = (DWORD *) lpwTables;
	lpwTables += (2 * lpTrieStats->cUniqueSROffsets);

    //
    // These tables should exactly fill the allocation
    //
	 
    //
    // Init trie pointers
    //

	lpTrieCtrl->lpbTrie = (LPBYTE)lpByte;
	
	return (void *)lpTrieCtrl;
}

/******************************Public*Routine******************************\
* TrieFree
*
* Free the resources allocated for the control structure.
*
* History:
*  16-Jun-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void TrieFree(LPTRIECTRL lpTrieCtrl)
{
    //
    // Finally free the control structure and all the tables.  STILL MUST FREE THIS FOR ROM
    //

    free(lpTrieCtrl);

}

/* Deompress a single symbol using base-256 huffman from a compressed data structure. piSymbol
points to a space to hold the decompressed value, which is an index to a frequency-ordered
table of symbols (0 is most frequent).  pcCodes is a table of code lengths returned from 
HuffmanComputeTable.  pbData is a pointer to memory that contains the encoded data.  The 
return value is the number of bytes decoded. */

int DecompressSymbol(WORD *piSymbol, WORD *pcCodes, unsigned char *pbData)
{
	int cBytes = 0;
	WORD wCode = 0, wiSymbol = 0;

	/* At each stage in this loop, we're trying to see if we've got a length-n code. 
	dwCode is which length-n code it would have to be.  If there aren't that many length-n codes,
	we have to try n+1.  To do that, we subtract the number of length-n codes and shift in
	the next byte. dwiSymbol is the symbol number of the first length-n code. */

    while (1)
    {
		wCode += *pbData++;
		++cBytes;
        if (wCode < *pcCodes)
        {
			break;
		}
		wiSymbol += *pcCodes;
		wCode -= *pcCodes++;
		wCode <<= 8;
   	}

	/* Now that dwCode is a valid number of a length-cBytes code, we can just add it to
	dwiSymbol, because we've already added the counts of the shorter codes to it. */ 

	wiSymbol += wCode;
	
	*piSymbol = wiSymbol;

	return cBytes;
}

void TrieDecompressNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan)
{
	WORD wCode;
    DWORD wOffset;
	LPTRIESTATS lpTrieStats;

	lpTrieStats = lpTrieCtrl->lpTrieStats;

	/* If this is an initial call, use the first byte in the first SR segment */

    if (lpTrieScan->wFlags == 0)
    {
        lpTrieScan->lpbSRDown = 0;
        lpTrieScan->lpbNode = lpTrieCtrl->lpbTrie;
	}

	/* Decompress the char/flags */

	lpTrieScan->lpbNode += DecompressSymbol(&wCode,lpTrieCtrl->lpwCharFlagsCodes,
                                            lpTrieScan->lpbNode);

	lpTrieScan->wch = lpTrieCtrl->lpCharFlags[wCode].wch;
	lpTrieScan->wFlags = lpTrieCtrl->lpCharFlags[wCode].wFlags;

	/* Code to decompress enumeration goes here */

	/* Code to decompress right pointers goes here */

	/* There are 4 kinds of down pointer: Segement, Inline, Multiref, and Singleref Offset.
	Each requires different decompression */

    if (lpTrieScan->wFlags&fTrieNodeInline)
    {
		/* Inline: The down pointer points to the next sequential byte (so it isn't stored) */


		lpTrieScan->lpbSRDown = lpTrieScan->lpbDown = lpTrieScan->lpbNode;
    }
    else if (lpTrieScan->wFlags&fTrieNodeMultiref)
    {
		/* Multiref: The down pointer is encoded directly */

		lpTrieScan->lpbNode += DecompressSymbol(&wCode,lpTrieCtrl->lpwMRPointersCodes,
			lpTrieScan->lpbNode);

		lpTrieScan->lpbDown = lpTrieCtrl->lpbTrie + lpTrieCtrl->lpwMRPointers[wCode];
    }
    else if (lpTrieScan->wFlags&fTrieNodeDown)
    {
		/* SR Offset.  The down pointer is encoded as an offset from the LAST downpointer
		into this singleref segment.  So we have to keep the old one around so we can add to it */

		lpTrieScan->lpbNode += DecompressSymbol(&wCode,lpTrieCtrl->lpwSROffsetsCodes,
			lpTrieScan->lpbNode);

        if (lpTrieScan->lpbSRDown == 0)
        {
            lpTrieScan->lpbSRDown = lpTrieScan->lpbNode;  // We offset from the end of the first node when going into a new state.
        }

        wOffset = lpTrieCtrl->lpwSROffsets[wCode];
		lpTrieScan->lpbSRDown += wOffset;
		lpTrieScan->lpbDown = lpTrieScan->lpbSRDown;
    }
    else
    {
		lpTrieScan->lpbDown = NULL;
    }

} // TrieDecompressNode

/* Given a compressed trie and a pointer to a decompresed node from it, find and decompress
the next node in the same state. lpTrieScan is a user-allocated structure that holds the
decompressed node and into which the new node is copied.
This is equivalent to traversing a right pointer or finding the next alternative
letter at the same position. If there is no next node (i.e.this is the end of the state)
then TrieGetNextNode returns FALSE. To scan from the beginning of the trie, set the lpTrieScan
structure to zero */

BOOL TrieGetNextNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan)
{
	/* If this is the last node, quit here */

    if (lpTrieScan->wFlags&fTrieNodeEnd)
    {
		return FALSE;
    }

	TrieDecompressNode(lpTrieCtrl,lpTrieScan);

	return TRUE;
}

/* Follow the down pointer to the next state.  This is equivalent to accepting the character
in this node and advancing to the next character position.  Returns FALSE if there is no
down pointer.  This also decompresses the first node in the state, so all the values in
lpTrieScan will be good. */

BOOL TrieGetNextState(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan)
{
	/* Flags can't normally be zero; that always means "top node" */

    if (lpTrieScan->wFlags == 0)
    {
        TrieDecompressNode(lpTrieCtrl, lpTrieScan);
		return TRUE;
	}

    if (!(lpTrieScan->wFlags&fTrieNodeDown))
    {
		return FALSE;
	}

    lpTrieScan->lpbSRDown = 0;
    lpTrieScan->lpbNode = lpTrieScan->lpbDown;

	TrieDecompressNode(lpTrieCtrl, lpTrieScan);

	return TRUE;

} // TrieGetNextState

/* Check the validity of a word or prefix. Starts from the root of pTrie looking for
pwszWord.  If it finds it, it returns TRUE and the user-provided lpTrieScan structure 
contains the final node in the word.  If there is no path, TrieCheckWord returns FALSE
To distinguish a valid word from a valid prefix, caller must test 
wFlags for fTrieNodeValid. */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\tsunamip.h ===
// Private includes for TSUNAMI.  This should include all the internal data types
// as well as including all recognizers used by TSUNAMI class products

#ifndef	__INCLUDE_TSUNAMIP
#define	__INCLUDE_TSUNAMIP

#include "common.h"
#include "tsunami.h"
#include "tcrane.h"
#include "tigerp.h"
#include "dict.h"

// This defines the value we decide to use the Zilla recognizer

#define	TSUNAMI_USE_ZILLA	3

// Private API for training/tuning

int  WINAPI GetPrivateRecInfoHRC(HRC, WPARAM, LPARAM);
int  WINAPI SetPrivateRecInfoHRC(HRC, WPARAM, LPARAM);
BOOL LoadRecognizer(VOID);
VOID UnloadRecognizer(VOID);

// This structure is used by the training/tuning APIs

typedef struct tagRECCOSTS
{
    // Weights for Viterbi search.  We have seperate weights for
    // both Char and String.  We then have seperate weights for
    // both Mars and Zilla since the range of the scores returned by
    // each classifier might vary greatly.  Also 1 and 2 stroke chars
    // probably would weight b/h more that the multi-stroke chars do.

    FLOAT BigramWeight;
    FLOAT DictWeight;
    FLOAT AnyOkWeight;
    FLOAT StateTransWeight;
    FLOAT NumberWeight;
    FLOAT BeginPuncWeight;
    FLOAT EndPuncWeight;

    // Char Weights

    FLOAT CharUniWeight;          // mult weight for unigram cost
    FLOAT CharBaseWeight;         // mult weight for baseline
    FLOAT CharHeightWeight;       // mult weight for height transition between chars.
    FLOAT CharBoxBaselineWeight;  // mult weight for baseline cost given the baseline and
                                  // size of box they were given to write in.
    FLOAT CharBoxHeightWeight;    // mult weight for height/size cost given size of box
                                  // they were supposed to write in.
    // String Weights

    FLOAT StringUniWeight;          // mult weight for unigram cost
    FLOAT StringBaseWeight;         // mult weight for baseline
    FLOAT StringHeightWeight;       // mult weight for height transition between chars.
    FLOAT StringBoxBaselineWeight;  // mult weight for baseline cost given the baseline and
                                    // size of box they were given to write in.
    FLOAT StringBoxHeightWeight;    // mult weight for height/size cost given size of box
                                    // they were supposed to write in.
} RECCOSTS;

// These are internal defines that have no clear home.  Many came from the old primitiv.h
// file, but that is no longer appropriate.

#define	PROCESS_IDLE		0
#define	PROCESS_READY		1
#define	PROCESS_OK			2
#define	PROCESS_EXIT		3
#define	PROCESS_TIMEOUT		4
#define	PROCESS_GESTURE		5

#define  PRI_WEIGHT       (WPARAM) 0
#define  PRI_GUIDE        (WPARAM) 1
#define  PRI_GLYPHSYM     (WPARAM) 2
#define  PRI_SIGMA        (WPARAM) 3

#define COST_ZERO				((FLOAT)  0.0)
#define COST_FORCE				((FLOAT)  2.0)
#define COST_ADJUST_PRIORITY	((FLOAT)  2.0)
#define COST_REJECT				((FLOAT)  3.0)
#define COST_UNKNOWN			((FLOAT) -1.0)
#define	COST_MAXIMUM			((FLOAT)  10000.0)
#define	COST_MINIMUM			((FLOAT) -10000.0)

#define DbcsResultsCHARSET(cs, csDef)								\
			(((cs)->recmaskPriority & RECMASK_GLOBALPRIORITY) ?		\
			(((csDef)->recmaskPriority & RECMASK_DBCS) != 0) :		\
			(((cs)->recmaskPriority & RECMASK_DBCS) != 0))

#define RecmaskPriorityCHARSET(cs, csDef)                                                               \
			(((cs)->recmaskPriority & RECMASK_GLOBALPRIORITY) ?     \
			(csDef)->recmaskPriority :                                                                              \
			(cs)->recmaskPriority)

// This includes all the internal engine data types.  This list is VERY 
// sensitive to order.  Change this under GREAT risk of personal harm 
// or worse yet, ridicule by your peers.

#include "height.h"
#include "glyphsym.h"
#include "path.h"
#include "xrc.h"
#include "input.h"
#include "xrcparam.h"
#include "sinfo.h"
#include "pathsrch.h"
#include "engine.h"
#include "global.h"
#include "bigram.h"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\dict.c ===
#include "tsunamip.h"
#include "xjis.h"
#include "unicode.h"
#include "dict.h"
#include "trie.h"
#include "tchar.h"

LPTRIECTRL lpTrieCtrl = NULL;
LPBYTE gBaseAddress = NULL;
HANDLE ghFile = INVALID_HANDLE_VALUE;
HANDLE ghMap = INVALID_HANDLE_VALUE;

void TrieDecompressNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

#define StateToFlags(state) ((WORD)((0xFF000000 & state) >> 24))
#define StateToAddress(state) ((LPBYTE)(gBaseAddress + (DWORD)(state & 0x00FFFFFF)))
#define FlagsToState(flags) ((DWORD)(((BYTE)flags) << 24))
#define AddressToState(address) (DWORD)((address) ? (address) - gBaseAddress : 0x00FFFFFF)

/*******************************************************************************
DWORD DictNextState(DWORD state, wchar_t wch)
	- given a state and a char to consume, return next state
	- initial state is 0
	- if no transition is possible on given char, the same state is returned
********************************************************************************/
DWORD DictNextState(DWORD state, wchar_t wch)
{
	TRIESCAN triescan;
	WORD wFlags;

	if (state == 0)  // initial state
	{
		memset(&triescan, 0, sizeof(triescan));
	}
	else
	{
		wFlags = StateToFlags(state);
		if (wFlags & fTrieNodeDown)
		{
			triescan.wFlags = wFlags;
			triescan.lpbDown = StateToAddress(state);
			triescan.lpbNode = triescan.lpbDown;
			triescan.lpbSRDown = 0;
		}
		else
		{
			return state;
		}
	}
	TrieDecompressNode(lpTrieCtrl, &triescan);

	do {
		if (triescan.wch == wch)
			break;
	} while(TrieGetNextNode(lpTrieCtrl, &triescan));

	if (triescan.wch != wch)
	{
		return state;
	}

	state = AddressToState(triescan.lpbDown) | FlagsToState(triescan.wFlags);
	return state;
}

/*******************************************************************************
BOOL DictFinalState(DWORD state)
	- given a state, return TRUE iff it is the end of a word
********************************************************************************/

BOOL DictFinalState(DWORD state)
{
	return StateToFlags(state) & fTrieNodeValid ? 1 : 0;
}

/*******************************************************************************
void *LoadDictionary(HINSTANCE hInst)
	- parses the lex file and initializes some globals
	- hInst is currently not used
********************************************************************************/

void *LoadDictionary(HINSTANCE hInst)
{
	LPBYTE lpByte;
	TCHAR szDictionary[MAX_PATH];

#ifdef PEGASUS
	_tcscpy(szDictionary, TEXT("\\windows\\"));
#else
	{
		UINT len;

		len = GetWindowsDirectory((LPTSTR)szDictionary, MAX_PATH);
		if (len > MAX_PATH || len == 0)
			return (void *) NULL;
		if (szDictionary[len-1] != '\\')
		{
			szDictionary[len++] = '\\';
			szDictionary[len] = '\0';
		}
	}
#endif

	_tcscat(szDictionary, TEXT("usa.lex"));

#ifdef	PEGASUS
	ghFile = CreateFileForMapping(szDictionary, 
#else
	ghFile = CreateFile(szDictionary, 
#endif
		GENERIC_READ, 
		FILE_SHARE_READ,
		NULL, 
		OPEN_EXISTING, 
		FILE_ATTRIBUTE_NORMAL, 
		NULL);

	if (ghFile == INVALID_HANDLE_VALUE) {
		DWORD		errCode;

		errCode	= GetLastError();
		return (void *) NULL;
	}

	ghMap = CreateFileMapping(ghFile, NULL, PAGE_READONLY, 0, 0, NULL);
	if (ghMap == NULL)
	{
		CloseHandle(ghFile);
		ghFile = INVALID_HANDLE_VALUE;
		return (void*) NULL;
	}

	// Map the entire file starting at the first byte

	lpByte = (LPBYTE) MapViewOfFile(ghMap, FILE_MAP_READ, 0, 0, 0);
	if (lpByte == NULL)
	{
		CloseHandle(ghMap);
		CloseHandle(ghFile);
		ghFile = ghMap = INVALID_HANDLE_VALUE;
		return (void *) NULL;
	}

	gBaseAddress = lpByte;

    lpTrieCtrl = TrieInit(lpByte);

    return (void *)lpTrieCtrl;
}

/*******************************************************************************
void FreeDictionary(void)
	- frees up memory allocated by LoadDictionary()
********************************************************************************/

void FreeDictionary(void)
{
    TrieFree(lpTrieCtrl);
    lpTrieCtrl = NULL;
	if (ghMap != INVALID_HANDLE_VALUE)
	{
		UnmapViewOfFile(gBaseAddress);
		CloseHandle(ghMap);
		CloseHandle(ghFile);
	}
	ghFile = ghMap = INVALID_HANDLE_VALUE;
}

/*******************************************************************************
int StartDictionary(wchar_t wch, PATHNODE *rgPathNode, int cMaxNode)
	- given the first char of a word, returns count of all possible pathnodes
	- the number of pathnodes returned is atmost cMaxNode
	- it is the caller's responsibility that rgPathNode has spaces for atleast cMaxNode nodes
********************************************************************************/
int StartDictionary(wchar_t wch, PATHNODE *rgPathNode, int cMaxNode)
{
	RECMASK recmask;
	DWORD state;
	int cPath = 0;

	if (cMaxNode <= 0)
		return 0;

	recmask = RecmaskFromUnicode(wch);
	if (recmask & ALC_UCALPHA)
	{
		// have to split into three states
		// first two states
		state = DictNextState(0, wch);
		if (state)
		{
			rgPathNode[cPath].state = state;
			rgPathNode[cPath].extra = DICT_MODE_LITERAL;  // eg. "USA", "Florida"
			cPath++;
			if (cPath == cMaxNode)
				return cPath;
			rgPathNode[cPath].state = state;
			rgPathNode[cPath].extra = DICT_MODE_ALLCAPS;  // eg. "FLORIDA"
			cPath++;
			if (cPath == cMaxNode)
				return cPath;
		}
		// third state
		wch = (wchar_t) towlower(wch);
		state = DictNextState(0, wch);
		if (state)
		{
			rgPathNode[cPath].state = state;
			rgPathNode[cPath].extra = DICT_MODE_CAPITALIZED;  // eg. "TOP", "Top"
			cPath++;
			if (cPath == cMaxNode)
				return cPath;
		}
	}
	else
	{
		// atmost one next state possible
		state = DictNextState(0, wch);
		if (state)
		{
			rgPathNode[cPath].state = state;
			rgPathNode[cPath].extra = DICT_MODE_LITERAL;    // eg. "top"
			cPath++;
			if (cPath == cMaxNode)
				return cPath;
		}
	}

	return cPath;
}

/*******************************************************************************
int DictionaryNextState(PATHNODE startState,
						wchar_t wch,
						PATHNODE *pNextState)
	- given a previous state and the next char, go to next state
	- return true if successful, return false otherwise
********************************************************************************/

BOOL DictionaryNextState(const PATHNODE * const pNode,
						wchar_t wch,
						PATHNODE *pNextNode)
{
	WORD mode;
	DWORD state;

	mode = pNode->extra;

	switch(mode)
	{
	case DICT_MODE_LITERAL:  // eg. "USA", "Florida", "top", "Top"
		break;
	case DICT_MODE_CAPITALIZED:  // eg. "TOP", "Top"
		if (RecmaskFromUnicode(wch) & ALC_UCALPHA)
			mode = DICT_MODE_ALLCAPS;
		else
		{
			mode = DICT_MODE_LITERAL;
			break;
		}
	case DICT_MODE_ALLCAPS:  // eg. "FLORIDA", "TOP"
		if (!(RecmaskFromUnicode(wch) & ALC_UCALPHA))
			return 0;
		wch = (wchar_t) towlower(wch);
		break;
	default:
		ASSERT(0);
	}

	state = DictNextState(pNode->state, wch);
	if (state == pNode->state)
		return 0;
	pNextNode->state = state;
	pNextNode->extra = mode;
	return 1;
}


BOOL DictionaryValidState(const PATHNODE * const pNode)
{
	return DictFinalState(pNode->state);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\height.c ===
// height.c

#include "tsunamip.h"

const BYTE rgBHUni[94] =
{
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0021 !
    BASE_QUOTE     | XHEIGHT_PUNC, // 0x0022 "
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0023 #
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0024 $
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0025 %
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0026 &
    BASE_QUOTE     | XHEIGHT_PUNC, // 0x0027 '
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0028 (
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0029 )
    BASE_NORMAL    | XHEIGHT_HALF, // 0x002A *
    BASE_NORMAL    | XHEIGHT_HALF, // 0x002B +
    BASE_NORMAL    | XHEIGHT_PUNC, // 0x002C ,
    BASE_DASH      | XHEIGHT_DASH, // 0x002D -
    BASE_NORMAL    | XHEIGHT_DASH, // 0x002E .
    BASE_NORMAL    | XHEIGHT_FULL, // 0x002F /
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0030 0
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0031 1
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0032 2
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0033 3
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0034 4
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0035 5
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0036 6
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0037 7
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0038 8
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0039 9
    BASE_NORMAL    | XHEIGHT_HALF, // 0x003A :
    BASE_NORMAL    | XHEIGHT_HALF, // 0x003B ;
    BASE_NORMAL    | XHEIGHT_FULL, // 0x003C <
    BASE_DASH      | XHEIGHT_HALF, // 0x003D =
    BASE_NORMAL    | XHEIGHT_FULL, // 0x003E >
    BASE_NORMAL    | XHEIGHT_FULL, // 0x003F ?
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0040 @
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0041 A
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0042 B
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0043 C
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0044 D
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0045 E
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0046 F
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0047 G
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0048 H
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0049 I
    BASE_NORMAL    | XHEIGHT_FULL, // 0x004A J
    BASE_NORMAL    | XHEIGHT_FULL, // 0x004B K
    BASE_NORMAL    | XHEIGHT_FULL, // 0x004C L
    BASE_NORMAL    | XHEIGHT_FULL, // 0x004D M
    BASE_NORMAL    | XHEIGHT_FULL, // 0x004E N
    BASE_NORMAL    | XHEIGHT_FULL, // 0x004F O
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0050 P
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0051 Q
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0052 R
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0053 S
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0054 T
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0055 U
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0056 V
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0057 W
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0058 X
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0059 Y
    BASE_NORMAL    | XHEIGHT_FULL, // 0x005A Z
    BASE_NORMAL    | XHEIGHT_FULL, // 0x005B [
    BASE_NORMAL    | XHEIGHT_FULL, // 0x005C
    BASE_NORMAL    | XHEIGHT_FULL, // 0x005D ]
    BASE_QUOTE     | XHEIGHT_PUNC, // 0x005E ^
    BASE_NORMAL    | XHEIGHT_DASH, // 0x005F _
    BASE_QUOTE     | XHEIGHT_PUNC, // 0x0060 `
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0061 a
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0062 b
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0063 c
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0064 d
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0065 e
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0066 f
    BASE_DESCENDER | XHEIGHT_3Q, // 0x0067 g
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0068 h
    BASE_NORMAL    | XHEIGHT_3Q, // 0x0069 i
    BASE_DESCENDER | XHEIGHT_3Q,   // 0x006A j
    BASE_NORMAL    | XHEIGHT_FULL, // 0x006B k
    BASE_NORMAL    | XHEIGHT_FULL, // 0x006C l
    BASE_NORMAL    | XHEIGHT_HALF, // 0x006D m
    BASE_NORMAL    | XHEIGHT_HALF, // 0x006E n
    BASE_NORMAL    | XHEIGHT_HALF, // 0x006F o
    BASE_DESCENDER | XHEIGHT_3Q, // 0x0070 p
    BASE_DESCENDER | XHEIGHT_3Q  , // 0x0071 q
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0072 r
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0073 s
    BASE_NORMAL    | XHEIGHT_FULL, // 0x0074 t
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0075 u
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0076 v
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0077 w
    BASE_NORMAL    | XHEIGHT_HALF, // 0x0078 x
    BASE_DESCENDER | XHEIGHT_3Q, // 0x0079 y
    BASE_NORMAL    | XHEIGHT_HALF, // 0x007A z
    BASE_NORMAL    | XHEIGHT_FULL, // 0x007B {
    BASE_NORMAL    | XHEIGHT_FULL, // 0x007C |
    BASE_NORMAL    | XHEIGHT_FULL, // 0x007D }
    BASE_DASH      | XHEIGHT_PUNC  // 0x007E ~
};

BYTE PUBLIC TypeFromSYM(SYM sym)
{
    if ((sym >= 0x21) && (sym <= 0x7E))
    {
        return(rgBHUni[sym - 0x21]);
    }

    ASSERT(0);
    return(0);
}

VOID PUBLIC GetBoxinfo(BOXINFO * boxinfo, int iBox, LPGUIDE lpguide)
{
    //
    // The size of the writing area is computed first.
    //

	if (lpguide->cyBase == 0)
		boxinfo->size = lpguide->cyBox;
	else
		boxinfo->size = lpguide->cyBase;

	if (lpguide->cyMid == 0)
		boxinfo->xheight = boxinfo->size / 2;
	else
		boxinfo->xheight = lpguide->cyMid;

	boxinfo->baseline = boxinfo->size + lpguide->yOrigin + (iBox / lpguide->cHorzBox) * lpguide->cyBox;

	boxinfo->midline = boxinfo->baseline - boxinfo->xheight;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\hwx.c ===
/******************************Module*Header*******************************\
* Module Name: hwx.c
*
* Don has a simpler restricted functionality API that he has written for
* KIME/MITSU to use that does boxed character recognition.
*
* I've #ifdefed out the code KIME doesn't need and I've added those
* new API's here as a wrapper for the old API's.  This way our development
* DLL can run with KIME/MITSU.
*
* Created: 15-Feb-1996 12:23:42
* Author: Patrick Haluptzok patrickh
*
* Copyright (c) 1996 Microsoft Corporation
\**************************************************************************/

#include "tsunamip.h"

#if defined(DBG)
BOOL bLogEverything = FALSE;  // Logs what is going on everywhere.
#endif

// iUseCount tells if we have successfully loaded and is incremented to 1 when that happens.

int iUseCount = 0;

// hInstanceDll is refered to to load resources.

HINSTANCE hInstanceDll;

//////////////////   Local functions

BOOL WINAPI DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
	if (dwReason == DLL_PROCESS_DETACH)
	{
		return(TRUE);
	}

	hInstanceDll = hDll;
	return((int) TRUE);
}

VOID PRIVATE UnloadRecognizer(VOID)
{
	if (iUseCount == 0)
		return;

    DestroyGLOBAL();
    iUseCount = 0;
}

/******************************Public*Routine******************************\
* HwxConfig
*
* Initialize the recognizer when it loads.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

BOOL WINAPI HwxConfig()
{
    BOOL  fLoad = TRUE;

	if (iUseCount == 1)
		return(TRUE);

    //
    // Initialize the handle table, otter, zilla and cart
    //

    if (InitGLOBAL() &&
		//((void *) NULL != TailLoad(hInstanceDll, 5500, 296)) &&
		((void *) NULL != LoadDictionary(hInstanceDll)))
	{
		iUseCount = 1;
	}
	else
	{
        if (!fLoad)
            UnloadRecognizer();

		iUseCount = 0;
	}

    return (iUseCount);
}

/******************************Public*Routine******************************\
* HwxCreate
*
* Create an HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

HRC WINAPI HwxCreate(HRC hrctemplate)
{
	XRC	   *xrc;
	XRC	   *xrctemplate = (XRC *) hrctemplate;

	if (xrctemplate && !VerifyHRC(xrctemplate))
		return((HRC) NULL);

	xrc = ExternAlloc(sizeof(XRC));

	if (!xrc)
		return (HRC) NULL;

	if (!InitializeXRC(xrc, xrctemplate, NULL))
	{
		DestroyXRC(xrc);
		return (HRC) NULL;
	}

	return (HRC) xrc;
}

/******************************Public*Routine******************************\
* HwxDestroy
*
* Destroy an HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxDestroy(HRC hrc)
{
	XRC	   *xrc = (XRC *) hrc;

	if (!VerifyHRC(xrc))
		return HRCR_ERROR;

	DestroyXRC(xrc);

	return HRCR_OK;
}

/******************************Public*Routine******************************\
* HwxSetGuide
*
* Sets the guide structure to use.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxSetGuide(HRC hrc, GUIDE *lpguide, UINT nFirstVisible)
{
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return(HRCR_ERROR);

   return(SetGuideXRC(xrc, lpguide, nFirstVisible));
}

/******************************Public*Routine******************************\
* HwxSetAlphabet			
*
* Tells what character sets to prefer.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxSetAlphabet(HRC hrc, ALC alc)
{
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return HRCR_ERROR;

    return(SetAlphabetXRC(xrc, alc, NULL));
}


/******************************Public*Routine******************************\
* HwxProcess
*
* Process the ink and return the results.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxProcess(HRC hrc)
{
    int     iRet;
    XRC *   xrc = (XRC *)hrc;

    //
    // Search a linear list of pointers we have given out and see if this is
    // one of them.  By design we hand out pointers and the first dword is used
    // by penwin to write in.
    //

    if (!VerifyHRC(xrc))
    {
        return HRCR_ERROR;
    }

    //
    // Once Process HRC is called we set the BeginProcess flag to
    // TRUE which causes any API calls that try to change the
    // recognition settings (ALC,GUIDE,MAXRESULTS,etc) to fail.
    //

    SetBeginProcessXRCPARAM(xrc, TRUE);

    iRet = SchedulerXRC(xrc);

    return(iRet);
}

/******************************Public*Routine******************************\
* HwxEndInput
*
* No more ink is coming (or can be added) once this is called.
*
* History:
*  27-Mar-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxEndInput(HRC hrc)
{
    XRC *   xrc = (XRC *)hrc;

    if (!VerifyHRC(xrc))
    {
        return HRCR_ERROR;
    }

    SetEndInputXRC(xrc, TRUE);  // Sets the fEndInput to TRUE in XRCPARAM.
    xrc->fUpdate = TRUE;		// Let's engine know we have to clean up glyphsyms.

    return HRCR_OK;
}


/******************************Public*Routine******************************\
* HwxInput
*
* Add Ink to the HRC.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxInput(HRC hrc, POINT  *lppnt, STROKEINFO *lpsi)
{
    DWORD dwDuration;
    int iRet;
    XRC *xrc = (XRC *) hrc;

    if (!VerifyHRC(xrc) || IsEndOfInkXRC(xrc))
    {
        return(HRCR_ERROR);
    }

    ASSERT(xrc);

    ASSERT(NSamplingRateGlobal());

    dwDuration = ((DWORD)lpsi->cPnt * 1000) / (DWORD)NSamplingRateGlobal();

    if (AddPenInputINPUT(xrc, lppnt, lpsi, (UINT)dwDuration))
    {
        iRet = HRCR_OK;
    }
    else
    {
        iRet = HRCR_ERROR;
    }

	return(iRet);
}

/******************************Public*Routine******************************\
* HwxGetResults
*
* Returns the results from the recognizer.
*
* History:
*  15-Feb-1996 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxGetResults(HRC hrc, UINT cAlt, UINT iSyv, UINT cBoxRes, BOXRESULTS *rgBoxResults)
{
   XRC   *xrc = (XRC *)hrc;

   if (!VerifyHRC(xrc) ||
		 rgBoxResults == NULL)
        return(HRCR_ERROR);

    return(GetBoxResultsXRC(xrc, cAlt, iSyv, cBoxRes, rgBoxResults, FALSE));
}

/******************************Public*Routine******************************\
* HwxResultsAvailable
*
* Warnings: This assumes the writer can't go back and touch up previous
* characters.
*
* Returns the number of characters that can be gotten and displayed safely
* because the viterbi search has folded to one path at this point.
*
* Return the number of characters available in the
* path that are ready to get.  This API looks at the viterbi search and
* any characters far enough back in the input that all the paths merge
* to 1 are done and can be displayed because nothing further out in the
* input will change the best path back once it's merged to a single path.
*
* History:
*  15-Jan-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

int WINAPI HwxResultsAvailable(HRC hrc)
{
    GLYPHSYM   *glyphsymCurr;
    GLYPHSYM   *glyphsymBack;
    XRC		   *xrc = (XRC *) hrc;
    int        iPath, cChosen, iLayer;
    wchar_t    wch;

    //
    // Search a linear list of pointers we have given out and see if this is
    // one of them.  By design we hand out pointers and the first dword is used
    // by penwin to write in.
    //

    if (!VerifyHRC(xrc))
    {
        return(0);
    }

    iPath = min(CLayerProcessedSINFO(xrc), CLayerPATHSRCH(xrc));

    if (iPath == 0)
    {
        return(0);
    }

    if (IsEndOfInkXRC(xrc))
    {
        //
        // Well if they have called end of ink we can give them at least
        // this much.  If they haven't called HwxProcess yet it may not
        // be all the characters.
        //

        return(iPath);
    }

    ASSERT(iPath <= xrc->cQueue);

    glyphsymCurr = xrc->ppQueue[iPath - 1];

    ASSERT(glyphsymCurr);

    memset(glyphsymCurr->rgReferenced, 0xff, MAX_PATH_LIST * sizeof(char));

    while (glyphsymBack = glyphsymCurr->prev)
    {
        memset(glyphsymBack->rgReferenced, 0, MAX_PATH_LIST * sizeof(char));

        //
        // Mark who is pointed to in the previous layer.
        //

        cChosen = 0;

        for (iPath = 0; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                glyphsymBack->rgReferenced[glyphsymCurr->rgPathnode[iPath].indexPrev] = 1;
                cChosen += 1;
            }
        }

        if (cChosen <= 1)
        {
            return(glyphsymBack->iLayer + 1);
        }

		glyphsymCurr = glyphsymBack;
    }

    //
    // Well we weren't so lucky to converge to 1 path by now, but we really didn't expect to.
    // We need to start at the beginning and look for glyphsyms where all paths converge to the
    // same character.
    //

    cChosen = min(CLayerProcessedSINFO(xrc), CLayerPATHSRCH(xrc));

    ASSERT(cChosen <= xrc->cQueue);

    for (iLayer = 0; iLayer < cChosen; iLayer++)
    {
        glyphsymCurr = xrc->ppQueue[iLayer];

        //
        // Look for the first valid pathnode and record it's label.
        //

        for (iPath = 0; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                wch = glyphsymCurr->rgPathnode[iPath].wch;
                break;
            }
        }

        //
        // Now see if any other valid node has a different label.
        //

        for (; iPath < glyphsymCurr->cPath; iPath++)
        {
            if (glyphsymCurr->rgReferenced[iPath])
            {
                if (wch != glyphsymCurr->rgPathnode[iPath].wch)
                {
                    return(iLayer);
                }
            }
        }
    }

    return(iLayer);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\xrc.h ===
#ifndef __INCLUDE_XRC
#define __INCLUDE_XRC

#define XRC_PROCESS_IDLE       0
#define XRC_PROCESS_TIMEOUT    1
#define XRC_PROCESS_GESTURE    5

#define CRESULT_DEFAULT        32
#define SCH_DEFAULT            SCH_ADVISE

typedef struct tagXRC
{
// These fields used to be in the PATHSRCH object

	int			cLayer;         // number of layers (boxes) processed so far
	int			cResult;
	int			cResultBuf;

// For partial character recognition and aborting any recognition

	int			nPartial;		// What type of completion should we do?
	DWORD		cstrkRaw;		// Unprocessed stroke count
	DWORD	   *pdwAbort;		// Abort address

// These fields used to be in the SINFO object

    BOOL		fUpdate;		// True when event (ink / EndOfInk) occurs that makes
								// us need to try classifying dirty glyphsyms.

	int			ixBox;			// boxed input:  index of last ixBox in GUIDE
    int			iyBox;			// boxed input:  index of last iyBox in GUIDE
    int			cPntLastFrame;	// number of points in the last frame processed

    int			cFrame;			// number of frames processed
    int			cQueue;			// number of queue elements
    int			cQueueMax;		// size of the queue

    GLYPHSYM  **ppQueue;		// Array of Glyphsyms.
    GLYPHSYM   *gsMinUpdated;	// Smallest iLayer of modified GLYPHSYMS that
								// has been re-classified - restart the path
								// search at this glyphsym.
    GLYPHSYM   *gsLastInkAdded;	// Box that the last ink was added to, we only
								// work up to the box before the box that is still
								// getting ink added.
				
// These fields used to be in the XRCPARAM object

    GUIDE       guide;          // guide structure
    UINT		uGuideType;     // guide type.
    UINT		nFirstBox;
    UINT		cResultMax;
    WCHAR		symPrev;        // 0 if no previous character, otherwise hex value of char.
    CHARSET		cs;
    BOOL		fEndInput;      // Set when no more input for this HRC is coming.
    BOOL		fBeginProcess;  // Set when ProcessHRC is called.  Once set we don't allow
								// the HRC's recognition settings (ALC,Guide,Maxresults,etc)
								// to be changed.

// These fields used to be in the INPUT object

	STROKEINFO	si;				// current strokeinfo
	int			cInput;			// number of frames processed so far
	int			cInputMax;		// size of the array
	FRAME	  **rgFrame;		// array of frame elements
} XRC;

#define	GetAlphabetXRC(xrc, lpalcIn, rgbfalcIn) 		\
				(GetAlphabet((xrc)->cs.recmask,	lpalcIn))

#define	SetAlphabetXRC(xrc, alcIn, rgbfalcIn)				\
				(SetAlphabet(&((xrc)->cs.recmask), alcIn,	\
				csDefault.recmask))

#define	GetAlphabetPriorityXRC(xrc, lpalcIn, rgbfalcIn) 		\
				(GetAlphabet((xrc)->cs.recmaskPriority, lpalcIn))

#define	SetAlphabetPriorityXRC(xrc, alcIn, rgbfalcIn)				\
				(SetAlphabet(&((xrc)->cs.recmaskPriority), alcIn,	\
				RECMASK_NOPRIORITY))

#define	SetEndInputXRC(xrc, f)		(SetEndInputXRCPARAM((xrc), f))
#define	IsEndOfInkXRC(xrc)			(FEndInputXRCPARAM((xrc)))
#define	GetMaxResultsXRC(xrc)	((int)((xrc)->cResultMax))
#define	SetMaxResultsXRC(xrc, c)	((xrc)->cResultMax = (UINT)(c), TRUE)

int  PUBLIC SetPrivateRecInfoXRC(XRC *xrc, WPARAM wparam, LPARAM lparam);
int  PUBLIC GetPrivateRecInfoXRC(XRC *xrc, WPARAM wparam, LPARAM lparam);
BOOL PUBLIC InitializeXRC(XRC *xrc, XRC *xrcDefault, HANDLE hrec);
void PUBLIC DestroyXRC(XRC *xrc);
int	 PUBLIC SchedulerXRC(XRC *xrc);
int	 PUBLIC SetGuideXRC(XRC *xrc, LPGUIDE lpguide, UINT nFirst);
BOOL PUBLIC SetTimeoutXRC(XRC *xrc, DWORD timeout);
int	 PUBLIC GetBoxResultsXRC(XRC *xrc, int cAlt, int iBox, int cBox, LPBOXRESULTS rgBoxResults, BOOL fInkset);
int	 PUBLIC ProcessTimeoutXRC(XRC *xrc);
int	 PUBLIC GetAlphabet(RECMASK recmask, LPALC lpalcIn);
int  PUBLIC SetAlphabet(RECMASK *precmask, ALC alcIn, RECMASK recmaskDef);
BOOL PUBLIC SetPartialXRC(XRC *xrc, DWORD dw);
BOOL PUBLIC SetAbortXRC(XRC *xrc, DWORD *pdw);

#endif	// __INCLUDE_XRC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\xrcparam.h ===
/******************************Module*Header*******************************\
* Module Name: xrcparam.h
*
* This is the structure that holds all the parameters that can be set into
* an HRC by the application.  When creating a compatible HRC these are most
* of the settings that need to be copied to the new HRC.
*
* Created: 27-Mar-1995 15:35:41
*
* Copyright (c) 1995 Microsoft Corporation
\**************************************************************************/

#ifndef __INCLUDE_XRCPARAM
#define __INCLUDE_XRCPARAM

#define	XPGUIDE_NONE	0
#define	XPGUIDE_BOXED	1
#define	XPGUIDE_LINED	2

#define	LpguideXRCPARAM(xrc)			(&((xrc)->guide))
#define	FirstBoxXRCPARAM(xrc)			((xrc)->nFirstBox)
#define	ResultMaxXRCPARAM(xrc)			((xrc)->cResultMax)
#define	CharsetXRCPARAM(xrc)			((xrc)->cs)
#define	FBoxedInputXRCPARAM(xrc)		((xrc)->uGuideType == XPGUIDE_BOXED)
#define	FLinedInputXRCPARAM(xrc)		((xrc)->uGuideType == XPGUIDE_LINED)
#define	FFreeInputXRCPARAM(xrc)			((xrc)->uGuideType == XPGUIDE_NONE)
#define	FEndInputXRCPARAM(xrc)			((xrc)->fEndInput)
#define	SetEndInputXRCPARAM(xrc, f)		((xrc)->fEndInput = (f))
#define	FBeginProcessXRCPARAM(xrc)		((xrc)->fBeginProcess)
#define	SetBeginProcessXRCPARAM(xrc, f)	((xrc)->fBeginProcess = (f))

void DestroyXRCPARAM(XRC *xrc);
void InitializeGesturesXRCPARAM(XRC *xrc, XRC *xrcDef);
BOOL AddFrameGLYPHSYM(GLYPHSYM * gs, FRAME * frame, CHARSET * cs, XRC *xrc);
void GetShapeProbGLYPHSYM(GLYPHSYM *gs, CHARSET * cs, XRC *xrc);
void GetMatchProbGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc);
void InsertWildCardGLYPHSYM(GLYPHSYM * gs, CHARSET *cs, XRC *xrc);
void DispatchGLYPHSYM(GLYPHSYM *gs, CHARSET *cs, XRC *xrc);

#endif	//__INCLUDE_XRCPARAM
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\win2kunicode\makefile.inc ===
# Rules for compiling .cfgs from .xmls
.SUFFIXES: .cfg .h .xml

{..\}.xml{$(O)}.cfg:
    copy $** $(O)
	$(_TPG_ROOT)\Tools\gc.exe -h $*.h $*.xml

# Automatic Registration
!if defined(MAKEDLL) && defined(AUTOREG)
$(TARGETNAME).cpy: $(O)\$(TARGETNAME).dll
    regsvr32 /s $** > $@
!else
$(TARGETNAME).cpy:
    echo File not registered: $** > $@
!endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\trie.h ===
#ifndef TRIE_H
#define TRIE_H

#include <windows.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Abstract trie node structure.  wch is a character to transition on; flags describe various things 
about the compressed trie; lpbNode points to the first byte of the next node in this state, and
lpbDown points to the first byte referenced by the down pointer, if any */

typedef struct tagTRIESCAN 
{
	WCHAR   wch;		// Unicode character
	WORD  	wFlags;		// see below
	LPBYTE 	lpbNode;	// Address of next byte within the compressed trie
	LPBYTE	lpbDown;	// Address referenced by down pointer, if any
	LPBYTE	lpbSRDown;	// Last single-ref address referenced 
} TRIESCAN, *PTRIESCAN, *LPTRIESCAN;

/* Trie node flags */
			
#define fTrieNodeValid		0x0001	// wch is the last letter of a valid word
#define fTrieNodeDown		0x0002	// iDown is valid (word so far is a valid prefix)
#define fTrieNodeEnd		0x0004	// Last node in the state (no more alternatives to wch)
#define fTrieNodeInline		0x0008	// iDown omitted, since it points to next consecutive node
#define fTrieNodeMultiref 	0x0010	// pointer is a second reference or worse
#define fTrieNodeSegment    0x0020  // Offset references another segment
#define fTrieNodeRestrict   0x0040  // The word is restricted.
#define fTrieNodeS          0x8000  // Temporarily used to mark a node singleref
#define fTrieNodeM          0x4000  // Temporarily used to mark a node multiref
#define fTrieNodeRef        0x2000  // Temporarily used to mark a node has been moved.

/* Macro to access the data in the node, works for dawgs and tries */

#define DAWGDATA(pdawg)       ((pdawg)->wch)
#define DAWGDOWNFLAG(pdawg)   ((pdawg)->wFlags & fTrieNodeDown)
#define DAWGENDFLAG(pdawg)    ((pdawg)->wFlags & fTrieNodeEnd)
#define DAWGWORDFLAG(pdawg)   ((pdawg)->wFlags & fTrieNodeValid)
#define DAWGRESTRICTED(pdawg) ((pdawg)->wFlags & fTrieNodeRestrict)

/* Fixed-length part of the compressed trie header */

typedef struct tagTRIESTATS 
{
	WORD version;			// version of this particular compressed trie
	WORD cMaxWord;			// number of characters in longest word
	WORD cMaxState;			// number of nodes in longest state (max alternatives)
	WORD cUniqueCharFlags;	// unique char/flags pairs
	WORD cCharFlagsCodesMax;	// bytes in longest char/flags code
 	WORD cUniqueMRPointers;	// unique multi-ref pointers
	WORD cMRPointersCodesMax;	// bytes in longest MR pointer code
	WORD cUniqueSROffsets;	// unique offsets in Single-ref segment
	WORD cSROffsetsCodesMax;	// bytes in longest Single-ref code
	WORD cbHeader;				// bytes in header & tables	
	DWORD cbTrie;			  // bytes in trie
} TRIESTATS, *PTRIESTATS, *LPTRIESTATS;

/* Primary unit of a node.  Nodes usually contain a pointer too */

typedef struct tagCHARFLAGS {
	wchar_t wch;
	short wFlags;
} CHARFLAGS, *PCHARFLAGS, *LPCHARFLAGS;

/* Control structure used to decompress the trie */

typedef struct tagTRIECTRL {
	LPTRIESTATS lpTrieStats;	// Pointer to base of header segment

	LPWORD	lpwCharFlagsCodes;	// decoding table for Char/flags
	LPWORD	lpwMRPointersCodes;	// decoding table for multiref pointers
	LPWORD  lpwSROffsetsCodes;	// decoding table for singleref offsets
	LPCHARFLAGS lpCharFlags;	// table to convert codes to char/flags
	LPDWORD  lpwMRPointers;		// table to convert codes to multiref pointers
	LPDWORD	lpwSROffsets;		// table to convert codes to Singleref offsets    

	LPBYTE lpbTrie;		        // Pointer to the trie.
} TRIECTRL, *PTRIECTRL, *LPTRIECTRL;

/* Useful Constants */

#define cwchTrieWordMax	128	// We'll fail on any words longer than this

// The prototypes below are plain C	(this is required for use with C++)

/* Given a pointer to a mapped file or resource containing a compressed trie,
read the trie into memory, making all the allocations required */

TRIECTRL * TrieInit(LPBYTE lpByte);

/* Free all the allocations associated with a trie */

void TrieFree(LPTRIECTRL lpTrieCtrl);

void TrieDecompressNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

/* Given a compressed trie and a pointer to a decompresed node from it, find and decompress
the next node in the same state. lpTrieScan is a user-allocated structure that holds the
decompressed node and into which the new node is copied.
This is equivalent to traversing a right pointer or finding the next alternative
letter at the same position. If there is no next node (i.e.this is the end of the state)
then TrieGetNextNode returns FALSE. To scan from the beginning of the trie, set the lpTrieScan
structure to zero */

BOOL
TrieGetNextNode(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

/* Follow the down pointer to the next state.  This is equivalent to accepting the character
in this node and advancing to the next character position.  Returns FALSE if there is no
down pointer.  This also decompresses the first node in the state, so all the values in
lpTrieScan will be good. */

BOOL
TrieGetNextState(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan);

/* Check the validity of a word or prefix. Starts from the root of pTrie looking for
pwszWord.  If it finds it, it returns TRUE and the user-provided lpTrieScan structure 
contains the final node in the word.  If there is no path, TrieCheckWord returns FALSE
To distinguisha valid word from a valid prefix, caller must test 
wFlags for fTrieNodeValid. */

BOOL
TrieCheckWord(LPTRIECTRL lpTrieCtrl, LPTRIESCAN lpTrieScan, wchar_t * lpwszWord);

/* Walk the trie from pTrieNode, calling pfnTrieWord on every valid word.  pvParam is passed through
to pfnTrieWord.  If pfnTrieWord returns non-zero, the enumeration stops.  lpwszWord must point to a 
space of cwchTrieWordMax+1 wchar_t's.  To walk the entire trie, set *pTrieScan to all zeros.  Returns
the number of words traversed. pfnTrieWord may be null if all you want is the count of words. */

int
TrieEnumerate(
	LPTRIECTRL lpTrieCtrl,		// Trie to enumerate
	LPTRIESCAN lpTrieScan, 	// structure holding starting point, all-zero for whole trie
	wchar_t *pwszWord, 			// buffer to hold words being enumerated
	void *pvParam, 				// parameter to pass to pfnTrieWord
	int (*pfnTrieWord)(wchar_t *pwszWord, void *pvParam)
);

/**** Subroutines for traversing Directed Acyclic Word Graphs ****/

/* Abstract trie node structure.  wch is a character to transition on; flags describe various things 
about the compressed trie; iDown indexes the first node in the state wch transitions to. DAWG is a special
kind of trie: a "Directed Acyclic Word Graph," essentially an ending-compressed trie. */

typedef struct tagDAWGNODE 
{
	WCHAR wch;		// Unicode character
	WORD  wFlags;	// see below
	DWORD iDown;	// Offset of first node in next state
} DAWGNODE, *PDAWGNODE, *LPDAWGNODE;

/* Given a trie and a pointer to a node in it, find the next node in that state.
This is equivalent to traversing a right pointer or finding the next alternative
letter at the same position. Returns a pointer to the new node, NULL if there is 
no next node (i.e. if this is the end of a state).*/

DAWGNODE *DawgGetNextNode(void *pTrie, DAWGNODE *pTrieNode);

/* From this node, find the first node in the state it points to.  This is equivalent
to traversing a down pointer or extending the word one letter and finding the first
alternative.  Returns a pointer to the first node in the new state, NULL if there is 
no down pointer. To find the first state in the trie, use pTrieNode == NULL */

DAWGNODE *DawgGetNextState(void *pTrie, DAWGNODE *pTrieNode);

/* Check the validity of a word or prefix. Starts from the root of pTrie looking for
pwszWord.  If it finds it, it returns a pointer to the terminal node in pTrie Returns
NULL if there is no path through the trie that corresponds to pwszWord. To distinguish
a valid word from a valid prefix, caller must test wFlags for fTrieNodeValid. */

DAWGNODE *DawgCheckWord(void *pTrie, wchar_t *pwszWord);

/* Walk the trie from pTrieNode, calling pfnTrieWord on every valid word.  pvParam is passed through
to pfnTrieWord.  If pfnTrieWord returns non-zero, the enumeration stops.  pwszWord must point to a 
space of cwchTrieWordMax+1 wchar_t's.  To walk the entire trie, pass NULL for pTrieNode. Returns
the number of words traversed. pfnTrieWord may be null if all you want is the count of words. */

int
DawgEnumerate(
	void *pTrie,				// Trie to enumerate
	DAWGNODE *pTrieNodeStart, 	// point to enumerate from, NULL if all
	wchar_t *pwszWord, 			// buffer to hold words being enumerated
	void *pvParam, 				// parameter to pass to pfnTrieWord
	int (*pfnTrieWord)(wchar_t *pwszWord, void *pvParam)
);

// end plain C Prototypes

#ifdef __cplusplus
}
#endif

#endif // TRIE_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\sinfo.c ===
//
// File:  sinfo.c
//
// SINFO object contains search information to be used by the ENGINE.
// It contains GLYPHSYMs, i.e. glyphs and symbols they represent,
// for every allowable stroke combination in the given group.
//
// The GLYPHSYMs are stored differently depending on whether we are
// doing boxed input recognition or free input recognition.  For
// boxed input, the array (ppQueue) represents an array of glyphsyms
// stored according to box indices.  For example, if the user writes
// an 'a' in box 2 and another 'a' in box 4, sinfo->ppQueue[0] contains
// the glyphsym for box 2 and sinfo->ppQueue[1] contains the glyphsym
// for box 4.
//
// For free input, the array represents stroke indices.  Hence,
// sinfo->ppQueue[2] has a linked list of all the glyphsyms that end
// at the 3rd stroke.  Each of those glyphsyms will correspond to
// whether it has 1, 2, or 3 stroke combinations.
//

#include "tsunamip.h"

ROMMABLE CHARSET csDefault =
{
   RECMASK_ALL_DEFAULTS,
   RECMASK_DBCS,         // Make this 0 to get greco functionality / SBCS functionality.
   SSH_RD,
};

#define DEF_LAYER_MAX           100

void PRIVATE GrowArraySINFO(XRC *xrc);
BOOL PRIVATE GetBoxSyvsAtSINFO(XRC *xrc, int iSyv, int cAlt, LPSYV lpsyv);
int  PRIVATE GetBoxInkAtSINFO(XRC *xrc, int iBox, LPHINKSET lphinksetBox);
int  PRIVATE ProcessBoxSINFO(XRC *xrc, FRAME * frame, int iframe);
int  PRIVATE ProcessFreeSINFO(XRC *xrc, FRAME * frame, int iframe);
int  PRIVATE GetBoxIndexSINFO(XRC *xrc, FRAME * frame, LPGUIDE lpguide, int nFirstBox);
void PRIVATE AddGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs);

// *******************************
// 
// CreateSINFO()
//
// creates an SINFO object
//
// Arguments:  input - INPUT object with which to get the frames
//                                      xrcparam - XRCPARAM object which contains recog parameters
//
// Returns:    SINFO
//
// Note:       none
//                                
// *******************************
BOOL InitializeSINFO(XRC *xrc)
{
	ASSERT(xrc);

	xrc->cQueueMax = DEF_LAYER_MAX;
	xrc->ppQueue = (GLYPHSYM **) ExternAlloc(xrc->cQueueMax * sizeof(GLYPHSYM *));

	if (xrc->ppQueue == (GLYPHSYM **) NULL)
		return FALSE;

	xrc->iyBox = -1;
	xrc->cQueue = 0;

	return TRUE;
}


// *******************************
// 
// DestroySINFO()
//
// destroys an SINFO object
//
// Arguments:  sinfo - object to be destroyed
//
// Returns:    none
//
// Note:       INPUT object is read only, so it's deallocation is not
//             handled in this function.
//                                
// *******************************
void PUBLIC DestroySINFO(XRC *xrc)
{
	int     i;
	GLYPHSYM *gs;

	if (!xrc)
		return;

	for (i = 0; i < xrc->cQueue; i++ )
	{
		gs = xrc->ppQueue[i];
		if (gs)
			DestroyGLYPHSYM(gs);
	}

	if (xrc->ppQueue)
		ExternFree(xrc->ppQueue);
}

// *******************************
// 
// GetBoxResultsSINFO()
//
// retrieves one piece of box information from SINFO object at a time.
//
// Arguments:  sinfo - object
//             cAlt - # of box alternatives
//             iSyv - index of syv result (== index of the layer)
//             lpboxres - LPBOXRESULT buffer to store the information
//
// Returns:    
//
// Note:       none
//                                
// *******************************

int PUBLIC GetBoxResultsSINFO(XRC *xrc, int cAlt, int iSyv, LPBOXRESULTS lpboxres, BOOL fInkset)
{
    SYV syv, tmp, tmp1;
	int i;
	int iRet = HWX_SUCCESS;

	ASSERT(xrc);
    ASSERT(lpboxres);
    ASSERT(FBoxedSINFO(xrc));
    ASSERT(iSyv < CLayerProcessedSINFO(xrc));

    if (iSyv >= xrc->cQueue)
	{
		return(HWX_FAILURE);
	}

    lpboxres->indxBox = IBoxGLYPHSYM(xrc->ppQueue[iSyv]) - FirstBoxXRCPARAM(xrc);

    //
    // This copies the SYMs to be SYV's in the output boxresults structure and
    // does some more unfolding.
    //

	GetBoxSyvsAtSINFO(xrc, iSyv, cAlt, (LPSYV)(&lpboxres->rgSyv[0]));

	// We need to move the SYV that was the top context choice to be the top of the list
	// even if it wasn't the best shape matcher choice.

    if (iRet == HWX_SUCCESS)
    {
        GLYPHSYM *gs = GetGlyphsymSINFO(xrc, iSyv);

		tmp = syv = gs->syvBestPath;

        //
        // Insert the result from the engine processing
		// this SYV may or may not be the same as the best choice
        // returned by SINFO.
        //

        for (i = 0; i < cAlt; i++)
        {
            if ((lpboxres->rgSyv[i] == syv) ||
                (lpboxres->rgSyv[i] == SYV_NULL))
            {
                lpboxres->rgSyv[i] = tmp;      // Good we are finished.
                break;
            }

            //
            // Well slide everthing down by one.
            //

            tmp1 = lpboxres->rgSyv[i];
            lpboxres->rgSyv[i] = tmp;
            tmp = tmp1;
        }
    }

	return(iRet);
}

// *******************************
// 
// ProcessSINFO()
//
// processes SINFO object.  retrieves a frame from INPUT object
// and creates a corresponding FRAMESYM (which contains the results
// of shape recognition/baseline-height).
//
// Arguments:  sinfo - SINFO object to process
//
// Returns:    PROCESS_IDLE - if all the frames in INPUT were processed
//             PROCESS_READY - if used up time slice and more processing
//                needs to be done.
//
// Note:       for boxed input, needs to perform segmentation and delayed
//             stroke processing.  that means identifying the box that
//             the frame belongs to and reordering framesyms.
//                                
// *******************************

int PUBLIC ProcessSINFO(XRC *xrc, BOOL fEnd)
{
    FRAME    *frame;
    int      iRet = PROCESS_IDLE;
    ASSERT(xrc);

#if 1

    //
    // On Pegasus we add each stroke in it's entirety in one call, thus
    // we can always grab all the strokes, (though we do lose our skipping fix code then>.
    //
    // On Pegasus currently we don't support entering partial strokes, though we may in the
    // future do this.  It would be quicker to just put the ink directly in the recognizer
    // rather than passing it through messages and at some point in the future I may do that
    // but at present we don't.  To do it properly we need to mark frames when they are done
    // rather than just being afraid to touch the last stroke in the buffer.  So we can
    // optimally process ahead.
    //

    if (xrc->cFrame >= CFrameINPUT(xrc))
        return(PROCESS_IDLE);

#else

    //
    // In the old days you could add partial strokes at a time so you couldn't
    // access the last stroke until your done.
    //

    if (fEnd)
    {
        //
        // No more input can be added, last frame is complete
        // for sure so finish it off.
        //

        if (xrc->cFrame >= CFrameINPUT(xrc))
            return(PROCESS_IDLE);
    }
    else
    {
        //
        // We can't access the last frame since input may
        // still get added to it.
        //

        if (xrc->cFrame >= (CFrameINPUT(xrc) - 1))
            return(PROCESS_IDLE);   // no state changes
    }

#endif

    frame = FrameAtINPUT(xrc, xrc->cFrame);     // next frame
    ASSERT(frame);
    xrc->cPntLastFrame = CrawxyFRAME(frame);

    if (FBoxedSINFO(xrc))   // boxed processing?
    {
        iRet = ProcessBoxSINFO(xrc, frame, xrc->cFrame);
    }
    else
    {
        iRet = PROCESS_IDLE;
    }

    xrc->cFrame++;

    //
    // We return this so we won't fall down to engine processing
    // till all the frames available have been placed in their
    // corresponding GLYPHSYM.
    //

    return(PROCESS_READY);
}

#define CYBASE_FUDGE    4

// *******************************
// 
// GetBoxIndex()
//
// This function was copied from MARS implementation.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
int  PRIVATE GetBoxIndexSINFO(XRC *xrc, FRAME * frame, LPGUIDE lpguide, int nFirstBox)
   {
   XY    xy;
   int   ixBox, iyBox, iBox, cyBaseHt, iyBoxBiased;
   RECT  *rect;

   ASSERT(frame);
   ASSERT(lpguide);
	ASSERT(lpguide->cHorzBox > 0);
	ASSERT(lpguide->cVertBox > 0);

	rect = RectFRAME(frame);

	if (rect->right < lpguide->xOrigin ||
		rect->bottom < lpguide->yOrigin ||
		rect->left > lpguide->xOrigin + lpguide->cxBox * lpguide->cHorzBox ||
		rect->top > lpguide->yOrigin + lpguide->cyBox * lpguide->cVertBox)
		return(INDEX_NULL);

	xy.x = (rect->left + rect->right) / 2;

	cyBaseHt = lpguide->cyBase ? lpguide->cyBox - lpguide->cyBase : 0;
	xy.y = (rect->top * (CYBASE_FUDGE - 1) + rect->bottom) / CYBASE_FUDGE;

	ixBox = (xy.x - lpguide->xOrigin) / lpguide->cxBox;
	if (ixBox < 0)
		ixBox = 0;
	else if (ixBox > lpguide->cHorzBox - 1)
		ixBox = lpguide->cHorzBox - 1;

	iyBox = (xy.y - lpguide->yOrigin) / lpguide->cyBox;
	if (iyBox < 0)
		iyBox = 0;
	else if (iyBox > lpguide->cVertBox - 1)
		iyBox = lpguide->cVertBox - 1;

	if (xrc->iyBox >= 0)
		{
		// Help dots, accents, etc land on their respective boxes...
		if (iyBox < xrc->iyBox)
			{
			if (cyBaseHt > 0)
				{
				// expand the box below to the bottom of the previous box's baseline
				xy.y += (cyBaseHt - 1);
		
				iyBoxBiased = (xy.y - lpguide->yOrigin) / lpguide->cyBox;
				if (iyBoxBiased > (lpguide->cVertBox - 1))
					iyBoxBiased = lpguide->cVertBox - 1;
				else if (iyBoxBiased < 0)
					iyBoxBiased = 0;
	
				// TODO:  is this check good enough???
				if (iyBoxBiased == xrc->iyBox)
					iyBox = iyBoxBiased;
				}
			}
		else if (iyBox > xrc->iyBox && ixBox >= xrc->ixBox)
			{
			xy.y = (rect->top + xy.y) / 2;
			
			iyBoxBiased = (xy.y - lpguide->yOrigin) / lpguide->cyBox;
			if (iyBoxBiased > (lpguide->cVertBox - 1))
				iyBoxBiased = lpguide->cVertBox - 1;
			else if (iyBoxBiased < 0)
				iyBoxBiased = 0;
  
			// TODO:  is this check good enough???
			if (iyBoxBiased == xrc->iyBox)
				iyBox = iyBoxBiased;
			}
		}

	xrc->ixBox = ixBox;
	xrc->iyBox = iyBox;

	iBox = ixBox + (iyBox * lpguide->cHorzBox) + nFirstBox;

   return(iBox);
   }


// *******************************
// 
// ProcessBoxSINFO()
//
// performs boxed input SINFO processing.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
int PRIVATE ProcessBoxSINFO(XRC *xrc, FRAME *frame, int iframe)
{
    int      iBox;
    GLYPHSYM *gs;

    ASSERT(xrc);
    ASSERT(frame);
    ASSERT(FBoxedSINFO(xrc));

    iBox = GetBoxIndexSINFO(xrc, frame, LpguideXRCPARAM(xrc), FirstBoxXRCPARAM(xrc));

    if (iBox == INDEX_NULL)
    {
        return(PROCESS_READY);
    }

    if (gs = GetBoxGlyphsymSINFO(xrc, iBox))
    {
        //
        // Add the frame to an existing box.  re-recognize the box.
        //

        if (!AddFrameGLYPHSYM(gs, frame, &CharsetXRCPARAM(xrc), xrc))
        {
            WARNING(FALSE);
            return(PROCESS_READY);
        }
    }
    else
    {
        //
        // Create a new box containing the frame.  Recognize the box.
        //

        GLYPH *glyph = NewGLYPH();    // destroyed by GLYPHSYM object

		if (glyph == (GLYPH *) NULL)
			return PROCESS_READY;

        if (!AddFrameGLYPH(glyph, frame))
			return PROCESS_READY;

        gs = (GLYPHSYM *) ExternAlloc(sizeof(GLYPHSYM));

		if (gs == (GLYPHSYM *) NULL)
		{
			DestroyGLYPH(glyph);
			return PROCESS_READY;
		}

        InitializeGLYPHSYM(gs, GSST_BOX, iBox, glyph, &CharsetXRCPARAM(xrc));
		ASSERT(gs->glyph);

        AddBoxGlyphsymSINFO(xrc, gs);
    }

    // OK, now the GLYPH knows about this frame.  Remove it from the XRC

	xrc->rgFrame[xrc->cFrame] = (FRAME *) NULL;

    // Mark the GLYPHSYM dirty so we know to recognize it.

    MarkDirtyGLYPHSYM(gs);

    xrc->gsLastInkAdded = gs;
    xrc->fUpdate = TRUE;

    return(PROCESS_READY);
}

GLYPHSYM* PUBLIC GetBoxGlyphsymSINFO(XRC *xrc, int iBox)
{
    int   i;

    ASSERT(xrc);

    for (i = 0; i < xrc->cQueue ;i++ )
    {
        if (IBoxGLYPHSYM(xrc->ppQueue[i]) == iBox)
            return(xrc->ppQueue[i]);
    }

    return(NULL);
}

// *******************************
// 
// AddBoxGlyphsymSINFO()
//
// stores the gs object for boxed input.
// stores it based on the index of the box.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
BOOL AddBoxGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs)
{
   int   iLayer = 0, i;
   int   iBox;

   ASSERT(xrc);
   ASSERT(gs);

   iBox = IBoxGLYPHSYM(gs);

   GrowArraySINFO(xrc);

   while (iLayer < CLayerSINFO(xrc))
   {
      if (iBox < IBoxGLYPHSYM(xrc->ppQueue[iLayer]))
          break;
      iLayer++;
   }

   for (i = CLayerSINFO(xrc);i > iLayer ; i-- )
   {
      xrc->ppQueue[i] = xrc->ppQueue[i-1];
      SetILayerGLYPHSYM(xrc->ppQueue[i], i);
   }

   // set the current glyphsym
   xrc->ppQueue[iLayer] = gs;
   SetILayerGLYPHSYM(gs, iLayer);
   gs->prev = GetGlyphsymSINFO(xrc, iLayer-1);

   // the new glyphsym is inserted in the middle and
   // the previous pointer for the old glyphsym needs
   // to be properly updated.

   if (iLayer < xrc->cQueue)
      xrc->ppQueue[iLayer+1]->prev = gs;

   xrc->cQueue++;

   return(TRUE);
}


// *******************************
// 
// GrowArraySINFO()
//
// private function to handle array reallocation.
//
// Arguments:  
//
// Returns:    
//
// Note:       none
//                                
// *******************************
void PRIVATE GrowArraySINFO(XRC *xrc)
   {
	if (xrc->cQueue >= xrc->cQueueMax)
		{
		// Allocate more space.

		xrc->cQueueMax += DEF_LAYER_MAX;
		xrc->ppQueue = (GLYPHSYM**) ExternRealloc(xrc->ppQueue,
			(xrc->cQueueMax)*sizeof(GLYPHSYM*));
		ASSERT(xrc->ppQueue);

		}
   }

void PRIVATE AddGlyphsymSINFO(XRC *xrc, GLYPHSYM * gs)
   {
   int   ilayer;
   ASSERT(xrc);
   ASSERT(gs);

   GrowArraySINFO(xrc); 
	xrc->ppQueue[xrc->cQueue] = gs;

   ilayer = xrc->cQueue;
   SetILayerGLYPHSYM(gs, ilayer);
   ilayer -= CFrameGLYPHSYM(gs);
   gs->prev = GetGlyphsymSINFO(xrc, ilayer);
   
	xrc->cQueue++;
   }

GLYPHSYM* PUBLIC GetGlyphsymSINFO(XRC *xrc, int iLayer)
   {
   ASSERT(xrc);
   ASSERT(iLayer < xrc->cQueue);

   if (iLayer < 0 || iLayer >= xrc->cQueue)
      return(NULL);

   return(xrc->ppQueue[iLayer]);
   }

/******************************Public*Routine******************************\
* GetBoxSyvsAtSINFO
*
* For boxed results this returns the alternative shapes proposed.
*
* History:
*  01-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

BOOL PRIVATE GetBoxSyvsAtSINFO(XRC *xrc, int iSyv, int cAlt, LPSYV lpsyv)
{
    int iSym, cSym, iAlt;
    SYM sym;
    GLYPHSYM *gs;
    CHARSET *cs;

    ASSERT(xrc);
    ASSERT(lpsyv);
    ASSERT(FBoxedSINFO(xrc));
    ASSERT(iSyv < CLayerProcessedSINFO(xrc));

    memset(lpsyv, 0, sizeof(SYV) * cAlt);

    gs = GetGlyphsymSINFO(xrc, iSyv);

    ASSERT(gs);

    cs = CharsetSINFO(xrc);

    ASSERT(cs);

    cSym = CSymGLYPHSYM(gs);

    //
    // Check for no results available.
    //

    if ((cAlt == 0) || (cSym == 0))
    {
        lpsyv[0] = SYV_UNKNOWN;
        return (TRUE);
    }

    //
    // Stick the Syv's into the boxinfo struct.
    //

    iAlt = 0;

    for (iSym = 0; ((iSym < cSym) && (iAlt < cAlt)); iSym++)
    {
        sym = SymAtGLYPHSYM(gs, iSym);

        if (sym == SYM_UNKNOWN)
        {
            // if its a SYM_UNKNOWN then it only interests us if
            // its the only sym.  otherwise there is no point in
            // putting a SYV_UNKNOWN in because clearly something
            // has been recognized.

            if (cSym == 1)
            {
                lpsyv[iAlt++] = SYV_UNKNOWN;
            }
        }
        else
        {
            //
            // Make sure the syv hasn't already been added.
            //

            int iDup;
            SYV syvAlt;
            syvAlt = sym;

            for (iDup = 0; iDup < iAlt; iDup++)
            {
                if (lpsyv[iDup] == syvAlt)
                {
                    break;
                }
            }

            if (iDup >= iAlt)
            {
                //
                // The syv isn't already in the table.
                //

                lpsyv[iAlt++] = syvAlt;
            }
        }
    }

    return(TRUE);
}

int PUBLIC CLayerProcessedSINFO(XRC *xrc)
{
	GLYPHSYM *gs;
	int cLayerProc = 0;

	while (cLayerProc < CLayerSINFO(xrc))
    {
		gs = GetGlyphsymSINFO(xrc, cLayerProc);
		if (IsDirtyGLYPHSYM(gs))
			break;
		cLayerProc++;
    }

	return(cLayerProc);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\pathsrch.c ===
#include "tsunamip.h"
#include "log.h"
#include "unicode.h"

VOID UndoPATHSRCH(XRC *xrc, int ilayer);
VOID AddLayerPATHSRCH(XRC *xrc, GLYPHSYM *gs, BOOL bString);
FLOAT PRIVATE UnigramCost(SYM sym);

#define H ((FLOAT)-10)

const BYTE rgNextState[24] = {
		/*            A  a  1  ;  */
		/* state 0 */ 1, 4, 3, 0,
        /* state 1 */ 2, 4, 5, 0,      // Capitalized word
        /* state 2 */ 2, 5, 5, 0,      // All caps mode
        /* state 3 */ 5, 5, 3, 0,      // Numbers
        /* state 4 */ 5, 4, 5, 0,      // Lower case
        /* state 5 */ 5, 5, 5, 0       // anything goes state.
	};

const FLOAT rgLogProb[24] = {
		/* state 0 */ 0, 0, 0, 0,
		/* state 1 */ 0, 0, H, 0,
		/* state 2 */ 0, H, H, 0,
		/* state 3 */ H, H, 0, 0,
		/* state 4 */ H, 0, H, 0,
		/* state 5 */ 0, 0, 0, 0
	};

FLOAT StateTransitionCost(DWORD prevState, SYM sym, DWORD *pNextState)
{
	int index;
	RECMASK recmask;

	ASSERT(prevState >= 0 && prevState <= 5);
	index = prevState*4;
	recmask = RecmaskFromUnicode(sym);

	if (ALC_UCALPHA & recmask)
		index += 0;
	else if (ALC_LCALPHA & recmask)
		index += 1;
	else if (ALC_NUMERIC & recmask)
		index += 2;
	else if (ALC_PUNC & recmask)
		index += 3;
	else
		index = -1;
	ASSERT(index >= 0);

	*pNextState = (DWORD)rgNextState[index];

    return (defRecCosts.StateTransWeight * rgLogProb[index]);
}

/******************************Public*Routine******************************\
* BaselineTransitionCost
*
* Computes a cost for the change in baseline from 1 box to the next given
* what the baseline of the character should be.
*
* History:
*  05-May-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

FLOAT PRIVATE BaselineTransitionCost(SYM symPrev, GLYPHSYM *gsPrev, BOXINFO *biPrev, SYM sym, GLYPHSYM *gs, BOXINFO *bi)
{
	BYTE type, typePrev;
	int base;
	FLOAT cost;
	LPRECT lprect;

	// ASSUMPTION: SYM_UNKNOWN should be the only sym if its present.
	// So there aren't any alternatives that could get a "better" cost
    // so it probably doesn't really matter what cost we return here

	if (sym == SYM_UNKNOWN)
		return (FLOAT) 0.0;

	type = TypeFromSYM(sym);
	type = TYPE_BASE_MASK & type;
	lprect = LprectGLYPHSYM(gs);

	if (symPrev == SYM_UNKNOWN)
		symPrev = 0;

	if (symPrev)
    {
		typePrev = TypeFromSYM(symPrev);
		typePrev = TYPE_BASE_MASK & typePrev;
    }

    //
    // If the first and second chars are supposed to have the same baseline then
    // compute a penalty based on the difference in their baseline.
    //

	if (symPrev && type == typePrev)
    {
        ASSERT(gsPrev);
		base = lprect->bottom;
        lprect = LprectGLYPHSYM(gsPrev);
        cost = (FLOAT) (100L * abs(base - lprect->bottom) / (bi->size * 2));
    }
	else
    {
		switch (type)
        {
			case BASE_NORMAL:
                base = bi->baseline;
                break;

			case BASE_QUOTE:
                base = bi->baseline - (7 * bi->xheight / 4);
                break;

			case BASE_DASH:
                base = bi->baseline - bi->xheight;
                break;

            case BASE_DESCENDER:
                base = bi->baseline + (bi->xheight / 3);
                break;
	
            case BASE_THIRD:
                base = bi->baseline - (bi->xheight / 2);
                break;
	
			default:
                base = bi->baseline;
				break;
        }

        cost = (FLOAT) (100L * abs(lprect->bottom - base) / (2 * bi->size));
    }

	cost = (-cost) / (FLOAT) 100.0;
    ASSERT(cost <= 0.0);
	return(cost);
}

/******************************Public*Routine******************************\
* BaselineBoxCost
*
* This function computes a penalty given the baseline of the character
* and where we thought the characters baseline should be given the box
* they were told to write in.
*
* History:
*  04-May-1995 -by- Patrick Haluptzok patrickh
* Modify it.
\**************************************************************************/

FLOAT PRIVATE BaselineBoxCost(SYM sym, GLYPHSYM *gs, BOXINFO *bi)
{
    BYTE type;
	FLOAT cost;
    LPRECT lprect; // Pointer to bounding rect of glyph in tablet coordinates.

    int baselineShouldBe;  // This is what the baseline should be for the
                           // char we are proposing.

    int baselineIs;        // This is what the baseline is for the char written.

	// ASSUMPTION: SYM_UNKNOWN should be the only sym if its present.
	// So there aren't any alternatives that could get a "better" cost
    // so it probably doesn't really matter what cost we return here.

    if (sym == SYM_UNKNOWN)
    {
        return (FLOAT) 0.0;
    }

	type = TypeFromSYM(sym);
	type = TYPE_BASE_MASK & type;
	lprect = LprectGLYPHSYM(gs);
    baselineIs = lprect->bottom;  // This is what the baseline is for the glyph.

    switch (type)
    {
    case BASE_NORMAL:
        baselineShouldBe = bi->baseline;
        cost = (FLOAT) (100L * abs(baselineIs - baselineShouldBe) / (bi->size));
        break;

    case BASE_THIRD:
        baselineShouldBe = bi->baseline - (bi->size / 4);
        cost = (FLOAT) (100L * abs(baselineIs - baselineShouldBe) / (bi->size));
        break;

    case BASE_DASH:
        baselineShouldBe = bi->midline;
        cost = (FLOAT) (100L * abs(baselineIs - baselineShouldBe) / (bi->size));
        break;

    case BASE_QUOTE:
        ASSERT((bi->baseline - bi->midline) > 0);
        baselineShouldBe = ((bi->baseline - bi->size + bi->midline) / 2);

        if (baselineIs <= baselineShouldBe)
        {
            //
            // It's above the quote baseline, way up high, so no penalty
            // for any BASE_QUOTE chars.
            //

            cost = (FLOAT) 0.0;
        }
        else
        {
            cost = (FLOAT) (100L * (baselineIs - baselineShouldBe) / (bi->size));
        }
        break;

    case BASE_DESCENDER:
        baselineShouldBe = bi->baseline + (bi->size / 6);
        if (baselineIs >= baselineShouldBe)
        {
            //
            // It's below the descender baseline, way down, so no penalty
            // for any BASE_DESCENDER chars.
            //

            cost = (FLOAT) 0.0;
        }
        else
        {
            cost = (FLOAT) (100L * (baselineShouldBe - baselineIs) / (bi->size));
        }
        break;

    default:
        ASSERT(0);  // We should not get here but if we do we have some default
                    // behaviour that should be OK.

        cost = (FLOAT) 0.0;
        break;
    }

	cost = (-cost) / (FLOAT) 100.0;
    ASSERT(cost <= 0.0);
	return(cost);
}

FLOAT PRIVATE HeightTransitionCost(SYM symPrev, GLYPHSYM *gsPrev, BOXINFO *biPrev, SYM sym, GLYPHSYM *gs, BOXINFO *bi)
{
	BYTE type, typePrev;
    int ht, htPrev, heightShouldBe;
	FLOAT cost;
	LPRECT lprect;

	if (sym == SYM_UNKNOWN)
		return (FLOAT) 0.0;

	if (symPrev == SYM_UNKNOWN)
		symPrev = 0;

	type = TypeFromSYM(sym);
	type = TYPE_HEIGHT_MASK & type;
	lprect = LprectGLYPHSYM(gs);
	ht = lprect->bottom - lprect->top;

    if (type == XHEIGHT_DASH)
    {
        return(0.0);  // return(HeightBoxCost(sym, gs, bi));
    }
	else
    {
		if (symPrev)
        {
			typePrev = TypeFromSYM(symPrev);
			typePrev = TYPE_HEIGHT_MASK & typePrev;
        }

		if (symPrev && typePrev != XHEIGHT_DASH)
        {
            ASSERT(gsPrev);
			lprect = LprectGLYPHSYM(gsPrev);
			htPrev = lprect->bottom - lprect->top;

            if ((typePrev == XHEIGHT_FULL) &&
                (type == XHEIGHT_FULL))
            {
                heightShouldBe = (bi->size * 8) / 10;

                if ((ht >= heightShouldBe) &&
                    (htPrev >= heightShouldBe))
                {
                    // No cost, can't be anything bigger.

                    return((FLOAT) 0.0);
                }
            }

            if ((typePrev == XHEIGHT_PUNC) &&
                (type == XHEIGHT_PUNC))
            {
                heightShouldBe = (bi->size * 2) / 9;

                if ((ht <= heightShouldBe) &&
                    (htPrev <= heightShouldBe))
                {
                    // No cost, can't be anything smaller.

                    return((FLOAT) 0.0);
                }
            }

            //
            // We scale everything up to be normal (1/2) height.
            //

            if (type == XHEIGHT_FULL)
                ht = 5 * ht / 8;
			else if (type == XHEIGHT_PUNC)
                ht = ht * 3;
            else if (type == XHEIGHT_3Q)
                ht = ht * 3 / 4;

            if (typePrev == XHEIGHT_FULL)
                htPrev = 5 * htPrev / 8;
			else if (typePrev == XHEIGHT_PUNC)
                htPrev = htPrev * 3;
            else if (typePrev == XHEIGHT_3Q)
                htPrev = htPrev * 3 / 4;

            if ((ht + htPrev) == 0)
            {
                cost = (FLOAT) 0.0;
            }
            else
            {
                cost = (FLOAT) (100L * abs(ht - htPrev) / (ht + htPrev));
            }
        }
		else
        {
            return(0.0); // return(HeightBoxCost(sym, gs, bi));
        }
    }

	cost = (-cost) / (FLOAT) 100.0;
	ASSERT(cost <= 0.0);

	return(cost);
}

/******************************Public*Routine******************************\
* HeightBoxCost
*
* This function computes the likelihood of a character given the height of
* the character written and the height of the box the person was supposed
* to write in.
*
* History:
*  05-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

FLOAT PRIVATE HeightBoxCost(SYM sym, GLYPHSYM *gs, BOXINFO *bi)
{
    int heightShouldBe;  // This is the height it should be given the box
                         // they were told to write in.
    int heightIs;        // This is the height the glyph is.

    BYTE type;
	FLOAT cost;
	LPRECT lprect;

    lprect = LprectGLYPHSYM(gs);
    heightIs = lprect->bottom - lprect->top;

	// ASSUMPTION: SYM_UNKNOWN should be the only sym if its present.
	// So there aren't any alternatives that could get a "better" cost
    // so it probably doesn't really matter what cost we return here

    if (sym == SYM_UNKNOWN)
    {
        return (FLOAT) 0.0;
    }

	type = TypeFromSYM(sym);
	type = TYPE_HEIGHT_MASK & type;

    switch (type)
    {
    case XHEIGHT_FULL:  // full height "ABC" etc.

        heightShouldBe = (bi->size * 8) / 10;

        if (heightIs >= heightShouldBe)
        {
            // No cost, can't be anything bigger.

            cost = (FLOAT) 0.0;
        }
        else
        {
            cost = (FLOAT) ( ((float) (heightShouldBe - heightIs)) / (float) (bi->size));
        }
        break;

    case XHEIGHT_3Q:

        heightShouldBe = 2 * bi->size / 3;
        cost = (FLOAT) ( ((float) (heightIs - heightShouldBe)) / (float) (bi->size));
        break;

    case XHEIGHT_HALF: // half height "ace" etc.

        heightShouldBe = bi->size / 2;
        cost = (FLOAT) ( ((float) (heightIs - heightShouldBe)) / (float) (bi->size));
        break;

    case XHEIGHT_PUNC: // small height "maru ," etc.

        heightShouldBe = bi->size * 2 / 9;
        cost = (FLOAT) (((float) (heightIs - heightShouldBe)) / (float) (bi->size));
        break;

    case XHEIGHT_DASH:

        heightShouldBe = bi->xheight / 10;

        if (heightIs <= heightShouldBe)
        {
            //
            // It's below the minimum height, way down, so no penalty given.
            //

            cost = (FLOAT) 0.0;
        }
        else
        {
            cost = (FLOAT) (((float) (heightIs - heightShouldBe)) / (float) (bi->size));
        }
        break;

    default:

        ASSERT(0);  // We should not get here but if we do we have some default
                    // behaviour that should be OK.

        cost = (FLOAT) 0.0;
    }

    cost = abs(cost);

    cost = -cost;

    ASSERT(cost <= 0.0);
	return(cost);
}

BOOL PUBLIC IsDonePATHSRCH(XRC *xrc)
{
   ASSERT(xrc);

   if (!FEndOfInkSINFO(xrc))
      return(FALSE);

   if (CLayerPATHSRCH(xrc) < CLayerSINFO(xrc))
      return(FALSE);

   ASSERT(!xrc->fUpdate);

   return(TRUE);
}

// *******************************
// 
// ProcessPATHSRCH()
//
// Note: This is the real entry point into the 'context' part of Rodan.
//                                
// *******************************

int PUBLIC ProcessPATHSRCH(XRC *xrc)
{
	GLYPHSYM   *gs = NULL;

	ASSERT(xrc);

    // See if any glyphsyms were updated. gsMinUpdated is the
    // glyphsym with the smallest iLayer that was re-matched.
    // Invalidate anything we did after that glyph.

    if (xrc->gsMinUpdated)
    {
        //
        // Grab the updated glyphsym, mark it as gone.
        //

        gs = xrc->gsMinUpdated;
        ASSERT(gs);
        xrc->gsMinUpdated = NULL;

        //
        // Undo anything done after that layer.
        //

        UndoPATHSRCH(xrc, ILayerGLYPHSYM(gs));
    }

    if (CLayerPATHSRCH(xrc) < CLayerProcessedSINFO(xrc))
    {
        //
        // If we have processed the first layer and now we have more
        // layers we undo the first layer processing because we handle
        // individual characters differently than strings.
        //

        if (CLayerPATHSRCH(xrc) == 0)
        {
            if (CLayerProcessedSINFO(xrc) == 1)
            {
                //
                // Do it char mode
                //

                gs = GetGlyphsymSINFO(xrc, 0);
                AddLayerPATHSRCH(xrc, gs, FALSE);
                return(PROCESS_IDLE);
            }
            else
            {
                //
                // Do the first one string so we don't have to redo it.
                //

                gs = GetGlyphsymSINFO(xrc, 0);
                AddLayerPATHSRCH(xrc, gs, TRUE);

                //
                // Fall through and do another so we don't end up in the undo case.
                //
            }
        }
        else if (CLayerPATHSRCH(xrc) == 1)
        {
            //
            // Undo and redo first one, it was char mode before and now it's string.
            //

            UndoPATHSRCH(xrc, 0);
            gs = GetGlyphsymSINFO(xrc, 0);
            AddLayerPATHSRCH(xrc, gs, TRUE);

            //
            // Fall through and do another so we don't end up in the 1 case.
            //
        }

        //
        // Grab the next glyphsym that's available.
        //

		gs = GetGlyphsymSINFO(xrc, CLayerPATHSRCH(xrc));
	}

	if (gs)
	{
        AddLayerPATHSRCH(xrc, gs, TRUE);

		return(PROCESS_READY);
	}

	return(PROCESS_IDLE);
}

void AddPathnodeToGLYPHSYM(GLYPHSYM *gs, PATHNODE *ppnode)
{
	FLOAT cost = ppnode->pathcost;
	int cPath = gs->cPath;
	PATHNODE *rgPathnode = gs->rgPathnode;
	int i;

    //
    // Check for duplicates.
    //

	for (i=0; i<cPath; i++)
	{
		if (rgPathnode[i].wch==ppnode->wch 
			&& rgPathnode[i].iAutomaton==ppnode->iAutomaton 
            && rgPathnode[i].state==ppnode->state
            && rgPathnode[i].extra==ppnode->extra)
        {
            //
            // Remember the guy who has the least cost path back.
            //

            if (rgPathnode[i].pathcost < ppnode->pathcost)
            {
                rgPathnode[i].pathcost = ppnode->pathcost;
                rgPathnode[i].indexPrev = ppnode->indexPrev;
            }

            return;
        }
    }

    //
    // Insert it at the end of the list.
    //

    if (cPath >= MAX_PATH_LIST)
    {
        return;
    }

    rgPathnode[cPath++] = *ppnode;

	gs->cPath = cPath;
}

BOOL IsBeginPunc(SYM sym)
{
    switch (sym)
    {
    case 0x0022: // "
    case 0x0028: // (
    case 0x002F: // /
    case 0x003A: // :
    case 0x005B: // [
    case 0x005C: // backwhack
    case 0x005F: // _
    case 0x0060: // `
    case 0x007B: // {
        return(TRUE);
    }

    return(FALSE);
}

BOOL IsEndPunc(SYM sym)
{
    switch (sym)
    {
    case 0x0021: // !
    case 0x0022: // "
    case 0x0027: // '
    case 0x0029: // )
    case 0x002C: // ,
    case 0x002E: // .
    case 0x003A: // :
    case 0x003B: // ;
    case 0x003F: // ?
    case 0x005D: // ]
    case 0x007D: // }
        return(TRUE);
    }

    return(FALSE);
}

BOOL IsNumberClass(SYM sym)
{
    switch (sym)
    {
    case '(':
    case '[':
    case '~':
    case ']':
    case ')':
    case ',':
    case '.':
    case '=':
    case '#':
    case '$':
    case '%':
    case '*':
    case '-':
    case '+':
    case '/':
    case '>':
    case '<':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
        return(TRUE);
    }

    return(FALSE);
}

/******************************Public*Routine******************************\
* vNextState
*
* Computes possible next states from the current state given the character.
*
* History:
*  17-May-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void vNextState(
GLYPHSYM *gs,                       // Current glyphsym
SYM sym,                            // current sym proposed
FLOAT cost,                         // cost of sym proposed based on shape,height,weight
const PATHNODE * const ppnode,      // pointer to node we are trying to extend
int iPath,                          // index of node we are trying to extend
BOOL bFirst)                        // Is this the first character in the string ???
{
    PATHNODE pnode, rgPathNode[3];
    DWORD state;
    int cPath;
    
    cost += ppnode->pathcost;

    switch(ppnode->iAutomaton)
    {
    case FSM_START:

        // This is the beginning state for string mode.

        if (ppnode->state == NONE_AUTOMATON_INITIAL_STATE)
        {
            if (IsNumberClass(sym))
            {
                pnode.pathcost = cost + defRecCosts.NumberWeight * LOGPROB(0.10);
                pnode.indexPrev = iPath;
                pnode.wch = sym;
                pnode.iAutomaton = FSM_NUMBERS;
                pnode.state = 0;
                pnode.extra = 0;
                AddPathnodeToGLYPHSYM(gs, &pnode);
            }

            if (IsBeginPunc(sym))
            {
                pnode.pathcost = cost + defRecCosts.BeginPuncWeight * LOGPROB(0.07);
                pnode.indexPrev = iPath;
                pnode.wch = sym;
                pnode.iAutomaton = FSM_START;
                pnode.state = NONE_AUTOMATON_INITIAL_STATE;
                pnode.extra = 0;
                AddPathnodeToGLYPHSYM(gs, &pnode);
            }
            else if (IsEndPunc(sym))
            {
                pnode.pathcost = cost + defRecCosts.EndPuncWeight * LOGPROB(0.02);
                pnode.indexPrev = iPath;
                pnode.wch = sym;
                pnode.iAutomaton = FSM_START;
                pnode.state = NONE_AUTOMATON_FINAL_STATE;
                pnode.extra = 0;
                AddPathnodeToGLYPHSYM(gs, &pnode);
            }

            // now try the dictionary

            cPath = StartDictionary(sym, rgPathNode, 3);
            while (cPath > 0)
            {
                --cPath;
                rgPathNode[cPath].pathcost = cost + defRecCosts.DictWeight * LOGPROB(0.99);
                rgPathNode[cPath].indexPrev = iPath;
                rgPathNode[cPath].wch = sym;
                rgPathNode[cPath].iAutomaton = AUTOMATON_ID_DICT;
                AddPathnodeToGLYPHSYM(gs, &rgPathNode[cPath]);
            }

            if (bFirst)
            {
                // now try the any-thing-ok automaton

                pnode.pathcost = cost + StateTransitionCost(0, sym, &state) +
                                        defRecCosts.AnyOkWeight * LOGPROB(0.01);
                pnode.indexPrev = iPath;
                pnode.wch = sym;
                pnode.iAutomaton = AUTOMATON_ID_ANYTHINGOK;
                pnode.state = state;
                pnode.extra = 0;
                AddPathnodeToGLYPHSYM(gs, &pnode);
            }
        }
        else if (ppnode->state == NONE_AUTOMATON_FINAL_STATE)
        {
            if (IsEndPunc(sym))
            {
                pnode.pathcost = cost;
                pnode.indexPrev = iPath;
                pnode.wch = sym;
                pnode.iAutomaton = FSM_START;
                pnode.state = NONE_AUTOMATON_FINAL_STATE;
                pnode.extra = 0;
                AddPathnodeToGLYPHSYM(gs, &pnode);
            }
        }
        else
        {
            ASSERT(0);
        }
        break;

    case AUTOMATON_ID_DICT:

        if (DictionaryNextState(ppnode, sym, &pnode))
        {
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = AUTOMATON_ID_DICT;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }

        if (DictionaryValidState(ppnode) && (sym == '-')) // Helps acc by 13 chars on guidetun.ste
        {
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = NONE_AUTOMATON_INITIAL_STATE;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }

        if (DictionaryValidState(ppnode) && (sym == ':')) // Helps acc by 2 chars on guidetun.ste
        {
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = NONE_AUTOMATON_INITIAL_STATE;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }

        if (DictionaryValidState(ppnode) && (sym == 0x005C))  // backwhack for file names
        {                                                     // Helps acc by 20 chars on guidetun.ste
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = NONE_AUTOMATON_INITIAL_STATE;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }

        if (DictionaryValidState(ppnode) && (sym == 0x0027))  // The apostrophe
        {                                                     // Helps acc by 4 chars on guidetun.ste
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_POSSESIVE;
            pnode.state = 0;
            pnode.extra = ppnode->extra;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }

        if (DictionaryValidState(ppnode) && (IsEndPunc(sym)))
        {
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = NONE_AUTOMATON_FINAL_STATE;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }
        break;

    case AUTOMATON_ID_ANYTHINGOK:

        cost += StateTransitionCost(ppnode->state, sym, &state);
        pnode.pathcost = cost;
        pnode.indexPrev = iPath;
        pnode.wch = sym;
        pnode.iAutomaton = AUTOMATON_ID_ANYTHINGOK;
        pnode.state = state;
        pnode.extra = 0;
        AddPathnodeToGLYPHSYM(gs, &pnode);
        break;

    case FSM_NUMBERS:

        if (IsNumberClass(sym))
        {
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_NUMBERS;
            pnode.state = 0;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        } 
        else if (IsEndPunc(sym))  // !!! Remove this, shouldn't effect accuracy.
        {
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = NONE_AUTOMATON_FINAL_STATE;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }        
        break;

    case FSM_POSSESIVE:

        if ((sym == 's') ||
            ((sym == 'S') && (ppnode->extra == DICT_MODE_ALLCAPS)))
        {
            pnode.pathcost = cost;
            pnode.indexPrev = iPath;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = NONE_AUTOMATON_FINAL_STATE;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }
        break;

    default:
        ASSERT(0);
    }    
}

/******************************Public*Routine******************************\
* AddLayerPATHSRCH
*
* This extends the Viterbi search forward one step.
*
* History:
*  30-Apr-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

const PATHNODE gNodeStart = {NONE_AUTOMATON_INITIAL_STATE, 0, 0,FSM_START, 0.0, 0, 0x0020 };

#ifdef DBG
int gcPathMax = 0;
#endif

VOID PRIVATE AddLayerPATHSRCH(XRC *xrc, GLYPHSYM *gs, BOOL bString)
{
	int isym;
	GLYPHSYM *gsPrev;
    FLOAT cost, costChar;
	SYM sym;
    int iPath;
    PATHNODE pnode, *ppNode;
    BOXINFO bi, biPrev;
    LPGUIDE lpguide;

	ASSERT(xrc);
	ASSERT(gs);

    gsPrev = GetPrevGLYPHSYM(gs);

    //
    // If we have a space find the end of the last word to point
    // back to in iPath.
    //

    iPath = 0;  // Well if the previous guy only has 1 meatball
                // we need to point at it.

    if (gsPrev && (IBoxGLYPHSYM(gsPrev) != IBoxGLYPHSYM(gs)-1))
    {
        //
        // Find the first valid node for our initial cost.
        //

        for (iPath=0; iPath < gsPrev->cPath; iPath++)
        {
            ppNode = PathnodeAtGLYPHSYM(gsPrev, iPath);

            if (ppNode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(ppNode))
                continue;
            else
            {
                isym = iPath;
                cost = ppNode->pathcost;
                break;
            }
        }

        ASSERT(isym < gsPrev->cPath);

        //
        // Now see if anyone else has a better score.
        //

        for (iPath=isym+1; iPath < gsPrev->cPath; iPath++)
        {
            ppNode = PathnodeAtGLYPHSYM(gsPrev, iPath);

            if (ppNode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(ppNode))
                continue;

            if (ppNode->pathcost > cost)
            {
                isym = iPath;
                cost = ppNode->pathcost;
            }
        }

        gsPrev = (GLYPHSYM *)0;
        iPath = isym;
    }

    lpguide = LpguideXRCPARAM(xrc);

    GetBoxinfo(&bi, IBoxGLYPHSYM(gs) - xrc->nFirstBox, lpguide);

    ASSERT(CSymGLYPHSYM(gs) > 0);

    gs->cPath = 0;

    if (bString)
    {
        for (isym = 0; isym < (int) (CSymGLYPHSYM(gs)); isym++)
        {
            sym = SymAtGLYPHSYM(gs, isym);
            costChar = ProbAtGLYPHSYM(gs, isym);
            costChar = LOGPROB(costChar);

            cost = UnigramCost(sym);
            costChar += defRecCosts.StringUniWeight * cost;

            cost = BaselineBoxCost(sym, gs, &bi);
            costChar += defRecCosts.StringBoxBaselineWeight * cost;

            cost = HeightBoxCost(sym, gs, &bi);
            costChar += defRecCosts.StringBoxHeightWeight * cost;

            if (gsPrev && gsPrev->cPath > 0)
            {
                GetBoxinfo(&biPrev, IBoxGLYPHSYM(gsPrev) - xrc->nFirstBox, lpguide);

                for (iPath = 0; iPath < gsPrev->cPath; iPath++)
                {
                    ppNode = PathnodeAtGLYPHSYM(gsPrev, iPath);

                    cost = BaselineTransitionCost(ppNode->wch, gsPrev, &biPrev, sym, gs, &bi);
                    cost = defRecCosts.StringBaseWeight * cost;

                    cost += HeightTransitionCost(ppNode->wch, gsPrev, &biPrev, sym, gs, &bi) * defRecCosts.StringHeightWeight;

                    cost += BigramTransitionCost((unsigned char) ppNode->wch, IBoxGLYPHSYM(gsPrev), (unsigned char) sym, IBoxGLYPHSYM(gs)) * defRecCosts.BigramWeight;
                    
                    vNextState(gs, sym, costChar + cost, ppNode, iPath, FALSE);
                }
            }
            else
            {
                //
                // This is the first glyphsym so no path yet.
                //

                cost = BaselineTransitionCost(0, NULL, NULL, sym, gs, &bi);
                cost = defRecCosts.StringBaseWeight * cost;

                cost += HeightTransitionCost(0, NULL, NULL, sym, gs, &bi) * defRecCosts.StringHeightWeight;

                cost += BigramTransitionCost(0x20, 0, (unsigned char) sym, IBoxGLYPHSYM(gs)) * defRecCosts.BigramWeight;

                vNextState(gs, sym, costChar + cost, &gNodeStart, iPath, TRUE);
            }
        }
    }
    else
    {
        BOOL bSwapIl = FALSE, bSwapaeo = FALSE;

        //
        // Check for the l,I hack to reverse them.
        //

        if (gs->altlist.cAlt >= 2)
        {
            if ((gs->altlist.awchList[0] == 'l') &&
                (gs->altlist.awchList[1] == 'I'))
            {
                gs->altlist.awchList[0] = 'I';
                gs->altlist.awchList[1] = 'l';
                bSwapIl = TRUE;
            }
        }

        //
        // Check for the a,e,o hack to reverse them.
        //

        if (gs->altlist.cAlt >= 2)
        {
            if ((gs->altlist.awchList[0] == 'o' || gs->altlist.awchList[0] == 'e') &&
                (gs->altlist.awchList[1] == 'a'))
            {
                gs->altlist.awchList[1] = gs->altlist.awchList[0];
                gs->altlist.awchList[0] = 'a';
                bSwapaeo = TRUE;
            }
        }

        //
        // Single character mode.
        //

        for (isym = 0; isym < ((int) CSymGLYPHSYM(gs)); isym++)
        {
            sym = SymAtGLYPHSYM(gs, isym);

            //
            // This is the first glyphsym so no path yet
            //

            cost = ProbAtGLYPHSYM(gs, isym);
            costChar = LOGPROB(cost);

            cost = UnigramCost(sym);
            costChar += defRecCosts.CharUniWeight * cost;

            cost = BaselineBoxCost(sym, gs, &bi);
            costChar += defRecCosts.CharBoxBaselineWeight * cost;

            cost = HeightBoxCost(sym, gs, &bi);
            costChar += defRecCosts.CharBoxHeightWeight * cost;

            cost = BaselineTransitionCost(0, NULL, NULL, sym, gs, &bi);
            costChar += defRecCosts.CharBaseWeight * cost;

            cost = HeightTransitionCost(0, NULL, NULL, sym, gs, &bi);
            costChar += defRecCosts.CharHeightWeight * cost;

            pnode.pathcost = costChar;
            pnode.indexPrev = 0;
            pnode.wch = sym;
            pnode.iAutomaton = FSM_START;
            pnode.state = 0;
            pnode.extra = 0;
            AddPathnodeToGLYPHSYM(gs, &pnode);
        }

        //
        // Need to put them back for string mode processing.
        //

        if (bSwapIl)
        {
            gs->altlist.awchList[0] = 'l';
            gs->altlist.awchList[1] = 'I';
        }
        if (bSwapaeo)
        {
            gs->altlist.awchList[0] = gs->altlist.awchList[1];
            gs->altlist.awchList[1] = 'a';
        }
    }

#ifdef DBG

    if (gs->cPath > gcPathMax)
    {
        TCHAR	ach[256];
        gcPathMax = gs->cPath;
        wsprintf(ach, TEXT("cPathMax is %d\n"), gcPathMax);
        // 
    }
    else
    {
        TCHAR	ach[256];
        gcPathMax = gs->cPath;
        wsprintf(ach, TEXT("For char %d cPathMax is %d\n"), IBoxGLYPHSYM(gs), gs->cPath);
        // 
    }
#endif

	xrc->cLayer++;
}

/******************************Public*Routine******************************\
* UndoPATHSRCH
*
* Sometimes GLYPHSYMS that we already computed a path through get changed
* with new strokes.
*
* History:
*  30-Apr-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

VOID PRIVATE UndoPATHSRCH(XRC *xrc, int ilayer)
{
    ASSERT(xrc);

    //
    // We prune back to iLayer if we had processed past it already.  Otherwise
    // just stay where we are.
    //

    xrc->cLayer = min(ilayer, xrc->cLayer);
}

FLOAT BigramTransitionCost(unsigned char wchPrev, int iBoxPrev, unsigned char wch, int iBox)
{
	CHARACTER const FAR *pCharacter;
	BIGRAM const FAR *pBigram;
	int cCharacter, cCharacterTmp;
	BOOL fDone;

    //
    // If this straddles two panels, don't perform this computation assume
    // a space is between the characters.
    //

    if (iBox != (iBoxPrev + 1))
    {
        wchPrev = 0x0020;
	}

	pCharacter = rgCharacter;
	cCharacter = cBigramCharacters;

	/* Perform a simple binary search on the first character */

	fDone = FALSE;
	while (cCharacter > 1) {
		cCharacterTmp = cCharacter/2;

 		if (wchPrev < pCharacter[cCharacterTmp].wch) {
			cCharacter = cCharacterTmp;
 		} else if (wchPrev > pCharacter[cCharacterTmp].wch) {
			pCharacter += cCharacterTmp;
			cCharacter -= cCharacterTmp;
		} else {
			fDone = TRUE;
			break;
		}
	}
	
	/* Use the character's entry, if we found one; otherwise, use the unknown character table */

	if (fDone) {
		pBigram = &rgBigrams[pCharacter->iBigram];
	} else {
		pBigram = &rgBigrams[0];
	}

	/* Now find the second half of the bigram.  Last entry always represents the unknown
	character, so if we hit that, just stop and use it. */

 	while (pBigram->wch != wch && pBigram->wch != 0) {
		++pBigram;
	}

    /* COST is a fixed, scaled logprob.  Bigram scores are negative logprobs */

    iBox = (int) ((unsigned int) pBigram->prob);

    ASSERT(iBox < 256);
    ASSERT(iBox >= 0);

    return (FLOAT) (((FLOAT) (-iBox)) / ((FLOAT) 256.0));
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\unidata.c ===
#include "tsunami.h"

const BYTE rgUnigramUni[94] =
{
       91,    // 0x0021 !
       93,    // 0x0022 "
      103,    // 0x0023 #
       97,    // 0x0024 $
      101,    // 0x0025 %
      105,    // 0x0026 &
       84,    // 0x0027 '
      103,    // 0x0028 (
      103,    // 0x0029 )
       96,    // 0x002A *
      101,    // 0x002B +
       63,    // 0x002C ,
       75,    // 0x002D -
       56,    // 0x002E .
       93,    // 0x002F /
       75,    // 0x0030 0
       67,    // 0x0031 1
       69,    // 0x0032 2
       71,    // 0x0033 3
       72,    // 0x0034 4
       73,    // 0x0035 5
       72,    // 0x0036 6
       75,    // 0x0037 7
       67,    // 0x0038 8
       70,    // 0x0039 9
      105,    // 0x003A :
      127,    // 0x003B ;
      110,    // 0x003C <
       86,    // 0x003D =
      110,    // 0x003E >
       95,    // 0x003F ?
      104,    // 0x0040 @
       49,    // 0x0041 A
       69,    // 0x0042 B
       63,    // 0x0043 C
       59,    // 0x0044 D
       43,    // 0x0045 E
       67,    // 0x0046 F
       67,    // 0x0047 G
       57,    // 0x0048 H
       51,    // 0x0049 I
       80,    // 0x004A J
       76,    // 0x004B K
       59,    // 0x004C L
       65,    // 0x004D M
       52,    // 0x004E N
       50,    // 0x004F O
       66,    // 0x0050 P
       82,    // 0x0051 Q
       52,    // 0x0052 R
       53,    // 0x0053 S
       48,    // 0x0054 T
       62,    // 0x0055 U
       74,    // 0x0056 V
       69,    // 0x0057 W
       79,    // 0x0058 X
       68,    // 0x0059 Y
       81,    // 0x005A Z
      120,    // 0x005B [
      117,    // 0x005C
      120,    // 0x005D ]
      119,    // 0x005E ^
      126,    // 0x005F _
      120,    // 0x0060 `
       49,    // 0x0061 a
       69,    // 0x0062 b
       63,    // 0x0063 c
       59,    // 0x0064 d
       43,    // 0x0065 e
       67,    // 0x0066 f
       67,    // 0x0067 g
       57,    // 0x0068 h
       51,    // 0x0069 i
       80,    // 0x006A j
       76,    // 0x006B k
       59,    // 0x006C l
       65,    // 0x006D m
       52,    // 0x006E n
       50,    // 0x006F o
       66,    // 0x0070 p
       82,    // 0x0071 q
       52,    // 0x0072 r
       53,    // 0x0073 s
       48,    // 0x0074 t
       62,    // 0x0075 u
       74,    // 0x0076 v
       69,    // 0x0077 w
       79,    // 0x0078 x
       68,    // 0x0079 y
       81,    // 0x007A z
      121,    // 0x007B {
      119,    // 0x007C |
      121,    // 0x007D }
      119     // 0x007E ~
};

/******************************Public*Routine******************************\
* UnigramCost
*
* Computes the Unigram Cost for the proposed character.  You could make
* different tables based on what the recmask, recmaskPriority
* is and see if it helps in different contexts.
*
* The table contains scores, a score can be converted to a log prob by the
* following formula:
*
* ln(prob) = (score * ln(2)) / -10
*
* History:
*  05-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

FLOAT PRIVATE UnigramCost(SYM sym)
{
    FLOAT cost;
    int score;

    ASSERT((sym & 0x00ff) != 0);  // Can't be single byte.

    if ((sym >= 0x21) && (sym <= 0x7E))
    {
        //
        // The not very likely score.
        //

        score = (int) ((unsigned int) rgUnigramUni[sym - 0x21]);
    }
    else
    {
        score = 255;
    }

    //
    // Just return the score and let tuning find the correct adjustment
    // to do to convert it to a log prob that works well with the rest
    // of the system.
    //

	cost = (-score) / (FLOAT) 100.0;
	return(cost);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\tune.c ===
#ifndef ROM_IT

/******************************Module*Header*******************************\
* Module Name: tune.c
*
* All the tuning functions go here.  This is stuff that we need during
* tuning but we don't want in the retail product.  Also this maybe a good
* place to stick anything we know we need in future versions of the
* recognizer but don't need in this version.
*
* Created: 12-Feb-1997 09:40:45
* Author: Patrick Haluptzok patrickh
*
* Copyright (c) 1996 Microsoft Corporation
\**************************************************************************/

#include "tsunamip.h"
#include <stdio.h>
#include <ctype.h>

/******************************Public*Routine******************************\
* OutputGLYPHSYMS
*
* CRattJ has an option to record all the GLYPHSYMS in a file for study and
* so they can be replayed with many different engine weights quickly for
* tuning the engine.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void PUBLIC OutputGLYPHSYMS(XRC *xrc, LPARAM lparam)
{
    FILE *fpOut;
    int iLayer;
	UINT	iSym;
    GLYPHSYM *pGlyphsym;

    fpOut = fopen("c:\\crattj.rat", "a");

    fprintf(fpOut, "SINFO %d %d\n", xrc->cFrame, xrc->cQueue);

    for (iLayer = 0; iLayer < xrc->cQueue; iLayer++)
    {
        pGlyphsym = xrc->ppQueue[iLayer];

        fprintf(fpOut, "GLYPHSYM %d %d %d %d %d %d %d %d %d %d %d\n",
                        pGlyphsym->status,
                        pGlyphsym->iBox,
                        pGlyphsym->altlist.cAlt,
                        pGlyphsym->rect.left,
                        pGlyphsym->rect.top,
                        pGlyphsym->rect.right,
                        pGlyphsym->rect.bottom,
                        pGlyphsym->iBegin,
                        pGlyphsym->iEnd,
                        pGlyphsym->cFrame,
                        pGlyphsym->iLayer);

        for (iSym = 0; iSym < pGlyphsym->altlist.cAlt; iSym++)
        {
            fprintf(fpOut, "SYV %04x %f\n", pGlyphsym->altlist.awchList[iSym],
                                            pGlyphsym->altlist.aeScore[iSym]);
        }
    }

    fclose(fpOut);
}

/******************************Public*Routine******************************\
* InputGLYPHSYMS
*
* CRattJ has an option to record all the GLYPHSYMS in a file for study and
* so they can be replayed with many different engine weights quickly for
* tuning the engine.  This function adds them back in for play back.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void PUBLIC InputGLYPHSYMS(XRC *xrc, LPARAM lparam)
{
    GLYPHSYM *pGlyphsym, *gs;

    pGlyphsym = (GLYPHSYM *) lparam; // Init Glyphsym from Crattj

    gs = (GLYPHSYM *) ExternAlloc(sizeof(GLYPHSYM));
    memset(gs, 0, sizeof(GLYPHSYM));
    ASSERT(gs);    

    gs->altlist      = pGlyphsym->altlist;
    gs->status       = pGlyphsym->status;
    gs->iBox         = pGlyphsym->iBox;
    gs->rect.left    = pGlyphsym->rect.left;
    gs->rect.top     = pGlyphsym->rect.top;
    gs->rect.right   = pGlyphsym->rect.right;
    gs->rect.bottom  = pGlyphsym->rect.bottom;
    gs->iBegin       = pGlyphsym->iBegin;
    gs->iEnd         = pGlyphsym->iEnd;
    gs->cFrame       = pGlyphsym->cFrame;
    gs->iLayer       = pGlyphsym->iLayer;

    AddBoxGlyphsymSINFO(xrc, gs);
}

/******************************Public*Routine******************************\
* GetPrivateRecInfoXRC
*
* This retrieves private info in debug builds which is used for tuning
* the engine.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Modified it.
\**************************************************************************/

int PUBLIC GetPrivateRecInfoXRC(XRC * xrc, WPARAM wparam, LPARAM lparam)
{
    ASSERT(xrc);

    switch (wparam)
    {
    case PRI_WEIGHT:
        break;

    case PRI_GLYPHSYM:

        //
        // Outputs the GLYPHSYMs to the file handle provided in lparam.
        //

        OutputGLYPHSYMS(xrc, lparam);
        break;
    }

    return(0);
}

/******************************Public*Routine******************************\
* SetPrivateRecInfoXRC
*
* Sets info into XRC that's not settable through the api easily.
*
* History:
*  18-May-1995 -by- Patrick Haluptzok patrickh
* Modified it.
\**************************************************************************/

int PUBLIC SetPrivateRecInfoXRC(XRC * xrc, WPARAM wparam, LPARAM lparam)
{
    switch (wparam)
    {
    case PRI_WEIGHT:

        memcpy(&defRecCosts, (void *) lparam, sizeof(RECCOSTS));
        break;

    case PRI_GUIDE:

        ASSERT(xrc);
        return(SetGuideXRC(xrc, (LPGUIDE)lparam, 0));
        break;

    case PRI_GLYPHSYM:

        ASSERT(xrc);

        //
        // Outputs the GLYPHSYMs to the file handle provided in lparam.
        //

        InputGLYPHSYMS(xrc, lparam);
        break;
    }

    return(0);
}

int WINAPI SetAlphabetPriorityHRC(HRC hrc, ALC alc, LPBYTE rgbfAlc)
{
	int iRet;
	XRC *   xrc = (XRC *)hrc;

	if (!VerifyHRC(xrc) ||
		 FBeginProcessXRCPARAM(xrc))
		return HRCR_ERROR;

	iRet = SetAlphabetPriorityXRC(xrc, alc, rgbfAlc);

	return(iRet);
}

int WINAPI GetPrivateRecInfoHRC(HRC hrc, WPARAM wparam, LPARAM lparam)
{
    XRC   *xrc = (XRC*)hrc;

	if (!VerifyHRC(xrc))
		return HRCR_ERROR;

	GetPrivateRecInfoXRC(xrc, wparam, lparam);

	return(HRCR_OK);
}

int WINAPI SetPrivateRecInfoHRC(HRC hrc, WPARAM wparam, LPARAM lparam)
{
    XRC   *xrc = (XRC*)hrc;

    //
    // We allow NULL for certain settings.
    //

    if (xrc)
    {
        if (!VerifyHRC(xrc))
            return HRCR_ERROR;
    }

	SetPrivateRecInfoXRC(xrc, wparam, lparam);

	return(HRCR_OK);
}

/******************************Public*Routine******************************\
* ConfigRecognizer
*
* In tuning mode this gives us an API to send stuff in through.
*
* History:
*  20-Mar-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

UINT WINAPI ConfigRecognizer(UINT uSubFunction, WPARAM wParam, LPARAM lParam)
{
	UINT uiRet = 0;

	switch(uSubFunction)
	{
	case WCR_INITRECOGNIZER:
        uiRet = (UINT) HwxConfig();
		break;

	case WCR_CLOSERECOGNIZER:
		UnloadRecognizer();
		uiRet = 1;
        break;
	}

	return uiRet;
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\tsunami\src\usa\xrc.c ===
#include "tsunamip.h"

BOOL InitializeCHARSET(CHARSET *cs, CHARSET *csTemplate);

// ----------------------------------------------
// PURPOSE   : constructor for the XRC object
// RETURNS   : 
// CONDITION : 
// ----------------------------------------------

/******************************Public*Routine******************************\
* InitializeXRC
*
* Called to initialize an XRC at creation time.
*
* History:
*  24-Mar-1995 -by- Patrick Haluptzok patrickh
* Commented it.
\**************************************************************************/

BOOL InitializeXRC(XRC *xrc, XRC *xrcDef, HANDLE hrec)
{
    ASSERT(xrc);
    AddValidHRC(xrc);  // Adds the handle to the global handle table.

	memset(xrc, '\0', sizeof(XRC));

    if (!xrcDef)
    {        
        InitializeCHARSET(&(xrc->cs), NULL);
        xrc->cResultMax = CRESULT_DEFAULT;        
    }
    else
    {        
		SetGuideXRC(xrc, &(xrcDef->guide), xrcDef->nFirstBox);
        InitializeCHARSET(&(xrc->cs), &(xrcDef->cs));
        xrc->cResultMax = xrcDef->cResultMax;        
    }

    ASSERT(xrc->fEndInput == FALSE);
    ASSERT(xrc->fBeginProcess == FALSE);

    return InitializeINPUT(xrc) && InitializeSINFO(xrc);
}

/******************************Public*Routine******************************\
* DestroyXRC
*
* Deletes the XRC, cleans up the objects inside, deletes the handle from
* the global handle table.
*
* History:
*  24-Mar-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

void PUBLIC DestroyXRC(XRC *xrc)
{
    if (!xrc)
        return;

    DestroyINPUT(xrc);
    DestroySINFO(xrc);
    RemoveValidHRC(xrc);  // Remove the handle from the global handle table.
    ExternFree(xrc);
}

int PUBLIC SetGuideXRC(XRC *xrc, LPGUIDE lpguide, UINT nFirst)
{
	ASSERT(xrc);

	if ((lpguide == NULL) ||
       (lpguide->cxBox == 0 && lpguide->cyBox == 0 && lpguide->cHorzBox == 0 && lpguide->cVertBox == 0))
	{		
		xrc->uGuideType = XPGUIDE_NONE;
		return(HRCR_ERROR);		// [donalds] 8/6/97 We no longer support FREE input mode
	}
	
	xrc->guide = *lpguide;
    xrc->nFirstBox = nFirst;

	if (lpguide->cxBox == 0)
		xrc->uGuideType = XPGUIDE_LINED;
	else
		xrc->uGuideType = XPGUIDE_BOXED;

	return(HRCR_OK);
}

// ----------------------------------------------
// PURPOSE   : Time scheduling for the recognizer object.
// RETURNS   : status of the recognizer
// ----------------------------------------------

int PUBLIC SchedulerXRC(XRC *xrc)
{
    int     status = PROCESS_READY;

    ASSERT(xrc);
    
    //
    // The way we want to process the data is:
    //
    // 1.  Copy all completed frames to the appropriate Glyphsyms
    //     looking for gestures as we go.
    //     When all complete frames are copied to Glyphsyms goto 2
    //
    // 2.  Do shape matching with all the glyphsyms that are dirty.
    //     When all dirty glyphsyms have updated shape searches goto 3
    //
    // 3.  Do the path search using context info.  Throw away any old
    //     paths that are invalidated by a new recognition result.
    //

    //
    // Copy all frames completed from the SINFO to their appropriate GLYPHSYMS.
    // We process all frames that are available at once so we can return a gesture
    // right away.
    //

    while (status == PROCESS_READY)
    {
        //
        // ProcessSINFO will stick all the frames in the correct GLYPHSYMs.
        //

        status = ProcessSINFO(xrc, IsEndOfInkXRC(xrc));
    }

    //
    // ProcessENGINE will do some hard work like recognize dirty GLYPHSYMs
    // or explore a recognition path.
    //

    ProcessENGINE(xrc, IsEndOfInkXRC(xrc), TRUE);

    //
    // This is a measure necessary to deal with the case when no
    // end of ink is called.  If no end of ink is called, the engine
    // will never finish, in which case the scheduler loops indefinitely.
    // in order to avoid this, we need to do another check.
    //

    if (IsEndOfInkXRC(xrc))
    {
        return HRCR_COMPLETE;
    }

    return HRCR_OK;
}

/******************************Public*Routine******************************\
* FindBestPath
*
* Finds the best path context has found and puts the syv in the glyphsym
*
* History:
*  17-Jan-1997 -by- Patrick Haluptzok patrickh
* Wrote it.
\**************************************************************************/

void FindBestPathXRC(XRC *xrc)
{
    int			inode, ibest, iLayer;
    GLYPHSYM   *gs, *gsPrev;
    PATHNODE   *pnode;
    FLOAT		cost;
    SYM			sym;

	//
	// Search a linear list of pointers we have given out and see if this is
	// one of them.  By design we hand out pointers and the first dword is used
	// by penwin to write in.
	//

    iLayer = min(CLayerPATHSRCH(xrc), CLayerProcessedSINFO(xrc));

	if (iLayer == 0)
		return;

	ASSERT(iLayer <= xrc->cQueue);

	iLayer--;

    gs = GetGlyphsymSINFO(xrc, iLayer);

	ASSERT(CSymGLYPHSYM(gs) > 0);

    //
    // Find the first valid node for our initial cost.
    //

    for (inode=0; inode < gs->cPath; inode++)
    {
        pnode = PathnodeAtGLYPHSYM(gs, inode);

        if (pnode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(pnode))
            continue;
        else
        {
            ibest = inode;
            cost = pnode->pathcost;
            break;
        }
    }

    ASSERT(ibest < gs->cPath);

    //
    // Now see if anyone else has a better score.
    //

    for (inode=ibest+1; inode < gs->cPath; inode++)
    {
        pnode = PathnodeAtGLYPHSYM(gs, inode);

        if (pnode->iAutomaton == AUTOMATON_ID_DICT && !DictionaryValidState(pnode))
            continue;

        if (pnode->pathcost > cost)
        {
            ibest = inode;
            cost = pnode->pathcost;
        }
    }

    //
    // Now trace the path back and write the best path character in syvBestPath
    // 

	while (gs)
    {
        ASSERT(iLayer >= 0);
        ASSERT(ILayerGLYPHSYM(gs) == iLayer);

		sym = gs->rgPathnode[ibest].wch;
		if (sym == SYM_UNKNOWN)
            gs->syvBestPath = SYV_NULL;
		else
            gs->syvBestPath = sym;

		pnode = PathnodeAtGLYPHSYM(gs, ibest);
        ibest = pnode->indexPrev;
        gsPrev = GetPrevGLYPHSYM(gs);
		gs = gsPrev;

        iLayer--;
    }
}

// *******************************
//
// GetBoxResultsXRC()
//
// fills in the current boxed input results.
//
// Arguments:
//
// Returns:
//
// Note:       none
//
// *******************************

int PUBLIC GetBoxResultsXRC(XRC *xrc, int cAlt, int iSyv, int cSyv, LPBOXRESULTS rgBoxResults, BOOL fInkset)
{
    int  i, iSyvRet, iSyvMax;
    int  iRet = 0;
    int  res = HWX_SUCCESS;
    LPBOXRESULTS lpbox = rgBoxResults;

    ASSERT(xrc);
    ASSERT(rgBoxResults);

    if (!FBoxedSINFO(xrc))
    {
        return(HRCR_ERROR);
    }

    iSyvMax = CLayerProcessedSINFO(xrc);

    iSyvMax = min(iSyvMax, CLayerPATHSRCH(xrc));

    iSyvMax = min((iSyv + cSyv), iSyvMax);

    FindBestPathXRC(xrc);  // Says to find the best path available.

    for (i=iSyv; i < iSyvMax; i++)
    {
        lpbox->hinksetBox = (HINKSET)NULL;

        res = GetBoxResultsSINFO(xrc, cAlt, i, lpbox, fInkset);

        if (res != HWX_SUCCESS)
        {
            //
            // There are no more results so no point in continuing
            // or there has been an error
            //

            break;
        }

        iRet++;

        //
        // Delete duplicates in Alt list.  Folding to SBCS or
        // unfolding of alternates may have created duplicates
        // in the list.
        //

        for (iSyvRet = 0; iSyvRet < cAlt; iSyvRet++)
        {
            int iRest;

            if (lpbox->rgSyv[iSyvRet] == SYV_NULL)
            {
                break;  // All done.
            }

            for (iRest = iSyvRet + 1; iRest < cAlt; iRest++)
            {
                if (lpbox->rgSyv[iSyvRet] == lpbox->rgSyv[iRest])
                {
                    int iCopy;

                    for (iCopy = iRest; iCopy < (cAlt - 1); iCopy++)
                    {
                        lpbox->rgSyv[iCopy] = lpbox->rgSyv[iCopy + 1];
                    }

                    lpbox->rgSyv[cAlt-1] = SYV_NULL;
                }
            }
        }

        lpbox = (LPBOXRESULTS)(((LPBYTE)lpbox) +
                    (sizeof(BOXRESULTS) + (cAlt - 1) * sizeof(SYV)));
    }

    return(iRet);
}

int PUBLIC SetAlphabet(RECMASK *precmask, ALC alcIn, RECMASK recmaskDef)
{
	RECMASK recmask;

    if (alcIn == ALC_DEFAULT)
    {
		recmask = recmaskDef;
    }
	else
    {
		if (UnsupportedOrBitmapALC(alcIn))
            return(HRCR_ERROR);

		recmask = RecmaskFromALC(alcIn);
    }

	// we know that everything is kosher now so the recmask can be set now

	*precmask = recmask;

    return(HRCR_OK);
}

/******************************Public*Routine******************************\
* InitializeCHARSET
*
* Inits the Charset info with the default info if a template wasn't provided.
* Otherwise uses the info in the template.
*
* History:
*  24-Mar-1995 -by- Patrick Haluptzok patrickh
* Comment it.
\**************************************************************************/

BOOL InitializeCHARSET(CHARSET *cs, CHARSET *csTemplate)
{
    if (!csTemplate)
        *cs = csDefault;			// use the global default settings.
    else
    {
        *cs = *csTemplate;
    }

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\twister\grouse\inc\grouse.h ===
/************************* ...\grouse\inc\grouse.h *************************\
*																			*
*		Functions and data structures for the Grouse recognizer.			*
*																			*
*	Created:	September 19, 2001											*
*	Author:		Petr Slavik, pslavik										*
*																			*
\***************************************************************************/

#ifndef __INCLUDE_GROUSE_H
#define __INCLUDE_GROUSE_H
																		

#ifdef __cplusplus
extern "C" 
{
#endif

#include "common.h"
#include "twisterdefs.h"


/***************************************************************************\
*	IsInTheList:															*
*		Check if a (unicode) character/gesture is in the (ordered) list.	*
\***************************************************************************/

BOOL
IsInTheList(WCHAR wcLabel,	// I: Label of the item
			WCHAR *awcList,	// I: List of items
			int	iSize);		// I: Size of the list


/***************************************************************************\
*	IsValidGesture:															*
*		Function used for training and testing Grouse and Twister.			*
*		Check if given glyph could be wcLabel.								*
\***************************************************************************/

BOOL
IsValidGesture(GLYPH *pGlyph,			// I: Gesture's ink
			   WCHAR wcLabel);			// I: Gesture's label

			
/***************************************************************************\
*	InitGrouseDB:															*
*		Initialize Grouse database using the header files obtained from		*
*		TrnTRex and dumpwts.												*
\***************************************************************************/

void
InitGrouseDB(void);


/***************************************************************************\
*	ShrimpFeaturize:														*
*																			*
*		Given a glyph for one character, compute a vector of features.		*
*		Return # of strokes in the glyph or -1 if something goes wrong.		*
*																			*
*	Features used:															*
*		Aspect ratio of the entire glyph (width/width+height)				*
*		For each stroke:													*
*			Chebyshev's coefficients (9 from X's, 9 from Y's)				*
*			Aspect ratio of the stroke										*
*			Proportion of the stroke length w.r.t. glyph length.			*
*																			*
*		For one-stroke glyphs, only the global aspect ratio and the Chebys	*
*		are used, because the stroke aspect ratio and length proportion		*
*		are redundant or constant.											*
*																			*
\***************************************************************************/

int FeaturizeInk(GLYPH *pGlyph, WORD *awFtrs);


/***************************************************************************\
*	CountFtrs:																*
*																			*
*		Given the number of strokes in a character, return the number of	*
*		features output by "ShrinkFeaturize()".								*
*																			*
\***********************************************