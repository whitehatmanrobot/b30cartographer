Caption, &dProp ) )
						{
							DBG_PRINTF( ("DVDWDM:   ClosedCaption Error\n\r") );
							DBG_BREAK();
						}
						break;
					case Slow:
						break;
				};
			};
			break;

		default:
			DBG_PRINTF((" Stream State Error!!!! Line = %d\r\n", __LINE__ ));
			DBG_BREAK();
			return FALSE;
	};
	return TRUE;
};




/******/
extern "C" VOID STREAMAPI AdapterReceivePacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	DBG_PRINTF( ( "DVDWDM:AdapterReceivePacket pSrb=0x%x\n\r",pSrb) );
	pSrb->Status = STATUS_PENDING;

	switch( pSrb->Command ){
		case SRB_INITIALIZE_DEVICE:
		case SRB_OPEN_STREAM:
		case SRB_CLOSE_STREAM:
        case SRB_CHANGE_POWER_STATE:
			StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowAdapterReceivePacket,pSrb);
			DeviceNextDeviceNotify( pSrb );
			return;
	};

	switch( pSrb->Command ){
		case SRB_GET_STREAM_INFO:
			DBG_PRINTF( ( "DVDWDM: SRB_GET_STREAM_INFO\n\r") );
			GetStreamInfo( pSrb );
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_OPEN_DEVICE_INSTANCE:
			DBG_PRINTF( ( "DVDWDM: SRB_OPEN_DEVICE_INSTANCE\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_CLOSE_DEVICE_INSTANCE:
			DBG_PRINTF( ( "DVDWDM: SRB_CLOSE_DEVICE_INSTANCE\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_GET_DEVICE_PROPERTY:
			DBG_PRINTF( ( "DVDWDM: SRB_GET_DEVICE_PROPERTY\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_SET_DEVICE_PROPERTY:
			DBG_PRINTF( ( "DVDWDM: SRB_SET_DEVICE_PROPERTY\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_UNINITIALIZE_DEVICE:
			DBG_PRINTF( ( "DVDWDM: SRB_UNINITIALIZE_DEVICE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_UNKNOWN_DEVICE_COMMAND:
			DBG_PRINTF( ( "DVDWDM: SRB_UNKNOWN_DEVICE_COMMAND\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_PAGING_OUT_DRIVER:
			DBG_PRINTF( ( "DVDWDM: SRB_PAGING_OUT_DRIVER\n\r") );
			//////////// Yagi
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_INITIALIZATION_COMPLETE:
			DBG_PRINTF( ( "DVDWDM: SRB_INITIALIZATION_COMPLETE\n\r") );
			//////////// Yagi
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_GET_DATA_INTERSECTION:
			DBG_PRINTF( ( "DVDWDM: SRB_GET_DATA_INTERSECTION\n\r") );
			pSrb->Status = DataIntersection( pSrb );
			break;
		
		default:
			DBG_PRINTF( ( "DVDWDM: SRB(default)=0x%04x\n\r", pSrb->Command) );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			DBG_BREAK();
			break;
	}
	DeviceNextDeviceNotify( pSrb );
	DeviceCompleteNotify( pSrb );
}
/******/

VOID LowAdapterReceivePacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//extern "C" VOID STREAMAPI AdapterReceivePacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	DBG_PRINTF( ( "DVDWDM:LowAdapterReceivePacket pSrb=0x%x\n\r",pSrb) );
	pSrb->Status = STATUS_SUCCESS;

	// 1999.1.11 Ishizaki
	if( (pSrb->Command == SRB_CHANGE_POWER_STATE) 
	 && (pSrb->CommandData.DeviceState == PowerDeviceD3) ){
		LIBSTATE	st = pHwDevExt->dvdstrm.GetState();

		if((st != Stop) && (st != PowerOff) ){
			PHW_STREAM_REQUEST_BLOCK	pTmp;
			
#ifndef		REARRANGEMENT
//				FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

			if( !pHwDevExt->dvdstrm.Stop() ){
				DBG_PRINTF( ("DVDWDM:    dvdstrm.Stop Error\n\r") );
			}
			// Flush Scheduler SRB queue.
			while( (pTmp=pHwDevExt->scheduler.getSRB())!=NULL ){
				pTmp->Status = STATUS_SUCCESS;
				CallAtDeviceCompleteNotify(pTmp, pTmp->Status);
			}
			// Flush C.C. queue.
			while( (pTmp=pHwDevExt->ccque.get())!=NULL ){
				pTmp->Status = STATUS_SUCCESS;
				CallAtDeviceCompleteNotify(pTmp, pTmp->Status);
			}
		}
	}
	// End

	switch( pSrb->Command ){
		case SRB_INITIALIZE_DEVICE:
			DBG_PRINTF( ( "DVDWDM: SRB_INITIALIZE_DEVICE\n\r") );

			if( !InitialHwDevExt( pHwDevExt ) ) {
				DBG_BREAK();
				pSrb->Status = STATUS_UNSUCCESSFUL;
			} else if( !GetPCIConfigSpace( pSrb ) ){
				DBG_BREAK();
				pSrb->Status = STATUS_NO_SUCH_DEVICE;
			} else if( !SetInitialize( pSrb ) ){
				DBG_BREAK();
				pSrb->Status = STATUS_IO_DEVICE_ERROR;
			} else if( !HwInitialize( pSrb ) ){
				DBG_BREAK();
//				pSrb->Status = STATUS_IO_DEVICE_ERROR;
				pSrb->Status = STATUS_UNSUCCESSFUL;
//				pSrb->Status = STATUS_NO_SUCH_DEVICDE;
			}
			break;

		case SRB_OPEN_STREAM:
			DBG_PRINTF( ( "DVDWDM: SRB_OPEN_STREAM\n\r") );
			OpenStream( pSrb );
			pHwDevExt->scheduler.Init();
			break;
		
		case SRB_CLOSE_STREAM:
			DBG_PRINTF( ( "DVDWDM: SRB_CLOSE_STREAM\n\r") );
			CloseStream( pSrb );
			break;
		
		case SRB_CHANGE_POWER_STATE:
			DBG_PRINTF( ( "DVDWDM: SRB_CHANGE_POWER_STATE\n\r") );
//--- 98.06.15 S.Watanabe
// for Debug
			switch( pSrb->CommandData.DeviceState ) {
				case PowerDeviceUnspecified:
					DBG_PRINTF( ( "DVDWDM:   PowerDeviceUnspecified\n\r") );
					break;
				case PowerDeviceD0:
					DBG_PRINTF( ( "DVDWDM:   PowerDeviceD0\n\r") );
                    if( pHwDevExt->cOpenInputStream!=0 ){
                        if( pHwDevExt->mpboard.PowerOn() ){
                            pHwDevExt->dvdstrm.SetTransferMode( HALSTREAM_DVD_MODE );
                            pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_DigitalOut, &pHwDevExt->m_AudioDigitalOut );

#ifndef		REARRANGEMENT
//							FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

                            if( pHwDevExt->dvdstrm.Stop() ){
                                pHwDevExt->StreamState = StreamState_Stop;
                                pHwDevExt->m_PlayMode = PLAY_MODE_NORMAL;
                            }
                        }else{
                            DBG_PRINTF( ("DVDWDM:Power On Error\n\r") );
                        }
                    }
					break;
				case PowerDeviceD1:
					DBG_PRINTF( ( "DVDWDM:   PowerDeviceD1\n\r") );
					break;
				case PowerDeviceD2:
					DBG_PRINTF( ( "DVDWDM:   PowerDeviceD2\n\r") );
					break;
				case PowerDeviceD3:
					DBG_PRINTF( ( "DVDWDM:   PowerDeviceD3\n\r") );
//                    if( pHwDevExt->cOpenInputStream!=0 ){
                        if( !pHwDevExt->mpboard.PowerOff() ){
                            DBG_PRINTF( ("DVDWDM:Power Off Error\n\r") );
                        }
//                    }
					break;
				case PowerDeviceMaximum:
					DBG_PRINTF( ( "DVDWDM:   PowerDeviceMaximum\n\r") );
					break;
				default:
					DBG_BREAK();
					break;
			}
//--- End.
//--- 98.07.08 S.Watanabe
//			/////////// Yagi
//			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			pSrb->Status = STATUS_SUCCESS;
//--- End.
			break;

		default:
			DBG_PRINTF( ( "DVDWDM: SRB(default)=0x%04x\n\r", pSrb->Command) );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			DBG_BREAK();
			break;
	}

	CallAtDeviceCompleteNotify( pSrb, pSrb->Status );
}

/******
extern "C" VOID STREAMAPI AdapterCancelPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->Status = STATUS_PENDING;
//    DBG_BREAK();
	StreamClassCallAtNewPriority(
			NULL,
			pSrb->HwDeviceExtension,
			Low,
			(PHW_PRIORITY_ROUTINE)LowAdapterCancelPacket,
			pSrb
	);
	
}
********/


//VOID LowAdapterCancelPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
extern "C" VOID STREAMAPI AdapterCancelPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	DBG_PRINTF( ("DVDWDM:Adapter Cancel Packet  pSrb=0x%x\n\r",pSrb) );
	
	pSrb->Status = STATUS_CANCELLED;
	
	switch( pSrb->Flags & (SRB_HW_FLAGS_DATA_TRANSFER | SRB_HW_FLAGS_STREAM_REQUEST) ){
		//
		// find all stream commands, and do stream notifications
		//
		case SRB_HW_FLAGS_STREAM_REQUEST | SRB_HW_FLAGS_DATA_TRANSFER :
			DBG_PRINTF( ("DVDWDM:Cancele Packet SRB_HW_FLAGS_STREAM_REQUEST | SRB_HW_FLAGS_DATA_TRANSFER\n\r") );
			// Remove CC SRB from CC Queue.
			if( pHwDevExt->ccque.remove( pSrb ) ){
				DBG_PRINTF( ("DVDWDM:CC READ SRB is found in Queue\n\r") );
				pSrb->Status = STATUS_CANCELLED;
				StreamCompleteNotify( pSrb );
			}else

			// Remove WRITE_DATA SRB from Schedule Queue.
			if( pHwDevExt->scheduler.removeSRB( pSrb ) ){
				DBG_PRINTF( ("DVDWDM:Schedule WRITE_DATA SRB is found in Queue\n\r") );
				pSrb->Status = STATUS_CANCELLED;
				StreamCompleteNotify( pSrb );
			}
			break;
			
		case SRB_HW_FLAGS_STREAM_REQUEST:
			DBG_PRINTF( ("DVDWDM:Cancel Packet SRB_HW_FLAGS_STREAM_REQUEST\n\r") );
			pSrb->Status = STATUS_CANCELLED;    
			StreamCompleteNotify( pSrb );
			break;
			
		default:
			DBG_PRINTF( ("DVDWDM:Cancel Packet default\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_CANCELLED;    
			StreamCompleteNotify( pSrb );
			break;
	}

}

/*******
extern "C" VOID STREAMAPI AdapterTimeoutPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    pSrb->Status = STATUS_PENDING;
//    DBG_BREAK();
	StreamClassCallAtNewPriority(
			NULL,
			pSrb->HwDeviceExtension,
			Low,
			(PHW_PRIORITY_ROUTINE)LowAdapterTimeoutPacket,
			pSrb
	);
}
**********/

//VOID LowAdapterTimeoutPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
extern "C" VOID STREAMAPI AdapterTimeoutPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	DBG_PRINTF( ("DVDWDM:Adapter Timeout Packet pSrb=0x%x\n\r",pSrb) );
	
	if( pHwDevExt->StreamState == StreamState_Pause ){       // Pause state.
		DBG_PRINTF( ("DVDWDM:   Pause Mode now !\n\r") );
		pSrb->TimeoutCounter = pSrb->TimeoutOriginal;
		return;
	}
	
	DBG_BREAK();    

	//
	// clear all pending timeouts on all streams that use them
	//
	if( pHwDevExt->pstroVid ){
		StreamClassScheduleTimer( pHwDevExt->pstroVid,
					pHwDevExt, 0, NULL, pHwDevExt->pstroVid );
	}
	
	if( pHwDevExt->pstroAud ){
		StreamClassScheduleTimer( pHwDevExt->pstroAud,
					pHwDevExt, 0, NULL, pHwDevExt->pstroAud );
	}
	
	if( pHwDevExt->pstroSP ){
		StreamClassScheduleTimer( pHwDevExt->pstroSP,
					pHwDevExt, 0, NULL, pHwDevExt->pstroSP );
	}
	
	DBG_PRINTF( ("DVDWDM:   Abort Outstanding\n\r") );
/********

#ifndef		REARRANGEMENT
//	FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

	if( !pHwDevExt->dvdstrm.Stop() ){
		DBG_PRINTF( ("DVDWDM:   dvdstrm.Stop Error\n\r") );
		DBG_BREAK();
	}
*******/    

//--- 98.09.07 S.Watanabe
//    TimeoutCancelSrb(pSrb);
	// Flush Scheduler SRB queue.
	PHW_STREAM_REQUEST_BLOCK    pTmp;
	while( (pTmp=pHwDevExt->scheduler.getSRB())!=NULL ){
		pTmp->Status = STATUS_SUCCESS;
		StreamCompleteNotify(pTmp);
	}
//--- End.
//--- 98.09.08 H.Yagi
    // Flush C.C. queue.
    while( (pTmp=pHwDevExt->ccque.get())!=NULL ){
		pTmp->Status = STATUS_SUCCESS;
		StreamCompleteNotify(pTmp);
	}
    StreamClassCallAtNewPriority(
					NULL,
					pSrb->HwDeviceExtension,
                    Low,
					(PHW_PRIORITY_ROUTINE)LowTimeoutCancelSrb,
					pSrb);

//--- End.

//    StreamClassAbortOutstandingRequests( pHwDevExt, NULL, STATUS_CANCELLED );
}


VOID LowTimeoutCancelSrb(IN PHW_STREAM_REQUEST_BLOCK pSrb)
{
//	DvdDebug(DBG_WRAPPER, 1,
//			("tosdvd02: LowTimeoutCancelSrb - SRB %08x\n", pSrb));
    DBG_PRINTF( ("DVDWDM:LowTimeOutCnacelSRB -SRB  %08x\n\r", pSrb ) );

	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

#ifndef		REARRANGEMENT
//	FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

    if( !pHwDevExt->dvdstrm.Stop() ){
        DBG_PRINTF( ("DVDWDM:dvdstrm Stop() Error!\n\r") );
        DBG_BREAK();
    }
    return;
//	if (pSrb->Command == SRB_WRITE_DATA) {
//		((PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension))->dvdstrm.CancelTransferData(
//			((IMPEGBuffer *)&((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff));
//	}
}
//--- End.

extern "C" BOOLEAN STREAMAPI HwInterrupt( IN PHW_DEVICE_EXTENSION pHwDevExt )
{
	HALRESULT   result;
	BOOLEAN     ret;
	ret = FALSE;

	pHwDevExt->kserv.CheckInt();    
//    pHwDevExt->kserv.DisableHwInt();

    if( pHwDevExt->m_InitComplete==FALSE ){     // Not finish to initialize
        return( FALSE );                        // all objects.
    }

	result = pHwDevExt->mphal.HALHwInterrupt();
	if( result==HAL_IRQ_MINE ){
		ret = TRUE;
	}else{
		ret = FALSE;
	}

//    pHwDevExt->kserv.EnableHwInt();

	return( ret );
}



/****************/
extern "C" VOID STREAMAPI VideoReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->Status = STATUS_PENDING;
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	DBG_PRINTF( ("DVDWDM:Video Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );

#ifdef LOWSENDDATA
	ULONG       i;
	if( pSrb->Command == SRB_WRITE_DATA 
		&& pSrb->NumberOfPhysicalPages > 0
		&& pHwDevExt->StreamState != StreamState_Stop )
	{
		BOOL LowFlag = FALSE;
		PKSSTREAM_HEADER    pStruc;
		

		for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
			pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
			if( ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY )
				|| ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY )
				|| ( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey )
				|| ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED )
				|| ( pStruc->DataUsed == 0 ))
			{
				LowFlag = TRUE;
				break;
			};
		}

		if( LowFlag == FALSE )
		{
			DBG_PRINTF( ("DVDWDM:---Video SRB_WRITE_DATA  HighWrite >>>>>>>>>>>>>>>>>>>> pSrb = 0x%08x\n\r", pSrb) );
			// Valid DVD data to transfer decoder board.
			WriteDataChangeHwStreamState( pHwDevExt );

			pHwDevExt->kserv.DisableHwInt();

			CWDMBuffer	*pWdmBuff;
			CWDMBuffer	temp8;
			RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff), &temp8, sizeof(CWDMBuffer) );

			pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff);
			pWdmBuff->Init();
			pWdmBuff->SetSRB( pSrb );
			
			pHwDevExt->scheduler.SendData( pSrb );     // for F.F. & F.R.

			pHwDevExt->kserv.EnableHwInt();
			StreamNextDataNotify( pSrb );
			DBG_PRINTF( ("DVDWDM:<<<<<<<<<<<<<<<<<<<<\n\r") );
			return;
		};

	}
#endif

//    StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowVideoReceiveDataPacket,pSrb);
    StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowVideoReceiveDataPacket,pSrb);
	// StreamNextDataNotify( pSrb );            // move to LowVideoReceiveDataPacket
}
/************/


//extern "C" VOID STREAMAPI VideoReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowVideoReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	DBG_PRINTF( ("DVDWDM:Low Video Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );

#ifdef DBG
	WORD	wOrderNumber = 0;
	KSSTREAM_HEADER * pHeader;
	DBG_PRINTF( ("DVDWDM:Low Video Receive Data Packet----- NumberofBuffers=%x\n\r",pSrb->NumberOfBuffers) );
	for( ULONG ulNumber = 0; ulNumber < pSrb->NumberOfBuffers; ulNumber++ )
	{
		pHeader = ((PKSSTREAM_HEADER)pSrb->CommandData.DataBufferArray) + ulNumber;
		wOrderNumber = (WORD)(pHeader->TypeSpecificFlags >> 16);		//get packet number
		DBG_PRINTF( ("DVDWDM:   wOrderNumber=%x\n\r",wOrderNumber) );
	}
#endif

	CWDMBuffer  *pWdmBuff;
	
	// need this line. 
	CWDMBuffer          temp8;

	
	// add by H.Yagi 99.02.02
	OsdDataStruc	TestOSD;
	TestOSD.OsdType = OSD_TYPE_ZIVA;
	TestOSD.pNextData = NULL;
	TestOSD.pData = &erase[0];
	TestOSD.dwOsdSize = sizeof( erase );

#ifdef DBG
	/////// 99.01.22   for debug  by H.Yagi   start
	DWORD	currentTime;
	/////// 99.01.22   for debug  by H.Yagi   end
#endif

	StreamNextDataNotify( pSrb );            // move from VideoReceiveDataPacket

#ifndef	REARRANGEMENT
	for (int buffcnt = 0; buffcnt < WDM_BUFFER_MAX; buffcnt++)
		RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[buffcnt]), &temp8, sizeof(CWDMBuffer) );
#else
	RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff), &temp8, sizeof(CWDMBuffer) );
#endif	REARRANGEMENT

	switch( pSrb->Command ){
		case SRB_WRITE_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_WRITE_DATA PhyPages=%d\n\r",pSrb->NumberOfPhysicalPages ) );
			ULONG       i;
			PKSSTREAM_HEADER    pStruc;
			
			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY ){
					DBG_PRINTF( ("DVDWDM:   DATA_DISCONTINUITY(Video)\n\r" ));
					//
					USCC_Discontinuity( pHwDevExt );        // Flush the USCC Data
				}
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY ){
#ifdef DBG
					static int TimeDisCont = 0;
					DBG_PRINTF( ("DVDWDM:   TIME_DISCONTINUITY(Video) %d\n\r",TimeDisCont++ ));
#endif
				}
//--- 98.06.16 S.Watanabe
// for Debug
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEVALID ) {
					DBG_PRINTF((
						"DVDWDM:Video PTS: 0x%x( 0x%s(100ns) )\r\n",
						ConvertStrmtoPTS(pStruc->PresentationTime.Time),
						DebugLLConvtoStr( pStruc->PresentationTime.Time, 16 )
					));
				}
//--- End.
//--- 98.06.02 S.Watanabe
				if( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey ) {
					pHwDevExt->CppFlagCount++;
					DBG_PRINTF(( "DVDWDM:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
					if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
                        SetCppFlag( pHwDevExt, TRUE );
				}
//--- End.
			}
		
			///
			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				DBG_PRINTF( ("DVDWDM: Video Packet Flag = 0x%x\n\r", pStruc->OptionsFlags ));

				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ){
					DBG_PRINTF( ("DVDWDM:       TYPE CHANGE(Video)\n\r") );
					if( pStruc->DataUsed >= sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2) ){
//                        ProcessVideoFormat( (PKSDATAFORMAT)pStruc->Data, pHwDevExt );
                        ProcessVideoFormat( pSrb, (PKSDATAFORMAT)pStruc->Data, pHwDevExt );
					}
					i = pSrb->NumberOfBuffers;
					break;
				}

				if( pStruc->DataUsed )
					break;
					
			}
			if( i==pSrb->NumberOfBuffers ){
				pSrb->Status = STATUS_SUCCESS;
#ifndef		REARRANGEMENT
				pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
				break;
			}

			if( pHwDevExt->StreamState == StreamState_Stop ){
				DBG_PRINTF( ("DVDWDM:STOP STATE now!!\n\r") );
				pSrb->Status = STATUS_SUCCESS;
#ifndef		REARRANGEMENT
				pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
				CallAtStreamCompleteNotify( pSrb, STATUS_SUCCESS );
				return;
			}

			///
			if( pSrb->NumberOfPhysicalPages > 0 ){
				DBG_PRINTF( ("DVDWDM:>>>>>>>>>>>>>>>>>>>> pSrb = 0x%08x\n\r", pSrb) );
				// Valid DVD data to transfer decoder board.

				// add by H.Yagi 99.02.02
				// Before sending Data check APS and do some actions.
				if( pHwDevExt->m_APSChange == TRUE ){
					MacroVisionTVControl( pSrb, pHwDevExt->m_APSType, TestOSD );
				}

				WriteDataChangeHwStreamState( pHwDevExt );

				pHwDevExt->kserv.DisableHwInt();

#ifndef	REARRANGEMENT
				for (buffcnt = 0; buffcnt < WDM_BUFFER_MAX; buffcnt++)
				{
					pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[buffcnt]);
					pWdmBuff->Init();
					pWdmBuff->SetSRB( pSrb );
				}
#else
				pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff);
				pWdmBuff->Init();
				pWdmBuff->SetSRB( pSrb );
#endif	REARRANGEMENT

                // DumpPTSValue( pSrb );           // for debug by H.Yagi 98.08.21

				pSrb->Status = STATUS_PENDING;
#ifdef DBG
				/////// 99.01.22   for debug  by H.Yagi   start
				pHwDevExt->kserv.GetTickCount( &currentTime );
				DBG_PRINTF( ("TIME = %08x\n\r", currentTime ) );
				/////// 99.01.22   for debug  by H.Yagi   end
#endif

				pHwDevExt->scheduler.SendData( pSrb );     // for F.F. & F.R.

				pHwDevExt->kserv.EnableHwInt();
				DBG_PRINTF( ("DVDWDM:<<<<<<<<<<<<<<<<<<<<\n\r") );

				return;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult = 0x%08x\n\r", pSrb->Command) );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	CallAtStreamCompleteNotify( pSrb, STATUS_SUCCESS );
#ifndef	REARRANGEMENT
	DBG_PRINTF( ("DVDWDM:LowVideoReceiveDataPacket-CompleteSrb = %x\n\r", pSrb) );
#endif	REARRANGEMENT

	
}

/*********/
extern "C" VOID STREAMAPI VideoReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:Video Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	pSrb->Status = STATUS_PENDING;
	switch( pSrb->Command ){
		case SRB_SET_STREAM_STATE:
		case SRB_GET_STREAM_PROPERTY:
		case SRB_SET_STREAM_PROPERTY:
		case SRB_BEGIN_FLUSH:
		case SRB_END_FLUSH:
//                StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowVideoReceiveCtrlPacket,pSrb);
                StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowVideoReceiveCtrlPacket,pSrb);
				// StreamNextCtrlNotify( pSrb );       // move to LowVideoReceiveCtrlPacket
				return;

		case SRB_GET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_STATE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_OPEN_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_OPEN_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_CLOSE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_CLOSE_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_INDICATE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_INDICATE_MASTER_CLOCK\n\r") );
			pHwDevExt->hClk = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_UNKNOWN_STREAM_COMMAND:
			DBG_PRINTF( ("DVDWDM:---SRB_UNKNOWN_STREAM_COMMAND\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_SET_STREAM_RATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_RATE\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_PROPOSE_DATA_FORMAT:
			DBG_PRINTF( ("DVDWDM:---SRB_PROPOSE_DATA_FORMAT\n\r") );
			VideoQueryAccept( pSrb );
			break;
		
		case SRB_PROPOSE_STREAM_RATE:
			DBG_PRINTF( ("---SRB_PROPOSE_STREAM_RATE\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%0x)\n\r", pSrb->Command, pSrb->Command) );
            DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
	};

	StreamNextCtrlNotify( pSrb );
	StreamCompleteNotify( pSrb );
}
/**********/

//extern "C" VOID STREAMAPI VideoReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowVideoReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	LIBSTATE	HwStreamState;
	DBG_PRINTF( ("DVDWDM:Low Video Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	
    StreamNextCtrlNotify( pSrb );       // move from LowVideoReceiveCtrlPacket
	
	switch( pSrb->Command ){
		case SRB_SET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_STATE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			switch( pSrb->CommandData.StreamState )
			{
				case KSSTATE_STOP:
					DBG_PRINTF( ("DVDWDM:       Video KSSTATE_STOP\n\r") );
					// SetSinkWrapper when KSSTATE_RUN, and UnsetSinkWrapper when KSSATTE_STOP dynamically,
					// cause of MS bug?
					pHwDevExt->mphal.UnsetSinkWrapper( &(pHwDevExt->vsync) );

					pHwDevExt->StreamState = StreamState_Stop;
					SetVideoRateDefault( pHwDevExt );
//                    pHwDevExt->Rate = VIDEO_MAX_FULL_RATE;
//--- 98.06.02 S.Watanabe
/////// 99.01.07 H.Yagi					pHwDevExt->CppFlagCount = 0;
//--- End.
					HwStreamState = pHwDevExt->dvdstrm.GetState();
					if( HwStreamState != Stop )
					{

#ifndef		REARRANGEMENT
						FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

						if( !pHwDevExt->dvdstrm.Stop() )
						{
							DBG_PRINTF(("DVDWDM: Stop error! LINE=%d\r\n",__LINE__ ));
							pSrb->Status = STATUS_IO_DEVICE_ERROR;
						};
					};
					pHwDevExt->ticktime.Stop();
					break;

				case KSSTATE_PAUSE:
					DBG_PRINTF( ("DVDWDM:       Video KSSTATE_PAUSE\n\r") );

					pHwDevExt->StreamState = StreamState_Pause;
					HwStreamState = pHwDevExt->dvdstrm.GetState();
					if( HwStreamState == Play || HwStreamState == Scan || HwStreamState == Slow )
					{
						if( !pHwDevExt->dvdstrm.Pause() )
						{
							DBG_PRINTF(("DVDWDM: Pause error! LINE=%d\r\n",__LINE__ ));
							pSrb->Status = STATUS_IO_DEVICE_ERROR;
						};
					};
					pHwDevExt->ticktime.Pause();
					break;

				case KSSTATE_RUN:
					DBG_PRINTF( ("DVDWDM:       Video KSSTATE_RUN\n\r") );
					// SetSinkWrapper when KSSTATE_RUN, and UnsetSinkWrapper when KSSATTE_STOP dynamically,
					// cause of MS bug?
					pHwDevExt->mphal.SetSinkWrapper( &(pHwDevExt->vsync) );

					pHwDevExt->StreamState = StreamState_Play;
					HwStreamState = pHwDevExt->dvdstrm.GetState();
					if( HwStreamState == Pause )
						WriteDataChangeHwStreamState( pHwDevExt );
					pHwDevExt->ticktime.Run();
					break;
			}
			break;
		
		
		case SRB_GET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_PROPERTY\n\r") );

			GetVideoProperty( pSrb );

			if( pSrb->Status == STATUS_PENDING )
				return;
			break;
		
		case SRB_SET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_PROPERTY\n\r") );

			SetVideoProperty( pSrb );

			if( pSrb->Status == STATUS_PENDING )
				return;
			break;
		
		case SRB_BEGIN_FLUSH:
			DBG_PRINTF( ("---SRB_BEGIN_FLUSH\n\r") );

			if( pHwDevExt->dvdstrm.GetState() != Stop )
			{

#ifndef		REARRANGEMENT
				FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

				if( !pHwDevExt->dvdstrm.Stop() )
				{
					DBG_PRINTF( ("DVDWDM:       dvdstrm.Stop Error\n\r") );
					DBG_BREAK();
					CallAtStreamCompleteNotify( pSrb, pSrb->Status );
					return;
				};
			};

			pSrb->Status = STATUS_SUCCESS;
			break;

//--- 98.06.01 S.Watanabe
		case SRB_END_FLUSH:
			DBG_PRINTF( ("---SRB_END_FLUSH\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
//--- End.

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%0x)\n\r", pSrb->Command, pSrb->Command) );
//            DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status );
	
}

/***********/
extern "C" VOID STREAMAPI AudioReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->Status = STATUS_PENDING;
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	DBG_PRINTF( ("DVDWDM: Audio Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );

#ifdef LOWSENDDATA
	ULONG       i;
	if( pSrb->Command == SRB_WRITE_DATA
		&& pSrb->NumberOfPhysicalPages > 0
		&& pHwDevExt->StreamState != StreamState_Stop )
	{
		BOOL LowFlag = FALSE;
		PKSSTREAM_HEADER    pStruc;
		
		for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
			pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
			if( ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY )
				|| ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY )
				|| ( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey )
				|| ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED )
				|| ( pStruc->DataUsed == 0 ))
			{
				LowFlag = TRUE;
				break;
			};
		}

		if( LowFlag == FALSE )
		{
			/// Set Audio channel # by checking into pack data.
			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				// before sending data, check Audio channel,
				if( pStruc->DataUsed ){
					SetAudioID( pHwDevExt, pStruc );
				}
			}

			CWDMBuffer	*pWdmBuff;
			CWDMBuffer	temp8;
			RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff), &temp8, sizeof(CWDMBuffer) );

			DBG_PRINTF( ("DVDWDM:---Audio SRB_WRITE_DATA  HighWrite >>>>>>>>>>>>>>>>>>>> pSrb = 0x%08x\n\r", pSrb) );

			if( pHwDevExt->Rate < 10000 )
			{
				pSrb->Status = STATUS_SUCCESS;
				StreamNextDataNotify( pSrb );
				StreamCompleteNotify( pSrb );
			};

			// Valid DVD data to transfer decoder board.
			WriteDataChangeHwStreamState( pHwDevExt );

			pHwDevExt->kserv.DisableHwInt();

			pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff);
			pWdmBuff->Init();
			pWdmBuff->SetSRB( pSrb );

			pSrb->Status = STATUS_PENDING;

			pHwDevExt->scheduler.SendData( pSrb );     // for F.F. & F.R.

			pHwDevExt->kserv.EnableHwInt();
			StreamNextDataNotify( pSrb );
			DBG_PRINTF( ("DVDWDM:<<<<<<<<<<<<<<<<<<<<\n\r") );
			return;
		};

	}
#endif

//    StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowAudioReceiveDataPacket,pSrb);
    StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowAudioReceiveDataPacket,pSrb);
	// StreamNextDataNotify( pSrb );        // move to LowAudioReceiveDataPacket
}
/***********/

//extern "C" VOID STREAMAPI AudioReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowAudioReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	DBG_PRINTF( ("DVDWDM: Low Audio Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );
#ifdef DBG
	WORD	wOrderNumber = 0;
	KSSTREAM_HEADER * pHeader;
	DBG_PRINTF( ("DVDWDM:Low Audio Receive Data Packet----- NumberofBuffers=%x\n\r",pSrb->NumberOfBuffers) );
	for( ULONG ulNumber = 0; ulNumber < pSrb->NumberOfBuffers; ulNumber++ )
	{
		pHeader = ((PKSSTREAM_HEADER)pSrb->CommandData.DataBufferArray) + ulNumber;
		wOrderNumber = (WORD)(pHeader->TypeSpecificFlags >> 16);		//get packet number
		DBG_PRINTF( ("DVDWDM:   wOrderNumber=%x\n\r",wOrderNumber) );
	}
#endif
	
	CWDMBuffer  *pWdmBuff;
	
	// need to this line. 
	CWDMBuffer          temp8;

	StreamNextDataNotify( pSrb );        // move from LowAudioReceiveDataPacket

#ifndef	REARRANGEMENT
	for (int buffcnt = 0; buffcnt < WDM_BUFFER_MAX; buffcnt++)
		RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[buffcnt]), &temp8, sizeof(CWDMBuffer) );
#else
	RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff), &temp8, sizeof(CWDMBuffer) );
#endif	REARRANGEMENT

	switch( pSrb->Command ){
		case SRB_WRITE_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_WRITE_DATA\n\r") );
			ULONG               i;
			PKSSTREAM_HEADER    pStruc;

			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY ){
					DBG_PRINTF( ("DVDWDM:   DATA_DISCONTINUITY(Audio)\n\r" ));
				}
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY ){
					DBG_PRINTF( ("DVDWDM:   TIME_DISCONTINUITY(Audio)\n\r" ));
				}
//--- 98.06.16 S.Watanabe
// for Debug
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEVALID ) {
					DBG_PRINTF((
						"DVDWDM:Audio PTS: 0x%x( 0x%s(100ns) )\r\n",
						ConvertStrmtoPTS(pStruc->PresentationTime.Time),
						DebugLLConvtoStr( pStruc->PresentationTime.Time, 16 )
					));
				}
//--- End.
//--- 98.06.02 S.Watanabe
				if( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey ) {
					pHwDevExt->CppFlagCount++;
					DBG_PRINTF(( "DVDWDM:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
					if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
                        SetCppFlag( pHwDevExt, TRUE );
				}
//--- End.
			}

			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				DBG_PRINTF( ("DVDWDM: Audio Packet Flag = 0x%x\n\r", pStruc->OptionsFlags ) );

				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ){
					DBG_PRINTF( ("DVDWDM:       TYPE CHANGE(Audio)\n\r") );
//                    if( pStruc->DataUsed >= sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2) ){
					if( pStruc->DataUsed ){
						ProcessAudioFormat( (PKSDATAFORMAT)pStruc->Data, pHwDevExt );
					}
					i = pSrb->NumberOfBuffers;
					break;
				}
				if( pStruc->DataUsed )
					break;


			}
			if( i==pSrb->NumberOfBuffers ){
				pSrb->Status = STATUS_SUCCESS;
#ifndef		REARRANGEMENT
				pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
				break;
			}


			//
			if( pHwDevExt->StreamState == StreamState_Stop ){
				DBG_PRINTF( ("DVDWDM:STOP STATE now!!\n\r") );
				DBG_BREAK();
				pSrb->Status = STATUS_SUCCESS;
#ifndef		REARRANGEMENT
				pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
				CallAtStreamCompleteNotify( pSrb, pSrb->Status );
				return;                                            
			}

			/// Set Audio channel # by checking into pack data.
			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				// before sending data, check Audio channel,
				if( pStruc->DataUsed ){
					SetAudioID( pHwDevExt, pStruc );
				}
			}
				
			if( pSrb->NumberOfPhysicalPages > 0 ){
				DBG_PRINTF( ("DVDWDM:>>>>>>>>>>>>>>>>>>>> pSrb = 0x%08x\n\r", pSrb) );
				// Valid DVD data to transfer decoder board.

				if( pHwDevExt->Rate < 10000 )
				{
					pSrb->Status = STATUS_SUCCESS;
#ifndef		REARRANGEMENT
					pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
					CallAtStreamCompleteNotify( pSrb, pSrb->Status );
					return;
				};

				WriteDataChangeHwStreamState( pHwDevExt );

				pHwDevExt->kserv.DisableHwInt();

#ifndef	REARRANGEMENT
				for (buffcnt = 0; buffcnt < WDM_BUFFER_MAX; buffcnt++)
				{
					pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[buffcnt]);
					pWdmBuff->Init();
					pWdmBuff->SetSRB( pSrb );
				}
#else
				pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff);
				pWdmBuff->Init();
				pWdmBuff->SetSRB( pSrb );
#endif	REARRANGEMENT

				pSrb->Status = STATUS_PENDING;

				pHwDevExt->scheduler.SendData( pSrb );     // for F.F. & F.R.

				pHwDevExt->kserv.EnableHwInt();
				DBG_PRINTF( ("DVDWDM:<<<<<<<<<<<<<<<<<<<<\n\r") );

				return;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command) );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status );
#ifndef	REARRANGEMENT
	DBG_PRINTF( ("DVDWDM:LowAudioReceiveDataPacket-CompleteSrb = %x\n\r", pSrb) );
#endif	REARRANGEMENT

}



/************/
extern "C" VOID STREAMAPI AudioReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:Audio Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	pSrb->Status = STATUS_PENDING;
	switch( pSrb->Command ){
		case SRB_GET_STREAM_PROPERTY:
		case SRB_SET_STREAM_PROPERTY:
//            StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowAudioReceiveCtrlPacket,pSrb);
            StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowAudioReceiveCtrlPacket,pSrb);
			// StreamNextCtrlNotify( pSrb );            // move to LowAudioReceiveCtrlPacket
			return;
			
		case SRB_SET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_STATE\n\r") );
			switch( pSrb->CommandData.StreamState ){
				case KSSTATE_STOP:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_STOP\n\r") );
					SetAudioRateDefault( pHwDevExt );
					break;

				case KSSTATE_PAUSE:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_PAUSE\n\r") );
					break;

				case KSSTATE_RUN:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_RUN\n\r") );
					break;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_GET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_STATE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_OPEN_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_OPEN_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_CLOSE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_CLOSE_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_INDICATE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_INDICATE_MASTER_CLOCK\n\r") );
			pHwDevExt->hClk = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_UNKNOWN_STREAM_COMMAND:
			DBG_PRINTF( ("DVDWDM:---SRB_UNKNOWN_STREAM_COMMAND\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_SET_STREAM_RATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_RATE\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_PROPOSE_DATA_FORMAT:
			DBG_PRINTF( ("DVDWDM:---SRB_PROPOSE_DATA_FORMAT\n\r") );
			AudioQueryAccept( pSrb );
			break;

		case SRB_BEGIN_FLUSH:
			DBG_PRINTF( ("---SRB_BEGIN_FLUSH\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_END_FLUSH:
			DBG_PRINTF( ("---SRB_END_FLUSH\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command) );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	StreamNextCtrlNotify( pSrb );
	StreamCompleteNotify( pSrb );
};
/***********/

VOID    LowAudioReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//extern "C" VOID STREAMAPI AudioReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	DBG_PRINTF( ("DVDWDM:Low Audio Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	
	StreamNextCtrlNotify( pSrb );            // move from AudioReceiveCtrlPacket

	switch( pSrb->Command ){
		case SRB_GET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_PROPERTY\n\r") );
			
			GetAudioProperty( pSrb );

			if( pSrb->Status == STATUS_PENDING )
				return;
			break;
		
		case SRB_SET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_PROPERTY\n\r") );

			SetAudioProperty( pSrb );
			
			if( pSrb->Status == STATUS_PENDING )
				return;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command) );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status );

}

/*********/
extern "C" VOID STREAMAPI SubpicReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->Status = STATUS_PENDING;
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	DBG_PRINTF( ("DVDWDM:Sub-pic Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );

#ifdef LOWSENDDATA
	ULONG       i;
	if( pSrb->Command == SRB_WRITE_DATA
		&& pSrb->NumberOfPhysicalPages > 0
		&& pHwDevExt->StreamState != StreamState_Stop )
	{
		BOOL LowFlag = FALSE;
		PKSSTREAM_HEADER    pStruc;
		
		for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
			pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
			if( ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY )
				|| ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY )
				|| ( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey )
				|| ( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED )
				|| ( pStruc->DataUsed == 0 ))
			{
				LowFlag = TRUE;
				break;
			};
		}

		if( LowFlag == FALSE )
		{
			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				// before sending data, check Subpic channel,
				ASSERT( pStruc!=NULL );
				if( pStruc->Data ){
					SetSubpicID( pHwDevExt, pStruc );
				}
			}

			CWDMBuffer	*pWdmBuff;
			CWDMBuffer	temp8;
			RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff), &temp8, sizeof(CWDMBuffer) );

			DBG_PRINTF( ("DVDWDM:---SubPic SRB_WRITE_DATA  HighWrite >>>>>>>>>>>>>>>>>>>> pSrb = 0x%08x\n\r", pSrb) );
			// Valid DVD data to transfer decoder board.

			if( pHwDevExt->Rate < 10000 )
			{
				pSrb->Status = STATUS_SUCCESS;
				StreamNextDataNotify( pSrb );
				StreamCompleteNotify( pSrb );
			};

			WriteDataChangeHwStreamState( pHwDevExt );

			pHwDevExt->kserv.DisableHwInt();

			pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff);
			pWdmBuff->Init();
			pWdmBuff->SetSRB( pSrb );

			pSrb->Status = STATUS_PENDING;

			pHwDevExt->scheduler.SendData( pSrb );     // for F.F. & F.R.

			pHwDevExt->kserv.EnableHwInt();
			StreamNextDataNotify( pSrb );
			DBG_PRINTF( ("DVDWDM:<<<<<<<<<<<<<<<<<<<<\n\r") );
			return;
		};

	}
#endif
//    StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowSubpicReceiveDataPacket,pSrb);
    StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowSubpicReceiveDataPacket,pSrb);
	// StreamNextDataNotify( pSrb );            // move to LowSubpicReceiveDataPacket
}
/************/

//extern "C" VOID STREAMAPI SubpicReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowSubpicReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
#ifdef DBG
	WORD	wOrderNumber = 0;
	KSSTREAM_HEADER * pHeader;
	DBG_PRINTF( ("DVDWDM:Low Subpic Receive Data Packet----- NumberofBuffers=%x\n\r",pSrb->NumberOfBuffers) );
	for( ULONG ulNumber = 0; ulNumber < pSrb->NumberOfBuffers; ulNumber++ )
	{
		pHeader = ((PKSSTREAM_HEADER)pSrb->CommandData.DataBufferArray) + ulNumber;
		wOrderNumber = (WORD)(pHeader->TypeSpecificFlags >> 16);		//get packet number
		DBG_PRINTF( ("DVDWDM:   wOrderNumber=%x\n\r",wOrderNumber) );
	}
#endif
	DBG_PRINTF( ("DVDWDM:Low Sub-pic Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );

	CWDMBuffer  *pWdmBuff;
	
	// need to this line. 
	CWDMBuffer          temp8;

#ifndef	REARRANGEMENT
	for (int buffcnt = 0; buffcnt < WDM_BUFFER_MAX; buffcnt++)
		RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[buffcnt]), &temp8, sizeof(CWDMBuffer) );
#else
	RtlCopyMemory( &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff), &temp8, sizeof(CWDMBuffer) );
#endif	REARRANGEMENT

	ULONG       i;
	PKSSTREAM_HEADER    pStruc;

	StreamNextDataNotify( pSrb );            // move from SubpicReceiveDataPacket

	switch( pSrb->Command ){
		case SRB_WRITE_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_WRITE_DATA\n\r") );
//            ULONG       i;
//            PKSSTREAM_HEADER    pStruc;

			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY ){
					DBG_PRINTF( ("DVDWDM:   DATA_DISCONTINUITY(Subpic)\n\r" ));
					
				}
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY ){
					DBG_PRINTF( ("DVDWDM:   TIME_DISCONTINUITY(Subpic)\n\r" ));
				}
				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEVALID ) {
					DBG_PRINTF((
						"DVDWDM:Subpic PTS: 0x%x( 0x%s(100ns) )\r\n",
						ConvertStrmtoPTS(pStruc->PresentationTime.Time),
						DebugLLConvtoStr( pStruc->PresentationTime.Time, 16 )
					));
				}
//--- 98.06.02 S.Watanabe
				if( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey ) {
					pHwDevExt->CppFlagCount++;
					DBG_PRINTF(( "DVDWDM:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
					if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
                        SetCppFlag( pHwDevExt, TRUE );
				}
//--- End.
			}

			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				DBG_PRINTF( ("DVDWDM: Subpic PacketFlag = 0x%x\n\r", pStruc->OptionsFlags ));

				if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ){
					DBG_PRINTF( ("DVDWDM:       TYPE CHANGE(Subpic)\n\r") );
					i = pSrb->NumberOfBuffers;
					break;
				}
				if( pStruc->DataUsed )
					break;

			}
			if( i==pSrb->NumberOfBuffers ){
				pSrb->Status = STATUS_SUCCESS;
#ifndef		REARRANGEMENT
				pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
				break;
			}


			// 
			if( pHwDevExt->StreamState == StreamState_Stop ){
				DBG_PRINTF( ("DVDWDM:STOP STATE now!!\n\r") );
#ifndef		REARRANGEMENT
				pSrb->Status = STATUS_SUCCESS;
				pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
				CallAtStreamCompleteNotify( pSrb, STATUS_SUCCESS );
				return;
			}


			///
			for( i=0; i<(pSrb->NumberOfBuffers); i++ ){
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
				// before sending data, check Subpic channel,
				ASSERT( pStruc!=NULL );
				if( pStruc->DataUsed ){
					SetSubpicID( pHwDevExt, pStruc );
				}
			}

			if( pSrb->NumberOfPhysicalPages > 0 ){
				DBG_PRINTF( ("DVDWDM:>>>>>>>>>>>>>>>>>>>> pSrb = 0x%08x\n\r", pSrb ) );
				// Valid DVD data to transfer decoder board.
				if( pHwDevExt->Rate < 10000 )
				{
					pSrb->Status = STATUS_SUCCESS;
#ifndef		REARRANGEMENT
					pHwDevExt->scheduler.SendData( pSrb );
#endif		REARRANGEMENT
					CallAtStreamCompleteNotify( pSrb, pSrb->Status );
					return;
				};

				WriteDataChangeHwStreamState( pHwDevExt );

				pHwDevExt->kserv.DisableHwInt();

#ifndef	REARRANGEMENT
				for (buffcnt = 0; buffcnt < WDM_BUFFER_MAX; buffcnt++)
				{
					pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[buffcnt]);
					pWdmBuff->Init();
					pWdmBuff->SetSRB( pSrb );
				}
#else
				pWdmBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff);
				pWdmBuff->Init();
				pWdmBuff->SetSRB( pSrb );
#endif	REARRANGEMENT

				pSrb->Status = STATUS_PENDING;

				pHwDevExt->scheduler.SendData( pSrb );     // for F.F. & F.R.

				pHwDevExt->kserv.EnableHwInt();
				DBG_PRINTF( ("DVDWDM:<<<<<<<<<<<<<<<<<<<<\n\r") );

				return;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command) );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status );
#ifndef	REARRANGEMENT
	DBG_PRINTF( ("DVDWDM:LowSubpicReceiveDataPacket-CompleteSrb = %x\n\r", pSrb) );
#endif	REARRANGEMENT

}

/********/
extern "C" VOID STREAMAPI SubpicReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:Sub-pic Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );

	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	pSrb->Status = STATUS_PENDING;

	switch( pSrb->Command ){
		case SRB_GET_STREAM_PROPERTY:
		case SRB_SET_STREAM_PROPERTY:
		case SRB_BEGIN_FLUSH:
//                StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowSubpicReceiveCtrlPacket,pSrb);
                StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowSubpicReceiveCtrlPacket,pSrb);
				// StreamNextCtrlNotify( pSrb );            // move to LowSubpicReceiveCtrlPacket
				return;

		case SRB_SET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_STATE\n\r") );
			switch( pSrb->CommandData.StreamState ){
				case KSSTATE_STOP:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_STOP\n\r") );
					SetSubpicRateDefault( pHwDevExt );
					break;

				case KSSTATE_PAUSE:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_PAUSE\n\r") );
					break;

				case KSSTATE_RUN:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_RUN\n\r") );
					break;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_GET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_STATE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		
		case SRB_OPEN_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_OPEN_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_CLOSE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_CLOSE_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_INDICATE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_INDICATE_MASTER_CLOCK\n\r") );
			pHwDevExt->hClk = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_UNKNOWN_STREAM_COMMAND:
			DBG_PRINTF( ("DVDWDM:---SRB_UNKNOWN_STREAM_COMMAND\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_SET_STREAM_RATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_RATE\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_PROPOSE_DATA_FORMAT:
			DBG_PRINTF( ("DVDWDM:---SRB_PROPOSE_DATA_FORMAT\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_END_FLUSH:
			DBG_PRINTF( ("---SRB_END_FLUSH\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command ) );
            DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamNextCtrlNotify( pSrb );
	StreamCompleteNotify( pSrb );
}
/********/

//extern "C" VOID STREAMAPI SubpicReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowSubpicReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	DBG_PRINTF( ("DVDWDM:Low Sub-pic Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	
	StreamNextCtrlNotify( pSrb );            // move from SubpicReceiveCtrlPacket

	switch( pSrb->Command ){
		case SRB_GET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_PROPERTY\n\r") );

			GetSubpicProperty( pSrb );
			
			if( pSrb->Status == STATUS_PENDING )
				return;
			break;
		
		case SRB_SET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_PROPERTY\n\r") );
			
			SetSubpicProperty( pSrb );
			
			if( pSrb->Status == STATUS_PENDING )
				return;
			break;

		case SRB_BEGIN_FLUSH:
			DBG_PRINTF( ("---SRB_BEGIN_FLUSH\n\r") );

//			if( pHwDevExt->dvdstrm.GetState() != Stop )
			{
				// flush Sub-pic data.
				DWORD   tmpSpProp;
				tmpSpProp = 0xffff;
				if( !pHwDevExt->dvdstrm.SetSubpicProperty( SubpicProperty_FlushBuff, &tmpSpProp ) ){
					DBG_PRINTF( ("DVDWDM:   Subpic Flush Error\n\r") );
					DBG_BREAK();
					CallAtStreamCompleteNotify( pSrb,STATUS_IO_DEVICE_ERROR );
					return;
				}
			}

			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command ) );
            DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	CallAtStreamCompleteNotify( pSrb, pSrb->Status );
}

//--- 98.06.01 S.Watanabe
///*********/
//extern "C" VOID STREAMAPI NtscReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//    pSrb->Status = STATUS_PENDING;
////    DBG_BREAK();
//    StreamClassCallAtNewPriority(
//            NULL,
//            pSrb->HwDeviceExtension,
//            Low,
//            (PHW_PRIORITY_ROUTINE)LowNtscReceiveDataPacket,
//            pSrb
//    );
//}
///*********/
//
////extern "C" VOID STREAMAPI NtscReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//VOID    LowNtscReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
//    
//    DBG_PRINTF( ("DVDWDM:NTSC Receive Data Packet-----\n\r") );
//    
//    switch( pSrb->Command ){
//        case SRB_WRITE_DATA:
//            DBG_PRINTF( ("DVDWDM:---SRB_WRITE_DATA\n\r") );
//            pSrb->Status = STATUS_NOT_IMPLEMENTED;
//            break;
//
//        default:
//            DBG_PRINTF( ("DVDWDM:---deafult\n\r") );
//            pSrb->Status = STATUS_NOT_IMPLEMENTED;
//            break;
//    }
//    StreamClassStreamNotification( ReadyForNextStreamDataRequest,
//                                    pSrb->StreamObject );
//    StreamClassStreamNotification( StreamRequestComplete,
//                                    pSrb->StreamObject, pSrb );
//
//}
//
//
///************/
//extern "C" VOID STREAMAPI NtscReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//    pSrb->Status = STATUS_PENDING;
////    DBG_BREAK();
//    StreamClassCallAtNewPriority(
//            NULL,
//            pSrb->HwDeviceExtension,
//            Low,
//            (PHW_PRIORITY_ROUTINE)LowNtscReceiveCtrlPacket,
//            pSrb
//    );
//}
///***********/
//
////extern "C" VOID STREAMAPI NtscReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//VOID LowNtscReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
//    
//    DBG_PRINTF( ("DVDWDM:NTSC Receive Control Packet-----\n\r") );
//    
//    switch( pSrb->Command ){
//        case SRB_SET_STREAM_STATE:
//            DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_STATE\n\r") );
//            switch( pSrb->CommandData.StreamState ){
//                case KSSTATE_STOP:
//                    DBG_PRINTF( ("DVDWDM:       KSSTATE_STOP\n\r") );
//                    break;
//
//                case KSSTATE_PAUSE:
//                    DBG_PRINTF( ("DVDWDM:       KSSTATE_PAUSE\n\r") );
//                    break;
//
//                case KSSTATE_RUN:
//                    DBG_PRINTF( ("DVDWDM:       KSSTATE_RUN\n\r") );
//                    break;
//            }
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//        
//        case SRB_GET_STREAM_STATE:
//            DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_STATE\n\r") );
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//        
//        case SRB_GET_STREAM_PROPERTY:
//            DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_PROPERTY\n\r") );
//            
//            GetNtscProperty( pSrb );
//            
////            pSrb->Status = STATUS_SUCCESS;
//            if( pSrb->Status != STATUS_PENDING ){
//                StreamClassStreamNotification( ReadyForNextStreamControlRequest,
//                                            pSrb->StreamObject );
//                StreamClassStreamNotification( StreamRequestComplete,
//                                            pSrb->StreamObject,
//                                            pSrb );
//            }
//            return;
//            break;
//        
//        case SRB_SET_STREAM_PROPERTY:
//            DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_PROPERTY\n\r") );
//            
//            SetNtscProperty( pSrb );
//            
//            break;
//        
//        case SRB_OPEN_MASTER_CLOCK:
//            DBG_PRINTF( ("DVDWDM:---SRB_OPEN_MASTER_CLOCK\n\r") );
//
//            pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
//
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//        
//        case SRB_CLOSE_MASTER_CLOCK:
//            DBG_PRINTF( ("DVDWDM:---SRB_CLOSE_MASTER_CLOCK\n\r") );
//
//            pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
//
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//        
//        case SRB_INDICATE_MASTER_CLOCK:
//            DBG_PRINTF( ("DVDWDM:---SRB_INDICATE_MASTER_CLOCK\n\r") );
//
//            pHwDevExt->hClk = pSrb->CommandData.MasterClockHandle;
//
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//        
//        case SRB_UNKNOWN_STREAM_COMMAND:
//            DBG_PRINTF( ("DVDWDM:---SRB_UNKNOWN_STREAM_COMMAND\n\r") );
//            DBG_BREAK();
//            pSrb->Status = STATUS_NOT_IMPLEMENTED;
//            break;
//        
//        case SRB_SET_STREAM_RATE:
//            DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_RATE\n\r") );
//            DBG_BREAK();
//            pSrb->Status = STATUS_NOT_IMPLEMENTED;
//            break;
//        
//        case SRB_PROPOSE_DATA_FORMAT:
//            DBG_PRINTF( ("DVDWDM:---SRB_PROPOSE_DATA_FORMAT\n\r") );
//            DBG_BREAK();
//            pSrb->Status = STATUS_NOT_IMPLEMENTED;
//            break;
//        
//        default:
//            DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command ) );
//            DBG_BREAK();
//            pSrb->Status = STATUS_NOT_IMPLEMENTED;
//            break;
//    }
//    StreamClassStreamNotification( ReadyForNextStreamControlRequest,
//                                    pSrb->StreamObject );
//    StreamClassStreamNotification( StreamRequestComplete,
//                                    pSrb->StreamObject, pSrb );
//
//}
//--- End.


extern "C" VOID STREAMAPI VpeReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{

	DBG_PRINTF( ("DVDWDM:Low VPE Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );
	
	switch( pSrb->Command ){
		case SRB_READ_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_READ_DATA\n\r") );
			pSrb->ActualBytesTransferred = 0;
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_WRITE_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_WRITE_DATA\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command) );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamNextDataNotify( pSrb );
	StreamCompleteNotify( pSrb );
}

/*********/
extern "C" VOID STREAMAPI VpeReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:VPE Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	pSrb->Status = STATUS_PENDING;
	switch( pSrb->Command ){

		case SRB_GET_STREAM_PROPERTY:
		case SRB_SET_STREAM_PROPERTY:
//            StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowVpeReceiveCtrlPacket,pSrb);
            StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowVpeReceiveCtrlPacket,pSrb);
			// StreamNextCtrlNotify( pSrb );        // move to LowVpeReceiveCtrlPacket
			return;

		case SRB_SET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_STATE\n\r") );
			switch( pSrb->CommandData.StreamState ){
				case KSSTATE_STOP:
					DBG_PRINTF( ("DVDWDM:   VPE KSSTATE_STOP\n\r") );
					break;

				case KSSTATE_PAUSE:
					DBG_PRINTF( ("DVDWDM:   VPE KSSTATE_PAUSE\n\r") );
					break;

				case KSSTATE_RUN:
					DBG_PRINTF( ("DVDWDM:   VPE KSSTATE_RUN\n\r") );
					break;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_GET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_STATE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_OPEN_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_OPEN_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_CLOSE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_CLOSE_MASTER_CLOCK\n\r") );
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_INDICATE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_INDICATE_MASTER_CLOCK\n\r") );
			pHwDevExt->hClk = pSrb->CommandData.MasterClockHandle;
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_UNKNOWN_STREAM_COMMAND:
			DBG_PRINTF( ("DVDWDM:---SRB_UNKNOWN_STREAM_COMMAND\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_SET_STREAM_RATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_RATE\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_PROPOSE_DATA_FORMAT:
			DBG_PRINTF( ("DVDWDM:---SRB_PROPOSE_DATA_FORMAT\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command) );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamNextCtrlNotify( pSrb );
	StreamCompleteNotify( pSrb );
}
/*********/

//extern "C" VOID STREAMAPI VpeReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowVpeReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	DBG_PRINTF( ("DVDWDM:Low VPE Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	
	StreamNextCtrlNotify( pSrb );        // move from VpeReceiveCtrlPacket

	switch( pSrb->Command ){
		case SRB_GET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_PROPERTY\n\r") );

//--- 98.06.16 S.Watanabe
//			if( ToshibaNotePC( pSrb )!=TRUE ){
			if( !pHwDevExt->bToshibaNotePC ) {
//--- End.
				GetVpeProperty( pSrb );
			}else{
				GetVpeProperty2( pSrb );
			}

			if( pSrb->Status == STATUS_PENDING )
				return;
			break;
		
		case SRB_SET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_PROPERTY\n\r") );

//--- 98.06.16 S.Watanabe
//			if( ToshibaNotePC( pSrb )!=TRUE ){
			if( !pHwDevExt->bToshibaNotePC ) {
//--- End.
				SetVpeProperty( pSrb );
			}else{
				SetVpeProperty2( pSrb );
			}

			break;
		
		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command) );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status );

}

/************/
extern "C" VOID STREAMAPI CcReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->Status = STATUS_PENDING;
//    DBG_BREAK();
//    StreamClassCallAtNewPriority( NULL, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowCcReceiveDataPacket, pSrb );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowCcReceiveDataPacket, pSrb );

	// StreamNextDataNotify( pSrb );        // move to LowCcReceiveDataPacket
}
/**************/

//extern "C" VOID STREAMAPI CcReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowCcReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
#ifdef DBG
	WORD	wOrderNumber = 0;
	KSSTREAM_HEADER * pHeader;
	DBG_PRINTF( ("DVDWDM:LowCcReceiveDataPacket----- NumberofBuffers=%x\n\r",pSrb->NumberOfBuffers) );
	for( ULONG ulNumber = 0; ulNumber < pSrb->NumberOfBuffers; ulNumber++ )
	{
		pHeader = ((PKSSTREAM_HEADER)pSrb->CommandData.DataBufferArray) + ulNumber;
		wOrderNumber = (WORD)(pHeader->TypeSpecificFlags >> 16);		//get packet number
		DBG_PRINTF( ("DVDWDM:   wOrderNumber=%x\n\r",wOrderNumber) );
	}
#endif
	
	DBG_PRINTF( ("DVDWDM:Low CC Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );
	
	StreamNextDataNotify( pSrb );        // move from CcReceiveDataPacket

	switch( pSrb->Command ){
		case SRB_READ_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_READ_DATA\n\r") );
//            if( pHwDevExt->Rate < 10000 ){
//                pSrb->Status = STATUS_SUCCESS;
//
//            }else{
                pHwDevExt->ccque.put( pSrb );

                pSrb->Status = STATUS_PENDING;
    //            pSrb->TimeoutOriginal = 0;
                pSrb->TimeoutCounter = 0;
               return;
//            }
			break;

		case SRB_WRITE_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_WRITE_DATA\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status );

}

/***********/
extern "C" VOID STREAMAPI CcReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	DBG_PRINTF( ("DVDWDM:CC Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );

	pSrb->Status = STATUS_PENDING;
	switch( pSrb->Command ){
		case SRB_GET_STREAM_PROPERTY:
		case SRB_SET_STREAM_PROPERTY:
//                StreamClassCallAtNewPriority(NULL,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowCcReceiveCtrlPacket,pSrb);
                StreamClassCallAtNewPriority(pSrb->StreamObject,pSrb->HwDeviceExtension,Low,(PHW_PRIORITY_ROUTINE)LowCcReceiveCtrlPacket,pSrb);
				// StreamNextCtrlNotify( pSrb );        // move to LowCcReceiveCtrlPacket
				return;

		case SRB_SET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_STATE\n\r") );
			switch( pSrb->CommandData.StreamState ){
				case KSSTATE_STOP:
					DBG_PRINTF( ("DVDWDM:       CC KSSTATE_STOP\n\r") );
					break;

				case KSSTATE_PAUSE:
					DBG_PRINTF( ("DVDWDM:       CC KSSTATE_PAUSE\n\r") );
					break;

				case KSSTATE_RUN:
					DBG_PRINTF( ("DVDWDM:       CC KSSTATE_RUN\n\r") );
					break;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_GET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_STATE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		
		case SRB_OPEN_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_OPEN_MASTER_CLOCK\n\r") );
			
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_CLOSE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_CLOSE_MASTER_CLOCK\n\r") );
			
			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;
			
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_INDICATE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_INDICATE_MASTER_CLOCK\n\r") );

			pHwDevExt->hClk = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case SRB_UNKNOWN_STREAM_COMMAND:
			DBG_PRINTF( ("DVDWDM:---SRB_UNKNOWN_STREAM_COMMAND\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_SET_STREAM_RATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_RATE\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case SRB_PROPOSE_DATA_FORMAT:
			DBG_PRINTF( ("DVDWDM:---SRB_PROPOSE_DATA_FORMAT\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		default:
			DBG_PRINTF( ("DVDWDM:---deafult%d(0x%x)\n\r", pSrb->Command, pSrb->Command ) );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	StreamNextCtrlNotify( pSrb );
	StreamCompleteNotify( pSrb );
}
/**********/

//extern "C" VOID STREAMAPI CcReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID    LowCcReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	DBG_PRINTF( ("DVDWDM:Low CC Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );
	
	StreamNextCtrlNotify( pSrb );        // move from CcReceiveCtrlPacket
	
	switch( pSrb->Command ){
		case SRB_GET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_PROPERTY\n\r") );
			
			GetCCProperty( pSrb );

			break;
		
		case SRB_SET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_PROPERTY\n\r") );
			
			SetCCProperty( pSrb );

			break;
		
		default:
			DBG_PRINTF( ("DVDWDM:---deafult%d(0x%x)\n\r", pSrb->Command, pSrb->Command ) );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status );

}

//--- 98.05.21 S.Watanabe
/***********/
extern "C" VOID STREAMAPI SSReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->Status = STATUS_PENDING;
//    DBG_BREAK();
//    StreamClassCallAtNewPriority( NULL, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowSSReceiveDataPacket, pSrb );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowSSReceiveDataPacket, pSrb );

	//  StreamNextDataNotify( pSrb );       // move to LowSSReceiveDataPacket
}
/***********/

//extern "C" VOID STREAMAPI SSReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID LowSSReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
#ifdef DBG
	WORD	wOrderNumber = 0;
	KSSTREAM_HEADER * pHeader;
	DBG_PRINTF( ("DVDWDM:LowSSReceiveDataPacket----- NumberofBuffers=%x\n\r",pSrb->NumberOfBuffers) );
	for( ULONG ulNumber = 0; ulNumber < pSrb->NumberOfBuffers; ulNumber++ )
	{
		pHeader = ((PKSSTREAM_HEADER)pSrb->CommandData.DataBufferArray) + ulNumber;
		wOrderNumber = (WORD)(pHeader->TypeSpecificFlags >> 16);		//get packet number
		DBG_PRINTF( ("DVDWDM:   wOrderNumber=%x\n\r",wOrderNumber) );
	}
#endif
    OsdDataStruc    TestOSD;
    
	DBG_PRINTF( ("DVDWDM:Low SS Receive Data Packet----- pSrb=0x%x\n\r",pSrb) );

	StreamNextDataNotify( pSrb );       // move from SSReceiveDataPacket
	
	switch( pSrb->Command ){
		case SRB_WRITE_DATA:
			DBG_PRINTF( ("DVDWDM:---SRB_WRITE_DATA\n\r") );

//--- 98.05.21 S.Watanabe
			PKSSTREAM_HEADER pStruc;
			CMD *pcmd;

			pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[0];
			pcmd = (CMD *)pStruc->Data;

		// BUGBUG \̂̃TCY`FbNs

			pSrb->Status = STATUS_SUCCESS;

			switch ( pcmd->dwCmd ) {
				case CAP_AUDIO_DIGITAL_OUT:
					pcmd->dwCap = 1;                // 1: support
					break;                          // 0: not support

				case CAP_VIDEO_DIGITAL_PALETTE:
					pcmd->dwCap = 1;
					break;

				case CAP_VIDEO_TVOUT:
					DWORD   PropType;
					PropType = 0;
					if( !pHwDevExt->dvdstrm.GetCapability( VideoProperty, &PropType ) ){
						DBG_PRINTF( ("DVDWDM:   GetCapability Error\n\r") );
						DBG_BREAK();
					}
					if( PropType & VideoProperty_OutputSource_BIT ){
						pcmd->dwCap = 1;
					}else{
						pcmd->dwCap = 0;
					}
					break;

//--- 99.01.14 S.Watanabe
				case CAP_VIDEO_DISPMODE:
					pcmd->dwCap = 1;
					break;
//--- End.

				case SET_AUDIO_DIGITAL_OUT:
					{
					DWORD dp;

					if( pcmd->dwAudioOut == 2 )
						dp = AudioDigitalOut_On;
					else if( pcmd->dwAudioOut == 1 )
						dp = AudioDigitalOut_On;
					else
						dp = AudioDigitalOut_Off;
					pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_DigitalOut, &dp );
                    pHwDevExt->m_AudioDigitalOut = dp;

					if( pcmd->dwAudioOut == 2 ) {
						dp = AudioOut_Decoded;
						pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_AudioOut, &dp );
					}
					else if( pcmd->dwAudioOut == 1 ) {
						dp = AudioOut_Encoded;
						pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_AudioOut, &dp );
					}
                    pHwDevExt->m_AudioEncode = dp;

					}
					break;

				case SET_VIDEO_DIGITAL_PALETTE:
					{
					Digital_Palette dp;

					dp.Select = Video_Palette_Y;
					dp.pPalette = pcmd->Y;
					pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_DigitalPalette, &dp );

					dp.Select = Video_Palette_Cb;
					dp.pPalette = pcmd->Cb;
					pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_DigitalPalette, &dp );

					dp.Select = Video_Palette_Cr;
					dp.pPalette = pcmd->Cr;
					pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_DigitalPalette, &dp );
					}
					break;

				case SET_VIDEO_TVOUT:
					{
					DWORD dp;
                    if( pcmd->dwTVOut == 0 ){
						dp = OutputSource_VGA;
                    }else{
						dp = OutputSource_DVD;
                    }
                    TestOSD.OsdType = OSD_TYPE_ZIVA;
                    TestOSD.pNextData = NULL;
                    TestOSD.pData = &erase[0];
                    TestOSD.dwOsdSize = sizeof( erase );
					if( VGADVDTVControl( pSrb, dp, TestOSD )==TRUE ){     // 98.07.07 H.Yagi
    					pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dp );
					}
		                        pHwDevExt->m_OutputSource = dp;
					
					}
					break;

//--- 99.01.14 S.Watanabe
				case SET_VIDEO_DISPMODE:
					{
					DWORD  fPSLB = 0;
				    DWORD   dProp;

                    if( pcmd->dwDispMode == SSIF_DISPMODE_43TV )
						pHwDevExt->m_DisplayDevice = DisplayDevice_NormalTV;
					else if( pcmd->dwDispMode == SSIF_DISPMODE_169TV )
						pHwDevExt->m_DisplayDevice = DisplayDevice_WideTV;
					else
						pHwDevExt->m_DisplayDevice = DisplayDevice_VGA;

					if( pHwDevExt->m_VideoFormatFlags & 0x20 ){     // KS_MPEG2_LetterboxAnalogOut){
						DBG_PRINTF( ("DVDWDM:   KS_MPEG2_SourceisLetterboxed\n\r") );
						if( pHwDevExt->m_DisplayDevice == DisplayDevice_NormalTV )
							fPSLB |= 0x01;
					}
					if( pHwDevExt->m_VideoFormatFlags & KS_MPEG2_DoPanScan ){
						DBG_PRINTF( ("DVDWDM:   KS_MPEG2_DoPanScan\n\r") );
						if( pHwDevExt->m_DisplayDevice != DisplayDevice_WideTV )
							fPSLB |= 0x02;
					}

					switch( fPSLB ) {
					  case 0x00:
						dProp = Display_Original;
						break;
					  case 0x01:
						dProp = Display_LetterBox;
						break;
					  case 0x02:
						dProp = Display_PanScan;
						break;
					  default:
						dProp = Display_Original;
						DBG_PRINTF( ("DVDWDM:   Invalid info(LB&PS)\n\r") );
						DBG_BREAK();
						break;
					}
					if( pHwDevExt->m_AspectRatio == Aspect_04_03 ){       // check dwFlags is avilable
						dProp = Display_Original;
					}

					if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_DisplayMode, &dProp ) ){
						DBG_PRINTF( ("DVDWDM:Set LetterBox & PanScan Error\n\r") );
						DBG_BREAK();
					}
					pHwDevExt->m_DisplayMode = dProp;

					}
					break;
//--- End.

				default:
					DBG_BREAK();
					pSrb->Status = STATUS_UNSUCCESSFUL;
					break;
			}
//--- End.
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult\n\r") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status ); 

}

/***********/
extern "C" VOID STREAMAPI SSReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->Status = STATUS_PENDING;
//    DBG_BREAK();
//    StreamClassCallAtNewPriority( NULL, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowSSReceiveCtrlPacket, pSrb );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowSSReceiveCtrlPacket, pSrb );
	// StreamNextCtrlNotify( pSrb );        // move to SSReceiveCtrlPacket
}
/***********/

//extern "C" VOID STREAMAPI SSReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
VOID LowSSReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

	DBG_PRINTF( ("DVDWDM:Low SS Receive Control Packet----- pSrb=0x%x\n\r",pSrb) );

	StreamNextCtrlNotify( pSrb );        // move from SSReceiveCtrlPacket

	switch( pSrb->Command ){
		case SRB_SET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_STATE\n\r") );
			switch( pSrb->CommandData.StreamState ){
				case KSSTATE_STOP:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_STOP\n\r") );
					break;

				case KSSTATE_PAUSE:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_PAUSE\n\r") );
					break;

				case KSSTATE_RUN:
					DBG_PRINTF( ("DVDWDM:       KSSTATE_RUN\n\r") );
					break;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_STATE:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_STATE\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_GET_STREAM_PROPERTY\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_STREAM_PROPERTY:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_PROPERTY\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_OPEN_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_OPEN_MASTER_CLOCK\n\r") );

			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_CLOSE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_CLOSE_MASTER_CLOCK\n\r") );

			pHwDevExt->hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_INDICATE_MASTER_CLOCK:
			DBG_PRINTF( ("DVDWDM:---SRB_INDICATE_MASTER_CLOCK\n\r") );

			pHwDevExt->hClk = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNKNOWN_STREAM_COMMAND:
			DBG_PRINTF( ("DVDWDM:---SRB_UNKNOWN_STREAM_COMMAND\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_STREAM_RATE:
			DBG_PRINTF( ("DVDWDM:---SRB_SET_STREAM_RATE\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_PROPOSE_DATA_FORMAT:
			DBG_PRINTF( ("DVDWDM:---SRB_PROPOSE_DATA_FORMAT\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:---deafult %d(0x%x)\n\r", pSrb->Command, pSrb->Command ) );
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
	CallAtStreamCompleteNotify( pSrb, pSrb->Status ); 

}

//--- End.

////////////////////////////////////////////////////////////////////////////
//
//  Private Functions
//
////////////////////////////////////////////////////////////////////////////
void ErrorStreamNotification( PHW_STREAM_REQUEST_BLOCK pSrb, NTSTATUS stat )
{
	pSrb->Status = stat;
	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );
	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject, pSrb );
}


BOOL GetStreamInfo( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_STREAM_INFORMATION pstrinfo =
		&(pSrb->CommandData.StreamBuffer->StreamInfo);

	// define the number of streams which mini-driver can support.
	pSrb->CommandData.StreamBuffer->StreamHeader.NumberOfStreams = STREAMNUM;

//    pSrb->CommandData.StreamBuffer->StreamHeader.NumberOfStreams = STREAMNUM-1;     // CC doesn't support for Debug.
	
	pSrb->CommandData.StreamBuffer->StreamHeader.SizeOfHwStreamInformation =
				sizeof( HW_STREAM_INFORMATION );

	// store a pointer to the topology for the device.
	pSrb->CommandData.StreamBuffer->StreamHeader.Topology =
				(KSTOPOLOGY *)&Topology;
//    pSrb->CommandData.StreamBuffer->StreamHeader.NumDevPropArrayEntries =1;
//    pSrb->CommandData.StreamBuffer->StreamHeader.DevicePropertiesArray = devicePropSet;

	// Video
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_IN;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = SIZEOF_ARRAY( Mpeg2VidInfo );
	pstrinfo->StreamFormatsArray = Mpeg2VidInfo;
    pstrinfo->Category = &g_PINNAME_DVD_VIDEOIN;
    pstrinfo->Name = &g_PINNAME_DVD_VIDEOIN;
	pstrinfo->NumStreamPropArrayEntries = SIZEOF_ARRAY( mpegVidPropSet );
	pstrinfo->StreamPropertiesArray = mpegVidPropSet;
	pstrinfo++;

	// Audio
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_IN;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = SIZEOF_ARRAY( Mpeg2AudInfo );
//--- 98.06.01 S.Watanabe
/*
Initialize the formats now.  For each format (there are currently 2),
take the array of sizeof(KSDATAFORMAT) + sizeof(WAVEFORMATEX) bytes
allocated for it and paste the KSDATAFORMAT and WAVEFORMATEX structs
into it.  Cannot just declare a struct that contains the two because
due to alignment its size would exceed the total of the components,
and apparently KS assumes that the size of the format block (in this
case WAVEFORMATEX) is the size of the format minus sizeof(KSDATAFORMAT).
*/
	RtlCopyMemory (hwfmtiLPCMAud, &LPCMksdataformat, sizeof (KSDATAFORMAT));
	RtlCopyMemory (hwfmtiLPCMAud + sizeof(KSDATAFORMAT), &LPCMwaveformatex, sizeof(WAVEFORMATEX));
	RtlCopyMemory (hwfmtiMpeg2Aud, &Mpeg2ksdataformat, sizeof (KSDATAFORMAT));
	RtlCopyMemory (hwfmtiMpeg2Aud + sizeof(KSDATAFORMAT), &Mpeg2waveformatex, sizeof(WAVEFORMATEX));
//--- End.
	pstrinfo->StreamFormatsArray = Mpeg2AudInfo;
	pstrinfo->Category = &g_PINNAME_DVD_AUDIOIN;
	pstrinfo->Name = &g_PINNAME_DVD_AUDIOIN;
	pstrinfo->NumStreamPropArrayEntries = SIZEOF_ARRAY( mpegAudioPropSet );
	pstrinfo->StreamPropertiesArray = mpegAudioPropSet;
	pstrinfo->StreamEventsArray = ClockEventSet;
	pstrinfo->NumStreamEventArrayEntries = SIZEOF_ARRAY( ClockEventSet );
	pstrinfo++;

	// Sub-picture
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_IN;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = SIZEOF_ARRAY( Mpeg2SubpicInfo );
	pstrinfo->StreamFormatsArray = Mpeg2SubpicInfo;
	pstrinfo->Category = &g_PINNAME_DVD_SUBPICIN;
	pstrinfo->Name = &g_PINNAME_DVD_SUBPICIN;
	pstrinfo->NumStreamPropArrayEntries = SIZEOF_ARRAY( SPPropSet );
	pstrinfo->StreamPropertiesArray = SPPropSet;
	pstrinfo++;

//--- 98.06.01 S.Watanabe
//    // NTSC
//    pstrinfo->NumberOfPossibleInstances = 1;
//    pstrinfo->DataFlow = KSPIN_DATAFLOW_OUT;
//    pstrinfo->DataAccessible = TRUE;
//    pstrinfo->NumberOfFormatArrayEntries = SIZEOF_ARRAY( NtscInfo );
//    pstrinfo->StreamFormatsArray = NtscInfo;
//    pstrinfo->NumStreamPropArrayEntries = SIZEOF_ARRAY( NTSCPropSet );
//    pstrinfo->StreamPropertiesArray = NTSCPropSet;
//    pstrinfo++;
//--- End.

	// Video port
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_OUT;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = SIZEOF_ARRAY( VPEInfo );
	pstrinfo->StreamFormatsArray = VPEInfo;
    pstrinfo->Category = &g_PINNAME_DVD_VPEOUT;
    pstrinfo->Name = &g_PINNAME_DVD_VPEOUT;
	pstrinfo->NumStreamPropArrayEntries = SIZEOF_ARRAY(VideoPortPropSet );
	pstrinfo->StreamPropertiesArray = VideoPortPropSet;
	pstrinfo->MediumsCount = SIZEOF_ARRAY( VPMedium );
	pstrinfo->Mediums= VPMedium;
	pstrinfo->StreamEventsArray = VPEventSet;
	pstrinfo->NumStreamEventArrayEntries = SIZEOF_ARRAY( VPEventSet );
	pstrinfo++;

	// Closed Caption
// CC doesn't support for Debug    
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_OUT;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = SIZEOF_ARRAY( CCInfo );
	pstrinfo->StreamFormatsArray = CCInfo;
	pstrinfo->Category = &g_PINNAME_DVD_CCOUT;
	pstrinfo->Name = &g_PINNAME_DVD_CCOUT;
	pstrinfo->NumStreamPropArrayEntries = SIZEOF_ARRAY( CCPropSet );
	pstrinfo->StreamPropertiesArray = CCPropSet;

//--- 98.05.21 S.Watanabe
	pstrinfo++;

	// Special Stream
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_OUT;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = SIZEOF_ARRAY( SSInfo );
	pstrinfo->StreamFormatsArray = SSInfo;
	pstrinfo->NumStreamPropArrayEntries = 0;
//--- End.

	return( TRUE );
}


BOOL OpenStream( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	DBG_PRINTF( ("DVDWDM:OpenStream HwDevExt=%08x\n\r", pHwDevExt ) );

	pHwDevExt->lCPPStrm = -1;           // reset the copy protection stream number

	switch( pSrb->StreamObject->StreamNumber ){
		case strmVideo:
			DBG_PRINTF( ("DVDWDM:Open Stream Video\n\r") );
			pSrb->StreamObject->ReceiveDataPacket = VideoReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket = VideoReceiveCtrlPacket;
			pHwDevExt->pstroVid = pSrb->StreamObject;
			pHwDevExt->Rate = VIDEO_MAX_FULL_RATE;

			// Power On ZiVA board.
			if( pHwDevExt->mpboard.PowerOn() ){
				pHwDevExt->dvdstrm.SetTransferMode( HALSTREAM_DVD_MODE );
                pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_DigitalOut, &pHwDevExt->m_AudioDigitalOut );

#ifndef		REARRANGEMENT
//				FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

				if( pHwDevExt->dvdstrm.Stop() ){
					pHwDevExt->StreamState = StreamState_Stop;
					pHwDevExt->m_PlayMode = PLAY_MODE_NORMAL;
				}else{
					return( FALSE );
				}
			}else{
				return( FALSE );
			}
			
//            ProcessVideoFormat( pSrb->CommandData.OpenFormat, pHwDevExt );
            ProcessVideoFormat( pSrb, pSrb->CommandData.OpenFormat, pHwDevExt );
			
			SetVideoRateDefault( pHwDevExt );

            if( pHwDevExt->m_PCID==PC_TECRA8000 ){
                DWORD dProp = OutputSource_DVD;
                pHwDevExt->m_OutputSource = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }
            OsdDataStruc TestOSD;
            TestOSD.OsdType = OSD_TYPE_ZIVA;
            TestOSD.pNextData = NULL;
            TestOSD.pData = &erase[0];
            TestOSD.dwOsdSize = sizeof( erase );
            OpenTVControl( pSrb, TestOSD );        // 98.06.29  H.Yagi

////  99.03.02  add by H.Yagi
            pHwDevExt->dvdstrm.CppInit();
//// ---End
            
//--- 98.06.02 S.Watanabe
			pHwDevExt->cOpenInputStream++;
//--- End.
			break;

		case strmAudio:
			DBG_PRINTF( ("DVDWDM:Open Stream Audio\n\r") );
			pSrb->StreamObject->ReceiveDataPacket = AudioReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket = AudioReceiveCtrlPacket;
			pSrb->StreamObject->HwClockObject.HwClockFunction = StreamClockRtn;
			pSrb->StreamObject->HwClockObject.ClockSupportFlags =
				CLOCK_SUPPORT_CAN_SET_ONBOARD_CLOCK | CLOCK_SUPPORT_CAN_READ_ONBOARD_CLOCK |
				CLOCK_SUPPORT_CAN_RETURN_STREAM_TIME;
			pHwDevExt->pstroAud = pSrb->StreamObject;

			ProcessAudioFormat( pSrb->CommandData.OpenFormat, pHwDevExt );

			pSrb->StreamObject->HwEventRoutine = (PHW_EVENT_ROUTINE)AudioEvent;

			SetAudioRateDefault( pHwDevExt );
			
//--- 98.06.02 S.Watanabe
			pHwDevExt->cOpenInputStream++;
//--- End.
			break;

		case strmSubpicture:
			DBG_PRINTF( ("DVDWDM:Open Stream Sub-picture\n\r") );
			pSrb->StreamObject->ReceiveDataPacket = SubpicReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket = SubpicReceiveCtrlPacket;
			pHwDevExt->pstroSP = pSrb->StreamObject;
			
			SetSubpicRateDefault( pHwDevExt );
			
			pHwDevExt->m_HlightControl.OpenControl();

//--- 98.06.02 S.Watanabe
			pHwDevExt->cOpenInputStream++;
//--- End.
			break;

//--- 98.06.01 S.Watanabe
//        case strmNTSCVideo:
//            DBG_PRINTF( ("DVDWDM:Open Stream NTSC\n\r") );
//            pSrb->StreamObject->ReceiveDataPacket = NtscReceiveDataPacket;
//            pSrb->StreamObject->ReceiveControlPacket = NtscReceiveCtrlPacket;
//            break;
//--- End.

		case strmYUVVideo:
			DBG_PRINTF( ("DVDWDM:Open Stream YUV\n\r") );
			pSrb->StreamObject->ReceiveDataPacket = VpeReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket = VpeReceiveCtrlPacket;
			pHwDevExt->pstroYUV = pSrb->StreamObject;
			pSrb->StreamObject->HwEventRoutine = (PHW_EVENT_ROUTINE)CycEvent;
//--- 98.06.16 S.Watanabe
			pHwDevExt->bToshibaNotePC = ToshibaNotePC( pSrb );
//--- End.
			break;

		case strmCCOut:
			DBG_PRINTF( ("DVDWDM:Open Stream Closed Caption\n\r") );
			pSrb->StreamObject->ReceiveDataPacket = CcReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket = CcReceiveCtrlPacket;
			pHwDevExt->pstroCC = pSrb->StreamObject;

			pHwDevExt->ccque.Init();
			pHwDevExt->userdata.Init( pHwDevExt );
			pHwDevExt->mphal.SetSinkWrapper( &(pHwDevExt->userdata) );
			DWORD dProp;
			dProp = ClosedCaption_On;
			if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_ClosedCaption, &dProp ) ){
				DBG_PRINTF( ("DVDWDM:       USCC on Error!\n\r") );
				DBG_BREAK();
				return( FALSE );
			}
			pHwDevExt->m_ClosedCaption = ClosedCaption_On;
			break;

//--- 98.05.21 S.Watanabe
		case strmSS:
			DBG_PRINTF( ("DVDWDM:Open Special Stream\n\r") );
			pSrb->StreamObject->ReceiveDataPacket = SSReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket = SSReceiveCtrlPacket;
			pHwDevExt->pstroSS = pSrb->StreamObject;
			break;
//--- End.

		default :
			DBG_PRINTF( ("DVDWDM:Open Stream default = 0x%0x\n\r", pSrb->StreamObject->StreamNumber ) );
			DBG_BREAK();
			break;
	}
	
	pSrb->StreamObject->Dma = TRUE;
	pSrb->StreamObject->Pio = TRUE;     // Need Pio = TRUE for access on CPU
			
	return( TRUE );
}


BOOL CloseStream( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	
	switch( pSrb->StreamObject->StreamNumber ){
		case strmVideo:
			DBG_PRINTF( ("DVDWDM:Close Stream Video\n\r") );
			pHwDevExt->pstroVid = NULL;

//--- 98.06.02 S.Watanabe
			pHwDevExt->cOpenInputStream--;
//--- End.

			if( pHwDevExt->dvdstrm.GetState() != Stop )
			{
#ifndef		REARRANGEMENT
//				FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

				pHwDevExt->dvdstrm.Stop();
			}
            CloseTVControl( pSrb );

			pHwDevExt->StreamState = StreamState_Off;
			if( !pHwDevExt->mpboard.PowerOff() ){
				DBG_PRINTF( ("DVDWDM:   mpboard.PowerOff Error\n\r") );
				DBG_BREAK();
				return( FALSE );
			}
			break;

		case strmAudio:
			DBG_PRINTF( ("DVDWDM:Close Stream Audio\n\r") );
			pHwDevExt->pstroAud = NULL;
//--- 98.06.02 S.Watanabe
			pHwDevExt->cOpenInputStream--;
//--- End.
			break;

		case strmSubpicture:
			DBG_PRINTF( ("DVDWDM:Close Stream Sub-picture\n\r") );
			pHwDevExt->pstroSP = NULL;
//--- 98.06.02 S.Watanabe
			pHwDevExt->cOpenInputStream--;
//--- End.
			pHwDevExt->m_HlightControl.CloseControl();
			break;

//--- 98.06.01 S.Watanabe
//        case strmNTSCVideo:
//            DBG_PRINTF( ("DVDWDM:Close Stream NTSC\n\r") );
//            break;
//--- End.

		case strmYUVVideo:
			DBG_PRINTF( ("DVDWDM:Close Stream YUV\n\r") );
			pHwDevExt->pstroYUV = NULL;
			break;

		case strmCCOut:
			DBG_PRINTF( ("DVDWDM:Close Stream Closed Caption\n\r") );
			pHwDevExt->pstroCC = NULL;

			pHwDevExt->mphal.UnsetSinkWrapper( &(pHwDevExt->userdata) );

			DWORD   dProp;
			dProp = ClosedCaption_Off;
			if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_ClosedCaption, &dProp ) ){
				DBG_PRINTF( ("DVDWDM:       USCC off Error!\n\r") );
				DBG_BREAK();
				return( FALSE );
			}
			pHwDevExt->m_ClosedCaption = ClosedCaption_Off;
			break;

//--- 98.05.21 S.Watanabe
		case strmSS:
			DBG_PRINTF( ("DVDWDM:Close Special Stream\n\r") );
			pHwDevExt->pstroSS = NULL;
			break;
//--- End.

		default :
			DBG_PRINTF( ("DVDWDM:Close Stream default = 0x%0x\n\r", pSrb->StreamObject->StreamNumber ) );
			DBG_BREAK();
			break;
	}
	
	return( TRUE );
}

NTSTATUS DataIntersection( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	NTSTATUS                        Status = STATUS_SUCCESS;
	PSTREAM_DATA_INTERSECT_INFO     IntersectInfo;
	PKSDATARANGE                    DataRange;
	PKSDATAFORMAT                   pFormat = NULL;
	ULONG                           formatSize;

	IntersectInfo = pSrb->CommandData.IntersectInfo;
//--- 98.06.01 S.Watanabe
	DataRange = IntersectInfo->DataRange;
//--- End.

	switch( IntersectInfo->StreamNumber ){
		case    strmVideo:
			DBG_PRINTF( ("DVDWDM:       Video\n\r") );
			pFormat = &hwfmtiMpeg2Vid;
			formatSize = sizeof( hwfmtiMpeg2Vid );
			break;

		case    strmAudio:
//--- 98.06.01 S.Watanabe
//            pFormat = &hwfmtiMpeg2Aud[0];
//            formatSize = sizeof( hwfmtiMpeg2Aud );
			DBG_PRINTF( ("TOSDVD:    Audio\r\n") );
			if (IsEqualGUID2(&(DataRange->SubFormat), &(Mpeg2ksdataformat.SubFormat))) {
				DBG_PRINTF( ("TOSDVD:    AC3 Audio format query\r\n") );
				pFormat = (PKSDATAFORMAT) hwfmtiMpeg2Aud;
				formatSize = sizeof (KSDATAFORMAT) + sizeof (WAVEFORMATEX);
			}
			else if (IsEqualGUID2(&(DataRange->SubFormat), &(LPCMksdataformat.SubFormat))) {
				DBG_PRINTF( ("TOSDVD:    LPCM Audio format query\r\n") );
				pFormat = (PKSDATAFORMAT) hwfmtiLPCMAud;
				formatSize = sizeof (KSDATAFORMAT) + sizeof (WAVEFORMATEX);
			}
			else {
				DBG_PRINTF( ("TOSDVD:    unknown Audio format query\r\n") );
				pFormat = NULL;
				formatSize = 0;
			}
//--- End.
			break;

//--- 98.06.01 S.Watanabe
//        case    strmNTSCVideo:
//            pFormat = &hwfmtiNtscOut;
//            formatSize = sizeof( hwfmtiNtscOut );
//            break;
//--- End.

		case    strmSubpicture:
			DBG_PRINTF( ("DVDWDM:       SubPic\n\r") );
			pFormat = &hwfmtiMpeg2Subpic;
			formatSize = sizeof( hwfmtiMpeg2Subpic );
			break;

		case    strmYUVVideo:
			DBG_PRINTF( ("DVDWDM:       VPE\n\r") );
			pFormat = &hwfmtiVPEOut;
			formatSize = sizeof( hwfmtiVPEOut );
			break;

		case    strmCCOut:
			DBG_PRINTF( ("DVDWDM:       CC\n\r") );
			pFormat = &hwfmtiCCOut;
			formatSize = sizeof( hwfmtiCCOut );
			break;

//--- 98.05.21 S.Watanabe
		case strmSS:
			DBG_PRINTF( ("DVDWDM:       SS\n\r") );
			pFormat = &hwfmtiSS;
			formatSize = sizeof( hwfmtiSS );
			break;
//--- End.

		default :
			DBG_PRINTF( ("DVDWDM:STATUS_NOT_IMPLEMENTED\n\r") );
			Status = STATUS_NOT_IMPLEMENTED;
			return( Status );

	}


	if( pFormat ){
		//
		// do a minimal compare of the dataranges to at least verify
		// that the guids are the same.
		// BUGBUG - this is worefully incomplete.
		//
		DataRange = IntersectInfo->DataRange;
		if( !(IsEqualGUID2( &DataRange->MajorFormat, &pFormat->MajorFormat) &&
			IsEqualGUID2( &DataRange->Specifier, &pFormat->Specifier) ) ){
				DBG_PRINTF( ("DVDWDM:  No Match!\n\r") );
				DBG_BREAK();
				Status = STATUS_NO_MATCH;
		}else{
			//
			// check to see if the size of the passed in buffer is a ULONG.
			// if so, this indicates that we are to return only the size
			// needed, and not return the actual data.
			//
			if( IntersectInfo->SizeOfDataFormatBuffer!=sizeof(ULONG)) {
				//
				// we are to copy the data, not just return size
				//
				if( IntersectInfo->SizeOfDataFormatBuffer<formatSize ){
					DBG_PRINTF( ("DVDWDM: Too Small!!\n\r") );
//                    DBG_BREAK();
					Status = STATUS_BUFFER_TOO_SMALL;
				}else{
					RtlCopyMemory( IntersectInfo->DataFormatBuffer, pFormat, formatSize );
					pSrb->ActualBytesTransferred = formatSize;
					DBG_PRINTF( ("DVDWDM:       STATUS_SUCCESS(data copy)\n\r") );
					Status = STATUS_SUCCESS;
				}
			}else{
				//
				// caller wants just the size of the buffer.
				//
				*(PULONG)IntersectInfo->DataFormatBuffer = formatSize;
				pSrb->ActualBytesTransferred = sizeof(ULONG);
				DBG_PRINTF( ("DVDWDM:       STATUS_SUCCESS(retuen size)\n\r") );
			}
		}
	}else{
		DBG_PRINTF( ("DVDWDM:       STATUS_NOT_SUPPORTED\n\r") );
		DBG_BREAK();
		Status = STATUS_NOT_SUPPORTED;
	}
//    pSrb->Status = Status;
	
	return( Status );
}


NTSTATUS    STREAMAPI   AudioEvent( PHW_EVENT_DESCRIPTOR pEvent )
{
	PUCHAR  pCopy = (PUCHAR)( pEvent->EventEntry+1 );
	PMYTIME pmyt = (PMYTIME)pCopy;
	PUCHAR  pSrc = (PUCHAR)pEvent->EventData;
	ULONG   cCopy;

	DBG_PRINTF( ("DVDWDM:AudioEvent()\n\r") );

	if( pEvent->Enable ){
		switch( pEvent->EventEntry->EventItem->EventId ){
			case KSEVENT_CLOCK_POSITION_MARK:
				cCopy = sizeof( KSEVENT_TIME_MARK );
				break;

			case KSEVENT_CLOCK_INTERVAL_MARK:
				cCopy = sizeof( KSEVENT_TIME_INTERVAL );
				break;

			default:
				DBG_BREAK();
				return( STATUS_NOT_IMPLEMENTED );
		}
		if( pEvent->EventEntry->EventItem->DataInput != cCopy ){
			DBG_BREAK();
			return( STATUS_INVALID_BUFFER_SIZE );
		}

		// copy the input buffer
		for( ; cCopy>0; cCopy-- ){
			*pCopy++ = *pSrc++;
		}
		if( pEvent->EventEntry->EventItem->EventId == KSEVENT_CLOCK_INTERVAL_MARK ){
			pmyt->LastTime = 0;
		}
	}
	return( STATUS_SUCCESS );
}

VOID STREAMAPI  StreamClockRtn( IN PHW_TIME_CONTEXT TimeContext )
{
	//
	// Return Value at the case of 
	//      STOP state          : 0
	//      PAUSE state         : Counting time at pausing
	//      RUN(Normal) state   : Counting time as normal speed
	//      RUN(Slow) state     : Counting time as slow speed
	//      RUN(FF/FR) state    : Counting time as FF/FR spped
	//
	DBG_PRINTF( ("DVDWDM:Stream Clock Rtn\n\r") );

	PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)TimeContext->HwDeviceExtension;
	
	if( TimeContext->Function != TIME_GET_STREAM_TIME ){
		//
		// should handle set onboard, and read onboard clock here.
		//
		DBG_BREAK();
		return;
	}

	TimeContext->Time = pHwDevExt->ticktime.GetStreamTime();
	TimeContext->SystemTime = pHwDevExt->ticktime.GetSystemTime();
//--- 98.06.01 S.Watanabe
	DBG_PRINTF(( "DVDWDM:Clk      : 0x%x( 0x%s(100ns) )\r\n", ConvertStrmtoPTS(TimeContext->Time), DebugLLConvtoStr( TimeContext->Time, 16 ) ));
//--- End.

	return;
}

NTSTATUS    STREAMAPI   CycEvent( PHW_EVENT_DESCRIPTOR pEvent )
{
	PSTREAMEX pstrm = (PSTREAMEX)( pEvent->StreamObject->HwStreamExtension );
	DBG_PRINTF( ("DVDWDM:CycEvent\n\r") );

	if( pEvent->Enable ){
		pstrm->EventCount++;
	}else{
		pstrm->EventCount--;
	}

	return( STATUS_SUCCESS );
}


void GetVpeProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION) pSrb->HwDeviceExtension;
	DWORD   dwInputBufferSize;
	DWORD   dwOutputBufferSize;
	DWORD   dwNumConnectInfo=2;
	DWORD   dwNumVideoFormat=1;
	DWORD   dwFieldWidth=720;
	DWORD   dwFieldHeight= 240;
    DWORD   dwPerField = 17000;
    DWORD   dwFrameRate = 30;

    switch( pHwDevExt->m_TVSystem ){
        case TV_NTSC:
            dwFieldWidth = 720;
            dwFieldHeight = 240;
            dwPerField = 17000;
            dwFrameRate = 30;
            break;
        case TV_PALB:
        case TV_PALD:
        case TV_PALG:
        case TV_PALH:
        case TV_PALI:
        case TV_PALM:
            dwFieldWidth = 720;
            dwFieldHeight = 288;            // 576/2 = 288 OK?
            dwPerField = 20000;
            dwFrameRate = 25;
            break;
    }

	// the pointers to which the input buffer will be cast to
	LPDDVIDEOPORTCONNECT   pConnectInfo;
	LPDDPIXELFORMAT     pVideoFormat;
	PKSVPMAXPIXELRATE   pMaxPixelRate;
	PKS_AMVPDATAINFO    pVpdata;

	// LPAMSCALINGINFO  pScaleFactor;

	//
	// NOTE:  ABSOLUTELY DO NOT use pmulitem, until it is determined that
	// the stream property descriptor describes a multiple item, or you will
	// pagefault.
	//
	PKSMULTIPLE_ITEM    pmulitem =
			&(((PKSMULTIPLE_DATA_PROP)pSrb->CommandData.PropertyInfo->Property)->MultipleItem);

	//
	// NOTE: same goes for this one as above.
	//

//    PKS_AMVPSIZE pdim =
//            &(((PKSVPSIZE_PROP)pSrb->CommandData.PropertyInfo->Property)->Size);

	if( pSrb->CommandData.PropertyInfo->PropertySetID ){
		DBG_BREAK();
		pSrb->Status = STATUS_NO_MATCH;
		return;
	}

	dwInputBufferSize = pSrb->CommandData.PropertyInfo->PropertyInputSize;
	dwOutputBufferSize = pSrb->CommandData.PropertyInfo->PropertyOutputSize;
	
	pSrb->Status = STATUS_SUCCESS;

	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KSPROPERTY_VPCONFIG_NUMCONNECTINFO:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_NUMCONNECTINFO\n\r") );
			// check that the size of the output buffer is correct
			ASSERT( dwInputBufferSize >= sizeof(DWORD) );

			pSrb->ActualBytesTransferred = sizeof(DWORD);

			*(PULONG) pSrb->CommandData.PropertyInfo->PropertyInfo
								= dwNumConnectInfo;
			break;

		case KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT\n\r") );
			// check that the size of the output buffer is correct
			ASSERT( dwInputBufferSize >= sizeof(DWORD) );

			pSrb->ActualBytesTransferred = sizeof(DWORD);

			*(PULONG) pSrb->CommandData.PropertyInfo->PropertyInfo
								= dwNumVideoFormat;
			break;

		case KSPROPERTY_VPCONFIG_GETCONNECTINFO:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_GETCONNECTINFO\n\r") );
			if( pmulitem->Count>dwNumConnectInfo ||
				pmulitem->Size!=sizeof(DDVIDEOPORTCONNECT) ||
				dwOutputBufferSize < (pmulitem->Count * sizeof(DDVIDEOPORTCONNECT)))
			{
				DBG_PRINTF( ("DVDWDM:       pmulitem->Count %d\n\r", pmulitem->Count) );
				DBG_PRINTF( ("DVDWDM:       pmulitem->Size %d\n\r", pmulitem->Size) );
				DBG_PRINTF( ("DVDWDM:       dwOutputBufferSize %d\n\r", dwOutputBufferSize) );
				DBG_PRINTF( ("DVDWDM:       sizeof(DDVIDEOPORTCONNECT) %d\n\r", sizeof(DDVIDEOPORTCONNECT)) );
				DBG_BREAK();

				//
				// buffer size is invalid, so error the call
				//

				pSrb->Status = STATUS_INVALID_BUFFER_SIZE;
				return;
			}

			//
			// specify the number of bytes written
			//
			pSrb->ActualBytesTransferred = pmulitem->Count*sizeof(DDVIDEOPORTCONNECT);
			pConnectInfo = (LPDDVIDEOPORTCONNECT)(pSrb->CommandData.PropertyInfo->PropertyInfo);

			// S3
			pConnectInfo->dwSize = sizeof(DDVIDEOPORTCONNECT);
			pConnectInfo->dwPortWidth = 8;
			pConnectInfo->guidTypeID = g_S3Guid;
			pConnectInfo->dwFlags = 0x3F;
			pConnectInfo->dwReserved1 = 0;
			
			pConnectInfo++;

			// ATI
			pConnectInfo->dwSize = sizeof(DDVIDEOPORTCONNECT);
			pConnectInfo->dwPortWidth = 8;
			pConnectInfo->guidTypeID = g_ATIGuid;
			pConnectInfo->dwFlags = 0x4;
			pConnectInfo->dwReserved1 = 0;

			break;

		case KSPROPERTY_VPCONFIG_VPDATAINFO:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_VPDATAINFO\n\r") );
			
			//
			// specify the number of bytes written
			//
			pSrb->ActualBytesTransferred = sizeof(KS_AMVPDATAINFO);

			//
			// cast the buffer to the proper type
			//
			pVpdata = (PKS_AMVPDATAINFO)pSrb->CommandData.PropertyInfo->PropertyInfo;

			*pVpdata = pHwDevExt->VPFmt;
			pVpdata->dwSize = sizeof(KS_AMVPDATAINFO);

            pVpdata->dwMicrosecondsPerField = dwPerField;

			ASSERT( pVpdata->dwNumLinesInVREF==0 );

			pVpdata->dwNumLinesInVREF = 0;

			if( pHwDevExt->m_DigitalOut==DigitalOut_LPB08 ){
				DBG_PRINTF( ("DVDWDM:       Set for S3 LPB\r\n" ) );
				// S3
				pVpdata->bEnableDoubleClock         = FALSE;
				pVpdata->bEnableVACT                = FALSE;
				pVpdata->bDataIsInterlaced          = TRUE;
				pVpdata->lHalfLinesOdd              = 0;
				pVpdata->lHalfLinesEven             = 0;
				pVpdata->bFieldPolarityInverted     = FALSE;

                pVpdata->amvpDimInfo.dwFieldWidth   = dwFieldWidth + 158/2;
                pVpdata->amvpDimInfo.dwFieldHeight  = dwFieldHeight + 1;      // check it later!!

				pVpdata->amvpDimInfo.rcValidRegion.left     = 158/2;
				pVpdata->amvpDimInfo.rcValidRegion.top      = 1;    // Check it Later!!
                pVpdata->amvpDimInfo.rcValidRegion.right    = dwFieldWidth + 158/2;
                pVpdata->amvpDimInfo.rcValidRegion.bottom   = dwFieldHeight + 1;  // Check it later!!

				pVpdata->amvpDimInfo.dwVBIWidth     = pVpdata->amvpDimInfo.dwFieldWidth;
				pVpdata->amvpDimInfo.dwVBIHeight    = pVpdata->amvpDimInfo.rcValidRegion.top;


			}else if( pHwDevExt->m_DigitalOut == DigitalOut_AMCbt ) {
				DBG_PRINTF( ("DVDWDM:       Set for ATI AMC\r\n" ) );
				// ATI AMC
				pVpdata->bEnableDoubleClock         = FALSE;
				pVpdata->bEnableVACT                = FALSE;
				pVpdata->bDataIsInterlaced          = TRUE;
				pVpdata->lHalfLinesOdd              = 1;
				pVpdata->lHalfLinesEven             = 0;
				pVpdata->bFieldPolarityInverted     = FALSE;

                pVpdata->amvpDimInfo.dwFieldWidth   = dwFieldWidth;
                pVpdata->amvpDimInfo.dwFieldHeight  = dwFieldHeight + 2;  // Check it later!!

				pVpdata->amvpDimInfo.rcValidRegion.left     = 0;
				pVpdata->amvpDimInfo.rcValidRegion.top      = 2;    // Check it later!!
                pVpdata->amvpDimInfo.rcValidRegion.right    = dwFieldWidth;
                pVpdata->amvpDimInfo.rcValidRegion.bottom   = dwFieldHeight + 2; // Check it later!!

				pVpdata->amvpDimInfo.dwVBIWidth     = pVpdata->amvpDimInfo.dwFieldWidth;
                pVpdata->amvpDimInfo.dwVBIHeight    = pVpdata->amvpDimInfo.rcValidRegion.top;

			}else{
				DBG_BREAK();
			}
			break;

		case KSPROPERTY_VPCONFIG_MAXPIXELRATE:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_MAXPIXELRATE\n\r") );
			
			//
			// NOTE:
			// this property is special. And has another different
			// inoput property.
			//

			if( dwInputBufferSize<sizeof(KSVPSIZE_PROP) ){
				DBG_BREAK();
				pSrb->Status = STATUS_INVALID_BUFFER_SIZE;
				return;
			}

			pSrb->ActualBytesTransferred = sizeof(KSVPMAXPIXELRATE);

			// cast the buffer to the proper type
			pMaxPixelRate = (PKSVPMAXPIXELRATE)pSrb->CommandData.PropertyInfo->PropertyInfo;

			// tell the app that the pixel rate is valid for these dimensions
			pMaxPixelRate->Size.dwWidth         = dwFieldWidth;
			pMaxPixelRate->Size.dwHeight        = dwFieldHeight;
            pMaxPixelRate->MaxPixelsPerSecond   = dwFieldWidth * dwFieldHeight * dwFrameRate;

			break;

		case KSPROPERTY_VPCONFIG_INFORMVPINPUT:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KSPROPERTY_VPCONFIG_GETVIDEOFORMAT:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_GETVIDEOFORMAT\n\r") );

			//
			// check that the size of the output buffer is correct
			//

			if( pmulitem->Count > dwNumConnectInfo ||
				pmulitem->Size != sizeof(DDPIXELFORMAT) ||
				dwOutputBufferSize < (pmulitem->Count * sizeof(DDPIXELFORMAT) ))
			{
				DBG_PRINTF( ("DVDWDM:       pmulitem->Count %d\n\r", pmulitem->Count ) );
				DBG_PRINTF( ("DVDWDM:       pmulitem->Size %d\n\r", pmulitem->Size ) );
				DBG_PRINTF( ("DVDWDM:       dwOutputBufferSize %d\n\r", dwOutputBufferSize ) );
				DBG_PRINTF( ("DVDWDM:       sizeof(DDPIXELFORMAt) %d\n\r", sizeof(DDPIXELFORMAT) ) );
				DBG_BREAK();

				//
				// buffer size is invalid, so error the call
				//
				pSrb->Status = STATUS_INVALID_BUFFER_SIZE;

				return;
			}

			//
			// specify the number of bytes written
			//
			pSrb->ActualBytesTransferred = pmulitem->Count*sizeof(DDPIXELFORMAT);
			pVideoFormat = (LPDDPIXELFORMAT)(pSrb->CommandData.PropertyInfo->PropertyInfo);

			if( pHwDevExt->m_DigitalOut == DigitalOut_LPB08 ){
				DBG_PRINTF( ("DVDWDM:       Set for S3 LPB\n\r") );
				// S3 LPB
				pVideoFormat->dwSize = sizeof(DDPIXELFORMAT);
				pVideoFormat->dwFlags = DDPF_FOURCC;
				pVideoFormat->dwFourCC = MKFOURCC( 'Y', 'U', 'Y', '2' );
				pVideoFormat->dwYUVBitCount = 16;
			}else if( pHwDevExt->m_DigitalOut == DigitalOut_AMCbt ){
				DBG_PRINTF( ("DVDWDM:       Set for ATI AMC\n\r") );
				// ATI AMC
				pVideoFormat->dwSize = sizeof(DDPIXELFORMAT);
				pVideoFormat->dwFlags = DDPF_FOURCC;
				pVideoFormat->dwFourCC = MKFOURCC( 'U', 'Y', 'V', 'Y' );
				pVideoFormat->dwYUVBitCount = 16;
				// Not need?
				pVideoFormat->dwYBitMask = (DWORD)0xFF00FF00;
				pVideoFormat->dwUBitMask = (DWORD)0x000000FF;
				pVideoFormat->dwVBitMask = (DWORD)0x00FF0000;

			}else{
				DBG_BREAK();

			}
			break;

		case KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY:
			//
			// indicate that we can decimate anything, especialy if it's lat.
			//
			pSrb->ActualBytesTransferred = sizeof(BOOL);
			*((PBOOL)pSrb->CommandData.PropertyInfo->PropertyInfo) = TRUE;

			break;

		default:
			DBG_PRINTF( ("DVDWDM:       PropertyID 0 default %d(0x%x)\n\r", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ));
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

	}
}


void GetVpeProperty2( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	ASSERT( pSrb != NULL );
	// This function is need only for Toshiba NoteBook PC.
	//
	PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION) pSrb->HwDeviceExtension;
	DWORD   dwInputBufferSize;
	DWORD   dwOutputBufferSize;
	DWORD   dwNumConnectInfo=1;                             // Only ZV
	DWORD   dwNumVideoFormat=1;
	DWORD   dwFieldWidth=720;
	DWORD   dwFieldHeight= 240;
    DWORD   dwPerField = 17000;
    DWORD   dwFrameRate = 30;

    switch( pHwDevExt->m_TVSystem ){
        case TV_NTSC:
            dwFieldWidth = 720;
            dwFieldHeight = 240;
            dwPerField = 17000;
            dwFrameRate = 30;
            break;
        case TV_PALB:
        case TV_PALD:
        case TV_PALG:
        case TV_PALH:
        case TV_PALI:
        case TV_PALM:
            dwFieldWidth = 720;
            dwFieldHeight = 288;            // 576/2 = 288 OK?
            dwPerField = 20000;                // 1/50 = 20ms
            dwFrameRate = 25;
            break;
    }


	// the pointers to which the input buffer will be cast to
	LPDDVIDEOPORTCONNECT   pConnectInfo;
	LPDDPIXELFORMAT     pVideoFormat;
	PKSVPMAXPIXELRATE   pMaxPixelRate;
	PKS_AMVPDATAINFO    pVpdata;

	// LPAMSCALINGINFO  pScaleFactor;

	//
	// NOTE:  ABSOLUTELY DO NOT use pmulitem, until it is determined that
	// the stream property descriptor describes a multiple item, or you will
	// pagefault.
	//
	ASSERT( pSrb->CommandData.PropertyInfo != NULL );
	ASSERT( pSrb->CommandData.PropertyInfo->Property != NULL );
	PKSMULTIPLE_ITEM    pmulitem =
			&(((PKSMULTIPLE_DATA_PROP)pSrb->CommandData.PropertyInfo->Property)->MultipleItem);
	ASSERT( pmulitem != NULL );
	//
	// NOTE: same goes for this one as above.
	//

//    PKS_AMVPSIZE pdim =
//            &(((PKSVPSIZE_PROP)pSrb->CommandData.PropertyInfo->Property)->Size);

//    ASSERT( pdim != NULL );

	if( pSrb->CommandData.PropertyInfo->PropertySetID ){
		DBG_BREAK();
		pSrb->Status = STATUS_NO_MATCH;
		return;
	}

	dwInputBufferSize = pSrb->CommandData.PropertyInfo->PropertyInputSize;
	dwOutputBufferSize = pSrb->CommandData.PropertyInfo->PropertyOutputSize;
	
	pSrb->Status = STATUS_SUCCESS;

	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KSPROPERTY_VPCONFIG_NUMCONNECTINFO:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_NUMCONNECTINFO\n\r") );
			// check that the size of the output buffer is correct
			ASSERT( dwInputBufferSize >= sizeof(DWORD) );

			pSrb->ActualBytesTransferred = sizeof(DWORD);

			*(PULONG) pSrb->CommandData.PropertyInfo->PropertyInfo
								= dwNumConnectInfo;
			break;

		case KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT\n\r") );
			// check that the size of the output buffer is correct
			ASSERT( dwInputBufferSize >= sizeof(DWORD) );

			pSrb->ActualBytesTransferred = sizeof(DWORD);

			*(PULONG) pSrb->CommandData.PropertyInfo->PropertyInfo
								= dwNumVideoFormat;
			break;

		case KSPROPERTY_VPCONFIG_GETCONNECTINFO:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_GETCONNECTINFO\n\r") );
			if( pmulitem->Count>dwNumConnectInfo ||
				pmulitem->Size!=sizeof(DDVIDEOPORTCONNECT) ||
				dwOutputBufferSize < (pmulitem->Count * sizeof(DDVIDEOPORTCONNECT)))
			{
				DBG_PRINTF( ("DVDWDM:       pmulitem->Count %d\n\r", pmulitem->Count) );
				DBG_PRINTF( ("DVDWDM:       pmulitem->Size %d\n\r", pmulitem->Size) );
				DBG_PRINTF( ("DVDWDM:       dwOutputBufferSize %d\n\r", dwOutputBufferSize) );
				DBG_PRINTF( ("DVDWDM:       sizeof(DDVIDEOPORTCONNECT) %d\n\r", sizeof(DDVIDEOPORTCONNECT)) );
				DBG_BREAK();

				//
				// buffer size is invalid, so error the call
				//

				pSrb->Status = STATUS_INVALID_BUFFER_SIZE;
				return;
			}

			//
			// specify the number of bytes written
			//
			pSrb->ActualBytesTransferred = pmulitem->Count*sizeof(DDVIDEOPORTCONNECT);
			pConnectInfo = (LPDDVIDEOPORTCONNECT)(pSrb->CommandData.PropertyInfo->PropertyInfo);

			// ZV
			pConnectInfo->dwSize = sizeof(DDVIDEOPORTCONNECT);
			pConnectInfo->dwPortWidth = 16;
			pConnectInfo->guidTypeID = g_ZVGuid;
			pConnectInfo->dwFlags = DDVPCONNECT_DISCARDSVREFDATA;               // 0x08?
			pConnectInfo->dwReserved1 = 0;
			break;

		case KSPROPERTY_VPCONFIG_VPDATAINFO:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_VPDATAINFO\n\r") );
			
			//
			// specify the number of bytes written
			//
			pSrb->ActualBytesTransferred = sizeof(KS_AMVPDATAINFO);

			//
			// cast the buffer to the proper type
			//
			pVpdata = (PKS_AMVPDATAINFO)pSrb->CommandData.PropertyInfo->PropertyInfo;

			*pVpdata = pHwDevExt->VPFmt;
			pVpdata->dwSize = sizeof(KS_AMVPDATAINFO);

            pVpdata->dwMicrosecondsPerField = dwPerField;

			ASSERT( pVpdata->dwNumLinesInVREF==0 );

			pVpdata->dwNumLinesInVREF = 0;

			if( pHwDevExt->m_DigitalOut==DigitalOut_ZV ){
/*********** ZV ***************/
				pVpdata->bEnableDoubleClock         = FALSE;
				pVpdata->bEnableVACT                = FALSE;
				pVpdata->bDataIsInterlaced          = TRUE;
				pVpdata->lHalfLinesOdd              = 0;
				pVpdata->lHalfLinesEven             = 0;
				pVpdata->bFieldPolarityInverted     = FALSE;

                pVpdata->amvpDimInfo.dwFieldWidth   = dwFieldWidth;
                pVpdata->amvpDimInfo.dwFieldHeight  = dwFieldHeight;

				pVpdata->amvpDimInfo.rcValidRegion.left     = 0;
				pVpdata->amvpDimInfo.rcValidRegion.top      = 0;
                pVpdata->amvpDimInfo.rcValidRegion.right    = dwFieldWidth;
                pVpdata->amvpDimInfo.rcValidRegion.bottom   = dwFieldHeight;

				pVpdata->amvpDimInfo.dwVBIWidth     = pVpdata->amvpDimInfo.dwFieldWidth;
				pVpdata->amvpDimInfo.dwVBIHeight    = pVpdata->amvpDimInfo.rcValidRegion.top;
			}else{
				DBG_BREAK();
			}
			break;

		case KSPROPERTY_VPCONFIG_MAXPIXELRATE:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_MAXPIXELRATE\n\r") );
			
			//
			// NOTE:
			// this property is special. And has another different
			// inoput property.
			//

			if( dwInputBufferSize<sizeof(KSVPSIZE_PROP) ){
				DBG_BREAK();
				pSrb->Status = STATUS_INVALID_BUFFER_SIZE;
				return;
			}

			pSrb->ActualBytesTransferred = sizeof(KSVPMAXPIXELRATE);

			// cast the buffer to the proper type
			pMaxPixelRate = (PKSVPMAXPIXELRATE)pSrb->CommandData.PropertyInfo->PropertyInfo;

			// tell the app that the pixel rate is valid for these dimensions
			pMaxPixelRate->Size.dwWidth         = dwFieldWidth;
			pMaxPixelRate->Size.dwHeight        = dwFieldHeight;
            pMaxPixelRate->MaxPixelsPerSecond   = dwFieldWidth * dwFieldHeight * dwFrameRate;

			break;

		case KSPROPERTY_VPCONFIG_INFORMVPINPUT:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KSPROPERTY_VPCONFIG_GETVIDEOFORMAT:
			DBG_PRINTF( ("DVDWDM:    KSPROPERTY_VPCONFIG_GETVIDEOFORMAT\n\r") );

			//
			// check that the size of the output buffer is correct
			//

			if( pmulitem->Count > dwNumConnectInfo ||
				pmulitem->Size != sizeof(DDPIXELFORMAT) ||
				dwOutputBufferSize < (pmulitem->Count * sizeof(DDPIXELFORMAT) ))
			{
				DBG_PRINTF( ("DVDWDM:       pmulitem->Count %d\n\r", pmulitem->Count ) );
				DBG_PRINTF( ("DVDWDM:       pmulitem->Size %d\n\r", pmulitem->Size ) );
				DBG_PRINTF( ("DVDWDM:       dwOutputBufferSize %d\n\r", dwOutputBufferSize ) );
				DBG_PRINTF( ("DVDWDM:       sizeof(DDPIXELFORMAt) %d\n\r", sizeof(DDPIXELFORMAT) ) );
				DBG_BREAK();

				//
				// buffer size is invalid, so error the call
				//
				pSrb->Status = STATUS_INVALID_BUFFER_SIZE;

				return;
			}

			//
			// specify the number of bytes written
			//
			pSrb->ActualBytesTransferred = pmulitem->Count*sizeof(DDPIXELFORMAT);
			pVideoFormat = (LPDDPIXELFORMAT)(pSrb->CommandData.PropertyInfo->PropertyInfo);

			if( pHwDevExt->m_DigitalOut == DigitalOut_ZV ){
				DBG_PRINTF( ("DVDWDM:       Set for S3 LPB\n\r") );
				// S3 LPB
				pVideoFormat->dwSize = sizeof(DDPIXELFORMAT);
				pVideoFormat->dwFlags = DDPF_FOURCC;
				pVideoFormat->dwFourCC = MKFOURCC( 'Y', 'U', 'Y', '2' );
				pVideoFormat->dwYUVBitCount = 16;
/*********************************                
			}else if( pHwDevExt->m_DigitalOut == DigitalOut_AMCbt ){
				DBG_PRINTF( ("DVDWDM:       Set for ATI AMC\n\r") );
				// ATI AMC
				pVideoFormat->dwSize = sizeof(DDPIXELFORMAT);
				pVideoFormat->dwFlags = DDPF_FOURCC;
				pVideoFormat->dwFourCC = MKFOURCC( 'U', 'Y', 'V', 'Y' );
				pVideoFormat->dwYUVBitCount = 16;
				// Not need?
				pVideoFormat->dwYBitMask = (DWORD)0xFF00FF00;
				pVideoFormat->dwUBitMask = (DWORD)0x000000FF;
				pVideoFormat->dwVBitMask = (DWORD)0x00FF0000;
***************************/
			}else{
				DBG_BREAK();

			}
			break;

		case KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY:
			//
			// indicate that we can decimate anything, especialy if it's lat.
			//
			pSrb->ActualBytesTransferred = sizeof(BOOL);
			*((PBOOL)pSrb->CommandData.PropertyInfo->PropertyInfo) = TRUE;

			break;

		default:
			DBG_PRINTF( ("DVDWDM:       PropertyID 0 default %d(0x%x)\n\r", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ));
			DBG_BREAK();
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

	}
}


void  SetVpeProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	DWORD   dwInputBufferSize;
	DWORD   dwOutputBufferSize;
	DWORD   *lpdwOutputBufferSize;

	ULONG   index;

	PKS_AMVPSIZE    pDim;

	if( pSrb->CommandData.PropertyInfo->PropertySetID ){
		DBG_BREAK();
		pSrb->Status = STATUS_NO_MATCH;
		return;
	}

	dwInputBufferSize = pSrb->CommandData.PropertyInfo->PropertyInputSize;
	dwOutputBufferSize = pSrb->CommandData.PropertyInfo->PropertyOutputSize;
	lpdwOutputBufferSize = &(pSrb->ActualBytesTransferred);

	pSrb->Status = STATUS_SUCCESS;

	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KSPROPERTY_VPCONFIG_SETCONNECTINFO:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_SETCONNECTINFO\n\r") );

			//
			// pSrb->CommandData.PropertyInfo->PropertyInfo
			// points to ULONG which is an index into the array of
			// connectinfo struct returned to the caller from the
			// Get call to Connectinfo.
			//

			// Since the sample only supports one connection type right
			// now, we will ensure that the requested index is 0.
			//

			//
			// at this point, we would program the hardware to use
			// the right connection information for the videoport.
			// since we are only supporting one connection, we don't
			// need to do anything, so we will just indicate success
			//

			index = *((ULONG *)(pSrb->CommandData.PropertyInfo->PropertyInfo) );

			DBG_PRINTF( ("DVDWDM:       %d\n\r", index ) );
			DWORD   dProp;

			switch( index ){
				case 0:             // S3 LPB
					pHwDevExt->m_DigitalOut = DigitalOut_LPB08;
					dProp = DigitalOut_LPB08;
					break;
					
				case 1:             // ATI AMC
					pHwDevExt->m_DigitalOut = DigitalOut_AMCbt;
					dProp = DigitalOut_AMCbt;
					break;
					
				default:
					DBG_PRINTF( ("DVDWDM:   SET CONNECt INFO default(%x)\n\r", index ) );
					DBG_BREAK();
					pHwDevExt->m_DigitalOut = DigitalOut_LPB08;     // S3 LPB
					dProp = DigitalOut_LPB08;
					break;
					
			}
			if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_DigitalOut, &dProp ) ){
				DBG_PRINTF( ("DVDWDM:   Set VideoProperty DigitalOut Error\n\r") );
				DBG_BREAK();
			}
			break;

		case KSPROPERTY_VPCONFIG_DDRAWHANDLE:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_DDRAWHANDLE\n\r") );
			pHwDevExt->ddrawHandle =
				(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);
			break;

		case KSPROPERTY_VPCONFIG_VIDEOPORTID:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_VIDEOPORTID\n\r") );
			pHwDevExt->VidPortID =
				(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);
			break;

		case KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE\n\r") );
			pHwDevExt->SurfaceHandle =
				(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);
			break;

		case KSPROPERTY_VPCONFIG_SETVIDEOFORMAT:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_SETVIDEOFORMAT\n\r") );
			//
			// pSrb->CommandData.PropertyInfo->PropertyInfo
			// points to a ULONG which is an index into the array of
			// VIDEOFORMAT structs returned to the caller from the
			// Get call to FORMATINFO
			//
			// Since the sample only supports one FORMAT type right
			// now, we will ensure that the requested index is 0.
			//

			//
			// at this point, we would program the hardware to use
			// the right connection information for the videoport.
			// since we are only supporting one connection, we don't
			// need to do anything, so we will just indicate success
			//

			index = *((ULONG *)(pSrb->CommandData.PropertyInfo->PropertyInfo));

			DBG_PRINTF( ("DVDWDM:       %d\n\r", index ) );
			break;

		case KSPROPERTY_VPCONFIG_INFORMVPINPUT:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_INFORMVPINPUT\n\r") );
			//
			// these are the preferred formats for the VPE client
			//
			// they are multiple properties passed in, retuen success
			//

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KSPROPERTY_VPCONFIG_INVERTPOLARITY:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_INVERTPOLARITY\n\r") );
			//
			// Toggles the global polarity flag, telling the output
			// of the VPE port to be inverted. Since this hardware
			// does not support this feature, we will just return
			// success for now, although this should be returning not
			// implemented
			//
			break;

		case KSPROPERTY_VPCONFIG_SCALEFACTOR:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_SCALEFACTOR\n\r") );
			//
			// the sizes for the scalling factor are passed in, and the
			// image dimensions should be scaled appropriately
			//

			// if there is a horizontal scaling available, do it here.
			//
			DBG_BREAK();
			pDim = (PKS_AMVPSIZE)(pSrb->CommandData.PropertyInfo->PropertyInfo);

			break;

		default:
			DBG_PRINTF( ("DVDWDM:   PropertySetID 0 default %d(0x%x)\n\r", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
			DBG_BREAK();

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}


void  SetVpeProperty2( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	DWORD   dwInputBufferSize;
	DWORD   dwOutputBufferSize;
	DWORD   *lpdwOutputBufferSize;

	ULONG   index;

	PKS_AMVPSIZE    pDim;

	if( pSrb->CommandData.PropertyInfo->PropertySetID ){
		DBG_BREAK();
		pSrb->Status = STATUS_NO_MATCH;
		return;
	}

	dwInputBufferSize = pSrb->CommandData.PropertyInfo->PropertyInputSize;
	dwOutputBufferSize = pSrb->CommandData.PropertyInfo->PropertyOutputSize;
	lpdwOutputBufferSize = &(pSrb->ActualBytesTransferred);

	pSrb->Status = STATUS_SUCCESS;

	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KSPROPERTY_VPCONFIG_SETCONNECTINFO:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_SETCONNECTINFO\n\r") );

			//
			// pSrb->CommandData.PropertyInfo->PropertyInfo
			// points to ULONG which is an index into the array of
			// connectinfo struct returned to the caller from the
			// Get call to Connectinfo.
			//

			// Since the sample only supports one connection type right
			// now, we will ensure that the requested index is 0.
			//

			//
			// at this point, we would program the hardware to use
			// the right connection information for the videoport.
			// since we are only supporting one connection, we don't
			// need to do anything, so we will just indicate success
			//

			index = *((ULONG *)(pSrb->CommandData.PropertyInfo->PropertyInfo) );

			DBG_PRINTF( ("DVDWDM:       %d\n\r", index ) );
			DWORD   dProp;

			switch( index ){
				case 0:             // ZV
					pHwDevExt->m_DigitalOut = DigitalOut_ZV;
					dProp = DigitalOut_ZV;
					break;
/*******************************                    

				case 0:             // S3 LPB
					pHwDevExt->m_DigitalOut = DigitalOut_LPB08;
					dProp = DigitalOut_LPB08;
					break;
					
				case 1:             // ATI AMC
					pHwDevExt->m_DigitalOut = DigitalOut_AMCbt;
					dProp = DigitalOut_AMCbt;
					break;
**********************************/                    
				default:
					DBG_PRINTF( ("DVDWDM:   SET CONNECt INFO default(%x)\n\r", index ) );
					DBG_BREAK();
					pHwDevExt->m_DigitalOut = DigitalOut_LPB08;     // S3 LPB
					dProp = DigitalOut_LPB08;
					break;
					
			}
			if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_DigitalOut, &dProp ) ){
				DBG_PRINTF( ("DVDWDM:   Set VideoProperty DigitalOut Error\n\r") );
				DBG_BREAK();
			}
			break;

		case KSPROPERTY_VPCONFIG_DDRAWHANDLE:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_DDRAWHANDLE\n\r") );
			pHwDevExt->ddrawHandle =
				(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);
			break;

		case KSPROPERTY_VPCONFIG_VIDEOPORTID:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_VIDEOPORTID\n\r") );
			pHwDevExt->VidPortID =
				(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);
			break;

		case KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE\n\r") );
			pHwDevExt->SurfaceHandle =
				(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);
			break;

		case KSPROPERTY_VPCONFIG_SETVIDEOFORMAT:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_SETVIDEOFORMAT\n\r") );
			//
			// pSrb->CommandData.PropertyInfo->PropertyInfo
			// points to a ULONG which is an index into the array of
			// VIDEOFORMAT structs returned to the caller from the
			// Get call to FORMATINFO
			//
			// Since the sample only supports one FORMAT type right
			// now, we will ensure that the requested index is 0.
			//

			//
			// at this point, we would program the hardware to use
			// the right connection information for the videoport.
			// since we are only supporting one connection, we don't
			// need to do anything, so we will just indicate success
			//

			index = *((ULONG *)(pSrb->CommandData.PropertyInfo->PropertyInfo));

			DBG_PRINTF( ("DVDWDM:       %d\n\r", index ) );
			break;

		case KSPROPERTY_VPCONFIG_INFORMVPINPUT:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_INFORMVPINPUT\n\r") );
			//
			// these are the preferred formats for the VPE client
			//
			// they are multiple properties passed in, retuen success
			//

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KSPROPERTY_VPCONFIG_INVERTPOLARITY:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_INVERTPOLARITY\n\r") );
			//
			// Toggles the global polarity flag, telling the output
			// of the VPE port to be inverted. Since this hardware
			// does not support this feature, we will just return
			// success for now, although this should be returning not
			// implemented
			//
			break;

		case KSPROPERTY_VPCONFIG_SCALEFACTOR:
			DBG_PRINTF( ("DVDWDM:   KSPROPERTY_VPCONFIG_SCALEFACTOR\n\r") );
			//
			// the sizes for the scalling factor are passed in, and the
			// image dimensions should be scaled appropriately
			//

			// if there is a horizontal scaling available, do it here.
			//
			DBG_BREAK();
			pDim = (PKS_AMVPSIZE)(pSrb->CommandData.PropertyInfo->PropertyInfo);

			break;

		default:
			DBG_PRINTF( ("DVDWDM:   PropertySetID 0 default %d(0x%x)\n\r", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
			DBG_BREAK();

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}



void VideoQueryAccept( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:VideoQueryAccept\n\r") );

	PKSDATAFORMAT   pfmt = pSrb->CommandData.OpenFormat;
//    KS_MPEGVIDEOINFO2 * pblock = (KS_MPEGVIDEOINFO2 *)((ULONG)pfmt + sizeof(KSDATAFORMAT));

	//
	// pick up the format block and examine it. Default not inplemented.
	//

	pSrb->Status = STATUS_NOT_IMPLEMENTED;

	if( pfmt->FormatSize != sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2))
	{
		return;
	}

	pSrb->Status = STATUS_SUCCESS;

}


void AudioQueryAccept( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:AudioQueryAccept\n\r") );

	pSrb->Status = STATUS_SUCCESS;

}


void ProcessVideoFormat( PHW_STREAM_REQUEST_BLOCK pSrb, PKSDATAFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt )
{
    DWORD   dProp;

	DBG_PRINTF( ("DVDWDM:ProccessVideoFormat\n\r") );
	KS_MPEGVIDEOINFO2   *VidFmt = (KS_MPEGVIDEOINFO2 *)((ULONG)pfmt + sizeof(KSDATAFORMAT) );

	if( pfmt->FormatSize != sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2) ){
		DBG_BREAK();
		return;
	}

/////////// for debug.
    DBG_PRINTF( ("DVDWDM:   KS_MPEGVIDEOINFO2\n\r") );
    DBG_PRINTF( ("DVDWDM:       dwProfile       =0x%08x\n\r", VidFmt->dwProfile) );
    DBG_PRINTF( ("DVDWDM:       dwLevel         =0x%08x\n\r", VidFmt->dwLevel) );
    DBG_PRINTF( ("DVDWDM:       dwFlags         =0x%08x\n\r", VidFmt->dwFlags) );
    DBG_PRINTF( ("DVDWDM:   KS_VIDEOINFOHEADER2\n\r") );
    DBG_PRINTF( ("DVDWDM:       dwBitRate       =0x%08x\n\r", VidFmt->hdr.dwBitRate) );
    DBG_PRINTF( ("DVDWDM:       dwBitErrorRate  =0x%08x\n\r", VidFmt->hdr.dwBitErrorRate) );
    DBG_PRINTF( ("DVDWDM:       dwInterlaceFlags=0x%08x\n\r", VidFmt->hdr.dwInterlaceFlags) );
    DBG_PRINTF( ("DVDWDM:       dwCopyProtFlags =0x%08x\n\r", VidFmt->hdr.dwCopyProtectFlags) );
    DBG_PRINTF( ("DVDWDM:   KS_VIDEOINFOHEADER2\n\r") );
    DBG_PRINTF( ("DVDWDM:       biSize          =%0d\n\r", VidFmt->hdr.bmiHeader.biSize) );
    DBG_PRINTF( ("DVDWDM:       biWidth         =%0d\n\r", VidFmt->hdr.bmiHeader.biWidth) );
    DBG_PRINTF( ("DVDWDM:       biHeight        =%0d\n\r", VidFmt->hdr.bmiHeader.biHeight) );
    DBG_PRINTF( ("DVDWDM:       biSizeImage     =%0d\n\r", VidFmt->hdr.bmiHeader.biSizeImage) );
//////////

//--- 99.01.14 S.Watanabe
	pHwDevExt->m_VideoFormatFlags = VidFmt->dwFlags;
//--- End.

    // Check Source Picture Resolution;
    pHwDevExt->m_ResHorizontal = VidFmt->hdr.bmiHeader.biWidth;
    pHwDevExt->m_ResVertical   = VidFmt->hdr.bmiHeader.biHeight;

    // Check NTSC or PAL by biWidth & biHeight.
    switch( pHwDevExt->m_ResVertical ){
        case 480:                               // NTSC
        case 240:
            dProp = TV_NTSC;
            break;

        case 576:                               // PAL
        case 288:
            dProp = TV_PALB;                    // PAL_B OK?
            break;

        default:
            DBG_PRINTF( ("DVDWDM:Invalid Source Resolution Height = %0d\n\r", pHwDevExt->m_ResVertical) );
            DBG_BREAK();
            break;
    }
    if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_TVSystem, &dProp ) ){
        DBG_PRINTF( ("DVDWDM:Set TV System Error\n\r") );
        DBG_BREAK();
    }
    pHwDevExt->m_TVSystem = dProp;

	//
	// copy the picture aspect ratio for now
	//
	pHwDevExt->VPFmt.dwPictAspectRatioX = VidFmt->hdr.dwPictAspectRatioX;
	pHwDevExt->VPFmt.dwPictAspectRatioY = VidFmt->hdr.dwPictAspectRatioY;

	DBG_PRINTF( ("DVDWDM: AspectRaioX %d\n\r", VidFmt->hdr.dwPictAspectRatioX) );
	DBG_PRINTF( ("DVDWDM: AspectRaioY %d\n\r", VidFmt->hdr.dwPictAspectRatioY) );

	if( pHwDevExt->VPFmt.dwPictAspectRatioX == 4 && pHwDevExt->VPFmt.dwPictAspectRatioY == 3 ){
		// set aspect raio 4:3
		dProp = Aspect_04_03;
	}else if( pHwDevExt->VPFmt.dwPictAspectRatioX == 16 && pHwDevExt->VPFmt.dwPictAspectRatioY == 9 ){
		// set aspect raio 16:9
		dProp = Aspect_16_09;
	}
	if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_AspectRatio, &dProp ) ){
		DBG_PRINTF( ("DVDWDM:Set Aspect Ratio Error\n\r") );
		DBG_BREAK();
	}
	pHwDevExt->m_AspectRatio = dProp;

	//
	// check for pan-scan / letter-box  enabled
	//
	DWORD  fPSLB = 0;
//    if( VidFmt->dwFlags & KS_MPEG2_SourceIsLetterboxed){
    if( VidFmt->dwFlags & 0x20 ){     // KS_MPEG2_LetterboxAnalogOut){
		DBG_PRINTF( ("DVDWDM:   KS_MPEG2_SourceisLetterboxed\n\r") );
//--- 99.01.13 S.Watanabe
//		if( pHwDevExt->m_DisplayDevice==DisplayDevice_Normal ){		// 98.12.23 H.Yagi
		if( pHwDevExt->m_DisplayDevice == DisplayDevice_NormalTV ) {
//--- End.
		    fPSLB |= 0x01; 
		}
	}
	if( VidFmt->dwFlags & KS_MPEG2_DoPanScan ){
		DBG_PRINTF( ("DVDWDM:   KS_MPEG2_DoPanScan\n\r") );
//--- 99.01.13 S.Watanabe
//		fPSLB |= 0x02; 
		if( pHwDevExt->m_DisplayDevice != DisplayDevice_WideTV )
			fPSLB |= 0x02; 
//--- End.
	}
	if( VidFmt->dwFlags & KS_MPEG2_DVDLine21Field1 ){
		DBG_PRINTF( ("DVDWDM:   KS_MPEG2_DVDLine21Field1\n\r") );
	}
	if( VidFmt->dwFlags & KS_MPEG2_DVDLine21Field2 ){
		DBG_PRINTF( ("DVDWDM:   KS_MPEG2_DVDLine21Field2\n\r") );
	}
	if( VidFmt->dwFlags & KS_MPEG2_FilmCameraMode ){
		DBG_PRINTF( ("DVDWDM:   KS_MPEG2_FilmCameraMode\n\r") );
	}


	if( VidFmt->dwFlags & KS_MPEG2_DoPanScan )
	{
		//
		// under pan-scan for DVD for NTSC, we must be going to a 540 by
		// 480 bit image, from a 720 x 480( or  704 x 480 ). We will
		// use this as the base starting dimensions. If ths Seaquence
		// header provides other sizes, then those should be updated,
		// and the Video port connection should be updated when the
		// seaquence header is received.
		//

		//
		// change the picture aspect ratio.  Since we will be stretching
		// from 540 to 720 in the horizontal direction, our aspect ratio
		// will
		//
		pHwDevExt->VPFmt.dwPictAspectRatioX = (VidFmt->hdr.dwPictAspectRatioX * (54000/72) );
		pHwDevExt->VPFmt.dwPictAspectRatioY = VidFmt->hdr.dwPictAspectRatioY * 1000;

	}
	// set pan-scan / letter-box enabled
	switch( fPSLB ){
		case 0x00:
			dProp = Display_Original;
			break;
		case 0x01:
			dProp = Display_LetterBox;
			break;
		case 0x02:
			dProp = Display_PanScan;
			break;
		default:
			dProp = Display_Original;
			DBG_PRINTF( ("DVDWDM:   Invalid info(LB&PS)\n\r") );
			DBG_BREAK();
			break;
	}
    if( pHwDevExt->m_AspectRatio == Aspect_04_03 ){       // check dwFlags is avilable
        dProp = Display_Original;
    }

    if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_DisplayMode, &dProp ) ){
		DBG_PRINTF( ("DVDWDM:Set LetterBox & PanScan Error\n\r") );
		DBG_BREAK();
	}
    pHwDevExt->m_DisplayMode = dProp;

    //
	// Set FilmCamera Mode
	// 
	if( VidFmt->dwFlags & KS_MPEG2_FilmCameraMode ){
		DBG_PRINTF( ("DVDWDM:   KS_MPEG2_FilmCameraMode\n\r") );
		dProp = Source_Film;            // need to check if it is Ok?
	}else{
		dProp = Source_Camera;            // need to check if it is OK?
	}
	if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_FilmCamera, &dProp ) ){
		DBG_PRINTF( ("DVDWDM:Set Film/Camera mode Error\n\r") );
		DBG_BREAK();
	}
	pHwDevExt->m_SourceFilmCamera = dProp;

	//
	// call the IVPConfig interface here
	//
	if( pHwDevExt->pstroYUV &&
		((PSTREAMEX)(pHwDevExt->pstroYUV->HwStreamExtension))->EventCount)
	{
	
//        StreamClassStreamNotification( SignalMultipleStreamEvents,
//                                        pHwDevExt->pstroYUV,
//                                        &MY_KSEVENTSETID_VPNOTIFY,
//                                        KSEVENT_VPNOTIFY_FORMATCHANGE );
		
//        DBG_BREAK();
//       CallAtStreamSignalMultipleNotify( pHwDevExt );
       CallAtStreamSignalMultipleNotify( pSrb );

	}

}

void ProcessAudioFormat( PKSDATAFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt )
{
	DWORD   aPropType, aPropFS;

	DBG_PRINTF( ("DVDWDM: ProcessAudioFormat\n\r") );

	if( ( IsEqualGUID2( &pfmt->MajorFormat, &KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK ) &&
		IsEqualGUID2( &pfmt->SubFormat, &KSDATAFORMAT_SUBTYPE_AC3_AUDIO ) ) )
	{
		// AC-3
		DBG_PRINTF( ("DVDWDM:   AC-3 Audio\n\r") );
		aPropType = AudioType_AC3;
		aPropFS = 48000;

	}else if( (IsEqualGUID2( &pfmt->MajorFormat, &KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK) &&
			IsEqualGUID2( &pfmt->SubFormat, &KSDATAFORMAT_SUBTYPE_LPCM_AUDIO )) )
	{
		// L-PCM
		DBG_PRINTF( ("DVDWDM:   L-PCM Audio\n\r") );
//        WAVEFORMATEX * pblock = (WAVEFORMATEX *)((ULONG)pfmt + sizeof(KSDATAFORMAT) );

//        DBG_PRINTF( ("DVDWDM:    wFormatTag      %d\n\r", (DWORD)(pblock->wFormatTag) ));
//        DBG_PRINTF( ("DVDWDM:    nChannels       %d\n\r", (DWORD)(pblock->nChannels) ));
//        DBG_PRINTF( ("DVDWDM:    nSamplesPerSec  %d\n\r", (DWORD)(pblock->nSamplesPerSec) ));
//        DBG_PRINTF( ("DVDWDM:    nAvgBytesPerSec %d\n\r", (DWORD)(pblock->nAvgBytesPerSec) ));
//        DBG_PRINTF( ("DVDWDM:    nBlockAlign     %d\n\r", (DWORD)(pblock->nBlockAlign) ));
//        DBG_PRINTF( ("DVDWDM:    wBitsPerSample  %d\n\r", (DWORD)(pblock->wBitsPerSample) ));
//        DBG_PRINTF( ("DVDWDM:    cbSize          %d\n\r", (DWORD)(pblock->cbSize) ));

		aPropType = AudioType_PCM;
		aPropFS = 48000;                    // test there is possibility in 48000/96000.

	}else{
		DBG_PRINTF( ("DVDWDM:   Unsupport audio typ\n\r" ) );
		DBG_PRINTF( ("DVDWDM    Major  %08x-%04x-%04x-%02x%02x%02x%02x%02x%02x%02x%02x\n\r",
				pfmt->MajorFormat.Data1,
				pfmt->MajorFormat.Data2,
				pfmt->MajorFormat.Data3,
				pfmt->MajorFormat.Data4[0],
				pfmt->MajorFormat.Data4[1],
				pfmt->MajorFormat.Data4[2],
				pfmt->MajorFormat.Data4[3],
				pfmt->MajorFormat.Data4[4],
				pfmt->MajorFormat.Data4[5],
				pfmt->MajorFormat.Data4[6],
				pfmt->MajorFormat.Data4[7]
				));
		DBG_PRINTF( ("DVDWDM    Sub    %08x-%04x-%04x-%02x%02x%02x%02x%02x%02x%02x%02x\n\r",
				pfmt->SubFormat.Data1,
				pfmt->SubFormat.Data2,
				pfmt->SubFormat.Data3,
				pfmt->SubFormat.Data4[0],
				pfmt->SubFormat.Data4[1],
				pfmt->SubFormat.Data4[2],
				pfmt->SubFormat.Data4[3],
				pfmt->SubFormat.Data4[4],
				pfmt->SubFormat.Data4[5],
				pfmt->SubFormat.Data4[6],
				pfmt->SubFormat.Data4[7]
				));
		DBG_PRINTF( ("DVDWDM    Format %08x-%04x-%04x-%02x%02x%02x%02x%02x%02x%02x%02x\n\r",
				pfmt->Specifier.Data1,
				pfmt->Specifier.Data2,
				pfmt->Specifier.Data3,
				pfmt->Specifier.Data4[0],
				pfmt->Specifier.Data4[1],
				pfmt->Specifier.Data4[2],
				pfmt->Specifier.Data4[3],
				pfmt->Specifier.Data4[4],
				pfmt->Specifier.Data4[5],
				pfmt->Specifier.Data4[6],
				pfmt->Specifier.Data4[7]
				));
		DBG_BREAK();
		return;
	}
	if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_Type, &aPropType ) ){
		DBG_PRINTF( ("DVDWDM:Set Audio Type Error\n\r") );
		DBG_BREAK();
	}
	pHwDevExt->m_AudioType = aPropType;

	if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_Type, &aPropType ) ){
		DBG_PRINTF( ("DVDWDM:Set Audio Type Error\n\r") );
		DBG_BREAK();
	}
	pHwDevExt->m_AudioFS = aPropFS;
	
}


void GetCCProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
		PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
		
		if( pSrb->CommandData.PropertyInfo->PropertySetID ){
			DBG_BREAK();
			pSrb->Status = STATUS_NO_MATCH;
			return;
		}
		
		PKSALLOCATOR_FRAMING pfrm = (PKSALLOCATOR_FRAMING)
						pSrb->CommandData.PropertyInfo->PropertyInfo;

		PKSSTATE    State;
		
		pSrb->Status = STATUS_SUCCESS;
		
		switch( pSrb->CommandData.PropertyInfo->Property->Id ){
			case KSPROPERTY_CONNECTION_ALLOCATORFRAMING:
				DBG_PRINTF( ("DVDWDM:   KSPROPERTY_CONNECTION_ALLOCATORFRAMING\n\r") );
				
				pfrm->OptionsFlags = 0;
				pfrm->PoolType = NonPagedPool;
				pfrm->Frames = 10;
				pfrm->FrameSize = 200;
				pfrm->FileAlignment = 0;
				pfrm->Reserved = 0;
				
				pSrb->ActualBytesTransferred = sizeof( KSALLOCATOR_FRAMING );
				
				break;
				
			case KSPROPERTY_CONNECTION_STATE:
				DBG_PRINTF( ("DVDWDM:   KSPROPERTY_CONNECTION_STATE\n\r") );
				
				State = (PKSSTATE)pSrb->CommandData.PropertyInfo->PropertyInfo;
				
				pSrb->ActualBytesTransferred = sizeof( State );
				
				// A very odd rule:
				// When transitioning from stop to pause, DShow tries to preroll
				// the graph. Capture sources can't preroll, and indicate this
				// by returning VFW_S_CANT_CUE in user mode. To indicate this
				// condition from drivers, they must return ERROR_NO_DATA_DETECTED
				
				*State = ((PSTREAMEX)(pHwDevExt->pstroCC->HwStreamExtension))->state;
				
				if( ((PSTREAMEX)pHwDevExt->pstroCC->HwStreamExtension)->state == KSSTATE_PAUSE ){
					//
					// wired stuff for capture type state change. When you tarnsition
					// from stop to pause, we need to indicate that this device cannot
					// preroll, and has no data to send.
					//
					
					pSrb->Status = STATUS_NO_DATA_DETECTED;
				}
				break;
				
			default:
				DBG_PRINTF( ("DVDWDM:   PropertySetID 0 default %d(0x%x)\n\r", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
				DBG_BREAK();
				
				pSrb->Status = STATUS_NOT_IMPLEMENTED;
				
				break;
		}
}   
				  
				
void SetCCProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_BREAK();
	pSrb->Status = STATUS_NOT_IMPLEMENTED;
	return;
}


void GetVideoProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
		case 0:
			DBG_PRINTF( ("DVDWDM:   GetVideoProperty 0\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case 1:
			DBG_PRINTF( ("DVDWDM:   GetVideoProperty 1\n\r") );
			GetCppProperty( pSrb, strmVideo );
			break;
			
		case 2:
			DBG_PRINTF( ("DVDWDM:   GetVideoProperty 2\n\r") );
			
			GetVideoRateChange( pSrb );
			
//            pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:   GetVideoProperty ----- default\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}


void SetVideoProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	
	switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
		case 0:
			DBG_PRINTF( ("DVDWDM:   SetVideoProperty 0\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case 1:
			DBG_PRINTF( ("DVDWDM:   SetVideoProperty 1\n\r") );
			SetCppProperty( pSrb );
			break;
			
		case 2:
			DBG_PRINTF( ("DVDWDM:   SetVideoProperty 2\n\r") );
//            DBG_BREAK();
			
			SetVideoRateChange( pSrb );
			
//            pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:   SetVideoProperty ----- default\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}


void GetCppProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb, LONG strm )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	
	DBG_PRINTF( ("DVDWDM:   GetCppProperty\n\r") );
	
	DWORD   *lpdwOutputBufferSize;
	
	lpdwOutputBufferSize = &(pSrb->ActualBytesTransferred);
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KSPROPERTY_DVDCOPY_CHLG_KEY:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_CHLG_KEY\n\r") );
			BYTE                pKeyData[10];
			PKS_DVDCOPY_CHLGKEY pChlgKey;
			pChlgKey = (PKS_DVDCOPY_CHLGKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;
			if( !pHwDevExt->dvdstrm.GetChlgKey(pKeyData) ){
				DBG_PRINTF( ("DVDWDM:   GetChlgKey Error\n\r") );
				DBG_BREAK();
			}
			DBG_PRINTF( ("DVDWDM:       %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n\r",
					pKeyData[0], pKeyData[1], pKeyData[2], pKeyData[3], pKeyData[4],
					pKeyData[5], pKeyData[6], pKeyData[7], pKeyData[8], pKeyData[9]
			) );
			pChlgKey->ChlgKey[0] = pKeyData[0];
			pChlgKey->ChlgKey[1] = pKeyData[1];
			pChlgKey->ChlgKey[2] = pKeyData[2];
			pChlgKey->ChlgKey[3] = pKeyData[3];
			pChlgKey->ChlgKey[4] = pKeyData[4];
			pChlgKey->ChlgKey[5] = pKeyData[5];
			pChlgKey->ChlgKey[6] = pKeyData[6];
			pChlgKey->ChlgKey[7] = pKeyData[7];
			pChlgKey->ChlgKey[8] = pKeyData[8];
			pChlgKey->ChlgKey[9] = pKeyData[9];
			
			*lpdwOutputBufferSize = sizeof( KS_DVDCOPY_CHLGKEY );
			
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_DVD_KEY1:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_DVD_KEY1\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_DEC_KEY2:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_DEC_KEY2\n\r") );
			BYTE               pD2KeyData[5];
			PKS_DVDCOPY_BUSKEY  pBusKey;
			pBusKey = (PKS_DVDCOPY_BUSKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;
			if( !pHwDevExt->dvdstrm.GetDVDKey2(pD2KeyData) ){
				DBG_PRINTF( ("DVDWDM:   GetDVDKey2 Error \n\r") );
				DBG_BREAK();
			}
			DBG_PRINTF( ("DVDWDM:       %02x %02x %02x %02x %02x\n\r",
					pD2KeyData[0], pD2KeyData[1], pD2KeyData[2], pD2KeyData[3], pD2KeyData[4]
			) );        
			pBusKey->BusKey[0] = pD2KeyData[0];
			pBusKey->BusKey[1] = pD2KeyData[1];
			pBusKey->BusKey[2] = pD2KeyData[2];
			pBusKey->BusKey[3] = pD2KeyData[3];
			pBusKey->BusKey[4] = pD2KeyData[4];

			*lpdwOutputBufferSize = sizeof( KS_DVDCOPY_BUSKEY );

			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_TITLE_KEY:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_TITLE_KEY\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
			

		case KSPROPERTY_DVDCOPY_DISC_KEY:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_DISC_KEY\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_SET_COPY_STATE:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_SET_COPY_STATE\n\r") );

			if( pHwDevExt->lCPPStrm == -1 || pHwDevExt->lCPPStrm == strm ){
				DBG_PRINTF( ("DVDWDM:       return REQUIRED\n\r") );
				pHwDevExt->lCPPStrm = strm;
				((PKS_DVDCOPY_SET_COPY_STATE)(pSrb->CommandData.PropertyInfo->PropertyInfo))->DVDCopyState
						= KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED;
			}else{
				DBG_PRINTF( ("DVDWDM:       return NOT REQUIRED\n\r") );
				((PKS_DVDCOPY_SET_COPY_STATE)(pSrb->CommandData.PropertyInfo->PropertyInfo))->DVDCopyState
						= KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED;
			}
			pSrb->ActualBytesTransferred = sizeof( KS_DVDCOPY_SET_COPY_STATE );
			pSrb->Status = STATUS_SUCCESS;
			break;

//        case KSPROPERTY_DVDCOPY_REGION:
//            DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_REGION\n\r") );
//            DBG_BREAK();
//
//            // indicate Region 1 for US content.
//            ((PKS_DVDCOPY_REGION)(pSrb->CommandData.PropertyInfo->PropertyInfo))->RegionData = 0x01;
//            pSrb->ActualBytesTransferred = sizeof(KS_DVDCOPY_REGION);
//            pSrb->Status = STATUS_SUCCESS;
//            break;
			
		default:
			DBG_PRINTF( ("DVDWDM:       PropertySetID 1 default %d(0x%x)\n\r", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}

void SetCppProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	DWORD   aProp;
	
	DBG_PRINTF( ("DVDWDM:   SetCppProperty\n\r") );
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KSPROPERTY_DVDCOPY_CHLG_KEY:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_CHLG_KEY\n\r") );
			BYTE                chlgKeyData[10];
			PKS_DVDCOPY_CHLGKEY pChlgKey;
			pChlgKey = (PKS_DVDCOPY_CHLGKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;
			chlgKeyData[0] = pChlgKey->ChlgKey[0];
			chlgKeyData[1] = pChlgKey->ChlgKey[1];
			chlgKeyData[2] = pChlgKey->ChlgKey[2];
			chlgKeyData[3] = pChlgKey->ChlgKey[3];
			chlgKeyData[4] = pChlgKey->ChlgKey[4];
			chlgKeyData[5] = pChlgKey->ChlgKey[5];
			chlgKeyData[6] = pChlgKey->ChlgKey[6];
			chlgKeyData[7] = pChlgKey->ChlgKey[7];
			chlgKeyData[8] = pChlgKey->ChlgKey[8];
			chlgKeyData[9] = pChlgKey->ChlgKey[9];

			DBG_PRINTF( ("DVDWDM:       %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n\r",
					chlgKeyData[0], chlgKeyData[1], chlgKeyData[2], chlgKeyData[3], chlgKeyData[4],
					chlgKeyData[5], chlgKeyData[6], chlgKeyData[7], chlgKeyData[8], chlgKeyData[9]
			) );        
			if( !pHwDevExt->dvdstrm.SetChlgKey( chlgKeyData ) ){
				DBG_PRINTF( ("DVDWDM:       Set Chllenge Key Error\n\r") );
				DBG_BREAK();
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_DVD_KEY1:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_DVD_KEY1\n\r") );
			
			PKS_DVDCOPY_BUSKEY  pBusKey;
			BYTE                BusKeyData[5];
			
			pBusKey = (PKS_DVDCOPY_BUSKEY) pSrb->CommandData.PropertyInfo->PropertyInfo;
			BusKeyData[0] = pBusKey->BusKey[0];
			BusKeyData[1] = pBusKey->BusKey[1];
			BusKeyData[2] = pBusKey->BusKey[2];
			BusKeyData[3] = pBusKey->BusKey[3];
			BusKeyData[4] = pBusKey->BusKey[4];
			DBG_PRINTF( ("DVDWDM:       %02x %02x %02x %02x %02x\n\r",
					BusKeyData[0], BusKeyData[1], BusKeyData[2], BusKeyData[3], BusKeyData[4]
			) );        

			if( !pHwDevExt->dvdstrm.SetDVDKey1( BusKeyData ) ){
				DBG_PRINTF( ("DVDWDM:       Set Bus Key Error\n\r") );
				DBG_BREAK();
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_DEC_KEY2:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_DEC_KEY2\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_TITLE_KEY:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_TITLE_KEY\n\r") );
			PKS_DVDCOPY_TITLEKEY    pTitleKey;
			BYTE                    TitleKeyData[6];
			
			pTitleKey = (PKS_DVDCOPY_TITLEKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;
			TitleKeyData[0] = 0x00;             // pTitleKey->KeyFlags;
			TitleKeyData[1] = pTitleKey->TitleKey[0];
			TitleKeyData[2] = pTitleKey->TitleKey[1];
			TitleKeyData[3] = pTitleKey->TitleKey[2];
			TitleKeyData[4] = pTitleKey->TitleKey[3];
			TitleKeyData[5] = pTitleKey->TitleKey[4];
			DBG_PRINTF( ("DVDWDM:       %02x %02x %02x %02x %02x\n\r",
					TitleKeyData[0], TitleKeyData[1], TitleKeyData[2], TitleKeyData[3], TitleKeyData[4]
			) );        

			if( !pHwDevExt->dvdstrm.SetTitleKey( TitleKeyData ) ){
				DBG_PRINTF( ("DVDWDM:   Set Title Key Error\n\r" ) );
				DBG_BREAK();
			}
			
			// Set CGMS for Digital Copy Guard & NTSC Analogue Copy Guard.
			DWORD   cgms;
			cgms = (DWORD)((pTitleKey->KeyFlags & 0x30)>>4);
			switch( cgms ){
				case 0x00:
					DBG_PRINTF( ("DVDWDM:           CGMS OFF\n\r") );
					pHwDevExt->m_CgmsType = CgmsType_Off;
					pHwDevExt->m_AudioCgms = AudioCgms_Off;
					aProp = CgmsType_Off;
					break;
				case 0x02:
					DBG_PRINTF( ("DVDWDM:           CGMS 1\n\r") );
					pHwDevExt->m_CgmsType = CgmsType_1;
					pHwDevExt->m_AudioCgms = AudioCgms_1;
					aProp = CgmsType_1;
					break;
				case 0x03:
					DBG_PRINTF( ("DVDWDM:           CGMS ON\n\r") );
					pHwDevExt->m_CgmsType = CgmsType_On;
					pHwDevExt->m_AudioCgms = AudioCgms_On;
					aProp = CgmsType_On;
					break;
			}
			if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_Cgms, &aProp ) ){
				DBG_PRINTF( ("CCDVD:    Set Audio cgms Error\n\r") );
				DBG_BREAK();
			}

			pSrb->Status = STATUS_SUCCESS;
			break;
			

		case KSPROPERTY_DVDCOPY_DISC_KEY:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_DISC_KEY\n\r") );
			PKS_DVDCOPY_DISCKEY pDiscKey;
			
			pDiscKey = (PKS_DVDCOPY_DISCKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;
			
			DBG_PRINTF( ("DVDWDM:       %02x %02x %02x %02x %02x %02x %02x %02x\n\r",
					pDiscKey->DiscKey[0], pDiscKey->DiscKey[1], pDiscKey->DiscKey[2], pDiscKey->DiscKey[3],
					pDiscKey->DiscKey[4], pDiscKey->DiscKey[5], pDiscKey->DiscKey[6], pDiscKey->DiscKey[7]
			) );
			if( !pHwDevExt->dvdstrm.SetDiscKey( (UCHAR *)( pDiscKey->DiscKey ) )){
				DBG_PRINTF( ("DVDWDM:       Set Disc Key Error\n\r") );
				DBG_BREAK();
			}
			
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KSPROPERTY_DVDCOPY_SET_COPY_STATE:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_SET_COPY_STATE\n\r") );
			
			PKS_DVDCOPY_SET_COPY_STATE  pCopyState;
			
			pCopyState = (PKS_DVDCOPY_SET_COPY_STATE)pSrb->CommandData.PropertyInfo->PropertyInfo;
			
//--- 98.06.02 S.Watanabe
			pSrb->Status = STATUS_SUCCESS;
//--- End.
			switch( pCopyState->DVDCopyState ){
				case KS_DVDCOPYSTATE_INITIALIZE :
					DBG_PRINTF( ("DVDWDM:       KS_DVDCOPYSTATE_INITIALIZE\n\r") );

					pHwDevExt->pSrbCpp = pSrb;
					pHwDevExt->bCppReset = TRUE;

					pHwDevExt->CppFlagCount++;

                    			pSrb->Status = STATUS_PENDING;
			                DBG_PRINTF(( "TOSDVD:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
                    			if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 ){
                        			if( SetCppFlag( pHwDevExt, FALSE ) == FALSE ){
                            				pSrb->Status = STATUS_SUCCESS;
                        			}
                    			}
//--- End.
					break;
					
				case KS_DVDCOPYSTATE_INITIALIZE_TITLE:
					DBG_PRINTF( ("DVDWDM:       KS_DVDCOPYSTATE_INITIALIZE_TITLE\n\r") );

					pHwDevExt->CppFlagCount++;

                    			ASSERT( !pHwDevExt->pSrbCpp );
                    			pHwDevExt->pSrbCpp = pSrb;
                    			pHwDevExt->bCppReset = FALSE;

                    			pSrb->Status = STATUS_PENDING;
                    			DBG_PRINTF(( "TOSDVD:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
                    			if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 ){
                        			if(  SetCppFlag( pHwDevExt, FALSE ) == FALSE ){
                            				pSrb->Status = STATUS_SUCCESS;
                        			}
                    			}
//--- End.
					break;
					
				case KS_DVDCOPYSTATE_DONE:
					DBG_PRINTF( ("DVDWDM:       KS_DVDCOPYSTATE_DONE\n\r") );
//--- 98.06.02 S.Watanabe
//--- 99.10.04 H.Yagi					pHwDevExt->CppFlagCount = 0;
//--- End.
					break;

				default:
					DBG_PRINTF( ("DVDWDM:       KS_DVDCOPYSTATE_?????\n\r") );
					break;                    
			}

			break;
			
		case KSPROPERTY_COPY_MACROVISION:
			DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDCOPY_MACROVISION\n\r") );
			/************* Test Code .....start  This part is not neccessary
			BYTE    tmp;
			tmp = READ_PORT_UCHAR( (PUCHAR)0x0071 );            // 0x0071 RTC I/O port
			DBG_PRINTF( ("DVDWDM:   RTC I/O(0x0071) = 0x%0x\n\r", tmp) );
			pSrb->Status = STATUS_UNSUCCESSFUL;
			return;
			************* Test Code .....end ******/

			PKS_COPY_MACROVISION    pLevel;
			DWORD           apsLevel;
			VideoAPSStruc   vAPS;
//            OsdDataStruc    TestOSD;		// removed by H.Yagi 99.02.02
            
			pLevel = (PKS_COPY_MACROVISION)pSrb->CommandData.PropertyInfo->PropertyInfo;
			apsLevel = pLevel->MACROVISIONLevel;
			
			if( pHwDevExt->m_APSType != (apsLevel&0x03) ){		// add by H.Yagi 99.02.02
				pHwDevExt->m_APSChange = TRUE;
			}
			switch( (apsLevel&0x03) ){
				case 0:
					pHwDevExt->m_APSType = ApsType_Off;
					break;
				case 1:
					pHwDevExt->m_APSType = ApsType_1;
					break;
				case 2:
					pHwDevExt->m_APSType = ApsType_2;
					break;
				case 3:
					pHwDevExt->m_APSType = ApsType_3;
					break;
			}
			vAPS.APSType = (APSTYPE)pHwDevExt->m_APSType;
			vAPS.CgmsType = (CGMSTYPE)pHwDevExt->m_CgmsType;
			if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_APS, &vAPS ) ){
				DBG_PRINTF( ("DVDWDM:   Set APS Error\n\r") );
				DBG_BREAK();
			}
			
// removed by H.Yagi 99.02.02
//			TestOSD.OsdType = OSD_TYPE_ZIVA;
//			TestOSD.pNextData = NULL;
//			TestOSD.pData = &erase[0];
//			TestOSD.dwOsdSize = sizeof( erase );

			/******** Commented out to call MacroVisionTVControl().
			********* Because before starting APS data, this setting 
                        ********* is passed to mini-driver. So mini-driver call
                        ********* MacroVisonTVControl() just before decodeing
                        ********* APS data.
			MacroVisionTVControl( pSrb, pHwDevExt->m_APSType, TestOSD );
                        *********/
			
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		default:
			DBG_PRINTF( ("DVDWDM:       PropertySetID 1 default %d(0x%x)\n\r", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}
	

void GetAudioProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	
	switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
		case 0:
			DBG_PRINTF( ("DVDWDM:   GetAudioProperty 0\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			switch( pSrb->CommandData.PropertyInfo->Property->Id ){
				case KSPROPERTY_AUDDECOUT_MODES:
					*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo ) =
						KSAUDDECOUTMODE_STEREO_ANALOG | KSAUDDECOUTMODE_SPDIFF;
					break;
				
				case KSPROPERTY_AUDDECOUT_CUR_MODE:
					DWORD   aProp;
					aProp = pHwDevExt->m_AudioDigitalOut;
					switch( aProp ){
						case AudioDigitalOut_On:
							*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo ) |=
								KSAUDDECOUTMODE_SPDIFF;
							break;
						case AudioDigitalOut_Off:
							*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo ) &=
								(~KSAUDDECOUTMODE_SPDIFF);
							break;
					}

					aProp = pHwDevExt->m_AudioEncode;
					switch( aProp ){
						case AudioOut_Decoded:
							*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo ) |=
								KSAUDDECOUTMODE_STEREO_ANALOG;
							break;
						case AudioOut_Encoded:
							*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo ) &=
								(~KSAUDDECOUTMODE_STEREO_ANALOG);
							break;
					}
					break;            

				default:
					pSrb->Status = STATUS_NOT_IMPLEMENTED;
			}
			break;
		 
		case 1:
			DBG_PRINTF( ("DVDWDM:   GetAudioProperty 1\n\r") );
			GetCppProperty( pSrb, strmAudio );
			break;
			
		case 2:
			DBG_PRINTF( ("DVDWDM:   GetAudioProperty 2\n\r") );
			DBG_BREAK();
			
			GetAudioRateChange( pSrb );
			
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:   GetAudioProperty ----- default\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}


void SetAudioProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	DWORD       aProp;
	
	pSrb->Status = STATUS_SUCCESS;
	
	switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
		case 0:
			DBG_PRINTF( ("DVDWDM:   SetAudioProperty 0\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			switch( pSrb->CommandData.PropertyInfo->Property->Id ){
				case KSPROPERTY_AUDDECOUT_CUR_MODE:
					if( (*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo)) &
						(!(KSAUDDECOUTMODE_STEREO_ANALOG | KSAUDDECOUTMODE_SPDIFF))){
						pSrb->Status = STATUS_NOT_IMPLEMENTED;
						break;
					}
					
					if( (*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo)) &
						(KSAUDDECOUTMODE_SPDIFF) ){
						aProp = AudioDigitalOut_On;
					}else{
						aProp = AudioDigitalOut_Off;
					}
/************* commented out by H.Yagi  1998.10.30
					if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_DigitalOut, &aProp ) ){
						DBG_PRINTF( ("DVDWDM:   SetAudioProperty(DigitalOut) Error\n\r") );
						DBG_BREAK();
					}
					pHwDevExt->m_AudioDigitalOut = aProp;
*************/                 
					if( (*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo)) &
						(KSAUDDECOUTMODE_STEREO_ANALOG) ){
						aProp = AudioOut_Decoded;
					}else{
						aProp = AudioOut_Encoded;
					}
/************* commented out by H.Yagi  1998.10.30
					if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_AudioOut, &aProp ) ){
						DBG_PRINTF( ("DVDWDM:   SetAudioProperty(AudioOut) Error\n\r") );
						DBG_BREAK();
					}
					pHwDevExt->m_AudioEncode = aProp;
*************/                 
					break;
				
				default:
					pSrb->Status = STATUS_NOT_IMPLEMENTED;
					break;
			}
			break;
			
		case 1:
			DBG_PRINTF( ("DVDWDM:   SetAudioProperty 1\n\r") );
			SetCppProperty( pSrb );
			break;
			
		case 2:
			DBG_PRINTF( ("DVDWDM:   SetAudioProperty 2\n\r") );
//            DBG_BREAK();
			
			SetAudioRateChange( pSrb );
			
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:   SetAudioProperty ----- default\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}


void GetSubpicProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
		case 0:
			DBG_PRINTF( ("DVDWDM:   GetSubpicProperty 0\n\r") );
			pSrb->Status = STATUS_SUCCESS;
			break;
		 
		case 1:
			DBG_PRINTF( ("DVDWDM:   GetSubpicProperty 1\n\r") );
			GetCppProperty( pSrb, strmSubpicture );
			break;
			
		case 2:
			DBG_PRINTF( ("DVDWDM:   GetSubpicProperty 2\n\r") );
			
			GetSubpicRateChange( pSrb );
			
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:   GetSubpicProperty ----- default\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}


void SetSubpicProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	
	pSrb->Status = STATUS_SUCCESS;
	
	switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
		case 0:
			DBG_PRINTF( ("DVDWDM:   SetSubicProperty 0\n\r") );
			switch( pSrb->CommandData.PropertyInfo->Property->Id ){
				case KSPROPERTY_DVDSUBPIC_PALETTE:
					DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDSUBPIC_PALETTE\n\r") );
					PKSPROPERTY_SPPAL   ppal;
					BYTE        paldata[48];
					int i;
					ppal = (PKSPROPERTY_SPPAL)pSrb->CommandData.PropertyInfo->PropertyInfo;
					for( i=0; i<16; i++ ){
						paldata[i*3+0] = (BYTE)ppal->sppal[i].Y;
						paldata[i*3+1] = (BYTE)ppal->sppal[i].V;      // -> Cr
						paldata[i*3+2] = (BYTE)ppal->sppal[i].U;      // -> Cb
					}
					if( !pHwDevExt->dvdstrm.SetSubpicProperty( SubpicProperty_Palette, &paldata )){
						DBG_PRINTF( ("DVDWDM:   SetSubpic Palette Error\n\r") );
						DBG_BREAK();
					}
					pSrb->Status = STATUS_SUCCESS;
					break;

				case KSPROPERTY_DVDSUBPIC_HLI:
					DBG_PRINTF( ("DVDWDM:       KSPROPERTY_DVDSUBPIC_HLI\n\r") );
					PKSPROPERTY_SPHLI       phli;
					pSrb->Status = STATUS_SUCCESS;

					phli = (PKSPROPERTY_SPHLI) pSrb->CommandData.PropertyInfo->PropertyInfo;
					pHwDevExt->m_HlightControl.Set( phli );
					
					break;
				
				case KSPROPERTY_DVDSUBPIC_COMPOSIT_ON:
					DWORD   spProp;
					if( *((PKSPROPERTY_COMPOSIT_ON)pSrb->CommandData.PropertyInfo->PropertyInfo )){
						DBG_PRINTF( ("DVDWDM:   KSPROPERTY_DVDSUBPIC_COMPOSIT_ON\n\r") );
						spProp = Subpic_On;
					}else{
						DBG_PRINTF( ("DVDWDM:   KSPROPERTY_DVDSUBPIC_COMPOSIT_OFF\n\r") );
						spProp = Subpic_Off;
					}
					if( !pHwDevExt->dvdstrm.SetSubpicProperty( SubpicProperty_State, &spProp ) ){
						DBG_PRINTF( ("DVDWDM:   Set Subpic Mute Error\n\r") );
						DBG_BREAK();
					}
					pHwDevExt->m_SubpicMute = spProp;
					pSrb->Status = STATUS_SUCCESS;
					
/********************* for test OSD start ****
					OsdDataStruc    TestOSD;
					DWORD           swOSD;
					if( spProp == Subpic_On ){
						swOSD = Video_OSD_On;
					}else{
						swOSD = Video_OSD_Off;
					}
					TestOSD.OsdType = OSD_TYPE_ZIVA;
					TestOSD.pNextData = NULL;
					TestOSD.pData = &goweb[0];
					TestOSD.dwOsdSize = sizeof( goweb );
					DBG_PRINTF( ("DVDWDM:TEST OSD pData=%08x, Size=%08x\n\r", TestOSD.pData, TestOSD.dwOsdSize ) );                    
					if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDData, &TestOSD ) ){
						DBG_PRINTF( ("DVDWDM:       OSD Data Error!\n\r") );
						DBG_BREAK();
					}
					if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD ) ){
						DBG_PRINTF( ("DVDWDM:       OSD S/W Error!\n\r") );
						DBG_BREAK();
					}
********************* for test OSD start *****/
					break;
					
				default:
					pSrb->Status = STATUS_SUCCESS;
					break;
			}
			break;
			
		case 1:
			DBG_PRINTF( ("DVDWDM:   SetSubpicProperty 1\n\r") );
			SetCppProperty( pSrb );
			break;
			
		case 2:
			DBG_PRINTF( ("DVDWDM:   SetSubpicProperty 2\n\r") );
//            DBG_BREAK();
			
			SetSubpicRateChange( pSrb );
			
			pSrb->Status = STATUS_SUCCESS;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:   SetSubpicProperty ----- default\n\r") );
			DBG_BREAK();
			pSrb->Status = STATUS_SUCCESS;
			break;
	}
}


//--- 98.06.01 S.Watanabe
//void GetNtscProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
//
//    switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
//        case 0:
//            DBG_PRINTF( ("DVDWDM:   GetNtscProperty 0\n\r") );
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//         
//        default:
//            DBG_PRINTF( ("DVDWDM:   GetNtscProperty ----- default\n\r") );
//            DBG_BREAK();
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//    }
//}
//
//
//void SetNtscProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//    PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
//    
//    switch( pSrb->CommandData.PropertyInfo->PropertySetID ){
//        case 0:
//            DBG_PRINTF( ("DVDWDM:   SetNtscProperty 0\n\r") );
//            switch( pSrb->CommandData.PropertyInfo->Property->Id ){
//                case KSPROPERTY_COPY_MACROVISION:
//                    DBG_PRINTF( ("DVDWDM:       KSPROPERTY_COPY_MACROVISION 0\n\r") );
//                    PKS_COPY_MACROVISION pLevel;
//                    DWORD           apsLevel;
//                    VideoAPSStruc   vAPS;
//                    
//                    pLevel = (PKS_COPY_MACROVISION)pSrb->CommandData.PropertyInfo->PropertyInfo;
//                    apsLevel = pLevel->MACROVISIONLevel;
//
//                    switch( (apsLevel&0x03) ){
//                        case 0:
//                            pHwDevExt->m_APSType = ApsType_Off;
//                            break;
//                        case 1:
//                            pHwDevExt->m_APSType = ApsType_1;
//                            break;
//                        case 2:
//                            pHwDevExt->m_APSType = ApsType_2;
//                            break;
//                        case 3:
//                            pHwDevExt->m_APSType = ApsType_3;
//                            break;
//                    }
//                    vAPS.APSType = (APSTYPE)pHwDevExt->m_APSType;
//                    vAPS.CgmsType = (CGMSTYPE)pHwDevExt->m_CgmsType;
//                    if( !pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_APS, &vAPS ) ){
//                        DBG_PRINTF( ("DVDWDM:   Set VideoProperty APS Error\n\r") );
//                        DBG_BREAK();
//                    }
//                    break;
//            }
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//            
//        default:
//            DBG_PRINTF( ("DVDWDM:   SetNtscProperty ----- default\n\r") );
//            DBG_BREAK();
//            pSrb->Status = STATUS_SUCCESS;
//            break;
//    }
//}
//--- End.

VOID SetAudioID( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc )
{
	DWORD   strID;
	DWORD   aPropChannel, aProp, aPropFS;
	
	strID = GetStreamID( pStruc->Data );

	switch( (strID & 0xF8) ){
		case 0x80:
			aProp = AudioType_AC3;
			aPropFS = 48000;;
			break;
			
		case 0xA0:
			aProp = AudioType_PCM;
			aPropFS = 48000;                    // 96000?
			break;
			
		case 0xC0:
			aProp = AudioType_MPEG1;
			aPropFS = 48000;
			break;
			
		case 0xD0:
			aProp = AudioType_MPEG2;
			aPropFS = 48000;
			break;

		default:
			DBG_PRINTF( ("DVDWDM:   This is not Audio Packet data\n\r") );
			DBG_BREAK();
//            break;
            return;
	}

	if( pHwDevExt->m_AudioType != aProp ){
		DBG_PRINTF( ("DVDWDM:   Audio TYPE is cahnge\n\r") );
		if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_Type, &aProp ) ){
			DBG_PRINTF( ("DVDWDM:   SetAudioProperty(Audio Type) Error\n\r") );
			DBG_BREAK();
		}
		pHwDevExt->m_AudioType = aProp;
		
		if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_Sampling, &aPropFS ) ){
			DBG_PRINTF( ("DVDWDM:   SetAudioProperty(Audio Sampling) Error\n\r") );
			DBG_BREAK();
		}
		pHwDevExt->m_AudioFS = aPropFS;
	}

	aPropChannel = (strID & 0x07);          // channel number
	
	DBG_PRINTF( ("DVDWDM:   Audio CHANNEL # = 0x%x\n\r", aPropChannel ) );
	
	if( pHwDevExt->m_AudioChannel != aPropChannel ){
		if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_Number, &aPropChannel ) ){
				DBG_PRINTF( ("DVDWDM:   Set Audio Property( channel) Error\n\r") );
				DBG_BREAK();
		}
		pHwDevExt->m_AudioChannel = aPropChannel;
	}
}


VOID SetSubpicID( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc )
{
	DWORD   strID;
	DWORD   spPropChannel;
	
	strID = GetStreamID( pStruc->Data );
	
	spPropChannel = (strID & 0x1F);          // channel number
	
	DBG_PRINTF( ("DVDWDM:   Subpic channel # = 0x%x\n\r", spPropChannel ) );

	if( pHwDevExt->m_SubpicChannel != spPropChannel ){
		if( !pHwDevExt->dvdstrm.SetSubpicProperty( SubpicProperty_Number, &spPropChannel ) ){
				DBG_PRINTF( ("DVDWDM:   Set Subpic Property(channel) Error\n\r") );
				DBG_BREAK();
		}
		pHwDevExt->m_SubpicChannel = spPropChannel;
	}
}


DWORD   GetStreamID( void *pBuff )
{
	PUCHAR  pDat = (PUCHAR)pBuff;
	UCHAR   strID, subID;
	
	strID = *( pDat + 17 );
	
	if( strID==0xBD ){              // Private stream 1(AC-3/LPCM/Subpic)
		subID = *(pDat+(*(pDat+22)+23));
		return( (DWORD)subID );
	}
	
	return( strID );

/****************************************
	// Check Video Stream
	if( strID == 0xE0 ){
		return( (DWORD)strID );
	}
	// Check MPEG Audio
	else if( ( strID & 0xC0 )==0xC0 ){      // MPEG1 Audio
		return( (DWORD)strID );
	}
	else if( ( strID & 0xD0 )==0xD0 ){      // MPEG2 Audio
		return( (DWORD)strID );
	}
	// Check private stream 1 (AC-3/PCM/Subpic)
	else{
		subID = *(pDat+(*(pDat+22)+23));
		return( (DWORD)subID );
	}
****************************************/    
}
		

void SetVideoRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:   SetVideoRateChange\n\r") );
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KS_AM_RATE_SimpleRateChange:
			{
				KS_AM_SimpleRateChange  *pRateChange;
				PHW_DEVICE_EXTENSION    pHwDevExt;
				REFERENCE_TIME          NewStartTime;
				LONG                    NewRate, PrevRate;
//                DWORD                   foo, bar;

				DBG_PRINTF( ("DVDWDM:       KS_AM_RATE_SimpleRateChange\n\r") );
				
				pRateChange = (KS_AM_SimpleRateChange *)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
                // 1998.9.18 K.Ishizaki
                if( pRateChange->StartTime >=0){ 
                    NewStartTime = pRateChange->StartTime;
                } else {
                    NewStartTime = pHwDevExt->ticktime.GetStreamTime();
                }
                // End
				NewRate = ( pRateChange->Rate <0 )? -pRateChange->Rate:pRateChange->Rate;

				DBG_PRINTF( ("DVDWDM:     ReceiveData \n\r" ) );
				DBG_PRINTF( ("DVDWDM:       StartTime     = 0x%s\n\r", DebugLLConvtoStr( NewStartTime, 16 ) ) );
				DBG_PRINTF( ("DVDWDM:       NewRate       = %d\n\r", NewRate ) );
				DBG_PRINTF( ("DVDWDM:       CurrentTime   = 0x%s\n\r", DebugLLConvtoStr( pHwDevExt->ticktime.GetStreamTime(), 16 ) ));
				
				DBG_PRINTF( ("DVDWDM:     CurrentData\n\r") );
//                DBG_PRINTF( ("DVDWDM:       InterceptTime = 0x%08x\n\r", pHwDevExt->VideoInterceptTime ) );
//                DBG_PRINTF( ("DVDWDM:       StartTime     = 0x%08x\n\r", pHwDevExt->VideoStartTime ) );

				PrevRate = pHwDevExt->Rate;
				pHwDevExt->Rate = NewRate;

/////////////// 98.07.29  H.Yagi  start
                pHwDevExt->OldCompleteRate = pHwDevExt->NewCompleteRate;
                pHwDevExt->NewCompleteRate = pRateChange->Rate;
/////////////// 98.07.29  H.Yagi  end

//				if( NewRate == 10000 ){
//					pHwDevExt->VideoInterceptTime = 0;
//					pHwDevExt->VideoStartTime = 0;
//				}else{
					pHwDevExt->VideoInterceptTime = (-NewStartTime) * 10000 / NewRate + NewStartTime;
					pHwDevExt->VideoStartTime = NewStartTime;
//				}
				SetRateChange( pHwDevExt, PrevRate );

			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KS_AM_RATE_ExactRateChange:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case KS_AM_RATE_MaxFullDataRate:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case KS_AM_RATE_Step:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
	}
}

void GetVideoRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	
	DBG_PRINTF( ("DVDWDM:   GetVideoRateChange\n\r") );
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KS_AM_RATE_SimpleRateChange:
			{
				KS_AM_SimpleRateChange *pRateChange;

				DBG_PRINTF( ("DVDWDM:   KS_AM_RATE_SimpleRateChange\n\r") );
				
				pSrb->ActualBytesTransferred = sizeof( KS_AM_RATE_SimpleRateChange );
				pRateChange = (KS_AM_SimpleRateChange *)pSrb->CommandData.PropertyInfo->PropertyInfo;

				pRateChange->StartTime = pHwDevExt->VideoStartTime;
				pRateChange->Rate = pHwDevExt->Rate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KS_AM_RATE_ExactRateChange:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
			
		case KS_AM_RATE_MaxFullDataRate :
			{
				KS_AM_MaxFullDataRate *pMaxRate;
				
				DBG_PRINTF( ("DVVDWDM:  KS_AM_RATE_MaxFullRate\n\r") );
				
				pSrb->ActualBytesTransferred = sizeof( KS_AM_RATE_MaxFullDataRate);
				pMaxRate = (KS_AM_MaxFullDataRate *)pSrb->CommandData.PropertyInfo->PropertyInfo;
				*pMaxRate = VIDEO_MAX_FULL_RATE;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case KS_AM_RATE_Step:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}


void SetAudioRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:   SetAudioRateChange\n\r") );
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KS_AM_RATE_SimpleRateChange:
			{
				KS_AM_SimpleRateChange  *pRateChange;
				PHW_DEVICE_EXTENSION    pHwDevExt;
				REFERENCE_TIME          NewStartTime;
				LONG                    NewRate;
				
				DBG_PRINTF( ("DVDWDM:       KS_AM_RATE_SimpleRateChange\n\r") );
				
				pRateChange = (KS_AM_SimpleRateChange *)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
                // 1998.9.18 K.Ishizaki
                if( pRateChange->StartTime >=0) {
                    NewStartTime = pRateChange->StartTime;
                } else {
                    NewStartTime = pHwDevExt->ticktime.GetStreamTime();
                }
                // End
				NewRate = ( pRateChange->Rate <0 )? -pRateChange->Rate:pRateChange->Rate;

				DBG_PRINTF( ("DVDWDM:     ReceiveData \n\r" ) );
				DBG_PRINTF( ("DVDWDM:       StartTime     = 0x%s\n\r", DebugLLConvtoStr( NewStartTime, 16 ) ) );
				DBG_PRINTF( ("DVDWDM:       NewRate       = %d\n\r", NewRate ) );
				DBG_PRINTF( ("DVDWDM:       CurrentTime   = 0x%s\n\r", DebugLLConvtoStr( pHwDevExt->ticktime.GetStreamTime(), 16 ) ));
				
//                DBG_PRINTF( ("DVDWDM:     CurrentData\n\r") );
//                DBG_PRINTF( ("DVDWDM:       InterceptTime = 0x%08x\n\r", pHwDevExt->VideoInterceptTime ) );
//                DBG_PRINTF( ("DVDWDM:       StartTime     = 0x%08x\n\r", pHwDevExt->VideoStartTime ) );
				DBG_PRINTF( ("DVDWDM:       Rate          = %d\n\r", pHwDevExt->Rate ) );

//				if( NewRate == 10000 ){
//					pHwDevExt->AudioInterceptTime = 0;
//					pHwDevExt->AudioStartTime = 0;
//				}else{
					pHwDevExt->AudioInterceptTime = (-NewStartTime) * 10000 / NewRate + NewStartTime;
					pHwDevExt->AudioStartTime = NewStartTime;
//				}
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KS_AM_RATE_ExactRateChange:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case KS_AM_RATE_MaxFullDataRate:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case KS_AM_RATE_Step:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
	}
}

void GetAudioRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	
	DBG_PRINTF( ("DVDWDM:   GetAudioRateChange\n\r") );
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KS_AM_RATE_SimpleRateChange:
			{
				KS_AM_SimpleRateChange *pRateChange;

				DBG_PRINTF( ("DVDWDM:   KS_AM_RATE_SimpleRateChange\n\r") );
				
				pSrb->ActualBytesTransferred = sizeof( KS_AM_RATE_SimpleRateChange );
				pRateChange = (KS_AM_SimpleRateChange *)pSrb->CommandData.PropertyInfo->PropertyInfo;

				pRateChange->StartTime = pHwDevExt->AudioStartTime;
				pRateChange->Rate = pHwDevExt->Rate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KS_AM_RATE_ExactRateChange:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
			
		case KS_AM_RATE_MaxFullDataRate :
			{
				KS_AM_MaxFullDataRate *pMaxRate;
				
				DBG_PRINTF( ("DVVDWDM:  KS_AM_RATE_MaxFullRate\n\r") );
				
				pSrb->ActualBytesTransferred = sizeof( KS_AM_RATE_MaxFullDataRate);
				pMaxRate = (KS_AM_MaxFullDataRate *)pSrb->CommandData.PropertyInfo->PropertyInfo;
				*pMaxRate = AUDIO_MAX_FULL_RATE;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case KS_AM_RATE_Step:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}


void SetSubpicRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DBG_PRINTF( ("DVDWDM:   SetSubpicRateChange\n\r") );
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KS_AM_RATE_SimpleRateChange:
			{
				KS_AM_SimpleRateChange  *pRateChange;
				PHW_DEVICE_EXTENSION    pHwDevExt;
				REFERENCE_TIME          NewStartTime;
				LONG                    NewRate;
				
				DBG_PRINTF( ("DVDWDM:       KS_AM_RATE_SimpleRateChange\n\r") );
				
				pRateChange = (KS_AM_SimpleRateChange *)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
                // 1998.9 18 K.Ishizaki
                if( pRateChange->StartTime >=0) {
                    NewStartTime = pRateChange->StartTime;
                } else {
                    NewStartTime = pHwDevExt->ticktime.GetStreamTime();
                }
                // End
				NewRate = ( pRateChange->Rate <0 )? -pRateChange->Rate:pRateChange->Rate;

				DBG_PRINTF( ("DVDWDM:     ReceiveData \n\r" ) );
				DBG_PRINTF( ("DVDWDM:       StartTime     = 0x%s\n\r", DebugLLConvtoStr( NewStartTime, 16 ) ) );
				DBG_PRINTF( ("DVDWDM:       NewRate       = %d\n\r", NewRate ) );
				DBG_PRINTF( ("DVDWDM:       CurrentTime   = 0x%s\n\r", DebugLLConvtoStr( pHwDevExt->ticktime.GetStreamTime(), 16 ) ));
				
//                DBG_PRINTF( ("DVDWDM:     CurrentData\n\r") );
//                DBG_PRINTF( ("DVDWDM:       InterceptTime = 0x%08x\n\r", pHwDevExt->VideoInterceptTime ) );
//                DBG_PRINTF( ("DVDWDM:       StartTime     = 0x%08x\n\r", pHwDevExt->VideoStartTime ) );
				DBG_PRINTF( ("DVDWDM:       Rate          = %d\n\r", pHwDevExt->Rate ) );

//				if( NewRate == 10000 ){
//					pHwDevExt->SubpicInterceptTime = 0;
//					pHwDevExt->SubpicStartTime = 0;
//				}else{
					pHwDevExt->SubpicInterceptTime = (-NewStartTime) * 10000 / NewRate + NewStartTime;
					pHwDevExt->SubpicStartTime = NewStartTime;
//				}

			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KS_AM_RATE_ExactRateChange:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case KS_AM_RATE_MaxFullDataRate:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
		case KS_AM_RATE_Step:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		
	}
}

void GetSubpicRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	
	DBG_PRINTF( ("DVDWDM:   GetSubpicRateChange\n\r") );
	
	switch( pSrb->CommandData.PropertyInfo->Property->Id ){
		case KS_AM_RATE_SimpleRateChange:
			{
				KS_AM_SimpleRateChange *pRateChange;

				DBG_PRINTF( ("DVDWDM:   KS_AM_RATE_SimpleRateChange\n\r") );
				
				pSrb->ActualBytesTransferred = sizeof( KS_AM_RATE_SimpleRateChange );
				pRateChange = (KS_AM_SimpleRateChange *)pSrb->CommandData.PropertyInfo->PropertyInfo;

				pRateChange->StartTime = pHwDevExt->SubpicStartTime;
				pRateChange->Rate = pHwDevExt->Rate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
			
		case KS_AM_RATE_ExactRateChange:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
			
		case KS_AM_RATE_MaxFullDataRate :
			{
				KS_AM_MaxFullDataRate *pMaxRate;
				
				DBG_PRINTF( ("DVVDWDM:  KS_AM_RATE_MaxFullRate\n\r") );
				
				pSrb->ActualBytesTransferred = sizeof( KS_AM_RATE_MaxFullDataRate);
				pMaxRate = (KS_AM_MaxFullDataRate *)pSrb->CommandData.PropertyInfo->PropertyInfo;
				*pMaxRate = SUBPIC_MAX_FULL_RATE;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		
		case KS_AM_RATE_Step:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}


void SetRateChange( PHW_DEVICE_EXTENSION pHwDevExt, LONG PrevRate )
{
	DWORD   dProp;
	PHW_STREAM_REQUEST_BLOCK    pTmp;
	pTmp = NULL;

	DBG_PRINTF( ("DVDWDM:   SetRateChange\n\r") );
	DBG_PRINTF( ("DVDWDM:       Rate = 0x%08x\n\r", pHwDevExt->Rate ) );

	// Maybe buggy? use video rate, start time, and intercept time
	pHwDevExt->StartTime = pHwDevExt->VideoStartTime;
	pHwDevExt->InterceptTime = pHwDevExt->VideoInterceptTime;

	if( pHwDevExt->Rate == 10000 ){	// Normal[h
		if( PrevRate < 10000 ) // Scan
		{
			// Flush Scheduler SRB queue.

#ifndef		REARRANGEMENT
			FlushQueue(pHwDevExt);
#else
			while( (pTmp=pHwDevExt->scheduler.getSRB())!=NULL ){
//				pTmp->Status = STATUS_CANCELLED;
				pTmp->Status = STATUS_SUCCESS;
				CallAtStreamCompleteNotify( pTmp, pTmp->Status );
			}
#endif		REARRANGEMENT

			if( pHwDevExt->dvdstrm.GetState() != Stop )
				pHwDevExt->dvdstrm.Stop();
			pHwDevExt->ticktime.SetStreamTime( pHwDevExt->StartTime );
		}
		
		if( PrevRate > 10000 ) // Slow
		{
			// Normal Play
			if( pHwDevExt->dvdstrm.GetState() == Slow )
			{
				if( !pHwDevExt->dvdstrm.Play() ){
					DBG_PRINTF( ("DVDWDM:   dvdstrm.Play Error\n\r") );
					DBG_BREAK();
				}
			};
		}

	}else if( pHwDevExt->Rate < 10000 ){	// Scan[h
		if( PrevRate == 10000 )	// Normal
		{
			// Flush Scheduler SRB queue.

#ifndef		REARRANGEMENT
			FlushQueue(pHwDevExt);
#else
			while( (pTmp=pHwDevExt->scheduler.getSRB())!=NULL ){
//				pTmp->Status = STATUS_CANCELLED;
				pTmp->Status = STATUS_SUCCESS;
				CallAtStreamCompleteNotify( pTmp, pTmp->Status );
			}
#endif		REARRANGEMENT

			if( pHwDevExt->dvdstrm.GetState() != Stop )
				pHwDevExt->dvdstrm.Stop();
		}
		if( PrevRate > 10000 )	// Slow
		{
			if( pHwDevExt->dvdstrm.GetState() != Stop )
			{
#ifndef		REARRANGEMENT
//				FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

				pHwDevExt->dvdstrm.Stop();
			}
		};
//////        if( PrevRate < 10000 && pHwDevExt->Rate != PrevRate ) // Scan
        if( PrevRate < 10000 && pHwDevExt->NewCompleteRate != pHwDevExt->OldCompleteRate ) // 98.07.29 H.Yagi
		{

#ifndef		REARRANGEMENT
			FlushQueue(pHwDevExt);
#else
			while( (pTmp=pHwDevExt->scheduler.getSRB())!=NULL ){
//				pTmp->Status = STATUS_CANCELLED;
				pTmp->Status = STATUS_SUCCESS;
				CallAtStreamCompleteNotify( pTmp, pTmp->Status );
			}
#endif		REARRANGEMENT

			if( pHwDevExt->dvdstrm.GetState() != Stop )
				pHwDevExt->dvdstrm.Stop();
		};
		pHwDevExt->ticktime.SetStreamTime( pHwDevExt->StartTime );

	}else{									// Slow[h
		if( PrevRate == 10000 ) // Normal
		{
			if( pHwDevExt->dvdstrm.GetState() == Play )
			{
				dProp = pHwDevExt->Rate/10000;
				if( dProp>1 && dProp<16 ){
					if( !pHwDevExt->dvdstrm.Slow( dProp ) ){
						DBG_PRINTF( ("DVDWDM:   dvdstrm.Slow Error\n\r") );
						DBG_BREAK();
					}
				}else{
					DBG_PRINTF( ("DVDWDM:   Slow Speed is invalid 0x%0x\n\r", dProp ) );
					DBG_BREAK();
				}
			};
		}
		if( PrevRate < 10000 ) // Scan
		{
			// Flush Scheduler SRB queue.

#ifndef		REARRANGEMENT
			FlushQueue(pHwDevExt);
#else
			while( (pTmp=pHwDevExt->scheduler.getSRB())!=NULL ){
//				pTmp->Status = STATUS_CANCELLED;
				pTmp->Status = STATUS_SUCCESS;
				CallAtStreamCompleteNotify( pTmp, pTmp->Status );
			}
#endif		REARRANGEMENT

			if( pHwDevExt->dvdstrm.GetState() != Stop )
				pHwDevExt->dvdstrm.Stop();
			pHwDevExt->ticktime.SetStreamTime( pHwDevExt->StartTime );
		};

		if( PrevRate > 10000 ) // Slow
		{
			if( pHwDevExt->dvdstrm.GetState() == Slow )
			{
				dProp = pHwDevExt->Rate/10000;
				if( dProp>1 && dProp<16 ){
					if( !pHwDevExt->dvdstrm.Slow( dProp ) ){
						DBG_PRINTF( ("DVDWDM:   dvdstrm.Slow Error\n\r") );
						DBG_BREAK();
					}
				}else{
					DBG_PRINTF( ("DVDWDM:   Slow Speed is invalid 0x%0x\n\r", dProp ) );
					DBG_BREAK();
				}
			};
		}


	}
	
	pHwDevExt->ticktime.SetRate( pHwDevExt->Rate );
	
	if( !pHwDevExt->dvdstrm.SetAudioProperty( AudioProperty_Number, &(pHwDevExt->m_AudioChannel) ) ){
		DBG_PRINTF( ("DVDWDM:   Set Audio channel Error\n\r") );
		DBG_BREAK();
	}
	if( !pHwDevExt->dvdstrm.SetSubpicProperty( SubpicProperty_Number, &(pHwDevExt->m_SubpicChannel) ) ){
		DBG_PRINTF( ("DVDWDM:   Set Subpic channel Error\n\r") );
		DBG_BREAK();
	}
}


ULONGLONG ConvertPTStoStrm( ULONG pts )
{
	// return value is 100ns units.
	ULONGLONG   strm;
	
	strm = (ULONGLONG)pts;
	strm &= 0x0ffffffff;
	strm = (strm * 10000) / 90;
	
	return( strm );
}

ULONG ConvertStrmtoPTS( ULONGLONG strm )
{
	ULONGLONG   temp;
	ULONG       pts;
	
	//
	// we may lose some bits here, but we're only using the 32bit PTS anyway
	//
	
	temp = (strm * 9 + 500 ) / 1000;
	temp &= 0x0ffffffff;
	pts = (ULONG)temp;
	
	return( pts );
}

BOOL    ToshibaNotePC( PHW_STREAM_REQUEST_BLOCK pSrb)
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);
	BOOL    ret;
	ret = FALSE;

	DWORD   dwVideoOut, tmpTest;
	LONG    dwVideoNum, i;
	
	tmpTest = 0x00000001;
	dwVideoOut = 0;
	dwVideoNum = 0;
	if( !pHwDevExt->dvdstrm.GetCapability( DigitalVideoOut, &dwVideoOut ) ){
		DBG_PRINTF( ("DVDWDM:   GetCapability Error\n\r" ) );
		DBG_BREAK();
	}
	pHwDevExt->m_DVideoOut = dwVideoOut;
	DBG_PRINTF( ("DVDWDM:    Support DigitalVideoOut = 0x%08x\n\r",  dwVideoOut ) );
	
	for( i=0; i<32; i++ ){
		if( (dwVideoOut & tmpTest) != 0x0 ){
			dwVideoNum++;
		}
		tmpTest = tmpTest<<1;
	}
	pHwDevExt->m_DVideoNum = dwVideoNum;
	DBG_PRINTF( ("DVDWDM:    Support DigitalVideoOut Num = %d\n\r", dwVideoNum ) );

	if( pHwDevExt->m_DVideoNum == 1 ){          // if This is Notebook-PC, this value = 1.
		ret = TRUE;
	}else{
		ret = FALSE;
	}
 
   return( ret );
}

void USCC_Discontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{

	PHW_STREAM_REQUEST_BLOCK    pSrb;
	PKSSTREAM_HEADER    pPacket;

	DBG_PRINTF( ("DVDWDM:USCC_Discontinuity()\n\r") );


	if( pHwDevExt->pstroCC ){
		pSrb = pHwDevExt->ccque.get();
		if( pSrb ){
			//
			// we have a request, send a discontinuity
			//
			pSrb->Status = STATUS_SUCCESS;
			pPacket = pSrb->CommandData.DataBufferArray;

			pPacket->OptionsFlags = KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY |
							KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
							KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
			pPacket->DataUsed = 0;
			pSrb->NumberOfBuffers = 0;

			pPacket->PresentationTime.Time = pHwDevExt->ticktime.GetStreamTime();
			pPacket->Duration = 1000;

//            StreamClassStreamNotification( StreamRequestComplete,
//                            pSrb->StreamObject,
//                            pSrb );
			CallAtStreamCompleteNotify( pSrb, pSrb->Status );

		}
	}

}

void SetVideoRateDefault( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->VideoStartTime = 0;
	pHwDevExt->VideoInterceptTime = 0;
	pHwDevExt->Rate = VIDEO_MAX_FULL_RATE;
	pHwDevExt->StartTime = 0;
	pHwDevExt->InterceptTime = 0;
}

void SetAudioRateDefault( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->AudioStartTime = 0;
	pHwDevExt->AudioInterceptTime = 0;
}

void SetSubpicRateDefault( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->SubpicStartTime = 0;
	pHwDevExt->SubpicInterceptTime = 0;
}

//--- 98.06.01 S.Watanabe
#ifdef DBG
char * DebugLLConvtoStr( ULONGLONG val, int base )
{
	static char str[5][100];
	static int cstr = -1;

	int count = 0;
	int digit;
	char tmp[100];
	int i;

	if( ++cstr >= 5 )
		cstr = 0;

	if( base == 10 ) {
		for( ; ; ) {
			digit = (int)( val % 10 );
			tmp[count++] = (char)( digit + '0' );
			val /= 10;
			if( val == 0 )
				break;
		}
	}
	else if( base == 16 ) {
		for( ; ; ) {
			digit = (int)( val & 0xF );
			if( digit < 10 )
				tmp[count++] = (char)( digit + '0' );
			else
				tmp[count++] = (char)( digit - 10 + 'a' );
			val >>= 4;
			if( val == 0 )
				break;
		}
	}
	else
		DBG_BREAK();

	for( i = 0; i < count; i++ ) {
		str[cstr][i] = tmp[count-i-1];
	}
	str[cstr][i] = '\0';

	return str[cstr];
}
#endif
//--- End.

//--- 98.06.02 S.Watanabe
void TimerCppReset( PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    StreamClassCallAtNewPriority( NULL, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowTimerCppReset, pSrb );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pSrb->HwDeviceExtension, Low, (PHW_PRIORITY_ROUTINE)LowTimerCppReset, pSrb );
}

void LowTimerCppReset( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
//	BOOLEAN	bStatus;
//	BOOL bQueStatus = FALSE;

// Temporary
	if( pHwDevExt->pSrbCpp == NULL ) {
		DBG_PRINTF(( "DVDWDM: pSrbCpp is NULL!\r\n" ));
		return;
	}

	DBG_PRINTF( ("DVDWDM:TimerCppReset\r\n") );

	// cpp initialize
	if( pHwDevExt->bCppReset ) {
		if( pHwDevExt->dvdstrm.GetState() != Stop ){

#ifndef		REARRANGEMENT
//			FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

			pHwDevExt->dvdstrm.Stop();
		}
		if( !pHwDevExt->dvdstrm.CppInit() ){
			DBG_PRINTF( ("DVDWDM:       dvdstrm.CppInit Error\n\r") );
			DBG_BREAK();
		}
	}
	else {	// TitleKey
		if( pHwDevExt->dvdstrm.GetState() != Stop )
		{

#ifndef		REARRANGEMENT
//				FlushQueue(pHwDevExt);
#endif		REARRANGEMENT

			if( !pHwDevExt->dvdstrm.Stop() ){
				DBG_PRINTF( ("DVDWDM:       dvdstrm.Stop Error\n\r") );
				DBG_BREAK();
			};
		};
	}

	pHwDevExt->pSrbCpp = NULL;
	pHwDevExt->bCppReset = FALSE;

	pSrb->Status = STATUS_SUCCESS;

//    StreamClassStreamNotification( ReadyForNextStreamControlRequest,
//                                    pSrb->StreamObject );
//
//    StreamClassStreamNotification( StreamRequestComplete,
//                                    pSrb->StreamObject,
//                                    pSrb );
	DBG_PRINTF( ("DVDWDM:  Success return\r\n") );

	CallAtStreamCompleteNotify( pSrb, pSrb->Status );

	return;
}

BOOL SetCppFlag( PHW_DEVICE_EXTENSION pHwDevExt, BOOL NeedNotify )
{
	DBG_PRINTF(( "DVDWDM:SetCppFlag()\r\n" ));

    BOOL ret; 

//	ASSERT( pHwDevExt->pSrbCpp!=NULL );
    if(pHwDevExt->pSrbCpp==NULL ){
    	return( FALSE );
    }

// BUGBUG bΉ
// ĐȂ 500ms fBC
// {́AfR[_ł̍ĐI܂ő҂Ȃ΂ȂȂ

//	if( pHwDevExt->StreamState == WrapState_Decode ) {
	if( pHwDevExt->dvdstrm.GetState() != Stop ) {
		StreamClassScheduleTimer(
			NULL,
			pHwDevExt,
			500*1000,
			(PHW_TIMER_ROUTINE)TimerCppReset,
			pHwDevExt->pSrbCpp
			);
		DBG_PRINTF(( "DVDWDM:    ScheduleTimer 500ms\r\n" ));
        ret = TRUE;
	}
	else {
      // cpp initialize
        if( pHwDevExt->bCppReset ) {
            if( !pHwDevExt->dvdstrm.CppInit() ){
                DBG_PRINTF( ("DVDWDM:       dvdstrm.CppInit Error\n\r") );
                DBG_BREAK();
            }
        }
	if( pHwDevExt->pSrbCpp!=NULL){
        	if( NeedNotify==TRUE ){
            	pHwDevExt->pSrbCpp->Status = STATUS_SUCCESS;
            	CallAtStreamCompleteNotify( pHwDevExt->pSrbCpp,STATUS_SUCCESS );
        	}
        	pHwDevExt->pSrbCpp = NULL;
        	pHwDevExt->bCppReset = FALSE;
	}
		DBG_PRINTF(( "DVDWDM:    ScheduleTimer 000\r\n" ));
        ret = FALSE;
	}

    return( ret );
}
//--- End.


void    OpenTVControl( PHW_STREAM_REQUEST_BLOCK pSrb, OsdDataStruc dOsd )
{
//K.O MacroVision
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

    //  Clear the m_APSChange
    pHwDevExt->m_APSChange = FALSE;
    pHwDevExt->m_APSType = ApsType_Off;
	return;
//
/********* commented out all of this routine, because TVControl is handled
//         by display driver.    99.04.01  by H.Yagi
  
    DWORD   swOSD, swHKey;
    DisplayStatusStruc      dispStat;
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
    BOOL    statTV = FALSE;
    swHKey = DISABLE_TV;
    dispStat.AvailableDisplay = 0x0;
    dispStat.CurrentDisplay = 0x0;

    //  Clear the m_APSChange
    pHwDevExt->m_APSChange = FALSE;
    pHwDevExt->m_APSType = ApsType_Off;

    // turn off OSD
    swOSD = Video_OSD_Off;
    pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD );

    // Check TV-Control is available or not.
    if( pHwDevExt->m_bTVct==FALSE ){
        return;
    }

    // Get current display status.
    statTV = pHwDevExt->tvctrl.GetDisplayStatus( &dispStat );

    // Check current Display  (TV_BIT)
    if( (statTV==TRUE) && 
        ((dispStat.CurrentDisplay & TVCONTROL_TV_BIT )!=0) ){
        // display OSD data.
//        pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDData, &dOsd );
//        swOSD = Video_OSD_On;
//        pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD );
	;
    }

    DBG_PRINTF( ("DVDWDM:m_VideoOutputSource=%08x\n\r", pHwDevExt->m_OutputSource ) );
*******/
}


void    CloseTVControl( PHW_STREAM_REQUEST_BLOCK pSrb )
{
//K.O MacroVision
#ifndef	TVALD
    DWORD   swHKey;
#endif	TVALD
	DWORD	dProp;
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

    //  Clear the m_APSChange
    pHwDevExt->m_APSChange = FALSE;
    pHwDevExt->m_APSType = ApsType_Off;

    // restore OutputSource setting 
    dProp = pHwDevExt->m_OutputSource;
    pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );

#ifndef	TVALD
    if( pHwDevExt->m_bTVct==TRUE ){
        // Disable TV output mode
        swHKey = ENABLE_TV;
        pHwDevExt->tvctrl.SetTVOutput( swHKey );
	}
#endif	TVALD
	return;

/********* commented out all of this routine, because TVControl is handled
//         by display driver.    99.04.01  by H.Yagi

    DWORD   swOSD, swHKey, dProp;
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

    //  Clear the m_APSChange
    pHwDevExt->m_APSChange = FALSE;
    pHwDevExt->m_APSType = ApsType_Off;

    // restore OutputSource setting 
    dProp = pHwDevExt->m_OutputSource;
    pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
   
    // turn off OSD
    swOSD = Video_OSD_Off;
    pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD );

    // Check TV Control is available or not.
    if( pHwDevExt->m_bTVct==TRUE ){
        // Disable TV output mode
        swHKey = ENABLE_TV;
        pHwDevExt->tvctrl.SetTVOutput( swHKey );

        // restore OutputSource setting to default.
        dProp = pHwDevExt->m_OutputSource;
        pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );

    }
*******/

}


BOOL    VGADVDTVControl( PHW_STREAM_REQUEST_BLOCK pSrb, DWORD stat, OsdDataStruc dOsd )
{
    // Stat : OutputSource_VGA / OutPutSource_DVD

//K.O MacroVision
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

    if(( pHwDevExt->m_PCID==PC_TECRA750 || pHwDevExt->m_PCID==PC_TECRA780 )
       ||( pHwDevExt->m_PCID==PC_PORTEGE7000 || pHwDevExt->m_PCID==PC_TECRA8000 ))
	{
		if( pHwDevExt->m_APSType==ApsType_Off )
			return(TRUE);
		else
			return (FALSE);
	}
	return( TRUE );
	
/********* commented out all of this routine, because TVControl is handled
//         by display driver.    99.04.01  by H.Yagi
	
    DWORD   swOSD;
    DisplayStatusStruc      dispStat;
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
    DWORD dProp = OutputSource_DVD;
    dispStat.AvailableDisplay = 0x0;
    dispStat.CurrentDisplay = 0x0;

    if( pHwDevExt->m_PCID==PC_TECRA8000 ||	// Sofia or SkyE
        pHwDevExt->m_PCID==PC_PORTEGE7000 ) {
        return( FALSE );
    }

    // Check TV-Control is available or not.	// SC2 or SJ
    if( pHwDevExt->m_bTVct==FALSE ){
        // turn off OSD data.
        swOSD = Video_OSD_Off;
        pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD );

        if( stat==OutputSource_VGA ){
            if( pHwDevExt->m_APSType!=ApsType_Off ){
                // Chnage OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
             }else{
                // Chnage OutputSource_VGA
                dProp = OutputSource_VGA;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }
        }else{
            // Chnage OutputSource_DVD
            dProp = OutputSource_DVD;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }
        return( FALSE );
    }

    // Other PC
	// turn off OSD data.
    swOSD = Video_OSD_Off;
    pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD );

    if( stat==OutputSource_VGA ){
        if( pHwDevExt->m_APSType!=ApsType_Off ){
            // Chnage OutputSource_DVD
            dProp = OutputSource_DVD;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
         }else{
            // Chnage OutputSource_VGA
            dProp = OutputSource_VGA;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }
    }else{
        // Chnage OutputSource_DVD
        dProp = OutputSource_DVD;
        pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
	}            
    return( FALSE );

*********/
}


BOOL    MacroVisionTVControl( PHW_STREAM_REQUEST_BLOCK pSrb, DWORD stat, OsdDataStruc dOsd )
{
//K.O MacroVision
    // Stat : ApsType_Off / ApsType_1 / ApsType_2 / ApsType_3
//********* commented out all of this routine, because TVControl is handled
//         by display driver.    99.04.01  by H.Yagi

    DBG_PRINTF( ("DVDWDM:MacroVision TV Control\n\r") );
    
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
    DWORD   dProp = OutputSource_DVD;

#ifndef	TVALD
    DWORD   swHKey;
    // SkyE & Sofia
    if( pHwDevExt->m_PCID==PC_PORTEGE7000 || pHwDevExt->m_PCID==PC_TECRA8000 )
	{
        if( stat!=ApsType_Off )
		{            // MacroVision On
            // Disable TV output mode
            swHKey = DISABLE_TV;
            pHwDevExt->tvctrl.SetTVOutput( swHKey );
        }
		else
		{			// MacroVision Off
            swHKey = ENABLE_TV;
            pHwDevExt->tvctrl.SetTVOutput( swHKey );
        }
        return( TRUE );
    }
#endif	TVALD

    // Check TV-Control is available or not.
//    if( pHwDevExt->m_PCID==PC_TECRA750 || pHwDevExt->m_PCID==PC_TECRA780 )
    if(( pHwDevExt->m_PCID==PC_TECRA750 || pHwDevExt->m_PCID==PC_TECRA780 )
       ||( pHwDevExt->m_PCID==PC_PORTEGE7000 || pHwDevExt->m_PCID==PC_TECRA8000 ))
	{
        if( stat!=ApsType_Off)
		{
            // Chnage OutputSource_DVD
            dProp = OutputSource_DVD;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }
		else
		{
            if( pHwDevExt->m_OutputSource==OutputSource_VGA )
			{
                // Chnage OutputSource_VGA
                dProp = OutputSource_VGA;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        	}
			else
			{
                // Chnage OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }
        }
        return( TRUE );
    }

    // Other PC
    // turn off OSD data.
    if( stat!=ApsType_Off)
	{
        // Chnage OutputSource_DVD
        dProp = OutputSource_DVD;
        pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
    }
	else
	{
        if( pHwDevExt->m_OutputSource==OutputSource_VGA )
		{
            // Chnage OutputSource_VGA
            dProp = OutputSource_VGA;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }
		else
		{
            // Chnage OutputSource_DVD
            dProp = OutputSource_DVD;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }
    }
	return( TRUE );

/********* commented out all of this routine, because TVControl is handled
//         by display driver.    99.04.01  by H.Yagi

    DBG_PRINTF( ("DVDWDM:MacroVision TV Control\n\r") );
    
    BOOL    statTV = FALSE;
    DWORD   swOSD, swHKey;
    DisplayStatusStruc      dispStat;
    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
    DWORD   dProp = OutputSource_DVD;
    dispStat.AvailableDisplay = 0x0;
    dispStat.CurrentDisplay = 0x0;

    // Check TV-Control is available or not.
    if( pHwDevExt->m_bTVct==FALSE ){		// SC2 or SJ
        // turn off OSD data.
        swOSD = Video_OSD_Off;
        pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD );

        if( stat!=ApsType_Off){
            if( pHwDevExt->m_OutputSource==OutputSource_VGA ){
                // Chnage OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }else{
                // Chnage OutputSource_VGA
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }
        }else{
            if( pHwDevExt->m_OutputSource==OutputSource_VGA ){
                // Chnage OutputSource_VGA
                dProp = OutputSource_VGA;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }else{
                // Chnage OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }
        }
        return( TRUE );
    }

    // Get current display status.
    statTV = pHwDevExt->tvctrl.GetDisplayStatus( &dispStat );
    if( statTV==FALSE ){
        DBG_PRINTF( ("DVDWDM:TV Control is not available\n\r") );
        DBG_BREAK();
    }else{
        DBG_PRINTF( ("DVDWDM:GetDisplayStatus = %08x\n\r", dispStat.CurrentDisplay) );
        pHwDevExt->m_CurrentDisplay = dispStat.CurrentDisplay;
    }	

    // SkyE & Sofia
    if( pHwDevExt->m_PCID==PC_PORTEGE7000 ||
        pHwDevExt->m_PCID==PC_TECRA8000 ){

        if( stat!=ApsType_Off ){            // MacroVision On
            if( (dispStat.CurrentDisplay & TVCONTROL_TV_BIT)!=0 ){
                // set LCD only mode
                dispStat.SizeofStruc = sizeof( dispStat );
                dispStat.CurrentDisplay = TVCONTROL_LCD_BIT;
                statTV = pHwDevExt->tvctrl.SetDisplayStatus( &dispStat );
                if( statTV==FALSE ){
                    DBG_PRINTF( ("DVDWDM:TVControl error\n\r") );
                    DBG_BREAK();
                }
                // Change OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }else{
                // Chnage OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }
            // Disable TV output mode
            swHKey = DISABLE_TV;
            pHwDevExt->tvctrl.SetTVOutput( swHKey );

        }else{				// MacroVision Off

            if( dispStat.AvailableDisplay == TVCONTROL_TV_BIT ){
                // set LCD only mode
                dispStat.SizeofStruc = sizeof( dispStat );
                dispStat.CurrentDisplay = TVCONTROL_LCD_BIT;
                statTV = pHwDevExt->tvctrl.SetDisplayStatus( &dispStat );
                if( statTV==FALSE ){
                    DBG_PRINTF( ("DVDWDM:TVControl error\n\r") );
                    DBG_BREAK();
                }
                // Chnage OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }else{
                // Chnage OutputSource_DVD
                dProp = OutputSource_DVD;
                pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
            }
            // Enable TV output mode
            swHKey = ENABLE_TV;
            pHwDevExt->tvctrl.SetTVOutput( swHKey );

        }
        return( TRUE );
    }


            
    // Other PC
    // turn off OSD data.
    swOSD = Video_OSD_Off;
    pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OSDSwitch, &swOSD );

    if( stat!=ApsType_Off){
        if( pHwDevExt->m_OutputSource==OutputSource_VGA ){
            // Chnage OutputSource_DVD
            dProp = OutputSource_DVD;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }else{
            // Chnage OutputSource_VGA
            dProp = OutputSource_DVD;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }
    }else{
        if( pHwDevExt->m_OutputSource==OutputSource_VGA ){
            // Chnage OutputSource_VGA
            dProp = OutputSource_VGA;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }else{
            // Chnage OutputSource_DVD
            dProp = OutputSource_DVD;
            pHwDevExt->dvdstrm.SetVideoProperty( VideoProperty_OutputSource, &dProp );
        }
    }
	return( TRUE );

*******/
}


void    CallAtDeviceNextDeviceNotify( PHW_STREAM_REQUEST_BLOCK pSrb, NTSTATUS stat )
{
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );

	pSrb->Status = stat;
	StreamClassCallAtNewPriority( NULL,
								  pSrb->HwDeviceExtension,
								  LowToHigh,
								  (PHW_PRIORITY_ROUTINE)DeviceNextDeviceNotify,
								  pSrb
	);

}

void    DeviceNextDeviceNotify( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	ASSERT( KeGetCurrentIrql() != PASSIVE_LEVEL );

	StreamClassDeviceNotification( ReadyForNextDeviceRequest,
									pSrb->HwDeviceExtension );
}



void    CallAtDeviceCompleteNotify( PHW_STREAM_REQUEST_BLOCK pSrb, NTSTATUS stat )
{
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );

	pSrb->Status = stat;
	StreamClassCallAtNewPriority( NULL,
								  pSrb->HwDeviceExtension,
								  LowToHigh,
								  (PHW_PRIORITY_ROUTINE)DeviceCompleteNotify,
								  pSrb
	);

}

void    DeviceCompleteNotify( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	ASSERT( KeGetCurrentIrql() != PASSIVE_LEVEL );

	StreamClassDeviceNotification( DeviceRequestComplete,
									pSrb->HwDeviceExtension, pSrb );
}



void    CallAtStreamNextDataNotify( PHW_STREAM_REQUEST_BLOCK pSrb, NTSTATUS stat )
{
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );

	pSrb->Status = stat;
//    StreamClassCallAtNewPriority( NULL, pSrb->HwDeviceExtension, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamNextDataNotify, pSrb );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pSrb->HwDeviceExtension, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamNextDataNotify, pSrb );

}

void    StreamNextDataNotify( PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    ASSERT( KeGetCurrentIrql() != PASSIVE_LEVEL );

	StreamClassStreamNotification( ReadyForNextStreamDataRequest,
									pSrb->StreamObject );
}


void    CallAtStreamNextCtrlNotify( PHW_STREAM_REQUEST_BLOCK pSrb, NTSTATUS stat )
{
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );

	pSrb->Status = stat;
//    StreamClassCallAtNewPriority( NULL, pSrb->HwDeviceExtension, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamNextCtrlNotify, pSrb );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pSrb->HwDeviceExtension, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamNextCtrlNotify, pSrb );

}

void    StreamNextCtrlNotify( PHW_STREAM_REQUEST_BLOCK pSrb )
{
//    ASSERT( KeGetCurrentIrql() != PASSIVE_LEVEL );

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );
}



void    CallAtStreamCompleteNotify( PHW_STREAM_REQUEST_BLOCK pSrb, NTSTATUS stat )
{
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );

	pSrb->Status = stat;
//    StreamClassCallAtNewPriority( NULL, pSrb->HwDeviceExtension, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamCompleteNotify, pSrb );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pSrb->HwDeviceExtension, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamCompleteNotify, pSrb );

}

void    StreamCompleteNotify( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	ASSERT( KeGetCurrentIrql() != PASSIVE_LEVEL );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject, pSrb );
}




//void  CallAtStreamSignalMultipleNotify( PHW_DEVICE_EXTENSION pHwDevExt )
void  CallAtStreamSignalMultipleNotify( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );

    PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)(pSrb->HwDeviceExtension);

//    StreamClassCallAtNewPriority( NULL, pHwDevExt, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamSignalMultipleNotify, pHwDevExt );
    StreamClassCallAtNewPriority( pSrb->StreamObject, pHwDevExt, LowToHigh, (PHW_PRIORITY_ROUTINE)StreamSignalMultipleNotify, pHwDevExt );

}

void StreamSignalMultipleNotify( PHW_DEVICE_EXTENSION pHwDevExt )
{
	ASSERT( KeGetCurrentIrql() != PASSIVE_LEVEL );

   StreamClassStreamNotification( SignalMultipleStreamEvents,
									pHwDevExt->pstroYUV,
									&MY_KSEVENTSETID_VPNOTIFY,
									KSEVENT_VPNOTIFY_FORMATCHANGE );
}


void DumpPTSValue( PHW_STREAM_REQUEST_BLOCK pSrb )
{
    PHW_DEVICE_EXTENSION    pHwDevExt;
    PKSSTREAM_HEADER        pStruc;
    PUCHAR                  pDat;
    ULONG                   i, j, k;
//    DWORD                   pts;
//    DWORD                   csum = 0x0;

    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
/**************
    for( i=0; i<pSrb->NumberOfBuffers; i++ ){
        pts = 0;
        pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
        if( pStruc->DataUsed){
            pDat = (PUCHAR)pStruc->Data;
            if( *(pDat+21) & 0x80 ){
                pts +=((DWORD)(*(pDat+23) & 0x0E)) << 29;
                pts +=((DWORD)(*(pDat+24) & 0xFF)) << 22;
                pts +=((DWORD)(*(pDat+25) & 0xFE)) << 14;
                pts +=((DWORD)(*(pDat+26) & 0xFF)) <<  7;
                pts +=((DWORD)(*(pDat+27) & 0xFE)) >>  1;
                DBG_PRINTF( ("DVDWDM: **** PTS of Data = %08x\n\r", pts ) );
                DBG_PRINTF( ("DVDWDM: **** curr - prev = %08x\n\r", (pts-pHwDevExt->m_PTS) ) );
                pHwDevExt->m_PTS = pts;
            }
        }
    }
**************/

/************************
    for( i=0; i<pSrb->NumberOfBuffers; i++ ){
        pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
        if( pStruc->DataUsed){
            pDat = (PUCHAR)pStruc->Data;
            DBG_PRINTF( ("DVDWDM:********* Dump Data ********\n\r") );
            for( j=0; j<128; j++ ){
                DBG_PRINTF( (": ") );
                for( k=0; k<16; k++ ){
//                    DBG_PRINTF( (" %02x", *(pDat+(16*j+k)) ));
                    csum += (DWORD)(*(pDat+(16*j+k)));
                }
//                DBG_PRINTF( ("\n\r") );
                DBG_PRINTF( ("%04x, ", csum ) );
                csum = 0x0;
            }
            DBG_PRINTF( ("\n\r") );
        }
    }
************************/
    k = 0;
    for( i=0; i<pSrb->NumberOfBuffers; i++ ){
        pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
        if( pStruc->DataUsed){
            pDat = (PUCHAR)pStruc->Data;
            DBG_PRINTF( ("DVDWDM:***** Dump Data (16-47) *****\n\r") );
            DBG_PRINTF( (":") );
            for( j=16; j<48; j++ ){
                DBG_PRINTF( (" %02x", *(pDat+j) ));
            }
            DBG_PRINTF( ("\n\r") );
        }
    }


}

#ifndef		REARRANGEMENT
void	FlushQueue( PHW_DEVICE_EXTENSION pHwDevExt)
{
	PHW_STREAM_REQUEST_BLOCK    pTmp;
	int	wSrbptr;
	pTmp = NULL;
	DBG_PRINTF( ("DVDWDM:FlushQueue\n\r") );
	if(pHwDevExt->scheduler.checkTopSRB())
	{
		while((pTmp = pHwDevExt->scheduler.getSRB())!=NULL )
		{
			pTmp->Status = STATUS_SUCCESS;
			CallAtStreamCompleteNotify( pTmp, pTmp->Status );
			DBG_PRINTF( ("DVDWDM:FlushQueue-CompleteSrb = %x\n\r", pTmp) );
		}
	}
	for( wSrbptr = 0; wSrbptr < SRB_POINTER_MAX; wSrbptr++)
	{
		if (pHwDevExt->scheduler.m_SrbPointerTable[wSrbptr] != NULL)
		{
			pTmp = (PHW_STREAM_REQUEST_BLOCK)pHwDevExt->scheduler.m_SrbPointerTable[wSrbptr];		//get SRB pointer
			pTmp->Status = STATUS_SUCCESS;
			CallAtStreamCompleteNotify( pTmp, pTmp->Status );
			DBG_PRINTF( ("DVDWDM:FlushQueue-CompleteSrb = %x\n\r", pTmp) );
			pHwDevExt->scheduler.m_SrbPointerTable[wSrbptr] = NULL;
		}
	}
	memset(pHwDevExt->scheduler.m_SrbPointerTable, NULL, SRB_POINTER_MAX * 4);
	pHwDevExt->scheduler.m_SendPacketNumber = 0;
//	pHwDevExt->scheduler.InitRearrangement();
}
#endif		REARRANGEMENT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\halif.h ===
//***************************************************************************
//
//	FileName:
//		$Workfile: HALIF.H $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.WDM/HALIF.H 30    99/04/21 2:46p Yagi $
// $Modtime: 99/04/21 2:23p $
// $Nokeywords:$
//***************************************************************************
//     Date    |   Author     |  Description
//  -----------+--------------+--------------------------------------------
//  1997.12.04 |  Hideki Yagi | Add VideoProperty_FilmCamera.
//             |              | This Property is necessary to support WSS.
//  1998.02.19 |  Hideki Yagi | Add AudioProperty_AC3OutputMode.
//             |              | This Property is necessary to support KARAOKE.
//  1998.03.27 |  Hideki Yagi | Add GetCapability method.
//             |              | Add VideoProperty_SquarePixel.
//  1998.05.01 |  Hideki Yagi | Add SubpicProperty_FlushBuff.
//  1998.05.12 |  Hideki Yagi | Add WrapperEvent_VSync.
//  1998.09.25 |  Hideki Yagi | Add WrapperType.
//             |              |
//


#ifndef _HALIF_H_
#define _HALIF_H_

//***************************************************************************
// common definition
//***************************************************************************

//---------------------------------------------------------------------------
// HAL Interface return value
//---------------------------------------------------------------------------
typedef enum 
{
	HAL_SUCCESS = 0,
	HAL_ERROR,
	HAL_INVALID_PARAM,
	HAL_NOT_IMPLEMENT,
	HAL_IRQ_MINE,
	HAL_IRQ_OTHER,
	HAL_POWEROFF
} HALRESULT;

//---------------------------------------------------------------------------
//  HAL Type    add by H.Yagi 1999.04.21
//---------------------------------------------------------------------------
typedef enum
{
    HalType_ZIVA = 0,
    HalType_ZIVAPC
} HALTYPE;


//---------------------------------------------------------------------------
//  Wrapper Type
//---------------------------------------------------------------------------
typedef enum
{
    WrapperType_VxD = 0,
    WrapperType_WDM
} WRAPPERTYPE;


//---------------------------------------------------------------------------
//	Event Type
//---------------------------------------------------------------------------
typedef enum
{
	ClassLibEvent_SendData = 0,
	WrapperEvent_StartVOBU,
	WrapperEvent_EndVOB,
	WrapperEvent_VUnderFlow,
	WrapperEvent_AUnderFlow,
	WrapperEvent_SPUnderFlow,
	WrapperEvent_VOverFlow,
	WrapperEvent_AOverFlow,
// by oka
	WrapperEvent_SPOverFlow,
	WrapperEvent_TimerEvent,
	WrapperEvent_ButtonActivate,
	WrapperEvent_NextPicture,
	WrapperEvent_UserData,
    WrapperEvent_ERROREvent,
// by H.Yagi
    WrapperEvent_VSync
} HALEVENTTYPE;

//---------------------------------------------------------------------------
//	Video Property
//---------------------------------------------------------------------------
typedef enum
{
	VideoProperty_TVSystem = 0,
	VideoProperty_AspectRatio,
	VideoProperty_DisplayMode,
	VideoProperty_Resolution,
	VideoProperty_DigitalOut,
	VideoProperty_DigitalPalette,
	VideoProperty_APS,
	VideoProperty_ClosedCaption,
	VideoProperty_OutputSource,
	VideoProperty_CompositeOut,
	VideoProperty_SVideoOut,
    VideoProperty_SkipFieldControl,
    VideoProperty_FilmCamera,                       // 97.12.04 H.Yagi
    VideoProperty_SquarePixel,                       // 98.03.27 H.Yagi
// by oka
	VideoProperty_Magnify,
	VideoProperty_Digest,
	VideoProperty_OSDSwitch,
	VideoProperty_OSDData,
	VideoProperty_ImageCapture,
	VideoProperty_ClosedCaptionData
} VIDEOPROPTYPE;

//---------------------------------------------------------------------------
//	Audio Property
//---------------------------------------------------------------------------
typedef enum
{
	AudioProperty_Type = 0,
	AudioProperty_Number,
	AudioProperty_Volume,
	AudioProperty_Sampling,
	AudioProperty_Channel,
	AudioProperty_Quant,
	AudioProperty_AudioOut,
	AudioProperty_Cgms,
	AudioProperty_AnalogOut,
	AudioProperty_DigitalOut,
	AudioProperty_AC3DRangeLowBoost,
	AudioProperty_AC3DRangeHighCut,
	AudioProperty_AC3OperateMode,
	AudioProperty_AC3OutputMode
} AUDIOPROPTYPE;

//---------------------------------------------------------------------------
//	SubPic Property
//---------------------------------------------------------------------------
typedef enum
{
	SubpicProperty_Number = 0,
	SubpicProperty_Palette,
	SubpicProperty_Hilight,
// by oka 97.10.1
	SubpicProperty_State,
    SubpicProperty_HilightButton,
    SubpicProperty_FlushBuff                // 98.05.01 H.Yagi
} SUBPICPROPTYPE;

//--------------------------------------------------------------------------
//  Capability type                                 1998.03.27 H.Yagi
//--------------------------------------------------------------------------
typedef enum
{
    VideoProperty = 0,
    AudioProperty,
    SubpicProperty,
    DigitalVideoOut
} CAPSTYPE;


//--------------------------------------------------------------------------
//  Data Direction type                               1998.03.27 H.Yagi
//--------------------------------------------------------------------------
typedef enum
{
    DataType_NormalAll = 0,
    DataType_OpositeAll,
    DataType_IpicOnly
} DirectionType;


//--------------------------------------------------------------------------
//  VideoProperty Bit Assign                         1998.03.27 H.Yagi
//--------------------------------------------------------------------------

#define VideoProperty_TVSystem_BIT           0x00000001
#define VideoProperty_AspectRatio_BIT        0x00000002
#define VideoProperty_DisplayMode_BIT        0x00000004
#define VideoProperty_Resolution_BIT         0x00000008
#define VideoProperty_DigitalOut_BIT         0x00000010
#define VideoProperty_DigitalPalette_BIT     0x00000020
#define VideoProperty_APS_BIT                0x00000040
#define VideoProperty_ClosedCaption_BIT      0x00000080
#define VideoProperty_OutputSource_BIT       0x00000100
#define VideoProperty_CompositeOut_BIT       0x00000200
#define VideoProperty_SVideoOut_BIT          0x00000400
#define VideoProperty_SkipFieldControl_BIT   0x00000800
#define VideoProperty_FilmCamera_BIT         0x00001000
#define VideoProperty_SquarePixel_BIT        0x00002000


//--------------------------------------------------------------------------
//  AudioProperty Bit Assign                         1998.03.27 H.Yagi
//--------------------------------------------------------------------------
#define AudioProperty_Type_BIT               0x00000001
#define AudioProperty_Number_BIT             0x00000002
#define AudioProperty_Volume_BIT             0x00000004
#define AudioProperty_Sampling_BIT           0x00000008
#define AudioProperty_Channel_BIT            0x00000010
#define AudioProperty_Quant_BIT              0x00000020
#define AudioProperty_AudioOut_BIT           0x00000040
#define AudioProperty_Cgms_BIT               0x00000080
#define AudioProperty_AnalogOut_BIT          0x00000100
#define AudioProperty_DigitalOut_BIT         0x00000200
#define AudioProperty_AC3DRangeLowBoost_BIT  0x00000400
#define AudioProperty_AC3DRangeHighCut_BIT   0x00000800
#define AudioProperty_AC3OperateMode_BIT     0x00001000
#define AudioProperty_AC3OutputMode_BIT      0x00002000


//--------------------------------------------------------------------------
//  SubpicProperty Bit Assign                         1998.03.27 H.Yagi
//--------------------------------------------------------------------------
#define SubpicProperty_Number_BIT            0x00000001
#define SubpicProperty_Palette_BIT           0x00000002
#define SubpicProperty_Hilight_BIT           0x00000004
#define SubpicProperty_State_BIT            0x00000008


//--------------------------------------------------------------------------
//  Digital Video Out Assign                         1998.03.27 H.Yagi
//--------------------------------------------------------------------------
#define DigitalVideoOut_ZV_BIT               0x00000001
#define DigitalVideoOut_LPB08_BIT            0x00000002
#define DigitalVideoOut_LPB16_BIT            0x00000004
#define DigitalVideoOut_VMI_BIT              0x00000008
#define DigitalVideoOut_AMCbt_BIT            0x00000010
#define DigitalVideoOut_AMC656_BIT           0x00000020
#define DigitalVideoOut_DAV2_BIT             0x00000040
#define DigitalVideoOut_CIRRUS_BIT           0x00000080



//---------------------------------------------------------------------------
//	Power State
//---------------------------------------------------------------------------
typedef enum
{
	POWERSTATE_ON = 0,
	POWERSTATE_OFF
} POWERSTATE;

//---------------------------------------------------------------------------
//	Stream mode
//---------------------------------------------------------------------------
typedef enum
{
	HALSTREAM_DVD_MODE = 0,
	HALSTREAM_MPEG_PS_MODE,
	HALSTREAM_MPEG_PES_MODE,
	HALSTREAM_ELEMENT_MODE,
	HALSTREAM_VIDEO_CD_MODE
} HALSTREAMMODE;

//---------------------------------------------------------------------------
//  Scan parameter type
//---------------------------------------------------------------------------
typedef enum
{
    ScanOnlyI = 0,
    ScanIandP
} ScanMode;


//---------------------------------------------------------------------------
//	VideoProperty_TVSystem
//---------------------------------------------------------------------------
typedef enum
{
	TV_NTSC = 0,
	TV_PALB,
	TV_PALD,
	TV_PALG,
	TV_PALH,
	TV_PALI,
	TV_PALM,
	TV_PALN
} VideoProperty_TVSystem_Value;


//---------------------------------------------------------------------------
//	VideoProperty_AspectRatio
//---------------------------------------------------------------------------
typedef enum
{
	Aspect_04_03 = 0,
	Aspect_16_09
} VideoProperty_AspectRatio_Value;
//---------------------------------------------------------------------------
//	VideoProperty_DisplayMode
//---------------------------------------------------------------------------
typedef enum
{
	Display_Original = 0,
	Display_PanScan,
	Display_LetterBox
} VideoProperty_DisplayMode_Value;
//---------------------------------------------------------------------------
//	VideoProperty_Resolution
//---------------------------------------------------------------------------
typedef struct tag_VideoSizeStruc
{
	DWORD ResHorizontal;
	DWORD ResVertical;
} VideoSizeStruc;
//---------------------------------------------------------------------------
//	VideoProperty_DigitalOut
//---------------------------------------------------------------------------
typedef enum
{
	DigitalOut_Off = 0,
    DigitalOut_ZV,
    DigitalOut_LPB08,
    DigitalOut_LPB16,
    DigitalOut_VMI,
    DigitalOut_AMCbt,
    DigitalOut_AMC656,
    DigitalOut_DAV2,
    DigitalOut_CIRRUS
} VideoProperty_DigitalOut_Value;
//---------------------------------------------------------------------------
//	VideoProperty_DigitalPalette
//---------------------------------------------------------------------------
typedef enum
{
	Video_Palette_Y = 0,
	Video_Palette_Cb,
	Video_Palette_Cr
} VIDEOPALETTETYPE;

typedef struct tag_Digial_Palette
{
	VIDEOPALETTETYPE		Select;
	UCHAR					*pPalette;
} Digital_Palette;
//---------------------------------------------------------------------------
//	VideoProperty_APS( Analog Protection System )
//---------------------------------------------------------------------------
typedef enum
{
	CgmsType_Off = 0,
	CgmsType_1,
	CgmsType_On
}CGMSTYPE;

typedef enum
{
	ApsType_Off = 0,
	ApsType_1,
	ApsType_2,
	ApsType_3
} APSTYPE;

typedef struct tag_VideoAPSStruc
{
	CGMSTYPE CgmsType;
	APSTYPE APSType;
} VideoAPSStruc;

//---------------------------------------------------------------------------
//	VideoProperty_ClosedCaption
//---------------------------------------------------------------------------
typedef enum
{
	ClosedCaption_On = 0,
	ClosedCaption_Off
} VideoProperty_ClosedCaption_Value;


//---------------------------------------------------------------------------
//	VideoProperty_OutputSource
//---------------------------------------------------------------------------
typedef enum
{
	OutputSource_VGA = 0,
	OutputSource_DVD
} VideoProperty_OutputSource_Value;


//---------------------------------------------------------------------------
//	VideoProperty_CompositeOut
//---------------------------------------------------------------------------
typedef enum
{
	CompositeOut_On = 0,
	CompositeOut_Off
} VideoProperty_CompositeOut_Value;


//---------------------------------------------------------------------------
//	VideoProperty_SVideoOut
//---------------------------------------------------------------------------
typedef enum
{
	SVideoOut_On = 0,
	SVideoOut_Off
} VideoProperty_SVideoOut_Value;


//---------------------------------------------------------------------------
//	VideoProperty_SkipFieldControl
//---------------------------------------------------------------------------
typedef enum
{
	SkipFieldControl_On = 0,
	SkipFieldControl_Off
} VideoProperty_SkipFieldControl_Value;


//---------------------------------------------------------------------------
//  VideoProperty_FilmCamera				// 97.12.04 H.Yagi
//---------------------------------------------------------------------------
typedef enum
{
    Source_Camera = 0,
    Source_Film
} VideoProperty_FilmCamera_Value;


//---------------------------------------------------------------------------
//  VideoProperty_SquarePixel                // 98.03.27 H.Yagi
//---------------------------------------------------------------------------
typedef enum
{
    SquarePixel_On = 0,
    SquarePixel_Off
} VideoProperty_SquarePixel_Value;

//---------------------------------------------------------------------------
//	VideoProperty_Digest 
//	by oka
//---------------------------------------------------------------------------
typedef struct tag_VideoDigestStruc
{
	DWORD 		dmX;
	DWORD 		dmY;
	DWORD 		dmSkip;
	DWORD 		dmDecimation;
	DWORD 		dmThreshold;
	DWORD 		dmStart;
} VideoDigestStruc;
//---------------------------------------------------------------------------
//	VideoProperty_OSD_Data
//	by oka
//---------------------------------------------------------------------------
typedef enum {
	OSD_TYPE_BITMAP = 0,
	OSD_TYPE_ZIVA
} OSD_TYPE;
typedef struct tag_OsdDataStruc
{
	OSD_TYPE		OsdType;
	tag_OsdDataStruc 	* pNextData;
	VOID 		*pData;
	DWORD		dwOsdSize;
} OsdDataStruc;

//---------------------------------------------------------------------------
//	VideoProperty_OSD_Swtich
//	by oka
//---------------------------------------------------------------------------
typedef enum
{
	Video_OSD_On = 0,
	Video_OSD_Off
} VideoProperty_OSD_Switch_Value;
//---------------------------------------------------------------------------
//	VideoProperty_Magnify
//	by oka
//---------------------------------------------------------------------------
typedef struct tag_VideoMagnifyStruc
{
	DWORD dwX;
	DWORD dwY;
	DWORD dwFactor;
} VideoMagnifyStruc, * PVideoMagnifyStruc;

//---------------------------------------------------------------------------
//	AudioProperty_Type
//---------------------------------------------------------------------------
typedef enum
{
	AudioType_AC3 = 0,
	AudioType_PCM,
	AudioType_MPEG1,
	AudioType_MPEG2
} AudioProperty_Type_Value;
//---------------------------------------------------------------------------
//	AudioProperty_Number
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//	AudioProperty_Volume
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//	AudioProperty_Sampling
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//	AudioProperty_Channel
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//	AudioProperty_Quant
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//	AudioProperty_AudioOut
//---------------------------------------------------------------------------
typedef enum
{
	AudioOut_Encoded = 0,
	AudioOut_Decoded
} AudioProperty_AudioOut_Value;
//---------------------------------------------------------------------------
//	AudioProperty_Cgms
//---------------------------------------------------------------------------
typedef enum
{
	AudioCgms_Off = 0,
	AudioCgms_1,
	AudioCgms_On
} AudioProperty_Cgms_Value;


//---------------------------------------------------------------------------
//	AudioProperty_AnalogOut
//---------------------------------------------------------------------------
typedef enum
{
	AudioAnalogOut_On = 0,
	AudioAnalogOut_Off
} AudioProperty_AnalogOut_Value;


//---------------------------------------------------------------------------
//	AudioProperty_DigitalOut
//---------------------------------------------------------------------------
typedef enum
{
	AudioDigitalOut_On = 0,
	AudioDigitalOut_Off
} AudioProperty_DigitalOut_Value;


//---------------------------------------------------------------------------
//	AudioProperty_AC3OperateMode
//---------------------------------------------------------------------------
typedef enum
{
	AC3OperateLine = 0,
	AC3OperateRF,
	AC3OperateCustom0,
	AC3OperateCustom1
} AudioProperty_AC3OperateMode_Value;


//---------------------------------------------------------------------------
//	AudioProperty_AC3OutputMode
//---------------------------------------------------------------------------
typedef enum
{
	AC3Output_Default = 0,
	AC3Output_Karaoke,
	AC3Output_Surround,
} AudioProperty_AC3OutputMode_Value;


//---------------------------------------------------------------------------
//	SubpicProperty_Number
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//	SubpicProperty_Palette
//---------------------------------------------------------------------------
typedef enum
{
    Palette_Y = 0,
    Palette_Cr,
    Palette_Cb
} SubpicProperty_Palette_Value;

//---------------------------------------------------------------------------
//	SubpicProperty_Hilight
//---------------------------------------------------------------------------
typedef enum
{
	Hlight_On = 0,
	Hlight_Off
} HLIGHT_SWITCH;

typedef struct tag_SubpHlightStruc
{
	HLIGHT_SWITCH	Hlight_Switch;
	DWORD			Hlight_StartX;
	DWORD			Hlight_EndX;
	DWORD			Hlight_StartY;
	DWORD			Hlight_EndY;
	DWORD			Hlight_Color;
	DWORD			Hlight_Contrast;
} SubpHlightStruc;
//---------------------------------------------------------------------------
//	SubpicProperty_HilightButton
//	by oka 97.10.1
//---------------------------------------------------------------------------
typedef enum
{
	Button_Select = 1,
	Button_Unhighlight,
	Button_Activate,
	Button_Activate_Selected_Button,
	Button_Select_Without_Auto_Activate
} HLIGHT_ACTION;

typedef struct tag_SubpHlightButtonStruc
{
	DWORD			Hlight_Button;
	HLIGHT_ACTION	Hlight_Action;
} SubpHlightButtonStruc;

// Hlight_Button 1 -- 36,64(Up),65(Down),66(Left),67(Right)

//---------------------------------------------------------------------------
//	SubpicProperty_State
//---------------------------------------------------------------------------
typedef enum
{
	Subpic_On = 0,
	Subpic_Off
} SubpicProperty_State_Value;


//***************************************************************************
// HAL Layer Interface
//***************************************************************************

class IMPEGBoardEvent;
class IClassLibHAL;
class IWrapperHAL;
class IHALStreamControl;
class IKernelService;

//---------------------------------------------------------------------------
//	MPEGBoard Event Interface
//---------------------------------------------------------------------------
class IHALBuffer
{
	public:
		virtual DWORD GetSize( void ) PURE;
		virtual DWORD Flags( void ) PURE;
		virtual BYTE *GetBuffPointer( void ) PURE;
        virtual BYTE *GetLinBuffPointer( void ) PURE;
};

//---------------------------------------------------------------------------
//	MPEGBoard Event Interface
//---------------------------------------------------------------------------
class IMPEGBoardEvent: public IMBoardListItem {
	public:
		virtual void Advice( void *pData ) PURE;
		virtual HALEVENTTYPE GetEventType( void ) PURE;
};

//---------------------------------------------------------------------------
// HAL interface for Class Library
//---------------------------------------------------------------------------
class IClassLibHAL{
	public:
		virtual HALRESULT GetMixHALStream( IHALStreamControl **ppHALStreamControl ) PURE;
		virtual HALRESULT GetVideoHALStream( IHALStreamControl **ppHALStreamControl ) PURE;
		virtual HALRESULT GetAudioHALStream( IHALStreamControl **ppHALStreamControl ) PURE;
		virtual HALRESULT GetSubpicHALStream( IHALStreamControl **ppHALStreamControl ) PURE;
		virtual HALRESULT SetVideoProperty( VIDEOPROPTYPE PropertyType, VOID *pData ) PURE;
		virtual HALRESULT GetVideoProperty( VIDEOPROPTYPE PropertyType, VOID *pData ) PURE;
		virtual HALRESULT SetAudioProperty( AUDIOPROPTYPE PropertyType, VOID *pData ) PURE;
		virtual HALRESULT GetAudioProperty( AUDIOPROPTYPE PropertyType, VOID *pData ) PURE;
		virtual HALRESULT SetSubpicProperty( SUBPICPROPTYPE PropertyType, VOID *pData ) PURE;
		virtual HALRESULT GetSubpicProperty( SUBPICPROPTYPE PropertyType, VOID *pData ) PURE;
		virtual HALRESULT SetSinkClassLib( IMPEGBoardEvent *pMPEGBoardEvent ) PURE;
		virtual HALRESULT UnsetSinkClassLib( IMPEGBoardEvent *pMPEGBoardEvent ) PURE;
		virtual HALRESULT SetPowerState( POWERSTATE Switch ) PURE;
		virtual HALRESULT GetPowerState( POWERSTATE *pSwitch ) PURE;
		virtual HALRESULT SetSTC( DWORD STCValue ) PURE;
		virtual HALRESULT GetSTC( DWORD *pSTCValue ) PURE;
        virtual HALRESULT GetCapability( CAPSTYPE PropType, DWORD *pPropType ) PURE;
};

//---------------------------------------------------------------------------
// HAL interface for Wrapper
//---------------------------------------------------------------------------
class IWrapperHAL{
	public:
        virtual HALRESULT Init( WRAPPERTYPE wraptype ) PURE;
		virtual HALRESULT SetKernelService( IKernelService *pKernelService ) PURE;
		virtual HALRESULT SetSinkWrapper( IMPEGBoardEvent *pMPEGBoardEvent ) PURE;
		virtual HALRESULT UnsetSinkWrapper( IMPEGBoardEvent *pMPEGBoardEvent ) PURE;
		virtual HALRESULT HALHwInterrupt( void ) PURE;
		virtual HALRESULT QueryDMABufferSize( DWORD *Size, DWORD *BFlag ) PURE;
		virtual HALRESULT SetDMABuffer( DWORD LinearAddr, DWORD physicalAddr ) PURE;
};

//---------------------------------------------------------------------------
// HAL Stream Control Interface
//---------------------------------------------------------------------------
class IHALStreamControl{
	public:
		virtual HALRESULT SendData( IHALBuffer *pData ) PURE;
		virtual HALRESULT SetTransferMode( HALSTREAMMODE StreamMode ) PURE;
		virtual HALRESULT GetAvailableQueue( DWORD *pQueueNum ) PURE;
		virtual HALRESULT SetPlayNormal( void ) PURE;
		virtual HALRESULT SetPlaySlow( DWORD SlowFlag ) PURE;
		virtual HALRESULT SetPlayPause( void ) PURE;
		virtual HALRESULT SetPlayScan( DWORD ScanFlag ) PURE;
		virtual HALRESULT SetPlaySingleStep( void ) PURE;
		virtual HALRESULT SetPlayStop( void ) PURE;
		virtual HALRESULT CPPInit( void ) PURE;
		virtual HALRESULT GetDriveChallenge( UCHAR *pDriveChallenge ) PURE;
		virtual HALRESULT SetDriveResponse( UCHAR *pDriveResponse ) PURE;
		virtual HALRESULT SetDecoderChallenge( UCHAR *pDecoderChallenge ) PURE;
		virtual HALRESULT GetDecoderResponse( UCHAR *pDecoderResponse ) PURE;
		virtual HALRESULT SetDiskKey( UCHAR *pDiskKey ) PURE;
		virtual HALRESULT SetTitleKey( UCHAR *pTitleKey ) PURE;
        virtual HALRESULT SetDataDirection( DirectionType DataType) PURE;
        virtual HALRESULT GetDataDirection( DirectionType *pDataType) PURE;
};

//---------------------------------------------------------------------------
// Kernel Service Interface for HAL
//---------------------------------------------------------------------------
class IKernelService{
	public:
		virtual BOOL SetPCIConfigData( DWORD address, DWORD data ) PURE;
		virtual BOOL SetPCIConfigData( DWORD address, WORD data ) PURE;
		virtual BOOL SetPCIConfigData( DWORD address, BYTE data ) PURE;
		virtual BOOL GetPCIConfigData( DWORD address, DWORD *data ) PURE;
		virtual BOOL GetPCIConfigData( DWORD address, WORD *data ) PURE;
		virtual BOOL GetPCIConfigData( DWORD address, BYTE *data ) PURE;
		virtual BOOL SetPortData( DWORD address, DWORD data ) PURE;
		virtual BOOL SetPortData( DWORD address, WORD data ) PURE;
		virtual BOOL SetPortData( DWORD address, BYTE data ) PURE;
		virtual BOOL GetPortData( DWORD address, DWORD *data ) PURE;
		virtual BOOL GetPortData( DWORD address, WORD *data ) PURE;
		virtual BOOL GetPortData( DWORD address, BYTE *data ) PURE;
		virtual BOOL GetTickCount( DWORD *pTickCount ) PURE;
		virtual BOOL Sleep( DWORD SleepCount ) PURE;
		virtual void EnableHwInt( void ) PURE;
		virtual void DisableHwInt( void ) PURE;
};



#endif //  _HALIF_H_
//***************************************************************************
//	End of COMMON INTERFACE Header
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\hlight.h ===
//***************************************************************************
//
//	FileName: hlight.h
//		$Workfile: hlight.h $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZIVA2PC.WDM/hlight.h 1     98/07/18 5:02p Seichan $
// $Modtime: 98/07/18 2:11p $
// $Nokeywords:$
//***************************************************************************

//***************************************************************************
//	
//***************************************************************************
//---------------------------------------------------------------------------
//	
//---------------------------------------------------------------------------

class   HW_DEVICE_EXTENSION;

class HlightControl
{
	private:
		KTIMER					m_StartTimer;
		KTIMER					m_EndTimer;
		KDPC					m_HlightStartDPC;
		KDPC					m_HlightEndDPC;
		HW_DEVICE_EXTENSION		*m_pHwDevExt;
		KSPROPERTY_SPHLI		m_HlightInfo;

		void	HwSet( void );

	public:
		HlightControl( void );
		~HlightControl( void );
		
		void	Init( HW_DEVICE_EXTENSION *pHwDevExt );

		void	OpenControl( void );
		void	CloseControl( void );

		void	Set( PKSPROPERTY_SPHLI HlightInfo );


		static  void HlightStartDpc( IN PKDPC Dpc, IN PVOID context, IN PVOID arg1, IN PVOID arg2 );
		static  void HlightEndDpc( IN PKDPC Dpc, IN PVOID context, IN PVOID arg1, IN PVOID arg2 );

		BOOL					m_SetupStartTimer;
		BOOL					m_SetupEndTimer;
};



//***************************************************************************
//	End of hlight.h
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\hlight.cpp ===
//***************************************************************************
//
//	FileName: hlight.cpp
//		$Workfile: hlight.cpp $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZIVA2PC.WDM/hlight.cpp 2     99/02/22 1:39p Yagi $
// $Modtime: 99/02/22 11:03a $
// $Nokeywords:$
//***************************************************************************
#include	"includes.h"

#include    "hal.h"
#include    "wdmkserv.h"
#include    "mpevent.h"
#include    "classlib.h"
#include    "ctime.h"
#include    "schdat.h"
#include    "ccque.h"
#include    "ctvctrl.h"
#include	"hlight.h"
#include    "hwdevex.h"

//***************************************************************************
//	
//***************************************************************************

HlightControl::HlightControl( void )
{
	
};

HlightControl::~HlightControl( void )
{
	
};


//---------------------------------------------------------------------------
//	
//---------------------------------------------------------------------------
void	HlightControl::Init( PHW_DEVICE_EXTENSION pHwDevExt )
{
	ASSERT( pHwDevExt != NULL );
	
	m_pHwDevExt = pHwDevExt;
	KeInitializeTimer( &m_StartTimer );
	KeInitializeTimer( &m_EndTimer );
	KeInitializeDpc( &m_HlightStartDPC, HlightStartDpc, (PVOID)this );
	KeInitializeDpc( &m_HlightEndDPC, HlightEndDpc, (PVOID)this );
	m_SetupStartTimer = FALSE;
	m_SetupEndTimer = FALSE;
};


void	HlightControl::OpenControl( void )
{
	RtlZeroMemory( &m_HlightInfo,sizeof( KSPROPERTY_SPHLI ));
	m_SetupStartTimer = FALSE;
	m_SetupEndTimer = FALSE;
};

void	HlightControl::CloseControl( void )
{
	if( m_SetupStartTimer == TRUE )
	{
		KeCancelTimer( &m_StartTimer );
		m_SetupStartTimer = FALSE;
	};
	if( m_SetupEndTimer == TRUE )
	{
		KeCancelTimer( &m_EndTimer );
		m_SetupEndTimer = FALSE;
	};
	
};

void	HlightControl::Set( PKSPROPERTY_SPHLI Info )
{
	DWORD	tmpSTC,boardSTC;

	tmpSTC = (DWORD)(m_pHwDevExt->ticktime.GetStreamTime() * 9 / 1000);
	DBG_PRINTF( ("DVDWDM:       StartPTM=0x%08x, EndPTM=0x%08x\n\r", Info->StartPTM, Info->EndPTM ));

	m_pHwDevExt->mpboard.GetSTC(&boardSTC);

	if( boardSTC > tmpSTC )
	{
		DBG_PRINTF( ("DVDWDM:       Stream STC=0x%08x   BardSTC = 0x%08x  Diff %d msec\n\r", 
				tmpSTC, boardSTC,(boardSTC-tmpSTC) / 90  ));
	}
	else
	{
		DBG_PRINTF( ("DVDWDM:       Stream STC=0x%08x   BardSTC = 0x%08x  Diff %d msec\n\r", 
				tmpSTC, boardSTC,(tmpSTC - boardSTC) / 90  ));
	};

	if( m_pHwDevExt->dvdstrm.GetState() == Play )
	{
		DBG_PRINTF((" Modify STC      LINE=%d\r\n",__LINE__ ));
		tmpSTC = boardSTC;
	};
					
	// SRg[̏ꍇ
	if(RtlCompareMemory( &m_HlightInfo,Info,sizeof(*Info)) == 0 )
	{
		DBG_PRINTF( ("DVDWDM:     same control \n\r\n\r\n\r" ));
		return;
	};


	// ^C}[͂ĂEndPTMƁAVStartPTMŁAAEndPTM
	// ^C}[ZbgĂƂ́AEndPTM̃^C}[j
	if( m_HlightInfo.EndPTM == Info->StartPTM && m_SetupEndTimer == TRUE )
	{
		KeCancelTimer( &m_EndTimer );
		m_SetupEndTimer = FALSE;
	};

	m_HlightInfo = *Info;

	// nCCgneȅꍇ
	if( (Info->StartX==Info->StopX && Info->StartY==Info->StopY) || (Info->HLISS == 0 ) )
	{
		if( m_pHwDevExt->dvdstrm.GetState() != Stop )
		{
			if( Info->StartPTM!=0 && Info->EndPTM!=0 ){
				HwSet();
			}
		};
		return;
	}

	// ^C}[͂āAׂǂ?
	if( tmpSTC < Info->StartPTM && Info->StartPTM != 0xffffffff )
	{
		//	^C}[Kv
		DBG_PRINTF( ("DVDWDM:  SetSubpic ScheduleTimer wait %d msec \n\r", (Info->StartPTM-tmpSTC)/90 ));

		LARGE_INTEGER	WaitTime;

		// }CiX̒lKv
		WaitTime = RtlConvertLongToLargeInteger( Info->StartPTM - tmpSTC ) ;
		WaitTime.QuadPart = WaitTime.QuadPart * 1000 / 9 * -1;
		
		// j[\Ȃǂ̎ɁAnCCg\̂x̂
		// XgbṽnCCg␳B
		if( m_pHwDevExt->dvdstrm.GetState() == Stop 
			&& (Info->StartPTM - tmpSTC) / 90 < 600 )
		{
			WaitTime.QuadPart = WaitTime.QuadPart / 2;
		};

		ASSERT( KeGetCurrentIrql() <= DISPATCH_LEVEL );

		if( m_SetupStartTimer == FALSE )
		{
			m_SetupStartTimer = TRUE;
			KeSetTimer( &m_StartTimer, WaitTime, &m_HlightStartDPC );
		}
		else
		{
			// łɃ^C}[ZbgĂ
			DBG_PRINTF( ("DVDWDM:     same control 2   !!!!!\n\r\n\r\n\r" ));
			HwSet();
		};
	}
	else
	{
		// ^C}[sKv
		
		DBG_PRINTF( ("DVDWDM:  SetSubpic ScheduleTimer NO WAIT!! \n\r"));
		if( m_SetupStartTimer == TRUE )
		{
			KeCancelTimer( &m_StartTimer );
			m_SetupStartTimer = FALSE;
			DBG_BREAK();
		};
		HwSet();
	};

	// EndPTMׂ̏ǂ
	if( tmpSTC < Info->EndPTM && Info->EndPTM != 0xffffffff)
	{
		//	^C}[Kv
		DBG_PRINTF( ("DVDWDM:  SetSubpic ScheduleTimer EndPTM wait %d msec \n\r", (Info->EndPTM-tmpSTC)/90 ));

		LARGE_INTEGER	WaitTime;

		// }CiX̒lKv
		WaitTime = RtlConvertLongToLargeInteger( Info->EndPTM - tmpSTC ) ;
		WaitTime.QuadPart = WaitTime.QuadPart * 1000 / 9 * -1;
		
		ASSERT( KeGetCurrentIrql() <= DISPATCH_LEVEL );

		if( m_SetupEndTimer == FALSE )
		{
			m_SetupEndTimer = TRUE;
			KeSetTimer( &m_EndTimer, WaitTime, &m_HlightEndDPC );
		}
		else
		{
			// łɃ^C}[ZbgĂ
			DBG_PRINTF( ("DVDWDM:     EndPTM same control 2   !!!!!\n\r\n\r\n\r" ));
			HwSet();
		};
	};


};


void	HlightControl::HwSet( void )
{
	DWORD	boardSTC,StreamSTC;

	SubpHlightStruc     NewHlight;             // High-light inf structure

	StreamSTC = (DWORD)(m_pHwDevExt->ticktime.GetStreamTime() * 9 / 1000);
	m_pHwDevExt->mpboard.GetSTC(&boardSTC);

	// STC̕␳
	if( m_pHwDevExt->dvdstrm.GetState() == Play )
		StreamSTC = boardSTC;

	if( // nCCgʒuAɂȂĂ邩?
		(m_HlightInfo.StartX==m_HlightInfo.StopX && m_HlightInfo.StartY==m_HlightInfo.StopY) 
		// ȃnCCgɂȂĂ邩?
		|| ( m_HlightInfo.HLISS == 0 )
		// EndPTM̎ԂɂȂĂ邩?
		|| (( m_HlightInfo.EndPTM != 0xffffffff ) && (StreamSTC >= m_HlightInfo.EndPTM ))
		)
	{       // Off
		DBG_PRINTF( ("DVDWDM:   HighLight(OFF)\n\r") );
		NewHlight.Hlight_Switch = Hlight_Off;
	}
	else
	{                                                              // On
		DBG_PRINTF( ("DVDWDM:   HighLight(ON)\n\r") );
		NewHlight.Hlight_Switch = Hlight_On;
	};

	NewHlight.Hlight_StartX = (DWORD)(m_HlightInfo.StartX);
	NewHlight.Hlight_StartY = (DWORD)(m_HlightInfo.StartY);
	NewHlight.Hlight_EndX = (DWORD)(m_HlightInfo.StopX);
	NewHlight.Hlight_EndY = (DWORD)(m_HlightInfo.StopY);
	NewHlight.Hlight_Color = (DWORD)( m_HlightInfo.ColCon.emph2col<<12 | m_HlightInfo.ColCon.emph1col<<8 | m_HlightInfo.ColCon.patcol<<4 | m_HlightInfo.ColCon.backcol );
	NewHlight.Hlight_Contrast = (DWORD)( m_HlightInfo.ColCon.emph2con<<12 | m_HlightInfo.ColCon.emph1con<<8 | m_HlightInfo.ColCon.patcon<<4 | m_HlightInfo.ColCon.backcon );

	DBG_PRINTF(( " Set Subpic Hlight!   boardSTC=0x%x, startSTC=0x%x, EndSTC=0x%x\r\n",
		boardSTC, m_HlightInfo.StartPTM,m_HlightInfo.EndPTM));

	DBG_PRINTF( ("-- StartX = %d, StartY = %d, EndX = %d, EndY = %d\n\r", 
			NewHlight.Hlight_StartX,NewHlight.Hlight_StartY,NewHlight.Hlight_EndX,NewHlight.Hlight_EndY ));

	if( NewHlight.Hlight_Switch == Hlight_Off && m_pHwDevExt->dvdstrm.GetState() == Stop )
	{
		DBG_PRINTF( ("DVDWDM:   SetSubpic Hilight Decoder Stopping \n\r") );
		return;
	};

	if( !m_pHwDevExt->dvdstrm.SetSubpicProperty( SubpicProperty_Hilight, &(NewHlight) ) ){
		DBG_PRINTF( ("DVDWDM:   SetSubpic Hilight Error\n\r") );
		DBG_BREAK();
	}
};


//***************************************************************************
//	call back function
//***************************************************************************

void HlightControl::HlightStartDpc( IN PKDPC Dpc, IN PVOID context, IN PVOID arg1, IN PVOID arg2 )
{
	DBG_PRINTF((" Start DPC !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  Irql=%d\r\n", KeGetCurrentIrql()  ));

	HlightControl *This = (HlightControl *)context;
	This->m_SetupStartTimer = FALSE;
	This->HwSet();
};
void HlightControl::HlightEndDpc( IN PKDPC Dpc, IN PVOID context, IN PVOID arg1, IN PVOID arg2 )
{
	DBG_PRINTF((" End DPC !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  Irql=%d\r\n", KeGetCurrentIrql()  ));

	HlightControl *This = (HlightControl *)context;
	This->m_SetupEndTimer = FALSE;
	This->HwSet();
};


//***************************************************************************
//	End of hlight.cpp
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\includes.h ===
//**************************************************************************
//
//      Title   : Includes.h
//
//      Date    : 1997.06.26    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.06.26   000.0000   1st making.
//    1997.11.28   000.1000   Modifyed for Memphis WDM mini driver.
//
//**************************************************************************
//
// This pragma is need to compile at warning level 4
#pragma warning(disable:4214 4201 4115 4200 4100 4514 4057 4127 4702 4710)

extern  "C"
{
//#include        "wdmwarn4.h"
#include        "strmini.h"
#include        "ks.h"
#include        "wdm.h"
}

#include        "ksmedia.h"

#define         PURE    =0

#define TVALD 		1		//K.O 990819

// 1998.6.11 seichan
// HAL̃p[`FbNtOɂčs悤ɂ
#define POWERCHECK_BY_FLAG


// K.Ishizaki
// Redefine debug routines
#if  DBG
#ifdef DBG_CTRL
BOOLEAN Dbg_Printf_Enable = FALSE;
BOOLEAN Dbg_Break_Enable = FALSE;
DWORD   Dbg_Print_Level = 0;
DWORD   Dbg_Print_Flags = 0;
#ifndef	TVALD
BOOLEAN	Dbg_Tvald = FALSE;
#endif
#else
extern	BOOLEAN	Dbg_Printf_Enable;
extern	BOOLEAN	Dbg_Break_Enable;
extern	DWORD	Dbg_Print_Level;
extern	DWORD	Dbg_Print_Flags;
#ifndef	TVALD
extern  BOOLEAN	Dbg_Tvald;
#endif
#endif

#define     DBG_PRINTF(a)   \
            do { \
                if (Dbg_Printf_Enable) { \
                    DbgPrint##a ; \
                } \
            } while (0)

#define     DBG_BREAK()     \
            do { \
                if (Dbg_Break_Enable) { \
                    { __asm   int 3  } \
                } \
            } while (0)

#define     DBG_HAL         0x00000001
#define     DBG_HAL_STREAM  0x00000002
#define     DBG_BOARD       0x00000100
#define     DBG_STREAM      0x00000200
#define     DBG_TRANSFER    0x00000400
#define     DBG_STATE       0x00000800
#define     DBG_CLASS_OTHER 0x00001000
#define     DBG_WRAPPER     0x00010000
#define     DBG_WRP_DATA    0x00020000
#define     DBG_WRP_CTRL    0x00040000
#define     DBG_SCHD        0x00080000
#define     DBG_EVENT       0x00100000
#define     DBG_TMP0        0x01000000
#define     DBG_TMP1        0x02000000
#define     DBG_TMP2        0x04000000
#define     DBG_TMP3        0x08000000
#define	    DvdDebug(f, l, m)  \
            do { \
                if ((Dbg_Print_Flags & f) && (l <= Dbg_Print_Level)) { \
                    DbgPrint##m ; \
                } \
            } while (0)

#else

#ifdef DBG_CTRL
BOOLEAN Dbg_Printf_Enable = FALSE;
BOOLEAN Dbg_Break_Enable = FALSE;
DWORD   Dbg_Print_Level = 0;
DWORD   Dbg_Print_Flags = 0;
#ifndef	TVALD
BOOLEAN	Dbg_Tvald = FALSE;
#endif
#else
extern	BOOLEAN	Dbg_Printf_Enable;
extern	BOOLEAN	Dbg_Break_Enable;
extern	DWORD	Dbg_Print_Level;
extern	DWORD	Dbg_Print_Flags;
#ifndef	TVALD
extern	BOOLEAN Dbg_Tvald;
#endif
#endif

#define     DBG_PRINTF(a) do { ; } while (0)
#define     DBG_BREAK()  do { ; } while (0)
#define     DvdDebug(f, l, m) do { ; } while (0)

#endif

#include        "crtdbg.h"

#include        "toollib.h"

#include        "halif.h"

#include        "clibif.h"


#define         PC_TECRA750     0x0000
#define         PC_TECRA780     0x0001
#define         PC_TECRA8000    0x0002
#define         PC_PORTEGE7000  0x0003
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\erase.h ===
// ZiVA OSD Data 
//   (generated by osd2cpp.exe) 
//  Even Data start address    = 0x80:
//  Odd  Data start address    = 0x1b3c:
//  Even Palette start address = 0x40:
//  Odd  Palette start address = 0x40:
//  Col start:end position  = 0:703
//  Row start:end position  = 19:247

BYTE erase[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,
	0x00,0x02,0x22,0xbc,0x00,0x00,0x00,0x80,
	0x00,0x00,0x00,0x40,0x00,0x00,0x02,0xbf,
	0x00,0x00,0x4c,0xf7,0x00,0x00,0x00,0x40,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,
	0x00,0x02,0x22,0xe0,0x00,0x00,0x1b,0x3c,
	0x00,0x00,0x00,0x40,0x00,0x00,0x02,0xbf,
	0x00,0x04,0x69,0xfe,0x00,0x00,0x00,0x40,
	0x00,0x10,0x81,0x03,0x00,0x30,0x6d,0x73,
	0x00,0x50,0x5a,0xa3,0x00,0x71,0x47,0x13,
	0x00,0x1c,0xb8,0xef,0x00,0x3d,0xa5,0x5f,
	0x00,0x5d,0x92,0x8f,0x00,0xb4,0x81,0x03,
	0x00,0x7d,0x81,0x03,0x00,0x51,0x5b,0xdf,
	0x00,0x90,0x34,0x47,0x00,0xd2,0x11,0x27,
	0x00,0x28,0xee,0xdb,0x00,0x6a,0xcb,0xbb,
	0x00,0xa9,0xa4,0x23,0x00,0xeb,0x81,0x03,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0x37,0x4f,
	0x34,0x4f,0x04,0x13,0x7f,0xf4,0x3f,0xa4,
	0x3f,0xa4,0x3f,0x44,0x0f,0x11,0x34,0x3f,
	0xb4,0x7f,0xa4,0x4f,0x94,0x3f,0xf4,0x4f,
	0x34,0x4f,0x04,0xff,0x04,0xd3,0x50,0x04,
	0x37,0x4f,0x34,0x4f,0x04,0x10,0x4f,0x54,
	0x4f,0xb4,0x5f,0x94,0x3f,0xa4,0x3f,0xb4,
	0x3f,0xa4,0x3f,0x84,0x4f,0x54,0x4f,0x74,
	0x5f,0x84,0x3f,0xf4,0x4f,0x34,0x4f,0x04,
	0xff,0x04,0xd3,0x50,0x04,0x37,0x4f,0x34,
	0x4f,0xe4,0x4f,0x94,0x3f,0x94,0x3f,0x14,
	0x3f,0x84,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x64,0x4f,0x94,0x4f,0x54,0x6f,0x74,
	0x3f,0xf4,0x4f,0x34,0x4f,0x04,0xff,0x04,
	0xd3,0x50,0x04,0x37,0x4f,0x34,0x4f,0xe4,
	0x3f,0xb4,0x3f,0x84,0x3f,0x14,0x3f,0x84,
	0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,0x3f,0x64,
	0x3f,0xb4,0x3f,0x54,0x3f,0x4f,0x64,0x3f,
	0xf4,0x4f,0x34,0x4f,0x04,0xff,0x04,0xd3,
	0x50,0x04,0x38,0x2f,0x54,0x2f,0xe4,0x3f,
	0x04,0x16,0x3f,0x34,0x3f,0x74,0x3f,0xa4,
	0x3f,0xb4,0x3f,0xa4,0x3f,0x54,0x3f,0xd4,
	0x3f,0x44,0x3f,0x24,0x4f,0x44,0x3f,0x04,
	0x10,0x2f,0x54,0x2f,0x04,0xff,0x04,0xd4,
	0x50,0x04,0x38,0x2f,0x54,0x2f,0xe4,0x3f,
	0x04,0x15,0x3f,0x54,0x3f,0x64,0x3f,0xa4,
	0x3f,0xb4,0x3f,0xa4,0x3f,0x54,0x3f,0xd4,
	0x3f,0x44,0x3f,0x34,0x4f,0x34,0x3f,0x04,
	0x10,0x2f,0x54,0x2f,0x04,0xff,0x04,0xd4,
	0x50,0x04,0x38,0x2f,0x54,0x2f,0xe4,0x3f,
	0xc4,0x3f,0x54,0x3f,0x74,0x3f,0x54,0x3f,
	0xa4,0x3f,0xb4,0x3f,0xa4,0x3f,0x54,0x3f,
	0xd4,0x3f,0x44,0x3f,0x44,0x4f,0x24,0x3f,
	0x04,0x10,0x2f,0x54,0x2f,0x04,0xff,0x04,
	0xd4,0x50,0x04,0x50,0x3f,0xb4,0x3f,0x54,
	0xdf,0x54,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x54,0x3f,0xd4,0x3f,0x44,0x3f,0x64,
	0x3f,0x14,0x3f,0x04,0xff,0x04,0xed,0x50,
	0x04,0x50,0x4f,0x94,0x3f,0x54,0x3f,0x94,
	0x3f,0x44,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x64,0x3f,0xb4,0x3f,0x54,0x3f,0x74,
	0x6f,0x04,0xff,0x04,0xed,0x50,0x04,0x37,
	0x3f,0x44,0x3f,0x04,0x11,0x4f,0x54,0x4f,
	0x54,0x3f,0xb4,0x3f,0x44,0x4f,0x64,0x4f,
	0xc4,0x3f,0xa4,0x3f,0x74,0x3f,0x84,0x4f,
	0x64,0x3f,0x84,0x5f,0xf4,0x3f,0x44,0x3f,
	0x04,0xff,0x04,0xd4,0x50,0x04,0x37,0x3f,
	0x44,0x3f,0x04,0x14,0x7f,0x74,0x3f,0xd4,
	0x3f,0x64,0x8f,0xf4,0x3f,0xa4,0x3f,0x94,
	0xbf,0x84,0x3f,0x94,0x4f,0xf4,0x3f,0x44,
	0x3f,0x04,0xff,0x04,0xd4,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0x37,0x4f,0x94,0x3f,0x04,0x2a,0x3f,
	0x04,0x36,0x3f,0xd4,0x3f,0x04,0x52,0x3f,
	0x04,0x3c,0xdf,0x84,0x3f,0xb4,0x3f,0x34,
	0xdf,0x04,0x14,0x7f,0x04,0x3d,0x0f,0x11,
	0x34,0x3f,0xb4,0x3f,0x04,0xba,0x50,0x04,
	0x37,0x5f,0x84,0x3f,0x04,0x16,0x3f,0x04,
	0x11,0x3f,0x04,0x36,0x3f,0xd4,0x3f,0x04,
	0x1f,0x3f,0x04,0x30,0x3f,0x04,0x3c,0x3f,
	0x84,0x4f,0x64,0x4f,0x94,0x4f,0x34,0x3f,
	0x84,0x4f,0x04,0x11,0x3f,0x04,0x49,0x3f,
	0xa4,0x4f,0x94,0x4f,0x04,0x2e,0x3f,0x04,
	0x28,0x3f,0x04,0x5e,0x50,0x04,0x37,0x7f,
	0x64,0x3f,0x04,0x16,0x3f,0x04,0x11,0x3f,
	0x04,0x36,0x3f,0xd4,0x3f,0x04,0x1f,0x3f,
	0x04,0x30,0x3f,0x04,0x3c,0x3f,0xa4,0x3f,
	0x64,0x3f,0x94,0x3f,0x44,0x3f,0xa4,0x3f,
	0x04,0x10,0x3f,0x04,0x49,0x3f,0xb4,0x3f,
	0x94,0x3f,0x04,0x2f,0x3f,0x04,0x28,0x3f,
	0x04,0x5e,0x50,0x04,0x37,0x3f,0x14,0x4f,
	0x54,0x3f,0x84,0x6f,0x54,0xaf,0xd4,0x3f,
	0x24,0x4f,0xa4,0x6f,0x04,0x15,0x6f,0x54,
	0x3f,0x24,0x4f,0x74,0x3f,0x74,0x6f,0xf4,
	0xaf,0x64,0x6f,0x04,0x14,0x6f,0x64,0x3f,
	0x24,0x5f,0x94,0x6f,0x54,0x3f,0x64,0x2f,
	0x64,0x3f,0xd4,0x3f,0xb4,0x3f,0x64,0x3f,
	0x74,0x3f,0x54,0x3f,0xb4,0x3f,0xc4,0xaf,
	0x24,0x3f,0x34,0x3f,0x54,0x6f,0x74,0x3f,
	0x24,0x5f,0x44,0x5f,0x04,0x15,0x3f,0xc4,
	0x3f,0x74,0x3f,0x04,0x12,0x6f,0x74,0x3f,
	0x64,0x3f,0x24,0xaf,0x34,0x3f,0x24,0x5f,
	0x64,0x3f,0x64,0x3f,0x24,0xaf,0x04,0x5a,
	0x50,0x04,0x37,0x3f,0x34,0x3f,0x44,0x3f,
	0x64,0x3f,0x44,0x3f,0x64,0x3f,0x04,0x11,
	0x5f,0x34,0x4f,0x44,0x4f,0x44,0x3f,0x04,
	0x10,0x4f,0x34,0x4f,0x34,0x5f,0x34,0x4f,
	0x44,0x3f,0x44,0x4f,0x44,0x3f,0x04,0x10,
	0x3f,0x84,0x3f,0x44,0x3f,0xf4,0x4f,0x44,
	0x4f,0x34,0x5f,0x34,0x4f,0x54,0x3f,0x44,
	0x3f,0x44,0x3f,0x44,0x4f,0x44,0x3f,0xe4,
	0x3f,0xb4,0x3f,0x74,0x3f,0x54,0x3f,0x64,
	0x3f,0xb4,0x3f,0xf4,0x3f,0x64,0x3f,0x14,
	0x5f,0x34,0x3f,0x44,0x3f,0x54,0x5f,0x34,
	0x6f,0x34,0x4f,0x04,0x13,0x3f,0xd4,0x3f,
	0x54,0x3f,0x04,0x11,0x3f,0x44,0x3f,0x54,
	0x3f,0x64,0x3f,0x54,0x3f,0x74,0x5f,0x34,
	0x4f,0x44,0x3f,0x64,0x3f,0x54,0x3f,0x04,
	0x5e,0x50,0x04,0x37,0x3f,0x44,0x3f,0x34,
	0x3f,0x44,0x3f,0x84,0x3f,0x44,0x3f,0x04,
	0x11,0x3f,0x74,0x3f,0x24,0x3f,0x74,0x3f,
	0x04,0x17,0x3f,0x34,0x3f,0x74,0x3f,0x34,
	0x3f,0x34,0x3f,0x74,0x3f,0xf4,0x3f,0x64,
	0x3f,0x84,0x3f,0xd4,0x3f,0xc4,0x4f,0x54,
	0x3f,0x34,0x3f,0x84,0x3f,0x24,0x3f,0x34,
	0x2f,0x24,0x2f,0x34,0x3f,0xe4,0x3f,0xb4,
	0x3f,0x84,0x3f,0x34,0x3f,0x74,0x3f,0xb4,
	0x3f,0xf4,0x3f,0x64,0x5f,0x54,0x3f,0x84,
	0x3f,0x34,0x3f,0x64,0x3f,0x64,0x3f,0x04,
	0x13,0x3f,0xe4,0x3f,0x34,0x3f,0x04,0x10,
	0x3f,0x84,0x3f,0x34,0x3f,0x64,0x3f,0x54,
	0x3f,0x74,0x3f,0x74,0x3f,0x34,0x3f,0x64,
	0x3f,0x54,0x3f,0x04,0x5e,0x50,0x04,0x37,
	0x3f,0x54,0x4f,0x14,0x3f,0x44,0x3f,0x84,
	0x3f,0x44,0x3f,0x04,0x11,0x3f,0x74,0x3f,
	0x24,0xdf,0x04,0x11,0x9f,0x34,0x3f,0x74,
	0x3f,0x34,0x3f,0x34,0xdf,0xf4,0x3f,0x64,
	0x3f,0x84,0x3f,0xe4,0x8f,0x64,0x3f,0x64,
	0x3f,0x34,0x3f,0x84,0x3f,0x34,0x3f,0x24,
	0x2f,0x24,0x2f,0x24,0x3f,0xf4,0x3f,0xb4,
	0x3f,0x84,0x3f,0x34,0x3f,0x74,0x3f,0xb4,
	0x3f,0xf4,0x3f,0x64,0x3f,0x74,0x3f,0x84,
	0x3f,0x34,0x3f,0x64,0x3f,0x64,0x3f,0x04,
	0x13,0x3f,0xe4,0x3f,0x34,0x3f,0x04,0x10,
	0x3f,0x84,0x3f,0x34,0x3f,0x64,0x3f,0x54,
	0x3f,0x74,0x3f,0x74,0x3f,0x34,0x3f,0x64,
	0x3f,0x54,0x3f,0x04,0x5e,0x50,0x04,0x37,
	0x3f,0x64,0x7f,0x44,0x3f,0x84,0x3f,0x44,
	0x3f,0x04,0x11,0x3f,0x74,0x3f,0x24,0x3f,
	0x04,0x18,0x4f,0x54,0x3f,0x34,0x3f,0x74,
	0x3f,0x34,0x3f,0x34,0x3f,0x04,0x19,0x3f,
	0x64,0x3f,0x84,0x3f,0x04,0x15,0x4f,0x34,
	0x3f,0x64,0x3f,0x34,0x3f,0x84,0x3f,0x34,
	0x3f,0x14,0x2f,0x44,0x2f,0x4f,0xf4,0x3f,
	0xa4,0x3f,0xa4,0x3f,0x4f,0x84,0x3f,0xa4,
	0x3f,0x04,0x10,0x3f,0x64,0x3f,0x74,0x3f,
	0x84,0x3f,0x34,0x3f,0x64,0x3f,0x64,0x3f,
	0x04,0x13,0x3f,0xf4,0x3f,0x4f,0x04,0x11,
	0x3f,0x84,0x3f,0x34,0x3f,0x64,0x3f,0x54,
	0x3f,0x74,0x3f,0x74,0x3f,0x34,0x3f,0x64,
	0x3f,0x54,0x3f,0x04,0x5e,0x50,0x04,0x37,
	0x3f,0x84,0x5f,0x54,0x3f,0x64,0x3f,0x54,
	0x3f,0x04,0x11,0x4f,0x54,0x3f,0x44,0x3f,
	0x64,0x3f,0xe4,0x3f,0x54,0x4f,0x34,0x4f,
	0x54,0x3f,0x44,0x3f,0x44,0x3f,0x64,0x3f,
	0xf4,0x3f,0x74,0x3f,0x64,0x3f,0xe4,0x3f,
	0x64,0x3f,0x34,0x3f,0x64,0x3f,0x44,0x3f,
	0x64,0x3f,0x54,0x4f,0x64,0x4f,0x04,0x10,
	0x3f,0x84,0x4f,0xc4,0x5f,0x94,0x3f,0x84,
	0x4f,0x04,0x11,0x3f,0x64,0x3f,0x84,0x3f,
	0x64,0x3f,0x44,0x3f,0x64,0x3f,0x64,0x3f,
	0x04,0x13,0x3f,0x04,0x10,0x5f,0x04,0x13,
	0x3f,0x64,0x3f,0x44,0x3f,0x54,0x4f,0x54,
	0x3f,0x74,0x4f,0x54,0x3f,0x44,0x3f,0x54,
	0x4f,0x54,0x3f,0x04,0x5e,0x50,0x04,0x37,
	0x3f,0x94,0x4f,0x74,0x8f,0x84,0x7f,0xc4,
	0xbf,0x64,0x9f,0x04,0x11,0xbf,0x34,0xbf,
	0x54,0x3f,0x54,0x9f,0x04,0x12,0x7f,0x44,
	0x8f,0x04,0x11,0xaf,0x44,0x3f,0x64,0x3f,
	0x64,0x8f,0x84,0x3f,0x64,0x3f,0x04,0x11,
	0xdf,0xf4,0x3f,0xa4,0xdf,0x04,0x13,0x3f,
	0x64,0x3f,0xa4,0x8f,0x64,0x3f,0x64,0x3f,
	0x64,0x3f,0x04,0x13,0x3f,0x04,0x11,0x3f,
	0x04,0x16,0x8f,0x74,0x7f,0x14,0x3f,0x64,
	0x7f,0x24,0x3f,0x8f,0x64,0x7f,0x4f,0x64,
	0x7f,0x24,0x3f,0x04,0x54,0x50,0x04,0xff,
	0x04,0xff,0x04,0x3b,0x3f,0x04,0x7f,0x50,
	0x04,0xff,0x04,0xff,0x04,0x3b,0x3f,0x04,
	0x7f,0x50,0x04,0xff,0x04,0xff,0x04,0x3b,
	0x3f,0x04,0x7f,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0x3d,0x7f,0x84,0x3f,0x04,0x7a,
	0x3f,0x04,0x14,0x7f,0x84,0xaf,0x04,0x40,
	0x7f,0x84,0xcf,0x74,0x0f,0x11,0x04,0x3e,
	0x3f,0x04,0x1e,0x3f,0x04,0x26,0xef,0x04,
	0x24,0xef,0x54,0xaf,0x04,0x78,0x50,0x04,
	0x3a,0x4f,0x54,0x4f,0x54,0x3f,0x04,0x56,
	0x3f,0x04,0x21,0x3f,0x04,0x11,0x4f,0x54,
	0x4f,0x54,0x3f,0x74,0x4f,0x04,0x39,0x4f,
	0x54,0x4f,0x54,0x3f,0x84,0x4f,0xb4,0x3f,
	0x04,0x45,0x3f,0x04,0x1e,0x3f,0x04,0x26,
	0x3f,0x04,0x2f,0x3f,0x04,0x10,0x2f,0x04,
	0x80,0x50,0x04,0x38,0x4f,0x94,0x3f,0x44,
	0x3f,0x04,0x56,0x3f,0x04,0x21,0x3f,0xf4,
	0x4f,0x94,0x3f,0x44,0x3f,0x94,0x4f,0x04,
	0x35,0x4f,0x94,0x3f,0x44,0x3f,0xa4,0x3f,
	0xa4,0x3f,0x04,0x45,0x3f,0x04,0x1e,0x3f,
	0x04,0x26,0x3f,0x04,0x24,0x2f,0x94,0x3f,
	0x04,0x10,0x2f,0x04,0x80,0x50,0x04,0x38,
	0x3f,0xb4,0x3f,0x34,0x3f,0x04,0x56,0x3f,
	0x04,0x21,0x3f,0xf4,0x3f,0xb4,0x3f,0x34,
	0x3f,0xa4,0x3f,0x04,0x35,0x3f,0xb4,0x3f,
	0x34,0x3f,0xa4,0x3f,0xa4,0x3f,0x04,0x45,
	0x3f,0x04,0x1e,0x3f,0x04,0x26,0x3f,0x04,
	0x24,0x2f,0x94,0x3f,0xf4,0x2f,0x04,0x81,
	0x50,0x04,0x37,0x3f,0x04,0x12,0x3f,0x14,
	0x7f,0x74,0x9f,0x44,0x3f,0x8f,0x74,0xcf,
	0x24,0x9f,0xe4,0xaf,0x54,0x8f,0x04,0x10,
	0x3f,0xe4,0x3f,0x04,0x12,0x3f,0xb4,0x3f,
	0x04,0x10,0x8f,0x64,0x3f,0x24,0x4f,0xc4,
	0x3f,0x04,0x12,0x3f,0x94,0x4f,0xa4,0x3f,
	0x04,0x14,0x3f,0x8f,0x24,0x7f,0x64,0x8f,
	0x74,0x7f,0x4f,0x54,0x9f,0x04,0x10,0x3f,
	0x8f,0x44,0x3f,0x74,0x3f,0xd4,0x3f,0xf4,
	0x3f,0x8f,0xa4,0x2f,0x94,0x3f,0xf4,0xaf,
	0x04,0x79,0x50,0x04,0x37,0x3f,0x04,0x12,
	0x4f,0x54,0x3f,0x54,0x3f,0x54,0x3f,0x34,
	0x4f,0x54,0x3f,0x54,0x3f,0x44,0x3f,0x44,
	0x3f,0x64,0x2f,0x04,0x10,0x3f,0x74,0x3f,
	0x64,0x3f,0xe4,0x3f,0xe4,0x3f,0x04,0x12,
	0x3f,0xb4,0x3f,0xe4,0x3f,0x64,0x3f,0x44,
	0x6f,0xf4,0x3f,0x04,0x12,0xef,0xc4,0x3f,
	0x04,0x14,0x4f,0x54,0x4f,0x54,0x3f,0x34,
	0x3f,0x64,0x3f,0x44,0x3f,0x54,0x4f,0x44,
	0x3f,0x64,0x2f,0xf4,0x4f,0x54,0x3f,0x34,
	0x4f,0x54,0x4f,0xd4,0xcf,0x64,0x4f,0x54,
	0x3f,0x34,0xef,0x34,0xcf,0x64,0x2f,0x64,
	0x3f,0x04,0x78,0x50,0x04,0x37,0x3f,0xc4,
	0x3f,0x34,0x3f,0x64,0x3f,0xb4,0x5f,0x34,
	0x3f,0x64,0x3f,0x54,0x3f,0x44,0x3f,0x34,
	0xdf,0xf4,0x3f,0x64,0x3f,0x84,0x3f,0xd4,
	0x3f,0xe4,0x3f,0xc4,0x3f,0x34,0x3f,0xb4,
	0x3f,0xd4,0x3f,0x84,0x3f,0x34,0x4f,0x04,
	0x11,0x3f,0xc4,0x3f,0x34,0x3f,0x64,0x3f,
	0xe4,0x3f,0x04,0x14,0x3f,0x64,0x3f,0x64,
	0x3f,0x24,0x3f,0x84,0x3f,0x24,0x3f,0x74,
	0x3f,0x34,0xdf,0xe4,0x3f,0x74,0x3f,0x34,
	0x3f,0x54,0x3f,0xe4,0x3f,0xf4,0x3f,0x64,
	0x3f,0x94,0x2f,0x94,0x3f,0x04,0x18,0x3f,
	0x04,0x77,0x50,0x04,0x38,0x3f,0xb4,0x3f,
	0x34,0x3f,0x64,0x3f,0x54,0x7f,0x14,0x3f,
	0x34,0x3f,0x64,0x3f,0x64,0x3f,0x24,0x3f,
	0x44,0x3f,0x04,0x19,0x3f,0x64,0x3f,0x84,
	0x3f,0xd4,0x3f,0xf4,0x3f,0xb4,0x3f,0x34,
	0x3f,0xa4,0x4f,0xd4,0x3f,0x84,0x3f,0x34,
	0x3f,0x04,0x13,0x3f,0xb4,0x3f,0x34,0x3f,
	0x74,0x3f,0xd4,0x3f,0x04,0x14,0x3f,0x64,
	0x3f,0x64,0x3f,0x24,0x3f,0x84,0x3f,0x24,
	0x3f,0x74,0x3f,0x34,0x3f,0x04,0x18,0x3f,
	0x74,0x3f,0x44,0x3f,0x34,0x3f,0xf4,0x3f,
	0xf4,0x3f,0x64,0x3f,0x94,0x2f,0x94,0x3f,
	0x04,0x18,0x3f,0x04,0x77,0x50,0x04,0x38,
	0x4f,0x94,0x3f,0x44,0x3f,0x64,0x3f,0x44,
	0x3f,0x64,0x3f,0x34,0x3f,0x64,0x3f,0x54,
	0x2f,0x14,0x4f,0x64,0x3f,0x74,0x3f,0xf4,
	0x3f,0x64,0x3f,0x84,0x3f,0xd4,0x3f,0xf4,
	0x4f,0x94,0x3f,0x44,0x3f,0x94,0x4f,0xe4,
	0x3f,0x84,0x3f,0x34,0x3f,0x04,0x13,0x4f,
	0x94,0x3f,0x44,0x3f,0x84,0x4f,0xb4,0x3f,
	0x04,0x14,0x3f,0x64,0x3f,0x64,0x3f,0x24,
	0x3f,0x84,0x3f,0x24,0x3f,0x74,0x3f,0x34,
	0x3f,0x74,0x3f,0xe4,0x3f,0x74,0x3f,0x54,
	0x3f,0x4f,0x04,0x10,0x3f,0xf4,0x3f,0x64,
	0x3f,0x94,0x2f,0x94,0x3f,0xe4,0x3f,0x74,
	0x3f,0x04,0x77,0x50,0x04,0x3a,0x4f,0x54,
	0x4f,0x54,0x3f,0x64,0x3f,0x44,0x4f,0x34,
	0x5f,0x34,0x3f,0x64,0x3f,0x44,0x3f,0xc4,
	0x4f,0x44,0x3f,0x04,0x10,0x4f,0x34,0x1f,
	0x34,0x3f,0x44,0x3f,0xf4,0x3f,0x04,0x11,
	0x4f,0x54,0x4f,0x54,0x3f,0x74,0x4f,0x04,
	0x12,0x3f,0x44,0x3f,0x54,0x3f,0x04,0x15,
	0x4f,0x54,0x4f,0x54,0x3f,0x94,0x4f,0xa4,
	0x3f,0x04,0x14,0x3f,0x64,0x3f,0x64,0x3f,
	0x44,0x3f,0x44,0x3f,0x54,0x4f,0x34,0x5f,
	0x44,0x4f,0x44,0x3f,0xf4,0x5f,0x34,0x4f,
	0x74,0x5f,0x04,0x11,0x3f,0xf4,0x3f,0x64,
	0x3f,0x04,0x14,0x3f,0xf4,0x3f,0x54,0x3f,
	0x04,0x78,0x50,0x04,0x3d,0x7f,0x84,0x3f,
	0x64,0x3f,0x64,0x5f,0x24,0x4f,0x24,0x3f,
	0x64,0x3f,0x54,0xbf,0x64,0x6f,0x04,0x14,
	0x6f,0x54,0x6f,0x04,0x11,0xef,0x94,0x7f,
	0x84,0xaf,0x04,0x18,0x6f,0x74,0x3f,0x04,
	0x18,0x7f,0x84,0x3f,0xa4,0x4f,0x94,0x3f,
	0x04,0x14,0x3f,0x64,0x3f,0x64,0x3f,0x64,
	0x6f,0x94,0x5f,0x24,0x3f,0x74,0x6f,0x04,
	0x11,0x3f,0x24,0x5f,0xa4,0x3f,0x04,0x12,
	0x3f,0xf4,0x3f,0x64,0x3f,0x04,0x14,0x3f,
	0x04,0x10,0x9f,0x04,0x79,0x50,0x04,0x7b,
	0x2f,0x94,0x2f,0x04,0xff,0x04,0x58,0x2f,
	0x04,0xda,0x50,0x04,0x7c,0xbf,0x04,0xff,
	0x04,0x55,0x5f,0x04,0xdb,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0x48,0x7f,0x04,0x7b,0x3f,
	0x04,0x38,0x3f,0x04,0x37,0x3f,0x04,0x59,
	0x3f,0x04,0x47,0x3f,0x04,0x59,0x3f,0x04,
	0x77,0x50,0x04,0x47,0x3f,0x74,0x3f,0x04,
	0x3c,0x3f,0x04,0x68,0x3f,0x74,0x3f,0x04,
	0x37,0x3f,0x04,0x4f,0x3f,0x74,0x3f,0x04,
	0x47,0x3f,0x04,0xd3,0x50,0x04,0x47,0x3f,
	0x74,0x3f,0x04,0x3c,0x3f,0x04,0x68,0x3f,
	0x74,0x3f,0x04,0x37,0x3f,0x04,0x4f,0x3f,
	0x74,0x3f,0x04,0x47,0x3f,0x04,0xd3,0x50,
	0x04,0x3b,0x6f,0x34,0x0f,0x14,0x64,0x6f,
	0x74,0x3f,0x34,0x3f,0xf4,0x6f,0x44,0xaf,
	0x64,0x6f,0x74,0x3f,0x24,0x5f,0x64,0x3f,
	0x24,0x5f,0x64,0x3f,0x44,0x3f,0x24,0x5f,
	0xa4,0x4f,0x34,0x3f,0x94,0xaf,0x34,0x3f,
	0x24,0x5f,0x94,0x6f,0x04,0x11,0x3f,0x24,
	0x5f,0x64,0x3f,0x84,0x6f,0x34,0x3f,0x94,
	0x3f,0x54,0x6f,0x74,0x3f,0x34,0x3f,0x04,
	0x11,0xaf,0x34,0x3f,0x24,0x5f,0x94,0x6f,
	0x74,0x3f,0x24,0x5f,0x04,0x10,0x3f,0x24,
	0x5f,0x64,0x3f,0x84,0x6f,0x34,0x3f,0x94,
	0x3f,0x04,0x10,0x6f,0x94,0x4f,0x34,0x3f,
	0x54,0x6f,0x54,0x3f,0x44,0x3f,0x24,0x5f,
	0x04,0x69,0x50,0x04,0x38,0x4f,0x34,0x4f,
	0x44,0x3f,0x74,0x3f,0x74,0x4f,0x44,0x3f,
	0x54,0x3f,0x14,0x5f,0xc4,0x4f,0x44,0x4f,
	0x44,0x3f,0x84,0x3f,0x44,0x3f,0x54,0x5f,
	0x34,0x4f,0x44,0x5f,0x34,0x4f,0x44,0x3f,
	0x44,0x5f,0x34,0x4f,0x64,0x3f,0x24,0x4f,
	0xf4,0x3f,0x74,0x5f,0x34,0x4f,0x44,0x4f,
	0x44,0x3f,0xf4,0x5f,0x34,0x4f,0x44,0x3f,
	0x54,0x4f,0x34,0x4f,0x24,0x3f,0x74,0x3f,
	0x34,0x4f,0x44,0x3f,0x54,0x3f,0x6f,0x04,
	0x14,0x3f,0x74,0x5f,0x34,0x4f,0x44,0x4f,
	0x44,0x3f,0x54,0x5f,0x34,0x4f,0xe4,0x5f,
	0x34,0x4f,0x44,0x3f,0x54,0x4f,0x34,0x4f,
	0x24,0x3f,0x74,0x3f,0xe4,0x4f,0x34,0x4f,
	0x54,0x3f,0x24,0x4f,0x54,0x4f,0x34,0x4f,
	0x34,0x3f,0x44,0x5f,0x34,0x4f,0x04,0x67,
	0x50,0x04,0x40,0x3f,0x44,0x3f,0x74,0x3f,
	0x64,0x3f,0x74,0x3f,0x44,0x5f,0x04,0x10,
	0x3f,0xd4,0x3f,0x64,0x3f,0x84,0x3f,0x34,
	0x3f,0x74,0x3f,0x34,0x3f,0x74,0x3f,0x34,
	0x3f,0x44,0x4f,0x54,0x3f,0x54,0x3f,0x44,
	0x3f,0xf4,0x3f,0x74,0x4f,0x54,0x3f,0x34,
	0x3f,0x74,0x3f,0xe4,0x3f,0x74,0x3f,0x34,
	0x3f,0xd4,0x3f,0x34,0x3f,0x54,0x3f,0x34,
	0x3f,0x74,0x3f,0x44,0x5f,0x04,0x18,0x3f,
	0x74,0x4f,0x54,0x3f,0x34,0x3f,0x74,0x3f,
	0x44,0x4f,0x54,0x3f,0xe4,0x3f,0x74,0x3f,
	0x34,0x3f,0xd4,0x3f,0x34,0x3f,0x54,0x3f,
	0x04,0x17,0x3f,0x44,0x3f,0x44,0x3f,0xd4,
	0x3f,0x34,0x3f,0x44,0x4f,0x54,0x3f,0x04,
	0x67,0x50,0x04,0x3a,0x9f,0x44,0x3f,0x74,
	0x3f,0x64,0xdf,0x44,0x3f,0x04,0x13,0x8f,
	0x74,0x3f,0x64,0x3f,0x84,0x3f,0x34,0x3f,
	0x74,0x3f,0x34,0x3f,0x74,0x3f,0x34,0x3f,
	0x44,0x3f,0x64,0x3f,0x54,0x3f,0x44,0x3f,
	0xf4,0x3f,0x74,0x3f,0x64,0x3f,0x34,0xdf,
	0xe4,0x3f,0x74,0x3f,0x34,0x3f,0x74,0x9f,
	0x44,0x3f,0x34,0x3f,0x44,0xdf,0x44,0x3f,
	0x04,0x1a,0x3f,0x74,0x3f,0x64,0x3f,0x34,
	0xdf,0x44,0x3f,0x64,0x3f,0xe4,0x3f,0x74,
	0x3f,0x34,0x3f,0x74,0x9f,0x44,0x3f,0x34,
	0x3f,0x04,0x12,0x9f,0x44,0x3f,0x44,0x3f,
	0x74,0x9f,0x34,0x3f,0x44,0x3f,0x64,0x3f,
	0x04,0x67,0x50,0x04,0x37,0x4f,0x54,0x3f,
	0x44,0x3f,0x74,0x3f,0x64,0x3f,0xe4,0x3f,
	0x04,0x1a,0x4f,0x44,0x3f,0x64,0x3f,0x84,
	0x3f,0x34,0x3f,0x74,0x3f,0x34,0x3f,0x74,
	0x3f,0x34,0x3f,0x44,0x3f,0x64,0x3f,0x64,
	0x8f,0x04,0x10,0x3f,0x74,0x3f,0x64,0x3f,
	0x34,0x3f,0x04,0x18,0x3f,0x74,0x3f,0x34,
	0x3f,0x44,0x4f,0x54,0x3f,0x54,0x3f,0x14,
	0x3f,0x54,0x3f,0xe4,0x3f,0x04,0x1a,0x3f,
	0x74,0x3f,0x64,0x3f,0x34,0x3f,0xe4,0x3f,
	0x64,0x3f,0xe4,0x3f,0x74,0x3f,0x34,0x3f,
	0x44,0x4f,0x54,0x3f,0x54,0x3f,0x4f,0x04,
	0x10,0x4f,0x54,0x3f,0x54,0x8f,0x54,0x4f,
	0x54,0x3f,0x34,0x3f,0x44,0x3f,0x64,0x3f,
	0x04,0x67,0x50,0x04,0x37,0x3f,0x54,0x4f,
	0x44,0x3f,0x74,0x3f,0x74,0x3f,0x64,0x3f,
	0x44,0x3f,0x04,0x12,0x3f,0x64,0x3f,0x44,
	0x3f,0x74,0x3f,0x64,0x3f,0x44,0x4f,0x54,
	0x3f,0x44,0x4f,0x54,0x3f,0x44,0x3f,0x44,
	0x3f,0x64,0x3f,0x44,0x2f,0x04,0x18,0x3f,
	0x74,0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,
	0xe4,0x4f,0x54,0x3f,0x44,0x3f,0x44,0x3f,
	0x54,0x4f,0x54,0x3f,0x14,0x3f,0x64,0x3f,
	0x64,0x3f,0x44,0x3f,0x04,0x1a,0x3f,0x74,
	0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,0x44,
	0x3f,0x64,0x3f,0xe4,0x4f,0x54,0x3f,0x44,
	0x3f,0x44,0x3f,0x54,0x4f,0x54,0x3f,0x4f,
	0x04,0x10,0x3f,0x54,0x4f,0x34,0x2f,0xd4,
	0x3f,0x54,0x4f,0x34,0x3f,0x44,0x3f,0x64,
	0x3f,0x04,0x67,0x50,0x04,0x38,0xbf,0x44,
	0x3f,0x84,0x7f,0x34,0x9f,0x64,0x3f,0x04,
	0x13,0xaf,0x64,0x7f,0x44,0x8f,0x64,0x3f,
	0x14,0x7f,0x54,0x3f,0x8f,0x54,0x3f,0x44,
	0x3f,0x64,0x3f,0x54,0xaf,0x04,0x10,0x7f,
	0x24,0x3f,0x64,0x3f,0x54,0x9f,0x04,0x10,
	0x3f,0x8f,0x54,0x3f,0x54,0xbf,0x64,0x5f,
	0x84,0x9f,0x64,0x3f,0x84,0x3f,0x04,0x10,
	0x7f,0x24,0x3f,0x64,0x3f,0x54,0x9f,0x64,
	0x3f,0x64,0x3f,0xe4,0x3f,0x8f,0x54,0x3f,
	0x54,0xbf,0x64,0x5f,0x04,0x12,0xbf,0x44,
	0xaf,0x54,0xbf,0x34,0x3f,0x44,0x3f,0x64,
	0x3f,0x44,0x3f,0x04,0x60,0x50,0x04,0xaa,
	0x3f,0xd4,0x3f,0x04,0x24,0x2f,0x84,0x3f,
	0x04,0x41,0x3f,0x04,0x27,0x3f,0x04,0x24,
	0x2f,0x04,0x53,0x3f,0x04,0x27,0x3f,0x04,
	0x21,0x2f,0x84,0x3f,0x04,0x8b,0x50,0x04,
	0xaa,0x3f,0xd4,0x3f,0x04,0x24,0x3f,0x74,
	0x3f,0x04,0x41,0x3f,0x04,0x23,0x1f,0x24,
	0x3f,0x04,0x24,0x04,0x56,0x3f,0x04,0x23,
	0x34,0x3f,0x04,0x22,0x3f,0x74,0x3f,0x04,
	0x8b,0x50,0x04,0xaa,0x3f,0xd4,0x3f,0x04,
	0x26,0x8f,0x04,0x44,0x3f,0x04,0x23,0x4f,
	0x04,0x7c,0x3f,0x04,0x23,0x4f,0x04,0x26,
	0x8f,0x04,0x8e,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0x38,0x4f,0x34,0x4f,0x04,0x11,
	0xbf,0xd4,0x3f,0xa4,0x3f,0xa4,0x3f,0x44,
	0x0f,0x11,0x34,0x3f,0x94,0xbf,0x84,0x4f,
	0x94,0x3f,0xf4,0x4f,0x34,0x4f,0x04,0xff,
	0x04,0xd2,0x50,0x04,0x38,0x4f,0x34,0x4f,
	0xf4,0x3f,0x94,0x3f,0xa4,0x5f,0x94,0x3f,
	0xa4,0x3f,0xb4,0x3f,0xa4,0x3f,0x74,0x3f,
	0x94,0x3f,0x64,0x5f,0x84,0x3f,0xf4,0x4f,
	0x34,0x4f,0x04,0xff,0x04,0xd2,0x50,0x04,
	0x38,0x4f,0x34,0x4f,0xe4,0x3f,0xb4,0x3f,
	0x84,0x3f,0x14,0x3f,0x84,0x3f,0xa4,0x3f,
	0xb4,0x3f,0xa4,0x3f,0x64,0x3f,0xb4,0x3f,
	0x54,0x7f,0x64,0x3f,0xf4,0x4f,0x34,0x4f,
	0x04,0xff,0x04,0xd2,0x50,0x04,0x38,0x4f,
	0x34,0x4f,0xd4,0x3f,0xc4,0x3f,0x74,0x3f,
	0x34,0x3f,0x74,0x3f,0xa4,0x3f,0xb4,0x3f,
	0xa4,0x3f,0x54,0x3f,0xd4,0x3f,0x44,0x3f,
	0x14,0x4f,0x54,0x3f,0xf4,0x4f,0x34,0x4f,
	0x04,0xff,0x04,0xd2,0x50,0x04,0x39,0x2f,
	0x54,0x2f,0xe4,0x3f,0x04,0x16,0x3f,0x34,
	0x3f,0x74,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x54,0x3f,0xd4,0x3f,0x44,0x3f,0x34,
	0x3f,0x44,0x3f,0x04,0x10,0x2f,0x54,0x2f,
	0x04,0xff,0x04,0xd3,0x50,0x04,0x39,0x2f,
	0x54,0x2f,0xe4,0x3f,0x04,0x15,0x3f,0x54,
	0x3f,0x64,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x54,0x3f,0xd4,0x3f,0x44,0x3f,0x44,
	0x3f,0x34,0x3f,0x04,0x10,0x2f,0x54,0x2f,
	0x04,0xff,0x04,0xd3,0x50,0x04,0x50,0x3f,
	0xc4,0x3f,0x54,0xdf,0x54,0x3f,0xa4,0x3f,
	0xb4,0x3f,0xa4,0x3f,0x54,0x3f,0xd4,0x3f,
	0x44,0x3f,0x54,0x4f,0x14,0x3f,0x04,0xff,
	0x04,0xec,0x50,0x04,0x51,0x3f,0xb4,0x3f,
	0x44,0x3f,0x94,0x3f,0x44,0x3f,0xa4,0x3f,
	0xb4,0x3f,0xa4,0x3f,0x64,0x3f,0xb4,0x3f,
	0x54,0x3f,0x64,0x7f,0x04,0xff,0x04,0xec,
	0x50,0x04,0x52,0x3f,0x84,0x4f,0x44,0x4f,
	0x94,0x4f,0x44,0x3f,0x84,0x3f,0xc4,0x3f,
	0xa4,0x3f,0x64,0x4f,0x94,0x3f,0x64,0x3f,
	0x84,0x5f,0x04,0xff,0x04,0xec,0x50,0x04,
	0x38,0x3f,0x44,0x3f,0x04,0x12,0xbf,0x64,
	0x3f,0xb4,0x3f,0x64,0xaf,0xe4,0x3f,0xa4,
	0x3f,0x84,0x4f,0x54,0x4f,0x74,0x3f,0x94,
	0x4f,0xf4,0x3f,0x44,0x3f,0x04,0xff,0x04,
	0xd3,0x50,0x04,0xaf,0x7f,0x04,0xff,0x04,
	0xff,0x74,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0x38,
	0x3f,0x04,0x64,0x3f,0x04,0x3e,0x3f,0x44,
	0x3f,0x04,0x36,0x3f,0x04,0xc4,0x3f,0x04,
	0x1e,0xef,0x04,0x3f,0x3f,0x04,0x63,0x50,
	0x04,0x38,0x3f,0x04,0x47,0x3f,0x04,0x1a,
	0x3f,0x04,0x3e,0x3f,0x44,0x3f,0x04,0x36,
	0x3f,0x04,0xc4,0x3f,0x04,0x1e,0x3f,0x04,
	0x4a,0x3f,0x04,0x63,0x50,0x04,0x38,0x3f,
	0x04,0x47,0x3f,0x04,0x1a,0x3f,0x04,0x45,
	0x3f,0x04,0x36,0x3f,0x04,0xe5,0x3f,0x04,
	0x4a,0x3f,0x04,0x63,0x50,0x04,0x38,0x3f,
	0x04,0x47,0x3f,0x04,0x1a,0x3f,0x04,0x45,
	0x3f,0x04,0x36,0x3f,0x04,0xe5,0x3f,0x04,
	0x4a,0x3f,0x04,0x63,0x50,0x04,0x38,0x3f,
	0xf4,0x3f,0x14,0x7f,0x24,0x7f,0x44,0x3f,
	0x64,0x3f,0x54,0xaf,0x24,0xaf,0xe4,0x7f,
	0x4f,0x54,0x9f,0x74,0xaf,0x54,0x9f,0x64,
	0x3f,0x24,0x4f,0x24,0x3f,0x44,0x3f,0x8f,
	0x64,0x9f,0x04,0x12,0x9f,0x44,0x3f,0x8f,
	0x74,0x8f,0x54,0x3f,0x74,0x3f,0x44,0x9f,
	0x04,0x10,0x3f,0x8f,0x24,0x7f,0x54,0x9f,
	0x74,0xaf,0x54,0xaf,0x64,0x9f,0x64,0xcf,
	0x24,0x9f,0x04,0x10,0x3f,0x44,0x3f,0x8f,
	0xf4,0x3f,0xf4,0x3f,0x24,0x4f,0x34,0x9f,
	0x64,0x3f,0x8f,0x64,0x9f,0x64,0x3f,0x8f,
	0x04,0x5b,0x50,0x04,0x38,0x3f,0xf4,0x4f,
	0x54,0x4f,0x54,0x3f,0x34,0x3f,0x64,0x3f,
	0x44,0x3f,0x64,0x3f,0x44,0x3f,0x04,0x11,
	0x3f,0x54,0x4f,0x44,0x3f,0x64,0x2f,0x54,
	0x3f,0x64,0x3f,0x34,0x3f,0x64,0x3f,0x44,
	0x6f,0x54,0x3f,0x44,0x4f,0x54,0x3f,0x44,
	0x3f,0x64,0x2f,0x04,0x10,0x3f,0x54,0x3f,
	0x34,0x4f,0x54,0x3f,0x44,0x3f,0x64,0x3f,
	0x44,0x3f,0x54,0x3f,0x44,0x3f,0x64,0x2f,
	0xf4,0x4f,0x54,0x4f,0x54,0x3f,0x34,0x3f,
	0x64,0x2f,0x54,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x44,0x3f,0x54,0x3f,0x44,0x3f,
	0x44,0x3f,0x44,0x3f,0x64,0x2f,0xf4,0x3f,
	0x44,0x4f,0x54,0x3f,0xe4,0xcf,0x64,0x6f,
	0x54,0x3f,0x64,0x2f,0x54,0x4f,0x54,0x3f,
	0x44,0x3f,0x64,0x3f,0x44,0x4f,0x54,0x3f,
	0x04,0x5a,0x50,0x04,0x38,0x3f,0xf4,0x3f,
	0x64,0x3f,0x64,0x3f,0x34,0x3f,0x64,0x3f,
	0x44,0x4f,0xc4,0x3f,0x04,0x10,0x3f,0x74,
	0x3f,0x34,0xdf,0x44,0x4f,0xa4,0x3f,0xe4,
	0x4f,0x74,0x3f,0x44,0x3f,0x74,0x3f,0x24,
	0xdf,0x04,0x15,0x5f,0x34,0x3f,0x74,0x3f,
	0x24,0x3f,0x84,0x3f,0x34,0x4f,0x34,0x4f,
	0x34,0xdf,0xe4,0x3f,0x64,0x3f,0x64,0x3f,
	0x24,0xdf,0x44,0x4f,0xb4,0x4f,0x04,0x12,
	0x5f,0x44,0x3f,0x44,0x3f,0x34,0xdf,0xe4,
	0x3f,0x44,0x3f,0x64,0x3f,0xe4,0x3f,0xf4,
	0x4f,0x64,0xdf,0x44,0x3f,0x64,0x3f,0x34,
	0x3f,0xe4,0x3f,0x64,0x3f,0x04,0x5a,0x50,
	0x04,0x38,0x3f,0xf4,0x3f,0x64,0x3f,0x64,
	0x3f,0x34,0x3f,0x64,0x3f,0x74,0x8f,0x54,
	0x3f,0x04,0x10,0x3f,0x74,0x3f,0x34,0x3f,
	0x04,0x11,0x8f,0x34,0x3f,0xe4,0x3f,0x84,
	0x3f,0x44,0x3f,0x74,0x3f,0x24,0x3f,0x04,
	0x19,0x7f,0x14,0x3f,0x34,0x3f,0x74,0x3f,
	0x24,0x3f,0x84,0x3f,0x44,0x3f,0x34,0x3f,
	0x44,0x3f,0x04,0x18,0x3f,0x64,0x3f,0x64,
	0x3f,0x24,0x3f,0x04,0x11,0x8f,0x74,0x8f,
	0x54,0x7f,0x4f,0x54,0x3f,0x24,0x3f,0x44,
	0x3f,0x04,0x18,0x3f,0x44,0x3f,0x64,0x3f,
	0xe4,0x3f,0xf4,0x3f,0x74,0x3f,0xe4,0x3f,
	0x64,0x3f,0x34,0x3f,0xe4,0x3f,0x64,0x3f,
	0x04,0x5a,0x50,0x04,0x38,0x3f,0xf4,0x3f,
	0x64,0x3f,0x64,0x3f,0x34,0x3f,0x54,0x4f,
	0x44,0x3f,0x64,0x3f,0x44,0x3f,0x04,0x10,
	0x3f,0x74,0x3f,0x34,0x3f,0x74,0x3f,0x44,
	0x3f,0x64,0x3f,0x24,0x3f,0x74,0x3f,0x44,
	0x3f,0x84,0x3f,0x44,0x3f,0x74,0x3f,0x24,
	0x3f,0x74,0x3f,0xe4,0x3f,0x64,0x3f,0x34,
	0x3f,0x74,0x3f,0x24,0x3f,0x84,0x3f,0x54,
	0x3f,0x14,0x3f,0x54,0x3f,0x74,0x3f,0xe4,
	0x3f,0x64,0x3f,0x64,0x3f,0x24,0x3f,0x74,
	0x3f,0x44,0x3f,0x64,0x3f,0x34,0x3f,0x64,
	0x3f,0x34,0x3f,0x64,0x3f,0x44,0x2f,0x5f,
	0x64,0x3f,0x74,0x3f,0xe4,0x3f,0x44,0x3f,
	0x64,0x3f,0xe4,0x3f,0xf4,0x3f,0x74,0x3f,
	0x74,0x3f,0x44,0x3f,0x64,0x3f,0x34,0x3f,
	0x74,0x3f,0x44,0x3f,0x64,0x3f,0x04,0x5a,
	0x50,0x04,0x38,0x3f,0xf4,0x3f,0x64,0x3f,
	0x64,0x3f,0x34,0x4f,0x34,0x5f,0x54,0x3f,
	0x44,0x4f,0x44,0x4f,0x34,0x1f,0xc4,0x4f,
	0x34,0x5f,0x44,0x4f,0x44,0x3f,0x64,0x3f,
	0x44,0x4f,0x34,0x4f,0x44,0x3f,0x54,0x3f,
	0x84,0x3f,0x44,0x5f,0x34,0x4f,0x44,0x4f,
	0x44,0x3f,0xf4,0x4f,0x34,0x5f,0x34,0x5f,
	0x34,0x4f,0x54,0x3f,0x44,0x3f,0x84,0x5f,
	0x74,0x4f,0x44,0x3f,0xf4,0x3f,0x64,0x3f,
	0x64,0x3f,0x34,0x4f,0x44,0x3f,0x64,0x3f,
	0x44,0x4f,0x44,0x3f,0x44,0x4f,0x34,0x4f,
	0x34,0x5f,0x34,0x3f,0xc4,0x4f,0x44,0x3f,
	0xf4,0x3f,0x44,0x3f,0x64,0x3f,0xe4,0x3f,
	0xf4,0x3f,0x84,0x4f,0x44,0x3f,0x54,0x3f,
	0x64,0x3f,0x44,0x4f,0x44,0x3f,0x54,0x3f,
	0x64,0x3f,0x44,0x3f,0x04,0x53,0x50,0x04,
	0x38,0x3f,0xf4,0x3f,0x64,0x3f,0x64,0x3f,
	0x54,0x5f,0x24,0x3f,0x74,0x6f,0x94,0x6f,
	0xe4,0x5f,0x24,0x3f,0x74,0x6f,0xa4,0x6f,
	0x94,0x5f,0x84,0x3f,0x84,0x3f,0x44,0x3f,
	0x24,0x5f,0x94,0x6f,0x04,0x13,0x5f,0x24,
	0x4f,0x24,0x3f,0x24,0x5f,0x94,0x6f,0xb4,
	0x3f,0xb4,0x6f,0x04,0x11,0x3f,0x64,0x3f,
	0x64,0x3f,0x64,0x6f,0xa4,0x6f,0x94,0x6f,
	0x84,0x5f,0x24,0x4f,0x34,0xbf,0x64,0x6f,
	0x04,0x11,0x3f,0x44,0x3f,0x64,0x3f,0xe4,
	0x3f,0xf4,0x3f,0xb4,0x6f,0x74,0x3f,0x64,
	0x3f,0x74,0x5f,0x84,0x3f,0x64,0x3f,0x44,
	0x3f,0x04,0x53,0x50,0x04,0xff,0x04,0xbf,
	0x2f,0x94,0x2f,0x04,0xf0,0x50,0x04,0xff,
	0x04,0xc0,0xbf,0x04,0xf1,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0x38,0x3f,0xa4,0x3f,0x04,
	0x79,0x3f,0xd4,0x3f,0x04,0x1d,0x3f,0x04,
	0x1d,0x3f,0x04,0x5a,0x3f,0x44,0x3f,0xd4,
	0x3f,0x04,0x20,0x7f,0x04,0x93,0x3f,0xd4,
	0x3f,0x04,0x1d,0x3f,0x04,0x46,0x50,0x04,
	0x38,0x3f,0xa4,0x3f,0x04,0x6f,0x3f,0x74,
	0x3f,0x04,0xb1,0x3f,0xd4,0x3f,0x04,0x1f,
	0x3f,0x04,0x8e,0x3f,0x74,0x3f,0x04,0x76,
	0x50,0x04,0x38,0x3f,0xa4,0x3f,0x04,0x6f,
	0x3f,0x74,0x3f,0x04,0xb1,0x3f,0xd4,0x3f,
	0x04,0x1f,0x3f,0x04,0x8e,0x3f,0x74,0x3f,
	0x04,0x76,0x50,0x04,0x38,0x3f,0xa4,0x3f,
	0x84,0x6f,0x54,0x3f,0x64,0x2f,0x64,0x3f,
	0x64,0x6f,0x54,0x3f,0x94,0x3f,0x54,0x6f,
	0x74,0x3f,0x34,0x3f,0xa4,0xaf,0x34,0x3f,
	0x24,0x5f,0x64,0x3f,0x74,0x6f,0x04,0x10,
	0x3f,0x74,0x6f,0x04,0x10,0x3f,0x44,0x3f,
	0x24,0x5f,0x44,0x5f,0x54,0x3f,0x24,0x5f,
	0x94,0x6f,0xa4,0x6f,0x94,0x6f,0x64,0x3f,
	0x44,0x3f,0x24,0x4f,0x74,0x3f,0x74,0x6f,
	0xf4,0xaf,0x54,0x6f,0x74,0x3f,0x34,0x3f,
	0xc4,0x3f,0x24,0x5f,0x44,0x5f,0x84,0x6f,
	0x04,0x1b,0x6f,0x94,0x6f,0xf4,0xaf,0x34,
	0x3f,0x24,0x5f,0x64,0x3f,0x74,0x6f,0x04,
	0x10,0x3f,0x74,0x6f,0x04,0x39,0x50,0x04,
	0x38,0x0f,0x10,0x64,0x3f,0x44,0x3f,0x44,
	0x3f,0x44,0x4f,0x44,0x3f,0x44,0x4f,0x44,
	0x3f,0x44,0x3f,0x74,0x3f,0x34,0x4f,0x44,
	0x3f,0x54,0x3f,0x14,0x5f,0xd4,0x3f,0x74,
	0x5f,0x34,0x4f,0x44,0x3f,0x44,0x4f,0x44,
	0x4f,0xd4,0x3f,0x44,0x4f,0x44,0x4f,0xd4,
	0x3f,0x44,0x5f,0x34,0x6f,0x34,0x4f,0x34,
	0x5f,0x34,0x4f,0x54,0x3f,0x44,0x3f,0x54,
	0x4f,0x44,0x4f,0x34,0x4f,0x44,0x4f,0x34,
	0x3f,0x44,0x5f,0x34,0x4f,0x44,0x3f,0x44,
	0x4f,0x44,0x3f,0x04,0x10,0x3f,0x74,0x3f,
	0x44,0x3f,0x54,0x3f,0x6f,0xc4,0x5f,0x34,
	0x6f,0x34,0x4f,0x34,0x4f,0x44,0x3f,0x04,
	0x16,0x4f,0x44,0x4f,0x44,0x3f,0x44,0x3f,
	0x04,0x10,0x3f,0x74,0x5f,0x34,0x4f,0x44,
	0x3f,0x44,0x4f,0x44,0x4f,0xd4,0x3f,0x44,
	0x4f,0x44,0x4f,0x04,0x36,0x50,0x04,0x38,
	0x3f,0xa4,0x3f,0x44,0x3f,0x84,0x3f,0x24,
	0x3f,0x34,0x2f,0x24,0x2f,0x34,0x3f,0x34,
	0x3f,0x74,0x3f,0x44,0x3f,0x54,0x3f,0x34,
	0x3f,0x74,0x3f,0x44,0x5f,0x04,0x11,0x3f,
	0x74,0x4f,0x54,0x3f,0x44,0x3f,0x44,0x3f,
	0x04,0x16,0x3f,0x44,0x3f,0x04,0x16,0x3f,
	0x44,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x74,0x3f,0x24,0x3f,0x84,0x3f,0x34,0x3f,
	0xc4,0x3f,0xc4,0x3f,0x44,0x3f,0x74,0x3f,
	0x34,0x3f,0x34,0x3f,0x74,0x3f,0xf4,0x3f,
	0x54,0x3f,0x84,0x3f,0x34,0x5f,0x04,0x10,
	0x3f,0x64,0x3f,0x64,0x3f,0x24,0x3f,0x74,
	0x3f,0x04,0x15,0x3f,0xb4,0x3f,0x84,0x3f,
	0xe4,0x3f,0x74,0x4f,0x54,0x3f,0x44,0x3f,
	0x44,0x3f,0x04,0x16,0x3f,0x44,0x3f,0x04,
	0x3f,0x50,0x04,0x38,0x3f,0xa4,0x3f,0x44,
	0x3f,0x84,0x3f,0x34,0x3f,0x24,0x2f,0x24,
	0x2f,0x24,0x3f,0x44,0xdf,0x54,0x3f,0x34,
	0x3f,0x44,0xdf,0x44,0x3f,0x04,0x13,0x3f,
	0x74,0x3f,0x64,0x3f,0x44,0x3f,0x54,0x8f,
	0x04,0x10,0x3f,0x54,0x8f,0x04,0x10,0x3f,
	0x44,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x74,0x3f,0x24,0x3f,0x84,0x3f,0x44,0x8f,
	0x74,0x8f,0x64,0x3f,0x44,0x3f,0x74,0x3f,
	0x34,0x3f,0x34,0xdf,0xf4,0x3f,0x54,0x3f,
	0x84,0x3f,0x34,0x3f,0x04,0x12,0x3f,0x64,
	0x3f,0x64,0x3f,0x24,0xdf,0x04,0x16,0x8f,
	0x54,0x3f,0x84,0x3f,0xe4,0x3f,0x74,0x3f,
	0x64,0x3f,0x44,0x3f,0x54,0x8f,0x04,0x10,
	0x3f,0x54,0x8f,0x04,0x39,0x50,0x04,0x38,
	0x3f,0xa4,0x3f,0x44,0x3f,0x84,0x3f,0x34,
	0x3f,0x14,0x2f,0x44,0x2f,0x4f,0x44,0x3f,
	0x04,0x10,0x3f,0x4f,0x54,0x3f,0xe4,0x3f,
	0x04,0x13,0x3f,0x74,0x3f,0x64,0x3f,0x44,
	0x3f,0xc4,0x4f,0xd4,0x3f,0xc4,0x4f,0xd4,
	0x3f,0x44,0x3f,0x64,0x3f,0x64,0x3f,0x34,
	0x3f,0x74,0x3f,0x24,0x3f,0x84,0x3f,0xb4,
	0x4f,0xb4,0x4f,0x34,0x3f,0x44,0x3f,0x74,
	0x3f,0x34,0x3f,0x34,0x3f,0x04,0x19,0x3f,
	0x54,0x3f,0x84,0x3f,0x34,0x3f,0x04,0x12,
	0x3f,0x64,0x3f,0x64,0x3f,0x24,0x3f,0x04,
	0x27,0x4f,0x24,0x3f,0x84,0x3f,0xe4,0x3f,
	0x74,0x3f,0x64,0x3f,0x44,0x3f,0xc4,0x4f,
	0xd4,0x3f,0xc4,0x4f,0x04,0x36,0x50,0x04,
	0x38,0x3f,0xa4,0x3f,0x54,0x3f,0x64,0x3f,
	0x54,0x4f,0x64,0x4f,0x64,0x3f,0x64,0x3f,
	0x74,0x5f,0x74,0x3f,0x64,0x3f,0x44,0x3f,
	0x04,0x13,0x3f,0x74,0x3f,0x64,0x3f,0x44,
	0x3f,0x44,0x3f,0x64,0x3f,0xd4,0x3f,0x44,
	0x3f,0x64,0x3f,0xd4,0x3f,0x44,0x3f,0x64,
	0x3f,0x64,0x3f,0x34,0x4f,0x54,0x3f,0x44,
	0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,0x34,
	0x3f,0x64,0x3f,0x34,0x3f,0x44,0x4f,0x54,
	0x3f,0x44,0x3f,0x44,0x3f,0x64,0x3f,0xf4,
	0x3f,0x64,0x3f,0x64,0x3f,0x44,0x3f,0x04,
	0x12,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x04,0x15,0x3f,0x64,0x3f,0x34,
	0x3f,0x64,0x3f,0xf4,0x3f,0x74,0x3f,0x64,
	0x3f,0x44,0x3f,0x44,0x3f,0x64,0x3f,0xd4,
	0x3f,0x44,0x3f,0x64,0x3f,0x04,0x36,0x50,
	0x04,0x38,0x3f,0xa4,0x3f,0x74,0x8f,0x84,
	0x3f,0x64,0x3f,0x84,0x9f,0x94,0x5f,0x84,
	0x9f,0x64,0x3f,0x04,0x14,0x7f,0x24,0x3f,
	0x64,0x3f,0x44,0x3f,0x54,0xaf,0xe4,0x3f,
	0x54,0xaf,0xe4,0x3f,0x44,0x3f,0x64,0x3f,
	0x64,0x3f,0x34,0x3f,0x14,0x7f,0x74,0x8f,
	0x74,0xaf,0x54,0xaf,0x44,0x3f,0x44,0xbf,
	0x54,0x3f,0x54,0x9f,0x04,0x11,0x3f,0x84,
	0x8f,0x64,0x3f,0x04,0x12,0x3f,0x64,0x3f,
	0x64,0x3f,0x44,0x9f,0x64,0x3f,0xf4,0xaf,
	0x64,0x8f,0x04,0x12,0x7f,0x24,0x3f,0x64,
	0x3f,0x44,0x3f,0x54,0xaf,0xe4,0x3f,0x54,
	0xaf,0x04,0x37,0x50,0x04,0xff,0x04,0x31,
	0x3f,0x04,0xcb,0x2f,0x04,0xbb,0x50,0x04,
	0xff,0x04,0x31,0x3f,0x04,0xca,0x1f,0x04,
	0xbd,0x50,0x04,0xff,0x04,0x31,0x3f,0x04,
	0xff,0x04,0x89,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0x41,0x3f,0x04,0xde,0x6f,0x04,
	0x26,0x3f,0x04,0xff,0x04,0x6b,0x50,0x04,
	0x41,0x3f,0x04,0xdc,0x4f,0x34,0x1f,0x04,
	0x26,0x3f,0x54,0x3f,0x04,0xff,0x04,0x63,
	0x50,0x04,0x41,0x3f,0x04,0xdc,0x3f,0x04,
	0x33,0x3f,0x04,0xff,0x04,0x63,0x50,0x04,
	0x41,0x3f,0x04,0xdc,0x3f,0x04,0x33,0x3f,
	0x04,0xff,0x04,0x63,0x50,0x04,0x39,0x7f,
	0x14,0x3f,0x44,0x3f,0x64,0x3f,0x44,0x3f,
	0x8f,0x24,0x7f,0x44,0x3f,0x8f,0x24,0x7f,
	0x34,0x3f,0x74,0x3f,0xd4,0x3f,0x8f,0x24,
	0x7f,0x54,0x9f,0x74,0xaf,0x54,0xaf,0x64,
	0x9f,0x64,0xcf,0x24,0x9f,0xe4,0xaf,0x44,
	0x8f,0x64,0x3f,0x24,0x4f,0xc4,0x3f,0x24,
	0xaf,0x04,0xff,0x04,0x5f,0x50,0x04,0x38,
	0x3f,0x54,0x4f,0x44,0x3f,0x64,0x3f,0x44,
	0x4f,0x54,0x4f,0x54,0x3f,0x34,0x4f,0x54,
	0x4f,0x54,0x3f,0x24,0x4f,0x54,0x4f,0xd4,
	0x4f,0x54,0x4f,0x54,0x3f,0x34,0x3f,0x64,
	0x2f,0x54,0x3f,0x64,0x3f,0x34,0x3f,0x64,
	0x3f,0x44,0x3f,0x54,0x3f,0x44,0x3f,0x44,
	0x3f,0x44,0x3f,0x64,0x2f,0x04,0x10,0x3f,
	0x64,0x3f,0x64,0x3f,0x44,0x6f,0xf4,0x3f,
	0x54,0x3f,0x04,0xff,0x04,0x63,0x50,0x04,
	0x37,0x3f,0x74,0x3f,0x44,0x3f,0x64,0x3f,
	0x44,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x64,0x3f,0x34,0x3f,0x54,0x3f,
	0xe4,0x3f,0x64,0x3f,0x64,0x3f,0x24,0xdf,
	0x44,0x4f,0xb4,0x4f,0x04,0x12,0x5f,0x44,
	0x3f,0x44,0x3f,0x34,0xdf,0xf4,0x3f,0x54,
	0x3f,0x84,0x3f,0x34,0x4f,0x04,0x11,0x3f,
	0x54,0x3f,0x04,0xff,0x04,0x63,0x50,0x04,
	0x37,0x3f,0x74,0x3f,0x44,0x3f,0x64,0x3f,
	0x44,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x64,0x3f,0x44,0x3f,0x34,0x3f,
	0xf4,0x3f,0x64,0x3f,0x64,0x3f,0x24,0x3f,
	0x04,0x11,0x8f,0x74,0x8f,0x54,0x7f,0x14,
	0x3f,0x54,0x3f,0x24,0x3f,0x44,0x3f,0x04,
	0x19,0x3f,0x54,0x3f,0x84,0x3f,0x34,0x3f,
	0x04,0x12,0x3f,0x54,0x3f,0x04,0xff,0x04,
	0x63,0x50,0x04,0x37,0x3f,0x74,0x3f,0x44,
	0x3f,0x54,0x4f,0x44,0x3f,0x64,0x3f,0x64,
	0x3f,0x34,0x3f,0x64,0x3f,0x64,0x3f,0x54,
	0x3f,0x14,0x3f,0x04,0x10,0x3f,0x64,0x3f,
	0x64,0x3f,0x24,0x3f,0x74,0x3f,0x44,0x3f,
	0x64,0x3f,0x34,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x44,0x2f,0x5f,0x64,0x3f,0x74,
	0x3f,0xf4,0x3f,0x54,0x3f,0x84,0x3f,0x34,
	0x3f,0x04,0x12,0x3f,0x54,0x3f,0x04,0xff,
	0x04,0x63,0x50,0x04,0x38,0x4f,0x34,0x5f,
	0x44,0x4f,0x34,0x5f,0x44,0x3f,0x64,0x3f,
	0x64,0x3f,0x34,0x3f,0x64,0x3f,0x64,0x3f,
	0x64,0x5f,0x04,0x11,0x3f,0x64,0x3f,0x64,
	0x3f,0x34,0x4f,0x44,0x3f,0x64,0x3f,0x44,
	0x4f,0x44,0x3f,0x44,0x4f,0x34,0x4f,0x34,
	0x5f,0x34,0x3f,0xc4,0x4f,0x44,0x3f,0x04,
	0x10,0x3f,0x74,0x3f,0x44,0x3f,0x54,0x3f,
	0x04,0x12,0x3f,0x54,0x4f,0x34,0x1f,0x24,
	0x3f,0x04,0xff,0x04,0x59,0x50,0x04,0x3a,
	0x5f,0x24,0x3f,0x64,0x5f,0x24,0x3f,0x44,
	0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,0x64,
	0x3f,0x64,0x3f,0x74,0x3f,0x04,0x12,0x3f,
	0x64,0x3f,0x64,0x3f,0x64,0x6f,0xa4,0x6f,
	0x94,0x6f,0x84,0x5f,0x24,0x4f,0x34,0xbf,
	0x64,0x6f,0x04,0x12,0x3f,0x94,0x6f,0x74,
	0x3f,0x04,0x12,0x3f,0x74,0x6f,0x24,0x3f,
	0x04,0xff,0x04,0x59,0x50,0x04,0x8c,0x2f,
	0x04,0x68,0x2f,0x94,0x2f,0x04,0xff,0x04,
	0xb9,0x50,0x04,0x88,0x5f,0x04,0x6a,0xbf,
	0x04,0xff,0x04,0xba,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x00,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0x37,0x4f,0x34,0x4f,0x04,0x11,
	0xbf,0xd4,0x3f,0xa4,0x3f,0xa4,0x3f,0x44,
	0x0f,0x11,0x34,0x3f,0x94,0xbf,0x84,0x4f,
	0x94,0x3f,0xf4,0x4f,0x34,0x4f,0x04,0xff,
	0x04,0xd3,0x50,0x04,0x37,0x4f,0x34,0x4f,
	0xf4,0x3f,0x94,0x3f,0xa4,0x5f,0x94,0x3f,
	0xa4,0x3f,0xb4,0x3f,0xa4,0x3f,0x74,0x3f,
	0x94,0x3f,0x64,0x5f,0x84,0x3f,0xf4,0x4f,
	0x34,0x4f,0x04,0xff,0x04,0xd3,0x50,0x04,
	0x37,0x4f,0x34,0x4f,0xe4,0x3f,0xb4,0x3f,
	0x84,0x3f,0x14,0x3f,0x84,0x3f,0xa4,0x3f,
	0xb4,0x3f,0xa4,0x3f,0x64,0x3f,0xb4,0x3f,
	0x54,0x7f,0x64,0x3f,0xf4,0x4f,0x34,0x4f,
	0x04,0xff,0x04,0xd3,0x50,0x04,0x37,0x4f,
	0x34,0x4f,0xd4,0x3f,0xc4,0x3f,0x74,0x3f,
	0x34,0x3f,0x74,0x3f,0xa4,0x3f,0xb4,0x3f,
	0xa4,0x3f,0x54,0x3f,0xd4,0x3f,0x44,0x3f,
	0x14,0x4f,0x54,0x3f,0xf4,0x4f,0x34,0x4f,
	0x04,0xff,0x04,0xd3,0x50,0x04,0x38,0x2f,
	0x54,0x2f,0xe4,0x3f,0x04,0x16,0x3f,0x34,
	0x3f,0x74,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x54,0x3f,0xd4,0x3f,0x44,0x3f,0x34,
	0x3f,0x44,0x3f,0x04,0x10,0x2f,0x54,0x2f,
	0x04,0xff,0x04,0xd4,0x50,0x04,0x38,0x2f,
	0x54,0x2f,0xe4,0x3f,0x04,0x15,0x3f,0x54,
	0x3f,0x64,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x54,0x3f,0xd4,0x3f,0x44,0x3f,0x44,
	0x3f,0x34,0x3f,0x04,0x10,0x2f,0x54,0x2f,
	0x04,0xff,0x04,0xd4,0x50,0x04,0x4f,0x3f,
	0xc4,0x3f,0x54,0xdf,0x54,0x3f,0xa4,0x3f,
	0xb4,0x3f,0xa4,0x3f,0x54,0x3f,0xd4,0x3f,
	0x44,0x3f,0x54,0x4f,0x14,0x3f,0x04,0xff,
	0x04,0xed,0x50,0x04,0x50,0x3f,0xb4,0x3f,
	0x44,0x3f,0x94,0x3f,0x44,0x3f,0xa4,0x3f,
	0xb4,0x3f,0xa4,0x3f,0x64,0x3f,0xb4,0x3f,
	0x54,0x3f,0x64,0x7f,0x04,0xff,0x04,0xed,
	0x50,0x04,0x51,0x3f,0x84,0x4f,0x44,0x4f,
	0x94,0x4f,0x44,0x3f,0x84,0x3f,0xc4,0x3f,
	0xa4,0x3f,0x64,0x4f,0x94,0x3f,0x64,0x3f,
	0x84,0x5f,0x04,0xff,0x04,0xed,0x50,0x04,
	0x37,0x3f,0x44,0x3f,0x04,0x12,0xbf,0x64,
	0x3f,0xb4,0x3f,0x64,0xaf,0xe4,0x3f,0xa4,
	0x3f,0x84,0x4f,0x54,0x4f,0x74,0x3f,0x94,
	0x4f,0xf4,0x3f,0x44,0x3f,0x04,0xff,0x04,
	0xd4,0x50,0x04,0xae,0x7f,0x04,0xff,0x04,
	0xff,0x84,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0x37,
	0x4f,0x94,0x3f,0x04,0x2a,0x3f,0x04,0x36,
	0x3f,0xd4,0x3f,0x04,0x52,0x3f,0x04,0x3c,
	0xaf,0xa4,0x3f,0xd4,0x3f,0x24,0xaf,0x04,
	0x18,0x6f,0x04,0x3d,0x0f,0x11,0x24,0x3f,
	0xd4,0x3f,0x04,0xb9,0x50,0x04,0x37,0x5f,
	0x84,0x3f,0x04,0x16,0x3f,0x04,0x11,0x3f,
	0x04,0x36,0x3f,0xd4,0x3f,0x04,0x1f,0x3f,
	0x04,0x30,0x3f,0x04,0x3c,0x3f,0x74,0x4f,
	0x74,0x3f,0xb4,0x3f,0x34,0x3f,0x74,0x4f,
	0x04,0x12,0x4f,0x34,0x1f,0x04,0x44,0x3f,
	0xa4,0x3f,0xb4,0x3f,0x04,0x2e,0x3f,0x04,
	0x28,0x3f,0x04,0x5e,0x50,0x04,0x37,0x6f,
	0x74,0x3f,0x04,0x16,0x3f,0x04,0x11,0x3f,
	0x04,0x36,0x3f,0xd4,0x3f,0x04,0x1f,0x3f,
	0x04,0x30,0x3f,0x04,0x3c,0x3f,0x94,0x4f,
	0x64,0x3f,0x94,0x3f,0x44,0x3f,0x94,0x4f,
	0x04,0x10,0x3f,0x04,0x49,0x3f,0xb4,0x3f,
	0x94,0x3f,0x04,0x2f,0x3f,0x04,0x28,0x3f,
	0x04,0x5e,0x50,0x04,0x37,0x3f,0x14,0x3f,
	0x64,0x3f,0x04,0x16,0x3f,0x04,0x11,0x3f,
	0x04,0x36,0x3f,0xd4,0x3f,0x04,0x1f,0x3f,
	0x04,0x30,0x3f,0x04,0x3c,0x3f,0xa4,0x3f,
	0x74,0x3f,0x74,0x3f,0x54,0x3f,0xa4,0x3f,
	0x04,0x10,0x3f,0x04,0x49,0x3f,0xc4,0x3f,
	0x74,0x3f,0x04,0x30,0x3f,0x04,0x28,0x3f,
	0x04,0x5e,0x50,0x04,0x37,0x3f,0x24,0x4f,
	0x44,0x3f,0x74,0x8f,0x44,0xaf,0xd4,0x3f,
	0x14,0x7f,0x64,0x9f,0x04,0x12,0x9f,0x44,
	0x3f,0x8f,0x54,0x3f,0x54,0x9f,0xe4,0xaf,
	0x54,0x8f,0x04,0x11,0xaf,0x44,0x3f,0x8f,
	0x74,0x8f,0x44,0x4f,0x44,0x4f,0x44,0x4f,
	0xd4,0x3f,0xb4,0x3f,0x64,0x3f,0x74,0x3f,
	0x54,0x3f,0xb4,0x3f,0xc4,0xaf,0x24,0x3f,
	0x24,0x4f,0x44,0x8f,0x64,0x3f,0x8f,0x24,
	0x7f,0x04,0x14,0x3f,0xc4,0x3f,0x74,0x3f,
	0x04,0x11,0x8f,0x64,0x3f,0x64,0x3f,0x24,
	0xaf,0x34,0xbf,0x54,0x3f,0x64,0x3f,0x24,
	0xaf,0x04,0x5a,0x50,0x04,0x37,0x3f,0x34,
	0x4f,0x34,0x3f,0x54,0x3f,0x64,0x3f,0x54,
	0x3f,0x04,0x11,0x4f,0x54,0x3f,0x44,0x3f,
	0x64,0x2f,0x04,0x10,0x3f,0x54,0x3f,0x34,
	0x4f,0x54,0x3f,0x44,0x3f,0x44,0x3f,0x64,
	0x2f,0x04,0x10,0x3f,0x74,0x3f,0x64,0x3f,
	0xe4,0x3f,0x64,0x3f,0x34,0x4f,0x54,0x3f,
	0x44,0x3f,0x64,0x3f,0x34,0x3f,0x44,0x4f,
	0x44,0x3f,0xe4,0x3f,0xb4,0x3f,0x74,0x3f,
	0x54,0x3f,0x64,0x3f,0xb4,0x3f,0xf4,0x3f,
	0x64,0x6f,0x54,0x3f,0x64,0x3f,0x44,0x4f,
	0x54,0x4f,0x54,0x3f,0x04,0x13,0x3f,0xd4,
	0x3f,0x54,0x3f,0x04,0x10,0x3f,0x64,0x3f,
	0x44,0x3f,0x64,0x3f,0x54,0x3f,0x74,0x4f,
	0x54,0x3f,0x44,0x3f,0x64,0x3f,0x54,0x3f,
	0x04,0x5e,0x50,0x04,0x37,0x3f,0x44,0x4f,
	0x24,0x3f,0x44,0x3f,0x84,0x3f,0x44,0x3f,
	0x04,0x11,0x3f,0x74,0x3f,0x24,0xdf,0x04,
	0x15,0x5f,0x34,0x3f,0x74,0x3f,0x34,0x3f,
	0x34,0xdf,0xf4,0x3f,0x64,0x3f,0x84,0x3f,
	0xd4,0x4f,0xb4,0x3f,0x64,0x3f,0x34,0x3f,
	0x84,0x3f,0x34,0x3f,0x24,0x2f,0x24,0x2f,
	0x24,0x3f,0xf4,0x3f,0xb4,0x3f,0x84,0x3f,
	0x34,0x3f,0x74,0x3f,0xb4,0x3f,0xf4,0x3f,
	0x64,0x4f,0x64,0x3f,0x84,0x3f,0x34,0x3f,
	0x64,0x3f,0x64,0x3f,0x04,0x13,0x3f,0xe4,
	0x3f,0x34,0x3f,0x04,0x10,0x3f,0x84,0x3f,
	0x34,0x3f,0x64,0x3f,0x54,0x3f,0x74,0x3f,
	0x74,0x3f,0x34,0x3f,0x64,0x3f,0x54,0x3f,
	0x04,0x5e,0x50,0x04,0x37,0x3f,0x64,0x3f,
	0x14,0x3f,0x44,0x3f,0x84,0x3f,0x44,0x3f,
	0x04,0x11,0x3f,0x74,0x3f,0x24,0x3f,0x04,
	0x19,0x7f,0x4f,0x34,0x3f,0x74,0x3f,0x34,
	0x3f,0x34,0x3f,0x04,0x19,0x3f,0x64,0x3f,
	0x84,0x3f,0x04,0x10,0x8f,0x44,0x3f,0x64,
	0x3f,0x34,0x3f,0x84,0x3f,0x34,0x3f,0x3f,
	0x44,0x2f,0x4f,0xf4,0x3f,0xa4,0x4f,0x94,
	0x3f,0x4f,0x84,0x3f,0xa4,0x4f,0xf4,0x3f,
	0x64,0x3f,0x74,0x3f,0x84,0x3f,0x34,0x3f,
	0x64,0x3f,0x64,0x3f,0x04,0x13,0x3f,0xf4,
	0x3f,0x4f,0x04,0x11,0x3f,0x84,0x3f,0x34,
	0x3f,0x64,0x3f,0x54,0x3f,0x74,0x3f,0x74,
	0x3f,0x34,0x3f,0x64,0x3f,0x54,0x3f,0x04,
	0x5e,0x50,0x04,0x37,0x3f,0x74,0x6f,0x44,
	0x3f,0x84,0x3f,0x44,0x3f,0x04,0x11,0x3f,
	0x74,0x3f,0x24,0x3f,0x74,0x3f,0xe4,0x3f,
	0x64,0x3f,0x34,0x3f,0x74,0x3f,0x34,0x3f,
	0x34,0x3f,0x74,0x3f,0xf4,0x3f,0x64,0x3f,
	0x84,0x3f,0xd4,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x34,0x3f,0x84,0x3f,0x44,0x5f,
	0x44,0x5f,0x04,0x10,0x3f,0x94,0x4f,0xa4,
	0x3f,0x14,0x3f,0x84,0x3f,0x94,0x4f,0x04,
	0x10,0x3f,0x64,0x3f,0x74,0x3f,0x84,0x3f,
	0x34,0x3f,0x64,0x3f,0x64,0x3f,0x04,0x13,
	0x3f,0xf4,0x3f,0x4f,0x04,0x11,0x3f,0x84,
	0x3f,0x34,0x3f,0x54,0x4f,0x54,0x3f,0x74,
	0x3f,0x74,0x3f,0x34,0x3f,0x54,0x4f,0x54,
	0x3f,0x04,0x5e,0x50,0x04,0x37,0x3f,0x84,
	0x5f,0x64,0x3f,0x44,0x3f,0x64,0x4f,0x34,
	0x1f,0xc4,0x5f,0x34,0x4f,0x44,0x4f,0x44,
	0x3f,0xf4,0x4f,0x34,0x5f,0x34,0x5f,0x34,
	0x4f,0x44,0x3f,0x44,0x4f,0x44,0x3f,0x04,
	0x10,0x4f,0x34,0x44,0x3f,0x44,0x3f,0x04,
	0x10,0x3f,0x44,0x4f,0x34,0x3f,0x64,0x3f,
	0x54,0x3f,0x44,0x3f,0x64,0x4f,0x64,0x4f,
	0x04,0x10,0x3f,0x74,0x4f,0xd4,0x5f,0x94,
	0x3f,0x74,0x4f,0x04,0x12,0x3f,0x64,0x3f,
	0x94,0x3f,0x44,0x3f,0x54,0x3f,0x64,0x3f,
	0x64,0x3f,0x04,0x13,0x3f,0x04,0x10,0x5f,
	0x04,0x14,0x3f,0x44,0x3f,0x54,0x4f,0x34,
	0x5f,0x54,0x4f,0x34,0x34,0x5f,0x34,0x4f,
	0x44,0x4f,0x34,0x5f,0x54,0x4f,0x34,0x34,
	0x3f,0x04,0x54,0x50,0x04,0x37,0x3f,0x94,
	0x4f,0x84,0x6f,0xa4,0x6f,0xc4,0x3f,0x24,
	0x5f,0x94,0x6f,0x04,0x13,0x5f,0x24,0x4f,
	0x24,0x3f,0x24,0x5f,0x64,0x3f,0x74,0x6f,
	0x04,0x14,0x6f,0x54,0x6f,0x04,0x14,0x6f,
	0x64,0x3f,0x64,0x3f,0x74,0x6f,0x94,0x2f,
	0x84,0x2f,0x04,0x11,0xaf,0x04,0x12,0x3f,
	0xa4,0xaf,0x04,0x16,0x3f,0x64,0x3f,0xb4,
	0x6f,0x74,0x3f,0x64,0x3f,0x64,0x3f,0x04,
	0x13,0x3f,0x04,0x11,0x3f,0x04,0x17,0x6f,
	0x94,0x5f,0x24,0x3f,0x74,0x6f,0x24,0x3f,
	0x24,0x4f,0x94,0x5f,0x24,0x3f,0x74,0x6f,
	0x24,0x3f,0x04,0x54,0x50,0x04,0xff,0x04,
	0xff,0x04,0x3b,0x3f,0x04,0x7f,0x50,0x04,
	0xff,0x04,0xff,0x04,0x3b,0x3f,0x04,0x7f,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0x3b,0xbf,
	0x64,0x3f,0x04,0x7a,0x3f,0x04,0x12,0xbf,
	0x64,0xdf,0x04,0x3b,0xbf,0x64,0xef,0x54,
	0x0f,0x11,0x04,0x3e,0x3f,0x04,0x1e,0x3f,
	0x04,0x26,0xef,0x04,0x24,0xef,0x54,0xaf,
	0x04,0x78,0x50,0x04,0x39,0x3f,0x94,0x3f,
	0x44,0x3f,0x04,0x56,0x3f,0x04,0x21,0x3f,
	0x04,0x10,0x3f,0x94,0x3f,0x44,0x3f,0x84,
	0x4f,0x04,0x37,0x3f,0x94,0x3f,0x44,0x3f,
	0x94,0x4f,0xa4,0x3f,0x04,0x45,0x3f,0x04,
	0x1e,0x3f,0x04,0x26,0x3f,0x04,0x24,0x2f,
	0x94,0x3f,0x04,0x10,0x2f,0x04,0x80,0x50,
	0x04,0x38,0x3f,0xb4,0x3f,0x34,0x3f,0x04,
	0x56,0x3f,0x04,0x21,0x3f,0xf4,0x3f,0xb4,
	0x3f,0x34,0x3f,0xa4,0x3f,0x04,0x35,0x3f,
	0xb4,0x3f,0x34,0x3f,0xa4,0x3f,0xa4,0x3f,
	0x04,0x45,0x3f,0x04,0x1e,0x3f,0x04,0x26,
	0x3f,0x04,0x24,0x2f,0x94,0x3f,0xf4,0x3f,
	0x04,0x80,0x50,0x04,0x37,0x3f,0xc4,0x3f,
	0x34,0x3f,0x24,0x5f,0xa4,0x6f,0x54,0x3f,
	0x24,0x5f,0xa4,0x4f,0x34,0x3f,0x44,0x6f,
	0xf4,0xaf,0x64,0x6f,0x04,0x11,0x3f,0xe4,
	0x3f,0xc4,0x3f,0x34,0x3f,0xb4,0x3f,0x04,
	0x11,0x6f,0x74,0x3f,0x34,0x3f,0xc4,0x3f,
	0xc4,0x3f,0x34,0x3f,0xa4,0x3f,0xa4,0x3f,
	0x04,0x14,0x3f,0x24,0x5f,0x44,0x5f,0x84,
	0x6f,0xa4,0x4f,0x24,0x3f,0x74,0x6f,0x04,
	0x11,0x3f,0x24,0x4f,0x54,0x3f,0x94,0x3f,
	0xc4,0x3f,0xf4,0x3f,0x24,0x5f,0xb4,0x2f,
	0x94,0x3f,0xf4,0x2f,0x24,0x5f,0x04,0x7a,
	0x50,0x04,0x37,0x3f,0x04,0x12,0x5f,0x34,
	0x4f,0x54,0x4f,0x34,0x4f,0x34,0x5f,0x34,
	0x4f,0x64,0x3f,0x24,0x4f,0x44,0x4f,0x44,
	0x3f,0x04,0x10,0x3f,0x84,0x3f,0x44,0x3f,
	0xf4,0x3f,0xe4,0x3f,0x04,0x12,0x3f,0xb4,
	0x3f,0xf4,0x3f,0x44,0x3f,0x54,0x3f,0x14,
	0x5f,0xc4,0x3f,0x04,0x12,0x3f,0x84,0x4f,
	0xb4,0x3f,0x04,0x14,0x5f,0x34,0x6f,0x34,
	0x4f,0x44,0x3f,0x44,0x3f,0x54,0x4f,0x34,
	0x5f,0x44,0x4f,0x44,0x3f,0xf4,0x5f,0x34,
	0x4f,0x34,0x3f,0x74,0x3f,0xd4,0x3f,0xf4,
	0x5f,0x34,0x4f,0x34,0xef,0x34,0x3f,0xf4,
	0x4f,0x34,0x4f,0x04,0x78,0x50,0x04,0x37,
	0x3f,0x04,0x12,0x4f,0x54,0x3f,0xd4,0x3f,
	0x34,0x4f,0x54,0x3f,0x54,0x3f,0x44,0x3f,
	0x34,0x3f,0x74,0x3f,0xf4,0x3f,0x64,0x3f,
	0x84,0x3f,0xd4,0x3f,0xe4,0x3f,0x04,0x12,
	0x3f,0xb4,0x3f,0xd4,0x3f,0x84,0x3f,0x34,
	0x5f,0x04,0x10,0x3f,0x04,0x12,0xdf,0xd4,
	0x3f,0x04,0x14,0x3f,0x64,0x3f,0x64,0x3f,
	0x24,0x3f,0x84,0x3f,0x24,0x3f,0x74,0x3f,
	0x34,0x3f,0x74,0x3f,0xe4,0x3f,0x74,0x3f,
	0x34,0x3f,0x54,0x3f,0xe4,0xcf,0x64,0x4f,
	0x54,0x3f,0x94,0x2f,0x94,0xcf,0xf4,0x3f,
	0x04,0x77,0x50,0x04,0x37,0x3f,0xc4,0x3f,
	0x34,0x3f,0x64,0x3f,0x74,0x9f,0x34,0x3f,
	0x64,0x3f,0x54,0x3f,0x44,0x3f,0x34,0xdf,
	0xf4,0x3f,0x64,0x3f,0x84,0x3f,0xd4,0x3f,
	0xe4,0x3f,0xc4,0x3f,0x34,0x3f,0xb4,0x3f,
	0xd4,0x3f,0x84,0x3f,0x34,0x3f,0x04,0x12,
	0x3f,0xc4,0x3f,0x34,0x3f,0x74,0x3f,0xd4,
	0x3f,0x04,0x14,0x3f,0x64,0x3f,0x64,0x3f,
	0x24,0x3f,0x84,0x3f,0x24,0x3f,0x74,0x3f,
	0x34,0xdf,0xe4,0x3f,0x74,0x3f,0x44,0x3f,
	0x34,0x3f,0xf4,0x3f,0xf4,0x3f,0x64,0x3f,
	0x94,0x2f,0x94,0x3f,0x04,0x18,0x3f,0x04,
	0x77,0x50,0x04,0x38,0x3f,0xb4,0x3f,0x34,
	0x3f,0x64,0x3f,0x44,0x4f,0x54,0x3f,0x34,
	0x3f,0x64,0x3f,0x64,0x8f,0x44,0x3f,0x04,
	0x19,0x3f,0x64,0x3f,0x84,0x3f,0xd4,0x3f,
	0xf4,0x3f,0xb4,0x3f,0x34,0x3f,0xa4,0x3f,
	0xe4,0x3f,0x84,0x3f,0x34,0x3f,0x04,0x13,
	0x3f,0xb4,0x3f,0x34,0x3f,0x84,0x3f,0xc4,
	0x3f,0x04,0x14,0x3f,0x64,0x3f,0x64,0x3f,
	0x24,0x3f,0x84,0x3f,0x24,0x3f,0x74,0x3f,
	0x34,0x3f,0x04,0x18,0x3f,0x74,0x3f,0x54,
	0x3f,0x14,0x3f,0x04,0x10,0x3f,0xf4,0x3f,
	0x64,0x3f,0x94,0x2f,0x94,0x3f,0xe4,0x3f,
	0x74,0x3f,0x04,0x77,0x50,0x04,0x39,0x3f,
	0x84,0x4f,0x44,0x3f,0x64,0x3f,0x44,0x3f,
	0x54,0x4f,0x34,0x3f,0x64,0x3f,0x44,0x2f,
	0xd4,0x3f,0x64,0x3f,0xf4,0x3f,0x74,0x3f,
	0x64,0x3f,0xe4,0x3f,0x04,0x10,0x3f,0x84,
	0x4f,0x44,0x3f,0x84,0x4f,0x04,0x10,0x3f,
	0x64,0x3f,0x44,0x3f,0x04,0x14,0x3f,0x84,
	0x4f,0x44,0x3f,0x94,0x3f,0xb4,0x3f,0x04,
	0x14,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x44,0x3f,0x54,0x4f,0x44,0x3f,
	0x64,0x3f,0xe4,0x4f,0x54,0x3f,0x64,0x3f,
	0x14,0x3f,0x04,0x10,0x3f,0xf4,0x3f,0x64,
	0x3f,0x04,0x14,0x3f,0xe4,0x3f,0x74,0x2f,
	0x04,0x78,0x50,0x04,0x3b,0xbf,0x64,0x3f,
	0x64,0x3f,0x54,0xbf,0x34,0x3f,0x64,0x3f,
	0x54,0xaf,0x54,0x9f,0x04,0x12,0x7f,0x44,
	0x8f,0x04,0x10,0xef,0x74,0xbf,0x64,0xdf,
	0x04,0x14,0x8f,0x64,0x3f,0x04,0x16,0xbf,
	0x64,0x3f,0xa4,0x3f,0xa4,0x3f,0x04,0x14,
	0x3f,0x64,0x3f,0x64,0x3f,0x54,0x8f,0x74,
	0xbf,0x54,0x9f,0x04,0x10,0xbf,0x84,0x5f,
	0x04,0x11,0x3f,0xf4,0x3f,0x64,0x3f,0x04,
	0x14,0x3f,0xf4,0x4f,0x34,0x3f,0x04,0x79,
	0x50,0x04,0x7b,0x2f,0x84,0x3f,0x04,0xff,
	0x04,0x58,0x3f,0x04,0x59,0x5f,0x04,0x7b,
	0x50,0x04,0x7b,0x3f,0x74,0x3f,0x04,0xff,
	0x04,0x54,0x1f,0x24,0x3f,0x04,0xda,0x50,
	0x04,0x7d,0x8f,0x04,0xff,0x04,0x57,0x4f,
	0x04,0xdc,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0x49,0x6f,0x04,0x7b,0x3f,0x04,0x38,
	0x3f,0x04,0x37,0x3f,0x04,0x59,0x3f,0x04,
	0x47,0x3f,0x04,0x59,0x3f,0x04,0x77,0x50,
	0x04,0x47,0x4f,0x34,0x1f,0x24,0x3f,0x04,
	0x3c,0x3f,0x04,0x37,0x3f,0x04,0x2e,0x3f,
	0x74,0x3f,0x04,0x37,0x3f,0x04,0x4f,0x3f,
	0x74,0x3f,0x04,0x47,0x3f,0x04,0x59,0x3f,
	0x04,0x77,0x50,0x04,0x47,0x3f,0x74,0x3f,
	0x04,0x3c,0x3f,0x04,0x68,0x3f,0x74,0x3f,
	0x04,0x37,0x3f,0x04,0x4f,0x3f,0x74,0x3f,
	0x04,0x47,0x3f,0x04,0xd3,0x50,0x04,0x47,
	0x3f,0x74,0x3f,0x04,0x3c,0x3f,0x04,0x68,
	0x3f,0x74,0x3f,0x04,0x37,0x3f,0x04,0x4f,
	0x3f,0x74,0x3f,0x04,0x47,0x3f,0x04,0xd3,
	0x50,0x04,0x39,0x9f,0x24,0x0f,0x14,0x44,
	0x9f,0x64,0x3f,0x24,0x4f,0xd4,0xaf,0x24,
	0xaf,0x54,0x8f,0x64,0xbf,0x54,0xbf,0x54,
	0x3f,0x44,0x3f,0x14,0x7f,0x74,0xcf,0x94,
	0xaf,0x34,0x3f,0x8f,0x64,0x9f,0x04,0x10,
	0xbf,0x54,0x3f,0x64,0x9f,0x34,0x3f,0x74,
	0x3f,0x44,0x9f,0x64,0x3f,0x24,0x4f,0x04,
	0x11,0xaf,0x34,0x3f,0x8f,0x64,0x9f,0x64,
	0x3f,0x8f,0xf4,0xbf,0x54,0x3f,0x64,0x9f,
	0x34,0x3f,0x74,0x3f,0xf4,0x9f,0x64,0xcf,
	0x34,0x9f,0x44,0x3f,0x44,0x3f,0x8f,0x04,
	0x68,0x50,0x04,0x38,0x3f,0x54,0x3f,0x44,
	0x3f,0x74,0x3f,0x74,0x3f,0x64,0x2f,0x54,
	0x6f,0xf4,0x3f,0x64,0x3f,0x44,0x3f,0x74,
	0x3f,0x64,0x3f,0x44,0x4f,0x54,0x3f,0x44,
	0x4f,0x54,0x3f,0x44,0x3f,0x44,0x4f,0x54,
	0x3f,0x54,0x3f,0x44,0x3f,0xf4,0x3f,0x74,
	0x4f,0x54,0x3f,0x44,0x3f,0x64,0x2f,0xf4,
	0x4f,0x54,0x3f,0x44,0x3f,0x54,0x3f,0x54,
	0x3f,0x24,0x4f,0x54,0x4f,0x34,0x3f,0x64,
	0x2f,0x54,0x6f,0x04,0x17,0x3f,0x74,0x4f,
	0x54,0x3f,0x44,0x3f,0x64,0x2f,0x54,0x4f,
	0x54,0x3f,0xe4,0x4f,0x54,0x3f,0x44,0x3f,
	0x54,0x3f,0x54,0x3f,0x24,0x4f,0x54,0x4f,
	0xe4,0x3f,0x54,0x3f,0x44,0x3f,0x44,0x3f,
	0x54,0x3f,0x54,0x3f,0x34,0x3f,0x44,0x4f,
	0x54,0x3f,0x04,0x67,0x50,0x04,0x3e,0x5f,
	0x44,0x3f,0x74,0x3f,0x64,0xdf,0x44,0x4f,
	0x04,0x11,0x4f,0xc4,0x3f,0x64,0x3f,0x84,
	0x3f,0x34,0x3f,0x74,0x3f,0x34,0x3f,0x74,
	0x3f,0x34,0x3f,0x44,0x3f,0x64,0x3f,0x54,
	0x3f,0x44,0x3f,0xf4,0x3f,0x74,0x3f,0x64,
	0x3f,0x34,0xdf,0xe4,0x3f,0x74,0x3f,0x34,
	0x3f,0xb4,0x5f,0x34,0x3f,0x54,0x3f,0x34,
	0xdf,0x44,0x4f,0x04,0x19,0x3f,0x74,0x3f,
	0x64,0x3f,0x34,0xdf,0x44,0x3f,0x64,0x3f,
	0xe4,0x3f,0x74,0x3f,0x34,0x3f,0xb4,0x5f,
	0x34,0x3f,0x54,0x3f,0x04,0x15,0x5f,0x44,
	0x3f,0x44,0x3f,0xb4,0x5f,0x34,0x3f,0x44,
	0x3f,0x64,0x3f,0x04,0x67,0x50,0x04,0x38,
	0x7f,0x14,0x3f,0x44,0x3f,0x74,0x3f,0x64,
	0x3f,0xe4,0x3f,0x04,0x15,0x8f,0x54,0x3f,
	0x64,0x3f,0x84,0x3f,0x34,0x3f,0x74,0x3f,
	0x34,0x3f,0x74,0x3f,0x34,0x3f,0x44,0x3f,
	0x64,0x3f,0x64,0x3f,0x24,0x3f,0x04,0x10,
	0x3f,0x74,0x3f,0x64,0x3f,0x34,0x3f,0x04,
	0x18,0x3f,0x74,0x3f,0x34,0x3f,0x54,0x7f,
	0x4f,0x44,0x3f,0x34,0x3f,0x44,0x3f,0xe4,
	0x3f,0x04,0x1a,0x3f,0x74,0x3f,0x64,0x3f,
	0x34,0x3f,0xe4,0x3f,0x64,0x3f,0xe4,0x3f,
	0x74,0x3f,0x34,0x3f,0x54,0x7f,0x4f,0x44,
	0x3f,0x34,0x3f,0x04,0x10,0x7f,0x4f,0x54,
	0x3f,0x24,0x3f,0x64,0x7f,0x4f,0x34,0x3f,
	0x44,0x3f,0x64,0x3f,0x04,0x67,0x50,0x04,
	0x37,0x3f,0x64,0x3f,0x44,0x3f,0x74,0x3f,
	0x64,0x3f,0x74,0x3f,0x44,0x3f,0x04,0x12,
	0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,0x84,
	0x3f,0x34,0x3f,0x74,0x3f,0x34,0x3f,0x74,
	0x3f,0x34,0x3f,0x44,0x3f,0x64,0x3f,0x54,
	0x2f,0x14,0x4f,0x04,0x12,0x3f,0x74,0x3f,
	0x64,0x3f,0x34,0x3f,0x74,0x3f,0xe4,0x3f,
	0x74,0x3f,0x34,0x3f,0x44,0x3f,0x64,0x3f,
	0x54,0x3f,0x4f,0x54,0x3f,0x74,0x3f,0x44,
	0x3f,0x04,0x1a,0x3f,0x74,0x3f,0x64,0x3f,
	0x34,0x3f,0x74,0x3f,0x44,0x3f,0x64,0x3f,
	0xe4,0x3f,0x74,0x3f,0x34,0x3f,0x44,0x3f,
	0x64,0x3f,0x54,0x3f,0x4f,0x04,0x10,0x3f,
	0x64,0x3f,0x44,0x2f,0x5f,0x74,0x3f,0x64,
	0x3f,0x34,0x3f,0x44,0x3f,0x64,0x3f,0x04,
	0x67,0x50,0x04,0x37,0x4f,0x34,0x5f,0x44,
	0x3f,0x74,0x4f,0x34,0x1f,0x24,0x4f,0x44,
	0x3f,0x54,0x3f,0x04,0x13,0x3f,0x44,0x4f,
	0x44,0x4f,0x34,0x44,0x3f,0x44,0x3f,0x54,
	0x5f,0x34,0x4f,0x44,0x5f,0x34,0x4f,0x44,
	0x3f,0x44,0x3f,0x64,0x3f,0x44,0x3f,0x04,
	0x17,0x4f,0x34,0x34,0x3f,0x64,0x3f,0x44,
	0x4f,0x44,0x3f,0xf4,0x5f,0x34,0x4f,0x44,
	0x3f,0x44,0x4f,0x34,0x5f,0x64,0x5f,0x74,
	0x4f,0x44,0x3f,0x54,0x3f,0x84,0x3f,0xf4,
	0x4f,0x34,0x34,0x3f,0x64,0x3f,0x44,0x4f,
	0x44,0x3f,0x54,0x3f,0x64,0x3f,0xe4,0x5f,
	0x34,0x4f,0x44,0x3f,0x44,0x4f,0x34,0x5f,
	0x64,0x5f,0x04,0x11,0x4f,0x34,0x5f,0x34,
	0x3f,0xc4,0x4f,0x34,0x5f,0x34,0x3f,0x44,
	0x3f,0x64,0x3f,0x44,0x3f,0x04,0x60,0x50,
	0x04,0x39,0x5f,0x24,0x4f,0x34,0x3f,0x94,
	0x6f,0x54,0x6f,0x74,0x3f,0x04,0x15,0x6f,
	0x94,0x6f,0x54,0x6f,0x74,0x3f,0x24,0x4f,
	0x74,0x3f,0x24,0x4f,0x74,0x3f,0x44,0x3f,
	0x64,0x3f,0x54,0xbf,0x04,0x10,0x6f,0x24,
	0x3f,0x64,0x3f,0x74,0x6f,0x04,0x11,0x3f,
	0x24,0x4f,0x74,0x3f,0x64,0x5f,0x24,0x4f,
	0x64,0x3f,0xb4,0x6f,0x74,0x3f,0x84,0x3f,
	0x04,0x11,0x6f,0x24,0x3f,0x64,0x3f,0x74,
	0x6f,0x74,0x3f,0x64,0x3f,0xe4,0x3f,0x24,
	0x4f,0x74,0x3f,0x64,0x5f,0x24,0x4f,0x64,
	0x3f,0x04,0x14,0x5f,0x24,0x4f,0x34,0xbf,
	0x54,0x5f,0x24,0x4f,0x24,0x3f,0x44,0x3f,
	0x64,0x3f,0x44,0x3f,0x04,0x60,0x50,0x04,
	0xaa,0x3f,0xd4,0x3f,0x04,0x24,0x2f,0x94,
	0x2f,0x04,0x41,0x3f,0x04,0x27,0x2f,0x04,
	0x24,0x2f,0x04,0x54,0x3f,0x04,0x27,0x2f,
	0x04,0x22,0x2f,0x94,0x2f,0x04,0x8b,0x50,
	0x04,0xaa,0x3f,0xd4,0x3f,0x04,0x25,0xbf,
	0x04,0x42,0x3f,0x04,0x23,0x5f,0x04,0x7b,
	0x3f,0x04,0x23,0x5f,0x04,0x24,0xbf,0x04,
	0x8c,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0x38,0x4f,0x34,0x4f,0x04,0x13,0x7f,0xf4,
	0x3f,0xa4,0x3f,0xa4,0x3f,0x44,0x0f,0x11,
	0x34,0x3f,0xb4,0x7f,0xa4,0x4f,0x94,0x3f,
	0xf4,0x4f,0x34,0x4f,0x04,0xff,0x04,0xd2,
	0x50,0x04,0x38,0x4f,0x34,0x4f,0x04,0x10,
	0x4f,0x54,0x4f,0xb4,0x5f,0x94,0x3f,0xa4,
	0x3f,0xb4,0x3f,0xa4,0x3f,0x84,0x4f,0x54,
	0x4f,0x74,0x5f,0x84,0x3f,0xf4,0x4f,0x34,
	0x4f,0x04,0xff,0x04,0xd2,0x50,0x04,0x38,
	0x4f,0x34,0x4f,0xe4,0x4f,0x94,0x3f,0x94,
	0x3f,0x14,0x3f,0x84,0x3f,0xa4,0x3f,0xb4,
	0x3f,0xa4,0x3f,0x64,0x4f,0x94,0x4f,0x54,
	0x6f,0x74,0x3f,0xf4,0x4f,0x34,0x4f,0x04,
	0xff,0x04,0xd2,0x50,0x04,0x38,0x4f,0x34,
	0x4f,0xe4,0x3f,0xb4,0x3f,0x84,0x3f,0x14,
	0x3f,0x84,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,
	0x3f,0x64,0x3f,0xb4,0x3f,0x54,0x3f,0x4f,
	0x64,0x3f,0xf4,0x4f,0x34,0x4f,0x04,0xff,
	0x04,0xd2,0x50,0x04,0x39,0x2f,0x54,0x2f,
	0xe4,0x3f,0x04,0x16,0x3f,0x34,0x3f,0x74,
	0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,0x3f,0x54,
	0x3f,0xd4,0x3f,0x44,0x3f,0x24,0x4f,0x44,
	0x3f,0x04,0x10,0x2f,0x54,0x2f,0x04,0xff,
	0x04,0xd3,0x50,0x04,0x39,0x2f,0x54,0x2f,
	0xe4,0x3f,0x04,0x15,0x3f,0x54,0x3f,0x64,
	0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,0x3f,0x54,
	0x3f,0xd4,0x3f,0x44,0x3f,0x34,0x4f,0x34,
	0x3f,0x04,0x10,0x2f,0x54,0x2f,0x04,0xff,
	0x04,0xd3,0x50,0x04,0x39,0x2f,0x54,0x2f,
	0xe4,0x3f,0xc4,0x3f,0x54,0x3f,0x74,0x3f,
	0x54,0x3f,0xa4,0x3f,0xb4,0x3f,0xa4,0x3f,
	0x54,0x3f,0xd4,0x3f,0x44,0x3f,0x44,0x4f,
	0x24,0x3f,0x04,0x10,0x2f,0x54,0x2f,0x04,
	0xff,0x04,0xd3,0x50,0x04,0x51,0x3f,0xb4,
	0x3f,0x54,0xdf,0x54,0x3f,0xa4,0x3f,0xb4,
	0x3f,0xa4,0x3f,0x54,0x3f,0xd4,0x3f,0x44,
	0x3f,0x64,0x3f,0x14,0x3f,0x04,0xff,0x04,
	0xec,0x50,0x04,0x51,0x4f,0x94,0x3f,0x54,
	0x3f,0x94,0x3f,0x44,0x3f,0xa4,0x3f,0xb4,
	0x3f,0xa4,0x3f,0x64,0x3f,0xb4,0x3f,0x54,
	0x3f,0x74,0x6f,0x04,0xff,0x04,0xec,0x50,
	0x04,0x38,0x3f,0x44,0x3f,0x04,0x11,0x4f,
	0x54,0x4f,0x54,0x3f,0xb4,0x3f,0x44,0x4f,
	0x64,0x4f,0xc4,0x3f,0xa4,0x3f,0x74,0x3f,
	0x84,0x4f,0x64,0x3f,0x84,0x5f,0xf4,0x3f,
	0x44,0x3f,0x04,0xff,0x04,0xd3,0x50,0x04,
	0x38,0x3f,0x44,0x3f,0x04,0x14,0x7f,0x74,
	0x3f,0xd4,0x3f,0x64,0x8f,0xf4,0x3f,0xa4,
	0x3f,0x94,0xbf,0x84,0x3f,0x94,0x4f,0xf4,
	0x3f,0x44,0x3f,0x04,0xff,0x04,0xd3,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0x38,0x3f,0x04,0x64,0x3f,
	0x04,0x3e,0x3f,0x44,0x3f,0x04,0x36,0x3f,
	0x04,0xc4,0x3f,0x04,0x1e,0xef,0x04,0x3f,
	0x3f,0x04,0x63,0x50,0x04,0x38,0x3f,0x04,
	0x47,0x3f,0x04,0x1a,0x3f,0x04,0x45,0x3f,
	0x04,0x36,0x3f,0x04,0xe5,0x3f,0x04,0x4a,
	0x3f,0x04,0x63,0x50,0x04,0x38,0x3f,0x04,
	0x47,0x3f,0x04,0x1a,0x3f,0x04,0x45,0x3f,
	0x04,0x36,0x3f,0x04,0xe5,0x3f,0x04,0x4a,
	0x3f,0x04,0x63,0x50,0x04,0x38,0x3f,0xf4,
	0x3f,0x24,0x5f,0x44,0x5f,0x54,0x3f,0x64,
	0x3f,0x74,0x6f,0x44,0xaf,0x04,0x10,0x4f,
	0x24,0x3f,0x74,0x6f,0xa4,0x6f,0x94,0x6f,
	0x74,0x3f,0x34,0x3f,0x24,0x3f,0x44,0x3f,
	0x24,0x4f,0xa4,0x6f,0x04,0x15,0x6f,0x54,
	0x3f,0x24,0x4f,0xa4,0x6f,0x54,0x3f,0x94,
	0x3f,0x54,0x6f,0x04,0x11,0x3f,0x24,0x5f,
	0x44,0x5f,0x84,0x6f,0xa4,0x6f,0x94,0x6f,
	0xa4,0x6f,0x94,0x4f,0x34,0x3f,0x44,0x6f,
	0x04,0x11,0x3f,0x44,0x3f,0x24,0x5f,0x04,
	0x10,0x3f,0xf4,0x3f,0x34,0x3f,0x54,0x6f,
	0x74,0x3f,0x24,0x5f,0x94,0x6f,0x74,0x3f,
	0x24,0x5f,0x04,0x5c,0x50,0x04,0x38,0x3f,
	0xf4,0x5f,0x34,0x6f,0x34,0x4f,0x34,0x3f,
	0x64,0x3f,0x44,0x4f,0x44,0x4f,0x44,0x3f,
	0x04,0x11,0x4f,0x34,0x5f,0x44,0x4f,0x44,
	0x3f,0x54,0x4f,0x44,0x4f,0x34,0x4f,0x44,
	0x3f,0x54,0x3f,0x14,0x5f,0x24,0x3f,0x44,
	0x5f,0x34,0x4f,0x44,0x4f,0x44,0x3f,0x04,
	0x10,0x4f,0x34,0x4f,0x34,0x5f,0x34,0x4f,
	0x54,0x3f,0x44,0x3f,0x44,0x3f,0x74,0x3f,
	0x34,0x4f,0x44,0x3f,0xf4,0x5f,0x34,0x6f,
	0x34,0x4f,0x34,0x4f,0x44,0x3f,0x54,0x4f,
	0x44,0x4f,0x34,0x4f,0x44,0x4f,0x44,0x4f,
	0x34,0x4f,0x54,0x3f,0x24,0x4f,0x44,0x4f,
	0x44,0x3f,0xf4,0x3f,0x44,0x5f,0x34,0x4f,
	0xe4,0x3f,0xf4,0x3f,0x6f,0x24,0x4f,0x44,
	0x3f,0x54,0x5f,0x34,0x4f,0x44,0x4f,0x44,
	0x3f,0x54,0x5f,0x34,0x4f,0x04,0x5a,0x50,
	0x04,0x38,0x3f,0xf4,0x3f,0x64,0x3f,0x64,
	0x3f,0x34,0x3f,0x64,0x3f,0x44,0x3f,0xd4,
	0x3f,0x04,0x10,0x3f,0x74,0x3f,0x34,0x3f,
	0x74,0x3f,0x44,0x3f,0xb4,0x3f,0x74,0x3f,
	0x44,0x5f,0x64,0x3f,0x44,0x3f,0x74,0x3f,
	0x24,0x3f,0x74,0x3f,0x04,0x17,0x3f,0x34,
	0x3f,0x74,0x3f,0x24,0x3f,0x84,0x3f,0x34,
	0x3f,0x54,0x3f,0x34,0x3f,0x74,0x3f,0xe4,
	0x3f,0x64,0x3f,0x64,0x3f,0x24,0x3f,0x74,
	0x3f,0x44,0x3f,0xc4,0x3f,0x04,0x15,0x3f,
	0x44,0x3f,0x44,0x3f,0x34,0x3f,0x74,0x3f,
	0xe4,0x3f,0x44,0x4f,0x54,0x3f,0xe4,0xcf,
	0x64,0x5f,0x54,0x3f,0x74,0x3f,0x44,0x4f,
	0x54,0x3f,0x34,0x3f,0x74,0x3f,0x44,0x4f,
	0x54,0x3f,0x04,0x5a,0x50,0x04,0x38,0x3f,
	0xf4,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x64,0x3f,0x54,0x8f,0x74,0x3f,0x04,0x10,
	0x3f,0x74,0x3f,0x34,0xdf,0x54,0x8f,0x54,
	0x3f,0xe4,0x3f,0x84,0x3f,0x44,0x3f,0x74,
	0x3f,0x24,0xdf,0x04,0x11,0x9f,0x34,0x3f,
	0x74,0x3f,0x24,0x3f,0x84,0x3f,0x44,0x3f,
	0x34,0x3f,0x44,0xdf,0xe4,0x3f,0x64,0x3f,
	0x64,0x3f,0x24,0xdf,0x54,0x8f,0x74,0x8f,
	0x94,0x9f,0x44,0x3f,0x44,0x3f,0x34,0xdf,
	0xe4,0x3f,0x44,0x3f,0x64,0x3f,0xe4,0x3f,
	0xf4,0x3f,0x74,0xdf,0x44,0x3f,0x64,0x3f,
	0x34,0x3f,0xe4,0x3f,0x64,0x3f,0x04,0x5a,
	0x50,0x04,0x38,0x3f,0xf4,0x3f,0x64,0x3f,
	0x64,0x3f,0x34,0x3f,0x64,0x3f,0xc4,0x4f,
	0x44,0x3f,0x04,0x10,0x3f,0x74,0x3f,0x34,
	0x3f,0x04,0x16,0x4f,0x24,0x3f,0x74,0x3f,
	0x44,0x3f,0x84,0x3f,0x44,0x3f,0x74,0x3f,
	0x24,0x3f,0x04,0x18,0x4f,0x54,0x3f,0x34,
	0x3f,0x74,0x3f,0x24,0x3f,0x84,0x3f,0x54,
	0x3f,0x14,0x3f,0x54,0x3f,0x04,0x18,0x3f,
	0x64,0x3f,0x64,0x3f,0x24,0x3f,0x04,0x16,
	0x4f,0xb4,0x4f,0x34,0x4f,0x54,0x3f,0x54,
	0x8f,0x44,0x3f,0x04,0x18,0x3f,0x44,0x3f,
	0x64,0x3f,0xe4,0x3f,0xf4,0x3f,0x74,0x3f,
	0xe4,0x3f,0x64,0x3f,0x34,0x3f,0x74,0x3f,
	0x44,0x3f,0x64,0x3f,0x04,0x5a,0x50,0x04,
	0x38,0x3f,0xf4,0x3f,0x64,0x3f,0x64,0x3f,
	0x34,0x3f,0x54,0x4f,0x44,0x3f,0x64,0x3f,
	0x44,0x3f,0x04,0x11,0x3f,0x54,0x4f,0x44,
	0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,0x34,
	0x3f,0x54,0x4f,0x44,0x3f,0x84,0x3f,0x44,
	0x4f,0x54,0x3f,0x44,0x3f,0x64,0x3f,0xe4,
	0x3f,0x54,0x4f,0x34,0x4f,0x54,0x3f,0x44,
	0x3f,0x64,0x3f,0x74,0x5f,0x74,0x3f,0x64,
	0x3f,0xe4,0x3f,0x64,0x3f,0x64,0x3f,0x34,
	0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,0x34,
	0x3f,0x64,0x3f,0x34,0x3f,0x54,0x4f,0x34,
	0x2f,0xd4,0x3f,0x64,0x3f,0xe4,0x3f,0x44,
	0x3f,0x64,0x3f,0xe4,0x3f,0xf4,0x3f,0x84,
	0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,0x44,
	0x3f,0x54,0x4f,0x44,0x3f,0x64,0x3f,0x04,
	0x5a,0x50,0x04,0x38,0x3f,0xf4,0x3f,0x64,
	0x3f,0x64,0x3f,0x44,0x7f,0x14,0x3f,0x54,
	0xaf,0x64,0x7f,0xd4,0xbf,0x54,0x9f,0x74,
	0xaf,0x54,0x9f,0x64,0x3f,0x84,0x3f,0x44,
	0xbf,0x64,0x9f,0x04,0x11,0xbf,0x34,0xbf,
	0x74,0x8f,0x94,0x5f,0x84,0x9f,0x04,0x10,
	0x3f,0x64,0x3f,0x64,0x3f,0x44,0x9f,0x74,
	0xaf,0x54,0xaf,0x54,0xbf,0x44,0xaf,0x54,
	0x9f,0x04,0x10,0x3f,0x44,0x3f,0x64,0x3f,
	0xe4,0x3f,0xf4,0x3f,0x94,0x9f,0x64,0x3f,
	0x64,0x3f,0x54,0x9f,0x64,0x3f,0x64,0x3f,
	0x44,0x3f,0x04,0x53,0x50,0x04,0xff,0x04,
	0xbf,0x2f,0x84,0x3f,0x04,0xf0,0x50,0x04,
	0xff,0x04,0xbf,0x3f,0x74,0x3f,0x04,0xf0,
	0x50,0x04,0xff,0x04,0xc1,0x8f,0x04,0xf3,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0x38,
	0x3f,0xa4,0x3f,0x04,0x79,0x3f,0xd4,0x3f,
	0x04,0x1d,0x3f,0x04,0x1d,0x3f,0x04,0x5a,
	0x3f,0x44,0x3f,0xd4,0x3f,0x04,0x21,0x6f,
	0x04,0x93,0x3f,0xd4,0x3f,0x04,0x1d,0x3f,
	0x04,0x46,0x50,0x04,0x38,0x3f,0xa4,0x3f,
	0x04,0x6f,0x3f,0x74,0x3f,0xd4,0x3f,0x04,
	0x1d,0x3f,0x04,0x1d,0x3f,0x04,0x5a,0x3f,
	0x44,0x3f,0xd4,0x3f,0x04,0x1f,0x4f,0x34,
	0x1f,0x04,0x89,0x3f,0x74,0x3f,0xd4,0x3f,
	0x04,0x1d,0x3f,0x04,0x46,0x50,0x04,0x38,
	0x3f,0xa4,0x3f,0x04,0x6f,0x3f,0x74,0x3f,
	0x04,0xb1,0x3f,0xd4,0x3f,0x04,0x1f,0x3f,
	0x04,0x8e,0x3f,0x74,0x3f,0x04,0x76,0x50,
	0x04,0x38,0x3f,0xa4,0x3f,0x04,0x6f,0x3f,
	0x74,0x3f,0x04,0xb1,0x3f,0xd4,0x3f,0x04,
	0x1f,0x3f,0x04,0x8e,0x3f,0x74,0x3f,0x04,
	0x76,0x50,0x04,0x38,0x3f,0xa4,0x3f,0x74,
	0x8f,0x44,0x4f,0x44,0x4f,0x44,0x4f,0x44,
	0x9f,0x54,0x3f,0x74,0x3f,0x44,0x9f,0x64,
	0x3f,0x24,0x4f,0xa4,0xaf,0x34,0x3f,0x14,
	0x7f,0x54,0x3f,0x54,0xaf,0xe4,0x3f,0x54,
	0xaf,0xe4,0x3f,0x44,0x3f,0x8f,0x24,0x7f,
	0x44,0xbf,0x74,0x8f,0x74,0xaf,0x54,0xaf,
	0x44,0x3f,0x44,0x3f,0x8f,0x54,0x3f,0x54,
	0x9f,0xe4,0xaf,0x44,0x8f,0x64,0x3f,0x24,
	0x4f,0xc4,0x3f,0x8f,0x24,0x7f,0x54,0x9f,
	0x04,0x18,0xaf,0x64,0x8f,0xe4,0xaf,0x34,
	0x3f,0x8f,0x54,0x3f,0x54,0xaf,0xe4,0x3f,
	0x54,0xaf,0x04,0x37,0x50,0x04,0x38,0x0f,
	0x10,0x54,0x3f,0x64,0x3f,0x34,0x3f,0x44,
	0x4f,0x44,0x3f,0x44,0x3f,0x64,0x2f,0x54,
	0x3f,0x54,0x3f,0x44,0x3f,0x64,0x2f,0x54,
	0x6f,0x04,0x10,0x3f,0x74,0x4f,0x54,0x3f,
	0x44,0x3f,0x44,0x3f,0x64,0x3f,0xd4,0x3f,
	0x44,0x3f,0x64,0x3f,0xd4,0x3f,0x44,0x4f,
	0x54,0x4f,0x54,0x3f,0x34,0x4f,0x54,0x3f,
	0x44,0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,
	0x34,0x3f,0x64,0x3f,0x34,0x3f,0x44,0x4f,
	0x54,0x3f,0x44,0x3f,0x44,0x3f,0x64,0x2f,
	0x04,0x10,0x3f,0x64,0x3f,0x64,0x3f,0x44,
	0x6f,0xf4,0x4f,0x54,0x4f,0x54,0x3f,0x34,
	0x3f,0x64,0x2f,0x04,0x16,0x3f,0x64,0x3f,
	0x34,0x3f,0x64,0x3f,0xf4,0x3f,0x74,0x4f,
	0x54,0x3f,0x44,0x3f,0x44,0x3f,0x64,0x3f,
	0xd4,0x3f,0x44,0x3f,0x64,0x3f,0x04,0x36,
	0x50,0x04,0x38,0x3f,0xa4,0x3f,0x44,0x3f,
	0x84,0x3f,0x34,0x3f,0x24,0x2f,0x24,0x2f,
	0x24,0x3f,0x44,0xdf,0x44,0x4f,0x34,0x4f,
	0x34,0xdf,0x44,0x4f,0x04,0x12,0x3f,0x74,
	0x3f,0x64,0x3f,0x44,0x3f,0x44,0x4f,0x04,
	0x15,0x3f,0x44,0x4f,0x04,0x15,0x3f,0x44,
	0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,0x74,
	0x3f,0x24,0x3f,0x84,0x3f,0x34,0x4f,0xb4,
	0x4f,0xb4,0x3f,0x44,0x3f,0x74,0x3f,0x34,
	0x3f,0x34,0xdf,0xf4,0x3f,0x54,0x3f,0x84,
	0x3f,0x34,0x4f,0x04,0x11,0x3f,0x64,0x3f,
	0x64,0x3f,0x24,0xdf,0x04,0x15,0x4f,0xa4,
	0x3f,0x84,0x3f,0xe4,0x3f,0x74,0x3f,0x64,
	0x3f,0x44,0x3f,0x44,0x4f,0x04,0x15,0x3f,
	0x44,0x4f,0x04,0x3e,0x50,0x04,0x38,0x3f,
	0xa4,0x3f,0x44,0x3f,0x84,0x3f,0x34,0x3f,
	0x14,0x2f,0x44,0x2f,0x4f,0x44,0x3f,0xf4,
	0x3f,0x34,0x3f,0x44,0x3f,0xe4,0x3f,0x04,
	0x13,0x3f,0x74,0x3f,0x64,0x3f,0x44,0x3f,
	0x74,0x8f,0xe4,0x3f,0x74,0x8f,0xe4,0x3f,
	0x44,0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,
	0x74,0x3f,0x24,0x3f,0x84,0x3f,0x64,0x8f,
	0x74,0x8f,0x44,0x3f,0x44,0x3f,0x74,0x3f,
	0x34,0x3f,0x34,0x3f,0x04,0x19,0x3f,0x54,
	0x3f,0x84,0x3f,0x34,0x3f,0x04,0x12,0x3f,
	0x64,0x3f,0x64,0x3f,0x24,0x3f,0x04,0x22,
	0x8f,0x34,0x3f,0x84,0x3f,0xe4,0x3f,0x74,
	0x3f,0x64,0x3f,0x44,0x3f,0x74,0x8f,0xe4,
	0x3f,0x74,0x8f,0x04,0x37,0x50,0x04,0x38,
	0x3f,0xa4,0x3f,0x44,0x3f,0x84,0x3f,0x44,
	0x5f,0x44,0x5f,0x54,0x3f,0x74,0x3f,0x64,
	0x3f,0x14,0x3f,0x54,0x3f,0x74,0x3f,0x44,
	0x3f,0x04,0x13,0x3f,0x74,0x3f,0x64,0x3f,
	0x44,0x3f,0x44,0x3f,0x64,0x3f,0xd4,0x3f,
	0x44,0x3f,0x64,0x3f,0xd4,0x3f,0x44,0x3f,
	0x64,0x3f,0x64,0x3f,0x34,0x3f,0x74,0x3f,
	0x24,0x3f,0x84,0x3f,0x34,0x3f,0x64,0x3f,
	0x34,0x3f,0x64,0x3f,0x34,0x3f,0x44,0x3f,
	0x74,0x3f,0x34,0x3f,0x34,0x3f,0x74,0x3f,
	0xf4,0x3f,0x54,0x3f,0x84,0x3f,0x34,0x3f,
	0x04,0x12,0x3f,0x64,0x3f,0x64,0x3f,0x24,
	0x3f,0x74,0x3f,0x04,0x15,0x3f,0x64,0x3f,
	0x24,0x3f,0x84,0x3f,0xe4,0x3f,0x74,0x3f,
	0x64,0x3f,0x44,0x3f,0x44,0x3f,0x64,0x3f,
	0xd4,0x3f,0x44,0x3f,0x64,0x3f,0x04,0x36,
	0x50,0x04,0x38,0x3f,0xa4,0x3f,0x64,0x3f,
	0x44,0x3f,0x64,0x4f,0x64,0x4f,0x64,0x4f,
	0x44,0x3f,0x84,0x5f,0x74,0x4f,0x44,0x3f,
	0x54,0x3f,0x04,0x13,0x4f,0x34,0x1f,0x24,
	0x3f,0x64,0x3f,0x44,0x3f,0x54,0x3f,0x44,
	0x4f,0xd4,0x3f,0x54,0x3f,0x44,0x4f,0xd4,
	0x3f,0x44,0x3f,0x64,0x3f,0x64,0x3f,0x34,
	0x5f,0x34,0x4f,0x54,0x3f,0x44,0x3f,0x64,
	0x3f,0x44,0x4f,0x44,0x3f,0x44,0x4f,0x34,
	0x3f,0x44,0x5f,0x34,0x4f,0x44,0x3f,0x44,
	0x4f,0x44,0x3f,0x04,0x10,0x3f,0x74,0x3f,
	0x44,0x3f,0x54,0x3f,0x04,0x12,0x3f,0x64,
	0x3f,0x64,0x3f,0x34,0x4f,0x44,0x3f,0x54,
	0x3f,0xf4,0x3f,0x44,0x4f,0x44,0x3f,0x44,
	0x3f,0x04,0x10,0x4f,0x34,0x34,0x3f,0x64,
	0x3f,0x44,0x3f,0x54,0x3f,0x44,0x4f,0xd4,
	0x3f,0x54,0x3f,0x44,0x4f,0x04,0x36,0x50,
	0x04,0x38,0x3f,0xa4,0x3f,0x84,0x6f,0x94,
	0x2f,0x84,0x2f,0xa4,0x6f,0xb4,0x3f,0xb4,
	0x6f,0x74,0x3f,0x04,0x15,0x6f,0x24,0x3f,
	0x64,0x3f,0x44,0x3f,0x74,0x6f,0x04,0x10,
	0x3f,0x74,0x6f,0x04,0x10,0x3f,0x44,0x3f,
	0x64,0x3f,0x64,0x3f,0x34,0x3f,0x24,0x4f,
	0xa4,0x6f,0xa4,0x6f,0x94,0x6f,0x64,0x3f,
	0x44,0x3f,0x24,0x5f,0x64,0x3f,0x74,0x6f,
	0x04,0x12,0x3f,0x94,0x6f,0x74,0x3f,0x04,
	0x12,0x3f,0x64,0x3f,0x64,0x3f,0x64,0x6f,
	0x74,0x3f,0x04,0x11,0x6f,0x94,0x6f,0x04,
	0x14,0x6f,0x24,0x3f,0x64,0x3f,0x44,0x3f,
	0x74,0x6f,0x04,0x10,0x3f,0x74,0x6f,0x04,
	0x39,0x50,0x04,0xff,0x04,0x31,0x3f,0x04,
	0xca,0x2f,0x04,0xbc,0x50,0x04,0xff,0x04,
	0x31,0x3f,0x04,0xff,0x04,0x89,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0x41,0x3f,0x04,0xdd,
	0x7f,0x04,0x26,0x3f,0x04,0xff,0x04,0x6b,
	0x50,0x04,0x41,0x3f,0x04,0xdc,0x3f,0x04,
	0x33,0x3f,0x04,0xff,0x04,0x63,0x50,0x04,
	0x41,0x3f,0x04,0xdc,0x3f,0x04,0x33,0x3f,
	0x04,0xff,0x04,0x63,0x50,0x04,0x3b,0x4f,
	0x24,0x3f,0x44,0x3f,0x64,0x3f,0x44,0x3f,
	0x24,0x5f,0x44,0x5f,0x54,0x3f,0x24,0x5f,
	0x44,0x5f,0x34,0x3f,0x94,0x3f,0xc4,0x3f,
	0x24,0x5f,0x44,0x5f,0x84,0x6f,0xa4,0x6f,
	0x94,0x6f,0xa4,0x6f,0x94,0x4f,0x34,0x3f,
	0x44,0x6f,0xf4,0xaf,0x54,0x6f,0x74,0x3f,
	0x34,0x3f,0xc4,0x3f,0x24,0xaf,0x04,0xff,
	0x04,0x5f,0x50,0x04,0x38,0x4f,0x34,0x5f,
	0x44,0x3f,0x64,0x3f,0x44,0x5f,0x34,0x6f,
	0x34,0x4f,0x34,0x5f,0x34,0x6f,0x34,0x4f,
	0x24,0x3f,0x74,0x3f,0xd4,0x5f,0x34,0x6f,
	0x34,0x4f,0x34,0x4f,0x44,0x3f,0x54,0x4f,
	0x44,0x4f,0x34,0x4f,0x44,0x4f,0x44,0x4f,
	0x34,0x4f,0x54,0x3f,0x24,0x4f,0x44,0x4f,
	0x44,0x3f,0x04,0x10,0x3f,0x74,0x3f,0x44,
	0x3f,0x54,0x3f,0x14,0x5f,0xc4,0x3f,0x54,
	0x3f,0x04,0xff,0x04,0x63,0x50,0x04,0x37,
	0x3f,0x74,0x3f,0x44,0x3f,0x64,0x3f,0x44,
	0x3f,0x64,0x3f,0x64,0x3f,0x34,0x3f,0x64,
	0x3f,0x64,0x3f,0x34,0x3f,0x54,0x3f,0xe4,
	0x3f,0x64,0x3f,0x64,0x3f,0x24,0x3f,0x74,
	0x3f,0x44,0x3f,0xc4,0x3f,0x04,0x15,0x3f,
	0x44,0x3f,0x44,0x3f,0x34,0x3f,0x74,0x3f,
	0xf4,0x3f,0x54,0x3f,0x84,0x3f,0x34,0x5f,
	0x04,0x10,0x3f,0x54,0x3f,0x04,0xff,0x04,
	0x63,0x50,0x04,0x37,0x3f,0x74,0x3f,0x44,
	0x3f,0x64,0x3f,0x44,0x3f,0x64,0x3f,0x64,
	0x3f,0x34,0x3f,0x64,0x3f,0x64,0x3f,0x44,
	0x3f,0x34,0x3f,0xf4,0x3f,0x64,0x3f,0x64,
	0x3f,0x24,0xdf,0x54,0x8f,0x74,0x8f,0x94,
	0x9f,0x44,0x3f,0x44,0x3f,0x34,0xdf,0xf4,
	0x3f,0x54,0x3f,0x84,0x3f,0x34,0x3f,0x04,
	0x12,0x3f,0x54,0x3f,0x04,0xff,0x04,0x63,
	0x50,0x04,0x37,0x3f,0x74,0x3f,0x44,0x3f,
	0x64,0x3f,0x44,0x3f,0x64,0x3f,0x64,0x3f,
	0x34,0x3f,0x64,0x3f,0x64,0x3f,0x54,0x3f,
	0x14,0x3f,0x04,0x10,0x3f,0x64,0x3f,0x64,
	0x3f,0x24,0x3f,0x04,0x16,0x4f,0xb4,0x4f,
	0x34,0x4f,0x54,0x3f,0x54,0x8f,0x44,0x3f,
	0x04,0x19,0x3f,0x54,0x3f,0x84,0x3f,0x34,
	0x3f,0x04,0x12,0x3f,0x54,0x3f,0x04,0xff,
	0x04,0x63,0x50,0x04,0x38,0x3f,0x54,0x4f,
	0x44,0x3f,0x54,0x4f,0x44,0x3f,0x64,0x3f,
	0x64,0x3f,0x34,0x3f,0x64,0x3f,0x64,0x3f,
	0x54,0x3f,0x14,0x3f,0x04,0x10,0x3f,0x64,
	0x3f,0x64,0x3f,0x34,0x3f,0x64,0x3f,0x44,
	0x3f,0x64,0x3f,0x34,0x3f,0x64,0x3f,0x34,
	0x3f,0x54,0x4f,0x34,0x2f,0xd4,0x3f,0x64,
	0x3f,0xf4,0x3f,0x64,0x3f,0x64,0x3f,0x44,
	0x3f,0x04,0x12,0x3f,0x54,0x3f,0x04,0xff,
	0x04,0x63,0x50,0x04,0x39,0xbf,0x54,0x7f,
	0x14,0x3f,0x44,0x3f,0x64,0x3f,0x64,0x3f,
	0x34,0x3f,0x64,0x3f,0x64,0x3f,0x64,0x5f,
	0x04,0x11,0x3f,0x64,0x3f,0x64,0x3f,0x44,
	0x9f,0x74,0xaf,0x54,0xaf,0x54,0xbf,0x44,
	0xaf,0x54,0x9f,0x04,0x11,0x3f,0x84,0x8f,
	0x64,0x3f,0x04,0x12,0x3f,0x64,0x7f,0x24,
	0x3f,0x04,0xff,0x04,0x59,0x50,0x04,0x8c,
	0x3f,0x04,0x67,0x2f,0x84,0x3f,0x04,0xff,
	0x04,0xb9,0x50,0x04,0x88,0x1f,0x24,0x3f,
	0x04,0x68,0x3f,0x74,0x3f,0x04,0xff,0x04,
	0xb9,0x50,0x04,0x88,0x4f,0x04,0x6c,0x8f,
	0x04,0xff,0x04,0xbc,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x04,0xff,0x04,0xff,0x04,
	0xbd,0x50,0x04,0xff,0x04,0xff,0x04,0xbd,
	0x50,0x04,0xff,0x04,0xff,0x04,0xbd,0x50,
	0x04,0xff,0x04,0xff,0x04,0xbd,0x50,0x04,
	0xff,0x04,0xff,0x04,0xbd,0x50,0x04,0xff,
	0x04,0xff,0x04,0xbd,0x50,0x04,0xff,0x04,
	0xff,0x04,0xbd,0x50,0x04,0xff,0x04,0xff,
	0x04,0xbd,0x50,0x00};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\hwdevex.h ===
//**************************************************************************
//
//      Title   : HwDevEx.h
//
//      Date    : 1997.12.25    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.25   000.0000   1st making.
//
//**************************************************************************

//***************** HW_DEVICE_EXTENSION **********************
//typedef struct  _HW_DEVICE_EXTENSION
//{
//
//} HW_DEVICE_EXTENSION, *PHW_DEVICE_EXTENSION;


class   HW_DEVICE_EXTENSION
{
public:
    PCI_COMMON_CONFIG   PciConfigSpace;

    // System dependent information
    PUCHAR              ioBaseLocal;            // board base address
    ULONG               Irq;                    // Irq level

    // Decoder H/W dependent information
    WORD                VenderID;               // Vender ID
    WORD                DeviceID;               // Device ID
    WORD                SubVenderID;            // Sub Vender ID
    WORD                SubDeviceID;            // Sub Device ID

    // Object dpended on the decoder H/W.
    CWDMKernelService   kserv;
    CMPEGBoardHAL       mphal;
    CMPEGBoard          mpboard;
    CMPEGBoardState     mpbstate;
    CDVDStream          dvdstrm;
    CTransfer           transfer;
    CDataXferEvent      senddata;

    CTickTime           ticktime;
    CScheduleData       scheduler;
    CCQueue             ccque;
    CUserDataEvent      userdata;
    CVSyncEvent         vsync;
    CTVControl          tvctrl;

    // STREAM_OBJECTs
    PHW_STREAM_OBJECT   pstroVid;               // Video
    PHW_STREAM_OBJECT   pstroAud;               // Audio
    PHW_STREAM_OBJECT   pstroSP;                // Sub-picture
    PHW_STREAM_OBJECT   pstroYUV;               // Digital video
    PHW_STREAM_OBJECT   pstroCC;                // Closed caption
//--- 98.05.21 S.Watanabe
	PHW_STREAM_OBJECT   pstroSS;				// Special Stream
//--- End.

    LONG                lCPPStrm;               // Authentication procceed to 1 stream
    
    ULONG               ddrawHandle;
    ULONG               VidPortID;
    ULONG               SurfaceHandle;

    // handles for clock
    HANDLE              hClk;
    HANDLE              hMaster;

    // Informations
	DWORD				StreamState;			// Stream State
    LONG                Rate;                   // Play rate
    LONG                NewCompleteRate;        // Play rate(include +/-)
    LONG                OldCompleteRate;        // Prev rate(include +/-)

    REFERENCE_TIME      StartTime;
    REFERENCE_TIME      InterceptTime;
    REFERENCE_TIME      VideoStartTime;
    REFERENCE_TIME      VideoInterceptTime;
    REFERENCE_TIME      AudioStartTime;
    REFERENCE_TIME      AudioInterceptTime;
    REFERENCE_TIME      SubpicStartTime;
    REFERENCE_TIME      SubpicInterceptTime;


    BOOL                m_InitComplete;         // Initialaize complete or not
    BOOL                m_bTVct;                // TVCtrl Available or not

    DWORD               m_PlayMode;             // Normal/Slow/Fast/Pause/

    DWORD               m_DigitalOut;           // Digital output mode
    DWORD               m_OutputSource;         // DVD/VGA
    DWORD               m_CompositeOut;         // Composite out on/off
    DWORD               m_SVideoOut;            // S-Video out on/off

    DWORD               m_DisplayMode;          // Original/LetterBox/PanScan
    DWORD               m_TVSystem;             // NTSC/PAL
    DWORD               m_AspectRatio;          // 16:9/4:3
    DWORD               m_ResHorizontal;        //
    DWORD               m_ResVertical;          //
    DWORD               m_SourceFilmCamera;     // Film/Camera
    DWORD               m_APSType;              // MacroVision
    BOOL		m_APSChange;   		// Macrovision change flag, 99.02.02 H.Yagi
    DWORD               m_ClosedCaption;        // ClosedCaption(On/Off)

    DWORD               m_CgmsType;             // cgms

    DWORD               m_AudioType;            // AC-3/MPEG/PCM
    DWORD               m_AudioFS;              // Freaquency
    DWORD               m_AudioCgms;            // no need?
    DWORD               m_AudioChannel;         // 0--7
    DWORD               m_AudioQuant;           // only when PCM
    DWORD               m_AudioVolume;
    DWORD               m_AudioDigitalOut;      // on/off
    DWORD               m_AudioEncode;          // Encode/Decode on digital out
    DWORD               m_AudioAppMode;         // Karaoke/Surround
    
    DWORD               m_SubpicChannel;        // 0--31
    DWORD               m_SubpicMute;           // on/off

    DWORD               m_DVideoOut;             // support Digital Video type
    DWORD               m_DVideoNum;
    
//    SubpHlightStruc     m_spHlight;             // High-light inf structure
//	DWORD				m_spStartPTM;
//	DWORD				m_spEndPTM;
    BYTE                m_paldata[48];          // palette data

    DWORD               m_PCID;                 // ID for PC name
    DWORD		m_CurrentDisplay;	// current display mode

    // Unvisible property
    DWORD               m_AC3LowBoost;          // Dynamic Range Control
    DWORD               m_AC3HighCut;
    DWORD               m_AC3OperateMode;       // Operation Mode

    KS_AMVPDATAINFO     VPFmt;

    DWORD               m_PTS;          // for debug

//--- 98.06.02 S.Watanabe
	DWORD	CppFlagCount;
	PHW_STREAM_REQUEST_BLOCK	pSrbCpp;
	BOOL	bCppReset;
	DWORD	cOpenInputStream;	// count opened input stream
//--- End.
//--- 98.06.16 S.Watanabe
	BOOL	bToshibaNotePC;
//--- End.

	HlightControl	m_HlightControl;

//--- 98.12.23 H.Yagi
	DWORD	m_DisplayDevice;	// display device(TV) type(wide/normal)

//--- 99.01.14 S.Watanabe
	DWORD	m_VideoFormatFlags;
//--- End.

};

typedef HW_DEVICE_EXTENSION*    PHW_DEVICE_EXTENSION;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\ioif.h ===
//***************************************************************************
//
//	FileName:
//		$Workfile: ioif.h $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/Sources/ZiVAHAL/ioif.h 1     97/06/27 23:22 Seichan $
// $Modtime: 97/06/23 19:37 $
// $Nokeywords:$
//***************************************************************************


#ifndef _IOIF_H_
#define _IOIF_H_


//---------------------------------------------------------------------------
//	IO Template Class
//---------------------------------------------------------------------------
template<class T> class CIOTemplate
{
	private:
		IKernelService	*m_pKernelObj;
		DWORD			m_dwAddr;

	public:
		CIOTemplate( void ): m_pKernelObj(NULL)
		{
		};

		inline void Init( IKernelService *m_pObj, DWORD Addr )
		{
			m_pKernelObj = m_pObj;
			m_dwAddr = Addr;
		};

		inline BYTE		Get( DWORD offset )
		{
			ASSERT( offset < sizeof( T ) );
			BYTE Data;
			m_pKernelObj->GetPortData(m_dwAddr+offset, &Data);
			return Data;
		};

		// Data Write by offset.
		inline void		Set( DWORD offset, BYTE Data  )
		{
			ASSERT( 0 <= offset && offset < sizeof( T ) );
			m_pKernelObj->SetPortData( m_dwAddr + offset, Data );
		};

		CIOTemplate& operator=(const T &Data )
		{
			ASSERT( m_pKernelObj != NULL );
			m_pKernelObj->SetPortData( m_dwAddr, Data );
			return *this;
		};

		operator T()
		{
			ASSERT( m_pKernelObj != NULL );
			T	Ret;
			m_pKernelObj->GetPortData( m_dwAddr, &Ret );
			return Ret;
		};

		CIOTemplate& operator&=(const T &Data )
		{
			ASSERT( m_pKernelObj != NULL );
			T GetData;
			m_pKernelObj->GetPortData(m_dwAddr, &GetData);
			GetData &= Data;
			m_pKernelObj->SetPortData(m_dwAddr, GetData );
			return *this;
		};

		CIOTemplate& operator|=(const T &Data )
		{
			ASSERT( m_pKernelObj != NULL );
			T GetData;
			m_pKernelObj->GetPortData(m_dwAddr, &GetData);
			GetData |= Data;
			m_pKernelObj->SetPortData(m_dwAddr, GetData );
			return *this;
		};


};


//---------------------------------------------------------------------------
//	IO Class definition
//---------------------------------------------------------------------------
typedef	CIOTemplate< DWORD >	CDWORDIO;
typedef	CIOTemplate< WORD  >	CWORDIO;
typedef	CIOTemplate< BYTE  >	CBYTEIO;


//---------------------------------------------------------------------------
// PCI interface control class
//---------------------------------------------------------------------------
class CIOIF
{
	// Luke register class
	class CLuke2
	{
		public:
			CDWORDIO	IO_CONT;			// control register
			CWORDIO		IO_INTF;			// interrupt flag register
			CDWORDIO	IO_MADR;			// master address register
			CDWORDIO	IO_MTC;				// master transfer counter register

			CBYTEIO		IO_CPLT;			// color pallet data register
			CBYTEIO		IO_CPCNT;			// color paller control register
			CWORDIO		AVCONT;				// AV control register

			CBYTEIO		IO_VMODE;			// digital video output mode register
			CBYTEIO		IO_HSCNT;			// digital video h-sync count register
			CBYTEIO		IO_VPCNT;			// digital video V-sync count register
			CBYTEIO		IO_POL;				// digital video V/H-sync. Polarity register

			CDWORDIO	I2C_CONT;			// IIC access register
			CBYTEIO		I2C_ERR;			// IIC error register
			CBYTEIO		IO_EEPROM;			// EEPROM access register
			CBYTEIO		IO_PSCNT;			// program steram control register
			CBYTEIO		IO_TEST;			// TEST control register

			CBYTEIO		RST_CONT;			// reset control register
			CDWORDIO	STCCUNT;			// STC counter register
			CWORDIO		STCCONT;			// STC control register

			CDWORDIO	DMA_Start_Address;	//
			CDWORDIO	DMA_Byte_Count;		//
			CDWORDIO	Counter_Test;		//
			CDWORDIO	STCREF;				// STC interrupt reference

		public:
			void Init( IKernelService *pKernelObj )
			{
				IO_CONT.Init( pKernelObj , 0x00 );
				IO_INTF.Init( pKernelObj , 0x04 );
				IO_MADR.Init( pKernelObj , 0x08 );
				IO_MTC.Init(  pKernelObj , 0x0c );

				IO_CPLT.Init(  pKernelObj , 0x10 );
				IO_CPCNT.Init( pKernelObj , 0x11 );
				AVCONT.Init(   pKernelObj , 0x12 );

				IO_VMODE.Init( pKernelObj , 0x14 );
				IO_HSCNT.Init( pKernelObj , 0x15 );
				IO_VPCNT.Init( pKernelObj , 0x16 );
				IO_POL.Init(   pKernelObj , 0x17 );

				I2C_CONT.Init(  pKernelObj , 0x18 );
				I2C_ERR.Init(   pKernelObj , 0x1c );
				IO_EEPROM.Init( pKernelObj , 0x20 );
				IO_PSCNT.Init(  pKernelObj , 0x22 );
				IO_TEST.Init(   pKernelObj , 0x23 );

				RST_CONT.Init( pKernelObj , 0x27 );
				STCCUNT.Init(  pKernelObj , 0x28 );
				STCCONT.Init(  pKernelObj , 0x2c );

				DMA_Start_Address.Init( pKernelObj , 0x30 );
				DMA_Byte_Count.Init(    pKernelObj , 0x34 );
				Counter_Test.Init(      pKernelObj , 0x38 );
				STCREF.Init(            pKernelObj , 0x3c );
			};
	};

	//----------------------
	// ZiVA Register class
	//----------------------
	class CZiVAIO
	{
		public:
			CBYTEIO		HIO[ 8 ];
		
		public:
			void Init( IKernelService *pKernelObj )
			{
				for( int i = 0 ; i < 8 ; i ++ )
					HIO[i].Init( pKernelObj , i + 0x40 );
			};
	};


	public:
		CLuke2		luke2;		// Luke2 instance
		CZiVAIO		zivaio;		// DVD1 instance


	inline void Init( IKernelService *pKernelObj )
	{
		luke2.Init( pKernelObj );
		zivaio.Init( pKernelObj );
		return;
	};
	
};

#endif 		// _IOIF_H_

//***************************************************************************
//	End of
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\mem.cpp ===
//**************************************************************************
//
//      Title   : Mem.cpp
//
//      Date    : 1997.12.08    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.08   000.0000   1st making.
//      98.01.20   000.0001   Append  _fltused and _purecall() function.
//                            
//
//**************************************************************************
#include    "includes.h"
/*******************************
#ifndef _PNH_DEFINED
typedef int (__cdecl* _PNH)( size_t );
#define _PNH_DEFINED
#endif

int _cdecl  __default_nh( size_t )
{
    return 0;
};

_PNH    __newhandler = __default_nh;

_PNH    _cdecl  _set_new_handler( _PNH handler )
{
    ASSERT( NULL!= handler );
    _PNH    oldhandler = __newhandler;
    __newhandler = handler;

    return oldhandler;
}
*****************************************/

PVOID   _cdecl  ::operator    new( size_t size )
{
	ASSERT( KeGetCurrentIrql() <= DISPATCH_LEVEL );
    PVOID p = ExAllocatePool( NonPagedPool, size );

    if(!p){
        DBG_BREAK();
    }
    return( p );
}


VOID    _cdecl  ::operator    delete( PVOID p )
{
    ASSERT( p!=NULL );
    ExFreePool( p );
}





extern  "C" const   int _fltused = 0;

int __cdecl _purecall( void )
{
    return( FALSE );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\mem.h ===
//**************************************************************************
//
//      Title   : Mem.h
//
//      Date    : 1997.12.08    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.08   000.0000   1st making.
//
//**************************************************************************
//_PHN    __cdecl _set_new_handler( _PHN );

PVOID   _cdecl  ::operator    new( size_t size );
//PVOID   _cdecl  operator    new( size_t size, POOL_TYPE type );
VOID    _cdecl  ::operator    delete( PVOID p );
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\mcode.cpp ===
#ifdef MCODE_VERSION_DEF
MicroCodeVersion = "23Jul99/18182.32"
#else
#include "includes.h"
#include "zivachip.h"
//
//  MicroCode Version = 23Jul99/18182.32
//
//Initial header
//  MagicNumber = C3UX
//  Number of Sections = 0x1
//  Length of initial portion = 0x245ae
//Section header
//  Data Type        = 0x1
//  Flags            = 0x0
//  Unused Flags     = 0x00:0x00:
//  Section Length   = 0x244f4
//  Section start    = 0x00:0x00:0x00:0x00:
//  Section checksum = 0xd7:0x2b:0xb2:0x00:
//Extend Header
//  File Format revision = 0x02:0x01:
//  Microcode version number = 2.32
//  Microcode product name   =  DVD                            
//  Customer specific name   =                                 
//  Silicon product name     = DVD1            
//  Minimum silicon revison  = 0x00:
//  Maximum silicon revison  = 0x00:
//  Minimum extend feature revison  = 0x00:
//  Maximum extend feature revison  = 0x00:
//  Copyright string = (C) C-Cube Microsystems Inc. 1995-1997                          
//  Header check sum = 0x2a:0x10:0x00:0x00:


BYTE CZiVA::UXData[] = {
	0x43,0x33,0x55,0x58,0x01,0x00,0x00,0x00,
	0xae,0x45,0x02,0x00,0x01,0x00,0x00,0x00,
	0xf4,0x44,0x02,0x00,0x00,0x00,0x00,0x00,
	0xd7,0x2b,0xb2,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0xff,0x00,0x00,0x00,0xaa,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x01,0x00,0x04,0xf1,0x30,
	0x00,0x05,0xe1,0x30,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x10,0x80,0x80,
	0x00,0x10,0x80,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xd0,
	0x00,0x00,0x01,0xe0,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
	0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,
	0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,
	0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x01,0x23,0x45,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,
	0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x88,
	0x00,0x00,0x13,0x88,0x00,0x00,0x00,0x00,
	0x00,0x00,0x0f,0xa0,0x00,0x00,0x0f,0xa0,
	0x00,0x00,0x23,0x28,0x00,0x00,0x23,0x28,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
	0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x02,0x00,0x05,0xe1,0x40,
	0x00,0x05,0xe5,0x14,0x00,0x05,0xe5,0x14,
	0x00,0x05,0xe9,0x30,0x00,0x01,0x3f,0x20,
	0x00,0x04,0xf1,0x20,0x00,0x05,0xe9,0x40,
	0x00,0x07,0x6b,0x20,0x00,0x07,0x6b,0x30,
	0x00,0x08,0x43,0xf0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xda,0x10,
	0x00,0x01,0x3f,0x10,0x00,0x00,0x7a,0x00,
	0x00,0x00,0xda,0x00,0x00,0x00,0x1a,0x28,
	0x00,0x00,0x1e,0x28,0x00,0x00,0x1a,0x28,
	0x00,0x00,0x1a,0x28,0x00,0x01,0x3f,0x20,
	0x00,0x04,0xf1,0x20,0x00,0x00,0x70,0x80,
	0x00,0x00,0x70,0xbf,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x32,0x33,0x4a,0x75,0x6c,0x39,0x39,0x2f,
	0x31,0x38,0x31,0x38,0x32,0x2e,0x33,0x32,
	0x43,0x55,0x42,0x45,0x00,0x00,0x00,0x00,
	0x00,0x02,0x44,0xe4,0x00,0x10,0x2d,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x18,0x16,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x08,0x44,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x9c,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x02,0x44,0xf4,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x0e,0x54,0x00,0x00,0x00,0x00,
	0x00,0x00,0x05,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x01,0x46,0x02,0x06,
	0x00,0x7f,0xdf,0xff,0xa0,0x38,0x00,0x21,
	0x70,0xe0,0x00,0x21,0x71,0x24,0x00,0x21,
	0x71,0x68,0xd1,0x80,0x10,0xe0,0xe8,0x17,
	0xd1,0x81,0x41,0x83,0x11,0x86,0x10,0xdf,
	0xd0,0x5f,0x40,0x43,0x10,0x47,0x51,0x81,
	0x10,0xdb,0xd1,0xc0,0x11,0x20,0xe8,0x1d,
	0xd1,0xff,0x41,0xc4,0x11,0x1a,0x84,0x62,
	0x80,0x3f,0x51,0x87,0xa1,0xa3,0x80,0x3f,
	0x83,0xe2,0x00,0x63,0xd0,0x2c,0x11,0x64,
	0xf8,0x29,0x01,0x20,0x50,0x00,0xa0,0x23,
	0x00,0x21,0x70,0x2c,0xd2,0x00,0x10,0x20,
	0xe8,0x36,0xd2,0x01,0x10,0x21,0xe8,0x36,
	0xd2,0x03,0x10,0x22,0xe8,0x36,0x00,0x0c,
	0x12,0x0a,0x12,0x0c,0x10,0x22,0xf8,0x47,
	0xd0,0x40,0xc0,0x88,0xc0,0xc4,0x10,0xcd,
	0xb0,0x7f,0xb0,0xbe,0x71,0x01,0x11,0x20,
	0xb0,0x7c,0x61,0x02,0xb0,0xbc,0xb0,0xc1,
	0xec,0x40,0x00,0x28,0x70,0x1c,0x10,0x20,
	0xe8,0x98,0x10,0x21,0xe8,0x5c,0x10,0x22,
	0xe8,0x61,0x10,0x23,0xe8,0x66,0x10,0x24,
	0xe8,0x6b,0x10,0x25,0xe8,0x70,0x10,0x26,
	0xe8,0x75,0x10,0x27,0xe8,0x7a,0x10,0x28,
	0xe8,0x7f,0xe0,0x98,0x00,0x22,0xd0,0xfc,
	0x00,0x37,0xda,0x80,0xe0,0x84,0x00,0x22,
	0xd0,0xfc,0x00,0x37,0xdb,0x3c,0xe0,0x84,
	0x00,0x22,0xd0,0xfc,0x00,0x37,0xdb,0xf8,
	0xe0,0x84,0x00,0x23,0xd0,0xdc,0x00,0x37,
	0xdc,0xb4,0xe0,0x84,0x00,0x23,0xd0,0xdc,
	0x00,0x37,0xdd,0x90,0xe0,0x84,0x00,0x23,
	0xd0,0xdc,0x00,0x37,0xde,0x6c,0xe0,0x84,
	0x00,0x23,0xd0,0xe8,0x00,0x37,0xdf,0x48,
	0xe0,0x84,0x00,0x24,0xd0,0xc8,0x00,0x38,
	0xd0,0x30,0xe0,0x84,0x00,0x60,0xd0,0x80,
	0xa0,0xb6,0x80,0x3f,0x50,0x08,0xb0,0x3f,
	0x70,0x40,0xb0,0x3c,0x10,0x60,0x90,0xbd,
	0x10,0xa0,0xa0,0xb4,0xa0,0x74,0x80,0x3f,
	0xb0,0xc4,0xec,0x8a,0x00,0x60,0xd7,0xc0,
	0x17,0xe0,0x07,0xc4,0x00,0x60,0xd0,0x00,
	0xa0,0x36,0x80,0x3f,0x00,0x2a,0xd0,0xc4,
	0x00,0x38,0xd1,0x38,0x50,0x08,0xb0,0x3f,
	0x00,0x06,0x80,0x3f,0x70,0x40,0xb0,0x3c,
	0x10,0x60,0x90,0xbd,0x10,0xa0,0xa0,0xb4,
	0xa0,0x74,0x80,0x3f,0xb0,0xc4,0xec,0xa4,
	0x00,0x60,0xd7,0xc0,0x17,0xe0,0x07,0xc4,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x90,0x00,0x00,
	0x00,0x00,0x00,0x39,0x00,0x00,0xc0,0x00,
	0x00,0x00,0x00,0x3b,0x00,0x00,0x00,0x0a,
	0x00,0x00,0x00,0x3a,0x00,0x00,0x00,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x78,
	0x00,0x28,0x00,0x00,0x00,0x0a,0x00,0x00,
	0x00,0x3f,0xff,0xc0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x2c,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0a,
	0x00,0x00,0x00,0x0a,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x2c,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x01,0x4b,0xa0,0x00,0x80,0x04,0x63,
	0x00,0x01,0x43,0xec,0x00,0x08,0x05,0xaa,
	0x00,0x01,0x45,0x54,0x00,0x08,0x05,0x3a,
	0x00,0x01,0x46,0xa0,0x00,0x08,0x05,0x1a,
	0x00,0x01,0x47,0xe4,0x00,0x08,0x03,0x3a,
	0x00,0x01,0x49,0x9c,0x00,0x08,0x05,0x3a,
	0x00,0x01,0x48,0xb0,0x00,0x08,0x03,0xba,
	0x00,0x01,0x4a,0xe8,0x00,0x08,0x02,0xea,
	0x00,0x01,0x59,0xd0,0x00,0x20,0x81,0x3a,
	0x00,0x01,0x59,0x98,0x00,0x20,0x80,0xea,
	0x00,0x01,0x5a,0x1c,0x00,0x20,0x80,0xca,
	0x00,0x01,0x5a,0x4c,0x00,0x20,0x80,0x7a,
	0x00,0x01,0x5a,0x68,0x00,0x20,0x80,0xca,
	0x00,0x01,0x5a,0x98,0x00,0x20,0x80,0x1a,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x2c,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x0d,0x03,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x0a,0x00,0x18,0x16,0x00,
	0x00,0x16,0x81,0x00,0x00,0x06,0xaf,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x10,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
	0x00,0x00,0x06,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x13,
	0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x15,
	0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x17,
	0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x10,
	0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x17,
	0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x19,
	0x00,0x00,0x00,0x1a,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xb3,0x40,
	0x00,0xe6,0xc1,0xf6,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x23,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x0b,0x38,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x5a,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x39,
	0x00,0x00,0x00,0x34,0x00,0x00,0x00,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x05,0x7e,0x40,0x00,0x00,0x0b,0xb8,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x05,0xdc,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x7d,0xf8,0x73,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x12,
	0x00,0x00,0x1d,0x1b,0x00,0x00,0x1f,0x1c,
	0x00,0x00,0x24,0x19,0x00,0x00,0x27,0x23,
	0x00,0x00,0x2f,0x2a,0x00,0x00,0x31,0x28,
	0x00,0x00,0x34,0x31,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,
	0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x9b,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x90,0x00,0x00,0x01,0x90,
	0x00,0x00,0x00,0x50,0x00,0x00,0x01,0x0c,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xd0,
	0x00,0x00,0x01,0xe0,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x04,0x00,0x00,0x3a,0x98,
	0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,
	0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,
	0x00,0x00,0x16,0x13,0x00,0x00,0x1b,0x1a,
	0x00,0x00,0x22,0x1d,0x00,0x00,0x10,0x10,
	0x00,0x00,0x18,0x16,0x00,0x00,0x1d,0x1b,
	0x00,0x00,0x25,0x22,0x00,0x00,0x16,0x13,
	0x00,0x00,0x1b,0x1a,0x00,0x00,0x22,0x1d,
	0x00,0x00,0x26,0x22,0x00,0x00,0x16,0x16,
	0x00,0x00,0x1b,0x1a,0x00,0x00,0x22,0x1d,
	0x00,0x00,0x28,0x25,0x00,0x00,0x1a,0x16,
	0x00,0x00,0x1d,0x1b,0x00,0x00,0x23,0x20,
	0x00,0x00,0x30,0x28,0x00,0x00,0x1b,0x1a,
	0x00,0x00,0x20,0x1d,0x00,0x00,0x28,0x23,
	0x00,0x00,0x3a,0x30,0x00,0x00,0x1b,0x1a,
	0x00,0x00,0x22,0x1d,0x00,0x00,0x2e,0x26,
	0x00,0x00,0x45,0x38,0x00,0x00,0x1d,0x1b,
	0x00,0x00,0x26,0x23,0x00,0x00,0x38,0x2e,
	0x00,0x00,0x53,0x45,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x08,
	0x00,0x00,0x16,0x13,0x00,0x00,0x1b,0x1a,
	0x00,0x00,0x22,0x1d,0x00,0x00,0x10,0x10,
	0x00,0x00,0x18,0x16,0x00,0x00,0x1d,0x1b,
	0x00,0x00,0x25,0x22,0x00,0x00,0x16,0x13,
	0x00,0x00,0x1b,0x1a,0x00,0x00,0x22,0x1d,
	0x00,0x00,0x26,0x22,0x00,0x00,0x16,0x16,
	0x00,0x00,0x1b,0x1a,0x00,0x00,0x22,0x1d,
	0x00,0x00,0x28,0x25,0x00,0x00,0x1a,0x16,
	0x00,0x00,0x1d,0x1b,0x00,0x00,0x23,0x20,
	0x00,0x00,0x30,0x28,0x00,0x00,0x1b,0x1a,
	0x00,0x00,0x20,0x1d,0x00,0x00,0x28,0x23,
	0x00,0x00,0x3a,0x30,0x00,0x00,0x1b,0x1a,
	0x00,0x00,0x22,0x1d,0x00,0x00,0x2e,0x26,
	0x00,0x00,0x45,0x38,0x00,0x00,0x1d,0x1b,
	0x00,0x00,0x26,0x23,0x00,0x00,0x38,0x2e,
	0x00,0x00,0x53,0x45,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
	0x00,0x00,0x02,0xd0,0x00,0x00,0x01,0xe0,
	0x00,0x00,0x02,0xd0,0x00,0x00,0x02,0xd0,
	0x00,0x00,0x01,0xe0,0x00,0x00,0x01,0xe0,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xee,0xee,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x02,0x20,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x60,0x78,0x00,0x00,0x21,0x0e,
	0x00,0x00,0x00,0x00,0x00,0x01,0xf3,0xb3,
	0x00,0x02,0xc0,0x90,0x00,0x10,0x00,0x00,
	0x00,0x29,0x00,0x40,0x00,0x00,0xff,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x10,0x00,0x00,0x00,0x29,0x00,0x44,
	0x00,0x00,0x00,0x00,0x00,0xd0,0x00,0x00,
	0x00,0x29,0x02,0x33,0x00,0x00,0x3f,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x3f,0xff,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x05,0xe1,0x40,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,
	0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x79,
	0x00,0x00,0x82,0xcc,0x00,0x01,0x02,0xcc,
	0x00,0x00,0x2c,0xc8,0x00,0x00,0x2c,0xc8,
	0x00,0x00,0x80,0x00,0x00,0x04,0x00,0x08,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x5d,0xb8,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x26,0x00,0x00,0x02,0x33,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x5d,0xb0,0x00,0x00,0x00,0x01,
	0x00,0x00,0x01,0xe0,0x00,0x00,0x02,0xd0,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x5d,0xe8,
	0x00,0x00,0x5d,0xe8,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x41,0x41,0xb3,0xa8,
	0xbf,0xbf,0x6c,0x8c,0x29,0x29,0x6e,0xf0,
	0x8f,0x90,0x23,0x36,0xa8,0xa9,0x10,0xa6,
	0x51,0x51,0xf0,0x5a,0x10,0x10,0x80,0x80,
	0xc5,0xc5,0x80,0x80,0x53,0x53,0xb6,0x6e,
	0x4b,0x4b,0x72,0x85,0xea,0xea,0x80,0x80,
	0x82,0x82,0x41,0x92,0xe2,0xe2,0x72,0x85,
	0x73,0x74,0xd6,0x46,0x6a,0x6a,0xdd,0xca,
	0xd0,0xd1,0x92,0x10,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x04,0xf0,0x04,0xf0,0x04,0x60,0x04,0x10,
	0x03,0xe0,0x03,0xd0,0x03,0xc0,0x03,0xb0,
	0x03,0xb0,0x03,0xa0,0x03,0xa0,0x03,0xa0,
	0x03,0xa0,0x03,0xa0,0x03,0x90,0x03,0x90,
	0x03,0x90,0x03,0x80,0x03,0x80,0x03,0x80,
	0x03,0x70,0x03,0x70,0x03,0x60,0x03,0x60,
	0x03,0x50,0x03,0x50,0x03,0x40,0x03,0x40,
	0x03,0x20,0x03,0x10,0x03,0x00,0x02,0xf0,
	0x02,0xf0,0x02,0xf0,0x02,0xf0,0x03,0x00,
	0x03,0x20,0x03,0x50,0x03,0x90,0x03,0xe0,
	0x04,0x20,0x04,0x50,0x04,0xa0,0x04,0x90,
	0x04,0x60,0x04,0x40,0x04,0x80,0x06,0x30,
	0x08,0x40,0x08,0x40,0x05,0x80,0x05,0x80,
	0x04,0xb0,0x04,0x50,0x04,0x20,0x03,0xf0,
	0x03,0xe0,0x03,0xd0,0x03,0xc0,0x03,0xb0,
	0x03,0xb0,0x03,0xb0,0x03,0xa0,0x03,0xa0,
	0x03,0xa0,0x03,0xa0,0x03,0xa0,0x03,0xa0,
	0x03,0xa0,0x03,0xa0,0x03,0x90,0x03,0x90,
	0x03,0x90,0x03,0x90,0x03,0x80,0x03,0x80,
	0x03,0x80,0x03,0x70,0x03,0x60,0x03,0x50,
	0x03,0x40,0x03,0x30,0x03,0x20,0x03,0x10,
	0x03,0x00,0x02,0xf0,0x02,0xf0,0x02,0xf0,
	0x03,0x00,0x03,0x10,0x03,0x30,0x03,0x50,
	0x03,0xc0,0x04,0x10,0x04,0x70,0x04,0xa0,
	0x04,0x60,0x04,0x40,0x04,0x50,0x04,0xe0,
	0x00,0x00,0x10,0x83,0x00,0x10,0x51,0x87,
	0x00,0x20,0x92,0x8b,0x00,0x30,0xd3,0x8f,
	0x00,0x41,0x14,0x93,0x00,0x51,0x55,0x97,
	0x00,0x61,0x96,0x9b,0x00,0x71,0xc7,0x1d,
	0x00,0x75,0xd7,0x9e,0x00,0x79,0xf7,0xdf,
	0x00,0x82,0x08,0x21,0x00,0x86,0x18,0xa2,
	0x00,0x8a,0x38,0xe3,0x00,0x8e,0x38,0xe4,
	0x00,0x92,0x49,0x24,0x00,0x92,0x59,0x65,
	0x00,0x96,0x59,0x66,0x00,0x9a,0x69,0xa6,
	0x00,0x9a,0x79,0xe7,0x00,0x9e,0x79,0xe8,
	0x00,0xa2,0x8a,0x28,0x00,0xa2,0x9a,0x69,
	0x00,0xa6,0x9a,0x69,0x00,0xa6,0x9a,0x69,
	0x00,0xa6,0xaa,0xaa,0x00,0xaa,0xaa,0xaa,
	0x00,0xaa,0xaa,0xaa,0x00,0xaa,0xba,0xeb,
	0x00,0xae,0xba,0xeb,0x00,0xae,0xba,0xeb,
	0x00,0xae,0xcb,0x2c,0x00,0xb2,0xcb,0x2c,
	0x00,0xb2,0xcb,0x2c,0x00,0xb2,0xdb,0x6d,
	0x00,0xb6,0xdb,0x6d,0x00,0xb6,0xdb,0x6d,
	0x00,0xb6,0xdb,0x6d,0x00,0xb6,0xdb,0x6d,
	0x00,0xb6,0xdb,0x6d,0x00,0xb6,0xeb,0xae,
	0x00,0xba,0xeb,0xae,0x00,0xba,0xeb,0xae,
	0x00,0xba,0xeb,0xae,0x00,0xba,0xeb,0xae,
	0x00,0xba,0xeb,0xae,0x00,0xba,0xfb,0xef,
	0x00,0xbe,0xfb,0xef,0x00,0xbe,0xfb,0xef,
	0x00,0xbe,0xfb,0xef,0x00,0xbe,0xfb,0xef,
	0x00,0xbe,0xfb,0xef,0x00,0xbf,0x0c,0x30,
	0x00,0xc3,0x0c,0x30,0x00,0xc3,0x0c,0x30,
	0x00,0xc3,0x0c,0x30,0x00,0xc3,0x0c,0x30,
	0x00,0xc3,0x0c,0x30,0x00,0xc3,0x1c,0x71,
	0x00,0xc7,0x1c,0x71,0x00,0xc7,0x1c,0x71,
	0x00,0xc7,0x1c,0x71,0x00,0xc7,0x1c,0x71,
	0x00,0xc7,0x1c,0x71,0x00,0xc4,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0xc2,0xf3,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x70,0x00,0x80,0x00,0xa0,0x00,
	0xce,0x10,0x70,0x00,0x80,0x00,0xa9,0x80,
	0xba,0x00,0xce,0x10,0x70,0x00,0x00,0x00,
	0x80,0x00,0xa0,0x00,0xc0,0x00,0xdc,0xe1,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x80,
	0xba,0x00,0xc0,0x00,0xdc,0xe1,0x70,0x00,
	0x80,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0x60,0x00,0x70,0x00,0xa0,0x00,0xb6,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0x98,0x00,
	0x96,0x00,0x70,0x00,0x80,0x00,0x98,0x00,
	0x96,0x00,0x70,0x00,0x80,0x00,0x98,0x00,
	0x98,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0x98,0x00,0x98,0x00,0x96,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0x98,0x00,
	0x98,0x00,0x98,0x00,0x96,0x00,0x70,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0xc2,0xf3,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x70,0x00,0x80,0x00,0xa0,0x00,
	0xc9,0x10,0x70,0x00,0x80,0x00,0xc0,0x00,
	0xa0,0x00,0xdc,0x91,0x70,0x00,0x00,0x00,
	0x80,0x00,0xa0,0x00,0x92,0x00,0xb3,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x80,
	0xba,0x00,0x92,0x00,0xb3,0x00,0x70,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x60,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x80,0x00,0xa0,0x00,
	0xc9,0x10,0x70,0x00,0x80,0x00,0x60,0x00,
	0xa0,0x00,0xc9,0x10,0x70,0x00,0x00,0x00,
	0x80,0x00,0xa0,0x00,0x92,0x00,0xb3,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xc0,0x00,
	0xa0,0x00,0x92,0xf6,0xb3,0x00,0x70,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0xc2,0xf3,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x40,0x00,0x70,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x40,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x80,0x00,0x94,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x80,0x00,0x94,0x00,0x70,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x60,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x40,0x00,0x70,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x40,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x80,0x00,0x94,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x80,0x00,0x94,0x00,0x70,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0xc2,0xf3,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0xc4,0xf5,0x70,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0xc4,0xf5,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x40,0x00,0x50,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x40,0x00,0x50,0x00,0x70,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x60,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0xc4,0xf5,0x70,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0xc4,0xf5,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x40,0x00,0x50,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x40,0x00,0x50,0x00,0x70,0x00,
	0x80,0x00,0x92,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x70,0x00,0xa0,0x00,0xb2,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0x98,0x00,
	0x92,0x00,0x70,0x00,0x80,0x00,0x98,0x00,
	0x92,0x00,0x70,0x00,0x80,0x00,0x98,0x00,
	0x98,0x00,0x92,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0x98,0x00,0x98,0x00,0x92,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0x98,0x00,
	0x98,0x00,0x98,0x00,0x92,0x00,0x70,0x00,
	0xc2,0x00,0xf3,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0xc2,0xf3,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0xc0,0x00,0xad,0x10,0x70,0x00,0x00,0x00,
	0x60,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x60,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0xc2,0x00,0xf3,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0xc2,0xf3,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0xc0,0x00,0xad,0x10,0x70,0x00,0x00,0x00,
	0x60,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x60,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0xc2,0x00,0xf3,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0xc2,0xf3,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0xc0,0x00,0xad,0x10,0x70,0x00,0x00,0x00,
	0x60,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x60,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0xc2,0x00,0xf3,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0xc2,0xf3,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0xc0,0x00,0xad,0x10,0x70,0x00,0x00,0x00,
	0x60,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x60,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0xa9,0x20,0xb3,0x00,0x70,0x00,
	0x80,0x00,0xa9,0x20,0xb3,0x00,0x70,0x00,
	0x80,0x00,0xa9,0x20,0xb3,0x00,0x70,0x00,
	0x80,0x00,0xa9,0x20,0xb3,0x00,0x70,0x00,
	0x80,0x00,0xa9,0x20,0xb3,0x00,0x70,0x00,
	0x80,0x00,0xa0,0x00,0xc9,0x10,0x70,0x00,
	0x20,0x00,0x30,0x00,0x00,0x00,0x70,0x00,
	0x80,0x00,0xa0,0x00,0xc9,0x10,0x70,0x00,
	0x20,0x00,0x30,0x00,0x00,0x00,0x70,0x00,
	0x80,0x00,0xa0,0x00,0xc9,0x10,0x70,0x00,
	0x80,0x00,0xc0,0x00,0xa0,0x00,0xdc,0x91,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0xc0,0x00,0xa0,0x00,0xdc,0x91,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0xc0,0x00,0xa0,0x00,0xdc,0x91,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa0,0x00,
	0xc9,0x10,0x00,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0xa0,0x00,0x00,0x00,0xc9,0x10,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa0,0x00,
	0x92,0x00,0xb3,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x00,0x00,0x00,0x00,
	0x70,0x00,0x00,0x00,0x80,0x00,0xa0,0x00,
	0xc0,0x00,0xdc,0x91,0x70,0x00,0x00,0x00,
	0x80,0x00,0xa0,0x00,0xc0,0x00,0xba,0x91,
	0x00,0x00,0x70,0x00,0x80,0x00,0xa0,0x00,
	0xc0,0x00,0x00,0x00,0xba,0x91,0x70,0x00,
	0x80,0x00,0xa9,0x80,0xba,0x00,0x92,0x00,
	0xb3,0x00,0x70,0x00,0x80,0x00,0xa9,0x20,
	0xb3,0x00,0x00,0x00,0x00,0x00,0x70,0x00,
	0x80,0x00,0xc0,0x00,0xa0,0x00,0xdc,0x00,
	0xdc,0x91,0x70,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x30,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x20,0x00,0x60,0x00,
	0x30,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x60,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x00,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x60,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x00,0x00,0x70,0x00,0x20,0x00,0x30,0x00,
	0x60,0x00,0x70,0x00,0x20,0x00,0x80,0x00,
	0x30,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x60,0x00,0x30,0x00,0x00,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x80,0x00,
	0x30,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x60,0x00,0x30,0x00,0x00,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x80,0x00,
	0x30,0x00,0x96,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x60,0x00,0x00,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x30,0x00,
	0x00,0x00,0x60,0x00,0x70,0x00,0x00,0x00,
	0x80,0x00,0xa0,0x00,0x92,0x00,0xb3,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x30,0x00,
	0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,
	0x20,0x00,0x30,0x00,0x80,0x00,0x96,0x00,
	0x70,0x00,0x00,0x00,0x20,0x00,0x80,0x00,
	0x30,0x00,0x96,0x00,0x00,0x00,0x70,0x00,
	0x20,0x00,0x80,0x00,0x30,0x00,0x00,0x00,
	0x96,0x00,0x70,0x00,0x80,0x00,0x60,0x00,
	0xa0,0x00,0x92,0x00,0xb3,0x00,0x70,0x00,
	0x20,0x00,0x60,0x00,0x30,0x00,0x00,0x00,
	0x00,0x00,0x70,0x00,0x20,0x00,0x80,0x00,
	0x30,0x00,0x98,0x00,0x96,0x00,0x70,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
	0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x08,
	0x00,0x00,0x02,0x40,0x00,0x00,0x12,0x08,
	0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x61,
	0x00,0x00,0x01,0x89,0x00,0x00,0x0c,0x61,
	0x00,0x00,0x0d,0x89,0x00,0x00,0x6c,0x61,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,
	0x00,0x00,0x01,0x80,0x00,0x00,0x0c,0x18,
	0x00,0x00,0x0b,0x40,0x00,0x00,0x5a,0x18,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x80,0x00,0x00,0x0c,0x00,
	0x00,0x00,0x0b,0x40,0x00,0x00,0x5a,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,
	0x00,0x00,0x02,0x40,0x00,0x00,0x12,0x18,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x02,0x40,0x00,0x00,0x12,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x18,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,
	0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,
	0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x18,
	0x00,0x00,0x02,0x18,0x00,0x00,0x02,0x18,
	0x00,0x00,0x02,0x18,0x00,0x00,0x02,0x18,
	0x00,0x00,0x02,0x40,0x00,0x00,0x02,0x40,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x02,0x40,0x00,0x00,0x12,0x18,
	0x00,0x00,0x12,0x18,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x18,0x00,0x00,0x24,0x61,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x08,
	0x00,0x00,0x41,0x60,0x00,0x02,0xc7,0x68,
	0x00,0x02,0xdb,0x72,0x00,0x02,0xf3,0x20,
	0x00,0x02,0x47,0x28,0x00,0x02,0x5b,0x32,
	0x00,0x02,0x72,0xe0,0x00,0x01,0xc6,0xe8,
	0x00,0x01,0xda,0xf2,0x00,0x01,0xf2,0xa0,
	0x00,0x01,0x46,0xa8,0x00,0x01,0x5a,0xb2,
	0x00,0x01,0x72,0x60,0x00,0x00,0xc6,0x68,
	0x00,0x00,0xda,0x72,0x00,0x00,0xf2,0x20,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0xf4,
	0x00,0x00,0x00,0xe9,0x00,0x00,0x00,0xde,
	0x00,0x00,0x00,0xd4,0x00,0x00,0x00,0xca,
	0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0xb6,
	0x00,0x00,0x00,0xad,0x00,0x00,0x00,0xa4,
	0x00,0x00,0x00,0x9b,0x00,0x00,0x00,0x92,
	0x00,0x00,0x00,0x8a,0x00,0x00,0x00,0x82,
	0x00,0x00,0x00,0x79,0x00,0x00,0x00,0x72,
	0x00,0x00,0x00,0x6a,0x00,0x00,0x00,0x62,
	0x00,0x00,0x00,0x5b,0x00,0x00,0x00,0x53,
	0x00,0x00,0x00,0x4c,0x00,0x00,0x00,0x45,
	0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x37,
	0x00,0x00,0x00,0x31,0x00,0x00,0x00,0x2a,
	0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x1e,
	0x00,0x00,0x00,0x17,0x00,0x00,0x00,0x11,
	0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x3e,
	0x00,0x00,0x00,0x3d,0x00,0x00,0x00,0x3b,
	0x00,0x00,0x00,0x3a,0x00,0x00,0x00,0x39,
	0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x36,
	0x00,0x00,0x00,0x35,0x00,0x00,0x00,0x34,
	0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x32,
	0x00,0x00,0x00,0x31,0x00,0x00,0x00,0x30,
	0x00,0x00,0x00,0x2f,0x00,0x00,0x00,0x2e,
	0x00,0x00,0x00,0x2d,0x00,0x00,0x00,0x2c,
	0x00,0x00,0x00,0x2b,0x00,0x00,0x00,0x2a,
	0x00,0x00,0x00,0x29,0x00,0x00,0x00,0x28,
	0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x26,
	0x00,0x00,0x00,0x26,0x00,0x00,0x00,0x25,
	0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x23,
	0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x22,
	0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x20,
	0x00,0x80,0x00,0x8a,0x00,0x80,0x00,0x8c,
	0x00,0xa0,0x00,0xae,0x00,0xa0,0x00,0xb0,
	0x00,0xc0,0x00,0xd0,0x00,0xc0,0x00,0xd2,
	0x00,0xe0,0x00,0xf2,0x00,0xe0,0x00,0xf4,
	0x01,0x00,0x01,0x16,0x01,0x00,0x01,0x18,
	0x01,0x40,0x01,0x5c,0x01,0x40,0x01,0x5e,
	0x01,0x80,0x01,0xa0,0x01,0x80,0x01,0xa2,
	0x01,0xc0,0x01,0xe6,0x01,0xc0,0x01,0xe8,
	0x02,0x00,0x02,0x2c,0x02,0x00,0x02,0x2e,
	0x02,0x80,0x02,0xb8,0x02,0x80,0x02,0xba,
	0x03,0x00,0x03,0x42,0x03,0x00,0x03,0x44,
	0x03,0x80,0x03,0xce,0x03,0x80,0x03,0xd0,
	0x04,0x00,0x04,0x5a,0x04,0x00,0x04,0x5c,
	0x05,0x00,0x05,0x70,0x05,0x00,0x05,0x72,
	0x06,0x00,0x06,0x86,0x06,0x00,0x06,0x88,
	0x07,0x00,0x07,0x9e,0x07,0x00,0x07,0xa0,
	0x08,0x00,0x08,0xb4,0x08,0x00,0x08,0xb6,
	0x09,0x00,0x09,0xca,0x09,0x00,0x09,0xcc,
	0x0a,0x00,0x0a,0xe2,0x0a,0x00,0x0a,0xe4,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0xff,0xff,0x00,0x01,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x99,0x59,0x74,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x28,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x9c,
	0x00,0x00,0x85,0x8c,0x00,0x00,0x6b,0xa4,
	0x00,0x00,0x4d,0xac,0x00,0x00,0x81,0x9c,
	0x00,0x00,0x85,0x8c,0x00,0x00,0x6b,0xa4,
	0x00,0x00,0x4f,0x2c,0x00,0x00,0x81,0x14,
	0x00,0x00,0x64,0x28,0x00,0x00,0x81,0x14,
	0x00,0x00,0x66,0x28,0x00,0x00,0x00,0x35,
	0x00,0x00,0x37,0x03,0x00,0x00,0x3a,0x04,
	0x00,0x00,0x05,0x06,0x00,0x00,0x07,0x08,
	0x00,0x00,0x09,0x0a,0x00,0x00,0x0b,0x0c,
	0x00,0x00,0x0d,0x10,0x00,0x00,0x00,0x35,
	0x00,0x00,0x37,0x3a,0x00,0x00,0x04,0x05,
	0x00,0x00,0x06,0x07,0x00,0x00,0x08,0x09,
	0x00,0x00,0x0a,0x0b,0x00,0x00,0x0c,0x0d,
	0x00,0x00,0x0e,0x0f,0x00,0x00,0x00,0x35,
	0x00,0x00,0x03,0x04,0x00,0x00,0x05,0x06,
	0x00,0x00,0x07,0x08,0x00,0x00,0x09,0x0a,
	0x00,0x00,0x0b,0x0c,0x00,0x00,0x0d,0x0e,
	0x00,0x00,0x0f,0x10,0x00,0x00,0x00,0x35,
	0x00,0x00,0x37,0x03,0x00,0x00,0x3a,0x04,
	0x00,0x00,0x05,0x10,0x00,0x00,0x00,0x35,
	0x00,0x00,0x37,0x3a,0x00,0x00,0x04,0x05,
	0x00,0x00,0x06,0x07,0x00,0x00,0x00,0x35,
	0x00,0x00,0x37,0x10,0x00,0x00,0x03,0x00,
	0x00,0x00,0x04,0x80,0x00,0x00,0x05,0x40,
	0x00,0x00,0x06,0x00,0x00,0x00,0x07,0x80,
	0x00,0x00,0x09,0x00,0x00,0x00,0x0a,0x80,
	0x00,0x00,0x0c,0x00,0x00,0x00,0x0f,0x00,
	0x00,0x00,0x12,0x00,0x00,0x00,0x15,0x00,
	0x00,0x00,0x18,0x00,0x00,0x00,0x1e,0x00,
	0x00,0x00,0x24,0x00,0x00,0x00,0x03,0x40,
	0x00,0x00,0x04,0xe0,0x00,0x00,0x05,0xb0,
	0x00,0x00,0x06,0x80,0x00,0x00,0x08,0x28,
	0x00,0x00,0x09,0xc8,0x00,0x00,0x0b,0x68,
	0x00,0x00,0x0d,0x08,0x00,0x00,0x10,0x50,
	0x00,0x00,0x13,0x90,0x00,0x00,0x16,0xd8,
	0x00,0x00,0x1a,0x18,0x00,0x00,0x20,0xa0,
	0x00,0x00,0x27,0x28,0x00,0x00,0x04,0x80,
	0x00,0x00,0x06,0xc0,0x00,0x00,0x07,0xe0,
	0x00,0x00,0x09,0x00,0x00,0x00,0x0b,0x40,
	0x00,0x00,0x0d,0x80,0x00,0x00,0x0f,0xc0,
	0x00,0x00,0x12,0x00,0x00,0x00,0x16,0x80,
	0x00,0x00,0x1b,0x00,0x00,0x00,0x1f,0x80,
	0x00,0x00,0x24,0x00,0x00,0x00,0x2d,0x00,
	0x00,0x00,0x36,0x00,0x00,0x00,0x01,0x00,
	0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,
	0x00,0x00,0x04,0x00,0x00,0x00,0x05,0x00,
	0x00,0x00,0x06,0x00,0x00,0x00,0x07,0x00,
	0x00,0x00,0x08,0x00,0x00,0x00,0x09,0x00,
	0x00,0x00,0x0a,0x00,0x00,0x00,0x0b,0x00,
	0x00,0x00,0x0c,0x00,0x00,0x00,0x0d,0x00,
	0x00,0x00,0x0e,0x00,0x00,0x00,0x01,0x10,
	0x00,0x00,0x02,0x28,0x00,0x00,0x03,0x40,
	0x00,0x00,0x04,0x58,0x00,0x00,0x05,0x70,
	0x00,0x00,0x06,0x80,0x00,0x00,0x07,0x98,
	0x00,0x00,0x08,0xb0,0x00,0x00,0x09,0xc8,
	0x00,0x00,0x0a,0xe0,0x00,0x00,0x0b,0xf8,
	0x00,0x00,0x0d,0x08,0x00,0x00,0x0e,0x20,
	0x00,0x00,0x0f,0x38,0x00,0x00,0x01,0x80,
	0x00,0x00,0x03,0x00,0x00,0x00,0x04,0x80,
	0x00,0x00,0x06,0x00,0x00,0x00,0x07,0x80,
	0x00,0x00,0x09,0x00,0x00,0x00,0x0a,0x80,
	0x00,0x00,0x0c,0x00,0x00,0x00,0x0d,0x80,
	0x00,0x00,0x0f,0x00,0x00,0x00,0x10,0x80,
	0x00,0x00,0x12,0x00,0x00,0x00,0x13,0x80,
	0x00,0x00,0x15,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0xd8,0x00,0x00,0x00,0x0a,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0xab,
	0x00,0x00,0x0e,0xa6,0x00,0x00,0x0e,0x10,
	0x00,0x00,0x0b,0xbb,0x00,0x00,0x0b,0xb8,
	0x00,0x00,0x07,0x08,0x00,0x00,0x05,0xdd,
	0x00,0x00,0x05,0xdc,0x10,0x10,0x80,0x80,
	0xea,0xea,0x80,0x80,0x29,0x29,0x6e,0xf0,
	0x8f,0x90,0x23,0x36,0xa8,0xa9,0x10,0xa6,
	0x51,0x51,0xf0,0x5a,0x41,0x41,0xb3,0xa8,
	0xc5,0xc5,0x80,0x80,0x53,0x53,0xb6,0x6e,
	0x4b,0x4b,0x72,0x85,0xbf,0xbf,0x6c,0x8c,
	0x82,0x82,0x41,0x92,0xe2,0xe2,0x72,0x85,
	0x73,0x74,0xd6,0x46,0x6a,0x6a,0xdd,0xca,
	0xd0,0xd1,0x92,0x10,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x02,0xd0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x2c,0xf1,0xe4,
	0x00,0x2c,0xf1,0xe4,0x00,0x2c,0xf1,0xe4,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x80,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x82,0xcc,0x00,0x04,0x00,0x08,
	0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x82,0xcc,
	0x00,0x04,0x00,0x08,0x00,0x00,0x80,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x82,0xcc,0x00,0x04,0x00,0x08,
	0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x82,0xcc,
	0x00,0x04,0x00,0x08,0x00,0x00,0x80,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x82,0xcc,0x00,0x04,0x00,0x08,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0d,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x07,
	0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x0a,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x08,
	0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x06,
	0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0d,
	0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x0d,
	0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x0a,
	0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x08,
	0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0d,
	0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x06,
	0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x05,
	0x00,0x00,0x00,0x10,0x00,0x00,0x38,0x1c,
	0x00,0x00,0xa0,0x34,0x00,0x01,0x68,0x28,
	0x00,0x02,0x00,0x28,0x00,0x02,0x98,0x40,
	0x00,0x03,0x90,0x40,0x00,0x04,0x88,0x64,
	0x00,0x06,0x10,0x7c,0x00,0x00,0x00,0x40,
	0x00,0x00,0xf8,0x88,0x00,0x03,0x10,0x70,
	0x00,0x04,0xc8,0xb8,0x00,0x00,0x00,0xc4,
	0x00,0x03,0x08,0x4c,0x00,0x04,0x30,0x70,
	0x00,0x05,0xe8,0x10,0x00,0x06,0x20,0x64,
	0x00,0x00,0x00,0xc4,0x00,0x00,0x00,0x34,
	0x00,0x00,0x38,0x64,0x00,0x00,0xa0,0xc4,
	0x00,0x01,0x68,0x88,0x00,0x01,0xf4,0x28,
	0x00,0x02,0x20,0x4c,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x30,
	0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x1e,
	0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x18,
	0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x30,
	0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1e,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x3a,
	0x00,0x00,0x00,0x1d,0x00,0x00,0x00,0x25,
	0x00,0x00,0x00,0x3a,0x00,0x00,0x00,0x1d,
	0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x3a,
	0x00,0x00,0x00,0x1d,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,
	0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x10,0x00,0x00,0x10,0x10,
	0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,
	0x00,0x00,0x20,0x14,0x00,0x00,0x34,0x14,
	0x00,0x00,0x10,0x38,0x00,0x00,0x10,0x38,
	0x00,0x00,0x48,0x00,0x00,0x00,0x48,0x00,
	0x00,0x00,0x48,0x20,0x00,0x00,0x68,0x20,
	0x00,0x00,0x48,0x00,0x00,0x00,0x48,0x00,
	0x00,0x00,0x88,0x28,0x00,0x00,0xb0,0x28,
	0x00,0x00,0x48,0x14,0x00,0x00,0x5c,0x14,
	0x00,0x00,0xd8,0x14,0x00,0x00,0xec,0x14,
	0x00,0x00,0x70,0x00,0x00,0x00,0x70,0x00,
	0x00,0x01,0x00,0x20,0x00,0x01,0x20,0x20,
	0x00,0x00,0x70,0x00,0x00,0x00,0x70,0x00,
	0x00,0x01,0x40,0x28,0x00,0x01,0x68,0x28,
	0x00,0x00,0x70,0x18,0x00,0x00,0x88,0x18,
	0x00,0x01,0x90,0x18,0x00,0x01,0xa8,0x18,
	0x00,0x00,0xa0,0x38,0x00,0x00,0xd8,0x38,
	0x00,0x01,0xc0,0x38,0x00,0x01,0xf8,0x38,
	0x00,0x01,0x10,0x4c,0x00,0x01,0x5c,0x4c,
	0x00,0x02,0x30,0x4c,0x00,0x02,0x7c,0x4c,
	0x00,0x01,0xa8,0x10,0x00,0x01,0xb8,0x10,
	0x00,0x02,0xc8,0x48,0x00,0x02,0xc8,0x48,
	0x00,0x01,0xc8,0x38,0x00,0x02,0x00,0x38,
	0x00,0x03,0x10,0x38,0x00,0x03,0x48,0x38,
	0x00,0x02,0x38,0x38,0x00,0x02,0x70,0x38,
	0x00,0x03,0x80,0x38,0x00,0x03,0xb8,0x38,
	0x00,0x02,0xa8,0x14,0x00,0x02,0xbc,0x10,
	0x00,0x03,0xf0,0x10,0x00,0x04,0x00,0x10,
	0x00,0x02,0xcc,0x1c,0x00,0x02,0xe8,0x1c,
	0x00,0x04,0x10,0x1c,0x00,0x04,0x2c,0x1c,
	0x00,0x03,0x04,0x2c,0x00,0x03,0x30,0x2c,
	0x00,0x04,0x48,0x2c,0x00,0x04,0x74,0x2c,
	0x00,0x03,0x5c,0x1c,0x00,0x03,0x78,0x1c,
	0x00,0x04,0xa0,0x1c,0x00,0x04,0xbc,0x1c,
	0x00,0x03,0x94,0x30,0x00,0x03,0xc4,0x30,
	0x00,0x04,0xd8,0x30,0x00,0x05,0x08,0x30,
	0x00,0x03,0xf4,0x14,0x00,0x04,0x08,0x14,
	0x00,0x05,0x38,0x14,0x00,0x05,0x4c,0x14,
	0x00,0x04,0x1c,0x1c,0x00,0x04,0x38,0x1c,
	0x00,0x05,0x60,0x1c,0x00,0x05,0x7c,0x1c,
	0x00,0x04,0x54,0x1c,0x00,0x04,0x70,0x1c,
	0x00,0x05,0x98,0x20,0x00,0x05,0xb8,0x20,
	0x00,0x04,0x8c,0x38,0x00,0x04,0xc4,0x34,
	0x00,0x05,0xd8,0x38,0x00,0x06,0x10,0x38,
	0x00,0x04,0xf8,0x2c,0x00,0x05,0x24,0x2c,
	0x00,0x06,0x48,0x2c,0x00,0x06,0x74,0x2c,
	0x00,0x05,0x50,0x24,0x00,0x05,0x74,0x24,
	0x00,0x06,0xa0,0x24,0x00,0x06,0xc4,0x24,
	0x00,0x05,0x50,0x24,0x00,0x05,0xbc,0x24,
	0x00,0x06,0xa0,0x24,0x00,0x06,0xe8,0x24,
	0x00,0x05,0xe0,0x38,0x00,0x06,0x18,0x38,
	0x00,0x07,0x0c,0x38,0x00,0x07,0x44,0x38,
	0x00,0x05,0xe0,0x38,0x00,0x06,0x50,0x2c,
	0x00,0x07,0x0c,0x38,0x00,0x07,0x7c,0x2c,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x04,0x43,
	0x00,0x00,0x04,0x67,0x00,0x02,0x20,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x04,0x41,
	0x00,0x00,0x04,0x65,0x00,0x02,0x20,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x80,0x00,0x40,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,
	0x00,0x00,0x00,0x08,0x00,0x80,0x00,0x40,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
	0x52,0x65,0x61,0x63,0x68,0x65,0x64,0x20,
	0x65,0x6e,0x64,0x20,0x6f,0x66,0x20,0x62,
	0x69,0x74,0x73,0x74,0x72,0x65,0x61,0x6d,
	0x2e,0x20,0x20,0x25,0x64,0x20,0x66,0x72,
	0x61,0x6d,0x65,0x73,0x20,0x64,0x65,0x63,
	0x6f,0x64,0x65,0x64,0x2e,0x0a,0x00,0x00,
	0x00,0x00,0x00,0x00,0x0a,0x56,0x49,0x44,
	0x5f,0x45,0x52,0x52,0x3d,0x30,0x78,0x25,
	0x78,0x2c,0x20,0x70,0x69,0x63,0x5f,0x6e,
	0x75,0x6d,0x3d,0x30,0x78,0x25,0x78,0x2c,
	0x20,0x63,0x6f,0x64,0x69,0x6e,0x67,0x5f,
	0x74,0x79,0x70,0x65,0x3d,0x30,0x78,0x25,
	0x78,0x2c,0x20,0x73,0x74,0x61,0x72,0x74,
	0x5f,0x63,0x6f,0x64,0x65,0x3d,0x30,0x78,
	0x25,0x78,0x20,0x00,0x0a,0x41,0x43,0x33,
	0x5f,0x45,0x52,0x52,0x3d,0x30,0x78,0x25,
	0x78,0x20,0x0a,0x00,0x0a,0x4d,0x70,0x65,
	0x67,0x20,0x41,0x75,0x64,0x69,0x6f,0x20,
	0x45,0x72,0x72,0x0a,0x00,0x00,0x00,0x00,
	0x57,0x61,0x74,0x63,0x68,0x64,0x6f,0x67,
	0x20,0x45,0x72,0x72,0x6f,0x72,0x0a,0x00,
	0x0a,0x56,0x55,0x5f,0x45,0x52,0x52,0x3d,
	0x30,0x78,0x25,0x78,0x3a,0x20,0x70,0x69,
	0x63,0x5f,0x6e,0x75,0x6d,0x3d,0x30,0x78,
	0x25,0x78,0x2c,0x20,0x73,0x74,0x61,0x72,
	0x74,0x5f,0x63,0x6f,0x64,0x65,0x3d,0x30,
	0x78,0x25,0x78,0x0a,0x00,0x00,0x00,0x00,
	0x0a,0x42,0x41,0x44,0x20,0x64,0x65,0x73,
	0x69,0x72,0x65,0x64,0x5f,0x74,0x65,0x6d,
	0x70,0x6f,0x72,0x61,0x6c,0x5f,0x72,0x65,
	0x66,0x65,0x72,0x65,0x6e,0x63,0x65,0x21,
	0x20,0x20,0x63,0x75,0x72,0x72,0x65,0x6e,
	0x74,0x3d,0x25,0x64,0x2c,0x20,0x64,0x65,
	0x73,0x69,0x72,0x65,0x64,0x3d,0x25,0x64,
	0x0a,0x00,0x00,0x00,0x49,0x6e,0x63,0x6f,
	0x72,0x72,0x65,0x63,0x74,0x20,0x4d,0x50,
	0x45,0x47,0x20,0x41,0x55,0x44,0x49,0x4f,
	0x20,0x66,0x72,0x61,0x6d,0x65,0x6c,0x65,
	0x6e,0x67,0x74,0x68,0x3a,0x20,0x74,0x74,
	0x6c,0x20,0x25,0x64,0x09,0x20,0x66,0x72,
	0x6d,0x6c,0x65,0x6e,0x20,0x25,0x64,0x0a,
	0x00,0x00,0x00,0x00,0xa5,0xa5,0x5a,0x5a,
	0xff,0xff,0xff,0xff,0x01,0x3f,0xd1,0x30,
	0x00,0x21,0x60,0x30,0x01,0xbb,0xd1,0x30,
	0x00,0x21,0x60,0x34,0x00,0x73,0xdf,0x20,
	0x00,0x28,0x60,0x30,0x01,0x3f,0xd1,0x20,
	0x00,0x28,0x60,0x34,0x00,0x73,0xdf,0x20,
	0x00,0x2a,0x60,0x00,0x01,0x3f,0xd1,0x20,
	0x00,0x2a,0x60,0x04,0x00,0x3d,0xda,0x10,
	0x00,0x29,0x60,0x20,0x00,0x73,0xdf,0x10,
	0x00,0x29,0x60,0x24,0x00,0x37,0xda,0x00,
	0x00,0x29,0x60,0x28,0x00,0x3d,0xda,0x00,
	0x00,0x29,0x60,0x2c,0x01,0xbb,0xd1,0x40,
	0x00,0x28,0x60,0x20,0x01,0xbb,0xd5,0x14,
	0x00,0x28,0x60,0x24,0x01,0xbb,0xd5,0x14,
	0x00,0x28,0x60,0x28,0x01,0xbb,0xd9,0x30,
	0x00,0x28,0x60,0x2c,0x01,0xbb,0xd9,0x40,
	0x00,0x28,0x60,0x38,0x02,0x33,0xdb,0x20,
	0x00,0x28,0x60,0x3c,0x02,0x33,0xdb,0x30,
	0x00,0x29,0x60,0x00,0x02,0x34,0xd3,0xf0,
	0x00,0x29,0x60,0x04,0x00,0x29,0x60,0x0c,
	0x01,0xbb,0xd9,0x40,0x00,0x29,0x60,0x08,
	0x02,0x34,0xd4,0x00,0x00,0x2e,0x60,0x00,
	0x04,0x32,0xdd,0x00,0x00,0x2d,0x60,0x00,
	0x06,0x31,0xd6,0x00,0x00,0x2d,0x60,0x20,
	0xd0,0x00,0x00,0x2a,0x60,0x10,0x07,0xc5,
	0x01,0x3f,0xd1,0x30,0x00,0x21,0x60,0x30,
	0x01,0x7e,0xd1,0x30,0x00,0x21,0x60,0x34,
	0x00,0x73,0xdf,0x20,0x00,0x28,0x60,0x30,
	0x01,0x3f,0xd1,0x20,0x00,0x28,0x60,0x34,
	0x00,0x73,0xdf,0x20,0x00,0x2a,0x60,0x00,
	0x01,0x3f,0xd1,0x20,0x00,0x2a,0x60,0x04,
	0x00,0x3d,0xda,0x10,0x00,0x29,0x60,0x20,
	0x00,0x73,0xdf,0x10,0x00,0x29,0x60,0x24,
	0x00,0x37,0xda,0x00,0x00,0x29,0x60,0x28,
	0x00,0x3d,0xda,0x00,0x00,0x29,0x60,0x2c,
	0x01,0x7e,0xd1,0x40,0x00,0x28,0x60,0x20,
	0x01,0x7e,0xd5,0x14,0x00,0x28,0x60,0x24,
	0x01,0x7e,0xd5,0x14,0x00,0x28,0x60,0x28,
	0x01,0x7e,0xd9,0x30,0x00,0x28,0x60,0x2c,
	0x01,0x7e,0xd9,0x40,0x00,0x28,0x60,0x38,
	0x01,0xf6,0xdb,0x20,0x00,0x28,0x60,0x3c,
	0x01,0xf6,0xdb,0x30,0x00,0x29,0x60,0x00,
	0x02,0x34,0xd3,0xf0,0x00,0x29,0x60,0x04,
	0x00,0x29,0x60,0x0c,0x01,0x7e,0xd9,0x40,
	0x00,0x29,0x60,0x08,0x02,0x34,0xd4,0x00,
	0x00,0x2e,0x60,0x00,0x04,0x32,0xdd,0x00,
	0x00,0x2d,0x60,0x00,0x06,0x31,0xd6,0x00,
	0x00,0x2d,0x60,0x20,0xd0,0x00,0x00,0x2a,
	0x60,0x10,0x07,0xc5,0x00,0x77,0xd6,0x10,
	0x00,0x21,0x60,0x30,0x00,0xf3,0xd6,0x10,
	0x00,0x21,0x60,0x34,0x08,0x70,0xd6,0x10,
	0x00,0x28,0x60,0x30,0x09,0xff,0xde,0x00,
	0x00,0x28,0x60,0x34,0x08,0x70,0xd6,0x10,
	0x00,0x2a,0x60,0x00,0x09,0xff,0xde,0x00,
	0x00,0x2a,0x60,0x04,0x08,0x30,0xd1,0x00,
	0x00,0x29,0x60,0x20,0x08,0x70,0xd6,0x00,
	0x00,0x29,0x60,0x24,0x00,0x37,0xda,0x00,
	0x00,0x29,0x60,0x28,0x00,0x77,0xd6,0x00,
	0x00,0x29,0x60,0x2c,0x00,0xf3,0xd6,0x20,
	0x00,0x28,0x60,0x20,0x00,0xf3,0xd9,0xf4,
	0x00,0x28,0x60,0x24,0x00,0xf3,0xd9,0xf4,
	0x00,0x28,0x60,0x28,0x00,0xf3,0xde,0x10,
	0x00,0x28,0x60,0x2c,0x00,0xf3,0xde,0x20,
	0x00,0x28,0x60,0x38,0x01,0x3c,0xd0,0x00,
	0x00,0x28,0x60,0x3c,0x01,0x3c,0xd0,0x10,
	0x00,0x29,0x60,0x00,0x01,0xf3,0xd5,0xf0,
	0x00,0x29,0x60,0x04,0x00,0x29,0x60,0x0c,
	0x00,0xf3,0xde,0x20,0x00,0x29,0x60,0x08,
	0x02,0x34,0xd4,0x00,0x00,0x2e,0x60,0x00,
	0x04,0x32,0xdd,0x00,0x00,0x2d,0x60,0x00,
	0x06,0x31,0xd6,0x00,0x00,0x2d,0x60,0x20,
	0xd0,0x04,0x00,0x2a,0x60,0x10,0x07,0xc5,
	0x01,0x3f,0xd1,0x30,0x00,0x21,0x60,0x30,
	0x01,0xbb,0xd1,0x30,0x00,0x21,0x60,0x34,
	0x00,0x73,0xdf,0x20,0x00,0x28,0x60,0x30,
	0x01,0x3f,0xd1,0x20,0x00,0x28,0x60,0x34,
	0x00,0x73,0xdf,0x20,0x00,0x2a,0x60,0x00,
	0x01,0x3f,0xd1,0x20,0x00,0x2a,0x60,0x04,
	0x00,0x3d,0xda,0x10,0x00,0x29,0x60,0x20,
	0x00,0x73,0xdf,0x10,0x00,0x29,0x60,0x24,
	0x00,0x37,0xda,0x00,0x00,0x29,0x60,0x28,
	0x00,0x3d,0xda,0x00,0x00,0x29,0x60,0x2c,
	0x01,0xbb,0xd1,0x40,0x00,0x28,0x60,0x20,
	0x01,0xbb,0xd5,0x14,0x00,0x28,0x60,0x24,
	0x01,0xbb,0xd5,0x14,0x00,0x28,0x60,0x28,
	0x01,0xbb,0xd9,0x30,0x00,0x28,0x60,0x2c,
	0x01,0xbb,0xd9,0x40,0x00,0x28,0x60,0x38,
	0x02,0x33,0xdb,0x20,0x00,0x28,0x60,0x3c,
	0x02,0x33,0xdb,0x30,0x00,0x29,0x60,0x00,
	0x02,0x34,0xd3,0xf0,0x00,0x29,0x60,0x04,
	0x00,0x29,0x60,0x0c,0x01,0xbb,0xd9,0x40,
	0x00,0x29,0x60,0x08,0x02,0x34,0xd4,0x00,
	0x00,0x2e,0x60,0x00,0x03,0x70,0xd3,0x00,
	0x00,0x2d,0x60,0x00,0x05,0xb8,0xd1,0x00,
	0x00,0x2d,0x60,0x20,0xd0,0x00,0x00,0x2a,
	0x60,0x10,0x00,0x6c,0xd0,0x08,0x05,0x2f,
	0x60,0x0c,0x00,0x20,0xd0,0x28,0x05,0xe6,
	0x60,0x1c,0x00,0x2a,0xd0,0x19,0x05,0xe6,
	0x60,0x20,0x00,0x24,0xd0,0x1e,0x07,0x26,
	0x60,0x1c,0x07,0xc5,0x01,0x3f,0xd1,0x30,
	0x00,0x21,0x60,0x30,0x01,0x7e,0xd1,0x30,
	0x00,0x21,0x60,0x34,0x00,0x73,0xdf,0x20,
	0x00,0x28,0x60,0x30,0x01,0x3f,0xd1,0x20,
	0x00,0x28,0x60,0x34,0x00,0x73,0xdf,0x20,
	0x00,0x2a,0x60,0x00,0x01,0x3f,0xd1,0x20,
	0x00,0x2a,0x60,0x04,0x00,0x3d,0xda,0x10,
	0x00,0x29,0x60,0x20,0x00,0x73,0xdf,0x10,
	0x00,0x29,0x60,0x24,0x00,0x37,0xda,0x00,
	0x00,0x29,0x60,0x28,0x00,0x3d,0xda,0x00,
	0x00,0x29,0x60,0x2c,0x01,0x7e,0xd1,0x40,
	0x00,0x28,0x60,0x20,0x01,0x7e,0xd5,0x14,
	0x00,0x28,0x60,0x24,0x01,0x7e,0xd5,0x14,
	0x00,0x28,0x60,0x28,0x01,0x7e,0xd9,0x30,
	0x00,0x28,0x60,0x2c,0x01,0x7e,0xd9,0x40,
	0x00,0x28,0x60,0x38,0x01,0xf6,0xdb,0x20,
	0x00,0x28,0x60,0x3c,0x01,0xf6,0xdb,0x30,
	0x00,0x29,0x60,0x00,0x02,0x34,0xd3,0xf0,
	0x00,0x29,0x60,0x04,0x00,0x29,0x60,0x0c,
	0x01,0x7e,0xd9,0x40,0x00,0x29,0x60,0x08,
	0x02,0x34,0xd4,0x00,0x00,0x2e,0x60,0x00,
	0x03,0x70,0xd3,0x00,0x00,0x2d,0x60,0x00,
	0x05,0xb8,0xd1,0x00,0x00,0x2d,0x60,0x20,
	0xd0,0x00,0x00,0x2a,0x60,0x10,0x00,0x6c,
	0xd0,0x08,0x05,0x2f,0x60,0x0c,0x00,0x20,
	0xd0,0x28,0x05,0xe6,0x60,0x1c,0x00,0x2a,
	0xd0,0x19,0x05,0xe6,0x60,0x20,0x00,0x24,
	0xd0,0x1e,0x07,0x26,0x60,0x1c,0x07,0xc5,
	0x00,0x77,0xd6,0x10,0x00,0x21,0x60,0x30,
	0x00,0xf3,0xd6,0x10,0x00,0x21,0x60,0x34,
	0x08,0x70,0xd6,0x10,0x00,0x28,0x60,0x30,
	0x09,0xff,0xde,0x00,0x00,0x28,0x60,0x34,
	0x08,0x70,0xd6,0x10,0x00,0x2a,0x60,0x00,
	0x09,0xff,0xde,0x00,0x00,0x2a,0x60,0x04,
	0x08,0x30,0xd1,0x00,0x00,0x29,0x60,0x20,
	0x08,0x70,0xd6,0x00,0x00,0x29,0x60,0x24,
	0x00,0x37,0xda,0x00,0x00,0x29,0x60,0x28,
	0x00,0x77,0xd6,0x00,0x00,0x29,0x60,0x2c,
	0x00,0xf3,0xd6,0x20,0x00,0x28,0x60,0x20,
	0x00,0xf3,0xd9,0xf4,0x00,0x28,0x60,0x24,
	0x00,0xf3,0xd9,0xf4,0x00,0x28,0x60,0x28,
	0x00,0xf3,0xde,0x10,0x00,0x28,0x60,0x2c,
	0x00,0xf3,0xde,0x20,0x00,0x28,0x60,0x38,
	0x01,0x3c,0xd0,0x00,0x00,0x28,0x60,0x3c,
	0x01,0x3c,0xd0,0x10,0x00,0x29,0x60,0x00,
	0x01,0xf3,0xd5,0xf0,0x00,0x29,0x60,0x04,
	0x00,0x29,0x60,0x0c,0x00,0xf3,0xde,0x20,
	0x00,0x29,0x60,0x08,0x01,0xf3,0xd6,0x00,
	0x00,0x2e,0x60,0x00,0x03,0x70,0xd3,0x00,
	0x00,0x2d,0x60,0x00,0x05,0xb8,0xd1,0x00,
	0x00,0x2d,0x60,0x20,0xd0,0x04,0x00,0x2a,
	0x60,0x10,0x00,0x6c,0xd0,0x08,0x05,0x2f,
	0x60,0x0c,0x00,0x20,0xd0,0x28,0x05,0xe6,
	0x60,0x1c,0x00,0x2a,0xd0,0x19,0x05,0xe6,
	0x60,0x20,0x00,0x24,0xd0,0x1e,0x07,0x26,
	0x60,0x1c,0x07,0xc5,0x00,0x77,0xd6,0x10,
	0x00,0x21,0x60,0x30,0x00,0xf3,0xd6,0x10,
	0x00,0x21,0x60,0x34,0x08,0x73,0xd6,0x10,
	0x00,0x28,0x60,0x30,0x0a,0x32,0xde,0x00,
	0x00,0x28,0x60,0x34,0x08,0x73,0xd6,0x10,
	0x00,0x2a,0x60,0x00,0x0a,0x32,0xde,0x00,
	0x00,0x2a,0x60,0x04,0x08,0x30,0xd1,0x00,
	0x00,0x29,0x60,0x20,0x08,0x73,0xd6,0x00,
	0x00,0x29,0x60,0x24,0x00,0x37,0xda,0x00,
	0x00,0x29,0x60,0x28,0x00,0x77,0xd6,0x00,
	0x00,0x29,0x60,0x2c,0x00,0xf3,0xd6,0x20,
	0x00,0x28,0x60,0x20,0x00,0xf3,0xd9,0xf4,
	0x00,0x28,0x60,0x24,0x00,0xf3,0xd9,0xf4,
	0x00,0x28,0x60,0x28,0x00,0xf3,0xde,0x10,
	0x00,0x28,0x60,0x2c,0x00,0xf3,0xde,0x20,
	0x00,0x28,0x60,0x38,0x01,0x3c,0xd0,0x00,
	0x00,0x28,0x60,0x3c,0x01,0x3c,0xd0,0x10,
	0x00,0x29,0x60,0x00,0x02,0x34,0xd3,0xf0,
	0x00,0x29,0x60,0x04,0x08,0x30,0xd1,0x00,
	0x00,0x29,0x60,0x08,0x0a,0x30,0xd1,0x00,
	0x00,0x29,0x60,0x0c,0x02,0x34,0xd4,0x00,
	0x00,0x2e,0x60,0x00,0x04,0x32,0xdd,0x00,
	0x00,0x2d,0x60,0x00,0x06,0x31,0xd6,0x00,
	0x00,0x2d,0x60,0x20,0x0c,0x32,0xdd,0x00,
	0x05,0x65,0x60,0x30,0x05,0x65,0x60,0x38,
	0x0e,0x31,0xd6,0x00,0x05,0x65,0x60,0x34,
	0x05,0x65,0x60,0x3c,0x0b,0x70,0xd3,0x00,
	0x05,0x66,0x60,0x00,0x00,0x30,0xd0,0x00,
	0x05,0x66,0x60,0x04,0xd0,0x00,0x00,0x2a,
	0x60,0x10,0x07,0xc5,0x00,0x77,0xd6,0x10,
	0x00,0x21,0x60,0x30,0x00,0xf3,0xd6,0x10,
	0x00,0x21,0x60,0x34,0x08,0x73,0xd6,0x10,
	0x00,0x28,0x60,0x30,0x0a,0x32,0xde,0x00,
	0x00,0x28,0x60,0x34,0x08,0x73,0xd6,0x10,
	0x00,0x2a,0x60,0x00,0x0a,0x32,0xde,0x00,
	0x00,0x2a,0x60,0x04,0x08,0x30,0xd1,0x00,
	0x00,0x29,0x60,0x20,0x08,0x73,0xd6,0x00,
	0x00,0x29,0x60,0x24,0x00,0x37,0xda,0x00,
	0x00,0x29,0x60,0x28,0x00,0x77,0xd6,0x00,
	0x00,0x29,0x60,0x2c,0x00,0xf3,0xd6,0x20,
	0x00,0x28,0x60,0x20,0x00,0xf3,0xd9,0xf4,
	0x00,0x28,0x60,0x24,0x00,0xf3,0xd9,0xf4,
	0x00,0x28,0x60,0x28,0x00,0xf3,0xde,0x10,
	0x00,0x28,0x60,0x2c,0x00,0xf3,0xde,0x20,
	0x00,0x28,0x60,0x38,0x01,0x3c,0xd0,0x00,
	0x00,0x28,0x60,0x3c,0x01,0x3c,0xd0,0x10,
	0x00,0x29,0x60,0x00,0x03,0x70,0xd2,0xf0,
	0x00,0x29,0x60,0x04,0x08,0x30,0xd1,0x00,
	0x00,0x29,0x60,0x08,0x0a,0x30,0xd1,0x00,
	0x00,0x29,0x60,0x0c,0x0d,0xb8,0xd1,0x00,
	0x00,0x2e,0x60,0x00,0x03,0x70,0xd3,0x00,
	0x00,0x2d,0x60,0x00,0x05,0xb8,0xd1,0x00,
	0x00,0x2d,0x60,0x20,0x0b,0x70,0xd3,0x00,
	0x05,0x65,0x60,0x30,0x05,0x66,0x60,0x00,
	0x00,0x30,0xd0,0x00,0x05,0x65,0x60,0x34,
	0x05,0x66,0x60,0x04,0x0c,0x32,0xdd,0x00,
	0x05,0x65,0x60,0x38,0x0e,0x31,0xd6,0x00,
	0x05,0x65,0x60,0x3c,0xd0,0x00,0x00,0x2a,
	0x60,0x10,0x00,0x6c,0xd0,0x08,0x05,0x2f,
	0x60,0x0c,0x00,0x20,0xd0,0x28,0x05,0xe6,
	0x60,0x1c,0x00,0x2a,0xd0,0x19,0x05,0xe6,
	0x60,0x20,0x00,0x24,0xd0,0x1e,0x07,0x26,
	0x60,0x1c,0x07,0xc5,0x00,0x21,0xd0,0x2c,
	0x70,0x00,0xd2,0x80,0x10,0x20,0xe8,0x0d,
	0xd2,0x81,0x10,0x21,0xe8,0x0d,0xd2,0x83,
	0x10,0x22,0xe8,0x0d,0x00,0x0c,0x12,0x8a,
	0x12,0x8c,0x00,0x38,0xd4,0x18,0x50,0x0a,
	0xc1,0x00,0x00,0x65,0xd1,0x40,0xc2,0x05,
	0x00,0x6b,0xd1,0x88,0x00,0xe4,0xd0,0x00,
	0x30,0x08,0xec,0x1d,0x00,0x0c,0xf1,0x2d,
	0x00,0xe4,0xd1,0x00,0x51,0x0a,0x00,0xe4,
	0xd1,0x40,0x00,0x36,0xdd,0x7c,0xc1,0x80,
	0xf1,0x2d,0x00,0x21,0x71,0xf0,0x12,0xa0,
	0xf8,0x4b,0x11,0xe0,0xe8,0x54,0x0f,0xff,
	0xdf,0xff,0xc5,0x00,0xd5,0x40,0xd5,0x80,
	0xf0,0xf2,0xf0,0xfc,0xf0,0xf7,0xf0,0xfc,
	0xc0,0x07,0x30,0x15,0xec,0x46,0xc1,0x95,
	0x31,0x94,0xc1,0x14,0xc1,0x54,0x02,0x30,
	0xd0,0x00,0xc5,0xc0,0x21,0x57,0xf1,0x2d,
	0xf0,0xf2,0xf1,0x10,0xf0,0xf7,0xf1,0x10,
	0xf0,0xf2,0xf1,0x17,0xf0,0xf7,0xf1,0x17,
	0xe0,0x54,0xc5,0xca,0xf0,0xf2,0xf1,0x10,
	0xf0,0xf7,0xf1,0x10,0xf0,0xf2,0xf1,0x17,
	0xf0,0xf7,0xf1,0x17,0x05,0x6b,0x61,0xe8,
	0x05,0x6b,0x61,0xec,0x00,0x21,0x70,0x34,
	0x30,0x07,0xf4,0x5d,0x00,0x0c,0x00,0x20,
	0xd0,0x12,0xa0,0x36,0x00,0x21,0xd0,0x18,
	0x00,0x65,0xd0,0x48,0x70,0x41,0x10,0x60,
	0x80,0x3f,0x00,0x0a,0x7d,0x01,0x00,0x06,
	0xd7,0xd2,0x00,0x65,0xd0,0x40,0x07,0xc4,
	0xd7,0xd2,0x00,0x65,0xd0,0x58,0x07,0xc4,
	0x0b,0x1e,0xd7,0xd2,0x00,0x65,0xd0,0x68,
	0x07,0xc4,0xd7,0xd2,0x00,0x65,0xd0,0x60,
	0x07,0xc4,0xd8,0x40,0x96,0x40,0x16,0x58,
	0x16,0x58,0xd0,0x30,0x40,0x19,0x10,0x30,
	0xf8,0x95,0x02,0x20,0xd6,0x00,0x04,0x93,
	0x04,0x95,0x04,0x96,0x00,0x22,0xd0,0x60,
	0xd0,0x0f,0x40,0x19,0x10,0x20,0xe8,0xbd,
	0x00,0x22,0xd0,0x71,0x20,0x40,0x10,0x21,
	0xe8,0xbd,0x04,0x97,0xe0,0xbd,0x01,0x46,
	0x00,0x25,0xd0,0x1f,0xa0,0x08,0x00,0x24,
	0xd0,0x1e,0xa0,0x08,0x85,0x7f,0x90,0x09,
	0xc0,0x00,0x00,0x25,0xd0,0x5f,0xa0,0x48,
	0x00,0x24,0xd0,0x5e,0xa0,0x48,0x8a,0xbf,
	0x90,0x49,0xc0,0x41,0x00,0xc6,0x30,0x40,
	0xf8,0xaf,0x01,0x24,0xd6,0x00,0x04,0x93,
	0xe0,0xb1,0x01,0x20,0xd6,0x00,0xd0,0x0f,
	0x40,0x19,0x10,0x24,0xec,0xb9,0x00,0x22,
	0xd0,0x60,0x20,0x40,0xe0,0xbd,0x00,0x22,
	0xd0,0x70,0xb0,0x05,0x20,0x40,0x56,0x01,
	0x00,0xe7,0xd0,0x10,0x66,0x00,0x01,0x22,
	0xd0,0x73,0x30,0x58,0xf4,0xc6,0x04,0x90,
	0x01,0x22,0xd0,0x72,0x30,0x58,0xf4,0xcb,
	0x04,0x94,0x01,0x22,0xd0,0x63,0x30,0x58,
	0xe8,0xd7,0x01,0x22,0xd0,0x70,0x30,0x58,
	0xe8,0xd7,0x01,0x26,0xd0,0x61,0x30,0x58,
	0xf8,0xd8,0x04,0x92,0x01,0x26,0xd0,0x61,
	0x30,0x58,0xe4,0xe5,0x01,0x22,0xd0,0x73,
	0x30,0x58,0xe8,0xe5,0x01,0x22,0xd0,0x62,
	0x30,0x58,0xf4,0xe5,0x04,0x91,0x00,0xe7,
	0xd0,0x28,0x68,0x40,0x00,0x06,0x80,0x3f,
	0x00,0x20,0xdf,0x52,0x00,0xa6,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x65,0xd2,0x00,0x00,0x23,0xd8,0x19,
	0x07,0xc5,0x00,0xe9,0xd2,0x14,0x00,0x20,
	0xd8,0x0e,0x07,0xc5,0x70,0x48,0xc0,0x01,
	0x30,0x14,0xed,0x01,0xc5,0x01,0xb2,0x3c,
	0x78,0x88,0xb2,0x3c,0x18,0x9e,0x00,0x6f,
	0x48,0xbc,0x25,0xa2,0x20,0x62,0xc0,0x01,
	0x30,0x15,0xe5,0x0d,0xc5,0x41,0xb8,0x01,
	0xec,0xfc,0x07,0xc5,0x70,0x48,0x20,0x57,
	0x60,0x48,0xb2,0x38,0xb8,0x01,0xed,0x10,
	0x07,0xc5,0xc2,0x5f,0x71,0x08,0xb2,0x3c,
	0x78,0x88,0xb2,0x3c,0x12,0xa0,0xe9,0x20,
	0x01,0x10,0xf9,0x2a,0xc1,0x47,0xb2,0x08,
	0x61,0x48,0xb2,0x38,0x18,0x9e,0x00,0x6f,
	0x48,0xbc,0xc1,0xa2,0xf1,0x2d,0x21,0xe2,
	0xb8,0x01,0xed,0x18,0x02,0x45,0xd0,0x44,
	0xc0,0x04,0x30,0x05,0xe9,0x40,0xed,0x37,
	0xb0,0x48,0xc0,0x06,0xb0,0x04,0x21,0x00,
	0x21,0x40,0xb1,0x3f,0xb1,0x7e,0x70,0x84,
	0x21,0x01,0x10,0xa0,0x60,0x85,0x21,0x41,
	0xb1,0x84,0xed,0x39,0x07,0xc5,0x00,0x00,
	0x70,0x81,0xb0,0x7c,0x70,0x41,0xc0,0xc1,
	0x10,0xd3,0x00,0x6f,0xd0,0x3f,0x40,0xc0,
	0xc1,0x01,0x11,0x1c,0x10,0x1e,0x41,0x00,
	0xd0,0x04,0x40,0x01,0xe8,0x22,0xc7,0xc3,
	0xa0,0xf6,0xd0,0x06,0x40,0x40,0xd0,0xc1,
	0xc0,0x02,0x10,0x01,0xe4,0x2b,0x00,0x20,
	0xd0,0xd0,0x01,0x46,0xc0,0x04,0x31,0x03,
	0xfc,0x30,0xc0,0x03,0xb0,0x01,0x10,0x02,
	0x80,0x3f,0x00,0x0a,0x7d,0x02,0x20,0x80,
	0xb0,0xbc,0x00,0x06,0x00,0xc6,0x11,0x20,
	0xec,0x2b,0x10,0x60,0xf8,0x3f,0x01,0x46,
	0x0f,0x87,0x07,0xc5,0x00,0x00,0x7a,0x7c,
	0x00,0x02,0x00,0x13,0x00,0x00,0x83,0xbc,
	0x00,0x02,0x41,0x73,0x00,0x00,0x8a,0xe0,
	0x00,0xe0,0x03,0xa3,0x00,0x00,0x8b,0xc8,
	0x00,0x00,0x00,0x83,0x00,0x00,0x8b,0xe8,
	0x00,0x3a,0x0e,0xd3,0x00,0x01,0x35,0xac,
	0x00,0x08,0x04,0x5b,0x00,0x01,0x36,0xc0,
	0x00,0x19,0xc3,0x2a,0x00,0x01,0x37,0x88,
	0x00,0x19,0xc2,0x8a,0x00,0x01,0x38,0x28,
	0x00,0x19,0xc2,0x7a,0x00,0x01,0x38,0xc4,
	0x00,0x19,0xc2,0x3a,0x00,0x01,0x39,0x50,
	0x00,0x19,0xc2,0x1a,0x00,0x01,0x39,0xd4,
	0x00,0x19,0xc2,0xda,0x00,0x01,0x3a,0x88,
	0x00,0x19,0xc2,0xca,0x00,0x01,0x3b,0x38,
	0x00,0x08,0x01,0x23,0x00,0x01,0xc0,0x3c,
	0x00,0x26,0x44,0xc3,0x00,0x01,0xc1,0x6c,
	0x00,0x26,0x44,0xa3,0x00,0x01,0xc2,0x94,
	0x00,0x26,0x41,0x73,0x00,0x01,0xc2,0xf0,
	0x00,0x26,0x40,0x63,0x00,0x01,0xbb,0x94,
	0x00,0x80,0x12,0xa3,0x00,0x01,0xf8,0xf0,
	0x00,0x76,0x02,0x48,0x00,0x01,0xf9,0x80,
	0x00,0x76,0x00,0x88,0x00,0x01,0xf9,0xa0,
	0x00,0x76,0x02,0x78,0x00,0x01,0xfa,0x3c,
	0x00,0x76,0x01,0xc8,0x00,0x01,0xfa,0xac,
	0x00,0x76,0x02,0x68,0x00,0x01,0xfb,0x44,
	0x00,0x76,0x02,0x48,0x00,0x01,0xfb,0xd4,
	0x00,0x76,0x02,0x48,0x00,0x01,0xfc,0x64,
	0x00,0x76,0x00,0x88,0x00,0x01,0xff,0x4c,
	0x00,0x76,0x02,0x58,0x00,0x01,0xff,0xe0,
	0x00,0x76,0x02,0x48,0x00,0x02,0x00,0x70,
	0x00,0x76,0x02,0x68,0x00,0x02,0x01,0x08,
	0x00,0x76,0x02,0x68,0x00,0x02,0x01,0xa0,
	0x00,0x76,0x01,0xd8,0x00,0x02,0x02,0x14,
	0x00,0x76,0x02,0x58,0x00,0x02,0x02,0xa8,
	0x00,0x76,0x02,0x08,0x00,0x02,0x03,0x28,
	0x00,0x76,0x02,0x08,0x00,0x02,0x03,0xa8,
	0x00,0x76,0x02,0x58,0x00,0x02,0x04,0x3c,
	0x00,0x76,0x02,0x88,0x00,0x02,0x04,0xdc,
	0x00,0x76,0x02,0x88,0x00,0x02,0x05,0x7c,
	0x00,0x76,0x02,0x78,0x00,0x02,0x06,0x18,
	0x00,0x76,0x02,0x78,0x00,0x02,0x06,0xb4,
	0x00,0x76,0x02,0x08,0x00,0x01,0xf7,0xf4,
	0x00,0x76,0x01,0x98,0x00,0x01,0xf8,0x58,
	0x00,0x76,0x02,0x68,0x00,0x01,0xfd,0x9c,
	0x00,0x76,0x02,0x48,0x00,0x01,0xfe,0x2c,
	0x00,0x76,0x02,0x18,0x00,0x01,0xfe,0xb0,
	0x00,0x76,0x02,0x78,0x00,0x01,0xfc,0x84,
	0x00,0x76,0x02,0x38,0x00,0x01,0xfd,0x10,
	0x00,0x76,0x02,0x18,0x00,0x01,0xfd,0x94,
	0x00,0x76,0x00,0x28,0x00,0x01,0xfd,0x9c,
	0x00,0x76,0x00,0x08,0x00,0x01,0xfd,0x9c,
	0x00,0x76,0x00,0x08,0x00,0x02,0x07,0x34,
	0x00,0x76,0x02,0x68,0x00,0x02,0x07,0xcc,
	0x00,0x80,0x0d,0x44,0x00,0x02,0x0b,0x1c,
	0x00,0x80,0x00,0x72,0x00,0x02,0x0b,0x38,
	0x00,0x80,0x18,0xe4,0x00,0x02,0x11,0x70,
	0x00,0x80,0x19,0x54,0x00,0x02,0x17,0xc4,
	0x00,0x80,0x01,0x55,0x00,0x02,0x18,0x18,
	0x00,0x76,0x01,0x58,0x00,0x02,0x1a,0x44,
	0x00,0x80,0x0a,0xe4,0x00,0x01,0x4c,0xb8,
	0x00,0x80,0x1d,0xe4,0x00,0x01,0x54,0x30,
	0x00,0x80,0x0f,0x94,0x00,0x01,0x58,0x14,
	0x00,0x80,0x06,0x14,0x00,0x00,0xd5,0xac,
	0x00,0x80,0x07,0x53,0x00,0x00,0xd7,0x80,
	0x00,0x80,0x06,0x53,0x00,0x00,0xd9,0x14,
	0x00,0x80,0x04,0xc3,0x00,0x00,0xda,0x44,
	0x00,0x80,0x02,0x43,0x00,0x00,0xda,0xd4,
	0x00,0x76,0x00,0x28,0x00,0x00,0xda,0xdc,
	0x00,0x76,0x00,0x28,0x00,0x00,0xda,0xe4,
	0x00,0x80,0x01,0xc3,0x00,0x00,0xdb,0x54,
	0x00,0x76,0x02,0x78,0x00,0x00,0xdb,0xf0,
	0x00,0x76,0x02,0x08,0x00,0x00,0xdc,0x70,
	0x00,0x76,0x02,0x7c,0x00,0x00,0xdd,0x0c,
	0x00,0x80,0x12,0x23,0x00,0x00,0xe1,0x94,
	0x00,0x80,0x01,0x4a,0x00,0x00,0xe5,0x80,
	0x00,0x80,0x0f,0xc3,0x00,0x00,0xe1,0xe4,
	0x00,0x80,0x0e,0x73,0x00,0x00,0xe9,0x70,
	0x00,0x80,0x11,0x73,0x00,0x00,0xf1,0x1c,
	0x00,0x80,0x06,0x13,0x00,0x00,0xf2,0xa0,
	0x00,0x80,0x08,0x63,0x00,0x00,0xf4,0xb8,
	0x00,0x80,0x07,0xf3,0x00,0x00,0xf6,0xb4,
	0x00,0x80,0x0f,0x13,0x00,0x00,0xfa,0x78,
	0x00,0x80,0x05,0x63,0x00,0x01,0x32,0x48,
	0x00,0x80,0x02,0x43,0x00,0x00,0xed,0xcc,
	0x00,0x80,0x0d,0x43,0x00,0x00,0xfb,0xd0,
	0x00,0x80,0x10,0xa3,0x00,0x00,0xff,0xf8,
	0x00,0x80,0x0b,0xe3,0x00,0x01,0x02,0xf0,
	0x00,0xd6,0x05,0x83,0x00,0x01,0x04,0x98,
	0x00,0xd6,0x04,0x53,0x00,0x01,0x04,0x50,
	0x00,0xd6,0x01,0x23,0x00,0x01,0x05,0xac,
	0x00,0xd6,0x08,0x73,0x00,0x01,0x07,0xc8,
	0x00,0xd8,0x87,0xe3,0x00,0x01,0x09,0xc0,
	0x00,0xe0,0x07,0x63,0x00,0x01,0x0b,0x98,
	0x00,0xe0,0x03,0x13,0x00,0x01,0x0c,0x5c,
	0x00,0xe0,0x01,0xd3,0x00,0x01,0x0c,0xd0,
	0x00,0xe0,0x03,0x13,0x00,0x01,0x0d,0x94,
	0x00,0xe0,0x06,0xb3,0x00,0x01,0x0f,0x40,
	0x00,0x80,0x03,0xe3,0x00,0x00,0xc3,0x58,
	0x00,0x80,0x11,0xb3,0x00,0x00,0xc7,0xc4,
	0x00,0x80,0x0f,0x23,0x00,0x00,0xcb,0x8c,
	0x00,0x80,0x05,0xc3,0x00,0x01,0x14,0xd0,
	0x00,0xe0,0x02,0x53,0x00,0x01,0x10,0x38,
	0x00,0x80,0x05,0xe3,0x00,0x01,0x11,0xb0,
	0x00,0x80,0x0c,0x83,0x00,0x01,0x15,0x64,
	0x00,0x80,0x0c,0xc3,0x00,0x01,0x18,0x94,
	0x00,0x80,0x04,0x03,0x00,0x01,0x19,0x94,
	0x00,0x80,0x0c,0x73,0x00,0x01,0x1c,0xb0,
	0x00,0x80,0x0e,0x73,0x00,0x01,0x24,0x94,
	0x00,0x80,0x06,0x33,0x00,0x01,0x26,0x20,
	0x00,0x80,0x01,0x33,0x00,0x01,0x26,0x6c,
	0x00,0x80,0x08,0x83,0x00,0x01,0x28,0x8c,
	0x00,0x80,0x07,0x23,0x00,0x01,0x32,0xd8,
	0x00,0x80,0x02,0xf5,0x00,0x01,0x33,0x94,
	0x00,0x80,0x06,0x65,0x00,0x01,0x2a,0x54,
	0x00,0x80,0x1f,0xd3,0x00,0x01,0x20,0x4c,
	0x00,0x80,0x03,0xb3,0x00,0x01,0x21,0x38,
	0x00,0x80,0x0d,0x73,0x00,0x01,0x5a,0x9c,
	0x00,0x76,0x00,0x68,0x00,0x01,0x5a,0xb4,
	0x00,0x80,0x16,0x43,0x00,0x01,0x60,0x64,
	0x00,0x80,0x12,0x53,0x00,0x01,0x65,0xb8,
	0x00,0x80,0x1b,0x33,0x00,0x01,0x6c,0x84,
	0x00,0x80,0x0e,0x63,0x00,0x01,0x3c,0x34,
	0x00,0x08,0x05,0xda,0x00,0x01,0x3b,0x84,
	0x00,0x08,0x02,0xc8,0x00,0x01,0x42,0x70,
	0x00,0x08,0x05,0xfa,0x00,0x01,0x3d,0xa8,
	0x00,0x08,0x05,0xec,0x00,0x01,0x3f,0x20,
	0x00,0x08,0x02,0x9c,0x00,0x01,0x3f,0xc4,
	0x00,0x20,0x81,0x0a,0x00,0x01,0x40,0x24,
	0x00,0x20,0x80,0xac,0x00,0x01,0x40,0x04,
	0x00,0x20,0x80,0x7a,0x00,0x01,0x40,0x20,
	0x00,0x20,0x80,0x1a,0x00,0x01,0x40,0x4c,
	0x00,0x20,0x81,0x2a,0x00,0x01,0x40,0x94,
	0x00,0x20,0x81,0x3a,0x00,0x01,0x40,0xe0,
	0x00,0x20,0x80,0xca,0x00,0x01,0x41,0x10,
	0x00,0x20,0x80,0xfa,0x00,0x01,0x41,0x4c,
	0x00,0x20,0x81,0x2a,0x00,0x01,0x41,0x94,
	0x00,0x20,0x81,0x3a,0x00,0x01,0x41,0xe0,
	0x00,0x20,0x81,0x2a,0x00,0x01,0x42,0x28,
	0x00,0x20,0x81,0x2a,0x00,0x01,0x42,0x70,
	0x00,0x20,0x80,0x0a,0x00,0x00,0x8f,0x9c,
	0x00,0x80,0x19,0xa5,0x00,0x00,0x96,0x04,
	0x00,0x80,0x14,0x83,0x00,0x00,0x9b,0x24,
	0x00,0x80,0x04,0x95,0x00,0x00,0x9c,0x48,
	0x00,0x80,0x00,0x33,0x00,0x00,0xcc,0xfc,
	0x00,0x80,0x0e,0x92,0x00,0x00,0xd0,0xa0,
	0x00,0x80,0x05,0xb5,0x00,0x00,0xc2,0x08,
	0x00,0x80,0x05,0x44,0x00,0x00,0xd2,0x0c,
	0x00,0x80,0x05,0x94,0x00,0x01,0x70,0x1c,
	0x00,0x80,0x1a,0xd2,0x00,0x01,0x76,0xd0,
	0x00,0x80,0x10,0x22,0x00,0x01,0x7a,0xd8,
	0x00,0x80,0x00,0xb2,0x00,0x00,0xd3,0x70,
	0x00,0x80,0x08,0xf3,0x00,0x01,0xc3,0x08,
	0x00,0xca,0x05,0x42,0x00,0x01,0xc4,0x58,
	0x00,0x80,0x12,0x02,0x00,0x01,0xc8,0xd8,
	0x00,0x80,0x06,0x32,0x00,0x01,0xca,0x64,
	0x00,0x80,0x12,0x42,0x00,0x01,0xce,0xf4,
	0x00,0xca,0x04,0xe2,0x00,0x01,0xd5,0xcc,
	0x00,0x80,0x1a,0xf2,0x00,0x01,0xe4,0x98,
	0x00,0x80,0x04,0x62,0x00,0x01,0xd0,0x2c,
	0x00,0x80,0x16,0x82,0x00,0x01,0xe5,0xb0,
	0x00,0x80,0x1a,0x22,0x00,0x01,0xdc,0xb8,
	0x00,0x80,0x1f,0x82,0x00,0x01,0xec,0x38,
	0x00,0x80,0x06,0xd2,0x00,0x01,0xed,0xec,
	0x00,0x80,0x05,0xf2,0x00,0x01,0xa1,0xf0,
	0x00,0x80,0x11,0x82,0x00,0x01,0xaa,0x1c,
	0x00,0x80,0x11,0xa2,0x00,0x01,0xa6,0x50,
	0x00,0x80,0x0e,0xf2,0x00,0x01,0xae,0x84,
	0x00,0x80,0x01,0x62,0x00,0x01,0xae,0xdc,
	0x00,0x80,0x06,0x72,0x00,0x01,0xb0,0x78,
	0x00,0x80,0x0c,0xf2,0x00,0x01,0xb3,0xb4,
	0x00,0x00,0x05,0xb2,0x00,0x01,0xb5,0x20,
	0x00,0x80,0x07,0x22,0x00,0x01,0xb6,0xe8,
	0x00,0x80,0x0e,0x52,0x00,0x01,0xba,0x7c,
	0x00,0x80,0x04,0x62,0x00,0x00,0xac,0xe4,
	0x00,0x80,0x03,0xd2,0x00,0x00,0xb3,0xc8,
	0x00,0x80,0x0d,0xf2,0x00,0x00,0xb7,0x44,
	0x00,0x80,0x0c,0xb2,0x00,0x00,0x9c,0x54,
	0x00,0x80,0x0c,0xe2,0x00,0x00,0x9f,0xd4,
	0x00,0x80,0x04,0xa2,0x00,0x00,0xaf,0x78,
	0x00,0x80,0x07,0x22,0x00,0x00,0xb1,0x40,
	0x00,0x80,0x0a,0x22,0x00,0x00,0xa2,0xac,
	0x00,0x80,0x0a,0x22,0x00,0x00,0xbf,0x60,
	0x00,0x80,0x0a,0xa2,0x00,0x00,0xbb,0x64,
	0x00,0x80,0x0f,0xf2,0x00,0x00,0xba,0x70,
	0x00,0x80,0x03,0xd2,0x00,0x00,0xa5,0x34,
	0x00,0x80,0x0b,0x02,0x00,0x00,0xa8,0xbc,
	0x00,0xb9,0x0c,0xa2,0x00,0x00,0xa0,0xfc,
	0x00,0x80,0x06,0xc2,0x00,0x00,0xaf,0x00,
	0x00,0x80,0x01,0xe2,0x00,0x00,0xab,0xe4,
	0x00,0x80,0x04,0x02,0x00,0x00,0xad,0xd8,
	0x00,0xed,0x04,0xa2,0x00,0x01,0x7b,0x04,
	0x00,0x80,0x01,0xd2,0x00,0x01,0x7b,0x78,
	0x00,0x80,0x18,0xc2,0x00,0x01,0x81,0xa8,
	0x00,0x80,0x0a,0x02,0x00,0x01,0x84,0x28,
	0x00,0x80,0x0c,0x22,0x00,0x01,0x87,0x30,
	0x00,0x80,0x05,0x42,0x00,0x01,0x8b,0x50,
	0x00,0x80,0x19,0x52,0x00,0x01,0x91,0xa4,
	0x00,0xe8,0x01,0x92,0x00,0x01,0x92,0x08,
	0x00,0x80,0x01,0xc2,0x00,0x01,0x88,0x80,
	0x00,0x80,0x0b,0x42,0x00,0x01,0xef,0x68,
	0x00,0x80,0x0d,0x92,0x00,0x01,0xf2,0xcc,
	0x00,0x80,0x14,0xa2,0x00,0x02,0x1c,0xfc,
	0x00,0x80,0x1f,0xf3,0x00,0x02,0x24,0xf8,
	0x00,0x80,0x1e,0x93,0x00,0x02,0x2c,0x9c,
	0x00,0x80,0x1e,0xb3,0x00,0x02,0x34,0x48,
	0x00,0x80,0x09,0xc3,0x00,0x02,0x36,0xb8,
	0x00,0x80,0x1a,0x03,0x00,0x02,0x3d,0x38,
	0x00,0x80,0x1e,0xb3,0x00,0x01,0x64,0xf8,
	0x00,0x76,0x02,0x28,0x00,0x01,0x65,0x80,
	0x00,0x76,0x00,0xe8,0x00,0x01,0x92,0x78,
	0x00,0x80,0x03,0x82,0x00,0x01,0x93,0x58,
	0x00,0x80,0x06,0x83,0x00,0x01,0x94,0xf8,
	0x00,0x80,0x0f,0x93,0x00,0x01,0x98,0xdc,
	0x00,0x80,0x01,0xb3,0x00,0x01,0x99,0x48,
	0x00,0x80,0x17,0x33,0x00,0x01,0x9f,0x14,
	0x00,0x80,0x0b,0x73,0x00,0x02,0x18,0x6c,
	0x00,0x80,0x05,0x52,0x00,0x02,0x19,0xc0,
	0x00,0x76,0x02,0x18,0xc3,0x9f,0xf3,0x4c,
	0x11,0xe0,0xfb,0x05,0x03,0x85,0xc3,0x47,
	0x00,0x38,0xd4,0x18,0x53,0x40,0x00,0x65,
	0xd3,0x00,0x00,0x23,0xd2,0x19,0xf3,0x18,
	0xc3,0x47,0x00,0x30,0xde,0x54,0x53,0x40,
	0x00,0xe9,0xd3,0x14,0x00,0x20,0xd2,0x0e,
	0xf3,0x18,0x03,0x85,0x05,0x6b,0x70,0x2c,
	0x05,0x6b,0x60,0x28,0xb3,0x3c,0x78,0x0c,
	0xb3,0x04,0x00,0x10,0xeb,0x24,0x70,0x0d,
	0x50,0x07,0x60,0x0c,0xb3,0x38,0xb3,0x78,
	0xb2,0x01,0xef,0x1c,0x07,0xc5,0x00,0x00,
	0x00,0x00,0x00,0x00,0xc3,0x9f,0xf3,0x4c,
	0x11,0xe0,0xfb,0x31,0x03,0x85,0x05,0x6b,
	0x72,0xe8,0x72,0x81,0xb0,0x7c,0x78,0x01,
	0x00,0x10,0xeb,0x4a,0xb0,0x44,0x62,0xc1,
	0xc0,0x4a,0xc0,0x8b,0xc2,0x20,0x12,0x1e,
	0x00,0x6f,0x42,0x3c,0xc0,0xc8,0x22,0xc8,
	0x05,0x6b,0x62,0xe8,0xf3,0x5e,0x00,0x21,
	0x70,0x34,0x30,0x0b,0xf7,0x4a,0x00,0x0c,
	0x03,0x85,0x00,0x00,0xc0,0x00,0x00,0x21,
	0xd0,0x2c,0x70,0x00,0xd1,0xc0,0x10,0x20,
	0xfb,0x54,0x07,0xc5,0xd1,0xc1,0x10,0x21,
	0xeb,0x5b,0xd1,0xc3,0x10,0x22,0xeb,0x5b,
	0x00,0x0c,0x11,0xca,0x11,0xcc,0x07,0xc5,
	0x01,0x46,0x00,0x06,0x00,0x6d,0xd1,0x32,
	0xa1,0x36,0x00,0x0b,0x7d,0x01,0xb0,0x7c,
	0x00,0xed,0xd1,0x32,0xa1,0x36,0x00,0x0b,
	0x6d,0x02,0x00,0x06,0x00,0xc6,0xb0,0xbc,
	0xb0,0xc4,0xef,0x5e,0x07,0xc5,0x00,0x00,
	0x00,0x00,0x00,0x00,0xe1,0xf6,0xe2,0x34,
	0xe1,0x32,0xe2,0x06,0x0f,0x87,0xe0,0x40,
	0x0c,0xc5,0x0c,0x85,0x00,0x0c,0x00,0x0c,
	0xe3,0xa6,0xe3,0xb0,0xe3,0xa1,0xe1,0xe3,
	0x00,0x0c,0xe1,0xe9,0x00,0x76,0xd8,0x01,
	0xa0,0x38,0x00,0x31,0xd0,0x01,0xa0,0x37,
	0xe0,0x12,0x02,0x86,0x0b,0x92,0x03,0x91,
	0xe9,0xdf,0x0f,0x87,0x0b,0x91,0x03,0x92,
	0xf9,0xdb,0x00,0xc6,0x01,0x86,0x01,0x46,
	0x04,0x05,0x01,0x22,0xd0,0x40,0xa0,0x40,
	0x00,0x6d,0xd0,0x68,0xe1,0xd0,0x00,0x76,
	0xdf,0x81,0xa0,0x38,0x00,0xa3,0xd0,0x60,
	0xe1,0xd0,0x00,0x70,0xd0,0x00,0xa0,0x38,
	0xb0,0x3f,0xa0,0x37,0x80,0x3f,0xe1,0xf4,
	0xb9,0xbc,0x03,0x1a,0xfa,0x00,0x01,0x20,
	0xd1,0xe0,0xa1,0xc0,0xd1,0xc0,0xb1,0xc1,
	0xa1,0xc1,0x0f,0x87,0xdf,0xc1,0x00,0x27,
	0xdf,0xaf,0x00,0x27,0xdf,0x29,0x0f,0x87,
	0xce,0x40,0x03,0x51,0xfa,0x2a,0x35,0x7a,
	0xe6,0x28,0xd1,0xc1,0x03,0x1c,0xfa,0x2b,
	0x0d,0xca,0x7c,0x7b,0x2e,0xfa,0x00,0x27,
	0xd0,0x3f,0x40,0x3b,0xfa,0x1f,0x00,0x0c,
	0x00,0x0c,0x2e,0xc0,0x00,0x0c,0x00,0x0c,
	0x30,0x3b,0xee,0x1f,0x00,0x0c,0x00,0x0c,
	0xce,0xc0,0x00,0x06,0x99,0x77,0x02,0x93,
	0xea,0x26,0xd2,0x03,0x04,0xee,0x62,0x04,
	0xc0,0x39,0x0f,0x87,0x07,0x50,0x25,0x7a,
	0xd1,0xc0,0x00,0x0c,0x00,0x0c,0x04,0x6e,
	0xd9,0x7c,0x00,0x0a,0x7c,0x65,0x11,0xe0,
	0xfa,0x10,0xe2,0x1f,0xc5,0xc0,0x0b,0x9b,
	0x0b,0xd7,0x16,0x20,0xe6,0x74,0x03,0x93,
	0xea,0x74,0x16,0xe0,0xea,0x74,0x84,0x10,
	0xc2,0x0e,0x12,0x16,0x00,0x2f,0x42,0x3f,
	0xc9,0x58,0x19,0x41,0x03,0xd5,0xea,0x47,
	0xb9,0x7f,0x00,0x30,0xd0,0x02,0x22,0x00,
	0x0e,0x98,0xe6,0x74,0xc2,0x0e,0x00,0x2f,
	0x42,0x3f,0x00,0x30,0xd0,0x02,0x22,0x00,
	0x32,0x25,0xf6,0x73,0xc2,0x1b,0xd2,0x43,
	0x42,0x5b,0x32,0x09,0xb2,0x74,0xa2,0x55,
	0x04,0x30,0xd0,0x0d,0x10,0x02,0x84,0xd0,
	0x00,0x0a,0x75,0x48,0x00,0x06,0x8c,0x50,
	0x99,0x55,0x00,0x21,0x49,0x7f,0x02,0x90,
	0xea,0x69,0xd6,0xc0,0xe2,0x74,0x26,0xe5,
	0x00,0x0c,0x00,0x0c,0x30,0x1b,0xf6,0x71,
	0x00,0x0c,0x00,0x0c,0x36,0xc0,0x93,0x95,
	0xe2,0x3d,0x86,0x15,0x00,0x21,0xd9,0x6c,
	0x00,0xfc,0xd0,0x00,0xc1,0xc0,0x00,0x2f,
	0x41,0xff,0x31,0xd8,0xef,0x6d,0xea,0x7f,
	0x06,0x97,0x10,0x16,0x30,0x18,0xb0,0x3d,
	0xe7,0x6d,0x10,0x22,0xee,0x8a,0x03,0xd2,
	0xeb,0x6d,0x07,0x9b,0x07,0xd7,0xe3,0x73,
	0xa9,0x50,0xa3,0xd5,0x07,0x9b,0xc1,0xd2,
	0x11,0xdd,0xc2,0x07,0x21,0xcb,0x04,0x4a,
	0x74,0x47,0xc9,0x51,0x0a,0x9f,0x06,0xd0,
	0x22,0x0c,0x09,0x4a,0x74,0x88,0xe3,0x73,
	0x71,0xcd,0xc9,0x47,0x02,0xd7,0xea,0xa1,
	0x0a,0xd7,0x33,0x65,0xe2,0x9a,0x02,0xd6,
	0xea,0xaa,0x03,0xd7,0xfa,0xb2,0x80,0x50,
	0xc9,0x51,0x06,0xd0,0x09,0x4a,0x75,0x93,
	0x73,0xd0,0xc9,0x4f,0x02,0x9d,0xea,0xb1,
	0x13,0xd2,0x34,0x0f,0xe2,0xaa,0xb4,0x3c,
	0xc2,0x07,0xc2,0x47,0xd0,0x1f,0x12,0x50,
	0x12,0x18,0x41,0xc0,0x42,0x00,0x42,0x40,
	0x22,0xc7,0x23,0x08,0x24,0xc9,0xd1,0xc0,
	0x02,0xe3,0xd0,0x00,0xc9,0x4b,0x02,0x96,
	0xea,0xc5,0xb1,0xff,0x22,0xc0,0xc9,0x4c,
	0x03,0xd2,0xfa,0xcc,0x02,0x96,0xea,0xd2,
	0x23,0x00,0xe2,0xd2,0x04,0xe7,0x72,0x74,
	0x32,0x65,0xb2,0x60,0xee,0xd2,0xb1,0xfe,
	0xc9,0x53,0x02,0x96,0xea,0xd7,0xb1,0xfc,
	0x24,0xc0,0xb3,0x7c,0x03,0xd2,0xeb,0x71,
	0x11,0xe0,0xfa,0xdf,0x03,0xd7,0xeb,0x71,
	0xe3,0x6d,0xd2,0x07,0x42,0x12,0xc9,0x47,
	0x19,0x67,0xea,0xe6,0x12,0x27,0xfb,0x1f,
	0x14,0x9d,0x14,0x83,0x54,0xa5,0x04,0xe7,
	0xd1,0xcc,0x03,0x90,0xea,0xf2,0x03,0xd4,
	0xfa,0xf5,0x04,0xe8,0xd1,0xc8,0xe2,0xf5,
	0x03,0xd5,0xea,0xf5,0xb1,0xfc,0x70,0x07,
	0xc2,0x40,0xb0,0x3c,0x70,0x00,0x0f,0xef,
	0x40,0x3f,0xfb,0x15,0xc1,0xc9,0xb1,0xfc,
	0x71,0xc7,0x11,0xd0,0x04,0xe7,0x72,0x3c,
	0x32,0x07,0xeb,0x6d,0x0b,0xd2,0x11,0xc3,
	0x04,0xe2,0x21,0xe4,0x72,0xc7,0xb1,0xfc,
	0x73,0x07,0x04,0xe8,0x72,0x4c,0x22,0xc9,
	0x23,0x09,0x03,0xd5,0xeb,0x13,0xb2,0xfc,
	0xb3,0x3c,0xc4,0xcb,0xe3,0x71,0x04,0xe8,
	0x62,0x44,0x04,0xac,0x20,0x10,0x60,0x07,
	0x04,0xe8,0x60,0x00,0x19,0x67,0xeb,0x27,
	0xe3,0x40,0x22,0x25,0x14,0x9d,0x14,0x83,
	0x54,0x88,0x12,0x27,0xfb,0x3e,0x04,0xe8,
	0x72,0x44,0x04,0xe7,0xd2,0x08,0x03,0x90,
	0xeb,0x2d,0x03,0xd4,0xeb,0x3e,0x71,0xc8,
	0x11,0xe0,0xfb,0x34,0x62,0x48,0xb2,0x04,
	0x62,0x48,0xe3,0x3b,0xb1,0xfc,0xc2,0x09,
	0x04,0xac,0x32,0x10,0x62,0x07,0x04,0xe7,
	0x62,0x48,0xb2,0x7c,0xd2,0x00,0x62,0x09,
	0x04,0xe8,0x70,0x00,0x72,0x40,0x02,0xe4,
	0xd0,0x00,0xd2,0x01,0x42,0x09,0xfb,0x49,
	0xd2,0x20,0x32,0x00,0xc0,0x08,0x12,0x5f,
	0x12,0x41,0xc2,0x09,0x32,0x00,0x02,0x91,
	0xeb,0x52,0xc3,0x09,0x04,0xe7,0x63,0x34,
	0x02,0x90,0xeb,0x5f,0x04,0xe7,0xd1,0xf0,
	0x72,0x47,0x62,0x07,0x32,0xc9,0x02,0xe4,
	0x32,0xc0,0xff,0x5e,0x22,0xc8,0xe3,0x5f,
	0xc2,0xc8,0x02,0x92,0xeb,0x6b,0x04,0xe7,
	0xd1,0xf8,0x72,0x47,0x62,0x07,0x34,0xc9,
	0x02,0xe4,0x34,0xc0,0xff,0x6a,0x22,0x13,
	0xc4,0xc8,0x03,0xd7,0xeb,0x71,0x00,0x21,
	0xd0,0x02,0xa0,0x10,0x80,0x55,0x03,0x9b,
	0xfb,0x9e,0xb1,0x80,0xeb,0x9c,0xd0,0x20,
	0xb0,0x01,0xfb,0x76,0x03,0x9b,0xfb,0x7d,
	0xd0,0x20,0xb0,0x01,0xfb,0x7b,0x90,0x16,
	0x10,0x1f,0x00,0x2f,0x40,0x3f,0x30,0x0a,
	0xff,0x9c,0xc2,0x06,0xb2,0x30,0x85,0xd0,
	0x02,0x0b,0x75,0x48,0xb2,0x34,0x72,0x08,
	0x01,0x30,0xd0,0x3c,0x83,0x3a,0x89,0xbb,
	0x83,0x7a,0x87,0x50,0x00,0x0a,0x75,0x88,
	0x03,0x0b,0x7e,0xc6,0x00,0x06,0xa1,0xe4,
	0x86,0x90,0x92,0x95,0x00,0x2f,0x42,0xbf,
	0x02,0x0a,0x75,0x09,0x03,0x9b,0xfa,0x9a,
	0xb6,0x3f,0xc0,0x17,0x0f,0x87,0x81,0x38,
	0x81,0x37,0x00,0x67,0xd0,0x58,0xe1,0xd0,
	0x00,0xaf,0xd0,0x40,0xe1,0xd0,0x00,0x00,
	0x01,0x46,0x00,0x7f,0xdf,0xff,0xa0,0x38,
	0x00,0x7f,0xdf,0xfe,0xa0,0x37,0x80,0x3f,
	0x02,0x86,0xd0,0x00,0xd0,0x40,0xd0,0x80,
	0xd0,0xc0,0xd1,0x00,0xd1,0x40,0xd1,0x80,
	0xd1,0xc0,0xd2,0x00,0xd2,0x40,0xd2,0x80,
	0xd2,0xc0,0xd3,0x00,0xd3,0x40,0xd3,0x80,
	0xd3,0xc0,0xd4,0x00,0xd4,0x40,0xd4,0x80,
	0xd4,0xc0,0xd5,0x00,0xd5,0x40,0xd5,0x80,
	0xd5,0xc0,0xd6,0x00,0xd6,0x40,0xd6,0x80,
	0xd6,0xc0,0xd7,0x00,0xd7,0x40,0xd7,0x80,
	0xd7,0xc0,0x02,0x46,0xd0,0x00,0xd0,0x40,
	0xd0,0x80,0xd0,0xc0,0xd1,0x00,0xd1,0x40,
	0xd1,0x80,0xd1,0xc0,0xd2,0x00,0xd2,0x40,
	0xd2,0x80,0xd2,0xc0,0xd3,0x00,0xd3,0x40,
	0xd3,0x80,0xd3,0xc0,0xd4,0x00,0xd4,0x40,
	0xd4,0x80,0xd4,0xc0,0xd5,0x00,0xd5,0x40,
	0xd5,0x80,0xd5,0xc0,0xd6,0x00,0xd6,0x40,
	0xd6,0x80,0xd6,0xc0,0xd7,0x00,0xd7,0x40,
	0xd7,0x80,0xd7,0xc0,0x02,0x06,0xd0,0x00,
	0xd0,0x40,0xd0,0x80,0xd0,0xc0,0xd1,0x00,
	0xd1,0x40,0xd1,0x80,0xd1,0xc0,0xd2,0x00,
	0xd2,0x40,0xd2,0x80,0xd2,0xc0,0xd3,0x00,
	0xd3,0x40,0xd3,0x80,0xd3,0xc0,0xd4,0x00,
	0xd4,0x40,0xd4,0x80,0xd4,0xc0,0xd5,0x00,
	0xd5,0x40,0xd5,0x80,0xd5,0xc0,0xd6,0x00,
	0xd6,0x40,0xd6,0x80,0xd6,0xc0,0xd7,0x00,
	0xd7,0x40,0xd7,0x80,0xd7,0xc0,0xd8,0x00,
	0xd8,0x40,0xd8,0x80,0xd8,0xc0,0xd9,0x00,
	0xd9,0x40,0xd9,0x80,0xd9,0xc0,0xda,0x00,
	0xda,0x40,0xda,0x80,0xda,0xc0,0xdb,0x00,
	0xdb,0x40,0xdb,0x80,0xdb,0xc0,0xdc,0x00,
	0xdc,0x40,0xdc,0x80,0xdc,0xc0,0xdd,0x00,
	0xdd,0x40,0xdd,0x80,0xdd,0xc0,0xde,0x00,
	0xde,0x40,0xde,0x80,0xde,0xc0,0xdf,0x00,
	0xdf,0x40,0xdf,0x80,0xdf,0xc0,0x00,0xeb,
	0xd0,0x08,0x04,0xac,0xd0,0x54,0x30,0x40,
	0xd0,0x80,0x60,0x80,0xb0,0x3c,0xb0,0x44,
	0xec,0x91,0x00,0x22,0x78,0x2c,0x00,0x1a,
	0xe8,0x9f,0x00,0x2c,0xd0,0x1b,0x00,0x27,
	0xd0,0x77,0xa0,0x76,0xa0,0x34,0x00,0x26,
	0x70,0x24,0x04,0xea,0x60,0x04,0x00,0x26,
	0x70,0x20,0x04,0xea,0x60,0x00,0x00,0x28,
	0x70,0x1c,0x10,0x27,0xe8,0xae,0x10,0x28,
	0xe8,0xae,0xe0,0xb4,0x02,0x2c,0xd0,0x00,
	0x03,0x20,0x20,0x00,0x05,0x25,0x60,0x30,
	0x04,0xea,0x70,0x00,0x10,0x32,0xf8,0xbe,
	0x00,0x66,0xd0,0x68,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0x07,0xd1,0x00,0x28,
	0x70,0x1c,0x10,0x24,0xe8,0xd0,0x10,0x25,
	0xe8,0xd0,0x10,0x26,0xe8,0xd0,0x10,0x2a,
	0xe8,0xd0,0x10,0x2b,0xe8,0xd0,0x10,0x2c,
	0xe8,0xd0,0x10,0x28,0xe8,0xd0,0x0b,0xd1,
	0x00,0x20,0xdf,0x49,0x02,0x74,0xd0,0x18,
	0x02,0x70,0xd0,0x00,0x10,0x04,0xa0,0x39,
	0xf1,0x14,0xf2,0xfe,0x0c,0x30,0xd0,0x00,
	0x10,0x02,0xa0,0x0a,0x84,0x05,0xa0,0x06,
	0xa0,0x1b,0xa0,0x27,0x80,0x3f,0x80,0x27,
	0x80,0x1b,0x84,0x05,0x80,0x06,0x80,0x0a,
	0x80,0x3f,0x04,0x6e,0xd0,0x3c,0x00,0x20,
	0xd0,0x7c,0x00,0x4a,0x73,0x80,0x07,0xc9,
	0x00,0x0d,0x07,0xc9,0x00,0x0d,0x07,0xc9,
	0x00,0x0d,0x07,0xc9,0x00,0x0d,0xd0,0x2f,
	0xa0,0x29,0x80,0x2a,0x84,0x29,0x02,0xb0,
	0xd0,0x00,0xa0,0x2a,0x80,0x27,0x01,0x20,
	0xd0,0x00,0xa0,0x29,0xd0,0x13,0x10,0x0b,
	0xa0,0x2a,0x80,0x2b,0xd0,0x12,0x10,0x0b,
	0xa0,0x2a,0x80,0x6b,0x00,0x21,0xd0,0x01,
	0x84,0x22,0xa0,0x23,0x00,0xa6,0xd0,0x60,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xc1,0x5f,0x04,0xea,0x70,0x84,0x04,0xea,
	0x70,0xc0,0x00,0x26,0x71,0x2c,0x80,0x9f,
	0x80,0x3f,0x0b,0x96,0x10,0xf1,0xe9,0x5f,
	0x10,0xf0,0xe9,0x5f,0x10,0xe4,0xe9,0x5f,
	0x00,0xe7,0x78,0x28,0x00,0x13,0xe9,0x5f,
	0x10,0xa0,0xe9,0x2c,0x10,0xa2,0xf9,0x5f,
	0x10,0xe0,0xe9,0x2f,0x80,0x48,0x80,0xc8,
	0x00,0x26,0xd0,0x15,0xa0,0x26,0x00,0x26,
	0xd0,0x00,0xa0,0x1e,0x10,0xe2,0xf9,0x3a,
	0xd8,0x01,0xe1,0x3d,0x00,0x62,0xd0,0x04,
	0x78,0x00,0x04,0x13,0x04,0x53,0x04,0x56,
	0x00,0x21,0xd0,0x3f,0xa0,0x08,0x10,0xa2,
	0xf9,0x47,0x04,0x55,0x04,0x54,0xa8,0x09,
	0xf1,0xe7,0xd0,0x10,0x50,0x40,0x10,0x5c,
	0x10,0x44,0x87,0xc8,0xa0,0x49,0x83,0xdc,
	0x80,0xf5,0x00,0x22,0x78,0x2c,0x00,0x12,
	0xf9,0x5c,0x00,0x26,0x78,0x20,0x18,0x20,
	0xf9,0x5c,0x87,0x48,0x86,0x48,0x01,0x45,
	0x87,0x48,0x86,0xc8,0x01,0x45,0x80,0x48,
	0x10,0xa1,0xe9,0xa0,0xf1,0xe7,0x00,0x20,
	0xd0,0x01,0x50,0x40,0x81,0x66,0xa0,0x5e,
	0x06,0x30,0xd0,0x3b,0xa0,0x1c,0x80,0xf5,
	0x00,0x6c,0xd0,0x00,0x10,0xa0,0xf9,0x7c,
	0x10,0xf0,0xe9,0x78,0x10,0xf1,0xe9,0x78,
	0x00,0x22,0xd0,0x50,0x50,0x01,0xe1,0x87,
	0x00,0x22,0xd0,0x40,0x50,0x01,0xe1,0x87,
	0x10,0xf0,0xe9,0x84,0x10,0xf1,0xe9,0x84,
	0x00,0x20,0xd0,0x50,0x50,0x01,0xe1,0x87,
	0x00,0x20,0xd0,0x40,0x50,0x01,0xa0,0x26,
	0x10,0xf0,0xe9,0x8d,0x10,0xf1,0xe9,0x92,
	0xe1,0x96,0x83,0x24,0x80,0x3f,0x89,0x9f,
	0x80,0x3f,0xe1,0x96,0x81,0x24,0x80,0x3f,
	0x85,0xdf,0x80,0x3f,0x00,0x28,0xd0,0x14,
	0x70,0x00,0x10,0x08,0x00,0x21,0xd0,0x40,
	0x50,0x40,0x81,0xa6,0xa0,0x5e,0x01,0x45,
	0x10,0xf1,0xe9,0xbf,0x10,0xf0,0xe9,0xbf,
	0x10,0xf2,0xe9,0xd5,0x04,0x30,0xd0,0x2b,
	0xa0,0x1c,0x00,0x20,0xd0,0x06,0xa0,0x26,
	0x00,0x21,0xd0,0x10,0xa0,0x1e,0x10,0xe3,
	0xe9,0xb5,0x8f,0xf5,0x00,0x6d,0xd0,0x13,
	0xe1,0xb9,0xa1,0x1c,0x8a,0xf5,0x00,0x64,
	0xd0,0x23,0xa0,0x26,0xd8,0x3f,0x48,0x04,
	0x04,0x19,0xa8,0x1e,0x01,0x45,0x81,0xa6,
	0x0f,0x21,0xd0,0x00,0xa0,0x1e,0x10,0xf1,
	0xe9,0xca,0x83,0x24,0x80,0x3f,0x89,0x9f,
	0x80,0x3f,0xe1,0xce,0x81,0x24,0x80,0x3f,
	0x85,0xdf,0x80,0x3f,0xa1,0x1c,0x80,0xf5,
	0x00,0x24,0xd0,0x23,0xa0,0x26,0x80,0x1e,
	0x01,0x45,0x83,0x24,0x80,0x3f,0x89,0x9f,
	0x80,0x3f,0x81,0xa6,0x0e,0x21,0xd0,0x00,
	0xa0,0x1e,0x80,0xf5,0x00,0x64,0xd0,0x23,
	0xa0,0x26,0x80,0x1e,0x06,0x30,0xd0,0x3b,
	0x51,0x00,0xa1,0x1c,0x01,0x45,0xd0,0x40,
	0x00,0x26,0x78,0x28,0x00,0x20,0x48,0x0f,
	0x00,0x10,0xe9,0xf1,0x00,0x24,0xd0,0x00,
	0x50,0x40,0x00,0x11,0xe9,0xf6,0x00,0x22,
	0xd0,0x00,0x50,0x40,0x00,0x12,0xe9,0xfb,
	0x00,0x21,0xd0,0x00,0x50,0x40,0x00,0x13,
	0xe9,0xff,0xd0,0x20,0x50,0x40,0x07,0xc5,
	0x84,0x22,0x02,0x38,0xd0,0x00,0xa0,0x23,
	0x00,0x28,0x70,0xf4,0x80,0x22,0xa0,0xe3,
	0x00,0x28,0x71,0x30,0x81,0x22,0xa1,0x23,
	0xc0,0x03,0x30,0x04,0x05,0x6d,0x60,0x00,
	0x04,0xea,0x70,0x00,0x10,0x22,0xea,0x1b,
	0x10,0x24,0xea,0x30,0x00,0xf5,0xd0,0x00,
	0x05,0x6a,0x70,0x60,0xe2,0x46,0x04,0xeb,
	0x70,0x10,0x10,0x21,0xea,0x2b,0x01,0x46,
	0x02,0x46,0xc8,0x1a,0x02,0x06,0x00,0xc6,
	0x00,0x23,0xd0,0x60,0x0c,0x11,0xfe,0x2b,
	0x00,0xf0,0xd0,0x00,0xe2,0x2d,0x0c,0x20,
	0xd0,0x00,0x00,0x28,0xd0,0x40,0xe2,0x46,
	0x04,0xeb,0xd0,0x10,0x70,0x00,0x10,0x21,
	0xea,0x41,0x02,0x46,0xc8,0x1a,0x02,0x06,
	0x00,0x23,0xd0,0x60,0x0c,0x11,0xfe,0x41,
	0x00,0xf0,0xd0,0x00,0x00,0x28,0xd0,0x40,
	0xe2,0x46,0x00,0xf5,0xd0,0x00,0x04,0x20,
	0xd0,0x40,0x10,0x42,0x05,0x6a,0x60,0x54,
	0x05,0x6a,0x60,0x10,0x05,0x6a,0x60,0x0c,
	0x80,0xe2,0xa1,0x23,0x83,0x22,0xa1,0x23,
	0xd0,0x00,0x00,0x20,0xd0,0x90,0x30,0x02,
	0x10,0x02,0x80,0x62,0xa0,0x23,0x30,0xc4,
	0x00,0x27,0x70,0x3c,0x30,0xc0,0x80,0xa2,
	0xa0,0xe3,0xd0,0x40,0x05,0x6d,0x60,0x48,
	0x05,0x6c,0x60,0x64,0x05,0x6c,0x60,0x68,
	0x05,0x6c,0x60,0x70,0x00,0x2d,0x70,0x00,
	0x05,0x67,0x60,0x18,0x00,0x2d,0x70,0x20,
	0x05,0x67,0x60,0x1c,0x00,0x2e,0x70,0x00,
	0x05,0x67,0x60,0x20,0x00,0x28,0x70,0x1c,
	0x10,0x27,0xea,0x78,0x10,0x28,0xfa,0x80,
	0x05,0x65,0x70,0x30,0x05,0x67,0x60,0x24,
	0x05,0x65,0x70,0x34,0x05,0x67,0x60,0x28,
	0x05,0x67,0xd0,0x00,0x05,0x66,0x60,0x38,
	0x05,0x66,0x60,0x3c,0xd0,0x00,0x05,0x65,
	0x60,0x24,0x05,0x69,0x60,0x10,0x05,0x68,
	0x60,0x14,0x05,0x69,0x60,0x08,0x05,0x69,
	0x60,0x04,0x05,0x68,0x60,0x1c,0x05,0x66,
	0x60,0x08,0x05,0x66,0x60,0x0c,0x05,0x65,
	0x60,0x28,0x05,0x66,0x60,0x18,0x05,0x67,
	0x60,0x00,0x05,0x67,0x60,0x04,0x05,0x67,
	0x60,0x08,0x05,0x67,0x60,0x0c,0x05,0x67,
	0x60,0x10,0xd0,0x02,0x05,0x67,0x60,0x14,
	0x00,0x28,0x70,0x38,0x05,0x67,0x60,0x2c,
	0x00,0x2f,0xd0,0x70,0x20,0x01,0x05,0x67,
	0x60,0x30,0x00,0x28,0x70,0x3c,0x05,0x67,
	0x60,0x34,0x07,0xc5,0x00,0x29,0xd0,0x24,
	0x70,0xc0,0xc0,0x43,0x81,0x62,0xa0,0xe3,
	0x00,0x29,0xd0,0x20,0x71,0x00,0x82,0x62,
	0xa1,0x23,0x30,0x44,0x05,0x6d,0x60,0x44,
	0x82,0x22,0xa1,0x23,0x83,0x62,0xa1,0x23,
	0xd0,0x00,0xd0,0x90,0x30,0x02,0x10,0x02,
	0x81,0xa2,0xa0,0x23,0x30,0xc4,0x04,0xea,
	0x70,0x28,0x10,0x24,0xfa,0xd6,0x00,0x24,
	0xd0,0x00,0xe2,0xd8,0x05,0x25,0x70,0x30,
	0x30,0xc0,0x81,0xe2,0xa0,0xe3,0x05,0xa1,
	0xd0,0xcc,0xd0,0x01,0x60,0x03,0x07,0xc5,
	0x00,0x28,0xd0,0x20,0x70,0x00,0x00,0x06,
	0x82,0xa2,0xa0,0x23,0x07,0x23,0xd0,0x00,
	0xd0,0x41,0x60,0x40,0xd0,0x40,0xb0,0x3c,
	0x60,0x40,0xd0,0x41,0xb0,0x3c,0x60,0x40,
	0xb0,0x3c,0x60,0x40,0xb0,0x3c,0x60,0x40,
	0xb0,0x3c,0x60,0x40,0xd0,0x40,0x01,0x46,
	0x0b,0x53,0x0b,0x54,0x06,0xe5,0x60,0x7c,
	0x00,0xc6,0x07,0xc5,0xd0,0x00,0x05,0x28,
	0x60,0x10,0x05,0x28,0x60,0x28,0x05,0x6c,
	0x60,0x20,0x05,0x6e,0x60,0x00,0x05,0x6e,
	0x60,0x04,0x05,0x29,0x60,0x18,0x00,0x2b,
	0x60,0x34,0x05,0x6c,0x60,0x10,0x05,0x6c,
	0x60,0x14,0x06,0xef,0x60,0x14,0x06,0xee,
	0x60,0x14,0xd0,0x01,0x05,0x29,0x60,0x10,
	0x05,0x26,0xd0,0x38,0x78,0x00,0x04,0x14,
	0x68,0x00,0x0b,0x9f,0xd0,0x14,0x05,0x28,
	0x60,0x30,0xd0,0x02,0x05,0x60,0x60,0x38,
	0x00,0xef,0xd0,0x08,0x05,0x28,0x60,0x14,
	0x05,0x28,0x60,0x18,0x00,0xef,0xd0,0x08,
	0x06,0xef,0x60,0x20,0x06,0xef,0x60,0x24,
	0x02,0x86,0xd7,0x80,0x02,0x06,0x07,0xc5,
	0x00,0x21,0xd0,0x10,0x05,0x6f,0x60,0x34,
	0x00,0x24,0xd0,0x0c,0x05,0x6f,0x60,0x38,
	0xd0,0x00,0x05,0x6f,0x60,0x3c,0x05,0x6f,
	0x60,0x04,0xd9,0x80,0xd0,0x02,0x04,0xee,
	0x60,0x04,0xd0,0x00,0x05,0x25,0x60,0x2c,
	0x00,0xa6,0xdb,0xe0,0x00,0x60,0xdc,0x1e,
	0x00,0xa1,0xd0,0x40,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0x22,0x70,0x38,
	0x10,0x20,0xfc,0x28,0x05,0xa1,0x60,0x38,
	0x05,0xab,0x60,0x14,0x05,0xab,0x60,0x18,
	0x00,0x22,0x70,0x3c,0x10,0x20,0xfc,0x32,
	0x05,0xa1,0x60,0x3c,0x05,0xab,0x60,0x1c,
	0x05,0xab,0x60,0x20,0x00,0x23,0x70,0x00,
	0x10,0x20,0xfc,0x38,0x05,0xa2,0x60,0x00,
	0x00,0x23,0x70,0x04,0x10,0x20,0xfc,0x3e,
	0x05,0xa2,0x60,0x04,0x00,0x23,0x70,0x14,
	0x10,0x21,0xe8,0x4c,0x10,0x22,0xe8,0x4a,
	0x04,0xea,0x70,0x00,0x10,0x21,0xe8,0x4c,
	0x10,0x22,0xe8,0x4c,0xd0,0x0e,0xe0,0x4d,
	0xd0,0x0f,0x05,0xa2,0x60,0x18,0xd0,0x02,
	0x05,0xaa,0x60,0x38,0x00,0xeb,0xd0,0x08,
	0x04,0xe9,0x60,0x0c,0x04,0xe9,0x60,0x08,
	0xd0,0x00,0x00,0x21,0x60,0x00,0x00,0x2a,
	0x60,0x2c,0x00,0x28,0x60,0x0c,0x04,0xee,
	0x60,0x18,0x04,0xee,0x60,0x1c,0x04,0xee,
	0x60,0x20,0x04,0xee,0x60,0x24,0x00,0x23,
	0xd8,0x20,0x04,0xea,0x68,0x20,0x02,0x46,
	0xc6,0xa0,0x02,0x06,0x04,0xea,0x78,0x28,
	0x18,0x22,0xe8,0x7a,0x18,0x24,0xe8,0x77,
	0x00,0x23,0xd8,0x00,0xe0,0x7c,0x00,0x22,
	0xd8,0x20,0xe0,0x7c,0x00,0x22,0xd8,0x00,
	0x04,0xea,0x68,0x24,0x02,0x46,0xc6,0x60,
	0x02,0x06,0x02,0x86,0xd7,0x60,0xd8,0x20,
	0x02,0x06,0x04,0xea,0x68,0x34,0x00,0x28,
	0x70,0x30,0x00,0x2a,0x60,0x00,0x04,0xea,
	0x70,0x00,0x10,0x22,0xe8,0x93,0x10,0x24,
	0xe8,0x93,0xf0,0x9a,0xe0,0xa3,0xf0,0x95,
	0xe0,0xa3,0x83,0xe2,0x98,0x23,0x04,0x1d,
	0xa8,0x23,0x07,0xc5,0x00,0xe7,0x78,0x28,
	0x00,0x14,0xe8,0x95,0x83,0xe2,0x98,0x23,
	0x08,0x1d,0xa8,0x23,0x07,0xc5,0x01,0x20,
	0xd0,0x20,0xa0,0x00,0x03,0xff,0xdf,0xff,
	0xa0,0x01,0x80,0x3f,0xf1,0x63,0x07,0x2c,
	0xd0,0x98,0x81,0x10,0x70,0x02,0xa0,0x15,
	0x80,0x3f,0x07,0x6b,0xd0,0x64,0x81,0xd0,
	0x07,0x2c,0xd0,0x30,0x70,0xc0,0xc0,0xc3,
	0x00,0xca,0x75,0x81,0x00,0x06,0xf2,0x10,
	0xd0,0x10,0x07,0xa4,0x60,0x28,0x00,0x22,
	0x70,0x5c,0xd0,0x1f,0x10,0x5d,0xc0,0x81,
	0x10,0x58,0xc1,0x01,0x40,0x40,0x40,0x80,
	0x11,0x19,0x11,0x05,0x21,0x02,0x11,0x05,
	0x21,0x01,0x11,0x05,0x21,0x03,0x11,0x01,
	0xb1,0x3f,0xd0,0x28,0xa0,0x10,0xa1,0x15,
	0x80,0x3f,0x01,0x46,0x01,0x20,0xd0,0x70,
	0xa0,0x40,0x80,0x3f,0x00,0xe7,0x78,0x28,
	0x00,0x15,0xe8,0xee,0x05,0x6e,0x70,0x18,
	0x00,0x23,0xd0,0x50,0x70,0x41,0x10,0x47,
	0x20,0x40,0x98,0x01,0x00,0x16,0xe8,0xeb,
	0x00,0x21,0xd8,0x00,0x50,0x60,0xa0,0x41,
	0x80,0x3f,0xe0,0xf0,0x83,0x01,0x80,0x3f,
	0x01,0x20,0xd0,0x50,0xa0,0x40,0x80,0x3f,
	0x00,0x24,0xd0,0x6b,0x00,0xfc,0xd0,0x00,
	0x50,0x40,0xa0,0x41,0x80,0x3f,0x08,0x70,
	0xd0,0x01,0xd0,0x41,0xa0,0x02,0xa0,0x43,
	0x00,0xc6,0xf1,0x24,0x00,0x2d,0xd0,0x40,
	0x00,0x2b,0xd0,0x94,0x60,0x42,0x70,0x81,
	0x05,0x25,0xd0,0x74,0x60,0x81,0x05,0xe6,
	0xd0,0x78,0x60,0x81,0x00,0x2d,0xd0,0x60,
	0x70,0x81,0x05,0x25,0xd0,0x78,0x60,0x81,
	0x00,0x2e,0xd0,0x40,0x70,0x81,0x05,0x26,
	0xd0,0x44,0x60,0x81,0x00,0x71,0xd5,0x02,
	0xa0,0x38,0x00,0xc6,0x00,0xa6,0xd0,0x68,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x0b,0x98,0x0b,0xd6,0x00,0x28,0x70,0x38,
	0x05,0xe0,0x60,0x28,0x05,0xe0,0x60,0x20,
	0x04,0xea,0x70,0x00,0x10,0x24,0xf9,0x36,
	0x07,0x55,0xd0,0x00,0x06,0xe3,0x60,0x24,
	0xd0,0x00,0xe1,0x38,0xdd,0x80,0xd0,0x03,
	0x05,0xe0,0x60,0x34,0xd0,0x00,0x05,0xaf,
	0x60,0x34,0x05,0xe0,0x60,0x2c,0x05,0xe1,
	0x60,0x0c,0x05,0xe5,0x60,0x18,0x05,0xe1,
	0x60,0x08,0x05,0xaf,0x60,0x1c,0x05,0xe1,
	0x60,0x2c,0x0f,0xff,0xdf,0xff,0x05,0xe2,
	0x60,0x1c,0x05,0xe6,0xd0,0x14,0x78,0x00,
	0x08,0x13,0x68,0x00,0x05,0xe7,0xd0,0x24,
	0x05,0xe7,0x60,0x20,0xb0,0x3c,0x05,0xe7,
	0x60,0x24,0xd0,0x00,0x00,0x22,0xd0,0x44,
	0x05,0xe7,0xd0,0xa8,0x60,0x02,0xb0,0xbc,
	0xb0,0x41,0xf9,0x5e,0x07,0xc5,0x01,0x46,
	0x00,0x31,0xd4,0x00,0xa0,0x10,0x00,0x21,
	0xd0,0x3c,0x78,0x00,0x00,0x22,0xd0,0x00,
	0x00,0x12,0xe9,0x71,0x00,0x21,0xd0,0x40,
	0x50,0x01,0x00,0x29,0x70,0x54,0x10,0x49,
	0x50,0x01,0x8f,0x10,0xa0,0x15,0xd8,0x40,
	0x04,0x93,0x04,0x9d,0x00,0x10,0xe9,0x7d,
	0x04,0x96,0x03,0xd1,0xe9,0xbe,0x04,0x99,
	0x00,0x11,0xe9,0x8a,0x04,0x97,0x80,0x90,
	0xa8,0x55,0x87,0xd0,0x02,0x7c,0xd0,0x02,
	0xa0,0x15,0xe1,0x90,0x80,0x90,0xa8,0x55,
	0x87,0xd0,0x00,0x60,0xd0,0x04,0xa0,0x15,
	0x01,0x3e,0xd1,0x3b,0xa0,0x15,0x03,0x77,
	0xdc,0x83,0xa0,0x15,0x89,0x10,0x00,0x2d,
	0xd0,0x13,0xa0,0x15,0x85,0x90,0x00,0x22,
	0x70,0x68,0x10,0x60,0xf9,0xa1,0x00,0x22,
	0xd0,0x43,0x10,0x41,0x00,0x20,0x50,0x41,
	0x10,0x4d,0xa0,0x55,0x89,0x90,0x00,0x28,
	0xd0,0x0c,0x00,0x2b,0xd0,0x4f,0x10,0x4c,
	0x50,0x01,0x07,0x25,0xd0,0x60,0x60,0x01,
	0x00,0x22,0x70,0x68,0x10,0x60,0xf9,0xb6,
	0x00,0x22,0xd0,0x43,0x00,0x2b,0xd0,0x10,
	0x20,0x01,0x10,0x4a,0x20,0x01,0x8b,0x90,
	0xa0,0x15,0xe1,0xf8,0x00,0x11,0xe9,0xc8,
	0x04,0x97,0x80,0x90,0xa8,0x55,0x87,0xd0,
	0x00,0xa0,0xd0,0x05,0xa0,0x15,0xe1,0xce,
	0x80,0x90,0xa8,0x55,0x87,0xd0,0x01,0x20,
	0xd0,0x07,0xa0,0x15,0x01,0x32,0xd5,0x0c,
	0xa0,0x15,0x03,0x76,0xd4,0x79,0xa0,0x15,
	0x89,0x10,0x00,0x2d,0xd0,0x09,0xa0,0x15,
	0x00,0x22,0x70,0x68,0x10,0x60,0xf9,0xde,
	0x00,0x21,0xd0,0x79,0x10,0x41,0x00,0x20,
	0x50,0x41,0x85,0x90,0x10,0x4d,0xa0,0x55,
	0x89,0x90,0x0b,0x3f,0xd1,0xe4,0xa0,0x15,
	0x07,0x25,0xd0,0x60,0x60,0x01,0x00,0x22,
	0x70,0x68,0x10,0x60,0xf9,0xf1,0x00,0x21,
	0xd0,0x79,0x00,0x2b,0xd0,0x10,0x20,0x01,
	0x10,0x4a,0x20,0x01,0x8b,0x90,0xa0,0x15,
	0x01,0x38,0xd0,0x40,0xa0,0x10,0x05,0xe6,
	0xd0,0x14,0xd0,0x40,0x60,0x40,0x00,0xb8,
	0xd2,0x00,0xa0,0x10,0x07,0xd4,0x00,0x23,
	0xd0,0x7f,0x07,0x25,0xd0,0x34,0x60,0x40,
	0x07,0x25,0xd0,0x38,0x60,0x40,0x07,0x25,
	0xd0,0x3c,0x60,0x40,0x00,0xc6,0x07,0xc5,
	0x00,0xf2,0xda,0x00,0x05,0x26,0x60,0x14,
	0xd0,0x00,0x05,0x26,0x60,0x18,0x00,0x28,
	0x70,0x1c,0x10,0x21,0xea,0x2a,0x10,0x22,
	0xea,0x38,0x10,0x23,0xea,0x46,0x10,0x24,
	0xea,0x54,0x10,0x25,0xea,0x5b,0x10,0x26,
	0xea,0x62,0x10,0x27,0xea,0x69,0x10,0x28,
	0xea,0x7e,0x07,0xc5,0x01,0x74,0xd6,0x00,
	0xc0,0x40,0xc1,0x41,0x06,0x31,0xd6,0x00,
	0xc0,0x80,0x05,0xb8,0xd1,0x00,0xc0,0xc0,
	0x02,0x34,0xd4,0x00,0xc1,0x00,0xe2,0x83,
	0x01,0x74,0xd6,0x00,0xc0,0x40,0xc1,0x41,
	0x06,0x31,0xd6,0x00,0xc0,0x80,0x05,0xb8,
	0xd1,0x00,0xc0,0xc0,0x02,0x34,0xd4,0x00,
	0xc1,0x00,0xe2,0x83,0x01,0x74,0xd6,0x00,
	0xc0,0x40,0xc1,0x41,0x06,0x31,0xd6,0x00,
	0xc0,0x80,0x05,0xb8,0xd1,0x00,0xc0,0xc0,
	0x01,0xf3,0xd6,0x00,0xc1,0x00,0xe2,0x83,
	0x01,0xb5,0xd4,0x00,0xc0,0x40,0x00,0xf2,
	0xda,0x00,0xc1,0x40,0xe2,0x2e,0x01,0xb5,
	0xd4,0x00,0xc0,0x40,0x00,0xf2,0xda,0x00,
	0xc1,0x40,0xe2,0x3c,0x01,0xb5,0xd4,0x00,
	0xc0,0x40,0x00,0xf2,0xda,0x00,0xc1,0x40,
	0xe2,0x4a,0x01,0x74,0xd6,0x00,0xc0,0x40,
	0xc1,0x41,0x06,0x31,0xd6,0x00,0xc0,0x80,
	0x05,0xb8,0xd1,0x00,0xc0,0xc0,0x0d,0xb8,
	0xd1,0x00,0xc1,0x00,0xd0,0x01,0x05,0x26,
	0x60,0x18,0x01,0xb5,0xd4,0x00,0x05,0x26,
	0x60,0x14,0xe2,0x83,0x01,0xb5,0xd4,0x00,
	0xc0,0x40,0xc1,0x40,0xe2,0x6d,0x07,0x27,
	0x60,0x6c,0x07,0x27,0x60,0x70,0x07,0x27,
	0x61,0x74,0x04,0xe8,0x60,0xa0,0x04,0xe8,
	0x60,0xe4,0x04,0xe8,0x61,0x28,0x07,0xc5,
	0x03,0xd1,0xe8,0x16,0x05,0x2f,0xd0,0x4c,
	0x00,0x6c,0xd0,0x08,0x60,0x01,0x05,0xe6,
	0xd0,0x5c,0x00,0x20,0xd0,0x28,0x60,0x01,
	0x05,0xe6,0xd0,0x60,0x00,0x2a,0xd0,0x19,
	0x60,0x01,0x07,0x26,0xd0,0x5c,0x00,0x24,
	0xd0,0x1e,0x60,0x01,0xf0,0x1d,0x00,0xa6,
	0xd0,0x70,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x20,0xd0,0xc0,0xd1,0x00,
	0x01,0xb5,0xd4,0x00,0xc1,0x40,0x00,0x20,
	0xd1,0xa3,0x04,0xe2,0xd0,0xa4,0xc0,0x42,
	0x61,0x01,0xb0,0x7c,0x61,0x41,0xc0,0x06,
	0x30,0x03,0xfc,0x3b,0x02,0xe4,0x21,0x00,
	0xd0,0x01,0x40,0x03,0x10,0x20,0xe8,0x37,
	0x02,0xe3,0x21,0x60,0xe0,0x38,0xb1,0x60,
	0xb0,0xff,0xb0,0xb8,0xe0,0x27,0x00,0x20,
	0xd0,0xc0,0x04,0xe8,0x70,0x28,0xc1,0x00,
	0xc1,0x40,0x00,0x32,0xdd,0x00,0x00,0x2a,
	0x71,0x90,0xc0,0x46,0x21,0x40,0x04,0xac,
	0xd0,0x94,0x00,0x2a,0x71,0x90,0x11,0x81,
	0xc0,0x42,0xc8,0x05,0xd0,0x03,0x40,0x03,
	0x10,0x21,0xec,0x53,0x04,0x10,0x68,0x01,
	0x00,0x20,0xd0,0x23,0x20,0x06,0x30,0x03,
	0xfc,0x6a,0xd0,0x03,0x40,0x03,0x10,0x20,
	0xe8,0x64,0x10,0x21,0xe8,0x66,0x10,0x22,
	0xe8,0x64,0x08,0x6b,0x21,0x5c,0xe0,0x67,
	0xb1,0x7c,0xe0,0x67,0xb1,0x64,0xb0,0xff,
	0xb0,0xb8,0xe0,0x4c,0x04,0xac,0xd0,0x94,
	0xd0,0xc0,0x00,0x2a,0x71,0x90,0x11,0x81,
	0xd0,0x44,0x20,0x42,0xb0,0xb8,0xc0,0x02,
	0x04,0xac,0x30,0x10,0x60,0x01,0xb0,0xff,
	0x00,0x20,0xd0,0x23,0x20,0x06,0x30,0x03,
	0xec,0x70,0xd0,0x44,0x20,0x42,0xd0,0x00,
	0x60,0x01,0xb0,0x44,0x04,0xe7,0x60,0x48,
	0x04,0xac,0xd0,0x14,0x04,0xe7,0x60,0x04,
	0xd0,0x40,0x04,0xe7,0x60,0x4c,0x04,0xe7,
	0x60,0x54,0x04,0xe7,0x60,0x50,0x04,0xe7,
	0x60,0x58,0x07,0xc5,0x00,0x20,0xd0,0x12,
	0x00,0xa7,0xd0,0x40,0x00,0x05,0x00,0x0c,
	0x00,0xee,0xd0,0x72,0xa0,0x76,0x9a,0xf4,
	0x00,0xee,0xd0,0x5e,0xa0,0x76,0x95,0xb4,
	0x00,0xee,0xd0,0x79,0xa0,0x76,0x90,0xb4,
	0xb0,0xbf,0x00,0x6e,0xd0,0x79,0xa0,0x76,
	0xa0,0xb4,0xd0,0x60,0xc0,0xeb,0x10,0xc1,
	0x20,0x43,0x01,0x86,0x00,0x48,0x00,0x6e,
	0xd0,0x33,0xa0,0x36,0xd0,0x00,0x30,0x2b,
	0x00,0x8d,0x08,0x49,0xc0,0x42,0x10,0x80,
	0xb0,0x3a,0x10,0x40,0xb0,0x3a,0x10,0x80,
	0xd0,0x3f,0x40,0x40,0x50,0x42,0x00,0x24,
	0xd0,0xa4,0x70,0x82,0x10,0xa2,0xf8,0x2f,
	0x00,0xef,0xd0,0x00,0x40,0x40,0xa0,0x74,
	0x00,0x8d,0x10,0xa0,0xe8,0x37,0x0a,0x09,
	0x00,0x8d,0xc0,0x82,0xa0,0xb4,0x15,0xa0,
	0xf8,0x43,0x08,0x49,0x00,0x8d,0x10,0xa0,
	0xe8,0x43,0x0a,0x09,0x00,0x8d,0x00,0x6e,
	0xd0,0x75,0xa0,0x76,0xa0,0xb4,0x08,0x49,
	0x00,0x8d,0x10,0xa0,0xe8,0xcc,0x08,0x49,
	0x00,0x6e,0xd0,0x76,0xa0,0x76,0x04,0xcd,
	0xc4,0xd3,0xa4,0xf4,0x14,0xe0,0xe8,0xc6,
	0xc0,0x6b,0xd0,0xc0,0xd7,0x80,0x08,0x49,
	0x00,0x8d,0x17,0x81,0x57,0x82,0x20,0xc2,
	0xb0,0x41,0xec,0x53,0x10,0xe1,0xec,0x5f,
	0x08,0x20,0xdf,0xcb,0xe1,0x83,0xd0,0x05,
	0x30,0x2b,0x17,0x80,0xa7,0xb4,0x15,0xa2,
	0xf8,0x69,0x08,0x49,0x00,0x8d,0xc0,0x82,
	0xa0,0xb4,0x0a,0x09,0xd0,0x8f,0x00,0xcd,
	0xc1,0x03,0x10,0xdc,0x41,0x02,0x00,0x6f,
	0xd0,0xb6,0xa0,0xb6,0xa0,0xf4,0xd0,0xa5,
	0xcb,0xc3,0x1b,0xc1,0x2b,0xc3,0x1b,0xc2,
	0x2b,0xc2,0xb1,0x3d,0xcc,0x04,0x1c,0x01,
	0x2c,0x04,0x1c,0x02,0x2c,0x02,0xc2,0x84,
	0x32,0x83,0xd2,0xc0,0xc0,0x44,0x30,0x43,
	0x10,0x61,0xfc,0x98,0xd8,0x1f,0x28,0x01,
	0xd0,0x00,0x00,0x20,0xd0,0x70,0x0c,0x11,
	0xe4,0x95,0xf8,0x91,0x07,0xc9,0x02,0xcd,
	0xe0,0x98,0x08,0x89,0xb8,0x02,0x00,0x0d,
	0x10,0x0f,0x08,0x08,0x02,0xcd,0x52,0xc0,
	0xb0,0xff,0x30,0xc4,0xc8,0x0b,0xd0,0x12,
	0x30,0x0a,0x10,0x30,0xe4,0xa1,0x12,0xcf,
	0xb0,0x0f,0x12,0xc0,0x00,0x10,0xe8,0xa5,
	0xb2,0x81,0x18,0x1f,0xb0,0xff,0xe4,0xa2,
	0x00,0x6f,0xd0,0x77,0xa0,0x76,0x12,0xa0,
	0xfc,0xaf,0x12,0xb2,0xfc,0xb2,0x08,0x20,
	0xdf,0xc3,0xe1,0x83,0xa2,0xb4,0x06,0x22,
	0xd0,0xfc,0x62,0xc3,0x00,0x6f,0xd0,0x4d,
	0xa0,0x76,0xab,0xf4,0xac,0x34,0xc0,0x6f,
	0xf1,0x89,0xc3,0x41,0xc0,0x70,0xb0,0x41,
	0xf1,0x89,0xb0,0x7f,0xc3,0x81,0xa3,0x74,
	0xa3,0xb4,0xe0,0xe4,0x00,0x6e,0xd0,0x77,
	0xa0,0x76,0xd7,0x80,0xa7,0xb4,0xe0,0xdd,
	0x00,0xee,0xd0,0x79,0xa0,0x76,0x90,0x74,
	0x10,0x60,0xf8,0xd5,0x08,0x20,0xdf,0xc9,
	0xe1,0x83,0x00,0xee,0xd0,0x76,0xa0,0x76,
	0x94,0xf4,0x97,0xb4,0x06,0x22,0xd0,0xfc,
	0x72,0xc3,0x00,0xef,0xd0,0x4d,0xa0,0x76,
	0x9b,0xf4,0x9c,0x34,0x93,0x74,0x93,0xb4,
	0x14,0xe0,0xe9,0x5c,0xc8,0x1e,0xdb,0x80,
	0xd1,0x40,0xc8,0x4b,0x18,0x01,0x00,0x15,
	0xe9,0x36,0x08,0x49,0x00,0x4d,0x10,0x60,
	0xf8,0xf6,0xf1,0x20,0x70,0x41,0x10,0x60,
	0xe5,0x81,0xe1,0x36,0x08,0x89,0x00,0xef,
	0xd0,0x77,0x00,0x06,0xa0,0x76,0x92,0xb4,
	0x00,0x66,0xd0,0x5c,0x00,0x06,0xa0,0x76,
	0xc1,0x4a,0xd3,0x0f,0xb1,0x41,0x00,0xcd,
	0x0a,0x09,0xc0,0x43,0x10,0x41,0x20,0xc1,
	0xb0,0xc3,0x11,0x60,0xe9,0x1e,0x01,0x0d,
	0x0a,0x09,0xc0,0x44,0x10,0x5c,0x41,0x0c,
	0x10,0x6f,0xe9,0x13,0xb1,0x30,0x20,0x43,
	0x10,0x45,0x51,0x01,0x80,0x34,0xa1,0x34,
	0x18,0x41,0x00,0xd1,0xf9,0x16,0xb1,0x41,
	0xed,0x0b,0xe5,0x29,0x01,0x0d,0xe1,0x0d,
	0xc1,0x2e,0x11,0x03,0xc0,0x44,0x11,0x03,
	0x21,0x01,0x01,0xe9,0xd0,0x64,0x20,0x44,
	0x07,0xc5,0x00,0xe6,0xd0,0x5c,0xa0,0x76,
	0xf1,0x20,0x00,0x21,0xd1,0x44,0x01,0x46,
	0x80,0x3f,0x01,0x4a,0x6d,0x01,0x00,0x06,
	0x00,0xc6,0xd1,0x41,0xbb,0xbf,0xc0,0x6e,
	0x30,0x6b,0xe4,0xe9,0x00,0x06,0x15,0xa2,
	0xf9,0x5c,0x11,0x61,0xf9,0x5c,0x00,0xee,
	0xd0,0x78,0xa0,0x76,0x90,0x74,0x10,0x61,
	0xf9,0x5c,0xd1,0x40,0x00,0xef,0xd1,0x36,
	0xa1,0x36,0x91,0x34,0x90,0xf4,0xd0,0x12,
	0x30,0x04,0xc8,0x4b,0x08,0x49,0x00,0x4d,
	0xb0,0x01,0x18,0x41,0x11,0x41,0x51,0x41,
	0x00,0xd1,0xf9,0x50,0xb0,0xc1,0xed,0x4e,
	0x11,0x40,0x06,0x23,0xd0,0x40,0x61,0x41,
	0x15,0xa2,0xf9,0x7b,0x08,0x49,0x00,0x6e,
	0xd1,0x7b,0xa1,0x76,0x00,0x4d,0xc0,0x41,
	0xa0,0x74,0x10,0x60,0xe9,0x7b,0xd0,0x64,
	0x14,0xe0,0xe9,0x75,0x00,0xef,0xd0,0xf6,
	0xa0,0xf6,0x91,0x34,0x11,0x20,0xf9,0x72,
	0xd0,0x62,0xe1,0x75,0x11,0x22,0xed,0x75,
	0xd0,0x63,0x00,0x48,0x00,0xcd,0xd0,0x24,
	0x30,0x01,0x10,0xc0,0xa0,0xf4,0x00,0xab,
	0xd0,0x48,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x08,0x20,0xdf,0xcf,0x00,0xac,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xc0,0xc1,0x10,0xde,0x10,0xc2,
	0x06,0x27,0xd0,0x94,0x20,0x83,0x70,0x82,
	0xd0,0xc3,0x40,0x43,0x30,0xc1,0x10,0xe0,
	0xe9,0x98,0x10,0x9a,0xb0,0xc1,0xf9,0x95,
	0xd0,0x7f,0x40,0x42,0x07,0xc5,0xc0,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xee,0xd0,0x72,0xa0,0x76,0x9a,0xf4,
	0x00,0xee,0xd0,0x79,0xa0,0x76,0x91,0xf4,
	0x00,0xee,0xd0,0x5e,0xa0,0x76,0x95,0xb4,
	0x00,0xef,0xd0,0x4d,0xa0,0x76,0x9b,0xf4,
	0x00,0xef,0xd0,0x4f,0xa0,0x76,0x93,0x74,
	0x14,0xe0,0xe8,0x20,0x08,0x89,0x00,0x6e,
	0xd0,0xfd,0xa0,0xf6,0x00,0x4d,0x11,0xe0,
	0xf8,0x1f,0x10,0x60,0xe8,0x79,0xa0,0x74,
	0xc0,0x6b,0xd8,0x40,0x08,0x89,0x18,0x42,
	0x00,0xcd,0x11,0xe0,0xf8,0x29,0x10,0xe0,
	0xe8,0x79,0x58,0x43,0xb0,0x41,0xec,0x22,
	0xd0,0x05,0x30,0x2b,0x10,0x01,0x18,0x40,
	0x00,0x6e,0xd0,0xfe,0xa0,0xf6,0xa8,0x74,
	0x00,0xee,0xd0,0xe2,0xa0,0xf6,0x90,0x74,
	0x10,0x60,0xe8,0x44,0x08,0x49,0x00,0x6e,
	0xd0,0xff,0xa0,0xf6,0x00,0x4d,0x11,0xe0,
	0xf8,0x43,0x10,0x60,0xe8,0x79,0xa0,0x74,
	0xc8,0x1e,0xc1,0x2b,0x00,0x6f,0xd1,0x51,
	0xa1,0x76,0x18,0x01,0x18,0x42,0x00,0x15,
	0xf8,0x65,0x00,0x9b,0xf8,0x51,0x00,0x9a,
	0xe8,0x6b,0x09,0x89,0xd1,0xbd,0x00,0x4d,
	0x31,0x81,0xec,0x59,0x08,0x20,0xdf,0xc7,
	0xe0,0x7b,0xb0,0x74,0xc1,0x81,0x10,0x41,
	0x20,0x46,0xd1,0xa5,0x20,0x46,0xa0,0x74,
	0xb0,0x41,0xf0,0x81,0xb0,0x7f,0xa0,0x74,
	0xe0,0x6b,0xc0,0x6f,0xa0,0x74,0xb0,0x41,
	0xf0,0x81,0xb0,0x7f,0xa0,0x74,0xb1,0x7e,
	0xb1,0x01,0xec,0x48,0x06,0x23,0xd0,0x88,
	0x70,0x42,0xb0,0x7f,0x60,0x42,0x00,0xab,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x08,0x20,0xdf,0xd0,0x00,0xac,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xc0,0xc1,0x10,0xde,0x10,0xc2,
	0x06,0x27,0xd0,0x94,0x20,0x83,0x70,0x82,
	0xd0,0xc3,0x40,0x43,0x30,0xc1,0x10,0xe0,
	0xe8,0x90,0x10,0x9a,0xb0,0xc1,0xf8,0x8d,
	0xd0,0x7f,0x40,0x42,0x07,0xc5,0xc0,0x00,
	0x01,0xa7,0x71,0x1c,0xf0,0x48,0xd0,0x8f,
	0x40,0x85,0xe8,0x0c,0xd0,0x70,0x30,0x42,
	0x01,0x86,0x00,0x48,0x00,0x4d,0xb1,0x70,
	0x11,0x5c,0x05,0x6b,0x71,0x98,0x11,0x9f,
	0xc0,0x46,0x30,0x45,0xec,0x16,0x08,0x20,
	0xdf,0xc4,0xe0,0x42,0x07,0xc9,0x00,0x8d,
	0xb0,0x41,0xec,0x16,0x00,0x25,0x78,0x20,
	0x00,0x10,0xf8,0x42,0x01,0xa7,0x71,0x5c,
	0x11,0x60,0xe8,0x24,0xec,0x24,0xf0,0x66,
	0xc1,0x05,0xf0,0x73,0x01,0x86,0x0c,0x09,
	0x00,0x4d,0xc0,0x46,0xb0,0x41,0x07,0xc9,
	0x00,0x8d,0xb0,0x41,0xec,0x2b,0x83,0xc5,
	0xd0,0x42,0x10,0x4f,0x01,0x46,0x02,0x26,
	0x60,0x44,0x02,0x26,0x70,0x44,0xa0,0x46,
	0x00,0xc6,0x98,0x06,0x00,0x50,0xf8,0x39,
	0x0f,0xef,0x48,0x3f,0x18,0x20,0xe8,0x42,
	0x08,0x20,0xdf,0xc6,0x00,0xac,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x68,0xd0,0x40,0x90,0xa1,0x40,0x81,
	0xf8,0x4a,0x83,0x62,0x90,0x63,0x10,0x5e,
	0x10,0x42,0x82,0x62,0x90,0xa3,0x10,0x9e,
	0x10,0x84,0x30,0x42,0x86,0x45,0xd0,0xff,
	0x90,0x86,0x10,0x95,0x40,0x83,0xb0,0xbe,
	0x10,0x82,0x30,0x42,0x10,0x43,0xd0,0x9f,
	0x90,0xcd,0x40,0xc2,0x20,0x43,0xc1,0x41,
	0x31,0x44,0xf4,0x71,0x82,0x62,0x91,0x23,
	0x11,0x1e,0x11,0x04,0x81,0x62,0x90,0xe3,
	0x10,0xde,0x10,0xc2,0x30,0xc4,0x10,0xc3,
	0x21,0x43,0xc1,0x01,0x07,0xc5,0x07,0xa0,
	0xd0,0x40,0x84,0x22,0xa0,0x63,0x07,0xe8,
	0xd0,0x40,0x01,0x86,0x90,0xa1,0x80,0x3f,
	0x40,0x81,0xf8,0x79,0x03,0x20,0xd0,0x40,
	0x10,0x4a,0xa0,0x4a,0x84,0x05,0xa0,0x46,
	0xc0,0x44,0x10,0x5b,0x10,0x42,0x82,0x62,
	0x90,0xe3,0x10,0xde,0x10,0xc4,0x20,0x43,
	0x83,0x62,0xa0,0x63,0x80,0x3f,0x86,0x45,
	0x84,0x86,0x80,0x17,0x80,0x0d,0x80,0x0a,
	0x84,0x05,0x80,0x06,0x80,0xe4,0x82,0x62,
	0x90,0xa3,0x10,0x9e,0x10,0x84,0x81,0x62,
	0x90,0xe3,0x10,0xde,0x10,0xc2,0x30,0xc2,
	0x82,0x22,0x90,0xa3,0x10,0x9e,0x10,0x82,
	0x30,0x81,0xf4,0xa7,0x20,0x83,0x00,0x21,
	0xd0,0x40,0x30,0x81,0x81,0xa2,0xa0,0xa3,
	0x83,0x62,0x90,0x63,0x10,0x5e,0x10,0x42,
	0x82,0x22,0x90,0xa3,0x10,0x9e,0x10,0x82,
	0x30,0x42,0xf4,0xb7,0x20,0x43,0x05,0x25,
	0x70,0xf0,0x30,0x43,0x81,0xe2,0xa0,0x63,
	0x07,0x20,0xd0,0xc1,0x84,0x22,0xa0,0xe3,
	0x07,0xc9,0x00,0x8d,0x07,0xc9,0x00,0x8d,
	0x07,0xc9,0x00,0x8d,0x07,0xc9,0x00,0x8d,
	0xd0,0x9f,0x40,0x84,0x10,0xb0,0xe4,0xcf,
	0x07,0xc9,0x00,0xcd,0xb0,0x90,0x10,0xa0,
	0xe8,0xd5,0xd0,0xe0,0x20,0xc2,0x00,0xc8,
	0x00,0xcd,0x07,0xc5,0xc0,0x00,0x00,0x00,
	0x00,0xee,0xd0,0x76,0xa0,0x76,0x94,0xf4,
	0x00,0xee,0xd0,0x62,0xa0,0x76,0x95,0x34,
	0x00,0xee,0xd0,0x79,0xa0,0x76,0x92,0xb4,
	0x08,0x49,0x00,0x4d,0x10,0x60,0xf8,0x15,
	0x12,0xa0,0xf8,0x57,0x08,0x20,0xdf,0xd1,
	0xe1,0x15,0x0a,0xc9,0x00,0x6f,0xd0,0xc1,
	0xa0,0xf6,0xd0,0xc3,0x00,0x4d,0xc8,0x41,
	0x10,0x57,0x10,0x41,0xb0,0x71,0xa0,0x74,
	0xc0,0x61,0x10,0x59,0x40,0x43,0xc8,0x01,
	0x10,0x44,0x18,0x02,0x20,0x60,0xd8,0x3f,
	0x20,0x60,0xa0,0x74,0xc0,0x61,0x10,0x5b,
	0x40,0x43,0xc8,0x01,0x18,0x06,0x10,0x42,
	0x28,0x01,0x10,0x43,0x28,0x01,0x00,0x65,
	0xd0,0x40,0x30,0x60,0x00,0x12,0xe8,0x39,
	0xb0,0x44,0xa0,0x74,0xc0,0x61,0x10,0x5d,
	0x40,0x43,0x10,0x60,0xe8,0x42,0x10,0x41,
	0xb0,0x7b,0x10,0x48,0xa0,0x74,0xc0,0x61,
	0xd0,0xc7,0x40,0x43,0x10,0x67,0xe8,0x54,
	0xc8,0x01,0x18,0x02,0x10,0x65,0xe4,0x4d,
	0xb8,0x3c,0x10,0x66,0xe4,0x50,0xb8,0x3c,
	0xd0,0x6f,0x30,0x60,0x10,0x44,0xe0,0x56,
	0x0f,0xa0,0xd0,0x40,0xa0,0x74,0x08,0x49,
	0x00,0x4d,0x10,0x60,0xf8,0x60,0x12,0xa0,
	0xf8,0x99,0x08,0x20,0xdf,0xd2,0xe1,0x15,
	0x09,0x89,0x00,0x4d,0x00,0x6f,0xd8,0x07,
	0xa8,0x36,0xa0,0x74,0xc1,0x01,0xd0,0xc7,
	0x14,0xe0,0xe8,0x74,0x09,0xc9,0x00,0x4d,
	0xc8,0x41,0x10,0x5d,0xa0,0x74,0x51,0x01,
	0x48,0x43,0xb8,0x7f,0x18,0x47,0xa8,0x74,
	0x00,0xee,0xd0,0x72,0xa0,0x76,0x9a,0xf4,
	0xc8,0x2b,0x00,0x6f,0xd0,0x5b,0xa0,0x76,
	0x09,0xc9,0x00,0x4d,0xc8,0x41,0x10,0x5d,
	0x51,0x01,0xa0,0x74,0x48,0x43,0xa8,0x74,
	0xb8,0x01,0xec,0x7c,0x15,0x20,0xe8,0x95,
	0x09,0xc9,0x00,0x6f,0xd8,0x26,0xa8,0x36,
	0x00,0x4d,0xc8,0x41,0x10,0x5d,0xa0,0x74,
	0x51,0x01,0x48,0x43,0xb8,0x7f,0x18,0x47,
	0xa8,0x74,0x00,0x6f,0xd8,0x06,0xa8,0x36,
	0xa1,0x34,0x14,0xe0,0xe8,0xaf,0x08,0x49,
	0x00,0x4d,0x10,0x60,0xf8,0xa4,0x12,0xa0,
	0xf8,0xaf,0x08,0x20,0xdf,0xd3,0xe1,0x15,
	0x09,0x89,0x00,0x6f,0xd8,0x0a,0xa8,0x36,
	0xd8,0x07,0x00,0x4d,0xc1,0x01,0x10,0x5d,
	0xa0,0x74,0x41,0x20,0xa1,0x34,0x08,0x49,
	0x00,0x4d,0x10,0x60,0xe8,0xf3,0x14,0xe0,
	0xe8,0xbd,0x08,0x89,0x01,0x0d,0x11,0x23,
	0xe9,0x13,0x00,0x6f,0xd0,0x4c,0xa0,0x76,
	0xa1,0x34,0x00,0xee,0xd8,0x32,0xa8,0x36,
	0x9a,0xf4,0xc8,0x2b,0xd1,0x40,0x08,0x89,
	0x00,0x4d,0x10,0x63,0xe9,0x13,0x11,0x42,
	0x51,0x41,0xb8,0x01,0xec,0xc3,0xd8,0x05,
	0x38,0x2b,0xe8,0xd1,0x11,0x42,0xb8,0x01,
	0xec,0xce,0x00,0x6f,0xd0,0x65,0xa0,0x76,
	0xa1,0x74,0x14,0xe0,0xe8,0xe0,0x11,0x21,
	0xf8,0xe0,0x01,0xef,0xd2,0x4c,0x00,0xef,
	0xd1,0x8f,0xa1,0xb6,0x92,0x34,0xf1,0x1b,
	0xc1,0xeb,0x02,0x20,0xd1,0x14,0x11,0x42,
	0xc0,0x45,0x10,0x56,0xd0,0xc3,0x40,0x43,
	0x10,0x61,0xf8,0xed,0xc2,0x44,0xd2,0x00,
	0xf1,0x1b,0x00,0x21,0xd0,0x48,0x21,0x01,
	0xb1,0xc1,0xec,0xe3,0xe0,0xff,0x12,0xa0,
	0xf8,0xff,0x00,0x2a,0xd8,0x2a,0x00,0x6f,
	0xd0,0x65,0xa0,0x76,0xa8,0x34,0x00,0x6f,
	0xd0,0x4c,0xa0,0x76,0x80,0xb4,0x08,0x49,
	0x00,0x4d,0x10,0x60,0xe9,0x0b,0x0a,0x49,
	0x00,0x4d,0x10,0x60,0xe9,0x0b,0x0a,0x09,
	0x00,0x0d,0xb0,0x41,0xed,0x07,0x85,0x85,
	0x80,0x06,0x00,0xab,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x08,0x20,
	0xdf,0xcd,0x00,0xac,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xc1,0x88,
	0x08,0xc9,0x08,0x0d,0xb8,0x3f,0x09,0x49,
	0x00,0x4d,0x22,0x01,0xc0,0xc8,0x09,0x09,
	0x00,0x4d,0x22,0x01,0x08,0xc9,0x08,0x4d,
	0x10,0x60,0xe9,0x38,0xc0,0x46,0x30,0x43,
	0xe9,0x2f,0x60,0xc9,0xb2,0x7c,0xc1,0x88,
	0x18,0x63,0xed,0x33,0xb8,0x41,0xb8,0x43,
	0x18,0x47,0x28,0x46,0x68,0x49,0xb2,0x7c,
	0xb8,0x01,0xed,0x1f,0xd0,0x73,0x30,0x48,
	0xed,0x40,0x08,0x20,0xdf,0xce,0xe1,0x15,
	0xd0,0x74,0x60,0x49,0x07,0xc5,0xc0,0x00,
	0x14,0xe0,0xe8,0x12,0xc8,0x5e,0xc0,0x2e,
	0x18,0x40,0x00,0x94,0xe8,0x12,0x17,0x60,
	0xf8,0x0f,0xdc,0xc1,0xf0,0x52,0xd7,0x41,
	0xdc,0xc2,0xf0,0x30,0xe0,0x14,0xdc,0xc3,
	0xf0,0x52,0xe0,0x14,0xdc,0xc0,0xf0,0x52,
	0xbb,0xbf,0xc0,0x6b,0x30,0x6e,0xec,0x00,
	0x15,0x20,0xe8,0x1d,0xdc,0xc4,0xf0,0x47,
	0xbb,0xbf,0x1a,0x22,0xf8,0x1d,0x01,0x46,
	0x02,0x86,0x08,0xea,0xd5,0xc0,0x02,0x06,
	0x00,0x65,0xd1,0x14,0xca,0x6e,0x01,0x04,
	0x1a,0x22,0xf8,0x28,0x00,0xac,0xd0,0x60,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xef,0xd0,0x48,0xa0,0x76,0x96,0xb4,
	0x94,0x34,0x93,0xf4,0x98,0xf4,0x94,0xb4,
	0x9c,0x74,0x9c,0xb4,0x9b,0x34,0x9b,0x74,
	0x13,0xc8,0x00,0x2c,0xd0,0x40,0x23,0xc1,
	0x18,0xc8,0x28,0xc1,0xcb,0xf1,0xcc,0x32,
	0x02,0x2e,0xd0,0x48,0xe0,0x73,0xdb,0x00,
	0xdb,0x47,0x00,0xef,0xd0,0x66,0xa0,0x76,
	0x96,0xb4,0x94,0x34,0xd4,0x82,0x02,0x2f,
	0xd0,0x6c,0xe0,0x73,0x00,0xef,0xd0,0x51,
	0x20,0x6e,0x20,0x6e,0xa0,0x76,0x9c,0xb4,
	0x9b,0x74,0xdb,0x00,0xdc,0x40,0xb0,0x76,
	0xa0,0x76,0x96,0xb4,0x94,0x34,0xb4,0x3f,
	0x14,0x07,0x00,0xef,0xd0,0x65,0xa0,0x76,
	0x94,0xb4,0xc0,0x2e,0xb0,0x04,0x10,0x01,
	0x14,0x80,0x02,0x26,0xd0,0x54,0x00,0x21,
	0xd0,0xa4,0xc8,0x2e,0x18,0x20,0xe8,0x73,
	0x20,0x42,0xb8,0x01,0xec,0x70,0x00,0x65,
	0xd8,0x20,0xa8,0x36,0xc0,0xad,0x30,0xac,
	0x1c,0xe2,0xf8,0x7b,0xb0,0xbf,0xb0,0xbf,
	0x10,0x9f,0xb0,0x81,0xe4,0x85,0x10,0x82,
	0x01,0x46,0x00,0x8a,0x7d,0x01,0x00,0x06,
	0x00,0xc6,0x1b,0xa0,0xf8,0x89,0x17,0x60,
	0xe8,0x8f,0x1a,0x22,0xf8,0x89,0x00,0x65,
	0xd1,0x14,0xca,0x6e,0x01,0x04,0x26,0x99,
	0x16,0x82,0x26,0x9c,0x01,0xef,0xd1,0x20,
	0x16,0xe0,0xf8,0x98,0xc7,0x04,0xd1,0x00,
	0xc1,0xdf,0xd8,0xb4,0xc8,0x52,0xd4,0x80,
	0x00,0x91,0xf8,0xaf,0x1c,0xe2,0xf8,0xa3,
	0x01,0xef,0xd2,0x4c,0xe0,0xaa,0xc0,0xae,
	0x10,0x83,0x20,0xae,0x10,0x83,0x02,0x20,
	0xd2,0x54,0x22,0x42,0x74,0x89,0xb2,0x7c,
	0xd8,0xbf,0x48,0x92,0x34,0xa2,0x00,0x66,
	0xd0,0x52,0x20,0x6c,0xa0,0x76,0x00,0xe5,
	0xd0,0x60,0xa0,0x76,0x01,0x46,0x82,0xfa,
	0x00,0x6d,0xd0,0x68,0x20,0x6c,0xa0,0x7b,
	0x83,0xba,0x80,0x3f,0x00,0xc6,0x1c,0xe2,
	0xf8,0xc5,0x93,0x34,0xc3,0x6c,0x93,0x34,
	0xe0,0xee,0xd2,0x80,0xd3,0x40,0x93,0x34,
	0xc2,0xcc,0x93,0x34,0xc8,0xcb,0xf1,0x37,
	0xc8,0x0b,0x38,0x10,0x38,0x0a,0xf1,0x16,
	0x13,0x62,0xfc,0xc8,0x32,0xcc,0xfc,0xd6,
	0x13,0x67,0xe4,0xc8,0xc3,0xe3,0x33,0xd0,
	0x38,0xd5,0xd8,0x56,0x1b,0x75,0xec,0xdd,
	0xc8,0x6d,0xc2,0xcc,0x93,0x34,0xf1,0x37,
	0x01,0x46,0x33,0xd6,0xc8,0x0b,0x38,0x10,
	0x0c,0x5f,0xc3,0xe0,0x38,0x0a,0x38,0xd7,
	0xc0,0x4b,0x30,0x55,0x00,0xc6,0xf1,0x13,
	0x0c,0x9d,0xec,0xdd,0xc8,0x6d,0x0c,0x9d,
	0xfc,0xfe,0xc2,0xcc,0x33,0xd6,0x38,0xd7,
	0xc8,0x0b,0x38,0x10,0xc0,0x4b,0x30,0x55,
	0x0c,0x5f,0xc3,0xe0,0xf1,0x13,0x92,0xf4,
	0x0c,0x9d,0xec,0xf2,0x00,0xe6,0xd0,0x52,
	0x20,0x6c,0xa0,0x76,0xc0,0x6d,0xb0,0x7f,
	0x10,0x5f,0xc0,0xac,0x10,0x9f,0x30,0x42,
	0xb0,0x41,0x10,0x42,0x02,0xa8,0xd8,0x08,
	0x80,0x3f,0x01,0x46,0x00,0x4a,0x6d,0x20,
	0x00,0x06,0x00,0xc6,0x01,0xc5,0x0d,0xd1,
	0xc0,0x63,0x0c,0x51,0x01,0x46,0x83,0xba,
	0x80,0x3f,0x93,0xbb,0xc3,0x8e,0xc0,0x58,
	0x30,0x4b,0xfd,0x20,0x10,0x5e,0x28,0x01,
	0x0c,0x5e,0x0d,0x1d,0xf9,0x28,0x74,0x89,
	0xb2,0x7c,0xd8,0xbf,0x48,0x92,0x34,0xa2,
	0x00,0xc6,0x28,0x12,0x38,0x1a,0xed,0x2d,
	0xd8,0x00,0x0c,0x14,0xfd,0x30,0xc8,0x04,
	0x48,0x04,0x28,0x1c,0xe5,0x34,0x08,0x1c,
	0xa8,0x34,0xb3,0x7f,0x07,0xc5,0x13,0x73,
	0xed,0x51,0x13,0x66,0xf9,0x3d,0x1c,0xe4,
	0xe9,0x46,0xc0,0x4c,0x30,0x4b,0xe9,0x46,
	0xed,0x47,0x00,0x21,0xd0,0x40,0x32,0x81,
	0xed,0x46,0xd2,0x80,0x07,0xc5,0x00,0x24,
	0x30,0x40,0xf9,0x46,0x00,0x25,0xd2,0x80,
	0x13,0x66,0xed,0x46,0x00,0x26,0xd2,0x80,
	0x07,0xc5,0x00,0x22,0xd0,0x40,0xe1,0x43,
	0xba,0x41,0x00,0x67,0xdf,0x48,0x00,0x60,
	0xd0,0x01,0x01,0x46,0xa0,0x37,0xda,0x00,
	0x80,0x3f,0x00,0xc6,0x01,0x05,0xc0,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xef,0xd1,0x3c,0x0f,0xff,0xdf,0xff,
	0xc0,0xc0,0x82,0x29,0x80,0x2a,0x00,0x21,
	0xd0,0x2c,0x80,0x3f,0x00,0x0a,0x7a,0xd8,
	0xb0,0x3c,0x26,0x00,0x00,0x06,0x80,0x2a,
	0xd2,0x01,0x12,0x0a,0x12,0x0d,0xb2,0x38,
	0xa2,0x29,0x0b,0x91,0x0b,0x92,0x00,0x67,
	0xd4,0x1c,0xf2,0x83,0xc0,0x01,0xd0,0x43,
	0xc3,0x80,0x40,0x01,0x13,0x9e,0xc1,0xce,
	0x13,0x9e,0x41,0xc1,0x10,0x21,0xe9,0xf8,
	0xf2,0x83,0xc3,0x41,0x10,0x20,0xea,0x68,
	0xf2,0x83,0x80,0x29,0xa0,0x6c,0x11,0xc1,
	0x59,0xc7,0x10,0x22,0xea,0xea,0xe2,0xfc,
	0x11,0xe2,0xea,0x01,0xf2,0x83,0x11,0xe1,
	0xea,0x40,0xee,0x61,0x10,0x42,0xa0,0x68,
	0xe1,0xdd,0xd0,0x07,0x40,0x0e,0xf2,0x0c,
	0xe2,0x0f,0xe3,0x55,0xe2,0x21,0xe2,0x24,
	0xe1,0xcd,0xe2,0x26,0xe2,0x2b,0xe1,0xdd,
	0x27,0xc0,0x10,0x20,0x07,0xc5,0x13,0x9c,
	0xc0,0x4e,0x10,0x4b,0x50,0x4e,0x80,0x69,
	0xa0,0x6a,0xd0,0x8c,0xd1,0xc0,0x90,0x6b,
	0x31,0xc1,0xa1,0xeb,0xb0,0x81,0xee,0x16,
	0x00,0x24,0xd0,0x81,0xa0,0xb7,0x80,0x3f,
	0x0f,0x87,0x91,0x68,0xc1,0x45,0xe1,0xdd,
	0xa1,0x68,0xe1,0xdd,0x11,0x60,0xe5,0xcd,
	0x00,0x21,0x26,0x30,0xe1,0xcd,0xc0,0x05,
	0xb0,0x37,0xee,0x3a,0x91,0xa8,0x00,0x68,
	0xd4,0x38,0x00,0x2f,0xd0,0x40,0xa0,0x68,
	0x0c,0xb0,0xd0,0xfe,0xc0,0x40,0xe2,0x65,
	0xa1,0xa8,0xb1,0x78,0x00,0x21,0xd0,0x7f,
	0x40,0x45,0x10,0x43,0x91,0x68,0xe1,0xff,
	0x13,0xa2,0xe6,0x47,0xea,0x4b,0x13,0xa4,
	0xea,0x65,0xa0,0x67,0xe1,0xdd,0x00,0x67,
	0xd1,0x98,0xca,0x4e,0xe2,0x63,0x90,0x28,
	0x10,0x0e,0x10,0x12,0x10,0x1d,0x1a,0x61,
	0xea,0x53,0xc1,0x40,0xe2,0x65,0x30,0x05,
	0xfe,0x51,0xc0,0x05,0x10,0x03,0x00,0x2f,
	0xd0,0xb8,0x40,0x02,0x91,0xe8,0x51,0xc2,
	0x31,0xc2,0x50,0x07,0xa0,0x28,0xd1,0x40,
	0xe2,0x65,0x00,0x6d,0xd1,0x94,0x00,0x6a,
	0xd4,0x06,0xa0,0x6c,0x07,0x92,0x0f,0x87,
	0xf2,0x83,0x80,0x29,0x85,0x45,0x08,0x30,
	0xd0,0x00,0x10,0x02,0xa0,0x0a,0xa3,0x86,
	0x80,0x0a,0xa3,0x6a,0xa0,0x6c,0x80,0x3f,
	0xd0,0x43,0xc0,0x00,0xb0,0x41,0xee,0x75,
	0x11,0xe0,0xea,0x7c,0x00,0x6d,0xd4,0x14,
	0x00,0xa0,0xd0,0x40,0xa0,0x69,0x80,0x3f,
	0x07,0x09,0x07,0x92,0x0f,0x87,0x90,0x6b,
	0x40,0x43,0x07,0xc5,0x1a,0x81,0x80,0x29,
	0xb2,0x08,0x00,0xef,0xd0,0x6a,0x20,0x69,
	0xa0,0x76,0x93,0x34,0x07,0x91,0xd4,0x80,
	0x00,0x6b,0xd4,0x0a,0xd0,0x8f,0xc0,0x4c,
	0x10,0x54,0x40,0x42,0xea,0xcd,0x10,0x61,
	0xea,0xb0,0xb0,0x48,0xe6,0xb4,0x02,0xe7,
	0xd3,0x4c,0xd0,0x02,0x10,0x66,0xea,0xe9,
	0xb0,0x42,0xe6,0xa3,0xe2,0xa7,0xb0,0x7e,
	0xea,0xfa,0xd0,0x01,0xe2,0xe9,0x03,0x21,
	0xd3,0x7c,0xb0,0x42,0xe6,0xa3,0x03,0x2c,
	0xd3,0x6c,0xb0,0x42,0xe6,0xa3,0xe2,0xe8,
	0xc4,0x8c,0x02,0xee,0xd3,0x33,0xe2,0x90,
	0xb0,0x7a,0xc0,0x01,0xc0,0x55,0xb0,0x05,
	0x10,0x01,0x10,0x40,0x10,0x40,0x00,0x20,
	0x40,0x4f,0x10,0x67,0xee,0xca,0x10,0x45,
	0xc4,0x41,0x10,0x41,0x20,0x51,0x14,0x43,
	0x20,0x51,0x03,0x67,0xd3,0x5c,0x23,0x41,
	0x14,0x41,0xe3,0x0c,0xa2,0x29,0x13,0x04,
	0xe2,0x90,0x14,0xa0,0xfa,0xd9,0x15,0xe0,
	0xeb,0x59,0x15,0xa0,0xeb,0x59,0xb5,0xd0,
	0x15,0x81,0xe6,0xd7,0xe2,0xd1,0xc3,0x17,
	0xe2,0x90,0xc3,0x12,0xd4,0x80,0xe2,0xcb,
	0x02,0x64,0xd0,0x40,0xc9,0x2a,0x02,0x1c,
	0xea,0xe2,0xb0,0x7f,0x10,0x48,0x20,0x01,
	0xa0,0x2c,0x00,0x22,0xd3,0xab,0x07,0xc5,
	0xd0,0x00,0xf2,0xdc,0x00,0x6b,0xdf,0x6d,
	0x80,0x3f,0xd0,0x6d,0x33,0x81,0xee,0xf3,
	0x20,0x4e,0x00,0x27,0xdf,0x5c,0x10,0x42,
	0x20,0x44,0x00,0x4a,0x7a,0xcd,0x23,0x41,
	0x33,0x44,0x0f,0x87,0xd0,0x03,0xf2,0xdc,
	0x00,0x6b,0xdf,0x7f,0x80,0x3f,0xd0,0x6d,
	0x33,0x81,0xef,0x05,0x20,0x4e,0x00,0x27,
	0xdf,0x5c,0x10,0x42,0x20,0x44,0x00,0x4a,
	0x6a,0xcd,0x23,0x41,0x33,0x44,0x0f,0x87,
	0x00,0x27,0xdf,0x5c,0x0b,0xf0,0xd0,0x32,
	0xa0,0x2c,0x00,0x21,0xd3,0x98,0xf3,0x43,
	0xa2,0x29,0x03,0x6c,0xd4,0xc0,0xc9,0x2a,
	0x02,0x1c,0xeb,0x1b,0xb4,0xff,0x14,0xc8,
	0xa4,0xec,0xf3,0x40,0xf3,0x37,0xf3,0x37,
	0xb4,0xff,0xf3,0x49,0xa2,0x29,0x0b,0xb0,
	0xd0,0x33,0xc4,0xc0,0x23,0x4e,0xf3,0x4c,
	0xa2,0x29,0x0b,0xb0,0xd0,0x28,0xc9,0x2a,
	0x02,0x1c,0xeb,0x2f,0xb0,0x3c,0xc3,0x54,
	0x23,0x51,0x00,0x22,0xd3,0x80,0xa0,0x2c,
	0x00,0x6b,0xd4,0x0a,0xe2,0xfc,0xb4,0xff,
	0x33,0x4e,0xa4,0xec,0x00,0x21,0xd0,0x54,
	0x80,0x3f,0x00,0x4a,0x6a,0xcd,0x23,0x4e,
	0x23,0x4e,0x07,0x91,0x07,0x92,0x01,0x21,
	0xd0,0x54,0x80,0x3f,0x00,0x4a,0x7a,0xcd,
	0xe3,0x52,0x07,0x91,0x07,0x92,0x33,0x4e,
	0xa4,0xec,0x01,0x21,0xd0,0x54,0x80,0x3f,
	0x00,0x4a,0x6a,0xcd,0xc4,0x1f,0x0f,0x87,
	0xa2,0x29,0x00,0x6d,0xdf,0x55,0xda,0x02,
	0x0f,0x87,0x01,0x85,0xc0,0x00,0x00,0x00,
	0x00,0x25,0x78,0x20,0x00,0x12,0xe8,0x0d,
	0x01,0x46,0x02,0x46,0x00,0x28,0xda,0x00,
	0x25,0x68,0x03,0x9e,0xf8,0x0c,0x25,0xa8,
	0x00,0xc6,0x02,0x86,0x00,0x29,0x72,0xec,
	0x00,0x29,0x72,0xa8,0x15,0x21,0xe8,0x2d,
	0x05,0x6b,0x7a,0x30,0x00,0x60,0x25,0x00,
	0x1a,0x20,0xf8,0x1c,0x00,0xa0,0x25,0x00,
	0xca,0x0b,0x3a,0x14,0xec,0x2e,0x00,0xe4,
	0x7a,0x1c,0x1a,0x20,0xe8,0x2d,0xc8,0x0a,
	0x18,0x1e,0xc8,0x4b,0x18,0x5e,0xb8,0x41,
	0x1a,0x22,0xf8,0x2b,0x04,0x57,0x8b,0xff,
	0x0b,0xcc,0xc5,0x0a,0x02,0x06,0x06,0x23,
	0x70,0x8c,0x10,0xa0,0xfc,0x36,0xb0,0x81,
	0x06,0x23,0x60,0x8c,0x00,0xee,0xd0,0x79,
	0xa0,0x76,0x90,0x74,0x10,0x65,0xe4,0x42,
	0x00,0xac,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x10,0xa0,0xe8,0x4a,
	0x00,0xab,0xd0,0x40,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0xd0,0x40,0x06,0x23,
	0x60,0x50,0x01,0x46,0x00,0x66,0xd0,0x01,
	0xa0,0x38,0x80,0x3f,0xb0,0x01,0xa0,0x37,
	0x80,0x3f,0x00,0x21,0xd0,0x0c,0x81,0xf6,
	0xa0,0x34,0x81,0xb6,0xa0,0x34,0x82,0x76,
	0xa0,0x34,0x80,0x3f,0x00,0x20,0xdc,0xc6,
	0x00,0xc6,0x00,0xed,0xd0,0x68,0xa0,0x76,
	0x00,0x22,0xd0,0x68,0x04,0x6a,0xd0,0x8c,
	0x00,0x22,0xd0,0xc0,0xb0,0xc4,0x01,0x46,
	0x00,0xca,0x6d,0x02,0x00,0x06,0x00,0xc6,
	0xb0,0xfc,0x20,0x83,0x30,0x43,0xec,0x6a,
	0xe8,0x78,0x20,0x43,0xc0,0xc1,0xe0,0x6a,
	0x00,0xa7,0xd0,0x58,0xd0,0x12,0x00,0x60,
	0xd7,0xec,0x00,0x05,0xc0,0x00,0x00,0x00,
	0x0c,0x30,0xd0,0x00,0x10,0x02,0xa0,0x27,
	0x80,0x27,0xd0,0x2f,0xa0,0x29,0x80,0x2a,
	0x84,0x29,0x02,0xb0,0xd0,0x00,0xa0,0x2a,
	0x80,0x27,0x01,0x20,0xd0,0x00,0xa0,0x29,
	0xd0,0x13,0x10,0x0b,0xa0,0x2a,0x80,0x2b,
	0xd0,0x12,0x10,0x0b,0xa0,0x2a,0x80,0x6b,
	0x80,0x29,0x0c,0x30,0xd0,0x00,0x10,0x02,
	0xa0,0x27,0x00,0x21,0xd0,0x00,0xa0,0x27,
	0x80,0x2c,0x01,0x46,0xd0,0x47,0xa0,0x76,
	0x0e,0x27,0xd0,0x57,0xa0,0x74,0x00,0x27,
	0xdf,0x5b,0x02,0x86,0x00,0x27,0xd4,0x1b,
	0xda,0x02,0x02,0x06,0x00,0x66,0xd0,0x40,
	0xa0,0x77,0x80,0x3f,0x00,0x64,0xd0,0x40,
	0xa0,0x78,0x80,0x3f,0x00,0xc6,0x06,0x23,
	0x70,0x50,0x10,0x60,0xe8,0x57,0xd7,0xd2,
	0x00,0xac,0xd0,0x68,0x07,0xc4,0x06,0x23,
	0x70,0x50,0x10,0x62,0xf8,0x49,0x00,0xaa,
	0xd0,0x70,0xd0,0x12,0x00,0x66,0xd7,0xd1,
	0x00,0x05,0x10,0x63,0xf8,0x51,0x00,0xaa,
	0xd0,0x70,0xd0,0x12,0x00,0x66,0xd7,0xf7,
	0x00,0x05,0x00,0xaa,0xd0,0x70,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x6d,
	0xd0,0x68,0xa0,0x76,0x00,0x22,0xd0,0x68,
	0x04,0x6a,0xd0,0x8c,0x00,0x22,0xd0,0xc0,
	0xb0,0xc4,0x01,0x46,0x00,0xca,0x7d,0x02,
	0x00,0x06,0x00,0xc6,0xb0,0xfc,0x20,0x83,
	0x30,0x43,0xec,0x60,0xe8,0x6e,0x20,0x43,
	0xc0,0xc1,0xe0,0x60,0xd7,0xd2,0x00,0xac,
	0xd0,0x48,0x07,0xc4,0x00,0xab,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xc0,0x00,0x00,0x00,0x04,0xd0,0x04,0xd0,
	0x04,0x40,0x04,0x00,0x03,0xe0,0x03,0xc0,
	0x03,0xb0,0x03,0xb0,0x03,0xa0,0x03,0xa0,
	0x03,0xa0,0x03,0xa0,0x03,0xa0,0x03,0x90,
	0x03,0x90,0x03,0x90,0x03,0x80,0x03,0x80,
	0x03,0x70,0x03,0x70,0x03,0x60,0x03,0x60,
	0x03,0x50,0x03,0x50,0x03,0x40,0x03,0x40,
	0x03,0x30,0x03,0x20,0x03,0x10,0x03,0x00,
	0x02,0xf0,0x02,0xf0,0x02,0xf0,0x02,0xf0,
	0x03,0x00,0x03,0x10,0x03,0x40,0x03,0x90,
	0x03,0xe0,0x04,0x20,0x04,0x60,0x04,0x90,
	0x04,0xa0,0x04,0x60,0x04,0x40,0x04,0x40,
	0x05,0x20,0x08,0x00,0x08,0x40,0x08,0x40,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,
	0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xaa,
	0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x20,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xd0,0x41,0x06,0x23,
	0x60,0x50,0x01,0x46,0x00,0x66,0xd0,0x01,
	0xa0,0x38,0x80,0x3f,0xb0,0x01,0xa0,0x37,
	0x80,0x3f,0x00,0x21,0xd0,0x0c,0x81,0xf6,
	0xa0,0x34,0x81,0xb6,0xa0,0x34,0x82,0x76,
	0xa0,0x34,0x80,0x3f,0x00,0x20,0xdc,0xc6,
	0x00,0xc6,0x1f,0xe0,0xf8,0x32,0x00,0x25,
	0x78,0x20,0x00,0x12,0xf8,0x27,0x01,0x46,
	0x02,0x46,0x00,0xe0,0xda,0x00,0x25,0x68,
	0x03,0x9e,0xf8,0x25,0x25,0xa8,0x00,0xc6,
	0x02,0x06,0x00,0xe4,0x70,0x70,0xb0,0x7f,
	0x00,0xe4,0x60,0x70,0x00,0xa7,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xfa,0x00,0x05,
	0x01,0x46,0x00,0x70,0xd0,0x01,0xa0,0x37,
	0x80,0x3f,0x00,0xc6,0xc0,0x00,0xc0,0x00,
	0xe0,0x38,0xc0,0x00,0x00,0x24,0x73,0x14,
	0x06,0x23,0x73,0x7c,0x00,0x06,0x13,0x21,
	0xf8,0x1c,0x00,0xee,0xd0,0x64,0xa0,0x76,
	0x92,0xb4,0x0f,0xef,0xd0,0x7f,0x30,0x4a,
	0xe8,0x16,0x12,0xa0,0xe8,0x13,0xf0,0x44,
	0xe0,0x14,0xf0,0x51,0xf0,0x63,0xe0,0x1a,
	0xf0,0x51,0x13,0x60,0xe8,0x1a,0xf0,0x68,
	0xf0,0xc0,0xe0,0x36,0x13,0x20,0xf8,0x29,
	0xf0,0x51,0x13,0xa0,0xe8,0x24,0xec,0x24,
	0xf0,0x6d,0xe0,0x27,0x13,0x60,0xf8,0x27,
	0xf0,0x70,0xf0,0xc0,0xe0,0x36,0xf0,0x51,
	0x13,0xa0,0xe8,0x2f,0xec,0x2f,0xf0,0x6d,
	0xe0,0x30,0xf0,0x70,0x13,0x60,0xe8,0x33,
	0xf0,0x68,0x13,0x22,0xe8,0x36,0xf0,0xc0,
	0xf0,0x95,0xf0,0x9d,0xf0,0xb1,0x00,0x6f,
	0xd0,0x68,0xa0,0x76,0xa3,0xb4,0xa3,0xf4,
	0x00,0xab,0xd0,0x58,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0xc3,0xca,0xd0,0x4f,
	0x43,0xc1,0xb3,0xf0,0x12,0x9c,0x42,0x81,
	0x12,0xa7,0xec,0x4d,0xb2,0xb0,0x13,0xc1,
	0xd3,0x8f,0x33,0x8a,0x07,0xc5,0x00,0xee,
	0xd0,0x74,0xa0,0x76,0x92,0xf4,0xc3,0xcb,
	0xd0,0x5f,0x43,0xc1,0xb0,0x7f,0x23,0xc1,
	0x12,0xdb,0xd0,0x47,0x42,0xc1,0x12,0xe3,
	0xec,0x60,0xb2,0xf8,0xd3,0x87,0x33,0x8b,
	0x07,0xc5,0xc0,0x4f,0x10,0x5d,0xb3,0x82,
	0x33,0xc1,0x07,0xc5,0xc0,0x4f,0x10,0x5d,
	0xb3,0xbe,0x23,0xc1,0x07,0xc5,0x00,0x24,
	0xd0,0x58,0xe0,0x72,0x00,0x24,0xd0,0x5c,
	0x78,0x01,0x06,0xaa,0xd0,0x64,0x13,0xc2,
	0x20,0x4f,0x70,0xc1,0xd0,0x40,0x30,0x4e,
	0x10,0x48,0x30,0x43,0x00,0x23,0xd0,0xff,
	0xd1,0x00,0x00,0x17,0xe8,0x82,0x21,0x01,
	0x10,0x5f,0x18,0x01,0x48,0x03,0x18,0x20,
	0xf8,0x7f,0xc0,0x44,0x10,0x58,0xb0,0x7f,
	0xd3,0x80,0x33,0x81,0x41,0x03,0x30,0xc4,
	0x10,0xdd,0x10,0xc2,0x06,0xae,0xd0,0x64,
	0x20,0x43,0x73,0xc1,0x07,0xc5,0x00,0x24,
	0xd0,0x60,0x78,0x01,0x00,0x22,0xd0,0x40,
	0x30,0x60,0xf8,0xd8,0x07,0xc5,0x00,0x23,
	0xd0,0x74,0x78,0x01,0xd0,0x43,0x40,0x60,
	0x18,0x1e,0x23,0xa0,0x10,0x60,0xe8,0xb0,
	0x00,0xe2,0xd8,0x2c,0x28,0x01,0xa8,0x36,
	0x98,0x34,0xe0,0xd8,0xc0,0x00,0x00,0x6c,
	0x00,0x5b,0x00,0x4c,0x07,0xc5,0xc8,0x0f,
	0x00,0x17,0xe8,0xb7,0x13,0xdf,0xb3,0x81,
	0xe0,0xbf,0xc8,0x0f,0x18,0x20,0xe8,0xbf,
	0x00,0x16,0xf8,0xbf,0x13,0xc1,0xb3,0xbf,
	0xe0,0xb7,0x07,0xc5,0x00,0xee,0xd0,0x63,
	0xa0,0x76,0x98,0x34,0xc0,0x60,0x10,0x60,
	0xe8,0xe1,0x10,0x5f,0x10,0x42,0x06,0xab,
	0xd0,0xa4,0x20,0x81,0x70,0x82,0x00,0x10,
	0xf8,0xd0,0x10,0x97,0xc8,0x02,0xd0,0x7f,
	0x48,0x01,0x10,0x9a,0xd0,0x47,0x40,0x81,
	0x23,0x82,0x18,0x02,0xc0,0x4f,0xd3,0xc0,
	0x00,0x17,0xe8,0xdd,0x23,0xc1,0x10,0x5f,
	0x18,0x01,0x10,0x60,0xf8,0xda,0x07,0xc5,
	0xc0,0x00,0x00,0x00,0x1a,0x22,0xf8,0x00,
	0xd1,0xc0,0x00,0xee,0xd0,0x62,0xa0,0x76,
	0x90,0x74,0x10,0x60,0xe8,0x10,0x00,0xee,
	0xd0,0x7f,0xa0,0x76,0x93,0x34,0x13,0x20,
	0xe8,0x10,0xd1,0xc1,0xd1,0x80,0x00,0xee,
	0xd0,0x76,0xa0,0x76,0x94,0xf4,0x14,0xe0,
	0xe8,0x44,0x00,0xee,0xd0,0x7d,0xa0,0x76,
	0x92,0xb4,0x12,0xa0,0xe8,0x44,0xd1,0x81,
	0x00,0xef,0xd0,0x4d,0xa0,0x76,0x9b,0xf4,
	0x9c,0x34,0x93,0x74,0x93,0xb4,0x02,0x20,
	0xd0,0x43,0x20,0x6f,0x10,0x48,0xa0,0x6c,
	0x01,0x86,0x09,0x09,0x00,0xcd,0xc0,0x4a,
	0xb0,0x41,0x10,0x62,0xf8,0x32,0xd0,0x43,
	0x83,0x45,0x10,0x48,0x10,0xcb,0x20,0x43,
	0x20,0x70,0x30,0x6f,0x00,0xb0,0xd0,0x00,
	0x20,0x40,0x08,0x30,0xd0,0x00,0x10,0x02,
	0xa0,0x0a,0xa0,0x46,0x80,0x0a,0x80,0x3f,
	0x01,0x86,0x06,0xc9,0x00,0xee,0xd0,0xb2,
	0xa0,0xb6,0x9a,0xf4,0x00,0xee,0xd0,0x77,
	0xa0,0x76,0x97,0xb4,0x00,0xee,0xd0,0x7e,
	0xa0,0x76,0x92,0xf4,0x00,0xef,0xd0,0x51,
	0xa0,0x76,0xd3,0xc0,0xdb,0x80,0xd2,0x0a,
	0xd4,0x00,0xf1,0x3b,0x9c,0xb4,0x9b,0x74,
	0x12,0xc2,0x00,0xef,0xd0,0x7f,0x42,0xc1,
	0xc0,0x4b,0x10,0x56,0x10,0x60,0xe8,0xa7,
	0xd0,0x41,0x03,0xc1,0xc0,0x4f,0xc0,0x8f,
	0x10,0x46,0x10,0x87,0x80,0x69,0x10,0x4b,
	0xa0,0x6a,0x01,0x86,0x09,0x09,0x01,0x4d,
	0xd0,0xd8,0x30,0xc5,0xa0,0xeb,0x84,0x29,
	0x10,0x8b,0xa0,0xaa,0x10,0xc7,0xa0,0xeb,
	0x08,0x30,0xd4,0x00,0x20,0x0f,0xa0,0x2c,
	0xc0,0x4b,0x10,0x56,0xb0,0x41,0x10,0x62,
	0xf8,0x80,0xd0,0x43,0x83,0x45,0x10,0x48,
	0x11,0x4a,0x20,0x45,0x20,0x72,0xb0,0x41,
	0x00,0xb0,0xd0,0x00,0x20,0x40,0x08,0x30,
	0xd0,0x00,0x10,0x02,0xa0,0x0a,0x80,0x3f,
	0xa0,0x46,0x80,0x3f,0x80,0x0a,0x80,0x3f,
	0x01,0x86,0x06,0xc9,0x12,0x2a,0xf8,0x9b,
	0x11,0xa0,0xe8,0x9c,0xf0,0xfd,0xd1,0x80,
	0xe0,0x9c,0xf0,0xfd,0x11,0xe2,0xe8,0xc0,
	0xf1,0x3b,0x01,0x86,0x08,0x89,0x00,0x4d,
	0x14,0x02,0x54,0x01,0xc4,0xb2,0xc4,0x6d,
	0xc2,0x2e,0xbb,0xbf,0xc0,0x6b,0x30,0x6e,
	0xec,0x58,0x11,0xe0,0xe8,0xb2,0xdc,0x87,
	0xc2,0xcc,0x12,0xca,0xd1,0xc2,0xe0,0x62,
	0x12,0x2a,0xf8,0xb6,0x11,0xa0,0xe8,0xbe,
	0xd0,0x41,0x03,0xc1,0x08,0x30,0xd0,0x00,
	0x20,0x0f,0xf1,0x3b,0xa0,0x2c,0xf0,0xfd,
	0x11,0xe0,0xe8,0xcc,0xd2,0x06,0xdb,0x86,
	0xd4,0x87,0xd4,0x47,0xd0,0x41,0x03,0xc1,
	0x08,0x30,0xd0,0x00,0x20,0x0f,0xf1,0x3b,
	0xa0,0x2c,0xf0,0xfd,0xf1,0x3b,0xd0,0x05,
	0x30,0x2b,0x10,0x01,0x14,0x00,0x00,0x6f,
	0xd0,0x80,0xa0,0xb6,0xa4,0x34,0x00,0xee,
	0xd0,0x5e,0xa0,0x76,0x95,0xb4,0x15,0xa2,
	0xf8,0xe5,0x00,0x25,0x78,0x20,0x00,0x15,
	0xf8,0xe5,0x00,0xab,0xd0,0x70,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xab,
	0xd0,0x68,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xc0,0xc1,0x10,0xde,0x10,0xc2,
	0x06,0x27,0xd0,0x94,0x20,0x83,0x70,0x82,
	0xd0,0xc3,0x40,0x43,0x30,0xc1,0x10,0xe0,
	0xe8,0xfa,0x10,0x9a,0xb0,0xc1,0xf8,0xf7,
	0xd0,0x7f,0x40,0x42,0x07,0xc5,0x02,0x2f,
	0xd0,0x7c,0xc0,0xc8,0x10,0xc8,0x20,0x43,
	0x11,0xa0,0xe9,0x0b,0x02,0xa3,0xd0,0x7c,
	0xc0,0xf0,0x30,0xef,0x10,0xde,0xb0,0xff,
	0xe1,0x0e,0xc0,0xd2,0xb0,0xfa,0x10,0xde,
	0x00,0x06,0x80,0x69,0xd1,0x2d,0x80,0x3f,
	0x30,0xc4,0xfd,0x1c,0x00,0x22,0xd0,0xb0,
	0x00,0x8a,0x6a,0xc1,0x00,0x06,0xb0,0xbc,
	0x20,0x42,0xe1,0x12,0x20,0xc4,0xb0,0xc1,
	0x10,0xc2,0x00,0xca,0x6a,0xc1,0x00,0x06,
	0x11,0xa0,0xe9,0x29,0x02,0x2e,0xd0,0xc8,
	0xc0,0x4e,0x30,0x4d,0xe1,0x33,0xc0,0xc8,
	0x10,0xc1,0x20,0xc8,0x10,0xc3,0x20,0xc8,
	0x10,0xc2,0x02,0x26,0x20,0xd4,0xc0,0x51,
	0xb0,0x41,0x10,0x5f,0x10,0x42,0x00,0x06,
	0x84,0x29,0x80,0x3f,0x00,0x4a,0x6a,0xc3,
	0x07,0xc5,0xd0,0x41,0x10,0x4f,0x10,0x48,
	0x00,0x06,0x01,0x86,0xa0,0x69,0x80,0x3f,
	0x07,0xc5,0xc0,0x00,0x01,0x86,0xd8,0x81,
	0x0c,0x09,0x00,0x4d,0x00,0x60,0x71,0x00,
	0xb1,0x3f,0x00,0x60,0x61,0x00,0x00,0x25,
	0x78,0x20,0x00,0x11,0xf8,0x1c,0xd0,0x47,
	0x90,0x8d,0x40,0x42,0xe8,0x1c,0x00,0x14,
	0xf8,0x19,0x00,0xa7,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xe4,0x00,0x05,0x08,0x20,
	0xdf,0xc8,0xe1,0xb1,0x00,0x10,0xe8,0x1e,
	0xf1,0x66,0xb1,0x50,0x01,0xa7,0x61,0x5c,
	0x07,0xc9,0x08,0x4d,0x08,0x89,0x01,0x0d,
	0x18,0xa2,0xf8,0x2c,0x06,0x23,0x68,0x6c,
	0x06,0x23,0x61,0x30,0x00,0x6e,0xd0,0xda,
	0xa0,0xf6,0xa1,0x34,0x11,0x22,0xfc,0x67,
	0x11,0x23,0xf8,0x64,0x0f,0xef,0x38,0x7f,
	0xf8,0x64,0x00,0x25,0x78,0x20,0x00,0x18,
	0xe8,0x64,0xd0,0x83,0x00,0x2f,0x60,0xb8,
	0x00,0xe4,0x78,0x1c,0x18,0x20,0xe8,0x60,
	0x01,0x46,0x02,0x86,0x00,0x29,0xd0,0x28,
	0x70,0x00,0x00,0x06,0x15,0x21,0xe8,0x57,
	0xc2,0x80,0x30,0x14,0xe8,0x57,0xc0,0x20,
	0xc8,0x54,0x18,0x5e,0xb8,0x41,0xc8,0x0a,
	0x18,0x1e,0x10,0x22,0xf8,0x56,0x04,0x57,
	0x0b,0xcc,0x02,0x06,0x00,0x60,0x70,0x40,
	0x00,0x37,0xd9,0x2d,0x03,0xcc,0x00,0x37,
	0xd9,0x5c,0x03,0xcc,0x84,0x38,0x00,0xc6,
	0xc0,0x00,0xe0,0x62,0x08,0x20,0xdf,0xc2,
	0xe1,0xb1,0x05,0x6b,0x61,0x10,0x11,0x20,
	0xe8,0x7c,0x11,0x21,0xe8,0x70,0x06,0x25,
	0xd0,0x30,0xe0,0x72,0x06,0x24,0xd0,0x0c,
	0x00,0x6d,0xd0,0x68,0xa0,0x76,0x00,0x21,
	0xd0,0x60,0x01,0x46,0x00,0x4a,0x7d,0x00,
	0x00,0x06,0x00,0xc6,0x00,0x6e,0xd0,0xdb,
	0xa0,0xf6,0x06,0x23,0xd0,0x74,0x18,0xa3,
	0xf8,0x85,0x70,0x81,0xe0,0x8b,0x09,0x89,
	0x00,0x8d,0x01,0x86,0x18,0xa2,0xf8,0x8b,
	0x60,0x81,0xa0,0xb4,0xd0,0x26,0x30,0x02,
	0xec,0x92,0x08,0x20,0xdf,0xc5,0xe1,0xb1,
	0x06,0xe0,0xd0,0x24,0x10,0x82,0x20,0x02,
	0xb0,0x3d,0x11,0x21,0xf8,0x9b,0xb0,0x02,
	0xd0,0xc1,0x70,0x80,0x11,0x22,0xf8,0xa1,
	0xc0,0x02,0x10,0x1f,0x20,0x80,0x05,0x6b,
	0x60,0x98,0x18,0xa2,0xf8,0xab,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xf3,
	0x00,0x05,0xd0,0x81,0x06,0x23,0x60,0x90,
	0x00,0x20,0xd0,0xb4,0x01,0xef,0x60,0x8c,
	0x02,0x20,0x60,0x94,0x02,0x21,0x60,0x9c,
	0x02,0x22,0x60,0xa4,0x02,0x23,0x60,0xac,
	0x02,0x24,0x60,0xb4,0xd0,0x80,0xb0,0x81,
	0x01,0xe9,0x60,0xa4,0x01,0xea,0x60,0xac,
	0x01,0xeb,0x60,0xb4,0x01,0xec,0x60,0xbc,
	0x01,0xee,0x60,0x84,0x09,0x49,0x00,0x4d,
	0x00,0x6e,0xd0,0xdc,0xa0,0xf6,0xa0,0x74,
	0x08,0xc9,0x10,0x68,0xfc,0xd4,0x08,0x20,
	0xdf,0xca,0xe1,0xb1,0x00,0x4d,0x08,0xc9,
	0xa0,0x74,0x05,0x8d,0x00,0x24,0x72,0x50,
	0x00,0xee,0xd0,0x5e,0xa0,0x76,0x98,0x34,
	0x06,0x23,0x62,0x44,0x00,0x6e,0xd0,0x5e,
	0xa0,0x76,0xa5,0xb4,0xca,0xd6,0x15,0xa0,
	0xf8,0xe8,0xda,0xc2,0x15,0xa4,0xe4,0xee,
	0xba,0xc1,0x15,0xa6,0xe4,0xee,0xba,0xc1,
	0x00,0x6e,0xd0,0x72,0xa0,0x76,0xaa,0xf4,
	0x00,0x30,0xd5,0x01,0xa0,0x38,0xd7,0xd2,
	0x00,0xac,0xd0,0x48,0x07,0xc4,0x02,0x86,
	0x06,0x24,0x65,0x08,0x02,0x06,0x00,0x30,
	0xd5,0x00,0xa0,0x38,0x00,0x24,0x72,0x50,
	0x12,0x68,0xe5,0x05,0xd2,0x40,0x00,0x6f,
	0xd0,0x6a,0xa0,0x76,0x00,0x24,0x71,0xe8,
	0xb1,0xc1,0xe5,0x38,0x11,0xe4,0xed,0x38,
	0x00,0xee,0xd0,0x5d,0xa0,0x76,0x90,0x74,
	0x10,0x67,0xf9,0x2d,0xc0,0x56,0xb0,0x42,
	0xe5,0x2d,0x12,0x62,0xe5,0x2d,0x12,0x63,
	0xed,0x2d,0xd2,0x02,0xc1,0x01,0x10,0x42,
	0x21,0x01,0x21,0x07,0xc0,0x44,0x11,0x01,
	0x15,0xa5,0xe5,0x26,0x21,0x01,0xb1,0x0f,
	0x06,0x6a,0xd0,0x5c,0x12,0x63,0xf9,0x57,
	0x06,0x6f,0xd0,0x48,0xe1,0x57,0x15,0xa0,
	0xf9,0x38,0xd2,0x01,0xc1,0x09,0x11,0x02,
	0x21,0x09,0x21,0x07,0x11,0x01,0x06,0x65,
	0xd0,0x5c,0xe1,0x57,0xd2,0x00,0xc1,0x16,
	0x11,0x01,0x11,0x23,0xe5,0x44,0xb1,0x01,
	0x11,0x2a,0xe5,0x44,0xb1,0x3f,0x11,0x2d,
	0xe5,0x44,0xb1,0x3f,0x00,0x22,0x78,0x30,
	0x00,0x10,0xe9,0x50,0x12,0x61,0xf9,0x4d,
	0x06,0x64,0xd0,0x54,0xe1,0x57,0x12,0x63,
	0xe5,0x50,0xd2,0x40,0xc0,0x49,0x10,0x43,
	0x20,0x49,0x10,0x41,0x21,0x01,0x06,0x2b,
	0xd0,0x54,0x11,0x02,0x21,0x01,0x01,0x46,
	0x02,0x0b,0x7d,0x04,0x00,0x06,0x00,0xc6,
	0x06,0x24,0x62,0x04,0x00,0xaa,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x68,0xd0,0x80,0x90,0xe1,0x40,0xc2,
	0xf9,0x68,0x83,0x62,0x90,0xa3,0x10,0x9e,
	0x10,0x82,0x82,0x62,0x90,0xe3,0x10,0xde,
	0x10,0xc4,0x30,0x83,0x86,0x45,0xd1,0x3f,
	0x90,0xc6,0x10,0xd5,0x40,0xc4,0xb0,0xfe,
	0x10,0xc2,0x30,0x83,0x10,0x83,0xd0,0xdf,
	0x91,0x0d,0x41,0x03,0x20,0x84,0xc1,0x82,
	0x31,0x85,0xf5,0x8f,0x82,0x62,0x91,0x63,
	0x11,0x5e,0x11,0x44,0x81,0x62,0x91,0x23,
	0x11,0x1e,0x11,0x02,0x31,0x05,0x11,0x03,
	0x21,0x84,0xc1,0x42,0x07,0xc5,0x06,0x23,
	0x72,0xb8,0xd8,0x82,0x0f,0xef,0xd0,0xbf,
	0x00,0xad,0xd8,0x37,0x00,0x27,0xd3,0x20,
	0x08,0x49,0x02,0xcd,0x12,0x81,0x52,0x8b,
	0x42,0x82,0x0c,0x1a,0xe8,0x04,0xb3,0x01,
	0xed,0x9a,0x00,0x22,0xd0,0xc0,0x81,0xa2,
	0x90,0x63,0x30,0x43,0xed,0x94,0x06,0x23,
	0x62,0xb8,0x00,0xa7,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xf2,0x00,0x05,0x00,0xac,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xd8,0x83,0x06,0x23,0x71,0x30,
	0xd8,0x40,0xe0,0x2c,0xc0,0x00,0x00,0x00,
	0x00,0x24,0x71,0x50,0x11,0x68,0xe4,0x05,
	0xd1,0x40,0x00,0x24,0x71,0xe8,0xb1,0xc1,
	0x06,0x24,0x72,0x04,0xc8,0x56,0x00,0x90,
	0xe8,0x16,0x15,0xa1,0xe8,0x16,0x08,0x89,
	0x00,0x6e,0xd0,0x5f,0xa0,0x76,0x02,0xcd,
	0xc2,0xcb,0xa2,0xf4,0x00,0x92,0xe8,0x1f,
	0x08,0x89,0x00,0x6e,0xd0,0x60,0xa0,0x76,
	0x03,0x0d,0xc3,0x0c,0xa3,0x34,0x12,0x22,
	0xf8,0x2e,0xc0,0x56,0xb0,0x42,0xc1,0x01,
	0x10,0x42,0x21,0x01,0x21,0x07,0x06,0xa7,
	0xd0,0x74,0x11,0x63,0xf8,0x33,0x06,0xa9,
	0xd0,0x6c,0xe0,0x33,0xc1,0x05,0x11,0x03,
	0x21,0x16,0x06,0xa3,0xd0,0x74,0x11,0x02,
	0x20,0x44,0x70,0x01,0x00,0x24,0xd1,0xac,
	0x15,0xa1,0xf8,0x3b,0xb1,0xbc,0x00,0x6f,
	0xd0,0xb0,0xa0,0xb6,0xc0,0xab,0xd1,0x47,
	0xc0,0x40,0x10,0x1d,0x40,0x45,0xf8,0x47,
	0x00,0x21,0xd0,0xc0,0xe0,0x6d,0x10,0x61,
	0xe8,0x6a,0x10,0x62,0xe8,0x6c,0x10,0x63,
	0xf8,0x53,0x12,0xe0,0xe8,0x6a,0x12,0xe2,
	0xe8,0x6c,0xd0,0xe6,0xe0,0x6d,0x10,0x64,
	0xf8,0x5b,0x12,0xe0,0xe8,0x44,0x12,0xe2,
	0xe8,0x6a,0xd0,0xf6,0xe0,0x6d,0x10,0x65,
	0xf8,0x62,0x13,0x20,0xe8,0x6a,0x13,0x22,
	0xe8,0x68,0xe0,0x6c,0x13,0x20,0xe8,0x6c,
	0x13,0x22,0xe8,0x68,0xd0,0xd7,0xe0,0x6d,
	0xd0,0xc0,0xe0,0x6d,0xd0,0xed,0xe0,0x6d,
	0xd0,0xe0,0x78,0x06,0xb1,0xbc,0x00,0x24,
	0xd0,0x70,0x30,0x46,0xf8,0x78,0xb1,0xbc,
	0xd0,0x41,0x40,0x56,0x10,0x42,0x31,0x81,
	0xc0,0x43,0xd0,0xc0,0x00,0x17,0xe8,0x7d,
	0x20,0xc1,0x10,0x5f,0x18,0x01,0x10,0x60,
	0xf8,0x7a,0xa0,0xf4,0xb0,0x81,0xec,0x40,
	0x00,0x6f,0xd0,0xba,0xa0,0xb6,0x00,0x24,
	0x70,0xe4,0x10,0xe0,0xe8,0x90,0x00,0x25,
	0x70,0xc0,0x10,0xdf,0x00,0x21,0x40,0xff,
	0xa0,0xf4,0x15,0xa2,0xf8,0x9a,0x08,0x89,
	0x00,0x6e,0xd0,0xe1,0xa0,0xf6,0x00,0x4d,
	0xc0,0x41,0xa0,0x74,0x08,0x49,0x00,0x6e,
	0xd0,0xe2,0xa0,0xf6,0x00,0x4d,0x09,0x49,
	0xa0,0x74,0x00,0x4d,0x08,0x49,0xa0,0x74,
	0x00,0x4d,0x0f,0xef,0xd0,0xff,0xc2,0x41,
	0x10,0x60,0xe8,0xac,0x0a,0x09,0x00,0xcd,
	0x08,0x49,0xa0,0xf4,0x12,0x41,0x00,0x4d,
	0x52,0x41,0x10,0x60,0xe8,0xba,0x0a,0x09,
	0x00,0x6e,0xd0,0xe5,0xa0,0xf6,0x00,0x4d,
	0xc0,0x41,0xa0,0x74,0x08,0x49,0x12,0x41,
	0x00,0x4d,0x52,0x41,0x10,0x60,0xe8,0xca,
	0x09,0x49,0x00,0x6e,0xd0,0xe6,0xa0,0xf6,
	0x00,0x4d,0x08,0x89,0xa0,0x74,0x00,0x4d,
	0xc0,0x41,0xa0,0x74,0x15,0xa0,0xe8,0xce,
	0x12,0x43,0xe0,0xf8,0x09,0x49,0x00,0x4d,
	0x08,0x49,0xa0,0x74,0x12,0x41,0x00,0x4d,
	0x52,0x41,0x10,0x60,0xe8,0xdb,0x0a,0x09,
	0x00,0x4d,0xc0,0x41,0xa0,0x74,0x08,0x49,
	0x12,0x41,0x00,0x4d,0x52,0x41,0x10,0x60,
	0xe8,0xe8,0x0a,0x09,0x00,0x6e,0xd0,0xea,
	0xa0,0xf6,0x00,0x4d,0xc0,0x41,0xa0,0x74,
	0x08,0x49,0x12,0x41,0x00,0x4d,0x52,0x41,
	0x10,0x60,0xe8,0xf8,0x09,0x49,0x00,0x6e,
	0xd0,0xeb,0xa0,0xf6,0x00,0x4d,0x08,0x89,
	0xa0,0x74,0x00,0x4d,0xc0,0x41,0xa0,0x74,
	0x08,0x49,0x00,0x6e,0xd0,0xed,0xa0,0xf6,
	0x00,0x4d,0x08,0x49,0xa0,0x74,0x00,0x4d,
	0x08,0x49,0xa0,0x74,0x12,0x41,0x00,0x4d,
	0x52,0x41,0x10,0x60,0xe9,0x0b,0x0b,0x89,
	0x00,0x4d,0xc0,0x41,0xa0,0x74,0x08,0x49,
	0x12,0x41,0x00,0x4d,0x52,0x41,0x10,0x60,
	0xe9,0x18,0x0b,0x89,0x00,0x6e,0xd0,0xf0,
	0xa0,0xf6,0x00,0x4d,0xc0,0x41,0xa0,0x74,
	0x00,0x6e,0xd0,0xf0,0xa0,0xf6,0x08,0x49,
	0x12,0x41,0x00,0x4d,0x52,0x41,0x00,0x6e,
	0xd1,0x31,0xa1,0x36,0xa2,0x74,0x10,0x60,
	0xe9,0x56,0x09,0x89,0x01,0x0d,0xc1,0x04,
	0x00,0xe7,0x61,0x2c,0x00,0xe7,0xd0,0xf2,
	0xb1,0x3f,0xd1,0x40,0xd8,0x00,0x0a,0x09,
	0x11,0x48,0xb8,0x3f,0x00,0x4d,0x51,0x41,
	0x00,0x10,0xf9,0x41,0x00,0x11,0xe9,0x3a,
	0xc1,0x85,0xe1,0x41,0x01,0x46,0xa1,0x7c,
	0xa1,0xbd,0xb0,0xfc,0x61,0x43,0x00,0x06,
	0x00,0xc6,0xb1,0x01,0xed,0x2f,0x00,0x10,
	0xf9,0x48,0x00,0x11,0xf9,0x4b,0xe1,0x56,
	0x00,0x11,0xf9,0x4e,0x11,0x48,0x01,0x46,
	0xa1,0x7d,0xe1,0x52,0x01,0x46,0x11,0x48,
	0xa1,0x7c,0xa1,0xbd,0xb0,0xfc,0x61,0x43,
	0x00,0x06,0x00,0xc6,0x00,0x6e,0xd0,0x79,
	0xa0,0x76,0xd8,0x00,0xb8,0x01,0xa8,0x34,
	0x00,0x6e,0xd8,0x34,0xa8,0x36,0x80,0x34,
	0x00,0x60,0x71,0x00,0x00,0x06,0x00,0x60,
	0x70,0x44,0x10,0x60,0xf9,0x79,0x00,0x60,
	0x61,0x0c,0xd0,0x40,0x00,0x60,0x60,0x48,
	0x00,0x60,0xd0,0xd0,0x00,0xee,0xd0,0x5a,
	0xa0,0x76,0x01,0x46,0x0b,0x0b,0x6d,0x03,
	0x00,0x06,0x00,0xc6,0xd0,0x41,0x00,0x60,
	0x60,0x48,0x00,0x2f,0x70,0xbc,0x31,0x02,
	0xed,0x8e,0xe9,0x8b,0x10,0xa0,0xe9,0x8b,
	0xd0,0x81,0x00,0x2f,0x60,0xb8,0x08,0x20,
	0xdf,0xc1,0x00,0xac,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xd0,0x82,
	0x00,0x2f,0x60,0xb8,0x00,0xab,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xc0,0x00,0x00,0x00,0x02,0x86,0x15,0x21,
	0xf8,0x06,0x00,0x29,0x75,0x28,0x00,0x06,
	0x02,0x06,0x01,0x46,0x02,0x86,0xd5,0xbf,
	0xd1,0x00,0x00,0xee,0xd0,0x62,0xa0,0x76,
	0x90,0x74,0x10,0x60,0xe8,0x16,0x00,0x24,
	0x70,0x64,0x10,0x60,0xe8,0x16,0xd5,0x9f,
	0x00,0xef,0xd0,0x2a,0xa0,0x36,0x0f,0xef,
	0xd0,0xbf,0x90,0xf4,0xc0,0x03,0x10,0x14,
	0x10,0x27,0xe8,0x2f,0xe4,0x22,0xd1,0x01,
	0x10,0x21,0xf8,0x26,0xd0,0x43,0xe0,0x2a,
	0xb0,0x02,0xd0,0x41,0x10,0x40,0x40,0x56,
	0x05,0x81,0x10,0xc4,0x40,0xc2,0xf8,0x1c,
	0xe0,0x1b,0x06,0x23,0x61,0x3c,0xd5,0xc0,
	0x15,0x89,0x15,0x88,0x00,0xc6,0x03,0xe8,
	0xd6,0x1c,0x02,0x06,0xdb,0x80,0x0b,0x92,
	0x0b,0x91,0xd7,0x40,0xda,0x02,0x00,0xee,
	0xd0,0x62,0xa0,0x76,0x95,0x34,0x00,0xee,
	0xd0,0x76,0xa0,0x76,0x94,0xf4,0x97,0xb4,
	0x00,0xee,0xd0,0x72,0xa0,0x76,0x9a,0xf4,
	0x9a,0xb4,0x00,0xef,0xd0,0x41,0xa0,0x76,
	0x95,0xf4,0x95,0xb4,0x95,0x74,0x96,0x34,
	0x97,0x34,0x96,0xf4,0x96,0x74,0xb6,0x4f,
	0x16,0x44,0x17,0x08,0x17,0x18,0x02,0x86,
	0x00,0x25,0x75,0x5c,0x05,0x6b,0x70,0x70,
	0x10,0x60,0xe8,0x68,0xd0,0x4e,0xc0,0x81,
	0x40,0x95,0xe8,0x65,0x55,0x41,0x10,0x44,
	0x10,0x60,0xf8,0x61,0x02,0x06,0x00,0xee,
	0xd0,0x5e,0xa0,0x76,0x90,0x74,0x10,0x62,
	0xf8,0x73,0xd7,0xd2,0x00,0xac,0xd0,0x48,
	0x07,0xc4,0x00,0xac,0xd0,0x40,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xc0,0x00,
	0xdb,0x80,0xd7,0x40,0x03,0xe8,0xd1,0x9c,
	0x00,0xee,0xd0,0xf6,0xa0,0xf6,0x94,0xf4,
	0x97,0xb4,0x00,0xee,0xd0,0xf2,0xa0,0xf6,
	0x9a,0xf4,0x9a,0xb4,0x82,0x29,0x80,0x2a,
	0x14,0xe0,0xe8,0x22,0xc8,0x5e,0xc0,0x2e,
	0x18,0x40,0x00,0x94,0xe8,0x22,0x17,0x60,
	0xf8,0x1f,0xdc,0xc1,0xf0,0x45,0xd7,0x41,
	0xdc,0xc2,0xf0,0x36,0xe0,0x24,0xdc,0xc3,
	0xf0,0x45,0xe0,0x24,0xdc,0xc0,0xf0,0x45,
	0xbb,0xbf,0xc0,0xeb,0x30,0xee,0xec,0x10,
	0x00,0xee,0xd0,0xe2,0xa0,0xf6,0x95,0x34,
	0x15,0x20,0xe8,0x30,0xdc,0xc4,0xf0,0x40,
	0x00,0xab,0xd0,0x60,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0xef,0xd0,0xcd,
	0xa0,0xf6,0x9c,0x74,0x9c,0xb4,0x9b,0x34,
	0x9b,0x74,0xcb,0xf1,0xcc,0x32,0xe0,0x4e,
	0xdb,0x00,0xdb,0x47,0xdc,0x87,0xdc,0x40,
	0xe0,0x4e,0x00,0xef,0xd0,0xd1,0x20,0xee,
	0x20,0xee,0xa0,0xf6,0x9c,0xb4,0x9b,0x74,
	0xdb,0x00,0xdc,0x40,0xc1,0xdf,0xc0,0x6d,
	0xb0,0x7f,0x10,0x5f,0xc0,0xec,0x10,0xdf,
	0x30,0x43,0x10,0x44,0xb0,0x7a,0xa0,0x6b,
	0x02,0xa8,0xd0,0x48,0xa0,0x6b,0x02,0xec,
	0xd0,0x40,0x20,0x6c,0xc8,0x2c,0x00,0x10,
	0xe8,0x62,0xb0,0x41,0x10,0x48,0x00,0x20,
	0xd0,0xe3,0x20,0x43,0xa0,0x6b,0x1c,0xe2,
	0xe8,0x8a,0x1a,0x81,0x80,0x6b,0xf1,0xcb,
	0x10,0x07,0xd0,0xff,0x20,0x03,0x10,0x03,
	0xc8,0x2a,0x00,0x16,0xe8,0x74,0xb0,0x3c,
	0x10,0x1e,0xa0,0x2b,0x1c,0xe3,0xe8,0x7a,
	0x1c,0xe1,0xf8,0x8a,0xd0,0x52,0x10,0x44,
	0xb0,0x7a,0xa0,0x6b,0xc0,0x6e,0x10,0x43,
	0xc0,0xc1,0x10,0x43,0x20,0x43,0x01,0xe9,
	0xd0,0xe4,0x20,0x43,0xa0,0x6b,0x08,0xf0,
	0xd0,0x00,0xa0,0x2b,0xc0,0x72,0x1c,0xe2,
	0xf8,0x92,0x30,0x71,0xb0,0x7d,0x02,0xa4,
	0xd1,0x40,0xe0,0x9d,0xb0,0x7a,0x1c,0xe4,
	0xf8,0x98,0x02,0xa7,0xd1,0x7c,0xe0,0x9d,
	0x02,0x2f,0xd1,0x7c,0xc0,0xee,0x10,0xc8,
	0x21,0x43,0x10,0x5e,0x10,0x44,0xb0,0x7a,
	0xa0,0x6b,0xa1,0x6b,0x02,0xec,0xd0,0x40,
	0xc0,0xf1,0xb0,0xfd,0x10,0xde,0x20,0x43,
	0x10,0x48,0x00,0x20,0xd0,0xc2,0x20,0x43,
	0xa0,0x6b,0xc0,0x71,0x10,0x48,0x20,0x72,
	0xb0,0x41,0x10,0x45,0xc8,0x2a,0x00,0x16,
	0xe8,0xb6,0xb0,0x70,0x1c,0xe1,0xf8,0xb9,
	0xb0,0x7c,0xa0,0x6b,0xc0,0x71,0x10,0x4b,
	0xa0,0x6b,0xc0,0xf1,0xb0,0xfd,0x10,0xc8,
	0x20,0xf2,0xb0,0xc1,0x03,0x20,0xd0,0x40,
	0x1c,0xe2,0xf8,0xc8,0x03,0x24,0xd0,0x40,
	0x10,0x48,0x20,0x43,0xa0,0x6b,0x1c,0xe4,
	0xe9,0x95,0x1c,0xe3,0xe8,0xe3,0x1c,0xe1,
	0xe9,0x25,0x1c,0xe2,0xf9,0x07,0xc0,0x70,
	0x30,0x6f,0x10,0x44,0xb0,0x79,0xa0,0x6b,
	0x02,0xa9,0xd0,0x6c,0xa0,0x6b,0x02,0x28,
	0xd0,0x40,0x20,0x6f,0xb0,0x7d,0x10,0x48,
	0x20,0x6f,0xa0,0x6b,0xe1,0x07,0xc0,0x30,
	0x30,0x2f,0x10,0x1e,0x10,0x04,0xb0,0x3a,
	0xa0,0x2b,0x02,0xa3,0xd0,0x3c,0xb0,0x3c,
	0xa0,0x2b,0x02,0xec,0xd0,0x00,0xc0,0x6f,
	0xb0,0x7d,0x10,0x5e,0x20,0x01,0x00,0x20,
	0xd0,0x42,0x10,0x08,0x20,0x01,0xa0,0x2b,
	0xc0,0x70,0x30,0x6f,0x10,0x44,0xb0,0x7a,
	0xa0,0x6b,0x02,0xa9,0xd0,0x6c,0xa0,0x6b,
	0x02,0x24,0xd0,0x40,0x20,0x6f,0xb0,0x7d,
	0x10,0x48,0x20,0x6f,0xa0,0x6b,0x89,0x6b,
	0x0c,0xb0,0xd0,0x00,0x1c,0xe0,0xe9,0x14,
	0x1c,0xe4,0xe9,0x14,0xc0,0x6f,0xb0,0x7d,
	0x10,0x48,0x20,0x01,0x20,0x30,0xe1,0x15,
	0x20,0x32,0xa0,0x2b,0x1b,0xa1,0xf9,0x20,
	0x14,0xe0,0xe9,0x20,0x00,0xee,0xd0,0x78,
	0xa0,0x76,0x90,0x74,0x10,0x60,0xf9,0x32,
	0xc0,0x2e,0xf1,0xbd,0x1b,0xa1,0xe9,0x48,
	0x86,0x6b,0xc7,0xc7,0x80,0x2a,0x01,0x46,
	0x00,0x21,0xd1,0x6c,0x01,0x4a,0x6a,0xc6,
	0x00,0x06,0x00,0xc6,0x80,0x2a,0xb1,0x7c,
	0x21,0x85,0x07,0xc5,0x00,0x21,0xd0,0x49,
	0xa0,0x6b,0xf1,0x26,0x06,0x23,0xd0,0x40,
	0x78,0x01,0x18,0x20,0xe9,0x20,0x18,0x05,
	0xd1,0x19,0xb1,0x34,0x18,0x01,0x18,0x20,
	0xe9,0x20,0x00,0x57,0xe9,0x3d,0xc0,0x44,
	0x10,0x48,0xb0,0x77,0xa0,0x6b,0xe1,0x3d,
	0x00,0x21,0xd0,0x59,0xa0,0x6b,0xf1,0x26,
	0xd0,0x00,0xf1,0xa8,0x00,0x60,0xd0,0x46,
	0xa0,0x6b,0x04,0x6e,0xd0,0x7c,0xa0,0x6b,
	0x0b,0xf0,0xd0,0x02,0xa0,0x2b,0x00,0x21,
	0xd0,0x69,0xa0,0x6b,0x00,0x21,0xd0,0x45,
	0xa0,0x6b,0x0c,0xb0,0xd0,0xfe,0xa0,0x2b,
	0xd0,0x00,0xf1,0xbd,0x8e,0x6b,0xd0,0x01,
	0xf1,0xa8,0x00,0x21,0xd0,0x49,0xa0,0x6b,
	0xf1,0x26,0x00,0xef,0xd0,0x51,0xa0,0x76,
	0x90,0xf4,0x90,0x74,0x90,0x74,0xcc,0x81,
	0x30,0x43,0xfd,0x73,0xcc,0x83,0x8a,0x6b,
	0xd0,0xc0,0xd0,0x00,0xf1,0x9b,0xd0,0x00,
	0xf1,0x83,0x8e,0x6b,0xd0,0x00,0xf1,0xa8,
	0xd0,0xc1,0xd0,0x01,0xf1,0x9b,0xd0,0x01,
	0xf1,0x83,0x86,0x6b,0xe1,0x25,0xc0,0x40,
	0x10,0x44,0xb0,0x7b,0xa0,0x6b,0x00,0xee,
	0xd8,0x73,0xa8,0x76,0x98,0x74,0x18,0x40,
	0x00,0x9b,0xf9,0x91,0x0c,0xf0,0xd0,0x00,
	0xe1,0x93,0x0d,0x70,0xd0,0x00,0xa0,0x2b,
	0x07,0xc5,0xd0,0x0d,0xa0,0x2b,0x0d,0x30,
	0xd0,0x07,0xa0,0x2b,0xe1,0x25,0x00,0xee,
	0xd0,0x7c,0xa0,0x76,0x90,0x74,0x10,0x4b,
	0xb0,0x7f,0x10,0x46,0x8d,0x6b,0xa0,0x6b,
	0x10,0xc8,0x20,0xf2,0xb0,0xc2,0xe1,0xae,
	0x8d,0x6b,0x00,0x21,0xd0,0x40,0xa0,0x6b,
	0x00,0x23,0xd0,0xfb,0x00,0xaa,0xd0,0x76,
	0xa0,0x6b,0x04,0x24,0xd0,0x6c,0x10,0x20,
	0xe9,0xb7,0x04,0x2f,0xd0,0x5c,0xa0,0x6b,
	0x09,0x30,0xd0,0x00,0x20,0x03,0xa0,0x2b,
	0x07,0xc5,0x00,0xaa,0xd0,0x77,0xa0,0x6b,
	0x04,0x24,0xd0,0x6c,0x10,0x20,0xe9,0xc6,
	0x04,0x2f,0xd0,0x5c,0xa0,0x6b,0x0b,0xb0,
	0xd0,0x30,0xa0,0x2b,0x07,0xc5,0x00,0xef,
	0xd0,0xa8,0x00,0x06,0xa0,0xb6,0x80,0x3f,
	0x93,0xb4,0x93,0xf4,0x13,0x88,0x13,0x98,
	0x00,0xef,0xd0,0xb0,0x20,0xae,0x1c,0xe4,
	0xf9,0xdb,0x00,0xef,0xd0,0xba,0xa0,0xb6,
	0x98,0x74,0xc8,0x0f,0xd3,0xc0,0x00,0x96,
	0xe9,0xe2,0x23,0xe0,0x18,0x1f,0x18,0x41,
	0x18,0x20,0xf9,0xdf,0xc8,0x4f,0x00,0x97,
	0xe9,0xeb,0x13,0xdf,0xb3,0x81,0xc8,0x4f,
	0x18,0x60,0xe9,0xf4,0x00,0x96,0xf9,0xf3,
	0x13,0xc1,0xb3,0xbf,0xe1,0xeb,0xb3,0x81,
	0x13,0xe0,0xf9,0xf7,0xd3,0xbf,0xc0,0x0e,
	0xd0,0x58,0x20,0x01,0x10,0x07,0x20,0x0f,
	0x07,0xc5,0xc0,0x00,0xdb,0x80,0xd7,0x40,
	0x03,0xe8,0xd1,0x9c,0x00,0xee,0xd0,0x76,
	0xa0,0x76,0x94,0xf4,0x97,0xb4,0x00,0xee,
	0xd0,0x72,0xa0,0x76,0x9a,0xf4,0x9a,0xb4,
	0x82,0x29,0x80,0x2a,0x14,0xe0,0xe8,0x22,
	0xc8,0x5e,0xc0,0x2e,0x18,0x40,0x00,0x94,
	0xe8,0x22,0x17,0x60,0xf8,0x1f,0xdc,0xc1,
	0xf0,0x45,0xd7,0x41,0xdc,0xc2,0xf0,0x36,
	0xe0,0x24,0xdc,0xc3,0xf0,0x45,0xe0,0x24,
	0xdc,0xc0,0xf0,0x45,0xbb,0xbf,0xc0,0x6b,
	0x30,0x6e,0xec,0x10,0x00,0xee,0xd0,0x62,
	0xa0,0x76,0x95,0x34,0x15,0x20,0xe8,0x30,
	0xdc,0xc4,0xf0,0x40,0x00,0xab,0xd0,0x60,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xef,0xd0,0x4d,0xa0,0x76,0x9c,0x74,
	0x9c,0xb4,0x9b,0x34,0x9b,0x74,0xcb,0xf1,
	0xcc,0x32,0xe0,0x4e,0xdb,0x00,0xdb,0x47,
	0xdc,0x87,0xdc,0x40,0xe0,0x4e,0x00,0xef,
	0xd0,0x51,0x20,0x6e,0x20,0x6e,0xa0,0x76,
	0x9c,0xb4,0x9b,0x74,0xdb,0x00,0xdc,0x40,
	0xc1,0xdf,0xc0,0x2d,0xb0,0x3f,0x10,0x1f,
	0xc0,0x6c,0x10,0x5f,0x30,0x01,0x10,0x04,
	0xb0,0x3a,0xa0,0x2b,0x02,0xa8,0xd0,0x08,
	0xa0,0x2b,0x02,0xec,0xd0,0x00,0x20,0x2c,
	0xc8,0x2c,0x00,0x10,0xe8,0x62,0xb0,0x01,
	0x10,0x08,0x00,0x20,0xd0,0x63,0x20,0x01,
	0xa0,0x2b,0x1c,0xe2,0xe8,0x87,0x1a,0x81,
	0x80,0x6b,0xf1,0x21,0x10,0x0a,0xc8,0x2a,
	0x00,0x16,0xe8,0x71,0xb0,0x3c,0x10,0x1e,
	0xa0,0x2b,0x1c,0xe3,0xe8,0x77,0x1c,0xe1,
	0xf8,0x87,0xd0,0x12,0x10,0x04,0xb0,0x3a,
	0xa0,0x2b,0xc0,0x2e,0x10,0x03,0xc0,0x40,
	0x10,0x03,0x20,0x01,0x01,0xe9,0xd0,0x64,
	0x20,0x01,0xa0,0x2b,0x08,0xf0,0xd0,0x00,
	0xa0,0x2b,0xc0,0x32,0x1c,0xe2,0xf8,0x8f,
	0x30,0x31,0xb0,0x3d,0x02,0xa4,0xd0,0xc0,
	0xe0,0x9a,0xb0,0x3a,0x1c,0xe4,0xf8,0x95,
	0x02,0xa7,0xd0,0xfc,0xe0,0x9a,0x02,0x2f,
	0xd0,0xfc,0xc0,0x6e,0x10,0x48,0x20,0xc1,
	0x10,0x1e,0x10,0x04,0xb0,0x3a,0xa0,0x2b,
	0xa0,0xeb,0x02,0xec,0xd0,0x00,0xc0,0x71,
	0xb0,0x7d,0x10,0x5e,0x20,0x01,0x10,0x08,
	0x00,0x20,0xd0,0x42,0x20,0x01,0xa0,0x2b,
	0xc0,0x31,0x10,0x08,0x20,0x32,0xb0,0x01,
	0x10,0x05,0xc8,0x2a,0x00,0x16,0xe8,0xb3,
	0xb0,0x30,0x1c,0xe1,0xf8,0xb6,0xb0,0x3c,
	0xa0,0x2b,0xc0,0x31,0x10,0x0b,0xa0,0x2b,
	0xc0,0x71,0xb0,0x7d,0x10,0x48,0x20,0x72,
	0xb0,0x41,0x03,0x20,0xd0,0x00,0x1c,0xe2,
	0xf8,0xc5,0x03,0x24,0xd0,0x00,0x10,0x08,
	0x20,0x01,0xa0,0x2b,0x1c,0xe3,0xe8,0xde,
	0x1c,0xe1,0xe9,0x17,0x1c,0xe2,0xf9,0x01,
	0xc0,0x30,0x30,0x2f,0x10,0x04,0xb0,0x39,
	0xa0,0x2b,0x02,0xa9,0xd0,0x2c,0xa0,0x2b,
	0x02,0x28,0xd0,0x00,0x20,0x2f,0xb0,0x3d,
	0x10,0x08,0x20,0x2f,0xa0,0x2b,0xe1,0x01,
	0xc0,0x30,0x30,0x2f,0x10,0x1e,0x10,0x04,
	0xb0,0x3a,0xa0,0x2b,0x02,0xa4,0xd0,0x00,
	0xa0,0x2b,0x02,0xec,0xd0,0x00,0xc0,0x6f,
	0xb0,0x7d,0x10,0x5e,0x20,0x01,0x00,0x20,
	0xd0,0x42,0x10,0x08,0x20,0x01,0xa0,0x2b,
	0xc0,0x30,0x30,0x2f,0x10,0x04,0xb0,0x3a,
	0xa0,0x2b,0x02,0xa9,0xd0,0x2c,0xa0,0x2b,
	0x02,0x24,0xd0,0x00,0x20,0x2f,0xb0,0x3d,
	0x10,0x08,0x20,0x2f,0xa0,0x2b,0xd0,0x0d,
	0xa0,0x2b,0x03,0x60,0xd0,0x00,0xc8,0x2a,
	0x00,0x1c,0xe9,0x0a,0x03,0x68,0xd0,0x00,
	0x1c,0xe0,0xe9,0x14,0x1c,0xe4,0xe9,0x14,
	0xc0,0x6f,0xb0,0x7d,0x20,0x01,0x10,0x08,
	0x20,0x30,0xe1,0x16,0x10,0x08,0x20,0x32,
	0xa0,0x2b,0x80,0x2a,0x00,0x21,0xd0,0xec,
	0x00,0xca,0x6a,0xc6,0x00,0x06,0x80,0x2a,
	0xb0,0xfc,0x21,0x83,0x01,0xc5,0x00,0xef,
	0xd0,0xa8,0x00,0x06,0xa0,0xb6,0x80,0x3f,
	0x93,0xb4,0x93,0xf4,0x13,0x88,0x13,0x98,
	0x00,0xef,0xd0,0xb0,0x20,0xae,0x1c,0xe4,
	0xf9,0x31,0x00,0xef,0xd0,0xba,0xa0,0xb6,
	0x98,0x74,0xc8,0x0f,0xd3,0xc0,0x00,0x96,
	0xe9,0x38,0x23,0xe0,0x18,0x1f,0x18,0x41,
	0x18,0x20,0xf9,0x35,0xc8,0x4f,0x00,0x97,
	0xe9,0x41,0x13,0xdf,0xb3,0x81,0xc8,0x4f,
	0x18,0x60,0xe9,0x4a,0x00,0x96,0xf9,0x49,
	0x13,0xc1,0xb3,0xbf,0xe1,0x41,0xb3,0x81,
	0x13,0xe0,0xf9,0x4d,0xd3,0xbf,0xc0,0x0e,
	0xd0,0x58,0x20,0x01,0x10,0x07,0x20,0x0f,
	0x07,0xc5,0xc0,0x00,0x05,0x6a,0xd0,0x3c,
	0x7a,0xc0,0x02,0x86,0x05,0x6b,0xd8,0x24,
	0x65,0x20,0x02,0x06,0x05,0x6a,0xd0,0x38,
	0xd0,0x40,0x60,0x40,0x01,0x46,0x00,0x21,
	0xd0,0x01,0xa0,0x38,0x80,0x3f,0x00,0xc6,
	0x07,0xe8,0xd0,0x00,0x90,0x61,0x80,0x3f,
	0x40,0x40,0xf8,0x14,0x80,0x3f,0x07,0xa0,
	0xd0,0x00,0x84,0x22,0x80,0x3f,0xa0,0x23,
	0x80,0x3f,0xd0,0x9f,0x90,0x4d,0x80,0x3f,
	0x40,0x42,0x05,0x6a,0xd0,0x00,0x60,0x40,
	0x86,0x45,0x80,0x3f,0xd0,0xbf,0x90,0x46,
	0x10,0x55,0x40,0x42,0xb0,0x7e,0x10,0x42,
	0x82,0x62,0x80,0x3f,0x90,0xa3,0x10,0x9e,
	0x10,0x84,0x81,0x62,0x80,0x3f,0x90,0xe3,
	0x10,0xde,0x10,0xc2,0x30,0xc2,0x83,0x62,
	0x80,0x3f,0x91,0x23,0x11,0x1e,0x11,0x02,
	0x31,0x01,0x30,0x84,0xfc,0x42,0x21,0x03,
	0x83,0x62,0x80,0x3f,0xa1,0x23,0x80,0x3f,
	0x81,0xa2,0x80,0x3f,0x90,0xa3,0x10,0x9e,
	0x10,0x82,0x20,0x81,0xa0,0xa3,0x80,0x3f,
	0x81,0xe2,0x80,0x3f,0x98,0x23,0x18,0x1e,
	0x18,0x02,0x00,0x55,0xe8,0x57,0x04,0x56,
	0x04,0x57,0x38,0x01,0x81,0xe2,0x80,0x3f,
	0xa8,0x23,0x80,0x3f,0x03,0x20,0xd0,0x00,
	0x10,0x0a,0xa0,0x0a,0x80,0x3f,0x84,0x05,
	0x80,0x3f,0xa0,0x06,0x80,0x3f,0x03,0x20,
	0xd0,0x00,0x10,0x0a,0xa0,0x27,0x80,0x3f,
	0x86,0x45,0x80,0x3f,0x80,0x06,0x80,0x3f,
	0x80,0x17,0x80,0x3f,0x80,0x0a,0x80,0x3f,
	0x84,0x05,0x80,0x3f,0x80,0x06,0x80,0x3f,
	0x80,0x27,0x80,0x3f,0x80,0x64,0x80,0x3f,
	0x06,0xa0,0xd0,0x01,0x84,0x22,0x80,0x3f,
	0xa0,0x23,0x80,0x3f,0x01,0x46,0x00,0x21,
	0xd0,0x00,0xa0,0x38,0x80,0x3f,0x00,0xc6,
	0x07,0xc9,0x00,0x4d,0x07,0xc9,0x00,0x4d,
	0x07,0xc9,0x00,0x4d,0x07,0xc9,0x00,0x4d,
	0x05,0x6a,0xd0,0x04,0x70,0x00,0xc0,0x00,
	0x10,0x20,0xe8,0x9a,0x10,0x1d,0x01,0x86,
	0x0a,0x09,0x00,0x4d,0xb0,0x01,0xec,0x95,
	0x00,0x68,0xd0,0x00,0x98,0x21,0x80,0x3f,
	0x48,0x00,0xf8,0x9c,0x00,0x20,0xd0,0x12,
	0x10,0x20,0xc0,0x73,0xc7,0xf2,0x00,0x06,
	0x80,0x3f,0x00,0x05,0x04,0xed,0x72,0x8c,
	0x12,0xa0,0xe8,0x23,0x00,0xa1,0xdb,0xc8,
	0x00,0x60,0xdc,0x0e,0x00,0x6f,0xd0,0x48,
	0xd0,0x12,0x00,0x61,0xd7,0xef,0x00,0x05,
	0x04,0xed,0x72,0x8c,0x12,0xa0,0xf8,0x23,
	0x04,0xee,0x72,0xe8,0xd3,0x04,0x63,0x0b,
	0xd3,0x00,0x04,0xee,0x63,0x28,0xd2,0x84,
	0x00,0x2a,0x62,0xa8,0x06,0xe5,0xd2,0x9c,
	0x01,0x46,0x78,0x0a,0x04,0x1e,0x68,0x0a,
	0x00,0xc6,0x04,0xee,0x72,0x98,0x12,0xa0,
	0xe8,0x40,0x00,0x20,0xd2,0xeb,0x32,0xca,
	0xe8,0x40,0x00,0x21,0xd2,0xc3,0x32,0xca,
	0xe8,0x40,0x04,0xee,0x72,0xa4,0x12,0xa0,
	0xe8,0x40,0xd2,0x80,0x04,0xee,0x62,0xa4,
	0x04,0xee,0x72,0xe0,0xd3,0x04,0x63,0x0b,
	0xd3,0x00,0x04,0xee,0x63,0x20,0xd2,0x84,
	0x00,0x2a,0x62,0xa8,0x05,0x20,0x72,0x8c,
	0x12,0xa2,0xf8,0x57,0x04,0xef,0x72,0xb0,
	0x00,0x23,0x42,0xbf,0x00,0x20,0x32,0xa7,
	0xe8,0x51,0x00,0xa1,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xa2,
	0xd0,0x48,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x04,0xee,0x70,0xec,0x10,0xe0,
	0xe8,0x5c,0xf2,0x18,0x04,0xee,0x72,0x98,
	0x12,0xa0,0xe9,0xce,0x00,0x20,0x32,0xa0,
	0x00,0x61,0xd2,0xea,0x22,0xca,0x00,0x62,
	0xd3,0x04,0x33,0x0b,0xfd,0xce,0x02,0xc5,
	0xe1,0xce,0xe0,0x84,0xe1,0xce,0xe1,0xce,
	0xe1,0xce,0xe0,0xb7,0xe1,0xce,0xe1,0xce,
	0xe1,0xc5,0xe1,0xc5,0xe1,0xc5,0xe0,0xea,
	0xe1,0xce,0xe1,0xce,0xe1,0x1c,0xe1,0x31,
	0xe1,0xce,0xe1,0xce,0xe1,0xc5,0xe1,0xc5,
	0xe1,0x77,0xe1,0xc1,0xe1,0xc5,0xe1,0xce,
	0xe1,0xce,0xe1,0xce,0x04,0xeb,0x78,0x28,
	0x00,0x13,0xf8,0xa0,0x00,0x12,0xf8,0x8f,
	0x00,0x11,0xe9,0xda,0x04,0x12,0x04,0xeb,
	0x68,0x28,0x04,0xef,0x72,0xd4,0x12,0xe0,
	0xe9,0xda,0x04,0x13,0x04,0xeb,0x68,0x28,
	0xd2,0xc0,0x04,0xef,0x62,0xd4,0xd2,0x83,
	0x04,0xee,0x72,0xdc,0x62,0x8b,0x00,0x2a,
	0x62,0xa8,0xe1,0xce,0x04,0xeb,0x72,0xb0,
	0x12,0xa0,0xf9,0xce,0xd2,0x82,0x00,0x2a,
	0x62,0xa0,0xd2,0xc0,0x04,0xeb,0x62,0xe8,
	0xf2,0x18,0x01,0x46,0x00,0x21,0xd2,0x81,
	0xa2,0xb8,0x80,0x3f,0x06,0xe5,0x78,0x1c,
	0x04,0x1d,0x06,0xe5,0x68,0x1c,0x00,0xc6,
	0xe1,0xc5,0x04,0xef,0x72,0x90,0x12,0xa4,
	0xe9,0xce,0x12,0xa5,0xe9,0xce,0x12,0xa6,
	0xe9,0xce,0x05,0xac,0x72,0xc4,0x12,0xe3,
	0xe9,0xda,0x12,0xa1,0xe8,0xdc,0x12,0xa3,
	0xf9,0xda,0x12,0xe1,0xf9,0xda,0x00,0x2d,
	0xd2,0x80,0x72,0xca,0x32,0xcc,0xe8,0xd5,
	0x00,0x2d,0xd2,0xa0,0x72,0xca,0x32,0xcc,
	0xe8,0xd5,0x00,0x2e,0xd2,0x80,0x00,0x2b,
	0xd2,0xd4,0x62,0x8b,0x05,0xe6,0x72,0xf8,
	0x12,0xe0,0xf8,0xd8,0x05,0x27,0x72,0xa4,
	0x12,0xa0,0xe9,0xda,0xd2,0x84,0x04,0xef,
	0x62,0x90,0xd2,0x83,0x04,0xee,0x72,0xdc,
	0x62,0x8b,0x00,0x2a,0x62,0xa8,0xe1,0xda,
	0x04,0xeb,0x72,0x90,0x12,0xa1,0xe9,0x13,
	0x12,0xa3,0xe8,0xf1,0xe1,0xc3,0x05,0x63,
	0x72,0xd4,0x12,0xe0,0xe9,0xda,0x04,0xea,
	0x72,0xc0,0x12,0xe2,0xf9,0x09,0x04,0xea,
	0x72,0xc4,0x12,0xe1,0xf9,0x09,0x00,0xa4,
	0xd8,0x30,0xa8,0x36,0x80,0x3f,0x98,0x34,
	0x04,0x13,0x00,0x24,0xd2,0xb0,0xa2,0xb6,
	0x80,0x3f,0xa8,0x34,0xe1,0xc5,0x05,0xe0,
	0x78,0x34,0x00,0x14,0xe9,0xda,0x00,0x15,
	0xe9,0xda,0xd2,0xc8,0x00,0x2a,0x62,0xe0,
	0xe1,0xc5,0x10,0xe0,0xf9,0xc3,0x00,0x2b,
	0x72,0xb8,0x04,0xee,0x72,0xc8,0x32,0xca,
	0xed,0xda,0xe1,0xc3,0x04,0xee,0x72,0xb0,
	0x12,0xa0,0xe9,0x2a,0xd2,0x83,0x04,0xee,
	0x72,0xdc,0x62,0x8b,0x00,0x2a,0x62,0xa8,
	0x04,0xea,0x72,0x80,0x12,0xb0,0xe9,0xc3,
	0x05,0xe6,0x72,0xbc,0x04,0xed,0x72,0xdc,
	0x32,0xca,0xe9,0xda,0xe1,0xc3,0x04,0xef,
	0x72,0xe4,0x12,0xe2,0xf9,0x74,0x05,0x26,
	0x72,0xa0,0x12,0xa1,0xf9,0xda,0x05,0x63,
	0x72,0xd4,0x12,0xe0,0xe9,0xda,0xd2,0xc0,
	0x62,0xca,0xf2,0x22,0x05,0xe6,0x72,0xf8,
	0x12,0xe0,0xf9,0x40,0x05,0xe6,0x72,0xfc,
	0x05,0x25,0x62,0xf8,0x00,0x2d,0x73,0x00,
	0x32,0xcc,0xf9,0x4e,0x00,0x2d,0x73,0x20,
	0x05,0x25,0x63,0x34,0xd2,0xc0,0x04,0xef,
	0x62,0xe0,0xf2,0x18,0x04,0xea,0x73,0x00,
	0x13,0x22,0xf9,0x68,0x04,0xea,0x73,0x04,
	0x13,0x21,0xf9,0x68,0x00,0xa4,0xd8,0x30,
	0xa8,0x36,0x80,0x3f,0x98,0x34,0x04,0x13,
	0x00,0x24,0xd2,0xb0,0xa2,0xb6,0x80,0x3f,
	0xa8,0x34,0xe1,0xc5,0xd2,0x88,0x00,0x2a,
	0x62,0xa0,0x01,0x46,0x06,0xe5,0x78,0x1c,
	0x04,0x1d,0x04,0x1b,0x06,0xe5,0x68,0x1c,
	0x00,0xc6,0xe1,0xc5,0x10,0xe0,0xe9,0xda,
	0xe1,0xc3,0x04,0xee,0x72,0xd0,0x12,0xe0,
	0xf9,0x82,0x04,0xef,0x72,0xa0,0xd2,0xc2,
	0x42,0x8b,0x12,0xa0,0xf9,0x82,0xe1,0x8e,
	0x10,0xe0,0xe9,0xda,0xd2,0x80,0x04,0xef,
	0x62,0x90,0xd2,0x80,0x04,0xef,0x62,0x94,
	0x04,0xee,0x62,0x90,0x04,0xef,0x62,0xa0,
	0x04,0xef,0x72,0xd4,0x12,0xe0,0xe9,0xda,
	0x05,0x26,0x72,0xbc,0x12,0xa0,0xe9,0x98,
	0x12,0xe3,0xe5,0xda,0x12,0xe2,0xe5,0xda,
	0xd2,0xc0,0x04,0xef,0x62,0xd4,0x04,0xea,
	0x72,0xc0,0x12,0xe2,0xe9,0xa2,0xf2,0x22,
	0xd7,0xd2,0x00,0xa0,0xd0,0x48,0x07,0xc4,
	0xf2,0xf6,0xd2,0x88,0x00,0x2a,0x62,0xa0,
	0x01,0x46,0x04,0xea,0x72,0xc0,0x12,0xe2,
	0xf9,0xba,0x00,0xa4,0xd8,0x30,0xa8,0x36,
	0x80,0x3f,0x98,0x34,0x00,0x1e,0xf9,0xba,
	0x00,0x21,0xd2,0x81,0xa2,0xb8,0x80,0x3f,
	0x06,0xe5,0x78,0x1c,0x04,0x1d,0x06,0xe5,
	0x68,0x1c,0x00,0xc6,0xe1,0xc5,0x10,0xe0,
	0xe9,0xda,0xd2,0x83,0xe1,0xc6,0xd2,0x84,
	0x04,0xee,0x72,0xdc,0x62,0x8b,0x00,0x2a,
	0x62,0xa8,0xd2,0x80,0x04,0xee,0x62,0x98,
	0x04,0xe9,0x72,0x8c,0x04,0xe9,0x73,0x08,
	0x32,0x8c,0xe9,0xda,0x00,0x6d,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x2a,0x72,0xe0,0x00,0x20,0x42,0xca,
	0xe9,0xf0,0x00,0x27,0x72,0xb0,0x12,0xa0,
	0xe9,0xea,0x00,0x23,0xd2,0xff,0xf2,0x2c,
	0xb2,0xc1,0xf9,0xe5,0xb2,0x81,0xe1,0xe1,
	0x00,0xa1,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x05,0x6e,0x72,0xd4,
	0x04,0xee,0x72,0x84,0x52,0xca,0xea,0x12,
	0x00,0xa1,0xd2,0xc8,0x04,0xeb,0x62,0xc8,
	0x00,0x68,0xd2,0xc4,0x04,0xeb,0x62,0xcc,
	0x00,0x67,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x04,0xea,0x72,0xe8,
	0x12,0xe4,0xfa,0x12,0x00,0x2b,0x72,0xf8,
	0x00,0x21,0x32,0xe4,0xee,0x12,0xd7,0xd2,
	0x00,0xa0,0xd0,0x40,0x07,0xc4,0xf2,0xb0,
	0x00,0xa1,0xd0,0x58,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x04,0xed,0x72,0xa4,
	0x12,0xa0,0xea,0x21,0x04,0xed,0x62,0xa8,
	0xd2,0x80,0x04,0xed,0x62,0xa4,0x07,0xc5,
	0x05,0x2f,0x72,0xbc,0x12,0xa0,0xea,0x2b,
	0x05,0xac,0x72,0x98,0x12,0xa3,0xea,0x2b,
	0xe1,0xda,0x07,0xc5,0x00,0xef,0xd0,0x3c,
	0x01,0x46,0x59,0x80,0x39,0x80,0x00,0x24,
	0xd0,0x14,0x59,0x80,0x00,0xc6,0x07,0xc5,
	0x00,0x22,0x78,0x2c,0x00,0x17,0xe8,0x06,
	0x07,0x95,0xe0,0x07,0x0b,0x95,0x0e,0x27,
	0xd2,0xb6,0x00,0x25,0x78,0x20,0x00,0x16,
	0xe8,0x0f,0x00,0xee,0xd2,0x87,0x01,0x46,
	0x80,0x36,0xa2,0xb4,0x80,0x3f,0x00,0xc6,
	0xf1,0xc4,0x00,0x61,0x72,0xf0,0xb2,0xff,
	0x00,0x61,0x62,0xf0,0x01,0x46,0x81,0xa2,
	0x92,0xe3,0xc2,0xcb,0x00,0xc6,0x05,0x6a,
	0x72,0xa8,0x32,0x8b,0xec,0x2e,0x04,0xea,
	0x72,0xa8,0x12,0xa4,0xf8,0x2a,0xf1,0xce,
	0x18,0x20,0xe8,0x2e,0xd3,0x00,0x05,0x6f,
	0x63,0x10,0xe0,0x31,0xd3,0x01,0x05,0x6f,
	0x63,0x10,0x01,0x46,0x80,0x62,0x92,0xe3,
	0xc2,0xcb,0x00,0xc6,0x05,0x6a,0x72,0x94,
	0x32,0x8b,0xec,0x3e,0xd2,0xc0,0x05,0x6f,
	0x62,0xcc,0xe0,0x92,0xd2,0xc1,0x05,0x6f,
	0x62,0xcc,0x05,0x6f,0x72,0x90,0x12,0xa0,
	0xe8,0x92,0x05,0xe1,0x72,0x9c,0x12,0xa0,
	0xf8,0x92,0x03,0x95,0xf8,0x7e,0x05,0x64,
	0x72,0xf4,0x05,0x64,0x72,0x9c,0x32,0xca,
	0xf8,0x92,0x05,0x64,0x71,0x18,0xc2,0x84,
	0x12,0xa0,0xe8,0x92,0xb2,0xbc,0x72,0xca,
	0x12,0xe0,0xe8,0x92,0xc2,0x84,0xb2,0xb8,
	0x01,0x46,0x73,0x4a,0x00,0x06,0x92,0xfd,
	0xc2,0xcb,0x00,0xc6,0x0f,0xec,0x42,0xc0,
	0x12,0xc8,0x13,0x58,0x0f,0xef,0x43,0x7f,
	0x53,0x4b,0x05,0x62,0x72,0x84,0x12,0xa0,
	0xf8,0x92,0x01,0x46,0x92,0xc3,0x93,0x02,
	0xc3,0x0c,0x00,0xc6,0x12,0xd8,0x00,0x21,
	0x42,0xff,0x00,0x7f,0xdf,0xff,0x43,0x00,
	0x13,0x07,0x53,0x0b,0xc2,0xcc,0x32,0xcd,
	0xe4,0x92,0xe0,0x82,0x06,0xe5,0x78,0x3c,
	0x18,0x20,0xe8,0x92,0x01,0x46,0x06,0xe5,
	0x78,0x2c,0x04,0x10,0x06,0xe5,0x68,0x2c,
	0x06,0xe5,0x78,0x1c,0x04,0x17,0x06,0xe5,
	0x68,0x1c,0x00,0xc6,0xd2,0x80,0xb2,0x81,
	0x00,0x62,0x62,0xac,0x05,0xe7,0x72,0xe4,
	0x05,0xef,0xd0,0x78,0xd3,0x00,0xd2,0x80,
	0xb2,0xf4,0x73,0x4b,0x13,0x60,0xe8,0xa9,
	0x23,0x0d,0xb2,0xfc,0xb2,0xbf,0x00,0x20,
	0xd3,0x61,0x33,0x4a,0xfc,0xa9,0xc3,0x41,
	0x33,0x4b,0xec,0x98,0x05,0xe7,0xd2,0xe8,
	0xe0,0x98,0x00,0x28,0x72,0xf8,0x00,0x28,
	0x72,0xbc,0x32,0x8b,0xc3,0x4a,0x32,0x8c,
	0x00,0x2e,0x62,0xac,0x13,0x5e,0x33,0x4a,
	0xe4,0xc1,0x01,0x46,0x06,0xe5,0x78,0x24,
	0x04,0x12,0x06,0xe5,0x68,0x24,0x06,0xe5,
	0x78,0x1c,0x04,0x50,0x06,0xe5,0x68,0x1c,
	0x00,0xc6,0x00,0x2b,0x72,0xf8,0x12,0xe3,
	0xe5,0x76,0x05,0x6e,0x73,0x38,0x33,0x0b,
	0xe9,0x76,0x05,0x6e,0x62,0xf8,0x04,0xea,
	0x73,0xa8,0xd3,0xc0,0xd8,0x40,0x05,0x6c,
	0x72,0xc0,0x05,0x6b,0x73,0x50,0x05,0x6c,
	0x63,0x40,0x32,0xcd,0xe9,0x1a,0x04,0xd6,
	0xd2,0x81,0x05,0x6e,0x62,0x94,0x13,0x61,
	0xf8,0xe4,0x13,0xa4,0xe8,0xf9,0x13,0xa2,
	0xe8,0xf9,0xd3,0x48,0xd3,0xc1,0xe1,0x02,
	0x13,0x60,0xf8,0xe9,0xd3,0x4c,0xd3,0xc2,
	0xe1,0x02,0x13,0x62,0xf8,0xf2,0x13,0xa4,
	0xe8,0xf9,0x13,0xa2,0xe8,0xf9,0xd3,0x4e,
	0xd3,0xc7,0xe1,0x02,0x13,0x63,0xf8,0xf9,
	0x13,0xa4,0xf8,0xf9,0xd3,0x4a,0xd3,0xc3,
	0xe1,0x02,0x00,0x23,0xd2,0xff,0x05,0x6c,
	0x62,0xc0,0x08,0xd6,0xd2,0x80,0x05,0x6e,
	0x62,0x94,0xe1,0x1a,0x01,0x46,0x01,0x20,
	0xd2,0xb0,0xa2,0x80,0x80,0x3f,0x00,0xe7,
	0x78,0x28,0x00,0x15,0xe9,0x18,0xb3,0x48,
	0x05,0x6e,0x63,0x58,0x00,0x23,0x72,0xd0,
	0x12,0xc7,0x23,0x4b,0x98,0x01,0x00,0x16,
	0xe9,0x18,0x00,0x21,0xd8,0x00,0x53,0x60,
	0xa3,0x41,0x00,0xc6,0x05,0xa1,0x72,0xc4,
	0x05,0xa1,0x73,0x40,0x05,0xa1,0x63,0x44,
	0x32,0xcd,0xe9,0x2e,0x04,0xd6,0xd2,0xc3,
	0x05,0x6e,0x62,0xd4,0x13,0x60,0xe9,0x2b,
	0x00,0x22,0xd2,0xc0,0xe1,0x2d,0x00,0x21,
	0xd2,0xc0,0x53,0xcb,0x05,0x6c,0x72,0xc4,
	0x05,0x6b,0x73,0x54,0x05,0x6c,0x63,0x44,
	0x32,0xcd,0xe9,0x48,0x13,0x61,0xe9,0x3a,
	0x13,0xa4,0xf9,0x41,0x04,0xd6,0x13,0x43,
	0x53,0xcd,0xd2,0xc2,0x05,0x6e,0x62,0xd4,
	0xe1,0x48,0x00,0x23,0xd2,0xff,0x05,0x6c,
	0x62,0xc4,0x13,0xa3,0xe9,0x48,0xe1,0x54,
	0x05,0xa1,0x72,0xd8,0x05,0xa0,0x73,0x48,
	0x05,0xa1,0x63,0x58,0x32,0xcd,0xe9,0x54,
	0x04,0xd6,0xb3,0x7f,0x13,0x48,0x53,0xcd,
	0x05,0x64,0x78,0x04,0xd2,0xc0,0x05,0x64,
	0x62,0xc4,0x18,0x20,0xe9,0x60,0xd2,0xc4,
	0x05,0x6e,0x62,0xd4,0x00,0x61,0x63,0xe0,
	0x18,0x60,0xe9,0x64,0x00,0x61,0x63,0xe0,
	0x18,0x20,0xe9,0x6d,0x00,0x23,0x78,0x20,
	0x00,0x18,0xe9,0x6c,0x04,0xd7,0xe1,0x6d,
	0x04,0xd6,0x18,0x60,0xe9,0x76,0x01,0x46,
	0x06,0xe5,0x72,0xdc,0x52,0xe1,0x06,0xe5,
	0x62,0xdc,0x00,0xc6,0x00,0x61,0x72,0xa8,
	0x12,0xa0,0xe9,0x84,0x00,0xa1,0xdb,0xd0,
	0x00,0x66,0xdc,0x04,0x00,0xa1,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x04,0xea,0x72,0xc0,0x12,0xe0,0xf9,0xa3,
	0x05,0x26,0x72,0xfc,0x12,0xe0,0xf9,0xa9,
	0x00,0xe7,0x72,0xd8,0x12,0xe0,0xe9,0xbe,
	0x00,0x2a,0x72,0xa0,0x00,0x28,0xd2,0xea,
	0x42,0xca,0xe9,0xbe,0xd2,0xc1,0x07,0x27,
	0x62,0xc4,0x00,0xa1,0xdc,0x48,0x00,0x60,
	0xdc,0x00,0x00,0xad,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x04,0xea,
	0x72,0xc0,0x12,0xe4,0xe9,0xa9,0x12,0xe2,
	0xf9,0xbe,0x05,0x20,0x72,0xe4,0x12,0xe0,
	0xf9,0xb1,0x05,0x20,0x72,0xd0,0x12,0xe0,
	0xe9,0xbe,0xd2,0xc1,0x07,0x28,0x62,0xf4,
	0x00,0xa1,0xdc,0x50,0x00,0x66,0xdc,0x3e,
	0x00,0xad,0xd0,0x78,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0xa1,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xef,0xd0,0x3c,0x01,0x46,0x59,0x80,
	0x39,0x80,0x00,0x24,0xd0,0x14,0x59,0x80,
	0x00,0xc6,0x07,0xc5,0x05,0x28,0x71,0x94,
	0x06,0xef,0x71,0x60,0xc2,0x86,0x32,0x85,
	0xe9,0xdf,0xc2,0x85,0xb2,0xb0,0x01,0x2b,
	0xd2,0xe8,0x32,0xca,0xed,0xdd,0x00,0xef,
	0xd2,0x88,0x32,0x86,0xf9,0xe1,0xd8,0x00,
	0x07,0xc5,0xd8,0x01,0x07,0xc5,0x00,0x00,
	0x05,0x6e,0x72,0xf4,0x12,0xe0,0xe8,0x17,
	0xd2,0xc0,0x05,0x6e,0x62,0xf4,0x00,0x2b,
	0x72,0xe4,0xd3,0x1e,0x33,0x0b,0xec,0x17,
	0x05,0x6e,0x72,0xec,0xb2,0xff,0x05,0x6e,
	0x62,0xec,0xd7,0xd2,0x00,0xa0,0xd0,0x78,
	0x07,0xc4,0xf3,0x00,0xf3,0x31,0x03,0x54,
	0xe8,0x2d,0x82,0xa2,0x98,0x23,0x18,0x20,
	0x08,0x10,0x08,0x11,0x00,0x28,0x72,0xe8,
	0x00,0x2f,0x22,0xfc,0x32,0xe0,0xf8,0x2d,
	0x01,0x46,0x0b,0x54,0x07,0x53,0x82,0xa2,
	0x00,0x28,0x72,0xe0,0xa2,0xe3,0x80,0x3f,
	0x00,0xc6,0x01,0x46,0x80,0x62,0x80,0x3f,
	0x93,0x63,0x80,0x3f,0x00,0xc6,0x05,0x6a,
	0x63,0x48,0x05,0x6a,0x70,0x18,0x10,0x20,
	0xe8,0x3e,0x05,0x6a,0x60,0x14,0x05,0x6a,
	0x60,0x10,0xe0,0x8e,0x04,0xea,0x70,0x00,
	0x10,0x22,0xe8,0x45,0x10,0x24,0xe8,0x49,
	0xe0,0x56,0x04,0xea,0x70,0x04,0x10,0x21,
	0xf8,0x56,0x04,0xeb,0x70,0x10,0x10,0x21,
	0xe8,0x58,0x06,0xe4,0x72,0xc4,0x12,0xe0,
	0xf8,0x7d,0x05,0x6a,0x72,0xd0,0x05,0x6a,
	0x62,0xcc,0xe0,0x8e,0x00,0x61,0x73,0xac,
	0x05,0x6a,0x72,0xcc,0x05,0x6a,0x78,0x14,
	0x0c,0x1b,0xe8,0x8e,0x0c,0x1d,0xec,0x8e,
	0x05,0x6a,0x70,0x10,0x30,0x0d,0xfc,0x78,
	0x05,0x6a,0x72,0xdc,0x12,0xe0,0xf8,0x6e,
	0xd2,0xc1,0x05,0x6a,0x62,0xdc,0x05,0x2e,
	0x63,0xa4,0xe0,0x8e,0x05,0x2e,0x73,0xe4,
	0xc2,0xce,0x32,0xcf,0xb2,0xc2,0xfc,0x8e,
	0xd2,0xc0,0x05,0x6a,0x62,0xdc,0xe0,0x7d,
	0x00,0x2b,0x70,0x24,0xd2,0xc3,0x32,0xc0,
	0xec,0x8e,0x00,0x22,0x78,0x2c,0x00,0x16,
	0xe8,0x85,0x04,0xeb,0x70,0x28,0x10,0x20,
	0xf8,0x8e,0x05,0x6a,0x72,0xd4,0x05,0x6a,
	0x62,0xcc,0xe0,0x8e,0x05,0x6a,0x72,0xd0,
	0x05,0x6a,0x62,0xcc,0x05,0x26,0x78,0x38,
	0x00,0x17,0xe8,0xb1,0x05,0x29,0x72,0xd4,
	0x12,0xe0,0xf8,0xb1,0xd2,0xc1,0x05,0x29,
	0x62,0xd0,0x05,0x29,0x62,0xd4,0x05,0x26,
	0x78,0x38,0x04,0x18,0x05,0x26,0x68,0x38,
	0x05,0x28,0x72,0xd4,0x05,0x29,0x62,0xdc,
	0x07,0x51,0x01,0x46,0x06,0xa0,0xd2,0xc0,
	0xa2,0xf3,0x00,0x2b,0xd2,0xfe,0xa2,0xfe,
	0x0b,0x52,0xd2,0xc1,0x05,0x25,0x62,0xe4,
	0x00,0xc6,0x00,0xa6,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0xf1,0xc7,0x05,0x6a,0x7a,0x78,0x04,0xeb,
	0x70,0x68,0x10,0x60,0xf8,0x83,0x05,0x61,
	0x70,0x60,0x10,0x60,0xf8,0x0f,0x05,0x61,
	0x70,0x7c,0x10,0x60,0xe8,0x83,0x05,0x26,
	0x70,0x7c,0x10,0x60,0xe8,0x22,0x05,0x62,
	0x70,0x74,0x10,0x60,0xf8,0x1e,0x00,0x20,
	0xd0,0x4a,0x05,0x62,0x60,0x78,0xd0,0x41,
	0x05,0x62,0x60,0x74,0x05,0x62,0x70,0x78,
	0x10,0x60,0xf8,0x95,0xd0,0x40,0x05,0x62,
	0x60,0x74,0xd0,0x40,0x05,0x61,0x60,0x7c,
	0x05,0x61,0x60,0x60,0x04,0xee,0x70,0x18,
	0x00,0x20,0xd0,0x74,0x30,0x40,0xf8,0x38,
	0x00,0x2b,0x70,0xa4,0x05,0x6f,0xd0,0x18,
	0x70,0x40,0x30,0x42,0xe8,0x83,0x60,0x80,
	0x05,0x6a,0x70,0x50,0x05,0x6a,0x60,0x4c,
	0x05,0x62,0x70,0x64,0x05,0x62,0x60,0x68,
	0x05,0x61,0xd0,0x18,0x70,0x40,0xb0,0x7f,
	0x60,0x40,0x03,0x95,0xf8,0x6d,0x05,0x64,
	0x70,0x64,0x05,0x64,0x60,0x78,0x05,0x64,
	0x70,0x60,0x05,0x64,0x60,0x74,0x00,0x62,
	0xd0,0x26,0x05,0x64,0x70,0x78,0xb0,0x6c,
	0x01,0x46,0x70,0x81,0x60,0x80,0x00,0x06,
	0x00,0xc6,0x00,0x62,0x70,0x2c,0xb0,0x7c,
	0x70,0x81,0x30,0x02,0xe8,0x6d,0x00,0x62,
	0x60,0xac,0x01,0x46,0x06,0xe5,0x78,0x2c,
	0x04,0x11,0x06,0xe5,0x68,0x2c,0x06,0xe5,
	0x78,0x1c,0x04,0x17,0x06,0xe5,0x68,0x1c,
	0x00,0xc6,0xd0,0x41,0x05,0x62,0x60,0x40,
	0x05,0xac,0x70,0x44,0x05,0x6c,0x60,0x48,
	0xf1,0x22,0xf0,0xdb,0x00,0x22,0xd0,0x37,
	0x05,0x6f,0x60,0x08,0x07,0xa4,0x70,0x28,
	0x10,0x20,0xe8,0x83,0x05,0xe6,0x70,0x38,
	0x10,0x20,0xf8,0x7e,0xf1,0x9b,0x05,0x6f,
	0x70,0x08,0x10,0x20,0xe8,0x8d,0x00,0xa4,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x04,0xeb,0x70,0x10,0x10,0x23,
	0xf8,0x9b,0x05,0x63,0x70,0x14,0x10,0x20,
	0xe8,0x9b,0x00,0xa7,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xc5,0x00,0x05,0x05,0x27,
	0x71,0xa4,0xb1,0x80,0xe8,0xc6,0x05,0x65,
	0x70,0x20,0x10,0x20,0xe8,0xb1,0x05,0x65,
	0x70,0x2c,0x10,0x20,0xf8,0xb1,0x05,0x65,
	0x71,0x9c,0x11,0xa1,0xe8,0xb1,0x00,0xaf,
	0xd0,0x70,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xd0,0x40,0x05,0xac,0xd0,0x1c,
	0x60,0x40,0x1a,0x60,0xe8,0xc0,0x00,0xa7,
	0xdc,0xf8,0x00,0x69,0xdc,0x9f,0x00,0x20,
	0xd0,0x12,0x00,0xa7,0xd0,0x48,0x00,0x05,
	0x00,0xa7,0xd0,0x78,0xd0,0x12,0x00,0x69,
	0xd7,0xdf,0x00,0x05,0x00,0xac,0xd0,0x70,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xf1,0xa6,0x00,0x20,0xd0,0x40,0x05,0x26,
	0x60,0x60,0x00,0x22,0xd0,0x77,0x05,0x6f,
	0x60,0x48,0x00,0xa4,0xd0,0x40,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x03,0xd6,
	0xe8,0xe9,0x0b,0xd6,0x04,0xea,0x70,0x40,
	0x10,0x64,0xf8,0xe5,0x06,0xe3,0x70,0x64,
	0xe0,0xe6,0xc0,0x76,0x05,0xe7,0x70,0x20,
	0x60,0x40,0x05,0xe7,0xd0,0x34,0x70,0x80,
	0x10,0xa0,0xf8,0xef,0x07,0xc5,0x00,0x28,
	0xd0,0x38,0x70,0x00,0x70,0xc0,0x00,0x06,
	0x01,0x46,0x90,0x7d,0x10,0x60,0x00,0xc6,
	0x30,0x42,0xf8,0xfb,0x07,0xc5,0x10,0x62,
	0xe8,0xfe,0x07,0xc5,0x07,0xe8,0xd0,0x00,
	0x01,0x46,0x90,0x61,0x80,0x3f,0x00,0xc6,
	0x40,0x40,0xe9,0x07,0x07,0xc5,0x01,0x46,
	0x81,0x9f,0x90,0x65,0x80,0x3f,0x00,0xc6,
	0x00,0x28,0xd0,0x38,0x70,0x00,0x00,0x06,
	0x20,0x02,0xb0,0x3e,0x10,0x1e,0x10,0x02,
	0xb0,0x3e,0x01,0x46,0xa0,0x7c,0xa0,0x7d,
	0x80,0x3f,0x00,0xc6,0x60,0xc0,0x05,0xe7,
	0x70,0x24,0xb0,0x34,0x70,0x40,0xb0,0x7e,
	0x60,0x40,0x07,0xc5,0x05,0x26,0x70,0x8c,
	0x05,0xe6,0x60,0xb8,0x00,0x2d,0xd0,0x00,
	0x70,0x40,0x30,0x42,0xe9,0x32,0x00,0x2d,
	0xd0,0x20,0x70,0x40,0x30,0x42,0xe9,0x32,
	0x00,0x2e,0xd0,0x00,0x00,0x2b,0xd0,0x54,
	0x60,0x01,0xd0,0x41,0x05,0x61,0x60,0x5c,
	0xd0,0x43,0x04,0xef,0x60,0x54,0x04,0xee,
	0x70,0x18,0x00,0x20,0xd0,0x74,0x30,0x40,
	0xf9,0x47,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x04,0xee,
	0x70,0x5c,0xd0,0x03,0x04,0xed,0x70,0x88,
	0x10,0xa0,0xe9,0x4f,0xd0,0x04,0x60,0x01,
	0x00,0x2a,0x60,0x28,0x04,0xee,0x70,0x18,
	0x00,0x20,0xd0,0x6f,0x30,0x40,0xf9,0x5c,
	0x04,0xef,0x70,0x64,0x10,0x62,0xe9,0x60,
	0x00,0x20,0xd0,0x74,0x30,0x40,0xf9,0x6f,
	0xd0,0x48,0x00,0x2a,0x60,0x60,0x06,0xe5,
	0xd0,0x1c,0x01,0x46,0x78,0x00,0x04,0x1d,
	0x04,0xef,0x70,0x60,0x10,0x60,0xe9,0x6d,
	0x04,0x1b,0x68,0x00,0x00,0xc6,0x04,0xee,
	0xd0,0x18,0xd0,0x40,0x60,0x40,0x04,0xed,
	0xd0,0x88,0x70,0x82,0x10,0xa0,0xe9,0x7d,
	0x00,0x2a,0xd0,0x20,0xd0,0x42,0x60,0x40,
	0x07,0xc5,0xd0,0x42,0x05,0x26,0x60,0x60,
	0x05,0x2d,0xd0,0x34,0x05,0x2e,0xd0,0x8c,
	0x70,0x40,0x60,0x42,0xb0,0x3c,0xb0,0xbc,
	0x70,0xc0,0x60,0xc2,0xc3,0x43,0x13,0x5f,
	0xd3,0x01,0x43,0x03,0x13,0x0f,0x53,0x01,
	0x00,0x2b,0xd3,0xb2,0x01,0x46,0x00,0x06,
	0xa3,0x3c,0xa3,0x7d,0x80,0x3f,0x63,0x8e,
	0x00,0x06,0x00,0xc6,0x07,0xc5,0x04,0xed,
	0x70,0x24,0x10,0x20,0xe9,0xa5,0x04,0xed,
	0x60,0x28,0x04,0xed,0xd0,0x64,0xd0,0x00,
	0x60,0x01,0x07,0xc5,0x04,0xea,0x70,0x00,
	0x10,0x20,0xe9,0xc6,0x02,0x46,0xc8,0x1a,
	0x02,0x06,0x00,0x23,0xd0,0x20,0x30,0x20,
	0xf9,0xb6,0x05,0xab,0x70,0x54,0x05,0xab,
	0x70,0x9c,0xe1,0xc0,0x05,0xab,0x70,0x58,
	0x05,0xab,0x70,0xa0,0x00,0x23,0xd0,0x21,
	0x30,0x20,0xe9,0xc0,0x10,0x41,0x10,0x81,
	0x05,0xa1,0xd0,0x38,0x60,0x40,0x05,0xa1,
	0xd0,0x3c,0x60,0x80,0x07,0xc5,0x00,0xef,
	0xd0,0x3c,0x01,0x46,0x59,0x80,0x39,0x80,
	0x00,0x24,0xd0,0x14,0x59,0x80,0x00,0xc6,
	0x07,0xc5,0x00,0x00,0x00,0x7d,0xdf,0xe3,
	0xa0,0x38,0x80,0x3f,0x00,0x7d,0xdf,0xe2,
	0xa0,0x37,0x80,0x3f,0x05,0xe6,0xd0,0x3c,
	0x00,0x2e,0xd0,0x40,0x70,0x81,0x60,0x80,
	0xd0,0x41,0x90,0x16,0x40,0x01,0xf8,0x0e,
	0x02,0x20,0xd0,0x00,0xa0,0x37,0x80,0x3f,
	0x90,0x37,0x10,0x14,0xd0,0x41,0x40,0x40,
	0xe8,0x16,0x02,0x20,0xd0,0x00,0xa0,0x37,
	0x80,0x3f,0x00,0x77,0xd8,0x02,0xa0,0x38,
	0x80,0x3f,0x02,0x46,0xd5,0x40,0x03,0x9e,
	0xf8,0x28,0xd5,0x80,0x02,0x06,0x00,0x21,
	0xd0,0x2c,0x70,0x00,0x10,0x20,0xe8,0x72,
	0x00,0x28,0x70,0x1c,0x10,0x23,0xe8,0x3d,
	0x10,0x26,0xe8,0x3d,0x10,0x29,0xe8,0x3d,
	0x10,0x2c,0xe8,0x3d,0x10,0x27,0xe8,0x3d,
	0x10,0x28,0xe8,0x3d,0xe0,0x72,0xd7,0xd2,
	0x00,0x65,0xd0,0x50,0x07,0xc4,0xf3,0x00,
	0x00,0xa1,0xd0,0x50,0xf3,0x2c,0x00,0xa1,
	0xd0,0x48,0xf3,0x2c,0x00,0xa6,0xd0,0x78,
	0xf3,0x2c,0x00,0xac,0xd0,0x70,0xf3,0x2c,
	0x00,0xac,0xd0,0x78,0xf3,0x2c,0x00,0xaf,
	0xd0,0x48,0xf3,0x2c,0x00,0xad,0xd0,0x40,
	0xf3,0x2c,0x00,0xad,0xd0,0x48,0xf3,0x2c,
	0x00,0xad,0xd0,0x50,0xf3,0x2c,0x00,0xad,
	0xd0,0x58,0xf3,0x2c,0x00,0xad,0xd0,0x60,
	0xf3,0x2c,0x00,0xad,0xd0,0x68,0xf3,0x2c,
	0x00,0xa7,0xd0,0x78,0xf3,0x2c,0x00,0xa8,
	0xd0,0x40,0xf3,0x2c,0x00,0xa8,0xd0,0x48,
	0xf3,0x2c,0x00,0xa8,0xd0,0x50,0xf3,0x2c,
	0x00,0x28,0x70,0x1c,0x10,0x23,0xe8,0x7d,
	0x10,0x26,0xe8,0x7d,0x10,0x27,0xe8,0x7d,
	0x10,0x28,0xe8,0x7d,0xe0,0x81,0x09,0xe0,
	0xd0,0x00,0x05,0x25,0x60,0x28,0x00,0x20,
	0xd0,0x02,0x00,0x2a,0xd0,0x60,0x60,0x01,
	0x00,0x29,0x70,0x6c,0x00,0x29,0x70,0xa8,
	0x30,0x42,0x09,0xe0,0xd0,0x00,0x05,0x6b,
	0x70,0xb0,0x10,0xa0,0xe8,0x93,0x03,0x60,
	0xd0,0x00,0x30,0x01,0xfc,0x9b,0x00,0x25,
	0x78,0x20,0x04,0x12,0x04,0x10,0x00,0x25,
	0x68,0x20,0x06,0xe5,0xd0,0x1c,0x78,0x00,
	0x04,0x57,0x68,0x00,0x00,0x29,0xd0,0xa4,
	0x70,0x82,0x00,0x29,0xd0,0x60,0x70,0x41,
	0x30,0x81,0x10,0x83,0x05,0x6d,0xd0,0x0c,
	0xc0,0x42,0x10,0x5e,0x10,0x9f,0x20,0x42,
	0x60,0x40,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x05,0x6a,0xd0,0x3c,0x6a,0xc0,0x05,0x6a,
	0xd0,0x38,0xd0,0x41,0x60,0x40,0x04,0xea,
	0xd0,0x28,0x71,0x80,0x01,0x46,0x00,0x21,
	0xd0,0x01,0xa0,0x38,0x80,0x3f,0x00,0xc6,
	0x07,0xe8,0xd0,0x00,0x90,0x61,0x80,0x3f,
	0x40,0x40,0xf8,0x12,0x07,0xa0,0xd0,0x00,
	0x84,0x22,0x80,0x3f,0xa0,0x23,0x80,0x3f,
	0xd0,0x9f,0x90,0x4d,0x80,0x3f,0x40,0x42,
	0x05,0x6a,0xd0,0x04,0x60,0x40,0x86,0x45,
	0x80,0x3f,0xd0,0xbf,0x90,0x46,0x80,0x3f,
	0x10,0x55,0x40,0x42,0xb0,0x7e,0x10,0x42,
	0x81,0x22,0x80,0x3f,0x90,0xa3,0x10,0x9e,
	0x10,0x84,0x80,0x22,0x80,0x3f,0x90,0xe3,
	0x10,0xde,0x10,0xc2,0x30,0xc2,0x83,0x22,
	0x80,0x3f,0x91,0x23,0x11,0x1e,0x11,0x02,
	0x31,0x01,0x30,0x84,0xfc,0x40,0x21,0x03,
	0x83,0x22,0x80,0x3f,0xa1,0x23,0x80,0x3f,
	0x80,0x62,0x80,0x3f,0x90,0xa3,0x10,0x9e,
	0x10,0x82,0x20,0x81,0xa0,0xa3,0x80,0xa2,
	0x80,0x3f,0x98,0x23,0x18,0x1e,0x18,0x02,
	0x00,0x55,0xe8,0x54,0x04,0x56,0x04,0x57,
	0x38,0x01,0x80,0xa2,0x80,0x3f,0xa8,0x23,
	0x80,0x3f,0x03,0x20,0xd0,0x00,0x10,0x0a,
	0xa0,0x0a,0x80,0x3f,0x84,0x05,0x80,0x3f,
	0xa0,0x06,0x80,0x3f,0x03,0x20,0xd0,0x00,
	0x10,0x0a,0xa0,0x27,0x80,0x3f,0x80,0x17,
	0x80,0x3f,0x80,0x0a,0x80,0x3f,0x84,0x05,
	0x80,0x3f,0x80,0x06,0x80,0x3f,0x11,0xa2,
	0xf8,0x74,0x83,0x85,0x80,0x3f,0x80,0x06,
	0x80,0x27,0x80,0x3f,0x86,0x45,0x80,0x3f,
	0x11,0xa2,0xf8,0x7d,0x84,0x86,0x80,0x3f,
	0xe0,0x7f,0x84,0x46,0x80,0x3f,0x80,0xe4,
	0x80,0x3f,0x07,0x20,0xd0,0x01,0x84,0x22,
	0x80,0x3f,0xa0,0x23,0x80,0x3f,0x01,0x46,
	0x00,0x21,0xd0,0x00,0xa0,0x38,0x80,0x3f,
	0x00,0xc6,0x07,0xc9,0x00,0x4d,0x07,0xc9,
	0x00,0x4d,0x07,0xc9,0x00,0x4d,0x07,0xc9,
	0x00,0x4d,0x05,0x6a,0xd0,0x00,0x70,0x00,
	0xc0,0x00,0x10,0x20,0xe8,0xa0,0x01,0x86,
	0x08,0x49,0x00,0x4d,0xb0,0x01,0xec,0x9b,
	0x00,0x68,0xd0,0x00,0x98,0x21,0x48,0x00,
	0xf8,0xa2,0x02,0x86,0x05,0x6b,0xd5,0x24,
	0x75,0x14,0x00,0x06,0x02,0x06,0x00,0xa7,
	0xd0,0x60,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x00,0xf0,0x53,0xf0,0x58,
	0xf0,0x88,0x86,0x45,0x80,0x3f,0x84,0x86,
	0x80,0x3f,0xb4,0xc4,0x14,0xe0,0xfc,0x44,
	0x0a,0x09,0x00,0x0d,0x0a,0x09,0x10,0x08,
	0x08,0x4d,0x14,0xa0,0xe8,0x13,0x10,0x18,
	0x18,0x48,0x58,0x40,0xf0,0xc5,0xc2,0x61,
	0x0a,0x09,0x00,0x0d,0x0a,0x09,0x10,0x08,
	0x08,0x4d,0x14,0xa0,0xe8,0x1f,0x10,0x18,
	0x18,0x48,0x58,0x40,0xf0,0xc5,0xc2,0xa1,
	0xb4,0x7f,0x0f,0xef,0xd0,0x3f,0x44,0x40,
	0xf1,0x09,0x14,0x20,0xe8,0x34,0x13,0x20,
	0xe8,0x34,0xc0,0x0c,0x40,0x11,0xf8,0x34,
	0x05,0x6f,0xd0,0x28,0x70,0x40,0xb0,0x7f,
	0x60,0x40,0xe0,0x07,0xf0,0xae,0xf1,0x13,
	0x14,0x20,0xe8,0x07,0x13,0x60,0xe8,0x07,
	0xc0,0x0d,0x40,0x11,0xf8,0x07,0x05,0x6f,
	0xd0,0x24,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0xf0,0xae,0xe0,0x07,0x07,0x21,0x6c,0xd4,
	0x07,0x21,0x64,0x58,0x00,0x2b,0x70,0x78,
	0xb0,0x7f,0x00,0x2b,0x60,0x78,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xec,
	0x00,0x05,0x07,0x21,0x7c,0xd4,0x07,0x21,
	0x74,0x58,0x07,0xc5,0x07,0x21,0x70,0x50,
	0x10,0x60,0xe8,0x87,0x04,0xeb,0xd0,0x04,
	0x78,0x00,0x00,0x11,0xe8,0x62,0x0b,0x1d,
	0x00,0x12,0xe8,0x65,0x0b,0x1c,0xd0,0x40,
	0x05,0x27,0x60,0x7c,0x04,0xea,0xd0,0x04,
	0x70,0x00,0x10,0x21,0xf8,0x71,0x00,0x20,
	0xd0,0x48,0xa0,0x5c,0x80,0x3f,0x05,0x6b,
	0xd0,0x54,0xd0,0x01,0x60,0x01,0x05,0x6b,
	0xd0,0x50,0xd0,0x01,0x60,0x01,0x00,0x29,
	0x7c,0xe8,0xbc,0xfe,0xd0,0x40,0x05,0x6f,
	0xd0,0x24,0x60,0x40,0x05,0x6f,0xd0,0x28,
	0x60,0x40,0xd4,0x40,0xd0,0x40,0x07,0x21,
	0x60,0x50,0x07,0xc5,0x00,0x23,0xd0,0x20,
	0x70,0x00,0xd4,0x81,0x10,0x19,0x44,0x80,
	0x05,0x6f,0xd0,0x30,0x73,0x00,0x05,0x6f,
	0xd0,0x2c,0x73,0x40,0x00,0x29,0xd0,0x20,
	0x70,0x40,0x00,0x29,0xd0,0x24,0x73,0x80,
	0x33,0x81,0x01,0x28,0xd0,0x40,0x33,0x81,
	0x13,0x9e,0xc3,0xce,0x13,0xde,0x00,0x29,
	0x7c,0x68,0x00,0x29,0x7c,0xac,0x00,0x27,
	0x70,0x38,0xcc,0x32,0x3c,0x31,0x3c,0x00,
	0x1c,0x1f,0x00,0x60,0xd4,0xc0,0x07,0xc5,
	0x01,0x46,0xa2,0xbc,0x80,0x3f,0xa2,0x7d,
	0x80,0x3f,0x62,0xb3,0xbc,0xfc,0x00,0x06,
	0x02,0x46,0xb5,0x7c,0xb5,0xbc,0xc8,0x15,
	0x02,0x06,0x00,0xc6,0x38,0x30,0xe4,0xbf,
	0x0b,0x51,0xc0,0x72,0x30,0x73,0xec,0xc4,
	0xcc,0xf1,0xbc,0xfe,0x07,0xc5,0xc1,0x9f,
	0x00,0x23,0xd1,0xff,0x11,0xc8,0x11,0xc8,
	0x0f,0xef,0xd2,0x3f,0x00,0x9f,0xe8,0xcf,
	0x58,0x47,0x00,0x23,0xd0,0x34,0x70,0x40,
	0x00,0x21,0xd0,0x80,0x30,0x81,0xec,0xd8,
	0x00,0x21,0xd0,0x40,0xc0,0xc1,0x10,0x5e,
	0xd0,0x00,0x30,0x01,0x18,0x40,0xd0,0x83,
	0x40,0x83,0x00,0x63,0xd7,0xe9,0x10,0xa0,
	0xe8,0xee,0x10,0xa1,0xe8,0xf0,0x10,0xa2,
	0xe8,0xf9,0x10,0xa3,0xe9,0x02,0xc8,0x40,
	0x48,0x48,0xc7,0xc6,0xc0,0x00,0x07,0xc5,
	0xc0,0x21,0x07,0xc5,0x18,0x5f,0xc0,0x21,
	0x18,0x5f,0x20,0x21,0x18,0x5e,0x20,0x21,
	0x18,0x5f,0x20,0x21,0x07,0xc5,0x18,0x5f,
	0xc0,0x21,0x18,0x5e,0x20,0x21,0x18,0x5f,
	0x20,0x21,0x18,0x5e,0x20,0x21,0x07,0xc5,
	0x18,0x5f,0xc0,0x21,0x18,0x5d,0x20,0x21,
	0x18,0x5f,0x20,0x21,0x07,0xc5,0xd4,0x00,
	0x01,0x46,0x81,0xe2,0x90,0x23,0x10,0x20,
	0x00,0xc6,0x30,0x0e,0xf5,0x12,0xd4,0x01,
	0x07,0xc5,0xd4,0x00,0x01,0x46,0x81,0xe2,
	0x90,0x23,0x10,0x20,0x00,0xc6,0x30,0x0f,
	0xed,0x1c,0xd4,0x01,0x07,0xc5,0x00,0x00,
	0x04,0xee,0x70,0x58,0x10,0x60,0xe8,0x0b,
	0xd0,0x40,0x04,0xee,0x60,0x58,0xd0,0x44,
	0x04,0xee,0x70,0x1c,0x60,0x40,0x04,0xee,
	0x70,0x38,0x10,0x20,0xe8,0x15,0x00,0xeb,
	0xd0,0x48,0x04,0xe9,0x60,0x4c,0x04,0xe9,
	0x60,0x48,0xd0,0x00,0x04,0xef,0x60,0x10,
	0xd1,0x00,0x05,0x65,0x61,0x20,0x04,0xef,
	0x61,0x20,0x04,0xef,0x61,0x24,0x04,0xef,
	0x61,0x28,0x04,0xef,0x61,0x2c,0x04,0xeb,
	0x70,0x68,0x10,0x60,0xe8,0x2b,0x05,0xe6,
	0x70,0x7c,0x05,0x25,0x60,0x78,0x04,0xed,
	0x70,0xc8,0x04,0xed,0x61,0x08,0x04,0xed,
	0x61,0x0c,0x04,0xee,0x61,0x10,0x04,0xee,
	0x61,0x2c,0xd0,0x02,0x05,0x26,0x60,0x34,
	0x05,0x60,0x61,0x28,0x05,0x61,0x61,0x0c,
	0x05,0x61,0x61,0x14,0xd0,0x02,0x05,0xe6,
	0x60,0x34,0x05,0xe6,0x60,0x30,0x07,0x25,
	0x60,0x04,0x04,0xea,0x70,0x00,0x10,0x22,
	0xf8,0x4e,0x00,0x24,0xd0,0x70,0xa0,0x76,
	0x80,0x3f,0xa1,0x34,0x0b,0x52,0x00,0xc6,
	0x04,0xeb,0x70,0x1c,0x10,0x20,0xe8,0x6c,
	0x10,0x21,0xe8,0x64,0x05,0x25,0x70,0x78,
	0x05,0xe6,0x60,0x78,0x00,0x2d,0xd0,0x00,
	0x70,0x80,0x30,0x81,0xe8,0x61,0x00,0x2d,
	0xd0,0x20,0x00,0x2b,0x60,0x14,0xe0,0x6c,
	0x05,0x25,0x70,0x78,0x05,0x25,0x70,0xb4,
	0x05,0x25,0x60,0xb8,0x05,0x25,0x60,0x74,
	0xd0,0x47,0x04,0xeb,0x60,0x58,0x04,0xea,
	0x70,0x40,0x10,0x62,0xe8,0x90,0x10,0x61,
	0xe8,0x90,0x05,0x27,0x70,0x44,0x10,0x60,
	0xe4,0x92,0x00,0x27,0x78,0x34,0x00,0x10,
	0xf8,0x92,0x05,0x26,0x70,0x7c,0x10,0x60,
	0xf8,0x90,0x04,0xeb,0x70,0x50,0x10,0x61,
	0xf8,0x90,0x10,0xe0,0xf8,0x90,0x05,0xac,
	0x70,0x58,0x10,0x63,0xf8,0x90,0x05,0x27,
	0x70,0x40,0x10,0x61,0xe8,0x90,0xe0,0x92,
	0xd0,0x40,0xe0,0x93,0xd0,0x41,0x05,0x62,
	0x60,0x68,0x05,0x62,0x60,0x60,0x05,0x62,
	0x60,0x64,0x04,0xeb,0x70,0x64,0x10,0x60,
	0xf8,0xac,0x00,0x6c,0xdc,0x70,0x00,0x62,
	0xdc,0x27,0x00,0xad,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x03,0x95,
	0xe8,0xac,0xd0,0x00,0x06,0xe5,0x60,0x3c,
	0x00,0x20,0xd0,0x08,0xa0,0x1c,0x80,0x3f,
	0x00,0x21,0xd0,0x01,0xa0,0x38,0x80,0x3f,
	0xd7,0xd2,0x00,0xa0,0xd0,0x40,0x07,0xc4,
	0xf2,0xb0,0x07,0xa0,0xd0,0x00,0x84,0x22,
	0x80,0x3f,0xa0,0x23,0x80,0x3f,0x03,0x20,
	0xd0,0x00,0x10,0x0a,0xa0,0x0a,0x80,0x3f,
	0x84,0x05,0x80,0x3f,0xa0,0x06,0x80,0x3f,
	0x86,0x45,0x80,0x3f,0x80,0x06,0x80,0x3f,
	0x80,0x17,0x80,0x3f,0x80,0x0a,0x80,0x3f,
	0x84,0x05,0x80,0x3f,0x80,0x06,0x80,0x3f,
	0x01,0x46,0x06,0xe5,0x78,0x1c,0x04,0x19,
	0x06,0xe5,0x68,0x1c,0x00,0xc6,0xd0,0x04,
	0x04,0xee,0x60,0x34,0x00,0x2a,0x60,0x28,
	0xd0,0x02,0x00,0x2a,0x60,0x20,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x00,0x04,0xea,0xd1,0x40,
	0x71,0x45,0x11,0x63,0xf8,0x06,0xe3,0x00,
	0x05,0x20,0x71,0x5c,0x11,0x62,0xf7,0x00,
	0x00,0x2a,0xd1,0x60,0x71,0x85,0x00,0x20,
	0xd1,0x42,0x41,0x46,0xf8,0x1a,0x00,0x20,
	0xd1,0x44,0x41,0x46,0xeb,0x00,0x04,0xeb,
	0xd1,0x68,0x71,0x45,0x11,0x60,0xeb,0x00,
	0x04,0xea,0xd1,0x40,0x71,0x85,0x11,0xa2,
	0xf8,0x23,0xc7,0x1a,0xf3,0x23,0x15,0x5f,
	0x15,0x9f,0xd1,0x80,0x07,0x28,0x61,0xb8,
	0x16,0x22,0xe8,0x2e,0x16,0x23,0xe8,0x2e,
	0x16,0x24,0xe8,0x2e,0x16,0x21,0xfb,0x00,
	0xc7,0x15,0xc7,0x56,0xf3,0x24,0xc5,0x5c,
	0x15,0x9f,0x15,0x81,0x00,0x23,0xd1,0x7f,
	0x31,0x57,0xe7,0x00,0x15,0xe0,0xe7,0x00,
	0x16,0x60,0xe7,0x00,0x00,0x23,0xd1,0x7f,
	0x31,0x59,0xe7,0x00,0xd1,0x81,0x05,0xe1,
	0x61,0x9c,0xd1,0x80,0x05,0x65,0x61,0xa0,
	0x04,0xeb,0xd1,0x78,0x65,0x45,0x04,0xeb,
	0xd1,0x7c,0x65,0x85,0x04,0xeb,0xd1,0x6c,
	0x65,0xc5,0x04,0xec,0xd1,0x40,0x66,0x05,
	0x04,0xeb,0xd1,0x70,0x66,0x45,0x04,0xeb,
	0xd1,0xe0,0x71,0x47,0x11,0x60,0xf8,0x68,
	0x05,0xe6,0xd1,0x7c,0x71,0x45,0x11,0x60,
	0xe8,0x64,0x00,0x2e,0xd1,0x80,0x71,0x86,
	0x31,0x85,0xf8,0x67,0x00,0x2d,0xd1,0x40,
	0x71,0x45,0x61,0x47,0x04,0xeb,0xd1,0xe4,
	0x00,0x2d,0xd1,0x80,0x71,0x86,0x31,0x46,
	0xe8,0x71,0x61,0x87,0xe0,0x75,0x00,0x2d,
	0xd1,0xa0,0x71,0x86,0x61,0x87,0xf3,0x15,
	0xd1,0x40,0x04,0xee,0xd1,0xac,0x61,0x46,
	0xd1,0x40,0x04,0xef,0x61,0x50,0xd1,0x40,
	0x04,0xef,0xd1,0xa0,0x61,0x46,0x04,0xef,
	0xd1,0xa4,0x61,0x46,0x04,0xef,0xd1,0xa8,
	0x61,0x46,0x04,0xef,0xd1,0xac,0x61,0x46,
	0x04,0xee,0xd1,0x90,0x61,0x46,0x04,0xed,
	0xd1,0x88,0x61,0x46,0xd1,0x42,0x05,0x26,
	0xd1,0xb4,0x61,0x46,0xd1,0x41,0x04,0xec,
	0x61,0x78,0x00,0x6c,0xdb,0xf8,0x00,0x62,
	0xdc,0x21,0x00,0x6e,0xd0,0x40,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xd1,0x81,
	0x04,0xeb,0x61,0xa8,0x04,0xeb,0xd1,0x50,
	0xd1,0x81,0x61,0x85,0x05,0x6a,0xd1,0x50,
	0x71,0x85,0x05,0x6a,0xd1,0x4c,0x61,0x85,
	0xd1,0x41,0x00,0xe7,0xd1,0x9c,0x61,0x46,
	0x00,0xa0,0xd0,0x78,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0xf3,0x00,0x00,0x2a,
	0xd1,0x60,0xd1,0x84,0x61,0x85,0x06,0xe5,
	0xd1,0x5c,0x01,0x46,0x78,0x05,0x04,0x54,
	0x68,0x05,0x00,0xc6,0x00,0xa6,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x04,0xe9,0xd1,0xc8,0x71,0x47,0x74,0xc5,
	0xc5,0x13,0x00,0x23,0xd1,0xff,0x44,0xc7,
	0x15,0x18,0xd1,0xcf,0x45,0x07,0xb1,0x7c,
	0x75,0x45,0xb1,0x7c,0x75,0x85,0xb1,0x7c,
	0x75,0xc5,0xb1,0x7c,0x76,0x05,0xb1,0x7c,
	0x76,0x45,0xb1,0x7c,0x76,0x85,0xb1,0x7c,
	0xc6,0xc5,0xb1,0x7c,0x00,0xef,0xd1,0xc8,
	0x31,0xc5,0xf8,0x20,0x00,0xeb,0xd1,0x48,
	0x04,0xe9,0xd1,0xc8,0x61,0x47,0xd1,0x82,
	0x61,0x9b,0x00,0x2a,0x61,0xa8,0x00,0x2a,
	0x64,0xe4,0x00,0xe7,0xd1,0x80,0x71,0xc6,
	0x00,0x23,0xd2,0x3f,0xc2,0x07,0x12,0x10,
	0x42,0x08,0x11,0xc8,0x51,0xd3,0x61,0xc6,
	0x00,0xe7,0xd1,0x84,0x71,0xc6,0x11,0xc8,
	0x51,0xc8,0x61,0xc6,0x04,0xee,0xd1,0xa0,
	0x71,0xc6,0x31,0xdb,0xf8,0x41,0xd1,0xc0,
	0x61,0xc6,0x04,0xee,0xd1,0xa8,0x71,0xc6,
	0x31,0xdb,0xf8,0x48,0xd1,0xc0,0x61,0xc6,
	0xd7,0xd2,0x00,0xa0,0xd0,0x68,0x07,0xc4,
	0xc1,0x93,0x00,0x60,0x21,0xbe,0x00,0x62,
	0xd1,0xd7,0x31,0xc6,0xff,0x00,0x00,0xa0,
	0xd0,0x40,0x50,0x46,0xa0,0x76,0x80,0x3f,
	0x90,0x74,0x10,0x60,0xeb,0x00,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x07,0x38,
	0x08,0x70,0x07,0x48,0x00,0x00,0x07,0x60,
	0x00,0x00,0x00,0x00,0x07,0x98,0x07,0x90,
	0x07,0xa8,0x07,0xb0,0x07,0xc8,0x00,0x00,
	0x07,0xc0,0x08,0x90,0x08,0x98,0x07,0xe0,
	0x07,0xe8,0x08,0xa0,0x08,0xa8,0x08,0xb0,
	0x08,0x68,0x08,0xc8,0x08,0x80,0x00,0x00,
	0x08,0xd0,0x08,0xd8,0x00,0x00,0x00,0x00,
	0x00,0x00,0x0e,0x54,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xd0,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x07,0xd8,0x07,0xd8,
	0x07,0xd8,0x07,0xd8,0x00,0x00,0x08,0xb8,
	0x08,0xc0,0x07,0xd8,0x07,0xd8,0x00,0x00,
	0x04,0xea,0xd0,0x00,0x70,0x00,0x10,0x23,
	0xf8,0x06,0xe3,0x00,0x00,0x2a,0xd0,0x20,
	0x70,0x40,0x00,0x2f,0xd0,0x3e,0x40,0x40,
	0xeb,0x00,0xc0,0x55,0x10,0x60,0xe7,0x00,
	0x00,0x20,0xd0,0x10,0x30,0x40,0xef,0x00,
	0x15,0xa0,0xe7,0x00,0x00,0x24,0xd0,0x2c,
	0x30,0x16,0xe7,0x00,0xf3,0x15,0x00,0xa0,
	0xd0,0x70,0x00,0x20,0xd7,0xd2,0x17,0xe0,
	0x07,0xc4,0xc7,0x15,0xc7,0x56,0x01,0x46,
	0xf3,0x00,0x00,0xc6,0x04,0xed,0xd0,0x28,
	0x70,0x40,0x10,0x60,0xe8,0x33,0x04,0xee,
	0xd0,0x24,0xd0,0x40,0x60,0x40,0x04,0xee,
	0xd0,0x20,0x66,0xc0,0xe0,0x3c,0xd0,0x04,
	0x60,0x1b,0x00,0x2a,0xd0,0x68,0x60,0x01,
	0xd0,0x00,0x04,0xee,0xd0,0x60,0x60,0x40,
	0x00,0x2a,0xd0,0x64,0x00,0x20,0xd0,0x23,
	0x60,0x01,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x00,0x6d,0xd0,0x58,0xe1,0xd3,0x00,0x00,
	0x00,0x76,0xd8,0x00,0xa0,0x38,0x0f,0x87,
	0x04,0xea,0x70,0x00,0x10,0x23,0xf8,0x05,
	0xe3,0x00,0x00,0x2a,0x70,0x20,0x00,0x20,
	0x40,0x04,0xeb,0x00,0x04,0xeb,0x70,0x68,
	0x10,0x60,0xfb,0x00,0xd0,0x41,0x05,0xe1,
	0x60,0x5c,0xd0,0x40,0x05,0x65,0x60,0x60,
	0xf3,0x15,0xd0,0x01,0x04,0xef,0x60,0x10,
	0x05,0x26,0xd0,0x38,0x78,0x00,0x04,0x11,
	0x68,0x00,0x04,0xea,0x70,0x80,0x10,0xa2,
	0xe8,0x28,0x00,0xa0,0xd0,0x78,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf3,0x00,
	0xd0,0x20,0x00,0x2a,0x60,0x20,0x06,0xe5,
	0xd0,0x1c,0x01,0x46,0x78,0x00,0x04,0x54,
	0x68,0x00,0x00,0xc6,0x00,0xa6,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xc6,0x00,0x21,0x70,0x1c,0x10,0x20,
	0xfb,0xf1,0x00,0x21,0x79,0x00,0x02,0x1f,
	0xfb,0xf8,0x00,0x20,0xd0,0xa6,0x00,0x23,
	0x49,0x3f,0x30,0xa4,0xeb,0xc3,0x00,0x20,
	0xd0,0xa7,0x30,0xa4,0xfb,0xc6,0x04,0xef,
	0xd0,0x70,0xe3,0xd3,0x04,0xe9,0x70,0xc8,
	0x04,0xe9,0x70,0x4c,0xc0,0x81,0x30,0x83,
	0xeb,0xd3,0xef,0xd0,0x00,0x24,0x20,0x80,
	0x00,0x23,0x30,0xa0,0xeb,0xf1,0x00,0x21,
	0xd1,0x40,0xd7,0x87,0x70,0x85,0x60,0x81,
	0xb1,0x7c,0xb0,0x7c,0xb7,0x81,0xfb,0xd6,
	0xc0,0x81,0xd0,0xc1,0x60,0xc2,0x00,0x21,
	0x60,0x9c,0x05,0x20,0xd0,0xcc,0x30,0xc2,
	0xfb,0xe8,0xd0,0xc2,0x60,0xc2,0xe3,0xf1,
	0xb0,0x7c,0x00,0xef,0xd0,0xc8,0x30,0xc1,
	0xef,0xef,0x00,0xeb,0xd0,0x48,0x04,0xe9,
	0x60,0x4c,0x00,0x76,0xd8,0x00,0xa0,0x38,
	0x00,0x06,0x80,0x3f,0x01,0x46,0x0f,0x87,
	0x00,0x06,0x80,0x3f,0x00,0x6d,0xd0,0x70,
	0xe1,0xd3,0x00,0x00,0x00,0xc6,0x00,0x21,
	0xd0,0x00,0x70,0x80,0x04,0xee,0xdd,0x34,
	0x00,0x2a,0xd0,0x20,0x70,0x00,0xd0,0x41,
	0x30,0x40,0xeb,0xd9,0x08,0x20,0xd0,0x2d,
	0x30,0x02,0xeb,0xe5,0x08,0x24,0xd0,0x20,
	0x30,0x02,0xfb,0xc7,0x00,0x2f,0xdd,0x42,
	0xe3,0xe7,0x08,0x20,0xd0,0x38,0x30,0x02,
	0xeb,0xe5,0x08,0x29,0xd0,0x14,0x30,0x02,
	0xfb,0xd2,0x00,0x2f,0xdd,0x65,0xe3,0xe7,
	0x08,0x24,0xd0,0x24,0x30,0x02,0xfb,0xd9,
	0x00,0x2f,0xdd,0x60,0xe3,0xe7,0xd0,0x05,
	0x60,0x34,0x00,0x21,0xd0,0x1c,0x6d,0x00,
	0x00,0x76,0xd8,0x00,0xa0,0x38,0x00,0x06,
	0x80,0x3f,0x01,0x46,0x0f,0x87,0x00,0x2f,
	0xdd,0x52,0x00,0x2a,0xd0,0x24,0x60,0x80,
	0x00,0x06,0x80,0x3f,0x00,0x6d,0xd0,0x78,
	0xe0,0x12,0x00,0x00,0xd0,0x02,0x60,0x34,
	0x00,0x2a,0xd0,0x68,0x60,0x01,0x00,0x21,
	0xd0,0x04,0x70,0x00,0x04,0xee,0xd0,0x78,
	0x60,0x01,0x00,0x21,0xd0,0x08,0x70,0x00,
	0x04,0xee,0xd0,0x7c,0x60,0x01,0x0d,0x45,
	0x05,0x61,0xd0,0x0c,0x70,0x40,0x04,0xeb,
	0xd0,0x1c,0x60,0x40,0x10,0x63,0xfb,0xd2,
	0x04,0xeb,0xd0,0x18,0x70,0x40,0x10,0x60,
	0xeb,0xd2,0xb0,0x41,0x60,0x40,0xe3,0xf8,
	0x00,0x70,0xd7,0x81,0xa0,0x38,0x80,0x3f,
	0x00,0x70,0xd7,0x80,0xa0,0x37,0x80,0x3f,
	0x00,0x6e,0xd0,0x48,0xf0,0x12,0x00,0x60,
	0xdf,0x80,0xe3,0xf5,0x00,0x06,0x80,0x3f,
	0x00,0x6d,0xd0,0x50,0xe1,0xd3,0x00,0x21,
	0xd0,0x04,0x7d,0x40,0x07,0x26,0xd0,0x7c,
	0x6d,0x41,0xb0,0x3c,0x7d,0x40,0xb0,0x7c,
	0x6d,0x41,0x00,0x2a,0xd0,0x68,0xd0,0x04,
	0x60,0x01,0x04,0xee,0xd0,0x74,0x00,0x21,
	0xd0,0x1c,0x6d,0x00,0x00,0x76,0xd8,0x00,
	0xa0,0x38,0x00,0x06,0x80,0x3f,0x0f,0x87,
	0xdf,0xc0,0xdf,0x49,0xd0,0x00,0x05,0x6a,
	0x60,0x38,0x07,0xa3,0x60,0x24,0x04,0xee,
	0x60,0x2c,0x04,0xea,0x70,0x28,0x10,0x24,
	0xf8,0x10,0x00,0x28,0xd0,0x40,0xe0,0x17,
	0x10,0x23,0xf8,0x15,0x00,0x21,0xd0,0x40,
	0xe0,0x17,0x00,0x20,0xd0,0x60,0x00,0x2b,
	0x70,0x38,0x20,0x40,0x04,0xee,0x60,0x48,
	0x04,0xee,0x70,0x54,0x10,0x63,0xf8,0x26,
	0xd0,0x00,0x07,0xa4,0x60,0x28,0xd7,0x10,
	0xd7,0x40,0xe0,0x3c,0xd7,0x40,0x10,0x61,
	0xe8,0x35,0xc0,0x13,0x00,0x20,0xd0,0x6b,
	0x30,0x40,0xe8,0x32,0x00,0x21,0xd0,0x43,
	0x30,0x40,0xf8,0x50,0xc7,0x56,0x17,0x60,
	0xe8,0x50,0xd0,0x40,0x04,0xee,0x60,0x54,
	0xd0,0x10,0x07,0xa4,0x60,0x28,0xd7,0x00,
	0xd7,0xd2,0x00,0xa0,0xd0,0x70,0x07,0xc4,
	0x00,0x32,0xd0,0x01,0xa0,0x38,0x80,0x3f,
	0xf3,0x00,0x04,0xee,0x70,0x14,0x10,0x23,
	0xe8,0x50,0x04,0xed,0xd0,0x68,0x70,0x01,
	0xd0,0x80,0x60,0x81,0x04,0xed,0x60,0x24,
	0x00,0x32,0xd0,0x00,0xa0,0x38,0x80,0x3f,
	0x04,0xee,0xd0,0x14,0x78,0x00,0x08,0x11,
	0x68,0x00,0x01,0x46,0x05,0xe6,0xd0,0x30,
	0x70,0x40,0xb0,0x7d,0x60,0x40,0x0b,0xd4,
	0x00,0xc6,0x05,0xe6,0xd0,0x30,0x70,0x40,
	0x10,0x62,0xf8,0x63,0x03,0xd1,0xf8,0x71,
	0x01,0x46,0x02,0x46,0xc8,0x18,0x02,0x06,
	0x18,0x1c,0x00,0xc6,0x18,0x2f,0xe4,0x66,
	0xe0,0x79,0x01,0x46,0x02,0x46,0xc8,0x18,
	0x02,0x06,0x18,0x1b,0x00,0xc6,0x18,0x29,
	0xe4,0x71,0x00,0x7d,0xdf,0xe3,0xa0,0x38,
	0x80,0x3f,0x01,0x46,0x00,0x7d,0xdf,0xe2,
	0xa0,0x37,0x80,0x3f,0x00,0xc6,0x84,0x22,
	0x01,0x20,0xd0,0x00,0x10,0x0a,0x07,0xa0,
	0xd0,0x40,0x50,0x01,0xa0,0x23,0x80,0x3f,
	0x05,0xe8,0xd0,0x00,0x90,0x61,0x80,0x3f,
	0x40,0x40,0xf8,0x8e,0x80,0x1d,0x80,0x3f,
	0xd7,0xd2,0x00,0x6f,0xd0,0x78,0x07,0xc4,
	0xf2,0xb0,0x00,0x32,0xd0,0x01,0xa0,0x38,
	0x80,0x3f,0x05,0xe6,0xd0,0x30,0x78,0x00,
	0x03,0xd5,0xf8,0xa5,0x00,0x10,0xe8,0xa7,
	0xe0,0xaa,0x00,0x10,0xe8,0xaa,0xb8,0x3f,
	0x68,0x00,0x0b,0xd4,0xd0,0x02,0x05,0xe6,
	0x60,0x34,0x00,0x06,0x00,0x32,0xd0,0x00,
	0xa0,0x38,0x80,0x3f,0xf2,0x04,0xd0,0x00,
	0x05,0x2d,0x60,0x3c,0x05,0x2e,0x60,0x00,
	0x05,0x61,0x60,0x3c,0x05,0x62,0x60,0x00,
	0x05,0x2e,0x60,0x0c,0x05,0x2e,0x60,0x10,
	0x05,0x2e,0x60,0x04,0x05,0x2e,0x60,0x08,
	0x05,0x2a,0x60,0x0c,0x05,0x2a,0x60,0x10,
	0x05,0x62,0x60,0x38,0x05,0x62,0x60,0x34,
	0x05,0x63,0x70,0x0c,0x05,0x63,0x60,0x08,
	0xd0,0x01,0x06,0xe4,0x60,0x1c,0x05,0x26,
	0xd0,0x38,0x78,0x00,0x04,0x13,0x04,0x19,
	0x68,0x00,0x05,0x64,0xd0,0x14,0xd0,0x40,
	0x05,0x65,0xd0,0x88,0x60,0x40,0xb0,0x3c,
	0x30,0x80,0xf4,0xdc,0xd0,0x00,0x03,0x95,
	0xf8,0xe7,0x0f,0xef,0xd0,0x3f,0x05,0x64,
	0x60,0x34,0x05,0x64,0x60,0x20,0x05,0x2f,
	0x70,0x0c,0x10,0x01,0x05,0x2f,0x60,0x14,
	0x05,0x2f,0x60,0x18,0x01,0x2b,0xd0,0x2c,
	0x05,0x64,0x60,0x14,0xd0,0x40,0x04,0xec,
	0x60,0x78,0x00,0x2d,0x78,0x18,0x08,0x10,
	0x08,0x11,0x00,0x2d,0x68,0x18,0x00,0x2d,
	0x78,0x38,0x08,0x10,0x08,0x11,0x00,0x2d,
	0x68,0x38,0x05,0xe6,0x70,0xbc,0x00,0x2d,
	0xd0,0x00,0x70,0x40,0x30,0x42,0xe9,0x13,
	0x00,0x2d,0xd0,0x20,0x70,0x40,0x30,0x42,
	0xe9,0x13,0x00,0x2e,0xd0,0x00,0x00,0x2b,
	0x60,0x10,0xd0,0x00,0x00,0xe7,0x60,0x1c,
	0x05,0x6e,0x60,0x0c,0x00,0x29,0x70,0x7c,
	0x05,0x62,0x60,0x7c,0xd0,0x03,0x05,0xac,
	0x60,0x18,0x0b,0xd0,0xd7,0xd2,0x00,0xa0,
	0xd0,0x58,0x07,0xc4,0xf3,0x00,0x04,0xea,
	0x71,0x00,0x11,0x23,0xe9,0x4d,0x11,0x30,
	0xe9,0x4d,0x11,0x31,0xe9,0x4d,0x11,0x32,
	0xe9,0x4d,0x00,0x20,0xd0,0x08,0xa0,0x1c,
	0x80,0x3f,0x11,0x20,0xe9,0x40,0x11,0x21,
	0xe9,0x40,0x11,0x24,0xf9,0x4d,0x04,0xea,
	0x70,0x44,0x10,0x61,0xf9,0x40,0xe1,0x4d,
	0x07,0xd0,0x11,0x21,0xf9,0x4d,0x00,0xa4,
	0xd8,0x30,0xa8,0x36,0x80,0x3f,0x98,0x34,
	0x04,0x1c,0x00,0x24,0xd0,0x70,0xa0,0x76,
	0xa8,0x34,0x00,0x20,0xd0,0x4c,0xa0,0x5c,
	0x80,0x3f,0x04,0xea,0x70,0x00,0x10,0x22,
	0xe9,0x58,0x10,0x24,0xe9,0x58,0xe1,0x68,
	0xd0,0x00,0x06,0xe3,0x60,0x18,0x06,0xe3,
	0x60,0x1c,0x06,0xe3,0x60,0x30,0xdd,0x80,
	0x0f,0xed,0xd0,0x59,0x10,0x48,0x00,0x21,
	0xd0,0x34,0x50,0x01,0x06,0xe3,0x60,0x20,
	0xd7,0xd2,0x00,0xa0,0xd0,0x50,0x07,0xc4,
	0xf2,0xc4,0xf3,0x7a,0xd7,0xd2,0x00,0x6f,
	0xd0,0x70,0x07,0xc4,0xf2,0xb0,0xd7,0xd2,
	0x00,0xa0,0xd0,0x40,0x07,0xc4,0xf2,0xb0,
	0xd0,0x00,0x04,0xef,0x60,0x18,0xd7,0xd2,
	0x00,0xa0,0xd0,0x48,0x07,0xc4,0xf2,0xb0,
	0xf2,0xf6,0xd0,0x00,0x05,0x29,0x60,0x14,
	0x04,0xea,0x70,0x00,0x10,0x22,0xe9,0x9c,
	0xd7,0xd2,0x00,0xa0,0xd0,0x50,0x07,0xc4,
	0xf3,0xa4,0xd0,0x00,0x04,0xef,0x60,0x1c,
	0xd7,0xd2,0x00,0xa0,0xd0,0x78,0x07,0xc4,
	0xf3,0x00,0xf3,0x31,0x04,0xea,0xd8,0x34,
	0x78,0x20,0x02,0x86,0xc7,0x60,0x02,0x06,
	0x02,0x46,0x04,0xea,0xd6,0xa0,0x76,0x9a,
	0x04,0xea,0xd6,0x64,0x76,0x59,0x02,0x06,
	0x01,0x46,0xd7,0xd2,0x00,0xa1,0xd0,0x60,
	0x07,0xc4,0xf3,0x00,0xf1,0xe6,0xd7,0xd2,
	0x00,0xa0,0xd0,0x60,0x07,0xc4,0xf3,0x00,
	0x0c,0x33,0xd4,0x00,0x10,0x01,0xb0,0x3f,
	0x84,0x22,0x80,0x3f,0xa0,0x23,0xf2,0x3a,
	0x01,0x20,0xd0,0x60,0xa0,0x40,0xd0,0x40,
	0xb0,0x41,0xa0,0x41,0x00,0x77,0xd8,0x42,
	0x04,0xed,0x70,0x48,0x10,0x60,0xe9,0xc7,
	0x00,0x77,0xd8,0x02,0xe1,0xcd,0x04,0xea,
	0x70,0x40,0x10,0x63,0xf9,0xcd,0x00,0x77,
	0xd8,0x00,0x01,0x46,0xc0,0x40,0x00,0x70,
	0xd0,0x02,0xa0,0x37,0x80,0x3f,0xc0,0x01,
	0xa0,0x38,0x80,0x3f,0x03,0xd0,0xe9,0xdd,
	0x8f,0xb0,0x80,0x3f,0x89,0x1f,0x80,0x3f,
	0x80,0x3f,0x00,0xc6,0x00,0x20,0xd0,0x12,
	0x10,0x20,0xc0,0x6f,0xc7,0xf0,0x00,0x06,
	0x80,0x3f,0x00,0x05,0x00,0x28,0xd0,0x20,
	0x70,0x00,0x00,0x06,0x82,0xa2,0xa0,0x23,
	0x07,0x23,0xd0,0x00,0xd0,0x41,0x60,0x40,
	0xd0,0x40,0xb0,0x3c,0x60,0x40,0xd0,0x41,
	0xb0,0x3c,0x60,0x40,0xb0,0x3c,0x60,0x40,
	0xb0,0x3c,0x60,0x40,0xb0,0x3c,0x60,0x40,
	0xd0,0x40,0x01,0x46,0x0b,0x53,0x0b,0x54,
	0x06,0xe5,0x60,0x7c,0x00,0xc6,0x07,0xc5,
	0xd0,0x00,0x05,0x28,0x60,0x10,0x05,0x28,
	0x60,0x28,0x05,0x6c,0x60,0x20,0x05,0x6e,
	0x60,0x00,0x05,0x6e,0x60,0x04,0x05,0x29,
	0x60,0x18,0x00,0x2b,0x60,0x34,0x05,0x6c,
	0x60,0x10,0x05,0x6c,0x60,0x14,0x06,0xef,
	0x60,0x14,0x06,0xee,0x60,0x14,0xd0,0x01,
	0x05,0x29,0x60,0x10,0x05,0x26,0xd0,0x38,
	0x78,0x00,0x04,0x14,0x68,0x00,0x0b,0x9f,
	0xd0,0x14,0x05,0x28,0x60,0x30,0xd0,0x02,
	0x05,0x60,0x60,0x38,0x00,0xef,0xd0,0x08,
	0x05,0x28,0x60,0x14,0x05,0x28,0x60,0x18,
	0x00,0xef,0xd0,0x08,0x06,0xef,0x60,0x20,
	0x06,0xef,0x60,0x24,0x02,0x86,0xd7,0x80,
	0x02,0x06,0x07,0xc5,0x00,0xef,0xd0,0x3c,
	0x01,0x46,0x59,0x80,0x39,0x80,0x00,0x24,
	0xd0,0x14,0x59,0x80,0x00,0xc6,0x07,0xc5,
	0x02,0x06,0x00,0x21,0xd0,0x00,0x70,0x80,
	0x08,0x20,0xd0,0x2d,0x30,0x02,0xf8,0x0e,
	0x00,0x6e,0xd0,0x78,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x08,0x24,0xd0,0x20,
	0x30,0x02,0xf8,0x18,0x00,0x6c,0xd0,0x70,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x08,0x20,0xd0,0x38,0x30,0x02,0xf8,0x22,
	0x00,0xa2,0xd0,0x40,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0xa1,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x2a,0x70,0x60,0x00,0x2f,0x40,0x7e,
	0xeb,0x00,0xf3,0x15,0xd0,0x40,0x04,0xee,
	0x60,0x6c,0xd7,0xd2,0x00,0xa0,0xd0,0x78,
	0x07,0xc4,0x0f,0xff,0xdf,0xff,0x06,0xe3,
	0x60,0x04,0x00,0x26,0x71,0x60,0x04,0xea,
	0x61,0x40,0x00,0x26,0x71,0xa4,0x04,0xea,
	0x61,0x84,0x11,0x62,0xe8,0x1f,0x11,0x64,
	0xe8,0x1f,0xf1,0xc4,0xe0,0x20,0xf1,0xbf,
	0x01,0x46,0x02,0x20,0xd0,0x01,0xa0,0x38,
	0x00,0xc6,0x00,0x22,0x70,0x38,0x10,0x20,
	0xfc,0x32,0xd0,0x41,0x05,0xe7,0x60,0x48,
	0x05,0xe7,0x60,0x10,0x05,0xab,0x60,0x14,
	0x05,0xab,0x60,0x18,0x00,0x22,0x70,0x3c,
	0x10,0x20,0xfc,0x3f,0xd0,0x41,0x05,0xe7,
	0x60,0x48,0x05,0xe7,0x60,0x0c,0x05,0xab,
	0x60,0x1c,0x05,0xab,0x60,0x20,0x00,0x23,
	0x70,0x00,0x10,0x20,0xfc,0x45,0x05,0xa2,
	0x60,0x00,0x00,0x23,0x70,0x04,0x10,0x20,
	0xfc,0x4b,0x05,0xa2,0x60,0x04,0x00,0x23,
	0x70,0x14,0x10,0x21,0xe8,0x57,0x10,0x22,
	0xe8,0x55,0x11,0x61,0xe8,0x57,0x11,0x62,
	0xe8,0x57,0xd0,0x0e,0xe0,0x58,0xd0,0x0f,
	0x05,0xa2,0x60,0x18,0x01,0x46,0x02,0x20,
	0xd0,0x00,0xa0,0x38,0x00,0xc6,0x11,0x60,
	0xe8,0x81,0xf3,0x00,0x04,0xea,0x71,0x84,
	0x04,0xea,0x71,0x40,0x11,0x62,0xe8,0x77,
	0x11,0x61,0xe8,0xb8,0x11,0x63,0xe8,0x89,
	0x11,0x70,0xe8,0x7b,0x11,0x71,0xe8,0x7b,
	0x11,0x72,0xe8,0x79,0x11,0x64,0xe8,0x75,
	0xe3,0x00,0xf0,0xf1,0xe0,0xbb,0xf1,0x2a,
	0xe0,0xbb,0xf1,0xa8,0xe0,0xbb,0xd7,0xd2,
	0x00,0xa0,0xd0,0x58,0x07,0xc4,0xf3,0x00,
	0xe0,0xbb,0x11,0xa0,0xe8,0x86,0x11,0xa2,
	0xe8,0x86,0xe3,0x00,0xf1,0x55,0xf3,0x00,
	0xe0,0xbb,0xd0,0x01,0x05,0x6b,0x60,0x14,
	0xd0,0x01,0x05,0x6b,0x60,0x10,0x05,0x6b,
	0xd0,0x34,0x00,0xa7,0xd0,0x70,0x60,0x40,
	0xb0,0x3c,0x00,0x60,0xd0,0x40,0x60,0x40,
	0x00,0x60,0xd0,0x40,0x05,0x6a,0x60,0x68,
	0x00,0x60,0xd0,0x40,0x05,0x6a,0x60,0x6c,
	0xd0,0x41,0x05,0x6b,0x60,0x5c,0xd0,0x42,
	0x05,0x6b,0x60,0x60,0xd0,0x41,0x07,0x21,
	0x60,0x50,0xd0,0x00,0x11,0xa1,0xf8,0xae,
	0x00,0x26,0xd0,0x10,0x05,0x6f,0x60,0x2c,
	0x05,0x6f,0x60,0x30,0xf1,0x99,0xf3,0x00,
	0xd0,0x49,0x05,0x6e,0x60,0x54,0xe0,0xbb,
	0x11,0xa1,0xeb,0x00,0xf1,0x76,0xd0,0x80,
	0x04,0xea,0x71,0x40,0x11,0x62,0xe8,0xc3,
	0x11,0x61,0xe8,0xc3,0xe0,0xc4,0xd0,0x81,
	0x04,0xe8,0x60,0xac,0x00,0x27,0x70,0x20,
	0x10,0x21,0xe8,0xcd,0x10,0x22,0xe8,0xcd,
	0xe0,0xd3,0x00,0x6e,0xd0,0x60,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x6e,
	0xd0,0x58,0x04,0xeb,0x60,0x48,0x00,0x63,
	0xd0,0x61,0x04,0xeb,0x60,0x4c,0x00,0x67,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x20,0xd0,0x42,0x00,0x2a,
	0x60,0x60,0xd0,0x44,0x60,0x5b,0x00,0x20,
	0xd0,0x44,0x00,0x2a,0x60,0x68,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xc1,0xdf,0x00,0xa0,0xd0,0x58,
	0x00,0x20,0xd7,0xd2,0x17,0xe0,0x07,0xc4,
	0xf3,0x00,0x01,0x46,0x00,0x30,0xd0,0x41,
	0xa0,0x38,0x00,0xc6,0xd0,0x40,0x05,0x64,
	0xd0,0x10,0x60,0x40,0x00,0xe9,0xd0,0x5c,
	0x00,0x20,0xd7,0xd2,0x17,0xe0,0x07,0xc4,
	0x01,0x46,0x00,0x30,0xd0,0x40,0xa0,0x38,
	0x00,0xc6,0x02,0x46,0x00,0x20,0xd6,0xc1,
	0x02,0x06,0x00,0x20,0xdd,0x80,0xd8,0x00,
	0x00,0x24,0xd0,0xb0,0xa0,0xb6,0x80,0x3f,
	0xa8,0x34,0x00,0x26,0xd0,0x30,0xd0,0x43,
	0x60,0x40,0xc7,0xc7,0x10,0x20,0x05,0xa2,
	0xd0,0x18,0xd0,0x4f,0x60,0x40,0x05,0xe6,
	0xd0,0x14,0xd0,0x40,0x60,0x40,0x00,0x70,
	0xd1,0x5c,0x07,0xc5,0xc1,0xdf,0xd7,0xd2,
	0x00,0xa0,0xd0,0x58,0x07,0xc4,0xf3,0x00,
	0x01,0x46,0x00,0x30,0xd0,0x41,0xa0,0x38,
	0x00,0xc6,0xd0,0x40,0x05,0x64,0x60,0x50,
	0xd7,0xd2,0x00,0xa4,0xd0,0x48,0x07,0xc4,
	0x01,0x46,0x00,0x30,0xd0,0x40,0xa0,0x38,
	0x00,0xc6,0x02,0x46,0x00,0x20,0xd6,0xc1,
	0x02,0x06,0xdd,0x80,0xd8,0x00,0x00,0x24,
	0xd0,0xb0,0xa0,0xb6,0x80,0x3f,0xa8,0x34,
	0xd0,0x43,0x00,0x26,0x60,0x70,0xd0,0x40,
	0x05,0xe6,0x60,0x54,0xc7,0xc7,0x10,0x20,
	0x07,0xc5,0xc1,0xdf,0xd7,0xd2,0x00,0xa0,
	0xd0,0x58,0x07,0xc4,0xf3,0x00,0x01,0x46,
	0x00,0x30,0xd0,0x41,0xa0,0x38,0x00,0xc6,
	0xd0,0x41,0x05,0x64,0x60,0x50,0x0b,0x1e,
	0xd7,0xd2,0x00,0x65,0xd0,0x68,0x07,0xc4,
	0x01,0x46,0x00,0x30,0xd0,0x40,0xa0,0x38,
	0x00,0xc6,0xd0,0x43,0x00,0x26,0x60,0x70,
	0xd0,0x4e,0x05,0xa2,0x60,0x58,0xc7,0xc7,
	0x10,0x20,0x07,0xc5,0xc1,0xdf,0xd8,0x00,
	0x00,0x24,0xd0,0xb0,0xa0,0xb6,0x80,0x3f,
	0xa8,0x34,0xd7,0xd2,0x00,0xa0,0xd0,0x58,
	0x07,0xc4,0xf3,0x00,0x01,0x46,0x00,0x30,
	0xd0,0x41,0xa0,0x38,0x00,0xc6,0xd0,0x40,
	0x05,0x64,0x60,0x50,0xd7,0xd2,0x00,0xa4,
	0xd0,0x58,0x07,0xc4,0x01,0x46,0x00,0x30,
	0xd0,0x40,0xa0,0x38,0x00,0xc6,0xd0,0x43,
	0x00,0x26,0x60,0x70,0xc7,0xc7,0x10,0x20,
	0x07,0xc5,0xc1,0xdf,0xd7,0xd2,0x00,0xa0,
	0xd0,0x58,0x07,0xc4,0xf3,0x00,0xd0,0x42,
	0x04,0xea,0x60,0x6c,0xd0,0x50,0x04,0xea,
	0x60,0x68,0xc7,0xc7,0x10,0x20,0x07,0xc5,
	0xc1,0xdf,0xd7,0xd2,0x00,0xa0,0xd0,0x58,
	0x07,0xc4,0xf3,0x00,0x01,0x46,0x00,0x30,
	0xd0,0x41,0xa0,0x38,0x00,0xc6,0xd7,0xd2,
	0x00,0x66,0xd0,0x68,0x07,0xc4,0x01,0x46,
	0x00,0x30,0xd0,0x40,0xa0,0x38,0x00,0xc6,
	0xc7,0xc7,0x17,0xe0,0x07,0xc5,0x83,0xe2,
	0x98,0x23,0x04,0x1d,0xa8,0x23,0x07,0xc5,
	0x00,0xe7,0x78,0x28,0x00,0x14,0xe9,0xbf,
	0x83,0xe2,0x98,0x23,0x08,0x1d,0xa8,0x23,
	0x07,0xc5,0x00,0x00,0x15,0xe1,0xe8,0x21,
	0x15,0xe2,0xe8,0x13,0x15,0x60,0xe8,0x0b,
	0x15,0x5c,0x15,0x60,0xf8,0x0a,0xd5,0x41,
	0x15,0x44,0x15,0xa0,0xe8,0x21,0x15,0x9c,
	0x15,0xa0,0xf8,0x11,0xd5,0x81,0x15,0x84,
	0xe0,0x21,0x15,0x60,0xe8,0x1a,0x15,0x5d,
	0x15,0x60,0xf8,0x19,0xd5,0x41,0x15,0x43,
	0x15,0xa0,0xe8,0x21,0x15,0x9d,0x15,0xa0,
	0xf8,0x20,0xd5,0x81,0x15,0x83,0x04,0xea,
	0xd1,0x00,0x71,0x04,0x11,0x23,0xf8,0x27,
	0xe3,0x00,0x00,0x2a,0xd1,0x20,0x71,0x44,
	0x00,0x2f,0xd1,0x3e,0x41,0x05,0xeb,0x00,
	0x11,0x62,0xf8,0x35,0x04,0xeb,0xd1,0x28,
	0x71,0x04,0x11,0x20,0xfb,0x00,0x15,0xe1,
	0xe8,0x40,0x15,0xe4,0xf8,0x83,0x04,0xea,
	0x71,0x40,0x11,0x61,0xeb,0x00,0x11,0x62,
	0xeb,0x00,0xe0,0x83,0x05,0x20,0xd1,0x1c,
	0x71,0x04,0x11,0x22,0xe7,0x00,0xd1,0x40,
	0x05,0x20,0x61,0x50,0x05,0x20,0x61,0x5c,
	0x05,0x20,0x61,0x68,0x05,0x20,0x61,0x6c,
	0x00,0x32,0xd0,0x01,0xa0,0x38,0x80,0x3f,
	0x05,0x20,0x61,0x74,0x05,0x20,0x61,0x78,
	0x05,0x20,0x61,0x7c,0x05,0x21,0x61,0x44,
	0x00,0x32,0xd0,0x00,0xa0,0x38,0x80,0x3f,
	0x05,0x21,0x71,0x80,0x05,0x21,0x61,0x40,
	0x11,0xa0,0xe8,0x7a,0x11,0xa1,0xe8,0x7c,
	0x11,0xa2,0xe8,0x7e,0x11,0xa3,0xe8,0x7a,
	0x11,0xa4,0xe8,0x7c,0x11,0xa5,0xe8,0x7e,
	0x11,0xa6,0xe8,0x7a,0x11,0xa7,0xe8,0x7c,
	0x11,0xa8,0xe8,0x7e,0x11,0xa9,0xe8,0x7a,
	0x11,0xaa,0xe8,0x7c,0x11,0xab,0xe8,0x7e,
	0xd1,0x80,0xe0,0x7f,0xd1,0x81,0xe0,0x7f,
	0xd1,0x82,0x00,0x22,0x61,0x84,0xf3,0x15,
	0xe1,0x9d,0x00,0x27,0xd2,0x20,0x03,0xd1,
	0xe8,0x89,0x00,0x29,0xd2,0x00,0x05,0x20,
	0x71,0x1c,0x11,0x21,0xfc,0xbc,0x11,0x24,
	0xe8,0xa6,0x15,0x60,0xe8,0x9a,0xe4,0x97,
	0x15,0x62,0xe4,0x95,0xe0,0x9a,0xd5,0x42,
	0xe0,0x9a,0x15,0x7e,0xfc,0x9a,0xd5,0x7e,
	0x15,0xa0,0xe8,0xbc,0xe4,0xa2,0x15,0xa2,
	0xe4,0xa0,0xe0,0xbc,0xd5,0x82,0xe0,0xbc,
	0x15,0xbe,0xfc,0xbc,0xd5,0xbe,0xe0,0xbc,
	0x15,0x60,0xe8,0xb1,0xe4,0xae,0x15,0x64,
	0xe4,0xac,0xe0,0xb1,0xd5,0x44,0xe0,0xb1,
	0x15,0x7c,0xfc,0xb1,0xd5,0x7c,0x15,0xa0,
	0xe8,0xbc,0xe4,0xb9,0x15,0xa4,0xe4,0xb7,
	0xe0,0xbc,0xd5,0x84,0xe0,0xbc,0x15,0xbc,
	0xfc,0xbc,0xd5,0xbc,0x15,0xe1,0xe8,0xc2,
	0x15,0xe2,0xe8,0xc2,0x15,0xe4,0xfb,0x00,
	0xf3,0x15,0xd1,0x00,0x04,0xee,0xd1,0x6c,
	0x61,0x05,0x05,0x20,0xd1,0x10,0xd1,0x41,
	0x61,0x44,0x05,0x21,0xd1,0xc0,0x71,0xc7,
	0x05,0x20,0xd2,0xa8,0x72,0x8a,0x05,0x20,
	0xd2,0xec,0x72,0xcb,0xc1,0x55,0xc1,0x96,
	0x05,0x20,0xd1,0x1c,0x71,0x04,0x11,0x24,
	0xf8,0xde,0x11,0x5e,0x11,0x9e,0xe0,0xe2,
	0x11,0x22,0xf8,0xf6,0x11,0x5f,0x11,0x9f,
	0x11,0xe4,0xe8,0xe6,0x11,0xe5,0xf8,0xf3,
	0xd3,0x43,0xd3,0x84,0xc3,0x05,0x15,0x60,
	0xf4,0xed,0xd3,0x00,0x33,0x05,0xf1,0xc7,
	0xc1,0x4c,0x15,0x60,0xf4,0xf3,0xd1,0x40,
	0x31,0x4c,0x22,0x85,0x22,0xc6,0xe1,0x63,
	0x05,0xe6,0xd1,0x3c,0x71,0x04,0x05,0x20,
	0xd1,0x70,0x61,0x05,0x05,0xa2,0xd1,0x00,
	0x71,0x04,0xd1,0x46,0x11,0x22,0xe9,0x03,
	0xd1,0x40,0x00,0x22,0xd1,0x00,0x71,0x04,
	0x11,0x21,0xe9,0x09,0xb1,0x7d,0x00,0x22,
	0xd1,0x04,0x71,0x04,0x11,0x20,0xe9,0x12,
	0xb1,0x7f,0x11,0x21,0xe9,0x12,0xb1,0x7f,
	0x05,0x21,0xd1,0x00,0x61,0x44,0xc2,0x95,
	0xc2,0xd6,0x11,0x64,0xf9,0x28,0xc2,0x95,
	0x12,0x82,0x32,0x95,0xd1,0x03,0x41,0x0a,
	0x11,0x23,0xf9,0x21,0xb2,0xbf,0x12,0x9e,
	0xf1,0xa7,0x00,0x21,0xd1,0x1a,0x31,0x05,
	0x22,0x84,0xe1,0x63,0x11,0x65,0xf9,0x44,
	0xc2,0x56,0xc1,0x08,0x11,0x1d,0xc1,0x44,
	0xb1,0x41,0x15,0xa0,0xe5,0x33,0x31,0x56,
	0xe5,0x35,0xc2,0x45,0xe1,0x3c,0xc1,0x48,
	0x31,0x44,0xb1,0x41,0xc1,0x85,0x31,0x96,
	0xed,0x3c,0xc2,0x45,0xb1,0x01,0x32,0x44,
	0xd3,0x44,0xd3,0x83,0xc3,0x09,0xf1,0xc7,
	0xc2,0xcc,0xe1,0x63,0x11,0x67,0xf9,0x47,
	0xe1,0x49,0x11,0x68,0xf9,0x63,0xc2,0x55,
	0x15,0x60,0xe5,0x50,0x00,0x21,0xd1,0x19,
	0x31,0x15,0xfd,0x53,0x00,0x21,0xd2,0x59,
	0xe1,0x59,0x00,0x29,0xd1,0x35,0x31,0x15,
	0xf5,0x59,0x00,0x29,0xd2,0x75,0x00,0x21,
	0xd1,0x19,0x32,0x44,0xd3,0x44,0xd3,0x83,
	0xc3,0x09,0xf1,0xc7,0x13,0x1e,0x13,0x02,
	0xc2,0x8c,0x05,0x21,0xd1,0xc0,0x71,0xc7,
	0xc5,0x08,0x15,0x1f,0x15,0xe2,0xf9,0x7a,
	0xb5,0x04,0x05,0x27,0x71,0x44,0x11,0x61,
	0xf9,0x71,0x00,0x22,0xd5,0x3e,0x00,0x25,
	0xd4,0xe7,0x11,0xe4,0xe9,0x77,0x11,0xe5,
	0xf9,0x8c,0x00,0x27,0xd4,0xc1,0xe1,0x8c,
	0xc1,0x14,0x11,0x1f,0x25,0x04,0xb5,0x04,
	0x05,0x27,0x71,0x44,0x11,0x61,0xf9,0x84,
	0x00,0x25,0xd5,0x0a,0x00,0x28,0xd4,0xdb,
	0x11,0xe4,0xe9,0x8a,0x11,0xe5,0xf9,0x8c,
	0x00,0x29,0xd4,0xc8,0x05,0xa1,0x71,0x38,
	0x00,0x2b,0xd1,0x50,0x31,0x05,0xe9,0x93,
	0xb4,0xd0,0xf1,0xe7,0x05,0x20,0xd1,0x28,
	0x62,0x84,0x05,0x20,0xd1,0x2c,0x62,0xc4,
	0x05,0x20,0xd1,0x18,0x65,0xc4,0xd1,0x41,
	0x00,0xe7,0xd1,0x18,0x61,0x44,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x07,0x25,0xd1,0x0c,0xb1,0x3f,
	0x01,0x46,0x71,0x44,0x00,0x06,0x91,0xfd,
	0x80,0x3f,0x05,0x21,0xd1,0x04,0xa1,0xfd,
	0x61,0x44,0x00,0xc6,0x07,0x26,0xd1,0x88,
	0x71,0x86,0x11,0xa0,0xe9,0xc2,0x11,0x56,
	0x00,0x20,0xd1,0x3f,0x41,0x44,0x11,0xc6,
	0x51,0x47,0x11,0xa1,0xe9,0xc2,0x11,0x56,
	0x00,0x2f,0xd1,0x3f,0x41,0x44,0x11,0x5e,
	0x07,0xc5,0xc3,0xcc,0x23,0x0f,0xb3,0x41,
	0x13,0x61,0xed,0xc8,0xd4,0x00,0x00,0x24,
	0xd4,0x40,0xd4,0x82,0xc3,0x4c,0x33,0x4e,
	0x13,0x60,0xe5,0xd7,0x33,0x0e,0x24,0x11,
	0xe1,0xd0,0x13,0x04,0x14,0x5c,0xb4,0x81,
	0x14,0xa0,0xf5,0xd0,0x00,0x23,0xd3,0xbf,
	0x43,0x90,0x00,0x22,0xd3,0x40,0x33,0x8d,
	0xfd,0xe4,0x24,0x0d,0x14,0x18,0xc3,0x10,
	0x07,0xc5,0x12,0xa0,0xf5,0xeb,0xd2,0x80,
	0xe1,0xef,0xc1,0x13,0x31,0x0a,0xf5,0xef,
	0xc2,0x93,0x12,0xe0,0xf5,0xf3,0xd2,0xc0,
	0xe1,0xf7,0xc1,0x14,0x31,0x0b,0xf5,0xf7,
	0xc2,0xd4,0x07,0xc5,0x00,0x27,0x70,0x20,
	0x10,0x22,0xe8,0x31,0x0b,0xd1,0x00,0x67,
	0xd0,0x1c,0x05,0x2f,0x60,0x0c,0x00,0x20,
	0xd0,0x26,0x05,0xe6,0x60,0x1c,0x00,0x28,
	0xd0,0x33,0x05,0xe6,0x60,0x20,0xd0,0x1e,
	0x07,0x26,0x60,0x30,0x04,0xe8,0x70,0x60,
	0x00,0x2d,0x60,0x60,0x01,0xfe,0xd9,0x00,
	0x30,0x40,0x00,0x2d,0x60,0x40,0x30,0x40,
	0x00,0x2e,0x60,0x40,0x01,0x74,0xd6,0x00,
	0x07,0x27,0x60,0x2c,0x07,0x27,0x60,0x30,
	0x07,0x27,0x60,0x34,0x05,0x65,0x70,0x38,
	0x05,0x65,0x60,0x30,0x05,0x65,0x70,0x3c,
	0x05,0x65,0x60,0x34,0xe0,0x61,0x07,0xd1,
	0x00,0x6c,0xd0,0x08,0x05,0x2f,0x60,0x0c,
	0x00,0x20,0xd0,0x28,0x05,0xe6,0x60,0x1c,
	0x00,0x2a,0xd0,0x19,0x05,0xe6,0x60,0x20,
	0xd0,0x24,0x07,0x26,0x60,0x30,0x04,0xe8,
	0x70,0x64,0x00,0x2d,0x60,0x60,0x02,0x77,
	0xde,0x00,0x30,0x40,0x00,0x2d,0x60,0x40,
	0x04,0xe8,0x70,0x68,0x00,0x2e,0x60,0x40,
	0x01,0xb5,0xd4,0x00,0x07,0x27,0x60,0x2c,
	0x07,0x27,0x60,0x30,0x05,0x26,0x70,0x14,
	0x07,0x27,0x60,0x34,0x05,0x66,0x70,0x00,
	0x05,0x65,0x60,0x30,0x05,0x66,0x70,0x04,
	0x05,0x65,0x60,0x34,0xf1,0xb8,0x01,0x46,
	0x02,0x20,0xd0,0x05,0xa0,0x38,0x00,0xc6,
	0xf0,0xcd,0x00,0x23,0xd0,0x30,0x03,0xd1,
	0xe8,0x6d,0x00,0x24,0xd0,0x1e,0x10,0x0a,
	0xf0,0xb3,0x00,0x06,0x00,0x29,0xd0,0x76,
	0xa0,0x76,0x80,0x3f,0xa0,0x34,0x80,0x3f,
	0xa0,0xb4,0x80,0x3f,0x01,0x46,0x02,0x20,
	0xd0,0x04,0xa0,0x38,0x00,0xc6,0x00,0x2d,
	0x70,0xe0,0xc0,0x83,0xf1,0x7a,0x05,0xe6,
	0x60,0xb8,0x05,0x25,0x60,0xb8,0x05,0x26,
	0x60,0x8c,0x04,0xeb,0x60,0xa0,0x00,0x2d,
	0xd0,0xa0,0x00,0x2b,0x60,0x94,0x00,0x2d,
	0x70,0x00,0x05,0x25,0x60,0x34,0x00,0x2e,
	0x70,0x00,0x05,0x26,0x60,0x04,0xd0,0x40,
	0x00,0x27,0x60,0x60,0x07,0x26,0x60,0x60,
	0x05,0x6b,0x60,0x50,0xd0,0x41,0x05,0x6b,
	0x60,0x54,0xd0,0x42,0x05,0xa2,0x60,0x40,
	0xf0,0xc3,0x00,0x20,0xd0,0x42,0x00,0x2a,
	0x60,0x60,0xd0,0x44,0x60,0x5b,0x00,0x20,
	0xd0,0x44,0x00,0x2a,0x60,0x68,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xc0,0x40,0xc0,0x80,0x10,0x16,
	0x00,0xef,0x40,0x00,0x00,0x20,0x50,0x30,
	0x10,0x54,0x00,0x20,0x40,0x4f,0x50,0x01,
	0x00,0xef,0x40,0xbf,0x0d,0x20,0x50,0x80,
	0x07,0xc5,0x00,0xef,0xd0,0x3c,0x01,0x46,
	0x59,0x80,0x39,0x80,0x00,0x24,0xd0,0x14,
	0x59,0x80,0x00,0xc6,0x07,0xc5,0x01,0x46,
	0x00,0x31,0xd4,0x00,0xa0,0x10,0x00,0x21,
	0xd0,0x3c,0x78,0x00,0x00,0x22,0xd0,0x00,
	0x00,0x12,0xe8,0xdb,0x00,0x21,0xd0,0x40,
	0x50,0x01,0x00,0x29,0x70,0x54,0x10,0x49,
	0x50,0x01,0x8f,0x10,0xa0,0x15,0xd8,0x40,
	0x04,0x93,0x04,0x9d,0x00,0x10,0xe8,0xe7,
	0x04,0x96,0x03,0xd1,0xe9,0x28,0x04,0x99,
	0x00,0x11,0xe8,0xf4,0x04,0x97,0x80,0x90,
	0xa8,0x55,0x87,0xd0,0x02,0x7c,0xd0,0x02,
	0xa0,0x15,0xe0,0xfa,0x80,0x90,0xa8,0x55,
	0x87,0xd0,0x00,0x60,0xd0,0x04,0xa0,0x15,
	0x01,0x3e,0xd1,0x3b,0xa0,0x15,0x03,0x77,
	0xdc,0x83,0xa0,0x15,0x89,0x10,0x00,0x2d,
	0xd0,0x13,0xa0,0x15,0x85,0x90,0x00,0x22,
	0x70,0x68,0x10,0x60,0xf9,0x0b,0x00,0x22,
	0xd0,0x43,0x10,0x41,0x00,0x20,0x50,0x41,
	0x10,0x4d,0xa0,0x55,0x89,0x90,0x00,0x28,
	0xd0,0x0c,0x00,0x2b,0xd0,0x4f,0x10,0x4c,
	0x50,0x01,0x07,0x25,0xd0,0x60,0x60,0x01,
	0x00,0x22,0x70,0x68,0x10,0x60,0xf9,0x20,
	0x00,0x22,0xd0,0x43,0x00,0x2b,0xd0,0x10,
	0x20,0x01,0x10,0x4a,0x20,0x01,0x8b,0x90,
	0xa0,0x15,0xe1,0x62,0x00,0x11,0xe9,0x32,
	0x04,0x97,0x80,0x90,0xa8,0x55,0x87,0xd0,
	0x00,0xa0,0xd0,0x05,0xa0,0x15,0xe1,0x38,
	0x80,0x90,0xa8,0x55,0x87,0xd0,0x01,0x20,
	0xd0,0x07,0xa0,0x15,0x01,0x32,0xd5,0x0c,
	0xa0,0x15,0x03,0x76,0xd4,0x79,0xa0,0x15,
	0x89,0x10,0x00,0x2d,0xd0,0x09,0xa0,0x15,
	0x00,0x22,0x70,0x68,0x10,0x60,0xf9,0x48,
	0x00,0x21,0xd0,0x79,0x10,0x41,0x00,0x20,
	0x50,0x41,0x85,0x90,0x10,0x4d,0xa0,0x55,
	0x89,0x90,0x0b,0x3f,0xd1,0xe4,0xa0,0x15,
	0x07,0x25,0xd0,0x60,0x60,0x01,0x00,0x22,
	0x70,0x68,0x10,0x60,0xf9,0x5b,0x00,0x21,
	0xd0,0x79,0x00,0x2b,0xd0,0x10,0x20,0x01,
	0x10,0x4a,0x20,0x01,0x8b,0x90,0xa0,0x15,
	0x01,0x38,0xd0,0x40,0xa0,0x10,0x05,0xe6,
	0xd0,0x14,0xd0,0x40,0x60,0x40,0x00,0xb8,
	0xd2,0x00,0xa0,0x10,0x07,0xd4,0x00,0x23,
	0xd0,0x7f,0x07,0x25,0xd0,0x34,0x60,0x40,
	0x07,0x25,0xd0,0x38,0x60,0x40,0x07,0x25,
	0xd0,0x3c,0x60,0x40,0x00,0xc6,0x07,0xc5,
	0xb0,0xfe,0xd2,0x02,0x00,0x75,0xd1,0x80,
	0x03,0xd1,0xe9,0x82,0x00,0x79,0xd5,0x00,
	0xc1,0xc0,0x00,0x22,0xd0,0x18,0x70,0x00,
	0x10,0x10,0x00,0x23,0xd1,0x3f,0x40,0x04,
	0xc1,0x00,0x11,0x08,0x51,0x00,0x11,0x08,
	0x51,0x00,0xc0,0x04,0x00,0x06,0x01,0x46,
	0xa0,0x3c,0xa1,0x3d,0x80,0x3f,0x60,0x03,
	0x00,0xc6,0xb0,0xfc,0xb1,0xc1,0xed,0x90,
	0xb2,0x01,0xe9,0xb7,0x00,0x3a,0xd8,0xc0,
	0x03,0xd1,0xe9,0xa2,0x00,0x3c,0xda,0x80,
	0xc1,0xc0,0x00,0x22,0xd0,0x18,0x70,0x00,
	0xc1,0x80,0x00,0x23,0xd1,0x3f,0x41,0x00,
	0xc1,0x44,0x11,0x08,0x51,0x05,0x11,0x48,
	0x11,0x48,0xc0,0x05,0x0f,0xec,0xd1,0x40,
	0x41,0x46,0x50,0x05,0x11,0x58,0x50,0x05,
	0xe1,0x90,0x07,0xc5,0x00,0x20,0xd0,0xc0,
	0xd1,0x00,0x01,0xb5,0xd4,0x00,0xc1,0x40,
	0x00,0x20,0xd1,0xa3,0x04,0xe2,0xd0,0xa4,
	0xc0,0x42,0x61,0x01,0xb0,0x7c,0x61,0x41,
	0xc0,0x06,0x30,0x03,0xfd,0xd6,0x02,0xe4,
	0x21,0x00,0xd0,0x01,0x40,0x03,0x10,0x20,
	0xe9,0xd2,0x02,0xe3,0x21,0x60,0xe1,0xd3,
	0xb1,0x60,0xb0,0xff,0xb0,0xb8,0xe1,0xc2,
	0x00,0x20,0xd0,0xc0,0x04,0xe8,0x70,0x28,
	0xc1,0x00,0xc1,0x40,0x00,0x32,0xdd,0x00,
	0x00,0x2a,0x71,0x90,0xc0,0x46,0x21,0x40,
	0x04,0xac,0xd0,0x94,0x00,0x2a,0x71,0x90,
	0x11,0x81,0xc0,0x42,0xc8,0x05,0xd0,0x03,
	0x40,0x03,0x10,0x21,0xed,0xee,0x04,0x10,
	0x68,0x01,0x00,0x20,0xd0,0x23,0x20,0x06,
	0x30,0x03,0xfe,0x05,0xd0,0x03,0x40,0x03,
	0x10,0x20,0xe9,0xff,0x10,0x21,0xea,0x01,
	0x10,0x22,0xe9,0xff,0x08,0x6b,0x21,0x5c,
	0xe2,0x02,0xb1,0x7c,0xe2,0x02,0xb1,0x64,
	0xb0,0xff,0xb0,0xb8,0xe1,0xe7,0x04,0xac,
	0xd0,0x94,0xd0,0xc0,0x00,0x2a,0x71,0x90,
	0x11,0x81,0xd0,0x44,0x20,0x42,0xb0,0xb8,
	0xc0,0x02,0x04,0xac,0x30,0x10,0x60,0x01,
	0xb0,0xff,0x00,0x20,0xd0,0x23,0x20,0x06,
	0x30,0x03,0xee,0x0b,0xd0,0x44,0x20,0x42,
	0xd0,0x00,0x60,0x01,0xb0,0x44,0x04,0xe7,
	0x60,0x48,0x04,0xac,0xd0,0x14,0x04,0xe7,
	0x60,0x04,0xd0,0x40,0x04,0xe7,0x60,0x4c,
	0x04,0xe7,0x60,0x54,0x04,0xe7,0x60,0x50,
	0x04,0xe7,0x60,0x58,0x07,0xc5,0x00,0x00,
	0xf3,0x15,0xd4,0x41,0x00,0x21,0xd0,0x18,
	0x30,0x13,0xe8,0x2a,0x00,0x21,0xd0,0x17,
	0x30,0x13,0xe8,0x17,0xd4,0x40,0x00,0x21,
	0xd0,0x11,0x30,0x13,0xe8,0x2a,0x00,0x21,
	0xd0,0x12,0x30,0x13,0xe8,0x9e,0x00,0x21,
	0xd0,0x13,0x30,0x13,0xe8,0xa5,0xd1,0xc1,
	0xc2,0x15,0x12,0x01,0xc2,0xd6,0x12,0xc1,
	0xc3,0x97,0x13,0x81,0xc0,0x48,0x30,0x4b,
	0xe4,0x23,0xd8,0x04,0xe0,0x4b,0xd8,0x00,
	0xb8,0x04,0x22,0x0e,0xb2,0x01,0x22,0xce,
	0xb2,0xc1,0xe0,0x4b,0xc2,0x15,0xc2,0x96,
	0xc3,0x97,0xc1,0xd8,0xc2,0xd9,0xc3,0x5a,
	0xc0,0x48,0x30,0x4b,0xe4,0x35,0xd8,0x04,
	0xe0,0x4b,0xd8,0x00,0xb8,0x04,0xd0,0x80,
	0xd0,0xc0,0xc0,0x47,0xb0,0x41,0xe8,0x3f,
	0x20,0x8a,0x20,0xcd,0xe0,0x3a,0x22,0x02,
	0x22,0x0e,0xb2,0x01,0x22,0xc3,0x22,0xce,
	0xb2,0xc1,0xd0,0x40,0x30,0x4a,0xc2,0x81,
	0xd0,0x40,0x30,0x4d,0xc3,0x41,0x11,0xe0,
	0xe8,0xf5,0x13,0xa0,0xe8,0xf5,0xc0,0x08,
	0x30,0x0b,0xe8,0xf5,0xd5,0x08,0xc3,0xce,
	0x0f,0xff,0xdf,0xff,0x10,0x02,0xc2,0x48,
	0x12,0x5f,0x42,0x40,0xc3,0x0b,0x13,0x1f,
	0x43,0x00,0xb3,0x3e,0xd0,0x07,0x00,0x18,
	0xe8,0x6e,0xc0,0x48,0xb0,0x7f,0x40,0x40,
	0xd4,0x88,0x34,0x81,0x44,0x80,0xc0,0x4b,
	0xb0,0x7f,0x40,0x40,0xd4,0xc8,0x34,0xc1,
	0x44,0xc0,0xe0,0x72,0xc4,0x88,0x44,0x80,
	0xc4,0xcb,0x44,0xc0,0xd5,0x40,0xd5,0x80,
	0x14,0x61,0xe8,0x77,0xf1,0x0f,0xc4,0x13,
	0xf1,0x3b,0xf1,0x04,0xc4,0x12,0xf1,0x1b,
	0xd4,0x08,0x34,0x12,0xc0,0x0f,0x30,0x10,
	0xfc,0x8b,0x33,0xd0,0xf1,0x3b,0xf1,0x9e,
	0xf1,0x04,0x13,0xe8,0xfc,0x8b,0xd4,0x08,
	0x33,0xd0,0xf1,0x3b,0xe0,0x83,0xc4,0x0f,
	0xf1,0x3b,0x15,0x28,0xe8,0x99,0xd5,0x40,
	0xd5,0x80,0x14,0x61,0xe8,0x97,0xf1,0x0f,
	0xd4,0x08,0x34,0x14,0xf1,0x1b,0xc4,0x14,
	0xf1,0x3b,0xb1,0xc1,0xe8,0xf5,0x22,0x0a,
	0x22,0xcd,0xe0,0x53,0xd1,0xc1,0xc2,0xd5,
	0x12,0xc1,0xc3,0x96,0x13,0x81,0xc2,0x17,
	0xe0,0xaa,0xc2,0xd5,0xc3,0x56,0xc3,0x97,
	0xc1,0xd8,0xc2,0x19,0x11,0xe0,0xe8,0xf5,
	0x13,0xa0,0xe8,0xf5,0xd5,0x08,0xd8,0x04,
	0x00,0x20,0xd0,0x0f,0x42,0x00,0xc0,0x48,
	0x10,0x44,0x50,0x48,0x10,0x44,0x50,0x48,
	0xc2,0x01,0x12,0x0c,0x52,0x01,0xc3,0xce,
	0x0f,0xff,0xdf,0xff,0x10,0x02,0xc3,0x0b,
	0x13,0x1f,0x43,0x00,0xb3,0x3e,0xd0,0x07,
	0xc4,0xcb,0x44,0xc0,0x14,0xe0,0xe8,0xd7,
	0xf1,0x0f,0xc4,0x13,0xf1,0x3b,0xd4,0x08,
	0x34,0x13,0xc0,0x0f,0x30,0x10,0xfc,0xe2,
	0xc5,0x48,0xc5,0x88,0x00,0x23,0xd0,0x3f,
	0x45,0x80,0x33,0xd0,0xf1,0x3b,0xc5,0xc8,
	0xc6,0x08,0x00,0x23,0xd0,0x3f,0x46,0x00,
	0x13,0xe8,0xfc,0xe2,0xf1,0x7e,0xb3,0xc8,
	0xf1,0x9e,0xe0,0xdc,0xc5,0x48,0xc5,0x88,
	0x00,0x23,0xd0,0x3f,0x45,0x80,0xc4,0x0f,
	0xf1,0x3b,0x15,0x28,0xe8,0xf1,0xf1,0x0f,
	0xd4,0x08,0x34,0x14,0xf1,0x1b,0xc4,0x14,
	0xf1,0x3b,0xb1,0xc1,0xe8,0xf5,0x22,0xcd,
	0xe0,0xbb,0x04,0xee,0xd0,0x5c,0x70,0x41,
	0x00,0x20,0xd0,0x04,0x60,0x01,0x00,0x2a,
	0xd0,0x68,0x60,0x01,0x00,0xa1,0xd0,0x50,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x01,0x46,0x75,0x49,0x00,0x06,0x95,0xbd,
	0x15,0x98,0x00,0xc6,0x00,0x23,0xd0,0x3f,
	0x45,0x80,0x22,0x60,0x07,0xc5,0xc0,0x0c,
	0xb0,0x02,0x01,0x46,0x75,0x40,0x00,0x06,
	0x95,0xbd,0x15,0x98,0x00,0xc6,0x00,0x23,
	0xd0,0x3f,0x45,0x80,0x07,0xc5,0x14,0x20,
	0xe9,0x3a,0x00,0x18,0xe9,0x2d,0x03,0xff,
	0xdf,0xff,0xd0,0x4f,0x15,0x5c,0x45,0x40,
	0xc0,0x96,0x10,0x8c,0x10,0x88,0x55,0x42,
	0x15,0x9c,0x45,0x81,0xb4,0x01,0xf9,0x22,
	0x07,0xc5,0xd0,0x0f,0x00,0x23,0xd0,0x70,
	0xc0,0x95,0x10,0x94,0x10,0x98,0x40,0x80,
	0x15,0x84,0x45,0x81,0x55,0x82,0x15,0x44,
	0xb4,0x01,0xf9,0x30,0x07,0xc5,0x14,0x20,
	0xf9,0x3e,0x07,0xc5,0xc1,0x9f,0x00,0x20,
	0xd0,0x4f,0x00,0x18,0xe9,0x61,0x03,0xff,
	0xdf,0xff,0xc1,0x00,0xc0,0x95,0x40,0x81,
	0x10,0x84,0x15,0x5c,0x45,0x44,0xc0,0xd6,
	0x10,0xcc,0x10,0xc8,0x55,0x43,0x15,0x9c,
	0x45,0x81,0x15,0xdc,0x45,0xc4,0xc0,0xd8,
	0x10,0xcc,0x10,0xc8,0x55,0xc3,0x16,0x1c,
	0x46,0x01,0x56,0x02,0xb5,0x01,0xe9,0x5f,
	0xb4,0x01,0xf9,0x46,0x01,0x85,0xf1,0x7e,
	0xe1,0x5c,0x00,0x23,0xd1,0x30,0xc0,0x96,
	0x10,0x9c,0x40,0x81,0xc0,0xd5,0x10,0xd4,
	0x10,0xd8,0x40,0xc1,0x15,0x84,0x45,0x84,
	0x55,0x83,0x15,0x44,0xc0,0xd7,0x10,0xd4,
	0x10,0xd8,0x40,0xc1,0x16,0x04,0x46,0x04,
	0x56,0x03,0x15,0xc4,0x55,0xc2,0xb5,0x01,
	0xe9,0x7c,0xb4,0x01,0xf9,0x63,0x01,0x85,
	0xf1,0x7e,0xe1,0x79,0x14,0x61,0xf9,0x8b,
	0xc6,0x96,0xc6,0x55,0xc1,0x5f,0xf1,0x0f,
	0xc0,0x15,0x05,0xc0,0xc0,0x16,0x06,0x00,
	0xc7,0xc5,0xc5,0x59,0xc5,0x9a,0xc1,0x57,
	0x11,0x50,0x00,0x23,0xd0,0x3f,0x41,0x40,
	0xc0,0x18,0x10,0x08,0x51,0x40,0xc0,0x17,
	0x01,0x46,0x00,0x06,0xa0,0x3c,0xa1,0x7d,
	0x80,0x3f,0x60,0x0c,0x00,0xc6,0x23,0x20,
	0xd5,0x08,0x07,0xc5,0x00,0xef,0xd0,0x3c,
	0x01,0x46,0x59,0x80,0x39,0x80,0x00,0x24,
	0xd0,0x14,0x59,0x80,0x00,0xc6,0x07,0xc5,
	0x04,0xea,0xd0,0x00,0x70,0x00,0x10,0x23,
	0xf8,0x06,0xe3,0x00,0x00,0x2a,0x70,0x60,
	0x00,0x29,0xd0,0x34,0x40,0x40,0xeb,0x00,
	0xf3,0x15,0x00,0x2a,0x70,0x60,0x10,0x64,
	0xf8,0x22,0x05,0x20,0x70,0x1c,0x10,0x24,
	0xf8,0x22,0x03,0xd1,0xf8,0x22,0x00,0x32,
	0xd0,0x01,0xa0,0x38,0x80,0x3f,0xd0,0x01,
	0x05,0x20,0x60,0x14,0x00,0x32,0xd0,0x00,
	0xa0,0x38,0x80,0x3f,0x05,0x6e,0xd0,0xb0,
	0x60,0x42,0xd0,0x41,0x05,0xe1,0x60,0x5c,
	0x04,0xea,0x70,0x80,0x10,0xa2,0xf8,0x3f,
	0x04,0xea,0x70,0x84,0x10,0xa1,0xf8,0x3f,
	0x00,0xa4,0xd8,0x30,0xa8,0x36,0x80,0x3f,
	0x98,0x34,0x04,0x13,0x08,0x1e,0x00,0x24,
	0xd0,0x30,0xa0,0x36,0x80,0x3f,0xa8,0x34,
	0x07,0x51,0x0b,0x52,0xe0,0x7b,0x05,0x27,
	0x70,0x44,0x10,0x60,0xf8,0x60,0x05,0x20,
	0x70,0x50,0x10,0x60,0xf8,0x60,0x03,0xd1,
	0xe8,0x60,0x07,0x26,0x70,0x50,0x10,0x60,
	0xf8,0x60,0x05,0xe6,0x70,0x3c,0x00,0x2e,
	0x70,0x40,0x30,0x40,0xf8,0x60,0x05,0x25,
	0x70,0x78,0x05,0xe6,0x60,0x78,0x00,0x2d,
	0xd0,0x00,0x70,0x80,0x30,0x81,0xe8,0x5e,
	0x00,0x2d,0xd0,0x20,0x00,0x2b,0x60,0x14,
	0x07,0x51,0x0b,0x52,0x06,0xe5,0xd0,0x1c,
	0x01,0x46,0x78,0x00,0x04,0x1d,0x68,0x00,
	0x00,0xc6,0x00,0x2a,0xd0,0x20,0xd0,0x48,
	0x60,0x40,0x01,0x46,0x90,0x43,0x90,0x82,
	0x80,0x3f,0x00,0xc6,0x05,0x29,0xd0,0x08,
	0x60,0x40,0xb0,0x3c,0x60,0x80,0x05,0x29,
	0xd0,0x04,0xd0,0x40,0x60,0x40,0x04,0xea,
	0x70,0x40,0x10,0x62,0xe8,0xa9,0x10,0x61,
	0xe8,0xa9,0x05,0x27,0x70,0x44,0x10,0x60,
	0xe4,0xab,0x00,0x27,0x78,0x34,0x00,0x10,
	0xf8,0xab,0x05,0x26,0x70,0x7c,0x10,0x60,
	0xf8,0xa9,0x04,0xeb,0x70,0x50,0x10,0x61,
	0xf8,0xa9,0x04,0xed,0x70,0x48,0x10,0x60,
	0xf8,0xa9,0x05,0xac,0x70,0x58,0x10,0x63,
	0xf8,0xa9,0x05,0x27,0x70,0x40,0x10,0x61,
	0xe8,0xa9,0x05,0xe1,0x70,0x5c,0x10,0x60,
	0xf8,0xab,0x05,0x27,0x70,0x44,0x10,0x61,
	0xf8,0xa9,0x05,0x27,0x70,0x40,0x10,0x62,
	0xe8,0xab,0xd0,0x40,0xe0,0xac,0xd0,0x41,
	0x05,0x62,0x60,0x68,0x05,0x62,0x60,0x60,
	0x05,0x62,0x60,0x64,0x00,0x6e,0xdc,0x68,
	0x00,0x62,0xdc,0x3c,0x00,0xad,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xa1,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0x2a,0x70,0x60,
	0x00,0x2f,0xd0,0x3e,0x40,0x40,0xeb,0x00,
	0x04,0xea,0xd0,0x00,0x71,0x00,0x11,0x23,
	0xe8,0x24,0x11,0x22,0xe8,0x10,0x11,0x24,
	0xe8,0x10,0xe0,0x14,0xc7,0x17,0xf3,0x23,
	0xc7,0x18,0xf3,0x23,0x05,0xe1,0xd0,0x1c,
	0xd0,0x40,0x60,0x40,0xd0,0x40,0x05,0x65,
	0x60,0x60,0xc7,0x15,0xf3,0x1c,0xc0,0x16,
	0x10,0x20,0xe7,0x00,0x00,0x24,0xd0,0x2c,
	0x30,0x16,0xe7,0x00,0x04,0xeb,0xd0,0x50,
	0x65,0x41,0xf3,0x15,0xd0,0x00,0x04,0xee,
	0xd0,0x6c,0x60,0x01,0x00,0x2a,0xd0,0x60,
	0xd0,0x04,0x60,0x01,0xd0,0x00,0x04,0xef,
	0x60,0x10,0xd0,0x00,0x04,0xef,0xd0,0x60,
	0x60,0x01,0x04,0xef,0xd0,0x64,0x60,0x01,
	0x04,0xef,0xd0,0x68,0x60,0x01,0x04,0xef,
	0xd0,0x6c,0x60,0x01,0x04,0xeb,0xd0,0x68,
	0x60,0x01,0x04,0xeb,0xd0,0x60,0x60,0x01,
	0x04,0xeb,0xd0,0x64,0x60,0x01,0x04,0xed,
	0xd0,0x48,0x60,0x01,0x04,0xee,0xd0,0x50,
	0x60,0x01,0xd0,0x02,0x05,0x26,0xd0,0x74,
	0x60,0x01,0x04,0xea,0xd0,0x00,0x70,0x40,
	0x10,0x62,0xf8,0x58,0x07,0x99,0xf0,0xed,
	0x05,0x25,0xd0,0x10,0x70,0x00,0x05,0x25,
	0xd0,0x54,0x10,0x20,0xe4,0x63,0x60,0x01,
	0xe0,0x66,0xd0,0x8a,0x20,0x80,0x60,0x81,
	0x0b,0x9d,0x10,0x20,0xe8,0x6a,0x07,0x9d,
	0x05,0x25,0xd0,0x0c,0xd0,0x40,0x60,0x40,
	0x01,0x46,0x00,0x20,0xd0,0x4c,0x05,0x25,
	0x60,0x64,0x00,0xc6,0xd0,0x40,0x00,0x2b,
	0xd0,0x28,0x60,0x40,0x00,0x2b,0xd0,0x2c,
	0x60,0x40,0x00,0x2b,0xd0,0x24,0x60,0x40,
	0x00,0x2b,0xd0,0x38,0x60,0x40,0x05,0x6e,
	0xd0,0x34,0x60,0x40,0x05,0x6e,0xd0,0x2c,
	0x60,0x40,0x05,0x27,0xd0,0x10,0x60,0x40,
	0x05,0x27,0xd0,0x00,0x60,0x40,0xd0,0x41,
	0x05,0x62,0xd0,0x04,0x60,0x40,0x00,0x6e,
	0xdb,0xf0,0x00,0x62,0xdc,0x1b,0x00,0x6e,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x04,0xea,0xd0,0x00,0x70,0x00,
	0x10,0x22,0xe8,0xa3,0x10,0x24,0xe8,0xa3,
	0xe0,0xbc,0x06,0xe3,0xd0,0x58,0x65,0xc1,
	0x06,0xe3,0xd0,0x5c,0x65,0xc1,0xd0,0x00,
	0x06,0xe3,0xd0,0x50,0x60,0x01,0x06,0xe3,
	0xd0,0x60,0x66,0x01,0xd8,0x00,0x15,0x61,
	0xe8,0xb4,0x04,0x18,0x00,0x24,0xd0,0x70,
	0xa0,0x76,0x80,0x3f,0xa8,0x34,0x02,0x46,
	0xd6,0xc1,0x02,0x06,0x15,0x61,0xe8,0xc5,
	0xd0,0x40,0x05,0x63,0xd0,0x14,0x60,0x40,
	0x05,0x63,0xd0,0x10,0x60,0x40,0x06,0xe5,
	0xd0,0x1c,0x01,0x46,0x78,0x00,0x04,0x54,
	0x68,0x00,0x00,0xc6,0x04,0xea,0xd0,0x00,
	0x71,0x00,0x11,0x23,0xf8,0xe7,0x04,0xed,
	0xd0,0x24,0xd0,0x40,0x60,0x40,0xd0,0x03,
	0x04,0xee,0xd0,0x9c,0x70,0x42,0x60,0x01,
	0x00,0x2a,0xd0,0x68,0x60,0x01,0xd0,0x01,
	0x04,0xee,0x60,0x2c,0x83,0x24,0x89,0x9f,
	0x80,0x3f,0x80,0x3f,0xd0,0x41,0x07,0x21,
	0x60,0x50,0x00,0xa6,0xd0,0x78,0xd0,0x12,
	0x00,0x63,0xd7,0xcc,0x00,0x05,0x01,0xa7,
	0xd0,0x28,0x01,0xa7,0xd0,0x60,0xc0,0xc0,
	0x60,0x01,0x01,0xa7,0xd0,0x64,0xc1,0x01,
	0x60,0x01,0x00,0x20,0xd0,0x88,0xd1,0x41,
	0x61,0x43,0xb0,0xfc,0xd0,0x40,0x60,0x43,
	0xb0,0xfc,0xb0,0x81,0xf8,0xf9,0x07,0xc5,
	0x00,0xef,0xd0,0x3c,0x01,0x46,0x59,0x80,
	0x39,0x80,0x00,0x24,0xd0,0x14,0x59,0x80,
	0x00,0xc6,0x07,0xc5,0x00,0x20,0xd0,0x01,
	0x00,0x2a,0x60,0x20,0xd0,0x40,0x00,0x2b,
	0xd0,0x08,0x60,0x40,0xb0,0x3c,0x00,0x2c,
	0xd0,0xa0,0x30,0x80,0xf4,0x07,0x0b,0x93,
	0xd0,0x00,0x04,0xef,0x60,0x10,0xd0,0x00,
	0x05,0x65,0x60,0x20,0x04,0xef,0x60,0x20,
	0x04,0xef,0x60,0x24,0x04,0xef,0x60,0x28,
	0x04,0xef,0x60,0x2c,0x04,0xee,0x60,0x2c,
	0x04,0xeb,0x60,0x28,0x04,0xeb,0x60,0x20,
	0x04,0xeb,0x60,0x24,0x04,0xed,0x60,0x08,
	0x04,0xed,0x60,0x0c,0x04,0xee,0x60,0x10,
	0x00,0x22,0x60,0x20,0xd0,0x08,0x04,0xee,
	0x60,0x04,0xd0,0x02,0x05,0x26,0x60,0x34,
	0x05,0x20,0x70,0x50,0x10,0x60,0xe8,0x72,
	0xd0,0x40,0x05,0x20,0x60,0x50,0x05,0x20,
	0x60,0x5c,0x05,0x20,0x60,0x68,0x05,0x20,
	0x60,0x6c,0x00,0x32,0xd0,0x01,0xa0,0x38,
	0x80,0x3f,0x05,0x20,0x60,0x74,0x05,0x20,
	0x60,0x78,0x05,0x20,0x60,0x7c,0x05,0x21,
	0x60,0x44,0x00,0x32,0xd0,0x00,0xa0,0x38,
	0x80,0x3f,0x05,0x21,0x70,0x80,0x05,0x21,
	0x60,0x40,0x10,0xa0,0xe8,0x6b,0x10,0xa1,
	0xe8,0x6d,0x10,0xa2,0xe8,0x6f,0x10,0xa3,
	0xe8,0x6b,0x10,0xa4,0xe8,0x6d,0x10,0xa5,
	0xe8,0x6f,0x10,0xa6,0xe8,0x6b,0x10,0xa7,
	0xe8,0x6d,0x10,0xa8,0xe8,0x6f,0x10,0xa9,
	0xe8,0x6b,0x10,0xaa,0xe8,0x6d,0x10,0xab,
	0xe8,0x6f,0xd0,0x80,0xe0,0x70,0xd0,0x81,
	0xe0,0x70,0xd0,0x82,0x00,0x22,0x60,0x84,
	0x00,0x6e,0xd0,0x38,0x04,0xeb,0x60,0x08,
	0x00,0x62,0xd0,0x00,0x04,0xeb,0x60,0x0c,
	0x00,0x67,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0xd0,0x02,0x05,0xaa,
	0x60,0x38,0x00,0xeb,0xd0,0x08,0x04,0xe9,
	0x60,0x0c,0x04,0xe9,0x60,0x08,0xd0,0x00,
	0x00,0x21,0x60,0x00,0x00,0x2a,0x60,0x2c,
	0x00,0x28,0x60,0x0c,0x04,0xee,0x60,0x18,
	0x04,0xee,0x60,0x1c,0x04,0xee,0x60,0x20,
	0x04,0xee,0x60,0x24,0x00,0x23,0xd8,0x20,
	0x04,0xea,0x68,0x20,0x02,0x46,0xc6,0xa0,
	0x02,0x06,0x04,0xea,0x78,0x28,0x18,0x22,
	0xe8,0xab,0x18,0x24,0xe8,0xa8,0x00,0x23,
	0xd8,0x00,0xe0,0xad,0x00,0x22,0xd8,0x20,
	0xe0,0xad,0x00,0x22,0xd8,0x00,0x04,0xea,
	0x68,0x24,0x02,0x46,0xc6,0x60,0x02,0x06,
	0x02,0x86,0xd7,0x60,0xd8,0x20,0x02,0x06,
	0x04,0xea,0x68,0x34,0x00,0x28,0x70,0x30,
	0x00,0x2a,0x60,0x00,0x04,0xea,0x70,0x00,
	0x10,0x22,0xe8,0xc4,0x10,0x24,0xe8,0xc4,
	0xf0,0xcb,0xe0,0xd4,0xf0,0xc6,0xe0,0xd4,
	0x83,0xe2,0x98,0x23,0x04,0x1d,0xa8,0x23,
	0x07,0xc5,0x00,0xe7,0x78,0x28,0x00,0x14,
	0xe8,0xc6,0x83,0xe2,0x98,0x23,0x08,0x1d,
	0xa8,0x23,0x07,0xc5,0xd0,0x03,0x04,0xee,
	0x60,0x14,0x00,0x6e,0xdb,0xf8,0x00,0x63,
	0xdc,0x21,0x00,0x6e,0xd0,0x40,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x20,
	0xd0,0x08,0xa0,0x1c,0x80,0x3f,0x00,0x21,
	0xd0,0x01,0xa0,0x38,0x80,0x3f,0x00,0x20,
	0xd0,0x02,0x00,0x2a,0x60,0x20,0x06,0xe5,
	0xd0,0x1c,0x78,0x00,0x04,0x19,0x68,0x00,
	0xd0,0x04,0x04,0xee,0x60,0x34,0x00,0x2a,
	0x60,0x28,0x00,0xa6,0xd0,0x70,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x04,0xea,0xd0,0x00,0x70,0x00,0x10,0x23,
	0xf8,0x06,0xe3,0x00,0x00,0x21,0xd0,0xb8,
	0x00,0x2a,0xd0,0x60,0x70,0x01,0xc2,0xc0,
	0x40,0x02,0xeb,0x00,0x04,0xeb,0xd0,0x68,
	0x70,0x41,0x10,0x60,0xfb,0x00,0x05,0xe6,
	0xd0,0x38,0x70,0x00,0x10,0x20,0xf8,0x13,
	0x05,0xe6,0xd0,0x3c,0x70,0x00,0x04,0xed,
	0xd0,0x5c,0x60,0x01,0xd0,0x40,0x05,0x65,
	0x60,0x60,0x04,0xee,0xd0,0x50,0x60,0x01,
	0xf3,0x15,0x04,0xee,0xd0,0x30,0xd0,0x40,
	0x60,0x40,0x04,0xea,0xd0,0x00,0x70,0x00,
	0xb0,0x02,0xf8,0x96,0x04,0xea,0xd0,0x04,
	0x70,0x00,0x10,0x21,0xf8,0x96,0x00,0x2a,
	0xd0,0x60,0x70,0x81,0x00,0x20,0xd0,0x60,
	0x40,0x42,0xf8,0x96,0x00,0x20,0xd0,0x50,
	0x40,0x42,0xf8,0x96,0x00,0xa4,0xd8,0x30,
	0xa8,0x36,0x80,0x3f,0x98,0x34,0x00,0x14,
	0xf8,0x4c,0xd8,0x00,0x00,0x24,0xd0,0x30,
	0xa0,0x36,0x80,0x3f,0xa8,0x34,0xe0,0x96,
	0x00,0x21,0xd0,0x40,0x40,0x42,0xf8,0x76,
	0x06,0xe4,0xd0,0x94,0xd0,0xc0,0x60,0xc2,
	0x00,0x06,0x70,0xc2,0x10,0xe0,0xe8,0x55,
	0x06,0xe3,0xd0,0x10,0x70,0x40,0x30,0x43,
	0xec,0x76,0x00,0x76,0xd8,0x41,0xa0,0x38,
	0x80,0x3f,0x05,0xe8,0xd0,0x00,0x90,0x61,
	0x80,0x3f,0x40,0x40,0xf8,0x63,0x80,0x1d,
	0x80,0x3f,0x00,0xa0,0xd0,0x50,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf2,0xc4,
	0xf3,0x7a,0xf1,0xb5,0x00,0x76,0xd8,0x40,
	0xa0,0x38,0x80,0x3f,0x01,0x46,0x02,0x46,
	0x00,0x20,0xd6,0xc1,0x02,0x06,0x06,0xe3,
	0xd0,0x10,0x70,0xc0,0x06,0xe3,0xd0,0x1c,
	0x60,0xc0,0x00,0x06,0xd8,0x00,0x00,0x24,
	0xd0,0x30,0xa0,0x36,0x80,0x3f,0xa8,0x34,
	0x00,0xc6,0x00,0x2a,0xd0,0x60,0x70,0x81,
	0x00,0x21,0xd0,0x40,0x40,0x42,0xf8,0x96,
	0x02,0x06,0xf1,0x97,0x02,0x46,0x16,0xe2,
	0xf8,0x90,0x02,0x06,0xd0,0x40,0x05,0xe1,
	0x60,0x5c,0xd0,0x00,0x04,0xee,0xd0,0x6c,
	0x60,0x01,0x04,0xef,0xd0,0x10,0x70,0x40,
	0x10,0x60,0xe8,0xb0,0xd0,0x40,0x60,0x40,
	0x05,0x25,0xd0,0x38,0x70,0x80,0x05,0x25,
	0xd0,0x74,0x70,0x41,0x60,0x40,0x05,0x25,
	0xd0,0x74,0x60,0x81,0xf1,0xb5,0xe0,0xcb,
	0x00,0x20,0xd0,0x4c,0x05,0x25,0x60,0x64,
	0x07,0x51,0x0b,0x52,0xf1,0xcd,0x05,0x25,
	0xd0,0x10,0x70,0x00,0x05,0x25,0xd0,0x54,
	0x10,0x20,0xe4,0xc0,0x60,0x01,0xe0,0xc3,
	0xd0,0x8a,0x20,0x80,0x60,0x81,0x0b,0x9d,
	0x10,0x20,0xe8,0xc7,0x07,0x9d,0x05,0x25,
	0xd0,0x0c,0xd0,0x40,0x60,0x40,0x04,0xef,
	0xd0,0x20,0x70,0x40,0x10,0x60,0xe8,0xe9,
	0x04,0xef,0xd0,0x18,0x70,0x40,0x10,0x60,
	0xf8,0xe3,0x00,0xa0,0xd0,0x48,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf2,0xb0,
	0x00,0xa0,0xd0,0x40,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0xf2,0xb0,0x04,0xef,
	0xd0,0x24,0x70,0x40,0x10,0x61,0xe8,0xe9,
	0xf1,0xb5,0xd0,0x40,0x04,0xef,0xd0,0x20,
	0x60,0x40,0x04,0xef,0xd0,0x24,0x60,0x40,
	0x04,0xef,0xd0,0x28,0x60,0x40,0x04,0xef,
	0xd0,0x2c,0x60,0x40,0x05,0x60,0xd0,0x14,
	0xd0,0x45,0x60,0x40,0x05,0x26,0xd0,0x38,
	0x78,0x00,0x08,0x11,0x68,0x00,0x00,0x2a,
	0xd0,0x20,0xd0,0x44,0x60,0x40,0x00,0xa0,
	0xd0,0x48,0x00,0x20,0xd7,0xd2,0x17,0xe0,
	0x07,0xc4,0xf2,0xf6,0x00,0x30,0xd0,0x40,
	0x01,0x46,0xa0,0x38,0x80,0x3f,0x00,0xc6,
	0x04,0xea,0xd0,0x40,0x70,0x81,0x10,0xa2,
	0xe9,0x1c,0x00,0xa0,0xd0,0x78,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf3,0x31,
	0x06,0xe5,0xd0,0x1c,0x01,0x46,0x78,0x00,
	0x04,0x54,0x68,0x00,0x00,0xc6,0x00,0x20,
	0xd0,0x60,0x30,0x4b,0xe9,0x91,0x00,0x20,
	0xd0,0x48,0x30,0x4b,0xf9,0x35,0x05,0x29,
	0xd0,0x04,0x70,0x40,0x10,0x60,0xf9,0x35,
	0x05,0x6e,0xd0,0x30,0x70,0x40,0x10,0x64,
	0xe9,0x55,0xd0,0x41,0x05,0x29,0xd0,0x10,
	0x60,0x40,0x05,0x29,0xd0,0x14,0x60,0x40,
	0x05,0x2e,0xd0,0x0c,0x73,0x00,0xb0,0x3c,
	0x73,0x40,0x00,0x06,0x01,0x46,0xf1,0xa1,
	0xa3,0x42,0xa3,0x03,0x07,0x99,0x00,0xc6,
	0x05,0x28,0xd0,0x14,0x70,0x40,0x05,0x29,
	0xd0,0x1c,0x60,0x40,0x05,0x26,0xd0,0x38,
	0x78,0x00,0x08,0x11,0x04,0x18,0x68,0x00,
	0xe1,0x77,0x05,0x26,0xd0,0x38,0x78,0x00,
	0x08,0x11,0x08,0x18,0x08,0x17,0x68,0x00,
	0x05,0x28,0xd0,0x30,0x00,0x20,0xd0,0x54,
	0x60,0x40,0xd0,0x40,0x05,0x29,0xd0,0x10,
	0x60,0x40,0x05,0x29,0xd0,0x14,0x60,0x40,
	0xd0,0x41,0x05,0x62,0xd0,0x04,0x60,0x40,
	0x05,0x29,0xd0,0x08,0x73,0x00,0xb0,0x3c,
	0x73,0x40,0x00,0x06,0x01,0x46,0xf1,0xa1,
	0xa3,0x42,0xa3,0x03,0x00,0xc6,0x05,0x26,
	0xd0,0x7c,0x70,0x41,0x10,0x60,0xe9,0x80,
	0xd0,0x40,0x04,0xed,0xd0,0x1c,0x60,0x40,
	0xd0,0x42,0x05,0x26,0x60,0x74,0x05,0x60,
	0x60,0x74,0x01,0x46,0x05,0xe6,0x70,0x74,
	0x10,0x62,0xe5,0x90,0xd0,0x42,0x05,0xe6,
	0x60,0x70,0x05,0xe6,0x60,0x74,0x0b,0xd4,
	0x00,0xc6,0x00,0xa6,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xef,
	0xd0,0x3c,0x01,0x46,0x59,0x80,0x39,0x80,
	0x00,0x24,0xd0,0x14,0x59,0x80,0x00,0xc6,
	0x07,0xc5,0xd0,0x42,0x10,0x44,0xc0,0x8d,
	0x10,0x92,0xd0,0xcf,0x40,0x83,0xd0,0xc1,
	0x50,0x83,0x20,0x42,0x10,0x4f,0x10,0x41,
	0x07,0xef,0xd0,0xbf,0x43,0x42,0x13,0x41,
	0x23,0x41,0x53,0x43,0x13,0x01,0x53,0x03,
	0x07,0xc5,0x05,0x27,0xd0,0x6c,0x00,0xac,
	0xd0,0x38,0x60,0x01,0x05,0x26,0xd0,0x60,
	0x00,0x20,0xd0,0x00,0x60,0x01,0x05,0x60,
	0xd0,0x54,0x00,0x20,0xd0,0x05,0x60,0x01,
	0x04,0xef,0xd0,0x14,0xd0,0x40,0x60,0x40,
	0x05,0x27,0xd0,0x24,0xd0,0x41,0x60,0x40,
	0x07,0xc5,0x01,0xa7,0xd0,0x28,0x01,0xa7,
	0xd0,0x60,0xc0,0xc0,0x60,0x01,0x01,0xa7,
	0xd0,0x64,0xc1,0x01,0x60,0x01,0x00,0x20,
	0xd0,0x88,0xd1,0x41,0x61,0x43,0xb0,0xfc,
	0xd0,0x40,0x60,0x43,0xb0,0xfc,0xb0,0x81,
	0xf9,0xd9,0x07,0xc5,0x04,0xea,0xd1,0xc0,
	0x72,0xc7,0x12,0xe3,0xf8,0x06,0xe3,0x00,
	0x15,0xe0,0xe7,0x00,0xd3,0xc3,0x13,0xca,
	0x13,0xcc,0xc2,0x0f,0x42,0x16,0xfb,0x00,
	0xc3,0x57,0xb3,0x41,0x13,0x42,0x23,0x56,
	0xc2,0x0d,0x0f,0xff,0xdf,0xff,0x32,0x00,
	0xef,0x00,0xd3,0x80,0xc2,0x0f,0x42,0x15,
	0x12,0x20,0xf8,0x31,0xc3,0x17,0xb3,0x01,
	0x13,0x02,0x23,0x15,0xc2,0x0c,0x0f,0xff,
	0xdf,0xff,0x32,0x00,0xef,0x00,0xd4,0x00,
	0xc2,0x16,0x32,0x15,0xfc,0x4e,0xc2,0x0c,
	0x32,0x16,0xe4,0x4e,0x04,0xed,0xd1,0xcc,
	0xd3,0x82,0x63,0x87,0xe0,0x4e,0xc2,0x0f,
	0x42,0x15,0x12,0x16,0x12,0x14,0x12,0x21,
	0xfb,0x00,0x00,0x21,0xd1,0xe0,0x72,0x07,
	0x12,0x1a,0x00,0x23,0xd2,0x7f,0x42,0x09,
	0x12,0x0f,0xb2,0x01,0xc2,0x57,0xb2,0x41,
	0x12,0x42,0x32,0x09,0x0f,0xef,0xd2,0x7f,
	0x12,0x46,0x0f,0xef,0xd2,0xbf,0x52,0x4a,
	0x42,0x55,0x32,0x09,0xe7,0x00,0xd4,0x01,
	0xc2,0x15,0xc2,0x56,0xc2,0x8d,0x13,0xa0,
	0xe8,0x56,0xc2,0x0c,0xc2,0x4d,0xc2,0x96,
	0x04,0xed,0xd1,0xd0,0xb2,0x3f,0x62,0x07,
	0x04,0xed,0xd1,0xd4,0xb2,0x7e,0x62,0x47,
	0x04,0xed,0xd1,0xd8,0xb2,0xbe,0x62,0x87,
	0x04,0xed,0xd1,0xcc,0xc8,0x0e,0x04,0x10,
	0x68,0x07,0x04,0xee,0xd1,0xe8,0x66,0xc7,
	0x00,0xa1,0xdb,0xc8,0x00,0x60,0xdc,0x00,
	0xe0,0xa4,0x04,0xed,0xd1,0xcc,0x73,0x87,
	0x13,0x9f,0x04,0xed,0xd1,0xd0,0x71,0xc7,
	0x04,0xed,0xd2,0x14,0x72,0x08,0x00,0x27,
	0xd2,0x64,0x72,0x49,0x04,0xed,0xd2,0xd8,
	0x72,0xcb,0x01,0x46,0x72,0x87,0x13,0xa0,
	0xe8,0x85,0xb1,0xc4,0xe0,0x86,0xb1,0xfc,
	0x11,0xe0,0x62,0x88,0x00,0xc6,0x13,0xa0,
	0xe8,0x8d,0xb2,0x04,0xe0,0x8e,0xb2,0x3c,
	0xc2,0x8b,0x32,0x88,0x13,0xa0,0xe8,0x95,
	0x12,0xa0,0xec,0x9a,0xe0,0x97,0x12,0xa0,
	0xe4,0x9a,0xb2,0x41,0xec,0x7f,0xe0,0x9e,
	0x04,0xed,0xd2,0x4c,0xd2,0x80,0x62,0x89,
	0x04,0xed,0xd2,0x50,0x61,0xc9,0x04,0xed,
	0xd2,0x54,0x62,0x09,0x00,0x20,0xd0,0x12,
	0x10,0x20,0xc0,0x6f,0xc7,0xf0,0x00,0x06,
	0x80,0x3f,0x00,0x05,0x04,0xea,0xd0,0x00,
	0x70,0x00,0x10,0x23,0xf8,0x06,0xe3,0x00,
	0x10,0x22,0xf8,0x0c,0x15,0x60,0xe8,0x0c,
	0x15,0x63,0xfb,0x00,0x00,0x2a,0xd0,0x20,
	0x70,0x40,0x00,0x2f,0xd0,0x3e,0x40,0x40,
	0xeb,0x00,0x04,0xea,0xd0,0x00,0x71,0x40,
	0x11,0x60,0xe8,0x1b,0x11,0x64,0xe8,0x1e,
	0xe0,0x21,0xd0,0xc0,0xd1,0x07,0xe0,0x23,
	0xd0,0xc2,0xd1,0x01,0xe0,0x23,0xd0,0xc2,
	0xd1,0x00,0xd1,0x80,0xc8,0x16,0x00,0x57,
	0xe8,0x2b,0xd1,0x81,0x01,0xef,0xd0,0x3f,
	0x45,0x80,0xca,0x16,0x1a,0x20,0xe7,0x00,
	0x15,0x60,0xf8,0x3d,0x51,0x86,0xf8,0x7e,
	0xc8,0x28,0x0c,0x13,0xfc,0x39,0x0f,0xef,
	0xd0,0x3f,0x30,0x20,0xfb,0x00,0x00,0x23,
	0xd0,0x20,0x2a,0x00,0xe0,0x7e,0x04,0xea,
	0xd0,0x28,0x72,0xc0,0x15,0x62,0xe8,0x47,
	0x15,0x63,0xe8,0x4b,0x15,0x64,0xe8,0x4f,
	0xe0,0x61,0x00,0x22,0xd0,0x40,0xd2,0x06,
	0xe0,0x52,0x00,0x23,0xd0,0x40,0xd2,0x02,
	0xe0,0x52,0x00,0x22,0xd0,0x60,0xd2,0x02,
	0x04,0xee,0xd0,0x30,0xd0,0x80,0x60,0x80,
	0x51,0x86,0xf8,0x90,0xc8,0x28,0x0c,0x14,
	0xfc,0x5f,0x0f,0xef,0xd0,0x3f,0x30,0x20,
	0xfb,0x00,0x2a,0x01,0xe0,0x90,0x15,0x61,
	0xf8,0x71,0x11,0x60,0xfb,0x00,0x51,0x86,
	0xf8,0xe1,0x1a,0x3f,0xfc,0x6d,0x0f,0xef,
	0xd0,0x3f,0x30,0x20,0xfb,0x00,0x00,0x20,
	0xd0,0x20,0x2a,0x00,0xe0,0xe1,0x15,0x65,
	0xfb,0x00,0x11,0x64,0xfb,0x00,0x51,0x86,
	0xf8,0xe1,0x1a,0x3f,0xfc,0x7d,0x0f,0xef,
	0xd0,0x3f,0x30,0x20,0xfb,0x00,0xe0,0xe1,
	0x01,0x46,0x02,0x46,0xc6,0xa8,0x02,0x06,
	0x04,0xea,0xd0,0x20,0x6a,0x00,0x00,0xc6,
	0x05,0x26,0xd0,0x20,0xd0,0x40,0x60,0x40,
	0x05,0x27,0xd0,0x6c,0x00,0xac,0xd0,0x38,
	0x60,0x01,0xe0,0xf1,0xc3,0x15,0xc0,0x0b,
	0x30,0x15,0xf8,0x99,0x04,0xea,0xd0,0x24,
	0x70,0x00,0x30,0x28,0xe8,0xf1,0xd7,0xd2,
	0x00,0xa0,0xd0,0x48,0x07,0xc4,0xf2,0xb0,
	0x01,0x46,0xc0,0x0b,0x30,0x0c,0xe8,0xa8,
	0xd0,0x46,0x05,0x6e,0x60,0x54,0x02,0x46,
	0xd5,0x80,0x02,0x06,0x03,0x9e,0xe8,0xab,
	0x0b,0x52,0x00,0xc6,0x04,0xea,0xd0,0x24,
	0x6a,0x00,0x04,0xea,0xd0,0x28,0x63,0x00,
	0x04,0xea,0xd0,0x2c,0x62,0x00,0xd7,0xd2,
	0x00,0x6f,0xd0,0x70,0x07,0xc4,0xf2,0xb0,
	0x00,0x23,0xd0,0x7f,0x05,0x6c,0xd0,0x00,
	0x60,0x40,0xf1,0x3e,0x04,0xeb,0xd0,0x08,
	0x00,0x6f,0xd0,0x60,0x60,0x40,0x04,0xeb,
	0xd0,0x0c,0x00,0x63,0xd0,0x50,0x60,0x40,
	0x00,0x67,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0xd7,0xd2,0x00,0xa0,
	0xd0,0x40,0x07,0xc4,0xf2,0xb0,0xd7,0xd2,
	0x00,0xa0,0xd0,0x48,0x07,0xc4,0xf2,0xf6,
	0x05,0x6a,0xd0,0x38,0x70,0x40,0x10,0x60,
	0xe8,0xe0,0xf1,0x06,0xe0,0xf1,0x04,0xea,
	0xd0,0x34,0x70,0x00,0x30,0x28,0xe8,0xf1,
	0x00,0xa0,0xd0,0x78,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0xf3,0x00,0x04,0xea,
	0xd0,0x34,0x6a,0x00,0xf3,0x31,0xd0,0x04,
	0x60,0x1b,0x00,0x2a,0xd0,0x68,0x60,0x01,
	0x00,0x2a,0xd0,0x64,0x00,0x20,0xd0,0x31,
	0x60,0x01,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x90,0x61,
	0x80,0x3f,0x40,0x40,0xf9,0x01,0x07,0xc5,
	0x03,0x20,0xd0,0x00,0x10,0x0a,0xa0,0x0a,
	0x80,0x3f,0x84,0x05,0x80,0x3f,0xa0,0x06,
	0x80,0x3f,0x03,0x20,0xd0,0x00,0x10,0x0a,
	0xa0,0x27,0x80,0x3f,0x80,0x17,0x80,0x3f,
	0x80,0x0a,0x80,0x3f,0x84,0x05,0x80,0x3f,
	0x80,0x06,0x80,0x3f,0x12,0xe2,0xf9,0x21,
	0x83,0x85,0x80,0x3f,0x80,0x06,0x8b,0xe9,
	0x80,0x2a,0x84,0x29,0x02,0xb0,0xd0,0x00,
	0xa0,0x2a,0x80,0x27,0x01,0x20,0xd0,0x00,
	0xa0,0x29,0x00,0x39,0xd8,0x00,0xa0,0x2a,
	0x80,0x2b,0x00,0x39,0xd0,0x00,0xa0,0x2a,
	0x80,0x6b,0x86,0x45,0x80,0x3f,0x12,0xe2,
	0xf9,0x39,0x84,0x86,0x80,0x3f,0x84,0x46,
	0x80,0x3f,0x80,0xe4,0x80,0x3f,0x07,0xc5,
	0x01,0xa7,0xd0,0x28,0x01,0xa7,0xd0,0x60,
	0xc0,0xc0,0x60,0x01,0x01,0xa7,0xd0,0x64,
	0xc1,0x01,0x60,0x01,0x00,0x20,0xd0,0x88,
	0xd1,0x41,0x61,0x43,0xb0,0xfc,0xd0,0x40,
	0x60,0x43,0xb0,0xfc,0xb0,0x81,0xf9,0x4a,
	0x07,0xc5,0x84,0x22,0x02,0x38,0xd0,0x00,
	0xa0,0x23,0x00,0x28,0x70,0xf4,0x80,0x22,
	0xa0,0xe3,0x00,0x28,0x71,0x30,0x81,0x22,
	0xa1,0x23,0xc0,0x03,0x30,0x04,0x05,0x6d,
	0x60,0x00,0x04,0xea,0x70,0x00,0x10,0x22,
	0xe9,0x6e,0x10,0x24,0xe9,0x83,0x00,0xf5,
	0xd0,0x00,0x05,0x6a,0x70,0x60,0xe1,0x99,
	0x04,0xeb,0x70,0x10,0x10,0x21,0xe9,0x7e,
	0x01,0x46,0x02,0x46,0xc8,0x1a,0x02,0x06,
	0x00,0xc6,0x00,0x23,0xd0,0x60,0x0c,0x11,
	0xfd,0x7e,0x00,0xf0,0xd0,0x00,0xe1,0x80,
	0x0c,0x20,0xd0,0x00,0x00,0x28,0xd0,0x40,
	0xe1,0x99,0x04,0xeb,0xd0,0x10,0x70,0x00,
	0x10,0x21,0xe9,0x94,0x02,0x46,0xc8,0x1a,
	0x02,0x06,0x00,0x23,0xd0,0x60,0x0c,0x11,
	0xfd,0x94,0x00,0xf0,0xd0,0x00,0x00,0x28,
	0xd0,0x40,0xe1,0x99,0x00,0xf5,0xd0,0x00,
	0x04,0x20,0xd0,0x40,0x10,0x42,0x05,0x6a,
	0x60,0x54,0x05,0x6a,0x60,0x10,0x05,0x6a,
	0x60,0x0c,0x80,0xe2,0xa1,0x23,0x83,0x22,
	0xa1,0x23,0xd0,0x00,0x00,0x20,0xd0,0x90,
	0x30,0x02,0x10,0x02,0x80,0x62,0xa0,0x23,
	0x30,0xc4,0x00,0x27,0x70,0x3c,0x30,0xc0,
	0x80,0xa2,0xa0,0xe3,0xd0,0x40,0x05,0x6d,
	0x60,0x48,0x05,0x6c,0x60,0x64,0x05,0x6c,
	0x60,0x68,0x05,0x6c,0x60,0x70,0x00,0x2d,
	0x70,0x00,0x05,0x67,0x60,0x18,0x00,0x2d,
	0x70,0x20,0x05,0x67,0x60,0x1c,0x00,0x2e,
	0x70,0x00,0x05,0x67,0x60,0x20,0x00,0x28,
	0x70,0x1c,0x10,0x27,0xe9,0xcb,0x10,0x28,
	0xf9,0xd3,0x05,0x65,0x70,0x30,0x05,0x67,
	0x60,0x24,0x05,0x65,0x70,0x34,0x05,0x67,
	0x60,0x28,0x05,0x67,0xd0,0x00,0x05,0x66,
	0x60,0x38,0x05,0x66,0x60,0x3c,0xd0,0x00,
	0x05,0x65,0x60,0x24,0x05,0x69,0x60,0x10,
	0x05,0x68,0x60,0x14,0x05,0x69,0x60,0x08,
	0x05,0x69,0x60,0x04,0x05,0x68,0x60,0x1c,
	0x05,0x66,0x60,0x08,0x05,0x66,0x60,0x0c,
	0x05,0x65,0x60,0x28,0x05,0x66,0x60,0x18,
	0x05,0x67,0x60,0x00,0x05,0x67,0x60,0x04,
	0x05,0x67,0x60,0x08,0x05,0x67,0x60,0x0c,
	0x05,0x67,0x60,0x10,0xd0,0x02,0x05,0x67,
	0x60,0x14,0x00,0x28,0x70,0x38,0x05,0x67,
	0x60,0x2c,0x00,0x2f,0xd0,0x70,0x20,0x01,
	0x05,0x67,0x60,0x30,0x00,0x28,0x70,0x3c,
	0x05,0x67,0x60,0x34,0x07,0xc5,0x00,0xef,
	0xd0,0x3c,0x01,0x46,0x59,0x80,0x39,0x80,
	0x00,0x24,0xd0,0x14,0x59,0x80,0x00,0xc6,
	0x07,0xc5,0x00,0x00,0x04,0xea,0xd1,0x40,
	0x71,0x45,0x11,0x63,0xf8,0x06,0xe3,0x00,
	0x00,0x2a,0xd1,0x60,0x71,0x85,0x00,0x20,
	0xd1,0x42,0x41,0x85,0xeb,0x00,0x00,0x22,
	0x7a,0x1c,0x00,0x20,0xd1,0x40,0x05,0x22,
	0x61,0x58,0x15,0x60,0xf4,0x4b,0x00,0x20,
	0xd1,0x41,0x05,0x22,0x61,0x58,0xc5,0x45,
	0x01,0x46,0x00,0x22,0x71,0x98,0x00,0x22,
	0x61,0x9c,0xd1,0x90,0x07,0xa4,0x61,0xa8,
	0x05,0xe6,0x71,0xbc,0x05,0xe6,0x61,0xb8,
	0x00,0xc6,0x05,0xe6,0x71,0xb8,0x11,0xa0,
	0xf8,0x27,0x04,0xe8,0x74,0xe4,0xc5,0x00,
	0x02,0x77,0xde,0x00,0xc1,0x80,0x01,0xb5,
	0xd4,0x00,0xc1,0xc0,0x05,0x26,0x72,0x14,
	0x00,0x2d,0x64,0xe0,0x04,0xeb,0x64,0xe0,
	0x34,0xc6,0x00,0x2d,0x64,0xc0,0x04,0xe8,
	0x71,0xa8,0x00,0x2e,0x61,0x80,0x05,0x26,
	0x61,0x84,0x07,0x27,0x61,0xec,0x07,0x27,
	0x61,0xf0,0x07,0x27,0x62,0x34,0xc0,0x14,
	0xe0,0x6d,0x04,0xea,0x71,0x80,0x11,0xa2,
	0xf8,0x55,0xc7,0x1a,0xf3,0x23,0x15,0x5f,
	0x15,0x9f,0x15,0xdf,0x16,0x1f,0xc7,0x15,
	0xc7,0x56,0xf3,0x24,0xc5,0x5c,0xd1,0x83,
	0x41,0x97,0x11,0xa0,0xe8,0x5e,0xb5,0xfc,
	0x15,0xde,0x15,0xc2,0x15,0xe0,0xe7,0x00,
	0x00,0x2b,0xd1,0x50,0x31,0x57,0x31,0x55,
	0xe7,0x00,0x16,0x20,0xe7,0x00,0xc1,0x5e,
	0x31,0x58,0x31,0x56,0xe7,0x00,0xf3,0x15,
	0x04,0xeb,0xd1,0x60,0x73,0x05,0x13,0x20,
	0xf8,0x77,0xf1,0x63,0x04,0xeb,0x61,0x60,
	0xc3,0x05,0x05,0x22,0x71,0x58,0x11,0x60,
	0xe8,0x81,0xd5,0x40,0xd5,0x80,0x00,0x2b,
	0xd5,0xd0,0x00,0x29,0xd6,0x00,0xb3,0x3e,
	0xc1,0x59,0x11,0x50,0x00,0x23,0xd1,0xbf,
	0x41,0x46,0xc2,0x85,0x12,0x88,0x52,0x85,
	0x12,0x88,0x52,0x85,0xc2,0xca,0xd2,0x41,
	0xe0,0xa6,0xc1,0x59,0x0f,0xec,0xd2,0x80,
	0x42,0x85,0xc1,0x8a,0x12,0x98,0x52,0x86,
	0x00,0x23,0xd1,0xbf,0x41,0x85,0xc2,0xc6,
	0x11,0x88,0x52,0xc6,0x11,0x88,0x52,0x86,
	0x04,0xeb,0xd1,0x60,0x73,0x05,0x07,0x27,
	0x70,0x2c,0x23,0x00,0xb3,0x3e,0xd2,0x40,
	0xc1,0x56,0x11,0x5c,0xd1,0x81,0x41,0x85,
	0x11,0xa1,0xe8,0xae,0xd4,0x40,0xe0,0xaf,
	0xd4,0x41,0xc1,0x56,0x21,0x58,0xb1,0x41,
	0x11,0x5c,0xc3,0x85,0xc1,0x56,0x11,0x5c,
	0x33,0x85,0xb3,0xbf,0xc1,0x55,0x11,0x42,
	0x11,0x42,0x23,0x05,0x00,0x2b,0xd1,0x90,
	0x11,0x82,0x11,0x82,0xc1,0x56,0x11,0x5c,
	0x12,0x60,0xf8,0xc5,0x11,0x5f,0xb1,0x41,
	0xe4,0xc9,0x23,0x06,0xe0,0xc5,0xc1,0x56,
	0x11,0x5c,0x11,0x44,0xc3,0xd6,0x33,0xc5,
	0x00,0x20,0xd4,0x0f,0x13,0xa1,0xf8,0xdc,
	0xc4,0x16,0x24,0x18,0xc1,0x50,0x11,0x5c,
	0x11,0x44,0x34,0x05,0xb4,0x01,0x14,0x20,
	0xf4,0xdc,0xd4,0x0f,0xc3,0x4c,0xc1,0x57,
	0x11,0x42,0x11,0x42,0x23,0x45,0xf1,0x33,
	0x12,0x60,0xf8,0xeb,0x14,0x60,0xf8,0xeb,
	0xc1,0x57,0x11,0x42,0x11,0x42,0x33,0x05,
	0xe0,0xf2,0x00,0x2b,0xd1,0x50,0xc1,0x97,
	0x31,0x46,0x11,0x42,0x11,0x42,0x23,0x05,
	0xd3,0xc0,0xb4,0x7f,0xd1,0x81,0x44,0x46,
	0xb3,0x81,0x13,0xa0,0xe8,0xfa,0xe0,0xd0,
	0x12,0x60,0xf8,0x8f,0x00,0xa0,0xd0,0x78,
	0x00,0x20,0xd7,0xd2,0x17,0xe0,0x07,0xc4,
	0xf3,0x00,0x05,0xe6,0xd1,0xb8,0x04,0xeb,
	0xd1,0x60,0x71,0x45,0x61,0x46,0x00,0x2d,
	0xd1,0xc0,0x71,0x87,0x31,0x85,0xe9,0x10,
	0x00,0x2d,0xd1,0xe0,0x00,0x2b,0xd1,0x94,
	0x61,0xc6,0x05,0xe6,0xd1,0xb8,0x71,0x46,
	0x11,0x60,0xf9,0x13,0x00,0xa0,0xd0,0x70,
	0x00,0x20,0xd7,0xd2,0x17,0xe0,0x07,0xc4,
	0xd1,0x50,0x07,0xa4,0xd1,0xa8,0x61,0x46,
	0xd7,0x00,0xd7,0x40,0x01,0x46,0xf3,0x00,
	0x00,0xc6,0x04,0xee,0xd1,0x54,0xd1,0x80,
	0x61,0x85,0x00,0x22,0x6a,0x1c,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xc4,0x9f,0x17,0xe0,0xf1,0x3c,
	0xc1,0x4d,0x31,0x4c,0xed,0x34,0xc7,0xd2,
	0x17,0xe0,0x07,0xc5,0x12,0x60,0xf9,0x43,
	0x14,0x60,0xe9,0x43,0x00,0x20,0xd1,0x60,
	0x23,0x05,0x00,0x20,0xd1,0x4f,0xc1,0x8f,
	0xc1,0xd0,0x11,0xa0,0xed,0x51,0x11,0xe0,
	0xe5,0x51,0x01,0x46,0xa2,0xbc,0xa2,0xfd,
	0x62,0x8c,0x80,0x3f,0x00,0xc6,0x12,0x60,
	0xf9,0x56,0xc8,0x05,0x00,0x10,0xf9,0x57,
	0xb3,0x3c,0xb1,0x81,0xb1,0xc1,0xb1,0x41,
	0xf5,0x47,0x12,0x60,0xf9,0x62,0x14,0x60,
	0xf9,0x62,0x00,0x20,0xd1,0x60,0x23,0x05,
	0x07,0xc5,0x05,0xe6,0xd1,0x78,0x71,0x85,
	0x11,0xa0,0xf9,0x65,0x05,0xe6,0xd1,0x7c,
	0x71,0x45,0x00,0x2d,0xd1,0x80,0x71,0x86,
	0x31,0x85,0xe9,0x77,0x00,0x2d,0xd1,0x40,
	0x71,0x45,0x00,0x2d,0xd1,0xa0,0x71,0x86,
	0xe1,0x7b,0xc1,0x85,0x00,0x2d,0xd1,0x60,
	0x71,0x45,0x07,0xc5,0xca,0x1f,0xd0,0x00,
	0x05,0xa1,0xd0,0x5c,0x60,0x01,0x04,0xea,
	0x70,0x28,0x00,0x2f,0x60,0x30,0x10,0x22,
	0xea,0xe9,0x10,0x23,0xea,0xc0,0x10,0x24,
	0xeb,0x1d,0xe3,0x3a,0xd0,0x40,0x05,0x6f,
	0x60,0x44,0xd0,0x40,0x05,0xa1,0x60,0x50,
	0x00,0xa9,0xd0,0x58,0x05,0x6b,0x60,0x74,
	0x00,0x60,0xd0,0x40,0x05,0x6b,0x60,0x78,
	0xd0,0xc1,0xd1,0x02,0x00,0xa0,0xd1,0x40,
	0x05,0x25,0x70,0x68,0x01,0x28,0xd1,0x80,
	0x21,0x81,0xd1,0xc1,0xd2,0x01,0xd2,0x41,
	0xd2,0x81,0xd2,0xc1,0xd3,0x01,0xd3,0x41,
	0xf3,0x3d,0x0b,0x57,0x05,0x6a,0x70,0x38,
	0x10,0x20,0xea,0xe8,0x86,0x45,0x80,0x3f,
	0x84,0x46,0x80,0x3f,0xe3,0x3a,0x03,0x67,
	0xd0,0x1c,0x00,0x21,0xd0,0x54,0xd8,0x18,
	0xf3,0x54,0x00,0xaa,0xd0,0x68,0x05,0x6b,
	0x60,0x74,0x00,0x60,0xd0,0x40,0x05,0x6b,
	0x60,0x78,0xd0,0x42,0x06,0x23,0x60,0x50,
	0x00,0x22,0xd1,0x40,0xd0,0xc6,0x05,0x6b,
	0x78,0x30,0x18,0x20,0xeb,0x02,0xd0,0xc2,
	0xd1,0x01,0x04,0xa4,0xd1,0x80,0x00,0x25,
	0x78,0x20,0x00,0x12,0xeb,0x0b,0x00,0xe4,
	0xd1,0x80,0xd1,0xc1,0xd2,0x05,0xd2,0x41,
	0xd2,0x80,0xd2,0xc0,0xd3,0x04,0xd3,0x41,
	0xf3,0x3d,0x0b,0x57,0x05,0x6a,0x70,0x38,
	0x10,0x20,0xeb,0x1c,0x86,0x45,0x80,0x3f,
	0x84,0x86,0x80,0x3f,0xe3,0x3a,0x00,0xa9,
	0xd0,0x70,0x05,0x6b,0x60,0x74,0x00,0x60,
	0xd0,0x40,0x05,0x6b,0x60,0x78,0xd0,0x40,
	0x06,0xee,0x60,0x48,0xd0,0xc1,0xd1,0x02,
	0x00,0x6f,0xd1,0x64,0x00,0xef,0xd1,0x88,
	0xd1,0xc1,0xd2,0x02,0xd2,0x44,0xd2,0x82,
	0xd2,0xc4,0xd3,0x02,0xd3,0x44,0xf3,0x3d,
	0x07,0x57,0xd0,0x44,0x06,0xee,0x60,0x78,
	0xc7,0xe8,0x17,0xe0,0x07,0xc5,0x05,0x6b,
	0x60,0xdc,0x05,0x6b,0x61,0x20,0x05,0x6a,
	0x61,0x68,0x05,0x6a,0x61,0xac,0x05,0x6b,
	0x61,0xd4,0x05,0x6d,0x62,0x14,0x05,0x61,
	0x62,0x40,0x05,0x6d,0x62,0xb0,0x05,0x6d,
	0x62,0xf8,0x05,0x6d,0x63,0x34,0x05,0x6d,
	0x63,0x7c,0x07,0xc5,0x01,0x46,0x00,0x06,
	0x80,0x3c,0x80,0x3d,0x00,0x4a,0x6f,0x00,
	0x00,0xc6,0x20,0x01,0xb0,0x3c,0xb8,0x01,
	0xef,0x54,0x07,0xc5,0x01,0x46,0x07,0x51,
	0x02,0x46,0xd5,0x40,0x00,0x29,0x7e,0xe8,
	0x03,0x9e,0xfa,0xba,0xd5,0x80,0xce,0x3b,
	0x02,0x06,0x00,0xc6,0x05,0x29,0xd0,0x30,
	0xd0,0x40,0x60,0x40,0xd0,0x40,0x05,0x6f,
	0xd0,0x3c,0x60,0x40,0xd0,0x41,0x05,0x6b,
	0x60,0x64,0x06,0x24,0xd0,0x08,0x60,0x40,
	0x02,0x86,0xd5,0x01,0x02,0x06,0x06,0xee,
	0xd0,0x08,0x00,0x20,0xd0,0x40,0x60,0x40,
	0xc0,0x41,0x07,0xc5,0x05,0x27,0xd0,0x6c,
	0x00,0xac,0xd0,0x38,0x60,0x01,0x05,0x26,
	0xd0,0x60,0x00,0x20,0xd0,0x00,0x60,0x01,
	0x05,0x60,0xd0,0x54,0x00,0x20,0xd0,0x05,
	0x60,0x01,0x04,0xef,0xd0,0x14,0xd0,0x40,
	0x60,0x40,0x05,0x6f,0xd0,0x08,0xd0,0x41,
	0x60,0x40,0x05,0x27,0xd0,0x34,0xd0,0x41,
	0x60,0x40,0xd0,0x41,0x05,0x27,0xd0,0x3c,
	0x60,0x40,0x05,0x28,0xd0,0x00,0x60,0x40,
	0x07,0x1c,0x07,0x1d,0xd0,0x40,0x05,0x27,
	0xd0,0x38,0x60,0x40,0x05,0x26,0xd0,0x38,
	0xd8,0x00,0x68,0x00,0x00,0x29,0x70,0x20,
	0x05,0x28,0x60,0x1c,0x01,0x46,0x01,0x20,
	0xd0,0x70,0xa0,0x40,0x80,0x3f,0x00,0xe7,
	0x78,0x28,0x00,0x15,0xea,0xf9,0x05,0x6e,
	0x70,0x18,0x00,0x23,0xd0,0x50,0x70,0x41,
	0x10,0x47,0x20,0x40,0x98,0x01,0x00,0x16,
	0xea,0xf6,0x00,0x21,0xd8,0x00,0x50,0x60,
	0xa0,0x41,0x80,0x3f,0xe2,0xfb,0x83,0x01,
	0x80,0x3f,0x01,0x20,0xd0,0x50,0xa0,0x40,
	0x80,0x3f,0x00,0x24,0xd0,0x6b,0x00,0xfc,
	0xd0,0x00,0x50,0x40,0xa0,0x41,0x80,0x3f,
	0x08,0x70,0xd0,0x01,0xd0,0x41,0xa0,0x02,
	0xa0,0x43,0x00,0xc6,0xd0,0x00,0x05,0x6a,
	0x60,0x38,0x05,0x6e,0x60,0x10,0x05,0x61,
	0x60,0x1c,0x06,0xe4,0x60,0x00,0x05,0x6e,
	0x60,0x3c,0x05,0x2e,0x60,0x24,0x05,0x61,
	0x60,0x14,0x05,0x61,0x60,0x0c,0x05,0x60,
	0x60,0x28,0x00,0x23,0xd0,0x3f,0x05,0x6c,
	0x60,0x0c,0xd0,0x41,0x05,0x64,0x60,0x44,
	0xd0,0x03,0x05,0x60,0x60,0x00,0x01,0x2b,
	0xd0,0x2c,0xd0,0x40,0x00,0x22,0xd0,0x96,
	0x60,0x40,0xb0,0x3c,0xb0,0x81,0xfb,0x2e,
	0x00,0x28,0x70,0x20,0xb0,0x2c,0xd0,0x40,
	0x60,0x40,0x05,0x6f,0x60,0x58,0x07,0xc5,
	0x04,0xef,0xd3,0x98,0x73,0xce,0x13,0xe0,
	0xea,0xb6,0x07,0xc5,0xd3,0xc1,0x63,0xce,
	0xc4,0x5f,0x02,0x46,0x0f,0xef,0xd6,0x7f,
	0x02,0x06,0x84,0x22,0x04,0x20,0xd3,0xc0,
	0xa3,0xe3,0x80,0x3f,0x01,0x60,0xd3,0x80,
	0xf3,0x59,0x98,0x1c,0x80,0x3f,0x00,0x19,
	0xea,0xe7,0x98,0x24,0x80,0x3f,0x00,0x14,
	0xfa,0xe7,0x00,0x13,0xea,0xe7,0x04,0xea,
	0x73,0x80,0x13,0xa2,0xea,0xe0,0x13,0xb1,
	0xea,0xe7,0x13,0xb0,0xea,0xe7,0x13,0xb2,
	0xea,0xe7,0x80,0x1d,0x93,0xb5,0x80,0x3f,
	0x81,0x1f,0x93,0xa5,0x80,0x3f,0xe2,0xe7,
	0x05,0x25,0x73,0xa8,0x01,0x28,0xd3,0xc0,
	0x23,0xce,0x05,0x6a,0x63,0xe8,0xf3,0x5d,
	0x84,0x22,0x04,0x20,0xd3,0xc1,0xa3,0xe3,
	0x80,0x3f,0xd3,0xc0,0x05,0x6a,0x63,0xc0,
	0x05,0x26,0xd3,0xb8,0x78,0x0e,0x04,0x11,
	0x68,0x0e,0xe3,0x56,0x00,0x2a,0xd3,0xa0,
	0x73,0x8e,0x00,0x21,0xd3,0xd8,0x43,0xce,
	0xea,0xfe,0x07,0xc5,0x04,0xef,0xd3,0x98,
	0x73,0xce,0x13,0xe0,0xfb,0x04,0x07,0xc5,
	0xd3,0xc0,0x63,0xce,0xc4,0x5f,0xf3,0x87,
	0x05,0x26,0xd3,0xb8,0x78,0x0e,0x08,0x11,
	0x68,0x0e,0xf3,0x5d,0xd3,0xc0,0x05,0x6a,
	0xd3,0x80,0x63,0xce,0xdf,0xc0,0x04,0xea,
	0xd3,0xa8,0x73,0x8e,0x13,0xa2,0xfb,0x1f,
	0x06,0x23,0xd3,0x90,0xd3,0xc2,0x63,0xce,
	0x00,0x22,0xd3,0xc0,0xe3,0x2a,0x13,0xa3,
	0xeb,0x22,0xe3,0x28,0xd3,0xc0,0x05,0xa1,
	0x63,0xd0,0x01,0x20,0xd3,0xc0,0xe3,0x2a,
	0x01,0xee,0xd3,0xd0,0x05,0x6a,0xd3,0xa8,
	0x63,0xce,0x04,0xea,0xda,0x24,0x7a,0x28,
	0x02,0x46,0xc6,0x68,0x02,0x06,0xf3,0x5d,
	0x05,0x26,0xd3,0xa0,0x73,0xce,0x13,0xe2,
	0xfb,0x56,0x05,0x26,0xd3,0xbc,0x73,0xce,
	0x13,0xe0,0xfb,0x56,0xd3,0xc1,0x05,0x29,
	0xd3,0x90,0x63,0xce,0x05,0x29,0xd3,0x94,
	0x63,0xce,0x05,0x26,0xd3,0xb8,0x78,0x0e,
	0x04,0x18,0x68,0x0e,0x05,0x28,0xd3,0x94,
	0x73,0xce,0x05,0x29,0xd3,0x9c,0x63,0xce,
	0xd3,0xc0,0x05,0x2e,0x63,0xdc,0x05,0x2e,
	0x63,0xe0,0x07,0x51,0xc7,0xd1,0xc0,0x00,
	0x07,0xc5,0x93,0xe1,0x43,0xce,0xfb,0x59,
	0x07,0xc5,0x00,0x29,0xd0,0x24,0x70,0xc0,
	0xc0,0x43,0x81,0x62,0xa0,0xe3,0x00,0x29,
	0xd0,0x20,0x71,0x00,0x82,0x62,0xa1,0x23,
	0x30,0x44,0x05,0x6d,0x60,0x44,0x82,0x22,
	0xa1,0x23,0x83,0x62,0xa1,0x23,0xd0,0x00,
	0xd0,0x90,0x30,0x02,0x10,0x02,0x81,0xa2,
	0xa0,0x23,0x30,0xc4,0x04,0xea,0x70,0x28,
	0x10,0x24,0xfb,0x7d,0x00,0x24,0xd0,0x00,
	0xe3,0x7f,0x05,0x25,0x70,0x30,0x30,0xc0,
	0x81,0xe2,0xa0,0xe3,0x05,0xa1,0xd0,0xcc,
	0xd0,0x01,0x60,0x03,0x07,0xc5,0xd0,0x00,
	0x05,0x28,0x60,0x10,0x05,0x28,0x60,0x28,
	0x05,0x6c,0x60,0x20,0x05,0x6e,0x60,0x00,
	0x05,0x6e,0x60,0x04,0x05,0x29,0x60,0x18,
	0x00,0x2b,0x60,0x34,0x05,0x6c,0x60,0x10,
	0x05,0x6c,0x60,0x14,0x06,0xef,0x60,0x14,
	0x06,0xee,0x60,0x14,0xd0,0x01,0x05,0x29,
	0x60,0x10,0x05,0x26,0xd0,0x38,0x78,0x00,
	0x04,0x14,0x68,0x00,0x0b,0x9f,0xd0,0x14,
	0x05,0x28,0x60,0x30,0xd0,0x02,0x05,0x60,
	0x60,0x38,0x00,0xef,0xd0,0x08,0x05,0x28,
	0x60,0x14,0x05,0x28,0x60,0x18,0x00,0xef,
	0xd0,0x08,0x06,0xef,0x60,0x20,0x06,0xef,
	0x60,0x24,0x02,0x86,0xd7,0x80,0x02,0x06,
	0x07,0xc5,0x00,0x00,0x84,0x22,0x02,0x38,
	0xd0,0x00,0xa0,0x23,0x00,0x28,0x70,0xf4,
	0x80,0x22,0xa0,0xe3,0x00,0x28,0x71,0x30,
	0x81,0x22,0xa1,0x23,0xc0,0x03,0x30,0x04,
	0x05,0x6d,0x60,0x00,0x04,0xea,0x70,0x00,
	0x10,0x22,0xea,0xdf,0x10,0x24,0xea,0xf4,
	0x00,0xf5,0xd0,0x00,0x05,0x6a,0x70,0x60,
	0xe3,0x0a,0x04,0xeb,0x70,0x10,0x10,0x21,
	0xea,0xef,0x01,0x46,0x02,0x46,0xc8,0x1a,
	0x02,0x06,0x00,0xc6,0x00,0x23,0xd0,0x60,
	0x0c,0x11,0xfe,0xef,0x00,0xf0,0xd0,0x00,
	0xe2,0xf1,0x0c,0x20,0xd0,0x00,0x00,0x28,
	0xd0,0x40,0xe3,0x0a,0x04,0xeb,0xd0,0x10,
	0x70,0x00,0x10,0x21,0xeb,0x05,0x02,0x46,
	0xc8,0x1a,0x02,0x06,0x00,0x23,0xd0,0x60,
	0x0c,0x11,0xff,0x05,0x00,0xf0,0xd0,0x00,
	0x00,0x28,0xd0,0x40,0xe3,0x0a,0x00,0xf5,
	0xd0,0x00,0x04,0x20,0xd0,0x40,0x10,0x42,
	0x05,0x6a,0x60,0x54,0x05,0x6a,0x60,0x10,
	0x05,0x6a,0x60,0x0c,0x80,0xe2,0xa1,0x23,
	0x83,0x22,0xa1,0x23,0xd0,0x00,0x00,0x20,
	0xd0,0x90,0x30,0x02,0x10,0x02,0x80,0x62,
	0xa0,0x23,0x30,0xc4,0x00,0x27,0x70,0x3c,
	0x30,0xc0,0x80,0xa2,0xa0,0xe3,0xd0,0x40,
	0x05,0x6d,0x60,0x48,0x05,0x6c,0x60,0x64,
	0x05,0x6c,0x60,0x68,0x05,0x6c,0x60,0x70,
	0x00,0x2d,0x70,0x00,0x05,0x67,0x60,0x18,
	0x00,0x2d,0x70,0x20,0x05,0x67,0x60,0x1c,
	0x00,0x2e,0x70,0x00,0x05,0x67,0x60,0x20,
	0x00,0x28,0x70,0x1c,0x10,0x27,0xeb,0x3c,
	0x10,0x28,0xfb,0x44,0x05,0x65,0x70,0x30,
	0x05,0x67,0x60,0x24,0x05,0x65,0x70,0x34,
	0x05,0x67,0x60,0x28,0x05,0x67,0xd0,0x00,
	0x05,0x66,0x60,0x38,0x05,0x66,0x60,0x3c,
	0xd0,0x00,0x05,0x65,0x60,0x24,0x05,0x69,
	0x60,0x10,0x05,0x68,0x60,0x14,0x05,0x69,
	0x60,0x08,0x05,0x69,0x60,0x04,0x05,0x68,
	0x60,0x1c,0x05,0x66,0x60,0x08,0x05,0x66,
	0x60,0x0c,0x05,0x65,0x60,0x28,0x05,0x66,
	0x60,0x18,0x05,0x67,0x60,0x00,0x05,0x67,
	0x60,0x04,0x05,0x67,0x60,0x08,0x05,0x67,
	0x60,0x0c,0x05,0x67,0x60,0x10,0xd0,0x02,
	0x05,0x67,0x60,0x14,0x00,0x28,0x70,0x38,
	0x05,0x67,0x60,0x2c,0x00,0x2f,0xd0,0x70,
	0x20,0x01,0x05,0x67,0x60,0x30,0x00,0x28,
	0x70,0x3c,0x05,0x67,0x60,0x34,0x07,0xc5,
	0x00,0x29,0xd0,0x24,0x70,0xc0,0xc0,0x43,
	0x81,0x62,0xa0,0xe3,0x00,0x29,0xd0,0x20,
	0x71,0x00,0x82,0x62,0xa1,0x23,0x30,0x44,
	0x05,0x6d,0x60,0x44,0x82,0x22,0xa1,0x23,
	0x83,0x62,0xa1,0x23,0xd0,0x00,0xd0,0x90,
	0x30,0x02,0x10,0x02,0x81,0xa2,0xa0,0x23,
	0x30,0xc4,0x04,0xea,0x70,0x28,0x10,0x24,
	0xfb,0x9a,0x00,0x24,0xd0,0x00,0xe3,0x9c,
	0x05,0x25,0x70,0x30,0x30,0xc0,0x81,0xe2,
	0xa0,0xe3,0x05,0xa1,0xd0,0xcc,0xd0,0x01,
	0x60,0x03,0x07,0xc5,0x00,0x28,0x71,0xbc,
	0x00,0x28,0x71,0x78,0x04,0xea,0x70,0x00,
	0x10,0x24,0xfb,0xb6,0x31,0x85,0x11,0x9f,
	0x21,0x85,0xc0,0x06,0x00,0x60,0x20,0x00,
	0x10,0x18,0x10,0x08,0x05,0xe5,0x60,0x14,
	0x84,0xe2,0xa1,0xa3,0x85,0x22,0xa1,0x63,
	0x31,0x85,0x05,0x6a,0x61,0xb4,0x82,0xe2,
	0xa1,0x63,0x07,0xc5,0xc1,0x5f,0x04,0xea,
	0x70,0x84,0x04,0xea,0x70,0xc0,0x00,0x26,
	0x71,0x2c,0x80,0x9f,0x80,0x3f,0x0b,0x96,
	0x10,0xf1,0xeb,0x4b,0x10,0xf0,0xeb,0x4b,
	0x10,0xe4,0xeb,0x4b,0x00,0xe7,0x78,0x28,
	0x00,0x13,0xeb,0x4b,0x10,0xa0,0xeb,0x18,
	0x10,0xa2,0xfb,0x4b,0x10,0xe0,0xeb,0x1b,
	0x80,0x48,0x80,0xc8,0x00,0x26,0xd0,0x15,
	0xa0,0x26,0x00,0x26,0xd0,0x00,0xa0,0x1e,
	0x10,0xe2,0xfb,0x26,0xd8,0x01,0xe3,0x29,
	0x00,0x62,0xd0,0x04,0x78,0x00,0x04,0x13,
	0x04,0x53,0x04,0x56,0x00,0x21,0xd0,0x3f,
	0xa0,0x08,0x10,0xa2,0xfb,0x33,0x04,0x55,
	0x04,0x54,0xa8,0x09,0xf3,0xd3,0xd0,0x10,
	0x50,0x40,0x10,0x5c,0x10,0x44,0x87,0xc8,
	0xa0,0x49,0x83,0xdc,0x80,0xf5,0x00,0x22,
	0x78,0x2c,0x00,0x12,0xfb,0x48,0x00,0x26,
	0x78,0x20,0x18,0x20,0xfb,0x48,0x87,0x48,
	0x86,0x48,0x01,0x45,0x87,0x48,0x86,0xc8,
	0x01,0x45,0x80,0x48,0x10,0xa1,0xeb,0x8c,
	0xf3,0xd3,0x00,0x20,0xd0,0x01,0x50,0x40,
	0x81,0x66,0xa0,0x5e,0x06,0x30,0xd0,0x3b,
	0xa0,0x1c,0x80,0xf5,0x00,0x6c,0xd0,0x00,
	0x10,0xa0,0xfb,0x68,0x10,0xf0,0xeb,0x64,
	0x10,0xf1,0xeb,0x64,0x00,0x22,0xd0,0x50,
	0x50,0x01,0xe3,0x73,0x00,0x22,0xd0,0x40,
	0x50,0x01,0xe3,0x73,0x10,0xf0,0xeb,0x70,
	0x10,0xf1,0xeb,0x70,0x00,0x20,0xd0,0x50,
	0x50,0x01,0xe3,0x73,0x00,0x20,0xd0,0x40,
	0x50,0x01,0xa0,0x26,0x10,0xf0,0xeb,0x79,
	0x10,0xf1,0xeb,0x7e,0xe3,0x82,0x83,0x24,
	0x80,0x3f,0x89,0x9f,0x80,0x3f,0xe3,0x82,
	0x81,0x24,0x80,0x3f,0x85,0xdf,0x80,0x3f,
	0x00,0x28,0xd0,0x14,0x70,0x00,0x10,0x08,
	0x00,0x21,0xd0,0x40,0x50,0x40,0x81,0xa6,
	0xa0,0x5e,0x01,0x45,0x10,0xf1,0xeb,0xab,
	0x10,0xf0,0xeb,0xab,0x10,0xf2,0xeb,0xc1,
	0x04,0x30,0xd0,0x2b,0xa0,0x1c,0x00,0x20,
	0xd0,0x06,0xa0,0x26,0x00,0x21,0xd0,0x10,
	0xa0,0x1e,0x10,0xe3,0xeb,0xa1,0x8f,0xf5,
	0x00,0x6d,0xd0,0x13,0xe3,0xa5,0xa1,0x1c,
	0x8a,0xf5,0x00,0x64,0xd0,0x23,0xa0,0x26,
	0xd8,0x3f,0x48,0x04,0x04,0x19,0xa8,0x1e,
	0x01,0x45,0x81,0xa6,0x0f,0x21,0xd0,0x00,
	0xa0,0x1e,0x10,0xf1,0xeb,0xb6,0x83,0x24,
	0x80,0x3f,0x89,0x9f,0x80,0x3f,0xe3,0xba,
	0x81,0x24,0x80,0x3f,0x85,0xdf,0x80,0x3f,
	0xa1,0x1c,0x80,0xf5,0x00,0x24,0xd0,0x23,
	0xa0,0x26,0x80,0x1e,0x01,0x45,0x83,0x24,
	0x80,0x3f,0x89,0x9f,0x80,0x3f,0x81,0xa6,
	0x0e,0x21,0xd0,0x00,0xa0,0x1e,0x80,0xf5,
	0x00,0x64,0xd0,0x23,0xa0,0x26,0x80,0x1e,
	0x06,0x30,0xd0,0x3b,0x51,0x00,0xa1,0x1c,
	0x01,0x45,0xd0,0x40,0x00,0x26,0x78,0x28,
	0x00,0x20,0x48,0x0f,0x00,0x10,0xeb,0xdd,
	0x00,0x24,0xd0,0x00,0x50,0x40,0x00,0x11,
	0xeb,0xe2,0x00,0x22,0xd0,0x00,0x50,0x40,
	0x00,0x12,0xeb,0xe7,0x00,0x21,0xd0,0x00,
	0x50,0x40,0x00,0x13,0xeb,0xeb,0xd0,0x20,
	0x50,0x40,0x07,0xc5,0xd0,0x40,0x05,0x6a,
	0x60,0x40,0x02,0x70,0xd0,0x00,0x10,0x04,
	0xa0,0x39,0x0c,0x30,0xd0,0x00,0x10,0x02,
	0xa0,0x0a,0x84,0x05,0x80,0x3f,0xa0,0x06,
	0x80,0x3f,0xa0,0x1b,0x80,0x3f,0xa0,0x27,
	0x80,0x3f,0x80,0x27,0x80,0x1b,0x84,0x05,
	0x80,0x06,0x80,0x0a,0x80,0x3f,0x04,0x6e,
	0xd0,0x3c,0x00,0x20,0xd0,0xbc,0x00,0x8a,
	0x73,0x80,0x85,0xc5,0x84,0x06,0x86,0x45,
	0x80,0x06,0x80,0x3f,0x07,0xc9,0x00,0x0d,
	0x07,0xc9,0x00,0x0d,0x07,0xc9,0x00,0x0d,
	0x07,0xc9,0x00,0x0d,0xd0,0x2f,0xa0,0x29,
	0x80,0x2a,0x84,0x29,0x02,0xb0,0xd0,0x00,
	0xa0,0x2a,0x80,0x27,0x01,0x20,0xd0,0x00,
	0xa0,0x29,0xd0,0x13,0x10,0x0b,0xa0,0x2a,
	0x80,0x2b,0xd0,0x12,0x10,0x0b,0xa0,0x2a,
	0x80,0x6b,0x0c,0x33,0xd4,0x00,0x10,0x01,
	0xd0,0x81,0x50,0x02,0x84,0x22,0xa0,0x23,
	0x80,0x3f,0x80,0x64,0x80,0x3f,0x05,0x6a,
	0xd0,0xb8,0xd0,0x00,0x60,0x02,0x00,0x21,
	0xd0,0x10,0x05,0x6f,0xd0,0xb4,0x60,0x02,
	0x00,0x24,0xd0,0x0c,0x05,0x6f,0xd0,0xb8,
	0x60,0x02,0x00,0x20,0xd0,0x00,0x05,0x6f,
	0xd0,0xbc,0x60,0x02,0x05,0x6f,0xd0,0x04,
	0xd0,0x80,0x60,0x80,0x07,0xc5,0x00,0x00,
	0xd0,0x05,0x60,0x1b,0x00,0x2a,0xd0,0x68,
	0x60,0x01,0x07,0x28,0x70,0x78,0x10,0x61,
	0xeb,0x0f,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xda,
	0x00,0x05,0x04,0xee,0xd0,0x18,0x64,0xc0,
	0x04,0xee,0xd0,0x1c,0x66,0xc0,0x07,0xc5,
	0x17,0x21,0xeb,0x22,0x17,0x22,0xeb,0x22,
	0x17,0x23,0xfb,0x00,0x07,0xc5,0x07,0xc5,
	0x03,0xd1,0xfb,0x29,0x00,0x27,0xd7,0xa0,
	0xe3,0x2b,0x00,0x29,0xd7,0x80,0x17,0x20,
	0xe7,0x00,0x00,0x2b,0xd0,0x10,0x30,0x1c,
	0xe7,0x00,0x17,0x1e,0x17,0x02,0x17,0x60,
	0xe7,0x00,0xc0,0x1e,0x30,0x1d,0xe7,0x00,
	0x07,0xc5,0x00,0x00,0xc2,0x9f,0x04,0xed,
	0xd0,0x6c,0xc0,0x1c,0x10,0x08,0x60,0x01,
	0x10,0x18,0x07,0xa4,0xd0,0x68,0x70,0x81,
	0xc0,0xc2,0x30,0xc0,0xeb,0x5a,0xff,0x14,
	0xc0,0x03,0x04,0xed,0xd0,0x68,0xd0,0xc3,
	0x60,0xc1,0xe3,0x19,0x30,0x02,0x04,0xed,
	0xd0,0x68,0xd0,0xc1,0x60,0xc1,0x04,0xed,
	0xd0,0x70,0x10,0x88,0x60,0x81,0x17,0x60,
	0xfb,0x28,0x04,0xed,0xd0,0x78,0xd0,0x80,
	0x60,0x81,0x04,0xed,0xd0,0x74,0x10,0x08,
	0x60,0x01,0xe3,0x5e,0xc0,0x9d,0x30,0x80,
	0xef,0x3a,0x04,0xed,0xd0,0x78,0x00,0x24,
	0xd0,0x80,0x60,0x81,0x04,0xed,0xd0,0x7c,
	0x60,0x81,0xc1,0x40,0xc1,0x9d,0xf3,0x49,
	0x04,0xed,0xd0,0x74,0x60,0x01,0xe3,0x5e,
	0x04,0xed,0xd0,0x74,0x00,0x24,0xd0,0x80,
	0x60,0x81,0xc1,0x5d,0xc1,0x80,0xf3,0x49,
	0x04,0xed,0xd0,0x78,0x60,0x01,0x04,0xed,
	0xd0,0x7c,0x60,0x01,0xe3,0x5e,0xd1,0xc0,
	0x00,0x24,0xd2,0x00,0xd2,0x40,0xc0,0x85,
	0x30,0x86,0xe7,0x53,0x31,0x46,0x21,0xc8,
	0xe3,0x4d,0x11,0x44,0x12,0x1c,0xb2,0x7f,
	0x12,0x64,0xfb,0x4d,0xc0,0x07,0x07,0xc5,
	0x04,0xed,0xd0,0x68,0xd0,0x00,0x60,0x01,
	0xc7,0xca,0x17,0xe0,0x07,0xc5,0x00,0x00,
	0x04,0xea,0x73,0x80,0x13,0xa0,0xeb,0x07,
	0x13,0xa4,0xeb,0x07,0x07,0xc5,0x04,0xef,
	0xd3,0x9c,0x73,0xce,0x13,0xe0,0xeb,0x0d,
	0x07,0xc5,0xd3,0xc1,0x63,0xce,0xc4,0x5f,
	0x02,0x86,0x0f,0xef,0xd7,0x7f,0x02,0x06,
	0x84,0x22,0x08,0x20,0xd3,0xc0,0x13,0xc7,
	0xa3,0xe3,0x80,0x3f,0x04,0x20,0xd3,0x80,
	0x93,0xe1,0x80,0x3f,0x43,0xce,0xfb,0x1c,
	0x98,0x1c,0x80,0x3f,0x00,0x19,0xeb,0x2c,
	0x98,0x24,0x80,0x3f,0x00,0x14,0xeb,0x2c,
	0x00,0x13,0xeb,0x2c,0x80,0x1d,0x80,0x3f,
	0xf3,0x7b,0xf3,0x97,0xc7,0xd1,0x17,0xe0,
	0x07,0xc5,0x04,0xea,0x73,0x80,0x13,0xa0,
	0xeb,0x38,0x13,0xa4,0xeb,0x38,0x07,0xc5,
	0x00,0x2a,0x73,0xa0,0x00,0x21,0xd3,0xd8,
	0x43,0xce,0xeb,0x3f,0x07,0xc5,0x04,0xef,
	0xd3,0x9c,0x73,0xce,0x13,0xe0,0xfb,0x45,
	0x07,0xc5,0xd3,0xc0,0x63,0xce,0xc4,0x5f,
	0xd3,0x81,0x07,0x23,0x63,0x80,0x07,0x23,
	0x63,0x88,0x07,0x23,0x63,0x8c,0x07,0x23,
	0x63,0x90,0x07,0x23,0x63,0x94,0xf3,0x97,
	0x04,0xea,0x73,0x80,0x13,0xa4,0xeb,0x58,
	0x03,0x28,0xd0,0x10,0x05,0xaf,0x60,0x18,
	0x04,0x30,0xd0,0x00,0x05,0xaf,0x60,0x3c,
	0x04,0x30,0xd0,0x00,0x05,0xe0,0x60,0x08,
	0x00,0x6c,0xd3,0xd8,0xe3,0x69,0x00,0x6b,
	0xd3,0xe0,0x05,0x63,0x63,0xc0,0x04,0xea,
	0x78,0x34,0x02,0x86,0xc7,0x60,0x02,0x06,
	0x84,0x22,0x08,0x20,0xd3,0xc0,0x13,0xc7,
	0xd3,0x81,0x53,0xce,0xa3,0xe3,0x80,0x3f,
	0xc7,0xd1,0x17,0xe0,0x07,0xc5,0x00,0x28,
	0x71,0xbc,0x00,0x28,0x71,0x78,0x04,0xea,
	0x70,0x00,0x10,0x24,0xfb,0x8d,0x31,0x85,
	0x11,0x9f,0x21,0x85,0xc0,0x06,0x00,0x60,
	0x20,0x00,0x10,0x18,0x10,0x08,0x05,0xe5,
	0x60,0x14,0x84,0xe2,0xa1,0xa3,0x85,0x22,
	0xa1,0x63,0x31,0x85,0x05,0x6a,0x61,0xb4,
	0x82,0xe2,0xa1,0x63,0x07,0xc5,0x0b,0x98,
	0x0b,0xd6,0x00,0x28,0x70,0x38,0x05,0xe0,
	0x60,0x28,0x05,0xe0,0x60,0x20,0x04,0xea,
	0x70,0x00,0x10,0x24,0xfb,0xa9,0x07,0x55,
	0xd3,0x80,0x06,0xe3,0x63,0xa4,0xd0,0x00,
	0xe3,0xab,0xdd,0x80,0xd0,0x03,0x05,0xe0,
	0x60,0x34,0xd0,0x00,0x05,0xaf,0x60,0x34,
	0x05,0xe0,0x60,0x2c,0x05,0xe1,0x60,0x0c,
	0x05,0xe5,0x60,0x18,0x05,0xe1,0x60,0x08,
	0x05,0xaf,0x60,0x1c,0x05,0xe1,0x60,0x2c,
	0x0f,0xff,0xdf,0xff,0x05,0xe2,0x60,0x1c,
	0x05,0xe6,0xd0,0x14,0x78,0x00,0x08,0x13,
	0x68,0x00,0x05,0xe7,0xd0,0x24,0x05,0xe7,
	0x60,0x20,0xb0,0x3c,0x05,0xe7,0x60,0x24,
	0xd0,0x00,0x00,0x22,0xd0,0x44,0x05,0xe7,
	0xd0,0xa8,0x60,0x02,0xb0,0xbc,0xb0,0x41,
	0xfb,0xd1,0x07,0xc5,0xd8,0x40,0x00,0x23,
	0x72,0xb0,0x05,0x25,0x62,0x90,0x00,0x23,
	0x72,0xa8,0xd0,0x46,0x40,0x4a,0x10,0x5f,
	0x58,0x41,0xd0,0x48,0x40,0x4a,0x10,0x41,
	0x58,0x41,0xd0,0x70,0x40,0x4a,0x10,0x5e,
	0x58,0x41,0x00,0x23,0x78,0xec,0x08,0x97,
	0x08,0x98,0x08,0x95,0x00,0xe7,0x78,0xa8,
	0x01,0x15,0xe8,0x20,0x01,0x90,0xf8,0x25,
	0x04,0x97,0xe0,0x25,0x00,0x23,0x78,0xb8,
	0x18,0xa1,0xe8,0x25,0x04,0x97,0x01,0x20,
	0xd0,0x70,0xa0,0x40,0x80,0x3f,0x98,0x81,
	0x01,0x91,0xe8,0x31,0x04,0x98,0x08,0x96,
	0x05,0x16,0xa8,0x81,0xe0,0x35,0x08,0x98,
	0x04,0x96,0x09,0x16,0xa8,0x81,0x00,0x23,
	0x78,0x20,0x00,0x13,0xe8,0x3b,0x08,0x90,
	0x08,0x94,0x04,0xea,0x68,0x7c,0xd8,0x67,
	0x48,0x60,0x04,0xeb,0x68,0x44,0xd8,0x40,
	0x00,0x23,0x72,0xa0,0xd0,0x48,0x40,0x4a,
	0xe8,0x48,0x04,0x98,0x00,0x23,0x78,0xbc,
	0xc2,0xe2,0x01,0x10,0xe8,0x4e,0x04,0x91,
	0x18,0x9f,0x00,0x23,0x48,0xbf,0x18,0x8a,
	0x58,0x62,0x12,0xd7,0xd0,0x43,0x42,0xc1,
	0x12,0xe1,0xe8,0x61,0x12,0xe2,0xe8,0x63,
	0x12,0xe0,0xe8,0x5d,0xe0,0x63,0x05,0xa1,
	0x70,0x40,0x10,0x60,0xe8,0x63,0x04,0x92,
	0xe0,0x64,0x08,0x92,0x04,0xeb,0x68,0x40,
	0x00,0xa1,0xd0,0x40,0x04,0xeb,0x60,0x48,
	0x00,0x61,0xd0,0x74,0x04,0xeb,0x60,0x4c,
	0x00,0x67,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0xd0,0x40,0x00,0x61,
	0x60,0x68,0xd0,0x12,0xc0,0x6f,0xc7,0xf0,
	0x00,0x05,0x00,0x00,0x80,0x9f,0x80,0xf8,
	0x80,0x9f,0x0b,0x96,0x00,0xf2,0xd0,0x00,
	0x30,0x15,0xe7,0x00,0xf3,0x15,0x00,0x22,
	0x78,0x2c,0x00,0x11,0xe8,0x17,0x00,0xe7,
	0x78,0x28,0x00,0x13,0xe8,0x17,0x00,0x62,
	0x72,0x84,0xd0,0x01,0x00,0x62,0x60,0x04,
	0xf0,0x9e,0x80,0x48,0xd8,0x01,0x00,0x26,
	0x78,0x68,0x00,0x20,0x48,0x4f,0x00,0x90,
	0xe8,0x20,0x04,0x18,0x00,0x91,0xe8,0x23,
	0x04,0x17,0x00,0x92,0xe8,0x26,0x04,0x16,
	0x00,0x93,0xe8,0x29,0x04,0x15,0x00,0x26,
	0xd0,0x55,0x04,0xea,0x70,0x04,0x10,0x20,
	0xe8,0x31,0x00,0x24,0xd0,0x55,0xa0,0x66,
	0xa8,0x1e,0x80,0xf5,0x83,0x1c,0x00,0x2a,
	0x70,0x80,0x06,0xe5,0xd0,0xdc,0x78,0x03,
	0x04,0x54,0x68,0x03,0xb0,0xbe,0x98,0x1c,
	0x00,0x51,0xf8,0x3d,0x01,0x46,0x90,0x2e,
	0x90,0x6e,0xa0,0x7c,0xa0,0x3d,0x60,0x02,
	0x00,0x06,0x00,0xc6,0xb0,0xbc,0xb5,0x44,
	0xec,0x3d,0x78,0x03,0x04,0x1e,0x68,0x03,
	0xd0,0x42,0x00,0x2a,0x60,0x60,0x80,0x9f,
	0x80,0xb8,0x0b,0x96,0x00,0x22,0x78,0x2c,
	0x00,0x11,0xe8,0x60,0x00,0xe7,0x78,0x28,
	0x00,0x13,0xe8,0x60,0x00,0x62,0x62,0x84,
	0xf0,0x66,0xf0,0xad,0x00,0xa1,0xd0,0x50,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x80,0x9f,0x80,0xdf,0x0b,0x96,0x80,0x48,
	0x00,0x26,0xd0,0x15,0xa0,0x26,0x00,0x26,
	0xd0,0x00,0xa0,0x1e,0x00,0x62,0xd8,0x04,
	0x78,0x20,0xc8,0x20,0x04,0x13,0x04,0x53,
	0x04,0x56,0x00,0x21,0xd0,0x3f,0xa0,0x08,
	0x04,0xea,0xd0,0x44,0x70,0x41,0xc0,0x41,
	0x10,0x62,0xf8,0x82,0x04,0x55,0x04,0x54,
	0xa8,0x09,0x00,0x26,0xd8,0x28,0x78,0x20,
	0xc8,0x20,0x00,0x20,0x48,0x0f,0x00,0x10,
	0xe8,0x8c,0x04,0x18,0x00,0x11,0xe8,0x8f,
	0x04,0x17,0x00,0x12,0xe8,0x92,0x04,0x16,
	0x00,0x13,0xe8,0x95,0x04,0x15,0x04,0x14,
	0x18,0x1c,0x18,0x04,0x87,0xc8,0xa8,0x09,
	0x80,0xf5,0x83,0x1c,0x80,0xc8,0x07,0xc5,
	0x00,0x25,0xd0,0x5f,0xa0,0x48,0x00,0x24,
	0xd0,0x5e,0xa0,0x48,0x92,0x09,0x00,0x25,
	0xd0,0x7f,0xa0,0x48,0x00,0x24,0xd0,0x5e,
	0xa0,0x48,0x92,0x49,0x07,0xc5,0x00,0x25,
	0xd0,0x5f,0xa0,0x48,0x00,0x24,0xd0,0x5e,
	0xa0,0x48,0xa2,0x09,0x00,0x25,0xd0,0x7f,
	0xa0,0x48,0x00,0x24,0xd0,0x5e,0xa0,0x48,
	0xa2,0x49,0x07,0xc5,0x04,0xea,0xd0,0x00,
	0x70,0x00,0xb0,0x02,0xfb,0x00,0x04,0xea,
	0xd0,0x04,0x70,0x00,0xb0,0x01,0xfb,0x00,
	0x00,0x2a,0xd0,0x20,0x70,0x40,0x00,0x20,
	0xd0,0x02,0x40,0x40,0xeb,0x00,0xc8,0x15,
	0x00,0x57,0xf8,0x29,0xc7,0x15,0xf3,0x23,
	0xd0,0x40,0x30,0x56,0xf4,0xba,0xd0,0x50,
	0x30,0x56,0xe4,0xba,0x08,0x20,0xd0,0x80,
	0x00,0x28,0xd0,0x34,0x70,0x40,0x30,0x42,
	0x30,0x57,0xe4,0xbc,0x00,0x28,0xd0,0x30,
	0x70,0x40,0x30,0x57,0xec,0xbc,0xc8,0x15,
	0x08,0x57,0xc5,0x60,0xf3,0x15,0x00,0xa1,
	0xdb,0xf0,0x00,0x60,0xdc,0x37,0x00,0x6e,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x01,0x46,0x00,0x30,0xd0,0x41,
	0xa0,0x38,0x80,0x3f,0x00,0xc6,0xd8,0x00,
	0x04,0x1a,0x00,0x24,0xd0,0x70,0xa0,0x76,
	0x80,0x3f,0xa8,0x34,0xd0,0x50,0x06,0xe3,
	0xd0,0x3c,0x60,0x40,0x06,0xe3,0xd0,0x78,
	0x65,0x81,0x06,0xe3,0xd0,0x58,0x65,0x41,
	0x06,0xe3,0xd0,0x5c,0x65,0x41,0x09,0xa5,
	0xd0,0x19,0x10,0x08,0x00,0x21,0xd0,0xb4,
	0x50,0x80,0x06,0xe3,0xd0,0x60,0x60,0x81,
	0x84,0x22,0x01,0x20,0xd0,0x00,0x10,0x0a,
	0x07,0xa0,0xd0,0x40,0x50,0x01,0xa0,0x23,
	0x80,0x3f,0x05,0xe8,0xd0,0x00,0x90,0x61,
	0x80,0x3f,0x40,0x40,0xf8,0x65,0x00,0x28,
	0xd0,0x30,0x70,0x40,0x06,0xe3,0xd0,0x00,
	0x60,0x40,0x00,0x28,0xd0,0x30,0x65,0xc0,
	0xf0,0xd0,0x06,0xe3,0xd0,0x00,0x70,0x40,
	0x50,0x41,0x00,0x28,0xd0,0x30,0x60,0x40,
	0x00,0x06,0x80,0xdf,0x80,0x3f,0x80,0x3f,
	0x06,0xa0,0xd0,0x01,0x84,0x22,0x80,0x3f,
	0xa0,0x23,0x80,0x3f,0xdd,0x80,0x02,0x46,
	0x00,0x20,0xd6,0xc1,0x02,0x06,0x01,0x46,
	0x00,0x77,0xd8,0x40,0xa0,0x38,0x80,0x3f,
	0x06,0xe5,0xd0,0x1c,0x78,0x00,0x04,0x54,
	0x68,0x00,0x00,0xc6,0x02,0x06,0xf1,0x86,
	0x02,0x46,0x16,0xe3,0xf8,0x94,0x02,0x06,
	0x01,0x46,0x06,0xe5,0xd0,0x1c,0x78,0x00,
	0x04,0x1e,0x68,0x00,0x00,0xc6,0x80,0xdf,
	0x80,0x3f,0x80,0x3f,0xf0,0xd0,0x07,0xa0,
	0xd0,0x00,0x84,0x22,0x80,0x3f,0xa0,0x23,
	0x00,0x2a,0xd0,0x20,0xd0,0x42,0x60,0x40,
	0x00,0xa4,0xd8,0x30,0xa8,0x36,0x80,0x3f,
	0x98,0x34,0x58,0x20,0x00,0x15,0xf8,0xc0,
	0x00,0x11,0xf8,0xbe,0xd0,0x04,0xe0,0xc2,
	0xd0,0x06,0xe0,0xc2,0xd0,0x07,0xe0,0xc2,
	0xd0,0x09,0xe0,0xc2,0xd0,0x08,0xe0,0xc2,
	0x60,0x1b,0x00,0x2a,0xd0,0x68,0x60,0x01,
	0x04,0xee,0xd0,0x58,0xd0,0x00,0x60,0x01,
	0x00,0xa1,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x84,0x22,0x02,0x38,
	0xd0,0x00,0xa0,0x23,0x00,0x28,0x70,0xf4,
	0x80,0x22,0xa0,0xe3,0x00,0x28,0x71,0x30,
	0x81,0x22,0xa1,0x23,0xc0,0x03,0x30,0x04,
	0x05,0x6d,0x60,0x00,0x04,0xea,0x70,0x00,
	0x10,0x22,0xe8,0xeb,0x10,0x24,0xe9,0x00,
	0x00,0xf5,0xd0,0x00,0x05,0x6a,0x70,0x60,
	0xe1,0x16,0x04,0xeb,0x70,0x10,0x10,0x21,
	0xe8,0xfb,0x01,0x46,0x02,0x46,0xc8,0x1a,
	0x02,0x06,0x00,0xc6,0x00,0x23,0xd0,0x60,
	0x0c,0x11,0xfc,0xfb,0x00,0xf0,0xd0,0x00,
	0xe0,0xfd,0x0c,0x20,0xd0,0x00,0x00,0x28,
	0xd0,0x40,0xe1,0x16,0x04,0xeb,0xd0,0x10,
	0x70,0x00,0x10,0x21,0xe9,0x11,0x02,0x46,
	0xc8,0x1a,0x02,0x06,0x00,0x23,0xd0,0x60,
	0x0c,0x11,0xfd,0x11,0x00,0xf0,0xd0,0x00,
	0x00,0x28,0xd0,0x40,0xe1,0x16,0x00,0xf5,
	0xd0,0x00,0x04,0x20,0xd0,0x40,0x10,0x42,
	0x05,0x6a,0x60,0x54,0x05,0x6a,0x60,0x10,
	0x05,0x6a,0x60,0x0c,0x80,0xe2,0xa1,0x23,
	0x83,0x22,0xa1,0x23,0xd0,0x00,0x00,0x20,
	0xd0,0x90,0x30,0x02,0x10,0x02,0x80,0x62,
	0xa0,0x23,0x30,0xc4,0x00,0x27,0x70,0x3c,
	0x30,0xc0,0x80,0xa2,0xa0,0xe3,0xd0,0x40,
	0x05,0x6d,0x60,0x48,0x05,0x6c,0x60,0x64,
	0x05,0x6c,0x60,0x68,0x05,0x6c,0x60,0x70,
	0x00,0x2d,0x70,0x00,0x05,0x67,0x60,0x18,
	0x00,0x2d,0x70,0x20,0x05,0x67,0x60,0x1c,
	0x00,0x2e,0x70,0x00,0x05,0x67,0x60,0x20,
	0x00,0x28,0x70,0x1c,0x10,0x27,0xe9,0x48,
	0x10,0x28,0xf9,0x50,0x05,0x65,0x70,0x30,
	0x05,0x67,0x60,0x24,0x05,0x65,0x70,0x34,
	0x05,0x67,0x60,0x28,0x05,0x67,0xd0,0x00,
	0x05,0x66,0x60,0x38,0x05,0x66,0x60,0x3c,
	0xd0,0x00,0x05,0x65,0x60,0x24,0x05,0x69,
	0x60,0x10,0x05,0x68,0x60,0x14,0x05,0x69,
	0x60,0x08,0x05,0x69,0x60,0x04,0x05,0x68,
	0x60,0x1c,0x05,0x66,0x60,0x08,0x05,0x66,
	0x60,0x0c,0x05,0x65,0x60,0x28,0x05,0x66,
	0x60,0x18,0x05,0x67,0x60,0x00,0x05,0x67,
	0x60,0x04,0x05,0x67,0x60,0x08,0x05,0x67,
	0x60,0x0c,0x05,0x67,0x60,0x10,0xd0,0x02,
	0x05,0x67,0x60,0x14,0x00,0x28,0x70,0x38,
	0x05,0x67,0x60,0x2c,0x00,0x2f,0xd0,0x70,
	0x20,0x01,0x05,0x67,0x60,0x30,0x00,0x28,
	0x70,0x3c,0x05,0x67,0x60,0x34,0x07,0xc5,
	0x00,0xef,0xd0,0x3c,0x01,0x46,0x59,0x80,
	0x39,0x80,0x00,0x24,0xd0,0x14,0x59,0x80,
	0x00,0xc6,0x07,0xc5,0xc1,0x1f,0x00,0x28,
	0xd0,0x3c,0x70,0x00,0x00,0x06,0xf3,0x1c,
	0x00,0x29,0xd0,0x6a,0xa0,0x76,0xa0,0x34,
	0xa0,0xb4,0x00,0x29,0xd0,0x6e,0xa0,0x76,
	0x00,0x28,0xd0,0x38,0x70,0x40,0x00,0x28,
	0xd0,0x3c,0x70,0x80,0x30,0x81,0xc0,0x02,
	0xf3,0x1c,0xc7,0xc4,0x10,0x20,0xa0,0x34,
	0xa0,0xb4,0x07,0xc5,0xc0,0x40,0xc0,0xc0,
	0x10,0x16,0x00,0xef,0xd0,0x80,0x40,0x02,
	0x00,0x20,0xd0,0xb0,0x50,0x02,0x10,0x54,
	0x00,0x20,0xd0,0x8f,0x40,0x42,0x50,0x01,
	0x00,0xef,0xd0,0xbf,0x40,0xc2,0x0d,0x20,
	0xd0,0x80,0x50,0x83,0x07,0xc5,0x02,0x33,
	0xdb,0x20,0x00,0x78,0xd1,0xe0,0x01,0xf6,
	0xdb,0x20,0x00,0x78,0xd1,0xe0,0x01,0x3c,
	0xd0,0x00,0x00,0x78,0xd1,0xe0,0x02,0x33,
	0xdb,0x20,0x00,0x78,0xd1,0xe0,0x01,0xf6,
	0xdb,0x20,0x00,0x78,0xd1,0xe0,0x01,0x3c,
	0xd0,0x00,0x00,0x78,0xd1,0xe0,0x00,0x00,
	0x00,0xa0,0xd0,0x68,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0x04,0xef,0xd4,0xf0,
	0x74,0xd3,0x00,0x23,0xd0,0x3f,0x44,0xc0,
	0x04,0xef,0xd5,0x74,0x75,0x55,0x04,0xef,
	0xd5,0xb8,0x75,0x96,0x05,0x20,0xd6,0xcc,
	0x07,0x23,0xd0,0x04,0x70,0x00,0x10,0x20,
	0xeb,0x00,0x04,0xea,0xd0,0x00,0x70,0x40,
	0x10,0x60,0xfb,0x00,0x00,0x2a,0xd0,0x20,
	0x70,0x40,0x00,0x21,0xd0,0x0e,0x40,0x40,
	0xeb,0x00,0x15,0xa4,0xe8,0x44,0x15,0x61,
	0xe7,0x00,0xc0,0x15,0x07,0x23,0xd0,0x74,
	0x70,0x41,0x30,0x01,0xfc,0x39,0x00,0x21,
	0xd0,0x40,0xc0,0x15,0x30,0x01,0xe7,0x00,
	0x00,0x21,0xd0,0x43,0xc0,0x15,0x30,0x01,
	0xef,0x00,0x15,0xa1,0xe8,0x44,0x15,0xa2,
	0xe8,0x44,0x15,0xa3,0xe8,0x44,0x15,0xa4,
	0xe8,0x44,0x15,0xa5,0xe8,0x44,0xe3,0x00,
	0x05,0x20,0xd0,0x1c,0x70,0x00,0x10,0x22,
	0xe4,0x85,0xd0,0x40,0x05,0x20,0x60,0x50,
	0x05,0x20,0x60,0x5c,0x05,0x20,0x60,0x68,
	0x05,0x20,0x60,0x6c,0x00,0x32,0xd0,0x01,
	0xa0,0x38,0x80,0x3f,0x05,0x20,0x60,0x74,
	0x05,0x20,0x60,0x78,0x05,0x20,0x60,0x7c,
	0x05,0x21,0x60,0x44,0x00,0x32,0xd0,0x00,
	0xa0,0x38,0x80,0x3f,0x05,0x21,0x70,0x80,
	0x05,0x21,0x60,0x40,0x10,0xa0,0xe8,0x7e,
	0x10,0xa1,0xe8,0x80,0x10,0xa2,0xe8,0x82,
	0x10,0xa3,0xe8,0x7e,0x10,0xa4,0xe8,0x80,
	0x10,0xa5,0xe8,0x82,0x10,0xa6,0xe8,0x7e,
	0x10,0xa7,0xe8,0x80,0x10,0xa8,0xe8,0x82,
	0x10,0xa9,0xe8,0x7e,0x10,0xaa,0xe8,0x80,
	0x10,0xab,0xe8,0x82,0xd0,0x80,0xe0,0x83,
	0xd0,0x81,0xe0,0x83,0xd0,0x82,0x00,0x22,
	0x60,0x84,0x05,0xe0,0xd0,0x34,0x78,0x00,
	0x04,0x17,0x08,0x50,0x68,0x00,0x15,0xa4,
	0xf8,0x91,0x07,0x23,0x75,0x40,0xd5,0x83,
	0xe0,0xbc,0x00,0x20,0xd0,0x64,0x30,0x55,
	0xf4,0xbc,0x00,0x21,0xd0,0x40,0x35,0x41,
	0xf8,0xa0,0x07,0x23,0x75,0x48,0x15,0x60,
	0xf8,0xbc,0x07,0x23,0x75,0x40,0xe0,0xbc,
	0x15,0x61,0xf8,0xa9,0x07,0x23,0x75,0x4c,
	0x15,0x60,0xf8,0xbc,0x07,0x23,0x75,0x40,
	0xe0,0xbc,0x15,0x62,0xf8,0xb2,0x07,0x23,
	0x75,0x50,0x15,0x60,0xf8,0xbc,0x07,0x23,
	0x75,0x40,0xe0,0xbc,0x15,0x63,0xf8,0xbb,
	0x07,0x23,0x75,0x54,0x15,0x60,0xf8,0xbc,
	0x07,0x23,0x75,0x40,0xe0,0xbc,0xd5,0x41,
	0x07,0x23,0x65,0x40,0x00,0x61,0x65,0x7c,
	0x07,0x23,0x70,0x44,0xd0,0x80,0x10,0x61,
	0xe8,0xcb,0x07,0x24,0x70,0xb0,0x10,0x84,
	0x10,0x62,0xe8,0xcb,0x10,0x81,0x04,0xa3,
	0xd0,0x14,0x20,0x02,0xc2,0x95,0xb5,0x41,
	0x15,0x44,0x20,0x15,0x71,0x00,0xc0,0xc4,
	0x10,0xd8,0x10,0xd2,0xd0,0x43,0x40,0xc1,
	0xc1,0x84,0x11,0x94,0xc1,0xc4,0x00,0x2f,
	0xd0,0x7f,0x41,0xc1,0x41,0x81,0xb0,0x3c,
	0x71,0x40,0xb0,0x3c,0x07,0x23,0xd0,0x48,
	0x70,0x80,0x10,0xa0,0xf8,0xe8,0xc0,0x8a,
	0x10,0x98,0x60,0x81,0xb0,0x7c,0x70,0x80,
	0x10,0xa0,0xf8,0xef,0xc0,0x8a,0x00,0x20,
	0xd8,0x3f,0x40,0xa0,0x60,0x81,0xb0,0x3c,
	0xb0,0x7c,0x70,0x80,0x10,0xa0,0xf8,0xf9,
	0xc0,0x8a,0x10,0x98,0x60,0x81,0xb0,0x7c,
	0x70,0x80,0x10,0xa0,0xf9,0x00,0xc0,0x8a,
	0x00,0x20,0xd8,0x3f,0x40,0xa0,0x60,0x81,
	0x15,0xa5,0xe9,0x12,0xc0,0x45,0x10,0x58,
	0x10,0x52,0xd0,0x83,0x40,0x42,0x10,0x61,
	0xe9,0x26,0x15,0xa1,0xe9,0x12,0x15,0xa3,
	0xe9,0x26,0xe1,0x84,0x05,0xe0,0xd0,0x34,
	0x78,0x00,0x00,0x50,0xe9,0x19,0xd1,0x01,
	0xe1,0x1d,0x11,0x16,0x11,0x14,0xd0,0x43,
	0x41,0x01,0x07,0x24,0xd0,0x00,0xb1,0x01,
	0x11,0x03,0x20,0x04,0x70,0xc0,0xb0,0x3c,
	0x72,0xc0,0xe1,0x41,0x06,0xe5,0xd0,0x1c,
	0x01,0x46,0x78,0x00,0x04,0x53,0x68,0x00,
	0x06,0xe5,0xd0,0x20,0x62,0x80,0x00,0xc6,
	0x11,0x16,0x11,0x14,0xd0,0x43,0x41,0x01,
	0x07,0x24,0xd0,0x18,0xb1,0x01,0x11,0x03,
	0x20,0x04,0x70,0xc0,0xb0,0x3c,0x72,0xc0,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x04,0x1b,
	0x68,0x00,0xc2,0x05,0x12,0x14,0xc2,0x45,
	0x00,0x2f,0xd0,0x3f,0x42,0x40,0x03,0xd1,
	0xe9,0x4b,0xb1,0xb6,0xb1,0xf6,0x02,0x20,
	0xd0,0x40,0x52,0x41,0x05,0xaf,0xd0,0x18,
	0x73,0x00,0x00,0x06,0xb0,0x3c,0x73,0x40,
	0x00,0x06,0xb1,0xff,0x0f,0xef,0xd0,0x7f,
	0x00,0xef,0xd0,0xbf,0x01,0x46,0x00,0x65,
	0xd0,0x3e,0xa0,0x36,0x80,0x3f,0xa2,0x34,
	0xa2,0x74,0xa1,0xb4,0xa0,0xf4,0xa2,0xf4,
	0xa1,0xf4,0xa3,0x34,0xa3,0x74,0xa0,0xb4,
	0xa0,0x74,0x80,0x3f,0x00,0xc6,0x04,0xa2,
	0xd0,0xbc,0x00,0xe5,0xd0,0x3e,0x01,0x46,
	0xa0,0x36,0x80,0x3f,0x04,0x0b,0x6d,0x02,
	0x00,0x06,0x00,0xc6,0x04,0xa2,0xd0,0x7c,
	0x05,0xaf,0xd0,0x34,0x60,0x40,0xe1,0x88,
	0xc0,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xd0,0x40,0x05,0xaf,0xd0,0x34,0x60,0x40,
	0xd0,0x04,0x60,0x1b,0x00,0x2a,0xd0,0x68,
	0x60,0x01,0x00,0x2a,0xd0,0x64,0x00,0x20,
	0xd0,0x26,0x60,0x01,0x00,0xa1,0xd0,0x48,
	0xd0,0x12,0x00,0x61,0xd7,0xd7,0x00,0x05,
	0x01,0x46,0x00,0x30,0xd0,0x1d,0xa0,0x38,
	0x00,0x20,0xd7,0xd2,0x00,0x67,0xd0,0x48,
	0x07,0xc4,0x04,0xea,0xd0,0x28,0x00,0x20,
	0xd0,0x43,0x60,0x40,0x04,0xea,0xd0,0x30,
	0x00,0x20,0xd0,0x50,0x60,0x40,0x00,0x23,
	0xd0,0x28,0xd0,0x40,0x60,0x40,0x05,0x24,
	0xd0,0x3c,0x78,0x00,0xc0,0x60,0x04,0x56,
	0x04,0x57,0xa8,0x33,0x80,0x3f,0xa0,0x73,
	0x80,0x3f,0x05,0x25,0xd0,0x40,0x78,0x01,
	0x07,0x20,0xd0,0x80,0xa0,0xb3,0xa8,0x3e,
	0x00,0x28,0xd0,0x50,0xd0,0x00,0x60,0x01,
	0x00,0x29,0xd0,0x68,0x70,0x41,0xce,0x01,
	0xc1,0x81,0x02,0x46,0xd5,0x80,0x02,0x06,
	0x00,0x20,0xd0,0x48,0x0d,0xea,0xd0,0x2d,
	0xa0,0x32,0xb0,0x41,0xf8,0x38,0x00,0xc6,
	0x00,0x20,0xd0,0x00,0x07,0x61,0xd8,0x60,
	0xf0,0x70,0x00,0xe4,0xd0,0x04,0x70,0x80,
	0x0a,0x30,0xd0,0x00,0x30,0x02,0xec,0x49,
	0xe0,0x51,0x00,0xe4,0xd0,0x4c,0x70,0x41,
	0x30,0x42,0xb0,0x70,0xc0,0x02,0xc8,0x41,
	0xf0,0x70,0x01,0x46,0x00,0x28,0xd0,0x50,
	0x0f,0xef,0xd0,0x3f,0x60,0x01,0xc0,0x41,
	0x04,0x6e,0xd0,0x3c,0x00,0x20,0xd0,0x60,
	0x00,0x4a,0x7c,0x80,0x00,0x30,0xd0,0x09,
	0xa0,0x38,0x00,0x30,0xd0,0x14,0xa0,0x38,
	0x00,0xc6,0x00,0x2a,0xd0,0x20,0xd0,0x42,
	0x60,0x40,0x00,0x06,0x00,0xa1,0xd0,0x50,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xce,0x00,0x02,0x46,0xc5,0xa1,0x02,0x06,
	0x00,0x30,0xd0,0x08,0xa0,0x38,0xc0,0x00,
	0xc0,0x00,0x02,0x46,0xc8,0x16,0x02,0x06,
	0x18,0x20,0xec,0x77,0x07,0xc5,0x00,0x00,
	0x00,0xa0,0xd0,0x68,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0x04,0xef,0x74,0xf0,
	0x00,0x23,0xd0,0x3f,0x44,0xc0,0x04,0xef,
	0x75,0x74,0x04,0xef,0x75,0xb8,0x04,0xef,
	0x75,0xfc,0x05,0x20,0x76,0x00,0x05,0x20,
	0xd6,0xcc,0x04,0xea,0xd0,0x00,0x70,0x00,
	0x10,0x23,0xf8,0x1b,0xe3,0x00,0x04,0xea,
	0xd0,0x00,0x70,0x40,0x10,0x60,0xfb,0x00,
	0x00,0x2a,0xd0,0x20,0x70,0x40,0x00,0x21,
	0xd0,0x0e,0x40,0x40,0xeb,0x00,0x05,0x20,
	0xd0,0x1c,0x70,0x00,0x10,0x22,0xe4,0x68,
	0xd0,0x40,0x05,0x20,0x60,0x50,0x05,0x20,
	0x60,0x5c,0x05,0x20,0x60,0x68,0x05,0x20,
	0x60,0x6c,0x00,0x32,0xd0,0x01,0xa0,0x38,
	0x80,0x3f,0x05,0x20,0x60,0x74,0x05,0x20,
	0x60,0x78,0x05,0x20,0x60,0x7c,0x05,0x21,
	0x60,0x44,0x00,0x32,0xd0,0x00,0xa0,0x38,
	0x80,0x3f,0x05,0x21,0x70,0x80,0x05,0x21,
	0x60,0x40,0x10,0xa0,0xe8,0x61,0x10,0xa1,
	0xe8,0x63,0x10,0xa2,0xe8,0x65,0x10,0xa3,
	0xe8,0x61,0x10,0xa4,0xe8,0x63,0x10,0xa5,
	0xe8,0x65,0x10,0xa6,0xe8,0x61,0x10,0xa7,
	0xe8,0x63,0x10,0xa8,0xe8,0x65,0x10,0xa9,
	0xe8,0x61,0x10,0xaa,0xe8,0x63,0x10,0xab,
	0xe8,0x65,0xd0,0x80,0xe0,0x66,0xd0,0x81,
	0xe0,0x66,0xd0,0x82,0x00,0x22,0x60,0x84,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x04,0x50,
	0x68,0x00,0x07,0x23,0xd0,0x04,0xd0,0x41,
	0x60,0x40,0x04,0xa3,0xd0,0x14,0x66,0x00,
	0xb0,0x3c,0x65,0xc0,0x07,0x24,0xd0,0x00,
	0x65,0x80,0x07,0x24,0xd0,0x04,0x65,0x40,
	0xd5,0x81,0x15,0x60,0xf4,0x80,0xd5,0x82,
	0xd5,0x41,0x15,0xa4,0xf8,0x87,0x07,0x23,
	0x75,0x40,0xd5,0x83,0xe0,0xb2,0x00,0x20,
	0xd0,0x64,0x30,0x55,0xf4,0xb2,0x00,0x21,
	0xd0,0x40,0x35,0x41,0xf8,0x96,0x07,0x23,
	0x75,0x48,0x15,0x60,0xf8,0xb2,0x07,0x23,
	0x75,0x40,0xe0,0xb2,0x15,0x61,0xf8,0x9f,
	0x07,0x23,0x75,0x4c,0x15,0x60,0xf8,0xb2,
	0x07,0x23,0x75,0x40,0xe0,0xb2,0x15,0x62,
	0xf8,0xa8,0x07,0x23,0x75,0x50,0x15,0x60,
	0xf8,0xb2,0x07,0x23,0x75,0x40,0xe0,0xb2,
	0x15,0x63,0xf8,0xb1,0x07,0x23,0x75,0x54,
	0x15,0x60,0xf8,0xb2,0x07,0x23,0x75,0x40,
	0xe0,0xb2,0xd5,0x41,0x07,0x23,0x65,0x40,
	0x00,0x61,0x65,0x7c,0x07,0x23,0x70,0x44,
	0xd0,0x80,0x10,0x61,0xe8,0xc1,0x07,0x24,
	0x70,0xb0,0x10,0x84,0x10,0x62,0xe8,0xc1,
	0x10,0x81,0x04,0xa3,0xd0,0x14,0x20,0x02,
	0xc2,0x95,0xb5,0x41,0x15,0x44,0x20,0x15,
	0x71,0x00,0xc0,0xc4,0x10,0xd8,0x10,0xd2,
	0xd0,0x43,0x40,0xc1,0xc1,0x84,0x11,0x94,
	0xc1,0xc4,0x00,0x2f,0xd0,0x7f,0x41,0xc1,
	0x41,0x81,0xb0,0x3c,0x71,0x40,0xb0,0x3c,
	0x07,0x23,0xd0,0x48,0x70,0x80,0x10,0xa0,
	0xf8,0xde,0xc0,0x8a,0x10,0x98,0x60,0x81,
	0xb0,0x7c,0x70,0x80,0x10,0xa0,0xf8,0xe5,
	0xc0,0x8a,0x00,0x20,0xd8,0x3f,0x40,0xa0,
	0x60,0x81,0xb0,0x3c,0xb0,0x7c,0x70,0x80,
	0x10,0xa0,0xf8,0xef,0xc0,0x8a,0x10,0x98,
	0x60,0x81,0xb0,0x7c,0x70,0x80,0x10,0xa0,
	0xf8,0xf6,0xc0,0x8a,0x00,0x20,0xd8,0x3f,
	0x40,0xa0,0x60,0x81,0x15,0xa5,0xe9,0x08,
	0xc0,0x45,0x10,0x58,0x10,0x52,0xd0,0x83,
	0x40,0x42,0x10,0x61,0xe9,0x1c,0x15,0xa1,
	0xe9,0x08,0x15,0xa3,0xe9,0x1c,0xe1,0x7a,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x00,0x50,
	0xe9,0x0f,0xd1,0x01,0xe1,0x13,0x11,0x16,
	0x11,0x14,0xd0,0x43,0x41,0x01,0x07,0x24,
	0xd0,0x00,0xb1,0x01,0x11,0x03,0x20,0x04,
	0x70,0xc0,0xb0,0x3c,0x72,0xc0,0xe1,0x37,
	0x06,0xe5,0xd0,0x1c,0x01,0x46,0x78,0x00,
	0x04,0x53,0x68,0x00,0x06,0xe5,0xd0,0x20,
	0x62,0x80,0x00,0xc6,0x11,0x16,0x11,0x14,
	0xd0,0x43,0x41,0x01,0x07,0x24,0xd0,0x18,
	0xb1,0x01,0x11,0x03,0x20,0x04,0x70,0xc0,
	0xb0,0x3c,0x72,0xc0,0x05,0xe0,0xd0,0x34,
	0x78,0x00,0x04,0x1b,0x68,0x00,0xc2,0x05,
	0x12,0x14,0xc2,0x45,0x00,0x2f,0xd0,0x3f,
	0x42,0x40,0x03,0xd1,0xe9,0x41,0xb1,0xb6,
	0xb1,0xf6,0x02,0x20,0xd0,0x40,0x52,0x41,
	0x05,0xaf,0xd0,0x18,0x73,0x00,0x00,0x06,
	0xb0,0x3c,0x73,0x40,0x00,0x06,0xb1,0xff,
	0x0f,0xef,0xd0,0x7f,0x00,0xef,0xd0,0xbf,
	0x01,0x46,0x00,0x65,0xd0,0x34,0xa0,0x36,
	0x80,0x3f,0xa2,0x34,0xa2,0x74,0xa1,0xb4,
	0xa0,0xf4,0xa2,0xf4,0xa1,0xf4,0xa3,0x34,
	0xa3,0x74,0xa0,0xb4,0xa0,0x74,0x80,0x3f,
	0x00,0xc6,0x04,0xa2,0xd0,0xbc,0x00,0xe5,
	0xd0,0x34,0x01,0x46,0xa0,0x36,0x80,0x3f,
	0x04,0x0b,0x6d,0x02,0x00,0x06,0x00,0xc6,
	0x04,0xa2,0xd0,0x7c,0x05,0xaf,0xd0,0x34,
	0x60,0x40,0xe1,0x7e,0xc0,0x00,0x00,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xd0,0x40,0x05,0xaf,
	0xd0,0x34,0x60,0x40,0xd0,0x04,0x60,0x1b,
	0x00,0x2a,0xd0,0x68,0x60,0x01,0x00,0x2a,
	0xd0,0x64,0x00,0x20,0xd0,0x27,0x60,0x01,
	0x00,0xa1,0xd0,0x48,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x04,0xea,0x70,0x00,
	0x10,0x23,0xf8,0x05,0xe3,0x00,0x00,0x2a,
	0x70,0x60,0x00,0x2f,0xd0,0x3e,0x40,0x40,
	0xeb,0x00,0x15,0x60,0xe7,0x00,0x15,0x62,
	0xef,0x00,0x15,0xa0,0xe7,0x00,0x15,0xa3,
	0xef,0x00,0x15,0x60,0xe8,0x22,0x15,0x61,
	0xe8,0x20,0x05,0x26,0xd0,0x60,0xd0,0x00,
	0x60,0x01,0x05,0x27,0xd0,0x6c,0x00,0xac,
	0xd0,0x38,0x60,0x01,0xd5,0x80,0xe0,0x22,
	0x05,0xe1,0xd0,0x1c,0xd0,0x41,0x60,0x40,
	0xd0,0x40,0x05,0x65,0x60,0x60,0x04,0xef,
	0xd0,0x60,0x70,0x01,0x10,0x20,0xe8,0x42,
	0x04,0xef,0xd0,0x64,0x70,0x41,0x10,0x60,
	0xf8,0x42,0x15,0x61,0xf8,0x42,0x05,0x26,
	0xd0,0x60,0xd0,0x00,0x60,0x01,0x05,0x27,
	0xd0,0x6c,0x00,0xac,0xd0,0x38,0x60,0x01,
	0x05,0x27,0xd0,0x64,0xd0,0x01,0x60,0x01,
	0x04,0xef,0xd0,0x24,0x65,0x40,0x04,0xef,
	0xd0,0x60,0xd0,0x01,0x60,0x01,0x04,0xef,
	0xd0,0x28,0x65,0x80,0x04,0xef,0xd0,0x2c,
	0x65,0x80,0xf3,0x15,0xd0,0x00,0x04,0xee,
	0xd0,0x6c,0x05,0x26,0xd0,0xbc,0x70,0x82,
	0x10,0xa0,0xe8,0x59,0xd0,0x01,0x60,0x01,
	0x04,0xef,0xd0,0x10,0x70,0x40,0x10,0x60,
	0xe8,0x76,0xd0,0x40,0x60,0x40,0x05,0x25,
	0xd0,0x38,0x70,0x80,0x05,0x25,0xd0,0x74,
	0x70,0xc1,0x60,0xc0,0x60,0x81,0x00,0x20,
	0xd0,0x00,0x05,0x26,0x60,0x20,0xd0,0x00,
	0x04,0xee,0x60,0x2c,0x15,0x62,0xf8,0x76,
	0x04,0xef,0xd0,0x60,0xd0,0x02,0x60,0x01,
	0xd0,0x02,0x05,0x26,0x60,0x34,0xd0,0x00,
	0x04,0xee,0x60,0x10,0x04,0xed,0x60,0x08,
	0x04,0xeb,0xd0,0x68,0x70,0x81,0x10,0xa0,
	0xe8,0x8a,0xd0,0x00,0x60,0x01,0x04,0xeb,
	0x60,0x20,0x04,0xeb,0x60,0x24,0xe0,0x96,
	0x00,0x2a,0xd0,0x20,0x70,0x00,0x10,0x22,
	0xe8,0x96,0x00,0x28,0xd0,0x40,0x30,0x40,
	0xf8,0xa3,0xd0,0x00,0x05,0x65,0x60,0x20,
	0xd0,0x01,0x04,0xeb,0x60,0x10,0x00,0xa2,
	0xdb,0xd0,0x00,0x62,0xdc,0x23,0x00,0x6e,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x04,0xea,0x70,0x80,0x10,0xa2,
	0xf8,0xce,0x04,0xef,0xd0,0x64,0x70,0x01,
	0x10,0x22,0xf8,0xc2,0x00,0x2a,0xd0,0x60,
	0x70,0x41,0x10,0x64,0xe8,0xc2,0x05,0xe8,
	0xd0,0x00,0x90,0x61,0x80,0x3f,0x40,0x40,
	0xf8,0xb3,0x80,0x1d,0x80,0x3f,0xf1,0x03,
	0x03,0x20,0xd0,0x34,0x10,0x08,0x10,0x01,
	0xb0,0x3f,0x84,0x22,0x80,0x3f,0xa0,0x23,
	0xd8,0x00,0x00,0x24,0xd0,0x30,0xa0,0x36,
	0x80,0x3f,0xa8,0x34,0x05,0x6a,0xd0,0x54,
	0x03,0x20,0xd0,0x00,0x60,0x01,0xe0,0xd8,
	0x15,0x61,0xe8,0xd8,0xf1,0xb9,0x00,0xa0,
	0xd0,0x78,0x00,0x20,0xd7,0xd2,0x17,0xe0,
	0x07,0xc4,0xf3,0x00,0x16,0x20,0xf8,0xe9,
	0xf1,0xb9,0x00,0xa0,0xd0,0x48,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf2,0xb0,
	0x00,0xa0,0xd0,0x40,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0xf2,0xb0,0x05,0x26,
	0xd0,0x38,0x78,0x00,0x04,0x11,0x68,0x00,
	0x00,0x2a,0xd0,0x20,0xd0,0x50,0x60,0x40,
	0x06,0xe5,0xd0,0x1c,0x01,0x46,0x78,0x00,
	0x04,0x54,0x68,0x00,0x00,0xc6,0x05,0x63,
	0xd0,0x54,0xd0,0x00,0x60,0x01,0x00,0xa6,
	0xd0,0x78,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x84,0x22,0x02,0x38,0xd0,0x00,
	0xa0,0x23,0x00,0x28,0x70,0xf4,0x80,0x22,
	0xa0,0xe3,0x00,0x28,0x71,0x30,0x81,0x22,
	0xa1,0x23,0xc0,0x03,0x30,0x04,0x05,0x6d,
	0x60,0x00,0x04,0xea,0x70,0x00,0x10,0x22,
	0xe9,0x1e,0x10,0x24,0xe9,0x33,0x00,0xf5,
	0xd0,0x00,0x05,0x6a,0x70,0x60,0xe1,0x49,
	0x04,0xeb,0x70,0x10,0x10,0x21,0xe9,0x2e,
	0x01,0x46,0x02,0x46,0xc8,0x1a,0x02,0x06,
	0x00,0xc6,0x00,0x23,0xd0,0x60,0x0c,0x11,
	0xfd,0x2e,0x00,0xf0,0xd0,0x00,0xe1,0x30,
	0x0c,0x20,0xd0,0x00,0x00,0x28,0xd0,0x40,
	0xe1,0x49,0x04,0xeb,0xd0,0x10,0x70,0x00,
	0x10,0x21,0xe9,0x44,0x02,0x46,0xc8,0x1a,
	0x02,0x06,0x00,0x23,0xd0,0x60,0x0c,0x11,
	0xfd,0x44,0x00,0xf0,0xd0,0x00,0x00,0x28,
	0xd0,0x40,0xe1,0x49,0x00,0xf5,0xd0,0x00,
	0x04,0x20,0xd0,0x40,0x10,0x42,0x05,0x6a,
	0x60,0x54,0x05,0x6a,0x60,0x10,0x05,0x6a,
	0x60,0x0c,0x80,0xe2,0xa1,0x23,0x83,0x22,
	0xa1,0x23,0xd0,0x00,0x00,0x20,0xd0,0x90,
	0x30,0x02,0x10,0x02,0x80,0x62,0xa0,0x23,
	0x30,0xc4,0x00,0x27,0x70,0x3c,0x30,0xc0,
	0x80,0xa2,0xa0,0xe3,0xd0,0x40,0x05,0x6d,
	0x60,0x48,0x05,0x6c,0x60,0x64,0x05,0x6c,
	0x60,0x68,0x05,0x6c,0x60,0x70,0x00,0x2d,
	0x70,0x00,0x05,0x67,0x60,0x18,0x00,0x2d,
	0x70,0x20,0x05,0x67,0x60,0x1c,0x00,0x2e,
	0x70,0x00,0x05,0x67,0x60,0x20,0x00,0x28,
	0x70,0x1c,0x10,0x27,0xe9,0x7b,0x10,0x28,
	0xf9,0x83,0x05,0x65,0x70,0x30,0x05,0x67,
	0x60,0x24,0x05,0x65,0x70,0x34,0x05,0x67,
	0x60,0x28,0x05,0x67,0xd0,0x00,0x05,0x66,
	0x60,0x38,0x05,0x66,0x60,0x3c,0xd0,0x00,
	0x05,0x65,0x60,0x24,0x05,0x69,0x60,0x10,
	0x05,0x68,0x60,0x14,0x05,0x69,0x60,0x08,
	0x05,0x69,0x60,0x04,0x05,0x68,0x60,0x1c,
	0x05,0x66,0x60,0x08,0x05,0x66,0x60,0x0c,
	0x05,0x65,0x60,0x28,0x05,0x66,0x60,0x18,
	0x05,0x67,0x60,0x00,0x05,0x67,0x60,0x04,
	0x05,0x67,0x60,0x08,0x05,0x67,0x60,0x0c,
	0x05,0x67,0x60,0x10,0xd0,0x02,0x05,0x67,
	0x60,0x14,0x00,0x28,0x70,0x38,0x05,0x67,
	0x60,0x2c,0x00,0x2f,0xd0,0x70,0x20,0x01,
	0x05,0x67,0x60,0x30,0x00,0x28,0x70,0x3c,
	0x05,0x67,0x60,0x34,0x07,0xc5,0x03,0xd1,
	0xf9,0xc4,0x01,0x46,0x02,0x46,0xc8,0x18,
	0x02,0x06,0x18,0x1c,0x00,0xc6,0x18,0x2f,
	0xe5,0xb9,0xe1,0xcc,0x01,0x46,0x02,0x46,
	0xc8,0x18,0x02,0x06,0x18,0x1b,0x00,0xc6,
	0x18,0x29,0xe5,0xc4,0x07,0xc5,0x00,0x00,
	0x00,0x2a,0xd0,0x20,0x70,0x40,0x00,0x2f,
	0xd0,0x3e,0x40,0x40,0xeb,0x00,0x15,0x60,
	0xe7,0x00,0x15,0x61,0xef,0x00,0x15,0xa0,
	0xe7,0x00,0x15,0xa3,0xef,0x00,0x00,0x2a,
	0x70,0x60,0x00,0x28,0xd0,0x00,0x30,0x01,
	0xe8,0x33,0xd0,0x01,0x05,0x65,0x60,0x20,
	0x05,0x65,0x60,0x2c,0x00,0x2d,0x70,0x00,
	0x05,0x67,0x60,0x18,0x00,0x2d,0x70,0x20,
	0x05,0x67,0x60,0x1c,0x00,0x2e,0x70,0x00,
	0x05,0x67,0x60,0x20,0xd0,0x00,0x05,0x65,
	0x60,0x24,0x05,0x67,0x60,0x00,0x05,0x67,
	0x60,0x04,0x05,0x67,0x60,0x08,0x05,0x67,
	0x60,0x0c,0x05,0x67,0x60,0x10,0xd0,0x02,
	0x05,0x67,0x60,0x14,0x05,0xe1,0xd0,0x1c,
	0xd0,0x40,0x60,0x40,0xf3,0x15,0xd0,0x00,
	0x04,0xee,0xd0,0x6c,0x60,0x01,0x00,0x28,
	0xd0,0x00,0x00,0x2a,0x60,0x20,0xd0,0x00,
	0x04,0xef,0x60,0x20,0x04,0xef,0x60,0x24,
	0x04,0xef,0x60,0x28,0x04,0xef,0x60,0x2c,
	0x04,0xeb,0x60,0x28,0x04,0xeb,0x60,0x20,
	0x04,0xeb,0x60,0x24,0x04,0xed,0x60,0x08,
	0x04,0xee,0x60,0x10,0xd0,0x02,0x05,0x26,
	0x60,0x34,0xd0,0x40,0x00,0x2b,0x60,0x68,
	0x00,0x2b,0x60,0x6c,0x00,0x2b,0x60,0x64,
	0x00,0x2b,0x60,0x78,0x05,0x6e,0x60,0x74,
	0x05,0x6e,0x60,0x6c,0xd0,0x41,0x05,0x62,
	0x60,0x44,0x06,0xe5,0xd0,0x1c,0x01,0x46,
	0x78,0x00,0x04,0x54,0x68,0x00,0x00,0xc6,
	0x00,0xa6,0xd0,0x78,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0x2a,0xd0,0x20,
	0x70,0x40,0x00,0x2f,0xd0,0x3e,0x40,0x40,
	0xeb,0x00,0x15,0x62,0xe7,0x00,0x00,0x21,
	0xd0,0x00,0x30,0x15,0xe7,0x00,0x15,0xa0,
	0xe7,0x00,0x15,0xa3,0xef,0x00,0x03,0xd1,
	0xe8,0x18,0x05,0x26,0x70,0x18,0x10,0x20,
	0xf8,0x18,0xe3,0x00,0xf3,0x15,0x05,0x65,
	0x70,0x20,0x10,0x20,0xf8,0x1f,0x05,0x67,
	0x60,0x38,0x15,0xa3,0xf8,0x29,0x05,0x67,
	0x70,0x38,0x10,0x20,0xf8,0xa0,0xd0,0x01,
	0x05,0x67,0x60,0x3c,0xe0,0x2e,0xd0,0x00,
	0x05,0x67,0x60,0x38,0x05,0x67,0x60,0x3c,
	0x00,0x2a,0x70,0x60,0x00,0x28,0xd0,0x00,
	0x30,0x01,0xe8,0xa0,0x05,0x65,0x70,0x60,
	0x10,0x60,0xf8,0xa0,0x05,0x67,0x70,0x3c,
	0x05,0x67,0x60,0x38,0x01,0x46,0x07,0xa0,
	0xd0,0x00,0x84,0x22,0x80,0x3f,0xa0,0x23,
	0x80,0x3f,0x00,0xc6,0x00,0xa0,0xd0,0x58,
	0x00,0x20,0xd7,0xd2,0x17,0xe0,0x07,0xc4,
	0xf3,0x00,0x00,0x20,0xd0,0x0c,0xa0,0x1c,
	0x80,0x3f,0x00,0x21,0xd0,0x00,0xa0,0x38,
	0x80,0x3f,0xf0,0xee,0x00,0xa0,0xd0,0x78,
	0x00,0x20,0xd7,0xd2,0x17,0xe0,0x07,0xc4,
	0xf3,0x00,0x00,0xa0,0xd0,0x48,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf2,0xb0,
	0x00,0x28,0x70,0x1c,0x10,0x23,0xe8,0x74,
	0x10,0x26,0xe8,0x74,0x10,0x21,0xe8,0x6f,
	0x10,0x27,0xe8,0x7d,0x10,0x28,0xe8,0x7d,
	0xe0,0x82,0x00,0x29,0x70,0x28,0x81,0x22,
	0xa0,0x23,0xe0,0x82,0x09,0xff,0xdf,0x00,
	0x80,0x22,0xa0,0x23,0x00,0x29,0x70,0x20,
	0x81,0x22,0xa0,0x23,0xe0,0x82,0x05,0x65,
	0x70,0x30,0x80,0x22,0xa0,0x23,0xe0,0x82,
	0x01,0x46,0x06,0xa0,0xd0,0x01,0x84,0x22,
	0x80,0x3f,0xa0,0x23,0x80,0x3f,0x00,0xc6,
	0x06,0xe5,0xd0,0x1c,0x01,0x46,0x78,0x00,
	0x04,0x54,0x68,0x00,0x00,0xc6,0xf1,0xa4,
	0x80,0x3f,0x01,0x46,0x80,0xa2,0x80,0x3f,
	0x90,0x23,0x50,0x00,0x00,0xc6,0x10,0x20,
	0xec,0x91,0xd0,0x01,0x05,0x65,0x60,0x20,
	0x05,0x65,0x60,0x2c,0xc0,0x15,0x05,0x67,
	0x60,0x14,0xd0,0x41,0x04,0xee,0x60,0x6c,
	0x00,0x28,0xd0,0x00,0x00,0x2a,0x60,0x20,
	0xd0,0x00,0x04,0xef,0x60,0x10,0x04,0xef,
	0x60,0x20,0x04,0xef,0x60,0x24,0x04,0xef,
	0x60,0x28,0x04,0xef,0x60,0x2c,0x04,0xeb,
	0x60,0x28,0x04,0xeb,0x60,0x20,0x04,0xeb,
	0x60,0x24,0x04,0xed,0x60,0x08,0x04,0xee,
	0x60,0x10,0x05,0xe1,0x60,0x5c,0xd0,0x02,
	0x05,0x26,0x60,0x34,0xd0,0x40,0x00,0x2b,
	0x60,0x68,0x00,0x2b,0x60,0x6c,0x00,0x2b,
	0x60,0x64,0x00,0x2b,0x60,0x78,0x05,0x6e,
	0x60,0x74,0x05,0x6e,0x60,0x6c,0x05,0x68,
	0x60,0x40,0x05,0x68,0x60,0x44,0x05,0x66,
	0x60,0x58,0x05,0x66,0x60,0x70,0xd0,0x41,
	0x05,0x62,0x60,0x44,0x05,0x65,0x70,0x00,
	0x00,0x62,0x60,0x28,0xd0,0x03,0x04,0xee,
	0xd0,0x9c,0x70,0x42,0x60,0x01,0x00,0x2a,
	0xd0,0x68,0x60,0x01,0x00,0xa6,0xd0,0x78,
	0xd0,0x12,0x00,0x63,0xd7,0xcc,0x00,0x05,
	0x84,0x22,0x02,0x38,0xd0,0x00,0xa0,0x23,
	0x00,0x28,0x71,0xb4,0x80,0x22,0xa1,0xa3,
	0x00,0x28,0x71,0xf0,0x81,0x22,0xa1,0xe3,
	0xc0,0x06,0x30,0x07,0x05,0x6d,0x60,0x00,
	0x04,0xea,0x70,0x00,0x10,0x22,0xe9,0x09,
	0x10,0x24,0xe9,0x1e,0x00,0xf5,0xd0,0x00,
	0x05,0x6a,0x71,0x20,0xe1,0x34,0x04,0xeb,
	0x70,0x10,0x10,0x21,0xe9,0x19,0x01,0x46,
	0x02,0x46,0xc8,0x1a,0x02,0x06,0x00,0xc6,
	0x00,0x23,0xd1,0x20,0x0c,0x14,0xfd,0x19,
	0x00,0xf0,0xd0,0x00,0xe1,0x1b,0x0c,0x20,
	0xd0,0x00,0x00,0x28,0xd1,0x00,0xe1,0x34,
	0x04,0xeb,0xd0,0x10,0x70,0x00,0x10,0x21,
	0xe9,0x2f,0x02,0x46,0xc8,0x1a,0x02,0x06,
	0x00,0x23,0xd1,0x20,0x0c,0x14,0xfd,0x2f,
	0x00,0xf0,0xd0,0x00,0x00,0x28,0xd1,0x00,
	0xe1,0x34,0x00,0xf5,0xd0,0x00,0x04,0x20,
	0xd1,0x00,0x11,0x02,0x05,0x6a,0x61,0x14,
	0x05,0x6a,0x60,0x10,0x05,0x6a,0x60,0x0c,
	0x80,0xe2,0xa1,0xe3,0x83,0x22,0xa1,0xe3,
	0xd0,0x00,0x00,0x20,0xd1,0x50,0x30,0x05,
	0x10,0x02,0x80,0x62,0xa0,0x23,0x31,0x87,
	0x00,0x27,0x70,0x3c,0x31,0x80,0x80,0xa2,
	0xa1,0xa3,0xd1,0x00,0x05,0x6d,0x61,0x08,
	0x05,0x6c,0x61,0x24,0x05,0x6c,0x61,0x28,
	0x05,0x6c,0x61,0x30,0x00,0x2d,0x70,0x00,
	0x05,0x67,0x60,0x18,0x00,0x2d,0x70,0x20,
	0x05,0x67,0x60,0x1c,0x00,0x2e,0x70,0x00,
	0x05,0x67,0x60,0x20,0x00,0x28,0x70,0x1c,
	0x10,0x27,0xe9,0x66,0x10,0x28,0xf9,0x6e,
	0x05,0x65,0x70,0x30,0x05,0x67,0x60,0x24,
	0x05,0x65,0x70,0x34,0x05,0x67,0x60,0x28,
	0x05,0x67,0xd0,0x00,0x05,0x66,0x60,0x38,
	0x05,0x66,0x60,0x3c,0xd0,0x00,0x05,0x65,
	0x60,0x24,0x05,0x69,0x60,0x10,0x05,0x68,
	0x60,0x14,0x05,0x69,0x60,0x08,0x05,0x69,
	0x60,0x04,0x05,0x68,0x60,0x1c,0x05,0x66,
	0x60,0x08,0x05,0x66,0x60,0x0c,0x05,0x65,
	0x60,0x28,0x05,0x66,0x60,0x18,0x05,0x67,
	0x60,0x00,0x05,0x67,0x60,0x04,0x05,0x67,
	0x60,0x08,0x05,0x67,0x60,0x0c,0x05,0x67,
	0x60,0x10,0xd0,0x02,0x05,0x67,0x60,0x14,
	0x00,0x28,0x70,0x38,0x05,0x67,0x60,0x2c,
	0x00,0x2f,0xd1,0x30,0x20,0x04,0x05,0x67,
	0x60,0x30,0x00,0x28,0x70,0x3c,0x05,0x67,
	0x60,0x34,0x07,0xc5,0x00,0xef,0xd2,0x3c,
	0x01,0x46,0x59,0x88,0x39,0x88,0x00,0x24,
	0xd2,0x14,0x59,0x88,0x00,0xc6,0x07,0xc5,
	0x04,0xea,0xd1,0xc0,0x71,0xc7,0x11,0xe3,
	0xf8,0x06,0xe3,0x00,0x00,0x2a,0xd2,0x20,
	0x71,0xc8,0x00,0x20,0xd2,0x02,0x41,0xc8,
	0xeb,0x00,0x15,0xa0,0xe7,0x00,0x00,0x2a,
	0xd1,0xc0,0x71,0xc7,0x00,0x2a,0xd2,0x04,
	0x72,0x08,0x32,0x07,0x12,0x1e,0x32,0x16,
	0xe7,0x00,0x15,0x60,0xe7,0x00,0xd2,0x03,
	0x42,0x15,0x12,0x20,0xfb,0x00,0xc2,0x15,
	0x12,0x10,0x12,0x1a,0xd2,0x43,0x42,0x09,
	0x12,0x21,0xe8,0x2b,0x12,0x20,0xfb,0x00,
	0x31,0xd5,0xfb,0x00,0xe0,0x52,0x00,0x21,
	0xd1,0xe0,0x72,0x07,0x12,0x1a,0x00,0x23,
	0xd2,0x7f,0x42,0x09,0x12,0x0f,0xb2,0x01,
	0xc2,0x56,0xb2,0x41,0x12,0x42,0xc0,0x49,
	0x32,0x09,0x0f,0xef,0xd2,0x7f,0x12,0x46,
	0x0f,0xef,0xd2,0xbf,0x52,0x4a,0x42,0x55,
	0x32,0x09,0xe7,0x00,0xc1,0xd5,0x00,0x2a,
	0xd2,0x00,0x72,0x08,0xc2,0x56,0xb1,0xff,
	0xb2,0x3e,0x01,0x46,0x72,0x87,0xb1,0xfc,
	0x11,0xe0,0x62,0x88,0x00,0xc6,0xb2,0x3c,
	0xb2,0x41,0xec,0x49,0xf3,0x15,0xd1,0xc0,
	0x04,0xee,0xd2,0x2c,0x61,0xc8,0xd1,0xc0,
	0x04,0xef,0x61,0xd0,0xd1,0xc0,0x05,0x65,
	0x61,0xe0,0x04,0xef,0x61,0xe0,0x04,0xef,
	0x61,0xe4,0x04,0xef,0x61,0xe8,0x04,0xef,
	0x61,0xec,0x04,0xeb,0x61,0xe8,0x04,0xeb,
	0x61,0xe0,0x04,0xeb,0x61,0xe4,0x04,0xed,
	0x61,0xc8,0x04,0xee,0x61,0xd0,0xd1,0xc2,
	0x05,0x26,0x61,0xf4,0x04,0xed,0xd1,0xc8,
	0xd2,0x01,0x62,0x07,0xd2,0x00,0x05,0x62,
	0x62,0x28,0x05,0x62,0x62,0x24,0x00,0xa2,
	0xdb,0xd8,0x00,0x62,0xdc,0x05,0x00,0x6e,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0xa0,0xd0,0x48,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf2,0xb0,
	0x00,0xa0,0xd0,0x78,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0xf3,0x00,0x00,0x2a,
	0xd1,0xe0,0xd2,0x04,0x62,0x07,0x05,0x6a,
	0xd1,0xcc,0xd2,0x00,0x62,0x07,0x00,0x28,
	0xd1,0xf4,0x71,0xc7,0x01,0x46,0x80,0xe2,
	0x80,0x3f,0xa1,0xe3,0x00,0xc6,0xd1,0xc0,
	0x00,0x21,0xd2,0x40,0x31,0xc9,0x01,0x46,
	0x80,0xa2,0x80,0x3f,0xa1,0xe3,0x00,0xc6,
	0x05,0x6d,0x71,0xc0,0x01,0x46,0x80,0x62,
	0x80,0x3f,0xa1,0xe3,0x00,0xc6,0x01,0x46,
	0x00,0x21,0xd1,0xc0,0xa1,0xf8,0x80,0x3f,
	0x00,0xc6,0x06,0xe5,0xd1,0xdc,0x01,0x46,
	0x78,0x07,0x04,0x54,0x68,0x07,0x00,0xc6,
	0x00,0xa6,0xd0,0x78,0xd0,0x12,0x00,0x63,
	0xd7,0xcc,0x00,0x05,0x04,0xea,0xd0,0x00,
	0x70,0x00,0x10,0x23,0xf8,0x06,0xe3,0x00,
	0x04,0xea,0xd0,0x00,0x70,0x40,0x10,0x62,
	0xfb,0x00,0x00,0x2a,0xd0,0x20,0x70,0x40,
	0x00,0x2f,0xd0,0x3e,0x40,0x40,0xeb,0x00,
	0x15,0x60,0xe7,0x00,0x15,0x62,0xef,0x00,
	0x15,0xa0,0xfb,0x00,0xd0,0x00,0x00,0x24,
	0xd0,0x70,0xa0,0x76,0x80,0x3f,0xa0,0x34,
	0xf3,0x15,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x04,0xea,0xd2,0x80,0x72,0x8a,0x12,0xa3,
	0xf8,0x06,0xe3,0x00,0x00,0x2a,0xd2,0xa0,
	0x72,0xca,0x00,0x29,0xd2,0xbe,0x42,0xca,
	0xeb,0x00,0x05,0xe1,0xd2,0x9c,0xd2,0xc1,
	0x62,0xca,0xd2,0xc0,0x05,0x65,0x62,0xe0,
	0x04,0xea,0x72,0xc0,0x12,0xe2,0xe8,0x42,
	0x12,0xe1,0xe8,0x42,0x05,0x27,0x72,0xc4,
	0x12,0xe0,0xe4,0x44,0x00,0x27,0x78,0x34,
	0x00,0x10,0xf8,0x44,0x05,0x26,0x72,0xfc,
	0x12,0xe0,0xf8,0x42,0x04,0xeb,0x72,0xd0,
	0x12,0xe1,0xf8,0x42,0x04,0xed,0x72,0xc8,
	0x12,0xe0,0xf8,0x42,0x05,0xac,0x72,0xd8,
	0x12,0xe3,0xf8,0x42,0x05,0x27,0x72,0xc0,
	0x12,0xe1,0xe8,0x42,0x05,0xe1,0x72,0xdc,
	0x12,0xe0,0xf8,0x44,0x05,0x27,0x72,0xc4,
	0x12,0xe1,0xf8,0x42,0x05,0x27,0x72,0xc0,
	0x12,0xe2,0xe8,0x44,0xd2,0xc0,0xe0,0x45,
	0xd2,0xc1,0x05,0x62,0x62,0xe8,0x05,0x62,
	0x62,0xe0,0x05,0x62,0x62,0xe4,0xf3,0x15,
	0x04,0xee,0xd2,0xac,0xd2,0xc0,0x62,0xca,
	0x04,0xef,0xd2,0x90,0x72,0xca,0x12,0xe0,
	0xe8,0x64,0xd2,0xc0,0x62,0xca,0x05,0x25,
	0xd2,0xb8,0x73,0x0a,0x05,0x25,0xd2,0xf4,
	0x73,0x4b,0x63,0x4a,0x63,0x0b,0x05,0x26,
	0xd2,0xa0,0x00,0x20,0xd2,0xc0,0x62,0xca,
	0xd2,0x80,0x04,0xef,0xd2,0xe0,0x73,0x0b,
	0x13,0x20,0xf8,0x6c,0x62,0x8b,0xe0,0x80,
	0x04,0xef,0x73,0x24,0x13,0x22,0xe8,0x7d,
	0x13,0x20,0xf8,0x80,0xd3,0x40,0x05,0x26,
	0x63,0x60,0x05,0x27,0xd3,0x2c,0x00,0xac,
	0xd3,0x78,0x63,0x4c,0xd3,0x41,0x05,0x27,
	0x63,0x64,0xd3,0x42,0x04,0xef,0x63,0x60,
	0x04,0xef,0x62,0xa4,0x04,0xef,0x62,0xa8,
	0x04,0xef,0x62,0xac,0x04,0xef,0x62,0x94,
	0x04,0xed,0x62,0x88,0xd2,0x82,0x05,0x26,
	0x62,0xb4,0x04,0xeb,0xd2,0xe8,0x73,0x0b,
	0x13,0x20,0xe8,0x99,0xd2,0x80,0x62,0x8b,
	0x04,0xeb,0x62,0xa0,0x04,0xeb,0x62,0xa4,
	0xe0,0xa4,0x00,0x2a,0x72,0xa0,0x12,0xa2,
	0xe8,0xa4,0x00,0x28,0xd2,0xc0,0x32,0xca,
	0xf8,0xb4,0xd2,0x80,0x05,0x65,0x62,0xa0,
	0xd2,0x81,0x04,0xee,0x62,0x90,0xd2,0x81,
	0x04,0xeb,0x62,0x90,0x00,0xa2,0xdb,0xe8,
	0x00,0x62,0xdc,0x3a,0x00,0x6e,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x01,0x46,0x00,0x21,0xd2,0x80,0xa2,0xb8,
	0x80,0x3f,0x00,0xc6,0xf0,0xfb,0x00,0xa0,
	0xd0,0x48,0x00,0x20,0xd7,0xd2,0x17,0xe0,
	0x07,0xc4,0xf2,0xb0,0x00,0xa0,0xd0,0x40,
	0x00,0x20,0xd7,0xd2,0x17,0xe0,0x07,0xc4,
	0xf2,0xb0,0xd2,0x84,0x00,0x2a,0x62,0xa0,
	0xd2,0x81,0x05,0x29,0x62,0x84,0x04,0xea,
	0x72,0x80,0xb2,0x82,0xf8,0xde,0x00,0xa4,
	0xd8,0x30,0xa8,0x36,0x80,0x3f,0x98,0x34,
	0x04,0x1e,0x00,0x24,0xd2,0xf0,0xa2,0xf6,
	0x80,0x3f,0xa8,0x34,0x06,0xe5,0xd2,0x9c,
	0x01,0x46,0x78,0x0a,0x04,0x54,0x68,0x0a,
	0x00,0xc6,0x01,0x46,0x05,0xe6,0xd2,0xb0,
	0x72,0xca,0xb2,0xff,0x0b,0xd4,0x62,0xca,
	0x00,0x06,0x00,0xc6,0x05,0x60,0xd2,0xac,
	0x72,0xca,0x12,0xe1,0xfc,0xf5,0xd2,0xc1,
	0x62,0xca,0x00,0xa6,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x03,0xd1,
	0xf9,0x06,0x01,0x46,0x02,0x46,0xc8,0x18,
	0x02,0x06,0x18,0x1c,0x00,0xc6,0x18,0x2f,
	0xe4,0xfb,0xe1,0x0e,0x01,0x46,0x02,0x46,
	0xc8,0x18,0x02,0x06,0x18,0x1b,0x00,0xc6,
	0x18,0x29,0xe5,0x06,0x07,0xc5,0x00,0x00,
	0x04,0xea,0xd0,0x00,0x70,0x00,0x10,0x23,
	0xf8,0x06,0xe3,0x00,0x00,0x2a,0xd0,0x20,
	0x70,0x40,0x00,0x2f,0xd0,0x3e,0x40,0x40,
	0xeb,0x00,0x15,0x62,0xe7,0x00,0x00,0x21,
	0xd0,0x00,0x30,0x15,0xe7,0x00,0x05,0xe1,
	0xd0,0x1c,0xd0,0x41,0x60,0x40,0xd0,0x40,
	0x05,0x65,0x60,0x60,0x05,0x26,0xd0,0x34,
	0x65,0x40,0xf3,0x15,0xd0,0x00,0x04,0xee,
	0xd0,0x6c,0x05,0x26,0xd0,0xbc,0x70,0x82,
	0x10,0xa0,0xe8,0x27,0xd0,0x01,0x60,0x01,
	0x04,0xef,0xd0,0x10,0x70,0x40,0x10,0x60,
	0xe8,0x3e,0xd0,0x40,0x60,0x40,0x05,0x25,
	0xd0,0x38,0x70,0x80,0x05,0x25,0xd0,0x74,
	0x70,0x41,0x60,0x40,0x05,0x25,0xd0,0x74,
	0x60,0x81,0x05,0x26,0xd0,0x20,0x00,0x20,
	0xd0,0x40,0x60,0x40,0xd0,0x00,0x04,0xef,
	0xd0,0x60,0x70,0x81,0x10,0xa0,0xf8,0x46,
	0x60,0x01,0xe0,0x58,0x04,0xef,0xd0,0x64,
	0x70,0x81,0x10,0xa0,0xf8,0x58,0x05,0x26,
	0xd0,0xa0,0xd0,0xc0,0x60,0xc2,0x05,0x27,
	0xd0,0xac,0x00,0xac,0xd0,0xf8,0x60,0xc2,
	0x05,0x27,0xd0,0xa4,0xd0,0xc1,0x60,0xc2,
	0x04,0xef,0xd0,0x60,0x60,0x01,0x04,0xef,
	0xd0,0x64,0x60,0x01,0x04,0xef,0xd0,0x68,
	0x60,0x01,0x04,0xef,0xd0,0x6c,0x60,0x01,
	0xd0,0x00,0x04,0xee,0xd0,0x50,0x60,0x01,
	0x04,0xed,0xd0,0x48,0x60,0x01,0x04,0xeb,
	0xd0,0x68,0x70,0x81,0x10,0xa0,0xe8,0x79,
	0xd0,0x00,0x60,0x01,0x04,0xeb,0xd0,0x60,
	0x60,0x01,0x04,0xeb,0xd0,0x64,0x60,0x01,
	0xe0,0x85,0x00,0x2a,0xd0,0x20,0x70,0x00,
	0x10,0x22,0xe8,0x85,0x00,0x28,0xd0,0x40,
	0x30,0x40,0xf8,0x8f,0xd0,0x00,0x05,0x65,
	0x60,0x20,0x00,0xa2,0xdb,0xf0,0x00,0x62,
	0xdc,0x14,0x00,0x6e,0xd0,0x40,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x01,0x46,
	0x00,0x30,0xd0,0x40,0xa0,0x38,0x00,0xc6,
	0x05,0x60,0xd0,0x14,0xd0,0x41,0x60,0x40,
	0x04,0xeb,0xd0,0x10,0xd0,0x41,0x60,0x40,
	0xf0,0xd0,0x00,0xa0,0xd0,0x48,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0xf2,0xb0,
	0x00,0xa0,0xd0,0x40,0x00,0x20,0xd7,0xd2,
	0x17,0xe0,0x07,0xc4,0xf2,0xb0,0x00,0x2a,
	0xd0,0x20,0x00,0x21,0xd0,0x40,0x60,0x40,
	0x04,0xea,0xd0,0x00,0x70,0x40,0x10,0x62,
	0xe8,0xb6,0xe0,0xc3,0xb0,0x42,0xf8,0xc3,
	0x00,0xa4,0xd8,0x30,0xa8,0x36,0x80,0x3f,
	0x98,0x34,0x04,0x1e,0x00,0x24,0xd0,0x70,
	0xa0,0x76,0x80,0x3f,0xa8,0x34,0x06,0xe5,
	0xd0,0x1c,0x01,0x46,0x78,0x00,0x04,0x54,
	0x68,0x00,0x00,0xc6,0x00,0xa6,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x03,0xd1,0xf8,0xdb,0x01,0x46,0x02,0x46,
	0xc8,0x18,0x02,0x06,0x18,0x1c,0x00,0xc6,
	0x18,0x2f,0xe4,0xd0,0xe0,0xe3,0x01,0x46,
	0x02,0x46,0xc8,0x18,0x02,0x06,0x18,0x1b,
	0x00,0xc6,0x18,0x29,0xe4,0xdb,0x07,0xc5,
	0x04,0xea,0x70,0x00,0x10,0x23,0xf8,0x05,
	0xe3,0x00,0x80,0xf8,0x00,0x20,0xd0,0x77,
	0x04,0xee,0x60,0x58,0x04,0xee,0x66,0xdc,
	0xd0,0x43,0x60,0x5b,0x00,0x2a,0x60,0x68,
	0xd8,0x00,0xc4,0xd5,0x14,0xe0,0x05,0x22,
	0xd5,0xa0,0x75,0x96,0xc5,0x96,0x15,0xa0,
	0xf8,0x13,0x05,0x22,0xd5,0x5c,0x75,0x55,
	0xc5,0x55,0x15,0x60,0xe9,0x00,0x15,0x61,
	0xe8,0x36,0x15,0x62,0xe8,0x48,0x15,0x63,
	0xe8,0x64,0x15,0x64,0xe8,0x6c,0x15,0x65,
	0xe8,0x77,0x15,0x66,0xe8,0xb6,0x15,0x67,
	0xe8,0xf6,0x15,0x68,0xe8,0xfb,0x00,0x20,
	0xd0,0x44,0x05,0x22,0xd0,0x20,0x60,0x40,
	0xf1,0x38,0xe0,0x13,0xd0,0x8a,0x05,0x22,
	0xd0,0xe4,0x00,0xa0,0xd0,0x40,0x90,0x03,
	0x50,0x40,0xa0,0x76,0x00,0x23,0xd0,0x7f,
	0x90,0x34,0xb0,0x27,0x40,0x01,0x60,0x03,
	0xb0,0xfc,0xb0,0x81,0xec,0x40,0xe0,0x5d,
	0xd4,0x5f,0x05,0x22,0xd0,0x64,0xf3,0x23,
	0x04,0x10,0xf1,0x55,0x05,0x23,0xd0,0x34,
	0xc0,0x84,0xf0,0x5f,0xc0,0x85,0xf0,0x5f,
	0xc0,0x86,0xf0,0x5f,0xc0,0x87,0xf0,0x5f,
	0xc0,0x88,0xf0,0x5f,0xe0,0x5d,0xb4,0x41,
	0xf4,0x4d,0xf1,0x33,0xe0,0x13,0x70,0x40,
	0x30,0x42,0xf8,0x5b,0xb0,0x3c,0x07,0xc5,
	0x14,0x60,0xf4,0x5d,0x00,0x20,0xd0,0x42,
	0x05,0x22,0xd0,0x20,0x60,0x40,0xe0,0x13,
	0x05,0x23,0xd0,0x4c,0xf3,0x23,0x04,0x10,
	0xf1,0x40,0x05,0x23,0xd0,0x74,0xf3,0x23,
	0x04,0x10,0xf1,0x5d,0xe0,0x5d,0x00,0x22,
	0x78,0x2c,0x08,0x12,0x00,0x22,0x68,0x2c,
	0xf3,0xc4,0x05,0x24,0xd0,0x70,0x70,0x41,
	0xc0,0x41,0x05,0x24,0xd0,0xb4,0x70,0x82,
	0xc0,0x82,0x0f,0xab,0xd0,0x1e,0x00,0x40,
	0x0a,0xf3,0xda,0x4d,0x00,0x80,0x00,0x22,
	0xd0,0x3f,0xa0,0x08,0xa0,0x89,0xa0,0x49,
	0x00,0x21,0xd0,0x20,0xa0,0x08,0x80,0x49,
	0x14,0xe1,0xe8,0x98,0x84,0xc8,0xe0,0x99,
	0x84,0x48,0x00,0x20,0xd0,0x43,0x05,0x22,
	0xd0,0x20,0x60,0x40,0x98,0x08,0x00,0x51,
	0xf8,0x9e,0x80,0xf5,0x83,0x1c,0x83,0x48,
	0x98,0x08,0x00,0x1d,0xe8,0xa4,0x00,0x21,
	0xd0,0x60,0xa0,0x48,0x00,0x62,0xd0,0x44,
	0x70,0x41,0xc0,0x41,0xa0,0x49,0x80,0xdf,
	0x80,0x3f,0x80,0x3f,0x98,0x08,0x00,0x1c,
	0xe8,0x2f,0xe0,0x5d,0x00,0x22,0x78,0x2c,
	0x08,0x12,0x00,0x22,0x68,0x2c,0xf1,0x15,
	0xf3,0xc4,0xf1,0x24,0x05,0x24,0xd0,0x1c,
	0x71,0x00,0xb0,0x3c,0x71,0x40,0xb0,0x3c,
	0x71,0x80,0xb0,0x3c,0x71,0xc0,0xb0,0x3c,
	0x72,0x00,0x12,0x08,0x22,0x07,0x12,0x08,
	0x22,0x06,0x11,0x48,0x21,0x44,0x14,0xe1,
	0xf8,0xe1,0x05,0x24,0xd0,0x70,0x70,0x41,
	0xc0,0x41,0x05,0x24,0xd0,0xb4,0x70,0x82,
	0xc0,0x82,0x01,0x41,0x02,0x02,0x0f,0xab,
	0xd0,0x5e,0x01,0x41,0x0a,0xf3,0xda,0x4d,
	0x02,0x00,0x00,0x25,0xd8,0x1f,0x04,0x53,
	0x04,0x55,0xa8,0x08,0x00,0x23,0xd0,0x1e,
	0xa0,0x08,0xa1,0x49,0x00,0x25,0xd0,0x3f,
	0xa0,0x08,0x00,0x23,0xd0,0x1e,0xa0,0x08,
	0xa2,0x09,0x83,0xc8,0x98,0x08,0x00,0x1e,
	0xf8,0xf2,0xe0,0x5d,0x83,0xdc,0x80,0xf5,
	0x87,0x48,0x86,0x48,0xe0,0x5d,0x83,0xdc,
	0x80,0xf5,0x87,0x48,0x86,0xc8,0xe0,0x5d,
	0xf1,0x33,0x04,0xee,0xd0,0x1c,0x70,0x40,
	0xd0,0x04,0x60,0x01,0x00,0x2a,0xd0,0x68,
	0x60,0x01,0x00,0x2a,0xd0,0x64,0x00,0x20,
	0xd0,0x37,0x60,0x01,0x80,0xb8,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x25,0xd0,0x5f,0xa0,0x48,
	0x00,0x24,0xd0,0x5e,0xa0,0x48,0x91,0x89,
	0x00,0x25,0xd0,0x7f,0xa0,0x48,0x00,0x24,
	0xd0,0x5e,0xa0,0x48,0x91,0xc9,0x07,0xc5,
	0x00,0x25,0xd0,0x5f,0xa0,0x48,0x00,0x24,
	0xd0,0x5e,0xa0,0x48,0xa1,0x89,0x00,0x25,
	0xd0,0x7f,0xa0,0x48,0x00,0x24,0xd0,0x5e,
	0xa0,0x48,0xa1,0xc9,0x07,0xc5,0x00,0x20,
	0xd0,0x41,0x05,0x22,0xd0,0x20,0x60,0x40,
	0x06,0xe5,0xd0,0x1c,0x01,0x46,0x78,0x00,
	0x04,0x55,0x68,0x00,0x00,0xc6,0x07,0xc5,
	0xc5,0x1f,0xf2,0x9b,0xc6,0x11,0xf2,0xb8,
	0xc4,0x99,0xf1,0xb2,0xf1,0x79,0x05,0x24,
	0xd0,0x48,0x61,0x01,0xb0,0x7c,0x61,0x41,
	0xb0,0x7c,0x61,0x81,0xb0,0x7c,0x61,0xc1,
	0xb0,0x7c,0x62,0x01,0xc7,0xd4,0x17,0xe0,
	0x07,0xc5,0xc5,0x1f,0xf2,0xd0,0xc4,0x91,
	0xf1,0xb2,0xf1,0x79,0xc7,0xd4,0x17,0xe0,
	0x07,0xc5,0xc5,0x1f,0xf2,0xed,0xc6,0x11,
	0xf3,0x0a,0xc4,0x99,0xf1,0xb2,0xf1,0x79,
	0x12,0x08,0x22,0x07,0x12,0x08,0x22,0x06,
	0x11,0x48,0x21,0x44,0x0f,0xab,0xd0,0x5e,
	0x01,0x41,0x0a,0xf3,0xda,0x4d,0x02,0x00,
	0x05,0x24,0xd0,0x30,0x61,0x40,0x05,0x24,
	0xd0,0x34,0x62,0x00,0xc7,0xd4,0x17,0xe0,
	0x07,0xc5,0xc5,0x5f,0x00,0xed,0xd0,0x5a,
	0xa0,0x76,0x91,0x34,0x91,0x74,0x91,0xb4,
	0x91,0xf4,0x92,0x34,0x00,0xec,0xd0,0x72,
	0xa0,0x76,0xf3,0x64,0xf3,0x64,0xf3,0x8f,
	0xf3,0x8f,0xf3,0x64,0xc4,0x08,0xc7,0x12,
	0xc6,0x88,0x96,0xf4,0xf2,0x8b,0xc2,0x19,
	0xc7,0x12,0xc6,0x87,0x96,0xf4,0xf2,0x8b,
	0xc0,0x50,0x06,0x41,0xc4,0x07,0xc1,0xd9,
	0xc7,0x12,0xc6,0x86,0x96,0xf4,0xf2,0x8b,
	0xc0,0x50,0x06,0x41,0xc4,0x06,0xc1,0x99,
	0xc7,0x12,0xc6,0x85,0x96,0xf4,0xf2,0x8b,
	0xc0,0x50,0x06,0x41,0xc4,0x05,0xc1,0x59,
	0xc7,0x12,0xc6,0x84,0x96,0xf4,0xf2,0x8b,
	0xc0,0x50,0x06,0x41,0xc1,0x19,0xc7,0xd5,
	0x17,0xe0,0x07,0xc5,0x00,0x10,0xf9,0xb5,
	0x07,0xc5,0x08,0x10,0x00,0xed,0xd0,0x5f,
	0xa0,0x76,0x91,0x34,0x91,0x74,0x91,0xb4,
	0x91,0xf4,0x92,0x34,0x00,0xec,0xd0,0x6d,
	0xa0,0x76,0x90,0x74,0x01,0x01,0x90,0x74,
	0x01,0x41,0x90,0x74,0x01,0x81,0x90,0x74,
	0x01,0xc1,0x90,0x74,0x02,0x01,0x00,0x24,
	0xd2,0x40,0x52,0x48,0x11,0xc9,0x52,0x47,
	0xc2,0xc5,0x11,0x08,0x52,0xc4,0xd2,0x88,
	0xd0,0x47,0x40,0x46,0x52,0x81,0x11,0x9d,
	0x11,0x84,0x52,0x86,0xd3,0x80,0xd1,0x00,
	0xd1,0x40,0x00,0x6c,0xd0,0x72,0xa0,0x76,
	0x00,0x23,0xd3,0xef,0xd3,0x04,0x43,0x09,
	0x13,0x1e,0x00,0x70,0xd0,0x00,0x40,0x09,
	0x10,0x10,0x03,0x00,0x12,0x41,0x52,0x4c,
	0xd3,0x48,0x43,0x4b,0x13,0x5d,0x00,0xa0,
	0xd0,0x00,0x40,0x0b,0x10,0x15,0x03,0x40,
	0x01,0x20,0xd0,0x00,0x40,0x0b,0x10,0x14,
	0x03,0x40,0x08,0x20,0xd0,0x00,0x40,0x0b,
	0x10,0x11,0x03,0x40,0x12,0xc1,0x00,0x24,
	0xd0,0x00,0x40,0x0a,0x10,0x18,0x52,0xc0,
	0x12,0x81,0x52,0x8d,0xd0,0x01,0x03,0x00,
	0x03,0x40,0x23,0x0d,0x23,0x8c,0xd0,0x01,
	0x40,0x0e,0x13,0x9f,0x11,0x01,0x51,0x00,
	0xb1,0x7f,0xd0,0x47,0x40,0x45,0xfa,0x16,
	0xa1,0x34,0xd1,0x00,0xb3,0xc1,0xf5,0xe2,
	0x07,0xc5,0xc0,0x58,0xd6,0x40,0xd0,0x88,
	0xd0,0x01,0x40,0x01,0x16,0x41,0x56,0x40,
	0x10,0x5f,0xb0,0x81,0xee,0x1c,0x07,0xc5,
	0xc0,0x18,0x10,0x1f,0xd0,0x41,0x40,0x58,
	0x10,0x47,0x50,0x01,0xc6,0x58,0x06,0x40,
	0x07,0xc5,0xc0,0xd8,0xd0,0x01,0x40,0x18,
	0xd0,0x42,0x40,0x58,0x10,0x5f,0xc0,0x80,
	0x40,0x01,0x50,0x42,0xd0,0x81,0x00,0x02,
	0x00,0x42,0x10,0x02,0x00,0xc0,0xd0,0x04,
	0x40,0x03,0x10,0x1e,0x40,0x40,0x00,0x42,
	0x10,0x43,0x00,0xc1,0xd0,0x10,0xd0,0x60,
	0x40,0x18,0x40,0x58,0x10,0x1c,0x10,0x5b,
	0x50,0x01,0x00,0x02,0x10,0x06,0x00,0xc0,
	0x00,0x21,0xd0,0x00,0x40,0x03,0x10,0x01,
	0x00,0xc0,0xc6,0x43,0x07,0xc5,0xd6,0x41,
	0x46,0x58,0xd0,0x02,0x40,0x18,0x10,0x01,
	0x56,0x40,0xd0,0x0c,0x40,0x18,0x10,0x02,
	0x56,0x40,0xd0,0x10,0x40,0x18,0x10,0x03,
	0x56,0x40,0x07,0xc5,0xd6,0x40,0xd0,0x01,
	0x40,0x18,0x10,0x05,0x56,0x40,0xd0,0x02,
	0x40,0x18,0x10,0x03,0x56,0x40,0xd0,0x04,
	0x40,0x18,0x10,0x1f,0x56,0x40,0xd0,0x08,
	0x40,0x18,0x10,0x1d,0x56,0x40,0xd0,0x10,
	0x40,0x18,0x10,0x03,0x56,0x40,0xd0,0x20,
	0x40,0x18,0x10,0x01,0x56,0x40,0x00,0x21,
	0xd0,0x00,0x40,0x18,0x10,0x1d,0x56,0x40,
	0x00,0x22,0xd0,0x00,0x40,0x18,0x10,0x1b,
	0x56,0x40,0xc6,0x19,0xc5,0xdf,0xf2,0x2d,
	0xc7,0xd7,0x17,0xe0,0x07,0xc5,0xc5,0x9f,
	0xc6,0x1b,0xf2,0x19,0xc0,0x1a,0x06,0x40,
	0xc6,0x19,0xf2,0x2d,0xc0,0xd9,0xc6,0x1c,
	0xf2,0x53,0x06,0x43,0xc6,0x19,0xf2,0x62,
	0xc7,0xd6,0x17,0xe0,0x07,0xc5,0x02,0x86,
	0x00,0x6d,0xd0,0x1a,0xa0,0x36,0x00,0xed,
	0xd0,0x50,0xa0,0x76,0x90,0x34,0x90,0x74,
	0x90,0xb4,0x90,0xf4,0x91,0x34,0x91,0x74,
	0x91,0xb4,0x91,0xf4,0x92,0x34,0x92,0x74,
	0xa1,0xb4,0xa0,0x74,0xa2,0x74,0xa0,0xf4,
	0xa2,0x34,0xa1,0x74,0xa1,0xf4,0xa1,0x34,
	0xa0,0x34,0xa0,0xb4,0x02,0x06,0x07,0xc5,
	0xd6,0x44,0x46,0x58,0x16,0x5e,0xd0,0x01,
	0xd0,0x41,0x40,0x58,0x00,0x40,0x10,0x41,
	0x56,0x41,0xd0,0x42,0x40,0x58,0x10,0x41,
	0x56,0x41,0xd0,0x50,0x40,0x58,0x10,0x5c,
	0x00,0x40,0x10,0x43,0x56,0x41,0xd0,0x48,
	0x40,0x58,0x10,0x41,0x56,0x41,0x07,0xc5,
	0x02,0x86,0x00,0x6d,0xd0,0x1a,0xa0,0x36,
	0x00,0xed,0xd0,0x50,0xa0,0x76,0x90,0x34,
	0x90,0x74,0x90,0xb4,0x90,0xf4,0x91,0x34,
	0x91,0x74,0x91,0xb4,0x91,0xf4,0x92,0x34,
	0x92,0x74,0xa0,0x74,0xa0,0xf4,0xa0,0x34,
	0xa1,0xf4,0xa1,0x74,0xa0,0xb4,0xa2,0x74,
	0xa1,0xb4,0xa1,0x34,0xa2,0x34,0x02,0x06,
	0x07,0xc5,0x02,0x86,0x00,0x6d,0xd0,0x1a,
	0xa0,0x36,0x00,0xed,0xd0,0x50,0xa0,0x76,
	0x90,0x34,0x90,0x74,0x90,0xb4,0x90,0xf4,
	0x91,0x34,0x91,0x74,0x91,0xb4,0x91,0xf4,
	0x92,0x34,0x92,0x74,0xa1,0x34,0xa0,0x34,
	0xa0,0xf4,0xa1,0x74,0xa1,0xf4,0xa0,0xb4,
	0xa2,0x34,0xa1,0xb4,0xa0,0x74,0xa2,0x74,
	0x02,0x06,0x07,0xc5,0xd6,0x50,0x46,0x58,
	0x16,0x5c,0xd0,0x08,0x40,0x18,0x10,0x1d,
	0xd0,0x41,0x00,0x01,0x10,0x01,0x56,0x40,
	0xd0,0x02,0x40,0x18,0x10,0x01,0x56,0x40,
	0xd0,0x01,0x40,0x18,0x10,0x03,0x56,0x40,
	0xd0,0x04,0x40,0x18,0x10,0x1e,0x00,0x01,
	0x10,0x04,0x56,0x40,0x07,0xc5,0x00,0x6d,
	0xd0,0x10,0xa0,0x36,0xd0,0x8a,0x70,0x01,
	0xa0,0x34,0xb0,0x7c,0xb0,0x81,0xef,0x27,
	0x07,0xc5,0x00,0xe2,0x00,0xa3,0x00,0x45,
	0x00,0x10,0x00,0xf4,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc7,0x5f,0xc4,0x08,0xc7,0x12,0xc6,0x88,
	0x96,0xf4,0xf2,0x8b,0xc2,0x19,0xc7,0x12,
	0xc6,0x87,0x96,0xf4,0xf2,0x8b,0xc0,0x50,
	0x06,0x41,0xc4,0x07,0xc1,0xd9,0xc7,0x12,
	0xc6,0x86,0x96,0xf4,0xf2,0x8b,0xc0,0x50,
	0x06,0x41,0xc4,0x06,0xc1,0x99,0xc7,0x12,
	0xc6,0x85,0x96,0xf4,0xf2,0x8b,0xc0,0x50,
	0x06,0x41,0xc4,0x05,0xc1,0x59,0xc7,0x12,
	0xc6,0x84,0x96,0xf4,0xf2,0x8b,0xc0,0x50,
	0x06,0x41,0xc1,0x19,0xc0,0x44,0x02,0x01,
	0xc7,0xdd,0x17,0xe0,0x07,0xc5,0xc7,0x5f,
	0xc4,0x08,0xc7,0x12,0xc6,0x88,0x96,0xf4,
	0xf2,0x8b,0xc6,0x19,0xf2,0x24,0xc2,0x19,
	0xc7,0x12,0xc6,0x87,0x96,0xf4,0xf2,0x8b,
	0xc0,0x50,0x06,0x41,0xc4,0x07,0xc6,0x19,
	0xf2,0x24,0xc1,0xd9,0xc7,0x12,0xc6,0x86,
	0x96,0xf4,0xf2,0x8b,0xc0,0x50,0x06,0x41,
	0xc4,0x06,0xc6,0x19,0xf2,0x24,0xc1,0x99,
	0xc7,0x12,0xc6,0x85,0x96,0xf4,0xf2,0x8b,
	0xc0,0x50,0x06,0x41,0xc4,0x05,0xc6,0x19,
	0xf2,0x24,0xc1,0x59,0xc7,0x12,0xc6,0x84,
	0x96,0xf4,0xf2,0x8b,0xc0,0x50,0x06,0x41,
	0xc6,0x19,0xf2,0x24,0xc1,0x19,0xc0,0x44,
	0x02,0x01,0xc7,0xdd,0x17,0xe0,0x07,0xc5,
	0x80,0x9f,0x80,0xdf,0x80,0x48,0x00,0x26,
	0xd0,0x15,0xa0,0x26,0x00,0x26,0xd0,0x00,
	0xa0,0x1e,0x00,0x62,0xd8,0x04,0x78,0x20,
	0xc8,0x20,0x04,0x13,0x04,0x53,0x04,0x56,
	0x00,0x21,0xd0,0x3f,0xa0,0x08,0x04,0xea,
	0xd0,0x44,0x70,0x41,0xc0,0x41,0x10,0x62,
	0xfb,0xdf,0x04,0x55,0x04,0x54,0xa8,0x09,
	0x00,0x26,0xd8,0x28,0x78,0x20,0xc8,0x20,
	0x00,0x20,0x48,0x0f,0x00,0x10,0xeb,0xe9,
	0x04,0x18,0x00,0x11,0xeb,0xec,0x04,0x17,
	0x00,0x12,0xeb,0xef,0x04,0x16,0x00,0x13,
	0xeb,0xf2,0x04,0x15,0x04,0x14,0x18,0x1c,
	0x18,0x04,0x01,0x20,0xd0,0x5f,0xa0,0x48,
	0xa8,0x09,0x07,0xc5,0x00,0x2a,0x70,0x20,
	0x10,0x22,0xfb,0x00,0xd0,0x03,0x04,0xee,
	0x66,0xdc,0x60,0x1b,0x00,0x2a,0x60,0x28,
	0x06,0x20,0xd1,0xc0,0xc0,0x87,0x10,0x9c,
	0xd0,0xc0,0x30,0xc2,0x00,0x29,0x72,0x28,
	0x00,0x29,0x72,0x6c,0x84,0x78,0xc1,0x07,
	0xf0,0x32,0xc2,0x0a,0xb2,0x02,0xc0,0x09,
	0x30,0x08,0xd0,0x7f,0x30,0x01,0xec,0x15,
	0x0b,0x1c,0x0b,0x51,0xc8,0x15,0x18,0x08,
	0x02,0x46,0xc5,0x60,0x02,0x06,0x84,0x38,
	0xd0,0x44,0x04,0xee,0x70,0x1c,0x60,0x40,
	0x00,0x2a,0x60,0x68,0x00,0xa6,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xc2,0x88,0xb2,0xbe,0xc1,0x83,0xd1,0x60,
	0x01,0x46,0x00,0x06,0xa1,0x3c,0xa1,0x3d,
	0x80,0x3f,0x61,0x0a,0x00,0xc6,0x21,0x06,
	0xb2,0xbc,0xb1,0x41,0xec,0x36,0x31,0x83,
	0xec,0x46,0xc1,0x82,0xd1,0x60,0xe0,0x36,
	0x07,0xc5,0x00,0x00,0xc8,0x17,0xc2,0x55,
	0x18,0x1f,0xd1,0x93,0x00,0x24,0xd2,0x1a,
	0x16,0x20,0xe8,0x0b,0xd1,0x96,0x00,0x25,
	0xd2,0x0f,0x28,0x06,0x00,0x22,0xd1,0x60,
	0x72,0x85,0x00,0x22,0xd2,0xe0,0x00,0x22,
	0xd3,0x24,0x12,0xa0,0xe8,0x21,0xc1,0x4a,
	0xb1,0x68,0x73,0x45,0x13,0x56,0x0c,0x1d,
	0xfc,0x21,0xc2,0xca,0xc3,0x0b,0xb3,0x20,
	0x71,0x4a,0xc2,0x85,0xe0,0x13,0x12,0x60,
	0xe8,0x52,0x62,0x4b,0x62,0x89,0xc1,0x49,
	0xb1,0x6c,0x73,0x85,0xc3,0x4e,0x13,0x56,
	0x00,0x2f,0xd1,0xff,0x43,0x87,0x33,0x8d,
	0x23,0x96,0x15,0x8a,0x55,0x8e,0x65,0x85,
	0xb1,0x60,0x65,0x85,0xc1,0x49,0xb1,0x68,
	0x73,0x85,0xc3,0x4e,0x13,0x56,0x00,0x2f,
	0xd1,0xff,0x43,0x87,0x33,0x8d,0xc1,0x8e,
	0x23,0xa0,0x18,0x0a,0x58,0x0e,0x68,0x05,
	0xb2,0x60,0x62,0x4c,0x12,0xa0,0xe8,0x47,
	0xb2,0xa0,0x62,0x89,0xc1,0x49,0xb1,0x68,
	0xc8,0x17,0x18,0x1f,0x28,0x08,0x21,0xa0,
	0x18,0x0a,0x58,0x06,0x68,0x05,0xe0,0x57,
	0x71,0x4a,0x61,0x4b,0xb2,0xa0,0x71,0x4a,
	0x61,0x4c,0xf3,0x15,0x00,0xa1,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x29,0x74,0x00,0x00,0x21,0x24,0x00,
	0x15,0xdf,0x16,0x1f,0xd4,0x40,0xc8,0x58,
	0xc2,0x50,0xd3,0x80,0xd8,0x00,0x0c,0x9e,
	0xe8,0x6e,0xd3,0xc0,0xc1,0x55,0x21,0x60,
	0x72,0x85,0x12,0xa0,0xf8,0x21,0xc3,0x19,
	0x33,0x0f,0xc1,0x4c,0x13,0x1d,0x18,0xa0,
	0xe8,0x1a,0x13,0x1f,0xb3,0x01,0x13,0x02,
	0xb3,0xbf,0x11,0x60,0xfc,0x0a,0xc3,0xd9,
	0xe0,0x65,0xb8,0x3c,0x22,0x91,0xc2,0xca,
	0xb2,0xec,0x73,0x0b,0xc1,0x8c,0x11,0x96,
	0x00,0x2f,0xd1,0xff,0x43,0x07,0x33,0x06,
	0xb3,0x3f,0x23,0xcc,0x13,0x1d,0xb2,0xc4,
	0x78,0x8b,0x18,0x98,0x18,0xa0,0xe8,0x35,
	0x13,0x1f,0xb3,0x01,0x13,0x02,0xc2,0xca,
	0xb2,0xe8,0x74,0x8b,0xc1,0x92,0x11,0x96,
	0x00,0x2f,0xd1,0xff,0x44,0x87,0x34,0x86,
	0xb4,0xbf,0x34,0xa1,0x24,0x8e,0x14,0xa0,
	0xfc,0x65,0xc1,0x4a,0xb1,0x74,0x72,0xc5,
	0xd1,0x40,0xc1,0x8c,0xb1,0xbc,0xc1,0xce,
	0xb1,0xff,0xb1,0xc1,0xfc,0x51,0x21,0x46,
	0xe0,0x4d,0x22,0xc5,0x00,0x63,0xd1,0x8c,
	0x01,0x46,0xa1,0xb6,0x03,0x0a,0x7d,0x0b,
	0x00,0x06,0x00,0xc6,0x00,0xe3,0xd1,0x8c,
	0x01,0x46,0xa1,0xb6,0x03,0x0a,0x6d,0x09,
	0x00,0x06,0x00,0xc6,0xb3,0x3c,0x22,0x4c,
	0xe0,0x0e,0xd1,0x40,0xc1,0x8c,0x11,0x9e,
	0x61,0x49,0xb2,0x7c,0x11,0xa0,0xe8,0x0e,
	0xb1,0x81,0xe0,0x68,0x72,0x95,0x22,0x91,
	0x00,0x63,0xd1,0x8c,0x01,0x46,0xa1,0xb6,
	0x00,0x20,0xd1,0x9c,0x01,0x8a,0x7d,0x0a,
	0x00,0x06,0x00,0xc6,0x00,0x29,0x73,0x40,
	0x23,0x51,0x00,0xe3,0xd1,0x8c,0x01,0x46,
	0xa1,0xb6,0x00,0x20,0xd1,0x9c,0x01,0x8a,
	0x6d,0x0d,0x00,0x06,0x00,0xc6,0xd1,0x93,
	0x16,0xa0,0xe8,0x8b,0xd1,0x96,0xc1,0x57,
	0x21,0x46,0xc2,0x18,0xb2,0x01,0x22,0x05,
	0x11,0x4a,0x51,0x48,0xc1,0xc9,0x31,0xd0,
	0xc2,0x07,0x00,0x6f,0xd1,0xbf,0x41,0xc6,
	0x00,0x20,0xd1,0xa2,0x11,0x8c,0x51,0xc6,
	0x12,0x15,0x12,0x06,0x00,0x20,0xd1,0xa0,
	0x52,0x06,0xb3,0x7c,0x62,0x0d,0xb3,0x7c,
	0x61,0xcd,0xb3,0x7c,0x64,0x0d,0xc1,0x96,
	0x11,0x8a,0x23,0xd6,0xb3,0xc1,0x53,0xc6,
	0xb3,0x78,0x63,0xcd,0xb3,0x7c,0x61,0x4d,
	0x14,0x60,0xf8,0xbd,0xc4,0x09,0x00,0x20,
	0xd4,0x60,0x00,0x24,0xd1,0x47,0x16,0xa0,
	0xe8,0xbb,0x00,0x24,0xd1,0x79,0x25,0xc5,
	0xe0,0x08,0x00,0x29,0x73,0x40,0x00,0x22,
	0x63,0x60,0xb3,0x60,0x00,0x22,0x63,0x64,
	0xf3,0x15,0x00,0xa1,0xd0,0x48,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xc6,0x97,0x1d,0x00,0xef,0x47,0x3f,
	0x17,0x20,0xf8,0x7d,0x03,0x54,0xe8,0x49,
	0xf1,0x1e,0xd1,0x40,0x03,0x98,0xf9,0x0f,
	0x03,0xd6,0xe8,0x4f,0xf1,0x16,0x03,0x96,
	0xe8,0x5f,0x0b,0x96,0x00,0x22,0xd7,0xb7,
	0x90,0x6f,0x90,0xad,0x30,0x9e,0xf9,0x0c,
	0x10,0x61,0xf9,0x0c,0x00,0x66,0xd0,0x60,
	0x00,0x23,0xd7,0xce,0xe0,0xc7,0x97,0xaf,
	0x17,0xa1,0xf8,0x84,0x00,0x23,0xd0,0x60,
	0x97,0xad,0x30,0x5e,0xe8,0xb2,0xc0,0x5e,
	0x00,0x23,0x40,0x70,0x00,0x23,0x30,0x40,
	0xe8,0xb9,0xb0,0x50,0xf8,0x71,0xb7,0x90,
	0xe0,0xb9,0xc0,0x1e,0x00,0x22,0xd0,0x7a,
	0x30,0x01,0xe8,0x90,0xb0,0x01,0xe8,0xab,
	0xb0,0x02,0xe8,0xbe,0xb0,0x02,0xe8,0xc3,
	0xe0,0x88,0x17,0x21,0xe8,0x81,0x89,0x5f,
	0xe0,0x8b,0x90,0x2d,0x80,0x1d,0xe0,0x8b,
	0x8f,0x70,0x99,0x1f,0x02,0x17,0xf8,0x90,
	0x8e,0xf0,0x80,0x3f,0x89,0x1f,0x80,0x3f,
	0x80,0x3f,0x01,0x46,0x0f,0x87,0xc0,0x00,
	0x03,0xaf,0xd0,0x3f,0x90,0x6e,0x40,0x40,
	0x0e,0xff,0xdf,0xf8,0xc9,0x00,0x06,0x56,
	0x06,0x57,0x90,0xaf,0x40,0xa4,0x50,0x42,
	0xf8,0xa5,0x01,0x46,0x00,0x66,0xd0,0x58,
	0xd0,0x12,0x00,0x22,0xd7,0xe4,0x00,0x05,
	0xf1,0x0a,0x81,0x30,0xd0,0x47,0x91,0x6d,
	0x41,0x41,0xa1,0x70,0xe0,0x5f,0x90,0x2e,
	0x10,0x20,0xd0,0x60,0x40,0x40,0xf8,0x88,
	0xa0,0x30,0xe0,0x5f,0x03,0x1e,0xf8,0xce,
	0x00,0x65,0xd0,0x70,0x00,0x23,0xd7,0xce,
	0xe0,0xc7,0x00,0x65,0xd0,0x78,0x00,0x23,
	0xd7,0xce,0xe0,0xc7,0x00,0x65,0xd0,0x78,
	0x00,0x23,0xd7,0xd9,0xe0,0xc7,0x00,0x66,
	0xd0,0x58,0x00,0x23,0xd7,0xce,0xd0,0x12,
	0x10,0x20,0x00,0x05,0x00,0xc6,0x07,0x1e,
	0xc0,0x9a,0xf1,0x14,0x17,0x60,0xf8,0xd8,
	0x10,0xa0,0xf8,0xd8,0xf1,0x0f,0xe1,0x01,
	0x17,0x58,0x00,0x23,0xd1,0x7f,0x11,0x50,
	0x57,0x45,0x05,0x64,0xd9,0x14,0x70,0x64,
	0x71,0x41,0x11,0x60,0xe8,0xe5,0xb0,0x74,
	0xe0,0xf8,0x05,0x64,0x71,0x58,0x67,0x41,
	0xb0,0x7c,0x60,0x81,0xb0,0x7c,0x61,0x41,
	0xb0,0x7c,0xc7,0x41,0xb7,0x4c,0xc0,0x9d,
	0x10,0x96,0x10,0x89,0x17,0x5e,0x00,0x23,
	0x47,0x7f,0x57,0x42,0x0f,0xef,0xd0,0xbf,
	0xf1,0x0f,0x01,0x65,0xd0,0x84,0x30,0x81,
	0xec,0xff,0x01,0x2b,0xd0,0x6c,0x60,0x64,
	0x00,0x06,0xd9,0x01,0x06,0xe5,0x69,0x3c,
	0x90,0x5d,0xb0,0x44,0xfd,0x09,0xa0,0x5d,
	0x07,0x96,0x81,0x24,0x85,0xdf,0xe0,0x8b,
	0x8f,0x30,0x81,0x1d,0xe1,0x09,0x80,0x66,
	0xa7,0x5e,0x80,0x26,0xa0,0x9e,0x07,0xc5,
	0x30,0x9e,0xe9,0x19,0x97,0x2e,0xa7,0x1d,
	0xe0,0x7d,0x00,0xef,0xd0,0x7f,0x97,0x2e,
	0x30,0x5c,0xe4,0x88,0x80,0xb0,0xb7,0x03,
	0x90,0x6d,0x37,0x01,0xa7,0x1d,0x10,0x65,
	0xe5,0x2c,0x90,0xae,0x97,0x6f,0x17,0x60,
	0xb0,0x45,0xc9,0x02,0x02,0x1b,0xe9,0x2e,
	0xd7,0x40,0xd0,0x80,0xa0,0x70,0xc1,0x42,
	0x07,0xc5,0x00,0x00,0x00,0xc6,0x0b,0x1e,
	0xc0,0x99,0xf1,0x01,0x01,0x46,0x00,0x66,
	0xd0,0x48,0xd0,0x12,0x00,0x23,0xd7,0xe4,
	0x00,0x05,0x00,0xc6,0x0b,0x1e,0xf1,0x06,
	0xb7,0x01,0x17,0x20,0xfc,0x8b,0xa7,0x1d,
	0x97,0xad,0xc0,0x9e,0x10,0x9b,0x10,0xa1,
	0xf8,0xec,0x01,0x46,0x00,0x66,0xd0,0x40,
	0xd0,0x12,0x00,0x23,0xd7,0xce,0x00,0x05,
	0xc0,0x9e,0x10,0x9d,0x10,0xb4,0xe8,0xfa,
	0x10,0xb0,0xe8,0xf3,0xe0,0x7d,0x01,0x46,
	0x00,0x66,0xd0,0x48,0xd0,0x12,0x00,0x23,
	0xd7,0xce,0x00,0x05,0x01,0x46,0x00,0x66,
	0xd0,0x50,0xd0,0x12,0x00,0x23,0xd7,0xce,
	0x00,0x05,0x30,0x9e,0xe9,0x06,0x97,0x2e,
	0xa7,0x1d,0xe0,0x7d,0x00,0xef,0xd0,0x7f,
	0x97,0x2e,0x30,0x5c,0xe4,0x88,0x80,0xb0,
	0xb7,0x03,0x90,0x6d,0x37,0x01,0xa7,0x1d,
	0x10,0x65,0xe5,0x19,0x90,0xae,0x97,0x6f,
	0x17,0x60,0xb0,0x45,0xc9,0x02,0x02,0x1b,
	0xe9,0x1b,0xd7,0x40,0xd0,0x80,0xa0,0x70,
	0xc1,0x42,0x07,0xc5,0x00,0xc6,0x02,0x86,
	0xc9,0x1d,0x02,0x46,0x37,0xa4,0xf8,0x7d,
	0x05,0xe7,0x70,0xa0,0x05,0xe1,0x77,0x90,
	0x17,0x60,0xe8,0xfe,0x97,0xae,0x8f,0xb0,
	0x05,0xe1,0x67,0x90,0xb0,0xbc,0x05,0xef,
	0xd0,0x38,0x30,0x02,0xec,0xe8,0x05,0xe7,
	0xd0,0x68,0x05,0xe7,0x60,0x60,0xc0,0x81,
	0x90,0x22,0x82,0xe2,0x99,0x23,0x19,0x1e,
	0x19,0x02,0xa0,0x22,0x69,0x02,0xb0,0xbc,
	0x67,0x42,0xb0,0xbc,0xc9,0x05,0x0a,0x54,
	0x03,0x9f,0xe8,0xf8,0x06,0x54,0x0b,0x9f,
	0xc1,0x64,0x61,0x42,0xb0,0xbc,0x05,0xe7,
	0x60,0xa0,0xdd,0x80,0x2d,0x9c,0x07,0xd6,
	0x37,0xb6,0xf9,0x07,0xd0,0x03,0x40,0x36,
	0xe9,0x07,0x07,0x98,0xbd,0x82,0x87,0x24,
	0x86,0x5f,0x03,0x95,0xe8,0x8b,0xd0,0x01,
	0x06,0xe5,0x60,0x3c,0xe0,0x8b,0x8f,0xb0,
	0x80,0x9d,0x0b,0x98,0xbd,0xbe,0x87,0x24,
	0x86,0x5f,0xe0,0x8b,0x0b,0xd6,0x05,0xe7,
	0x70,0x20,0x6d,0x80,0x07,0xc5,0x00,0x00,
	0x00,0xc6,0x37,0x99,0xf8,0x7d,0xb7,0x03,
	0x90,0x6f,0x80,0x3f,0x03,0x99,0xe8,0xe2,
	0x0b,0x99,0xc0,0x01,0xb0,0x01,0xd9,0x03,
	0x40,0x24,0x10,0x20,0xe8,0xe2,0xa0,0x30,
	0x37,0x00,0x81,0x1f,0x90,0x25,0x80,0x3f,
	0xa7,0x1d,0x80,0x3f,0xf0,0xe9,0x83,0x24,
	0x80,0x3f,0x84,0x9f,0xe0,0x8b,0x05,0x28,
	0x70,0x94,0x03,0x57,0xf8,0xf1,0x17,0x60,
	0xf8,0xf1,0x11,0x60,0xe9,0x03,0x67,0x42,
	0xb0,0xba,0x05,0x64,0x79,0x1c,0x00,0x06,
	0x01,0x46,0xa1,0x7c,0xa9,0x3d,0x61,0x42,
	0x00,0xc6,0xb0,0xbe,0x02,0x86,0xc9,0x1e,
	0x02,0x46,0x69,0x02,0xb0,0xbc,0x60,0x42,
	0xb0,0xbc,0xc9,0x1c,0x02,0x86,0x29,0x1e,
	0x0a,0x52,0xc7,0xa4,0x02,0x46,0x01,0x2b,
	0xd0,0x28,0x30,0x02,0xed,0x0f,0x00,0xef,
	0xd0,0x88,0x05,0x28,0x60,0x94,0x00,0x06,
	0x07,0xc5,0x00,0x00,0x00,0xc6,0x37,0x99,
	0xf8,0x7d,0x05,0x63,0x70,0x48,0x10,0x60,
	0xe8,0xde,0xb0,0x41,0x05,0x63,0x60,0x48,
	0x81,0x30,0x90,0x6d,0x8e,0xf0,0x10,0x5c,
	0x10,0x69,0xe8,0x7d,0x90,0x6f,0x80,0x3f,
	0x8f,0x70,0xf0,0xe6,0x83,0x24,0x80,0x3f,
	0x84,0x9f,0xe0,0x8b,0x05,0x28,0x70,0x94,
	0x03,0x57,0xf8,0xee,0x17,0x60,0xf8,0xee,
	0x11,0x60,0xe9,0x00,0x67,0x42,0xb0,0xba,
	0x05,0x64,0x79,0x1c,0x00,0x06,0x01,0x46,
	0xa1,0x7c,0xa9,0x3d,0x61,0x42,0x00,0xc6,
	0xb0,0xbe,0x02,0x86,0xc9,0x1e,0x02,0x46,
	0x69,0x02,0xb0,0xbc,0x60,0x42,0xb0,0xbc,
	0xc9,0x1c,0x02,0x86,0x29,0x1e,0x0a,0x52,
	0xc7,0xa4,0x02,0x46,0x01,0x2b,0xd0,0x28,
	0x30,0x02,0xed,0x0c,0x00,0xef,0xd0,0x88,
	0x05,0x28,0x60,0x94,0x00,0x06,0x07,0xc5,
	0x0b,0x1e,0x00,0xc6,0x97,0x2e,0xb7,0x01,
	0x00,0xef,0xd0,0x7f,0x30,0x5c,0xe4,0x88,
	0xa7,0x1d,0x90,0x2d,0x10,0x20,0xe9,0x07,
	0x07,0x54,0x00,0x22,0x79,0x2c,0x02,0x15,
	0xe8,0xec,0x00,0x28,0x79,0x00,0x02,0x52,
	0xe8,0xec,0x00,0x2a,0x79,0x2c,0x06,0x52,
	0x00,0x2a,0x69,0x2c,0x01,0x20,0xd9,0x03,
	0xa9,0x00,0x80,0x3f,0x05,0x64,0xd0,0x18,
	0x70,0x40,0x10,0x60,0xf8,0xf4,0x01,0x65,
	0xd0,0x48,0xe0,0xff,0x06,0xe5,0x70,0xbc,
	0x10,0xa0,0xe8,0xff,0xb0,0x64,0x01,0x6c,
	0xd0,0xa4,0x30,0x81,0xec,0xff,0x01,0x65,
	0xd0,0x48,0xd0,0x80,0x06,0xe5,0x60,0xbc,
	0x05,0x64,0xd0,0x9c,0x70,0x82,0x60,0x81,
	0x60,0x40,0x85,0x24,0x88,0x1f,0xe0,0x8b,
	0x00,0xc6,0x0b,0x1e,0x07,0x9f,0x05,0x64,
	0xd0,0x1c,0x70,0x40,0x10,0x60,0xf9,0x15,
	0x01,0x6c,0xd0,0x68,0xe1,0x1c,0xb0,0x74,
	0x01,0xa0,0xd0,0x98,0x30,0x81,0xed,0x1c,
	0x01,0x6c,0xd0,0x68,0x60,0x40,0x07,0xc5,
	0x0b,0x54,0x07,0x53,0x99,0x22,0x82,0xa2,
	0x00,0x28,0x70,0x60,0xa0,0x63,0xa9,0x22,
	0x07,0xc5,0x00,0x00,0x0b,0x1e,0x97,0xa2,
	0x00,0xa8,0xd0,0x00,0x90,0xe1,0x40,0xc0,
	0xf8,0xd2,0x00,0xa0,0xd0,0x00,0x84,0x22,
	0x80,0x3f,0xa0,0x23,0x80,0xa2,0x90,0x63,
	0x10,0x60,0xe4,0xfe,0x90,0xb5,0x10,0x94,
	0x00,0x20,0x40,0x83,0x8f,0x30,0x81,0x1d,
	0x81,0x24,0x85,0xdf,0x80,0x3f,0x80,0x3f,
	0x90,0x5d,0x00,0xef,0x40,0x7f,0xf8,0xe8,
	0x10,0xa1,0xf8,0xf2,0x0b,0x6c,0xd0,0x40,
	0xd0,0x80,0xf1,0x01,0x00,0x21,0xd1,0x00,
	0xd0,0x40,0x00,0x26,0xd0,0xb7,0xf1,0x01,
	0xb1,0x01,0xf8,0xf4,0x00,0xa0,0xd0,0x01,
	0x84,0x22,0xa0,0x23,0xa7,0xa2,0x01,0x46,
	0x0f,0x87,0x00,0xc6,0x90,0xe2,0x80,0xe2,
	0x80,0x3f,0x97,0x63,0x17,0x5e,0x17,0x42,
	0xb7,0x7e,0xa0,0xbc,0xa0,0x7d,0x80,0x3f,
	0x60,0x9d,0x00,0x06,0xb7,0x7e,0x00,0x28,
	0x70,0x34,0x30,0x1d,0xf5,0x15,0x00,0x28,
	0x77,0x70,0x80,0xe2,0x80,0x3f,0xa7,0x63,
	0x80,0x62,0x80,0x3f,0x97,0x63,0xb7,0x7c,
	0xa7,0x63,0x80,0xa2,0x80,0x3f,0x97,0x63,
	0xb7,0x44,0xa7,0x63,0x01,0x46,0xa0,0xe2,
	0x07,0xc5,0x00,0x00,0x00,0xc6,0x96,0x5d,
	0x16,0x60,0xf8,0x60,0x99,0x1c,0x02,0x50,
	0xe8,0x60,0x97,0xae,0x80,0x3f,0x0f,0xa1,
	0xd6,0x72,0x37,0x99,0xf8,0x44,0x97,0xae,
	0x80,0x3f,0x04,0xe8,0xd6,0x5f,0x37,0x99,
	0xe8,0x55,0x8f,0xb0,0xe0,0x44,0x97,0xae,
	0x80,0x3f,0x96,0x6e,0x80,0x3f,0x16,0x5d,
	0x83,0x24,0xa6,0x5d,0x80,0x3f,0x89,0x9f,
	0x80,0x3f,0x80,0x3f,0x01,0x46,0x0f,0x87,
	0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x97,0xa2,0x06,0xe4,0xd0,0x00,0x70,0x40,
	0xb0,0x7f,0x60,0x40,0xb0,0x3c,0xd0,0x41,
	0x60,0x40,0x00,0xa8,0xd0,0x00,0x90,0xe1,
	0x40,0xc0,0xf8,0x4b,0x02,0xa0,0xd0,0x00,
	0x84,0x22,0x80,0x3f,0xa0,0x23,0x0b,0x6c,
	0xd0,0x40,0xd0,0x80,0xf0,0x71,0x00,0x21,
	0xd1,0x00,0xd0,0x40,0x00,0x26,0xd0,0xb7,
	0xf0,0x71,0xb1,0x01,0xf8,0x59,0x02,0xa0,
	0xd0,0x01,0x84,0x22,0xa0,0x23,0x06,0xe3,
	0xd0,0x0c,0x79,0x00,0x06,0x10,0x69,0x00,
	0xa7,0xa2,0x01,0x46,0x00,0x22,0xd7,0xc2,
	0x00,0x20,0xd0,0x12,0x00,0xa4,0xd0,0x58,
	0x00,0x05,0x00,0xc6,0x90,0xe2,0x80,0xe2,
	0x80,0x3f,0x97,0x63,0x17,0x5e,0x17,0x42,
	0xb7,0x7e,0xa0,0xbc,0xa0,0x7d,0x80,0x3f,
	0x60,0x9d,0x00,0x06,0xb7,0x7e,0x00,0x28,
	0xd0,0x34,0x70,0x00,0x30,0x1d,0xf4,0x87,
	0x00,0x28,0xd0,0x30,0x77,0x40,0x80,0xe2,
	0x80,0x3f,0xa7,0x63,0x80,0x62,0x80,0x3f,
	0x97,0x63,0xb7,0x7c,0xa7,0x63,0x80,0xa2,
	0x80,0x3f,0x97,0x63,0xb7,0x44,0xa7,0x63,
	0x01,0x46,0xa0,0xe2,0x07,0xc5,0x00,0x00,
	0x80,0x3f,0x00,0xc6,0x97,0x1d,0x00,0xef,
	0x47,0x3f,0x17,0x20,0xf8,0xc7,0x06,0xe4,
	0xd0,0x0c,0xd0,0x81,0x70,0x40,0x20,0x42,
	0x60,0x40,0xd0,0x42,0x06,0xe3,0x60,0x44,
	0x1d,0xa0,0xf8,0xb8,0x00,0xa4,0xdd,0xa4,
	0x04,0xea,0x70,0x04,0x10,0x21,0xe8,0x61,
	0x0f,0xef,0xd9,0x3f,0x97,0x2f,0x39,0x1c,
	0xf8,0x63,0x90,0x2f,0x90,0x2f,0x90,0x2f,
	0x10,0x20,0x97,0x2f,0x17,0x20,0xbd,0x83,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x0a,0x16,0x06,0xe4,0xd0,0x14,
	0x70,0x40,0x67,0x00,0xb0,0x3c,0x60,0x40,
	0xbd,0x81,0x90,0x6d,0x10,0x60,0x06,0xe3,
	0x60,0x6c,0xc0,0x9c,0x10,0x98,0x00,0x23,
	0xd0,0xff,0x40,0xdc,0x10,0xc8,0x50,0xc1,
	0x00,0x60,0xd0,0x1c,0xb0,0x3e,0x01,0x46,
	0xa0,0xfc,0xa0,0xbd,0x80,0x3f,0x60,0xc0,
	0x00,0x06,0x10,0x61,0xe8,0xa6,0x10,0x62,
	0xf8,0xce,0xc0,0x1c,0xf0,0xdc,0x06,0x16,
	0x90,0x6e,0x90,0xae,0xa0,0xbc,0xa0,0x7d,
	0x00,0x60,0xd0,0x20,0xb0,0x3e,0x80,0x3f,
	0x60,0x80,0x00,0x06,0x00,0xc6,0x90,0xee,
	0x90,0x2e,0x10,0x20,0xbd,0x88,0x30,0xc1,
	0xf8,0xb8,0x30,0x80,0xf8,0xb8,0xd0,0xcf,
	0x40,0xc0,0x06,0xe3,0x60,0xf4,0x10,0x18,
	0x06,0xe3,0x60,0x30,0x00,0x24,0xd0,0xb0,
	0xa0,0xb6,0x80,0x3f,0xa9,0x34,0x02,0x14,
	0xf8,0xb8,0x00,0x24,0xd0,0x30,0xa0,0x36,
	0x80,0x3f,0xa9,0x34,0x01,0x46,0x00,0x20,
	0xd0,0x12,0x00,0xa4,0xd0,0x60,0x00,0x05,
	0xad,0x9d,0xdd,0x80,0x89,0x5f,0xe0,0xd8,
	0x3d,0x9c,0x17,0x24,0xec,0xc4,0x17,0x20,
	0xe8,0xda,0x90,0x2d,0xb7,0x01,0xe0,0xbf,
	0xa7,0x1d,0x89,0x5f,0xe0,0xd8,0x17,0x21,
	0xe8,0xcb,0x89,0x5f,0xe0,0xd8,0x90,0x2d,
	0x80,0x1d,0xe0,0xd8,0x04,0xea,0x70,0x04,
	0x10,0x21,0xf8,0xd5,0xdd,0x80,0xf0,0xdd,
	0xe0,0xd8,0x00,0xa4,0xdd,0x94,0x89,0x1f,
	0x80,0x3f,0x80,0x3f,0x01,0x46,0x0f,0x87,
	0x07,0xc5,0x80,0xb5,0x80,0x3f,0xd0,0x07,
	0xa0,0x26,0x80,0x1e,0x80,0x3f,0x00,0x60,
	0xd0,0x40,0xa0,0x66,0x80,0x3f,0x00,0x24,
	0xd0,0x60,0xa0,0x66,0x80,0x3f,0x00,0x24,
	0xd0,0x70,0xa0,0x66,0x80,0x3f,0x00,0x68,
	0xd0,0x40,0xa0,0x66,0x80,0x3f,0x80,0xf5,
	0x80,0x3f,0x06,0xe3,0xd0,0x04,0xd0,0x4a,
	0x60,0x40,0x07,0xc5,0x00,0x06,0x80,0x3f,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x99,0x34,
	0x00,0xc6,0x04,0xea,0x70,0x04,0x10,0x21,
	0xe8,0x50,0x0a,0x1e,0x0a,0x13,0x0a,0x1a,
	0x0a,0x14,0xe0,0x86,0x06,0xe3,0xd0,0x1c,
	0x70,0x40,0xb0,0x3c,0x70,0x80,0x16,0xe2,
	0xe8,0x6f,0x16,0xe3,0xe8,0xe1,0xc0,0x1c,
	0xc1,0x42,0xf0,0xee,0x10,0x20,0xec,0xd0,
	0x01,0x46,0xd7,0xd2,0x00,0xa5,0xd0,0x68,
	0x07,0xc4,0x00,0xc6,0xf1,0x04,0xd6,0xc2,
	0x06,0xe3,0xd0,0x14,0x67,0x00,0xb0,0x3c,
	0x70,0x80,0xb0,0x3c,0x60,0x80,0x02,0x1a,
	0xe8,0x86,0xc0,0x1c,0xc1,0x42,0xf0,0xee,
	0x10,0x20,0xfc,0x7c,0x06,0xe4,0xd0,0x08,
	0x70,0x40,0x10,0x60,0xf8,0xd9,0xd0,0x41,
	0x60,0x40,0xe0,0xe1,0x06,0xe4,0xd0,0x08,
	0xd0,0x40,0x60,0x40,0xc0,0x1c,0x06,0xe3,
	0x71,0x58,0xf0,0xee,0x10,0x20,0xe4,0xcc,
	0x01,0x46,0xd7,0xd2,0x00,0xa5,0xd0,0x50,
	0x07,0xc4,0x00,0xc6,0xf1,0x04,0x02,0x1e,
	0xe8,0x94,0x00,0x20,0xd0,0x12,0x00,0xa4,
	0xd0,0x68,0x00,0x05,0x02,0x13,0xe8,0xa5,
	0x01,0x46,0xd7,0xd2,0x00,0xa4,0xd0,0x70,
	0x07,0xc4,0xf1,0x04,0xd7,0xd2,0x00,0xa5,
	0xd0,0x40,0x07,0xc4,0xf1,0x04,0x00,0xa4,
	0xd9,0x30,0xa9,0x36,0x99,0x34,0x02,0x14,
	0xf8,0xe1,0x01,0x46,0xd7,0xd2,0x00,0xa5,
	0xd0,0x60,0x07,0xc4,0x00,0xc6,0xf1,0x04,
	0x06,0xe3,0x70,0x30,0x00,0x22,0x40,0x11,
	0xc0,0x40,0xc0,0x80,0x10,0x01,0x10,0x5c,
	0x10,0x9b,0x50,0x01,0x50,0x02,0xd0,0x47,
	0x40,0x01,0x10,0x20,0xe8,0xc4,0x06,0xe5,
	0x60,0x30,0x06,0xe5,0xd0,0x1c,0x79,0x00,
	0x06,0x1f,0x69,0x00,0x01,0x46,0x00,0x20,
	0xd7,0xfd,0x00,0x20,0xd0,0x12,0x00,0xa4,
	0xd0,0x58,0x00,0x05,0xd0,0x42,0x06,0xe5,
	0x60,0x6c,0xe0,0xd3,0xd0,0x41,0x06,0xe5,
	0x60,0x6c,0x06,0xe5,0xd0,0x1c,0x79,0x00,
	0x06,0x17,0x69,0x00,0xe0,0xe1,0xd6,0xc3,
	0x01,0x46,0xd7,0xd2,0x00,0xa5,0xd0,0x58,
	0x07,0xc4,0x00,0xc6,0xf1,0x04,0xad,0x9d,
	0xdd,0x80,0x89,0x5f,0x80,0x3f,0x80,0x3f,
	0x01,0x46,0x00,0x23,0xd7,0xda,0x00,0x20,
	0xd0,0x12,0x00,0xa4,0xd0,0x48,0x00,0x05,
	0x10,0x20,0xe4,0xf7,0x11,0x60,0xe4,0xf4,
	0x30,0x05,0xe0,0xfa,0xd0,0x00,0xb0,0x01,
	0xe0,0xfa,0x11,0x60,0xe4,0xf2,0xd0,0x01,
	0x07,0xc5,0x00,0x00,0x00,0xc6,0x01,0x46,
	0x90,0xa2,0x80,0x62,0x80,0x3f,0x90,0x63,
	0xa0,0xa2,0x80,0x3f,0x00,0x21,0xd0,0x00,
	0x20,0x40,0x00,0xa4,0xd9,0x30,0xa9,0x36,
	0x80,0x3f,0x99,0x34,0x02,0x14,0xf8,0x67,
	0x00,0x28,0xd0,0x18,0x70,0x00,0x30,0x01,
	0xec,0x67,0x06,0x13,0x00,0x24,0xd0,0xf0,
	0xa0,0xf6,0x80,0x3f,0xa9,0x34,0x06,0xe5,
	0xd0,0x1c,0x79,0x00,0x06,0x50,0x69,0x00,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x02,0x13,0xe8,0x73,0x00,0xa4,
	0xd0,0x78,0xe0,0x12,0x00,0xc6,0x01,0x46,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x02,0x14,0xf8,0x85,0x06,0xe4,
	0xd0,0x2c,0x70,0x40,0x30,0x5c,0xe4,0x7f,
	0x06,0xe4,0xd0,0x64,0x70,0x81,0xb0,0xbf,
	0x60,0x81,0x67,0x00,0x00,0x20,0xd0,0x12,
	0x00,0xa4,0xd0,0x58,0x00,0x05,0xad,0x9d,
	0xdd,0x80,0x89,0x5f,0x80,0x3f,0x80,0x3f,
	0x00,0x23,0xd7,0xda,0x00,0x20,0xd0,0x12,
	0x00,0xa4,0xd0,0x48,0x00,0x05,0x00,0x00,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x0a,0x13,0x06,0x14,0x00,0x24,
	0xd0,0x30,0xa0,0x36,0x80,0x3f,0xa9,0x34,
	0x00,0x2c,0xd0,0x14,0x67,0x00,0x06,0xe3,
	0xd0,0x10,0x67,0x00,0x06,0xe5,0xd0,0x1c,
	0x01,0x46,0x79,0x00,0x06,0x1d,0x69,0x00,
	0x00,0xc6,0x00,0x2a,0xd0,0x20,0xd0,0x48,
	0x60,0x40,0x07,0x51,0x07,0xc5,0x00,0x00,
	0x90,0x43,0x90,0x82,0x80,0x3f,0x05,0x29,
	0xd0,0x08,0x60,0x40,0xb0,0x3c,0x60,0x80,
	0x05,0x29,0xd0,0x04,0xd0,0x40,0x60,0x40,
	0x07,0xc5,0x00,0x00,0x07,0xc5,0x00,0x00,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x0a,0x13,0x06,0x14,0x00,0x24,
	0xd0,0x30,0xa0,0x36,0x80,0x3f,0xa9,0x34,
	0x00,0x2c,0xd0,0x14,0x67,0x00,0x06,0xe3,
	0xd0,0x10,0x67,0x00,0xe0,0x6c,0x00,0x00,
	0x02,0x1a,0xe9,0x15,0x06,0xe3,0xd0,0x38,
	0x70,0x80,0xb0,0x81,0xe5,0x13,0x60,0x80,
	0x00,0xa0,0xd0,0x40,0x3d,0x81,0xa0,0x5d,
	0x81,0x24,0x86,0xdf,0xe0,0xe4,0xd6,0xc3,
	0xe0,0xe4,0x02,0x16,0xe8,0xe1,0x06,0xe3,
	0xd0,0x70,0x71,0x01,0x00,0x21,0xd0,0xc0,
	0x40,0xc4,0xe8,0xe1,0xd0,0xe0,0x40,0xc4,
	0xe8,0xe1,0xb0,0x7c,0x70,0x41,0xd0,0xcf,
	0x40,0x43,0x30,0x43,0xe8,0x8d,0xe0,0xe1,
	0x06,0xe4,0xd0,0x08,0x70,0x40,0x10,0x60,
	0xe9,0x0f,0xd0,0x40,0x60,0x40,0x06,0xe4,
	0xd0,0x18,0x70,0x40,0xe1,0x10,0xc0,0x5c,
	0x00,0x2c,0xd0,0x14,0x60,0x40,0x06,0xe3,
	0xd0,0x10,0x60,0x40,0x00,0xa4,0xd9,0x30,
	0xa9,0x36,0x99,0x34,0x06,0x14,0x06,0x1b,
	0x00,0x24,0xd0,0x30,0xa0,0x36,0xa9,0x34,
	0x00,0x2b,0xd0,0x24,0x70,0x00,0x05,0x2e,
	0xd0,0x68,0x60,0x01,0xb0,0x7c,0xd0,0x03,
	0x60,0x01,0xe0,0xa1,0x00,0x27,0xd0,0x14,
	0x70,0x00,0x10,0x20,0xe9,0x1a,0x06,0xe3,
	0xd0,0x70,0x71,0x01,0xd0,0x10,0x40,0x04,
	0xe9,0x1a,0x06,0x17,0x00,0x24,0xd0,0x30,
	0xa0,0x36,0xa9,0x34,0x05,0x6c,0xd0,0x68,
	0x70,0x41,0x05,0x6c,0xd0,0x24,0x60,0x40,
	0x07,0xc5,0x00,0x00,0xc0,0x1c,0x06,0xe3,
	0x71,0x5c,0xc0,0xdf,0xf0,0xee,0xc7,0xc3,
	0x10,0x20,0xe4,0xe1,0x02,0x1a,0xe9,0x21,
	0xc0,0xdc,0x06,0xe3,0x71,0x5c,0x30,0xc5,
	0xe9,0x21,0x06,0xe3,0xd0,0x3c,0x70,0x40,
	0xb0,0x41,0x60,0x40,0x10,0x60,0xec,0xe1,
	0x06,0x15,0x00,0x24,0xd0,0xf0,0xa0,0xf6,
	0xa9,0x34,0xd6,0xc3,0xe0,0xe1,0x07,0xc5,
	0x05,0x28,0x70,0x94,0x03,0x57,0xf9,0x0c,
	0x17,0x60,0xf9,0x0c,0x11,0x60,0xe9,0x17,
	0x67,0x42,0xb0,0xbc,0x61,0x42,0xb0,0xbc,
	0x02,0x86,0xc9,0x1e,0x02,0x46,0x69,0x02,
	0xb0,0xbc,0x60,0x42,0xb0,0xbc,0xc9,0x1c,
	0x02,0x86,0x29,0x1e,0x0a,0x52,0xc7,0xa4,
	0x02,0x46,0x01,0x2b,0xd0,0x28,0x30,0x02,
	0xed,0x23,0x00,0xef,0xd0,0x88,0x05,0x28,
	0x60,0x94,0x00,0x06,0x07,0xc5,0x00,0x00,
	0x17,0xa0,0xe8,0x4b,0x39,0x1e,0xe9,0x10,
	0x97,0x2e,0x57,0x1c,0x00,0xa4,0xd0,0x54,
	0x30,0x5c,0xe4,0x9e,0xbd,0x82,0xe0,0x78,
	0x00,0xa4,0xd0,0x54,0x97,0x2e,0x30,0x5c,
	0xe4,0x8d,0xbd,0x82,0x00,0x23,0xd0,0x3f,
	0x99,0x2d,0x19,0x20,0xbd,0x81,0xb7,0x01,
	0x0e,0x10,0xe9,0x18,0x00,0x23,0xd0,0x40,
	0x40,0x64,0x10,0x5a,0x10,0x61,0xf9,0x29,
	0x80,0x70,0x99,0x2d,0x19,0x20,0xbd,0x82,
	0xb7,0x02,0x07,0xc5,0x19,0x2f,0xe9,0x1d,
	0xc0,0x24,0x00,0x23,0xd9,0x30,0x49,0x00,
	0x19,0x1c,0x19,0x22,0xe9,0x10,0x19,0x23,
	0xe9,0x10,0xe1,0x1d,0x10,0x08,0x91,0x6d,
	0x51,0x40,0x97,0x6f,0x57,0x5d,0xbd,0x84,
	0xb7,0x04,0x19,0x23,0xf9,0x1f,0x81,0x70,
	0xbd,0x85,0xb7,0x05,0xe1,0x1f,0xd7,0x40,
	0xd1,0x40,0xa7,0x1d,0x3d,0x9c,0x00,0xa4,
	0xd9,0x30,0xa9,0x36,0x80,0x3f,0x99,0x34,
	0x07,0xc5,0x00,0x00,0x06,0xe3,0xd0,0x70,
	0x70,0x41,0xd0,0x81,0x40,0x81,0xe9,0x11,
	0x02,0x11,0xe9,0x11,0x06,0x12,0x00,0x24,
	0xd0,0xf0,0xa0,0xf6,0xa9,0x34,0x00,0x22,
	0xd0,0x80,0x40,0x81,0xe9,0x15,0x02,0x11,
	0xe8,0x82,0x0a,0x11,0x00,0x24,0xd0,0xf0,
	0xa0,0xf6,0xa9,0x34,0x02,0x12,0xe8,0x82,
	0x0a,0x12,0x00,0x24,0xd0,0xf0,0xa0,0xf6,
	0xa9,0x34,0x02,0x18,0xe8,0x82,0x00,0xa4,
	0xd0,0x50,0xe0,0xa2,0x80,0x3f,0x00,0x06,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x00,0xc6,0x97,0x1d,0x17,0x20,
	0xf8,0x86,0x04,0xea,0xd0,0x00,0x70,0x00,
	0x10,0x21,0xf8,0x58,0x02,0x1c,0xe8,0x5a,
	0x0a,0x1c,0x00,0x24,0xd0,0xf0,0xa0,0xf6,
	0xa9,0x34,0xe0,0xa4,0x1d,0xa4,0xfc,0x9c,
	0xbd,0x83,0x97,0xaf,0x17,0xa1,0xf8,0x8d,
	0x97,0xad,0x57,0x9e,0xbd,0x81,0x00,0x23,
	0xd0,0x60,0x00,0x23,0xd0,0xb0,0x40,0x9e,
	0x30,0x81,0xe8,0xb5,0x00,0x23,0xd0,0x40,
	0x00,0x23,0xd0,0xb0,0x40,0x9e,0x30,0x81,
	0xe8,0xd3,0xc0,0x1e,0xb0,0x46,0x30,0x01,
	0xe8,0xa4,0xb0,0x01,0xe8,0xb0,0xb0,0x03,
	0xe8,0xf5,0xe0,0x8d,0x3d,0x9c,0x17,0x24,
	0xec,0x80,0x17,0x20,0xe8,0x82,0x90,0x2d,
	0xb7,0x01,0xe0,0x7b,0xa7,0x1d,0x89,0x5f,
	0x80,0x3f,0x80,0x3f,0x01,0x46,0x0f,0x87,
	0x17,0x21,0xe8,0x8a,0x89,0x5f,0xe0,0x82,
	0x90,0x2d,0x80,0x1d,0xe0,0x82,0x04,0xea,
	0xd0,0x00,0x70,0x00,0x10,0x21,0xf8,0x99,
	0x06,0x1c,0x00,0x24,0xd0,0xf0,0xa0,0xf6,
	0xa9,0x34,0x89,0x1f,0xe0,0x82,0xad,0x9d,
	0xdd,0x80,0x89,0x5f,0x80,0x3f,0x80,0x3f,
	0x00,0x23,0xd7,0xda,0x00,0xa4,0xd0,0x48,
	0x01,0x46,0xe0,0x12,0x90,0x6f,0x90,0xae,
	0x00,0x26,0xd0,0xf0,0x70,0xc3,0x10,0xe2,
	0xf8,0xad,0xa0,0x42,0xa0,0x83,0x80,0xf0,
	0xbd,0x88,0xe0,0x4b,0x90,0x2e,0xa0,0x30,
	0xb0,0x3e,0x3d,0x80,0xe0,0x4b,0xc9,0x1a,
	0xf0,0xdf,0x05,0x6c,0xd0,0x28,0x70,0x40,
	0x20,0x5c,0x60,0x40,0x0f,0xef,0xd0,0x3f,
	0x17,0x58,0x47,0x40,0x80,0x66,0xa7,0x5e,
	0x80,0x26,0xa1,0x5e,0x06,0x11,0x00,0x24,
	0xd0,0xf0,0xa0,0xf6,0xa9,0x34,0x81,0x24,
	0x85,0xdf,0x01,0x46,0xd7,0xd2,0x00,0xa6,
	0xd0,0x48,0x07,0xc4,0x00,0xc6,0xf1,0x04,
	0xe0,0x82,0xc9,0x19,0xf0,0xdf,0x01,0x46,
	0xd7,0xd2,0x00,0xa5,0xd0,0x70,0x07,0xc4,
	0x00,0xc6,0xf1,0x04,0x83,0x24,0x84,0x9f,
	0xe0,0x82,0x06,0xe4,0xd0,0xec,0x67,0xc3,
	0x01,0x46,0xd7,0xd2,0x00,0xa5,0xd0,0x78,
	0x07,0xc4,0x00,0xc6,0xf1,0x04,0x01,0x46,
	0xd7,0xd2,0x00,0xa6,0xd0,0x40,0x07,0xc4,
	0x00,0xc6,0xf1,0x04,0x06,0xe4,0xd0,0xec,
	0x77,0xc3,0x17,0xe0,0x07,0xc5,0x97,0x2e,
	0x57,0x1c,0x00,0xa4,0xd0,0x54,0x30,0x5c,
	0xe4,0x9e,0xbd,0x82,0xe0,0x78,0x00,0x00,
	0x80,0x3f,0x00,0x06,0x00,0xa4,0xd9,0x30,
	0xa9,0x36,0x80,0x3f,0x99,0x34,0x00,0xc6,
	0x0a,0x1f,0x06,0xe4,0x70,0x4c,0xb0,0x7f,
	0x06,0xe4,0x60,0x4c,0x06,0xe3,0xd0,0x04,
	0xd0,0x42,0x60,0x40,0x1d,0xa0,0xf8,0xbc,
	0x04,0xea,0x70,0x04,0x10,0x21,0xe8,0x6e,
	0x06,0xe4,0x70,0x5c,0x10,0x60,0xe8,0x69,
	0xd0,0x40,0x06,0xe4,0x60,0x5c,0x01,0x46,
	0x00,0xa4,0xdd,0x94,0x0b,0xd0,0x00,0xe9,
	0xd0,0x6c,0xd0,0x12,0x00,0x22,0xd7,0xe3,
	0x00,0x05,0x90,0x2f,0x90,0x2f,0x90,0x2f,
	0x90,0x2f,0x10,0x20,0x00,0xa4,0xdd,0xa4,
	0x0a,0x16,0xbd,0x83,0x97,0x2f,0x17,0x20,
	0x06,0xe4,0xd0,0x14,0x70,0x40,0x67,0x00,
	0xb0,0x3c,0x60,0x40,0xbd,0x81,0x90,0x6d,
	0x10,0x60,0x06,0xe3,0x60,0x6c,0xc0,0x9c,
	0x10,0x98,0x00,0x23,0xd0,0xff,0x40,0xdc,
	0x10,0xc8,0x50,0xc1,0x00,0x60,0xd0,0x1e,
	0x01,0x46,0xa0,0xfc,0xa0,0xbd,0x80,0x3f,
	0x60,0xc0,0x00,0x06,0x10,0x61,0xe8,0xae,
	0x10,0x62,0xf8,0xc7,0x06,0x16,0x90,0x6e,
	0x90,0xae,0xa0,0xbc,0xa0,0x7d,0x00,0x60,
	0xd0,0x22,0x80,0x3f,0x60,0x80,0x00,0x06,
	0x00,0xc6,0x90,0xee,0x90,0x2e,0x10,0x20,
	0xbd,0x88,0x30,0xc1,0xf8,0xbc,0x30,0x80,
	0xf8,0xbc,0xd0,0xcf,0x40,0xc0,0x06,0xe3,
	0xd0,0x74,0x60,0xc1,0x10,0x18,0x06,0xe3,
	0xd0,0x70,0x60,0x01,0x00,0x24,0xd0,0xb0,
	0xa0,0xb6,0x80,0x3f,0xa9,0x34,0x02,0x14,
	0xf8,0xbc,0x01,0x46,0x00,0xe9,0xd0,0x64,
	0xd0,0x12,0x00,0x21,0xd7,0xc0,0x00,0x05,
	0xad,0x9d,0xdd,0x80,0x89,0x5f,0xe0,0xd2,
	0x17,0x21,0xe8,0xc4,0x89,0x5f,0xe0,0xd2,
	0x90,0x2d,0x80,0x1d,0xe0,0xd2,0x04,0xea,
	0x70,0x04,0x10,0x21,0xf8,0xce,0xdd,0x80,
	0xf0,0xd6,0xe0,0xd2,0x00,0xa4,0xdd,0x94,
	0x07,0xd0,0x89,0x1f,0x80,0x3f,0x80,0x3f,
	0x01,0x46,0x0f,0x87,0x80,0xb5,0x80,0x3f,
	0xd0,0x07,0xa0,0x26,0x80,0x1e,0x80,0x3f,
	0x00,0x60,0xd0,0x40,0xa0,0x66,0x80,0x3f,
	0x00,0x24,0xd0,0x60,0xa0,0x66,0x80,0x3f,
	0x00,0x24,0xd0,0x70,0xa0,0x66,0x80,0x3f,
	0x00,0x68,0xd0,0x40,0xa0,0x66,0x80,0x3f,
	0x80,0xf5,0x80,0x3f,0x06,0xe3,0xd0,0x04,
	0xd0,0x4a,0x60,0x40,0x07,0xc5,0x00,0x00,
	0x00,0x06,0x80,0x3f,0x00,0xa4,0xd9,0x30,
	0xa9,0x36,0x99,0x34,0x00,0xc6,0x00,0x25,
	0x70,0x78,0xb0,0x7f,0x00,0x25,0x60,0x78,
	0x04,0xea,0xd0,0x04,0x70,0x00,0x10,0x21,
	0xe8,0x56,0x0a,0x1e,0x0a,0x13,0x0a,0x1a,
	0x0a,0x14,0xe0,0x9b,0x06,0xe3,0xd0,0x1c,
	0x70,0x40,0xb0,0x3c,0x70,0x80,0x16,0xe2,
	0xe8,0x89,0x16,0xe3,0xe8,0xda,0xc0,0xdc,
	0x30,0xc2,0xec,0xda,0x01,0x46,0xd7,0xd2,
	0x00,0xea,0xd0,0x54,0x07,0xc4,0x00,0xc6,
	0xf1,0x04,0xd6,0xc2,0x06,0xe3,0xd0,0x14,
	0x67,0x00,0xb0,0x3c,0x70,0x80,0xb0,0x3c,
	0x60,0x80,0x02,0x1a,0xe8,0x9b,0x06,0xe3,
	0xd0,0x2c,0x70,0x80,0x10,0xa1,0xe8,0x9b,
	0x10,0xa2,0xf8,0x7f,0xd0,0x60,0xb0,0x3c,
	0x70,0x80,0x40,0x42,0xe8,0x9b,0x06,0x11,
	0x00,0x24,0xd0,0xf0,0xa0,0xf6,0xa9,0x34,
	0xd6,0xc3,0xd0,0x40,0x06,0xe3,0x60,0x78,
	0xe0,0xdd,0xc0,0xdc,0x30,0xc2,0xfc,0x96,
	0xc0,0xdc,0x06,0xe4,0x70,0x98,0x30,0xc2,
	0x10,0xe1,0xf8,0x95,0xb0,0x41,0x60,0x40,
	0xe0,0x95,0xe0,0xda,0xc0,0xdc,0x06,0xe3,
	0x70,0x18,0x30,0xc0,0xe4,0xc3,0x01,0x46,
	0xd7,0xd2,0x00,0xea,0xd0,0x5c,0x07,0xc4,
	0x00,0xc6,0xf1,0x04,0x02,0x13,0xe8,0xb3,
	0x01,0x46,0xd7,0xd2,0x00,0xea,0xd0,0x64,
	0x07,0xc4,0xf1,0x04,0xd7,0xd2,0x00,0xea,
	0xd0,0x6c,0x07,0xc4,0xf1,0x04,0x00,0xa4,
	0xd9,0x30,0xa9,0x36,0x99,0x34,0x02,0x14,
	0xf8,0xda,0x01,0x46,0xd7,0xd2,0x00,0xea,
	0xd0,0x74,0x07,0xc4,0x00,0xc6,0xf1,0x04,
	0x01,0x46,0x00,0xe9,0xd0,0x6c,0xd0,0x12,
	0x00,0x21,0xd7,0xc0,0x00,0x05,0x06,0xe5,
	0xd0,0x2c,0xd0,0x42,0x60,0x40,0xe0,0xcc,
	0x06,0xe5,0xd0,0x2c,0xd0,0x41,0x60,0x40,
	0x06,0xe5,0xd0,0x1c,0x79,0x00,0x06,0x17,
	0x69,0x00,0xe0,0xda,0xd6,0xc3,0x01,0x46,
	0xd7,0xd2,0x00,0xea,0xd0,0x7c,0x07,0xc4,
	0x00,0xc6,0xf1,0x04,0xad,0x9d,0xdd,0x80,
	0x89,0x5f,0x80,0x3f,0x80,0x3f,0x01,0x46,
	0x00,0xe9,0xd0,0x5c,0xd0,0x12,0x00,0x20,
	0xd7,0xfd,0x00,0x05,0x00,0xc6,0x97,0x1d,
	0x00,0xef,0x47,0x3f,0x17,0x20,0xf8,0x8d,
	0x03,0x98,0xe8,0x59,0x0b,0x98,0x90,0x75,
	0x10,0x56,0x00,0x20,0x40,0x43,0xe8,0x59,
	0xb0,0x44,0xa0,0x70,0x81,0x1d,0x87,0x24,
	0x86,0x5f,0x80,0x3f,0x80,0x3f,0x90,0x5d,
	0x00,0xef,0x40,0x7f,0xf8,0x55,0x03,0xd6,
	0xe8,0x61,0x0b,0xd6,0x06,0xe3,0x70,0x64,
	0x06,0xe3,0x70,0x28,0x60,0x40,0x1d,0xa4,
	0xfc,0x9c,0xbd,0x83,0x97,0xaf,0x17,0xa1,
	0xf8,0x94,0xbd,0x81,0x97,0xad,0x17,0xa0,
	0x00,0x23,0xd0,0x60,0x00,0x23,0xd0,0xb0,
	0x40,0x9e,0x30,0x42,0xe8,0xc6,0x00,0x23,
	0xd0,0x40,0x00,0x23,0xd0,0xb0,0x40,0x9e,
	0x30,0x42,0xe8,0xcd,0xc0,0x1e,0x00,0x22,
	0xd0,0x7a,0x30,0x01,0xe8,0xa3,0xc0,0x1e,
	0x00,0x22,0xd0,0x7b,0x30,0x01,0xe8,0xb8,
	0xc0,0x1e,0x00,0x22,0xd0,0x7d,0x30,0x01,
	0xe8,0xd4,0xc0,0x1e,0x00,0x22,0xd0,0x7e,
	0x30,0x01,0xe8,0xbe,0xe0,0x94,0x17,0x21,
	0xe8,0x91,0x89,0x5f,0xe0,0x97,0x90,0x2d,
	0x80,0x1d,0xe0,0x97,0xad,0x9d,0xdd,0x80,
	0x89,0x5f,0x80,0x3f,0x80,0x3f,0x01,0x46,
	0x0f,0x87,0xc0,0x00,0x01,0x46,0x00,0xe9,
	0xd0,0x5c,0xd0,0x12,0x00,0x20,0xd7,0xfd,
	0x00,0x05,0x03,0xaf,0xd0,0x3f,0xbd,0x82,
	0x90,0x6e,0x40,0x40,0x0e,0xff,0xdf,0xf8,
	0xc9,0x00,0x06,0x56,0x06,0x57,0xbd,0x83,
	0x90,0xaf,0xbd,0x84,0x81,0x30,0xd0,0x47,
	0xbd,0x81,0x91,0x6d,0x41,0x41,0x3d,0x85,
	0xa1,0x70,0xe0,0x63,0xbd,0x82,0x90,0x2e,
	0x10,0x20,0x3d,0x80,0xa0,0x30,0xe0,0x63,
	0xbd,0x82,0x97,0x2e,0xa7,0x1d,0x3d,0x9c,
	0xe0,0x8d,0x87,0x24,0x86,0x5f,0xe0,0x99,
	0x01,0x46,0x00,0xe9,0xd0,0x74,0xd0,0x12,
	0x00,0x21,0xd7,0xc0,0x00,0x05,0x01,0x46,
	0x00,0xea,0xd0,0x44,0xd0,0x12,0x00,0x21,
	0xd7,0xc0,0x00,0x05,0x01,0x46,0x00,0xe9,
	0xd0,0x7c,0xd0,0x12,0x00,0x21,0xd7,0xc0,
	0x00,0x05,0x01,0x46,0x00,0xe9,0xd0,0x5c,
	0xd0,0x12,0x00,0x23,0xd7,0xc7,0x00,0x05,
	0x00,0xc6,0xc0,0x9a,0xf0,0x71,0x17,0x58,
	0x80,0x66,0xa7,0x5e,0x80,0x26,0xa0,0x9e,
	0xf0,0x70,0x00,0xa4,0xd9,0x30,0xa9,0x36,
	0x80,0x3f,0x99,0x34,0x06,0x1f,0x00,0x24,
	0xd0,0xf0,0xa0,0xf6,0x80,0x3f,0xa9,0x34,
	0x17,0x20,0xe8,0x95,0xd0,0x41,0x06,0xe5,
	0x60,0x7c,0x81,0x24,0x85,0xdf,0x80,0x3f,
	0x80,0x3f,0x06,0xe3,0x70,0x70,0xd0,0x81,
	0x40,0x81,0xf8,0x69,0x01,0x46,0x00,0xe9,
	0xd0,0x6c,0xd0,0x12,0x00,0x20,0xd7,0xfd,
	0x00,0x05,0x01,0x46,0x00,0xea,0xd0,0x4c,
	0xd0,0x12,0x00,0x20,0xd7,0xfd,0x00,0x05,
	0x07,0xc5,0x30,0x9e,0xe8,0x78,0xbd,0x82,
	0x97,0x2e,0xa7,0x1d,0x3d,0x9c,0xe0,0x95,
	0xbd,0x82,0x00,0xef,0xd0,0x7f,0x97,0x2e,
	0x30,0x5c,0xe4,0x9d,0xbd,0x83,0x80,0xb0,
	0xb7,0x03,0x90,0x6d,0x37,0x01,0x3d,0x9c,
	0xa7,0x1d,0x10,0x65,0xe4,0x8f,0xbd,0x85,
	0x90,0xae,0x97,0x6f,0x17,0x60,0xb0,0x45,
	0xc9,0x02,0x02,0x1b,0xe8,0x91,0xd7,0x40,
	0xd0,0x80,0x3d,0x81,0xa0,0x70,0xc1,0x42,
	0x07,0xc5,0x01,0x46,0x00,0xe9,0xd0,0x6c,
	0xd0,0x12,0x00,0x22,0xd7,0xcd,0x00,0x05,
	0xc0,0x00,0x01,0x46,0x00,0xe9,0xd0,0x5c,
	0xd0,0x12,0x00,0x23,0xd7,0xc7,0x00,0x05,
	0xc0,0x00,0x00,0x00,0x00,0xc6,0xc0,0x99,
	0xf0,0x5e,0xf0,0x5d,0xf0,0x92,0x00,0xa4,
	0xd9,0x30,0xa9,0x36,0x80,0x3f,0x99,0x34,
	0x06,0x1f,0x00,0x24,0xd0,0xf0,0xa0,0xf6,
	0x80,0x3f,0xa9,0x34,0x17,0x20,0xe8,0x82,
	0x83,0x24,0x84,0x9f,0x80,0x3f,0x80,0x3f,
	0x01,0x46,0x00,0xe9,0xd0,0x6c,0xd0,0x12,
	0x00,0x20,0xd7,0xfd,0x00,0x05,0x07,0xc5,
	0x30,0x9e,0xe8,0x65,0xbd,0x82,0x97,0x2e,
	0xa7,0x1d,0x3d,0x9c,0xe0,0x82,0xbd,0x82,
	0x00,0xef,0xd0,0x7f,0x97,0x2e,0x30,0x5c,
	0xe4,0x8a,0xbd,0x83,0x80,0xb0,0xb7,0x03,
	0x90,0x6d,0x37,0x01,0x3d,0x9c,0xa7,0x1d,
	0x10,0x65,0xe4,0x7c,0xbd,0x85,0x90,0xae,
	0x97,0x6f,0x17,0x60,0xb0,0x45,0xc9,0x02,
	0x02,0x1b,0xe8,0x7e,0xd7,0x40,0xd0,0x80,
	0x3d,0x81,0xa0,0x70,0xc1,0x42,0x07,0xc5,
	0x01,0x46,0x00,0xe9,0xd0,0x6c,0xd0,0x12,
	0x00,0x22,0xd7,0xcd,0x00,0x05,0xc0,0x00,
	0x01,0x46,0x00,0xe9,0xd0,0x5c,0xd0,0x12,
	0x00,0x23,0xd7,0xc7,0x00,0x05,0xc0,0x00,
	0x05,0x28,0x70,0x94,0x03,0x57,0xf8,0x9a,
	0x17,0x60,0xf8,0x9a,0x11,0x60,0xe8,0xa5,
	0x67,0x42,0xb0,0xbc,0x61,0x42,0xb0,0xbc,
	0x02,0x86,0xc9,0x1e,0x02,0x46,0x69,0x02,
	0xb0,0xbc,0x60,0x42,0xb0,0xbc,0xc9,0x1c,
	0x02,0x86,0x29,0x1e,0x0a,0x52,0xc7,0xa4,
	0x02,0x46,0x01,0x2b,0xd0,0x28,0x30,0x02,
	0xec,0xb1,0x00,0xef,0xd0,0x88,0x05,0x28,
	0x60,0x94,0x00,0x06,0x07,0xc5,0x00,0x00,
	0x00,0xc6,0xf0,0xb8,0x06,0xe3,0x70,0xe4,
	0xb7,0x02,0xa7,0x1d,0x80,0x3f,0x97,0xad,
	0x90,0x6d,0x80,0x3f,0x00,0x21,0xd0,0x30,
	0x30,0x1e,0xf8,0xd5,0x02,0x86,0xc9,0x1d,
	0x02,0x46,0x30,0x64,0xf8,0xd5,0x99,0x2f,
	0x19,0x18,0x19,0x18,0xb7,0x03,0xa7,0x1d,
	0x80,0x3f,0x17,0x20,0xe8,0xd5,0xc0,0x64,
	0x00,0x21,0x40,0x7f,0xe8,0x62,0x03,0x55,
	0xe8,0x8d,0xe0,0xd5,0x81,0x9f,0x80,0x3f,
	0x80,0x3f,0x90,0x25,0x97,0xae,0x90,0xad,
	0x8f,0x70,0x03,0x55,0xe8,0x6e,0xd0,0x42,
	0x40,0x42,0xe8,0xd5,0x05,0xe1,0x67,0x90,
	0x0b,0x55,0x90,0x22,0x82,0xe2,0x91,0x23,
	0x11,0x1e,0x11,0x02,0xa0,0x22,0xd0,0x42,
	0x40,0x42,0xe8,0x80,0x05,0xe7,0x70,0x60,
	0xf0,0x9d,0x61,0x01,0x05,0xe7,0x60,0x60,
	0x0f,0x2e,0xd0,0x57,0x60,0x44,0xf0,0xa5,
	0x67,0x44,0xf0,0xa5,0x61,0x44,0xf0,0xa5,
	0xd0,0xc0,0x06,0xe3,0x61,0x28,0x60,0xc4,
	0xf0,0xa5,0x20,0xdc,0x07,0xd6,0x02,0x17,
	0xe8,0x92,0x07,0x98,0x06,0xe3,0x60,0xe4,
	0x00,0x06,0x87,0x24,0x86,0x5f,0x00,0xe9,
	0xd0,0x6c,0xd0,0x12,0x00,0x20,0xd7,0xfd,
	0x00,0x05,0xb0,0x7c,0x05,0xef,0xd0,0x38,
	0x30,0x01,0xec,0xa4,0x05,0xe7,0xd0,0x68,
	0x07,0xc5,0xb1,0x3c,0x00,0x28,0x70,0x3c,
	0x30,0x04,0xec,0xac,0x00,0x28,0x71,0x38,
	0x90,0x22,0x82,0xe2,0xa1,0x23,0xa0,0x22,
	0x07,0xc5,0x30,0x9e,0xe8,0xb8,0xbd,0x82,
	0x97,0x2e,0xa7,0x1d,0x3d,0x9c,0xe0,0xd5,
	0xbd,0x82,0x00,0xef,0xd0,0x7f,0x97,0x2e,
	0x30,0x5c,0xe4,0xdd,0xbd,0x83,0x80,0xb0,
	0xb7,0x03,0x90,0x6d,0x37,0x01,0x3d,0x9c,
	0xa7,0x1d,0x10,0x65,0xe4,0xcf,0xbd,0x85,
	0x90,0xae,0x97,0x6f,0x17,0x60,0xb0,0x45,
	0xc9,0x02,0x02,0x1b,0xe8,0xd1,0xd7,0x40,
	0xd0,0x80,0x3d,0x81,0xa0,0x70,0xc1,0x42,
	0x07,0xc5,0x01,0x46,0x00,0xe9,0xd0,0x6c,
	0xd0,0x12,0x00,0x22,0xd7,0xcd,0x00,0x05,
	0xc0,0x00,0x01,0x46,0x00,0xe9,0xd0,0x5c,
	0xd0,0x12,0x00,0x23,0xd7,0xc7,0x00,0x05,
	0xc0,0x00,0x00,0x00,0x97,0xa2,0x06,0xe4,
	0xd0,0x00,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0xb0,0x3c,0xd0,0x41,0x60,0x40,0x00,0xa8,
	0xd0,0x00,0x90,0xe1,0x40,0xc0,0xf8,0x4b,
	0x02,0xa0,0xd0,0x00,0x84,0x22,0x80,0x3f,
	0xa0,0x23,0x90,0x75,0x10,0x54,0xd0,0x83,
	0x40,0x42,0x10,0x61,0xf8,0x5d,0x0b,0x6c,
	0xd0,0x40,0xd0,0x80,0xf0,0x76,0x00,0x21,
	0xd1,0x00,0xd0,0x40,0x00,0x26,0xd0,0xb7,
	0xf0,0x76,0xb1,0x01,0xf8,0x5f,0x02,0xa0,
	0xd0,0x01,0x84,0x22,0xa0,0x23,0x06,0xe3,
	0xd0,0x0c,0x79,0x00,0x06,0x10,0x69,0x00,
	0xa7,0xa2,0x01,0x46,0x00,0xe9,0xd0,0x6c,
	0xd0,0x12,0x00,0x20,0xd7,0xfd,0x00,0x05,
	0x00,0xc6,0x90,0xe2,0x80,0xe2,0x97,0x63,
	0x17,0x5e,0x17,0x42,0xb7,0x7e,0xa0,0xbc,
	0xa0,0x7d,0x80,0x3f,0x60,0x9d,0x00,0x06,
	0xb7,0x7e,0x00,0x28,0xd0,0x34,0x70,0x00,
	0x30,0x1d,0xf4,0x8b,0x00,0x28,0xd0,0x30,
	0x77,0x40,0x80,0xe2,0x80,0x3f,0xa7,0x63,
	0x80,0x62,0x80,0x3f,0x97,0x63,0xb7,0x7c,
	0xa7,0x63,0x80,0xa2,0x80,0x3f,0x97,0x63,
	0xb7,0x44,0xa7,0x63,0x01,0x46,0xa0,0xe2,
	0x07,0xc5,0x00,0x00,0xd1,0x05,0xd1,0x40,
	0xc0,0xd5,0x00,0x22,0x30,0xc0,0x11,0x70,
	0xe8,0x79,0xb1,0x7f,0x00,0x22,0x20,0xc0,
	0xc0,0x03,0xb0,0x3d,0x70,0x40,0x07,0x69,
	0x30,0x43,0xf8,0x05,0xb0,0x02,0x70,0x80,
	0x07,0x2a,0x30,0x83,0xf8,0x05,0xd1,0x80,
	0xd2,0x9f,0xc2,0x03,0xb2,0x3d,0x70,0x48,
	0x01,0x81,0xb2,0x02,0x70,0x88,0x01,0x82,
	0xb2,0x3a,0xb2,0x81,0xf8,0x19,0x70,0x48,
	0x01,0x81,0xb2,0x02,0x72,0xc8,0x32,0xc6,
	0xf8,0x05,0xd2,0x9b,0xc2,0x03,0xb2,0x39,
	0x01,0xa0,0xd2,0x5c,0x70,0x48,0x60,0x49,
	0xb2,0x02,0xb2,0x7c,0x70,0x88,0x60,0x89,
	0xb2,0x3a,0xb2,0x7c,0xb2,0x81,0xf8,0x2c,
	0x70,0x48,0x60,0x49,0xb2,0x02,0x73,0x08,
	0xc3,0x4c,0x13,0x18,0x00,0x23,0x43,0x7f,
	0x00,0x23,0x43,0x3f,0xb2,0x3a,0x72,0x88,
	0xb2,0x38,0x72,0xc8,0x00,0x20,0x23,0x17,
	0xd0,0x36,0x30,0x0c,0xf4,0x4b,0x00,0x20,
	0x33,0x37,0x00,0x20,0x23,0x76,0xd0,0x36,
	0x30,0x0d,0xf4,0x52,0x00,0x20,0x33,0x77,
	0x00,0x24,0x22,0x80,0x01,0xa0,0xd1,0xdc,
	0xc0,0x0d,0x10,0x02,0xc2,0x07,0x22,0x00,
	0xc0,0x0c,0x10,0x02,0xc2,0x47,0x22,0x40,
	0x70,0x08,0x73,0x89,0x20,0x0e,0x0f,0xef,
	0x40,0x3f,0x60,0x08,0xb3,0x01,0xf4,0x67,
	0xd3,0x36,0xb3,0x41,0xf4,0x6a,0xd3,0x76,
	0xf0,0x82,0xb2,0x81,0xf8,0x56,0xd1,0x80,
	0xd2,0xb7,0x01,0xa0,0xd2,0x1c,0x70,0x08,
	0x01,0x80,0xb2,0x3c,0xb2,0x81,0xf8,0x71,
	0x32,0xc6,0xf8,0x05,0xd1,0x04,0x61,0x1b,
	0x00,0x2a,0x61,0x28,0x00,0xa1,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xef,0xd0,0x3c,0x01,0x46,0x59,0x80,
	0x39,0x80,0x00,0x24,0xd0,0x14,0x59,0x80,
	0x00,0xc6,0x07,0xc5,0x05,0x27,0x70,0x34,
	0x10,0x20,0xf9,0xaf,0x00,0x61,0xd0,0x34,
	0x70,0x00,0x10,0x20,0xf8,0x0e,0x05,0xe6,
	0xd0,0x14,0xd0,0x40,0x60,0x40,0xe0,0x12,
	0x05,0xe6,0x70,0x18,0x05,0xe6,0x60,0x14,
	0x05,0xe0,0x78,0x34,0x00,0x1a,0xf8,0x35,
	0x05,0xe7,0x70,0x24,0xb0,0x3c,0x05,0xef,
	0xd0,0x7c,0x30,0x40,0xec,0x1f,0x05,0xe7,
	0xd0,0x28,0x70,0x00,0x10,0x20,0xe8,0x35,
	0x70,0x40,0x0f,0x2e,0xd0,0x97,0x30,0x81,
	0xf9,0xd8,0xb0,0x3c,0x00,0x28,0x70,0x7c,
	0x30,0x40,0xec,0x2e,0x00,0x28,0x70,0x38,
	0xc2,0xc0,0xf2,0x34,0x05,0xe0,0x78,0x34,
	0x04,0x1a,0x05,0xe0,0x68,0x34,0x05,0xe0,
	0x78,0x34,0x18,0x20,0xf8,0x40,0x05,0xe7,
	0x70,0x24,0x70,0x40,0x10,0x60,0xe9,0xaf,
	0x05,0xe0,0x60,0x68,0x00,0x11,0xf9,0xaf,
	0x00,0x15,0xe8,0xb7,0xf3,0x87,0x05,0xe0,
	0x78,0x34,0x00,0x1a,0xe8,0x5f,0x05,0xe3,
	0x75,0x30,0x05,0xe3,0x75,0x74,0x05,0xe5,
	0x70,0x10,0x05,0xe5,0x70,0xcc,0x07,0xef,
	0xd0,0xbf,0x40,0x02,0x45,0x02,0x30,0x14,
	0x08,0x20,0xd0,0x40,0x40,0x40,0x40,0x02,
	0x10,0x51,0x30,0xc1,0x30,0xd5,0x10,0xe0,
	0xe5,0xc4,0x05,0xe3,0x75,0x30,0x05,0xe3,
	0x75,0x74,0x05,0xe3,0x70,0x38,0x05,0xe3,
	0x70,0xfc,0x07,0xef,0xd0,0xbf,0x40,0x02,
	0x45,0x02,0x30,0x14,0x08,0x20,0xd0,0x40,
	0x40,0x40,0x40,0x02,0x10,0x51,0x30,0xc1,
	0x30,0xd5,0x10,0xe0,0xe4,0x80,0xd0,0x00,
	0x05,0xe6,0x60,0x14,0x05,0xe6,0x60,0x18,
	0x05,0xe0,0x78,0x34,0x08,0x1a,0x05,0xe0,
	0x68,0x34,0xe0,0xb7,0x05,0xe0,0x78,0x34,
	0x00,0x1b,0xe8,0xb7,0x00,0x1a,0xe8,0x9c,
	0x05,0xe4,0x75,0x00,0x05,0xe4,0x75,0x44,
	0x05,0xe5,0x70,0x10,0x05,0xe5,0x70,0xcc,
	0x07,0xef,0xd0,0xbf,0x40,0x02,0x45,0x02,
	0x30,0x14,0x08,0x20,0xd0,0x40,0x40,0x40,
	0x40,0x02,0x10,0x51,0x30,0xc1,0x30,0xd5,
	0x10,0xe0,0xe5,0xc4,0x05,0xe4,0x75,0x00,
	0x05,0xe4,0x75,0x44,0x05,0xe3,0x70,0x38,
	0x05,0xe3,0x70,0xfc,0x07,0xef,0xd0,0xbf,
	0x40,0x02,0x45,0x02,0x30,0x14,0x08,0x20,
	0xd0,0x40,0x40,0x40,0x40,0x02,0x10,0x51,
	0x30,0xc1,0x30,0xd5,0x10,0xe0,0xe5,0xaf,
	0x05,0xe0,0x78,0x34,0x08,0x1b,0x05,0xe0,
	0x68,0x34,0x00,0x10,0xe8,0xbe,0x00,0x12,
	0xe8,0xd7,0x00,0x13,0xe9,0x21,0xe1,0xaf,
	0x01,0x46,0x05,0xe0,0x72,0xe8,0x70,0x4b,
	0x00,0x06,0x00,0x3f,0xd3,0x97,0x30,0x40,
	0xf9,0xb4,0x00,0xc6,0xd0,0x00,0x60,0x0b,
	0xf3,0xb4,0x05,0xe0,0x62,0xe8,0x04,0x10,
	0x05,0xe0,0x68,0x34,0x05,0xe0,0x72,0xe8,
	0xf2,0x0f,0xf3,0xb4,0xf3,0xb4,0x05,0xe0,
	0x62,0xe8,0x05,0xe0,0x78,0x34,0x00,0x1a,
	0xe8,0xf1,0x05,0xe3,0x75,0x28,0x05,0xe3,
	0x75,0x6c,0x05,0xe5,0x70,0x10,0x05,0xe5,
	0x70,0xcc,0x07,0xef,0xd0,0xbf,0x40,0x02,
	0x45,0x02,0x30,0x14,0x08,0x20,0xd0,0x40,
	0x40,0x40,0x40,0x02,0x10,0x51,0x30,0xc1,
	0x30,0xd5,0x10,0xe0,0xe5,0xc4,0xf3,0x87,
	0x05,0xe3,0x75,0x28,0x05,0xe3,0x75,0x6c,
	0x05,0xe3,0x70,0x38,0x05,0xe3,0x70,0xfc,
	0x07,0xef,0xd0,0xbf,0x40,0x02,0x45,0x02,
	0x30,0x14,0x08,0x20,0xd0,0x40,0x40,0x40,
	0x40,0x02,0x10,0x51,0x30,0xc1,0x30,0xd5,
	0x10,0xe0,0xe5,0xaf,0x05,0xe0,0x78,0x34,
	0x04,0x12,0x05,0xe0,0x68,0x34,0x05,0xe1,
	0xd0,0x44,0x70,0x41,0x30,0xc1,0x05,0xe0,
	0x72,0xe8,0xf3,0xb4,0xb2,0xfd,0x70,0xcb,
	0x05,0xe6,0x60,0xec,0x0f,0xa8,0xd0,0x00,
	0x30,0x03,0xf5,0x21,0x05,0xe0,0xd0,0x14,
	0xd0,0x85,0x60,0x80,0xe1,0xb4,0x05,0xe0,
	0x72,0xe8,0x73,0xcb,0xf3,0xb4,0xb2,0xfd,
	0x70,0xcb,0x33,0xc3,0xf9,0x2d,0x04,0x13,
	0x05,0xe0,0x68,0x34,0xe1,0x3a,0x05,0xe7,
	0x70,0x24,0xb0,0x3c,0x05,0xef,0xd0,0x7c,
	0x30,0x40,0xed,0x36,0x05,0xe7,0xd0,0x28,
	0x70,0x00,0x10,0x20,0xf9,0xc4,0xe1,0xaf,
	0x05,0xe0,0x70,0x28,0x20,0xc0,0x05,0xe4,
	0x60,0xe8,0x05,0xe0,0x72,0xe8,0xf3,0xb4,
	0xb2,0xfe,0x05,0xe0,0x62,0xe8,0xf1,0xdc,
	0xc8,0x03,0xf1,0xdc,0x18,0x08,0x58,0x03,
	0x00,0x1b,0xe9,0x71,0xf2,0x59,0x05,0xe3,
	0x70,0x6c,0x05,0xe3,0x70,0xa8,0x20,0x94,
	0x08,0x20,0xd0,0x00,0x40,0x02,0x10,0x11,
	0x20,0x40,0x07,0xef,0xd0,0x3f,0x40,0x80,
	0x20,0x55,0x00,0x19,0xe9,0x67,0x05,0xe3,
	0x60,0x74,0x05,0xe3,0x60,0xb0,0x05,0xe0,
	0x78,0x74,0x04,0x95,0x05,0xe0,0x68,0x74,
	0xe1,0x71,0x05,0xe4,0x60,0x44,0x05,0xe4,
	0x60,0x80,0x05,0xe0,0x78,0x74,0x04,0x9b,
	0x04,0x95,0x05,0xe0,0x68,0x74,0x00,0x1a,
	0xe9,0x74,0xf2,0x6e,0x00,0x18,0xe9,0x7c,
	0xf2,0xf4,0x05,0xe0,0x78,0x74,0x04,0x96,
	0x05,0xe0,0x68,0x74,0x00,0x17,0xe9,0x84,
	0xf3,0x38,0x05,0xe0,0x78,0x74,0x04,0x97,
	0x05,0xe0,0x68,0x74,0x00,0x19,0xe9,0x9c,
	0xf3,0x7c,0x05,0xe0,0x78,0x34,0x04,0x14,
	0x08,0x18,0x08,0x19,0x05,0xe0,0x68,0x34,
	0xf3,0xa4,0xd0,0x00,0x05,0xaf,0x60,0x34,
	0x05,0xe6,0x60,0x14,0x05,0xe6,0x60,0x18,
	0xf1,0xdc,0xf1,0xdc,0x05,0xe0,0x70,0x28,
	0x05,0xe4,0x60,0x30,0x05,0xe4,0x70,0x28,
	0xb0,0x3c,0x00,0x28,0x70,0x7c,0x30,0x40,
	0xed,0xa6,0x00,0x28,0x70,0x38,0x30,0x01,
	0x05,0xe0,0x60,0x28,0x05,0xe0,0x78,0x34,
	0x08,0x12,0x08,0x10,0x08,0x13,0x05,0xe0,
	0x68,0x34,0x00,0x20,0xd0,0x12,0x00,0x6c,
	0xd0,0x60,0x00,0x05,0x05,0xe7,0x70,0x24,
	0x70,0x40,0x10,0x60,0xe9,0xc2,0xb0,0x3c,
	0x05,0xef,0xd0,0x7c,0x30,0x40,0xed,0xc0,
	0x05,0xe7,0xd0,0x28,0x05,0xe7,0x60,0x24,
	0x00,0xc6,0xe1,0xaf,0xd0,0x00,0x05,0xe0,
	0x60,0x34,0x05,0xe7,0x70,0x24,0x70,0x40,
	0x10,0x20,0xe9,0xd7,0xd0,0x80,0x60,0x80,
	0xb0,0x3c,0x05,0xef,0xd0,0x7c,0x30,0x40,
	0xed,0xd5,0x05,0xe7,0xd0,0x28,0x05,0xe7,
	0x60,0x24,0xe1,0xaf,0xd0,0x41,0x05,0x6e,
	0x60,0x74,0xe1,0xaf,0x05,0xe0,0x72,0xe8,
	0xc0,0x4b,0x10,0x5e,0x10,0x42,0xd0,0x83,
	0x40,0x8b,0xe9,0xfe,0xb0,0x81,0xe9,0xf7,
	0xb0,0x81,0xe9,0xef,0xb0,0x7f,0x70,0xc1,
	0x00,0x06,0x00,0x23,0xd0,0x7f,0x40,0xc1,
	0xe2,0x05,0xb0,0x7f,0x70,0xc1,0x00,0x06,
	0x10,0xd8,0x00,0x23,0xd0,0x7f,0x40,0xc1,
	0xe2,0x05,0xb0,0x7d,0x70,0xc1,0x00,0x06,
	0x00,0x23,0xd0,0x7f,0x40,0xc1,0xe2,0x05,
	0xb0,0x7d,0x70,0xc1,0x00,0x06,0x10,0xd8,
	0x00,0x23,0xd0,0x7f,0x40,0xc1,0xb2,0xff,
	0x00,0x28,0x70,0x3c,0x30,0x0b,0xee,0x0c,
	0x00,0x28,0x72,0xf8,0x05,0xe0,0x62,0xe8,
	0x07,0xc5,0xc0,0x0b,0x75,0x00,0xb0,0x3c,
	0x00,0x28,0x70,0x7c,0x30,0x40,0xee,0x18,
	0x00,0x28,0x70,0x38,0x75,0x40,0xc0,0x14,
	0x10,0x16,0x10,0x19,0x00,0x21,0xd0,0x7f,
	0x40,0x01,0x0f,0xef,0xd0,0x7f,0x45,0x01,
	0x15,0x1f,0xc0,0x55,0x00,0x23,0xd0,0xbf,
	0x40,0x42,0x15,0x57,0x00,0x20,0xd0,0x87,
	0x45,0x42,0x15,0x48,0x25,0x41,0x15,0x47,
	0x25,0x40,0x05,0xe3,0x65,0x28,0x05,0xe3,
	0x65,0x6c,0x07,0xc5,0xc0,0x0b,0x75,0x00,
	0xb0,0x3c,0x00,0x28,0x70,0x7c,0x30,0x40,
	0xee,0x3d,0x00,0x28,0x70,0x38,0x75,0x40,
	0xc0,0x14,0x10,0x16,0x10,0x19,0x00,0x21,
	0xd0,0x7f,0x40,0x01,0x0f,0xef,0xd0,0x7f,
	0x45,0x01,0x15,0x1f,0xc0,0x55,0x00,0x23,
	0xd0,0xbf,0x40,0x42,0x15,0x57,0x00,0x20,
	0xd0,0x87,0x45,0x42,0x15,0x48,0x25,0x41,
	0x15,0x47,0x25,0x40,0x05,0xe5,0x65,0x10,
	0x05,0xe5,0x65,0x4c,0x07,0xc5,0xc3,0x1f,
	0xf1,0xdc,0x10,0xc8,0xc5,0x43,0xf1,0xdc,
	0x55,0x43,0x15,0x41,0xf1,0xdc,0x10,0xc8,
	0xc5,0x03,0xf1,0xdc,0x55,0x03,0xc8,0x54,
	0x00,0x9f,0xea,0x6c,0x08,0x9f,0xc5,0x21,
	0xd8,0x41,0x55,0x61,0xc7,0xcc,0x07,0xc5,
	0xc3,0x1f,0xf1,0xdc,0x10,0xc8,0xc4,0xc3,
	0xf1,0xdc,0x54,0xc3,0x00,0x2b,0xd0,0x0f,
	0x30,0x13,0xe5,0xc4,0x05,0xe2,0x64,0xf8,
	0xf1,0xdc,0xc4,0x83,0xf1,0xdc,0x14,0x88,
	0x54,0x83,0x05,0x27,0x70,0x04,0x10,0x20,
	0xea,0x9a,0xe6,0x8f,0xc0,0x12,0xc2,0x52,
	0x10,0x1d,0x12,0x5c,0x20,0x09,0x24,0x80,
	0x10,0x1c,0x24,0x80,0x12,0x5b,0x24,0x89,
	0xe2,0x9a,0xc0,0x12,0xc2,0x52,0x14,0x9f,
	0x10,0x1e,0x12,0x5c,0x20,0x09,0x24,0x80,
	0x10,0x1c,0x24,0x80,0x12,0x5b,0x24,0x89,
	0x00,0x2f,0xd0,0x3e,0x44,0x80,0x05,0xe2,
	0x64,0xb0,0xf1,0xdc,0xc4,0x03,0x14,0x08,
	0xf1,0xdc,0x54,0x03,0x05,0xe4,0x64,0x1c,
	0xb4,0x01,0x24,0x13,0x00,0x2b,0xd0,0x0f,
	0x30,0x10,0xe5,0xc4,0x05,0xe2,0x64,0x3c,
	0x14,0xcc,0x54,0xd0,0x03,0xd1,0xea,0xb5,
	0x0a,0x20,0xd0,0x0a,0x24,0xc0,0x05,0xe5,
	0xd0,0x04,0x64,0xc0,0xf1,0xdc,0xc4,0x43,
	0x14,0x48,0xf1,0xdc,0x54,0x43,0xc0,0x11,
	0x10,0x1f,0x05,0xe4,0x60,0x20,0x05,0xe4,
	0x60,0x24,0xb4,0x41,0x24,0x52,0x05,0xe2,
	0x64,0x74,0x00,0x20,0xd2,0x68,0x03,0xd1,
	0xea,0xcd,0x00,0x20,0xd2,0x6a,0x24,0x49,
	0x24,0x89,0x14,0x8c,0x54,0x91,0x05,0xe5,
	0xd0,0x08,0x64,0x80,0x06,0x21,0xd1,0xb8,
	0xd2,0x83,0xd3,0x80,0xd5,0x80,0xf1,0xdc,
	0x10,0xc8,0xc3,0x43,0xf1,0xdc,0x53,0x43,
	0x13,0x48,0xf1,0xdc,0x53,0x43,0x63,0x46,
	0xf1,0xdc,0x10,0xdc,0x15,0xa0,0xea,0xe9,
	0xc0,0x16,0x10,0x02,0x10,0xc0,0x53,0x83,
	0xb1,0xbc,0xb5,0xbf,0xb2,0x81,0xe6,0xef,
	0xe2,0xd9,0xc7,0xcc,0x05,0xaf,0xd0,0x1c,
	0x63,0x80,0x07,0xc5,0xc3,0x1f,0xf1,0xdc,
	0xc3,0x43,0xf1,0xdc,0x13,0x48,0x53,0x43,
	0x05,0xe3,0x63,0x4c,0xf1,0xdc,0x10,0xc8,
	0xc3,0x43,0xf1,0xdc,0x53,0x43,0x05,0xe3,
	0x63,0x44,0xf1,0xdc,0xc3,0x43,0x13,0x48,
	0xf1,0xdc,0x53,0x43,0x05,0xe3,0x70,0xcc,
	0xb3,0x41,0x20,0xcd,0x05,0xe3,0x60,0xd0,
	0xf1,0xdc,0x10,0xc8,0xc3,0x43,0xf1,0xdc,
	0x53,0x43,0xb3,0x41,0x05,0xe3,0x70,0xc4,
	0x20,0xcd,0x05,0xe3,0x60,0xc8,0x06,0x22,
	0xd1,0x88,0xd2,0x83,0xd3,0x80,0xd5,0x80,
	0xf1,0xdc,0x10,0xc8,0xc3,0x43,0xf1,0xdc,
	0x53,0x43,0x13,0x48,0xf1,0xdc,0x53,0x43,
	0x63,0x46,0xf1,0xdc,0x10,0xdc,0x15,0xa0,
	0xeb,0x2e,0xc0,0x16,0x10,0x02,0x10,0xc0,
	0x53,0x83,0xb1,0xbc,0xb5,0xbf,0xb2,0x81,
	0xe7,0x34,0xe3,0x1e,0xc7,0xcc,0x05,0xe3,
	0x63,0x80,0x07,0xc5,0xc3,0x1f,0xf1,0xdc,
	0xc3,0x43,0xf1,0xdc,0x13,0x48,0x53,0x43,
	0x05,0xe3,0x63,0x60,0xf1,0xdc,0x10,0xc8,
	0xc3,0x43,0xf1,0xdc,0x53,0x43,0x05,0xe3,
	0x63,0x58,0xf1,0xdc,0xc3,0x43,0x13,0x48,
	0xf1,0xdc,0x53,0x43,0x05,0xe3,0x70,0xe0,
	0xb3,0x41,0x20,0xcd,0x05,0xe3,0x60,0xe4,
	0xf1,0xdc,0x10,0xc8,0xc3,0x43,0xf1,0xdc,
	0x53,0x43,0xb3,0x41,0x05,0xe3,0x70,0xd8,
	0x20,0xcd,0x05,0xe3,0x60,0xdc,0x06,0x22,
	0xd1,0x98,0xd2,0x83,0xd3,0x80,0xd5,0x80,
	0xf1,0xdc,0x10,0xc8,0xc3,0x43,0xf1,0xdc,
	0x53,0x43,0x13,0x48,0xf1,0xdc,0x53,0x43,
	0x63,0x46,0xf1,0xdc,0x10,0xdc,0x15,0xa0,
	0xeb,0x72,0xc0,0x16,0x10,0x02,0x10,0xc0,
	0x53,0x83,0xb1,0xbc,0xb5,0xbf,0xb2,0x81,
	0xe7,0x78,0xe3,0x62,0xc7,0xcc,0x05,0xe3,
	0x63,0x94,0x07,0xc5,0xc3,0x1f,0xf1,0xdc,
	0x10,0xdf,0x10,0xe0,0xeb,0x85,0xf1,0xdc,
	0xf1,0xdc,0xf1,0xdc,0xf1,0xdc,0xc7,0xcc,
	0x07,0xc5,0x05,0xe1,0xd0,0x1c,0x70,0x00,
	0x10,0x20,0xfb,0x9b,0x01,0x46,0x90,0x83,
	0x90,0xc2,0x00,0xff,0xdf,0xff,0x40,0xc0,
	0x07,0xef,0xd0,0x3f,0x40,0x80,0x00,0xc6,
	0x05,0xe3,0x60,0xb8,0x05,0xe3,0x60,0xfc,
	0x07,0xc5,0x05,0x2e,0x70,0x0c,0x05,0xe3,
	0x60,0x38,0x05,0x2e,0x70,0x10,0x05,0xe3,
	0x60,0x3c,0x07,0xc5,0x01,0x46,0x05,0xe7,
	0x70,0x24,0xd0,0x80,0x60,0x80,0x00,0xc6,
	0xb0,0x3c,0x05,0xef,0xd0,0x7c,0x30,0x40,
	0xef,0xb1,0x05,0xe7,0xd0,0x28,0x05,0xe7,
	0x60,0x24,0x07,0xc5,0xb2,0xfc,0x00,0x28,
	0x70,0x3c,0x30,0x0b,0xef,0xbb,0x00,0x28,
	0x72,0xf8,0x07,0xc5,0xd3,0x40,0x05,0xe0,
	0x78,0x34,0x00,0x14,0xe8,0xde,0x01,0x46,
	0x82,0x90,0x80,0x15,0x80,0x3f,0x00,0xc6,
	0x00,0x51,0xf8,0x2e,0xd1,0x40,0x00,0x63,
	0xd5,0x35,0x00,0x65,0xd1,0x9e,0xc1,0xc5,
	0xd3,0x80,0xd3,0xc0,0xd4,0x80,0xd4,0xc0,
	0xd5,0x40,0xd3,0x00,0xd0,0xc0,0x00,0x66,
	0xd5,0xa9,0x05,0xe4,0x71,0x1c,0x00,0x52,
	0xf8,0x2b,0x05,0xe5,0x72,0x94,0xd0,0x41,
	0x00,0x01,0x05,0xe4,0x60,0x38,0x05,0xe4,
	0x62,0xbc,0x05,0xe4,0x72,0xf0,0x05,0xe4,
	0x72,0x20,0x05,0xe4,0x72,0x24,0xe0,0x3e,
	0x01,0x46,0x05,0xef,0xd0,0xb8,0x00,0x21,
	0xd4,0x1c,0x83,0x3a,0x80,0x3f,0x80,0x3b,
	0x80,0x3f,0x83,0x7a,0x80,0x3f,0x04,0x0a,
	0x7e,0xc2,0x00,0x06,0x00,0xc6,0xe0,0x6f,
	0xd0,0x03,0x40,0x0b,0x10,0x20,0xe8,0x51,
	0x10,0x21,0xe8,0x4e,0x10,0x22,0xe8,0x4a,
	0xd1,0x40,0x00,0x64,0xd5,0x38,0xe0,0x51,
	0xd1,0x40,0x00,0x64,0xd5,0x22,0xe0,0x51,
	0xd1,0x40,0x00,0x64,0xd5,0x0b,0x12,0xde,
	0x12,0xc2,0xc0,0x4b,0xb0,0x7f,0x74,0x81,
	0xb0,0x7e,0x74,0xc1,0x00,0x51,0xe8,0x6d,
	0x00,0x52,0xf8,0xbb,0x04,0x52,0x05,0xe0,
	0x68,0x34,0x05,0xe4,0x72,0x24,0xf1,0xc4,
	0x05,0xe5,0x62,0x80,0x00,0x65,0xd1,0x9e,
	0xd8,0x47,0x48,0x45,0xe8,0x6b,0x05,0x04,
	0xe0,0x66,0xd1,0x40,0xe0,0x6f,0x04,0x51,
	0x04,0x11,0x00,0x23,0xd0,0x7a,0x30,0x4d,
	0xe8,0xa3,0x05,0x04,0x12,0x60,0xe8,0x81,
	0xc0,0x89,0xd2,0x41,0x01,0x84,0xc2,0x42,
	0xc0,0x42,0x01,0x84,0xd5,0xc1,0xf1,0xab,
	0x12,0x20,0xe8,0x58,0xe0,0x6f,0xd5,0xc1,
	0x05,0x04,0xc0,0x49,0xc4,0x49,0xb4,0x7f,
	0x14,0x61,0xe8,0x9b,0x14,0x62,0xe8,0x96,
	0x14,0x63,0xe8,0x91,0xb5,0xff,0xd2,0x41,
	0x01,0x84,0xd2,0x40,0x01,0x84,0xb5,0xff,
	0xd2,0x41,0x01,0x84,0xd2,0x40,0x01,0x84,
	0xb5,0xff,0xd2,0x41,0x01,0x84,0xd2,0x40,
	0x01,0x84,0xd2,0x41,0x01,0x84,0xd2,0x40,
	0x01,0x84,0xf1,0xab,0x12,0x20,0xe8,0x58,
	0xe0,0x6f,0x05,0xe0,0x68,0x34,0xd3,0x40,
	0x05,0xef,0xd0,0xb8,0x00,0x21,0xd4,0x1c,
	0x01,0x46,0x83,0x3a,0x80,0x3f,0x80,0x3b,
	0x80,0x3f,0x83,0x7a,0x80,0x3f,0x04,0x0a,
	0x6e,0xc2,0x00,0x06,0x00,0xc6,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x08,0x51,0x08,0x52,0x08,0x14,
	0x08,0x11,0x05,0xe0,0x68,0x34,0xf1,0xc4,
	0x01,0x46,0x05,0xe4,0x70,0x3c,0x05,0xe0,
	0x60,0x00,0x05,0xe5,0x70,0x00,0x05,0xe0,
	0x60,0x0c,0x05,0xe5,0x70,0x04,0x05,0xaf,
	0x60,0x20,0x05,0xe5,0x70,0x08,0x05,0xaf,
	0x60,0x24,0x00,0xc6,0xd0,0x48,0x00,0x61,
	0x70,0x34,0x10,0x20,0xe8,0xdb,0x05,0xe6,
	0x60,0x54,0x05,0xe6,0x60,0x58,0x00,0xc6,
	0xc0,0x00,0xc0,0x00,0x00,0x20,0xd0,0x12,
	0x00,0x6c,0xd0,0x68,0x00,0x05,0xb3,0x7f,
	0xb2,0xfc,0x00,0x28,0x70,0x3c,0x30,0x0b,
	0xec,0xed,0x00,0x28,0x72,0xf8,0xc0,0x4b,
	0xb0,0x7f,0x74,0x81,0x00,0x06,0xb0,0x7e,
	0x74,0xc1,0x00,0x06,0x05,0x04,0xb1,0x7f,
	0xc2,0x53,0x12,0x52,0x05,0x04,0xb1,0x7f,
	0xd2,0x43,0xc0,0x53,0x10,0x54,0x42,0x41,
	0x05,0x04,0xb1,0x7f,0xd2,0x43,0xc0,0x53,
	0x10,0x56,0x42,0x41,0x05,0x04,0xb1,0x7f,
	0xd2,0x43,0xc0,0x53,0x10,0x58,0x42,0x41,
	0x05,0x04,0xb1,0x7f,0xd2,0x43,0xc0,0x53,
	0x10,0x5a,0x42,0x41,0x05,0x04,0xb1,0x7f,
	0xd2,0x43,0xc0,0x53,0x10,0x5c,0x42,0x41,
	0x05,0x04,0xb1,0x7f,0xd2,0x43,0xc0,0x53,
	0x10,0x5e,0x42,0x41,0x05,0x04,0xb1,0x7f,
	0xd2,0x43,0xc0,0x53,0x42,0x41,0x05,0x04,
	0xb1,0x7f,0xc2,0x52,0x12,0x52,0x05,0x04,
	0xb1,0x7f,0xd2,0x43,0xc0,0x52,0x10,0x54,
	0x42,0x41,0x05,0x04,0xb1,0x7f,0xd2,0x43,
	0xc0,0x52,0x10,0x56,0x42,0x41,0x05,0x04,
	0xb1,0x7f,0xd2,0x43,0xc0,0x52,0x10,0x58,
	0x42,0x41,0x05,0x04,0xb1,0x7f,0xd2,0x43,
	0xc0,0x52,0x10,0x5a,0x42,0x41,0x05,0x04,
	0xb1,0x7f,0xd2,0x43,0xc0,0x52,0x10,0x5c,
	0x42,0x41,0x05,0x04,0xb1,0x7f,0xd2,0x43,
	0xc0,0x52,0x10,0x5e,0x42,0x41,0x05,0x04,
	0xb1,0x7f,0xd2,0x43,0xc0,0x52,0x42,0x41,
	0xe0,0xe5,0x00,0x06,0xb3,0x7f,0x01,0x46,
	0xa3,0xbc,0x80,0x3f,0xa3,0xfd,0x80,0x3f,
	0xc0,0x4a,0xb0,0x7e,0x63,0x81,0x00,0x06,
	0xc8,0x58,0xb2,0xbc,0x00,0xc6,0x01,0x84,
	0xb5,0x7f,0xc3,0xc9,0x13,0xce,0x01,0x84,
	0xb5,0x7f,0xc0,0x49,0x10,0x4c,0x53,0xc1,
	0x01,0x84,0xb5,0x7f,0xc0,0x49,0x10,0x4a,
	0x53,0xc1,0x01,0x84,0xb5,0x7f,0xc0,0x49,
	0x10,0x48,0x53,0xc1,0x01,0x84,0xb5,0x7f,
	0xc0,0x49,0x10,0x46,0x53,0xc1,0x01,0x84,
	0xb5,0x7f,0xc0,0x49,0x10,0x44,0x53,0xc1,
	0x01,0x84,0xb5,0x7f,0xc0,0x49,0x10,0x42,
	0x53,0xc1,0x01,0x84,0xb5,0x7f,0x53,0xc9,
	0x01,0x84,0xb5,0x7f,0xc3,0x89,0x13,0x8e,
	0x01,0x84,0xb5,0x7f,0xc0,0x49,0x10,0x4c,
	0x53,0x81,0x01,0x84,0xb5,0x7f,0xc0,0x49,
	0x10,0x4a,0x53,0x81,0x01,0x84,0xb5,0x7f,
	0xc0,0x49,0x10,0x48,0x53,0x81,0x01,0x84,
	0xb5,0x7f,0xc0,0x49,0x10,0x46,0x53,0x81,
	0x01,0x84,0xb5,0x7f,0xc0,0x49,0x10,0x44,
	0x53,0x81,0x01,0x84,0xb5,0x7f,0xc0,0x49,
	0x10,0x42,0x53,0x81,0x01,0x84,0xb5,0x7f,
	0x53,0x89,0xe1,0x4f,0x01,0x84,0xc0,0x00,
	0xe1,0xa8,0x23,0x17,0xc8,0x44,0x0c,0x9c,
	0xe9,0xb1,0xe5,0xd1,0x07,0xc5,0xd6,0x01,
	0xd3,0x00,0xb2,0x01,0xc8,0x55,0x18,0x5f,
	0x00,0x90,0xe9,0xbd,0xc4,0x5f,0xd2,0x40,
	0x01,0x84,0x01,0x84,0xc7,0xd1,0xd5,0x40,
	0xd8,0x43,0x48,0x45,0xe9,0xc3,0x05,0x04,
	0xe1,0xbe,0x07,0xc5,0x00,0x06,0x01,0x46,
	0xa3,0xbc,0x80,0x3f,0xa3,0xfd,0x80,0x3f,
	0xc0,0x4a,0xb0,0x7e,0x63,0x81,0xb2,0xbc,
	0x00,0x06,0x00,0xc6,0x07,0xc5,0x12,0x21,
	0xe9,0xec,0xd0,0x00,0x05,0xe0,0x60,0x34,
	0x05,0xe7,0x70,0x24,0x70,0x40,0x10,0x60,
	0xe9,0xe6,0xd0,0x80,0x60,0x80,0xb0,0x3c,
	0x05,0xef,0xd0,0x7c,0x30,0x40,0xed,0xe4,
	0x05,0xe7,0xd0,0x28,0x05,0xe7,0x60,0x24,
	0x00,0xa1,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x05,0xe5,0x70,0x08,
	0xb0,0x02,0x05,0xe5,0x60,0x08,0xe1,0xb1,
	0xd4,0x00,0x03,0xd1,0xe8,0x04,0xd4,0x0a,
	0x05,0xe0,0x78,0x34,0x00,0x16,0xf8,0x0a,
	0x00,0x18,0xe8,0x57,0x08,0x16,0x04,0x18,
	0x05,0xe0,0x68,0x34,0x05,0xe3,0x71,0x04,
	0x05,0xe3,0x71,0x48,0x05,0xe3,0x71,0x8c,
	0x05,0xe3,0x71,0xd0,0x07,0x69,0xd3,0x14,
	0x05,0xe3,0x73,0x40,0x03,0x28,0xd3,0x90,
	0x05,0xe2,0x70,0x30,0x21,0x00,0x21,0x40,
	0x05,0xe2,0x70,0x38,0x21,0x80,0x21,0xc0,
	0x21,0x90,0x21,0xd0,0xb1,0x02,0xb1,0x42,
	0x02,0x20,0xd0,0x40,0x51,0x41,0x05,0xaf,
	0x73,0xdc,0xb1,0xff,0x0f,0xef,0xd0,0x7f,
	0x00,0xef,0xd0,0xbf,0x01,0x46,0x00,0x62,
	0xd0,0x28,0xa0,0x36,0x80,0x3f,0xa1,0x34,
	0xa1,0x74,0xa1,0xb4,0xa3,0x34,0xa3,0x74,
	0xa1,0xf4,0xa3,0xb4,0xa3,0xf4,0xa0,0xb4,
	0xa0,0x74,0x80,0x3f,0x00,0xc6,0xd0,0x50,
	0x00,0x19,0xe8,0x47,0xd0,0x4c,0x04,0xa2,
	0xd0,0xbc,0x00,0xe2,0xd0,0x28,0x01,0x46,
	0xa0,0x36,0x80,0x3f,0x00,0x4a,0x6d,0x02,
	0x00,0x06,0x00,0xc6,0x04,0xa2,0xd0,0x7c,
	0x05,0xaf,0xd0,0x34,0x60,0x40,0x00,0x17,
	0xf8,0x5b,0x00,0x19,0xe8,0xbc,0x08,0x17,
	0x04,0x19,0x05,0xe0,0x68,0x34,0x05,0xe3,
	0x71,0x18,0x05,0xe3,0x71,0x5c,0x05,0xe3,
	0x71,0xa0,0x05,0xe3,0x71,0xe4,0x0b,0xaa,
	0xd3,0x18,0x05,0xe3,0x73,0x54,0x03,0x28,
	0xd3,0x90,0x05,0xe2,0x70,0x30,0x21,0x00,
	0x21,0x40,0x05,0xe2,0x70,0x38,0x21,0x80,
	0x21,0xc0,0x21,0x90,0x21,0xd0,0xb1,0x02,
	0xb1,0x42,0x02,0x20,0xd0,0x40,0x51,0x41,
	0x05,0xaf,0x73,0xdc,0xb1,0xff,0x0f,0xef,
	0xd0,0x7f,0x00,0xef,0xd0,0xbf,0x01,0x46,
	0x00,0x62,0xd0,0x30,0xa0,0x36,0x80,0x3f,
	0xa1,0x34,0xa1,0x74,0xa1,0xb4,0xa3,0x34,
	0xa3,0x74,0xa1,0xf4,0xa3,0xb4,0xa3,0xf4,
	0xa0,0xb4,0xa0,0x74,0x80,0x3f,0x00,0xc6,
	0x04,0xa2,0xd0,0xbc,0x00,0xe2,0xd0,0x30,
	0x01,0x46,0xa0,0x36,0x80,0x3f,0x04,0x0b,
	0x6d,0x02,0x00,0x06,0x00,0xc6,0x00,0x18,
	0xf8,0xa6,0x04,0xa3,0xd0,0x4c,0x05,0xaf,
	0xd0,0x34,0x60,0x40,0xe0,0xbc,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0x00,0xa1,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x02,0x1a,0xe9,0x13,
	0x06,0xe3,0x70,0xb8,0x10,0xa0,0xfd,0x11,
	0x00,0xa0,0xd0,0x40,0x3d,0x81,0xa0,0x5d,
	0x81,0x24,0x86,0xdf,0xe0,0xdd,0xd6,0xc3,
	0xe0,0xda,0x02,0x16,0xe8,0xda,0x06,0xe3,
	0xd0,0x70,0x71,0x01,0x00,0x21,0xd0,0xc0,
	0x40,0xc4,0xe8,0xda,0xd0,0xe0,0x40,0xc4,
	0xe8,0xda,0x07,0xc5,0x06,0xe3,0xd0,0x1c,
	0x70,0x40,0xc0,0xdc,0x30,0xc1,0xe4,0xda,
	0x02,0x1d,0xf9,0x0f,0x02,0x1a,0xf9,0x13,
	0xe1,0x28,0xc0,0xdc,0x30,0xc1,0xe9,0x28,
	0xe0,0xda,0xc0,0xdc,0x30,0xc1,0xed,0x17,
	0xe1,0x28,0x06,0xe3,0xd0,0x3c,0x70,0x40,
	0xb0,0x41,0x60,0x40,0x10,0x60,0xec,0xda,
	0x06,0x15,0x00,0x24,0xd0,0xf0,0xa0,0xf6,
	0xa9,0x34,0xd0,0x40,0x06,0xe3,0x60,0x78,
	0xd6,0xc3,0xe0,0xda,0x07,0xc5,0x00,0x00,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x0a,0x13,0x06,0x14,0x00,0x24,
	0xd0,0x30,0xa0,0x36,0x80,0x3f,0xa9,0x34,
	0x06,0xe5,0xd0,0x1c,0x79,0x00,0x06,0x1d,
	0x69,0x00,0x00,0x2a,0xd0,0x20,0xd0,0x48,
	0x60,0x40,0x07,0x51,0x07,0xc5,0x00,0x00,
	0x90,0x43,0x90,0x82,0x80,0x3f,0x05,0x29,
	0xd0,0x08,0x60,0x40,0xb0,0x3c,0x60,0x80,
	0x05,0x29,0xd0,0x04,0xd0,0x40,0x60,0x40,
	0x07,0xc5,0x00,0x00,0x00,0x27,0xd0,0x14,
	0x70,0x00,0x10,0x20,0xe9,0x1a,0x06,0xe3,
	0xd0,0x70,0x71,0x01,0xd0,0x10,0x40,0x04,
	0xe9,0x1a,0x06,0x17,0x00,0x24,0xd0,0x30,
	0xa0,0x36,0xa9,0x34,0x05,0x6c,0xd0,0x68,
	0x70,0x41,0x05,0x6c,0xd0,0x24,0x60,0x40,
	0x07,0xc5,0x00,0x00,0x07,0xc5,0x00,0x00,
	0x00,0x2e,0xdf,0xb5,0xc0,0x00,0x0f,0x87,
	0xc0,0x00,0x02,0x06,0x00,0xa3,0xd0,0x68,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x02,0x06,0xd0,0x40,0x05,0x61,0x60,0x54,
	0x05,0x61,0x60,0x4c,0x05,0x61,0x60,0x50,
	0x01,0x46,0x00,0x76,0xd8,0x00,0xa0,0x38,
	0x80,0x3f,0x00,0xc6,0xc8,0xbf,0xdf,0xc0,
	0xf2,0x8f,0x06,0xe5,0x78,0x1c,0x04,0x10,
	0x06,0xe5,0x68,0x1c,0xd0,0x07,0x90,0x79,
	0x40,0x40,0xb0,0x40,0xf8,0x2c,0x18,0xa1,
	0xe8,0x26,0x01,0x1c,0xf8,0x26,0x01,0x1d,
	0xfa,0x68,0x01,0x1f,0xf9,0x7b,0x01,0x19,
	0xf8,0x33,0xe0,0x2f,0x00,0xa3,0xd0,0x70,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x24,0xd0,0x00,0xa0,0x39,0x05,0x6a,
	0x70,0x38,0x10,0x20,0xf9,0x7b,0x00,0xe4,
	0x78,0x28,0x00,0x19,0xe8,0x43,0x00,0x2b,
	0x70,0xa4,0x05,0xac,0x70,0xc4,0xc1,0x2b,
	0xc0,0x62,0x00,0x06,0x00,0x31,0xde,0x58,
	0x10,0x02,0xb0,0x3f,0x03,0xcc,0x06,0xe5,
	0x78,0x74,0x04,0x93,0x06,0xe5,0x68,0x74,
	0x00,0x2c,0x70,0x5c,0xb0,0x7f,0x00,0x2c,
	0x60,0x5c,0xd0,0x0f,0xb0,0x41,0x40,0x40,
	0x10,0x42,0x00,0xe6,0xd0,0x00,0x20,0x01,
	0x68,0x80,0x01,0x46,0x00,0x21,0xd0,0x01,
	0xa0,0x38,0x80,0x3f,0x00,0xc6,0x07,0xe8,
	0xd0,0x00,0x90,0x61,0x80,0x3f,0x40,0x40,
	0xf8,0x5d,0x07,0xa0,0xd0,0x00,0x84,0x22,
	0x80,0x3f,0xa0,0x23,0xd0,0x9f,0x90,0x4d,
	0x80,0x3f,0x40,0x42,0x05,0x6a,0x60,0x44,
	0x86,0x45,0x80,0x3f,0xd0,0xbf,0x90,0x46,
	0x80,0x3f,0x10,0x55,0x40,0x42,0xb0,0x7e,
	0x10,0x42,0x81,0x22,0x80,0x3f,0x90,0xa3,
	0x10,0x9e,0x10,0x84,0x80,0x22,0x80,0x3f,
	0x90,0xe3,0x10,0xde,0x10,0xc2,0x30,0xc2,
	0x83,0x22,0x80,0x3f,0x91,0x23,0x11,0x1e,
	0x11,0x02,0x80,0xe2,0x80,0x3f,0x91,0x63,
	0x11,0x5e,0x11,0x42,0x31,0x01,0x30,0x84,
	0xfc,0x8e,0x21,0x03,0x83,0x22,0x80,0x3f,
	0xa1,0x23,0x80,0x3f,0x80,0x62,0x80,0x3f,
	0x90,0xa3,0x10,0x9e,0x10,0x82,0x20,0x81,
	0xa0,0xa3,0x80,0xa2,0x80,0x3f,0x98,0x63,
	0x18,0x5e,0x18,0x42,0x00,0xd5,0xe8,0xa2,
	0x04,0xd6,0x04,0xd7,0x38,0x41,0x80,0xa2,
	0x80,0x3f,0xa8,0x63,0x80,0x3f,0x03,0x20,
	0xd0,0x00,0x10,0x0a,0xa0,0x0a,0x84,0x05,
	0xa0,0x06,0x03,0x20,0xd0,0x00,0x10,0x0a,
	0xa0,0x27,0xa0,0x1b,0x86,0x45,0x80,0x3f,
	0x80,0x06,0x80,0x3f,0x80,0x17,0x80,0x0a,
	0x80,0x3f,0x84,0x05,0x80,0x3f,0x80,0x06,
	0x80,0x3f,0x80,0x1b,0x80,0x27,0x80,0x3f,
	0x80,0x64,0x80,0x3f,0x06,0xa0,0xd0,0x01,
	0x84,0x22,0x80,0x3f,0xa0,0x23,0x80,0x3f,
	0x01,0x46,0x00,0x21,0xd0,0x00,0xa0,0x38,
	0x80,0x3f,0x00,0xc6,0x07,0xc9,0x00,0x0d,
	0x07,0xc9,0x00,0x0d,0x07,0xc9,0x00,0x0d,
	0x07,0xc9,0x00,0x0d,0xf2,0x88,0x1a,0xe0,
	0xe4,0xd6,0x00,0x22,0xd0,0x2f,0x30,0x2b,
	0xe4,0xe0,0xc0,0x1c,0x30,0x2b,0xe4,0xd6,
	0x04,0xeb,0x70,0x28,0x10,0x20,0xf8,0xfa,
	0x04,0xea,0x70,0x00,0x10,0x22,0xf8,0xf0,
	0x02,0x46,0xc8,0x5a,0x02,0x06,0x00,0x23,
	0xd0,0x20,0x30,0x21,0xf8,0xfa,0xe0,0xf4,
	0x05,0x26,0x70,0x3c,0x10,0x20,0xf8,0xfa,
	0x00,0x22,0x78,0x34,0x18,0x20,0xe9,0x36,
	0x18,0x20,0xec,0xfd,0x00,0x23,0xd8,0x3f,
	0xe1,0x08,0x07,0xa4,0x70,0x60,0xb0,0x7f,
	0x07,0xa4,0x60,0x60,0x10,0x65,0xed,0x36,
	0x07,0xa3,0x70,0x24,0x10,0x20,0xe9,0x36,
	0x00,0x20,0xd7,0xbf,0x47,0x9a,0xc0,0x1e,
	0x30,0x1c,0xe5,0x14,0x00,0xa9,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x20,0xd0,0x01,0x30,0x2b,0xed,0x24,
	0x00,0x22,0xd0,0x2f,0x30,0x2b,0xe5,0x24,
	0xc0,0xab,0xb0,0x81,0xc0,0x1c,0x30,0x02,
	0xfd,0x24,0xc0,0x42,0x30,0x5e,0xf5,0x28,
	0xd0,0x80,0xb0,0x81,0xc0,0x5c,0x30,0x5e,
	0x30,0x60,0xed,0x36,0x07,0xa4,0x60,0x80,
	0xd0,0x40,0xb0,0x42,0x07,0xa3,0x60,0x74,
	0x00,0xa8,0xd0,0x70,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x05,0xac,0x70,0x44,
	0x10,0x63,0xe9,0x47,0x00,0x20,0xd0,0x40,
	0x05,0x26,0x60,0x60,0x05,0x25,0x70,0xb8,
	0x05,0x25,0x70,0xf4,0x05,0x25,0x60,0xb4,
	0x05,0x25,0x60,0xf8,0xe1,0x4e,0xd0,0x41,
	0x05,0x62,0x60,0x50,0x05,0x60,0x70,0x5c,
	0x05,0x62,0x60,0x54,0x05,0x65,0x70,0x60,
	0x10,0x60,0xf9,0x56,0x00,0x23,0xd0,0x7f,
	0x05,0x6f,0x60,0x48,0x00,0xa4,0xd0,0x40,
	0xd0,0x12,0x00,0x64,0xd7,0xc7,0x00,0x05,
	0x01,0x46,0x00,0x06,0x80,0x3c,0x80,0x3d,
	0x00,0x4a,0x6f,0x00,0x00,0xc6,0x20,0x01,
	0xb0,0x3c,0xb0,0x81,0xed,0x5c,0x07,0xc5,
	0x06,0xe5,0x78,0x74,0x04,0x92,0x06,0xe5,
	0x68,0x74,0x00,0x2c,0x70,0x60,0xb0,0x7f,
	0x00,0x2c,0x60,0x60,0xd0,0x0f,0xb0,0x41,
	0x40,0x40,0x10,0x42,0x00,0xe5,0xd0,0x00,
	0x20,0x01,0x68,0x80,0x07,0xc5,0x00,0xe4,
	0x78,0x28,0x00,0x1f,0xe9,0x85,0xc0,0x62,
	0x00,0x31,0xde,0x68,0x10,0x02,0xb0,0x3f,
	0x03,0xcc,0xf1,0x68,0x04,0xea,0x70,0x68,
	0x10,0x62,0xfa,0x19,0x00,0xe4,0x70,0xb0,
	0xd0,0x40,0x00,0xe4,0x60,0x70,0x00,0x29,
	0x72,0x28,0x00,0x29,0x72,0x6c,0x00,0x25,
	0x78,0xa0,0x02,0x86,0xc8,0x54,0x02,0x06,
	0xc1,0xa1,0x11,0xa1,0xf9,0x9c,0xc1,0x88,
	0xd1,0xc6,0x05,0x6b,0x70,0x30,0x10,0x20,
	0xe9,0xa2,0xd1,0xc2,0x01,0x12,0xf9,0xe2,
	0x06,0x24,0x71,0x88,0x11,0xa1,0xf9,0xa9,
	0xc1,0x88,0xc8,0x46,0x02,0x86,0xc5,0x21,
	0x02,0x06,0x01,0x13,0xf9,0xe2,0x00,0xe4,
	0x70,0x34,0x30,0x80,0xf5,0xe2,0xc0,0x06,
	0xd2,0x86,0xc0,0x49,0x30,0x40,0xed,0xc7,
	0x00,0xe4,0x70,0x5c,0x10,0x60,0xe9,0xc6,
	0xc8,0x08,0x18,0x1e,0xc8,0x49,0x18,0x5e,
	0xb8,0x41,0x10,0x62,0xf9,0xc4,0x04,0x57,
	0x8b,0xff,0x0b,0xcc,0xc0,0x08,0x00,0x21,
	0xd0,0x7c,0xc0,0x87,0x10,0x82,0xf1,0x5c,
	0xb2,0x81,0xed,0xb5,0xc0,0x49,0x30,0x40,
	0xed,0xd2,0xc0,0x08,0x06,0x24,0x60,0x08,
	0xc8,0x00,0x02,0x86,0xc5,0x20,0x02,0x06,
	0x00,0xe0,0xd8,0x00,0x01,0x46,0x02,0x46,
	0x25,0x60,0x03,0x9e,0xf9,0xe0,0x25,0xa0,
	0x00,0xc6,0x02,0x06,0x01,0x19,0xfa,0x13,
	0xc0,0x46,0xc0,0x86,0x30,0x88,0xf9,0xe9,
	0xc0,0x49,0xc0,0x87,0x10,0x89,0x30,0x42,
	0xc2,0x87,0xd0,0x90,0x00,0x6b,0xd1,0x48,
	0xa1,0x76,0x01,0x46,0x07,0x0b,0x7d,0x01,
	0x00,0x06,0x00,0xc6,0x00,0xeb,0xd1,0x48,
	0xa1,0x76,0x00,0x6b,0xd1,0x48,0xa1,0x76,
	0xd1,0x50,0x90,0xf4,0x10,0xc8,0x10,0xd8,
	0xc0,0x02,0xb0,0x10,0x10,0xc0,0xa0,0xf4,
	0xb1,0x41,0xed,0xfd,0x00,0xeb,0xd1,0x48,
	0xa1,0x76,0x01,0x46,0x07,0x0b,0x6d,0x01,
	0x00,0x06,0x00,0xc6,0xb0,0x60,0xb0,0x81,
	0xed,0xee,0xb2,0x81,0xed,0xed,0x03,0x67,
	0xd0,0x1c,0x00,0x21,0xd0,0x54,0xd0,0x98,
	0xf1,0x5c,0x01,0x46,0x07,0xe8,0xd0,0x00,
	0x90,0x61,0x80,0x3f,0x40,0x40,0xfa,0x1c,
	0x00,0x37,0xd8,0x00,0x84,0x22,0xa0,0x23,
	0x03,0x20,0xd0,0x00,0x10,0x0a,0xa0,0x0a,
	0x84,0x05,0xa0,0x06,0x03,0x20,0xd0,0x00,
	0x10,0x0a,0xa0,0x27,0x80,0x17,0x80,0x0a,
	0x80,0x3f,0x84,0x05,0x80,0x3f,0x80,0x06,
	0x80,0x3f,0x04,0xea,0x70,0x28,0x10,0x22,
	0xea,0x3b,0x83,0x85,0x80,0x06,0x80,0x27,
	0x80,0x3f,0x86,0x45,0x80,0x3f,0x10,0x22,
	0xfa,0x44,0x84,0x86,0x80,0x3f,0xe2,0x46,
	0x84,0x46,0x80,0x3f,0x80,0xe4,0x80,0x3f,
	0x07,0x20,0xd0,0x01,0x84,0x22,0x80,0x3f,
	0xa0,0x23,0x00,0x21,0xd0,0x00,0xa0,0x38,
	0x80,0x3f,0x00,0xc6,0x07,0xc9,0x00,0x0d,
	0x07,0xc9,0x00,0x0d,0x07,0xc9,0x00,0x0d,
	0x07,0xc9,0x00,0x0d,0x80,0x3f,0x00,0x30,
	0xd0,0x07,0x90,0x79,0x40,0x40,0xb0,0x40,
	0xea,0x62,0x00,0x0c,0x00,0xa7,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xe4,0x00,0x05,
	0xf1,0x68,0xd0,0x40,0x05,0xa1,0x60,0x50,
	0xd0,0x41,0x05,0xa1,0x60,0x4c,0x02,0x2f,
	0xd0,0x18,0x00,0x21,0xd0,0x7c,0xd0,0xa0,
	0xf1,0x5c,0x00,0x20,0xd0,0x6c,0xd0,0x81,
	0xf1,0x5c,0x00,0xe4,0x78,0x28,0x00,0x1d,
	0xea,0x82,0x00,0x31,0xde,0x6c,0x10,0x02,
	0xb0,0x3f,0x03,0xcc,0x00,0xa7,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xe4,0x00,0x05,
	0x0c,0x09,0x84,0x36,0x80,0x3f,0xaa,0xf4,
	0x0a,0xcd,0xaa,0xf4,0x07,0xc5,0x00,0xef,
	0xd0,0x3c,0x01,0x46,0x59,0x80,0x39,0x80,
	0x00,0x24,0xd0,0x14,0x59,0x80,0x00,0xc6,
	0x07,0xc5,0x00,0x68,0xd3,0x00,0x93,0x61,
	0x43,0x4c,0xfa,0x9b,0x83,0x22,0x93,0x23,
	0x13,0x1e,0x13,0x02,0x81,0x22,0x93,0x63,
	0x13,0x5e,0x13,0x44,0x33,0x0d,0x86,0x45,
	0xd3,0xbf,0x93,0x46,0x13,0x55,0x43,0x4e,
	0xb3,0x7e,0x13,0x42,0x33,0x0d,0x13,0x03,
	0xd3,0x5f,0x93,0x8d,0x43,0x8d,0x23,0x0e,
	0xc3,0xcc,0x33,0xcb,0xf6,0xc2,0x81,0x22,
	0x92,0xe3,0x12,0xde,0x12,0xc4,0x80,0x22,
	0x93,0xa3,0x13,0x9e,0x13,0x82,0x33,0x8b,
	0x13,0x83,0x23,0xce,0xc2,0xcc,0x12,0xe0,
	0xf6,0xc6,0x22,0xce,0x07,0xc5,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xe4,0xd8,0x68,0x78,0x61,0x00,0x92,
	0xe8,0x0a,0x00,0x31,0xde,0x71,0x10,0x02,
	0xb0,0x3f,0x03,0xcc,0x06,0xe5,0xd0,0x34,
	0x78,0x00,0x04,0x11,0x68,0x00,0x00,0x2c,
	0xd0,0x18,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0x01,0x20,0xd0,0x20,0xa0,0x00,0x0f,0xef,
	0xd0,0x3f,0xa0,0x01,0x80,0x3f,0x80,0xdf,
	0x80,0x3f,0x80,0x3f,0x0b,0x96,0x07,0xe8,
	0xd0,0x00,0x90,0x61,0x80,0x3f,0x40,0x40,
	0xf8,0x21,0x80,0x3f,0x02,0x37,0xd8,0x00,
	0x84,0x22,0xa0,0x23,0x98,0x1c,0x80,0x3f,
	0x00,0x19,0xe8,0x30,0x80,0x1d,0x80,0x3f,
	0x00,0x29,0xd0,0x24,0x70,0x80,0x00,0x29,
	0xd0,0x20,0x70,0x00,0xc0,0xc0,0x82,0x22,
	0xa0,0x23,0x83,0x62,0xa0,0x23,0xd0,0x00,
	0x00,0x20,0xd0,0x50,0x30,0x01,0x10,0x02,
	0x81,0xa2,0xa0,0x23,0x30,0x83,0x05,0x25,
	0x70,0x30,0x30,0x80,0x81,0xe2,0xa0,0xa3,
	0x00,0x28,0xd0,0x34,0x70,0x80,0x00,0x28,
	0xd0,0x30,0x70,0x00,0xc0,0xc0,0x80,0xe2,
	0xa0,0x23,0x83,0x22,0xa0,0x23,0xd0,0x00,
	0x00,0x20,0xd0,0x50,0x30,0x01,0x10,0x02,
	0x80,0x62,0xa0,0x23,0x30,0x83,0x01,0x20,
	0xd0,0x00,0x30,0x80,0x80,0xa2,0xa0,0xa3,
	0x05,0x2e,0xd0,0x0c,0x72,0x80,0x05,0x2e,
	0xd0,0x10,0x72,0xc0,0xf0,0xfd,0x05,0x2e,
	0xd0,0x0c,0x62,0x80,0x05,0x2e,0xd0,0x10,
	0x62,0xc0,0x05,0x26,0xd0,0x38,0x78,0x00,
	0x08,0x13,0x68,0x00,0xd0,0x40,0x05,0x62,
	0x60,0x48,0x05,0x62,0x60,0x40,0x05,0xe6,
	0xd0,0x3c,0x70,0x40,0x05,0xe6,0xd0,0x38,
	0x60,0x40,0xd0,0x40,0x05,0x29,0xd0,0x14,
	0x60,0x40,0x00,0x22,0x70,0x74,0x10,0x60,
	0xe4,0x92,0x00,0x20,0xd0,0x40,0x05,0x26,
	0xd0,0x20,0x60,0x40,0x05,0x25,0xd0,0x38,
	0x70,0x80,0x05,0x25,0xd0,0x74,0x70,0xc1,
	0x60,0x81,0x60,0xc0,0xd0,0x40,0x06,0xee,
	0xd0,0x34,0x60,0x40,0xd0,0x40,0x06,0xee,
	0xd0,0x08,0x60,0x40,0x05,0x26,0xd0,0x38,
	0x78,0x00,0x08,0x18,0x68,0x00,0x00,0x20,
	0xd8,0x08,0xa8,0x1c,0x80,0x3f,0x00,0x30,
	0xd0,0x41,0xa0,0x38,0x80,0x3f,0x00,0x30,
	0xd0,0x40,0xa0,0x37,0x80,0x3f,0xf1,0x33,
	0x00,0x30,0xd0,0x40,0xa0,0x38,0x80,0x3f,
	0x00,0x20,0xd8,0x0c,0xa8,0x1c,0x80,0x3f,
	0x05,0x6a,0xd0,0x38,0x70,0x00,0x10,0x20,
	0xf8,0xe9,0x01,0x46,0x06,0xa0,0xd0,0x01,
	0x84,0x22,0x80,0x3f,0xa0,0x23,0x80,0x3f,
	0x03,0x20,0xd0,0x00,0x10,0x0a,0xa0,0x0a,
	0x84,0x05,0xa0,0x06,0x03,0x20,0xd0,0x00,
	0x10,0x0a,0xa0,0x27,0xa0,0x1b,0x86,0x45,
	0x80,0x3f,0x80,0x06,0x80,0x3f,0x80,0x17,
	0x80,0x0a,0x80,0x3f,0x84,0x05,0x80,0x3f,
	0x80,0x06,0x80,0x3f,0x80,0x1b,0x80,0x27,
	0x80,0x3f,0x80,0x64,0x80,0x3f,0x04,0xeb,
	0x70,0x10,0x10,0x22,0xf8,0xe2,0xd0,0x41,
	0x05,0x61,0x60,0x7c,0x00,0xc6,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xcc,
	0x00,0x05,0x01,0x46,0x07,0x20,0xd0,0x01,
	0x84,0x22,0x80,0x3f,0xa0,0x23,0x80,0x3f,
	0x00,0xc6,0xf2,0x1f,0x01,0x46,0x00,0x21,
	0xd0,0x00,0xa0,0x38,0x00,0xc6,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xe9,
	0x00,0x05,0xd0,0x00,0x05,0x28,0x60,0x10,
	0x05,0x28,0x60,0x28,0x05,0x6c,0x60,0x20,
	0x05,0x6e,0x60,0x00,0x05,0x6e,0x60,0x04,
	0x05,0x29,0x60,0x18,0x00,0x2b,0x60,0x34,
	0x05,0x6c,0x60,0x10,0x05,0x6c,0x60,0x14,
	0x06,0xef,0x60,0x14,0x06,0xee,0x60,0x14,
	0xd0,0x01,0x05,0x29,0x60,0x10,0x05,0x26,
	0xd0,0x38,0x78,0x00,0x04,0x14,0x68,0x00,
	0x0b,0x9f,0xd0,0x14,0x05,0x28,0x60,0x30,
	0xd0,0x02,0x05,0x60,0x60,0x38,0x00,0xef,
	0xd0,0x08,0x05,0x28,0x60,0x14,0x05,0x28,
	0x60,0x18,0x00,0xef,0xd0,0x08,0x06,0xef,
	0x60,0x20,0x06,0xef,0x60,0x24,0x02,0x86,
	0xd7,0x80,0x02,0x06,0x07,0xc5,0xc1,0x5f,
	0x04,0xea,0x70,0x84,0x04,0xea,0x70,0xc0,
	0x00,0x26,0x71,0x2c,0x80,0x9f,0x80,0x3f,
	0x0b,0x96,0x10,0xf1,0xe9,0x7e,0x10,0xf0,
	0xe9,0x7e,0x10,0xe4,0xe9,0x7e,0x00,0xe7,
	0x78,0x28,0x00,0x13,0xe9,0x7e,0x10,0xa0,
	0xe9,0x4b,0x10,0xa2,0xf9,0x7e,0x10,0xe0,
	0xe9,0x4e,0x80,0x48,0x80,0xc8,0x00,0x26,
	0xd0,0x15,0xa0,0x26,0x00,0x26,0xd0,0x00,
	0xa0,0x1e,0x10,0xe2,0xf9,0x59,0xd8,0x01,
	0xe1,0x5c,0x00,0x62,0xd0,0x04,0x78,0x00,
	0x04,0x13,0x04,0x53,0x04,0x56,0x00,0x21,
	0xd0,0x3f,0xa0,0x08,0x10,0xa2,0xf9,0x66,
	0x04,0x55,0x04,0x54,0xa8,0x09,0xf2,0x06,
	0xd0,0x10,0x50,0x40,0x10,0x5c,0x10,0x44,
	0x87,0xc8,0xa0,0x49,0x83,0xdc,0x80,0xf5,
	0x00,0x22,0x78,0x2c,0x00,0x12,0xf9,0x7b,
	0x00,0x26,0x78,0x20,0x18,0x20,0xf9,0x7b,
	0x87,0x48,0x86,0x48,0x01,0x45,0x87,0x48,
	0x86,0xc8,0x01,0x45,0x80,0x48,0x10,0xa1,
	0xe9,0xbf,0xf2,0x06,0x00,0x20,0xd0,0x01,
	0x50,0x40,0x81,0x66,0xa0,0x5e,0x06,0x30,
	0xd0,0x3b,0xa0,0x1c,0x80,0xf5,0x00,0x6c,
	0xd0,0x00,0x10,0xa0,0xf9,0x9b,0x10,0xf0,
	0xe9,0x97,0x10,0xf1,0xe9,0x97,0x00,0x22,
	0xd0,0x50,0x50,0x01,0xe1,0xa6,0x00,0x22,
	0xd0,0x40,0x50,0x01,0xe1,0xa6,0x10,0xf0,
	0xe9,0xa3,0x10,0xf1,0xe9,0xa3,0x00,0x20,
	0xd0,0x50,0x50,0x01,0xe1,0xa6,0x00,0x20,
	0xd0,0x40,0x50,0x01,0xa0,0x26,0x10,0xf0,
	0xe9,0xac,0x10,0xf1,0xe9,0xb1,0xe1,0xb5,
	0x83,0x24,0x80,0x3f,0x89,0x9f,0x80,0x3f,
	0xe1,0xb5,0x81,0x24,0x80,0x3f,0x85,0xdf,
	0x80,0x3f,0x00,0x28,0xd0,0x14,0x70,0x00,
	0x10,0x08,0x00,0x21,0xd0,0x40,0x50,0x40,
	0x81,0xa6,0xa0,0x5e,0x01,0x45,0x10,0xf1,
	0xe9,0xde,0x10,0xf0,0xe9,0xde,0x10,0xf2,
	0xe9,0xf4,0x04,0x30,0xd0,0x2b,0xa0,0x1c,
	0x00,0x20,0xd0,0x06,0xa0,0x26,0x00,0x21,
	0xd0,0x10,0xa0,0x1e,0x10,0xe3,0xe9,0xd4,
	0x8f,0xf5,0x00,0x6d,0xd0,0x13,0xe1,0xd8,
	0xa1,0x1c,0x8a,0xf5,0x00,0x64,0xd0,0x23,
	0xa0,0x26,0xd8,0x3f,0x48,0x04,0x04,0x19,
	0xa8,0x1e,0x01,0x45,0x81,0xa6,0x0f,0x21,
	0xd0,0x00,0xa0,0x1e,0x10,0xf1,0xe9,0xe9,
	0x83,0x24,0x80,0x3f,0x89,0x9f,0x80,0x3f,
	0xe1,0xed,0x81,0x24,0x80,0x3f,0x85,0xdf,
	0x80,0x3f,0xa1,0x1c,0x80,0xf5,0x00,0x24,
	0xd0,0x23,0xa0,0x26,0x80,0x1e,0x01,0x45,
	0x83,0x24,0x80,0x3f,0x89,0x9f,0x80,0x3f,
	0x81,0xa6,0x0e,0x21,0xd0,0x00,0xa0,0x1e,
	0x80,0xf5,0x00,0x64,0xd0,0x23,0xa0,0x26,
	0x80,0x1e,0x06,0x30,0xd0,0x3b,0x51,0x00,
	0xa1,0x1c,0x01,0x45,0xd0,0x40,0x00,0x26,
	0x78,0x28,0x00,0x20,0x48,0x0f,0x00,0x10,
	0xea,0x10,0x00,0x24,0xd0,0x00,0x50,0x40,
	0x00,0x11,0xea,0x15,0x00,0x22,0xd0,0x00,
	0x50,0x40,0x00,0x12,0xea,0x1a,0x00,0x21,
	0xd0,0x00,0x50,0x40,0x00,0x13,0xea,0x1e,
	0xd0,0x20,0x50,0x40,0x07,0xc5,0x04,0xea,
	0xd0,0x28,0x71,0x00,0x03,0x20,0xd0,0x00,
	0x10,0x0a,0xa0,0x0a,0x80,0x3f,0x84,0x05,
	0x80,0x3f,0xa0,0x06,0x80,0x3f,0x03,0x20,
	0xd0,0x00,0x10,0x0a,0xa0,0x27,0x80,0x3f,
	0x80,0x17,0x80,0x3f,0x80,0x0a,0x80,0x3f,
	0x84,0x05,0x80,0x3f,0x80,0x06,0x80,0x3f,
	0x11,0x22,0xfa,0x3d,0x83,0x85,0x80,0x3f,
	0x80,0x06,0x80,0x27,0x80,0x3f,0x86,0x45,
	0x80,0x3f,0x11,0x22,0xfa,0x45,0x84,0x86,
	0x80,0x3f,0x84,0x46,0x80,0x3f,0x80,0xe4,
	0x80,0x3f,0x07,0xc5,0x00,0xc6,0xd0,0x41,
	0x05,0x61,0x60,0x60,0x00,0x28,0x71,0x34,
	0x97,0xa2,0xc7,0x9e,0x00,0xa8,0xd0,0x00,
	0x90,0x61,0x40,0x40,0xfb,0xba,0x01,0x46,
	0x02,0xa0,0xd0,0x00,0x84,0x22,0xa0,0x23,
	0x80,0xe2,0x91,0x63,0x11,0x5e,0x11,0x42,
	0x00,0x21,0xd0,0xc0,0xd0,0x40,0x00,0x26,
	0xd0,0xb7,0xb1,0x7e,0x01,0x46,0xa0,0xbc,
	0xa0,0x7d,0x80,0x3f,0x60,0x85,0x00,0xc6,
	0xb1,0x7e,0xc0,0x04,0x30,0x05,0xf7,0xd8,
	0x00,0x28,0x71,0x70,0xb0,0xc1,0xfb,0xcb,
	0x80,0xe2,0xa1,0x63,0x80,0x62,0x91,0x63,
	0x11,0x5e,0x11,0x42,0x00,0x21,0xd0,0x00,
	0x10,0x02,0x21,0x40,0xa1,0x63,0x80,0xa2,
	0x91,0x63,0x11,0x5e,0x11,0x42,0x31,0x40,
	0xa1,0x63,0x02,0xa0,0xd0,0x01,0x84,0x22,
	0xa0,0x23,0xa7,0xa2,0x00,0x76,0xd8,0x00,
	0xa0,0x38,0x0f,0x87,0x05,0xa1,0xd0,0xb4,
	0x70,0x42,0xb0,0x7f,0x60,0x42,0x04,0xeb,
	0xd0,0x28,0x70,0x00,0x10,0x20,0xfb,0xbe,
	0xf3,0xc3,0x00,0xae,0xd0,0x78,0xe1,0xd3,
	0xf3,0xc3,0x00,0x76,0xd8,0x00,0xa0,0x38,
	0x0f,0x87,0x01,0x20,0xd0,0x20,0xa0,0x00,
	0x03,0xff,0xdf,0xff,0xa0,0x01,0x80,0x3f,
	0x07,0xc5,0x00,0x00,0x00,0x66,0xd0,0x01,
	0xa0,0x38,0x01,0x46,0x00,0x66,0xd0,0x00,
	0xa0,0x37,0x80,0x3f,0x00,0xc6,0x03,0x20,
	0xd0,0x00,0x10,0x0a,0xa0,0x27,0x82,0x27,
	0x84,0x29,0x04,0x6e,0xd8,0x3c,0x00,0x21,
	0xd0,0x7c,0x80,0x2a,0x80,0x3f,0x00,0x4a,
	0x7a,0xe0,0x01,0x30,0xd0,0x00,0xa0,0x2a,
	0x80,0x3f,0x00,0x4a,0x7a,0xe0,0x02,0x30,
	0xd0,0x00,0xa0,0x2a,0x80,0x3f,0x00,0x4a,
	0x7a,0xe0,0x00,0x06,0xd0,0x2f,0xa0,0x29,
	0x80,0x2a,0x80,0x29,0xc7,0x5a,0x17,0x5a,
	0x00,0x20,0xd7,0xbf,0x47,0x9a,0xc0,0x1d,
	0x30,0x1b,0xe4,0x32,0xc7,0x5b,0xb7,0x41,
	0x07,0xa4,0xd0,0x00,0x70,0x00,0x10,0x20,
	0xe4,0x3b,0xca,0x2b,0xba,0x01,0xda,0x40,
	0xe0,0x3e,0xca,0x1c,0xda,0x40,0xe0,0x7d,
	0x09,0x49,0x0b,0x4d,0x08,0x49,0x08,0x8d,
	0x01,0x10,0xe8,0x47,0x0a,0x09,0x08,0x8d,
	0xe0,0x40,0x81,0xc5,0xc0,0x29,0x10,0x06,
	0x50,0x28,0xa0,0x06,0x80,0x3f,0x80,0x07,
	0x06,0x49,0xf1,0xe4,0x81,0x85,0x98,0x46,
	0x00,0x9f,0xe8,0x63,0x01,0xd2,0xf8,0x9b,
	0x80,0x45,0x00,0x20,0xd0,0x3f,0x9a,0x46,
	0x4a,0x40,0xba,0x41,0xc0,0x1b,0x30,0x29,
	0xec,0x60,0xe0,0x9b,0x80,0x45,0x80,0x46,
	0x08,0x9f,0x07,0xa3,0x70,0x2c,0x10,0x20,
	0xe8,0x68,0x08,0x96,0x80,0x97,0x80,0x3f,
	0x00,0x8d,0x00,0xcd,0x01,0x0d,0x01,0x4d,
	0x80,0x17,0xc0,0x61,0x01,0x46,0x83,0x3a,
	0x00,0x20,0xd0,0x01,0xa0,0x3b,0x83,0x7a,
	0x01,0xe8,0xd0,0x3c,0x80,0x3f,0x04,0x0b,
	0x6e,0xc0,0x00,0x06,0x00,0xc6,0xc0,0x28,
	0x30,0x1e,0xe4,0x9b,0x10,0x20,0xec,0xa6,
	0xc0,0x29,0x30,0x1d,0xec,0xa6,0x1a,0x60,
	0xf8,0x93,0x1a,0x20,0xf8,0x96,0x07,0xa3,
	0xd0,0x34,0xd0,0x40,0x60,0x40,0x00,0xa8,
	0xd0,0x70,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xc7,0x69,0xb7,0x41,0xe0,0xa6,
	0xc7,0xa8,0xb7,0x81,0xc7,0x5b,0xb7,0x41,
	0xe0,0xa6,0x00,0x28,0xdf,0xd0,0x01,0x46,
	0x00,0x70,0xd0,0x01,0xa0,0x37,0x80,0x3f,
	0x00,0xc6,0xc0,0x00,0xc0,0x00,0xe0,0xa3,
	0x04,0xeb,0x70,0x28,0x10,0x20,0xe8,0xac,
	0xc7,0x69,0xc7,0xa8,0xc8,0x1d,0x18,0x02,
	0x28,0x1d,0x18,0x02,0x02,0x86,0x01,0xe9,
	0xd5,0x10,0x25,0x20,0x02,0x06,0x09,0x96,
	0x07,0xa3,0xd0,0x30,0x70,0x00,0x10,0x20,
	0xe8,0xbc,0x05,0x96,0x09,0x97,0x07,0xa3,
	0x70,0x28,0x10,0x20,0xe8,0xc2,0x05,0x97,
	0xf3,0x2e,0x01,0x97,0xf8,0xd2,0xf3,0x46,
	0xc5,0x98,0xc5,0xd9,0x17,0x60,0xe8,0xde,
	0x00,0x24,0xd0,0x00,0xc8,0x1d,0x25,0x80,
	0x25,0xc0,0xb8,0x01,0xf8,0xcd,0xe0,0xde,
	0xf2,0xe5,0x17,0x60,0xe8,0xde,0x00,0x24,
	0xd0,0x00,0xc8,0x1d,0x26,0x40,0x26,0x00,
	0x25,0xc0,0x25,0x80,0xb8,0x01,0xf8,0xd8,
	0x04,0xeb,0x70,0x28,0x10,0x20,0xf9,0xb5,
	0xe0,0xea,0x01,0x97,0xf8,0xe7,0xf1,0xef,
	0xe0,0xea,0x17,0x60,0xf8,0xea,0xf2,0xe5,
	0xd8,0x40,0x04,0x97,0xd0,0x80,0xd0,0xc0,
	0xd1,0x00,0xd1,0x40,0x85,0x05,0xa0,0x86,
	0xa0,0xc6,0xa1,0x06,0xa1,0x46,0x81,0xc5,
	0xcb,0x1d,0x1b,0x06,0x5b,0x1e,0xab,0x06,
	0x82,0x45,0x8c,0x06,0x80,0x3f,0x06,0x49,
	0xf1,0xe4,0x80,0xd7,0x80,0x3f,0x01,0x8d,
	0x01,0xcd,0x02,0x0d,0x02,0x4d,0x02,0x8d,
	0x02,0xcd,0x03,0x0d,0x03,0x4d,0x03,0x8d,
	0x03,0xcd,0x04,0x0d,0x04,0x4d,0x04,0x8d,
	0x04,0xcd,0x05,0x0d,0x05,0x4d,0x80,0x17,
	0x82,0x45,0x84,0x06,0x01,0x9e,0xe9,0x47,
	0xc8,0x02,0x00,0x10,0xf9,0x1e,0x21,0xae,
	0x21,0xee,0x23,0xaf,0x23,0xef,0xe1,0x22,
	0x21,0xb0,0x21,0xf0,0x23,0xb1,0x23,0xf1,
	0xc8,0x03,0x00,0x10,0xf9,0x2a,0x22,0x2e,
	0x22,0x6e,0x24,0x2f,0x24,0x6f,0xe1,0x2e,
	0x22,0x30,0x22,0x70,0x24,0x31,0x24,0x71,
	0xc8,0x04,0x00,0x10,0xf9,0x36,0x22,0xae,
	0x22,0xee,0x24,0xaf,0x24,0xef,0xe1,0x3a,
	0x22,0xb0,0x22,0xf0,0x24,0xb1,0x24,0xf1,
	0xc8,0x05,0x00,0x10,0xf9,0x42,0x23,0x2e,
	0x23,0x6e,0x25,0x2f,0x25,0x6f,0xe1,0x46,
	0x23,0x30,0x23,0x70,0x25,0x31,0x25,0x71,
	0xe1,0x57,0x21,0xae,0x21,0xee,0x22,0x2e,
	0x22,0x6e,0x22,0xb0,0x22,0xf0,0x23,0x30,
	0x23,0x70,0x23,0xaf,0x23,0xef,0x24,0x2f,
	0x24,0x6f,0x24,0xb1,0x24,0xf1,0x25,0x31,
	0x25,0x71,0xf2,0x12,0xf2,0x41,0x01,0x97,
	0xf9,0x5e,0xf2,0x70,0xf2,0xa6,0xe1,0x60,
	0xf2,0x91,0xf2,0xb3,0xb7,0x7f,0xc0,0x1b,
	0x30,0x1d,0xed,0xae,0xd7,0x40,0xb7,0xbf,
	0x02,0x86,0x01,0xe9,0xd5,0x10,0x02,0x06,
	0x01,0x97,0xe9,0xae,0x01,0x9c,0xe9,0x99,
	0xe1,0xae,0x03,0xd3,0xe9,0x75,0xd0,0x25,
	0x30,0x1e,0xf9,0x75,0xd7,0x8b,0xc1,0x9e,
	0x17,0xab,0xe5,0x7c,0x17,0xb4,0xed,0x7c,
	0x03,0xd3,0xf9,0x83,0x04,0xe7,0xd0,0x24,
	0x04,0xe7,0xd0,0x94,0x04,0xe7,0xd0,0xcc,
	0xf3,0x0a,0x17,0xab,0xe5,0x91,0x17,0xb4,
	0xfd,0x8f,0x04,0xe7,0xd0,0x28,0x04,0xe7,
	0xd0,0xa0,0x04,0xe7,0xd0,0xdc,0xf3,0x0a,
	0xe1,0xae,0x03,0xd3,0xe9,0xae,0x04,0xe7,
	0xd0,0x28,0x04,0xe7,0xd0,0x98,0x04,0xe7,
	0xd0,0xd0,0xf3,0x0a,0xe1,0xae,0xc1,0x9e,
	0x11,0x81,0xb1,0x81,0x04,0xe7,0xd0,0x94,
	0x04,0xe7,0xd0,0xcc,0x01,0x9d,0xe9,0xa6,
	0x04,0xe7,0xd0,0x98,0x04,0xe7,0xd0,0xd0,
	0x04,0xe7,0xd0,0x24,0xf3,0x0a,0xc1,0x9e,
	0x11,0x81,0x04,0xe7,0xd0,0x28,0xf3,0x0a,
	0xc0,0x28,0x30,0x1e,0xec,0xe3,0xe5,0xb5,
	0xc0,0x29,0x30,0x1d,0xf4,0xe3,0x82,0xc5,
	0x80,0x06,0xcb,0x1d,0x1b,0x06,0x5b,0x1e,
	0x17,0x60,0xe9,0xbd,0xf1,0xef,0x07,0xa4,
	0xd0,0x24,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0x37,0x9c,0xe5,0xde,0x04,0xea,0xd0,0x00,
	0x70,0x00,0x10,0x22,0xf9,0xd0,0x02,0x46,
	0xc8,0x1a,0x02,0x06,0x00,0x23,0xd0,0x20,
	0x30,0x20,0xf9,0xd4,0x05,0x61,0xd0,0x20,
	0xd0,0x41,0x60,0x40,0x07,0xa3,0xd0,0x34,
	0xd0,0x40,0x60,0x40,0x00,0xa9,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xa8,0xd0,0x70,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x98,0x37,0x00,0x16,
	0xe9,0xe4,0x01,0x46,0x00,0x22,0xd0,0x00,
	0xa0,0x37,0x80,0x3f,0x00,0xc6,0x01,0x86,
	0x07,0xc5,0x17,0x60,0xe9,0xf6,0x00,0x24,
	0xd0,0x00,0x25,0x80,0x25,0xc0,0x07,0xc5,
	0x17,0xa0,0xea,0x0f,0x01,0x9c,0xea,0x09,
	0x02,0xe4,0xd0,0x00,0x26,0x00,0xc8,0x1e,
	0x00,0x10,0xfa,0x06,0xd0,0x20,0x36,0x40,
	0x02,0xe4,0xd0,0x00,0x26,0x40,0xe2,0x0f,
	0xd0,0x20,0x26,0x40,0xe2,0x0f,0x05,0xa8,
	0xd0,0x00,0x26,0x00,0x02,0xe4,0xd0,0x00,
	0x26,0x40,0xc5,0x98,0xc5,0xd9,0x07,0xc5,
	0x00,0xa0,0xd8,0x00,0x01,0x9c,0xfa,0x17,
	0x04,0x10,0x00,0x97,0xea,0x2a,0xa0,0xa0,
	0x80,0x3f,0x08,0x0a,0x76,0x46,0x04,0x12,
	0x08,0x0a,0x76,0x47,0xa0,0xe0,0x80,0x3f,
	0x08,0x12,0x04,0x14,0x08,0x0a,0x76,0x48,
	0x04,0x12,0x08,0x0a,0x76,0x49,0x04,0x13,
	0x00,0x92,0xfa,0x2e,0x00,0x96,0xea,0x40,
	0xa1,0x20,0x80,0x3f,0x08,0x14,0x08,0x12,
	0x08,0x0a,0x76,0x4a,0x04,0x12,0x08,0x0a,
	0x76,0x4b,0xa1,0x60,0x80,0x3f,0x08,0x12,
	0x04,0x14,0x08,0x0a,0x76,0x4c,0x04,0x12,
	0x08,0x0a,0x76,0x4d,0x07,0xc5,0x00,0xa0,
	0xd8,0x20,0x01,0x9c,0xfa,0x46,0x04,0x10,
	0x00,0x97,0xea,0x59,0xa0,0xa0,0x80,0x3f,
	0x08,0x0a,0x76,0x4e,0x04,0x12,0x08,0x0a,
	0x76,0x4f,0xa0,0xe0,0x80,0x3f,0x04,0x14,
	0x08,0x12,0x08,0x0a,0x76,0x50,0x04,0x12,
	0x08,0x0a,0x76,0x51,0x04,0x13,0x00,0x92,
	0xfa,0x5d,0x00,0x96,0xea,0x6f,0xa1,0x20,
	0x80,0x3f,0x08,0x14,0x08,0x12,0x08,0x0a,
	0x76,0x52,0x04,0x12,0x08,0x0a,0x76,0x53,
	0xa1,0x60,0x80,0x3f,0x04,0x14,0x08,0x12,
	0x08,0x0a,0x76,0x54,0x04,0x12,0x08,0x0a,
	0x76,0x55,0x07,0xc5,0x00,0xa3,0xd8,0x1c,
	0x07,0x7d,0xde,0x03,0xc0,0x40,0x01,0x9c,
	0xfa,0x7a,0xd0,0x04,0x50,0x40,0x04,0x10,
	0xa0,0x5a,0x80,0x3f,0x08,0x0a,0x66,0x56,
	0x01,0x9c,0xea,0x85,0x0f,0xfe,0xdf,0xff,
	0x40,0x40,0xd0,0x20,0xe2,0x8a,0x0f,0xff,
	0xdd,0xff,0x40,0x40,0x02,0xe4,0xd0,0x00,
	0x25,0x80,0xa0,0x5a,0x80,0x3f,0x08,0x0a,
	0x66,0x56,0x35,0x80,0x07,0xc5,0x00,0xa3,
	0xd8,0x1d,0x07,0x7d,0xde,0x07,0xc0,0x40,
	0xa0,0x5a,0x80,0x3f,0x08,0x0a,0x66,0x59,
	0x0f,0xff,0xdd,0xff,0x40,0x40,0xa0,0x5a,
	0x80,0x3f,0x08,0x0a,0x66,0x57,0x00,0x60,
	0xd0,0x00,0x26,0x40,0x25,0xc0,0x07,0xc5,
	0x00,0xa3,0xd8,0x1c,0x01,0x9c,0xfa,0xab,
	0x04,0x10,0x07,0x7d,0xde,0x0b,0xc0,0x40,
	0xa0,0x5a,0x80,0x3f,0x08,0x0a,0x66,0x57,
	0x07,0xc5,0x00,0xa3,0xd8,0x0d,0x03,0x7d,
	0xde,0x0f,0xc0,0x40,0xa0,0x5a,0x80,0x3f,
	0x08,0x0a,0x66,0x58,0x0f,0xff,0xdd,0xff,
	0x40,0x40,0xa0,0x5a,0x80,0x3f,0x08,0x0a,
	0x66,0x56,0x00,0x24,0xd0,0x00,0x26,0x00,
	0x25,0x80,0x07,0xc5,0x04,0xe7,0xd0,0x04,
	0x70,0x40,0x10,0x60,0xea,0xc8,0xc8,0x01,
	0xb8,0x3c,0x78,0x20,0x0f,0xef,0x48,0x3f,
	0xea,0xd7,0x04,0xac,0x28,0x10,0x68,0x00,
	0xe2,0xda,0x68,0x00,0xb0,0x3c,0x68,0x00,
	0x07,0xc5,0x78,0x01,0x02,0xe4,0xd0,0x00,
	0x00,0x10,0xfa,0xe3,0xd0,0x60,0x30,0x40,
	0xc0,0x01,0x08,0x10,0x07,0xc5,0x17,0xcb,
	0x57,0x5f,0xe2,0xf2,0x17,0xcb,0x57,0x5f,
	0x07,0xff,0xdf,0x00,0xc6,0x00,0xc6,0x40,
	0xc5,0xc0,0xc5,0x80,0x03,0xd3,0xfa,0xfc,
	0xf2,0xc8,0x04,0xe7,0xd0,0x24,0x60,0x40,
	0xf2,0xdb,0xc6,0x20,0xc6,0x60,0x36,0x40,
	0x01,0x92,0xfb,0x04,0xf2,0xc8,0x04,0xe7,
	0xd0,0x28,0x60,0x40,0xf2,0xdb,0xc5,0xa0,
	0xc5,0xe0,0x35,0xc0,0xc7,0xdd,0x00,0x23,
	0x47,0x7f,0x17,0xd5,0x17,0xe0,0x07,0xc5,
	0xc8,0x06,0x70,0x40,0xc0,0x01,0xb0,0x3c,
	0x18,0x08,0x18,0x08,0x68,0x00,0x70,0x02,
	0x10,0x20,0xfb,0x26,0x04,0xe7,0xd0,0x20,
	0x30,0x02,0xeb,0x1a,0x11,0xa1,0xfb,0x1d,
	0x60,0x43,0x60,0x42,0xe3,0x2d,0x04,0xe7,
	0xd0,0x04,0x70,0x80,0x60,0x40,0xb0,0x7c,
	0x04,0xac,0x30,0x90,0x60,0x81,0x07,0xc5,
	0x60,0x42,0xb0,0x3c,0x70,0x80,0x04,0xac,
	0x30,0x50,0x20,0x42,0x60,0x40,0x07,0xc5,
	0x07,0x27,0x70,0x2c,0x05,0x25,0xd0,0x7c,
	0x7b,0x81,0xcb,0xee,0x2b,0xc0,0x05,0x26,
	0xd0,0x40,0x7c,0x01,0xcc,0x70,0x2c,0x40,
	0x05,0x26,0xd0,0x4c,0x76,0x01,0xc6,0x58,
	0x00,0x2e,0x70,0x40,0x30,0x58,0xfb,0x44,
	0x07,0x27,0x70,0x34,0x26,0x40,0x07,0xc5,
	0x01,0x9d,0xeb,0x4a,0xb6,0x3c,0xb6,0x7c,
	0x17,0xa0,0xff,0x65,0x01,0x9c,0xeb,0x5c,
	0xc8,0x1e,0x00,0x10,0xeb,0x53,0xd0,0x20,
	0x26,0x40,0x02,0xe4,0xd0,0x00,0x26,0x00,
	0x00,0x10,0xfb,0x59,0x26,0x40,0xb8,0x01,
	0xfb,0x55,0xe3,0x65,0xc8,0x1e,0x05,0xa8,
	0xd0,0x00,0x02,0xe4,0xd0,0x40,0x26,0x00,
	0x26,0x41,0xb8,0x01,0xfb,0x61,0x07,0xc5,
	0xf1,0xc1,0x05,0x6a,0xd0,0x38,0x7a,0x80,
	0xf1,0x40,0x05,0x6f,0x70,0x48,0x00,0x23,
	0x30,0x7f,0xf8,0x21,0x05,0x6a,0x70,0x8c,
	0x80,0x62,0x90,0x63,0x30,0x42,0xec,0x21,
	0x81,0xe2,0x90,0x63,0x10,0x60,0xec,0x21,
	0x03,0x51,0xe8,0x21,0x01,0x46,0x0b,0x51,
	0xd0,0x40,0x05,0x29,0x60,0x54,0x05,0x26,
	0x78,0x38,0x08,0x18,0x05,0x26,0x68,0x38,
	0x00,0xc6,0xf1,0x35,0x1a,0xa0,0xe8,0x2d,
	0x00,0xa4,0xdc,0xc0,0x00,0x60,0xdc,0x80,
	0x00,0x20,0xd0,0x12,0x00,0xa7,0xd0,0x48,
	0x00,0x05,0x00,0x25,0xd0,0x00,0x30,0x3f,
	0xe8,0x36,0x00,0x25,0xd0,0x11,0x30,0x3f,
	0xe8,0x36,0xf1,0x57,0x05,0x6d,0xd0,0x08,
	0x70,0xc0,0xc0,0xc3,0xf1,0x93,0x60,0xc0,
	0x05,0x6c,0xd0,0x70,0x70,0x81,0x11,0xdd,
	0x20,0x87,0x60,0x81,0x05,0x6f,0xd0,0x08,
	0x70,0x00,0x10,0x20,0xf9,0x07,0x00,0xe4,
	0xd8,0xe8,0x78,0xe3,0x01,0x98,0xe8,0x57,
	0x00,0x2b,0xd0,0xa4,0x70,0x82,0xc0,0x7f,
	0xc0,0xeb,0x00,0x06,0x00,0x31,0xde,0x75,
	0x10,0x02,0xb0,0x3f,0x03,0xcc,0xc8,0x7f,
	0xdf,0xc0,0x06,0xe5,0xd0,0x34,0x78,0x00,
	0x04,0x13,0x68,0x00,0x00,0x2c,0xd0,0x1c,
	0x70,0x40,0xb0,0x7f,0x60,0x40,0xd0,0x0f,
	0xb0,0x41,0x40,0x40,0x10,0x42,0x00,0xe6,
	0xd0,0x00,0x20,0x01,0x68,0x40,0x00,0x25,
	0xd0,0x11,0x30,0x21,0xe8,0xbf,0xc8,0xa1,
	0x0f,0xec,0xd0,0x00,0x40,0x21,0xe8,0x75,
	0x18,0x9c,0xc0,0x62,0xb0,0x50,0xe4,0xff,
	0x00,0x62,0xd0,0x00,0x20,0x40,0x00,0x62,
	0xd0,0x0b,0x30,0x01,0xfc,0xff,0x00,0x45,
	0xe0,0x8b,0xe0,0x94,0xe0,0x94,0xe0,0x9d,
	0xe0,0xa3,0xe0,0xa9,0xe0,0xa9,0xe0,0xaa,
	0xe0,0xff,0xe0,0xab,0xe0,0xb7,0x00,0x20,
	0xd0,0x00,0x30,0x2b,0xe9,0x21,0x00,0x22,
	0xd0,0x38,0x30,0x2b,0xe9,0x21,0xe0,0xcd,
	0x00,0x20,0xd0,0x00,0x30,0x2b,0xe9,0x21,
	0x00,0x22,0xd0,0x38,0x30,0x2b,0xe9,0x21,
	0xe0,0xd0,0x05,0xab,0xd0,0x24,0x78,0x00,
	0x04,0x12,0x08,0x11,0x68,0x00,0x05,0xa2,
	0xd8,0x18,0x78,0x20,0x00,0x10,0xf8,0xd6,
	0xe0,0xd3,0xe0,0xff,0xe0,0xdc,0x00,0x22,
	0xd0,0x3e,0x30,0x2c,0xe8,0xb1,0x1a,0xe0,
	0xf8,0xfa,0x00,0xa7,0xd0,0x78,0xd0,0x12,
	0x00,0x69,0xd7,0xdf,0x00,0x05,0x1a,0xe1,
	0xf8,0xfa,0x00,0xac,0xd0,0x70,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xc0,0x2b,
	0x00,0x22,0x30,0x30,0x10,0x23,0xe8,0xc7,
	0x10,0x28,0xe8,0xca,0xe0,0xfa,0x00,0x60,
	0xda,0x08,0xe0,0xdf,0x00,0x60,0xda,0x00,
	0xe0,0xe8,0x00,0x61,0xda,0x32,0xe0,0xdf,
	0x00,0x63,0xda,0x08,0xe0,0xdf,0x00,0x61,
	0xda,0x13,0xe0,0xe8,0x00,0x61,0xda,0x1a,
	0xe0,0xe8,0x00,0x66,0xda,0x21,0xe0,0xf1,
	0x00,0x64,0xda,0x07,0xe0,0xf1,0xd7,0xd2,
	0x00,0xa7,0xd0,0x78,0x07,0xc4,0x00,0xa8,
	0xd0,0x40,0xd0,0x12,0xc7,0xe8,0x00,0x05,
	0xd7,0xd2,0x00,0xa7,0xd0,0x78,0x07,0xc4,
	0x00,0xa8,0xd0,0x48,0xd0,0x12,0xc7,0xe8,
	0x00,0x05,0xd7,0xd2,0x00,0xa7,0xd0,0x78,
	0x07,0xc4,0x00,0xa8,0xd0,0x50,0xd0,0x12,
	0xc7,0xe8,0x00,0x05,0x05,0xac,0xd0,0x04,
	0x70,0x40,0x10,0x63,0xe9,0x07,0x00,0x22,
	0x70,0x74,0x10,0x60,0xe5,0x07,0x05,0x26,
	0xd0,0x20,0xd0,0x40,0x60,0x40,0xdf,0xc0,
	0x1a,0xe0,0xe9,0x21,0x00,0x22,0xd0,0x38,
	0x30,0x2b,0xe9,0x21,0x00,0x22,0xd0,0x33,
	0x30,0x2b,0xe9,0x21,0x05,0x65,0x70,0x60,
	0x10,0x60,0xf9,0x1b,0x05,0x6f,0xd0,0x08,
	0x00,0x23,0xd0,0x7f,0x60,0x40,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc5,
	0x00,0x05,0x05,0x6f,0xd0,0x08,0xd0,0x40,
	0x60,0x40,0x00,0x62,0xda,0x5b,0x05,0x6b,
	0xd0,0x0c,0x6a,0x40,0x01,0x46,0x00,0x21,
	0xd0,0x00,0xa0,0x38,0x00,0xc6,0x00,0xa7,
	0xd0,0x78,0xd0,0x12,0x00,0x69,0xd7,0xdf,
	0x00,0x05,0x01,0x46,0x80,0x62,0x90,0x63,
	0x80,0x3f,0x00,0xc6,0x05,0x6a,0xd0,0x0c,
	0x70,0x00,0x30,0x01,0xed,0x12,0x07,0xc5,
	0x01,0x46,0x81,0xa2,0x90,0x63,0x80,0x3f,
	0x00,0xc6,0x05,0x6a,0xd0,0x28,0x70,0x00,
	0x10,0x03,0x30,0x01,0xe5,0x51,0x01,0x46,
	0x00,0x21,0xd0,0x00,0xa0,0x38,0x00,0xc6,
	0x07,0xc5,0x01,0x46,0x00,0x21,0xd0,0x01,
	0xa0,0x38,0x00,0xc6,0x07,0xc5,0x05,0x6b,
	0xd2,0x40,0x72,0x09,0x01,0x46,0x80,0x62,
	0x80,0x3f,0x90,0x23,0x80,0x3f,0x00,0xc6,
	0x10,0x21,0xe5,0x12,0x05,0x6b,0xd0,0x04,
	0x70,0x40,0x10,0x60,0xf9,0x71,0xd2,0x87,
	0x98,0x0d,0x42,0xa0,0xe9,0x71,0xd8,0x28,
	0x38,0x0a,0x08,0x08,0x02,0x8d,0xd0,0x41,
	0x60,0x40,0x01,0x46,0x80,0x62,0x80,0x3f,
	0x90,0x23,0x80,0x3f,0x00,0xc6,0x10,0x21,
	0xe5,0x12,0x0a,0x09,0x02,0x8d,0xb2,0x3f,
	0x62,0x09,0x12,0xa0,0xe9,0x71,0xc0,0x48,
	0xd2,0x00,0x62,0x09,0x10,0x62,0xed,0x85,
	0xe1,0x71,0x12,0xa1,0xf9,0x71,0xd0,0x40,
	0x05,0x6b,0xd0,0x04,0x60,0x40,0x0a,0x09,
	0x84,0x36,0x80,0x3f,0xaa,0xf4,0xcb,0x2b,
	0x0a,0xcd,0xaa,0xf4,0x07,0xc5,0x00,0x68,
	0xd1,0x00,0x91,0x61,0x41,0x44,0xf9,0x95,
	0x83,0x22,0x91,0x23,0x11,0x1e,0x11,0x02,
	0x81,0x22,0x91,0x63,0x11,0x5e,0x11,0x44,
	0x31,0x05,0x86,0x45,0xd1,0xbf,0x91,0x46,
	0x11,0x55,0x41,0x46,0xb1,0x7e,0x11,0x42,
	0x31,0x05,0x11,0x03,0xd1,0x5f,0x91,0x8d,
	0x41,0x85,0x21,0x06,0xc1,0xc4,0x31,0xc3,
	0xf5,0xbc,0x81,0x22,0x90,0xe3,0x10,0xde,
	0x10,0xc4,0x80,0x22,0x91,0xa3,0x11,0x9e,
	0x11,0x82,0x31,0x83,0x11,0x83,0x21,0xc6,
	0xc0,0xc4,0x10,0xe0,0xf5,0xc0,0x20,0xc6,
	0x07,0xc5,0x00,0xef,0xd0,0x3c,0x01,0x46,
	0x59,0x80,0x39,0x80,0x00,0x24,0xd0,0x14,
	0x59,0x80,0x00,0xc6,0x07,0xc5,0x00,0x00,
	0xd0,0x41,0xf2,0x37,0xd0,0x40,0xf2,0x3a,
	0xe0,0x7f,0xd0,0x40,0xf2,0x37,0xd0,0x40,
	0xf2,0x3a,0x05,0x61,0x60,0x64,0xe0,0x7f,
	0xd0,0x40,0x05,0x61,0x60,0x54,0x05,0x61,
	0x60,0x4c,0x05,0x61,0x60,0x64,0x05,0x6e,
	0x60,0x50,0xd0,0x40,0xf2,0x37,0xd0,0x40,
	0xf2,0x3a,0xe0,0x7f,0xd0,0x40,0xf2,0x37,
	0xd0,0x40,0xf2,0x3a,0x05,0x61,0x60,0x64,
	0xd8,0x00,0x04,0x15,0xf2,0xc1,0xe0,0x7f,
	0xdf,0xc0,0xdc,0x81,0xd3,0x00,0xd3,0x40,
	0xe0,0x47,0xdf,0xc0,0xdc,0x81,0xe0,0x7f,
	0x04,0xea,0x78,0x68,0xdc,0x80,0xd3,0x40,
	0xd3,0x01,0xe0,0x47,0xe0,0xac,0x04,0xea,
	0x78,0x68,0xf1,0xe2,0xd0,0x43,0x06,0x23,
	0x60,0x50,0xe0,0x7f,0xd5,0xc0,0xd6,0x8a,
	0xf1,0x8b,0x04,0xea,0x78,0x68,0x00,0x2b,
	0x70,0x78,0xb0,0x7f,0x00,0x2b,0x60,0x78,
	0xd3,0x41,0xd3,0x00,0xdc,0x80,0xf3,0x4f,
	0xf0,0xf5,0x05,0x6e,0x73,0xc0,0x05,0x6e,
	0x73,0x84,0x05,0x6c,0xd0,0x20,0x71,0x40,
	0xf2,0x0c,0x61,0x40,0x11,0xa0,0xe8,0xab,
	0xf2,0xee,0xf0,0xef,0x05,0x28,0xd0,0x50,
	0x71,0x01,0x21,0x06,0x07,0xff,0xdf,0xff,
	0x41,0x00,0x61,0x01,0x1c,0xa0,0xe8,0x62,
	0xf1,0xce,0xe0,0x63,0xf1,0xe2,0x05,0x6e,
	0x63,0x40,0x05,0x6e,0x63,0x04,0x05,0x6b,
	0x70,0xbc,0x10,0xa1,0xe8,0xac,0x05,0x6e,
	0x70,0x50,0x10,0x60,0xf8,0x7f,0x05,0x26,
	0x70,0x20,0x10,0x22,0xf8,0x7f,0x03,0xd4,
	0xe8,0x7f,0x05,0x64,0x70,0x40,0x10,0x60,
	0xe8,0xac,0xb0,0x54,0x02,0x46,0xc8,0x18,
	0x02,0x06,0x38,0x01,0xec,0xac,0x04,0xea,
	0x78,0x68,0xf1,0x76,0x10,0xa0,0xe8,0xa5,
	0xf0,0xe5,0x10,0xa0,0xe8,0xab,0x18,0x64,
	0xf8,0x8c,0xf1,0x0b,0x10,0xa0,0xe8,0xa9,
	0xf1,0x63,0x10,0xa0,0xe8,0xac,0xf1,0x55,
	0x10,0xa0,0xe8,0xac,0xd0,0x41,0x05,0x63,
	0x60,0x50,0x05,0x6a,0x70,0x38,0x10,0x21,
	0xe8,0x9f,0x00,0xa7,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xa7,
	0xd0,0x60,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xd5,0xc1,0xd6,0x80,0xf1,0x8b,
	0xe0,0xac,0xf2,0xbb,0xe0,0xac,0xf2,0xbb,
	0x0f,0xe7,0xd6,0xa8,0xf1,0x8b,0xf1,0x24,
	0xf2,0xc9,0xf0,0xc7,0x05,0x6e,0x70,0x50,
	0x10,0x60,0xf8,0xbc,0x00,0x6b,0xd0,0x68,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xf2,0x3d,0x05,0x28,0x7c,0xc4,0x05,0x28,
	0x7c,0x88,0x00,0x06,0x00,0x20,0xd0,0x12,
	0x00,0xa7,0xd0,0x48,0x00,0x05,0x04,0xef,
	0x70,0x20,0x10,0x20,0xe8,0xda,0x04,0xef,
	0x70,0x58,0x10,0x60,0xf8,0xda,0x03,0x2a,
	0xd0,0x00,0x81,0xa2,0x90,0x63,0x80,0x3f,
	0x30,0x01,0xe4,0xdb,0x05,0x6a,0x70,0x28,
	0x30,0x01,0xec,0xe0,0x07,0xc5,0x02,0x46,
	0x0f,0xef,0xd6,0x7f,0x02,0x06,0x07,0xc5,
	0x02,0x46,0x04,0xea,0x76,0x64,0x02,0x06,
	0x07,0xc5,0xd0,0x80,0x81,0xa2,0x90,0x63,
	0x80,0x3f,0x05,0x6a,0x70,0x28,0x30,0x01,
	0xec,0xee,0xd0,0x81,0x07,0xc5,0x05,0x6d,
	0x70,0x4c,0x30,0x46,0xec,0xf4,0xd1,0x80,
	0x07,0xc5,0x18,0x62,0xf9,0x02,0x04,0xa4,
	0xd0,0x40,0x00,0x25,0x78,0x20,0x00,0x12,
	0xe8,0xff,0x00,0xe4,0xd0,0x40,0x05,0x6a,
	0x60,0x6c,0xe1,0x0a,0x18,0x63,0xf9,0x0a,
	0x05,0x25,0x70,0x28,0x01,0x28,0x20,0x00,
	0x05,0x6a,0x60,0x2c,0x07,0xc5,0x04,0xea,
	0x70,0x40,0x10,0x70,0xe9,0x22,0x05,0x28,
	0x71,0x54,0x06,0xef,0x72,0xe0,0xc0,0x05,
	0x30,0x0b,0xe9,0x20,0xc0,0x0b,0xb0,0x30,
	0x01,0x2b,0xd0,0x68,0x30,0x40,0xed,0x1e,
	0x00,0xef,0xd0,0x08,0x30,0x05,0xf9,0x22,
	0xd0,0x80,0x07,0xc5,0xd0,0x81,0x07,0xc5,
	0x03,0x95,0xf9,0x49,0x05,0x27,0x70,0x7c,
	0x10,0x60,0xe9,0x54,0x00,0xe7,0x70,0x4c,
	0x10,0x60,0xf9,0x49,0x06,0xe5,0x70,0x7c,
	0x10,0x60,0xf9,0x45,0x00,0x2b,0x70,0x78,
	0x10,0x60,0xe9,0x45,0x05,0x64,0x70,0x58,
	0x10,0x60,0xe9,0x49,0x04,0xea,0x70,0x60,
	0x00,0x23,0x40,0x70,0x00,0x23,0x30,0x60,
	0xf9,0x49,0x01,0x65,0x78,0x14,0x00,0x11,
	0xf9,0x49,0x05,0x27,0x70,0x34,0x10,0x20,
	0xf9,0x54,0xd0,0x40,0x05,0x27,0x60,0x7c,
	0x04,0xeb,0x78,0x04,0x00,0x11,0xe9,0x51,
	0x0b,0x1d,0x00,0x12,0xe9,0x54,0x0b,0x1c,
	0x07,0xc5,0x05,0x6e,0x70,0x10,0x10,0x20,
	0xf9,0x61,0x03,0x53,0xe9,0x61,0x05,0x28,
	0x70,0x00,0x10,0x20,0xe9,0x61,0xd0,0x80,
	0x07,0xc5,0xd0,0x81,0x07,0xc5,0x05,0x6e,
	0x70,0x10,0x10,0x20,0xe9,0x74,0x05,0x61,
	0x70,0x48,0xb0,0x7f,0x05,0x61,0x60,0x48,
	0x03,0x56,0xf9,0x74,0x05,0x61,0x71,0x04,
	0x31,0x01,0xed,0x74,0xd0,0x80,0x07,0xc5,
	0xd0,0x81,0x07,0xc5,0x01,0x46,0x02,0x46,
	0xc8,0x15,0x02,0x06,0x00,0xc6,0x05,0x6b,
	0x70,0x1c,0xd0,0x40,0x20,0x60,0xb0,0x01,
	0xf9,0x7e,0xd0,0x80,0x05,0x6a,0x70,0x30,
	0x30,0x01,0x05,0x6a,0x71,0x2c,0x30,0x04,
	0xfd,0x8a,0xd0,0x81,0x07,0xc5,0x05,0x29,
	0x70,0x54,0x10,0x60,0xe9,0xa0,0x04,0xea,
	0x70,0x00,0x10,0x22,0xf9,0x9a,0x00,0xa4,
	0xd8,0x30,0xa8,0x36,0x80,0x3f,0x98,0x34,
	0x00,0x18,0xf9,0xa0,0xcc,0xdf,0xf2,0x4c,
	0xc7,0xf3,0x10,0xa0,0xe9,0xcd,0xe1,0xa5,
	0x05,0x29,0x70,0x70,0xc0,0x1a,0x30,0x01,
	0xed,0xcd,0xd0,0x41,0x04,0xee,0x60,0x70,
	0x01,0x46,0x0b,0x51,0x00,0xc6,0x04,0xea,
	0x78,0x68,0x18,0x62,0xe9,0xb1,0xd7,0x03,
	0xe1,0xb2,0xd7,0x03,0x05,0x25,0x71,0x10,
	0x05,0x25,0x70,0x0c,0x11,0x20,0xe5,0xbb,
	0x30,0x1c,0xe5,0xcd,0xe1,0xbe,0x30,0x1c,
	0xb0,0x01,0xe5,0xcd,0x03,0x52,0xf9,0xcd,
	0x18,0x62,0xf9,0xcb,0x01,0x46,0x05,0x25,
	0x70,0x64,0xb0,0x41,0x05,0x25,0x60,0x64,
	0x00,0xc6,0x10,0x60,0xf9,0xcd,0x07,0x52,
	0x0b,0x97,0x07,0xc5,0x04,0xea,0x70,0x28,
	0x10,0x22,0xf9,0xd8,0xd0,0x42,0x06,0x23,
	0x60,0x50,0x00,0x22,0xd0,0x40,0xe1,0xdf,
	0x10,0x23,0xf9,0xdd,0x01,0x20,0xd0,0x40,
	0xe1,0xdf,0x00,0xef,0xd0,0x48,0x05,0x6a,
	0x60,0x68,0x07,0xc5,0x18,0x63,0xe9,0xfb,
	0x18,0x62,0xea,0x00,0x07,0x20,0x71,0x10,
	0x00,0x64,0xd0,0x60,0x11,0x20,0xe9,0xf2,
	0x00,0x69,0xd0,0x60,0x11,0x21,0xe9,0xf2,
	0x00,0x6e,0xd0,0x60,0x07,0x20,0x71,0x14,
	0x11,0x21,0xe9,0xf9,0x11,0x24,0xe9,0xf9,
	0xe2,0x08,0x10,0x41,0xe2,0x08,0x05,0x6b,
	0x70,0x58,0x00,0x21,0x20,0x40,0xe2,0x08,
	0x05,0x6b,0x70,0x58,0x04,0xef,0x71,0x20,
	0x10,0x41,0x11,0x20,0xfa,0x08,0x10,0x5e,
	0x05,0x6a,0x60,0x68,0x00,0x06,0x07,0xc5,
	0x00,0x68,0xd1,0xc0,0x92,0x21,0x42,0x07,
	0xfa,0x0e,0x83,0x62,0x91,0xe3,0x11,0xde,
	0x11,0xc2,0x82,0x62,0x92,0x23,0x12,0x1e,
	0x12,0x04,0x31,0xc8,0x86,0x45,0xd2,0x7f,
	0x92,0x06,0x12,0x15,0x42,0x09,0xb2,0x3e,
	0x12,0x02,0x31,0xc8,0x11,0xc3,0xd2,0x1f,
	0x92,0x4d,0x42,0x48,0x21,0xc9,0xc1,0x87,
	0x31,0x85,0xf6,0x35,0x82,0x62,0x91,0x63,
	0x11,0x5e,0x11,0x44,0x81,0x62,0x92,0x63,
	0x12,0x5e,0x12,0x42,0x32,0x45,0x12,0x43,
	0x21,0x89,0xc1,0x47,0x07,0xc5,0x05,0x6b,
	0x60,0x7c,0x07,0xc5,0x05,0x6e,0x60,0x50,
	0x07,0xc5,0x05,0x60,0xd0,0x3c,0x71,0x00,
	0xb1,0x3f,0x61,0x00,0x03,0x56,0xfa,0x4b,
	0x05,0x6d,0x70,0x58,0x30,0x44,0xee,0x4b,
	0xd0,0x40,0x07,0xa4,0x60,0x44,0x07,0xc5,
	0x01,0x46,0x00,0x21,0xd0,0x00,0xa0,0x38,
	0x00,0xc6,0x05,0x26,0x78,0x38,0x00,0x13,
	0xfa,0xab,0x05,0x2e,0x75,0x5c,0x05,0x2e,
	0x75,0xa0,0x15,0x60,0xfa,0x80,0x15,0x60,
	0xfa,0x80,0x05,0x29,0x70,0x1c,0x05,0x28,
	0x70,0x54,0x30,0x40,0xea,0xa9,0x75,0x40,
	0xb0,0x3c,0x75,0x80,0xc0,0x15,0x10,0x16,
	0x10,0x19,0x00,0x21,0xd0,0x7f,0x40,0x01,
	0x0f,0xef,0xd0,0x7f,0x45,0x41,0x15,0x5f,
	0xc0,0x56,0x00,0x23,0xd1,0x3f,0x40,0x44,
	0x15,0x97,0x00,0x20,0xd1,0x07,0x45,0x84,
	0x15,0x88,0x25,0x81,0x15,0x87,0x25,0x80,
	0x05,0x2e,0x65,0x5c,0x05,0x2e,0x65,0xa0,
	0x01,0x46,0x91,0x43,0x92,0xc2,0x80,0x3f,
	0x00,0xc6,0x00,0xff,0xdf,0xff,0x42,0xc0,
	0x07,0xef,0x41,0x7f,0xd6,0x00,0x00,0x2f,
	0xd6,0x68,0x07,0xef,0xd4,0xbf,0x41,0x52,
	0x46,0x52,0x21,0x59,0x08,0x20,0xd4,0x40,
	0x44,0x45,0x41,0x52,0x14,0x51,0x22,0xd1,
	0x22,0xd8,0x07,0xef,0xd4,0xbf,0x41,0x52,
	0x45,0x52,0x31,0x55,0x08,0x20,0xd4,0x40,
	0x44,0x45,0x41,0x52,0x14,0x51,0x32,0xd1,
	0x32,0xd6,0x12,0xe0,0xe6,0xa9,0x12,0xe5,
	0xfe,0xab,0xd0,0x80,0x07,0xc5,0xd0,0x40,
	0x05,0x29,0x60,0x54,0x01,0x46,0x05,0x26,
	0xd0,0x38,0x78,0x00,0x08,0x18,0x08,0x17,
	0x68,0x00,0xd0,0x54,0x05,0x28,0x60,0x70,
	0x00,0xc6,0xd0,0x81,0x07,0xc5,0x01,0x46,
	0x00,0x21,0xd0,0x00,0xa0,0x38,0x00,0xc6,
	0x07,0xc5,0x06,0xe5,0xd0,0x1c,0x01,0x46,
	0x70,0x40,0x50,0x60,0x60,0x40,0x00,0xc6,
	0x07,0xc5,0x03,0x9e,0xea,0xed,0x05,0x62,
	0x70,0x5c,0x00,0x20,0xd1,0x20,0x31,0x01,
	0xee,0xe5,0x01,0xa7,0x70,0x24,0x78,0x00,
	0x10,0x60,0xea,0xed,0x82,0x22,0x90,0x63,
	0x10,0x60,0x30,0x60,0xe6,0xed,0x05,0x6b,
	0x71,0x18,0xc1,0x44,0x11,0x01,0x11,0x5f,
	0x21,0x05,0x31,0x01,0xe6,0xed,0x07,0x1d,
	0xe2,0xed,0x03,0x51,0xfa,0xed,0x04,0xeb,
	0xd0,0x04,0x78,0x00,0x00,0x11,0xea,0xed,
	0x0b,0x1d,0x07,0xc5,0x04,0xea,0x78,0x68,
	0x18,0x62,0xea,0xf6,0xd7,0x08,0x01,0xa8,
	0xd6,0xe8,0xe2,0xf9,0xd7,0x03,0x01,0xa8,
	0xd6,0xc0,0x03,0x9e,0xeb,0x4e,0x1c,0xa1,
	0xeb,0x4e,0x13,0x60,0xeb,0x4e,0x01,0xa7,
	0x76,0x1c,0x16,0x1d,0x00,0x29,0x70,0x60,
	0x16,0x20,0xf7,0x0a,0x00,0x29,0x70,0x24,
	0x30,0x01,0x26,0x00,0x20,0x58,0x82,0x78,
	0x01,0xa7,0x74,0x20,0x60,0x50,0xb4,0x3c,
	0x05,0x6b,0x76,0x18,0x04,0xea,0x78,0x68,
	0x18,0x63,0xeb,0x19,0x0f,0xef,0xd6,0x60,
	0x46,0x19,0x66,0x10,0xb4,0x3c,0x05,0x25,
	0xd0,0x58,0x66,0x01,0xc0,0x5b,0x30,0x50,
	0xef,0x23,0x01,0xa7,0xd4,0x28,0x01,0xa7,
	0x64,0x20,0x18,0x63,0xfb,0x45,0x01,0xa7,
	0x70,0x64,0x01,0xa7,0x30,0x68,0x10,0x5d,
	0xc1,0x10,0x01,0xa7,0x31,0x28,0x11,0x1d,
	0x31,0x01,0xf7,0x33,0xb1,0x38,0x11,0x26,
	0xe7,0x42,0xd1,0x04,0xc0,0x50,0x01,0xa7,
	0x30,0x68,0x10,0x5d,0x30,0x44,0xf7,0x3d,
	0xb0,0x78,0x10,0x43,0x01,0xa7,0x20,0x68,
	0x01,0xa7,0x60,0x64,0x05,0x25,0x61,0x0c,
	0xe3,0x4d,0x05,0x25,0x70,0x4c,0xc1,0x1c,
	0x31,0x01,0xeb,0x4d,0xb0,0x7f,0x05,0x25,
	0x60,0x4c,0x82,0x38,0x07,0xc5,0x00,0xef,
	0xd0,0x3c,0x01,0x46,0x59,0x80,0x39,0x80,
	0x00,0x24,0xd0,0x14,0x59,0x80,0x00,0xc6,
	0x07,0xc5,0x00,0x00,0x05,0x28,0x71,0x58,
	0x05,0x28,0x71,0x14,0x05,0x28,0xd0,0x10,
	0x71,0x80,0x00,0x26,0x70,0x30,0x10,0x25,
	0xe8,0x0d,0x10,0x22,0xf8,0x1c,0xc0,0x04,
	0x30,0x05,0xe9,0x4a,0xc0,0x05,0xb0,0x38,
	0x71,0xc0,0x11,0xc3,0x05,0x28,0xd0,0x28,
	0x61,0xc0,0xc0,0x87,0x30,0x86,0xed,0x4a,
	0xf1,0x99,0xe0,0x0d,0x05,0x6e,0x70,0x00,
	0x10,0x20,0xe9,0x4a,0xc0,0x04,0x30,0x05,
	0xe9,0x4a,0xc0,0x05,0xb0,0x38,0x71,0xc0,
	0x11,0xc3,0x05,0x28,0xd0,0x28,0x61,0xc0,
	0xf1,0x60,0xc0,0x87,0x30,0x86,0xe4,0x39,
	0xe8,0x3c,0x07,0xff,0xdf,0xff,0xc0,0x80,
	0x30,0x87,0xf1,0xa4,0x30,0x02,0xe5,0x4a,
	0x30,0x06,0xe5,0x4a,0xe0,0x3c,0xf1,0xa4,
	0x20,0x80,0xe5,0x4a,0xf1,0x99,0xc0,0x04,
	0x30,0x05,0xe8,0x53,0xc0,0x05,0xb0,0x38,
	0x72,0x00,0x12,0x03,0xc0,0x86,0x30,0x88,
	0xe8,0x1c,0xe4,0x53,0x07,0xff,0xdf,0xff,
	0xc0,0x80,0x30,0x86,0xf1,0xa4,0xd8,0x01,
	0x30,0x02,0xe5,0x46,0xd8,0x02,0x30,0x08,
	0xe5,0x46,0x01,0x46,0x02,0x46,0xc8,0x15,
	0x02,0x06,0x00,0xc6,0xc3,0x20,0x05,0x6b,
	0xd0,0x20,0x70,0x80,0xd0,0x00,0x30,0x02,
	0x13,0x00,0x05,0x6b,0xd0,0x10,0x70,0x00,
	0x10,0x20,0xe8,0x7b,0x10,0x21,0xe8,0x74,
	0x10,0x22,0xe8,0x6b,0x10,0x23,0xe8,0x83,
	0xe0,0x7b,0xc0,0x0c,0x13,0x01,0x10,0x1f,
	0x23,0x00,0x10,0x1f,0x23,0x00,0x10,0x1e,
	0x23,0x00,0xe0,0x86,0xc0,0x0c,0x13,0x01,
	0x10,0x1b,0x23,0x00,0x10,0x1e,0x23,0x00,
	0xe0,0x86,0xc0,0x0c,0x10,0x1f,0x23,0x00,
	0x10,0x1f,0x23,0x00,0x10,0x1f,0x23,0x00,
	0xe0,0x86,0xc0,0x0c,0x10,0x1c,0x33,0x00,
	0xb3,0x38,0x05,0x29,0xd0,0x30,0x63,0x00,
	0xc0,0x4c,0x10,0x56,0x10,0x5b,0xc0,0x0c,
	0x07,0xef,0xd4,0xbf,0x40,0x12,0xc3,0x8a,
	0xc3,0x49,0x07,0xef,0xd4,0xff,0x43,0x53,
	0x40,0x13,0x33,0x40,0x08,0x20,0xd4,0x80,
	0x44,0x8d,0x43,0x53,0x14,0x91,0x33,0x92,
	0x33,0x81,0x01,0x46,0x93,0xc3,0x94,0x02,
	0xc4,0x10,0x00,0xc6,0x00,0xff,0xdf,0xff,
	0x44,0x00,0x10,0x1d,0x43,0xc0,0x05,0x26,
	0xd0,0x38,0x74,0x40,0xc6,0xce,0xc7,0x0d,
	0x07,0xef,0xd4,0xff,0x47,0x13,0x43,0xd3,
	0x37,0x0f,0x08,0x20,0xd4,0x80,0x44,0x9c,
	0x47,0x13,0x14,0x91,0x36,0xd2,0x36,0xd0,
	0xc6,0x5b,0xc6,0x9c,0x16,0x60,0xf4,0xce,
	0xc5,0x59,0xc5,0x1a,0xd6,0x40,0xd6,0x80,
	0x07,0xef,0xd4,0xff,0x46,0x93,0x45,0x13,
	0x36,0x94,0x08,0x20,0xd4,0x80,0x44,0x9a,
	0x46,0x93,0x14,0x91,0x36,0x52,0x36,0x55,
	0xb4,0x40,0xf8,0xf2,0x04,0x20,0xd0,0x40,
	0xd0,0x00,0x07,0xef,0xd4,0xff,0x40,0x13,
	0x46,0x93,0x30,0x1a,0x08,0x20,0xd4,0x80,
	0x44,0x80,0x40,0x13,0x14,0x91,0x30,0x52,
	0x30,0x59,0xf4,0xf2,0x04,0x20,0xd0,0x00,
	0x10,0x04,0xd8,0x04,0xc0,0x40,0x40,0x50,
	0xf9,0x49,0xd8,0x08,0xc0,0x40,0x40,0x4e,
	0xf9,0x49,0xc8,0x1b,0x00,0x57,0xf8,0xf0,
	0x54,0x00,0xe0,0xac,0x53,0x80,0xe0,0xac,
	0x05,0x29,0xd0,0x64,0x70,0x41,0x05,0x29,
	0xd0,0x20,0x70,0x00,0xc4,0xc1,0x14,0xde,
	0xd4,0x83,0x44,0x81,0x14,0x8e,0xc5,0x00,
	0x15,0x1f,0x54,0x94,0x00,0x2c,0xd5,0x0e,
	0x01,0x46,0x00,0x06,0xa4,0xbc,0xa4,0xfd,
	0x80,0x3f,0x65,0x14,0x00,0x06,0x00,0xc6,
	0xc4,0xd0,0x14,0xde,0xd4,0x83,0x44,0x90,
	0x14,0x8e,0xc5,0x0f,0x15,0x1f,0x54,0x94,
	0x00,0x2c,0xd5,0x12,0x01,0x46,0x00,0x06,
	0xa4,0xbc,0xa4,0xfd,0x80,0x3f,0x65,0x14,
	0x00,0x06,0x00,0xc6,0x05,0x29,0x63,0xb8,
	0x05,0x29,0x63,0x74,0x05,0x29,0x64,0x2c,
	0x05,0x29,0x63,0xe8,0x05,0x2a,0x66,0xc0,
	0x05,0x29,0x67,0x3c,0x00,0x26,0xd0,0x30,
	0x70,0x00,0x10,0x26,0xe9,0x2f,0x10,0x24,
	0xf9,0x35,0x00,0xa7,0xd0,0x68,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xf1,0xe9,
	0x05,0x29,0xd0,0x14,0x70,0x00,0x10,0x20,
	0xe9,0x3c,0xe1,0x4a,0xd0,0x40,0x05,0x29,
	0xd0,0x18,0x60,0x40,0xd0,0x40,0x05,0x29,
	0xd0,0x10,0x60,0x40,0xf1,0xad,0xe1,0x4a,
	0xf1,0xf3,0xe0,0x0d,0xf1,0x99,0xf1,0xf3,
	0x01,0x46,0x05,0x28,0xd0,0x30,0x00,0x20,
	0xd0,0x54,0x60,0x40,0x00,0x06,0x00,0xc6,
	0x05,0x26,0xd0,0x38,0x78,0x00,0x08,0x17,
	0x68,0x00,0x05,0x6b,0xd0,0x34,0x70,0x40,
	0xb0,0x3c,0x77,0xc0,0x00,0x20,0xd0,0x12,
	0x10,0x20,0x00,0x05,0xc0,0x05,0x72,0x40,
	0xb0,0x3c,0x01,0x46,0x72,0x80,0x03,0x95,
	0xf9,0x6c,0x05,0x64,0xd8,0x28,0x00,0x06,
	0x90,0x7d,0x60,0x60,0x0f,0xef,0xd8,0x3f,
	0x42,0xa0,0x00,0xc6,0xd8,0x10,0x00,0x70,
	0xd0,0x01,0xc0,0x40,0x40,0x09,0x30,0x01,
	0xf9,0x48,0xd8,0x20,0x00,0x24,0xd0,0x00,
	0x40,0x0a,0xe9,0x48,0xc0,0x09,0x10,0x16,
	0x10,0x19,0x00,0x21,0xd0,0x7f,0x40,0x01,
	0x0f,0xef,0xd0,0x7f,0x42,0x41,0x12,0x5f,
	0xc0,0x4a,0x00,0x23,0xd0,0xbf,0x40,0x42,
	0x12,0x97,0x00,0x20,0xd0,0x87,0x42,0x82,
	0x12,0x88,0x22,0x81,0x12,0x87,0x22,0x80,
	0x05,0x29,0xd0,0x24,0x62,0x80,0x05,0x29,
	0xd0,0x20,0x62,0x40,0x07,0xc5,0xb1,0x70,
	0x01,0x2b,0xd0,0x28,0x30,0x05,0xed,0xa0,
	0x00,0xef,0xd1,0x48,0x05,0x28,0xd0,0x18,
	0x61,0x40,0x07,0xc5,0x00,0x29,0xd0,0x24,
	0x70,0x00,0x00,0x29,0xd0,0x60,0x70,0x41,
	0x30,0x01,0x10,0x03,0x07,0xc5,0x05,0x26,
	0xd0,0x20,0x70,0x40,0x10,0x62,0xf9,0xc1,
	0x04,0xea,0x70,0x00,0x10,0x22,0xe9,0xc1,
	0x10,0x24,0xe9,0xc1,0x05,0x64,0xd0,0x28,
	0x70,0xc0,0x05,0x64,0xd0,0x34,0x70,0x80,
	0x30,0xc2,0xe9,0xc1,0x07,0xc5,0xd0,0x42,
	0x10,0x44,0xc0,0x0e,0x10,0x12,0xd0,0x8e,
	0x40,0x02,0x20,0x40,0xb0,0x7f,0x10,0x48,
	0x10,0x48,0xc0,0x0e,0x07,0xef,0xd0,0xbf,
	0x40,0x02,0x10,0x01,0x20,0x40,0xb0,0x7f,
	0xc0,0x0d,0x10,0x01,0xb0,0x3f,0x01,0x46,
	0xa0,0x42,0xa0,0x03,0x00,0xc6,0x05,0x6b,
	0xd0,0x08,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0xc8,0x11,0x08,0x14,0x05,0x26,0xd0,0x38,
	0x68,0x00,0xc4,0x60,0xd0,0x40,0x05,0x62,
	0xd0,0x04,0x60,0x40,0x07,0xc5,0x01,0x46,
	0x1d,0xde,0x1d,0xc2,0x00,0xc6,0x05,0x2a,
	0xd0,0x1c,0xd0,0x40,0x60,0x40,0xd7,0x80,
	0x07,0xc5,0x05,0x2a,0xd0,0x14,0x70,0x40,
	0xb0,0x7f,0x60,0x40,0x05,0x2a,0xd0,0x18,
	0x70,0x40,0x50,0x60,0x00,0xef,0xd0,0xbf,
	0x40,0x42,0x18,0x0c,0x50,0x60,0x60,0x40,
	0x07,0xc5,0x00,0x00,0x01,0x46,0x05,0x28,
	0xd0,0x30,0x00,0x20,0xd0,0x54,0x60,0x40,
	0x00,0x06,0x00,0xc6,0x05,0x26,0xd0,0x38,
	0x78,0x00,0x08,0x17,0x68,0x00,0x05,0x6b,
	0xd0,0x34,0x70,0x40,0xb0,0x3c,0x77,0xc0,
	0x00,0x20,0xd0,0x12,0x10,0x20,0x00,0x05,
	0xf0,0x30,0x00,0xad,0xd0,0x60,0x00,0x20,
	0xd7,0xd2,0x17,0xe0,0x07,0xc4,0x05,0x68,
	0x70,0x24,0xb0,0x3f,0x05,0x68,0x60,0x24,
	0x05,0x65,0x70,0x20,0x10,0x20,0xe8,0x26,
	0x05,0x65,0x70,0x2c,0x10,0x20,0xe8,0x26,
	0x05,0x6c,0x70,0x1c,0x10,0x21,0xf8,0x26,
	0x05,0x65,0x70,0x0c,0x05,0x65,0x60,0x10,
	0xd0,0x01,0xd0,0x00,0x05,0x65,0x60,0x14,
	0x00,0xaf,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x05,0x27,0xd0,0x2c,
	0x70,0x40,0x10,0x60,0x00,0x20,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x17,0xe0,0x00,0x05,
	0x00,0xef,0xd0,0x3c,0x01,0x46,0x59,0x80,
	0x39,0x80,0x00,0x24,0xd0,0x14,0x59,0x80,
	0x00,0xc6,0x07,0xc5,0xf3,0x0d,0xd0,0x40,
	0x05,0x27,0x60,0x64,0x00,0xac,0xd6,0xb8,
	0x05,0xac,0x70,0x18,0x10,0x22,0xe8,0x16,
	0x00,0xe7,0x70,0x1c,0x10,0x20,0xf8,0x16,
	0x05,0xe6,0x70,0x38,0x10,0x20,0xfb,0x5d,
	0x05,0x62,0x70,0x2c,0x10,0x20,0xfb,0x5d,
	0x05,0x6c,0xd0,0x28,0x70,0x40,0xb0,0x7c,
	0x60,0x40,0x05,0x26,0x77,0xa0,0x05,0xac,
	0x7a,0x04,0x05,0xac,0x7a,0x58,0x05,0x2f,
	0x77,0x7c,0x05,0xa2,0x78,0xd8,0x05,0xac,
	0x78,0x9c,0x05,0xa2,0x76,0x44,0x05,0x60,
	0x76,0xf8,0x05,0xab,0x7a,0xb8,0x05,0x60,
	0x6a,0x9c,0xd1,0x40,0x00,0x2e,0x78,0x34,
	0x00,0x2f,0x48,0x3f,0x00,0x23,0xd0,0x70,
	0x0c,0x11,0xe8,0x40,0x00,0x27,0xd0,0x60,
	0x0c,0x11,0xe8,0x40,0x03,0xd1,0xf8,0x43,
	0xb1,0x41,0xe0,0x43,0x03,0xd1,0xe8,0x43,
	0xb1,0x7f,0x05,0x27,0x61,0x44,0xd0,0x80,
	0x05,0xa1,0x70,0x38,0x00,0x25,0x30,0x20,
	0xec,0x51,0x05,0xa1,0x70,0x3c,0x00,0x24,
	0x30,0x2c,0xe4,0x51,0xd0,0x81,0x04,0xe8,
	0x60,0xb0,0xd0,0x40,0x07,0xa4,0x60,0x4c,
	0x05,0x60,0x60,0x7c,0x05,0x6d,0x60,0x68,
	0x05,0x6e,0x60,0x50,0x05,0x61,0x60,0x64,
	0x07,0xa3,0x60,0x74,0x05,0x6d,0x60,0x6c,
	0x05,0x62,0x60,0x70,0x05,0x26,0x67,0xa4,
	0x00,0xa8,0xd0,0x70,0x05,0x28,0x60,0x44,
	0x00,0x60,0xd0,0x40,0x05,0x28,0x60,0x48,
	0xd0,0x40,0x05,0x64,0x60,0x4c,0xb0,0x43,
	0x05,0x64,0x60,0x48,0xd0,0x41,0x07,0xa4,
	0x60,0x44,0x05,0xa1,0x70,0x7c,0x00,0x24,
	0xd0,0x20,0x30,0x01,0xf4,0x83,0x00,0x23,
	0x70,0x48,0x10,0x60,0xe8,0x83,0x05,0xa2,
	0x60,0x40,0x01,0x90,0xf8,0x94,0x05,0x60,
	0x70,0x40,0x10,0x63,0xe8,0x94,0x04,0xef,
	0x70,0x20,0x10,0x21,0xf8,0x91,0x04,0xef,
	0x70,0x24,0x10,0x20,0xe8,0x94,0x30,0x69,
	0xf8,0x94,0xe3,0x40,0x01,0x90,0xe8,0x99,
	0xd7,0x41,0xd2,0x00,0xe0,0xa5,0x1a,0x63,
	0xf8,0x9e,0xd7,0x41,0xd2,0x00,0xe0,0xa5,
	0x05,0x2f,0x72,0x10,0xd7,0x40,0x1a,0x62,
	0xe8,0xa5,0xd7,0x41,0xd2,0x00,0x05,0x2f,
	0x67,0x7c,0x05,0x2f,0x62,0x10,0x05,0x60,
	0x6a,0x40,0xd7,0x02,0x01,0x90,0xe8,0xb9,
	0x16,0x62,0xe8,0xb3,0x16,0x61,0xe8,0xb3,
	0xe0,0xb9,0x11,0x60,0xf8,0xcc,0x16,0xe3,
	0xe8,0xcc,0xd7,0x03,0xe0,0xcc,0x1a,0x23,
	0xf8,0xc2,0xc4,0xe2,0x01,0x13,0xe8,0xcc,
	0x01,0x90,0xf8,0xcc,0xd7,0x03,0xe0,0xcc,
	0x05,0x27,0x78,0x28,0xc4,0xe0,0x00,0x13,
	0xe8,0xca,0x01,0x90,0xf8,0xca,0xd7,0x03,
	0x05,0x27,0x68,0xa8,0x00,0x2e,0x70,0x74,
	0x00,0x2f,0x40,0x7f,0x00,0x27,0xd0,0xa0,
	0x30,0x81,0xf8,0xee,0x17,0x23,0xe8,0xd9,
	0x17,0x22,0xe8,0xdc,0xe0,0xe9,0x16,0xe2,
	0xf8,0xe9,0xe0,0xde,0x16,0xe3,0xf8,0xe9,
	0x05,0x27,0x70,0x50,0xb0,0x7f,0x05,0x27,
	0x60,0x50,0x05,0x27,0x70,0x94,0x30,0x81,
	0xec,0xec,0xd0,0x41,0xe0,0xef,0xd0,0x40,
	0x05,0x27,0x60,0x50,0xd0,0x42,0xe0,0xef,
	0xd0,0x40,0xc1,0x81,0x05,0x27,0x60,0x40,
	0xd6,0x00,0x01,0x90,0xf9,0x28,0x17,0x60,
	0xe9,0x28,0x05,0xe1,0x70,0x5c,0x10,0x60,
	0xf9,0x28,0x05,0xac,0x70,0x58,0x10,0x63,
	0xf9,0x01,0x11,0x61,0xe9,0x28,0x00,0x32,
	0xd0,0x01,0xa0,0x38,0x80,0x3f,0x05,0xe6,
	0xd0,0x70,0x70,0x01,0xd0,0x41,0x40,0x01,
	0x10,0x02,0xd0,0x40,0x03,0xd5,0xe9,0x0f,
	0xd0,0x42,0x50,0x01,0x1a,0x63,0xe9,0x17,
	0xd0,0x41,0x1a,0x61,0xe9,0x1a,0xd0,0x40,
	0xe1,0x1a,0x14,0xd7,0xd0,0x41,0x40,0x53,
	0x50,0x01,0xd0,0x41,0x10,0x40,0x00,0x22,
	0xd0,0x96,0x40,0x81,0x10,0xa0,0xe9,0x28,
	0xd6,0x01,0x05,0x63,0xd0,0x3c,0x70,0x40,
	0xb0,0x7f,0x60,0x40,0x05,0x60,0x67,0x30,
	0xc0,0x5c,0x20,0x58,0x05,0x60,0x60,0x74,
	0x00,0x32,0xd0,0x00,0xa0,0x38,0x80,0x3f,
	0xc0,0x59,0x10,0x42,0x07,0x21,0xd0,0x9c,
	0x20,0x81,0x74,0x82,0x16,0xe3,0xf9,0x3d,
	0xc0,0x52,0x10,0x5f,0x24,0x81,0x1a,0x62,
	0xe9,0x40,0xf2,0x08,0x05,0x60,0x67,0x38,
	0x17,0x61,0xf9,0x5d,0x1a,0x21,0xf9,0x56,
	0x05,0xab,0x70,0x38,0x10,0x20,0xf9,0x56,
	0x05,0x65,0x70,0x00,0xb0,0x34,0x70,0x00,
	0xd0,0x4f,0x40,0x01,0x10,0x2f,0xe9,0x5d,
	0x10,0x2c,0xf9,0x56,0xd0,0x41,0xe1,0x57,
	0xd0,0x40,0x05,0x26,0xd0,0x3c,0x70,0x80,
	0x05,0x28,0x60,0x8c,0x60,0x40,0x04,0xea,
	0x70,0x40,0x10,0x62,0xe9,0x83,0x10,0x61,
	0xe9,0x83,0x11,0x60,0xe5,0x85,0x00,0x27,
	0x78,0x34,0x00,0x10,0xf9,0x85,0x05,0x26,
	0x70,0x7c,0x10,0x60,0xf9,0x83,0x04,0xeb,
	0x70,0x50,0x10,0x61,0xf9,0x83,0x04,0xed,
	0x70,0x48,0x10,0x60,0xf9,0x7d,0x05,0xac,
	0x70,0x58,0x10,0x63,0xf9,0x83,0x11,0x61,
	0xf9,0x83,0x11,0xa2,0xe9,0x85,0xd0,0x40,
	0x05,0x62,0x60,0x68,0x05,0x62,0x60,0x60,
	0xe1,0x86,0xd0,0x40,0xe1,0x86,0xd0,0x41,
	0x05,0x62,0x60,0x64,0x1a,0x21,0xf9,0x92,
	0x05,0x2f,0x70,0x64,0x05,0x2f,0x60,0x68,
	0xd0,0x40,0x05,0x2f,0x60,0x64,0xe1,0xa6,
	0x05,0x2f,0xd0,0x24,0x70,0x40,0xb0,0x7f,
	0x60,0x40,0x1a,0x22,0xf9,0xa1,0x05,0x2f,
	0x70,0x6c,0x05,0x2f,0x60,0x70,0xd0,0x40,
	0x05,0x2f,0x60,0x6c,0xe1,0xa6,0x05,0x2f,
	0xd0,0x2c,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0x17,0xa0,0xe9,0xaa,0x17,0x60,0xe9,0xcb,
	0x17,0xa0,0xf9,0xc4,0x17,0x60,0xe9,0xc3,
	0x1a,0x21,0xf9,0xc3,0x04,0xeb,0x70,0x10,
	0x10,0x23,0xf9,0xb7,0xd0,0x41,0x04,0xee,
	0x60,0x6c,0xd2,0x00,0x05,0x2f,0x62,0x10,
	0xd7,0x81,0xe1,0xce,0x05,0xab,0xd8,0x24,
	0x78,0x20,0x00,0x11,0xf9,0xc3,0xd7,0x82,
	0xe1,0xce,0xe2,0x03,0x17,0xa1,0xf9,0xce,
	0x1a,0x23,0xf9,0xc9,0xe2,0x03,0xd7,0x82,
	0xe1,0xce,0x52,0x08,0xe9,0xce,0xe3,0x40,
	0x05,0x26,0xd0,0x20,0x67,0x80,0x05,0x62,
	0x70,0x50,0xd0,0x80,0x05,0x62,0x60,0x90,
	0x10,0x60,0xe9,0xe8,0x05,0x62,0x70,0x54,
	0x1a,0x23,0xf9,0xe1,0xc0,0xaa,0x30,0x81,
	0x10,0xa1,0xe9,0xe8,0xe1,0xe4,0xc0,0xaa,
	0x30,0x81,0xed,0xe8,0xd0,0x40,0x05,0x26,
	0x60,0x60,0xe2,0x03,0x1a,0x62,0xf9,0xf1,
	0xd0,0x40,0x00,0xad,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xd0,0x40,
	0xf2,0x05,0x04,0xea,0x70,0x00,0x10,0x24,
	0xf9,0xfd,0x00,0xad,0xd0,0x70,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xad,
	0xd0,0x68,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xd0,0x41,0xe1,0xf2,0x05,0x2f,
	0x60,0x5c,0x07,0xc5,0x05,0xab,0x72,0xfc,
	0x05,0xac,0x72,0x80,0xd2,0x40,0x05,0x64,
	0x70,0x50,0x10,0x60,0xea,0x46,0x05,0x65,
	0x74,0x00,0x02,0xef,0xd0,0x7f,0x30,0x4b,
	0xea,0x1b,0xd0,0x40,0x05,0x64,0x60,0x7c,
	0xe2,0x3d,0xc0,0x8a,0x00,0x23,0xd0,0x7f,
	0x42,0x81,0x0f,0xe8,0xd0,0x40,0x40,0x81,
	0x10,0x9f,0x52,0x82,0x12,0x82,0x05,0x64,
	0xd0,0x7c,0x62,0x81,0x12,0xa0,0xea,0x3d,
	0xc0,0x4a,0xc0,0xca,0x72,0x81,0x0f,0xef,
	0x42,0xbf,0x00,0x24,0xd0,0x80,0x52,0x82,
	0xb0,0x7c,0x72,0xc1,0x00,0xef,0x42,0xff,
	0x02,0x24,0xd0,0x80,0x52,0xc2,0xb0,0x7c,
	0x74,0x01,0xd0,0x40,0x60,0x43,0x03,0x95,
	0xfa,0x46,0x05,0x65,0x64,0x00,0x14,0x20,
	0xea,0x46,0x74,0x50,0x05,0x65,0x64,0x44,
	0xc0,0x8b,0x00,0x23,0xd0,0x7f,0x40,0x81,
	0x12,0xd7,0xd0,0x47,0x42,0xc1,0x12,0xc8,
	0x22,0xc2,0x12,0xc7,0xc0,0x8a,0x10,0x97,
	0x00,0x21,0xd0,0x7f,0x40,0x81,0x22,0xc2,
	0x00,0x23,0xd0,0xbf,0x42,0x82,0x12,0x87,
	0x05,0x2d,0x62,0xb4,0x05,0x2d,0x62,0xf8,
	0x05,0x2e,0x73,0x04,0x05,0x2e,0x73,0x48,
	0x05,0x2d,0x73,0xbc,0x05,0x2e,0x73,0xc0,
	0x0f,0xff,0xdf,0xff,0x10,0x02,0x43,0x00,
	0x43,0x80,0x05,0xac,0xd0,0x44,0x7a,0x01,
	0x1a,0x23,0xfa,0xa8,0x12,0xa0,0xfa,0x74,
	0x12,0xe0,0xea,0x80,0x05,0x26,0xd0,0x38,
	0x78,0x00,0x08,0x13,0x68,0x00,0xd0,0x40,
	0x05,0x27,0xd0,0x38,0x60,0x40,0xc3,0x0a,
	0xc3,0x4b,0xe2,0xcb,0x05,0xab,0x70,0x78,
	0x10,0x60,0xfa,0x9b,0x05,0x27,0x70,0x78,
	0x10,0x60,0xea,0x9b,0xd0,0x40,0x60,0x40,
	0x01,0x46,0x73,0x11,0x00,0x06,0x93,0x7d,
	0x80,0x3f,0x00,0xc6,0x11,0x01,0x08,0x20,
	0xd0,0x00,0xc0,0x8c,0x40,0x80,0x10,0x91,
	0x53,0x42,0x07,0xef,0xd0,0x3f,0x43,0x00,
	0xe2,0xcb,0xd0,0x40,0x05,0x27,0x60,0x78,
	0x23,0x12,0x08,0x20,0xd0,0x40,0x30,0x4c,
	0xee,0xcb,0xb3,0x7f,0x08,0x20,0xd0,0x40,
	0x33,0x01,0xe2,0xcb,0x13,0xa0,0xfa,0xac,
	0x13,0xe0,0xea,0xb4,0xc3,0x0e,0xc3,0x4f,
	0x05,0x26,0xd0,0x38,0x78,0x00,0x08,0x13,
	0x68,0x00,0xe2,0xbd,0x23,0x12,0x08,0x20,
	0xd0,0x40,0x30,0x4c,0xee,0xbd,0xb3,0x7f,
	0x08,0x20,0xd0,0x40,0x33,0x01,0x12,0xa0,
	0xfa,0xc1,0x12,0xe0,0xea,0xc9,0x05,0x26,
	0xd0,0x38,0x78,0x00,0x08,0x13,0x68,0x00,
	0xc3,0x8a,0xc3,0xcb,0xe2,0xcb,0xd3,0x80,
	0xd3,0xc0,0x12,0x60,0xfb,0x00,0x05,0x61,
	0x70,0x70,0x10,0x60,0xfb,0x00,0x05,0x2a,
	0x70,0x4c,0x05,0x2a,0x70,0x90,0x07,0xef,
	0xd5,0x7f,0x40,0x55,0x43,0x15,0x30,0x4c,
	0x08,0x20,0xd5,0x00,0x45,0x01,0x40,0x55,
	0x15,0x11,0x30,0x94,0x30,0x8d,0x10,0xa0,
	0xe7,0x00,0xd0,0xc1,0xd1,0x00,0x07,0xef,
	0xd5,0x7f,0x41,0x15,0x40,0x55,0x31,0x01,
	0x08,0x20,0xd5,0x00,0x45,0x04,0x41,0x15,
	0x15,0x11,0x30,0xd4,0x30,0xc2,0x10,0xe0,
	0xe7,0x00,0xd2,0x41,0x05,0x2e,0x73,0x04,
	0x05,0x2e,0x73,0x48,0x1a,0x23,0xea,0xfd,
	0xd3,0x80,0xd3,0xc0,0xe2,0x6e,0xd2,0x80,
	0xd2,0xc0,0xe2,0x6e,0x05,0x2e,0x63,0x04,
	0x05,0x2e,0x63,0x48,0x05,0x2a,0x63,0x0c,
	0x05,0x2a,0x63,0x50,0x05,0x2d,0x63,0xbc,
	0x05,0x2e,0x63,0xc0,0x07,0xc5,0x00,0xef,
	0xd0,0x3c,0x01,0x46,0x59,0x80,0x39,0x80,
	0x00,0x24,0xd0,0x14,0x59,0x80,0x00,0xc6,
	0x07,0xc5,0x00,0x00,0x05,0xac,0x7a,0x04,
	0x05,0x27,0x71,0xc0,0x05,0x2f,0x70,0x3c,
	0x10,0x20,0xe9,0x17,0x1a,0x23,0xf8,0x10,
	0xf1,0x24,0x10,0x20,0xe8,0x10,0xd0,0x01,
	0x05,0x2f,0x60,0x1c,0x04,0xef,0x71,0x24,
	0x04,0xef,0x70,0x20,0xd0,0x41,0x40,0x01,
	0xe8,0x2b,0x1a,0x23,0xf8,0x1a,0xe3,0x40,
	0x1a,0x22,0xf8,0x1e,0x11,0x21,0xfb,0x40,
	0x11,0x22,0xe8,0x2b,0x05,0x26,0xd0,0x70,
	0x70,0x01,0x10,0x20,0xe8,0x28,0xb0,0x01,
	0x60,0x01,0xe3,0x40,0x04,0xef,0x70,0x28,
	0x60,0x01,0x00,0x2a,0x71,0xa0,0x00,0x21,
	0xd0,0x00,0x30,0x06,0xf8,0x82,0x05,0x26,
	0x70,0x3c,0x10,0x20,0xe8,0x77,0x00,0xe7,
	0x70,0x24,0x10,0x20,0xe8,0x47,0x00,0xe7,
	0x70,0x60,0x05,0x26,0x70,0xb4,0xd0,0x1f,
	0x40,0x80,0x10,0x41,0x10,0x9f,0x10,0xa1,
	0xec,0x3f,0x10,0x5f,0x05,0x60,0x60,0x74,
	0xe0,0x82,0x05,0x2e,0x70,0x80,0x05,0x2d,
	0x70,0x7c,0x05,0x2e,0x70,0x08,0x05,0x2e,
	0x70,0xc4,0x07,0xef,0xd2,0x3f,0x40,0x48,
	0x40,0xc8,0x30,0x43,0x08,0x20,0xd1,0xc0,
	0x41,0xc1,0x40,0x48,0x11,0xd1,0x30,0x87,
	0x30,0x80,0x10,0xa0,0xec,0x5e,0xe0,0x39,
	0x10,0x55,0xd0,0x0f,0x40,0x40,0x00,0xff,
	0xdf,0xff,0x40,0x80,0x10,0x84,0x20,0x42,
	0xc0,0x01,0x10,0x1e,0x20,0x40,0x10,0x5f,
	0x05,0x26,0x77,0x34,0xd0,0x1f,0x47,0x00,
	0x17,0x21,0xfc,0x74,0x10,0x41,0x17,0x1f,
	0x17,0x21,0xec,0x70,0x05,0x60,0x60,0x74,
	0xe0,0x82,0x05,0x26,0x77,0x34,0x05,0x60,
	0x70,0x70,0x10,0x63,0xf8,0x80,0xc0,0x5c,
	0x10,0x5f,0x27,0x01,0x05,0x60,0x67,0x34,
	0x05,0x64,0xd0,0x48,0x05,0x20,0xd0,0x1c,
	0x70,0x00,0x10,0x22,0xe4,0xbf,0xec,0x8d,
	0xd0,0x00,0xb0,0x04,0xe0,0x8f,0xd0,0x00,
	0xb0,0x05,0x60,0x01,0x05,0x20,0x70,0xec,
	0x10,0xdc,0x05,0x64,0x60,0xcc,0x05,0x20,
	0x70,0x9c,0x10,0xa4,0xf8,0xbf,0x05,0xe1,
	0x70,0x9c,0x10,0xa0,0xf8,0xbf,0x05,0xac,
	0x70,0x84,0x10,0xa3,0xf8,0xbf,0x05,0x27,
	0x70,0xb0,0x10,0xa3,0xf8,0xbc,0x10,0xe0,
	0xe8,0xbc,0x05,0x6a,0x70,0x78,0x10,0x60,
	0xe8,0xb4,0x00,0xad,0xdc,0xc0,0x00,0x60,
	0xdc,0x80,0x00,0x20,0xd0,0x12,0x00,0xa7,
	0xd0,0x48,0x00,0x05,0x05,0xac,0x70,0x18,
	0x10,0x23,0xf8,0xbc,0xf1,0x1d,0xc0,0xab,
	0x30,0x83,0xfc,0xb8,0xd0,0x40,0x07,0xa4,
	0x60,0x44,0x04,0xef,0x70,0x10,0x10,0x24,
	0xf8,0xcc,0xd0,0x01,0x05,0x2f,0x60,0x1c,
	0x00,0xad,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x04,0xeb,0x71,0x68,
	0x11,0x60,0xe8,0xe8,0x1a,0x21,0xe8,0xd3,
	0xe0,0xdf,0x04,0xeb,0xd0,0x2c,0x70,0x40,
	0x10,0x60,0xf8,0xdd,0xd0,0x42,0x51,0x41,
	0x04,0xeb,0x61,0x68,0xe0,0xe8,0xb0,0x41,
	0x60,0x40,0xd0,0x01,0x05,0x2f,0x60,0x1c,
	0x00,0xad,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x05,0xe1,0x70,0x5c,
	0x10,0x60,0xf9,0x07,0x05,0x27,0x70,0x44,
	0x10,0x61,0xf9,0x07,0x05,0xac,0x70,0x58,
	0x10,0x63,0xf9,0x07,0x11,0xe1,0xf8,0xfa,
	0xd0,0x82,0x05,0x60,0x60,0xb4,0xe1,0x07,
	0x11,0xe2,0xf9,0x07,0x05,0x27,0x70,0x4c,
	0xb0,0x7f,0x10,0x63,0xe5,0x05,0xd0,0x81,
	0x05,0x60,0x60,0xb4,0xd0,0x40,0x05,0x27,
	0x60,0x4c,0x05,0xe1,0x70,0x5c,0x10,0x60,
	0xf9,0x10,0x04,0xeb,0x70,0x68,0x10,0x60,
	0xf9,0x17,0xe1,0x17,0x05,0x27,0x70,0x40,
	0x10,0x61,0xe9,0x17,0xd0,0x41,0x05,0x62,
	0x60,0x64,0x00,0xad,0xd0,0x48,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x0c,0x09,
	0x84,0x36,0x80,0x3f,0xaa,0xf4,0x0a,0xcd,
	0xaa,0xf4,0x07,0xc5,0x05,0x26,0x70,0x58,
	0x10,0x60,0xf9,0x3c,0x05,0x27,0x70,0x44,
	0x10,0x60,0xf9,0x3c,0x03,0xd1,0xe9,0x3c,
	0x07,0x26,0x70,0x50,0x10,0x60,0xf9,0x3c,
	0x05,0x20,0x70,0x50,0x10,0x60,0xe9,0x38,
	0xd0,0x02,0xe1,0x3f,0x05,0xe1,0x70,0x5c,
	0x10,0x60,0xf9,0x3e,0xd0,0x00,0xe1,0x3f,
	0xd0,0x01,0x07,0xc5,0x00,0xad,0xd6,0x88,
	0x05,0x26,0x70,0x60,0x10,0x62,0xe8,0x0a,
	0x05,0x2f,0x70,0x5c,0x10,0x60,0xf9,0x0f,
	0x05,0x2e,0x73,0x04,0x05,0x2e,0x73,0x48,
	0x05,0x2d,0x75,0x34,0x05,0x2d,0x75,0x78,
	0xc7,0x0d,0x17,0x1f,0xd6,0xc1,0x46,0xcd,
	0x16,0xcf,0x56,0xcc,0x00,0x2b,0xd7,0x72,
	0x01,0x46,0x00,0x06,0xa6,0xfc,0xa7,0x3d,
	0x80,0x3f,0x67,0x5d,0x00,0x06,0x00,0xc6,
	0x05,0x26,0x78,0x38,0x00,0x11,0xf8,0x59,
	0x05,0x62,0x70,0x40,0x10,0x60,0xe8,0x59,
	0x05,0xe1,0x70,0x5c,0x10,0x60,0xf8,0x54,
	0x04,0xea,0x70,0x40,0x10,0x62,0xf8,0x36,
	0x04,0xeb,0x70,0x50,0x10,0x61,0xe8,0x54,
	0x05,0x26,0x78,0x38,0x00,0x19,0xf8,0x54,
	0x01,0x46,0x90,0x43,0x90,0x82,0x80,0x3f,
	0x00,0xc6,0x00,0xff,0xdf,0xff,0x40,0x80,
	0x07,0xef,0x40,0x7f,0xd0,0x01,0x05,0x27,
	0x60,0x20,0x07,0xef,0xd7,0x3f,0x40,0x5c,
	0x45,0x1c,0x30,0x54,0x08,0x20,0xd6,0xc0,
	0x46,0xc1,0x40,0x5c,0x16,0xd1,0x30,0x9b,
	0x30,0x95,0xe7,0x5d,0xd0,0x00,0x05,0x27,
	0x60,0x20,0x05,0x62,0x60,0x00,0x05,0x27,
	0x70,0x34,0x10,0x20,0xf8,0x6c,0x05,0x64,
	0x70,0x68,0x05,0x64,0x70,0xb0,0x0f,0xef,
	0xd0,0xff,0x30,0xc2,0xe8,0x6c,0x30,0x42,
	0xe8,0x6c,0x05,0x26,0x78,0x38,0x04,0x15,
	0x05,0x26,0x68,0x38,0x01,0x46,0x05,0x2f,
	0x74,0x04,0x05,0x2f,0x74,0x48,0x05,0xe6,
	0x70,0x70,0x00,0x06,0x00,0xc6,0x00,0xff,
	0xdf,0xff,0x44,0x40,0x07,0xef,0xd0,0x3f,
	0x44,0x00,0x05,0x2f,0x70,0x8c,0xd0,0xc0,
	0x20,0xc2,0xb0,0x41,0xf4,0x7e,0x05,0x2f,
	0x60,0xe0,0xc5,0xcd,0xc5,0x8c,0xd0,0x40,
	0x07,0xef,0xd7,0x3f,0x45,0x9c,0x40,0xdc,
	0x35,0x83,0x08,0x20,0xd6,0xc0,0x46,0xd6,
	0x45,0x9c,0x16,0xd1,0x35,0xdb,0x35,0xc1,
	0x05,0x2e,0x65,0xb0,0x05,0x2e,0x65,0xf4,
	0x05,0x2f,0x74,0xd4,0x05,0x2f,0x71,0xd8,
	0xc0,0x51,0xc0,0x90,0x07,0xef,0xd7,0x3f,
	0x40,0x9c,0x45,0x9c,0x30,0x96,0x08,0x20,
	0xd6,0xc0,0x46,0xc2,0x40,0x9c,0x16,0xd1,
	0x30,0x5b,0x30,0x57,0x05,0x2a,0x60,0x64,
	0x05,0x2a,0x60,0xa0,0x10,0x60,0xf4,0xc7,
	0x07,0xef,0xd7,0x3f,0x45,0x9c,0x44,0x1c,
	0x35,0x90,0x08,0x20,0xd6,0xc0,0x46,0xd6,
	0x45,0x9c,0x16,0xd1,0x35,0xdb,0x35,0xd1,
	0x00,0x27,0xd6,0x3f,0x46,0x17,0x16,0x0f,
	0x56,0x16,0x05,0x2e,0x66,0x38,0xf1,0x47,
	0x05,0x2f,0x71,0xd8,0x31,0xd8,0xfc,0xed,
	0xe1,0x07,0x00,0x27,0xd6,0x3f,0x46,0x01,
	0x16,0x0f,0x56,0x02,0x05,0x2e,0x66,0x38,
	0xf1,0x47,0x05,0x2f,0x74,0xd4,0x34,0xd8,
	0xfc,0xd4,0xe1,0x07,0xf1,0x15,0x10,0x20,
	0xf9,0x0f,0x05,0x27,0x72,0x04,0x12,0x20,
	0xe8,0xe3,0x05,0xac,0x70,0x58,0x10,0x63,
	0xf8,0xe3,0xd0,0x41,0x05,0x60,0x60,0x74,
	0xe1,0x0f,0x05,0xac,0x7a,0x04,0x1a,0x23,
	0xf9,0x0f,0x00,0x2b,0x70,0x68,0xb0,0x7f,
	0x00,0x2b,0x60,0x68,0xe3,0x40,0x04,0xea,
	0x70,0x40,0x10,0x62,0xe8,0xf9,0x05,0xa2,
	0x70,0x04,0x10,0x23,0xf8,0xf9,0x05,0x27,
	0x70,0x30,0x10,0x23,0xe9,0x0f,0xf1,0x15,
	0x10,0x20,0xf9,0x0f,0x03,0x50,0xe9,0x24,
	0x01,0x46,0x80,0xa2,0x90,0x23,0x10,0x20,
	0x00,0xc6,0x10,0x20,0xe5,0x0f,0x0b,0x50,
	0xe1,0x24,0xf1,0x64,0x05,0x26,0x78,0x38,
	0x08,0x12,0x18,0x20,0xf9,0x0f,0x05,0x26,
	0x68,0x38,0x00,0xad,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xd0,0x00,
	0x05,0x26,0x70,0x78,0x10,0x60,0xf9,0x22,
	0x05,0x2f,0x70,0x5c,0x10,0x60,0xf9,0x22,
	0x00,0x26,0x70,0x70,0x10,0x60,0xf9,0x23,
	0xd0,0x01,0x07,0xc5,0x05,0x27,0x72,0x04,
	0x12,0x20,0xe9,0x34,0x05,0xa2,0x78,0x18,
	0x00,0x10,0xf9,0x30,0x05,0x27,0x70,0x40,
	0x10,0x61,0xf9,0x34,0xd0,0x43,0x05,0x60,
	0x60,0x74,0xe1,0x07,0x05,0x62,0x70,0x2c,
	0x10,0x20,0xf9,0x46,0xd0,0x41,0x05,0x62,
	0x60,0x48,0x05,0x62,0x60,0x6c,0x05,0x26,
	0x70,0x64,0x10,0x62,0xf9,0x46,0x00,0x2b,
	0x70,0x6c,0xb0,0x7f,0x00,0x2b,0x60,0x6c,
	0xe3,0x5d,0x05,0x62,0x70,0x44,0x10,0x60,
	0xf9,0x63,0x05,0x2e,0x70,0x3c,0x30,0x18,
	0xed,0x63,0x05,0x26,0x78,0x38,0x18,0x20,
	0xf9,0x63,0x04,0x12,0x05,0x26,0x68,0x38,
	0xd0,0x41,0x05,0x6e,0x60,0x74,0x00,0x26,
	0x70,0x78,0x10,0x44,0x05,0x2f,0x60,0x54,
	0x00,0x26,0x70,0x7c,0x10,0x44,0x05,0x2f,
	0x60,0x58,0x07,0xc5,0x05,0x2f,0x70,0x40,
	0xc0,0x98,0xc0,0xd8,0x10,0x9f,0x10,0xdf,
	0x30,0x81,0xed,0x6d,0xc0,0xc1,0x05,0x2f,
	0x70,0x54,0x00,0x26,0x70,0xb8,0xc1,0x02,
	0x30,0x43,0x31,0x01,0xe5,0x76,0xc0,0x42,
	0x05,0x2f,0x60,0x54,0x05,0x2f,0x70,0x58,
	0x00,0x26,0x70,0xb8,0xc1,0x02,0x30,0x43,
	0x31,0x01,0xe5,0x81,0xc0,0x42,0x05,0x2f,
	0x60,0x58,0x07,0xc5,0x07,0x26,0xd0,0x50,
	0x70,0x41,0x10,0x60,0xe8,0x10,0x05,0xa1,
	0xd0,0x3c,0x70,0x00,0x00,0x24,0xd0,0x6c,
	0x30,0x40,0xec,0x10,0x05,0x2d,0xd0,0x00,
	0xd0,0x42,0x60,0x40,0x00,0xad,0xd6,0x90,
	0x05,0xac,0xda,0x04,0x7a,0x28,0x05,0x2f,
	0xd7,0x5c,0x77,0x5d,0xd0,0x40,0x05,0x64,
	0xd0,0x00,0x60,0x40,0x00,0xe7,0xd0,0x1c,
	0x70,0x00,0x10,0x20,0xf8,0x83,0x05,0xe6,
	0xd0,0x38,0x70,0x00,0x10,0x20,0xfb,0x5d,
	0x05,0xa2,0x70,0x04,0x10,0x23,0xf8,0x3a,
	0x05,0xa1,0x70,0x38,0x00,0x25,0x30,0x28,
	0xe4,0x3a,0x05,0x26,0x70,0x18,0x10,0x20,
	0xf8,0x3a,0x1a,0x23,0xe8,0x77,0x04,0xe8,
	0xd0,0x50,0x70,0x41,0x10,0x63,0xe8,0x77,
	0x07,0x26,0xd0,0x18,0x73,0x40,0xc3,0x8d,
	0x05,0xac,0x70,0x18,0x10,0x23,0xe8,0x53,
	0x05,0x27,0x70,0x04,0x10,0x21,0xe8,0x4a,
	0x05,0x62,0x70,0x28,0x10,0x21,0xf8,0x53,
	0x00,0x23,0xd0,0x70,0x03,0xd1,0xe8,0x50,
	0x00,0x24,0xd0,0x5e,0xd0,0xa9,0x30,0x42,
	0x23,0x41,0xb3,0x77,0xf0,0x91,0x03,0xd4,
	0xeb,0x5d,0x05,0x2d,0xd0,0x00,0x70,0x40,
	0x10,0x60,0xfc,0x61,0x00,0x23,0xd3,0x50,
	0xb0,0x41,0x60,0x40,0xe0,0x68,0x07,0x26,
	0xd0,0x10,0x70,0x40,0x10,0x61,0xf8,0x68,
	0x00,0x23,0xd3,0x50,0x05,0x64,0xd0,0x00,
	0x63,0x40,0x02,0x46,0xc8,0x18,0x02,0x06,
	0x38,0x0d,0xec,0x77,0x05,0xac,0x70,0x18,
	0x10,0x23,0xfb,0x5d,0x13,0xa0,0xe8,0x6b,
	0xe3,0x5d,0x05,0x26,0xd0,0x20,0x70,0x40,
	0x10,0x62,0xf8,0x83,0xd0,0x70,0x30,0x60,
	0xec,0x83,0x05,0x62,0xd0,0x30,0xd0,0x41,
	0x60,0x40,0x17,0x60,0xf8,0x8b,0x00,0xad,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0xd0,0x41,0x05,0x62,0x60,0x48,
	0x05,0x62,0x60,0x6c,0xe3,0x40,0x05,0x20,
	0x70,0x9c,0x10,0xa0,0xe8,0xa7,0x05,0xac,
	0x7a,0x04,0x05,0x27,0x70,0x70,0x1a,0x23,
	0xf8,0x9e,0x10,0x63,0xf8,0xa7,0xe0,0xa0,
	0x10,0x63,0xe8,0xa7,0x10,0xa2,0xf8,0xa5,
	0x00,0x20,0xd3,0x50,0xe0,0xa7,0x00,0x20,
	0xd3,0x60,0x07,0xc5,0x00,0xad,0xd6,0xb0,
	0x04,0xeb,0x71,0x10,0x11,0x21,0xf8,0x7c,
	0x04,0xed,0x71,0x08,0x11,0x20,0xf8,0x7c,
	0x80,0x62,0x91,0x23,0x11,0x18,0x00,0x24,
	0xd3,0x40,0x33,0x44,0xef,0x5d,0xf1,0x20,
	0xf1,0x2e,0xf1,0x39,0x15,0x1d,0x00,0x29,
	0xd0,0x3c,0x71,0x40,0x05,0x62,0x71,0x3c,
	0x31,0x05,0xe8,0x7c,0xf0,0xf9,0xf0,0xe4,
	0xd4,0xc0,0xd5,0xc0,0xf0,0xc9,0x00,0x23,
	0xd3,0xbf,0x43,0x88,0xc6,0x48,0x16,0x58,
	0xc7,0x88,0xd1,0x07,0x47,0x84,0xc5,0x88,
	0x15,0x9c,0xd1,0x0f,0x45,0x84,0xc1,0x16,
	0x11,0x02,0x05,0x69,0x21,0x20,0x71,0xc4,
	0xc3,0x07,0x11,0xd8,0x00,0x23,0xd1,0x3f,
	0x43,0x04,0xca,0x08,0x1a,0x1d,0xd1,0x01,
	0x4a,0x04,0xf0,0xf1,0xd0,0xc0,0xd0,0x03,
	0x40,0x0f,0x13,0xde,0x13,0xc2,0xc4,0x8f,
	0xb4,0xbe,0xb3,0xff,0x72,0x8f,0xb3,0xfe,
	0x72,0xcf,0x10,0x20,0xe8,0x4f,0x10,0x21,
	0xe8,0x55,0x10,0x22,0xe8,0x5b,0x10,0x23,
	0xe8,0x63,0xf0,0xaa,0x10,0xc8,0x02,0xc3,
	0xf0,0x83,0xb6,0x41,0xe8,0x68,0xf0,0xaa,
	0x02,0xc3,0xf0,0x83,0xb6,0x41,0xe8,0x68,
	0xb0,0xff,0xf0,0xaa,0x10,0xc8,0x02,0x83,
	0xf0,0x83,0xb6,0x41,0xe8,0x68,0x10,0xd8,
	0xb0,0xff,0xf0,0xaa,0x02,0x83,0xf0,0x83,
	0xb6,0x41,0xb0,0xff,0x01,0x46,0x00,0x06,
	0xa2,0xbc,0xa2,0xfd,0x80,0x3f,0x62,0x92,
	0x00,0x06,0x00,0xc6,0xb4,0xbc,0xb3,0xfe,
	0x72,0x8f,0xb3,0xfe,0x72,0xcf,0x16,0x60,
	0xe8,0x78,0xe0,0x4f,0xb4,0xff,0xb1,0x81,
	0xe8,0x7c,0xe0,0x20,0x00,0xad,0xd0,0x68,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x07,0xc5,0xc1,0x17,0x21,0x0c,0xc3,0x44,
	0x33,0x47,0xe4,0x89,0x31,0x07,0x11,0x02,
	0x01,0xa3,0x21,0x3c,0x71,0x04,0xc3,0x57,
	0x13,0x42,0x01,0xa3,0x23,0x7c,0x73,0x4d,
	0x1a,0x20,0xe8,0x96,0x21,0x0d,0xe0,0x98,
	0xc0,0x0d,0x01,0x00,0x0f,0xef,0xd3,0x7f,
	0x41,0x0d,0xc3,0x57,0x13,0x42,0x01,0xa3,
	0x23,0x7c,0x01,0xa7,0xda,0x58,0x3a,0x4d,
	0xe4,0xa4,0x61,0x0d,0xb5,0xff,0xc1,0x17,
	0x31,0x07,0xe4,0xa9,0xd5,0xc0,0x07,0xc5,
	0xc1,0x17,0x11,0x02,0x01,0xa3,0x21,0x3c,
	0x70,0xc4,0xd0,0x00,0x30,0x1e,0x10,0xc0,
	0x00,0x23,0xd1,0x3f,0x40,0xc4,0x07,0xc5,
	0xb1,0x7f,0x00,0x29,0x73,0x74,0x33,0x45,
	0xec,0xbd,0x00,0x29,0x71,0x70,0xb1,0x7f,
	0x07,0xc5,0xb1,0x47,0x00,0x29,0x73,0x70,
	0x33,0x45,0xfc,0xc7,0x00,0x29,0x71,0x74,
	0xb1,0x44,0xb1,0x7f,0x07,0xc5,0xc6,0x1f,
	0x72,0x05,0xb1,0x7e,0x72,0x45,0xf0,0xb6,
	0xb1,0x41,0x05,0x62,0x61,0x7c,0xb1,0x7f,
	0xc1,0x13,0x11,0x01,0x11,0x02,0x01,0xa0,
	0x21,0x1c,0x70,0x84,0x02,0x42,0xc1,0x13,
	0x11,0x01,0xb1,0x3f,0x11,0x02,0x01,0xa0,
	0x21,0x1c,0x70,0x44,0x02,0x01,0xc7,0xd8,
	0xc0,0x00,0x07,0xc5,0x01,0xa3,0xd1,0x3c,
	0x01,0xa0,0xd3,0x5c,0x70,0x0d,0x60,0x04,
	0xb1,0x3c,0xb3,0x7c,0x01,0xa7,0xd0,0x18,
	0x30,0x04,0xf8,0xe8,0x07,0xc5,0xc3,0xd4,
	0x23,0xdb,0x23,0xc9,0xc1,0x0f,0x31,0x1c,
	0xe4,0xf8,0x33,0xdd,0x07,0xc5,0xc6,0x1f,
	0x05,0x63,0x74,0x04,0xb1,0x7f,0x70,0x05,
	0xc4,0x40,0xb1,0x7e,0x71,0x05,0xf0,0xbf,
	0x10,0x18,0x11,0x08,0x51,0x00,0x31,0x10,
	0xe9,0x0e,0x05,0x62,0x70,0x3c,0xb1,0x41,
	0x30,0x05,0xe8,0x7c,0xb1,0x7f,0xe0,0xfd,
	0xb1,0x7e,0x71,0x05,0x0f,0xeb,0xd0,0x2d,
	0xb1,0x42,0x31,0x00,0xf8,0xfd,0xb1,0x7e,
	0xc1,0x91,0x00,0x23,0xd0,0x3f,0x41,0x80,
	0xf0,0xb6,0xb1,0x7e,0xf0,0xb6,0xc7,0xd8,
	0xc0,0x00,0x07,0xc5,0x05,0x6a,0x70,0x38,
	0x10,0x21,0xf9,0x2d,0x00,0xad,0xdc,0xf0,
	0x00,0x60,0xdc,0x80,0x00,0x20,0xd0,0x12,
	0x00,0xa7,0xd0,0x48,0x00,0x05,0x07,0xc5,
	0x81,0x22,0x96,0xe3,0x16,0xde,0x16,0xc4,
	0x80,0x22,0x97,0x23,0x17,0x1e,0x17,0x02,
	0xc7,0x5c,0x37,0x5b,0x07,0xc5,0x00,0x68,
	0xd1,0x00,0x93,0x61,0x43,0x44,0xf9,0x3b,
	0x83,0x22,0x91,0x23,0x11,0x1e,0x11,0x02,
	0x81,0x22,0x93,0x63,0x13,0x5e,0x13,0x44,
	0x31,0x0d,0x86,0x45,0xd4,0x3f,0x93,0x46,
	0x13,0x55,0x43,0x50,0xb3,0x7e,0x13,0x42,
	0x31,0x0d,0x11,0x03,0xd3,0x5f,0x94,0x0d,
	0x44,0x0d,0x21,0x10,0xc5,0x44,0x35,0x54,
	0xf5,0x62,0x81,0x22,0x95,0x23,0x15,0x1e,
	0x15,0x04,0x80,0x22,0x94,0x23,0x14,0x1e,
	0x14,0x02,0x34,0x14,0x14,0x03,0x25,0x50,
	0xc5,0x04,0x15,0x20,0xf5,0x66,0x25,0x10,
	0x07,0xc5,0x00,0x00,0x04,0xeb,0x70,0x68,
	0x10,0x60,0xf8,0x6d,0xd1,0x40,0x05,0x26,
	0x70,0x18,0x10,0x20,0xf8,0x0b,0x04,0xe8,
	0x71,0x70,0x05,0xa2,0x76,0x44,0x00,0x2d,
	0x70,0xa0,0x04,0xe8,0x70,0x2c,0x10,0x20,
	0xf8,0x21,0x16,0x63,0xe8,0x21,0x04,0xe8,
	0x71,0x20,0x30,0x84,0xe8,0x6d,0x01,0xfe,
	0xd9,0x00,0xc0,0x40,0x01,0x74,0xd6,0x00,
	0xc0,0x80,0xc0,0xc0,0xe0,0x3a,0x04,0xe8,
	0x71,0x24,0x30,0x84,0xf8,0x2f,0x11,0x60,
	0xe8,0x6d,0x00,0x2e,0x70,0x80,0x00,0x2d,
	0x70,0x40,0x30,0x81,0x01,0x68,0x30,0x80,
	0xe8,0x6d,0x02,0x77,0xde,0x00,0xc0,0x40,
	0x01,0xb5,0xd4,0x00,0xc0,0x80,0xc0,0xc0,
	0x11,0x61,0xe8,0x3a,0x05,0x26,0x70,0xd4,
	0x01,0x46,0x8a,0x10,0x88,0x15,0x00,0xc6,
	0xd0,0x10,0x07,0xa4,0x60,0x28,0xd0,0x00,
	0x04,0xed,0x60,0x28,0xd0,0x01,0x07,0x28,
	0x60,0x04,0x00,0x2d,0x61,0x20,0x04,0xeb,
	0x61,0x20,0x31,0x01,0x00,0x2d,0x61,0x00,
	0x16,0x63,0xe8,0x5a,0x04,0xe8,0x70,0x2c,
	0x10,0x20,0xf8,0x5a,0x31,0x01,0x00,0x2e,
	0x61,0x00,0x05,0x26,0x61,0x04,0xe0,0x67,
	0x04,0xe8,0x70,0x68,0x00,0x2e,0x60,0x40,
	0x11,0x61,0xf8,0x65,0x01,0x68,0xd0,0x40,
	0x20,0x44,0x00,0x2e,0x60,0x40,0x05,0x26,
	0x60,0x44,0x07,0x27,0x60,0xac,0x07,0x27,
	0x60,0xb0,0x07,0x27,0x60,0xf4,0x05,0xac,
	0x7a,0x04,0x05,0xac,0x7a,0x58,0x05,0x2f,
	0x77,0x7c,0x05,0x6c,0x74,0x10,0x05,0x65,
	0x74,0x40,0x05,0x65,0x74,0x84,0x04,0xeb,
	0x70,0x28,0x10,0x20,0xf9,0xe0,0x04,0xef,
	0x70,0x20,0xd0,0x41,0x40,0x01,0x10,0x20,
	0xe8,0x87,0x04,0xef,0x70,0x24,0x10,0x22,
	0xe8,0x8e,0x04,0xeb,0x70,0x10,0x10,0x22,
	0xe8,0x8e,0x10,0x23,0xe8,0x8e,0xe0,0xb6,
	0x05,0x6c,0x6a,0x08,0x05,0x6c,0x6a,0x0c,
	0x05,0x2e,0xd0,0x04,0x05,0x2e,0xd0,0x8c,
	0x70,0x40,0x60,0x42,0xb0,0x3c,0xb0,0xbc,
	0x70,0x40,0x60,0x42,0x05,0x6d,0x70,0x54,
	0x05,0x6d,0x60,0x58,0x05,0x61,0x70,0x40,
	0x05,0x61,0x60,0x44,0x05,0x62,0x70,0x64,
	0x05,0x62,0x60,0x68,0x00,0x2d,0x70,0x40,
	0x00,0x2d,0x70,0xa0,0x05,0xe6,0x78,0x3c,
	0x0c,0x11,0xe8,0xb3,0xc0,0x02,0xc0,0x81,
	0xc0,0x40,0x05,0x26,0x60,0x88,0xe2,0x78,
	0x57,0x5d,0xe9,0x64,0x1a,0x23,0xf8,0xe6,
	0x05,0x6c,0x6a,0x08,0x03,0x95,0xf8,0xc6,
	0x05,0x64,0x64,0x78,0x05,0x64,0xd0,0xb4,
	0x70,0x42,0x05,0x64,0x60,0x70,0x64,0x82,
	0x07,0x26,0x70,0x50,0x10,0x61,0xe8,0xd4,
	0x1a,0x63,0xf8,0xd4,0x05,0x27,0x70,0x70,
	0x10,0x63,0xf8,0xd4,0xd0,0x41,0x07,0xa4,
	0x60,0x4c,0x07,0x1f,0x05,0x26,0x73,0x04,
	0x05,0x26,0x63,0x08,0xc3,0x8c,0x07,0x26,
	0x70,0x58,0x10,0x60,0xf8,0xe1,0x05,0x6d,
	0x70,0x6c,0x10,0x60,0xe8,0xe3,0xd1,0x81,
	0xe0,0xe4,0xd1,0x80,0xf3,0x07,0xe1,0x64,
	0x1a,0x63,0xf8,0xf0,0x05,0x27,0x70,0x70,
	0x10,0x63,0xe8,0xf0,0xd0,0x41,0x07,0xa4,
	0x60,0x4c,0x07,0x1f,0x05,0x6c,0xd0,0x0c,
	0x70,0x40,0x05,0x6c,0x60,0x48,0x6a,0x00,
	0x03,0x95,0xf9,0x06,0x05,0x64,0x70,0x70,
	0x05,0x64,0x70,0xa8,0x05,0x64,0x70,0xdc,
	0x10,0xe0,0xe9,0x06,0x0f,0xef,0xd0,0xff,
	0x30,0xc1,0xe9,0x06,0x30,0x81,0xf9,0x0b,
	0x05,0x26,0xd0,0x38,0x78,0x00,0x08,0x15,
	0x68,0x00,0x03,0x95,0xf9,0x1d,0x05,0x64,
	0xd0,0xb4,0x70,0xc2,0x05,0x64,0x60,0xf0,
	0x05,0x64,0xd0,0x20,0x70,0x40,0x60,0x42,
	0x64,0x80,0x05,0x64,0xd0,0x24,0x70,0x40,
	0x05,0x64,0x60,0x78,0x64,0x40,0x05,0x6d,
	0x70,0x6c,0x10,0x60,0xe9,0x23,0xd1,0x81,
	0xe1,0x24,0xd1,0x80,0xf3,0x07,0x05,0x25,
	0x72,0xb4,0x05,0x25,0x72,0xf8,0xc3,0x4a,
	0x04,0xef,0x70,0x24,0x10,0x22,0xe9,0x56,
	0x05,0x26,0x77,0xa0,0x17,0xa2,0xe9,0x56,
	0x02,0x20,0xd0,0x01,0xa0,0x38,0x00,0x2d,
	0x70,0x40,0x00,0x2d,0x70,0xa0,0x05,0xe6,
	0x78,0x3c,0x0c,0x11,0xe9,0x4b,0x0c,0x12,
	0xe9,0x4e,0x00,0x2e,0x70,0x00,0x0c,0x10,
	0xf9,0x4b,0xc3,0x80,0xc3,0x42,0xc2,0x8d,
	0xc2,0xc1,0x02,0x20,0xd0,0x00,0xa0,0x38,
	0xe1,0x57,0xc3,0x81,0xc3,0x42,0xe1,0x50,
	0xc3,0x82,0xc3,0x41,0x02,0x20,0xd0,0x00,
	0xa0,0x38,0xc2,0xce,0xc2,0x8d,0xe1,0x57,
	0xc3,0x8b,0x05,0x26,0x63,0x48,0x05,0x60,
	0x70,0x5c,0x05,0x60,0x60,0x60,0x05,0x25,
	0x62,0xb8,0x05,0x25,0x62,0xf4,0xc0,0x0a,
	0xc2,0x8b,0xc2,0xc0,0x00,0x2d,0xd0,0x00,
	0x70,0x40,0x30,0x4d,0xe9,0x70,0x00,0x2d,
	0xd0,0x20,0x70,0x40,0x30,0x4d,0xe9,0x70,
	0x00,0x2e,0xd0,0x00,0xb0,0x3a,0x05,0x2d,
	0x70,0xb8,0xc0,0xc2,0x10,0x9e,0xd0,0x43,
	0x40,0x43,0x10,0x4e,0x05,0x2d,0x70,0xf4,
	0x10,0xdf,0x50,0x43,0x01,0x46,0x00,0x06,
	0xa0,0x7c,0xa0,0xbd,0x80,0x3f,0x60,0x00,
	0x00,0x06,0x00,0xc6,0x05,0x26,0x73,0xc8,
	0x05,0x25,0x72,0xb4,0x05,0x25,0x72,0xf8,
	0x1a,0x22,0xf9,0xa1,0x05,0x2f,0x70,0x7c,
	0x50,0x41,0xe9,0x95,0x05,0x26,0x62,0x80,
	0x05,0x25,0x62,0xbc,0xe1,0xa5,0x1a,0x61,
	0xe9,0x9c,0x05,0x25,0x63,0xfc,0x05,0x26,
	0x62,0x80,0xe1,0xa5,0x05,0x25,0x62,0xbc,
	0x05,0x26,0x63,0xc0,0xe1,0xa5,0x05,0x25,
	0x62,0xbc,0x05,0x26,0x62,0xc0,0x17,0x60,
	0xe9,0xdb,0x02,0x20,0xd0,0x01,0xa0,0x38,
	0x05,0x61,0xd0,0x1c,0x70,0x40,0x10,0x60,
	0xe9,0xb2,0xd0,0x40,0x60,0x40,0xe1,0xca,
	0x00,0x2b,0x70,0x64,0x10,0x60,0xe9,0xca,
	0x05,0xe6,0x63,0xb8,0x05,0x62,0x70,0x64,
	0x05,0x62,0x60,0x68,0x00,0x2d,0xd0,0x00,
	0x70,0x40,0x30,0x4e,0xe9,0xc8,0x00,0x2d,
	0xd0,0x20,0x70,0x40,0x30,0x4e,0xe9,0xc8,
	0x00,0x2e,0xd0,0x00,0x00,0x2b,0x60,0x14,
	0x05,0x60,0x77,0x34,0x05,0xe6,0x67,0x34,
	0x05,0x2e,0xd0,0x04,0x05,0x2e,0xd0,0x8c,
	0x70,0x40,0x60,0x42,0xb0,0x3c,0xb0,0xbc,
	0x70,0x40,0x60,0x42,0x02,0x20,0xd0,0x00,
	0xa0,0x38,0x05,0xac,0x70,0x44,0x05,0x27,
	0x60,0x70,0xe2,0x0e,0x05,0x6d,0x70,0x54,
	0x05,0x6d,0x60,0x58,0x05,0x61,0x70,0x40,
	0x05,0x61,0x60,0x44,0x04,0xeb,0x73,0xa0,
	0x05,0xe6,0x63,0xb8,0x04,0xeb,0x73,0x64,
	0x05,0x26,0x63,0x48,0x00,0x2d,0xd0,0x00,
	0x70,0x40,0x30,0x4d,0xe9,0xfc,0x00,0x2d,
	0xd0,0x20,0x70,0x40,0x30,0x4d,0xe9,0xfc,
	0x00,0x2e,0xd0,0x00,0x00,0x2b,0x60,0x14,
	0x04,0xec,0x70,0x38,0x10,0x21,0xfa,0x0e,
	0x00,0x2d,0xd0,0x18,0x78,0x00,0x04,0x10,
	0x04,0x11,0x68,0x00,0x00,0x2d,0xd0,0x38,
	0x78,0x00,0x04,0x10,0x04,0x11,0x68,0x00,
	0x00,0x2d,0xd0,0x00,0x70,0x40,0x30,0x4f,
	0xea,0x1a,0x00,0x2d,0xd0,0x20,0x70,0x40,
	0x30,0x4f,0xea,0x1a,0x00,0x2e,0xd0,0x00,
	0xc0,0x80,0x00,0x20,0xd0,0x58,0x20,0x01,
	0x78,0x00,0xd0,0xc3,0x48,0x03,0xc0,0xe9,
	0xd1,0x03,0x40,0xc4,0x10,0xc2,0x58,0x03,
	0x05,0xac,0x70,0xdc,0xc0,0x43,0xd1,0x0a,
	0x40,0x44,0x10,0x43,0xd1,0x01,0x10,0xd7,
	0x40,0xc4,0x10,0xc5,0x50,0xc1,0x58,0x03,
	0x05,0xa2,0x70,0xe0,0x10,0xe0,0xea,0x37,
	0x04,0x17,0x05,0xab,0x70,0xf8,0x10,0xc8,
	0x10,0xc8,0x58,0x03,0x05,0xac,0x70,0xc4,
	0x10,0xc8,0x58,0x03,0x68,0x00,0xc0,0x02,
	0x00,0x20,0x20,0x0c,0x05,0x2a,0x70,0xac,
	0x60,0x80,0xb0,0x3a,0x00,0x27,0x70,0x58,
	0x10,0x60,0xea,0x5f,0x00,0x27,0x70,0x5c,
	0x00,0x28,0xd0,0x80,0x40,0x42,0xea,0x55,
	0x05,0x2a,0xd0,0x7c,0xf2,0x66,0x00,0x27,
	0x70,0x5c,0x00,0x60,0xd0,0x80,0x40,0x42,
	0xea,0x5f,0xb0,0x3c,0x05,0x2b,0xd0,0x4c,
	0xf2,0x66,0x04,0xed,0xd0,0x20,0xb0,0x3e,
	0x05,0x2b,0xd0,0x5c,0xf2,0x66,0xe2,0x78,
	0x70,0x81,0x10,0x88,0xb0,0x7c,0x70,0xc1,
	0x50,0x83,0xb0,0x7c,0x70,0xc1,0x10,0xc8,
	0xb0,0x7c,0x70,0x41,0x50,0xc1,0x01,0x46,
	0xa0,0xfc,0xa0,0xbd,0x80,0x3f,0x60,0xc0,
	0x00,0xc6,0x07,0xc5,0x05,0x61,0xd0,0x0c,
	0xd0,0x41,0x05,0xac,0x70,0x84,0x10,0xa3,
	0xfa,0x80,0xd0,0x43,0x60,0x40,0xd0,0x41,
	0x05,0x27,0x60,0x64,0xd0,0x41,0x04,0xef,
	0x60,0x54,0x05,0x26,0x77,0xa0,0x17,0xa2,
	0xfa,0x94,0x0b,0x56,0x00,0x2b,0x70,0x64,
	0x10,0x60,0xea,0x93,0xd0,0x01,0x04,0xee,
	0x60,0x2c,0xe2,0x95,0x07,0x56,0x00,0x2b,
	0xd0,0x24,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0xd0,0x40,0x05,0x62,0x60,0x48,0x05,0x61,
	0xd0,0x30,0x70,0x40,0xb0,0x41,0xee,0xa3,
	0xd0,0x40,0x60,0x40,0x00,0x22,0x78,0x2c,
	0x00,0x14,0xfa,0xb9,0x03,0x95,0xfa,0xd8,
	0x05,0x64,0x70,0x70,0x0f,0xef,0xd0,0xbf,
	0x30,0x81,0xea,0xb9,0x05,0x64,0x70,0xb4,
	0x30,0x42,0xea,0xb9,0x05,0xe6,0xd0,0x14,
	0x78,0x00,0x08,0x13,0x68,0x00,0x05,0x64,
	0x70,0x78,0x10,0x60,0xea,0xd8,0xb0,0x6c,
	0x01,0x46,0x70,0x81,0x00,0x62,0x60,0xa6,
	0x00,0x06,0x00,0xc6,0x00,0x62,0x70,0x2c,
	0xb0,0x7c,0x70,0x81,0x30,0x02,0xea,0xd8,
	0x01,0x46,0x06,0xe5,0x78,0x2c,0x04,0x11,
	0x06,0xe5,0x68,0x2c,0x06,0xe5,0x78,0x1c,
	0x04,0x17,0x06,0xe5,0x68,0x1c,0x00,0xc6,
	0x00,0x62,0x60,0xac,0x00,0xac,0xd6,0xb8,
	0x05,0x27,0x66,0xac,0x05,0xe7,0x70,0x08,
	0x10,0x20,0xea,0xe8,0x05,0xe7,0x70,0x10,
	0x05,0xa1,0x60,0x38,0x05,0xe7,0x70,0x0c,
	0x05,0xa1,0x60,0x3c,0x00,0xa8,0xdc,0x70,
	0x00,0x60,0xdc,0x00,0x05,0x6a,0x70,0x38,
	0x10,0x20,0xea,0xf9,0x00,0xad,0xdc,0xf8,
	0x00,0x60,0xdc,0x80,0x00,0x20,0xd0,0x12,
	0x00,0xa7,0xd0,0x48,0x00,0x05,0x1a,0x62,
	0xfb,0x01,0x00,0xa8,0xd0,0x70,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xad,
	0xd0,0x78,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x05,0x62,0x70,0x70,0x10,0x60,
	0xfb,0x25,0x11,0xa0,0xfb,0x12,0x05,0x6d,
	0x70,0x94,0x05,0x61,0x70,0xc0,0xe3,0x1f,
	0x05,0xa2,0x70,0x04,0x10,0x23,0xfb,0x1b,
	0x05,0x6d,0x70,0xb4,0x05,0x6d,0x70,0xfc,
	0xe3,0x1f,0x05,0x6d,0x70,0xb0,0x05,0x6d,
	0x70,0xf8,0x05,0x6d,0x60,0x98,0x05,0x61,
	0x60,0xc4,0x10,0xa0,0xfb,0x28,0xd0,0x40,
	0x07,0xa4,0x60,0x44,0x07,0xc5,0x00,0x00,
	0x05,0x27,0xd0,0x24,0xd0,0x41,0x60,0x40,
	0x00,0xac,0xd6,0xb8,0x05,0x27,0xd0,0x2c,
	0x66,0x80,0x05,0x6a,0xd0,0x38,0x70,0x00,
	0x10,0x20,0xeb,0x57,0x00,0xa8,0xdc,0xe8,
	0x00,0x60,0xdc,0x80,0x00,0x20,0xd0,0x12,
	0x00,0xa7,0xd0,0x48,0x00,0x05,0x00,0xa8,
	0xd0,0x68,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x05,0x27,0xd0,0x2c,0x66,0x80,
	0x00,0x06,0x00,0xa7,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xc5,0x00,0x05,0x05,0x27,
	0xd0,0x2c,0x66,0x80,0x00,0x06,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x00,0x00,0xad,0xd6,0xa8,
	0x00,0xa4,0xd8,0x30,0xa8,0x36,0x80,0x3f,
	0x98,0x34,0x00,0x1e,0xe8,0x2a,0x00,0x14,
	0xe8,0x2a,0x80,0x62,0x80,0x3f,0x90,0xa3,
	0x80,0x3f,0x00,0x28,0xd0,0x08,0x70,0x40,
	0x30,0x81,0xec,0x2a,0x01,0x46,0x06,0xe3,
	0xd0,0x10,0x70,0x40,0x06,0xe3,0xd0,0x1c,
	0x60,0x40,0x08,0x14,0x02,0x46,0xd6,0xc1,
	0x02,0x06,0x00,0x24,0xd0,0xb0,0xa0,0xb6,
	0x80,0x3f,0xa8,0x34,0x06,0xe5,0xd0,0x1c,
	0x78,0x40,0x04,0x9a,0x68,0x40,0x00,0xc6,
	0x05,0x6a,0xd0,0x0c,0x70,0x00,0x05,0x6a,
	0xd0,0x48,0x70,0x41,0x30,0x01,0xef,0x5d,
	0x00,0xaf,0xd0,0x48,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0xaf,0xd6,0x88,
	0x01,0x30,0xd0,0x00,0xcc,0x40,0x05,0x65,
	0xd0,0x44,0x71,0x41,0x05,0x64,0xd0,0x2c,
	0x71,0x80,0x11,0xa0,0xe8,0x14,0x11,0x60,
	0xe8,0x14,0xc0,0x46,0x30,0x45,0xe8,0x14,
	0xf0,0x1d,0xf0,0x6a,0x05,0x64,0xd0,0x2c,
	0x61,0x40,0x00,0xad,0xd0,0x40,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x22,
	0x78,0x2c,0x00,0x14,0xf8,0x69,0x00,0xe7,
	0xd0,0x08,0x70,0x40,0x10,0x60,0xe8,0x69,
	0x05,0xe1,0xd0,0x1c,0x70,0x40,0x10,0x60,
	0xf8,0x69,0x05,0x28,0xd0,0x0c,0x70,0x40,
	0x10,0x60,0xe8,0x69,0xb1,0xbc,0x01,0x46,
	0x72,0x06,0x00,0x06,0x91,0xfd,0x80,0x3f,
	0x00,0xc6,0x11,0xc1,0x08,0x20,0xd0,0x00,
	0xc0,0x88,0x40,0x80,0x10,0x91,0x51,0xc2,
	0x07,0xef,0xd0,0x3f,0x42,0x00,0x01,0x46,
	0x92,0x83,0x80,0x3f,0x92,0x42,0x80,0x3f,
	0x00,0xc6,0x00,0xff,0xdf,0xff,0x42,0x40,
	0x07,0xef,0xd0,0x3f,0x42,0x80,0xd0,0x80,
	0x01,0x26,0xd0,0x54,0x07,0xef,0xd7,0x3f,
	0x42,0x1c,0x40,0x5c,0x32,0x01,0x08,0x20,
	0xd6,0xc0,0x46,0xc8,0x42,0x1c,0x16,0xd1,
	0x31,0xdb,0x31,0xc2,0x07,0xef,0xd7,0x3f,
	0x42,0x9c,0x42,0x1c,0x32,0x88,0x08,0x20,
	0xd6,0xc0,0x46,0xca,0x42,0x9c,0x16,0xd1,
	0x32,0x5b,0x32,0x47,0xe7,0x5d,0x07,0xc5,
	0xd0,0x41,0x05,0x27,0xd0,0x38,0x60,0x40,
	0x07,0xc5,0x00,0x00,0x01,0x46,0x08,0x20,
	0xd0,0x01,0x84,0x22,0x80,0x3f,0xa0,0x23,
	0x80,0x3f,0x00,0xc6,0x05,0x65,0x70,0x28,
	0xb0,0x3f,0x05,0x65,0x60,0x28,0x05,0x67,
	0x70,0x3c,0x05,0x67,0x60,0x38,0xd0,0x02,
	0x05,0x6c,0x60,0x1c,0x05,0x67,0x70,0x2c,
	0xd0,0x40,0x00,0x23,0xd0,0xbc,0x60,0x40,
	0xb0,0x3c,0xb0,0x81,0xf8,0x19,0xd0,0x00,
	0x05,0x65,0x60,0x18,0x05,0x65,0x71,0x4c,
	0x05,0x67,0x71,0xec,0x61,0x47,0x05,0x65,
	0x61,0xc8,0xd0,0x01,0x05,0x68,0x60,0x3c,
	0xf0,0x48,0x01,0x46,0x07,0x20,0xd0,0x00,
	0x84,0x22,0x80,0x3f,0xa0,0x23,0x80,0x3f,
	0x80,0x3f,0x00,0xc6,0x0c,0x09,0x0a,0xcd,
	0x1a,0xe0,0xf8,0x34,0x00,0xaf,0xd0,0x18,
	0x05,0x27,0x60,0x2c,0xd0,0x01,0x05,0x68,
	0x60,0x1c,0xd0,0x00,0x05,0x68,0x60,0x18,
	0x00,0xa8,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc2,0x00,0x05,0x06,0xa0,0xd0,0x40,
	0x84,0x22,0x80,0x3f,0xa0,0x63,0x80,0x3f,
	0x07,0xe8,0xd0,0x40,0x01,0x86,0x90,0xa1,
	0x80,0x3f,0x40,0x81,0xf8,0x50,0x03,0x20,
	0xd0,0x40,0x10,0x4a,0xa0,0x4a,0x80,0x3f,
	0x84,0x05,0x80,0x3f,0xa0,0x46,0x80,0x3f,
	0x01,0x46,0xc0,0x45,0x10,0x5b,0x10,0x42,
	0x00,0x20,0x30,0x60,0xec,0x6d,0xe8,0x6d,
	0x80,0x22,0x80,0x3f,0x90,0xe3,0x10,0xde,
	0x10,0xc2,0x20,0x43,0xe0,0x72,0x81,0x22,
	0x90,0xe3,0x10,0xde,0x10,0xc4,0x20,0x43,
	0x83,0x22,0x80,0x3f,0xa0,0x63,0x80,0x3f,
	0x80,0x3f,0x00,0xc6,0x86,0x45,0x80,0x3f,
	0x80,0x06,0x80,0x3f,0x80,0x17,0x80,0x3f,
	0x80,0x0d,0x80,0x0a,0x80,0x3f,0x84,0x05,
	0x80,0x3f,0x80,0x06,0x80,0x3f,0x80,0xe4,
	0x80,0x3f,0x80,0x64,0x80,0x3f,0x01,0x46,
	0x81,0x22,0x90,0xa3,0x10,0x9e,0x10,0x84,
	0x80,0x22,0x80,0x3f,0x90,0xe3,0x10,0xde,
	0x10,0xc2,0x30,0xc2,0x80,0xe2,0x80,0x3f,
	0x90,0xa3,0x10,0x9e,0x10,0x82,0x30,0x81,
	0xf4,0x9c,0x20,0x83,0x00,0x21,0xd0,0x40,
	0x30,0x81,0x80,0x62,0x80,0x3f,0xa0,0xa3,
	0x83,0x22,0x80,0x3f,0x90,0x63,0x10,0x5e,
	0x10,0x42,0x80,0xe2,0x80,0x3f,0x90,0xa3,
	0x10,0x9e,0x10,0x82,0x30,0x42,0xf4,0xaf,
	0x20,0x43,0x01,0x20,0xd0,0x80,0x30,0x42,
	0x80,0xa2,0x80,0x3f,0xa0,0x63,0x00,0xc6,
	0x04,0xa0,0xd0,0xc1,0x84,0x22,0x80,0x3f,
	0xa0,0xe3,0x80,0x3f,0x07,0xc9,0x00,0x8d,
	0x07,0xc9,0x00,0x8d,0x07,0xc9,0x00,0x8d,
	0x07,0xc9,0x00,0x8d,0xd0,0x9f,0x40,0x85,
	0x10,0xa0,0xe8,0xce,0x10,0x9d,0x01,0x86,
	0x0a,0x09,0x00,0xcd,0xb0,0x81,0xec,0xc9,
	0x07,0xc5,0x00,0x00,0xf1,0xb2,0x05,0x68,
	0x70,0x18,0x10,0x20,0xe8,0x0e,0x05,0x68,
	0x78,0x38,0x0c,0x1f,0xf8,0x90,0x05,0x65,
	0x71,0x90,0x05,0x65,0x71,0x48,0x61,0x85,
	0x05,0x68,0x70,0x3c,0x10,0x20,0xe8,0x17,
	0x05,0x68,0x63,0xf8,0xd0,0x00,0x05,0x68,
	0x60,0x3c,0x05,0x65,0x71,0x48,0x05,0xac,
	0x74,0x58,0x14,0x62,0xe8,0x27,0xf0,0xe1,
	0x05,0x65,0x70,0x18,0xb0,0x3f,0x05,0x65,
	0x60,0x18,0x00,0x20,0xd8,0x24,0x0c,0x10,
	0xe8,0x8a,0x0c,0x09,0x01,0xcd,0x11,0xe0,
	0xf8,0x45,0xf0,0xfd,0x05,0x65,0x70,0x0c,
	0x30,0x06,0xf8,0x35,0x05,0x68,0x70,0x18,
	0x10,0x20,0xe8,0x52,0xe0,0x90,0x61,0x85,
	0x00,0xaf,0xd0,0x18,0x05,0x27,0x60,0x2c,
	0x05,0x65,0x61,0x48,0xd0,0x00,0x05,0x68,
	0x60,0x18,0x00,0xa8,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc2,0x00,0x05,0x80,0x62,
	0x80,0x3f,0x90,0x63,0x10,0x60,0xfc,0x52,
	0x00,0x22,0xd8,0x33,0x0c,0x17,0xe8,0x6c,
	0xb8,0x3c,0x0c,0x17,0xe8,0x8a,0xe0,0x27,
	0x05,0x69,0x70,0x0c,0xb0,0x3f,0x05,0x69,
	0x60,0x0c,0xd0,0x02,0x05,0x65,0x60,0x14,
	0xb1,0x5c,0xb1,0x5c,0x05,0x68,0x61,0x68,
	0x05,0x65,0x70,0x18,0xb0,0x01,0x05,0x65,
	0x60,0x18,0xd0,0x00,0x05,0x68,0x60,0x00,
	0x05,0x68,0x60,0x04,0x71,0x85,0x05,0x65,
	0x61,0x90,0xe0,0x90,0xf0,0xfd,0x00,0x21,
	0x31,0x80,0xc0,0x46,0xf1,0x1b,0x05,0x65,
	0x61,0x90,0xb1,0x5c,0x05,0x68,0x61,0x68,
	0x0c,0x09,0x01,0xcd,0x11,0xe0,0xf8,0x76,
	0x00,0xaf,0xd0,0x18,0x05,0x27,0x60,0x2c,
	0xd0,0x01,0x05,0x68,0x60,0x18,0xb1,0x64,
	0x05,0x65,0x61,0x48,0x00,0xa8,0xd0,0x50,
	0xd0,0x12,0x00,0x60,0xd7,0xc2,0x00,0x05,
	0xf0,0xfd,0x05,0x65,0x61,0x90,0xb1,0x5c,
	0x05,0x68,0x61,0x68,0xd0,0x00,0x05,0x27,
	0x60,0x24,0x05,0x65,0x60,0x1c,0x05,0x68,
	0x60,0x18,0x05,0x65,0x70,0x2c,0x10,0x20,
	0xe8,0xd0,0xd0,0x00,0x05,0x65,0x60,0x2c,
	0x05,0x65,0x60,0x24,0x05,0x25,0x60,0x38,
	0x05,0x25,0x60,0x34,0x05,0x69,0x60,0x10,
	0x05,0x68,0x60,0x14,0x05,0x69,0x60,0x08,
	0x05,0x69,0x60,0x04,0x05,0x68,0x60,0x00,
	0x05,0x68,0x60,0x04,0x02,0x20,0xd0,0x01,
	0xa0,0x38,0x05,0xe6,0x78,0x3c,0x18,0x20,
	0xe8,0xc0,0x05,0x67,0xd0,0x58,0x70,0x01,
	0x0c,0x10,0xe8,0xbe,0xb0,0x7c,0xe0,0xb9,
	0xd0,0x00,0x60,0x01,0x05,0xe6,0x78,0x38,
	0x18,0x20,0xe8,0xcd,0x05,0x67,0xd0,0x58,
	0x70,0x01,0x0c,0x10,0xe8,0xcb,0xb0,0x7c,
	0xe0,0xc6,0xd0,0x00,0x60,0x01,0x02,0x20,
	0xd0,0x00,0xa0,0x38,0x05,0x68,0x70,0x38,
	0x05,0x68,0x70,0x74,0x10,0x20,0xe8,0xd8,
	0x05,0x68,0x60,0x34,0xd0,0x01,0x05,0x69,
	0x60,0x00,0x00,0xaf,0xd0,0x68,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x05,0xab,
	0x70,0x78,0xb1,0x7c,0x60,0x45,0xb1,0x7c,
	0x05,0xac,0x70,0x44,0x05,0x68,0x70,0x1c,
	0x10,0x20,0xf8,0xef,0x10,0x61,0xf8,0xef,
	0xd0,0x42,0x60,0x45,0xd0,0x00,0x05,0x68,
	0x60,0x1c,0xb1,0x7c,0xb1,0x7c,0xb1,0x7c,
	0x64,0x45,0xb1,0x7c,0x05,0xac,0x70,0x00,
	0x60,0x05,0xb1,0x7c,0x07,0xc5,0x00,0x68,
	0xd0,0x40,0x90,0xa1,0x40,0x81,0xf8,0xff,
	0x83,0x22,0x90,0x63,0x10,0x5e,0x10,0x42,
	0x81,0x22,0x90,0xa3,0x10,0x9e,0x10,0x84,
	0x30,0x42,0x86,0x45,0xd0,0xff,0x90,0x86,
	0x10,0x95,0x40,0x83,0xb0,0xbe,0x10,0x82,
	0x30,0x42,0x10,0x43,0xd0,0x9f,0x90,0xcd,
	0x40,0xc2,0x20,0x43,0xc0,0x01,0x30,0x06,
	0xf5,0x26,0x81,0x22,0x91,0xa3,0x11,0x9e,
	0x11,0x84,0x80,0x22,0x90,0xe3,0x10,0xde,
	0x10,0xc2,0x30,0xc6,0x10,0xc3,0x20,0x03,
	0xc1,0x81,0x11,0xa0,0xf5,0x2a,0x21,0x83,
	0x07,0xc5,0x06,0xa0,0xd0,0x40,0x84,0x22,
	0x80,0x3f,0xa0,0x63,0x80,0x3f,0x07,0xe8,
	0xd0,0x40,0x01,0x86,0x90,0xa1,0x80,0x3f,
	0x40,0x81,0xf9,0x33,0x03,0x20,0xd0,0x40,
	0x10,0x4a,0xa0,0x4a,0x80,0x3f,0x84,0x05,
	0x80,0x3f,0xa0,0x46,0x80,0x3f,0x01,0x46,
	0xc0,0x46,0x10,0x5b,0x10,0x42,0x00,0x20,
	0x30,0x60,0xed,0x50,0xe9,0x50,0x80,0x22,
	0x80,0x3f,0x90,0xe3,0x10,0xde,0x10,0xc2,
	0x20,0x43,0xe1,0x55,0x81,0x22,0x90,0xe3,
	0x10,0xde,0x10,0xc4,0x20,0x43,0x83,0x22,
	0x80,0x3f,0xa0,0x63,0x80,0x3f,0x80,0x3f,
	0x00,0xc6,0x86,0x45,0x80,0x3f,0x80,0x06,
	0x80,0x3f,0x80,0x17,0x80,0x3f,0x80,0x0d,
	0x80,0x0a,0x80,0x3f,0x84,0x05,0x80,0x3f,
	0x80,0x06,0x80,0x3f,0x80,0xe4,0x80,0x3f,
	0x80,0x64,0x80,0x3f,0x01,0x46,0x81,0x22,
	0x90,0xa3,0x10,0x9e,0x10,0x84,0x80,0x22,
	0x80,0x3f,0x90,0xe3,0x10,0xde,0x10,0xc2,
	0x30,0xc2,0x80,0xe2,0x80,0x3f,0x90,0xa3,
	0x10,0x9e,0x10,0x82,0x30,0x81,0xf5,0x7f,
	0x20,0x83,0x00,0x21,0xd0,0x40,0x30,0x81,
	0x80,0x62,0x80,0x3f,0xa0,0xa3,0x83,0x22,
	0x80,0x3f,0x90,0x63,0x10,0x5e,0x10,0x42,
	0x80,0xe2,0x80,0x3f,0x90,0xa3,0x10,0x9e,
	0x10,0x82,0x30,0x42,0xf5,0x92,0x20,0x43,
	0x01,0x20,0xd0,0x80,0x30,0x42,0x80,0xa2,
	0x80,0x3f,0xa0,0x63,0x00,0xc6,0x04,0xa0,
	0xd0,0xc1,0x84,0x22,0x80,0x3f,0xa0,0xe3,
	0x80,0x3f,0x07,0xc9,0x00,0x8d,0x07,0xc9,
	0x00,0x8d,0x07,0xc9,0x00,0x8d,0x07,0xc9,
	0x00,0x8d,0xd0,0x9f,0x40,0x86,0x10,0xa0,
	0xe9,0xb1,0x10,0x9d,0x01,0x86,0x0a,0x09,
	0x00,0xcd,0xb0,0x81,0xed,0xac,0x07,0xc5,
	0xd3,0xc0,0x05,0x64,0x70,0x50,0x10,0x60,
	0xf9,0xb8,0x00,0x0c,0xe9,0xe7,0x05,0xab,
	0x72,0x3c,0x05,0xac,0x72,0x40,0x02,0xef,
	0xd0,0x7f,0x30,0x48,0xf9,0xe7,0xc0,0x89,
	0x00,0x23,0xd0,0x7f,0x42,0x41,0x0f,0xe8,
	0xd0,0x40,0x40,0x81,0x10,0x9f,0x52,0x42,
	0x12,0x42,0x05,0x64,0x62,0x7c,0xc0,0x49,
	0xc0,0xc9,0x72,0x41,0x0f,0xef,0xd0,0x3f,
	0x42,0x40,0x00,0x24,0xd0,0x80,0x52,0x42,
	0xb0,0x7c,0x72,0x01,0x00,0xef,0xd0,0x3f,
	0x42,0x00,0x02,0x24,0xd0,0x80,0x52,0x02,
	0xb0,0x7c,0x73,0xc1,0x05,0x65,0x63,0xc0,
	0x74,0x0f,0x05,0x65,0x64,0x04,0xd0,0x40,
	0x60,0x43,0x07,0xc5,0x00,0xef,0xd3,0x7c,
	0x01,0x46,0x59,0x8d,0x39,0x8d,0x00,0x24,
	0xd3,0x54,0x59,0x8d,0x00,0xc6,0x07,0xc5,
	0x05,0x26,0x71,0x48,0xd0,0x00,0x05,0x69,
	0x60,0x00,0x00,0xaf,0xd0,0x28,0x05,0x27,
	0x60,0x2c,0x05,0x66,0x70,0x28,0x05,0xac,
	0x70,0x44,0xc0,0x80,0x30,0x01,0xe8,0x15,
	0x10,0x61,0xf8,0x14,0x10,0xa2,0xe8,0x15,
	0xe0,0x2a,0x05,0x66,0x70,0x2c,0x05,0xac,
	0x70,0x58,0xc0,0x80,0x30,0x01,0xe8,0x1d,
	0xe0,0x2a,0x05,0x66,0x70,0x24,0x05,0xab,
	0x70,0x78,0xc0,0x80,0x30,0x01,0xe8,0x30,
	0xe0,0x2a,0x00,0x31,0xde,0x81,0x10,0x02,
	0xb0,0x3f,0x03,0xcc,0x00,0xaf,0xd0,0x68,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0xa8,0xd0,0x70,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x02,0x20,0xd0,0x01,
	0xa0,0x38,0x00,0x23,0x70,0x08,0x10,0x20,
	0xe8,0x09,0x05,0xa2,0x60,0x00,0x05,0xe6,
	0x70,0x38,0x10,0x20,0xf8,0x23,0x05,0x66,
	0x70,0x38,0x72,0x80,0x12,0xa0,0xe8,0x23,
	0x05,0xe6,0x62,0xb8,0xd0,0x40,0x60,0x40,
	0xb0,0x3c,0x05,0x67,0x70,0x54,0x05,0xe6,
	0x60,0x74,0x05,0x67,0xd8,0x14,0x0c,0x10,
	0xf8,0x21,0x05,0x67,0xd0,0x00,0x05,0x66,
	0x60,0x38,0x05,0x68,0x70,0x20,0xb0,0x3f,
	0x05,0x68,0x60,0x20,0x05,0x69,0x70,0x00,
	0x10,0x20,0xf8,0x5e,0xd0,0x01,0x05,0x69,
	0x60,0x00,0xd0,0x00,0x05,0x66,0x60,0x30,
	0x05,0x66,0x70,0x54,0xb0,0x7f,0x05,0x66,
	0x60,0x54,0x05,0x26,0x72,0x88,0xf2,0xc9,
	0x05,0x67,0x71,0xac,0xb1,0xb4,0xd2,0x41,
	0x05,0x68,0x70,0x0c,0x30,0x0a,0xf8,0x46,
	0xd0,0x00,0x05,0x68,0x60,0x0c,0xe0,0x5e,
	0x78,0x06,0x0c,0x1a,0xe8,0x50,0xb1,0xa4,
	0x05,0x68,0x78,0x28,0x0c,0x16,0xe4,0x5e,
	0xb2,0x7f,0xe0,0x46,0x12,0x61,0xea,0x07,
	0xb1,0x8c,0xb1,0x9c,0x05,0x68,0x61,0xa8,
	0xb2,0x41,0x05,0x65,0x62,0x58,0xd8,0x00,
	0x05,0x68,0x68,0x00,0x05,0x68,0x68,0x04,
	0x05,0x66,0x70,0x70,0x10,0x60,0xe8,0x66,
	0xf2,0x13,0xd0,0x40,0x05,0x66,0x60,0x70,
	0x05,0x66,0x70,0x58,0x10,0x60,0xe8,0x79,
	0xd4,0x82,0xd5,0x02,0xd0,0x00,0x05,0x66,
	0x60,0x18,0x05,0x66,0x71,0x9c,0x11,0xa1,
	0xf8,0x75,0xd3,0xc3,0xe1,0xcd,0xc3,0xc6,
	0xb3,0xf8,0x73,0xcf,0xe1,0xcd,0x05,0x69,
	0x70,0x08,0x10,0x20,0xf8,0x84,0x05,0x69,
	0x72,0x84,0x12,0xa0,0xe8,0x84,0xf2,0x20,
	0x05,0x69,0x60,0x08,0x05,0x65,0x71,0x58,
	0xb1,0x41,0x05,0x68,0x71,0xa8,0xb1,0xb4,
	0xd3,0x40,0xd3,0x00,0xd1,0xc0,0xd2,0x00,
	0xd3,0x80,0x11,0x60,0xe5,0x01,0xb1,0x84,
	0x71,0x06,0xb1,0xb4,0x74,0x86,0xb1,0x88,
	0x71,0xc6,0x11,0xe0,0xf8,0xb5,0x11,0x23,
	0xf8,0xaa,0x05,0x67,0x78,0x38,0x18,0x20,
	0xe8,0xfa,0x13,0x20,0xf8,0xfa,0x11,0x62,
	0xec,0xa8,0xb1,0x88,0x78,0x06,0xb1,0xb8,
	0x18,0x22,0xe4,0xfa,0xd3,0x82,0xe0,0xb1,
	0x13,0x20,0xe8,0xb1,0xd3,0x80,0xd0,0x02,
	0xb1,0xbc,0x60,0x06,0xb1,0x84,0xc3,0xc4,
	0xc5,0x12,0xc3,0x06,0xe0,0xfa,0x13,0x20,
	0xe8,0xb9,0x13,0xa0,0xe9,0x01,0xb1,0xbc,
	0x70,0x06,0xb1,0x84,0x10,0x21,0xe8,0xf2,
	0x11,0x23,0xe8,0xf2,0x13,0xa1,0xe8,0xf2,
	0x05,0x68,0x70,0x04,0x10,0x20,0xe8,0xcc,
	0xd0,0x00,0x05,0x68,0x60,0x04,0x05,0x66,
	0x74,0xcc,0xe0,0xd5,0x05,0x68,0x70,0x00,
	0x10,0x20,0xe8,0xdb,0xd0,0x00,0x05,0x68,
	0x60,0x00,0x05,0x66,0x74,0xc8,0x05,0x69,
	0x72,0x04,0xd3,0x41,0xd3,0x01,0xd3,0xc3,
	0xe1,0x01,0xd0,0x01,0xb1,0xbc,0x60,0x06,
	0xb1,0x84,0xd0,0x00,0x05,0x68,0x60,0x10,
	0x05,0x67,0x78,0x38,0x18,0x20,0xe8,0xec,
	0xf2,0x31,0x11,0x21,0xf8,0xec,0x70,0x46,
	0x05,0x69,0x60,0x44,0x70,0x46,0xf2,0x13,
	0x05,0x67,0x78,0x38,0x18,0x20,0xf8,0x84,
	0x13,0xa0,0xe8,0xfa,0x13,0xa1,0xe8,0xfd,
	0x72,0x06,0x05,0x69,0x62,0x04,0xb3,0x81,
	0xb1,0x41,0xb1,0x9c,0xe0,0x8f,0xd0,0x04,
	0xb1,0xbc,0x60,0x06,0xb1,0x84,0x13,0x20,
	0xea,0x07,0xc1,0x8c,0x05,0x67,0xd2,0x58,
	0x72,0x89,0x12,0xa0,0xf9,0x5d,0x05,0x67,
	0xd8,0x28,0x0c,0x19,0xe9,0x0f,0xb2,0x7c,
	0xe1,0x06,0x05,0x67,0x78,0x38,0x18,0x20,
	0xe9,0x2c,0x13,0xe3,0xf9,0x2c,0x05,0x68,
	0x72,0x8c,0x12,0xa0,0xe9,0x2c,0x05,0x68,
	0x70,0x10,0x10,0x21,0xe5,0x25,0x13,0x61,
	0xe9,0x2c,0x05,0xe6,0x70,0x7c,0x30,0x4a,
	0xf9,0x4b,0x03,0xd4,0xe9,0x4b,0xd0,0x00,
	0x05,0x68,0x60,0x0c,0xd0,0x41,0x05,0x69,
	0x60,0x50,0xe1,0x5f,0x05,0x65,0x71,0x58,
	0xb1,0x41,0x05,0x67,0x70,0x2c,0xb0,0x34,
	0x11,0x60,0xe9,0x4b,0x72,0x80,0x12,0xa0,
	0xe9,0x48,0xb0,0x3c,0x70,0x40,0xb0,0x04,
	0x10,0x62,0xe9,0x4b,0x10,0x64,0xe9,0x4b,
	0x10,0x61,0xe9,0x4b,0xd0,0x40,0x60,0x40,
	0x05,0x68,0x70,0x2c,0xb0,0x3f,0x05,0x68,
	0x60,0x2c,0xe1,0x5f,0xb0,0x24,0xb1,0x41,
	0xe1,0x32,0x00,0xaf,0xd0,0x28,0x05,0x27,
	0x60,0x2c,0x05,0x68,0x70,0x30,0xb0,0x3f,
	0x05,0x68,0x60,0x30,0x02,0x20,0xd0,0x00,
	0xa0,0x38,0x00,0xa1,0xd0,0x48,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xd0,0x00,
	0x60,0x09,0x05,0x26,0x62,0x88,0x13,0x60,
	0xf9,0x77,0x62,0x86,0x13,0xe1,0xe9,0x74,
	0x13,0xa0,0xf9,0x74,0xc0,0x06,0xb0,0x1c,
	0x05,0x67,0x70,0x6c,0x30,0x40,0xee,0x07,
	0x70,0x40,0x10,0x60,0xe9,0x69,0xb0,0x3c,
	0xd0,0x80,0x60,0x80,0x13,0xe3,0xe9,0x77,
	0xc2,0x07,0x15,0x23,0xe9,0x87,0x13,0xe2,
	0xf9,0x87,0x15,0x22,0xe9,0x82,0x05,0x26,
	0x61,0xc0,0x05,0x25,0x61,0xfc,0xe1,0x8b,
	0x05,0x25,0x62,0xbc,0x05,0x26,0x61,0xc0,
	0xe1,0x8b,0x05,0x25,0x61,0xfc,0x05,0x26,
	0x62,0x00,0x05,0xac,0x63,0xc4,0x00,0x2d,
	0xd0,0x00,0x70,0x40,0x30,0x4a,0xe9,0x99,
	0x00,0x2d,0xd0,0x20,0x70,0x40,0x30,0x4a,
	0xe9,0x99,0x00,0x2e,0xd0,0x00,0x00,0x2b,
	0x60,0x14,0x13,0xe3,0xf9,0xbe,0x05,0x6c,
	0x63,0xc8,0x05,0x68,0x70,0x10,0xb0,0x3f,
	0x05,0x68,0x60,0x10,0x15,0x23,0xf9,0xaa,
	0xd0,0x41,0x07,0xa4,0x60,0x4c,0x07,0x1f,
	0x13,0x60,0xf9,0xb5,0xd0,0x01,0xb1,0xbc,
	0x60,0x06,0xb1,0x84,0x70,0x46,0x05,0x69,
	0x70,0x10,0x10,0x20,0xf9,0xba,0xc0,0x4a,
	0x05,0x26,0x60,0x48,0x05,0x68,0x60,0x4c,
	0xd0,0x00,0x05,0x69,0x60,0x10,0xf2,0x10,
	0x13,0x60,0xe9,0xc3,0xc2,0xd3,0xd1,0x81,
	0xe1,0xc5,0xb1,0x8c,0x72,0xc6,0xf2,0x42,
	0x15,0x21,0xf9,0xcd,0xd0,0x01,0x05,0x66,
	0x60,0x18,0x05,0x66,0x61,0x9c,0x15,0x22,
	0xf9,0xd7,0x13,0xe3,0xe9,0xde,0xc2,0x86,
	0xb2,0xb4,0x72,0x8a,0x05,0x25,0x62,0xbc,
	0xe1,0xde,0x0c,0x09,0x0a,0xcd,0x1a,0xe0,
	0xe9,0xde,0x1a,0xe8,0xed,0xd7,0xe0,0x2c,
	0x00,0xaf,0xd0,0x20,0x05,0x27,0x60,0x2c,
	0x13,0xe3,0xe9,0xeb,0x05,0x67,0x78,0x38,
	0x18,0x20,0xe9,0xeb,0xd0,0x40,0x05,0x68,
	0x60,0x4c,0x02,0x20,0xd0,0x00,0xa0,0x38,
	0x05,0x66,0x61,0xa0,0x05,0x66,0x63,0xe8,
	0x05,0x66,0x65,0x2c,0xd0,0x00,0x05,0x66,
	0x70,0x4c,0x30,0x53,0xf9,0xfa,0xd0,0x01,
	0x11,0xa1,0xe9,0xff,0xc0,0x06,0xb0,0x3c,
	0x70,0x00,0x05,0x66,0x60,0x24,0x00,0xa7,
	0xd0,0x78,0xd0,0x12,0x00,0x69,0xd7,0xdf,
	0x00,0x05,0x02,0x20,0xd0,0x00,0xa0,0x38,
	0x00,0xaf,0xd0,0x70,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x05,0x66,0x60,0x70,
	0x07,0xc5,0x05,0x66,0x70,0x3c,0x60,0x40,
	0xb0,0x3c,0x05,0x67,0xd8,0x14,0x0c,0x10,
	0xfa,0x1d,0x05,0x67,0xd0,0x00,0x05,0x66,
	0x60,0x3c,0x07,0xc5,0x05,0x67,0xd0,0x58,
	0x70,0x01,0xc0,0x8a,0x30,0x80,0xfa,0x29,
	0x60,0x81,0xd0,0x01,0x07,0xc5,0x05,0x67,
	0xd8,0x28,0x0c,0x11,0xea,0x2f,0xb0,0x7c,
	0xe2,0x22,0xd0,0x00,0x07,0xc5,0xc4,0x1f,
	0x05,0x69,0x70,0x04,0x10,0x20,0xea,0x41,
	0x05,0x69,0x70,0x48,0x10,0x60,0xea,0x41,
	0xd0,0x40,0x05,0x69,0x60,0x48,0x05,0x69,
	0x60,0x44,0xc2,0x80,0xf2,0xc9,0x04,0x05,
	0x06,0xa0,0xd0,0x40,0x84,0x22,0x80,0x3f,
	0xa0,0x63,0x80,0x3f,0x07,0xe8,0xd0,0x40,
	0x01,0x86,0x90,0xa1,0x80,0x3f,0x40,0x81,
	0xfa,0x4a,0x03,0x20,0xd0,0x40,0x10,0x4a,
	0xa0,0x4a,0x80,0x3f,0x84,0x05,0x80,0x3f,
	0xa0,0x46,0x80,0x3f,0x01,0x46,0xc0,0x4b,
	0x10,0x5b,0x10,0x42,0x00,0x20,0x30,0x60,
	0xee,0x67,0xea,0x67,0x80,0x22,0x80,0x3f,
	0x90,0xe3,0x10,0xde,0x10,0xc2,0x20,0x43,
	0xe2,0x6c,0x81,0x22,0x90,0xe3,0x10,0xde,
	0x10,0xc4,0x20,0x43,0x83,0x22,0x80,0x3f,
	0xa0,0x63,0x80,0x3f,0x80,0x3f,0x00,0xc6,
	0x86,0x45,0x80,0x3f,0x80,0x06,0x80,0x3f,
	0x80,0x17,0x80,0x3f,0x80,0x0d,0x80,0x0a,
	0x80,0x3f,0x84,0x05,0x80,0x3f,0x80,0x06,
	0x80,0x3f,0x80,0xe4,0x80,0x3f,0x80,0x64,
	0x80,0x3f,0x01,0x46,0x81,0x22,0x90,0xa3,
	0x10,0x9e,0x10,0x84,0x80,0x22,0x80,0x3f,
	0x90,0xe3,0x10,0xde,0x10,0xc2,0x30,0xc2,
	0x80,0xe2,0x80,0x3f,0x90,0xa3,0x10,0x9e,
	0x10,0x82,0x30,0x81,0xf6,0x96,0x20,0x83,
	0x00,0x21,0xd0,0x40,0x30,0x81,0x80,0x62,
	0x80,0x3f,0xa0,0xa3,0x83,0x22,0x80,0x3f,
	0x90,0x63,0x10,0x5e,0x10,0x42,0x80,0xe2,
	0x80,0x3f,0x90,0xa3,0x10,0x9e,0x10,0x82,
	0x30,0x42,0xf6,0xa9,0x20,0x43,0x01,0x20,
	0xd0,0x80,0x30,0x42,0x80,0xa2,0x80,0x3f,
	0xa0,0x63,0x00,0xc6,0x04,0xa0,0xd0,0xc1,
	0x84,0x22,0x80,0x3f,0xa0,0xe3,0x80,0x3f,
	0x07,0xc9,0x00,0x8d,0x07,0xc9,0x00,0x8d,
	0x07,0xc9,0x00,0x8d,0x07,0xc9,0x00,0x8d,
	0xd0,0x9f,0x40,0x8b,0x10,0xa0,0xea,0xc8,
	0x10,0x9d,0x01,0x86,0x0a,0x09,0x00,0xcd,
	0xb0,0x81,0xee,0xc3,0x07,0xc5,0x12,0xa0,
	0xea,0xda,0x05,0x67,0xd8,0x28,0x05,0x67,
	0xd0,0x58,0x70,0x01,0x10,0x20,0xea,0xd9,
	0xc0,0x8a,0x30,0x80,0xea,0xda,0x0c,0x11,
	0xea,0xda,0xb0,0x7c,0xe2,0xcf,0x62,0x81,
	0x07,0xc5,0x00,0xef,0xd0,0x3c,0x01,0x46,
	0x59,0x80,0x39,0x80,0x00,0x24,0xd0,0x14,
	0x59,0x80,0x00,0xc6,0x07,0xc5,0x00,0x00,
	0x05,0x65,0x71,0x50,0xd0,0x00,0x05,0x68,
	0x60,0x00,0x05,0x68,0x60,0x04,0x05,0x65,
	0x75,0x54,0x15,0x60,0xf8,0x91,0x05,0x67,
	0x70,0x38,0x10,0x20,0xe8,0x91,0x05,0x67,
	0x73,0x6c,0xb3,0x64,0xb3,0x78,0x70,0x0d,
	0xb3,0x48,0x10,0x23,0xf8,0x91,0x72,0x4d,
	0xd0,0x01,0x05,0x68,0x60,0x00,0xb3,0x64,
	0xb3,0x78,0x70,0x0d,0xb3,0x48,0x10,0x23,
	0xf8,0x91,0x70,0x4d,0x72,0x8d,0xd0,0x01,
	0x05,0x68,0x60,0x04,0xb3,0x64,0x72,0xcd,
	0xc4,0x49,0xc4,0x8a,0x81,0x22,0x95,0xe3,
	0x15,0xde,0x15,0xc4,0x80,0x22,0x98,0xa3,
	0x18,0x9e,0x18,0x82,0xc6,0x22,0x36,0x17,
	0x16,0x03,0xc0,0x45,0x30,0x4b,0xec,0x3a,
	0xe8,0x8c,0x20,0x58,0x24,0x41,0x34,0x58,
	0xf4,0x3e,0x24,0x58,0x24,0x81,0x34,0x98,
	0xf4,0x42,0x24,0x98,0xc3,0x89,0x00,0x20,
	0x33,0xa0,0xf4,0x47,0x23,0x98,0x13,0x9b,
	0x13,0x82,0x23,0x97,0xc8,0x4b,0xb8,0x61,
	0x18,0x5b,0x18,0x42,0x28,0x57,0xc3,0xd1,
	0x00,0x20,0x33,0xe0,0xf4,0x54,0x23,0xd8,
	0x13,0xdb,0x13,0xc2,0x23,0xd7,0xd0,0xc1,
	0x0c,0x9e,0xe8,0x8c,0xec,0x5c,0xd0,0xc0,
	0x00,0x24,0xd8,0xc0,0x10,0xe0,0xe8,0x66,
	0xc0,0x21,0x30,0x0e,0xe8,0x8c,0x0d,0x90,
	0xfc,0x66,0xc8,0xc0,0xc0,0x22,0x30,0x0e,
	0x0d,0x90,0xfc,0x6b,0xc8,0xc0,0xc0,0x22,
	0x30,0x0f,0x0d,0x90,0xfc,0x70,0xc8,0xc0,
	0xb8,0xc4,0x01,0x46,0x00,0x65,0xd0,0x2e,
	0xa0,0x36,0x08,0xca,0x7d,0x0e,0x00,0x06,
	0x00,0xe5,0xd0,0x2e,0xa0,0x36,0x08,0xca,
	0x6d,0x0f,0x00,0x06,0x00,0xc6,0xb8,0xfc,
	0x23,0xa3,0x0c,0x9e,0xe8,0x8c,0x0d,0x1e,
	0xec,0x87,0xc3,0x97,0xd0,0xc1,0x23,0xe3,
	0x0d,0x1f,0xec,0x8b,0xc3,0xd7,0xe0,0x5c,
	0x05,0x66,0x64,0x48,0x05,0x66,0x64,0x8c,
	0xc1,0x51,0xd0,0x00,0x05,0x68,0x60,0x0c,
	0xf0,0xc1,0x15,0x62,0xf8,0x99,0xd1,0x01,
	0xf1,0x52,0xf1,0x62,0x02,0x20,0xd0,0x00,
	0x84,0x22,0xa0,0x23,0x15,0x62,0xe8,0xa7,
	0x05,0x65,0x71,0x50,0xf0,0xc1,0x15,0x61,
	0xe8,0xa7,0xd1,0x00,0xf1,0x52,0x00,0xaf,
	0xd0,0x10,0x05,0x27,0x60,0x2c,0xd0,0x01,
	0x05,0x27,0x60,0x24,0x05,0x65,0x60,0x1c,
	0xd5,0x40,0x05,0x65,0x65,0x54,0x15,0x61,
	0xf8,0xbb,0x00,0xaf,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xa1,
	0xd0,0x48,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x06,0xa0,0xd1,0x80,0x84,0x22,
	0x80,0x3f,0xa1,0xa3,0x80,0x3f,0x07,0xe8,
	0xd1,0x80,0x01,0x86,0x91,0xe1,0x80,0x3f,
	0x41,0xc6,0xf8,0xc9,0x03,0x20,0xd1,0x80,
	0x11,0x8a,0xa1,0x8a,0x80,0x3f,0x84,0x05,
	0x80,0x3f,0xa1,0x86,0x80,0x3f,0x01,0x46,
	0xc1,0x85,0x11,0x9b,0x11,0x82,0x00,0x20,
	0x31,0xa0,0xec,0xe6,0xe8,0xe6,0x80,0x22,
	0x80,0x3f,0x92,0x23,0x12,0x1e,0x12,0x02,
	0x21,0x88,0xe0,0xeb,0x81,0x22,0x92,0x23,
	0x12,0x1e,0x12,0x04,0x21,0x88,0x83,0x22,
	0x80,0x3f,0xa1,0xa3,0x80,0x3f,0x80,0x3f,
	0x00,0xc6,0x86,0x45,0x80,0x3f,0x80,0x06,
	0x80,0x3f,0x80,0x17,0x80,0x3f,0x80,0x0d,
	0x80,0x0a,0x80,0x3f,0x84,0x05,0x80,0x3f,
	0x80,0x06,0x80,0x3f,0x80,0xe4,0x80,0x3f,
	0x80,0x64,0x80,0x3f,0x01,0x46,0x81,0x22,
	0x91,0xe3,0x11,0xde,0x11,0xc4,0x80,0x22,
	0x80,0x3f,0x92,0x23,0x12,0x1e,0x12,0x02,
	0x32,0x07,0x80,0xe2,0x80,0x3f,0x91,0xe3,
	0x11,0xde,0x11,0xc2,0x31,0xc6,0xf5,0x15,
	0x21,0xc8,0x00,0x21,0xd1,0x80,0x31,0xc6,
	0x80,0x62,0x80,0x3f,0xa1,0xe3,0x83,0x22,
	0x80,0x3f,0x91,0xa3,0x11,0x9e,0x11,0x82,
	0x80,0xe2,0x80,0x3f,0x91,0xe3,0x11,0xde,
	0x11,0xc2,0x31,0x87,0xf5,0x28,0x21,0x88,
	0x01,0x20,0xd1,0xc0,0x31,0x87,0x80,0xa2,
	0x80,0x3f,0xa1,0xa3,0x00,0xc6,0x04,0xa0,
	0xd2,0x01,0x84,0x22,0x80,0x3f,0xa2,0x23,
	0x80,0x3f,0x07,0xc9,0x01,0xcd,0x07,0xc9,
	0x01,0xcd,0x07,0xc9,0x01,0xcd,0x07,0xc9,
	0x01,0xcd,0xd1,0xdf,0x41,0xc5,0x11,0xe0,
	0xe9,0x47,0x11,0xdd,0x01,0x86,0x0a,0x09,
	0x02,0x0d,0xb1,0xc1,0xed,0x42,0x07,0xc5,
	0x00,0xef,0xd3,0x3c,0x01,0x46,0x59,0x8c,
	0x39,0x8c,0x00,0x24,0xd3,0x14,0x59,0x8c,
	0x00,0xc6,0x07,0xc5,0xc4,0xdf,0x0c,0x09,
	0x0a,0xcd,0x11,0x20,0xe9,0x58,0xf1,0x62,
	0x00,0x22,0xd8,0x33,0x38,0x2b,0xe9,0x61,
	0xb8,0x04,0xe9,0x61,0xb8,0x01,0xe9,0x61,
	0xe1,0x53,0x04,0xc5,0xc5,0x1f,0x06,0xa0,
	0xd0,0x01,0x84,0x22,0xa0,0x23,0xf1,0x48,
	0x80,0xa2,0x90,0x23,0x10,0x20,0xed,0x63,
	0x05,0x05,0x00,0x00,0x05,0xa1,0xd0,0x10,
	0x72,0x00,0x12,0x21,0xe9,0xbb,0x12,0x22,
	0xe9,0xe2,0x05,0x6f,0xd0,0x04,0x70,0x00,
	0x10,0x20,0xf8,0x16,0x02,0x2f,0xd0,0x18,
	0x00,0x21,0xd0,0x7c,0xd0,0xa0,0xf2,0x19,
	0x00,0x20,0xd0,0x6c,0xd0,0x81,0xf2,0x19,
	0xd0,0x41,0x90,0x0d,0x40,0x01,0xe8,0x1c,
	0x08,0x49,0x00,0x0d,0x00,0xef,0xd0,0xbf,
	0xb0,0x81,0xf8,0x23,0x02,0x20,0xdf,0xc1,
	0xe2,0x26,0x08,0x89,0x00,0x0d,0x10,0x20,
	0xe8,0x1e,0x10,0x22,0xe8,0x1e,0xc2,0x00,
	0xd0,0x45,0x08,0x89,0x00,0x0d,0x10,0x23,
	0xf8,0x25,0xb0,0x41,0xf8,0x2b,0x12,0x21,
	0xe9,0xc1,0x00,0xef,0xd1,0xff,0xd2,0x07,
	0x90,0x0d,0xb0,0x3c,0x42,0x00,0xf1,0xee,
	0xf1,0xee,0x05,0xa1,0xd0,0x08,0xb1,0x0c,
	0x61,0x00,0x01,0xa7,0x61,0x1c,0x00,0x06,
	0x08,0x49,0x08,0x0d,0x11,0xc1,0x51,0xe0,
	0x08,0x89,0x07,0x4d,0x11,0xc2,0x51,0xdd,
	0x08,0x49,0x00,0xcd,0x11,0xc1,0x51,0xc3,
	0x00,0x20,0xd6,0x10,0x05,0xa0,0xd1,0x68,
	0x67,0x45,0x00,0x60,0xd1,0x40,0x61,0xc5,
	0x09,0x09,0x05,0x4d,0xc1,0xd5,0x08,0x89,
	0x02,0x4d,0x11,0xc2,0x51,0xc9,0x08,0x49,
	0x01,0x8d,0x11,0xc1,0x51,0xc6,0x08,0x49,
	0x08,0x0d,0x11,0xc1,0x51,0xe0,0x08,0x89,
	0x05,0x8d,0x11,0xc2,0x51,0xd6,0x08,0x89,
	0x05,0xcd,0x11,0xc2,0x51,0xd7,0x08,0x49,
	0x08,0x0d,0x11,0xc1,0x51,0xe0,0x08,0x49,
	0x08,0x0d,0x11,0xc1,0x51,0xe0,0x08,0x89,
	0x08,0x0d,0x11,0xc2,0x51,0xe0,0x00,0x60,
	0xd1,0x44,0x61,0xc5,0x05,0xa1,0xd1,0x40,
	0x68,0x05,0x05,0xa0,0xd1,0x40,0x65,0x45,
	0x05,0xa0,0xd1,0x44,0x62,0x45,0x05,0xa0,
	0xd1,0x48,0x65,0x85,0x05,0xa0,0xd1,0x4c,
	0x65,0xc5,0xc0,0x5d,0x05,0xa0,0xd1,0x58,
	0x78,0x05,0x0c,0x11,0xe8,0x97,0x18,0x24,
	0xe8,0x97,0xc7,0x60,0x05,0xa0,0xd1,0x68,
	0x67,0x45,0xd8,0x50,0x26,0x21,0x10,0xe0,
	0xf8,0x9e,0x07,0xc9,0xd8,0x50,0x26,0x21,
	0x15,0x6f,0xf8,0xb4,0x05,0xa0,0xd1,0x60,
	0x78,0x05,0xc5,0x60,0x05,0xa0,0xd1,0x64,
	0x78,0x05,0xc2,0x60,0x05,0xa0,0xd1,0x58,
	0x78,0x05,0xc7,0x60,0x05,0xa0,0xd1,0x5c,
	0x78,0x05,0x18,0x21,0xe8,0xb3,0xc5,0xa0,
	0xe0,0xb4,0xd5,0x80,0x17,0x63,0xe9,0x01,
	0x15,0x60,0xe8,0xcc,0xc8,0x15,0xb8,0x01,
	0x18,0x02,0x12,0x60,0xe8,0xc4,0x12,0x61,
	0xe8,0xcc,0x06,0xea,0xd1,0x68,0x21,0x60,
	0x74,0xc5,0xe0,0xd0,0x06,0xe9,0xd1,0x70,
	0x21,0x60,0x74,0xc5,0x11,0xa0,0xe8,0xd0,
	0xb4,0xf8,0xe0,0xd0,0x06,0xe8,0xd1,0x78,
	0x21,0x60,0x74,0xc5,0x15,0xa3,0xe8,0xdc,
	0x15,0x64,0xe8,0xe6,0x15,0x66,0xe8,0xe6,
	0x15,0x67,0xe4,0xed,0x15,0x69,0xfc,0xe9,
	0x15,0x6e,0xfc,0xe3,0x15,0x62,0xfc,0xe6,
	0x15,0x65,0xfc,0xe9,0x15,0x6a,0xfc,0xe3,
	0xe0,0xed,0x12,0x61,0xe8,0xe9,0xe0,0xed,
	0x12,0x62,0xe8,0xf5,0xe0,0xf1,0xd5,0x1b,
	0x06,0xe6,0xd6,0x40,0xe0,0xf8,0xd5,0x1e,
	0x06,0xe6,0xd6,0x50,0xe0,0xf8,0xd5,0x08,
	0x06,0xe6,0xd6,0x60,0xe0,0xf8,0xd5,0x0c,
	0x06,0xe6,0xd6,0x68,0x15,0xa1,0xe8,0xfc,
	0xd6,0xa0,0xe1,0x23,0xd8,0x41,0xc6,0x97,
	0x26,0xa1,0x16,0x82,0xe1,0x23,0xd5,0x20,
	0x15,0x60,0xe9,0x1a,0x12,0x61,0xe9,0x0b,
	0x12,0x60,0xe9,0x0e,0x06,0xed,0xd1,0x50,
	0xe1,0x10,0x06,0xeb,0xd1,0x60,0xe1,0x10,
	0x06,0xec,0xd1,0x58,0xc8,0x15,0xb8,0x01,
	0x18,0x02,0x21,0x60,0x74,0xc5,0x14,0xe0,
	0xf9,0x1a,0x11,0xa1,0xf9,0x1a,0xb4,0xf8,
	0x15,0xa1,0xe9,0x1e,0xc6,0x94,0xe1,0x23,
	0xd8,0x41,0xc6,0x97,0x26,0xa1,0x16,0x82,
	0xe1,0x23,0x05,0xa0,0xd1,0x50,0x66,0x05,
	0x05,0xa0,0xd1,0x54,0x66,0x85,0x05,0xa0,
	0xd1,0x74,0x64,0xc5,0x05,0xa0,0xd1,0x78,
	0x66,0x45,0x05,0xa0,0xd1,0x5c,0x65,0x85,
	0x05,0xa0,0xd1,0x60,0x65,0x45,0x05,0xa0,
	0xd1,0x64,0x62,0x45,0x05,0xa1,0xd1,0x54,
	0x65,0x05,0x05,0xa0,0xd1,0x58,0x67,0x45,
	0x05,0x6b,0xd1,0x58,0xc8,0x13,0x18,0x1d,
	0x68,0x05,0x05,0xa1,0xd0,0x08,0x71,0x80,
	0x11,0x9d,0x21,0xa0,0x82,0x62,0x90,0x23,
	0x10,0x1e,0x10,0x04,0x21,0x80,0x81,0x62,
	0x90,0xa3,0x10,0x9e,0x10,0x82,0xc0,0x46,
	0x30,0x42,0xe5,0x56,0x20,0x40,0xc1,0x81,
	0xd0,0xc3,0x40,0xc6,0x31,0x83,0x01,0x46,
	0x71,0x06,0x00,0x06,0x91,0x7d,0x11,0x58,
	0x00,0xc6,0x10,0xe3,0xe9,0x70,0x03,0xff,
	0xdf,0xff,0xd1,0xc2,0x31,0xc3,0xe9,0x81,
	0x11,0x18,0x41,0x00,0xc0,0x85,0x10,0x8c,
	0x10,0x84,0x51,0x02,0xd1,0x40,0xb1,0xc1,
	0xf9,0x66,0xe1,0x81,0xc0,0x84,0x10,0x88,
	0x0f,0xec,0xd0,0x00,0x40,0x80,0xb1,0xbc,
	0x01,0x46,0x71,0x06,0x00,0x06,0x91,0x7d,
	0x11,0x58,0x00,0xc6,0xc1,0x05,0x00,0x23,
	0xd0,0x3f,0x41,0x00,0x51,0x02,0xc1,0x44,
	0xd0,0x00,0x30,0x08,0x0f,0xef,0xd8,0x30,
	0x18,0x00,0x41,0x20,0x0c,0x14,0xf9,0x8c,
	0xd0,0x40,0xe1,0x95,0xd0,0x41,0x07,0xef,
	0xd8,0x30,0x18,0x00,0x0c,0x14,0xe9,0x95,
	0x02,0x20,0xdf,0xcb,0xe2,0x26,0x05,0xa1,
	0x60,0x5c,0x05,0x6b,0xd1,0x50,0xc8,0x09,
	0x18,0x23,0xf9,0x9f,0x02,0x20,0xdf,0xcc,
	0xe2,0x26,0x18,0x21,0xed,0xa4,0xe9,0xa3,
	0xd8,0x02,0xb8,0x01,0x68,0x05,0x81,0xa2,
	0x80,0x3f,0x90,0x63,0x80,0x3f,0xc0,0x13,
	0x10,0x1d,0x00,0x21,0xd0,0x80,0x20,0x02,
	0x00,0x06,0x30,0x01,0xfd,0xbb,0xd0,0x41,
	0x05,0xa1,0xd0,0x10,0x60,0x40,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xf3,
	0x00,0x05,0x00,0xa9,0xd0,0x60,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x05,0x6f,
	0x70,0x04,0xb0,0x3f,0x05,0x6f,0x60,0x04,
	0x05,0x25,0xd0,0x60,0xd0,0x06,0x60,0x01,
	0x07,0xc9,0x00,0x4d,0x0a,0xc9,0x04,0xcd,
	0xc0,0xd3,0x08,0x49,0xb0,0xc5,0x05,0x6b,
	0xd1,0x58,0x70,0x45,0x20,0x53,0x60,0x45,
	0x10,0xe0,0xe9,0xdc,0x0a,0x09,0x00,0x4d,
	0xb0,0xc1,0xf9,0xd8,0x00,0xa7,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xfa,0x00,0x05,
	0x05,0xa0,0xd1,0x74,0x70,0x45,0x10,0x5d,
	0x05,0x6b,0xd1,0x58,0x74,0xc5,0x20,0x53,
	0x60,0x45,0xc0,0xd3,0xb0,0xc5,0xe1,0xd6,
	0x00,0x68,0xd0,0x40,0x90,0xa1,0x40,0x81,
	0xf9,0xf0,0x83,0x62,0x90,0x63,0x10,0x5e,
	0x10,0x42,0x82,0x62,0x90,0xa3,0x10,0x9e,
	0x10,0x84,0x30,0x42,0x86,0x45,0xd0,0xff,
	0x90,0x86,0x10,0x95,0x40,0x83,0xb0,0xbe,
	0x10,0x82,0x30,0x42,0x10,0x43,0xd0,0x9f,
	0x90,0xcd,0x40,0xc2,0x20,0x43,0xc1,0x41,
	0x31,0x44,0xf6,0x17,0x82,0x62,0x91,0x23,
	0x11,0x1e,0x11,0x04,0x81,0x62,0x90,0xe3,
	0x10,0xde,0x10,0xc2,0x30,0xc4,0x10,0xc3,
	0x21,0x43,0xc1,0x01,0x07,0xc5,0x01,0x46,
	0x00,0x06,0x80,0x3c,0x80,0x3d,0x00,0x4a,
	0x6f,0x00,0x00,0x06,0x00,0xc6,0x20,0x01,
	0xb0,0x3c,0xb0,0x81,0xee,0x19,0x07,0xc5,
	0x01,0x46,0x00,0x70,0xd0,0x01,0xa0,0x37,
	0x80,0x3f,0x00,0xc6,0xc0,0x00,0xc0,0x00,
	0xe2,0x2c,0x00,0x00,0x00,0x29,0xd0,0x28,
	0x7a,0x00,0x05,0x6f,0xd1,0xb4,0x76,0xc6,
	0x05,0x6f,0xd1,0xb8,0x77,0x06,0x05,0x6f,
	0xd1,0xbc,0x72,0x46,0x00,0x24,0xd8,0x40,
	0xa8,0x69,0xc8,0x1d,0xd0,0x01,0x48,0x00,
	0x18,0x06,0xa8,0x2a,0xc0,0x00,0x86,0x45,
	0xc0,0x00,0xc8,0x17,0x18,0x02,0x58,0x16,
	0x18,0x01,0xc8,0x5d,0xd8,0x81,0x48,0x62,
	0x58,0x21,0x18,0x06,0x18,0x06,0x18,0x01,
	0xd8,0x41,0x58,0x21,0x18,0x02,0x18,0x01,
	0xd8,0x40,0x58,0x21,0x18,0x01,0xd8,0x41,
	0x58,0x21,0xa8,0x06,0x80,0x3f,0x02,0x2f,
	0xd1,0x98,0xd1,0x40,0xd1,0xc0,0xd0,0xc0,
	0xd2,0x00,0xd1,0x40,0x00,0x20,0xd8,0x08,
	0xa8,0x27,0x00,0x20,0xd8,0x13,0xa8,0x29,
	0x00,0x20,0xd8,0x00,0xa8,0x2a,0xd1,0x40,
	0xd1,0x00,0x02,0x2f,0xd1,0x98,0x17,0x63,
	0xe8,0x56,0x11,0x20,0xe8,0x54,0x11,0x21,
	0xf8,0x4a,0x02,0x29,0xd8,0x90,0xe0,0x4c,
	0x02,0x2b,0xd8,0x90,0x80,0xa9,0x80,0x2a,
	0x00,0x21,0xd8,0x3c,0x08,0x0a,0x7a,0xe2,
	0x80,0x3f,0x00,0x06,0xb1,0x3f,0xe0,0x57,
	0xb1,0x3d,0xd0,0xc0,0x00,0x06,0x84,0x69,
	0x80,0x3f,0x80,0x2a,0x84,0x29,0x80,0x3f,
	0x17,0x63,0xe8,0x7b,0x10,0xe0,0xf8,0x63,
	0x8c,0x3f,0x07,0x89,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0x01,0x86,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0x8c,0x7f,
	0xe0,0x99,0xd8,0x42,0x8c,0x3f,0x07,0x89,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0x01,0x86,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0x8c,0x7f,0xb8,0x41,0xf4,0x7c,
	0x84,0x69,0x80,0x2a,0x84,0x29,0x8d,0x3f,
	0x8d,0x7f,0x00,0x06,0x84,0x29,0x80,0x3f,
	0x00,0x20,0xd8,0x0b,0xa8,0x27,0x80,0x3f,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0x01,0x86,0x8d,0xbf,0x8e,0x3f,
	0xd1,0xc0,0xf1,0x97,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0x00,0x06,
	0x01,0x86,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0x01,0x86,
	0x8c,0xbf,0x83,0x67,0x80,0x3f,0x11,0xe0,
	0xe8,0xc4,0xf1,0x74,0xb1,0xff,0x11,0xe8,
	0xf8,0xab,0x01,0x86,0x84,0x29,0x00,0x23,
	0xd8,0x7f,0x98,0x2a,0x48,0x21,0x18,0x19,
	0xd0,0x01,0x08,0x00,0x18,0x07,0xa8,0x2a,
	0x80,0x3f,0xf1,0x74,0xb1,0x7f,0xc8,0x05,
	0x00,0x10,0xf9,0x1c,0x12,0x22,0xf8,0xdb,
	0x8d,0xff,0x00,0x06,0x80,0x29,0x00,0x21,
	0xd0,0x00,0xa0,0x27,0x12,0x20,0xe8,0xea,
	0x12,0x21,0xe8,0xe7,0x0b,0xb8,0xd0,0x20,
	0xe0,0xec,0x0b,0xb4,0xd0,0x20,0xe0,0xec,
	0x0b,0xb0,0xd0,0x20,0xa0,0x2c,0x80,0x3f,
	0xc0,0x28,0x20,0x09,0x00,0x21,0xd8,0x7c,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0x08,0x4a,0x6a,0xc0,0x00,0x06,0x00,0x22,
	0xd8,0x00,0x01,0x46,0x02,0x46,0x25,0x60,
	0x03,0x9e,0xf9,0x01,0x25,0xa0,0x02,0x06,
	0x00,0xc6,0x22,0x60,0x05,0x6a,0xd0,0x30,
	0x70,0x00,0xc8,0x09,0x0c,0x10,0xe5,0x0b,
	0xd2,0x40,0x00,0x06,0xc0,0x00,0xc0,0x00,
	0x08,0x30,0xd0,0x00,0x10,0x02,0xa0,0x29,
	0x82,0x27,0x8e,0x7f,0x02,0x2f,0xd1,0x98,
	0x00,0x22,0xd8,0x00,0x27,0x20,0xf1,0xa1,
	0xb2,0x3f,0xe1,0x24,0x02,0xe1,0xd1,0xa8,
	0x00,0x22,0xd8,0x00,0x36,0xe0,0xed,0x24,
	0x00,0x6f,0xd6,0xd0,0x84,0x29,0x80,0x2a,
	0x12,0x23,0xf8,0x99,0xd2,0x00,0xb0,0xff,
	0x10,0xe4,0xf8,0x58,0xd0,0xc0,0x11,0x23,
	0xf8,0x41,0x05,0x6f,0xd0,0x04,0x70,0x40,
	0xb0,0x7f,0x60,0x40,0x05,0x6f,0xd1,0xb4,
	0x66,0xc6,0x05,0x6f,0xd1,0xb8,0x67,0x06,
	0x05,0x6f,0xd1,0xbc,0x62,0x46,0x05,0xa1,
	0xd1,0x88,0x72,0x86,0xf1,0xaf,0x05,0xa1,
	0xd1,0x88,0x62,0x86,0x05,0xa0,0xd1,0xb4,
	0x73,0xc6,0x33,0xcb,0xe9,0x5a,0xe5,0x4f,
	0x08,0x49,0x00,0x0d,0xb3,0xc1,0xf9,0x4a,
	0xe1,0x5a,0x01,0x46,0x02,0x20,0xdf,0xc2,
	0x00,0x70,0xd0,0x01,0xa0,0x37,0x80,0x3f,
	0x00,0xc6,0xc0,0x00,0xc0,0x00,0xe1,0x57,
	0xc0,0x00,0xc0,0x00,0x05,0xa1,0xd0,0x1c,
	0x70,0x00,0x10,0x20,0xf9,0x67,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xfa,
	0x00,0x05,0x00,0xa7,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xec,0x00,0x05,0x00,0xa9,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x0c,0x84,0x29,0xc8,0x06,
	0x28,0x1b,0x00,0x20,0xd8,0x4c,0x08,0x4a,
	0x6a,0xe0,0x00,0x06,0x00,0xa0,0xd8,0x00,
	0x38,0x1b,0xf9,0x93,0x01,0x46,0x00,0xa0,
	0xd8,0x00,0x28,0x06,0x00,0x67,0xd0,0x1e,
	0xa0,0x36,0x03,0x0b,0x7d,0x20,0x00,0x06,
	0x00,0xe7,0xd0,0x1e,0xa0,0x36,0x03,0x0b,
	0x6d,0x06,0x00,0x06,0xc0,0x00,0xd6,0xc0,
	0x00,0xc6,0x00,0x20,0xd8,0x50,0x26,0xe1,
	0x07,0xc5,0x84,0x29,0xc8,0x06,0x28,0x1c,
	0x00,0x22,0xd8,0x40,0x08,0x4a,0x7a,0xe0,
	0x18,0x41,0x27,0x21,0x00,0x06,0x00,0xa0,
	0xd8,0x00,0x38,0x1c,0xf5,0xa8,0x00,0xa0,
	0xd8,0x00,0x37,0x20,0x07,0xc5,0x80,0x29,
	0x80,0x3f,0x98,0x27,0x00,0x10,0xf9,0xa9,
	0x07,0xc5,0x00,0x68,0xd3,0x00,0x93,0x61,
	0x43,0x4c,0xf9,0xb1,0x83,0x62,0x93,0x23,
	0x13,0x1e,0x13,0x02,0x82,0x62,0x93,0x63,
	0x13,0x5e,0x13,0x44,0x33,0x0d,0x86,0x45,
	0xd3,0xbf,0x93,0x46,0x13,0x55,0x43,0x4e,
	0xb3,0x7e,0x13,0x42,0x33,0x0d,0x13,0x03,
	0xd3,0x5f,0x93,0x8d,0x43,0x8d,0x23,0x0e,
	0xc2,0xcc,0x32,0xca,0xf5,0xd8,0x82,0x62,
	0x92,0xa3,0x12,0x9e,0x12,0x84,0x81,0x62,
	0x93,0xa3,0x13,0x9e,0x13,0x82,0x33,0x8a,
	0x13,0x83,0x22,0xce,0xc2,0x8c,0x07,0xc5,
	0x00,0x06,0x0b,0xcc,0x07,0xc5,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x02,0x06,0x05,0xa0,0xd4,0x08,0x75,0x90,
	0x05,0xa0,0xd4,0x0c,0x75,0xd0,0x05,0xa0,
	0xd4,0x10,0x76,0x10,0x05,0xa0,0xd4,0x14,
	0x76,0x90,0x05,0xa0,0xd4,0x28,0x77,0x50,
	0x05,0xa0,0xd4,0x38,0x76,0x50,0x05,0xa0,
	0xd4,0x00,0x75,0x50,0x05,0xa1,0xd4,0x14,
	0x75,0x10,0x05,0xa0,0xd4,0x34,0x74,0xd0,
	0x05,0xa1,0xd0,0x10,0xd0,0x40,0x60,0x40,
	0x00,0x23,0xd4,0x34,0x74,0x50,0xc0,0x11,
	0x14,0x41,0x24,0x40,0x14,0x5e,0x82,0xa7,
	0x17,0x63,0xe9,0x99,0xdb,0x40,0xd1,0x40,
	0xd2,0x80,0xd1,0x80,0xd1,0xc0,0x78,0x19,
	0x0f,0xef,0xd8,0xbf,0x48,0x22,0x00,0x21,
	0xd8,0x7f,0xc2,0x20,0x42,0x21,0xc3,0x60,
	0x13,0x59,0xd8,0x7f,0x43,0x61,0xc3,0xa0,
	0x13,0x93,0x13,0xa0,0xe8,0x4c,0x13,0xa4,
	0xe8,0x49,0x13,0xa3,0xe8,0x46,0x08,0x89,
	0x02,0x4d,0xe0,0x4e,0x08,0xc9,0x02,0x4d,
	0xe0,0x4e,0x09,0x09,0x02,0x4d,0xe0,0x4e,
	0x00,0x20,0xd2,0x40,0x06,0xe6,0xd4,0x00,
	0xc8,0x08,0x18,0x02,0x24,0x20,0x26,0x0e,
	0x12,0x60,0xf8,0x5a,0xd8,0x41,0x2b,0x61,
	0xd8,0x40,0xe0,0x6f,0xc8,0x09,0x12,0x5f,
	0x12,0x42,0x24,0x09,0x72,0x50,0x00,0x10,
	0xe8,0x65,0x00,0x23,0xd8,0x7f,0x42,0x61,
	0xe0,0x66,0x12,0x58,0xc8,0x49,0xd8,0x10,
	0x38,0x21,0xe4,0x6d,0x18,0x41,0x28,0x49,
	0xe0,0x6f,0xd8,0x0f,0x48,0x60,0x15,0xa3,
	0xe8,0x87,0xc8,0x05,0x38,0x1a,0xf4,0x89,
	0x21,0xa1,0xb2,0xbf,0xc8,0x0a,0x00,0x10,
	0xe8,0x7b,0xc4,0x89,0xe0,0x3d,0x01,0x46,
	0x12,0x48,0x52,0x52,0x80,0xa9,0xc8,0x05,
	0xb8,0x20,0x18,0x01,0x18,0x0b,0xa8,0x2a,
	0xa2,0x6b,0x00,0xc6,0xe0,0x98,0x21,0xa1,
	0xe0,0x8e,0x12,0x60,0xf8,0x8d,0xd8,0x81,
	0x2b,0x62,0x21,0xe1,0xc4,0x89,0x12,0x48,
	0x52,0x52,0x80,0xa9,0xc8,0x05,0xb8,0x20,
	0x18,0x01,0x18,0x0b,0xa8,0x2a,0xa2,0x6b,
	0xd8,0x81,0x21,0x62,0xc8,0x05,0xd8,0x60,
	0x38,0x21,0xe8,0xaa,0xc8,0x05,0x38,0x14,
	0xf4,0xa7,0xc8,0x05,0x38,0x0d,0xe4,0x3d,
	0x18,0x82,0x26,0x62,0xe0,0x2f,0xd2,0x40,
	0xd8,0x40,0xe0,0x87,0x21,0x87,0xc8,0x06,
	0x18,0x03,0x26,0x20,0xc8,0x06,0x18,0x02,
	0x26,0x20,0xc1,0x14,0x15,0xa3,0xe8,0xb5,
	0x11,0x01,0x31,0x2d,0x11,0x01,0x26,0x04,
	0xc8,0x04,0xd8,0x60,0xb8,0x0c,0xe4,0xca,
	0x09,0x89,0x03,0x4d,0x09,0x89,0x03,0xcd,
	0x13,0x46,0x53,0x4f,0x82,0x29,0x18,0x4b,
	0xa8,0x6a,0xa3,0x6b,0x18,0x55,0xb8,0x7e,
	0xc1,0x20,0xe0,0xba,0x11,0x20,0xe8,0xec,
	0xc8,0x04,0xb8,0x06,0xf4,0xdb,0xc8,0x84,
	0xb8,0xa0,0x08,0x88,0x03,0x4d,0xd0,0x0c,
	0x30,0x04,0x13,0x40,0x82,0x29,0x18,0x4b,
	0xa8,0x6a,0xa3,0x6b,0xe0,0xec,0x09,0x89,
	0x03,0x4d,0x13,0x46,0xb1,0x06,0xe8,0xe8,
	0xc8,0x84,0xb8,0xa0,0x08,0x88,0x03,0xcd,
	0xd0,0x06,0x30,0x04,0x13,0xc0,0x53,0x4f,
	0x82,0x29,0x18,0x4b,0xa8,0x6a,0xa3,0x6b,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x20,0xd4,0x00,0xdb,0x80,
	0xd2,0x80,0xd1,0x40,0xd8,0xa0,0x82,0x29,
	0xa8,0xaa,0x80,0x3f,0x0f,0xef,0xd8,0x3f,
	0x90,0xeb,0x40,0xe0,0xb8,0xbe,0x80,0xa9,
	0xc8,0x05,0xb8,0x20,0x18,0x01,0xa8,0x2a,
	0x0f,0xef,0xd8,0x7f,0x92,0x2b,0x42,0x21,
	0xc8,0x08,0x00,0x23,0xd8,0x7f,0x48,0x21,
	0x18,0x20,0xf9,0x12,0xd2,0xc0,0xd3,0x00,
	0xd3,0x40,0xe1,0x46,0x1b,0xa6,0xe9,0x8f,
	0xc3,0x83,0xc8,0x2e,0x18,0x01,0xd0,0x0a,
	0x30,0x20,0xe9,0x1e,0xd8,0x00,0x38,0x00,
	0xc0,0x20,0x13,0x80,0xd8,0x03,0x43,0xa0,
	0xbb,0xbf,0x13,0xa3,0xe9,0x3f,0x13,0xa2,
	0xe9,0x38,0x13,0xa1,0xe9,0x30,0x09,0x89,
	0x02,0xcd,0x09,0x89,0x03,0x0d,0x09,0x89,
	0x03,0x4d,0xd8,0x12,0x26,0x20,0xe1,0x46,
	0x09,0x89,0x02,0xcd,0xc3,0x0b,0x09,0x89,
	0x03,0x4d,0xd8,0x0c,0x26,0x20,0xe1,0x46,
	0x09,0x89,0x02,0xcd,0xc3,0x0b,0xc3,0x4b,
	0xd8,0x06,0x26,0x20,0xe1,0x46,0x09,0x89,
	0x02,0xcd,0x09,0x89,0x03,0x0d,0xc3,0x4c,
	0xd8,0x0c,0x26,0x20,0x14,0x60,0xe9,0x56,
	0x00,0x20,0xd8,0x7e,0x22,0xd1,0x0c,0x9b,
	0xf5,0x4e,0xc2,0xe1,0x23,0x11,0x0c,0x9c,
	0xf5,0x52,0xc3,0x21,0x23,0x51,0x0c,0x9d,
	0xf5,0x56,0xc3,0x61,0xb2,0xbf,0xc8,0x0a,
	0x00,0x10,0xe9,0x62,0xcb,0xcb,0xc1,0xcc,
	0xc8,0xcd,0x15,0xa3,0xe9,0x62,0xc8,0x08,
	0x18,0x18,0xe1,0x0c,0x12,0xc8,0x52,0xef,
	0x13,0x08,0x53,0x07,0x13,0x48,0x53,0x63,
	0x80,0xa9,0xc8,0x05,0x18,0x01,0x18,0x0b,
	0xa8,0x2a,0xa2,0xeb,0x80,0x69,0xc8,0x10,
	0x18,0x01,0x18,0x0b,0xa8,0x2a,0xa3,0x2b,
	0xc8,0x10,0xb8,0x20,0x18,0x01,0x18,0x0b,
	0xa8,0x2a,0xa3,0x6b,0xb4,0x3f,0x15,0xa3,
	0xf9,0x7e,0xb2,0xbf,0xb1,0x7f,0xc8,0x05,
	0x00,0x20,0xd8,0x60,0x38,0x21,0xe4,0xff,
	0x80,0x69,0xd8,0x00,0xa8,0x2a,0x00,0x23,
	0xd8,0x3c,0x02,0x29,0xd8,0x50,0x08,0x0a,
	0x6a,0xe1,0x00,0x06,0xe2,0x10,0x82,0x29,
	0xa8,0xaa,0x90,0xeb,0x80,0x3f,0x0f,0xef,
	0xd8,0x3f,0x40,0xe0,0xb8,0xbe,0xdb,0x80,
	0xe1,0x14,0xd1,0x40,0xd2,0x80,0xd1,0x80,
	0xd1,0xc0,0x09,0x09,0x02,0x4d,0xd8,0x04,
	0x26,0x20,0x12,0x60,0xe9,0xa5,0xd8,0x41,
	0x22,0x61,0x15,0xa3,0xe9,0xbc,0xc8,0x05,
	0x38,0x1a,0xf5,0xbe,0x21,0x89,0xd8,0x41,
	0x22,0xa1,0xc8,0x4a,0x00,0x90,0xe9,0xb2,
	0xc4,0x89,0xe1,0x9d,0x14,0x88,0x52,0x52,
	0x80,0xa9,0xc8,0x05,0xb8,0x20,0x18,0x01,
	0x18,0x0b,0xa8,0x2a,0xa2,0x6b,0xe1,0xc9,
	0x21,0x89,0xe1,0xbf,0x21,0xc9,0xc4,0x89,
	0x14,0x88,0x52,0x52,0x80,0xa9,0xc8,0x05,
	0xb8,0x20,0x18,0x01,0x18,0x0b,0xa8,0x2a,
	0xa2,0x6b,0xd8,0x41,0x21,0x61,0xc8,0x05,
	0x38,0x14,0xe9,0xcf,0xe1,0x9d,0x21,0x87,
	0xc8,0x06,0x18,0x03,0x26,0x20,0xc8,0x06,
	0x18,0x02,0x26,0x20,0xd1,0x40,0xd2,0x80,
	0x80,0xa9,0xc8,0x05,0xb8,0x20,0x18,0x01,
	0xa8,0x2a,0xc0,0x00,0x0f,0xef,0xd8,0x7f,
	0x92,0x2b,0x42,0x21,0xc8,0x08,0x18,0x18,
	0x18,0x20,0xf9,0xe8,0xd2,0xc0,0xe1,0xf3,
	0x09,0x89,0x02,0xcd,0xb6,0x3a,0x14,0x60,
	0xe9,0xf3,0x00,0x20,0xd8,0x7e,0x22,0xd1,
	0x0c,0x9b,0xf5,0xf3,0xc2,0xe1,0xb2,0xbf,
	0xc8,0x4a,0x00,0x90,0xe9,0xff,0xcb,0xcb,
	0x15,0xa3,0xe9,0xff,0xc8,0x08,0x00,0x23,
	0xd8,0x7f,0x48,0x21,0xe1,0xe4,0x1b,0xc8,
	0x52,0xef,0x80,0xa9,0xc8,0x05,0x18,0x01,
	0x18,0x0b,0xa8,0x2a,0xa2,0xeb,0x15,0xa3,
	0xfa,0x0b,0xd8,0x41,0x22,0xa1,0xb1,0x7f,
	0xc8,0x05,0x38,0x14,0xe5,0xd8,0xe2,0x10,
	0x15,0x60,0xea,0x16,0xc0,0x58,0x30,0x53,
	0xfe,0x16,0xe2,0x1f,0x05,0xa0,0xd4,0x10,
	0x66,0x10,0x00,0xa9,0xd0,0x68,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xe4,
	0xd8,0x28,0x78,0x20,0x00,0x1d,0xea,0x2b,
	0xc0,0x58,0xc0,0x93,0x00,0x31,0xde,0x90,
	0x10,0x02,0xb0,0x3f,0x03,0xcc,0x02,0x20,
	0xdf,0xc0,0x00,0x70,0xd0,0x01,0xa0,0x37,
	0x80,0x3f,0xc0,0x00,0xc0,0x00,0xe2,0x31,
	0x06,0xee,0xd0,0x0c,0x70,0x40,0xb0,0x7f,
	0xec,0x06,0xd0,0x41,0x60,0x40,0x86,0x45,
	0x84,0x86,0x80,0x3f,0x06,0xee,0xd0,0x08,
	0x70,0x40,0x10,0x60,0xf8,0x1a,0x06,0xef,
	0xd0,0x34,0xd0,0x40,0x60,0x40,0x06,0xef,
	0xd0,0x38,0x60,0x40,0x06,0xee,0xd0,0x08,
	0xd0,0x41,0x60,0x40,0x06,0xef,0xd0,0x34,
	0x70,0x00,0x10,0x20,0xfc,0x25,0x00,0xaa,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0xa9,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x06,0xee,0xd0,0x10,0x70,0x40,0xb0,0x7f,
	0xec,0x06,0xd0,0x41,0x60,0x40,0x04,0xea,
	0xd0,0x00,0x70,0x40,0x10,0x70,0xf8,0x11,
	0x06,0xef,0xd0,0x18,0xd0,0x40,0x60,0x40,
	0xe0,0xae,0x05,0x28,0xd0,0x14,0x71,0x80,
	0x06,0xef,0xd0,0x20,0x71,0x40,0xc0,0x06,
	0x30,0x05,0xe8,0x24,0xc0,0x05,0xb0,0x30,
	0x01,0x2b,0xd0,0x68,0x30,0x40,0xec,0x22,
	0x00,0xef,0xd0,0x08,0x30,0x06,0xf8,0x2a,
	0x00,0xa7,0xd0,0x58,0xd0,0x12,0x00,0x60,
	0xd7,0xec,0x00,0x05,0x06,0xee,0xd0,0x34,
	0x70,0x00,0x00,0x2c,0xd2,0x20,0x10,0x20,
	0xe8,0x33,0x04,0x20,0xd2,0x00,0xc1,0xc5,
	0xd2,0x40,0xc3,0x47,0xf0,0xbe,0x10,0x20,
	0xe8,0x4d,0xd2,0x41,0xc3,0x0a,0xc3,0xc7,
	0xf0,0xbe,0x10,0x20,0xe8,0x4d,0xd2,0x42,
	0xc3,0x8a,0xc4,0x47,0xf0,0xbe,0x10,0x20,
	0xe8,0x4d,0xd2,0x43,0xc4,0x0a,0xc4,0xc7,
	0xf0,0xbe,0x10,0x20,0xe8,0x4d,0xd2,0x44,
	0xc4,0x8a,0x0a,0x09,0x02,0xcd,0x0a,0x09,
	0x12,0xc8,0x00,0x0d,0x52,0xc0,0x09,0xc9,
	0x12,0xc7,0x00,0x0d,0x52,0xc0,0xb2,0x01,
	0xe4,0xb4,0x08,0x49,0x12,0xc1,0x00,0x0d,
	0x52,0xc0,0xc1,0xcd,0xc0,0x0b,0x30,0x0c,
	0xe8,0x73,0x12,0x62,0xe4,0x57,0xc1,0xcf,
	0xc0,0x0b,0x30,0x0e,0xe8,0x73,0x12,0x63,
	0xe4,0x57,0xc1,0xd1,0xc0,0x0b,0x30,0x10,
	0xe8,0x73,0x12,0x64,0xe4,0x57,0xc1,0xd3,
	0xc0,0x0b,0x30,0x12,0xf8,0x57,0xb1,0xf8,
	0x70,0x47,0xb1,0xf8,0x01,0x2b,0xd0,0x28,
	0x30,0x07,0xec,0x7c,0x00,0xef,0xd1,0xc8,
	0xc0,0x06,0x30,0x07,0xe8,0xb4,0xb1,0xf8,
	0x70,0x87,0x30,0x81,0xf4,0x87,0x02,0x20,
	0xd0,0x00,0x10,0x05,0x20,0x80,0x06,0xef,
	0xd0,0x18,0x60,0x80,0xc0,0x4b,0x10,0x58,
	0x10,0x58,0x00,0x23,0xd0,0x3f,0x40,0x40,
	0x06,0xef,0xd0,0x3c,0x60,0x40,0x0f,0xef,
	0xd0,0x3f,0x42,0xc0,0x07,0x20,0xd0,0x00,
	0x12,0xe0,0xec,0x9c,0x08,0x20,0xd2,0xc0,
	0x62,0xc0,0x06,0xee,0xd0,0x1c,0x70,0x40,
	0xb0,0x7f,0x60,0x40,0xb1,0xc8,0x06,0xef,
	0xd0,0x20,0x61,0xc0,0x06,0xee,0xd0,0x34,
	0xd0,0x40,0x60,0x40,0x06,0xef,0xd0,0x1c,
	0xd0,0x40,0x60,0x40,0x00,0xaa,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x06,0xee,0xd0,0x34,0xd0,0x41,0x60,0x40,
	0x00,0xa7,0xd0,0x58,0xd0,0x12,0x00,0x60,
	0xd7,0xe4,0x00,0x05,0xb1,0xf4,0x72,0x87,
	0xb1,0xfc,0x01,0x2b,0xd0,0x68,0x30,0x47,
	0xec,0xc7,0x00,0xef,0xd1,0xc8,0xd0,0x00,
	0xc0,0x46,0x30,0x47,0xe8,0xcc,0xd0,0x01,
	0x07,0xc5,0x00,0x00,0x06,0xee,0xd0,0x14,
	0x70,0x40,0x10,0x60,0xb0,0x7f,0x60,0x40,
	0x04,0xea,0xd0,0x2c,0xd0,0x42,0x60,0x40,
	0x06,0xef,0xd0,0x1c,0x70,0x40,0x10,0x60,
	0xed,0x83,0x08,0x49,0x07,0x20,0xd0,0x04,
	0x02,0x4d,0x62,0x40,0x00,0x60,0xd0,0x00,
	0x62,0x40,0x08,0x49,0x07,0x20,0xd0,0x08,
	0x02,0x8d,0x62,0x80,0x00,0x60,0xd0,0x04,
	0x62,0x80,0x08,0x49,0x00,0x4d,0x09,0x49,
	0x07,0x20,0xd0,0x0c,0x02,0xcd,0x62,0xc0,
	0x00,0x60,0xd0,0x08,0x62,0xc0,0x08,0x89,
	0x07,0x20,0xd0,0x10,0x01,0xcd,0x61,0xc0,
	0x00,0x60,0xd0,0x0c,0x61,0xc0,0x08,0x89,
	0x07,0x20,0xd0,0x14,0x0b,0xcd,0x6b,0xc0,
	0x00,0x60,0xd0,0x10,0x6b,0xc0,0x08,0x49,
	0x00,0x4d,0x08,0xc9,0x07,0x20,0xd0,0x18,
	0x0c,0x0d,0x6c,0x00,0x00,0x60,0xd0,0x14,
	0x6c,0x00,0x0a,0x09,0x03,0x0d,0x00,0x60,
	0xd0,0x18,0x63,0x00,0x00,0x20,0xd0,0x5f,
	0x40,0x4c,0x10,0x5c,0x00,0x23,0xd0,0x20,
	0x40,0x0c,0x10,0x1b,0x30,0x01,0xd0,0x44,
	0x30,0x40,0x10,0x42,0x07,0x20,0xd0,0x20,
	0x60,0x40,0xdc,0x81,0x11,0xe0,0xe5,0x78,
	0x11,0xe2,0xed,0x78,0x1b,0xe0,0xe5,0x78,
	0x1b,0xe1,0xed,0x78,0x1c,0x20,0xe5,0x78,
	0x1c,0x27,0xed,0x78,0x1c,0x20,0xe8,0x75,
	0x1c,0x21,0xe8,0x85,0x1c,0x22,0xe8,0x98,
	0x1c,0x23,0xe8,0xab,0x1c,0x24,0xe8,0xbe,
	0x1c,0x25,0xe8,0xd1,0x1c,0x26,0xe8,0xde,
	0x1c,0x27,0xe8,0xe5,0xe1,0x78,0x00,0x6f,
	0xd3,0x58,0xdc,0x48,0x11,0xe0,0xe8,0xec,
	0x00,0x6f,0xd3,0x5a,0xdc,0x4a,0x11,0xe1,
	0xe8,0xec,0x00,0x6f,0xd3,0x5a,0xdc,0x4c,
	0x11,0xe2,0xe8,0xec,0xe1,0x78,0x00,0x6f,
	0xd3,0x58,0x00,0x20,0xdc,0x50,0x11,0xe0,
	0xe8,0xec,0x00,0x6f,0xd3,0x5a,0x00,0x20,
	0xdc,0x54,0x11,0xe1,0xe8,0xec,0x00,0x6f,
	0xd3,0x54,0x00,0x20,0xdc,0x58,0x11,0xe2,
	0xe8,0xec,0xe1,0x78,0x00,0x6f,0xd3,0x54,
	0x00,0x20,0xdc,0x58,0x11,0xe0,0xe8,0xec,
	0x00,0x6f,0xd3,0x5a,0x00,0x20,0xdc,0x5e,
	0x11,0xe1,0xe8,0xec,0x00,0x6f,0xd3,0x4e,
	0x00,0x20,0xdc,0x64,0x11,0xe2,0xe8,0xec,
	0xe1,0x78,0x00,0x6f,0xd3,0x50,0x00,0x20,
	0xdc,0x60,0x11,0xe0,0xe8,0xec,0x00,0x6f,
	0xd3,0x50,0x00,0x20,0xdc,0x68,0x11,0xe1,
	0xe8,0xec,0x00,0x6f,0xd3,0x48,0x00,0x20,
	0xdc,0x5c,0x11,0xe2,0xe8,0xec,0xe1,0x78,
	0x00,0x6f,0xd3,0x50,0x00,0x20,0xdc,0x68,
	0x11,0xe0,0xe8,0xec,0x00,0x6f,0xd3,0x50,
	0x00,0x20,0xdc,0x72,0x11,0xe1,0xe8,0xec,
	0x00,0x6f,0xd3,0x5a,0x00,0x20,0xdc,0x7c,
	0x11,0xe2,0xe8,0xec,0xe1,0x78,0x00,0x6f,
	0xd3,0x48,0x00,0x20,0xdc,0x70,0x11,0xe0,
	0xe8,0xec,0x00,0x6f,0xd3,0x5a,0x00,0x20,
	0xdc,0x7c,0x11,0xe1,0xe8,0xec,0xe1,0x78,
	0x00,0x6f,0xd3,0x44,0x00,0x20,0xdc,0x78,
	0x11,0xe0,0xe8,0xec,0xe1,0x78,0x00,0x6f,
	0xd3,0x40,0x00,0x21,0xdc,0x40,0x11,0xe0,
	0xe8,0xec,0xe1,0x78,0x07,0x20,0xd0,0x34,
	0x70,0x40,0x63,0x40,0x07,0x20,0xd0,0x38,
	0x70,0x80,0x6c,0x40,0x30,0x4d,0xf8,0xf9,
	0x30,0xb1,0xf8,0xf9,0xe1,0x00,0x00,0x2b,
	0xd0,0x38,0x70,0x40,0x10,0x62,0xfd,0x00,
	0xdc,0x82,0xe1,0x78,0xc3,0x8d,0xb3,0xba,
	0x04,0xea,0xd0,0x00,0x70,0x00,0x10,0x30,
	0xe9,0x0d,0x06,0xef,0xd0,0x18,0x70,0x00,
	0x10,0x20,0xe9,0x0d,0xc3,0x80,0xc0,0x4e,
	0xb0,0x46,0x30,0x4d,0xe9,0x13,0xc3,0x4e,
	0xb3,0x46,0x05,0x6b,0xd0,0x18,0xc0,0x40,
	0x00,0x6f,0xd0,0x24,0x60,0x01,0x05,0x6b,
	0xd0,0x1c,0xd0,0x41,0x60,0x40,0x04,0xeb,
	0xd0,0x04,0x70,0x40,0xd0,0x20,0x40,0x40,
	0xf9,0x2e,0x1b,0xe0,0xe9,0x29,0xdb,0xc4,
	0x07,0x20,0xd0,0x14,0x6b,0xc0,0x06,0xee,
	0xd0,0x3c,0xd0,0x50,0x60,0x40,0xe1,0x32,
	0x06,0xee,0xd0,0x3c,0xd0,0x40,0x60,0x40,
	0xd0,0x40,0x1b,0xe0,0xe9,0x38,0x1b,0xe4,
	0xe9,0x38,0xd0,0x43,0x05,0x6b,0xd0,0x10,
	0x60,0x40,0x06,0xee,0xd0,0x3c,0x70,0x40,
	0x10,0x60,0xfd,0x4c,0xd0,0x81,0x10,0x70,
	0xe9,0x56,0xd0,0x83,0x10,0x74,0xe9,0x56,
	0xd0,0x84,0x10,0x78,0xe9,0x56,0xd0,0x81,
	0xd0,0x50,0xe1,0x56,0xd0,0x81,0xd0,0x50,
	0x11,0xe0,0xe9,0x56,0xd0,0x83,0xd0,0x54,
	0x11,0xe1,0xe9,0x56,0xd0,0x84,0xd0,0x58,
	0x1b,0xe4,0xf9,0x5a,0xd0,0x81,0xd0,0x50,
	0x04,0xea,0xd0,0x30,0x60,0x40,0x05,0x6b,
	0xd0,0x14,0x60,0x80,0x05,0x6b,0xd0,0x20,
	0xd0,0x82,0x10,0x70,0xe9,0x66,0xd0,0x83,
	0x60,0x80,0x06,0xef,0xd0,0x2c,0x63,0x40,
	0x06,0xef,0xd0,0x30,0x6c,0x40,0x06,0xef,
	0xd0,0x34,0xc0,0x4d,0x10,0x41,0x60,0x40,
	0x00,0xaa,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x06,0xee,0xd0,0x28,
	0x70,0x40,0xb0,0x7f,0x60,0x40,0x07,0x20,
	0x6c,0xbc,0xc0,0x4e,0xb0,0x46,0xed,0x83,
	0xc0,0x4d,0x00,0x6f,0xd0,0x24,0xb0,0x0c,
	0xc0,0x80,0xc0,0xc1,0x30,0x42,0xe5,0x8b,
	0xd0,0x40,0x20,0x42,0x30,0xc1,0x06,0xef,
	0xd0,0x1c,0x60,0xc0,0x0a,0x09,0x00,0x0d,
	0xb0,0x41,0xed,0x90,0x06,0xef,0xd0,0x34,
	0xd0,0x40,0x60,0x40,0x00,0xa7,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xe4,0x00,0x05,
	0x00,0x0f,0xff,0xfc,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x10,0x00,0x0f,0xff,0xf4,
	0x00,0x0f,0xff,0xd8,0x00,0x00,0x00,0x20,
	0x00,0x00,0x00,0x48,0x00,0x0f,0xff,0xb8,
	0x00,0x0f,0xff,0x8c,0x00,0x00,0x00,0x8c,
	0x00,0x00,0x00,0xa8,0x00,0x0f,0xff,0x00,
	0x00,0x0f,0xff,0x20,0x00,0x00,0x01,0xac,
	0x00,0x00,0x01,0x0c,0x00,0x0f,0xfd,0x58,
	0x00,0x0f,0xfe,0xe4,0x00,0x00,0x03,0xfc,
	0x00,0x00,0x00,0xf4,0x00,0x0f,0xfa,0x48,
	0x00,0x0f,0xff,0x90,0x00,0x00,0x07,0xe8,
	0x00,0x0f,0xff,0x68,0x00,0x0f,0xf5,0x74,
	0x00,0x00,0x02,0x64,0x00,0x00,0x0d,0xa0,
	0x00,0x0f,0xfa,0xcc,0x00,0x0f,0xee,0xe8,
	0x00,0x00,0x09,0x58,0x00,0x00,0x14,0xd8,
	0x00,0x0f,0xf0,0xc4,0x00,0x0f,0xe7,0x3c,
	0x00,0x00,0x17,0x70,0x00,0x00,0x1c,0xb0,
	0x00,0x0f,0xdd,0x20,0x00,0x0f,0xdf,0x94,
	0x00,0x00,0x33,0x28,0x00,0x00,0x23,0xd4,
	0x00,0x0f,0xb4,0x4c,0x00,0x0f,0xd9,0x54,
	0x00,0x00,0x75,0x6c,0x00,0x00,0x28,0xd8,
	0x00,0x0f,0x2e,0xb0,0x00,0x0f,0xd5,0xcc,
	0x00,0x02,0x89,0x2c,0x00,0x04,0x2a,0xa0,
	0x00,0x02,0x89,0x2c,0x00,0x0f,0xd5,0xcc,
	0x00,0x0f,0x2e,0xb0,0x00,0x00,0x28,0xd8,
	0x00,0x00,0x75,0x6c,0x00,0x0f,0xd9,0x54,
	0x00,0x0f,0xb4,0x4c,0x00,0x00,0x23,0xd4,
	0x00,0x00,0x33,0x28,0x00,0x0f,0xdf,0x94,
	0x00,0x0f,0xdd,0x20,0x00,0x00,0x1c,0xb0,
	0x00,0x00,0x17,0x70,0x00,0x0f,0xe7,0x3c,
	0x00,0x0f,0xf0,0xc4,0x00,0x00,0x14,0xd8,
	0x00,0x00,0x09,0x58,0x00,0x0f,0xee,0xe8,
	0x00,0x0f,0xfa,0xcc,0x00,0x00,0x0d,0xa0,
	0x00,0x00,0x02,0x64,0x00,0x0f,0xf5,0x74,
	0x00,0x0f,0xff,0x68,0x00,0x00,0x07,0xe8,
	0x00,0x0f,0xff,0x90,0x00,0x0f,0xfa,0x48,
	0x00,0x00,0x00,0xf4,0x00,0x00,0x03,0xfc,
	0x00,0x0f,0xfe,0xe4,0x00,0x0f,0xfd,0x58,
	0x00,0x00,0x01,0x0c,0x00,0x00,0x01,0xac,
	0x00,0x0f,0xff,0x20,0x00,0x0f,0xff,0x00,
	0x00,0x00,0x00,0xa8,0x00,0x00,0x00,0x8c,
	0x00,0x0f,0xff,0x8c,0x00,0x0f,0xff,0xb8,
	0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x20,
	0x00,0x0f,0xff,0xd8,0x00,0x0f,0xff,0xf4,
	0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,
	0x00,0x0f,0xff,0xfc,0x06,0xee,0xd0,0x18,
	0x70,0x40,0xb0,0x7f,0x60,0x40,0xd3,0x80,
	0xd3,0x40,0xdb,0x80,0x04,0xea,0xd0,0x30,
	0x73,0x00,0x13,0x38,0xe8,0x14,0x13,0x34,
	0xe8,0x14,0x13,0x32,0xe8,0x14,0x13,0x30,
	0xe8,0x14,0xd3,0x10,0x07,0x20,0xd0,0x00,
	0x71,0x80,0x07,0x20,0xd0,0x10,0x71,0xc0,
	0x07,0x20,0xd0,0x14,0x7b,0xc0,0x07,0x20,
	0xd0,0x18,0x7c,0x00,0x06,0xef,0xd0,0x30,
	0x7c,0x40,0x06,0xef,0xd0,0x34,0x72,0xc0,
	0x07,0x20,0xd0,0x1c,0x71,0x40,0x00,0x23,
	0xd0,0x34,0x70,0x40,0x07,0x20,0x70,0x08,
	0x10,0x20,0xe8,0x32,0x00,0x21,0xd0,0x60,
	0x10,0x60,0xd0,0x83,0x40,0x81,0x10,0x5e,
	0xd0,0x00,0x30,0x01,0x10,0x02,0x20,0x02,
	0x21,0x40,0xd0,0x58,0x11,0xe2,0xe8,0x42,
	0xd0,0x54,0x11,0xe1,0xe8,0x42,0xd0,0x50,
	0xc0,0x0c,0x30,0x01,0xc0,0x45,0x10,0x5e,
	0x20,0x01,0x10,0x02,0xd0,0x43,0x41,0x41,
	0x21,0x40,0x07,0x20,0xd0,0x24,0x61,0x40,
	0xdb,0x00,0xdb,0x40,0x1b,0xe4,0xf8,0xb9,
	0x82,0x27,0x84,0x29,0x80,0x2a,0x00,0xaa,
	0xd0,0x48,0x70,0x41,0x00,0x20,0xd0,0xae,
	0x10,0x82,0xb0,0x84,0x00,0x8a,0x7a,0xc1,
	0x20,0x42,0xb0,0x7c,0xb0,0x84,0x00,0x8a,
	0x7a,0xc1,0x01,0x46,0x00,0x64,0xd0,0x01,
	0xa0,0x38,0x80,0x3f,0x00,0xc6,0x00,0x65,
	0xdf,0x53,0x01,0x46,0x00,0x20,0xd0,0x47,
	0xd0,0x01,0x10,0x0b,0x50,0x01,0xa0,0x36,
	0x90,0xb4,0x10,0xa0,0x06,0xef,0xd0,0x08,
	0x60,0x80,0x06,0xef,0xd0,0x0c,0x6c,0x80,
	0x00,0x66,0xdc,0x8f,0xa0,0x76,0x00,0xe2,
	0xd0,0x05,0xa0,0x34,0x00,0xc6,0x00,0x21,
	0xd0,0x00,0xa0,0x27,0x08,0x30,0xd0,0x00,
	0x10,0x02,0xa0,0x29,0x07,0x20,0xd0,0x28,
	0x7b,0x80,0xc0,0xee,0x02,0x26,0xd0,0x14,
	0xca,0xc0,0x10,0xe0,0xfc,0xb3,0xd0,0x60,
	0xc0,0x81,0x30,0xc1,0xf4,0x97,0xc0,0x83,
	0x20,0x81,0x10,0x82,0x0b,0xf0,0xd0,0x20,
	0xc0,0x6d,0x10,0x48,0x50,0x40,0xa0,0x6c,
	0x80,0x3f,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x02,0xb0,0x04,0x00,0x0a,0x7a,0xeb,
	0x2a,0xc2,0xc0,0x02,0x10,0x1f,0x2b,0x40,
	0x00,0x23,0xd0,0x3f,0x4b,0x40,0x00,0x06,
	0xe0,0x8f,0x0b,0xf0,0xd0,0x00,0xc0,0x6d,
	0x10,0x48,0x50,0x40,0xa0,0x6c,0x07,0x20,
	0xd0,0x28,0xd0,0xc0,0x60,0xc0,0x00,0x29,
	0xd0,0x28,0x7a,0x40,0x00,0x29,0xd0,0x2c,
	0x7a,0x80,0x06,0xef,0xd0,0x38,0x7a,0xc0,
	0x1a,0xe0,0xf8,0xc9,0xca,0xe9,0x01,0x46,
	0x02,0x46,0xca,0x3b,0x2a,0x15,0x02,0x06,
	0x00,0xc6,0xc0,0x28,0x30,0x2a,0xe4,0xd4,
	0x3a,0x2a,0x2a,0x29,0xc0,0x2b,0x30,0x28,
	0xe8,0xdd,0xca,0xe8,0x06,0xee,0xd0,0x30,
	0x70,0x40,0xb0,0x7f,0x60,0x40,0x00,0xaa,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x00,0xc0,0x0b,0x30,0x31,
	0xe5,0x34,0xc0,0xc5,0x10,0xde,0x10,0xe0,
	0xe4,0x0d,0x10,0xf0,0xe4,0x16,0xb0,0xcf,
	0x10,0xc5,0xb0,0xf1,0xe0,0x16,0xd0,0x80,
	0xd0,0x50,0x20,0x43,0x10,0x60,0xec,0x14,
	0xd0,0x90,0xc0,0xc1,0x10,0xc5,0x50,0xc2,
	0xd8,0x00,0x1b,0xe4,0xf8,0x1c,0x00,0x64,
	0xd0,0x00,0xa0,0x38,0x00,0x67,0xd2,0x4a,
	0x00,0xe7,0xd2,0x0a,0xa2,0x76,0xd2,0xa8,
	0x00,0x23,0xd2,0x88,0xd0,0x03,0x40,0x2f,
	0xe8,0x28,0x12,0x81,0xc0,0x0b,0x30,0x31,
	0xe4,0xf9,0x31,0xb1,0x31,0xb1,0x07,0xc9,
	0x03,0xcd,0x13,0xc8,0x13,0xd8,0xc4,0x0f,
	0x1c,0x20,0xe8,0x3b,0x07,0xc9,0x04,0x0d,
	0x14,0x08,0x14,0x18,0x1c,0x21,0xe8,0x3b,
	0xf1,0xb4,0x07,0xc9,0x05,0xcd,0x15,0xc8,
	0x15,0xd8,0xc6,0x17,0x1c,0x20,0xe8,0x49,
	0x07,0xc9,0x06,0x0d,0x16,0x08,0x16,0x18,
	0x1c,0x21,0xe8,0x49,0xf1,0xb4,0x11,0xe1,
	0xe8,0x4e,0x11,0xe2,0xe8,0x6d,0xe0,0x8b,
	0x09,0x09,0x13,0xc4,0x00,0x0d,0x53,0xc0,
	0x1c,0x20,0xe8,0x5c,0x09,0x09,0x14,0x04,
	0x00,0x0d,0x54,0x00,0x1c,0x21,0xe8,0x5d,
	0xf1,0xbb,0xe0,0x5d,0xc4,0x0f,0x09,0x09,
	0x15,0xc4,0x00,0x0d,0x55,0xc0,0x1c,0x20,
	0xe8,0x6b,0x09,0x09,0x16,0x04,0x00,0x0d,
	0x56,0x00,0x1c,0x21,0xe8,0x8b,0xf1,0xbb,
	0xe0,0x8b,0xc6,0x17,0xe0,0x8b,0x0a,0x09,
	0x13,0xc8,0x00,0x0d,0x53,0xc0,0x1c,0x20,
	0xe8,0x7b,0x0a,0x09,0x14,0x08,0x00,0x0d,
	0x54,0x00,0x1c,0x21,0xe8,0x7c,0xf1,0xc2,
	0xe0,0x7c,0xc4,0x0f,0x0a,0x09,0x15,0xc8,
	0x00,0x0d,0x55,0xc0,0x1c,0x20,0xe8,0x8a,
	0x0a,0x09,0x16,0x08,0x00,0x0d,0x56,0x00,
	0x1c,0x21,0xe8,0x8b,0xf1,0xc2,0xe0,0x8b,
	0xc6,0x17,0xd0,0x1f,0x40,0x03,0x13,0xc0,
	0x14,0x00,0x15,0xc0,0x16,0x00,0xc0,0x03,
	0x10,0x1b,0x13,0xc0,0x14,0x00,0x15,0xc0,
	0x16,0x00,0xd0,0x03,0x40,0x05,0x10,0x21,
	0xe8,0xa0,0x10,0x22,0xe8,0xb1,0x10,0x23,
	0xe8,0xc2,0xe0,0xd2,0x13,0xdf,0xc0,0x0f,
	0x13,0xdf,0x23,0xc0,0x15,0xdf,0xc0,0x17,
	0x15,0xdf,0x25,0xc0,0x14,0x1f,0xc0,0x10,
	0x14,0x1f,0x24,0x00,0x16,0x1f,0xc0,0x18,
	0x16,0x1f,0x26,0x00,0xe0,0xd2,0x13,0xdf,
	0xc0,0x0f,0x13,0xde,0x23,0xc0,0x15,0xdf,
	0xc0,0x17,0x15,0xde,0x25,0xc0,0x14,0x1f,
	0xc0,0x10,0x14,0x1e,0x24,0x00,0x16,0x1f,
	0xc0,0x18,0x16,0x1e,0x26,0x00,0xe0,0xd2,
	0x13,0xdf,0xc0,0x0f,0x13,0xdd,0x23,0xc0,
	0x15,0xdf,0xc0,0x17,0x15,0xdd,0x25,0xc0,
	0x14,0x1f,0xc0,0x10,0x14,0x1d,0x24,0x00,
	0x16,0x1f,0xc0,0x18,0x16,0x1d,0x26,0x00,
	0x13,0x30,0xf8,0xda,0xa3,0xf4,0xa4,0x34,
	0xa5,0xf4,0xa6,0x34,0xb3,0x78,0xe0,0xeb,
	0xc0,0x8f,0x10,0x90,0xa0,0xb4,0xa3,0xf4,
	0xc0,0x90,0x10,0x90,0xa0,0xb4,0xa4,0x34,
	0xc0,0x97,0x10,0x90,0xa0,0xb4,0xa5,0xf4,
	0xc0,0x98,0x10,0x90,0xa0,0xb4,0xa6,0x34,
	0xb3,0x70,0xd0,0x3f,0x30,0x0d,0xec,0xef,
	0xf1,0x05,0x32,0xf1,0xb2,0x81,0xec,0x28,
	0x11,0xa0,0xe4,0xf9,0x06,0xee,0x70,0x38,
	0xb3,0xbf,0x30,0x0e,0xec,0x21,0xf1,0x05,
	0x18,0x20,0xf8,0xfa,0x00,0x64,0xd0,0x01,
	0xa0,0x38,0x00,0xaa,0xd0,0x60,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x1b,0xe4,
	0xe9,0x3a,0x13,0x60,0xfd,0x2e,0x00,0x21,
	0xd0,0x80,0xc0,0x0d,0x30,0x02,0xf5,0x0f,
	0xc0,0x8d,0xc0,0x2a,0x30,0x2b,0x30,0x02,
	0xf5,0x15,0x20,0x02,0xc0,0x80,0x01,0x46,
	0xa2,0x36,0xc0,0x02,0xb0,0x04,0x00,0x0a,
	0x6d,0x2b,0xc0,0x02,0x10,0x1f,0x22,0x00,
	0x00,0x06,0x00,0xc6,0x2a,0xc2,0xc0,0x2b,
	0x30,0x2a,0xe5,0x25,0xca,0xe9,0x01,0x46,
	0xca,0x02,0x02,0x46,0x25,0x68,0x25,0xa8,
	0x02,0x06,0x00,0xc6,0x33,0x42,0xe1,0x05,
	0x00,0x67,0xd2,0x4a,0x00,0xe7,0xd2,0x0a,
	0xa2,0x76,0x07,0xc5,0x00,0xaa,0xd0,0x40,
	0xd0,0x12,0x00,0x65,0xd7,0xf8,0x00,0x05,
	0x13,0x60,0xfd,0x4d,0xd0,0x43,0x40,0x60,
	0xf9,0x3c,0x01,0x46,0xa2,0x36,0x00,0xef,
	0xd0,0x3c,0x20,0x0d,0x02,0x26,0xd0,0x54,
	0x00,0x0a,0x6d,0x01,0x00,0x06,0x04,0x11,
	0xc8,0x4d,0xd3,0x40,0x00,0xc6,0x00,0x67,
	0xd2,0x4a,0x00,0xe7,0xd2,0x0a,0xa2,0x76,
	0x07,0xc5,0x00,0x13,0xe9,0x5b,0x08,0x13,
	0xda,0x20,0x02,0x46,0x25,0x68,0x25,0xa8,
	0x02,0x86,0x00,0x10,0xe9,0x5f,0x04,0x14,
	0xe1,0x8e,0x00,0x12,0xe9,0x75,0x08,0x12,
	0x00,0x21,0xd0,0x0d,0x30,0x2e,0xed,0x75,
	0xd8,0xc0,0x05,0xd7,0xa8,0xe9,0x0f,0xf0,
	0xd0,0x00,0xca,0x2c,0x1a,0x08,0x50,0x28,
	0x00,0x21,0x50,0x03,0x80,0x3f,0xa0,0x2c,
	0x04,0x10,0xbb,0x90,0x0f,0x87,0x00,0x11,
	0xe9,0x8e,0x08,0x11,0x04,0x12,0x0b,0xf0,
	0xd0,0x20,0xca,0x2d,0x1a,0x08,0x5a,0x00,
	0xaa,0x2c,0x00,0xef,0xd0,0x3c,0x20,0x21,
	0x80,0x3f,0x02,0x26,0xd7,0xd4,0x00,0x0a,
	0x7a,0xdf,0x18,0x5f,0x2b,0x61,0x00,0x23,
	0x4b,0x7f,0x18,0x5f,0x2b,0xa1,0xd8,0x40,
	0x0f,0x87,0x08,0x10,0x06,0xee,0xda,0x20,
	0x00,0x14,0xf9,0x96,0x06,0xee,0xda,0x24,
	0x70,0x28,0xb0,0x3f,0x60,0x28,0x08,0x14,
	0x0b,0xb0,0xd0,0x20,0xca,0x2c,0x1a,0x08,
	0x5a,0x00,0xaa,0x2c,0x80,0x3f,0x00,0x20,
	0xda,0x20,0x00,0xef,0xd0,0x3c,0x20,0x28,
	0xe1,0xa7,0xe1,0xa8,0x00,0x0a,0x6a,0xeb,
	0x2a,0xe8,0xc0,0x2b,0x30,0x2a,0xe5,0xaf,
	0xca,0xe9,0x2b,0x28,0x00,0x23,0x4b,0x3f,
	0x04,0x13,0x0f,0x87,0xc0,0x30,0xb0,0x02,
	0x07,0xc9,0x05,0x8d,0xb0,0x01,0xf5,0xb6,
	0x07,0xc5,0xc0,0x30,0xb0,0x02,0x09,0x09,
	0x05,0x8d,0xb0,0x01,0xf5,0xbd,0x07,0xc5,
	0xc0,0x30,0xb0,0x02,0x0a,0x09,0x05,0x8d,
	0xb0,0x01,0xf5,0xc4,0x07,0xc5,0x00,0x00,
	0x06,0xef,0xd0,0x38,0x6a,0xc0,0x06,0xef,
	0xd0,0x34,0x62,0xc0,0x07,0x20,0xd0,0x00,
	0x61,0x80,0x07,0x20,0xd0,0x28,0x6b,0x80,
	0x1b,0xa0,0xfc,0x35,0x02,0x26,0xd0,0x14,
	0xc0,0xc0,0x1b,0xa0,0xfc,0x35,0xd0,0x60,
	0xc0,0x81,0x3b,0x81,0xf4,0x19,0xc0,0xae,
	0x20,0x81,0x10,0x82,0x0b,0xb0,0xd0,0x20,
	0xc0,0x6c,0x10,0x48,0x50,0x40,0xa0,0x6c,
	0x80,0x3f,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x02,0xb0,0x04,0x00,0x0a,0x6a,0xc3,
	0x20,0xc2,0xc0,0x02,0x10,0x1f,0x2b,0x00,
	0x00,0x23,0xd0,0x3f,0x4b,0x00,0x00,0x06,
	0xe0,0x11,0x0b,0xf0,0xd0,0x00,0xa0,0x2c,
	0x1b,0xe4,0xf8,0x64,0x01,0x46,0x06,0xef,
	0xd0,0x00,0x70,0x40,0x10,0x60,0x82,0x76,
	0xa0,0x74,0x80,0x3f,0x06,0xef,0xd0,0x04,
	0x7c,0xc0,0x1c,0xe0,0x00,0x60,0xd0,0x01,
	0xa0,0x38,0x00,0x60,0xd0,0x00,0xa0,0x37,
	0x80,0x3f,0x00,0xc6,0xc0,0x00,0xc0,0x00,
	0x01,0x46,0x06,0xef,0xd0,0x08,0x70,0x40,
	0x10,0x60,0x81,0xf6,0xa0,0x74,0x80,0x3f,
	0x06,0xef,0xd0,0x0c,0x7c,0x80,0x1c,0xa0,
	0x00,0x24,0xd0,0x01,0xa0,0x38,0x00,0x24,
	0xd0,0x00,0xa0,0x37,0x80,0x3f,0x00,0xc6,
	0x11,0xa0,0xec,0x80,0x06,0xee,0xd0,0x2c,
	0x70,0x40,0xb0,0x7f,0x60,0x40,0x07,0x20,
	0xd0,0x04,0x70,0x40,0x10,0x60,0x05,0xa1,
	0xd0,0x00,0x60,0x40,0x07,0x20,0xd0,0x20,
	0x70,0x40,0x10,0x60,0x07,0x20,0xd0,0x1c,
	0x60,0x40,0x07,0x20,0xd0,0x00,0x08,0x20,
	0xd1,0x80,0x61,0x80,0xe0,0x86,0xc0,0x00,
	0x00,0xa7,0xd0,0x58,0xd0,0x12,0x00,0x60,
	0xd7,0xec,0x00,0x05,0x00,0xa7,0xd0,0x58,
	0xd0,0x12,0x00,0x60,0xd7,0xfa,0x00,0x05,
	0x00,0xe9,0x70,0x48,0xb0,0x7f,0x00,0xe9,
	0x60,0x48,0x04,0xea,0x71,0xa8,0x05,0x27,
	0x75,0x7c,0x05,0x6b,0x71,0xd4,0x11,0xe1,
	0xe4,0x0f,0x11,0xe4,0xfc,0x10,0xd1,0xc1,
	0x04,0xea,0x75,0x2c,0x11,0xa2,0xf8,0x15,
	0xd5,0x06,0x05,0x6b,0x70,0x70,0x10,0x60,
	0xe8,0x1a,0xd5,0x02,0xc4,0xd4,0x00,0x22,
	0x70,0x70,0xd0,0x81,0x40,0x42,0xe8,0x21,
	0xd4,0xc2,0x00,0x29,0x72,0x68,0x00,0x29,
	0x72,0xac,0x04,0xee,0x74,0x84,0x14,0xa2,
	0xf8,0x55,0x00,0x23,0x70,0x6c,0x10,0x5e,
	0x05,0x6b,0x60,0x50,0x10,0x60,0xe8,0x36,
	0x10,0x61,0xe8,0x38,0x10,0x62,0xe8,0x3a,
	0x10,0x63,0xe8,0x3c,0xd0,0xcc,0xe0,0x3d,
	0xd0,0xc8,0xe0,0x3d,0xd0,0xce,0xe0,0x3d,
	0xd0,0xca,0x01,0x46,0x01,0x20,0xd0,0x30,
	0xa0,0x00,0x80,0x3f,0x00,0xe7,0x78,0x28,
	0x00,0x15,0xe8,0x53,0xb0,0xc8,0x05,0x6e,
	0x60,0xd8,0x00,0x23,0x70,0x50,0x10,0x47,
	0x20,0xc1,0x98,0x01,0x00,0x16,0xe8,0x53,
	0x00,0x21,0xd8,0x00,0x50,0xe0,0xa0,0xc1,
	0x00,0xc6,0xc0,0x4a,0x30,0x49,0x05,0x6a,
	0x60,0x70,0x04,0xeb,0x78,0x04,0x00,0x10,
	0xf8,0x65,0x11,0xa2,0xe8,0x7c,0x11,0xa3,
	0xf8,0x65,0x00,0xe7,0x78,0x68,0x00,0x97,
	0xf8,0x7c,0x14,0xa2,0xe8,0x69,0x03,0x9e,
	0xe8,0xc5,0xd0,0x40,0x05,0x25,0x60,0x6c,
	0x82,0x78,0x80,0x3f,0xd7,0xd2,0x00,0x67,
	0xd0,0x40,0x07,0xc4,0xc6,0x4a,0x00,0x25,
	0xd6,0x8c,0xf2,0x37,0xc6,0x49,0x00,0x25,
	0xd6,0x90,0xf2,0x37,0x0b,0x9e,0xe0,0xc4,
	0x14,0xa2,0xe8,0x7e,0xd0,0x41,0x05,0x25,
	0x60,0x64,0x11,0xa3,0xe8,0x9d,0x05,0x25,
	0x70,0x6c,0x10,0x61,0xe8,0xc5,0xd0,0x41,
	0x05,0x25,0x60,0x6c,0x82,0x78,0x80,0x3f,
	0xd7,0xd2,0x00,0x66,0xd0,0x70,0x07,0xc4,
	0x00,0x29,0x70,0x64,0xc6,0x41,0x00,0x25,
	0xd6,0x98,0xf2,0x37,0x00,0x29,0x70,0x60,
	0xc6,0x41,0x00,0x25,0xd6,0xaa,0xf2,0x37,
	0xe0,0xbb,0x05,0x25,0x70,0x6c,0x10,0x62,
	0xe8,0xc5,0xd0,0x42,0x05,0x25,0x60,0x6c,
	0xd0,0x40,0x05,0xa1,0x60,0x5c,0x82,0x78,
	0x80,0x3f,0xd7,0xd2,0x00,0x66,0xd0,0x78,
	0x07,0xc4,0x00,0x29,0xd0,0x64,0x70,0x41,
	0xc6,0x41,0x00,0x25,0xd6,0x8d,0xf2,0x37,
	0x00,0x29,0xd0,0x60,0x70,0x41,0xc6,0x41,
	0x00,0x25,0xd6,0x9f,0xf2,0x37,0x07,0x9e,
	0xd0,0x40,0x05,0x25,0x60,0x5c,0x06,0xe5,
	0x60,0x54,0x06,0xe5,0x60,0x58,0x0b,0x99,
	0xd4,0x8a,0x07,0x1d,0x00,0x11,0xe8,0xd3,
	0x00,0x10,0xe8,0xd2,0x11,0xa2,0xf8,0xd2,
	0x00,0x24,0x70,0x50,0x10,0x60,0xe8,0xd2,
	0x10,0x62,0xf8,0xd3,0xf2,0x4e,0x07,0x1c,
	0x00,0x12,0xe8,0xd7,0xf2,0x49,0x04,0xea,
	0x78,0x7c,0x14,0xe2,0xe8,0xe2,0x14,0xe4,
	0xe8,0xe1,0x14,0xe6,0xf8,0xe2,0x04,0x9a,
	0xe0,0xe2,0x04,0x99,0x11,0xa2,0xe8,0xe5,
	0xe0,0xe6,0x04,0x9f,0x03,0x9e,0xf8,0xe9,
	0x04,0xd0,0x08,0xd1,0x08,0xd2,0xc0,0x47,
	0xb0,0x41,0x10,0x4a,0x10,0x47,0x58,0x41,
	0x08,0xd4,0x11,0xa2,0xe8,0xf4,0xe0,0xf5,
	0x04,0xd4,0xc8,0xe1,0x05,0x24,0x78,0x7c,
	0x05,0x24,0x68,0xfc,0x01,0xf8,0xd7,0xe0,
	0x48,0x40,0x40,0x23,0x38,0x40,0xe9,0x01,
	0xd4,0x8b,0x11,0xa2,0xe9,0x15,0xc2,0x14,
	0x12,0x1f,0xb2,0x01,0x12,0x09,0x05,0x24,
	0x62,0x38,0x11,0xe1,0xe9,0x10,0x00,0x21,
	0xde,0x80,0xc4,0x7a,0xb4,0x44,0xe1,0x1e,
	0x00,0x20,0xde,0xa0,0xc4,0x7a,0xb4,0x44,
	0xe1,0x1e,0xde,0x90,0xc4,0x53,0x14,0x44,
	0xb4,0x44,0xc2,0x14,0xb2,0x01,0x12,0x09,
	0x05,0x24,0x62,0x38,0xc0,0x53,0x11,0xa2,
	0xe9,0x22,0x10,0x5f,0xb0,0x41,0xc0,0xba,
	0xb0,0x84,0xcd,0xc2,0x10,0x4a,0x10,0x49,
	0x5d,0xc1,0x84,0xa2,0x00,0x22,0xd0,0xc2,
	0xc0,0x7a,0x10,0x5e,0x30,0xc1,0xa0,0xe3,
	0x05,0x25,0x70,0x44,0x05,0x25,0x64,0x44,
	0x30,0x51,0xe9,0x37,0xd4,0x8c,0x05,0x24,
	0x62,0x38,0x00,0x06,0x84,0x78,0x80,0x3f,
	0xc6,0x49,0x00,0x28,0xd6,0x9c,0xf2,0x37,
	0xc6,0x4a,0x00,0x28,0xd6,0x98,0xf2,0x37,
	0xc6,0x48,0x00,0x28,0xd6,0x95,0xd7,0x00,
	0xf2,0x23,0xc6,0x51,0x00,0x28,0xd6,0xab,
	0xd7,0x00,0xf2,0x23,0x84,0x38,0x80,0x3f,
	0x04,0xeb,0x78,0x00,0x03,0x9e,0xe9,0x55,
	0x04,0x10,0x05,0x6b,0x70,0xd0,0x10,0xe0,
	0xe9,0x5d,0x10,0xe2,0xe9,0x60,0x10,0xe1,
	0xe9,0x66,0x00,0x20,0x58,0x20,0xe1,0x66,
	0x00,0x21,0x58,0x20,0xe1,0x66,0x00,0x20,
	0xd0,0xc0,0x58,0x03,0xc3,0x20,0x05,0x25,
	0x63,0x00,0x11,0xa3,0xe9,0x6d,0x11,0xa2,
	0xe9,0x71,0xd0,0x45,0x05,0x25,0x60,0x60,
	0xe1,0x74,0xd0,0x41,0x05,0x25,0x60,0x60,
	0x14,0xa0,0xe9,0xe9,0x00,0xe9,0x70,0x48,
	0x01,0x20,0x20,0x40,0x00,0xe9,0x60,0x48,
	0x98,0x33,0x00,0x57,0xf9,0x99,0xc6,0x66,
	0x07,0x1c,0x07,0x1d,0x00,0xe4,0x73,0xf8,
	0x00,0x06,0x80,0xf8,0xd0,0x42,0xf2,0x04,
	0xc3,0x90,0x13,0x9a,0xc0,0x4e,0x10,0x5c,
	0x23,0x81,0x10,0x5e,0x23,0x81,0xc0,0x4f,
	0xf2,0x04,0xc8,0x0e,0x00,0x24,0xd0,0x58,
	0x0c,0x51,0xc0,0xe0,0x10,0xe0,0xb0,0xc1,
	0xed,0x96,0x01,0x46,0x05,0xd7,0x05,0xd6,
	0x09,0x9e,0xa8,0xf3,0x80,0x3f,0x09,0xd7,
	0x09,0xd6,0xa8,0xf3,0x80,0x3f,0x04,0x6e,
	0xd0,0x7c,0xc0,0xd1,0x10,0xc1,0xb0,0xfc,
	0x00,0xca,0x7c,0x41,0x00,0x06,0x07,0x20,
	0xd0,0xc0,0xa0,0xf3,0xa3,0x3e,0x0b,0x97,
	0x0b,0x52,0x0b,0x10,0x0b,0x11,0x02,0x46,
	0xd5,0x80,0x02,0x06,0x06,0xa0,0xd0,0xc0,
	0xa0,0xf3,0x00,0x2b,0xd3,0x7e,0xa3,0x7e,
	0x06,0x20,0xd0,0xc0,0xa0,0xf3,0x00,0x21,
	0xd0,0xc8,0xa0,0xfe,0xd0,0xfc,0x00,0xca,
	0x04,0x6e,0xd0,0x7c,0x7c,0x81,0x00,0x06,
	0x01,0x46,0x86,0x37,0x80,0x3f,0x00,0xc6,
	0x00,0xe4,0x70,0x7c,0x00,0x06,0xf2,0x04,
	0x86,0x38,0x80,0x3f,0xf2,0x49,0xf2,0x4e,
	0xc8,0x19,0x00,0x1c,0xe9,0xd8,0x07,0x1c,
	0x00,0x1d,0xe9,0xdb,0x07,0x1d,0x01,0x46,
	0x01,0x20,0xd0,0xa0,0xa0,0x80,0xd0,0x80,
	0xb0,0x81,0xa0,0x81,0x00,0xc6,0x80,0xb8,
	0xd4,0x80,0x04,0xee,0x64,0x84,0x07,0x51,
	0xe1,0xf2,0xa8,0xf3,0x80,0x3f,0x01,0x46,
	0x07,0x20,0xd0,0xc0,0xa0,0xf3,0xa3,0x3e,
	0x80,0x3f,0x00,0xc6,0x03,0x9e,0xf9,0xfb,
	0x01,0x46,0x02,0x46,0xce,0x3b,0xc5,0x95,
	0x02,0x06,0x00,0xc6,0xe1,0xfb,0xd0,0x40,
	0x05,0x6e,0x60,0x54,0xd0,0x12,0x04,0xeb,
	0x70,0x48,0x04,0xeb,0x77,0xcc,0x00,0x05,
	0x86,0x78,0x80,0x3f,0x02,0x6c,0xd0,0xd0,
	0xb0,0xc1,0xea,0x0d,0x98,0x37,0x00,0x13,
	0xea,0x08,0x01,0x20,0xd0,0xa0,0xa0,0x80,
	0x90,0x81,0x10,0x84,0x10,0x9c,0xd4,0x00,
	0x34,0x02,0x80,0x01,0xb0,0x41,0xee,0x19,
	0x07,0xc5,0x86,0x38,0x80,0x3f,0x02,0x6c,
	0xd0,0xd0,0xb0,0xc1,0xea,0x04,0x98,0x37,
	0x00,0x13,0xfa,0x1d,0xe2,0x04,0xa6,0xb6,
	0xc6,0x99,0xc7,0x59,0x16,0x56,0x16,0x46,
	0x17,0x5c,0x37,0x59,0x17,0x5e,0x56,0x5d,
	0xd7,0x60,0x56,0x5d,0xd7,0x7f,0x46,0x9d,
	0x17,0x06,0x57,0x1a,0x0d,0x20,0x56,0x80,
	0xa6,0x74,0xa6,0xb4,0x07,0xc5,0xa6,0xb6,
	0xc6,0x99,0xc7,0x59,0x16,0x50,0x16,0x46,
	0x17,0x56,0x37,0x59,0x17,0x5e,0x56,0x5d,
	0xd7,0x70,0x56,0x5d,0x00,0xef,0x46,0xbf,
	0x0d,0x20,0x56,0x80,0xa6,0x74,0xa6,0xb4,
	0x07,0xc5,0x15,0x60,0xea,0x4c,0x07,0xc5,
	0x0b,0x1c,0x07,0xc5,0x15,0x60,0xea,0x51,
	0x07,0xc5,0x0b,0x1d,0x07,0xc5,0x00,0x00,
	0xce,0x40,0x15,0xa0,0xed,0x47,0xe5,0x85,
	0x15,0x60,0xfd,0x6e,0x03,0x1d,0xf9,0x6e,
	0x03,0x52,0xe9,0x6e,0x03,0x9d,0xe9,0x47,
	0x05,0x25,0xd0,0x14,0x71,0xc0,0x11,0xe0,
	0xf9,0x44,0x0b,0x9d,0xb1,0xc1,0x61,0xc0,
	0xe1,0x6e,0x15,0xbf,0xed,0x50,0x15,0xa0,
	0xe9,0x8c,0xc1,0xd6,0xc9,0x56,0xb9,0x44,
	0xd2,0x01,0xe1,0x61,0x03,0x97,0xe9,0x56,
	0x0b,0x97,0xd9,0x58,0xd1,0xdc,0xe1,0x58,
	0xd9,0x5c,0xd1,0xe0,0x00,0x0c,0x00,0x0c,
	0xc2,0x00,0x32,0x38,0x32,0x07,0xe5,0x5f,
	0xe1,0x61,0x21,0xc8,0x29,0x48,0x35,0x87,
	0x09,0x4a,0x7c,0xb8,0x2e,0x07,0x11,0xe4,
	0xf9,0x68,0x07,0x97,0x12,0x20,0xed,0x8b,
	0x00,0x0c,0x00,0x0c,0xce,0x00,0xe1,0x8b,
	0xd0,0x00,0xd5,0x80,0xb5,0x83,0x00,0x21,
	0xd1,0xe8,0x21,0xc0,0x04,0x20,0xd2,0x00,
	0xa2,0x33,0x80,0x3e,0x80,0x3e,0x80,0x3e,
	0x80,0x3e,0x06,0x20,0xd0,0x00,0xa0,0x33,
	0xa1,0xfe,0xd9,0x5c,0x10,0x20,0xf5,0x86,
	0xb0,0x3c,0xb9,0x44,0xe1,0x86,0xd9,0x5c,
	0x04,0x6e,0xd0,0x3c,0x09,0x4a,0x7c,0x80,
	0xb5,0xbf,0xe2,0x26,0x01,0xa7,0xd1,0xe4,
	0x79,0x47,0x70,0x25,0x10,0x21,0xe9,0x6e,
	0x10,0x20,0xf9,0x97,0x05,0x25,0x72,0x18,
	0xe1,0xb0,0xce,0x00,0xd0,0x00,0x60,0x25,
	0xb9,0x7c,0x72,0x25,0xb9,0x7c,0x01,0xa8,
	0xd0,0x00,0x30,0x25,0xed,0xa3,0x01,0xa7,
	0xd9,0x68,0x69,0x47,0xd0,0x03,0x40,0x38,
	0x3e,0x00,0xc9,0x40,0x29,0x48,0xd1,0xc3,
	0x49,0x47,0x41,0xe6,0x39,0x87,0x59,0xa5,
	0x30,0x07,0xf9,0x6f,0x06,0xa0,0xd1,0xc0,
	0xa1,0xf3,0x01,0x6f,0xd1,0xfe,0xa1,0xfe,
	0x04,0x20,0xd1,0xc0,0xa1,0xf3,0x0f,0xa1,
	0xd1,0xf2,0xa1,0xfe,0x04,0xe8,0xd1,0xdf,
	0xa1,0xfe,0x80,0x7e,0x12,0x03,0xa2,0x3e,
	0x12,0x1d,0x25,0x88,0x06,0x20,0xd0,0x00,
	0xa0,0x33,0xb2,0x38,0xa2,0x3e,0xe1,0x50,
	0xce,0x40,0x15,0xa0,0xed,0x3c,0xe5,0x7a,
	0x15,0x60,0xfd,0x63,0x03,0x52,0xe9,0x63,
	0x03,0x1d,0xf9,0x81,0x15,0xbf,0xed,0x45,
	0x15,0xa0,0xfd,0x81,0xc1,0xd6,0xc9,0x56,
	0xb9,0x44,0xd2,0x01,0xe1,0x56,0x03,0x97,
	0xe9,0x4b,0x0b,0x97,0xd9,0x58,0xd1,0xdc,
	0xe1,0x4d,0xd9,0x5c,0xd1,0xe0,0x00,0x0c,
	0x00,0x0c,0xc2,0x00,0x32,0x38,0x32,0x07,
	0xe5,0x54,0xe1,0x56,0x21,0xc8,0x29,0x48,
	0x35,0x87,0x09,0x4a,0x7c,0xb8,0x2e,0x07,
	0x11,0xe4,0xf9,0x5d,0x07,0x97,0x12,0x20,
	0xed,0x80,0x00,0x0c,0x00,0x0c,0xce,0x00,
	0xe1,0x80,0xd0,0x00,0xd5,0x80,0xb5,0x83,
	0x00,0x21,0xd1,0xe8,0x21,0xc0,0x04,0x20,
	0xd2,0x00,0xa2,0x33,0x80,0x3e,0x80,0x3e,
	0x80,0x3e,0x80,0x3e,0x06,0x20,0xd0,0x00,
	0xa0,0x33,0xa1,0xfe,0xd9,0x5c,0x10,0x20,
	0xf5,0x7b,0xb0,0x3c,0xb9,0x44,0xe1,0x7b,
	0xd9,0x5c,0x04,0x6e,0xd0,0x3c,0x09,0x4a,
	0x7c,0x80,0xb5,0xbf,0xe2,0x26,0x01,0xa7,
	0x79,0x64,0x70,0x25,0x10,0x21,0xe9,0x63,
	0x10,0x20,0xe9,0x63,0xce,0x00,0xd0,0x00,
	0x60,0x25,0xb9,0x7c,0x72,0x25,0xb9,0x7c,
	0x01,0xa8,0xd0,0x28,0x30,0x25,0xed,0x94,
	0x01,0xa7,0xd9,0x68,0x01,0xa7,0x69,0x64,
	0xd0,0x03,0x40,0x38,0x3e,0x00,0xc9,0x40,
	0x29,0x48,0xd1,0xc3,0x49,0x47,0x41,0xe6,
	0x39,0x87,0x59,0xa5,0xc5,0x88,0x25,0x87,
	0x35,0xa5,0x30,0x07,0xe9,0xa8,0xc0,0x25,
	0x30,0x07,0xe1,0x64,0x03,0x1d,0xf9,0x63,
	0x06,0xa0,0xd1,0xc0,0xa1,0xf3,0x01,0x27,
	0xd1,0xfe,0xa1,0xfe,0x04,0x20,0xd1,0xc0,
	0xa1,0xf3,0x0f,0xa1,0xd1,0xf2,0xa1,0xfe,
	0x04,0xe8,0xd1,0xdf,0xa1,0xfe,0x05,0x25,
	0x71,0xe0,0xa1,0xfe,0x12,0x03,0xa2,0x3e,
	0x12,0x1d,0x06,0x20,0xd1,0xc0,0xa1,0xf3,
	0xb2,0x38,0xa2,0x3e,0xe1,0x45,0x00,0x00,
	0xce,0x40,0xc9,0x7a,0xb9,0x44,0x19,0x6c,
	0xf9,0x38,0x06,0xd3,0x03,0x51,0xf9,0x54,
	0xc0,0x3a,0x30,0x16,0xed,0x54,0xd1,0xc1,
	0x03,0x1d,0xf9,0x55,0x09,0x4a,0x7c,0xb8,
	0x2e,0x3a,0x35,0xba,0x00,0x27,0xd0,0x3f,
	0x40,0x38,0xf9,0x5e,0x05,0x24,0xd0,0x38,
	0x70,0x00,0x2e,0x00,0x00,0x0c,0x00,0x0c,
	0x30,0x38,0xed,0x5e,0x00,0x0c,0x00,0x0c,
	0xce,0x00,0xe1,0x5e,0xd1,0xc0,0x02,0xd3,
	0xe9,0x58,0xd9,0x5c,0x04,0x6e,0xd0,0x3c,
	0x09,0x4a,0x7c,0x80,0x11,0xe0,0xf9,0x42,
	0xe2,0x26,0x00,0x00,0xce,0x40,0x00,0x20,
	0xde,0xa0,0x15,0xa0,0xfd,0x3d,0x00,0x20,
	0xd9,0x5c,0x09,0x4a,0x7c,0xb8,0x2e,0x3a,
	0x35,0xba,0xe2,0x26,0x09,0x94,0xe2,0x53,
	0x05,0x94,0x00,0xa8,0xd0,0x40,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0xa8,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc8,
	0x00,0x05,0x1a,0xe0,0xfa,0x67,0x00,0xa8,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc2,
	0x00,0x05,0xc0,0x2b,0x00,0x22,0xd0,0x73,
	0x30,0x01,0xfa,0x72,0x00,0xa8,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc8,0x00,0x05,
	0x10,0x25,0xfa,0x7a,0x00,0xa8,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x10,0x24,0xfa,0x93,0xd0,0x00,0x06,0xe5,
	0xd0,0x1c,0x01,0x46,0x78,0x00,0x04,0x51,
	0x68,0x00,0x00,0xc6,0xd0,0x41,0x05,0x61,
	0xd0,0x3c,0x60,0x40,0x05,0x6f,0xd0,0x08,
	0x00,0x22,0xd0,0x77,0x60,0x40,0x00,0xa1,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x20,0xdc,0x59,0xe2,0x96,
	0xcf,0xf1,0xc0,0x3f,0x00,0x06,0x00,0xa4,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x05,0x2c,0x67,0xfc,0x00,0xa8,
	0xd0,0x58,0xd0,0x12,0x00,0x69,0xd7,0xd0,
	0x00,0x05,0x05,0x2c,0x77,0xfc,0xe2,0xf2,
	0x07,0xc9,0xd0,0xa0,0xdb,0xc0,0x80,0x27,
	0x80,0xe9,0x80,0x2a,0x80,0xa9,0x00,0x0d,
	0x10,0xa1,0xea,0xb5,0x07,0xc9,0xc0,0x40,
	0x10,0x58,0x10,0x60,0xea,0xcb,0xa0,0x6b,
	0x10,0x48,0x30,0x01,0x10,0x20,0xea,0xd1,
	0xa0,0x2b,0xb0,0x81,0xee,0xb1,0x82,0x27,
	0x80,0xa9,0x80,0x2a,0x80,0x3f,0x00,0x21,
	0xd0,0x7c,0x00,0x4a,0x6a,0xde,0x00,0x06,
	0x07,0xc5,0x00,0x24,0xdb,0xca,0xd0,0x50,
	0xbc,0x01,0xee,0xb9,0xe2,0x96,0x00,0x24,
	0xdb,0xcd,0xd0,0x10,0xbc,0x01,0xee,0xbe,
	0xe2,0x96,0xd0,0x07,0x98,0x0d,0x40,0x20,
	0xea,0xe1,0xd8,0x28,0x38,0x00,0x08,0x08,
	0x00,0x0d,0x10,0x20,0xfa,0xf0,0x07,0xc9,
	0xd8,0x02,0x00,0x0d,0x10,0x20,0xfa,0xe9,
	0x0a,0x09,0xb8,0x3f,0xe2,0xe3,0x18,0x23,
	0xe6,0xf0,0x10,0x21,0xfa,0xf0,0x0a,0x09,
	0xd8,0x00,0xe2,0xf2,0xd8,0x01,0x0c,0x09,
	0x84,0x36,0x80,0x3f,0xaa,0xf4,0x0a,0xcd,
	0xaa,0xf4,0x07,0xc5,0xf2,0xf1,0x00,0x22,
	0xd0,0x33,0x30,0x2b,0xe8,0x08,0x01,0x94,
	0xf8,0x00,0xe1,0x87,0xd0,0x00,0x05,0xe7,
	0x60,0x08,0x05,0x6c,0xd0,0x18,0x00,0x20,
	0xd8,0x01,0x68,0x00,0xdc,0x03,0xdc,0x50,
	0x0b,0x09,0xd0,0x00,0x05,0xad,0xd7,0xa8,
	0x60,0x1e,0x05,0x91,0x05,0x92,0x09,0x90,
	0x01,0x4d,0x0b,0x09,0x05,0xad,0xd7,0xac,
	0x60,0x1e,0x11,0x60,0xe9,0x8a,0x01,0x8d,
	0xc0,0x05,0xc0,0x46,0x04,0xea,0xd0,0x80,
	0x70,0x82,0x10,0xa2,0xf8,0x30,0x02,0x46,
	0xc8,0x1a,0x02,0x06,0x00,0x23,0xd0,0xa0,
	0x30,0xa0,0xf8,0x39,0x04,0xed,0x70,0x88,
	0x10,0xa1,0xe8,0x45,0x05,0xab,0xd8,0x14,
	0x05,0xab,0xd0,0x9c,0xe0,0x43,0x00,0x23,
	0xd0,0xa1,0x30,0xa0,0xe8,0x3f,0x10,0x1f,
	0x10,0x5f,0x05,0xab,0xd8,0x18,0x05,0xab,
	0xd0,0xa0,0x60,0x20,0x60,0x42,0x09,0x09,
	0x11,0xa0,0xe9,0x92,0x01,0xcd,0x09,0x09,
	0x11,0xe0,0xe9,0x9a,0x11,0xe4,0xed,0xa2,
	0x02,0x0d,0x0a,0x49,0x00,0x0d,0x0a,0x49,
	0x10,0x09,0x02,0x4d,0x52,0x40,0xe9,0xaa,
	0x08,0x49,0x08,0x0d,0x18,0x21,0xf9,0xb2,
	0x0a,0x89,0x02,0x8d,0x08,0x49,0x02,0xcd,
	0x08,0x49,0x03,0x0d,0x13,0x20,0xe8,0x66,
	0x05,0xa6,0xd7,0xb8,0xf2,0xaa,0x09,0x91,
	0x08,0x49,0x00,0x0d,0x10,0x20,0xe8,0x6f,
	0xb3,0x3e,0x05,0xa8,0xd7,0xb8,0xf2,0xaa,
	0x09,0x92,0xf2,0xd7,0x18,0x21,0xe9,0xbd,
	0x00,0x22,0x78,0x2c,0x00,0x13,0xe8,0x7b,
	0x00,0x22,0xd0,0x33,0x30,0x2b,0xf8,0x7b,
	0xf2,0xd7,0x00,0x22,0xd0,0x35,0x30,0x2b,
	0xf9,0x5e,0x12,0xe0,0xf9,0xb7,0xdc,0x03,
	0xdc,0x51,0x09,0x09,0x00,0x0d,0x10,0x21,
	0xf9,0xc3,0x0a,0x09,0x03,0x8d,0x08,0x49,
	0x03,0xcd,0x08,0x89,0x04,0x0d,0x08,0x89,
	0x14,0x20,0xe9,0xc6,0x00,0x0d,0x10,0x0c,
	0x21,0x40,0x08,0x89,0x00,0x0d,0x10,0x0c,
	0x21,0x80,0x0b,0x09,0x04,0x4d,0x08,0x49,
	0x08,0x0d,0x18,0x21,0xf9,0xce,0x0a,0x09,
	0x00,0x0d,0x10,0x0a,0x22,0x80,0x08,0x49,
	0x04,0x8d,0x08,0x89,0x04,0xcd,0x09,0x49,
	0x05,0x0d,0xc3,0x63,0x01,0x46,0x83,0x3a,
	0x80,0x3f,0x81,0x7b,0x83,0x7a,0x05,0xa1,
	0xd7,0xb8,0x80,0x3f,0x0f,0x0b,0x6e,0xde,
	0x00,0x06,0x00,0xc6,0x01,0x46,0x83,0x3a,
	0x80,0x3f,0x81,0x7b,0x83,0x7a,0x00,0x2e,
	0xd7,0xb0,0x80,0x3f,0x05,0x0b,0x6e,0xde,
	0x00,0x06,0x00,0xc6,0x12,0xc2,0x53,0x0b,
	0x00,0x2f,0xd7,0x88,0x63,0x1e,0xf2,0xd7,
	0x18,0x21,0xe9,0xd6,0x00,0x22,0x78,0x2c,
	0x00,0x13,0xe8,0xd2,0x00,0x22,0xd0,0x33,
	0x30,0x2b,0xf8,0xd2,0xf2,0xd7,0xe0,0xc5,
	0x00,0x22,0xd0,0x35,0x30,0x2b,0xf9,0x47,
	0xdc,0x03,0xdc,0x52,0x09,0x09,0x00,0x0d,
	0x10,0x22,0xf9,0x17,0x08,0xc9,0x02,0x8d,
	0x08,0x49,0x12,0xa5,0xed,0xd9,0xd3,0x01,
	0xd3,0x41,0xd3,0x81,0x02,0xcd,0x12,0xe0,
	0xe8,0xf9,0x0a,0x09,0x03,0x0d,0x0a,0x09,
	0x13,0x20,0xe9,0xe1,0x13,0x27,0xed,0xe9,
	0x03,0x4d,0x0a,0x09,0x13,0x60,0xe9,0xf1,
	0x13,0x68,0xed,0xf9,0x03,0x8d,0x13,0xa0,
	0xea,0x01,0x13,0xa7,0xee,0x09,0x0b,0x89,
	0x03,0xcd,0x08,0x49,0x08,0x0d,0x0b,0x89,
	0x18,0x21,0xfa,0x11,0x04,0x0d,0x01,0x46,
	0x83,0x3a,0x80,0x3f,0x82,0xbb,0x83,0x7a,
	0x05,0xaa,0xd7,0xb8,0x80,0x3f,0x06,0x0b,
	0x6e,0xde,0x00,0x06,0x00,0xc6,0x00,0x2f,
	0xd7,0x8e,0x01,0x46,0x00,0x06,0xa4,0x3c,
	0xa3,0xfd,0x64,0x1e,0x00,0x06,0x00,0xc6,
	0xe0,0xc5,0x10,0x25,0xf9,0xd3,0x08,0x89,
	0x01,0x4d,0x09,0x09,0x01,0x8d,0x11,0x61,
	0xf9,0x38,0x0b,0x89,0x01,0xcd,0x08,0x49,
	0x08,0x0d,0x0b,0x89,0x18,0x21,0xfa,0x16,
	0x02,0x0d,0x09,0x49,0x02,0x4d,0x09,0x49,
	0x12,0x60,0xea,0x1b,0x02,0x8d,0x09,0x49,
	0x12,0xa0,0xea,0x20,0x02,0xcd,0x09,0x49,
	0x12,0xe0,0xea,0x25,0x03,0x0d,0x13,0x20,
	0xea,0x2a,0xe1,0x46,0x11,0x63,0xf9,0x46,
	0x08,0x49,0x03,0x4d,0x13,0x60,0xe9,0x40,
	0x08,0x49,0x03,0x8d,0x08,0xc9,0x03,0xcd,
	0x08,0xc9,0x04,0x0d,0x14,0x20,0xea,0x2f,
	0xe0,0xc5,0x00,0x22,0xd0,0x32,0x30,0x2b,
	0xf9,0x4e,0xd0,0xc0,0xf2,0x9f,0xe0,0xc8,
	0x00,0x22,0xd0,0x38,0x30,0x2b,0xf9,0x58,
	0x00,0xa8,0xd0,0x48,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0xa8,0xd0,0x50,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xb0,0x3d,0xe9,0x6a,0xb0,0x06,0xf9,0xc0,
	0xf1,0x6c,0xd0,0xc0,0xf2,0x9f,0x00,0x22,
	0xd0,0x38,0x30,0x2b,0xe9,0x52,0xe2,0x34,
	0xf1,0x6c,0xe1,0x52,0x05,0x90,0xc3,0x63,
	0x01,0x46,0x83,0x3a,0x80,0x3f,0x81,0x7b,
	0x83,0x7a,0x05,0xa1,0xd7,0xb8,0x80,0x3f,
	0x08,0x0b,0x6e,0xde,0x00,0x06,0x00,0xc6,
	0x01,0x46,0x83,0x3a,0x80,0x3f,0x81,0x7b,
	0x83,0x7a,0x00,0x2e,0xd7,0xb0,0x80,0x3f,
	0x05,0x0b,0x6e,0xde,0x00,0x06,0x00,0xc6,
	0x07,0xc5,0x00,0x24,0xdc,0x40,0xe2,0x37,
	0x00,0x24,0xdb,0xc1,0x05,0xa1,0xd7,0xb8,
	0x71,0x5e,0xbc,0x01,0xec,0x21,0xe2,0x37,
	0x00,0x24,0xdb,0xc2,0x05,0xa1,0xd7,0xbc,
	0x71,0x9e,0xbc,0x01,0xec,0x48,0xe2,0x37,
	0x00,0x24,0xdb,0xc3,0x05,0xa2,0xd7,0x80,
	0x71,0xde,0xbc,0x01,0xec,0x4c,0xe2,0x37,
	0x00,0x24,0xdb,0xc4,0x05,0xa2,0xd7,0x80,
	0x71,0xde,0xbc,0x01,0xec,0x4e,0xe2,0x37,
	0x00,0x24,0xdb,0xc5,0x05,0xa2,0xd7,0x88,
	0x72,0x5e,0xbc,0x01,0xec,0x56,0xe2,0x37,
	0x00,0x24,0xdb,0xc6,0xbc,0x01,0xec,0x5a,
	0xe2,0x37,0x00,0x24,0xdb,0xc7,0xd2,0xc0,
	0xbc,0x01,0xec,0x81,0xe2,0x37,0x00,0x24,
	0xdc,0x4e,0xe2,0x37,0x00,0x24,0xdc,0x50,
	0xe2,0x37,0x00,0x24,0xdc,0x51,0xe2,0x37,
	0x00,0x24,0xdb,0xd2,0x05,0xa2,0xd7,0xa4,
	0x74,0x1e,0xbc,0x01,0xec,0x90,0xe2,0x37,
	0x00,0x24,0xdb,0xd3,0xbc,0x01,0xec,0x9d,
	0xe2,0x37,0x00,0x24,0xdc,0x61,0xe2,0x37,
	0x00,0x24,0xdc,0x60,0xe2,0x37,0x00,0x24,
	0xdb,0xe2,0x05,0xaa,0xd7,0xb8,0x72,0x9e,
	0xbc,0x01,0xec,0xe1,0xe2,0x37,0x00,0x24,
	0xdb,0xe3,0x05,0xab,0xd7,0x80,0x73,0x1e,
	0xbc,0x01,0xec,0xec,0xe2,0x37,0x00,0x24,
	0xdb,0xe4,0x05,0xab,0xd7,0x80,0x73,0x1e,
	0xbc,0x01,0xec,0xee,0xe2,0x37,0x00,0x24,
	0xdb,0xe5,0x05,0xab,0xd7,0x84,0x73,0x5e,
	0xbc,0x01,0xec,0xf2,0xe2,0x37,0x00,0x24,
	0xdb,0xe6,0x05,0xab,0xd7,0x84,0x73,0x5e,
	0xbc,0x01,0xec,0xf4,0xe2,0x37,0x00,0x24,
	0xdb,0xe7,0x05,0xab,0xd7,0x88,0x73,0x9e,
	0xbc,0x01,0xec,0xf7,0xe2,0x37,0x00,0x24,
	0xdb,0xe8,0x05,0xab,0xd7,0x88,0x73,0x9e,
	0xbc,0x01,0xec,0xf9,0xe2,0x37,0x00,0x24,
	0xdb,0xe9,0xbc,0x01,0xed,0x00,0xe2,0x37,
	0x00,0x24,0xdb,0xea,0xbc,0x01,0xed,0x26,
	0xe2,0x37,0x00,0x24,0xdb,0xeb,0xbc,0x01,
	0xed,0x2c,0xe2,0x37,0x00,0x24,0xdb,0xec,
	0xbc,0x01,0xed,0x30,0xe2,0x37,0x00,0x24,
	0xdb,0xed,0xbc,0x01,0xed,0x34,0xe2,0x37,
	0x00,0x24,0xdb,0xee,0xbc,0x01,0xed,0x37,
	0xe2,0x37,0x00,0x24,0xdb,0xef,0xbc,0x01,
	0xed,0x46,0xe2,0x37,0x00,0x24,0xdc,0x71,
	0xe2,0x37,0xcf,0xf1,0xc0,0x3f,0x00,0x06,
	0x00,0xa4,0xd0,0x40,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x05,0x6c,0xd0,0x1c,
	0x00,0x20,0xd8,0x01,0x68,0x00,0x05,0x62,
	0xd0,0x10,0x00,0x20,0xd8,0x00,0x68,0x00,
	0xdc,0x03,0xdc,0x53,0x08,0x49,0x05,0xa2,
	0xd7,0x98,0x78,0xde,0x02,0x8d,0x09,0x49,
	0x05,0x93,0x68,0xde,0x02,0xcd,0x09,0x89,
	0x12,0xf7,0xec,0x6e,0x03,0x0d,0x08,0x49,
	0xc0,0x0c,0xb0,0x1e,0xb0,0x1d,0xec,0x74,
	0x08,0x0d,0x09,0x89,0x18,0x21,0xf8,0x7a,
	0x03,0x4d,0x09,0x89,0xc0,0x0d,0xc0,0x0d,
	0xb0,0x1e,0xb0,0x1d,0xec,0x7f,0x03,0x8d,
	0x08,0x49,0xc0,0x0e,0xb0,0x1e,0xb0,0x1d,
	0xec,0x85,0x00,0x0d,0x08,0x49,0x10,0x01,
	0x22,0x80,0x00,0x0d,0x10,0x02,0x22,0x80,
	0x01,0x46,0x83,0x3a,0x80,0x3f,0x82,0xbb,
	0x83,0x7a,0x05,0xab,0xd7,0xa4,0x80,0x3f,
	0x04,0x0b,0x6e,0xde,0x00,0x06,0x00,0xc6,
	0xf2,0xd7,0x04,0xea,0xd0,0x00,0x70,0x00,
	0x10,0x22,0xf8,0x4f,0x00,0xa4,0xd8,0x30,
	0xa8,0x36,0x80,0x3f,0x98,0x34,0x00,0x18,
	0xf8,0x51,0x18,0x21,0xe8,0x8b,0x01,0x90,
	0xf8,0x5a,0x00,0x22,0xd0,0x32,0x30,0x2b,
	0xf8,0x65,0xd0,0xc1,0xf2,0x9f,0xe0,0x53,
	0x00,0x22,0xd0,0x35,0x30,0x2b,0xf8,0x5f,
	0xf2,0xf1,0x00,0x22,0xd0,0x32,0x30,0x2b,
	0xf8,0x65,0xd0,0xc1,0xf2,0x9f,0xf0,0x97,
	0x05,0x65,0x60,0x8c,0x00,0xa8,0xd0,0x50,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x00,0x24,0xdb,0xf2,0xd2,0xc0,0xbc,0x01,
	0xec,0x18,0xe0,0x8e,0x00,0x24,0xdb,0xf3,
	0xd3,0x00,0xbc,0x01,0xec,0x1e,0xe0,0x8e,
	0x00,0x24,0xdb,0xf4,0xbc,0x01,0xec,0x22,
	0xe0,0x8e,0x00,0x24,0xdb,0xf5,0xd3,0x40,
	0xbc,0x01,0xec,0x29,0xe0,0x8e,0x00,0x24,
	0xdb,0xf6,0xd3,0x80,0xbc,0x01,0xec,0x2f,
	0xe0,0x8e,0x00,0x25,0xdc,0x40,0xe0,0x8e,
	0xcf,0xf1,0xc0,0x3f,0x00,0x06,0x00,0xa4,
	0xd0,0x40,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x00,0x68,0xd1,0x00,0x91,0x61,
	0x41,0x44,0xf8,0x99,0x83,0x22,0x91,0x23,
	0x11,0x1e,0x11,0x02,0x81,0x22,0x91,0x63,
	0x11,0x5e,0x11,0x44,0x31,0x05,0x86,0x45,
	0xd1,0xbf,0x91,0x46,0x11,0x55,0x41,0x46,
	0xb1,0x7e,0x11,0x42,0x31,0x05,0x11,0x03,
	0xd1,0x5f,0x91,0x8d,0x41,0x85,0x21,0x06,
	0xc0,0xc4,0x30,0xc2,0xf4,0xc0,0x81,0x22,
	0x90,0xa3,0x10,0x9e,0x10,0x84,0x80,0x22,
	0x91,0xa3,0x11,0x9e,0x11,0x82,0x31,0x82,
	0x11,0x83,0x20,0xc6,0xc0,0x84,0x10,0xa0,
	0xf4,0xc4,0x20,0x86,0x07,0xc5,0x00,0x00,
	0x1a,0xe0,0xf9,0xc7,0x00,0x29,0x70,0xbc,
	0x05,0x62,0x60,0xbc,0x30,0x82,0x05,0x2a,
	0xd7,0xac,0x60,0x9e,0xd0,0x0c,0x05,0x2a,
	0xd7,0xbc,0x60,0x9e,0xb7,0xbc,0xb0,0x01,
	0xf8,0x0d,0xdc,0x03,0xdc,0x55,0x05,0xad,
	0x76,0xa8,0x05,0xad,0x76,0xe8,0xc5,0x1a,
	0xc5,0x5b,0xc5,0x9a,0xc5,0xdb,0xc6,0x1a,
	0xc6,0x5b,0xf1,0x75,0x05,0xa2,0xd7,0x98,
	0x78,0xde,0x04,0xed,0x70,0x08,0x10,0x20,
	0xf8,0x56,0xd0,0x1f,0x98,0x0d,0x40,0x20,
	0xe8,0x55,0x10,0x28,0xe8,0x49,0x10,0x30,
	0xe8,0x3d,0x10,0x38,0xe8,0x35,0xe1,0xd0,
	0x07,0xc9,0x01,0x8d,0x07,0xc9,0x01,0xcd,
	0x07,0xc5,0x0a,0x09,0x01,0x4d,0xf0,0x30,
	0x08,0x89,0x11,0x42,0x00,0x0d,0x51,0x40,
	0xe0,0x58,0x0a,0x89,0x01,0x4d,0x08,0xc9,
	0x02,0x0d,0x08,0xc9,0x02,0x4d,0xf0,0x30,
	0x0b,0x49,0x12,0x4d,0x00,0x0d,0x52,0x40,
	0xe0,0x5c,0x0a,0x89,0x01,0x4d,0x08,0xc9,
	0x02,0x0d,0x0a,0xc9,0x02,0x4d,0xf0,0x30,
	0x09,0x49,0x12,0x45,0x00,0x0d,0x52,0x40,
	0xe0,0x5c,0xf0,0x30,0x0a,0x89,0x01,0x4d,
	0x08,0xc9,0x02,0x0d,0x07,0xc9,0x02,0x4d,
	0x12,0x20,0xe9,0xca,0x12,0x23,0xed,0xcd,
	0x01,0x93,0xe8,0x68,0x09,0x93,0x05,0xa2,
	0xd7,0x98,0x68,0xde,0x12,0x21,0xf9,0xd3,
	0xd2,0x80,0x0e,0xeb,0xd2,0xee,0x12,0x21,
	0xe8,0x96,0x01,0x90,0xf8,0x7a,0x09,0x09,
	0x00,0x0d,0x10,0x27,0xf9,0xd6,0x12,0x22,
	0xe8,0x96,0x09,0x09,0x00,0x0d,0x10,0x27,
	0xf9,0xdb,0xe0,0x96,0x08,0x49,0x02,0x8d,
	0x08,0xc9,0x00,0x8d,0x10,0xa0,0xe9,0xe0,
	0xd0,0xcf,0x12,0x22,0xe8,0x8d,0x08,0x49,
	0x00,0x0d,0x08,0xc9,0xc0,0x4a,0x00,0x40,
	0x10,0x41,0x52,0x81,0x00,0xcd,0x10,0xe0,
	0xe9,0xe6,0xb0,0xc1,0xc2,0xc3,0x12,0xc4,
	0x52,0xc3,0xb0,0x81,0x12,0xc4,0x52,0xc2,
	0x12,0xc4,0x52,0xc2,0x08,0x49,0x00,0x0d,
	0x10,0x20,0xe8,0x9d,0x0a,0x09,0x00,0x0d,
	0xe0,0x96,0xf2,0xd7,0x01,0x90,0xf9,0x93,
	0x00,0x22,0xd0,0x35,0x30,0x2b,0xf9,0xef,
	0xdc,0x06,0xdc,0x56,0x09,0x09,0x00,0x0d,
	0x09,0x09,0x10,0x28,0xf9,0xf2,0x00,0x0d,
	0x09,0x09,0x10,0x20,0xe9,0xf5,0x10,0x2a,
	0xe4,0xb3,0x10,0x2f,0xf9,0xf5,0xb0,0x01,
	0xc2,0xc0,0x00,0x0d,0x09,0x09,0x10,0x20,
	0xe9,0xfb,0x10,0x2a,0xe4,0xbd,0x10,0x2f,
	0xf9,0xfb,0xb0,0x01,0x10,0x04,0x22,0xc0,
	0x00,0x0d,0x09,0x09,0x10,0x20,0xea,0x01,
	0x10,0x2a,0xe4,0xc8,0x10,0x2f,0xfa,0x01,
	0xb0,0x01,0x10,0x08,0x22,0xc0,0x00,0x0d,
	0x08,0x89,0x10,0x20,0xea,0x07,0x10,0x2a,
	0xe4,0xd3,0x10,0x2f,0xfa,0x07,0xb0,0x01,
	0x10,0x0c,0x22,0xc0,0x03,0x0d,0x08,0x89,
	0x03,0x4d,0x0a,0x89,0x13,0x60,0xea,0x0d,
	0x03,0x8d,0xc8,0x4e,0x01,0x46,0x83,0x3a,
	0x80,0x3f,0x81,0x7b,0x83,0x7a,0x05,0xab,
	0xd7,0xb8,0x80,0x3f,0x09,0x0b,0x6e,0xde,
	0x00,0x06,0x00,0xc6,0x00,0x2f,0x62,0x1c,
	0x00,0x90,0xe9,0x04,0x08,0x49,0x03,0xcd,
	0x08,0xc9,0x04,0x0d,0x08,0x49,0x04,0x4d,
	0x09,0xc9,0x04,0x8d,0x0a,0x09,0x04,0xcd,
	0x01,0x46,0x83,0x3a,0x80,0x3f,0x83,0xfb,
	0x83,0x7a,0x05,0xac,0xd7,0xa0,0x80,0x3f,
	0x04,0x0b,0x6e,0xde,0x00,0x06,0x00,0xc6,
	0xf2,0xd7,0x18,0x21,0xea,0x15,0x00,0x22,
	0xd0,0x35,0x30,0x2b,0xf9,0x8c,0xdc,0x03,
	0xdc,0x57,0x09,0x09,0x00,0x0d,0x10,0x23,
	0xf9,0x31,0x08,0x49,0x01,0x4d,0x11,0x60,
	0xe9,0x19,0x05,0xa6,0xd7,0xb8,0xf2,0xaa,
	0x09,0x91,0x08,0x49,0x00,0x0d,0x10,0x20,
	0xe9,0x22,0xb1,0x7e,0x05,0xa8,0xd7,0xb8,
	0xf2,0xaa,0x09,0x92,0x08,0x49,0x00,0x0d,
	0x10,0x1e,0x21,0x40,0x08,0x49,0x00,0x0d,
	0x10,0x1d,0x21,0x40,0x05,0xac,0xd7,0xb4,
	0x61,0x5e,0x05,0xa2,0xd7,0x98,0x68,0xde,
	0xe1,0x04,0x10,0x27,0xf9,0x82,0x07,0xc9,
	0x05,0xa2,0xd7,0xa0,0x70,0x1e,0x05,0x0d,
	0x08,0x49,0xc6,0x94,0x08,0x0d,0x18,0x21,
	0xfa,0x1b,0x07,0xc9,0x05,0x4d,0x08,0x49,
	0xc6,0xd5,0x10,0x21,0xe9,0x46,0x05,0xac,
	0xd7,0x98,0x70,0x5e,0x08,0x0d,0x18,0x21,
	0xfa,0x20,0x10,0x21,0xf9,0x4e,0x00,0x93,
	0xe9,0x73,0xe1,0x50,0x10,0x63,0xf9,0x73,
	0x07,0xc9,0x05,0x8d,0x08,0x49,0xc6,0x96,
	0x08,0x0d,0x18,0x21,0xfa,0x25,0x07,0xc9,
	0x05,0xcd,0x08,0x49,0xc6,0xd7,0x08,0x0d,
	0x18,0x21,0xfa,0x2a,0x10,0x21,0xf9,0x63,
	0x00,0x99,0xe9,0x73,0xe1,0x65,0x00,0x93,
	0xe9,0x73,0x07,0xc9,0x06,0x0d,0x08,0x49,
	0xc6,0x98,0x08,0x0d,0x18,0x21,0xfa,0x2f,
	0x07,0xc9,0x05,0xcd,0x08,0x49,0xc6,0xd9,
	0x08,0x0d,0x18,0x21,0xfa,0x34,0xf1,0x75,
	0xe1,0x04,0x01,0x46,0x83,0x3a,0x80,0x3f,
	0x85,0x3b,0x83,0x7a,0x05,0xad,0xd7,0x90,
	0x80,0x3f,0x07,0x0b,0x6e,0xde,0x00,0x06,
	0x00,0xc6,0x07,0xc5,0x10,0x2a,0xf9,0x85,
	0xe1,0x04,0x10,0x29,0xf9,0x88,0xe1,0x04,
	0x10,0x24,0xfa,0x18,0xe1,0x04,0xe1,0x04,
	0x00,0x22,0xd0,0x32,0x30,0x2b,0xf9,0xac,
	0xd0,0xc2,0xf2,0x9f,0xe1,0x07,0x01,0x46,
	0x83,0x3a,0x80,0x3f,0x81,0x7b,0x83,0x7a,
	0x05,0xab,0xd7,0xb8,0x80,0x3f,0x06,0x0b,
	0x6e,0xde,0x00,0x06,0x00,0xc6,0x00,0x2f,
	0x62,0x1c,0x00,0x22,0xd0,0x35,0x30,0x2b,
	0xf9,0xa6,0xf2,0xf1,0x00,0x22,0xd0,0x32,
	0x30,0x2b,0xf9,0xac,0xd0,0xc2,0xf2,0x9f,
	0x1a,0xe1,0xfa,0x3c,0x00,0xac,0xd0,0x70,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x10,0x28,0xf9,0xbc,0x00,0xa8,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x10,0x23,0xf9,0xc4,0x00,0xa8,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc8,0x00,0x05,
	0x10,0x27,0xfa,0x39,0xe2,0x7c,0x00,0x25,
	0xdc,0x51,0xe2,0x3f,0x00,0x25,0xdc,0x52,
	0xe2,0x3f,0x00,0x25,0xdc,0x53,0xe2,0x3f,
	0x00,0x25,0xdc,0x54,0xe2,0x3f,0x00,0x25,
	0xdc,0x55,0xe2,0x3f,0x00,0x25,0xdb,0xd6,
	0xbc,0x01,0xec,0x73,0xe2,0x3f,0x00,0x25,
	0xdb,0xd7,0xbc,0x01,0xec,0x79,0xe2,0x3f,
	0x00,0x25,0xdb,0xd8,0xd0,0x8f,0xbc,0x01,
	0xec,0x80,0xe2,0x3f,0x00,0x25,0xdb,0xd9,
	0xd0,0xcf,0xbc,0x01,0xec,0x8d,0xe2,0x3f,
	0x00,0x25,0xdc,0x60,0xe2,0x3f,0x00,0x25,
	0xdc,0x61,0xe2,0x3f,0x00,0x25,0xdc,0x62,
	0xe2,0x3f,0x00,0x25,0xdb,0xe3,0xd0,0x0f,
	0xbc,0x01,0xec,0xb3,0xe2,0x3f,0x00,0x25,
	0xdb,0xe4,0xd0,0x0f,0xbc,0x01,0xec,0xbd,
	0xe2,0x3f,0x00,0x25,0xdb,0xe5,0xd0,0x0f,
	0xbc,0x01,0xec,0xc8,0xe2,0x3f,0x00,0x25,
	0xdb,0xe6,0xd0,0x0f,0xbc,0x01,0xec,0xd3,
	0xe2,0x3f,0x00,0x25,0xdb,0xe7,0xbc,0x01,
	0xec,0xdc,0xe2,0x3f,0x00,0x25,0xdf,0xe7,
	0xe2,0x3f,0x00,0x25,0xdc,0x70,0xe2,0x3f,
	0x00,0x25,0xdc,0x71,0xe2,0x3f,0x00,0x25,
	0xdb,0xf8,0xbc,0x01,0xed,0x3d,0xe2,0x3f,
	0x00,0x25,0xdb,0xf9,0xbc,0x01,0xed,0x49,
	0xe2,0x3f,0x00,0x25,0xdb,0xfa,0xbc,0x01,
	0xed,0x57,0xe2,0x3f,0x00,0x25,0xdb,0xfb,
	0xbc,0x01,0xed,0x5e,0xe2,0x3f,0x00,0x25,
	0xdb,0xfc,0xbc,0x01,0xed,0x6c,0xe2,0x3f,
	0x00,0x25,0xdb,0xfd,0xbc,0x01,0xed,0x73,
	0xe2,0x3f,0x00,0x20,0xdc,0x59,0xe2,0x3f,
	0x00,0x20,0xdc,0x5a,0xe2,0x3f,0xcf,0xf1,
	0xc0,0x3f,0x00,0x06,0x00,0xa4,0xd0,0x40,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x0a,0x09,0x00,0x29,0x77,0xbc,0x10,0xe2,
	0xfa,0x6a,0x05,0x2d,0x60,0xc4,0x05,0x2a,
	0x67,0xac,0xd0,0x81,0x05,0x2c,0x60,0xb4,
	0x30,0x82,0x05,0x2b,0x60,0xac,0x05,0x2a,
	0xd0,0x7c,0x05,0x2a,0xd0,0xb0,0x60,0x42,
	0xb0,0x70,0xb0,0xbc,0x60,0x42,0xb0,0x6c,
	0xb0,0xbc,0x60,0x42,0x10,0xcc,0x00,0x6a,
	0xd7,0x71,0x17,0x60,0x07,0x44,0xd0,0x80,
	0x05,0x2c,0x60,0xb8,0x07,0x44,0x07,0x44,
	0x07,0x44,0x07,0x44,0xd0,0x81,0x05,0x2c,
	0x60,0xb8,0x00,0x0d,0x0a,0x09,0x10,0x20,
	0xea,0x7f,0x07,0x44,0xe2,0x79,0x00,0x8d,
	0x0a,0x09,0x10,0xa0,0xea,0x88,0x30,0x00,
	0x07,0x44,0xc0,0x02,0x07,0x44,0xe2,0x79,
	0x00,0x8d,0x0a,0x09,0x10,0xa1,0xea,0x95,
	0x30,0x00,0x07,0x44,0x10,0xa0,0xea,0x88,
	0x30,0x00,0x07,0x44,0xc0,0x02,0x07,0x44,
	0xe2,0x79,0xf2,0xe2,0x00,0x29,0xd0,0x7c,
	0x70,0x81,0xb0,0xbe,0x67,0x81,0x01,0x46,
	0x00,0x06,0xa0,0xfc,0x0f,0xeb,0xd0,0x6d,
	0xa0,0x7d,0x80,0x3f,0x60,0xc2,0x00,0xc6,
	0x06,0xe5,0xd0,0x5c,0x01,0x46,0x78,0x01,
	0x04,0x1c,0x68,0x01,0x00,0xc6,0x00,0xa7,
	0xd0,0x78,0xd0,0x12,0x00,0x6a,0xd7,0xe7,
	0x00,0x05,0xd6,0xc0,0xd6,0x80,0x07,0x44,
	0xf2,0xe9,0xc6,0xc0,0x16,0xc8,0x07,0x44,
	0xf2,0xe9,0x26,0xc0,0x07,0x44,0xf2,0xe9,
	0xc6,0x80,0x16,0x88,0x07,0x44,0xf2,0xe9,
	0x26,0x80,0x37,0x1c,0x01,0x46,0x00,0x06,
	0xa6,0xbc,0xa6,0xfd,0x80,0x3f,0xb7,0xbe,
	0x66,0x9e,0x00,0xc6,0xb7,0xbe,0x00,0x29,
	0x70,0x74,0x30,0x5e,0xfa,0xd1,0x00,0x29,
	0x77,0xb0,0x00,0x29,0x70,0x78,0x30,0x5e,
	0xfa,0xdf,0x00,0x29,0xd0,0x7a,0x0f,0xef,
	0xd6,0xbf,0x01,0x46,0xa6,0xbc,0xa6,0xbd,
	0x80,0x3f,0x66,0x81,0x00,0xc6,0x17,0x20,
	0xfa,0xe8,0xe2,0xb1,0x00,0x6a,0xd0,0x74,
	0x30,0x5d,0xea,0xe8,0xd7,0x01,0xe2,0xc2,
	0x07,0xc5,0xb0,0xff,0x07,0xc5,0x00,0x00,
	0xd8,0xc0,0x05,0xa2,0x78,0x18,0x00,0x10,
	0xe8,0x09,0x05,0xd2,0x00,0x24,0xd8,0x46,
	0xe0,0x0b,0x05,0xac,0x78,0x5c,0x00,0x11,
	0xf8,0x10,0x05,0xa6,0xd2,0xf8,0xe0,0x12,
	0x05,0xa2,0xd2,0xf8,0x00,0x12,0xf8,0x17,
	0x05,0xa8,0xd3,0x38,0xe0,0x19,0x05,0xa4,
	0xd3,0x38,0x05,0xac,0x73,0x50,0x05,0xac,
	0x70,0x04,0x10,0x21,0xe8,0x25,0x10,0x22,
	0xe8,0x24,0xd0,0x04,0x05,0x9f,0xe0,0x25,
	0x05,0x9e,0xc3,0x80,0xd3,0xc0,0x00,0x96,
	0xe8,0x2c,0x00,0x20,0xd0,0x10,0x53,0xc0,
	0x00,0x94,0xe8,0x31,0x00,0x20,0xd0,0x08,
	0x53,0xc0,0x05,0xac,0x70,0x18,0xda,0x43,
	0x4a,0x40,0x1a,0x61,0xe8,0x3c,0x1a,0x62,
	0xe8,0x3f,0x05,0x9c,0x00,0x99,0xe8,0x40,
	0xd0,0x10,0x5a,0x40,0xe0,0x40,0x05,0x9d,
	0x00,0x97,0xe8,0x48,0x02,0x30,0xd0,0x00,
	0x58,0xc0,0x00,0x20,0xd0,0x04,0x5a,0x40,
	0x00,0x98,0xe8,0x4d,0x00,0x20,0xd0,0x08,
	0x5a,0x40,0x00,0x95,0xe8,0x50,0x05,0xd0,
	0x01,0xd2,0xe8,0x5d,0x05,0xac,0x78,0x0c,
	0x00,0x10,0xe8,0x59,0x00,0x24,0xd0,0x00,
	0x5a,0x40,0x00,0x11,0xe8,0x5d,0xd8,0x01,
	0xe0,0x5e,0xd8,0x00,0x07,0xa3,0xd0,0x2c,
	0x68,0x00,0x02,0x86,0xd5,0xc1,0x02,0x06,
	0x01,0xd2,0xf8,0x6c,0x05,0xac,0x78,0x14,
	0x02,0x86,0xc5,0xe0,0x15,0xc2,0x02,0x06,
	0x05,0xa1,0x76,0xf8,0xb6,0xf1,0x16,0xdc,
	0x05,0xa1,0x77,0x3c,0x05,0xa2,0x70,0x20,
	0x01,0xd2,0xf8,0x7e,0x10,0x21,0xe8,0x7e,
	0xb7,0x21,0x17,0x1b,0x01,0x9c,0xe8,0x80,
	0x17,0x01,0xe0,0x80,0xb7,0x31,0x17,0x1c,
	0xc0,0x5c,0x01,0x9c,0xf8,0x84,0x10,0x41,
	0x04,0xe7,0xd0,0x3c,0x60,0x40,0xd0,0x40,
	0x05,0x26,0x70,0x18,0x10,0x20,0xf8,0x9b,
	0x01,0x9f,0xe8,0x9b,0x05,0xa2,0x70,0x04,
	0x10,0x23,0xf8,0x9b,0x07,0x26,0x70,0x10,
	0x10,0x20,0xf8,0x9b,0x04,0xe8,0x70,0x30,
	0x10,0x20,0xf8,0x9b,0xd0,0x41,0x07,0xa3,
	0x60,0x68,0x86,0x45,0x02,0x86,0xa5,0xc6,
	0x02,0x06,0x80,0x07,0x80,0x05,0xaa,0x46,
	0x81,0x45,0xa3,0x46,0x80,0xc5,0xa3,0x86,
	0x80,0x17,0x82,0xc5,0x80,0x06,0xd2,0x88,
	0x01,0xd2,0xf8,0xb4,0x05,0xac,0x70,0x14,
	0xb0,0x01,0xe4,0xb4,0x12,0x9f,0xe0,0xb0,
	0x70,0x0b,0x10,0x18,0x10,0x08,0x50,0x0a,
	0x60,0x0b,0x82,0x27,0x80,0xa9,0x80,0x2a,
	0x80,0x3f,0x00,0x21,0xd0,0x7c,0x00,0x4a,
	0x7a,0xcb,0x00,0x06,0x00,0xb0,0xd0,0x00,
	0xa0,0x2a,0x80,0x3f,0x00,0x4a,0x7a,0xcc,
	0x00,0x06,0x0c,0x30,0xd0,0x00,0x10,0x02,
	0xa0,0x27,0x80,0x27,0xd0,0x2f,0xa0,0x29,
	0x80,0x2a,0x84,0x29,0x02,0xb0,0xd0,0x00,
	0xa0,0x2a,0x01,0x20,0xd0,0x00,0xa0,0x29,
	0x00,0x39,0xd8,0x00,0xa0,0x2a,0x80,0x3f,
	0x80,0x2b,0x00,0x39,0xd0,0x00,0xa0,0x2a,
	0x80,0x3f,0x80,0x6b,0x0c,0x30,0xd0,0x00,
	0x10,0x02,0xa0,0x27,0x80,0x29,0xd8,0x20,
	0x01,0xd2,0xe8,0xeb,0x04,0x14,0xa8,0x27,
	0xa3,0xe8,0x07,0xa3,0x70,0x28,0x10,0x20,
	0xe8,0xfb,0x01,0x9c,0xe8,0xf6,0x00,0xab,
	0xd0,0x00,0xe0,0xf8,0x00,0xaa,0xd0,0x00,
	0xa0,0x2c,0x80,0x1b,0xe1,0x03,0x00,0xaa,
	0xd0,0x00,0xa0,0x2c,0x01,0x9c,0xe9,0x02,
	0x80,0x1b,0xe1,0x03,0x80,0x5b,0x07,0xa4,
	0xd0,0x0c,0x70,0x00,0x10,0x20,0xe9,0x09,
	0x05,0xd1,0x01,0x46,0x81,0xf6,0x00,0xe2,
	0xd0,0x05,0xa0,0x34,0x81,0xb6,0x00,0xe3,
	0xd0,0x05,0xa0,0x34,0x00,0x60,0xdc,0xe1,
	0x00,0x60,0xdc,0x82,0x00,0x60,0xdf,0x40,
	0x00,0xc6,0x02,0x86,0xd5,0x40,0x02,0x06,
	0x05,0xd5,0x01,0x46,0x00,0x66,0xd0,0x00,
	0xa0,0x37,0xa0,0x38,0x80,0x3f,0x00,0xc6,
	0x07,0xa3,0xd0,0x34,0x70,0x40,0x10,0x60,
	0xf5,0x5f,0xb0,0x7f,0x60,0x40,0x10,0x60,
	0xe9,0x33,0x00,0xa3,0xd0,0x78,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0xc7,0x6c,
	0x17,0x5a,0x00,0x20,0xd7,0xbf,0x47,0xac,
	0xc0,0x1c,0xb0,0x01,0x30,0x1e,0xf9,0x48,
	0x04,0xea,0x70,0x00,0x10,0x22,0xe9,0x48,
	0x10,0x24,0xe9,0x48,0x00,0x28,0xd0,0x04,
	0x70,0x40,0x05,0x61,0xd0,0x14,0x60,0x40,
	0x80,0x07,0xab,0x6c,0x07,0xa4,0xd0,0x10,
	0x78,0x00,0x58,0xe0,0x07,0xa3,0x70,0x28,
	0x10,0x20,0xf9,0x58,0x00,0xa8,0xd0,0x60,
	0xd0,0x12,0x00,0x64,0xd7,0xed,0x00,0x05,
	0xf2,0xab,0x00,0xa9,0xd0,0x40,0xd0,0x12,
	0x00,0x64,0xd7,0xd8,0x00,0x05,0x10,0x60,
	0xe9,0x66,0x07,0xa4,0xd0,0x10,0x78,0x00,
	0x58,0xe0,0xe1,0x6f,0xd8,0x00,0x03,0xd5,
	0xe9,0x6b,0x00,0x20,0xd8,0x20,0x07,0xa4,
	0xd0,0x10,0x68,0x00,0x58,0xe0,0x05,0x6a,
	0x70,0x30,0x05,0x6a,0x78,0x2c,0x30,0x20,
	0x04,0xea,0x78,0x28,0x02,0x86,0xc1,0xe0,
	0x02,0x06,0x18,0x22,0xf9,0x8a,0x10,0x1f,
	0x05,0x6b,0x78,0x30,0x18,0x20,0xf9,0x8a,
	0x10,0x1e,0xc8,0x00,0x18,0x1e,0x28,0x00,
	0xc0,0x20,0x18,0x1c,0x28,0x00,0xc0,0x20,
	0x18,0x18,0x20,0x20,0xc8,0x00,0x02,0x86,
	0xc2,0x20,0x05,0x6a,0x71,0xa8,0x05,0x64,
	0xd0,0x08,0x74,0x80,0x05,0x64,0xd0,0x0c,
	0x74,0xc0,0x02,0x06,0x01,0xd2,0xf9,0x9e,
	0x07,0xa4,0xd0,0x04,0x70,0x40,0x10,0x61,
	0xf9,0x9e,0x05,0xd7,0x02,0x86,0x01,0xe9,
	0xd5,0x10,0x02,0x06,0x07,0xa3,0xd0,0x34,
	0x70,0x40,0x10,0x60,0xf9,0xc0,0x07,0xa4,
	0x70,0x0c,0x10,0x20,0xe9,0xce,0x01,0x9f,
	0xe9,0xce,0x01,0xd2,0xf9,0xce,0x05,0xe1,
	0x70,0x1c,0x10,0x20,0xf9,0xce,0x05,0x20,
	0x70,0x1c,0x10,0x24,0xf9,0xce,0xc0,0x6b,
	0xb0,0x77,0xc0,0x01,0x30,0x1c,0xf5,0xc5,
	0xc7,0x01,0x1a,0xe1,0xe9,0xce,0xe1,0xc5,
	0x07,0xa3,0x77,0x38,0xca,0xc1,0xd0,0x40,
	0x60,0x40,0xf2,0x73,0xc7,0xab,0xb7,0x82,
	0xf2,0x8b,0x07,0xa3,0x70,0x28,0x10,0x20,
	0xe9,0xf8,0xe1,0xf1,0x07,0xa3,0x67,0x38,
	0xda,0xc1,0x05,0x26,0xd0,0x08,0x70,0x40,
	0x05,0x26,0xd0,0x0c,0x60,0x40,0xf2,0x73,
	0xd0,0x40,0x07,0xa4,0xd0,0x20,0x60,0x40,
	0x07,0xa3,0x70,0x28,0x10,0x20,0xe9,0xf8,
	0x04,0xe8,0x6c,0x0c,0x04,0xe7,0x60,0x5c,
	0x04,0xe7,0x60,0x60,0x0b,0xd3,0x01,0x9d,
	0xf9,0xf1,0x04,0xe8,0xd0,0x10,0x70,0x80,
	0x10,0xa3,0xe9,0xf1,0x03,0xd2,0xf9,0xf1,
	0xf2,0x4b,0xf2,0xab,0x00,0xa9,0xd0,0x40,
	0xd0,0x12,0x00,0x64,0xd7,0xfe,0x00,0x05,
	0x00,0xa8,0xd0,0x60,0xd0,0x12,0x00,0x65,
	0xd7,0xd3,0x00,0x05,0x00,0x20,0xd0,0xc0,
	0xd1,0x00,0x01,0xb5,0xd4,0x00,0xc1,0x40,
	0x00,0x20,0xd1,0xa3,0x04,0xe2,0xd0,0xa4,
	0xc0,0x42,0x61,0x01,0xb0,0x7c,0x61,0x41,
	0xc0,0x06,0x30,0x03,0xfe,0x1c,0x02,0xe4,
	0x21,0x00,0xd0,0x01,0x40,0x03,0x10,0x20,
	0xea,0x18,0x02,0xe3,0x21,0x60,0xe2,0x19,
	0xb1,0x60,0xb0,0xff,0xb0,0xb8,0xe2,0x08,
	0x00,0x20,0xd0,0xc0,0x04,0xe8,0x70,0x28,
	0xc1,0x00,0xc1,0x40,0x00,0x32,0xdd,0x00,
	0x00,0x2a,0x71,0x90,0xc0,0x46,0x21,0x40,
	0x04,0xac,0xd0,0x94,0x00,0x2a,0x71,0x90,
	0x11,0x81,0xc0,0x42,0xc8,0x05,0xd0,0x03,
	0x40,0x03,0x10,0x21,0xee,0x34,0x04,0x10,
	0x68,0x01,0x00,0x20,0xd0,0x23,0x20,0x06,
	0x30,0x03,0xfe,0x4b,0xd0,0x03,0x40,0x03,
	0x10,0x20,0xea,0x45,0x10,0x21,0xea,0x47,
	0x10,0x22,0xea,0x45,0x08,0x6b,0x21,0x5c,
	0xe2,0x48,0xb1,0x7c,0xe2,0x48,0xb1,0x64,
	0xb0,0xff,0xb0,0xb8,0xe2,0x2d,0x04,0xac,
	0xd0,0x94,0xd0,0xc0,0x00,0x2a,0x71,0x90,
	0x11,0x81,0xd0,0x44,0x20,0x42,0xb0,0xb8,
	0xc0,0x02,0x04,0xac,0x30,0x10,0x60,0x01,
	0xb0,0xff,0x00,0x20,0xd0,0x23,0x20,0x06,
	0x30,0x03,0xee,0x51,0xd0,0x44,0x20,0x42,
	0xd0,0x00,0x60,0x01,0xb0,0x44,0x04,0xe7,
	0x60,0x48,0x04,0xac,0xd0,0x14,0x04,0xe7,
	0x60,0x04,0xd0,0x40,0x04,0xe7,0x60,0x4c,
	0x04,0xe7,0x60,0x54,0x04,0xe7,0x60,0x50,
	0x04,0xe7,0x60,0x58,0x07,0xc5,0x07,0x27,
	0x70,0x2c,0x05,0x25,0xd0,0x7c,0x7b,0x81,
	0xcb,0xee,0x2b,0xc0,0x05,0x26,0xd0,0x40,
	0x7c,0x01,0xcc,0x70,0x2c,0x40,0x05,0x26,
	0xd0,0x4c,0x76,0x01,0xc6,0x58,0x00,0x2e,
	0x70,0x40,0x30,0x58,0xfa,0x89,0x07,0x27,
	0x70,0x34,0x26,0x40,0x07,0xc5,0x01,0x9d,
	0xea,0x8f,0xb6,0x3c,0xb6,0x7c,0x17,0xa0,
	0xfe,0xaa,0x01,0x9c,0xea,0xa1,0xc8,0x1e,
	0x00,0x10,0xea,0x98,0xd0,0x20,0x26,0x40,
	0x02,0xe4,0xd0,0x00,0x26,0x00,0x00,0x10,
	0xfa,0x9e,0x26,0x40,0xb8,0x01,0xfa,0x9a,
	0xe2,0xaa,0xc8,0x1e,0x05,0xa8,0xd0,0x00,
	0x02,0xe4,0xd0,0x40,0x26,0x00,0x26,0x41,
	0xb8,0x01,0xfa,0xa6,0x07,0xc5,0x05,0x91,
	0xd0,0xa5,0xc0,0xc2,0x01,0x9c,0xea,0xc9,
	0x03,0xd1,0xfa,0xb6,0xd0,0x80,0xd0,0xe3,
	0x09,0x91,0xe2,0xc9,0x04,0xe8,0x70,0x58,
	0x10,0x61,0xea,0xc9,0x00,0x2a,0x70,0x10,
	0x04,0xe8,0x70,0x5c,0x30,0x40,0xe6,0xc9,
	0xd0,0xa4,0x10,0x01,0x20,0x80,0x30,0x81,
	0x10,0x9f,0xc0,0xc2,0x20,0xc1,0xb0,0xc1,
	0x09,0x91,0x10,0xc8,0x50,0xc2,0xca,0x83,
	0x03,0xec,0x4a,0xbf,0x07,0xc5,0x00,0x00,
	0x80,0x29,0x0f,0x87,0x02,0x86,0x15,0x63,
	0xe8,0x0b,0x15,0x62,0xe8,0x0e,0x15,0x61,
	0xe8,0x16,0x80,0x29,0xe0,0x18,0x05,0x97,
	0xd5,0x41,0x0f,0x87,0x05,0x96,0x05,0xd5,
	0x01,0xd4,0xe8,0x15,0x06,0x49,0x09,0xd4,
	0x09,0xd5,0xe0,0x18,0x80,0x29,0x05,0x94,
	0xb5,0x7f,0x0f,0x87,0x82,0x45,0x84,0x06,
	0x00,0x60,0xdc,0xe1,0x00,0x65,0xdf,0x9a,
	0xe0,0xa9,0x00,0xc6,0x81,0x85,0x98,0x86,
	0x18,0xa0,0xe8,0x23,0x01,0xd6,0xe8,0x41,
	0x09,0xd6,0x01,0x19,0xe8,0x2e,0x00,0x28,
	0xdf,0xc6,0xe0,0xd1,0x01,0x1f,0xe8,0x41,
	0x80,0x45,0x99,0x06,0x0f,0xef,0x49,0x3f,
	0xb9,0x01,0xc0,0x2c,0x10,0x1a,0x0e,0x10,
	0xe8,0x3e,0x03,0xd3,0xf8,0x3e,0x00,0x28,
	0xdf,0xc3,0xe0,0xd1,0x80,0x45,0x80,0x46,
	0x09,0x1f,0x01,0x19,0xf8,0xd6,0x00,0xc6,
	0x01,0xd2,0xe8,0x8e,0x01,0x16,0xe8,0x8e,
	0x07,0xa3,0x70,0x2c,0x10,0x20,0xe8,0x8e,
	0x82,0x45,0x8c,0x06,0x80,0x3f,0x01,0x1f,
	0xe8,0x52,0xf1,0x4b,0x00,0x6d,0xd0,0x1e,
	0xa0,0x36,0x80,0xd7,0x80,0x3f,0x00,0x0d,
	0xf2,0x67,0x00,0x0d,0xf2,0x67,0x00,0x0d,
	0xf2,0x67,0x00,0x0d,0xf2,0x67,0x00,0x0d,
	0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,
	0xf2,0x67,0x00,0x0d,0xf2,0x67,0x00,0x0d,
	0xf2,0x67,0x00,0x0d,0xf2,0x67,0x00,0x0d,
	0x00,0x0d,0x00,0x0d,0x00,0x0d,0x80,0x97,
	0x80,0x3f,0x00,0x0d,0xf2,0x67,0x00,0x0d,
	0xf2,0x67,0x00,0x0d,0x00,0x0d,0x80,0x17,
	0x80,0x05,0xc9,0x29,0x00,0x24,0xd0,0x00,
	0x09,0x00,0xa9,0x06,0x80,0x3f,0xf1,0x4b,
	0x80,0x97,0x80,0x3f,0x00,0x0d,0x00,0x0d,
	0x00,0x0d,0xf2,0x67,0x00,0x0d,0xf2,0x67,
	0x80,0x17,0x80,0x05,0xaa,0x46,0x82,0x45,
	0x84,0x06,0xe0,0x9f,0x01,0x1f,0xe8,0x9f,
	0x01,0x14,0xe8,0x94,0x09,0x14,0x05,0x17,
	0x09,0x12,0x82,0x45,0x00,0x60,0xd9,0x30,
	0xa9,0x06,0x80,0x3f,0xf1,0x4b,0x82,0x45,
	0x84,0x06,0x80,0x07,0xe0,0xb3,0x01,0x18,
	0xe8,0xa6,0x81,0x05,0xd0,0x1f,0x90,0x46,
	0x40,0x40,0xa0,0x6c,0x01,0x14,0xf8,0xa9,
	0x80,0x07,0x02,0x86,0xc9,0x17,0x02,0x46,
	0x01,0xd0,0xe8,0xb1,0x01,0x14,0xe8,0xb1,
	0x06,0x11,0x86,0x45,0xa9,0x06,0x00,0x21,
	0xd0,0x00,0x2b,0x00,0x81,0xc5,0xc9,0x2c,
	0x19,0x1a,0x02,0x06,0x39,0x1b,0xe4,0xbf,
	0xd9,0x3f,0x4b,0x24,0xbb,0x3f,0x02,0x46,
	0x00,0x22,0xd0,0x01,0xa0,0x38,0xab,0x06,
	0x80,0x3f,0x01,0xd5,0xe8,0xca,0x06,0x49,
	0x09,0xd5,0xe0,0xcb,0x05,0xd4,0x02,0x86,
	0xc5,0xa2,0x02,0x46,0x05,0x98,0x01,0x46,
	0x0f,0x87,0x00,0x69,0xdf,0x9e,0xc0,0x00,
	0x01,0x46,0x0f,0x87,0xca,0x3e,0x00,0x63,
	0xdf,0x9b,0x01,0x46,0x0f,0x87,0xc8,0xab,
	0x0c,0x09,0x0a,0xcd,0x38,0xab,0xe9,0x1b,
	0xc8,0xab,0xb8,0x81,0xe5,0x0b,0xcb,0x5c,
	0x3b,0x62,0xfd,0x0b,0xdb,0x7f,0x4b,0x6c,
	0x38,0xad,0xe8,0xed,0x00,0x28,0xdf,0xc4,
	0xe2,0x5e,0x01,0xd7,0xe9,0x0e,0x02,0x86,
	0x01,0x46,0x81,0xa2,0x98,0xa3,0x00,0xc6,
	0x38,0x86,0xfd,0x0e,0x02,0x46,0xc8,0x95,
	0x02,0x86,0x38,0x88,0xed,0x0e,0x05,0xa2,
	0x78,0x84,0x18,0xa3,0xe9,0x0a,0x03,0x56,
	0xf9,0x0a,0x11,0xe4,0xf9,0x0a,0xdb,0x4a,
	0x3b,0x6b,0xe9,0x0a,0xdb,0x54,0x3b,0x6b,
	0xe9,0x0a,0xe1,0x0e,0x05,0x9b,0x05,0x9a,
	0x05,0x98,0xe1,0x2a,0x01,0xd1,0xe9,0x1b,
	0x03,0x1f,0xe9,0x1b,0x02,0x46,0xcb,0x4b,
	0x02,0x06,0xc8,0x98,0x02,0x86,0x3b,0x62,
	0x05,0xa8,0x3b,0x40,0xfd,0x0e,0x09,0x49,
	0x0b,0x4d,0xab,0x6c,0xdb,0x61,0x0b,0x48,
	0xdb,0x69,0x08,0x8d,0x01,0x10,0xf9,0x1f,
	0x01,0x46,0x81,0xc5,0xab,0x06,0x80,0x07,
	0x06,0x49,0x05,0xd6,0x02,0x06,0x00,0xc6,
	0x0a,0x05,0x01,0x46,0x00,0x60,0xdc,0xda,
	0x83,0x3a,0x00,0x20,0xd0,0x01,0xa0,0x3b,
	0x83,0x7a,0x01,0xe8,0xd0,0x3c,0x80,0x3f,
	0x04,0x0b,0x7e,0xc0,0x00,0x06,0xc8,0x81,
	0x00,0xc6,0x80,0x97,0x85,0x05,0xa0,0x86,
	0xa0,0xc6,0xa1,0x06,0xa1,0x46,0x81,0xc5,
	0xab,0x06,0x82,0x45,0x8c,0x06,0x80,0x3f,
	0x06,0x49,0xc0,0x00,0xe1,0x49,0x06,0x49,
	0x99,0x37,0x02,0x16,0xe9,0x4c,0x00,0x22,
	0xd0,0x00,0xa0,0x37,0x07,0xc5,0xcb,0x2b,
	0xbb,0x01,0xc7,0xac,0xd7,0x40,0x00,0x65,
	0xda,0x1a,0xe1,0x1b,0x01,0x98,0xe9,0x5a,
	0x09,0x98,0x01,0x46,0x02,0x86,0xc8,0x56,
	0x02,0x06,0xc6,0xac,0x00,0xc6,0x00,0x94,
	0xe9,0x6e,0x01,0xd3,0xe9,0xc6,0x80,0x97,
	0x80,0x3f,0x00,0x8d,0x00,0xcd,0x01,0x0d,
	0x01,0x4d,0xe1,0xc6,0x80,0x97,0x80,0x3f,
	0x00,0x8d,0x00,0xcd,0x01,0x0d,0x01,0x4d,
	0x80,0xd7,0x80,0x3f,0x01,0x8d,0x01,0xcd,
	0x02,0x0d,0x02,0x4d,0x02,0x8d,0x02,0xcd,
	0x03,0x0d,0x03,0x4d,0x03,0x8d,0x03,0xcd,
	0x04,0x0d,0x04,0x4d,0x04,0x8d,0x04,0xcd,
	0x05,0x0d,0x05,0x4d,0x01,0xd2,0xe9,0xaa,
	0x00,0x96,0xe9,0xaa,0x07,0xa3,0x70,0x2c,
	0x10,0x20,0xe9,0xaa,0x00,0xed,0xd0,0x1e,
	0xa0,0x36,0xf2,0x6b,0xc1,0x80,0xf2,0x6b,
	0xc1,0xc0,0xf2,0x6b,0xc2,0x00,0xf2,0x6b,
	0xc2,0x40,0xf2,0x6b,0xc3,0x80,0xf2,0x6b,
	0xc3,0xc0,0xf2,0x6b,0xc4,0x00,0xf2,0x6b,
	0xc4,0x40,0xf2,0x6b,0xc0,0x80,0xf2,0x6b,
	0xc0,0xc0,0xf2,0x6b,0xc1,0x00,0xf2,0x6b,
	0xc1,0x40,0xe1,0xc6,0x00,0x9f,0xf9,0xb8,
	0x00,0x97,0xf9,0xb8,0x00,0x96,0xe9,0xb8,
	0xc2,0x86,0xc2,0xc7,0xc3,0x08,0xc3,0x49,
	0xc4,0x8e,0xc4,0xcf,0xc5,0x10,0xc5,0x51,
	0x01,0x9e,0xe9,0xbd,0x00,0x97,0xf9,0xbd,
	0x04,0x97,0x00,0x9f,0xe9,0xc6,0x01,0x9c,
	0xe9,0xc2,0x04,0x91,0x01,0x9f,0xe9,0xc6,
	0xc0,0xc2,0xc1,0x44,0x80,0x17,0x82,0xc5,
	0x80,0x06,0x00,0x22,0xd0,0x00,0xa0,0x38,
	0x00,0x94,0xfa,0x16,0x01,0x9e,0xea,0x01,
	0xc8,0x02,0x00,0x10,0xf9,0xd8,0x21,0xae,
	0x21,0xee,0x23,0xaf,0x23,0xef,0xe1,0xdc,
	0x21,0xb0,0x21,0xf0,0x23,0xb1,0x23,0xf1,
	0xc8,0x03,0x00,0x10,0xf9,0xe4,0x22,0x2e,
	0x22,0x6e,0x24,0x2f,0x24,0x6f,0xe1,0xe8,
	0x22,0x30,0x22,0x70,0x24,0x31,0x24,0x71,
	0xc8,0x04,0x00,0x10,0xf9,0xf0,0x22,0xae,
	0x22,0xee,0x24,0xaf,0x24,0xef,0xe1,0xf4,
	0x22,0xb0,0x22,0xf0,0x24,0xb1,0x24,0xf1,
	0xc8,0x05,0x00,0x10,0xf9,0xfc,0x23,0x2e,
	0x23,0x6e,0x25,0x2f,0x25,0x6f,0xe2,0x00,
	0x23,0x30,0x23,0x70,0x25,0x31,0x25,0x71,
	0xe2,0x11,0x21,0xae,0x21,0xee,0x22,0x2e,
	0x22,0x6e,0x22,0xb0,0x22,0xf0,0x23,0x30,
	0x23,0x70,0x23,0xaf,0x23,0xef,0x24,0x2f,
	0x24,0x6f,0x24,0xb1,0x24,0xf1,0x25,0x31,
	0x25,0x71,0xf2,0xa7,0x01,0x94,0xfa,0x16,
	0xf2,0xde,0x05,0x93,0x17,0x60,0xfa,0x19,
	0xf2,0x86,0x01,0x96,0xea,0x19,0xf3,0x15,
	0x09,0x96,0x09,0x94,0x00,0x94,0xfa,0x23,
	0x01,0x93,0xfa,0x23,0xf2,0xde,0x09,0x93,
	0x00,0xae,0xd0,0x38,0x01,0x99,0xfa,0x2c,
	0x01,0x9a,0xea,0x2c,0x0f,0x49,0x05,0x99,
	0x98,0x0d,0x00,0x55,0xfa,0x37,0xb0,0x01,
	0xee,0x37,0x01,0x46,0x82,0xc5,0x98,0x06,
	0x00,0x10,0xea,0x37,0x80,0x06,0x00,0xc6,
	0x01,0x97,0xea,0x26,0xf3,0x48,0x09,0x97,
	0xb7,0x7f,0xc0,0x1b,0x30,0x1d,0xee,0x50,
	0xb7,0xbf,0xd7,0x40,0xc0,0x1c,0xb0,0x04,
	0x30,0x1e,0xfa,0x50,0x04,0xea,0x70,0x00,
	0x10,0x22,0xea,0x50,0x10,0x24,0xea,0x50,
	0x00,0x28,0x70,0x04,0x05,0x61,0x60,0x14,
	0x01,0x9a,0xfa,0x58,0xc0,0x1c,0x30,0x1e,
	0xed,0x5a,0x00,0x28,0xdf,0xc5,0xe2,0x5e,
	0x00,0xa9,0xd0,0x48,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x0b,0xd3,0x01,0x46,
	0x00,0x70,0xd0,0x01,0xa0,0x37,0x80,0x3f,
	0x00,0xc6,0xc0,0x00,0xe2,0x65,0xa0,0x34,
	0x10,0x10,0xa0,0x34,0x07,0xc5,0x90,0x34,
	0x90,0x74,0x10,0x48,0x10,0x48,0x20,0x01,
	0x07,0xc5,0x98,0x0d,0x00,0x55,0xfa,0x77,
	0x07,0xc9,0x08,0x0d,0xe2,0x71,0xd8,0x20,
	0xd0,0x00,0xb0,0x01,0xa0,0x0e,0xb8,0x01,
	0xee,0x7a,0x07,0xc9,0x08,0x0d,0x07,0xc9,
	0x08,0x0d,0x07,0xc9,0x08,0x0d,0x07,0xc9,
	0x08,0x0d,0x07,0xc5,0x17,0xa0,0xfa,0x8d,
	0x01,0x9d,0xea,0xa4,0xb6,0x3c,0xb6,0x7c,
	0xe2,0xa4,0x01,0x9c,0xea,0x9e,0x02,0xe4,
	0xd0,0x00,0x26,0x00,0xc8,0x1e,0x00,0x10,
	0xfa,0x9b,0xd0,0x20,0x36,0x40,0x02,0xe4,
	0xd0,0x00,0x26,0x40,0xe2,0xa4,0xd0,0x20,
	0x26,0x40,0xe2,0xa4,0x05,0xa8,0xd0,0x00,
	0x26,0x00,0x02,0xe4,0xd0,0x00,0x26,0x40,
	0xc5,0x98,0xc5,0xd9,0x07,0xc5,0x01,0x46,
	0x00,0xa0,0xd8,0x00,0x00,0x91,0xfa,0xad,
	0x04,0x10,0x00,0x97,0xea,0xc3,0xa0,0xa0,
	0x80,0x3f,0x08,0x0a,0x76,0x46,0x04,0x12,
	0x08,0x0a,0x76,0x47,0x00,0xc6,0xa0,0xe0,
	0x80,0x3f,0x08,0x12,0x04,0x14,0x01,0x46,
	0x08,0x0a,0x76,0x48,0x04,0x12,0x08,0x0a,
	0x76,0x49,0x00,0xc6,0x04,0x13,0x00,0x92,
	0xfa,0xc7,0x00,0x96,0xea,0xdc,0xa1,0x20,
	0x80,0x3f,0x08,0x14,0x08,0x12,0x01,0x46,
	0x08,0x0a,0x76,0x4a,0x04,0x12,0x08,0x0a,
	0x76,0x4b,0x00,0xc6,0xa1,0x60,0x80,0x3f,
	0x08,0x12,0x04,0x14,0x01,0x46,0x08,0x0a,
	0x76,0x4c,0x04,0x12,0x08,0x0a,0x76,0x4d,
	0x00,0xc6,0x07,0xc5,0x01,0x46,0x00,0xa0,
	0xd8,0x20,0x00,0x91,0xfa,0xe4,0x04,0x10,
	0x00,0x97,0xea,0xfa,0xa0,0xa0,0x80,0x3f,
	0x08,0x0a,0x76,0x4e,0x04,0x12,0x08,0x0a,
	0x76,0x4f,0x00,0xc6,0xa0,0xe0,0x80,0x3f,
	0x04,0x14,0x08,0x12,0x01,0x46,0x08,0x0a,
	0x76,0x50,0x04,0x12,0x08,0x0a,0x76,0x51,
	0x00,0xc6,0x04,0x13,0x00,0x92,0xfa,0xfe,
	0x00,0x96,0xeb,0x13,0xa1,0x20,0x80,0x3f,
	0x08,0x14,0x08,0x12,0x01,0x46,0x08,0x0a,
	0x76,0x52,0x04,0x12,0x08,0x0a,0x76,0x53,
	0x00,0xc6,0xa1,0x60,0x80,0x3f,0x04,0x14,
	0x08,0x12,0x01,0x46,0x08,0x0a,0x76,0x54,
	0x04,0x12,0x08,0x0a,0x76,0x55,0x00,0xc6,
	0x07,0xc5,0x01,0x46,0x00,0xa3,0xd8,0x1c,
	0x07,0x7d,0xde,0x02,0xc0,0x40,0x00,0x94,
	0xfb,0x1f,0xd0,0x01,0x50,0x40,0x01,0x9c,
	0xeb,0x23,0x00,0x93,0xeb,0x26,0xd0,0x04,
	0x50,0x40,0x04,0x10,0xa0,0x5a,0x80,0x3f,
	0x08,0x0a,0x66,0x56,0x04,0x1c,0x01,0x9c,
	0xeb,0x39,0x00,0x93,0xeb,0x34,0x0f,0xff,
	0xdd,0xff,0x40,0x40,0xd0,0x04,0xe3,0x3e,
	0x0f,0xfe,0xdf,0xff,0x40,0x40,0xd0,0x20,
	0xe3,0x3e,0x0f,0xff,0xdd,0xff,0x40,0x40,
	0x02,0xe4,0xd0,0x00,0x25,0x80,0xa0,0x5a,
	0x80,0x3f,0x08,0x0a,0x66,0x56,0x35,0x80,
	0x00,0x24,0x25,0x80,0x00,0xc6,0x07,0xc5,
	0x01,0x46,0x01,0xa3,0xd8,0x1c,0x01,0x9c,
	0xfb,0x4e,0x04,0x10,0x07,0x7d,0xde,0x0a,
	0xc0,0x40,0x00,0x94,0xfb,0x55,0xd0,0x01,
	0x50,0x40,0xa0,0x5a,0x80,0x3f,0x08,0x0a,
	0x66,0x57,0x00,0x24,0x25,0xc0,0x00,0xc6,
	0x07,0xc5,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0x29,0x0f,0x87,
	0x02,0x86,0x15,0x63,0xe8,0x0b,0x15,0x62,
	0xe8,0x0e,0x15,0x61,0xe8,0x16,0x80,0x29,
	0xe0,0x18,0x05,0x97,0xd5,0x41,0x0f,0x87,
	0x05,0x96,0x05,0xd5,0x01,0xd4,0xe8,0x15,
	0x06,0x49,0x09,0xd4,0x09,0xd5,0xe0,0x18,
	0x80,0x29,0x05,0x94,0xb5,0x7f,0x0f,0x87,
	0x82,0x45,0x84,0x06,0x00,0x60,0xdc,0xe1,
	0x00,0x65,0xdf,0x85,0xe0,0x67,0x00,0xc6,
	0x81,0x85,0x98,0x86,0x18,0xa0,0xe8,0x23,
	0x01,0xd6,0xe8,0x41,0x09,0xd6,0x01,0x19,
	0xe8,0x2e,0x00,0x28,0xdf,0xc6,0xe0,0x8f,
	0x01,0x1f,0xe8,0x41,0x80,0x45,0x99,0x06,
	0x0f,0xef,0x49,0x3f,0xb9,0x01,0xc0,0x2c,
	0x10,0x1a,0x0e,0x10,0xe8,0x3e,0x03,0xd3,
	0xf8,0x3e,0x00,0x28,0xdf,0xc3,0xe0,0x8f,
	0x80,0x45,0x80,0x46,0x09,0x1f,0x01,0x19,
	0xf8,0x94,0x00,0xc6,0x01,0x1f,0xe8,0x55,
	0x01,0x14,0xe8,0x4a,0x09,0x14,0x05,0x17,
	0x09,0x12,0x82,0x45,0x00,0x60,0xd9,0x30,
	0xa9,0x06,0x80,0x3f,0xf1,0x36,0x82,0x45,
	0x84,0x06,0x80,0x07,0xe0,0x71,0xd0,0x1f,
	0x01,0x18,0xe8,0x5c,0x81,0x05,0x90,0x46,
	0x40,0x40,0xa0,0x6c,0x90,0x6c,0x40,0x40,
	0x01,0x9c,0xe8,0x63,0x01,0x13,0xf8,0x63,
	0xb0,0x60,0xa0,0x6c,0x01,0x14,0xf8,0x67,
	0x80,0x07,0x02,0x86,0xc9,0x17,0x02,0x46,
	0x01,0xd0,0xe8,0x6f,0x01,0x14,0xe8,0x6f,
	0x06,0x11,0x86,0x45,0xa9,0x06,0x00,0x21,
	0xd0,0x00,0x2b,0x00,0x81,0xc5,0xc9,0x2c,
	0x19,0x1a,0x02,0x06,0x39,0x1b,0xe4,0x7d,
	0xd9,0x3f,0x4b,0x24,0xbb,0x3f,0x02,0x46,
	0x00,0x22,0xd0,0x01,0xa0,0x38,0xab,0x06,
	0x80,0x3f,0x01,0xd5,0xe8,0x88,0x06,0x49,
	0x09,0xd5,0xe0,0x89,0x05,0xd4,0x02,0x86,
	0xc5,0xa2,0x02,0x46,0x05,0x98,0x01,0x46,
	0x0f,0x87,0x00,0x69,0xdf,0xae,0xc0,0x00,
	0x01,0x46,0x0f,0x87,0xca,0x3e,0x00,0x62,
	0xdf,0x99,0x01,0x46,0x0f,0x87,0xc8,0xab,
	0x0c,0x09,0x0a,0xcd,0x38,0xab,0xe8,0xda,
	0xc8,0xab,0xb8,0x81,0xe4,0xd7,0xcb,0x5c,
	0x3b,0x62,0xfc,0xd7,0xdb,0x7f,0x4b,0x6c,
	0x38,0xad,0xe8,0xab,0x00,0x28,0xdf,0xc4,
	0xe2,0x6e,0xc8,0xaa,0x18,0x98,0x38,0x9e,
	0xe8,0xda,0xd8,0xbf,0x48,0xaa,0xb8,0xbf,
	0x38,0x9e,0xe8,0xda,0x02,0x86,0x01,0x46,
	0x81,0xa2,0x98,0xa3,0x00,0xc6,0x38,0x86,
	0xfc,0xda,0x02,0x46,0xc8,0x95,0x02,0x86,
	0x38,0x88,0xec,0xda,0x07,0x26,0x78,0xa8,
	0x18,0xa0,0xf8,0xca,0x04,0xe8,0x78,0x90,
	0x18,0xa3,0xf8,0xd6,0x03,0xd5,0xf8,0xd6,
	0x03,0xd2,0xe8,0xd6,0x04,0xe8,0x78,0x80,
	0xb8,0xbc,0x78,0xa2,0x18,0x90,0x02,0x06,
	0xcb,0x5e,0x3b,0x62,0xbb,0x52,0xe4,0xda,
	0x05,0x9b,0x05,0x9a,0x05,0x98,0xe1,0x15,
	0x01,0x91,0xf9,0x06,0xdb,0x7f,0x4b,0x6c,
	0x03,0xd3,0xf9,0x02,0xd8,0xbf,0x48,0xaa,
	0x18,0xa0,0xe9,0x06,0x3b,0x62,0xf9,0x06,
	0x01,0x46,0x84,0x22,0x02,0x20,0xdb,0x40,
	0xab,0x63,0x00,0xc6,0x98,0xa1,0x00,0xa8,
	0x48,0x80,0xf8,0xec,0x01,0x46,0x83,0x22,
	0x98,0xa3,0x00,0xc6,0x18,0x9e,0x18,0x82,
	0x01,0xe8,0x68,0xa8,0x01,0x46,0x84,0x22,
	0xd8,0x81,0x05,0x53,0xa8,0xa3,0x02,0x20,
	0xd8,0x81,0xa8,0xa3,0x00,0xc6,0xe1,0x06,
	0xc8,0xaa,0x18,0x98,0x3b,0x62,0xec,0xd7,
	0x09,0x49,0x0b,0x4d,0xab,0x6c,0xdb,0x61,
	0x0b,0x48,0xdb,0x69,0x08,0x8d,0x01,0x10,
	0xf9,0x0a,0x01,0x46,0x81,0xc5,0xab,0x06,
	0x80,0x07,0x06,0x49,0x05,0xd6,0x02,0x06,
	0x00,0xc6,0x0a,0x05,0x01,0x46,0x00,0x60,
	0xdc,0xda,0x83,0x3a,0x00,0x20,0xd0,0x01,
	0xa0,0x3b,0x83,0x7a,0x01,0xe8,0xd0,0x3c,
	0x80,0x3f,0x04,0x0b,0x7e,0xc0,0x00,0x06,
	0xc8,0x81,0x00,0xc6,0x80,0x97,0x85,0x05,
	0xa0,0x86,0xa0,0xc6,0xa1,0x06,0xa1,0x46,
	0x81,0xc5,0xab,0x06,0x82,0x45,0x8c,0x06,
	0x80,0x3f,0x06,0x49,0xc0,0x00,0xe1,0x34,
	0x06,0x49,0x99,0x37,0x02,0x16,0xe9,0x37,
	0x00,0x22,0xd0,0x00,0xa0,0x37,0x07,0xc5,
	0xcb,0x2b,0xbb,0x01,0xc7,0xac,0xd7,0x40,
	0x00,0x65,0xda,0x05,0xe0,0xda,0x01,0x98,
	0xe9,0x45,0x09,0x98,0x01,0x46,0x02,0x86,
	0xc8,0x56,0x02,0x06,0xc6,0xac,0x00,0xc6,
	0x00,0x94,0xe9,0x59,0x01,0xd3,0xe9,0x8d,
	0x80,0x97,0x80,0x3f,0x00,0x8d,0x00,0xcd,
	0x01,0x0d,0x01,0x4d,0xe1,0x8d,0x80,0x97,
	0x80,0x3f,0x00,0x8d,0x00,0xcd,0x01,0x0d,
	0x01,0x4d,0x80,0xd7,0x80,0x3f,0x01,0x8d,
	0x01,0xcd,0x02,0x0d,0x02,0x4d,0x02,0x8d,
	0x02,0xcd,0x03,0x0d,0x03,0x4d,0x03,0x8d,
	0x03,0xcd,0x04,0x0d,0x04,0x4d,0x04,0x8d,
	0x04,0xcd,0x05,0x0d,0x05,0x4d,0x00,0x9f,
	0xf9,0x7f,0x00,0x97,0xf9,0x7f,0x00,0x96,
	0xe9,0x7f,0xc2,0x86,0xc2,0xc7,0xc3,0x08,
	0xc3,0x49,0xc4,0x8e,0xc4,0xcf,0xc5,0x10,
	0xc5,0x51,0x01,0x9e,0xe9,0x84,0x00,0x97,
	0xf9,0x84,0x04,0x97,0x00,0x9f,0xe9,0x8d,
	0x01,0x9c,0xe9,0x89,0x04,0x91,0x01,0x9f,
	0xe9,0x8d,0xc0,0xc2,0xc1,0x44,0x80,0x17,
	0x82,0xc5,0x80,0x06,0x00,0x22,0xd0,0x00,
	0xa0,0x38,0x00,0x94,0xf9,0xaa,0x21,0xae,
	0x21,0xee,0x22,0x2e,0x22,0x6e,0x22,0xb0,
	0x22,0xf0,0x23,0x30,0x23,0x70,0x23,0xaf,
	0x23,0xef,0x24,0x2f,0x24,0x6f,0x24,0xb1,
	0x24,0xf1,0x25,0x31,0x25,0x71,0xf2,0xd7,
	0x01,0x94,0xf9,0xaa,0xf3,0x0e,0x05,0x93,
	0x17,0x60,0xf9,0xbb,0x01,0x91,0xf9,0xb9,
	0xd0,0x3f,0x40,0x2a,0x30,0x1e,0xed,0xb9,
	0xc0,0x2a,0x10,0x18,0x30,0x1e,0xe5,0xb9,
	0x05,0x92,0xf3,0xaa,0xe1,0xbb,0x09,0x92,
	0xf3,0xa7,0x01,0x96,0xe9,0xbb,0xf3,0x45,
	0x09,0x96,0x09,0x94,0x00,0x94,0xf9,0xc5,
	0x01,0x93,0xf9,0xc5,0xf3,0x0e,0x09,0x93,
	0x00,0xae,0xd0,0x38,0x01,0x99,0xf9,0xda,
	0x01,0x9a,0xe9,0xda,0x01,0x91,0xf9,0xd8,
	0x01,0x9b,0xf9,0xd8,0x03,0xd3,0xf9,0xd8,
	0xd0,0x3f,0x40,0x2a,0x10,0x20,0xe9,0xd8,
	0x09,0x9a,0xe2,0x77,0x0f,0x49,0x05,0x99,
	0x98,0x0d,0x00,0x55,0xf9,0xe5,0xb0,0x01,
	0xed,0xe5,0x01,0x46,0x82,0xc5,0x98,0x06,
	0x00,0x10,0xe9,0xe5,0x80,0x06,0x00,0xc6,
	0x01,0x97,0xe9,0xc8,0xf3,0x68,0x09,0x97,
	0xb7,0x7f,0xc0,0x1b,0x30,0x1d,0xee,0x43,
	0xc1,0x9e,0xb1,0xbf,0x01,0x9c,0xea,0x14,
	0x01,0x92,0xe9,0xf6,0x03,0xd3,0xfa,0x0c,
	0x04,0xe7,0xd0,0x24,0x04,0xe7,0xd0,0x94,
	0x04,0xe7,0xd0,0xcc,0xf3,0xcc,0xd0,0x3f,
	0x40,0x2a,0x30,0x1e,0xee,0x0c,0xc0,0x2a,
	0x10,0x18,0x30,0x1e,0xf6,0x2a,0x04,0xe7,
	0xd0,0x28,0x04,0xe7,0xd0,0xa0,0x04,0xe7,
	0xd0,0xdc,0xe2,0x12,0x04,0xe7,0xd0,0x28,
	0x04,0xe7,0xd0,0x98,0x04,0xe7,0xd0,0xd0,
	0xf3,0xcc,0xe2,0x2a,0x11,0x81,0xb1,0x81,
	0x04,0xe7,0xd0,0x24,0x04,0xe7,0xd0,0x94,
	0x04,0xe7,0xd0,0xcc,0x01,0x9d,0xea,0x22,
	0x04,0xe7,0xd0,0x98,0x04,0xe7,0xd0,0xd0,
	0xf3,0xcc,0xd0,0x01,0x40,0x06,0xea,0x2a,
	0xb1,0x81,0x04,0xe7,0xd0,0x28,0xe2,0x18,
	0xc0,0x1c,0x30,0x1e,0xb0,0x01,0xfa,0x33,
	0x03,0xd3,0xea,0x33,0xd7,0xbf,0x47,0xaa,
	0xb7,0x81,0xb7,0xbf,0xd7,0x40,0xc0,0x1c,
	0xb0,0x04,0x30,0x1e,0xfa,0x43,0x04,0xea,
	0x70,0x00,0x10,0x22,0xea,0x43,0x10,0x24,
	0xea,0x43,0x00,0x28,0x70,0x04,0x05,0x61,
	0x60,0x14,0x01,0x9a,0xfa,0x4b,0xc0,0x1c,
	0x30,0x1e,0xed,0x45,0x00,0x28,0xdf,0xc5,
	0xe2,0x6e,0x03,0xd3,0xea,0x68,0x01,0x9b,
	0xfa,0x68,0x04,0xe7,0x70,0x1c,0x04,0xac,
	0x30,0x10,0x04,0xe7,0xd0,0x58,0x70,0x81,
	0x10,0xa0,0xea,0x5f,0xb0,0xbc,0x78,0x02,
	0x58,0x00,0x68,0x02,0x04,0xe7,0x70,0x20,
	0x60,0x01,0x0b,0xd3,0x0c,0x09,0x0a,0xcd,
	0x1a,0xe0,0xea,0x68,0x00,0x22,0xd0,0x2f,
	0x30,0x2b,0xee,0x60,0x00,0xa9,0xd0,0x48,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x0b,0xd3,0x01,0x46,0x00,0x70,0xd0,0x01,
	0xa0,0x37,0x80,0x3f,0x00,0xc6,0xc0,0x00,
	0xe2,0x75,0xc0,0x1c,0xb0,0x01,0x30,0x1e,
	0xfe,0x7e,0x00,0x28,0xdf,0xc5,0xe2,0x6e,
	0xf2,0xb9,0x01,0xe8,0x70,0x68,0xf2,0xc2,
	0xf2,0x95,0xd8,0x00,0x04,0x53,0x84,0x22,
	0xa8,0x23,0xf2,0xb4,0xda,0xff,0x4a,0xea,
	0xba,0xff,0x0c,0x09,0x00,0x0d,0x30,0x2b,
	0xfa,0x8b,0x07,0xd3,0xdb,0x3f,0x4b,0x2a,
	0x00,0x67,0xda,0x06,0xe1,0x06,0x00,0x23,
	0x30,0x48,0x81,0x22,0x98,0x23,0x18,0x1e,
	0x18,0x04,0x05,0x6d,0x70,0x00,0x38,0x01,
	0xfe,0xa0,0x20,0x40,0x83,0x22,0x98,0x23,
	0x18,0x1e,0x18,0x02,0xa0,0x63,0x38,0x01,
	0xee,0xa8,0x28,0x00,0x80,0x62,0x90,0x63,
	0x10,0x5e,0x10,0x42,0x20,0x60,0xa0,0x63,
	0x30,0x01,0x01,0x21,0x30,0x00,0x80,0xa2,
	0xa0,0x23,0x07,0xc5,0x84,0x22,0x00,0x32,
	0xd8,0x01,0xa0,0x23,0xe2,0xbd,0x84,0x22,
	0x02,0xa0,0xd0,0x00,0xa0,0x23,0x90,0x21,
	0x00,0xa8,0x40,0x00,0xfa,0xbd,0x07,0xc5,
	0x98,0x0d,0x00,0x55,0xfa,0xc8,0x07,0xc9,
	0x08,0x0d,0xe2,0xc2,0xd8,0x20,0xd0,0x00,
	0xb0,0x01,0xa0,0x0e,0xb8,0x01,0xee,0xcb,
	0x07,0xc9,0x08,0x0d,0x07,0xc9,0x08,0x0d,
	0x07,0xc9,0x08,0x0d,0x07,0xc9,0x08,0x0d,
	0x07,0xc5,0x01,0x46,0x00,0xa0,0xd8,0x00,
	0x00,0x91,0xfa,0xdd,0x04,0x10,0x00,0x97,
	0xea,0xf3,0xa0,0xa0,0x80,0x3f,0x08,0x0a,
	0x76,0x46,0x04,0x12,0x08,0x0a,0x76,0x47,
	0x00,0xc6,0xa0,0xe0,0x80,0x3f,0x08,0x12,
	0x04,0x14,0x01,0x46,0x08,0x0a,0x76,0x48,
	0x04,0x12,0x08,0x0a,0x76,0x49,0x00,0xc6,
	0x04,0x13,0x00,0x92,0xfa,0xf7,0x00,0x96,
	0xeb,0x0c,0xa1,0x20,0x80,0x3f,0x08,0x14,
	0x08,0x12,0x01,0x46,0x08,0x0a,0x76,0x4a,
	0x04,0x12,0x08,0x0a,0x76,0x4b,0x00,0xc6,
	0xa1,0x60,0x80,0x3f,0x08,0x12,0x04,0x14,
	0x01,0x46,0x08,0x0a,0x76,0x4c,0x04,0x12,
	0x08,0x0a,0x76,0x4d,0x00,0xc6,0x07,0xc5,
	0x01,0x46,0x00,0xa0,0xd8,0x20,0x00,0x91,
	0xfb,0x14,0x04,0x10,0x00,0x97,0xeb,0x2a,
	0xa0,0xa0,0x80,0x3f,0x08,0x0a,0x76,0x4e,
	0x04,0x12,0x08,0x0a,0x76,0x4f,0x00,0xc6,
	0xa0,0xe0,0x80,0x3f,0x04,0x14,0x08,0x12,
	0x01,0x46,0x08,0x0a,0x76,0x50,0x04,0x12,
	0x08,0x0a,0x76,0x51,0x00,0xc6,0x04,0x13,
	0x00,0x92,0xfb,0x2e,0x00,0x96,0xeb,0x43,
	0xa1,0x20,0x80,0x3f,0x08,0x14,0x08,0x12,
	0x01,0x46,0x08,0x0a,0x76,0x52,0x04,0x12,
	0x08,0x0a,0x76,0x53,0x00,0xc6,0xa1,0x60,
	0x80,0x3f,0x04,0x14,0x08,0x12,0x01,0x46,
	0x08,0x0a,0x76,0x54,0x04,0x12,0x08,0x0a,
	0x76,0x55,0x00,0xc6,0x07,0xc5,0x01,0x46,
	0x00,0xa3,0xd8,0x1d,0x07,0x7d,0xde,0x06,
	0xc0,0x40,0x00,0x94,0xfb,0x4f,0xd0,0x01,
	0x50,0x40,0xa0,0x5a,0x80,0x3f,0x08,0x0a,
	0x66,0x59,0x04,0x1c,0x0f,0xff,0xdd,0xff,
	0x40,0x40,0xa0,0x5a,0x80,0x3f,0x08,0x0a,
	0x66,0x57,0x00,0x24,0xd0,0x00,0x26,0x40,
	0x25,0xc0,0x01,0x92,0xeb,0x66,0x03,0xd3,
	0xfb,0x65,0x35,0xc0,0xe3,0x66,0x36,0x40,
	0x00,0xc6,0x07,0xc5,0x01,0x46,0x00,0xa3,
	0xd8,0x0d,0x03,0x7d,0xde,0x0e,0xc0,0x40,
	0x00,0x94,0xfb,0x72,0xd0,0x01,0x50,0x40,
	0xa0,0x5a,0x80,0x3f,0x08,0x0a,0x66,0x58,
	0x04,0x1c,0x0f,0xff,0xdd,0xff,0x40,0x40,
	0xa0,0x5a,0x80,0x3f,0x08,0x0a,0x66,0x56,
	0x00,0x24,0xd0,0x00,0x26,0x00,0x25,0x80,
	0x01,0x92,0xeb,0x66,0x03,0xd3,0xfb,0x88,
	0x35,0x80,0xe3,0x66,0x36,0x00,0xe3,0x66,
	0x04,0xe7,0xd0,0x04,0x70,0x40,0x10,0x60,
	0xeb,0x8a,0xc8,0x01,0xb8,0x3c,0x78,0x20,
	0x0f,0xef,0x48,0x3f,0xeb,0x99,0x04,0xac,
	0x28,0x10,0x68,0x00,0xe3,0x9c,0x68,0x00,
	0xb0,0x3c,0x68,0x00,0x07,0xc5,0x78,0x01,
	0x02,0xe4,0xd0,0x00,0x00,0x10,0xfb,0xa5,
	0xd0,0x60,0x30,0x40,0xc0,0x01,0x08,0x10,
	0x07,0xc5,0x17,0xcb,0x57,0x5f,0xe3,0xb4,
	0x17,0xcb,0x57,0x5f,0x07,0xff,0xdf,0x00,
	0xc6,0x00,0xc6,0x40,0xc5,0xc0,0xc5,0x80,
	0x03,0xd3,0xfb,0xbe,0xf3,0x8a,0x04,0xe7,
	0xd0,0x24,0x60,0x40,0xf3,0x9d,0xc6,0x20,
	0xc6,0x60,0x36,0x40,0x01,0x92,0xfb,0xc6,
	0xf3,0x8a,0x04,0xe7,0xd0,0x28,0x60,0x40,
	0xf3,0x9d,0xc5,0xa0,0xc5,0xe0,0x35,0xc0,
	0xc7,0xdd,0x00,0x23,0x47,0x7f,0x17,0xd5,
	0x17,0xe0,0x07,0xc5,0xc8,0x06,0x70,0x40,
	0xc0,0x01,0xb0,0x3c,0x18,0x08,0x18,0x08,
	0x68,0x00,0x70,0x02,0x10,0x20,0xfb,0xe8,
	0x04,0xe7,0xd0,0x20,0x30,0x02,0xeb,0xdc,
	0x11,0xa1,0xfb,0xdf,0x60,0x43,0x60,0x42,
	0xe3,0xef,0x04,0xe7,0xd0,0x04,0x70,0x80,
	0x60,0x40,0xb0,0x7c,0x04,0xac,0x30,0x90,
	0x60,0x81,0x07,0xc5,0x60,0x42,0xb0,0x3c,
	0x70,0x80,0x04,0xac,0x30,0x50,0x20,0x42,
	0x60,0x40,0x07,0xc5,0xd0,0x41,0x05,0x61,
	0x60,0x64,0x05,0x2f,0x60,0x50,0x07,0x56,
	0x05,0x6a,0x72,0xac,0x05,0x6a,0x72,0xe8,
	0x04,0xea,0x73,0x28,0x05,0x6a,0x73,0x70,
	0x00,0xa8,0xd0,0x68,0x05,0x28,0x60,0x44,
	0x00,0x60,0xd0,0x40,0x05,0x28,0x60,0x48,
	0xf0,0x3b,0xf0,0x84,0x00,0x20,0xd8,0x01,
	0x38,0x2b,0xec,0x2e,0x00,0x22,0xd8,0x6f,
	0x38,0x6b,0xf4,0x21,0xe0,0x2e,0xc0,0x10,
	0x30,0x2b,0xf8,0x2c,0x04,0xea,0x70,0x00,
	0x10,0x22,0xe8,0x2c,0x00,0x28,0x70,0x44,
	0x05,0x61,0x60,0x54,0xf0,0x50,0xe0,0x17,
	0xd0,0x40,0x05,0x61,0x60,0x54,0xd0,0x40,
	0x05,0x61,0x60,0x64,0x07,0x56,0x00,0xa9,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x05,0xa1,0x74,0x3c,0x05,0xa2,
	0x78,0x98,0x01,0x10,0xf8,0x4d,0x05,0xa2,
	0x70,0x20,0x10,0x21,0xe8,0x4d,0xb4,0x21,
	0x14,0x1b,0x05,0xac,0x70,0x18,0x10,0x23,
	0xf8,0x4f,0x14,0x01,0xe0,0x4f,0xb4,0x31,
	0x14,0x1c,0x07,0xc5,0x81,0xa2,0x98,0xa3,
	0x38,0x8b,0xfc,0x83,0x02,0x46,0xc8,0x95,
	0x02,0x06,0x05,0x6b,0x70,0x1c,0xd0,0x40,
	0x20,0x62,0xb0,0x01,0xec,0x5a,0xc0,0x0d,
	0x30,0x01,0x30,0x0a,0xfc,0x83,0x13,0x24,
	0xf8,0x74,0x05,0x28,0x73,0xd4,0x06,0xef,
	0x73,0xa0,0xc0,0x0f,0x30,0x0e,0xe8,0x83,
	0xc0,0x0e,0xb0,0x30,0x01,0x2b,0xd0,0x68,
	0x30,0x40,0xec,0x72,0x00,0xef,0xd0,0x08,
	0x30,0x0f,0xe8,0x83,0xd0,0x40,0x05,0x6b,
	0x60,0x7c,0xd0,0x41,0x05,0x6e,0x60,0x50,
	0xd0,0x40,0x05,0x61,0x60,0x48,0x00,0xa7,
	0xd0,0x50,0xd0,0x12,0x00,0x60,0xd7,0xc0,
	0x00,0x05,0x07,0xc5,0x0c,0x09,0x84,0x36,
	0x80,0x3f,0xaa,0xf4,0x0a,0xcd,0xaa,0xf4,
	0x07,0xc5,0x00,0x00,0x04,0xec,0x74,0x00,
	0x00,0x2e,0x71,0x00,0x04,0xeb,0x71,0x64,
	0x05,0xa1,0x74,0xf8,0x14,0xdc,0x05,0xa1,
	0x75,0x3c,0x14,0x21,0xe8,0x11,0x15,0x1f,
	0x14,0x22,0xe8,0x11,0x15,0x1f,0x04,0xeb,
	0x72,0x78,0x04,0xeb,0x72,0xbc,0xd0,0x80,
	0x04,0xed,0x60,0x80,0x04,0xed,0x60,0x84,
	0x02,0xe4,0xd0,0x00,0xd0,0x80,0xc0,0x4a,
	0x10,0x5c,0x10,0x60,0xe8,0x24,0x20,0x80,
	0xb0,0x41,0xf8,0x21,0x00,0x20,0xd0,0x0f,
	0x40,0x0a,0x10,0x02,0x20,0x80,0xc0,0x09,
	0x10,0x1e,0x10,0x06,0x20,0x80,0xc0,0xc4,
	0x20,0xc2,0x04,0xec,0x60,0xf0,0x00,0x23,
	0x40,0xbf,0x21,0x02,0xc1,0x84,0xb1,0xbe,
	0xc4,0x94,0xc2,0xd3,0xc1,0xc5,0x00,0x23,
	0xd0,0x3f,0xd0,0x44,0xd0,0xc0,0xd4,0x40,
	0x00,0xa8,0xd0,0x78,0x05,0x28,0x60,0x44,
	0x00,0x61,0xd0,0x48,0x05,0x28,0x60,0x48,
	0xf2,0xd0,0xf2,0xe7,0xf2,0xb3,0x00,0x23,
	0xd0,0x3f,0xd0,0x44,0x70,0x87,0xb1,0xe0,
	0xb1,0xe0,0x10,0x64,0xe8,0x57,0x10,0x63,
	0xe8,0x61,0x10,0x62,0xe8,0x6b,0x10,0x61,
	0xe8,0x75,0xc3,0x02,0x10,0x90,0x43,0x00,
	0x40,0x80,0x20,0xcc,0x20,0xc2,0x10,0x88,
	0x23,0x02,0xb0,0x41,0xe0,0x4c,0xc3,0x42,
	0x10,0x90,0x43,0x40,0x40,0x80,0x20,0xcd,
	0x20,0xc2,0x10,0x88,0x23,0x42,0xb0,0x41,
	0xe0,0x4c,0xc3,0x82,0x10,0x90,0x43,0x80,
	0x40,0x80,0x20,0xce,0x20,0xc2,0x10,0x88,
	0x23,0x82,0xb0,0x41,0xe0,0x4c,0xc3,0xc2,
	0x10,0x90,0x43,0xc0,0x40,0x80,0x20,0xcf,
	0x20,0xc2,0x10,0xdd,0x24,0x43,0xd0,0xc0,
	0x10,0x88,0x23,0xc2,0x14,0x22,0xe8,0xa9,
	0xc0,0x8c,0x43,0x00,0x10,0x98,0x23,0x02,
	0x13,0x1f,0xc0,0x8d,0x43,0x40,0x10,0x98,
	0x23,0x42,0x13,0x5f,0xc0,0x8e,0x43,0x80,
	0x10,0x98,0x23,0x82,0x13,0x9f,0xc0,0x8f,
	0x43,0xc0,0x10,0x98,0x23,0xc2,0x13,0xdf,
	0x13,0x08,0x23,0x0d,0x01,0x46,0xa3,0x3d,
	0x13,0x48,0x23,0x4e,0x13,0x48,0x23,0x4f,
	0xa3,0x7c,0x60,0x06,0x80,0x3f,0x00,0xc6,
	0xd0,0x44,0xb1,0xa0,0xb1,0xa0,0xb2,0xc1,
	0xf8,0x4c,0xb1,0x70,0xe0,0xc6,0x01,0x46,
	0xa3,0x3d,0x13,0x08,0x13,0x08,0x23,0x0d,
	0xa3,0x3c,0x60,0x06,0x80,0x3f,0x00,0xc6,
	0xb1,0xa0,0xb1,0xa0,0x01,0x46,0x70,0x06,
	0xa3,0xbd,0x13,0x88,0x13,0x88,0x23,0x8f,
	0xa3,0xbc,0x60,0x06,0x80,0x3f,0x00,0xc6,
	0xb1,0xa0,0xb1,0xa0,0x00,0x23,0xd0,0x3f,
	0xd0,0x44,0xb2,0xc1,0xf8,0x4c,0xb1,0x78,
	0xd0,0x7f,0x40,0x45,0xf8,0xcf,0xb1,0x50,
	0xb1,0x50,0xb1,0x50,0xb1,0x50,0x02,0xe4,
	0x21,0x40,0xc1,0xc5,0xb1,0x3c,0xd0,0x7f,
	0x40,0x44,0xf8,0xda,0xb1,0x10,0xb1,0x10,
	0xb1,0x10,0xb1,0x10,0x02,0xe4,0x21,0x00,
	0xc1,0x84,0xb1,0xbe,0xc2,0xd3,0x00,0x23,
	0xd0,0x3f,0xd0,0x44,0xb4,0x81,0x14,0xa0,
	0xf8,0x46,0xd0,0x00,0xb0,0x3f,0xb4,0x59,
	0xb4,0x54,0xec,0xe4,0xc0,0x50,0x00,0x27,
	0xd0,0xa0,0x10,0x9f,0x10,0x5f,0x10,0x61,
	0xf8,0xeb,0xd4,0x40,0xb4,0x7f,0x30,0x02,
	0xec,0xf0,0xc4,0x94,0x14,0x9f,0x00,0x75,
	0xd1,0x80,0x00,0x2d,0x70,0xa0,0x04,0xe8,
	0x70,0x60,0x30,0x81,0xe8,0xff,0x00,0x79,
	0xd5,0x00,0xc0,0xc0,0xc1,0x00,0x11,0x02,
	0x10,0x1f,0xc1,0x44,0x04,0xeb,0x70,0x24,
	0x21,0x40,0x04,0xeb,0x71,0x24,0x02,0xe4,
	0xd0,0x00,0xd0,0x80,0xc0,0x4a,0x10,0x5b,
	0x10,0x60,0xe9,0x13,0x20,0x80,0xb0,0x41,
	0xf9,0x10,0x00,0x20,0xd0,0x1f,0x40,0x0a,
	0x10,0x01,0x20,0x80,0xc0,0x09,0x10,0x1e,
	0x10,0x06,0x20,0x80,0xc0,0x44,0x20,0x42,
	0x04,0xec,0x60,0x74,0x00,0x23,0x40,0xbf,
	0x21,0x02,0xc1,0x84,0xb1,0xbe,0xc1,0xc5,
	0x00,0xa8,0xd0,0x78,0x05,0x28,0x60,0x44,
	0x00,0x64,0xd0,0x70,0x05,0x28,0x60,0x48,
	0xf2,0xd0,0xf2,0xe7,0xf2,0xb3,0x14,0x22,
	0xe9,0x3c,0xc2,0xd3,0xb1,0xe0,0xb1,0xe0,
	0xb1,0xf8,0x00,0x23,0xd0,0x3f,0x00,0x22,
	0xd0,0x40,0xe1,0x43,0xc2,0xd3,0x12,0xc1,
	0xb1,0xfc,0x00,0x23,0xd0,0x3f,0x00,0x21,
	0xd0,0x40,0x73,0x07,0x21,0xc1,0x73,0x47,
	0x21,0xc1,0xc3,0x8c,0x13,0x90,0x43,0x00,
	0x43,0x80,0xc3,0xcd,0x13,0xd0,0x43,0x40,
	0x43,0xc0,0x13,0x88,0x23,0x8f,0x01,0x46,
	0xa3,0xbd,0x13,0xc8,0x23,0xcc,0x13,0xc8,
	0x23,0xcd,0xa3,0xfc,0x60,0x06,0x80,0x3f,
	0x00,0xc6,0xb1,0xa0,0xb1,0xa0,0xb2,0xc1,
	0xf9,0x43,0x10,0x5d,0x21,0x41,0xd0,0x3f,
	0x40,0x05,0xf9,0x6a,0xb1,0x50,0xb1,0x50,
	0xb1,0x50,0xb1,0x50,0x02,0xe4,0x21,0x40,
	0xc1,0xc5,0xb1,0x3c,0xd0,0x3f,0x40,0x04,
	0xf9,0x75,0xb1,0x10,0xb1,0x10,0xb1,0x10,
	0xb1,0x10,0x02,0xe4,0x21,0x00,0xc1,0x84,
	0xb1,0xbe,0xb4,0x81,0xf9,0x2e,0x04,0xeb,
	0x70,0x3c,0x10,0x1f,0x05,0xa1,0x70,0x7c,
	0x10,0x5f,0x14,0x21,0xe9,0x85,0x10,0x5f,
	0x14,0x22,0xe9,0x85,0x10,0x5f,0x20,0x01,
	0xc3,0x40,0x00,0xa8,0xd0,0x78,0x05,0x28,
	0x60,0x44,0x00,0x66,0xd0,0x51,0x05,0x28,
	0x60,0x48,0xf2,0xd0,0xf2,0xe7,0xf2,0xb3,
	0x02,0x46,0xc8,0x18,0x02,0x06,0xc0,0x60,
	0x30,0x4d,0xe5,0x8f,0x00,0x6e,0xd1,0xb0,
	0x00,0x21,0xd2,0x40,0x00,0x20,0xd1,0xfc,
	0x00,0x2e,0x71,0x00,0xd5,0x40,0x04,0xeb,
	0x71,0x60,0x04,0xec,0x70,0x30,0x30,0x04,
	0x21,0x40,0x00,0x23,0xd0,0x7f,0x40,0x40,
	0x21,0x01,0x00,0x20,0xd0,0x3f,0x40,0x01,
	0x31,0xc0,0x05,0xa1,0x70,0x38,0xc2,0x80,
	0x12,0x9e,0x14,0x21,0xf9,0xb7,0xc2,0x94,
	0xe1,0xbb,0x12,0x9f,0x14,0x22,0xe9,0xbb,
	0x12,0x9f,0x00,0x2b,0xd0,0x54,0x14,0x21,
	0xe9,0xc3,0x10,0x1f,0x14,0x22,0xe9,0xc3,
	0x10,0x1f,0x30,0x40,0x10,0x44,0xc2,0xc1,
	0x22,0xd5,0x05,0xa1,0x70,0x3c,0x10,0x02,
	0x14,0x21,0xe9,0xd0,0x10,0x1f,0x14,0x22,
	0xe9,0xd0,0x10,0x1f,0xc3,0x00,0x04,0xed,
	0x75,0x84,0x15,0x82,0x33,0x16,0x04,0xec,
	0x63,0x28,0xe2,0x01,0x21,0x4b,0x21,0x0b,
	0x05,0xa1,0x70,0x38,0xc2,0x80,0x12,0x9e,
	0x14,0x21,0xf9,0xe2,0xc2,0x94,0xe1,0xe6,
	0x12,0x9f,0x14,0x22,0xe9,0xe6,0x12,0x9f,
	0xd0,0x7f,0x40,0x45,0xe9,0xf9,0x00,0x2e,
	0x70,0x00,0x31,0x00,0x31,0x44,0xc1,0x00,
	0x02,0xe4,0xd0,0x00,0x21,0x00,0x21,0x40,
	0x04,0xec,0x70,0x30,0x00,0x23,0xd0,0x40,
	0x40,0x40,0x21,0x01,0x21,0x41,0x00,0x21,
	0xd0,0x00,0x30,0x0c,0xed,0xff,0xd1,0xfc,
	0xe2,0x01,0xc1,0xcc,0xb1,0xc4,0x01,0x46,
	0xa1,0xb6,0x80,0x3f,0x01,0xca,0x7d,0x04,
	0x00,0x06,0x00,0xa0,0xd0,0x00,0x50,0x06,
	0xa0,0x36,0x80,0x3f,0x01,0xca,0x6d,0x05,
	0x00,0x06,0x00,0xc6,0xb2,0x81,0xfe,0x15,
	0x21,0x09,0x21,0x49,0xe2,0x01,0x33,0x07,
	0xb3,0x04,0x13,0x20,0xed,0xd8,0x00,0x21,
	0xd2,0x40,0x00,0x20,0xd1,0xfc,0x04,0xeb,
	0x71,0x24,0x04,0xeb,0x71,0x60,0x01,0x74,
	0xd6,0x00,0x00,0x2d,0x70,0xa0,0x04,0xe8,
	0x70,0x60,0x30,0x81,0xea,0x2b,0x01,0xb5,
	0xd4,0x00,0x21,0x40,0xc0,0x80,0x04,0xec,
	0x70,0x34,0x30,0x04,0x21,0x40,0x00,0x23,
	0xd0,0x7f,0x40,0x40,0x00,0x20,0xd0,0x3f,
	0x40,0x01,0x21,0x01,0x31,0xc0,0xc4,0x84,
	0xc4,0xc5,0x05,0xa1,0x70,0x38,0xc2,0x80,
	0x12,0x9e,0x14,0x21,0xfa,0x43,0xc2,0x94,
	0xe2,0x47,0x12,0x9f,0x14,0x22,0xea,0x47,
	0x12,0x9f,0x00,0x2b,0xd0,0x54,0x14,0x21,
	0xea,0x4f,0x10,0x1f,0x14,0x22,0xea,0x4f,
	0x10,0x1f,0x30,0x40,0x10,0x44,0xc2,0xc1,
	0x22,0xd5,0x05,0xa1,0x70,0x3c,0x10,0x01,
	0x14,0x21,0xea,0x5c,0x10,0x1f,0x14,0x22,
	0xea,0x5c,0x10,0x1f,0xc3,0x00,0x04,0xed,
	0x75,0x84,0x15,0x81,0x33,0x16,0x04,0xec,
	0x60,0x28,0xe2,0x8e,0x21,0x4b,0x21,0x0b,
	0x05,0xa1,0x70,0x38,0xc2,0x80,0x12,0x9e,
	0x14,0x21,0xfa,0x6e,0xc2,0x94,0xe2,0x72,
	0x12,0x9f,0x14,0x22,0xea,0x72,0x12,0x9f,
	0xd0,0x7f,0x40,0x45,0xea,0x86,0x04,0xeb,
	0x70,0x24,0x31,0x00,0x31,0x44,0xc1,0x00,
	0x02,0xe4,0xd0,0x00,0x21,0x00,0x21,0x40,
	0x04,0xec,0x70,0x34,0x00,0x23,0xd0,0x40,
	0x40,0x40,0x21,0x01,0x21,0x41,0xe2,0x86,
	0x00,0x21,0xd0,0x00,0x30,0x0c,0xee,0x8c,
	0xd1,0xfc,0xe2,0x8e,0xc1,0xcc,0xb1,0xc4,
	0x01,0x46,0xa1,0xb6,0x80,0x3f,0x01,0xca,
	0x7d,0x04,0x00,0x06,0x00,0xa0,0xd0,0x00,
	0x50,0x06,0xa0,0x36,0x80,0x3f,0x01,0xca,
	0x6d,0x05,0x00,0x06,0x00,0xc6,0xb2,0x81,
	0xfe,0xa2,0x21,0x09,0x21,0x49,0xe2,0x8e,
	0x33,0x07,0xb3,0x04,0xee,0x64,0xf3,0x23,
	0x04,0xeb,0x70,0x70,0x30,0x51,0xf6,0xad,
	0xd0,0x40,0x04,0xeb,0x60,0x70,0x00,0xa7,
	0xd0,0x58,0xd0,0x12,0x00,0x60,0xd7,0xda,
	0x00,0x05,0x04,0xeb,0x72,0x78,0x04,0xeb,
	0x72,0xbc,0x04,0xec,0x74,0x00,0x04,0xec,
	0x71,0x44,0x04,0xec,0x71,0x08,0x04,0xec,
	0x71,0xcc,0x04,0xec,0x71,0x90,0x04,0xec,
	0x72,0xd4,0x04,0xec,0x74,0x58,0x04,0xec,
	0x74,0x9c,0x04,0xec,0x74,0xe0,0x04,0xec,
	0x75,0x24,0x04,0xec,0x70,0x68,0x04,0xec,
	0x70,0xac,0x07,0xc5,0x04,0xec,0x61,0x44,
	0x04,0xec,0x61,0x08,0x04,0xec,0x61,0xcc,
	0x04,0xec,0x61,0x90,0x04,0xec,0x62,0xd4,
	0x04,0xec,0x64,0x58,0x04,0xec,0x64,0x9c,
	0x04,0xec,0x64,0xe0,0x04,0xec,0x65,0x24,
	0x04,0xec,0x60,0x68,0x04,0xec,0x60,0xac,
	0x07,0xc5,0x05,0x6a,0x70,0x28,0x81,0xa2,
	0x98,0x23,0x38,0x00,0xff,0x22,0x02,0x46,
	0xc8,0x15,0x02,0x06,0x05,0x6b,0x70,0x1c,
	0xd0,0x40,0x20,0x60,0xb0,0x01,0xee,0xf3,
	0x05,0x6a,0x70,0x30,0x30,0x01,0x05,0x6a,
	0x70,0x6c,0x30,0x01,0xff,0x22,0x04,0xea,
	0x70,0x28,0x10,0x24,0xfb,0x12,0x05,0x28,
	0x71,0x54,0x06,0xef,0x70,0xe0,0xc0,0x05,
	0x30,0x03,0xeb,0x22,0xc0,0x03,0xb0,0x30,
	0x01,0x2b,0xd0,0x68,0x30,0x40,0xef,0x10,
	0x00,0xef,0xd0,0x08,0x30,0x05,0xeb,0x22,
	0xd0,0x40,0x05,0x6b,0x60,0x7c,0x07,0x56,
	0xd0,0x41,0x05,0x6e,0x60,0x50,0xd0,0x40,
	0x05,0x61,0x60,0x48,0x00,0xa7,0xd0,0x50,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x07,0xc5,0xd8,0x00,0xd0,0xc0,0x04,0x11,
	0x05,0x6c,0xd0,0x18,0x70,0x40,0x10,0x60,
	0xeb,0x2d,0x04,0x13,0x60,0xc0,0x05,0x6c,
	0xd0,0x1c,0x70,0x40,0x10,0x60,0xeb,0x3c,
	0x04,0x12,0x60,0xc0,0x06,0xe5,0xd0,0x5c,
	0x00,0xb0,0xd0,0x00,0x70,0x41,0x40,0x01,
	0xeb,0x3c,0x04,0x14,0x01,0x46,0x06,0xe5,
	0xd0,0x1c,0x70,0x40,0x50,0x60,0x60,0x40,
	0x00,0xc6,0x07,0xc5,0x01,0x46,0x00,0x66,
	0xd0,0x01,0xa0,0x38,0x00,0x66,0xd0,0x00,
	0xa0,0x37,0x80,0x3f,0x00,0xc6,0x00,0x20,
	0xd0,0x0c,0x81,0xf6,0xa0,0x34,0x81,0xb6,
	0xa0,0x34,0x82,0x76,0xa0,0x34,0x80,0x3f,
	0x00,0x20,0xdf,0x49,0x01,0x9b,0xe8,0x28,
	0xc0,0x6b,0x07,0xa3,0x60,0x74,0xd0,0x40,
	0x05,0x61,0x60,0x48,0xd0,0x40,0x05,0x6b,
	0x60,0x7c,0xd0,0x41,0x05,0x6e,0x60,0x50,
	0x00,0xa7,0xd0,0x50,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x00,0x20,0xd0,0x01,
	0x30,0x2b,0xec,0x32,0x00,0x22,0xd0,0x2f,
	0x30,0x2b,0xe4,0x32,0xf0,0xd3,0xe0,0x28,
	0xd0,0x01,0x05,0x69,0x60,0x00,0xd0,0x40,
	0x05,0x61,0x60,0x54,0x01,0x9f,0xf8,0x3f,
	0x01,0x9e,0xf8,0x3f,0xd0,0x41,0x07,0xa3,
	0x60,0x64,0x05,0xac,0x70,0x44,0x01,0x9c,
	0xf8,0x48,0x01,0x9d,0xf8,0x48,0x04,0xe8,
	0xd0,0x10,0xe0,0x57,0x05,0xa2,0x70,0x04,
	0x10,0x23,0xf8,0x58,0x07,0x26,0x70,0x10,
	0x10,0x21,0xe8,0x58,0x10,0x63,0xf8,0x58,
	0x04,0xe8,0xd0,0x10,0x70,0x80,0x10,0xa3,
	0xe8,0x58,0x60,0x40,0x04,0xeb,0x70,0x28,
	0xd0,0x82,0x40,0x02,0x10,0x22,0xf8,0x72,
	0x05,0x2f,0xd0,0x3c,0x70,0x00,0x10,0x20,
	0xe8,0x67,0x05,0xac,0x70,0x18,0x10,0x23,
	0xf8,0x72,0x05,0x26,0xd0,0x38,0x78,0x00,
	0x08,0x19,0x68,0x00,0x00,0xa8,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0x04,0xe8,0x60,0x50,0xd0,0x42,0x04,0xef,
	0x60,0x54,0x04,0xeb,0x70,0x10,0x10,0x22,
	0xe8,0x7d,0x10,0x23,0xf8,0x8b,0xd0,0x40,
	0x06,0xe4,0x60,0x44,0xd0,0x41,0x05,0x62,
	0x60,0x40,0xf0,0xa9,0xf0,0xc8,0x05,0xe6,
	0x70,0x38,0x10,0x20,0xf8,0x85,0xf0,0xbe,
	0xe0,0x97,0x04,0xef,0x70,0x20,0xd0,0x41,
	0x40,0x01,0x10,0x20,0xe8,0x97,0x04,0xef,
	0x70,0x24,0x10,0x22,0xf8,0x97,0xf0,0xa9,
	0xf0,0xc8,0xd0,0x40,0x05,0x61,0xd0,0x14,
	0x60,0x40,0x05,0x61,0xd0,0x0c,0x60,0x40,
	0x05,0x26,0xd0,0x38,0x78,0x00,0x08,0x19,
	0x68,0x00,0x00,0xa9,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x05,0x63,
	0xd0,0x14,0xd0,0x41,0x60,0x40,0x05,0x26,
	0xd0,0x0c,0x70,0x80,0x05,0xe6,0xd0,0x38,
	0x60,0x80,0x00,0x2d,0xd0,0x00,0x70,0x40,
	0x30,0x42,0xe8,0xba,0x00,0x2d,0xd0,0x20,
	0x00,0x2b,0xd0,0x54,0x60,0x01,0x07,0xc5,
	0x04,0xed,0x70,0x24,0x10,0x20,0xe8,0xc7,
	0x04,0xed,0x60,0x28,0xd0,0x00,0x04,0xed,
	0x60,0x24,0x07,0xc5,0x04,0xea,0xd0,0x00,
	0x70,0x00,0x10,0x22,0xf8,0x97,0x06,0xe3,
	0xd0,0x0c,0x78,0x00,0x08,0x10,0x68,0x00,
	0x07,0xc5,0x0c,0x09,0x84,0x36,0x80,0x3f,
	0xaa,0xf4,0x0a,0xcd,0xaa,0xf4,0x07,0xc5,
	0x05,0x6d,0xd0,0x08,0x70,0xc0,0xc0,0xc3,
	0xf0,0x83,0x60,0xc0,0x05,0x6c,0xd0,0x70,
	0x70,0x81,0x11,0xdd,0x20,0x87,0x60,0x81,
	0x00,0x62,0x61,0xf0,0x05,0x6c,0x70,0x64,
	0x00,0xa4,0xd8,0x30,0xa8,0x36,0x80,0x3f,
	0x98,0x34,0x04,0xea,0x70,0x00,0x10,0x22,
	0xf8,0x7d,0x00,0x27,0x70,0x14,0x10,0x20,
	0xe8,0x7d,0x05,0x6d,0x70,0x00,0x20,0x02,
	0x30,0x01,0xe4,0x7d,0x05,0xac,0x70,0x04,
	0x10,0x23,0xf8,0x2b,0x00,0x17,0xe8,0x7d,
	0x30,0x42,0xec,0x7d,0xe0,0x3a,0x00,0x19,
	0xe8,0x2e,0xe0,0x3a,0x00,0x17,0xe8,0x7d,
	0x30,0x42,0xec,0x7d,0x04,0x19,0x08,0x17,
	0x00,0x24,0xd0,0x30,0xa0,0x36,0x80,0x3f,
	0xa8,0x34,0xe0,0x7d,0xd0,0x41,0x05,0xe1,
	0x60,0x5c,0x08,0x17,0x08,0x19,0x00,0x24,
	0xd0,0x30,0xa0,0x36,0x80,0x3f,0xa8,0x34,
	0x00,0x2a,0x70,0x20,0x05,0x6e,0x60,0x30,
	0x04,0xea,0x70,0x04,0x10,0x21,0xe8,0x60,
	0xf0,0xb1,0xd0,0x48,0x00,0x2a,0x60,0x60,
	0x07,0x51,0x0b,0x52,0x01,0x46,0x90,0x43,
	0x90,0x82,0x80,0x3f,0x00,0xc6,0x05,0x29,
	0xd0,0x08,0x60,0x40,0xb0,0x3c,0x60,0x80,
	0xd0,0x40,0x05,0x29,0x60,0x44,0xe0,0x7d,
	0x04,0x13,0x00,0x24,0xd0,0x30,0xa0,0x36,
	0x80,0x3f,0xa8,0x34,0xd0,0x40,0x05,0x6c,
	0x60,0x64,0x01,0x46,0x06,0xe5,0x78,0x1c,
	0x04,0x1f,0x06,0xe5,0x68,0x1c,0x06,0xe5,
	0x78,0x30,0x04,0x10,0x06,0xe5,0x68,0x30,
	0x00,0xc6,0x00,0xa4,0xd8,0x30,0xa8,0x36,
	0x80,0x3f,0x98,0x34,0x00,0x14,0xe8,0x75,
	0xf0,0xb1,0x00,0xa7,0xd0,0x58,0xd0,0x12,
	0x00,0x60,0xd7,0xda,0x00,0x05,0x00,0x68,
	0xd1,0x00,0x91,0x61,0x41,0x44,0xf8,0x85,
	0x83,0x22,0x91,0x23,0x11,0x1e,0x11,0x02,
	0x81,0x22,0x91,0x63,0x11,0x5e,0x11,0x44,
	0x31,0x05,0x86,0x45,0xd1,0xbf,0x91,0x46,
	0x11,0x55,0x41,0x46,0xb1,0x7e,0x11,0x42,
	0x31,0x05,0x11,0x03,0xd1,0x5f,0x91,0x8d,
	0x41,0x85,0x21,0x06,0xc1,0xc4,0x31,0xc3,
	0xf4,0xac,0x81,0x22,0x90,0xe3,0x10,0xde,
	0x10,0xc4,0x80,0x22,0x91,0xa3,0x11,0x9e,
	0x11,0x82,0x31,0x83,0x11,0x83,0x21,0xc6,
	0xc0,0xc4,0x10,0xe0,0xf4,0xb0,0x20,0xc6,
	0x07,0xc5,0x01,0x46,0x06,0xe5,0x78,0x1c,
	0x04,0x1d,0x06,0xe5,0x68,0x1c,0x06,0xe5,
	0x78,0x38,0x04,0x10,0x06,0xe5,0x68,0x38,
	0x00,0xc6,0x07,0xc5,0x05,0x20,0x70,0x50,
	0x10,0x61,0xf8,0x0a,0x00,0xaf,0xd0,0x78,
	0xd0,0x12,0x00,0x60,0xd7,0xc0,0x00,0x05,
	0xd4,0x00,0x07,0x27,0xd0,0x04,0x70,0x40,
	0x64,0x00,0x10,0x60,0xf8,0x18,0x07,0x28,
	0x70,0x34,0x10,0x20,0xe8,0x1d,0xd0,0x00,
	0x07,0x28,0x60,0x34,0xd4,0x01,0x05,0xe6,
	0x71,0x38,0x11,0x20,0xf8,0x19,0x05,0xa1,
	0x74,0x78,0x05,0xa1,0x74,0xbc,0x04,0xeb,
	0x70,0x68,0x10,0x60,0xe8,0x2b,0x00,0x2a,
	0xd0,0xbc,0x30,0x91,0xec,0x2b,0x00,0x2b,
	0xd4,0x50,0x05,0xa2,0x73,0x80,0x13,0xa3,
	0xe8,0x32,0x13,0xa4,0xe8,0x32,0xd3,0x82,
	0x00,0x22,0x73,0xc0,0x13,0xe2,0xf8,0x38,
	0xd3,0xc1,0xd3,0x83,0x13,0xe2,0xfc,0x3b,
	0xd3,0xc0,0xb3,0xfe,0xd8,0x00,0x05,0xe5,
	0xd0,0xa4,0xd0,0x00,0xd3,0x00,0x00,0x24,
	0xd0,0x6c,0x30,0x52,0xe4,0x4e,0xd3,0x01,
	0x03,0xd1,0xe8,0x4e,0x00,0x23,0xd0,0x70,
	0x30,0x52,0xf8,0x54,0xd3,0x02,0xe0,0x54,
	0x00,0x24,0xd0,0x60,0x30,0x52,0xf8,0x54,
	0xd3,0x03,0xd0,0x01,0x60,0x02,0x13,0x20,
	0xf8,0x5f,0x05,0x27,0x70,0x44,0x10,0x60,
	0xe8,0x5f,0xd3,0x04,0x10,0x60,0xec,0x5f,
	0xd3,0x05,0x04,0xeb,0x78,0x68,0x18,0x60,
	0xe8,0x6b,0xc8,0x4c,0xd3,0x00,0x18,0x63,
	0xec,0x6b,0xd3,0x01,0x18,0x60,0xec,0x6b,
	0xd3,0x00,0xd2,0x40,0x00,0x2a,0xd0,0x4a,
	0x30,0x51,0xec,0x72,0xd1,0x40,0xe0,0x7a,
	0x00,0x24,0xd0,0x6c,0x30,0x52,0xe4,0x78,
	0xd1,0x42,0xe0,0x7a,0xd1,0x41,0xe0,0x7a,
	0xc1,0x85,0xd0,0x80,0x13,0xe3,0xf8,0x87,
	0x13,0xa2,0xf8,0x87,0x00,0xe7,0x78,0x68,
	0x00,0x91,0xe8,0x86,0xd3,0x83,0xe0,0x87,
	0xd0,0x81,0x07,0x26,0x60,0xb8,0x07,0x25,
	0xd1,0x3c,0x70,0x44,0x63,0x84,0x05,0xaf,
	0xd1,0x30,0x70,0x04,0x63,0xc4,0x30,0x4e,
	0xf8,0x96,0x30,0x0f,0xe8,0x98,0xe0,0x96,
	0x04,0x10,0x04,0x11,0x00,0x24,0xd0,0x6c,
	0x30,0x52,0xec,0xaf,0xc1,0x4e,0x31,0x4f,
	0xe8,0xaf,0x11,0x62,0xe8,0xa9,0x11,0x61,
	0xf8,0xaf,0x13,0xe2,0xe8,0xa7,0xd0,0xc3,
	0xe0,0xaa,0xd0,0xc1,0xe0,0xaa,0xd0,0xc2,
	0xc1,0x46,0x11,0x41,0x21,0x46,0x21,0x43,
	0xe0,0xba,0xd1,0x4a,0x13,0x21,0xe8,0xb9,
	0xd1,0x4b,0x13,0x22,0xe8,0xb9,0xd1,0x4e,
	0x13,0x23,0xe8,0xb9,0xd1,0x40,0xc2,0x45,
	0x00,0x22,0x78,0x6c,0x00,0x99,0xf8,0xe2,
	0x05,0x62,0x70,0x68,0x13,0x24,0xf8,0xe2,
	0x05,0x65,0x70,0x00,0x14,0x20,0xe8,0xc8,
	0x05,0x64,0x70,0x38,0x10,0x20,0xe8,0xcf,
	0xb0,0x34,0x70,0x00,0x10,0x1c,0x10,0x20,
	0xf8,0xe2,0xd1,0x4c,0x10,0x60,0xe8,0xd3,
	0xd1,0x55,0xc2,0x45,0x00,0x22,0x70,0x44,
	0x10,0x62,0xf8,0xe1,0xc0,0x4e,0x30,0x4f,
	0xe8,0xe1,0xd1,0x4f,0x05,0x62,0x70,0x68,
	0x10,0x60,0xe8,0xec,0xd1,0x56,0xe0,0xec,
	0x13,0x25,0xf8,0xec,0xd2,0x53,0xd1,0x53,
	0x00,0x29,0xd0,0x38,0x30,0x11,0xec,0xec,
	0xd2,0x54,0xd1,0x54,0x05,0x62,0x78,0x68,
	0x18,0x60,0xe8,0xf9,0x11,0x61,0xf8,0xf5,
	0xd2,0x4d,0xd1,0x52,0xe0,0xf9,0x11,0x60,
	0xf8,0xf9,0xd2,0x4d,0xd1,0x4d,0x05,0x20,
	0x70,0x50,0x10,0x61,0xf9,0x04,0x05,0x21,
	0x70,0x0c,0x71,0x40,0xc2,0x45,0xd3,0x00,
	0x07,0x28,0x61,0x6c,0x07,0x25,0xd1,0x30,
	0x70,0x44,0x61,0x44,0x07,0x25,0xd1,0x38,
	0x70,0x04,0x64,0x84,0x30,0x45,0xf9,0x1e,
	0x07,0x28,0xd1,0x3c,0x70,0x44,0x62,0x44,
	0x30,0x49,0xf9,0x1e,0x30,0x12,0xf9,0x1e,
	0x00,0x23,0x70,0x1c,0x07,0x29,0xd1,0x00,
	0x70,0x44,0x60,0x04,0x30,0x01,0xe9,0x45,
	0x04,0x11,0xc0,0xc5,0xd1,0x40,0xf1,0x70,
	0x07,0x29,0xd1,0x1c,0x07,0x29,0xd0,0x74,
	0xd0,0x86,0x70,0x04,0x60,0x01,0xb0,0x7c,
	0xb1,0x3c,0xb0,0x81,0xf9,0x27,0xc1,0x49,
	0xf1,0x70,0x07,0x29,0xd0,0x44,0x07,0x29,
	0xd1,0x1c,0xd0,0x86,0x70,0x04,0x60,0x01,
	0xb0,0x7c,0xb1,0x3c,0xb0,0x81,0xf9,0x34,
	0xc1,0x43,0x00,0x23,0x70,0x5c,0x10,0x60,
	0xe9,0x44,0x11,0x60,0xe9,0x44,0x11,0x63,
	0xed,0x44,0xb1,0x7d,0xf1,0x70,0x00,0x27,
	0xd0,0x1f,0x30,0x12,0xe5,0x56,0x00,0x23,
	0xd0,0x30,0x30,0x12,0xe5,0x50,0x05,0xe2,
	0x60,0x20,0xe1,0x59,0x00,0x24,0xd0,0x20,
	0x30,0x12,0x05,0xe2,0x60,0x20,0xe1,0x59,
	0xd0,0x00,0x05,0xe2,0x60,0x20,0x05,0xad,
	0xd0,0xb0,0x00,0x21,0xd0,0xdc,0x01,0x46,
	0x83,0x3a,0x80,0x3f,0x80,0x3b,0x80,0x3f,
	0x83,0x7a,0x80,0x3f,0x00,0xca,0x6e,0xc2,
	0x00,0x06,0x00,0xc6,0x05,0xaf,0x68,0x10,
	0x00,0xae,0xd0,0x40,0xd0,0x12,0x00,0x60,
	0xd7,0xc0,0x00,0x05,0x07,0x61,0xd0,0x58,
	0x03,0xd1,0xe9,0x76,0x07,0x63,0xd0,0x48,
	0x11,0x42,0x20,0x45,0x70,0x81,0x05,0xe1,
	0xd0,0x70,0x60,0x81,0x11,0x42,0x07,0x64,
	0xd2,0x34,0x22,0x05,0x71,0xc8,0x00,0x23,
	0xd0,0x3f,0x41,0xc0,0x07,0x29,0xd0,0xa4,
	0x61,0xc2,0x00,0xae,0xd0,0x28,0x71,0x00,
	0x70,0x48,0x10,0x58,0x20,0x44,0x07,0x29,
	0xd0,0x9c,0x60,0x42,0xb2,0x3c,0x70,0x48,
	0x10,0x58,0x21,0x01,0xb0,0xbc,0x61,0x02,
	0xd1,0x00,0x00,0xae,0xd0,0x30,0x70,0x00,
	0x21,0x00,0xb2,0x3c,0x71,0xc8,0x00,0x23,
	0xd0,0x3f,0x41,0xc0,0x07,0x29,0xd0,0xb0,
	0x61,0xc2,0x70,0x48,0x10,0x58,0x21,0x01,
	0x07,0x29,0xd0,0xa8,0x61,0x02,0x31,0x01,
	0xb2,0x3c,0x70,0x48,0x10,0x58,0x21,0x01,
	0xb0,0xbc,0x61,0x02,0x07,0xc5,0x00,0x00,
	0x01,0x46,0x05,0xad,0xd0,0xb0,0x00,0x21,
	0xd0,0xdc,0x83,0x3a,0x80,0x3f,0x80,0x3b,
	0x80,0x3f,0x83,0x7a,0x80,0x3f,0x00,0xca,
	0x7e,0xc2,0x00,0x06,0x00,0xc6,0x05,0xaf,
	0x78,0x10,0x07,0x26,0xd0,0x4c,0xd0,0x80,
	0x60,0x81,0x00,0x2b,0xd0,0x80,0x30,0x91,
	0xe8,0x21,0x00,0x28,0xd0,0x90,0x30,0x91,
	0xe8,0x21,0x00,0x25,0xd0,0xa0,0x30,0x91,
	0xf8,0x23,0xd0,0x81,0x60,0x81,0x00,0x29,
	0xd0,0xb8,0x30,0x91,0xec,0x2b,0xd0,0x80,
	0x00,0x2b,0xd0,0xd0,0xe0,0x3e,0x00,0x28,
	0xd0,0x80,0x30,0x91,0xec,0x33,0xd0,0x81,
	0x00,0x28,0xd0,0xe0,0xe0,0x3e,0x00,0x26,
	0xd0,0xa0,0x30,0x91,0xec,0x3b,0xd0,0x82,
	0x00,0x27,0xd0,0xe0,0xe0,0x3e,0xd0,0x83,
	0x00,0x25,0xd0,0xe0,0xc1,0x02,0xc2,0x02,
	0xd1,0x80,0xd0,0x42,0xd1,0x42,0x07,0x26,
	0x70,0xb8,0x10,0xa0,0xe8,0x49,0xc0,0x4f,
	0xc1,0x4e,0xb0,0x42,0x10,0x42,0xc0,0x81,
	0x10,0x81,0x20,0x81,0xb1,0x42,0x11,0x42,
	0x20,0x85,0x20,0x84,0x10,0x82,0x07,0x2c,
	0xd0,0x74,0x00,0x23,0x70,0x1c,0x10,0x20,
	0xe8,0x5b,0x07,0x2e,0xd0,0x54,0x20,0x42,
	0x70,0x81,0x00,0x2a,0xd0,0x00,0x30,0x11,
	0xf8,0x66,0xd0,0x8b,0x13,0xe2,0xe8,0x7a,
	0xd0,0x91,0xe0,0x7a,0x00,0x25,0xd0,0x00,
	0x30,0x11,0xf8,0x72,0xd0,0x01,0x07,0x26,
	0x60,0x0c,0xd0,0x86,0x13,0xe2,0xf8,0x7a,
	0xd0,0x8a,0xe0,0x7a,0x00,0x26,0xd0,0x00,
	0x30,0x11,0xf8,0x7a,0xd0,0x8c,0x13,0xe2,
	0xe8,0x7a,0xd0,0x84,0x05,0x20,0x70,0x50,
	0x10,0x61,0xe8,0x82,0xd0,0x00,0x05,0x20,
	0x60,0x20,0xe0,0xaa,0x05,0x21,0x70,0x08,
	0x70,0x80,0xd0,0xc1,0x05,0x20,0x60,0xe0,
	0x07,0x28,0xd1,0x24,0x70,0x44,0x60,0x84,
	0x30,0x42,0xf8,0xa8,0x07,0x28,0xd1,0x28,
	0x70,0x44,0x07,0x28,0x70,0x2c,0x60,0x04,
	0x30,0x40,0xf8,0xa8,0x05,0x20,0x70,0x3c,
	0x07,0x28,0x70,0x60,0x30,0x40,0xf8,0xa8,
	0x05,0x20,0x70,0x34,0x07,0x28,0x70,0x58,
	0x30,0x40,0xf8,0xa8,0x05,0x20,0x70,0x38,
	0x07,0x28,0x70,0x5c,0x30,0x40,0xe8,0xaa,
	0x04,0x11,0x04,0x10,0xc4,0xc2,0x11,0xa2,
	0xf8,0xbc,0x07,0x25,0xd1,0x2c,0x70,0x44,
	0x60,0x84,0x30,0x42,0xf8,0xbb,0x14,0x21,
	0xe8,0xbc,0x07,0x25,0xd1,0x34,0x70,0x04,
	0x64,0x44,0x30,0x11,0xe8,0xbc,0x04,0x10,
	0x10,0x82,0x07,0x2f,0xd1,0x34,0x21,0x02,
	0x70,0x44,0x00,0x23,0xd0,0xbf,0x40,0x81,
	0xc1,0x01,0x0f,0xef,0xd0,0x7f,0x11,0x18,
	0x41,0x01,0x00,0xae,0xd0,0x08,0x14,0xe9,
	0xe4,0xd7,0x00,0xae,0xd0,0x10,0x14,0xed,
	0xe4,0xd7,0x00,0xae,0xd0,0x18,0x14,0xf3,
	0xe4,0xd7,0x00,0xae,0xd0,0x20,0x70,0x00,
	0x21,0x00,0x07,0x2a,0xd0,0xe4,0x01,0x46,
	0xb0,0xfe,0xb1,0x3f,0x70,0x04,0x90,0x3c,
	0x91,0x7d,0x80,0x3f,0xa0,0x3c,0xa1,0x7d,
	0x80,0x3f,0x60,0x03,0x00,0x06,0x00,0xc6,
	0xb0,0xfe,0xb1,0x3d,0x70,0x04,0x60,0x03,
	0x07,0x2a,0x70,0x64,0x0f,0xec,0xd0,0x80,
	0x40,0x81,0x10,0x98,0xc0,0xc2,0xb0,0x88,
	0x01,0x30,0xd0,0x00,0x50,0x80,0x07,0x2b,
	0x60,0x80,0xb0,0xc4,0xb1,0x3c,0x07,0x2a,
	0xd0,0x6c,0x61,0x01,0x21,0x03,0xb0,0x7c,
	0x61,0x01,0x21,0x03,0xb0,0x7c,0x61,0x01,
	0x21,0x03,0xb0,0x7c,0x61,0x01,0x07,0x2a,
	0xd1,0x24,0xb1,0x3f,0x01,0x46,0x70,0x84,
	0x00,0x06,0x90,0x7d,0x80,0x3f,0x00,0xc6,
	0xc0,0x91,0x30,0x81,0xf5,0x15,0x20,0x81,
	0xc0,0x42,0xc3,0x41,0xc0,0x8d,0x10,0x9e,
	0xb0,0x81,0x10,0x82,0x08,0x20,0xd0,0x00,
	0x20,0x02,0x07,0x2a,0xd1,0x3c,0x60,0x04,
	0xb1,0xbf,0x07,0x2a,0xd1,0x28,0x07,0x2b,
	0xd0,0x60,0x00,0x20,0xd0,0x87,0x11,0xa1,
	0xe9,0x2f,0x07,0x2b,0xd0,0x7c,0x11,0xa2,
	0xe9,0x2f,0x07,0x2b,0xd0,0x44,0x70,0x04,
	0x60,0x01,0xb0,0x7c,0xb1,0x3c,0xb0,0x81,
	0xf9,0x2f,0xc1,0x08,0x11,0xa3,0xe9,0x3c,
	0x11,0xa2,0xe8,0x47,0xd0,0x80,0xe0,0x7a,
	0x00,0x21,0xd2,0xb9,0x03,0xd1,0xe9,0x42,
	0x00,0x22,0xd2,0x83,0x00,0x2b,0xd2,0xd0,
	0x07,0x26,0x70,0x78,0x10,0x61,0xf9,0x59,
	0x00,0x23,0xd0,0x93,0x00,0x28,0xd0,0x5c,
	0x03,0xd1,0xe9,0x50,0x00,0x23,0xd0,0x9d,
	0x07,0x26,0x71,0x0c,0x11,0x20,0xe9,0x56,
	0xb0,0x4c,0xb0,0xba,0xc2,0x82,0xc2,0xc1,
	0xe1,0x6e,0x07,0x26,0x70,0x4c,0x10,0x60,
	0xe9,0x6e,0xd0,0x48,0x22,0x81,0x00,0x2b,
	0xd2,0xc0,0x00,0x2b,0xd0,0x50,0x30,0x4d,
	0xf9,0x68,0x00,0x2b,0xd3,0x40,0xe1,0x6e,
	0x00,0x25,0xd0,0x68,0x30,0x4d,0xf9,0x6e,
	0x00,0x25,0xd3,0x60,0x00,0x23,0x70,0x1c,
	0x10,0x20,0xe9,0x96,0x00,0x2a,0xd2,0xc0,
	0x00,0x22,0xd2,0xa1,0x03,0xd1,0xe9,0x7a,
	0x00,0x22,0xd2,0xab,0x07,0x26,0x70,0x4c,
	0x10,0x60,0xe9,0x82,0xd0,0x48,0x22,0x81,
	0x00,0x29,0xd2,0xf2,0x07,0x26,0x70,0x78,
	0x10,0x61,0xf9,0x96,0x00,0x27,0xd2,0xe0,
	0x00,0x23,0xd2,0xb1,0x03,0xd1,0xe9,0x8e,
	0x00,0x23,0xd2,0xbb,0x07,0x26,0x70,0x4c,
	0x10,0x60,0xe9,0x96,0xd0,0x46,0x22,0x81,
	0x00,0x27,0xd2,0xd6,0x07,0x28,0x62,0x8c,
	0x05,0x20,0x70,0x50,0x10,0x61,0xf9,0xa4,
	0x05,0x20,0x70,0x5c,0x10,0x64,0xf9,0xa4,
	0x00,0x2a,0xd2,0xfa,0x00,0x22,0xd2,0x81,
	0xc0,0x8a,0xc0,0x4b,0x10,0x82,0xb0,0x41,
	0x10,0x4c,0x20,0x42,0x07,0x25,0xd0,0x98,
	0x60,0x42,0xc0,0x51,0x00,0x21,0xd1,0xb9,
	0x03,0xd1,0xe9,0xb4,0x00,0x22,0xd1,0x83,
	0x00,0x2b,0xd0,0x90,0x30,0x81,0x10,0x9f,
	0x20,0x86,0x10,0x82,0xb0,0x41,0x10,0x4c,
	0x20,0x42,0x07,0x25,0xd0,0x9c,0x60,0x42,
	0x14,0x20,0xe9,0xc4,0x00,0x10,0xe9,0xdd,
	0x05,0xad,0x70,0x50,0x10,0x48,0x10,0x58,
	0xd6,0x00,0x36,0x01,0x05,0xad,0x70,0x58,
	0x10,0x60,0xe9,0xdb,0x10,0x48,0x10,0x58,
	0xd6,0x40,0x36,0x41,0x05,0xad,0x70,0x60,
	0x10,0x60,0xe9,0xdc,0x10,0x48,0x10,0x58,
	0xd6,0x80,0x36,0x81,0xe1,0xdd,0xc6,0x58,
	0xc6,0x98,0xc1,0x58,0x11,0x5e,0xc0,0x59,
	0x10,0x5e,0x10,0x4a,0x21,0x41,0xc0,0x9a,
	0x10,0x9e,0xc0,0xc5,0x10,0xd0,0x10,0x84,
	0x20,0x83,0x0f,0xef,0xd0,0x7f,0x41,0x41,
	0xc0,0xc2,0xc0,0x4d,0x00,0x22,0x70,0x80,
	0x10,0xa1,0xe5,0xf6,0xd0,0x80,0x07,0x26,
	0x60,0x84,0xe1,0xf9,0xc0,0x91,0x30,0x81,
	0x10,0x81,0x07,0x26,0xd1,0x00,0x60,0x84,
	0x05,0x65,0xd0,0x00,0x05,0x26,0xd1,0x08,
	0x14,0x20,0xea,0x06,0x05,0xe6,0xd1,0x3c,
	0x05,0x64,0xd0,0x38,0x70,0x00,0x10,0x20,
	0xea,0x0c,0xb0,0x34,0x70,0x00,0x10,0x1c,
	0x00,0x22,0x78,0x6c,0x00,0x99,0xea,0x11,
	0xd0,0x01,0x05,0xe1,0x60,0x24,0x71,0x04,
	0x05,0xe1,0xd5,0x78,0x05,0xe1,0xd5,0xfc,
	0x07,0x27,0xd1,0x88,0x07,0x27,0xd2,0x38,
	0x00,0x2d,0xd0,0x40,0x70,0x81,0x30,0x84,
	0xea,0x34,0xb1,0xb4,0xb2,0x3c,0x05,0xe2,
	0xd5,0x40,0x05,0xe2,0xd5,0xc4,0x00,0x2d,
	0xd0,0x60,0x70,0x81,0x30,0x84,0xea,0x34,
	0xb1,0xb4,0xb2,0x3c,0x05,0xe2,0xd5,0x48,
	0x05,0xe2,0xd5,0xcc,0x00,0x2e,0xd0,0x40,
	0x07,0x25,0x70,0x18,0x60,0x17,0xb0,0x78,
	0xc0,0x81,0xb0,0x70,0x14,0x20,0xfa,0x53,
	0x01,0x46,0xc0,0x18,0x10,0x1e,0x60,0x06,
	0xc0,0x19,0x10,0x1e,0xb1,0xbc,0x60,0x06,
	0xc0,0x1a,0x10,0x1e,0xb1,0xbc,0x60,0x06,
	0x07,0x28,0xd1,0x04,0x70,0x04,0x10,0x20,
	0xea,0x52,0x60,0x08,0x07,0x28,0x60,0x08,
	0xd0,0x00,0x60,0x04,0x00,0xc6,0x01,0x46,
	0x00,0x06,0xb0,0xbe,0xa1,0x7c,0xa0,0xfd,
	0x80,0x3f,0x61,0x42,0x00,0x06,0x00,0xc6,
	0x70,0xc1,0x10,0xde,0x10,0xc2,0x07,0x24,
	0xd1,0x38,0x70,0x84,0x00,0x20,0xd1,0x03,
	0x40,0x84,0x50,0xc2,0x50,0xe0,0x01,0x46,
	0x60,0xc1,0x07,0x24,0xd0,0x78,0xd0,0x83,
	0x40,0x83,0x60,0x81,0x05,0xe1,0x70,0x24,
	0x60,0x15,0x00,0xc6,0xd0,0x80,0x00,0x24,
	0xd0,0x6c,0x30,0x52,0xe6,0x78,0xd0,0x81,
	0x07,0x26,0xd0,0x10,0x60,0x80,0xd5,0x00,
	0x00,0x22,0x70,0x00,0x10,0x20,0xfa,0x89,
	0x00,0x23,0x70,0x08,0x10,0x20,0xfa,0x86,
	0x05,0xa2,0x70,0x00,0x10,0x23,0xfa,0x89,
	0xe2,0x8a,0xd5,0x01,0x07,0x28,0x65,0x30,
	0x00,0x20,0xd0,0x12,0x10,0x20,0xc0,0x71,
	0xc7,0xf0,0x00,0x06,0x80,0x3f,0x00,0x05,
	0x04,0xed,0x79,0x28,0x02,0x10,0xeb,0xdf,
	0x04,0xed,0x70,0xfc,0xc0,0x43,0x10,0x58,
	0x10,0x60,0xef,0xdb,0x04,0xed,0x71,0x6c,
	0x04,0xed,0x70,0x78,0x20,0xc1,0x04,0xed,
	0x70,0xb4,0x04,0xed,0x71,0x30,0xc0,0x45,
	0x02,0x11,0xfb,0xca,0x21,0x02,0x30,0x44,
	0xff,0xcd,0xe3,0xd4,0x31,0x02,0x30,0x44,
	0xe7,0xd4,0xc1,0x05,0xd0,0x40,0x04,0xed,
	0x60,0x68,0xd0,0x41,0x04,0xee,0x60,0x64,
	0x04,0xed,0x61,0x30,0x11,0x18,0x07,0xa4,
	0x61,0x28,0x10,0xe0,0xeb,0xdf,0x00,0x24,
	0x30,0xc0,0x04,0xed,0x60,0xfc,0x00,0x6a,
	0xd0,0x50,0xe1,0xd3,0x05,0x6f,0x71,0x5c,
	0x05,0xe1,0x70,0x1c,0x10,0x20,0xeb,0xdf,
	0x05,0x26,0x70,0x7c,0x10,0x60,0xfb,0xbf,
	0x00,0x2a,0x70,0x64,0x00,0x20,0x30,0x74,
	0xeb,0xdf,0x05,0x6f,0x70,0x4c,0x10,0x60,
	0xeb,0xdf,0x05,0x6a,0x70,0x68,0x05,0x6a,
	0x70,0x24,0x30,0x01,0xef,0xdf,0xd0,0x01,
	0x05,0x6f,0x60,0x10,0xb1,0x7f,0x05,0x6f,
	0x70,0x20,0x30,0x05,0xef,0xe0,0x06,0xe5,
	0x79,0x2c,0x06,0x10,0x06,0xe5,0x69,0x2c,
	0x06,0xe5,0x79,0x1c,0x06,0x17,0x06,0xe5,
	0x69,0x1c,0xd0,0x00,0xb0,0x01,0x00,0x62,
	0x60,0x2c,0xd1,0x40,0x05,0x6f,0x61,0x5c,
	0x07,0xa4,0x70,0xe8,0x00,0x22,0x70,0x5c,
	0xd0,0x1f,0x10,0x5d,0xc0,0x81,0x10,0x58,
	0xc1,0x01,0x40,0x40,0x40,0x80,0x11,0x19,
	0x11,0x05,0x21,0x02,0x11,0x05,0x21,0x01,
	0x11,0x05,0x21,0x03,0x11,0x01,0xb1,0x3f,
	0xd0,0x28,0xa0,0x10,0xa1,0x15,0x00,0x6c,
	0xd0,0x48,0xe1,0xd3,0x0b,0x93,0x8f,0x50,
	0x8c,0x15,0x80,0x15,0x80,0x90,0x80,0xd5,
	0x05,0xe6,0xd0,0x1c,0x99,0x16,0x05,0xe0,
	0x69,0x18,0x80,0x3f,0x00,0x6f,0xd0,0xbf,
	0x49,0x02,0x02,0x10,0xeb,0xc2,0xb0,0x3c,
	0x0a,0x10,0xc6,0x24,0x70,0x40,0x36,0x01,
	0x16,0x1f,0xb0,0x38,0x73,0x80,0x23,0xa4,
	0x00,0xf8,0xd5,0x00,0xa0,0x10,0x07,0x26,
	0xd0,0x3c,0x00,0x22,0xd0,0xa0,0x70,0xc0,
	0x10,0xe0,0xeb,0xdb,0xd9,0x00,0x69,0x00,
	0x60,0xc2,0xb0,0x3c,0x70,0xc0,0xb0,0xbc,
	0x60,0xc2,0x70,0xc2,0x10,0xe0,0xeb,0xdf,
	0xd0,0xc1,0x00,0x2b,0xd0,0x20,0x60,0xc0,
	0xd0,0x41,0x90,0x16,0x40,0x40,0xfb,0xeb,
	0xd3,0x80,0x07,0x6e,0xd0,0x24,0x0b,0xd5,
	0xe3,0xee,0x07,0x6f,0xd0,0x34,0x07,0xd5,
	0xc4,0x00,0x73,0xd0,0x8f,0x10,0x00,0x22,
	0xd0,0x00,0xa0,0x15,0x00,0x67,0xd0,0x60,
	0xe1,0xd3,0x00,0x00,0x00,0x22,0xd0,0x54,
	0x70,0x41,0x10,0x60,0xeb,0xbc,0x05,0xe6,
	0xd0,0x1c,0x70,0x00,0x10,0x1f,0xb0,0x3d,
	0x30,0x40,0x36,0x01,0x00,0x67,0xd0,0x68,
	0xe1,0xd3,0x00,0x00,0x05,0xe6,0xd0,0x30,
	0x70,0x80,0x00,0x06,0x03,0xd4,0xeb,0xf6,
	0x0b,0xd4,0xb0,0x3c,0x70,0x80,0xb0,0x3c,
	0xd2,0xc0,0x05,0x62,0x62,0xec,0x70,0xc0,
	0x10,0xe0,0xfb,0xc4,0x00,0x2b,0xd0,0x50,
	0x72,0xc1,0xe3,0xd4,0x07,0x94,0x05,0x62,
	0x70,0x68,0x05,0x62,0x60,0x60,0x62,0xc0,
	0xb0,0x3c,0x70,0x40,0x05,0x65,0x60,0x64,
	0x60,0xc0,0x00,0x2b,0xd0,0x54,0xd3,0x00,
	0x07,0x26,0x63,0x08,0x79,0x01,0x62,0xc1,
	0xb0,0x44,0x69,0x01,0xc0,0x24,0xb0,0x38,
	0xc2,0xc0,0xb0,0x38,0x79,0x00,0xb0,0x3c,
	0x70,0x40,0xb0,0x3c,0x70,0xc0,0x59,0x01,
	0xeb,0xe8,0x06,0xe5,0xd0,0x5c,0x79,0x01,
	0x06,0x55,0x69,0x01,0x07,0x25,0x60,0xc8,
	0xc9,0x03,0x02,0x10,0xeb,0xf2,0x07,0x26,
	0xd0,0x40,0x70,0xc1,0xb0,0x7c,0x60,0xc1,
	0x0a,0x10,0x0a,0x11,0x69,0x00,0xe3,0xf9,
	0xd9,0x00,0x07,0x25,0x69,0x08,0x07,0x25,
	0x60,0x84,0x00,0x67,0xd0,0x70,0xe1,0xd3,
	0x05,0xe6,0x72,0xfc,0x05,0xe1,0xd0,0x38,
	0x00,0x2d,0x70,0x40,0x30,0x4b,0xeb,0xc0,
	0x05,0xe2,0xd0,0x00,0x00,0x2d,0x70,0x60,
	0x30,0x4b,0xeb,0xc0,0x05,0xe2,0xd0,0x08,
	0x05,0xe1,0x60,0x34,0x07,0x25,0xd0,0xc8,
	0x70,0xc3,0xc9,0x03,0x02,0x10,0xfb,0xca,
	0x02,0x11,0xeb,0xe4,0x05,0x20,0x70,0x60,
	0x10,0x61,0xfb,0xe1,0xd0,0x40,0x05,0x20,
	0x60,0x60,0xd0,0x41,0x05,0x20,0x60,0x64,
	0x05,0x20,0x70,0x7c,0x07,0x28,0x60,0x60,
	0x05,0x20,0x70,0x74,0x07,0x28,0x60,0x58,
	0x05,0x20,0x70,0x78,0x07,0x28,0x60,0x5c,
	0xe3,0xe4,0xd0,0x40,0x05,0x20,0x60,0x64,
	0x00,0x67,0xd0,0x78,0xe1,0xd3,0x00,0x00,
	0x07,0x26,0xd0,0x48,0x70,0x81,0x10,0xa2,
	0xeb,0xb8,0xb0,0xbf,0x60,0x81,0xb0,0x81,
	0x05,0xe6,0x72,0xfc,0x07,0x27,0xd0,0x08,
	0x07,0x27,0xd1,0x38,0x00,0x2d,0x70,0x40,
	0x30,0x4b,0xeb,0xca,0xb0,0x34,0xb1,0x3c,
	0x00,0x2d,0x70,0x60,0x30,0x4b,0xeb,0xca,
	0xb0,0x34,0xb1,0x3c,0x10,0x82,0x20,0x02,
	0x74,0x80,0x07,0x26,0x70,0xc4,0x24,0x83,
	0x00,0x22,0x70,0x48,0x10,0x60,0xeb,0xdb,
	0x10,0x61,0xfb,0xd7,0xc4,0x83,0x00,0x22,
	0x70,0x4c,0x10,0x5e,0x34,0x81,0x10,0xc1,
	0xc0,0x92,0xb0,0x80,0xf7,0xe1,0xd4,0x80,
	0xe3,0xe4,0x30,0x83,0xff,0xe4,0xc4,0x83,
	0x03,0x94,0xeb,0xef,0x70,0x04,0x10,0x20,
	0xeb,0xef,0xd0,0x00,0x60,0x04,0x07,0xa4,
	0x60,0x28,0x07,0x28,0x60,0x08,0x05,0x2f,
	0xd0,0x04,0x90,0xc3,0x80,0x3f,0x60,0xc0,
	0xb0,0x3c,0x90,0xc2,0x80,0x3f,0x60,0xc0,
	0x00,0x6a,0xd0,0x58,0xe1,0xd3,0x00,0x00,
	0x0b,0x90,0x05,0x62,0x79,0x20,0x07,0x25,
	0x70,0x84,0xb0,0x81,0xfb,0xb8,0x07,0xd4,
	0x05,0xe6,0x60,0xb0,0x05,0xe6,0x72,0xfc,
	0x07,0x26,0x70,0x50,0x0b,0xd2,0x07,0x27,
	0x70,0x30,0x00,0x2e,0x70,0x80,0x30,0x8b,
	0xfb,0xe1,0x05,0x20,0x70,0x94,0x10,0xa0,
	0xeb,0xcc,0x00,0x2d,0x72,0xc0,0xe3,0xe1,
	0x07,0x27,0x70,0x34,0x05,0xa2,0x70,0x84,
	0x10,0xa3,0xfb,0xe1,0x05,0x26,0x70,0xd8,
	0x10,0xe0,0xfb,0xe1,0x10,0x61,0xeb,0xe1,
	0x04,0xe8,0x70,0xb0,0x10,0xa0,0xfb,0xe1,
	0x07,0xd2,0x19,0x20,0xeb,0xf5,0x07,0x90,
	0xe3,0xf5,0xd0,0x80,0x03,0xd5,0xeb,0xe5,
	0xd0,0x84,0x10,0x61,0xeb,0xea,0x19,0x20,
	0xeb,0xea,0xd0,0x80,0x22,0xc2,0x20,0x0b,
	0xc3,0x00,0x10,0x61,0xfb,0xf2,0x03,0xd5,
	0xeb,0xf2,0xb3,0x04,0x00,0x68,0xd0,0x58,
	0xe1,0xd3,0x00,0x68,0xd0,0x48,0xe1,0xd3,
	0x00,0xc6,0x01,0x46,0x04,0xe7,0xd0,0x4c,
	0x03,0x90,0xfb,0xb9,0x03,0xd5,0xeb,0xb9,
	0xb0,0x7c,0x70,0x01,0x10,0x20,0xfb,0xbf,
	0x00,0x68,0xd0,0x50,0xe1,0xd3,0xb0,0x3c,
	0x70,0x80,0xc9,0x02,0x10,0x90,0x10,0xa1,
	0xeb,0xe0,0x0f,0xef,0x49,0x3f,0x19,0x20,
	0xeb,0xbc,0x04,0xac,0x29,0x10,0x69,0x01,
	0xb0,0x04,0xc0,0xc0,0x04,0xe7,0xd0,0x88,
	0x70,0x42,0x60,0xc2,0x10,0x60,0xfb,0xd7,
	0xb0,0x84,0x60,0xc2,0xe3,0xdc,0xb0,0x7c,
	0xc0,0x03,0x04,0xac,0x30,0x10,0x60,0x01,
	0xb0,0xfc,0xd0,0x80,0x60,0x83,0xe3,0xb0,
	0x07,0xd2,0xb0,0x04,0x04,0xe8,0x60,0x04,
	0x04,0xe8,0x60,0x00,0x04,0xe8,0x60,0x08,
	0x79,0x00,0x02,0xe4,0xd0,0x00,0x02,0x10,
	0xfb,0xf0,0xd0,0x60,0x30,0x40,0xc0,0x01,
	0x0a,0x10,0xc3,0x24,0xc2,0xe4,0x32,0xc0,
	0xc4,0xcb,0x00,0x68,0xd0,0x58,0xe1,0xd3,
	0x0b,0xd2,0x04,0xe8,0xd0,0x8c,0x72,0xc2,
	0x01,0xb5,0xd4,0x00,0x20,0x0b,0xc3,0x00,
	0x03,0xd5,0xeb,0xbc,0xb2,0xfc,0xb3,0x3c,
	0xc4,0xcb,0x00,0x68,0xd0,0x58,0xe1,0xd3,
	0x07,0x25,0x79,0x08,0x00,0x22,0x70,0x84,
	0x02,0x10,0xfb,0xbc,0x07,0x26,0xd0,0x24,
	0x70,0xc0,0x60,0x80,0x30,0xc2,0xeb,0xdd,
	0x07,0x24,0xd0,0xf8,0x79,0x03,0x0a,0x10,
	0x69,0x03,0x07,0x2b,0xd0,0x20,0x10,0xa2,
	0xeb,0xcb,0x07,0x2b,0xd0,0x04,0x10,0xa1,
	0xeb,0xcb,0x07,0x2b,0xd0,0x3c,0x07,0x2c,
	0xd0,0xd8,0x00,0x20,0xd0,0x46,0x70,0x80,
	0x60,0x83,0xb0,0x3c,0xb0,0xfc,0xb0,0x41,
	0xf7,0xcf,0x00,0x22,0x70,0xc4,0x10,0xe0,
	0xfb,0xdd,0x07,0x25,0x70,0x9c,0x07,0x25,
	0x60,0x94,0x07,0x26,0x70,0xe4,0x10,0xe1,
	0xeb,0xe2,0xd4,0x80,0x07,0x25,0x70,0x54,
	0x00,0x22,0x70,0xa8,0x10,0xa0,0xeb,0xf2,
	0x07,0x28,0x70,0xd0,0x20,0x83,0x10,0x82,
	0x10,0x54,0x10,0x4c,0x20,0x42,0x07,0x25,
	0xd0,0x94,0x60,0x42,0x00,0x6a,0xd0,0x78,
	0xe1,0xd3,0x00,0x00,0x05,0x20,0x70,0x24,
	0x10,0x21,0xfb,0xb6,0x07,0x28,0x74,0xa0,
	0x07,0x2c,0xd0,0x98,0x07,0x2c,0xd0,0x30,
	0x70,0xc0,0x81,0x10,0x70,0x02,0xa0,0x15,
	0x80,0x3f,0x07,0x25,0x64,0x90,0x05,0x20,
	0x70,0x24,0x10,0x21,0xfb,0xca,0xc0,0x12,
	0xd0,0x43,0x40,0x01,0x10,0x02,0x20,0x80,
	0xb0,0xbc,0x71,0x02,0x07,0x25,0xd0,0x28,
	0x70,0x80,0x61,0x00,0x30,0x84,0xeb,0xeb,
	0x00,0x27,0xd0,0x7f,0x40,0xc1,0x07,0x6b,
	0xd1,0x64,0x00,0xc6,0x11,0x20,0xeb,0xe0,
	0x70,0x04,0x60,0x05,0xb1,0x3c,0xb1,0x7c,
	0xb0,0xc4,0xf7,0xda,0x07,0x6b,0xd1,0x64,
	0x81,0xd0,0x07,0x2c,0xd0,0x30,0x70,0xc0,
	0xc0,0xc3,0x00,0xca,0x75,0x85,0x00,0x06,
	0x01,0x46,0x07,0x2c,0xd0,0x6c,0x74,0x41,
	0x00,0x68,0xd0,0x40,0xe1,0xd3,0x00,0x00,
	0x00,0x68,0xd0,0x40,0xe1,0xd3,0x00,0x00,
	0x05,0xe1,0x70,0x34,0x70,0x40,0x05,0xe1,
	0x60,0x60,0xb0,0x3c,0x70,0x00,0x07,0x25,
	0x60,0x14,0x07,0x25,0x79,0x08,0x00,0x22,
	0xd0,0x44,0x70,0x81,0xd1,0x00,0x02,0x11,
	0xfb,0xcb,0x00,0x2a,0x70,0x20,0x10,0x68,
	0xeb,0xcb,0x07,0x26,0xd1,0x60,0x70,0xc5,
	0x60,0x85,0x30,0xc2,0xeb,0xeb,0x07,0x24,
	0xd0,0xf8,0x79,0x03,0x0a,0x11,0x69,0x03,
	0x07,0x29,0xd1,0x44,0x10,0xa1,0xeb,0xdd,
	0x10,0xa2,0xeb,0xd9,0x07,0x29,0xd1,0x74,
	0xe3,0xdd,0x05,0xe1,0x71,0x30,0x07,0x29,
	0xd1,0x5c,0x07,0x26,0x61,0x30,0x07,0x2a,
	0xd0,0x4c,0xd0,0xc6,0x70,0x05,0x60,0x01,
	0xb0,0x7c,0xb1,0x7c,0xb0,0xc1,0xfb,0xe2,
	0x00,0x6a,0xd0,0x60,0xe1,0xd3,0x05,0x27,
	0x70,0x04,0x10,0x20,0xeb,0xf5,0x05,0xe1,
	0x70,0x20,0x05,0xe1,0x79,0x28,0x0e,0x10,
	0xfb,0xe8,0x00,0x6a,0xd0,0x70,0xe1,0xd3,
	0x05,0x27,0x71,0x04,0xd0,0x00,0x00,0x22,
	0x70,0x84,0x05,0xa2,0x79,0x18,0x05,0xe1,
	0x71,0x60,0x05,0xe1,0x61,0x68,0x00,0x23,
	0xd0,0xf0,0x03,0xd1,0xeb,0xc1,0x00,0x24,
	0xd0,0xde,0x10,0xa1,0xeb,0xcd,0x10,0xa2,
	0xeb,0xd7,0x05,0xa1,0x70,0x7c,0x10,0x5f,
	0xc0,0x83,0x30,0x81,0x10,0x9f,0x10,0xa0,
	0xf7,0xe5,0x11,0x20,0xff,0xd5,0x02,0x10,
	0xfb,0xd5,0x11,0x60,0xeb,0xd5,0xd0,0x30,
	0x30,0xc0,0xd0,0x80,0xe3,0xe5,0x11,0x20,
	0xff,0xe3,0x02,0x10,0xfb,0xe3,0x11,0x60,
	0xeb,0xe3,0x07,0x28,0x70,0x70,0x10,0x61,
	0xeb,0xd3,0xd0,0x24,0x30,0xc0,0x07,0x26,
	0x70,0xb0,0x30,0xc2,0x30,0xc2,0x10,0x1f,
	0x07,0x26,0x60,0x2c,0x07,0x26,0x60,0xa8,
	0x07,0x26,0x60,0xdc,0x00,0x6a,0xd0,0x68,
	0xe1,0xd3,0x00,0x00,0x00,0xc6,0x07,0x26,
	0x70,0x5c,0x00,0x22,0x79,0x2c,0x02,0x57,
	0xfb,0xc4,0x05,0x62,0x70,0x20,0x10,0x20,
	0xfb,0xc4,0x05,0xe5,0x70,0x24,0x10,0x20,
	0xfb,0xc4,0x07,0x26,0x70,0x10,0x10,0x20,
	0xeb,0xc7,0xb0,0x7f,0xb0,0x42,0x07,0x26,
	0x60,0x5c,0x07,0x2a,0x70,0x4c,0x10,0x60,
	0xeb,0xf9,0x07,0x2a,0x71,0x14,0x07,0x6e,
	0xd0,0xe4,0x70,0x01,0x60,0x03,0xb0,0xfc,
	0xb0,0x7c,0xb1,0x04,0xef,0xcf,0x07,0x2a,
	0x70,0x50,0x07,0x2a,0x71,0x14,0x07,0x6f,
	0xd0,0xf4,0x70,0x01,0x60,0x03,0xb0,0xfc,
	0xb0,0x7c,0xb1,0x04,0xef,0xdb,0x07,0x2a,
	0x70,0x58,0x07,0x2a,0x71,0x20,0x07,0xa1,
	0xd0,0xc4,0x70,0x01,0x60,0x03,0xb0,0xfc,
	0xb0,0x7c,0xb1,0x04,0xef,0xe7,0x07,0x2a,
	0x70,0x5c,0x07,0x2a,0x71,0x20,0x07,0xa2,
	0xd0,0xd4,0x70,0x01,0x60,0x03,0xb0,0xfc,
	0xb0,0x7c,0xb1,0x04,0xef,0xf3,0x01,0x46,
	0x00,0x6a,0xd0,0x70,0xe1,0xd3,0x00,0x00,
	0xc0,0x12,0x10,0x1e,0x00,0x20,0x40,0x03,
	0x07,0x25,0x70,0x94,0x20,0x02,0x89,0x90,
	0xa0,0x15,0x14,0x9c,0x14,0x86,0x03,0xd2,
	0xeb,0xc3,0x04,0xe7,0x63,0x34,0x04,0xe7,
	0x62,0xf0,0x04,0xe7,0x64,0xf8,0xd0,0x07,
	0x14,0x83,0x54,0x80,0xd1,0x80,0x00,0x2b,
	0xd0,0x20,0x70,0x00,0x10,0x20,0xeb,0xf6,
	0x00,0x22,0xd0,0x20,0x03,0xd5,0xeb,0xd2,
	0x00,0x22,0xd0,0x24,0x71,0x40,0x11,0x60,
	0xeb,0xf6,0x00,0xe0,0xd0,0x00,0xa0,0x10,
	0xc0,0x85,0x85,0xd0,0xb0,0xb0,0x02,0x0b,
	0x75,0x42,0xb0,0xb4,0x70,0x82,0x01,0x30,
	0xd0,0x3c,0x87,0x50,0x00,0x0a,0x75,0x82,
	0x00,0x06,0x83,0x3a,0x88,0x3b,0x83,0x7a,
	0x80,0x3f,0x03,0x0b,0x7e,0xc5,0x00,0x06,
	0xc1,0x80,0x86,0x90,0x00,0x2f,0xd2,0xbf,
	0x91,0x15,0x42,0x84,0xa0,0x64,0x80,0x3f,
	0x00,0x8a,0x75,0x03,0x00,0x68,0xd0,0x60,
	0xe1,0xd3,0x00,0x00,0x05,0xe2,0x70,0x10,
	0x10,0x20,0xeb,0xb9,0x05,0xe2,0x70,0x14,
	0xb0,0x3f,0x05,0xe2,0x60,0x14,0x07,0x25,
	0x71,0x00,0x11,0x20,0xeb,0xc2,0x05,0xe6,
	0x70,0x5c,0x10,0x5f,0x31,0x01,0xe3,0xc7,
	0x07,0x26,0x71,0x28,0x07,0x26,0x70,0x2c,
	0x21,0x00,0x07,0x26,0x61,0x18,0x07,0x26,
	0x71,0x5c,0x05,0xe2,0x70,0x20,0x31,0x40,
	0x21,0x44,0x11,0x4a,0x51,0x05,0xc0,0x04,
	0x01,0x46,0x81,0x78,0x00,0x29,0xd1,0x36,
	0xf3,0xdc,0x81,0x38,0x00,0xc6,0x00,0x68,
	0xd0,0x68,0xe1,0xd3,0x00,0x06,0xc0,0x40,
	0xc0,0xc0,0x10,0x16,0x00,0xef,0xd0,0x80,
	0x40,0x02,0x00,0x20,0xd0,0xb0,0x50,0x02,
	0x10,0x54,0x00,0x20,0xd0,0x8f,0x40,0x42,
	0x50,0x01,0x00,0xef,0xd0,0xbf,0x40,0xc2,
	0x0d,0x20,0xd0,0x80,0x50,0x83,0xa1,0x36,
	0x80,0x3f,0xa0,0x34,0x80,0x3f,0xa0,0xb4,
	0x80,0x3f,0x07,0xc5,0x05,0x20,0x70,0x24,
	0x10,0x21,0xfb,0xbf,0x07,0x28,0x70,0x58,
	0x22,0xc1,0x07,0x28,0x70,0x5c,0x23,0x01,
	0x00,0x2a,0x70,0x20,0x00,0x20,0x40,0x18,
	0xfb,0xc2,0xd0,0x00,0x05,0x20,0x60,0x14,
	0xc4,0xcb,0x00,0x2b,0xd0,0x18,0x03,0xd5,
	0xfb,0xca,0xd0,0x80,0x60,0x80,0xe3,0xcc,
	0xd0,0x81,0x60,0x80,0x07,0xa1,0xd3,0x44,
	0x03,0xd5,0xeb,0xd2,0x07,0xa2,0xd3,0x54,
	0x05,0xe6,0xd9,0x14,0x79,0x24,0x02,0x13,
	0xeb,0xf6,0x05,0xaf,0xd0,0x18,0xc0,0xc0,
	0x05,0xaf,0xd0,0x38,0x60,0xc0,0x05,0xaf,
	0xd0,0x3c,0x00,0x27,0x79,0x34,0x02,0x11,
	0xfb,0xe7,0x03,0xd5,0xeb,0xe7,0x05,0xe0,
	0xd0,0x08,0xc0,0x40,0x05,0xaf,0xd0,0x28,
	0x70,0x81,0x60,0x80,0xb0,0x7c,0xb0,0x3c,
	0x70,0x81,0x60,0x80,0x05,0xaf,0xd0,0x34,
	0x76,0xc0,0x00,0x68,0xd0,0x70,0xe1,0xd3,
	0x00,0x24,0xd0,0x00,0xa0,0x10,0x00,0x68,
	0xd0,0x70,0xe1,0xd3,0x07,0x26,0x70,0x20,
	0x10,0x22,0xfb,0xb9,0x07,0x26,0x70,0x30,
	0x10,0x20,0xeb,0xb9,0xb4,0x3c,0x05,0xe6,
	0x79,0x14,0x02,0x13,0xeb,0xca,0x05,0xe0,
	0x79,0x18,0x19,0x15,0xd0,0x03,0x49,0x00,
	0xeb,0xcd,0x04,0xea,0x70,0x00,0x10,0x24,
	0xeb,0xcd,0xd0,0x00,0x05,0xe6,0x60,0x14,
	0x00,0x69,0xd0,0x40,0xe1,0xd3,0x07,0x93,
	0x04,0x20,0xd9,0x00,0x05,0xaf,0xd0,0x2c,
	0xc0,0x64,0x70,0x00,0x10,0x57,0x00,0x20,
	0xd0,0xbf,0x40,0x42,0x10,0x46,0xd0,0xa0,
	0x50,0x42,0xa0,0x64,0x00,0x27,0xd0,0x7f,
	0x49,0x01,0x19,0x02,0x06,0x56,0x06,0x51,
	0x06,0x1e,0x80,0x3f,0xc0,0x40,0x09,0x0a,
	0x74,0xc1,0x08,0x20,0xd0,0x00,0xa0,0x10,
	0x00,0x2c,0xd0,0x15,0xa0,0x10,0x01,0x30,
	0xd0,0x3c,0xc0,0x40,0x05,0xaf,0xd0,0x14,
	0x70,0x00,0x00,0x06,0x80,0x3f,0x00,0x4a,
	0x75,0x80,0x00,0x06,0x00,0x68,0xd0,0x78,
	0xe1,0xd3,0x00,0x00,0x82,0x50,0x05,0xaf,
	0xd0,0x38,0x70,0x00,0x04,0x0b,0x75,0x40,
	0x00,0x06,0x83,0x90,0xd0,0x83,0x93,0x95,
	0x40,0x9b,0x84,0x50,0xd0,0x4c,0x50,0x81,
	0xa0,0x95,0x16,0xe0,0xeb,0xe6,0x84,0xd0,
	0x04,0x30,0xd0,0x0d,0x10,0x02,0xc0,0x5b,
	0x10,0x5e,0x10,0x42,0x80,0x3f,0x00,0x0a,
	0x75,0x41,0x00,0x06,0x8c,0x50,0x03,0xff,
	0xdf,0xff,0x99,0x15,0x19,0x20,0x93,0x95,
	0x43,0x80,0x00,0x21,0xd0,0x7f,0x49,0x01,
	0x02,0x10,0xeb,0xda,0xd6,0xc0,0xe3,0xe6,
	0x26,0xe4,0xc0,0x5b,0x00,0x28,0xd0,0x3c,
	0x70,0x00,0x30,0x40,0xff,0xe6,0x05,0x6a,
	0xd0,0x34,0x70,0x00,0x36,0xc0,0xe3,0xe6,
	0x00,0x69,0xd0,0x40,0xe1,0xd3,0x00,0x00,
	0xc1,0x60,0x00,0x21,0xd0,0x1c,0x70,0x40,
	0x10,0x60,0xfb,0xba,0x04,0x20,0xd0,0x41,
	0xa0,0x77,0x80,0x3f,0x91,0x22,0xd9,0x00,
	0xd0,0xc0,0xd8,0x00,0x80,0xa2,0x90,0x63,
	0x10,0x60,0xef,0xc4,0x06,0x50,0x04,0x10,
	0x00,0x2b,0xd0,0x88,0x60,0x42,0x81,0xe2,
	0x90,0x63,0x10,0x60,0xef,0xcd,0x06,0x50,
	0x04,0x11,0xb0,0xbc,0x60,0x42,0x18,0x20,
	0xeb,0xd4,0x06,0xe5,0xd0,0x24,0x68,0x00,
	0xd8,0x00,0x80,0x62,0x90,0x63,0x10,0x60,
	0xef,0xdb,0x06,0x18,0x04,0x10,0x81,0xa2,
	0x90,0x63,0x05,0x6a,0x60,0x64,0x10,0x60,
	0xef,0xe3,0x06,0x18,0x04,0x11,0x18,0x20,
	0xeb,0xe8,0x06,0xe5,0xd0,0x28,0x68,0x00,
	0x06,0xe5,0xd0,0x1c,0x70,0x40,0x59,0x01,
	0x69,0x00,0xa1,0x22,0x80,0x3f,0xd0,0x40,
	0x03,0xd5,0xfb,0xf3,0xd0,0x41,0x00,0x2b,
	0xd0,0x18,0x60,0x40,0xc8,0x05,0x00,0x69,
	0xd0,0x48,0xe1,0xd3,0x00,0x22,0xd0,0x18,
	0x70,0x00,0xc0,0x40,0x10,0x50,0x10,0x48,
	0x00,0x23,0xd0,0xbf,0x40,0x80,0x50,0x42,
	0x10,0x48,0x0f,0xec,0xd0,0x80,0x40,0x80,
	0x10,0x98,0x50,0x42,0xd0,0x2a,0xa0,0x10,
	0xa0,0x55,0x80,0x3f,0xd9,0x00,0xd0,0xc0,
	0x04,0xeb,0x70,0x68,0x10,0x60,0xfb,0xe8,
	0x03,0x94,0xeb,0xe0,0x06,0x11,0x05,0x6c,
	0xd0,0x48,0x70,0x41,0x10,0x61,0xfb,0xe8,
	0x05,0x6c,0xd0,0x18,0x70,0x40,0x10,0x60,
	0xeb,0xd9,0x06,0x13,0x60,0xc0,0x05,0x6c,
	0xd0,0x1c,0x70,0x40,0x10,0x60,0xeb,0xe8,
	0x06,0x12,0x60,0xc0,0x06,0xe5,0xd0,0x5c,
	0x00,0xb0,0xd0,0x00,0x70,0x41,0x40,0x01,
	0xeb,0xe8,0x06,0x14,0x06,0xe5,0xd0,0x1c,
	0x70,0x40,0x50,0x64,0x60,0x40,0x00,0x69,
	0xd0,0x50,0xe1,0xd3,0x04,0xea,0xd0,0x00,
	0x70,0x00,0xb0,0x02,0xfb,0xcf,0x04,0xea,
	0xd0,0x04,0x70,0x00,0xb0,0x01,0xfb,0xcf,
	0x06,0xe3,0xd0,0x04,0x70,0x40,0xb0,0x41,
	0x60,0x40,0xb0,0x40,0xfb,0xcf,0x06,0xe4,
	0xd0,0x10,0x70,0x40,0xb0,0x7f,0x60,0x40,
	0x00,0xa4,0xd0,0x54,0x90,0x1d,0x30,0x01,
	0xff,0xce,0x80,0xdf,0x80,0x3f,0x80,0x3f,
	0xf3,0xd2,0x00,0x69,0xd0,0x58,0xe1,0xd3,
	0x80,0xb5,0x80,0x3f,0xd0,0x07,0xa0,0x26,
	0x80,0x1e,0x80,0x3f,0x00,0x60,0xd0,0x40,
	0xa0,0x66,0x80,0x3f,0x00,0x24,0xd0,0x60,
	0xa0,0x66,0x80,0x3f,0x00,0x24,0xd0,0x70,
	0xa0,0x66,0x80,0x3f,0x00,0x68,0xd0,0x40,
	0xa0,0x66,0x80,0x3f,0x80,0xf5,0x80,0x3f,
	0x06,0xe3,0xd0,0x04,0xd0,0x4a,0x60,0x40,
	0x07,0xc5,0x00,0x00,0x04,0xea,0xd0,0x00,
	0x70,0x00,0xb0,0x02,0xfb,0xec,0x04,0xea,
	0xd0,0x04,0x70,0x00,0xb0,0x01,0xfb,0xec,
	0x00,0xa4,0xd9,0x30,0xa9,0x36,0x80,0x3f,
	0x99,0x34,0x02,0x1b,0xeb,0xec,0x00,0x2b,
	0xd0,0x24,0x79,0x00,0x05,0x2e,0xd0,0x28,
	0x70,0x40,0x69,0x00,0x0e,0x11,0xfb,0xd1,
	0x05,0x2e,0xd0,0x2c,0x70,0x40,0xb0,0x41,
	0xeb,0xd6,0x60,0x40,0xe3,0xec,0x05,0x2e,
	0xd0,0x6c,0xd0,0x03,0x60,0x01,0xe3,0xec,
	0x06,0xe5,0xd0,0x1c,0x01,0x46,0x79,0x00,
	0x06,0x1d,0x69,0x00,0x00,0xc6,0x00,0x2a,
	0xd0,0x20,0xd0,0x48,0x60,0x40,0x00,0xa4,
	0xd9,0x30,0xa9,0x36,0x80,0x3f,0x99,0x34,
	0x0a,0x1b,0x00,0x24,0xd0,0x30,0xa0,0x36,
	0x80,0x3f,0xa9,0x34,0x00,0x2a,0x79,0x20,
	0x19,0x22,0xeb,0xf4,0x00,0x22,0x79,0x2c,
	0x02,0x10,0xeb,0xf7,0x00,0x69,0xd0,0x68,
	0xe3,0xf9,0x00,0x69,0xd0,0x60,0xe1,0xd3,
	0x05,0xa1,0xd1,0x60,0x00,0x25,0x79,0x20,
	0x02,0x17,0xfb,0xf0,0x04,0xea,0x70,0x40,
	0x10,0x63,0xeb,0xf0,0x05,0xe1,0x70,0x1c,
	0x05,0x26,0x70,0x7c,0x50,0x01,0x05,0x27,
	0x70,0x60,0x50,0x01,0x10,0x20,0xfb,0xf0,
	0x05,0xa1,0xd0,0xa4,0x70,0x42,0x99,0x1d,
	0x0e,0x11,0xfb,0xef,0x90,0xe2,0x0f,0xff,
	0xdf,0xfc,0x05,0xa1,0xd0,0xac,0x70,0x42,
	0x80,0xe2,0x99,0x23,0x49,0x00,0xa0,0xe2,
	0x0e,0x11,0xfb,0xef,0x05,0xa1,0xd0,0xb0,
	0x70,0x42,0x82,0x22,0x99,0x23,0x49,0x00,
	0xa0,0xe2,0x0e,0x11,0xfb,0xef,0x71,0x05,
	0xb1,0x3f,0x00,0xe4,0x70,0x6c,0x30,0x44,
	0xef,0xf1,0xd1,0x00,0x61,0x05,0x00,0x70,
	0xd0,0x00,0xa0,0x38,0x00,0x27,0xdf,0xaf,
	0x01,0x20,0xdf,0xc0,0x0f,0x87,0x69,0x02,
	0xd1,0x00,0x61,0x05,0x03,0xd5,0xeb,0xfd,
	0x00,0x61,0x70,0x70,0x05,0x62,0x70,0x0c,
	0x05,0x62,0x60,0x4c,0x30,0x40,0x00,0xe7,
	0x60,0x54,0x00,0x69,0xd0,0x68,0xe1,0xd3,
	0x05,0x62,0xd0,0x88,0x70,0x82,0x10,0xa0,
	0xfb,0xe3,0x05,0x26,0xd0,0x38,0x79,0x00,
	0x03,0x94,0xeb,0xe3,0x02,0x13,0xfb,0xe3,
	0x05,0x29,0xd0,0x90,0x70,0x82,0x10,0xa0,
	0xfb,0xc9,0x05,0x64,0xd0,0x28,0x70,0xc0,
	0xb0,0x24,0x70,0x80,0x30,0xc2,0xfb,0xc9,
	0xe3,0xe3,0x05,0x2e,0xd0,0x0c,0x71,0x00,
	0xb0,0x3c,0x71,0x40,0x11,0x20,0xfb,0xd3,
	0x11,0x60,0xfb,0xd3,0xe3,0xe3,0xf3,0xec,
	0xa1,0x42,0xa1,0x03,0xd0,0x41,0x05,0x29,
	0xd0,0x18,0x60,0x40,0xd0,0x40,0x05,0x62,
	0xd0,0x04,0x60,0x40,0x05,0x61,0xd0,0x38,
	0x70,0x40,0xb0,0x7f,0x60,0x40,0x03,0xd2,
	0xfb,0xe8,0x00,0x69,0xd0,0x70,0xe1,0xd3,
	0x00,0x6a,0xd0,0x40,0xe1,0xd3,0xe1,0xd3,
	0xd0,0x42,0x10,0x44,0xc0,0x85,0x10,0x92,
	0xd0,0xcf,0x40,0x83,0xd0,0xc1,0x50,0x83,
	0x20,0x42,0x10,0x4f,0x10,0x41,0x07,0xef,
	0xd0,0xbf,0x41,0x42,0x11,0x41,0x21,0x41,
	0x51,0x43,0x11,0x01,0x51,0x03,0x07,0xc5,
	0x05,0x60,0xd0,0xa8,0x70,0x42,0x10,0x60,
	0xeb,0xe9,0x00,0x2b,0x70,0xe4,0x05,0x6f,
	0x70,0x14,0x30,0x03,0xeb,0xc0,0xd0,0x40,
	0x60,0x42,0x05,0x60,0x60,0x6c,0xe3,0xe9,
	0xb0,0x41,0xeb,0xc4,0x60,0x42,0xe3,0xe9,
	0x60,0x42,0xd0,0x40,0x05,0x60,0x60,0x6c,
	0x05,0x60,0x70,0x64,0xb0,0x7f,0x05,0x60,
	0x60,0x64,0x05,0x65,0x70,0x20,0x10,0x20,
	0xfb,0xd5,0x05,0x25,0x70,0x38,0x05,0xe6,
	0x60,0x38,0x00,0x2d,0xd0,0x00,0x70,0x40,
	0x30,0x42,0xeb,0xdc,0x00,0x2d,0xd0,0x20,
	0x00,0x2b,0xd0,0x54,0x60,0x01,0x06,0xe5,
	0x79,0x2c,0x06,0x10,0x06,0xe5,0x69,0x2c,
	0x06,0xe5,0x79,0x1c,0x06,0x17,0x06,0xe5,
	0x69,0x1c,0x90,0xe2,0x82,0x22,0x90,0x63,
	0x10,0x60,0xa0,0xe2,0x05,0x62,0xd1,0x1c,
	0x05,0x62,0xd0,0x18,0x70,0x80,0x60,0x40,
	0x30,0x81,0xfb,0xf9,0x70,0x44,0xb0,0x7f,
	0xe3,0xfa,0xd0,0x40,0x60,0x44,0x00,0x69,
	0xd0,0x78,0xe1,0xd3,0x04,0xeb,0x70,0x68,
	0x10,0x60,0xfb,0xfa,0x04,0xea,0x70,0x40,
	0x10,0x63,0xeb,0xfa,0x00,0x2b,0x71,0x24,
	0x11,0x24,0xe7,0xfa,0x91,0x62,0x80,0x62,
	0x90,0x63,0xc0,0x41,0xa1,0x62,0x05,0x6a,
	0x70,0x14,0x30,0x01,0xef,0xcb,0xd0,0x40,
	0x05,0x60,0x60,0x6c,0x05,0x60,0x60,0x68,
	0xe3,0xfa,0xd0,0x01,0x05,0x6f,0x60,0x0c,
	0x05,0x60,0x70,0x28,0x10,0x20,0xfb,0xfa,
	0x05,0xe6,0x70,0x3c,0x00,0x2e,0x70,0x40,
	0x30,0x01,0xfb,0xfa,0x05,0x60,0x70,0x5c,
	0x05,0x60,0x70,0xa0,0x30,0x81,0x10,0xa1,
	0xfb,0xfa,0x05,0x60,0xd0,0x2c,0x70,0x40,
	0x10,0x60,0xeb,0xe9,0x10,0x61,0xfb,0xfa,
	0xd0,0x40,0x60,0x40,0xe3,0xf1,0x00,0x2a,
	0x70,0xa4,0xd0,0x74,0x30,0x42,0xfb,0xf1,
	0xd0,0x42,0x60,0x40,0xe3,0xfa,0x05,0x6f,
	0x61,0x14,0x05,0x60,0x70,0x68,0x10,0x60,
	0xfb,0xfa,0xd0,0x42,0x05,0x60,0x60,0x68,
	0x00,0x6a,0xd0,0x40,0xe1,0xd3,0x00,0x00,
	0x05,0x62,0x70,0x78,0x10,0x60,0xeb,0xb7,
	0xb0,0x41,0x05,0x62,0x60,0x78,0x05,0x26,
	0xd0,0x38,0x79,0x00,0x02,0x14,0xeb,0xc1,
	0x05,0x29,0xd0,0x18,0x70,0x40,0x10,0x60,
	0xeb,0xd8,0x00,0xff,0xdf,0xff,0x90,0x43,
	0x80,0x3f,0x90,0x82,0x40,0x80,0x07,0xef,
	0xd0,0x3f,0x40,0x40,0xc0,0xc2,0x10,0x9f,
	0xd1,0x01,0x40,0xc4,0x10,0xcf,0x50,0x43,
	0x00,0x2b,0xd0,0x36,0xa0,0x7c,0x80,0x3f,
	0xa0,0xbd,0x80,0x3f,0x60,0x00,0x00,0x06,
	0x00,0x61,0xd0,0x2c,0x70,0x40,0xb0,0x7f,
	0x60,0x40,0x03,0x94,0xeb,0xeb,0x05,0x62,
	0xd0,0x08,0x70,0x40,0x10,0x60,0xfb,0xeb,
	0x05,0x27,0xd0,0x34,0x70,0x40,0x10,0x60,
	0xeb,0xeb,0xb0,0x41,0x60,0x40,0x0b,0x94,
	0x0b,0x1f,0x00,0x6a,0xd0,0x48,0xe1,0xd3,
	0x06,0xe5,0xd0,0x1c,0x79,0x00,0x06,0x16,
	0x69,0x00,0xf3,0xba,0x00,0x76,0xd8,0x00,
	0xa0,0x38,0x0f,0x87,0x00,0x2a,0xd0,0x2c,
	0x70,0x80,0x10,0xa0,0xfb,0xfb,0x06,0xe5,
	0xd0,0x1c,0x00,0x28,0xd0,0x40,0x70,0x80,
	0x70,0xc1,0x40,0xc2,0xeb,0xfb,0xd0,0x80,
	0x06,0xe5,0x70,0xf8,0x00,0x23,0x60,0xd8,
	0x06,0xe5,0x60,0xb8,0x06,0xe5,0xd0,0x34,
	0x00,0x2b,0xd0,0x44,0x70,0xc0,0x60,0xc1,
	0x60,0x80,0xb0,0x04,0xb0,0x44,0x70,0xc0,
	0x60,0xc1,0x60,0x80,0xb0,0x04,0xb0,0x44,
	0x70,0xc0,0x60,0xc1,0x60,0x80,0xb0,0x04,
	0xb0,0x44,0x70,0xc0,0x60,0xc1,0x60,0x80,
	0xb0,0x04,0xb0,0x44,0x70,0xc0,0x60,0xc1,
	0x60,0x80,0xb0,0x04,0xb0,0x44,0x70,0xc0,
	0x60,0xc1,0x60,0x80,0xb0,0x04,0xb0,0x44,
	0x70,0xc0,0x60,0xc1,0x60,0x80,0x00,0x22,
	0x79,0x2c,0x02,0x18,0xfb,0xfb,0x01,0x20,
	0xd0,0xc3,0xa0,0xc0,0x80,0x3f,0x07,0xc5,
	0x05,0xe0,0x70,0x1c,0x10,0x23,0xe9,0x82,
	0x05,0x27,0xd0,0x34,0x70,0x00,0x10,0x20,
	0xf9,0x49,0x05,0xe0,0xd0,0x34,0x78,0x00,
	0x00,0x1d,0xf8,0x20,0x00,0x61,0xd0,0x34,
	0x70,0x00,0x10,0x20,0xf8,0x18,0x05,0xe6,
	0xd0,0x14,0xd0,0x40,0x60,0x40,0xe0,0x20,
	0x00,0x12,0xe8,0x20,0x01,0x46,0x05,0xe6,
	0xd0,0x14,0xd0,0x48,0x60,0x40,0x00,0xc6,
	0x05,0xe7,0xd0,0x24,0x70,0x40,0x05,0xef,
	0xd0,0xb8,0x30,0x81,0xe4,0x2b,0x05,0xe7,
	0xd0,0xa8,0x30,0x81,0xfc,0x33,0x05,0xe7,
	0xd0,0xa8,0x60,0x80,0x05,0x6e,0xd0,0x34,
	0xd0,0x41,0x60,0x40,0xe1,0x49,0x05,0xe0,
	0xd0,0x34,0x78,0x00,0x00,0x10,0xe8,0x72,
	0x05,0xe7,0xd0,0x24,0x70,0x00,0x70,0x80,
	0x05,0xe0,0xd3,0x28,0x60,0x8c,0x05,0xe0,
	0xd3,0x20,0x60,0x8c,0xb0,0x34,0x70,0x40,
	0x10,0x60,0xe9,0x49,0x05,0xe7,0xd0,0x24,
	0x70,0x00,0xb0,0x3c,0x70,0x40,0xc0,0x81,
	0x10,0x9f,0x07,0xef,0xd0,0xff,0x40,0x83,
	0xc0,0xc1,0x10,0xd7,0x10,0xd8,0x10,0xc7,
	0x10,0xc8,0x50,0x83,0x10,0x96,0x00,0xef,
	0xd0,0x7f,0x40,0x81,0xb0,0x3c,0x70,0x40,
	0x00,0x23,0xd0,0xff,0x40,0xc1,0x10,0x57,
	0xd0,0x07,0x40,0x40,0x10,0x48,0x50,0x43,
	0x10,0x4c,0x50,0x42,0x05,0xe1,0xd0,0xcc,
	0x70,0x83,0x05,0xe5,0xd0,0x18,0x60,0x80,
	0x05,0xe1,0xd0,0x0c,0x60,0x40,0x05,0xe1,
	0xd0,0x14,0x60,0x40,0x05,0xe1,0xd0,0x1c,
	0x70,0x00,0x10,0x20,0xf8,0x87,0x01,0x46,
	0x00,0xff,0xdf,0xff,0x90,0x83,0x90,0xc2,
	0x40,0xc0,0x10,0xc5,0x00,0xc6,0x10,0x96,
	0xd0,0x1f,0x40,0x80,0x50,0xc2,0x05,0xe1,
	0xd0,0x18,0x60,0xc0,0xe0,0x96,0x05,0x2e,
	0xd0,0x0c,0x70,0x40,0x10,0x56,0x00,0x20,
	0xd0,0x3f,0x40,0x40,0x05,0x2e,0xd0,0x10,
	0x70,0xc0,0x10,0xc5,0x50,0xc1,0x05,0xe1,
	0xd0,0x18,0x60,0xc0,0x00,0x19,0xf8,0xd8,
	0x05,0xe1,0xd0,0x14,0x70,0x40,0x0f,0xff,
	0xdf,0xff,0x40,0x40,0x05,0xe2,0xd0,0x1c,
	0x70,0x00,0x30,0x01,0xf4,0xae,0x05,0xe0,
	0xd0,0x14,0xd0,0x81,0x60,0x80,0x05,0xe5,
	0xd0,0x98,0x70,0x82,0x05,0xe1,0xd0,0x0c,
	0x60,0x80,0xe1,0x82,0x05,0xe1,0xd0,0x08,
	0x70,0x00,0x30,0x01,0xfc,0xb8,0x05,0xe0,
	0xd0,0x14,0xd0,0x82,0x60,0x80,0xe1,0x82,
	0x05,0xe7,0xd0,0x24,0x70,0x00,0xb0,0x38,
	0x78,0x00,0x00,0x54,0xf8,0xd8,0x05,0xe1,
	0xd0,0x0c,0x70,0x00,0x05,0xe5,0xd0,0x98,
	0x70,0x82,0x30,0x81,0xfc,0xcc,0x05,0xe0,
	0xd0,0x14,0xd0,0x83,0x60,0x80,0xe1,0x82,
	0x05,0xe0,0xd0,0x2c,0x70,0x00,0x10,0x20,
	0xe8,0xd8,0x30,0x01,0xf4,0xd8,0x05,0xe0,
	0xd0,0x14,0xd0,0x84,0x60,0x80,0xe1,0x82,
	0x05,0xe1,0xd0,0x0c,0x70,0x40,0x05,0xe1,
	0xd0,0xd8,0x70,0xc3,0x30,0xc1,0xe5,0x49,
	0x05,0xe0,0xd8,0x34,0x78,0x20,0x00,0x11,
	0xe9,0x43,0x05,0xe2,0x70,0x10,0x10,0x20,
	0xf8,0xf3,0x05,0xe1,0xd0,0x44,0x70,0x41,
	0x30,0xc1,0xec,0xef,0xe0,0xfe,0xd0,0x01,
	0x05,0xe2,0x60,0x10,0xe1,0x49,0x05,0xe1,
	0x70,0x44,0x30,0xc1,0xfc,0xfe,0x05,0xe2,
	0x70,0x14,0x00,0x21,0xd0,0x64,0x30,0x40,
	0xfc,0xfe,0xe1,0x49,0xd0,0x00,0x05,0xe2,
	0x60,0x10,0x05,0xe2,0x60,0x14,0x05,0xe0,
	0x78,0x34,0x00,0x11,0xe9,0x43,0xf1,0x4f,
	0xc1,0x03,0xf1,0x4f,0x11,0x08,0x50,0xc4,
	0x0c,0xef,0xd0,0x24,0x30,0x03,0xf5,0x15,
	0x05,0xe0,0xd0,0x14,0xd0,0x85,0x60,0x80,
	0xe1,0x82,0x05,0xe0,0xd0,0x2c,0x70,0x00,
	0x10,0x20,0xf9,0x28,0x05,0xe7,0xd0,0x24,
	0x70,0x00,0xb0,0x34,0x70,0x40,0x30,0x43,
	0xe9,0x28,0x05,0xe0,0xd0,0x20,0x70,0x40,
	0x05,0xe0,0xd0,0x28,0x60,0x40,0xe1,0x49,
	0x05,0xe0,0xd0,0x24,0x60,0xc0,0xf1,0x4f,
	0xc1,0x03,0xf1,0x4f,0x11,0x08,0x50,0xc4,
	0x05,0xe0,0xd0,0x38,0x60,0xc0,0x05,0xe0,
	0xd0,0x20,0x72,0x00,0x22,0x03,0x00,0x28,
	0xd0,0x3c,0x70,0x00,0x30,0x08,0xed,0x40,
	0x05,0x6a,0xd0,0x34,0x70,0x00,0x32,0x00,
	0x05,0xe0,0xd0,0x28,0x62,0x00,0x00,0xc6,
	0x00,0x20,0xd0,0x12,0x00,0x6b,0xd0,0x70,
	0x00,0x05,0x00,0xc6,0x00,0x20,0xd0,0x12,
	0x00,0x6c,0xd0,0x40,0x00,0x05,0x05,0xe0,
	0x72,0xe8,0xc0,0x4b,0x10,0x5e,0x10,0x42,
	0xd0,0x83,0x40,0x8b,0xe9,0x71,0xb0,0x81,
	0xe9,0x6a,0xb0,0x81,0xe9,0x62,0xb0,0x7f,
	0x70,0xc1,0x00,0x06,0x00,0x23,0xd0,0x7f,
	0x40,0xc1,0xe1,0x78,0xb0,0x7f,0x70,0xc1,
	0x00,0x06,0x10,0xd8,0x00,0x23,0xd0,0x7f,
	0x40,0xc1,0xe1,0x78,0xb0,0x7d,0x70,0xc1,
	0x00,0x06,0x00,0x23,0xd0,0x7f,0x40,0xc1,
	0xe1,0x78,0xb0,0x7d,0x70,0xc1,0x00,0x06,
	0x10,0xd8,0x00,0x23,0xd0,0x7f,0x40,0xc1,
	0xb2,0xff,0x00,0x28,0x70,0x3c,0x30,0x0b,
	0xed,0x7f,0x00,0x28,0x72,0xf8,0x05,0xe0,
	0x62,0xe8,0x07,0xc5,0x01,0x46,0xd0,0x00,
	0x05,0xe0,0x60,0x1c,0x05,0xe7,0xd0,0x24,
	0x70,0x40,0xb0,0x74,0xd0,0x80,0x60,0x81,
	0xb0,0x7c,0x05,0xef,0xd0,0xb8,0x30,0x81,
	0xed,0x93,0x05,0xe7,0xd0,0x68,0x60,0x40,
	0x70,0x01,0x05,0xe0,0xd0,0x68,0x60,0x01,
	0x05,0xe0,0xd0,0x60,0x60,0x01,0x05,0xe0,
	0xd0,0x74,0x78,0x01,0x08,0x12,0x04,0x10,
	0x04,0x11,0x68,0x01,0xd0,0x40,0x05,0xe0,
	0xd0,0x2c,0x60,0x40,0xe1,0x49,0x00,0x00,
	0x04,0xea,0x70,0x40,0x10,0x64,0xe8,0x09,
	0x00,0x20,0xd0,0x12,0x00,0x6b,0xd0,0x60,
	0x00,0x05,0x00,0x20,0xd0,0x12,0x00,0x6c,
	0xd0,0x58,0x00,0x05,0xd3,0x80,0x05,0xe0,
	0xd0,0x24,0x70,0x00,0x05,0xe0,0xd0,0x78,
	0x70,0x41,0x30,0x01,0xec,0x0e,0x05,0xe0,
	0xd0,0x14,0xd0,0x8b,0x60,0x80,0xe2,0xfb,
	0x05,0xe0,0xd0,0x28,0x72,0xc0,0x05,0xe1,
	0xd0,0x00,0x62,0xc0,0xf2,0xc8,0xc1,0x03,
	0xf2,0xc8,0x11,0x08,0x50,0xc4,0x05,0xe1,
	0xd0,0x14,0x70,0x40,0x0f,0xef,0xd3,0x3f,
	0x40,0xcc,0x05,0xe0,0xd0,0x34,0x78,0x00,
	0x00,0x1e,0xf8,0x2b,0x10,0xe0,0xe8,0x2b,
	0x05,0xe0,0xd0,0x14,0xd0,0x86,0x60,0x80,
	0xe2,0xfb,0x20,0x43,0x05,0xe1,0xd0,0x0c,
	0x60,0x40,0x05,0xe1,0xd0,0x18,0x70,0x00,
	0x30,0x01,0xf4,0x3b,0x05,0xe1,0xd0,0x00,
	0x70,0x40,0x05,0xe0,0xd0,0x28,0x60,0x40,
	0xe2,0xaa,0xf2,0xc8,0xc1,0x03,0xf2,0xc8,
	0x11,0x08,0x50,0xc4,0x05,0xe0,0xd0,0x34,
	0x78,0x00,0x00,0x11,0xf8,0x4d,0x05,0xe0,
	0xd0,0x3c,0x70,0x40,0xb0,0x04,0x60,0x40,
	0xb0,0x3c,0x60,0xc0,0xe0,0x5f,0x05,0xe0,
	0xd0,0x3c,0x60,0xc0,0x08,0x11,0x05,0xe0,
	0xd0,0x34,0x68,0x00,0x07,0x23,0xd0,0x30,
	0x05,0xe0,0xd0,0x34,0x78,0x40,0x00,0x9a,
	0xf8,0x5f,0xd0,0x40,0x05,0xaf,0xd0,0x34,
	0x60,0x40,0xf2,0xc8,0x00,0x61,0xd0,0x2a,
	0x00,0x23,0xd8,0x7f,0x40,0xe1,0x10,0xe8,
	0xf6,0x2f,0x20,0x03,0xc0,0x41,0x00,0x05,
	0xe0,0x72,0xe0,0x7a,0xe0,0x82,0xe0,0x8d,
	0xe0,0x9a,0xe0,0xa6,0xe1,0xb2,0xe2,0x0e,
	0xb3,0xbf,0x05,0xe0,0x78,0x34,0x04,0x1d,
	0x04,0x12,0x05,0xe0,0x68,0x34,0xe0,0x5f,
	0xb3,0xbf,0x05,0xe0,0x78,0x34,0x08,0x1d,
	0x04,0x12,0x05,0xe0,0x68,0x34,0xe0,0x5f,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x08,0x12,
	0x68,0x00,0x05,0xe6,0xd0,0x14,0x78,0x00,
	0x08,0x13,0x68,0x00,0xe0,0x5f,0xb3,0xbe,
	0xf2,0xc8,0xc1,0x03,0xf2,0xc8,0x11,0x08,
	0x50,0xc4,0x05,0xaf,0xd0,0x18,0x0f,0xef,
	0xd0,0x7f,0x40,0xc1,0x60,0xc0,0xe0,0x5f,
	0xb3,0xbc,0xf2,0xc8,0xc1,0x03,0xf2,0xc8,
	0x11,0x08,0x50,0xc4,0x0f,0xef,0xd0,0x7f,
	0x40,0xc1,0x05,0xaf,0x60,0xdc,0xe0,0x5f,
	0xb3,0xb8,0xf2,0xc8,0xc1,0x03,0xf2,0xc8,
	0x11,0x08,0x11,0x08,0x10,0xc8,0x51,0x03,
	0xf2,0xc8,0x50,0xc4,0xc0,0x43,0x00,0x2f,
	0xd3,0xff,0x43,0xc3,0xc0,0x43,0x10,0x54,
	0x00,0x2b,0xd0,0x0f,0x30,0x0f,0xf4,0xbf,
	0x05,0xe0,0xd0,0x14,0xd0,0x87,0x60,0x80,
	0xe2,0xfb,0x33,0xc1,0xb3,0xff,0x00,0xe7,
	0x78,0x28,0x00,0x12,0xe8,0xcb,0xc8,0x03,
	0x00,0x10,0xe8,0xcb,0x01,0x20,0xd0,0x01,
	0x20,0xc0,0x03,0xd1,0xe8,0xd0,0x0a,0x20,
	0xd0,0x0a,0x20,0xc0,0x05,0xaf,0xd0,0x20,
	0x60,0xc0,0xf2,0xc8,0xc1,0x03,0xf2,0xc8,
	0x11,0x08,0x11,0x08,0x10,0xc8,0x51,0x03,
	0xf2,0xc8,0x50,0xc4,0x00,0x2f,0xd1,0x7f,
	0x41,0x43,0x00,0x27,0xd0,0x5f,0x03,0xd1,
	0xe8,0xe5,0x00,0x28,0xd0,0x7e,0x30,0x45,
	0xf4,0xec,0x05,0xe0,0xd0,0x14,0xd0,0x88,
	0x60,0x80,0xe2,0xfb,0x00,0x23,0xd0,0x0c,
	0x72,0x40,0x30,0x49,0x21,0x49,0xc0,0x43,
	0x10,0x54,0x00,0x2f,0xd0,0x3f,0x40,0x40,
	0xd0,0x03,0x30,0x0f,0xf5,0x02,0xd0,0x0f,
	0x30,0x0f,0xf5,0x04,0x00,0x20,0xd0,0x3f,
	0x30,0x0f,0xf5,0x06,0xd4,0x04,0xe1,0x08,
	0xd4,0x01,0xe1,0x08,0xd4,0x02,0xe1,0x08,
	0xd4,0x03,0xe1,0x08,0xd0,0x80,0xc0,0x05,
	0x30,0x01,0xb0,0x3f,0xc8,0x50,0x00,0x90,
	0xe9,0x11,0xc0,0x80,0x10,0x9f,0x00,0x91,
	0xe9,0x14,0x20,0x80,0x00,0x92,0xe9,0x18,
	0x10,0x01,0x20,0x80,0x05,0xe0,0x70,0x24,
	0x30,0x02,0xf5,0x21,0x05,0xe0,0xd0,0x14,
	0xd0,0x8c,0x60,0x80,0xe2,0xfb,0x00,0x27,
	0x78,0x74,0x00,0x91,0xe9,0x2a,0xc8,0x05,
	0x38,0x01,0x00,0x10,0xe9,0x2a,0xb1,0x41,
	0x20,0x49,0x05,0x27,0x70,0x04,0x10,0x21,
	0xf9,0x3f,0x05,0xe0,0x78,0x34,0x00,0x15,
	0xf9,0x3f,0xc3,0x05,0x13,0x1d,0xc3,0x4c,
	0x13,0x1f,0x23,0x4c,0xc3,0x0d,0x13,0x1d,
	0x23,0x4c,0x0f,0xef,0x43,0x7e,0x20,0x4d,
	0x21,0x4d,0x00,0x22,0xd0,0x94,0x70,0x82,
	0x10,0xa0,0xe9,0x4d,0x05,0xe6,0xd0,0x1c,
	0x70,0x00,0x10,0x1f,0xb0,0x3d,0x30,0x80,
	0x10,0x81,0x20,0x42,0x21,0x42,0x05,0xe1,
	0x73,0x6c,0x13,0x60,0xe9,0x5a,0x05,0x27,
	0x73,0x44,0x13,0x61,0xf9,0x5a,0x00,0x20,
	0xd0,0x30,0x20,0x40,0x21,0x40,0x22,0x40,
	0xd0,0x00,0x30,0x09,0xe5,0x81,0xc2,0x40,
	0x00,0x6f,0xd0,0x3f,0x42,0x40,0x0d,0x20,
	0xd0,0x00,0x52,0x40,0xd0,0x30,0x03,0x28,
	0xd3,0x00,0x01,0x46,0x00,0x29,0xd0,0x87,
	0xa0,0xb6,0x80,0x3f,0xa0,0x34,0x80,0x3f,
	0xa2,0x74,0x80,0x3f,0xa3,0x34,0x80,0x3f,
	0x00,0xc6,0xc0,0x00,0x01,0x46,0x00,0x29,
	0xd0,0x8f,0xa0,0xb6,0x80,0x3f,0xa0,0x34,
	0x80,0x3f,0xa2,0x74,0x80,0x3f,0xa3,0x34,
	0x80,0x3f,0x00,0xc6,0xe1,0xa3,0x00,0x6f,
	0xd0,0x3f,0x42,0x40,0x0d,0x20,0xd0,0x00,
	0x52,0x40,0xd0,0x30,0x02,0x28,0xd3,0x00,
	0x01,0x46,0x00,0x29,0xd0,0x87,0xa0,0xb6,
	0x80,0x3f,0xa0,0x34,0x80,0x3f,0xa2,0x74,
	0x80,0x3f,0xa3,0x34,0x80,0x3f,0x00,0xc6,
	0xc0,0x00,0x01,0x46,0x00,0x29,0xd0,0x8f,
	0xa0,0xb6,0x80,0x3f,0xa0,0x34,0x80,0x3f,
	0xa2,0x74,0x80,0x3f,0xa3,0x34,0x80,0x3f,
	0x00,0xc6,0x00,0x20,0xd0,0x28,0x03,0xd1,
	0xe9,0xa9,0x00,0x20,0xd0,0x2a,0x20,0x40,
	0x21,0x40,0x10,0x4c,0x50,0x45,0xc0,0xc1,
	0x05,0xaf,0xd0,0x64,0x60,0xc1,0xe0,0x5f,
	0xb3,0xb0,0xf2,0xc8,0xc1,0x03,0xf2,0xc8,
	0x11,0x08,0x50,0xc4,0x05,0xe0,0xd0,0x24,
	0x70,0x00,0x30,0x03,0xf5,0xc2,0x05,0xe0,
	0xd0,0x14,0xd0,0x89,0x60,0x80,0xe2,0xfb,
	0x05,0xe0,0xd0,0x20,0x70,0x40,0x20,0xc1,
	0x00,0x28,0xd0,0x3c,0x70,0x00,0x30,0x03,
	0xed,0xcf,0x05,0x6a,0xd0,0x34,0x70,0x00,
	0x30,0xc0,0x05,0xe0,0xd0,0x00,0x60,0xc0,
	0xd0,0x43,0x40,0xc1,0x10,0xc8,0x10,0xc8,
	0x10,0xc6,0x05,0xaf,0xd0,0x3c,0x78,0x00,
	0x04,0x54,0x04,0x12,0x04,0x13,0x08,0x55,
	0x08,0x56,0x08,0x57,0x50,0xe0,0x60,0xc0,
	0xf2,0xc8,0xc1,0x03,0xf2,0xc8,0x11,0x08,
	0x50,0xc4,0x05,0xe0,0xd0,0x24,0x70,0x00,
	0x30,0x03,0xf5,0xf1,0x05,0xe0,0xd0,0x14,
	0xd0,0x8a,0x60,0x80,0xe2,0xfb,0x05,0xe0,
	0x70,0x60,0x20,0xc1,0x00,0x28,0x70,0x3c,
	0x30,0x03,0xed,0xfb,0x05,0x6a,0x70,0x34,
	0x30,0xc0,0x05,0xe0,0x60,0xcc,0xd0,0x43,
	0x40,0xc1,0x10,0xc8,0x10,0xc8,0x10,0xc6,
	0x05,0xe0,0x78,0x08,0x04,0x54,0x04,0x12,
	0x04,0x13,0x08,0x55,0x08,0x56,0x08,0x57,
	0x50,0xe0,0x05,0xe0,0x60,0xc8,0xe0,0x5f,
	0xf2,0xc8,0xc1,0x03,0xf2,0xc8,0x11,0x08,
	0x50,0xc4,0x05,0xe0,0x70,0x68,0x05,0xaf,
	0x60,0x74,0xd0,0x83,0x40,0x81,0x05,0xaf,
	0x71,0x3c,0x51,0x02,0x05,0xaf,0x61,0x3c,
	0x05,0xe0,0x71,0x08,0x51,0x02,0x05,0xe0,
	0x61,0x08,0xb0,0xc2,0x20,0xc1,0x00,0x28,
	0x70,0x3c,0x30,0x03,0xee,0x2c,0x05,0x6a,
	0x70,0x34,0x30,0xc0,0x05,0xe0,0x60,0xe8,
	0xe0,0x5f,0x05,0xe0,0x78,0x34,0x00,0x1e,
	0xfa,0x3b,0x13,0xbf,0xfa,0xfb,0x04,0x1e,
	0x05,0xe0,0x68,0x34,0xd8,0x40,0x05,0xe0,
	0x68,0x5c,0xc8,0x0e,0x00,0x10,0xea,0x4b,
	0x00,0x61,0x70,0x34,0x10,0x20,0xfa,0x48,
	0x05,0xe0,0x78,0x34,0x00,0x1d,0xfa,0x48,
	0xd3,0x80,0xe2,0x49,0xd3,0x88,0x05,0xe6,
	0x63,0x94,0x00,0x61,0x70,0x64,0x10,0x60,
	0xfa,0x5b,0x05,0xe7,0x70,0x24,0xb0,0x38,
	0x78,0x00,0x00,0x54,0xea,0x69,0x08,0x54,
	0x68,0x00,0xd0,0x40,0x05,0xe5,0x60,0x58,
	0xe2,0x5e,0xd0,0x40,0x00,0x61,0x60,0x64,
	0x06,0x21,0xd0,0x38,0x07,0x22,0xd0,0x40,
	0xd0,0x8f,0x70,0xc1,0x60,0xc0,0xb0,0x3c,
	0xb0,0x7c,0xb0,0x81,0xf6,0x63,0x05,0xe0,
	0x70,0x78,0x05,0xe0,0x70,0xbc,0x30,0x42,
	0xfa,0xaa,0x05,0xe0,0x78,0x34,0x04,0x10,
	0x04,0x11,0x05,0xe0,0x68,0x34,0x05,0xe0,
	0x78,0x34,0x00,0x15,0xea,0x86,0x00,0x1c,
	0xfa,0x86,0x06,0xe5,0x78,0x1c,0x01,0x46,
	0x04,0x53,0x06,0xe5,0x68,0x1c,0x00,0x23,
	0xd8,0x3f,0x06,0xe5,0x68,0x20,0x00,0xc6,
	0x05,0xe0,0x78,0x34,0x08,0x1c,0x08,0x1e,
	0x04,0x14,0x05,0xe0,0x68,0x34,0x00,0xc6,
	0x05,0xe7,0x70,0x24,0xb0,0x34,0xd0,0x40,
	0x60,0x40,0x05,0xe0,0x60,0x6c,0x05,0xe7,
	0xd0,0x24,0xc0,0x40,0x70,0x80,0xb0,0xb0,
	0x05,0xef,0xd0,0x38,0x30,0x02,0xee,0xa1,
	0x05,0xe7,0xd0,0x28,0xc0,0x80,0x60,0x81,
	0x05,0xe7,0xd0,0x24,0x70,0x40,0x70,0x41,
	0x05,0xe0,0xd0,0x28,0x60,0x40,0xe2,0xc3,
	0x05,0xe0,0x78,0x34,0x00,0x15,0xea,0xbe,
	0x00,0x1c,0xfa,0xbe,0x04,0x1c,0x05,0xe0,
	0x68,0x34,0x01,0x46,0x06,0xe5,0x78,0x1c,
	0x04,0x53,0x06,0xe5,0x68,0x1c,0x00,0x23,
	0xd8,0x3f,0x06,0xe5,0x68,0x20,0x00,0xc6,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x08,0x10,
	0x68,0x00,0x00,0x20,0xd0,0x12,0x00,0x6c,
	0xd0,0x40,0x00,0x05,0x05,0xe0,0x72,0xe8,
	0xc0,0x4b,0x10,0x5e,0x10,0x42,0xd0,0x83,
	0x40,0x8b,0xea,0xea,0xb0,0x81,0xea,0xe3,
	0xb0,0x81,0xea,0xdb,0xb0,0x7f,0x70,0xc1,
	0x00,0x06,0x00,0x23,0xd0,0x7f,0x40,0xc1,
	0xe2,0xf1,0xb0,0x7f,0x70,0xc1,0x00,0x06,
	0x10,0xd8,0x00,0x23,0xd0,0x7f,0x40,0xc1,
	0xe2,0xf1,0xb0,0x7d,0x70,0xc1,0x00,0x06,
	0x00,0x23,0xd0,0x7f,0x40,0xc1,0xe2,0xf1,
	0xb0,0x7d,0x70,0xc1,0x00,0x06,0x10,0xd8,
	0x00,0x23,0xd0,0x7f,0x40,0xc1,0xb2,0xff,
	0x00,0x28,0x70,0x3c,0x30,0x0b,0xee,0xf8,
	0x00,0x28,0x72,0xf8,0x05,0xe0,0x62,0xe8,
	0x07,0xc5,0x05,0xe7,0xd0,0x24,0x70,0x40,
	0xb0,0x74,0xd0,0x80,0x60,0x81,0xb0,0x7c,
	0x05,0xef,0xd0,0xb8,0x30,0x81,0xef,0x08,
	0x05,0xe7,0xd0,0x68,0x60,0x40,0x70,0x01,
	0x05,0xe0,0x60,0x28,0x05,0xe0,0x60,0x20,
	0x01,0x46,0x05,0xe0,0x78,0x34,0x04,0x10,
	0x04,0x11,0x05,0xe0,0x68,0x34,0x00,0xc6,
	0xd0,0x40,0x05,0xe6,0x60,0x54,0x05,0xe0,
	0x60,0x6c,0xe2,0xc3,0x00,0x28,0x73,0xa0,
	0x05,0xe0,0x78,0x34,0x00,0x11,0xf8,0x36,
	0x05,0xe7,0xd0,0x24,0x70,0x80,0xb0,0xb0,
	0x05,0xef,0xd0,0x38,0x30,0x02,0xec,0x11,
	0x05,0xe7,0xd0,0x28,0xc0,0x80,0xc0,0x02,
	0xb0,0x34,0x70,0x40,0x10,0x60,0xe8,0x33,
	0xb0,0x08,0x70,0x40,0xc0,0x81,0x10,0x9f,
	0x07,0xef,0xd0,0xff,0x40,0x83,0xc0,0xc1,
	0x10,0xd7,0x10,0xd8,0x10,0xc7,0x10,0xc8,
	0x50,0x83,0x10,0x96,0x00,0xef,0xd0,0x7f,
	0x40,0x81,0xb0,0x3c,0x70,0x40,0x00,0x23,
	0xd0,0xff,0x40,0xc1,0x10,0x57,0xd0,0x07,
	0x40,0x40,0x10,0x48,0x50,0x43,0x10,0x4c,
	0x50,0x42,0x05,0xe0,0xd0,0x2c,0x60,0x40,
	0x03,0x53,0xea,0x74,0x0b,0x53,0x00,0x22,
	0x78,0x2c,0x00,0x15,0xf8,0x44,0x01,0x46,
	0x06,0xe5,0xd0,0x1c,0x78,0x00,0x04,0x52,
	0x68,0x00,0x00,0xc6,0xd0,0x40,0x05,0x28,
	0xd0,0x00,0x60,0x40,0xd8,0x40,0xd8,0x80,
	0x05,0x64,0xd0,0x58,0x70,0x41,0xb0,0x7a,
	0x00,0x20,0xd0,0x8c,0x20,0x8e,0x01,0x46,
	0x73,0xc2,0x63,0xc1,0x00,0xc6,0xb0,0x7c,
	0x00,0x20,0xd0,0x90,0x20,0x8e,0x01,0x46,
	0x73,0xc2,0x63,0xc1,0x00,0xc6,0x00,0x20,
	0xd0,0x94,0x20,0x8e,0x01,0x46,0x73,0xc2,
	0x00,0x06,0x94,0x3d,0x80,0x3f,0x00,0xc6,
	0x13,0xe0,0xf8,0x6b,0x14,0x20,0xf8,0x6b,
	0x04,0x90,0x00,0x2f,0xd0,0xa0,0x20,0x8e,
	0x01,0x46,0x73,0xc2,0x00,0x06,0x94,0x3d,
	0x80,0x3f,0x00,0xc6,0x13,0xe0,0xf8,0x79,
	0x14,0x20,0xf8,0x79,0x04,0x91,0x00,0x2f,
	0xd0,0xa4,0x20,0x8e,0x01,0x46,0x73,0xc2,
	0x00,0x06,0x94,0x3d,0x80,0x3f,0x00,0xc6,
	0x13,0xe0,0xf8,0x87,0x14,0x20,0xf8,0x87,
	0x04,0x92,0x00,0x2f,0xd0,0xa8,0x20,0x8e,
	0x01,0x46,0x73,0xc2,0x00,0x06,0x94,0x3d,
	0x80,0x3f,0x00,0xc6,0x13,0xe0,0xf8,0x95,
	0x14,0x20,0xf8,0x95,0x04,0x93,0x00,0x21,
	0xd0,0xa0,0x20,0x8e,0xb0,0xbd,0x73,0xc2,
	0xd0,0x83,0x43,0xc2,0x13,0xe1,0xfc,0xa0,
	0x05,0xe1,0x73,0xec,0x05,0xe1,0x63,0xec,
	0x13,0xc4,0x58,0x4f,0xb0,0x7e,0x68,0x41,
	0x05,0xe2,0x60,0x58,0xb0,0x7a,0x00,0x20,
	0xd0,0x94,0x20,0x8e,0x01,0x46,0x73,0xc2,
	0x63,0xc1,0x00,0xc6,0xb0,0x7c,0x00,0x2f,
	0xd0,0xac,0x20,0x8e,0x01,0x46,0x73,0xc2,
	0x63,0xc1,0x00,0xc6,0xb0,0x7c,0x00,0x20,
	0xd0,0x80,0x20,0x8e,0x01,0x46,0x73,0xc2,
	0x63,0xc1,0x00,0xc6,0x05,0x64,0xd0,0x5c,
	0x70,0x41,0xb0,0x7e,0x00,0x60,0xd0,0x80,
	0x20,0x8e,0x01,0x46,0x73,0xc2,0x63,0xc1,
	0x00,0xc6,0xb0,0x7c,0x00,0x60,0xd0,0x84,
	0x20,0x8e,0x01,0x46,0x73,0xc2,0x63,0xc1,
	0x00,0xc6,0xc0,0x0e,0x00,0x60,0xd0,0x41,
	0x20,0x01,0x70,0x40,0xb0,0x3e,0x70,0x80,
	0x10,0x56,0xd0,0x3f,0x40,0x40,0x10,0x86,
	0x50,0x81,0x0f,0xff,0xdf,0xff,0x40,0x80,
	0x05,0xe1,0x60,0x88,0xc0,0x0e,0x00,0x60,
	0xd0,0x45,0x20,0x01,0x70,0x40,0xb0,0x3e,
	0x70,0x80,0x10,0x56,0xd0,0x3f,0x40,0x40,
	0x10,0x86,0x50,0x81,0x0f,0xff,0xdf,0xff,
	0x40,0x80,0x05,0xe2,0x60,0x9c,0x00,0x61,
	0x70,0x38,0x10,0x20,0xeb,0x23,0x00,0x28,
	0x70,0x60,0x00,0x21,0xd0,0xa0,0x20,0x42,
	0x07,0x23,0x60,0x60,0xd1,0x02,0xf1,0xf9,
	0xd0,0x43,0x40,0xc1,0x05,0xe1,0x70,0x24,
	0x05,0x27,0x70,0x84,0x10,0xa0,0xe9,0x15,
	0x10,0x20,0xf9,0x11,0x10,0xe0,0xe9,0x15,
	0x07,0x25,0x60,0x38,0xe1,0x15,0x10,0xe0,
	0xf9,0x15,0x07,0x25,0x60,0xf8,0x10,0xe1,
	0xe9,0x22,0x10,0xe0,0xeb,0x1c,0xe1,0x22,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x04,0x15,
	0x04,0x1a,0x08,0x17,0x68,0x00,0xe2,0x74,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x04,0x15,
	0x04,0x1a,0x08,0x17,0x08,0x18,0x08,0x19,
	0x68,0x00,0xd0,0x41,0x07,0x23,0x60,0x44,
	0xd1,0x02,0xf1,0xf9,0xc2,0x43,0xd1,0x02,
	0xf1,0xf9,0x12,0x46,0x10,0xd6,0x00,0x20,
	0xd0,0x3f,0x40,0xc0,0x50,0xc9,0x07,0x23,
	0x60,0xe4,0xd1,0x02,0xf1,0xf9,0xc2,0x43,
	0xd1,0x02,0xf1,0xf9,0x12,0x46,0x10,0xd6,
	0x00,0x20,0xd0,0x3f,0x40,0xc0,0x50,0xc9,
	0x07,0x23,0x60,0xe8,0xd1,0x02,0xf1,0xf9,
	0xc2,0x43,0xd1,0x02,0xf1,0xf9,0x0f,0xef,
	0xd8,0x3f,0x0c,0x19,0xf9,0x58,0x0c,0x13,
	0xf9,0x58,0x05,0xe0,0xd0,0x34,0x78,0x00,
	0x04,0x19,0x68,0x00,0x12,0x46,0x10,0xd6,
	0x00,0x20,0xd0,0x3f,0x40,0xc0,0x50,0xc9,
	0x07,0x23,0x60,0xec,0xd1,0x02,0xf1,0xf9,
	0x07,0x23,0x60,0xf0,0xc3,0x03,0x13,0x14,
	0xd0,0x43,0x43,0x01,0x13,0x20,0xf9,0x6f,
	0x05,0xe2,0x70,0x18,0x78,0x00,0x08,0x14,
	0x68,0x00,0x07,0x23,0xd0,0x20,0x70,0x40,
	0xb0,0x7f,0x60,0x40,0xd1,0x01,0xf1,0xf9,
	0x10,0xe1,0xe7,0x1c,0x00,0x20,0xd0,0x64,
	0x13,0x21,0xe9,0x83,0xd0,0x52,0x13,0x22,
	0xe9,0x83,0xd0,0x4c,0x13,0x23,0xe9,0x83,
	0xe3,0x1c,0x30,0x43,0xe7,0x1c,0x07,0x23,
	0xd0,0x34,0x60,0xc0,0x10,0xe0,0xf9,0x8f,
	0x05,0xe2,0x70,0x18,0x78,0x00,0x08,0x14,
	0x68,0x00,0xd1,0x01,0xf1,0xf9,0x07,0x23,
	0x60,0xf8,0x07,0x23,0xd0,0x20,0x70,0x40,
	0xb0,0x7f,0x60,0x40,0xd1,0x02,0xf1,0xf9,
	0x07,0x23,0x60,0xfc,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xc0,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xc4,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xd8,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xdc,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xc8,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xcc,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xe0,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xe4,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xd0,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xd4,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xe8,0xd1,0x02,0xf1,0xf9,
	0x07,0x24,0x60,0xec,0x00,0x20,0xd2,0xa4,
	0x13,0x21,0xe9,0xd7,0xd2,0x92,0x13,0x22,
	0xe9,0xd7,0xd2,0x8c,0x13,0x23,0xe9,0xd7,
	0xe3,0x1c,0x07,0x24,0x62,0xb0,0xc0,0x0a,
	0xb3,0x01,0xe9,0xde,0x22,0x80,0xe1,0xda,
	0x04,0xa3,0xd0,0x14,0xc3,0x40,0xd1,0x03,
	0xf1,0xf9,0x60,0xcd,0xd1,0x03,0xf1,0xf9,
	0xb3,0x7c,0x60,0xcd,0xd1,0x02,0xf1,0xf9,
	0xb3,0x7c,0x60,0xcd,0xd1,0x02,0xf1,0xf9,
	0xb3,0x7c,0x60,0xcd,0x07,0x23,0xd0,0x20,
	0x70,0x40,0xb0,0x78,0x60,0x40,0xb3,0x7c,
	0xb2,0x81,0xf9,0xe1,0xe2,0x74,0x07,0x23,
	0xd0,0x20,0x71,0x40,0xc0,0x45,0x10,0x5e,
	0x10,0x42,0xd0,0x83,0x40,0x85,0xd1,0x84,
	0x31,0x82,0xb1,0x82,0xea,0x2f,0xb1,0x81,
	0xea,0x4e,0xb1,0x81,0xea,0x5d,0x11,0x21,
	0xfa,0x14,0x70,0x01,0x00,0x23,0xd0,0xff,
	0x40,0xc0,0xb1,0x7f,0x07,0x23,0xd0,0x20,
	0x61,0x40,0x07,0xc5,0x70,0xc1,0x00,0x23,
	0xd0,0x3f,0x40,0xc0,0xc0,0x04,0xb0,0x01,
	0x10,0x03,0xb0,0x01,0x10,0xc0,0x10,0xc1,
	0x21,0x44,0x07,0x23,0xd0,0x20,0x61,0x40,
	0xc0,0x45,0x10,0x5e,0x10,0x42,0xb0,0x7d,
	0x70,0x41,0x00,0x06,0xd0,0x30,0xb1,0x01,
	0x11,0x03,0x20,0x04,0x10,0x40,0x50,0xc1,
	0x07,0xc5,0x70,0x01,0x0f,0xef,0xd0,0xff,
	0x40,0xc0,0x11,0x22,0xee,0x3d,0x11,0x21,
	0xfa,0x38,0x10,0xd8,0x21,0x44,0x07,0x23,
	0xd0,0x20,0x61,0x40,0x07,0xc5,0x10,0xc8,
	0x21,0x44,0x07,0x23,0xd0,0x20,0x61,0x40,
	0xc0,0x45,0x10,0x5e,0x10,0x42,0xb0,0x7d,
	0x70,0x41,0x00,0x06,0x00,0x23,0xd0,0x3f,
	0x10,0x58,0x40,0x40,0x50,0xc1,0x07,0xc5,
	0x21,0x44,0x07,0x23,0xd0,0x20,0x61,0x40,
	0x70,0xc1,0xd0,0x58,0x11,0x03,0x30,0x44,
	0xea,0x5c,0xd0,0x00,0x30,0x01,0xb0,0x3f,
	0x10,0xc0,0x10,0xdf,0x07,0xc5,0x21,0x44,
	0x07,0x23,0xd0,0x20,0x61,0x40,0xb0,0x7d,
	0x70,0xc1,0x00,0x06,0x11,0x23,0xea,0x6a,
	0x11,0x22,0xea,0x69,0x10,0xd8,0x07,0xc5,
	0x10,0xc8,0xb0,0x42,0x70,0x41,0x00,0x06,
	0x10,0x58,0x00,0x23,0xd0,0x3f,0x40,0x40,
	0x50,0xc1,0x07,0xc5,0x05,0xe0,0xd0,0x34,
	0x78,0x00,0x00,0x15,0xeb,0x1c,0x00,0x23,
	0x70,0x48,0x10,0x60,0xfa,0x7f,0x05,0xa2,
	0x70,0x40,0x10,0x62,0xfa,0x8e,0x07,0x23,
	0x70,0x30,0x10,0x18,0xd0,0x47,0x40,0x01,
	0x10,0x27,0xea,0x8a,0x10,0x20,0xfb,0x23,
	0xd0,0x41,0x07,0x23,0x60,0x44,0xe3,0x17,
	0x00,0x22,0x70,0x40,0x10,0x60,0xfa,0xe9,
	0x00,0x22,0xd0,0x04,0x70,0x40,0x10,0x61,
	0xfa,0xba,0x07,0x23,0xd0,0x30,0x70,0xc0,
	0xc0,0x43,0x10,0x58,0xd0,0x07,0x40,0x40,
	0x10,0x64,0xe6,0xa5,0x07,0x23,0xd0,0x04,
	0xd0,0x41,0x60,0x40,0xe3,0x17,0xc0,0x43,
	0x10,0x5c,0xd0,0x07,0x40,0x40,0x10,0x64,
	0xe6,0xb0,0x07,0x23,0xd0,0x04,0xd0,0x42,
	0x60,0x40,0xe3,0x17,0xc0,0x43,0xd0,0x07,
	0x40,0x40,0x10,0x64,0xe7,0x23,0x07,0x23,
	0xd0,0x04,0xd0,0x43,0x60,0x40,0xe3,0x17,
	0x07,0x23,0xd0,0x30,0x70,0xc0,0xc0,0x43,
	0x10,0x58,0xd0,0x07,0x40,0x40,0x10,0x61,
	0xfe,0xcc,0x10,0x64,0xea,0xcc,0x10,0x65,
	0xea,0xcc,0x07,0x23,0xd0,0x04,0xd0,0x41,
	0x60,0x40,0xe3,0x17,0xc0,0x43,0x10,0x5c,
	0xd0,0x07,0x40,0x40,0x10,0x61,0xfe,0xdb,
	0x10,0x64,0xea,0xdb,0x10,0x65,0xea,0xdb,
	0x07,0x23,0xd0,0x04,0xd0,0x42,0x60,0x40,
	0xe3,0x17,0xc0,0x43,0xd0,0x07,0x40,0x40,
	0x10,0x61,0xff,0x23,0x10,0x64,0xeb,0x23,
	0x10,0x65,0xeb,0x23,0x07,0x23,0xd0,0x04,
	0xd0,0x43,0x60,0x40,0xe3,0x17,0x07,0x23,
	0xd0,0x30,0x70,0xc0,0xc0,0x43,0x10,0x58,
	0xd0,0x07,0x40,0x40,0x10,0x60,0xea,0xfb,
	0x10,0x22,0xea,0xfb,0x10,0x24,0xea,0xfb,
	0x07,0x23,0xd0,0x04,0xd0,0x41,0x60,0x40,
	0xe3,0x17,0xc0,0x43,0x10,0x5c,0xd0,0x07,
	0x40,0x40,0x10,0x60,0xeb,0x0a,0x10,0x22,
	0xeb,0x0a,0x10,0x24,0xeb,0x0a,0x07,0x23,
	0xd0,0x04,0xd0,0x42,0x60,0x40,0xe3,0x17,
	0xc0,0x43,0xd0,0x07,0x40,0x40,0x10,0x60,
	0xeb,0x23,0x10,0x22,0xeb,0x23,0x10,0x24,
	0xeb,0x23,0x07,0x23,0xd0,0x04,0xd0,0x43,
	0x60,0x40,0x00,0x20,0xd0,0x12,0x00,0x6c,
	0xd0,0x50,0x00,0x05,0x05,0xe0,0xd0,0x34,
	0x78,0x00,0x08,0x15,0x08,0x1a,0x08,0x19,
	0x68,0x00,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x03,0x53,0xe8,0x24,0x0f,0xef,0xd1,0xff,
	0x00,0x28,0x73,0xa8,0x00,0x26,0xd1,0x0c,
	0x21,0x0e,0x70,0x04,0xb1,0x3c,0x01,0x46,
	0x70,0x44,0x00,0x06,0x90,0x7d,0x40,0x47,
	0x00,0xc6,0xc0,0x80,0x00,0x23,0xd0,0xff,
	0x40,0x83,0x10,0x90,0x03,0xef,0xd0,0xff,
	0x40,0x03,0x50,0x42,0x00,0x62,0xd1,0x68,
	0xb1,0x7e,0x01,0x46,0x00,0x06,0xa0,0x7c,
	0xa0,0x3d,0x80,0x3f,0x60,0x45,0x00,0xc6,
	0x00,0x20,0xd0,0x12,0x00,0x6b,0xd0,0x78,
	0x00,0x05,0x00,0x00,0x05,0x26,0x70,0x60,
	0x10,0x62,0xfb,0xc9,0x04,0xeb,0x70,0x28,
	0x10,0x20,0xfb,0xc9,0x05,0x28,0x70,0x70,
	0xb0,0x41,0xef,0xc7,0xd0,0x40,0x15,0x60,
	0xfb,0xc7,0xd0,0xc1,0x05,0x29,0x60,0xd0,
	0x05,0x26,0x79,0x38,0x06,0x17,0x05,0x26,
	0x69,0x38,0x05,0x28,0x60,0x70,0x05,0x61,
	0x79,0x14,0x19,0x20,0xeb,0xd7,0x19,0x21,
	0xef,0xd4,0x00,0xa0,0xd0,0x01,0xa0,0x37,
	0x80,0x3f,0xe3,0xd7,0xb9,0x01,0x05,0x61,
	0x69,0x14,0x00,0xe0,0xd0,0x40,0xe1,0xd3,
	0x05,0x20,0x73,0xe8,0x05,0x20,0x73,0x2c,
	0xd4,0x01,0x05,0xa1,0x71,0x38,0x00,0x2b,
	0xd1,0x40,0x31,0x44,0xfc,0x21,0x00,0x27,
	0xd1,0x60,0x31,0x44,0xf8,0x17,0xd4,0x04,
	0x13,0xdf,0xc1,0x4f,0x11,0x5e,0x23,0xc5,
	0x11,0x5e,0x23,0xc5,0xe0,0x21,0xd4,0x02,
	0x13,0xdf,0x05,0xa1,0x71,0x3c,0x00,0x24,
	0xd1,0x6c,0x31,0x05,0xf4,0x21,0xd4,0x03,
	0x13,0x1f,0xd3,0x40,0xc1,0x0c,0x11,0x1c,
	0x11,0x20,0xe8,0x2b,0x00,0xad,0xd1,0x80,
	0x23,0x46,0xb1,0x01,0xec,0x28,0xc1,0x0c,
	0xd1,0x8f,0x41,0x06,0x23,0x44,0x13,0x42,
	0xd3,0x80,0xc1,0x0c,0x11,0x1b,0x11,0x20,
	0xe8,0x3a,0x00,0xad,0xd1,0x80,0x23,0x86,
	0xb1,0x01,0xec,0x37,0xc1,0x0c,0xd1,0x9f,
	0x41,0x06,0x11,0x1f,0x23,0x84,0x13,0x82,
	0x13,0xc2,0x00,0x23,0x71,0x08,0x11,0x20,
	0xf8,0x47,0x05,0xa2,0x71,0x00,0xd2,0x06,
	0x11,0x22,0xfc,0x4b,0xd2,0x00,0x00,0x22,
	0x71,0x00,0x11,0x21,0xe8,0x50,0xb2,0x3d,
	0x00,0x22,0x71,0x04,0x11,0x20,0xe8,0x58,
	0xb2,0x3f,0x11,0x21,0xe8,0x58,0xb2,0x3f,
	0xd2,0x40,0x12,0x24,0xe8,0x5d,0x12,0x25,
	0xf8,0x5e,0xb2,0x7c,0x05,0x20,0x71,0xd8,
	0x11,0xe1,0xe8,0x67,0x11,0xe2,0xf8,0x66,
	0xb2,0x7f,0xe0,0x67,0xb2,0x7e,0x14,0x21,
	0xe8,0x6d,0xb2,0x7f,0x14,0x24,0xf8,0x6d,
	0xb2,0x7a,0x05,0x21,0xd1,0x10,0xc1,0x49,
	0x11,0x42,0x21,0x44,0xc1,0x85,0xd2,0x80,
	0x11,0xe1,0xe8,0x8c,0x11,0xe2,0xf8,0x82,
	0xb2,0xbc,0x14,0x23,0xe8,0x8c,0xb2,0xb4,
	0x05,0x62,0x71,0x28,0x11,0x20,0xe8,0x8d,
	0xb2,0xbc,0xe0,0x8d,0xb2,0xb8,0x14,0x23,
	0xe8,0x8c,0xb2,0xb0,0x05,0x62,0x71,0x20,
	0x11,0x20,0xe8,0x8d,0xb2,0xbc,0xe0,0x8d,
	0xb2,0xbc,0x05,0x21,0xd1,0x38,0x22,0x84,
	0x00,0x32,0xd0,0x01,0xa0,0x38,0x80,0x3f,
	0x05,0x20,0x61,0xdc,0x05,0x20,0x63,0xb8,
	0x05,0x20,0x63,0x74,0x05,0x20,0x63,0xfc,
	0x05,0x21,0x62,0x8c,0x05,0x21,0x61,0x88,
	0x00,0x32,0xd0,0x00,0xa0,0x38,0x80,0x3f,
	0x00,0xad,0xd0,0x78,0xd0,0x12,0x00,0x60,
	0xd7,0xca,0x00,0x05,0x05,0x65,0x70,0x20,
	0x10,0x20,0xeb,0xdc,0x05,0x65,0x70,0x2c,
	0x10,0x20,0xfb,0xdc,0x05,0xe6,0x70,0x38,
	0x10,0x20,0xfb,0xd2,0x05,0x66,0x70,0xf8,
	0x71,0x03,0x11,0x20,0xeb,0xd2,0x05,0xe6,
	0x61,0x38,0xd0,0x40,0x60,0x43,0x05,0x67,
	0x70,0x54,0x05,0xe6,0x60,0x74,0xb0,0xfc,
	0x05,0x67,0xd9,0x14,0x0e,0x13,0xfb,0xd0,
	0x05,0x67,0xd0,0xc0,0x05,0x66,0x60,0xf8,
	0x05,0x65,0x71,0x24,0xd0,0x00,0x05,0x65,
	0x60,0x24,0x05,0xe6,0x70,0x3c,0x30,0x04,
	0xeb,0xdc,0xf3,0xdf,0x00,0x6b,0xd0,0x58,
	0xe1,0xd3,0x11,0x20,0xeb,0xf0,0x05,0x67,
	0xd9,0x28,0x05,0x67,0xd0,0x58,0x70,0x01,
	0x10,0x20,0xeb,0xef,0xc0,0x84,0x30,0x80,
	0xeb,0xf0,0x0e,0x11,0xeb,0xf0,0xb0,0x7c,
	0xe3,0xe5,0x61,0x01,0x07,0xc5,0x00,0x00,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x00,0x15,
	0xe9,0x55,0x00,0x14,0xe9,0x55,0x00,0x1b,
	0xf9,0x55,0x05,0x62,0xd0,0x04,0x70,0x40,
	0x10,0x60,0xf9,0x55,0x05,0xe1,0xd0,0x1c,
	0x70,0x00,0x10,0x20,0xf8,0x23,0x01,0x46,
	0x90,0x83,0x80,0x3f,0x90,0xc2,0x80,0x3f,
	0x00,0xc6,0x10,0xc5,0x00,0xff,0xdf,0xff,
	0x40,0xc0,0x10,0x96,0x00,0x20,0xd0,0x1f,
	0x40,0x80,0x50,0xc2,0xe0,0x2f,0x05,0x2e,
	0xd0,0x0c,0x70,0x40,0x10,0x56,0x00,0x20,
	0xd0,0x3f,0x40,0x40,0x05,0x2e,0xd0,0x10,
	0x70,0xc0,0x10,0xc5,0x50,0xc1,0x05,0xe0,
	0xd0,0x34,0x78,0x00,0x00,0x19,0xf8,0x3e,
	0x07,0x23,0xd0,0x2c,0x70,0x40,0x30,0x43,
	0xfc,0x3e,0x07,0x23,0xd0,0x28,0x70,0x40,
	0x30,0x43,0xed,0x55,0x05,0xe0,0xd0,0x34,
	0x78,0x00,0x00,0x19,0xf9,0x55,0x00,0x1b,
	0xf9,0x55,0x05,0xe0,0xd0,0x34,0x78,0x00,
	0x00,0x15,0xe9,0x55,0x07,0x23,0xd0,0x3c,
	0x75,0x40,0xd0,0x3f,0x45,0x40,0xe9,0x55,
	0xd0,0x7f,0x30,0x55,0xf8,0x56,0x07,0x23,
	0xd0,0x00,0x75,0x40,0xd5,0x83,0x15,0xa4,
	0xf8,0x5d,0x07,0x23,0x75,0x40,0xd5,0x83,
	0xe0,0x88,0x00,0x20,0xd0,0x64,0x30,0x55,
	0xf4,0x88,0x00,0x21,0xd0,0x40,0x35,0x41,
	0xf8,0x6c,0x07,0x23,0x75,0x48,0x15,0x60,
	0xf8,0x88,0x07,0x23,0x75,0x40,0xe0,0x88,
	0x15,0x61,0xf8,0x75,0x07,0x23,0x75,0x4c,
	0x15,0x60,0xf8,0x88,0x07,0x23,0x75,0x40,
	0xe0,0x88,0x15,0x62,0xf8,0x7e,0x07,0x23,
	0x75,0x50,0x15,0x60,0xf8,0x88,0x07,0x23,
	0x75,0x40,0xe0,0x88,0x15,0x63,0xf8,0x87,
	0x07,0x23,0x75,0x54,0x15,0x60,0xf8,0x88,
	0x07,0x23,0x75,0x40,0xe0,0x88,0xd5,0x41,
	0x07,0x23,0x65,0x40,0x00,0x61,0x65,0x7c,
	0x07,0x23,0x70,0x44,0xd0,0x80,0x10,0x61,
	0xe8,0x97,0x07,0x24,0x70,0xb0,0x10,0x84,
	0x10,0x62,0xe8,0x97,0x10,0x81,0x04,0xa3,
	0xd0,0x14,0x20,0x02,0xc2,0x95,0xb5,0x41,
	0x15,0x44,0x20,0x15,0x71,0x00,0xc0,0xc4,
	0x10,0xd8,0x10,0xd2,0xd0,0x43,0x40,0xc1,
	0xc1,0x84,0x11,0x94,0xc1,0xc4,0x00,0x2f,
	0xd0,0x7f,0x41,0xc1,0x41,0x81,0xb0,0x3c,
	0x71,0x40,0xb0,0x3c,0x07,0x23,0xd0,0x48,
	0x70,0x80,0x10,0xa0,0xf8,0xb4,0xc0,0x8a,
	0x10,0x98,0x60,0x81,0xb0,0x7c,0x70,0x80,
	0x10,0xa0,0xf8,0xbb,0xc0,0x8a,0x00,0x20,
	0xd8,0x3f,0x40,0xa0,0x60,0x81,0xb0,0x3c,
	0xb0,0x7c,0x70,0x80,0x10,0xa0,0xf8,0xc5,
	0xc0,0x8a,0x10,0x98,0x60,0x81,0xb0,0x7c,
	0x70,0x80,0x10,0xa0,0xf8,0xcc,0xc0,0x8a,
	0x00,0x20,0xd8,0x3f,0x40,0xa0,0x60,0x81,
	0x15,0xa5,0xe8,0xde,0xc0,0x45,0x10,0x58,
	0x10,0x52,0xd0,0x83,0x40,0x42,0x10,0x61,
	0xe8,0xf2,0x15,0xa1,0xe8,0xde,0x15,0xa3,
	0xe8,0xf2,0xe1,0x50,0x05,0xe0,0xd0,0x34,
	0x78,0x00,0x00,0x50,0xe8,0xe5,0xd1,0x01,
	0xe0,0xe9,0x11,0x16,0x11,0x14,0xd0,0x43,
	0x41,0x01,0x07,0x24,0xd0,0x00,0xb1,0x01,
	0x11,0x03,0x20,0x04,0x70,0xc0,0xb0,0x3c,
	0x72,0xc0,0xe1,0x0d,0x06,0xe5,0xd0,0x1c,
	0x01,0x46,0x78,0x00,0x04,0x53,0x68,0x00,
	0x06,0xe5,0xd0,0x20,0x62,0x80,0x00,0xc6,
	0x11,0x16,0x11,0x14,0xd0,0x43,0x41,0x01,
	0x07,0x24,0xd0,0x18,0xb1,0x01,0x11,0x03,
	0x20,0x04,0x70,0xc0,0xb0,0x3c,0x72,0xc0,
	0x05,0xe0,0xd0,0x34,0x78,0x00,0x04,0x1b,
	0x68,0x00,0xc2,0x05,0x12,0x14,0xc2,0x45,
	0x00,0x2f,0xd0,0x3f,0x42,0x40,0x03,0xd1,
	0xe9,0x17,0xb1,0xb6,0xb1,0xf6,0x02,0x20,
	0xd0,0x40,0x52,0x41,0x05,0xaf,0xd0,0x18,
	0x73,0x00,0x00,0x06,0xb0,0x3c,0x73,0x40,
	0x00,0x06,0xb1,0xff,0x0f,0xef,0xd0,0x7f,
	0x00,0xef,0xd0,0xbf,0x01,0x46,0x00,0x65,
	0xd0,0x0a,0xa0,0x36,0x80,0x3f,0xa2,0x34,
	0xa2,0x74,0xa1,0xb4,0xa0,0xf4,0xa2,0xf4,
	0xa1,0xf4,0xa3,0x34,0xa3,0x74,0xa0,0xb4,
	0xa0,0x74,0x80,0x3f,0x00,0xc6,0x04,0xa2,
	0xd0,0xbc,0x00,0xe5,0xd0,0x0a,0x01,0x46,
	0xa0,0x36,0x80,0x3f,0x04,0x0b,0x6d,0x02,
	0x00,0x06,0x00,0xc6,0x04,0xa2,0xd0,0x7c,
	0x05,0xaf,0xd0,0x34,0x60,0x40,0xe1,0x54,
	0xc0,0x00,0x00,0x00,0xc0,0x00,0xc0,0x00,
	0xc0,0x00,0xc0,0x00,0xc0,0x00,0xc0,0x00,
	0xd0,0x40,0x05,0xaf,0xd0,0x34,0x60,0x40,
	0xe1,0x55,0x00,0xa1,0xd0,0x50,0xd0,0x12,
	0x00,0x60,0xd7,0xc0,0x00,0x05,0x00,0x00,
	0x02,0xd0,0x10,0x00,0x00,0x00,0x80,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x11,0xdf,
	0x00,0x01,0xc6,0x44,0x00,0x03,0xde,0x03,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x07,0xef,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbe,0x08,
	0x01,0x68,0x1c,0x01,0x00,0x02,0x40,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xe8,
	0x00,0x01,0x2a,0x95,0x00,0x03,0xd0,0x03,
	0x00,0x00,0x11,0xdf,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xde,0x03,0x00,0x00,0x07,0xef,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0xef,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbe,0x08,0x00,0x00,0x00,0x03,
	0x00,0x03,0xca,0xe2,0x00,0x00,0x81,0xf6,
	0x02,0x1c,0x34,0x02,0x00,0x06,0x60,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xf5,
	0x00,0x00,0x80,0xe0,0x00,0x03,0xce,0x03,
	0x00,0x00,0x07,0xe8,0x00,0x01,0x2a,0x95,
	0x00,0x03,0xd0,0x03,0x00,0x00,0x07,0xe7,
	0x00,0x01,0xc0,0x40,0x00,0x03,0xea,0x01,
	0x00,0x00,0x11,0xdf,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xde,0x03,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0xef,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbe,0x08,0x00,0x00,0x11,0xde,
	0x00,0x01,0x34,0x9a,0x00,0x03,0xbc,0x08,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x00,0x04,
	0x00,0x03,0xca,0xe2,0x00,0x00,0x81,0xf5,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xef,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x07,0xef,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbe,0x08,0x00,0x00,0x00,0x00,
	0x00,0x03,0xd2,0x97,0x00,0x01,0x2f,0xe9,
	0x00,0x00,0x00,0x04,0x00,0x03,0xca,0xe2,
	0x00,0x00,0x81,0xf5,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x02,0xd0,0x28,0x03,0x00,0x04,0xaa,0xab,
	0x00,0x03,0xe0,0x2f,0x00,0x01,0x84,0x2f,
	0x00,0x03,0xe0,0x00,0x00,0x03,0xf0,0x00,
	0x00,0x01,0x54,0x71,0x00,0x03,0xda,0x00,
	0x00,0x00,0x01,0xed,0x00,0x00,0xe2,0xaa,
	0x00,0x00,0x01,0xf8,0x00,0x03,0xec,0x09,
	0x00,0x01,0x68,0x60,0x00,0x03,0xd8,0x01,
	0x00,0x03,0xff,0xef,0x00,0x01,0x00,0x9e,
	0x00,0x03,0xf3,0xfb,0x00,0x00,0x05,0xed,
	0x00,0x00,0x7e,0xbf,0x00,0x00,0x45,0xf1,
	0x00,0x03,0xfb,0xf3,0x00,0x01,0x20,0x90,
	0x00,0x03,0xe7,0xfd,0x00,0x00,0x05,0xec,
	0x00,0x00,0x9e,0xbb,0x00,0x00,0x29,0xf4,
	0x00,0x00,0x01,0xfd,0x00,0x00,0x1e,0xb9,
	0x00,0x00,0x87,0xf8,0x00,0x00,0x03,0xec,
	0x00,0x00,0xc0,0xb4,0x00,0x00,0x13,0xf6,
	0x00,0x00,0x01,0xfc,0x00,0x00,0x32,0xbe,
	0x00,0x00,0x69,0xf9,0x00,0x00,0x01,0xff,
	0x00,0x03,0xf8,0x97,0x00,0x00,0xef,0xf7,
	0x01,0xe0,0x28,0x04,0x00,0x04,0x55,0x56,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x05,0xf0,
	0x00,0x00,0xb8,0xca,0x00,0x03,0xca,0x03,
	0x00,0x00,0x07,0xe5,0x00,0x01,0x94,0x5c,
	0x00,0x03,0xe0,0x02,0x00,0x00,0x11,0xdf,
	0x00,0x01,0xc6,0x44,0x00,0x03,0xde,0x03,
	0x00,0x00,0x05,0xfa,0x00,0x00,0x28,0xfb,
	0x00,0x03,0xe0,0x05,0x00,0x00,0x00,0x02,
	0x00,0x03,0xda,0x79,0x00,0x01,0x65,0xe6,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd4,0xf2,0x00,0x00,0x4d,0xfa,
	0x00,0x00,0x05,0xf5,0x00,0x00,0x54,0xf3,
	0x00,0x03,0xcc,0x06,0x00,0x00,0x07,0xef,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x00,0x03,0x00,0x03,0xca,0xb3,
	0x00,0x00,0xf3,0xec,0x00,0x00,0x00,0x01,
	0x00,0x03,0xe6,0xfd,0x00,0x00,0x23,0xfe,
	0x01,0x20,0x40,0x05,0x00,0x08,0x33,0x34,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xe4,
	0x00,0x01,0x70,0x73,0x00,0x03,0xda,0x01,
	0x00,0x00,0x03,0xf8,0x00,0x00,0x60,0xec,
	0x00,0x03,0xd0,0x03,0x00,0x00,0x07,0xe8,
	0x00,0x01,0xd8,0x30,0x00,0x03,0xf0,0x01,
	0x00,0x00,0x03,0xed,0x00,0x00,0xe6,0xb8,
	0x00,0x03,0xc8,0x03,0x00,0x00,0x11,0xdf,
	0x00,0x01,0xc6,0x44,0x00,0x03,0xde,0x03,
	0x00,0x00,0x0b,0xe7,0x00,0x00,0xcc,0xca,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x00,0x01,
	0x00,0x03,0xf0,0xff,0x00,0x00,0x13,0xff,
	0x00,0x00,0x11,0xdc,0x00,0x01,0x56,0x89,
	0x00,0x03,0xc2,0x07,0x00,0x00,0x03,0xf7,
	0x00,0x00,0x4a,0xf5,0x00,0x03,0xd0,0x06,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x03,0xfa,
	0x00,0x00,0x2e,0xfb,0x00,0x03,0xde,0x04,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc8,0xd6,
	0x00,0x00,0xa1,0xf3,0x00,0x00,0x09,0xeb,
	0x00,0x00,0xaa,0xd7,0x00,0x03,0xb8,0x09,
	0x00,0x00,0x00,0x02,0x00,0x03,0xe2,0xfb,
	0x00,0x00,0x2b,0xfd,0x00,0x00,0x07,0xef,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x00,0x02,0x00,0x03,0xd8,0xf5,
	0x00,0x00,0x45,0xfb,0x00,0x00,0x00,0x02,
	0x00,0x03,0xd6,0x85,0x00,0x01,0x4f,0xe7,
	0x00,0x00,0x01,0xfe,0x00,0x00,0x16,0xfe,
	0x00,0x03,0xee,0x02,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc8,0xc8,0x00,0x00,0xc3,0xf0,
	0x01,0xb0,0x40,0x06,0x00,0x08,0x4c,0xcd,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xed,
	0x00,0x00,0xe6,0xb8,0x00,0x03,0xc8,0x03,
	0x00,0x00,0x07,0xe8,0x00,0x01,0xd8,0x30,
	0x00,0x03,0xf0,0x01,0x00,0x00,0x03,0xf8,
	0x00,0x00,0x60,0xec,0x00,0x03,0xd0,0x03,
	0x00,0x00,0x07,0xe4,0x00,0x01,0x70,0x73,
	0x00,0x03,0xda,0x01,0x00,0x00,0x11,0xdf,
	0x00,0x01,0xc6,0x44,0x00,0x03,0xde,0x03,
	0x00,0x00,0x03,0xf7,0x00,0x00,0x4a,0xf5,
	0x00,0x03,0xd0,0x06,0x00,0x00,0x11,0xdc,
	0x00,0x01,0x56,0x89,0x00,0x03,0xc2,0x07,
	0x00,0x00,0x00,0x01,0x00,0x03,0xf0,0xff,
	0x00,0x00,0x13,0xff,0x00,0x00,0x0b,0xe7,
	0x00,0x00,0xcc,0xca,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x00,0x02,
	0x00,0x03,0xe2,0xfb,0x00,0x00,0x2b,0xfd,
	0x00,0x00,0x09,0xeb,0x00,0x00,0xaa,0xd7,
	0x00,0x03,0xb8,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc8,0xd6,0x00,0x00,0xa1,0xf3,
	0x00,0x00,0x03,0xfa,0x00,0x00,0x2e,0xfb,
	0x00,0x03,0xde,0x04,0x00,0x00,0x07,0xef,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc8,0xc7,
	0x00,0x00,0xc5,0xf0,0x00,0x00,0x01,0xfe,
	0x00,0x00,0x16,0xfe,0x00,0x03,0xee,0x02,
	0x00,0x00,0x00,0x02,0x00,0x03,0xd4,0x86,
	0x00,0x01,0x51,0xe6,0x00,0x00,0x00,0x02,
	0x00,0x03,0xd8,0xf5,0x00,0x00,0x45,0xfb,
	0x01,0x10,0x64,0x07,0x00,0x0e,0x30,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xe4,
	0x00,0x01,0x80,0x6a,0x00,0x03,0xdc,0x01,
	0x00,0x00,0x03,0xf5,0x00,0x00,0x80,0xe2,
	0x00,0x03,0xca,0x03,0x00,0x00,0x05,0xee,
	0x00,0x01,0xf2,0x1b,0x00,0x03,0xf8,0x00,
	0x00,0x00,0x05,0xe8,0x00,0x01,0x2c,0x96,
	0x00,0x03,0xd0,0x02,0x00,0x00,0x01,0xfc,
	0x00,0x00,0x36,0xf9,0x00,0x03,0xdc,0x02,
	0x00,0x00,0x07,0xe5,0x00,0x01,0xc4,0x40,
	0x00,0x03,0xea,0x01,0x00,0x00,0x03,0xee,
	0x00,0x00,0xd4,0xc0,0x00,0x03,0xc8,0x03,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x0d,0xe5,
	0x00,0x00,0xde,0xc3,0x00,0x03,0xb4,0x09,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x13,0xda,
	0x00,0x01,0x86,0x6f,0x00,0x03,0xca,0x06,
	0x00,0x00,0x07,0xef,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbe,0x08,0x00,0x00,0x00,0x03,
	0x00,0x03,0xdc,0xf8,0x00,0x00,0x39,0xfb,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x05,0xf8,
	0x00,0x00,0x3e,0xf7,0x00,0x03,0xd4,0x06,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x05,0xf8,
	0x00,0x00,0x3e,0xf7,0x00,0x03,0xd4,0x06,
	0x00,0x00,0x00,0x04,0x00,0x03,0xca,0xe2,
	0x00,0x00,0x81,0xf5,0x00,0x00,0x0d,0xe5,
	0x00,0x00,0xde,0xc3,0x00,0x03,0xb4,0x09,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc6,0xc1,0x00,0x00,0xd7,0xee,
	0x00,0x00,0x07,0xef,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbe,0x08,0x00,0x00,0x00,0x03,
	0x00,0x03,0xdc,0xf8,0x00,0x00,0x39,0xfb,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xdc,0xf8,0x00,0x00,0x39,0xfb,
	0x00,0x00,0x11,0xde,0x00,0x01,0x34,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x05,0xf8,
	0x00,0x00,0x3e,0xf7,0x00,0x03,0xd4,0x06,
	0x00,0x00,0x00,0x04,0x00,0x03,0xca,0xe2,
	0x00,0x00,0x81,0xf5,0x00,0x00,0x00,0x02,
	0x00,0x03,0xdc,0x6b,0x00,0x01,0x83,0xe4,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc6,0xc1,0x00,0x00,0xd7,0xee,
	0x00,0xd8,0x7c,0x08,0x00,0x12,0x26,0x67,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xe4,
	0x00,0x01,0xac,0x4f,0x00,0x03,0xe6,0x01,
	0x00,0x00,0x03,0xed,0x00,0x00,0xe6,0xb8,
	0x00,0x03,0xc8,0x03,0x00,0x00,0x01,0xfd,
	0x00,0x00,0x2a,0xfb,0x00,0x03,0xe2,0x02,
	0x00,0x00,0x07,0xe8,0x00,0x01,0xda,0x30,
	0x00,0x03,0xf0,0x00,0x00,0x00,0x05,0xe8,
	0x00,0x01,0x2c,0x96,0x00,0x03,0xd0,0x02,
	0x00,0x00,0x01,0xf8,0x00,0x00,0x60,0xed,
	0x00,0x03,0xd0,0x03,0x00,0x00,0x05,0xf1,
	0x00,0x01,0xf6,0x15,0x00,0x03,0xfa,0x00,
	0x00,0x00,0x07,0xe4,0x00,0x01,0x70,0x73,
	0x00,0x03,0xda,0x01,0x00,0x00,0x03,0xf3,
	0x00,0x00,0x9e,0xd6,0x00,0x03,0xc8,0x03,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x0f,0xe0,
	0x00,0x01,0x12,0xab,0x00,0x03,0xb8,0x09,
	0x00,0x00,0x05,0xf6,0x00,0x00,0x4c,0xf5,
	0x00,0x03,0xce,0x06,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd6,0xf6,0x00,0x00,0x45,0xfa,
	0x00,0x00,0x13,0xdc,0x00,0x01,0x56,0x89,
	0x00,0x03,0xc0,0x07,0x00,0x00,0x09,0xee,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbc,0x09,
	0x00,0x00,0x00,0x01,0x00,0x03,0xf0,0xff,
	0x00,0x00,0x15,0xfe,0x00,0x00,0x13,0xdb,
	0x00,0x01,0x94,0x66,0x00,0x03,0xce,0x05,
	0x00,0x00,0x0b,0xe7,0x00,0x00,0xcc,0xca,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x03,0xfd,
	0x00,0x00,0x16,0xfe,0x00,0x03,0xec,0x03,
	0x00,0x00,0x11,0xdd,0x00,0x01,0x36,0x9b,
	0x00,0x03,0xba,0x08,0x00,0x00,0x07,0xf2,
	0x00,0x00,0x68,0xed,0x00,0x03,0xc4,0x08,
	0x00,0x00,0x00,0x02,0x00,0x03,0xe2,0xfc,
	0x00,0x00,0x2b,0xfc,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc8,0xb9,0x00,0x00,0xe9,0xec,
	0x00,0x00,0x0b,0xeb,0x00,0x00,0xaa,0xd7,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc6,0xd6,
	0x00,0x00,0xa3,0xf2,0x00,0x00,0x0d,0xe3,
	0x00,0x00,0xf0,0xbb,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x03,0xfa,0x00,0x00,0x30,0xfa,
	0x00,0x03,0xdc,0x05,0x00,0x00,0x00,0x03,
	0x00,0x03,0xce,0xed,0x00,0x00,0x63,0xf8,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x01,
	0x00,0x03,0xf0,0xff,0x00,0x00,0x15,0xfe,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc6,0xc8,
	0x00,0x00,0xc5,0xef,0x00,0x00,0x00,0x00,
	0x00,0x03,0xf4,0x56,0x00,0x01,0x81,0xf0,
	0x00,0x00,0x03,0xfd,0x00,0x00,0x16,0xfe,
	0x00,0x03,0xec,0x03,0x00,0x00,0x00,0x04,
	0x00,0x03,0xca,0xe2,0x00,0x00,0x81,0xf5,
	0x00,0x00,0x00,0x02,0x00,0x03,0xd4,0x86,
	0x00,0x01,0x53,0xe5,0x00,0x00,0x05,0xf6,
	0x00,0x00,0x4c,0xf5,0x00,0x03,0xce,0x06,
	0x00,0x00,0x00,0x03,0x00,0x03,0xd6,0xf5,
	0x00,0x00,0x45,0xfa,0x00,0x00,0x00,0x03,
	0x00,0x03,0xca,0xa8,0x00,0x01,0x0d,0xea,
	0x00,0x00,0x00,0x00,0x02,0x40,0x40,0x09,
	0x00,0x08,0x66,0x67,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x03,0xf8,0x00,0x00,0x60,0xec,
	0x00,0x03,0xd0,0x03,0x00,0x00,0x03,0xed,
	0x00,0x00,0xe6,0xb8,0x00,0x03,0xc8,0x03,
	0x00,0x00,0x07,0xe4,0x00,0x01,0x70,0x73,
	0x00,0x03,0xda,0x01,0x00,0x00,0x07,0xe8,
	0x00,0x01,0xd8,0x30,0x00,0x03,0xf0,0x01,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x00,0x01,
	0x00,0x03,0xf0,0xff,0x00,0x00,0x15,0xfe,
	0x00,0x00,0x05,0xf6,0x00,0x00,0x4c,0xf5,
	0x00,0x03,0xce,0x06,0x00,0x00,0x0b,0xe7,
	0x00,0x00,0xcc,0xcb,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x13,0xdc,0x00,0x01,0x56,0x89,
	0x00,0x03,0xc0,0x07,0x00,0x00,0x11,0xdd,
	0x00,0x01,0x36,0x9b,0x00,0x03,0xba,0x08,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc6,0xd6,
	0x00,0x00,0xa3,0xf2,0x00,0x00,0x00,0x02,
	0x00,0x03,0xe2,0xfc,0x00,0x00,0x2b,0xfc,
	0x00,0x00,0x03,0xfa,0x00,0x00,0x30,0xfc,
	0x00,0x03,0xdc,0x05,0x00,0x00,0x0b,0xeb,
	0x00,0x00,0xaa,0xd7,0x00,0x03,0xb8,0x08,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x02,
	0x00,0x03,0xd4,0x86,0x00,0x01,0x53,0xe5,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc6,0xc8,
	0x00,0x00,0xc5,0xef,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd6,0xf6,0x00,0x00,0x45,0xfa,
	0x00,0x00,0x03,0xfd,0x00,0x00,0x16,0xfe,
	0x00,0x03,0xec,0x03,0x01,0x47,0x88,0x0a,
	0x00,0x14,0x3a,0x2f,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x05,0xe6,0x00,0x01,0x4c,0x86,
	0x00,0x03,0xd4,0x02,0x00,0x00,0x03,0xfd,
	0x00,0x00,0x28,0xfa,0x00,0x03,0xe4,0x02,
	0x00,0x00,0x07,0xe4,0x00,0x01,0x86,0x66,
	0x00,0x03,0xde,0x01,0x00,0x00,0x03,0xf9,
	0x00,0x00,0x58,0xee,0x00,0x03,0xd2,0x03,
	0x00,0x00,0x07,0xe5,0x00,0x01,0xb8,0x47,
	0x00,0x03,0xe8,0x01,0x00,0x00,0x03,0xf4,
	0x00,0x00,0x8e,0xdc,0x00,0x03,0xc6,0x03,
	0x00,0x00,0x07,0xe9,0x00,0x01,0xdc,0x2c,
	0x00,0x03,0xf2,0x01,0x00,0x00,0x03,0xef,
	0x00,0x00,0xcc,0xc3,0x00,0x03,0xc8,0x03,
	0x00,0x00,0x05,0xf2,0x00,0x01,0xf4,0x14,
	0x00,0x03,0xfa,0x01,0x00,0x00,0x05,0xea,
	0x00,0x01,0x0c,0xa6,0x00,0x03,0xcc,0x02,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x09,0xeb,
	0x00,0x00,0xa8,0xd8,0x00,0x03,0xb8,0x09,
	0x00,0x00,0x00,0x03,0x00,0x03,0xd6,0xf3,
	0x00,0x00,0x4b,0xfa,0x00,0x00,0x0d,0xe4,
	0x00,0x00,0xe8,0xbf,0x00,0x03,0xb4,0x09,
	0x00,0x00,0x00,0x02,0x00,0x03,0xea,0xfe,
	0x00,0x00,0x1b,0xfe,0x00,0x00,0x11,0xde,
	0x00,0x01,0x28,0xa1,0x00,0x03,0xba,0x08,
	0x00,0x00,0x01,0xff,0x00,0x00,0x0c,0xff,
	0x00,0x03,0xf6,0x01,0x00,0x00,0x13,0xdb,
	0x00,0x01,0x64,0x82,0x00,0x03,0xc2,0x07,
	0x00,0x00,0x03,0xf8,0x00,0x00,0x3a,0xfa,
	0x00,0x03,0xd6,0x05,0x00,0x00,0x13,0xdb,
	0x00,0x01,0x9c,0x61,0x00,0x03,0xd0,0x05,
	0x00,0x00,0x07,0xf2,0x00,0x00,0x6e,0xeb,
	0x00,0x03,0xc2,0x08,0x00,0x00,0x11,0xdd,
	0x00,0x01,0x36,0x9b,0x00,0x03,0xba,0x08,
	0x00,0x00,0x01,0xfd,0x00,0x00,0x16,0xff,
	0x00,0x03,0xee,0x02,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc8,0xb6,0x00,0x00,0xef,0xec,
	0x00,0x00,0x05,0xf7,0x00,0x00,0x44,0xf6,
	0x00,0x03,0xd2,0x06,0x00,0x00,0x00,0x04,
	0x00,0x03,0xc6,0xd1,0x00,0x00,0xaf,0xf1,
	0x00,0x00,0x07,0xf0,0x00,0x00,0x7c,0xe7,
	0x00,0x03,0xc0,0x08,0x00,0x00,0x00,0x04,
	0x00,0x03,0xcc,0xe8,0x00,0x00,0x71,0xf6,
	0x00,0x00,0x0b,0xe9,0x00,0x00,0xba,0xd1,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xda,0xf7,0x00,0x00,0x3d,0xfb,
	0x00,0x00,0x0f,0xe2,0x00,0x00,0xf8,0xb7,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x00,0x01,
	0x00,0x03,0xf2,0xff,0x00,0x00,0x11,0xff,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xce,0xed,0x00,0x00,0x65,0xf7,
	0x00,0x00,0x00,0x01,0x00,0x03,0xe0,0x60,
	0x00,0x01,0x97,0xe4,0x00,0x00,0x00,0x02,
	0x00,0x03,0xde,0xfb,0x00,0x00,0x31,0xfc,
	0x00,0x00,0x00,0x02,0x00,0x03,0xd4,0x80,
	0x00,0x01,0x5d,0xe6,0x00,0x00,0x00,0x01,
	0x00,0x03,0xf8,0xff,0x00,0x00,0x09,0xff,
	0x00,0x00,0x00,0x03,0x00,0x03,0xcc,0xa0,
	0x00,0x01,0x1d,0xe9,0x00,0x00,0x03,0xfc,
	0x00,0x00,0x20,0xfd,0x00,0x03,0xe4,0x04,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc6,0xbf,
	0x00,0x00,0xdd,0xed,0x00,0x00,0x05,0xf5,
	0x00,0x00,0x52,0xf3,0x00,0x03,0xcc,0x07,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc8,0xd8,
	0x00,0x00,0x9b,0xf3,0x02,0x80,0x70,0x0b,
	0x00,0x10,0x71,0xc8,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x03,0xfd,0x00,0x00,0x2e,0xf9,
	0x00,0x03,0xe0,0x02,0x00,0x00,0x03,0xf7,
	0x00,0x00,0x6c,0xe8,0x00,0x03,0xce,0x03,
	0x00,0x00,0x03,0xf1,0x00,0x00,0xb4,0xcd,
	0x00,0x03,0xc8,0x03,0x00,0x00,0x05,0xeb,
	0x00,0x01,0x02,0xaa,0x00,0x03,0xca,0x03,
	0x00,0x00,0x07,0xe5,0x00,0x01,0x54,0x81,
	0x00,0x03,0xd6,0x02,0x00,0x00,0x07,0xe4,
	0x00,0x01,0x9a,0x5a,0x00,0x03,0xe2,0x01,
	0x00,0x00,0x07,0xe7,0x00,0x01,0xd0,0x36,
	0x00,0x03,0xee,0x01,0x00,0x00,0x05,0xf0,
	0x00,0x01,0xf2,0x17,0x00,0x03,0xfa,0x01,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd8,0xf7,0x00,0x00,0x3f,0xfb,
	0x00,0x00,0x00,0x01,0x00,0x03,0xf6,0xff,
	0x00,0x00,0x0b,0xff,0x00,0x00,0x03,0xfb,
	0x00,0x00,0x28,0xfc,0x00,0x03,0xe0,0x04,
	0x00,0x00,0x07,0xf3,0x00,0x00,0x66,0xed,
	0x00,0x03,0xc4,0x08,0x00,0x00,0x0b,0xea,
	0x00,0x00,0xb2,0xd4,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x0f,0xe2,0x00,0x00,0xfe,0xb4,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x11,0xdc,
	0x00,0x01,0x4c,0x8f,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x13,0xdb,0x00,0x01,0x92,0x67,
	0x00,0x03,0xcc,0x06,0x00,0x00,0x11,0xdd,
	0x00,0x01,0x36,0x9b,0x00,0x03,0xba,0x08,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc8,0xbc,
	0x00,0x00,0xe1,0xed,0x00,0x00,0x00,0x04,
	0x00,0x03,0xc8,0xdc,0x00,0x00,0x93,0xf3,
	0x00,0x00,0x00,0x03,0x00,0x03,0xd4,0xf3,
	0x00,0x00,0x4d,0xfa,0x00,0x00,0x00,0x01,
	0x00,0x03,0xee,0xff,0x00,0x00,0x17,0xfe,
	0x00,0x00,0x03,0xfc,0x00,0x00,0x1c,0xfe,
	0x00,0x03,0xe8,0x03,0x00,0x00,0x05,0xf5,
	0x00,0x00,0x58,0xf1,0x00,0x03,0xca,0x07,
	0x00,0x00,0x09,0xec,0x00,0x00,0xa0,0xdb,
	0x00,0x03,0xb8,0x09,0x00,0x00,0x0d,0xe3,
	0x00,0x00,0xee,0xbc,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x01,
	0x00,0x03,0xde,0x67,0x00,0x01,0x8b,0xe4,
	0x00,0x00,0x00,0x02,0x00,0x03,0xd2,0x8e,
	0x00,0x01,0x41,0xe7,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc8,0xb5,0x00,0x00,0xf3,0xeb,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc6,0xd6,
	0x00,0x00,0xa3,0xf2,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd0,0xef,0x00,0x00,0x5d,0xf8,
	0x00,0x00,0x00,0x02,0x00,0x03,0xe8,0xfd,
	0x00,0x00,0x21,0xfd,0x00,0x00,0x01,0xfe,
	0x00,0x00,0x10,0xff,0x00,0x03,0xf2,0x02,
	0x00,0x00,0x05,0xf6,0x00,0x00,0x4a,0xf5,
	0x00,0x03,0xd0,0x06,0x01,0x80,0xb8,0x0c,
	0x00,0x1c,0x44,0x45,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x05,0xe9,0x00,0x01,0x16,0xa2,
	0x00,0x03,0xcc,0x02,0x00,0x00,0x03,0xf6,
	0x00,0x01,0xfc,0x0d,0x00,0x03,0xfc,0x00,
	0x00,0x00,0x03,0xed,0x00,0x00,0xe6,0xb8,
	0x00,0x03,0xc8,0x03,0x00,0x00,0x05,0xee,
	0x00,0x01,0xee,0x1d,0x00,0x03,0xf8,0x00,
	0x00,0x00,0x03,0xf1,0x00,0x00,0xb6,0xcc,
	0x00,0x03,0xc8,0x03,0x00,0x00,0x07,0xe8,
	0x00,0x01,0xd8,0x30,0x00,0x03,0xf0,0x01,
	0x00,0x00,0x01,0xf5,0x00,0x00,0x8a,0xde,
	0x00,0x03,0xca,0x03,0x00,0x00,0x07,0xe5,
	0x00,0x01,0xbc,0x45,0x00,0x03,0xea,0x00,
	0x00,0x00,0x03,0xf8,0x00,0x00,0x60,0xec,
	0x00,0x03,0xd0,0x03,0x00,0x00,0x07,0xe4,
	0x00,0x01,0x98,0x5b,0x00,0x03,0xe2,0x01,
	0x00,0x00,0x01,0xfc,0x00,0x00,0x3a,0xf7,
	0x00,0x03,0xdc,0x02,0x00,0x00,0x07,0xe4,
	0x00,0x01,0x70,0x73,0x00,0x03,0xda,0x01,
	0x00,0x00,0x01,0xfe,0x00,0x00,0x1a,0xfe,
	0x00,0x03,0xec,0x01,0x00,0x00,0x05,0xe6,
	0x00,0x01,0x44,0x8b,0x00,0x03,0xd2,0x02,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x07,0xf1,
	0x00,0x00,0x74,0xea,0x00,0x03,0xc0,0x08,
	0x00,0x00,0x13,0xdb,0x00,0x01,0xa6,0x5b,
	0x00,0x03,0xd2,0x05,0x00,0x00,0x05,0xf6,
	0x00,0x00,0x4c,0xf5,0x00,0x03,0xce,0x06,
	0x00,0x00,0x13,0xda,0x00,0x01,0x82,0x72,
	0x00,0x03,0xc8,0x06,0x00,0x00,0x03,0xfb,
	0x00,0x00,0x28,0xfc,0x00,0x03,0xe0,0x04,
	0x00,0x00,0x13,0xdc,0x00,0x01,0x58,0x88,
	0x00,0x03,0xc0,0x07,0x00,0x00,0x01,0xff,
	0x00,0x00,0x0a,0xff,0x00,0x03,0xf8,0x01,
	0x00,0x00,0x11,0xde,0x00,0x01,0x2c,0x9f,
	0x00,0x03,0xba,0x08,0x00,0x00,0x00,0x01,
	0x00,0x03,0xf0,0xff,0x00,0x00,0x15,0xfe,
	0x00,0x00,0x0f,0xe2,0x00,0x00,0xfe,0xb5,
	0x00,0x03,0xb4,0x09,0x00,0x00,0x00,0x02,
	0x00,0x03,0xde,0xfa,0x00,0x00,0x33,0xfc,
	0x00,0x00,0x0d,0xe6,0x00,0x00,0xce,0xc9,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd2,0xf1,0x00,0x00,0x55,0xf9,
	0x00,0x00,0x09,0xeb,0x00,0x00,0xa4,0xda,
	0x00,0x03,0xb8,0x09,0x00,0x00,0x11,0xdd,
	0x00,0x01,0x36,0x9b,0x00,0x03,0xba,0x08,
	0x00,0x00,0x00,0x01,0x00,0x03,0xf4,0xff,
	0x00,0x00,0x0f,0xff,0x00,0x00,0x0f,0xe1,
	0x00,0x01,0x08,0xb0,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x00,0x02,0x00,0x03,0xe2,0xfc,
	0x00,0x00,0x2b,0xfc,0x00,0x00,0x0d,0xe5,
	0x00,0x00,0xda,0xc5,0x00,0x03,0xb4,0x09,
	0x00,0x00,0x00,0x03,0x00,0x03,0xd4,0xf4,
	0x00,0x00,0x4d,0xf9,0x00,0x00,0x0b,0xea,
	0x00,0x00,0xaa,0xd7,0x00,0x03,0xb8,0x09,
	0x00,0x00,0x00,0x04,0x00,0x03,0xcc,0xe6,
	0x00,0x00,0x75,0xf6,0x00,0x00,0x07,0xf0,
	0x00,0x00,0x80,0xe6,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc6,0xd7,
	0x00,0x00,0xa1,0xf2,0x00,0x00,0x05,0xf5,
	0x00,0x00,0x56,0xf2,0x00,0x03,0xca,0x07,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc6,0xc5,
	0x00,0x00,0xcf,0xee,0x00,0x00,0x03,0xf9,
	0x00,0x00,0x32,0xfb,0x00,0x03,0xda,0x05,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc8,0xb0,
	0x00,0x00,0xfd,0xeb,0x00,0x00,0x01,0xfe,
	0x00,0x00,0x12,0xff,0x00,0x03,0xf0,0x02,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x04,
	0x00,0x03,0xc8,0xda,0x00,0x00,0x97,0xf3,
	0x00,0x00,0x05,0xf4,0x00,0x00,0x60,0xf0,
	0x00,0x03,0xc6,0x07,0x00,0x00,0x00,0x04,
	0x00,0x03,0xc6,0xc8,0x00,0x00,0xc5,0xef,
	0x00,0x00,0x03,0xf8,0x00,0x00,0x3a,0xfa,
	0x00,0x03,0xd6,0x05,0x00,0x00,0x00,0x03,
	0x00,0x03,0xc8,0xb4,0x00,0x00,0xf3,0xec,
	0x00,0x00,0x03,0xfd,0x00,0x00,0x16,0xfe,
	0x00,0x03,0xec,0x03,0x00,0x00,0x00,0x03,
	0x00,0x03,0xcc,0x9e,0x00,0x01,0x23,0xe8,
	0x00,0x00,0x00,0x00,0x00,0x03,0xfa,0xff,
	0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x02,
	0x00,0x03,0xd2,0x87,0x00,0x01,0x51,0xe6,
	0x00,0x00,0x00,0x02,0x00,0x03,0xe6,0xfd,
	0x00,0x00,0x23,0xfd,0x00,0x00,0x00,0x02,
	0x00,0x03,0xdc,0x6f,0x00,0x01,0x7b,0xe4,
	0x00,0x00,0x00,0x03,0x00,0x03,0xd8,0xf6,
	0x00,0x00,0x43,0xfa,0x00,0x00,0x00,0x01,
	0x00,0x03,0xe4,0x58,0x00,0x01,0xa3,0xe4,
	0x00,0x00,0x00,0x03,0x00,0x03,0xce,0xeb,
	0x00,0x00,0x69,0xf7,0x00,0x00,0x00,0x00,
	0x01,0x95,0xc4,0x11,0x00,0x1e,0x48,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x05,0xeb,
	0x00,0x01,0x00,0xab,0x00,0x03,0xca,0x03,
	0x00,0x00,0x05,0xee,0x00,0x01,0xf0,0x1c,
	0x00,0x03,0xf8,0x00,0x00,0x00,0x03,0xf2,
	0x00,0x00,0xaa,0xd1,0x00,0x03,0xc8,0x03,
	0x00,0x00,0x07,0xe5,0x00,0x01,0xc4,0x40,
	0x00,0x03,0xec,0x00,0x00,0x00,0x01,0xf9,
	0x00,0x00,0x5a,0xee,0x00,0x03,0xd2,0x03,
	0x00,0x00,0x07,0xe4,0x00,0x01,0x80,0x6a,
	0x00,0x03,0xdc,0x01,0x00,0x00,0x01,0xfe,
	0x00,0x00,0x1a,0xfe,0x00,0x03,0xec,0x01,
	0x00,0x00,0x05,0xe8,0x00,0x01,0x2c,0x96,
	0x00,0x03,0xd0,0x02,0x00,0x00,0x03,0xf6,
	0x00,0x01,0xfc,0x0d,0x00,0x03,0xfc,0x00,
	0x00,0x00,0x03,0xee,0x00,0x00,0xd4,0xc0,
	0x00,0x03,0xc8,0x03,0x00,0x00,0x07,0xe9,
	0x00,0x01,0xdc,0x2d,0x00,0x03,0xf2,0x00,
	0x00,0x00,0x01,0xf6,0x00,0x00,0x80,0xe2,
	0x00,0x03,0xca,0x03,0x00,0x00,0x07,0xe4,
	0x00,0x01,0xa2,0x55,0x00,0x03,0xe4,0x01,
	0x00,0x00,0x01,0xfc,0x00,0x00,0x38,0xf8,
	0x00,0x03,0xdc,0x02,0x00,0x00,0x07,0xe5,
	0x00,0x01,0x56,0x80,0x00,0x03,0xd6,0x02,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x07,0xf3,
	0x00,0x00,0x62,0xef,0x00,0x03,0xc6,0x07,
	0x00,0x00,0x13,0xda,0x00,0x01,0x86,0x6f,
	0x00,0x03,0xca,0x06,0x00,0x00,0x03,0xfc,
	0x00,0x00,0x1e,0xfd,0x00,0x03,0xe8,0x03,
	0x00,0x00,0x11,0xdd,0x00,0x01,0x36,0x9a,
	0x00,0x03,0xbc,0x08,0x00,0x00,0x00,0x02,
	0x00,0x03,0xec,0xfe,0x00,0x00,0x19,0xfe,
	0x00,0x00,0x0d,0xe5,0x00,0x00,0xe0,0xc2,
	0x00,0x03,0xb4,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd2,0xef,0x00,0x00,0x59,0xf9,
	0x00,0x00,0x09,0xee,0x00,0x00,0x8a,0xe2,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x13,0xdb,
	0x00,0x01,0xaa,0x58,0x00,0x03,0xd4,0x05,
	0x00,0x00,0x05,0xf8,0x00,0x00,0x3e,0xf7,
	0x00,0x03,0xd4,0x06,0x00,0x00,0x13,0xdb,
	0x00,0x01,0x62,0x83,0x00,0x03,0xc2,0x07,
	0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xff,
	0x00,0x03,0xfe,0x00,0x00,0x00,0x0f,0xe0,
	0x00,0x01,0x10,0xad,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x00,0x03,0x00,0x03,0xde,0xf8,
	0x00,0x00,0x35,0xfc,0x00,0x00,0x0b,0xe9,
	0x00,0x00,0xb8,0xd2,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x11,0xdd,0x00,0x01,0x36,0x9b,
	0x00,0x03,0xba,0x08,0x00,0x00,0x00,0x02,
	0x00,0x03,0xec,0xfd,0x00,0x00,0x1b,0xfe,
	0x00,0x00,0x0d,0xe5,0x00,0x00,0xe0,0xc2,
	0x00,0x03,0xb4,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd0,0xf0,0x00,0x00,0x5b,0xf8,
	0x00,0x00,0x09,0xee,0x00,0x00,0x8a,0xe2,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x04,
	0x00,0x03,0xc6,0xd3,0x00,0x00,0xa9,0xf2,
	0x00,0x00,0x05,0xf8,0x00,0x00,0x3e,0xf7,
	0x00,0x03,0xd4,0x06,0x00,0x00,0x00,0x03,
	0x00,0x03,0xca,0xae,0x00,0x01,0x01,0xea,
	0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xff,
	0x00,0x03,0xfe,0x00,0x00,0x00,0x0f,0xe0,
	0x00,0x01,0x0e,0xae,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x00,0x03,0x00,0x03,0xdc,0xf9,
	0x00,0x00,0x35,0xfc,0x00,0x00,0x0b,0xe9,
	0x00,0x00,0xb8,0xd2,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x00,0x04,0x00,0x03,0xca,0xe3,
	0x00,0x00,0x7f,0xf5,0x00,0x00,0x07,0xf3,
	0x00,0x00,0x64,0xee,0x00,0x03,0xc4,0x08,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc6,0xc3,
	0x00,0x00,0xd3,0xee,0x00,0x00,0x03,0xfc,
	0x00,0x00,0x20,0xfd,0x00,0x03,0xe6,0x03,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x04,
	0x00,0x03,0xc6,0xd3,0x00,0x00,0xab,0xf1,
	0x00,0x00,0x05,0xf8,0x00,0x00,0x3c,0xf8,
	0x00,0x03,0xd4,0x06,0x00,0x00,0x00,0x03,
	0x00,0x03,0xca,0xad,0x00,0x01,0x03,0xea,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
	0x00,0x03,0xd4,0x82,0x00,0x01,0x59,0xe6,
	0x00,0x00,0x00,0x03,0x00,0x03,0xdc,0xf8,
	0x00,0x00,0x37,0xfc,0x00,0x00,0x00,0x01,
	0x00,0x03,0xe4,0x57,0x00,0x01,0xa5,0xe4,
	0x00,0x00,0x00,0x04,0x00,0x03,0xca,0xe3,
	0x00,0x00,0x7f,0xf5,0x00,0x00,0x07,0xf3,
	0x00,0x00,0x62,0xee,0x00,0x03,0xc6,0x08,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc6,0xc2,
	0x00,0x00,0xd3,0xef,0x00,0x00,0x03,0xfc,
	0x00,0x00,0x20,0xfd,0x00,0x03,0xe6,0x03,
	0x00,0x00,0x00,0x03,0x00,0x03,0xce,0x99,
	0x00,0x01,0x2b,0xe8,0x00,0x00,0x00,0x01,
	0x00,0x03,0xee,0xff,0x00,0x00,0x17,0xfe,
	0x00,0x00,0x00,0x02,0x00,0x03,0xda,0x6e,
	0x00,0x01,0x7f,0xe4,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd2,0xf0,0x00,0x00,0x57,0xf9,
	0x02,0x58,0x4c,0x0e,0x00,0x0a,0x6a,0xab,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x00,0x02,
	0x00,0x03,0xe6,0xfd,0x00,0x00,0x23,0xfd,
	0x00,0x00,0x03,0xfb,0x00,0x00,0x28,0xfc,
	0x00,0x03,0xe0,0x04,0x00,0x00,0x09,0xee,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbc,0x09,
	0x00,0x00,0x0f,0xe2,0x00,0x00,0xfc,0xb5,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x13,0xdb,
	0x00,0x01,0x6c,0x7d,0x00,0x03,0xc4,0x07,
	0x00,0x00,0x13,0xde,0x00,0x01,0xc6,0x44,
	0x00,0x03,0xdc,0x04,0x00,0x00,0x00,0x02,
	0x00,0x03,0xe6,0xfd,0x00,0x00,0x23,0xfd,
	0x00,0x00,0x03,0xfb,0x00,0x00,0x28,0xfc,
	0x00,0x03,0xe0,0x04,0x00,0x00,0x09,0xee,
	0x00,0x00,0x88,0xe3,0x00,0x03,0xbc,0x09,
	0x00,0x00,0x0f,0xe2,0x00,0x00,0xfc,0xb5,
	0x00,0x03,0xb6,0x09,0x00,0x00,0x13,0xdb,
	0x00,0x01,0x6c,0x7d,0x00,0x03,0xc4,0x07,
	0x00,0x00,0x11,0xdd,0x00,0x01,0x36,0x9b,
	0x00,0x03,0xba,0x08,0x00,0x00,0x00,0x04,
	0x00,0x03,0xc6,0xcd,0x00,0x00,0xb9,0xf0,
	0x00,0x00,0x00,0x03,0x00,0x03,0xd4,0xf3,
	0x00,0x00,0x4f,0xf9,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x05,0xf5,0x00,0x00,0x56,0xf2,
	0x00,0x03,0xca,0x07,0x00,0x00,0x0b,0xe8,
	0x00,0x00,0xc2,0xce,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x09,0xee,0x00,0x00,0x88,0xe3,
	0x00,0x03,0xbc,0x09,0x00,0x00,0x00,0x02,
	0x00,0x03,0xd6,0x7a,0x00,0x01,0x69,0xe5,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc8,0xb4,
	0x00,0x00,0xf5,0xeb,0x00,0x00,0x00,0x04,
	0x00,0x03,0xca,0xe2,0x00,0x00,0x81,0xf5,
	0x00,0x00,0x00,0x02,0x00,0x03,0xe6,0xfd,
	0x00,0x00,0x23,0xfd,0x00,0x00,0x03,0xfb,
	0x00,0x00,0x28,0xfc,0x00,0x03,0xe0,0x04,
	0x01,0x90,0x70,0x0f,0x00,0x10,0x47,0x1d,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x05,0xeb,
	0x00,0x01,0x02,0xaa,0x00,0x03,0xca,0x03,
	0x00,0x00,0x05,0xf0,0x00,0x01,0xf2,0x17,
	0x00,0x03,0xfa,0x01,0x00,0x00,0x03,0xf1,
	0x00,0x00,0xb4,0xcd,0x00,0x03,0xc8,0x03,
	0x00,0x00,0x07,0xe7,0x00,0x01,0xd0,0x36,
	0x00,0x03,0xee,0x01,0x00,0x00,0x03,0xf7,
	0x00,0x00,0x6c,0xe8,0x00,0x03,0xce,0x03,
	0x00,0x00,0x07,0xe4,0x00,0x01,0x9a,0x5a,
	0x00,0x03,0xe2,0x01,0x00,0x00,0x03,0xfd,
	0x00,0x00,0x2e,0xf9,0x00,0x03,0xe0,0x02,
	0x00,0x00,0x07,0xe5,0x00,0x01,0x54,0x81,
	0x00,0x03,0xd6,0x02,0x00,0x00,0x13,0xde,
	0x00,0x01,0xc6,0x44,0x00,0x03,0xdc,0x04,
	0x00,0x00,0x07,0xf3,0x00,0x00,0x64,0xee,
	0x00,0x03,0xc4,0x08,0x00,0x00,0x13,0xda,
	0x00,0x01,0x8e,0x6a,0x00,0x03,0xcc,0x06,
	0x00,0x00,0x03,0xfb,0x00,0x00,0x28,0xfc,
	0x00,0x03,0xe0,0x04,0x00,0x00,0x11,0xdc,
	0x00,0x01,0x48,0x91,0x00,0x03,0xbe,0x08,
	0x00,0x00,0x00,0x01,0x00,0x03,0xf8,0xff,
	0x00,0x00,0x0b,0xff,0x00,0x00,0x0f,0xe2,
	0x00,0x00,0xfe,0xb4,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x00,0x03,0x00,0x03,0xda,0xf7,
	0x00,0x00,0x3d,0xfb,0x00,0x00,0x0b,0xea,
	0x00,0x00,0xb2,0xd4,0x00,0x03,0xb6,0x09,
	0x00,0x00,0x11,0xdd,0x00,0x01,0x36,0x9b,
	0x00,0x03,0xba,0x08,0x00,0x00,0x00,0x01,
	0x00,0x03,0xee,0xff,0x00,0x00,0x17,0xfe,
	0x00,0x00,0x0d,0xe4,0x00,0x00,0xea,0xbe,
	0x00,0x03,0xb4,0x09,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd4,0xf4,0x00,0x00,0x4d,0xf9,
	0x00,0x00,0x00,0x04,0x00,0x03,0xd8,0x4f,
	0x00,0x01,0xbb,0xdd,0x00,0x00,0x12,0x00,
	0x00,0x00,0x09,0xe4,0x00,0x01,0xb8,0x48,
	0x00,0x03,0xe8,0x02,0x00,0x03,0xea,0x2d,
	0x00,0x01,0xe9,0xe5,0x00,0x00,0x0e,0x03,
	0x00,0x03,0xc6,0xbe,0x00,0x00,0xdf,0xed,
	0x00,0x00,0x03,0xfc,0x00,0x00,0x1c,0xfe,
	0x00,0x03,0xe8,0x03,0x00,0x00,0x09,0xee,
	0x00,0x00,0x8c,0xe5,0x00,0x03,0xbc,0x09,
	0x00,0x00,0x00,0x04,0x00,0x03,0xc6,0xd4,
	0x00,0x00,0xa7,0xf2,0x00,0x00,0x05,0xf7,
	0x00,0x00,0x46,0xf6,0x00,0x03,0xd0,0x06,
	0x00,0x00,0x00,0x03,0x00,0x03,0xc8,0xb4,
	0x00,0x00,0xf3,0xec,0x00,0x00,0x01,0xfe,
	0x00,0x00,0x0e,0xff,0x00,0x03,0xf4,0x02,
	0x00,0x00,0x00,0x02,0x00,0x03,0xd0,0x8d,
	0x00,0x01,0x3d,0xe5,0x00,0x00,0x00,0x02,
	0x00,0x03,0xe6,0xfd,0x00,0x00,0x23,0xfd,
	0x00,0x00,0x00,0x01,0x00,0x03,0xde,0x68,
	0x00,0x01,0x89,0xe4,0x00,0x00,0x00,0x03,
	0x00,0x03,0xd0,0xef,0x00,0x00,0x5d,0xf8,
	0x02,0xd0,0x10,0x10,0x00,0x01,0x80,0x00,
	0x00,0x00,0x2e,0x3f,0x00,0x00,0xa8,0x3f,
	0x00,0x00,0x2e,0x00,0x00,0x00,0x1c,0x35,
	0x00,0x00,0xa6,0x48,0x00,0x00,0x40,0x02,
	0x00,0x00,0x0e,0x2a,0x00,0x00,0x9e,0x4f,
	0x00,0x00,0x54,0x07,0x00,0x00,0x04,0x20,
	0x00,0x00,0x90,0x53,0x00,0x00,0x6a,0x0e,
	0x02,0xd0,0x64,0x11,0x00,0x0e,0x90,0x00,
	0x00,0x03,0xf2,0x15,0x00,0x01,0xc8,0x15,
	0x00,0x03,0xf2,0x00,0x00,0x03,0xfa,0x00,
	0x00,0x01,0xbc,0x31,0x00,0x03,0xe6,0x01,
	0x00,0x00,0x01,0xf2,0x00,0x01,0x9c,0x51,
	0x00,0x03,0xda,0x02,0x00,0x00,0x05,0xea,
	0x00,0x01,0x68,0x74,0x00,0x03,0xd2,0x03,
	0x00,0x00,0x07,0xe7,0x00,0x01,0x2c,0x96,
	0x00,0x03,0xce,0x03,0x00,0x00,0x07,0xe9,
	0x00,0x00,0xe8,0xb4,0x00,0x03,0xd4,0x02,
	0x00,0x00,0x05,0xed,0x00,0x00,0xa2,0xce,
	0x00,0x03,0xe4,0x00,0x00,0x00,0x03,0xf3,
	0x00,0x00,0x62,0xde,0x00,0x00,0x01,0xfd,
	0x00,0x00,0x01,0xf2,0x00,0x01,0x9c,0x51,
	0x00,0x03,0xda,0x02,0x00,0x00,0x05,0xea,
	0x00,0x01,0x68,0x74,0x00,0x03,0xd2,0x03,
	0x00,0x00,0x07,0xe7,0x00,0x01,0x2c,0x96,
	0x00,0x03,0xce,0x03,0x00,0x00,0x07,0xe9,
	0x00,0x00,0xe8,0xb4,0x00,0x03,0xd4,0x02,
	0x00,0x00,0x05,0xed,0x00,0x00,0xa2,0xce,
	0x00,0x03,0xe4,0x00,0x00,0x00,0x03,0xf3,
	0x00,0x00,0x62,0xde,0x00,0x00,0x01,0xfd,
	0x00,0x00,0x01,0xfe,0x00,0x00,0x20,0xe4,
	0x00,0x00,0x21,0xfe,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xdd,0x00,0x00,0x4f,0xfc,
	0x00,0x00,0x07,0xe7,0x00,0x01,0x2c,0x96,
	0x00,0x03,0xce,0x03,0x00,0x00,0x07,0xe9,
	0x00,0x00,0xe8,0xb4,0x00,0x03,0xd4,0x02,
	0x00,0x00,0x05,0xed,0x00,0x00,0xa2,0xce,
	0x00,0x03,0xe4,0x00,0x00,0x00,0x03,0xf3,
	0x00,0x00,0x62,0xde,0x00,0x00,0x01,0xfd,
	0x00,0x00,0x01,0xfe,0x00,0x00,0x20,0xe4,
	0x00,0x00,0x21,0xfe,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xdd,0x00,0x00,0x4f,0xfc,
	0x00,0x00,0x00,0x00,0x00,0x03,0xee,0xcb,
	0x00,0x00,0x8b,0xf9,0x00,0x00,0x00,0x00,
	0x00,0x03,0xe8,0xae,0x00,0x00,0xd1,0xf6,
	0x00,0x00,0x05,0xed,0x00,0x00,0xa2,0xce,
	0x00,0x03,0xe4,0x00,0x00,0x00,0x03,0xf3,
	0x00,0x00,0x62,0xde,0x00,0x00,0x01,0xfd,
	0x00,0x00,0x01,0xfe,0x00,0x00,0x20,0xe4,
	0x00,0x00,0x21,0xfe,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xdd,0x00,0x00,0x4f,0xfc,
	0x00,0x00,0x00,0x00,0x00,0x03,0xee,0xcb,
	0x00,0x00,0x8b,0xf9,0x00,0x00,0x01,0xf4,
	0x00,0x01,0x5c,0x68,0x00,0x03,0xec,0x00,
	0x00,0x00,0x01,0xf4,0x00,0x01,0x18,0x8c,
	0x00,0x03,0xe8,0x00,0x00,0x00,0x01,0xf6,
	0x00,0x00,0xd0,0xae,0x00,0x03,0xe8,0xae,
	0x00,0x00,0x00,0x00,0x00,0xb4,0x34,0x13,
	0x00,0x06,0x20,0x00,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x09,0xe5,0x00,0x01,0xc2,0x40,
	0x00,0x03,0xea,0x01,0x00,0x00,0x07,0xe7,
	0x00,0x01,0x2c,0x96,0x00,0x03,0xce,0x03,
	0x00,0x00,0x03,0xf5,0x00,0x00,0x80,0xe1,
	0x00,0x03,0xca,0x04,0x00,0x5a,0x64,0x14,
	0x00,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0xee,0x00,0x01,0xf0,0x1c,
	0x00,0x03,0xf6,0x00,0x00,0x00,0x09,0xe5,
	0x00,0x01,0xc2,0x40,0x00,0x03,0xea,0x01,
	0x00,0x00,0x07,0xe3,0x00,0x01,0x80,0x6a,
	0x00,0x03,0xdc,0x02,0x00,0x00,0x07,0xe7,
	0x00,0x01,0x2c,0x96,0x00,0x03,0xce,0x03,
	0x00,0x00,0x05,0xee,0x00,0x00,0xd4,0xc0,
	0x00,0x03,0xc6,0x03,0x00,0x00,0x03,0xf5,
	0x00,0x00,0x80,0xe1,0x00,0x03,0xca,0x04,
	0x00,0x00,0x01,0xfb,0x00,0x00,0x38,0xf8,
	0x00,0x03,0xdc,0x03,0x00,0x87,0xc4,0x15,
	0x00,0x1e,0x18,0x00,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0xe8,0x00,0x01,0xe0,0x2d,
	0x00,0x03,0xf0,0x00,0x00,0x00,0x07,0xe3,
	0x00,0x01,0x80,0x6a,0x00,0x03,0xdc,0x02,
	0x00,0x00,0x05,0xea,0x00,0x01,0x02,0xab,
	0x00,0x03,0xca,0x03,0x00,0x00,0x03,0xf5,
	0x00,0x00,0x82,0xe0,0x00,0x03,0xca,0x04,
	0x00,0x00,0x01,0xfe,0x00,0x00,0x1a,0xfe,
	0x00,0x03,0xea,0x02,0x00,0x00,0x07,0xee,
	0x00,0x01,0xf4,0x1b,0x00,0x03,0xf8,0x00,
	0x00,0x00,0x09,0xe3,0x00,0x01,0xa6,0x53,
	0x00,0x03,0xe4,0x01,0x00,0x00,0x07,0xe7,
	0x00,0x01,0x2e,0x95,0x00,0x03,0xce,0x03,
	0x00,0x00,0x03,0xf1,0x00,0x00,0xac,0xd1,
	0x00,0x03,0xc6,0x04,0x00,0x00,0x01,0xfb,
	0x00,0x00,0x3a,0xf8,0x00,0x03,0xda,0x03,
	0x00,0x00,0x03,0xf7,0x00,0x01,0xfe,0x0b,
	0x00,0x03,0xfc,0x00,0x00,0x00,0x09,0xe5,
	0x00,0x01,0xc6,0x3e,0x00,0x03,0xea,0x01,
	0x00,0x00,0x07,0xe5,0x00,0x01,0x5a,0x7e,
	0x00,0x03,0xd6,0x02,0x00,0x00,0x05,0xed,
	0x00,0x00,0xda,0xbe,0x00,0x03,0xc6,0x03,
	0x00,0x00,0x01,0xf8,0x00,0x00,0x5e,0xee,
	0x00,0x03,0xd0,0x03,0x00,0x41,0x88,0x16,
	0x00,0x14,0x0b,0xa3,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x05,0xf2,0x00,0x01,0xf8,0x13,
	0x00,0x03,0xfa,0x00,0x00,0x00,0x07,0xe9,
	0x00,0x01,0xe0,0x2b,0x00,0x03,0xf2,0x00,
	0x00,0x00,0x09,0xe4,0x00,0x01,0xba,0x46,
	0x00,0x03,0xe8,0x01,0x00,0x00,0x07,0xe3,
	0x00,0x01,0x8a,0x65,0x00,0x03,0xde,0x01,
	0x00,0x00,0x07,0xe5,0x00,0x01,0x4e,0x85,
	0x00,0x03,0xd4,0x02,0x00,0x00,0x05,0xe9,
	0x00,0x01,0x10,0xa5,0x00,0x03,0xca,0x03,
	0x00,0x00,0x05,0xee,0x00,0x00,0xd0,0xc2,
	0x00,0x03,0xc6,0x03,0x00,0x00,0x03,0xf3,
	0x00,0x00,0x94,0xda,0x00,0x03,0xc8,0x04,
	0x00,0x00,0x01,0xf8,0x00,0x00,0x5c,0xef,
	0x00,0x03,0xd0,0x03,0x00,0x00,0x01,0xfc,
	0x00,0x00,0x2a,0xfc,0x00,0x03,0xe2,0x02,
	0x00,0xf0,0x28,0x17,0x00,0x04,0x2a,0xab,
	0x00,0x00,0x00,0x00,0x00,0x01,0xfe,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x09,0xe3,
	0x00,0x01,0xa8,0x5c,0x00,0x03,0xe0,0x01,
	0x00,0x00,0x03,0xf0,0x00,0x00,0xb8,0xcc,
	0x00,0x03,0xc6,0x04,0x00,0x78,0x4c,0x18,
	0x00,0x0a,0x15,0x56,0x00,0x00,0x00,0x00,
	0x00,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x07,0xea,0x00,0x01,0xe4,0x28,
	0x00,0x03,0xf2,0x00,0x00,0x00,0x09,0xe3,
	0x00,0x01,0x9a,0x5b,0x00,0x03,0xe0,0x01,
	0x00,0x00,0x07,0xe7,0x00,0x01,0x2c,0x96,
	0x00,0x03,0xce,0x03,0x00,0x00,0x03,0xf0,
	0x00,0x00,0xb6,0xcd,0x00,0x03,0xc6,0x04,
	0x00,0x00,0x01,0xf9,0x00,0x00,0x50,0xf2,
	0x00,0x03,0xd4,0x03,0x00,0x00,0x04,0x68,
	0x00,0x00,0x04,0x43,0x00,0x00,0x04,0x67,
	0x00,0x02,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x04,0x41,0x00,0x00,0x04,0x65,
	0x00,0x02,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x1c,0x64,0x00,0x00,0x11,0xc2,
	0x00,0x00,0x02,0xe7,0x00,0x03,0x20,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x1c,0x63,
	0x00,0x00,0x11,0xc0,0x00,0x00,0x02,0xe6,
	0x00,0x03,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x04,0x64,0x00,0x00,0x14,0x42,
	0x00,0x00,0x02,0xe7,0x00,0x03,0x20,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x04,0x63,
	0x00,0x00,0x14,0x40,0x00,0x00,0x03,0xe6,
	0x00,0x03,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x12,0xc2,0x00,0x00,0x11,0xc4,
	0x00,0x00,0x00,0x67,0x00,0x03,0x20,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x14,0x40,0x00,0x00,0x12,0x42,
	0x00,0x00,0x00,0xc4,0x00,0x00,0x13,0xe7,
	0x00,0x03,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x13,0xc2,0x00,0x00,0x12,0xe6,
	0x00,0x00,0x12,0x41,0x00,0x00,0x11,0xe4,
	0x00,0x00,0x10,0xc0,0x00,0x00,0x00,0x43,
	0x00,0x00,0x13,0xe6,0x00,0x00,0x12,0xc2,
	0x00,0x00,0x12,0x65,0x00,0x00,0x11,0xc0,
	0x00,0x00,0x10,0xc4,0x00,0x00,0x00,0x67,
	0x00,0x0c,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x14,0x40,0x00,0x00,0x13,0x43,
	0x00,0x00,0x12,0xe7,0x00,0x00,0x11,0xc2,
	0x00,0x00,0x11,0x65,0x00,0x00,0x00,0x41,
	0x00,0x00,0x14,0x44,0x00,0x00,0x13,0x67,
	0x00,0x00,0x12,0xc3,0x00,0x00,0x11,0xe6,
	0x00,0x00,0x11,0x41,0x00,0x00,0x00,0x65,
	0x00,0x0c,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x12,0xc2,0x00,0x00,0x01,0x44,
	0x00,0x00,0x13,0xc7,0x00,0x00,0x12,0x41,
	0x00,0x00,0x00,0xc4,0x00,0x00,0x13,0x66,
	0x00,0x00,0x11,0xc1,0x00,0x00,0x00,0x43,
	0x00,0x00,0x12,0xe6,0x00,0x00,0x01,0x40,
	0x00,0x00,0x13,0xc3,0x00,0x00,0x12,0x65,
	0x00,0x00,0x00,0xc0,0x00,0x00,0x13,0x42,
	0x00,0x00,0x11,0xc5,0x00,0x00,0x00,0x67,
	0x00,0x10,0x20,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x14,0x40,
	0x00,0x00,0x12,0x41,0x00,0x00,0x00,0xc4,
	0x00,0x00,0x13,0x66,0x00,0x00,0x11,0xc1,
	0x00,0x00,0x00,0x43,0x00,0x00,0x12,0xc6,
	0x00,0x00,0x01,0x40,0x00,0x00,0x13,0xc3,
	0x00,0x00,0x12,0x65,0x00,0x00,0x00,0xc0,
	0x00,0x00,0x13,0x42,0x00,0x00,0x11,0xc5,
	0x00,0x00,0x00,0x67,0x00,0x00,0x12,0xc2,
	0x00,0x00,0x01,0x44,0x00,0x00,0x13,0xe7,
	0x00,0x10,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x13,0x41,0x00,0x00,0x13,0x65,
	0x00,0x02,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x11,0x43,0x00,0x00,0x11,0x67,
	0x00,0x02,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x12,0xc1,0x00,0x00,0x12,0x44,
	0x00,0x00,0x11,0x67,0x00,0x00,0x10,0xc3,
	0x00,0x00,0x00,0x66,0x00,0x00,0x13,0xc7,
	0x00,0x00,0x12,0xe5,0x00,0x00,0x12,0x40,
	0x00,0x00,0x11,0x43,0x00,0x00,0x10,0xe7,
	0x00,0x00,0x00,0x42,0x00,0x00,0x13,0xe5,
	0x00,0x0c,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x00,0x42,0x00,0x00,0x13,0xe6,
	0x00,0x00,0x13,0x41,0x00,0x00,0x12,0x64,
	0x00,0x00,0x11,0xc0,0x00,0x00,0x11,0x43,
	0x00,0x00,0x00,0x66,0x00,0x00,0x13,0xc2,
	0x00,0x00,0x13,0x65,0x00,0x00,0x12,0x40,
	0x00,0x00,0x11,0xc4,0x00,0x00,0x11,0x67,
	0x00,0x0c,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x13,0xc2,0x00,0x00,0x12,0xe6,
	0x00,0x00,0x12,0x41,0x00,0x00,0x11,0xe4,
	0x00,0x00,0x10,0xc0,0x00,0x00,0x00,0x43,
	0x00,0x00,0x13,0xe6,0x00,0x00,0x12,0xc2,
	0x00,0x00,0x12,0x65,0x00,0x00,0x11,0xc0,
	0x00,0x00,0x10,0xc4,0x00,0x00,0x10,0x67,
	0x00,0x0c,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x13,0x40,0x00,0x00,0x12,0xc3,
	0x00,0x00,0x11,0xe7,0x00,0x00,0x11,0x42,
	0x00,0x00,0x00,0xe5,0x00,0x00,0x13,0xc1,
	0x00,0x00,0x13,0x44,0x00,0x00,0x12,0xe7,
	0x00,0x00,0x11,0xc3,0x00,0x00,0x11,0x66,
	0x00,0x00,0x00,0xc1,0x00,0x00,0x13,0xe5,
	0x00,0x0c,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x04,0x68,0x00,0x00,0x04,0x43,
	0x00,0x00,0x04,0x67,0x00,0x02,0x20,0x00,
	0x00,0x00,0x14,0x68,0x00,0x00,0x12,0x41,
	0x00,0x00,0x12,0x65,0x00,0x02,0x20,0x00,
	0x00,0x00,0x14,0x68,0x00,0x00,0x03,0xc2,
	0x00,0x00,0x04,0x66,0x00,0x00,0x04,0x63,
	0x00,0x00,0x04,0x40,0x00,0x00,0x14,0x65,
	0x00,0x05,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x04,0x64,0x00,0x00,0x04,0x41,
	0x00,0x00,0x04,0x66,0x00,0x00,0x04,0x42,
	0x00,0x00,0x04,0x67,0x00,0x05,0x20,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x1c,0x63,
	0x00,0x00,0x10,0xc0,0x00,0x00,0x11,0x64,
	0x00,0x00,0x11,0xc1,0x00,0x00,0x12,0x65,
	0x00,0x00,0x12,0x42,0x00,0x00,0x12,0xe6,
	0x00,0x00,0x13,0x43,0x00,0x00,0x03,0xe7,
	0x00,0x09,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x1c,0x42,0x00,0x00,0x10,0xe6,
	0x00,0x00,0x11,0x43,0x00,0x00,0x11,0xe7,
	0x00,0x00,0x12,0x63,0x00,0x00,0x12,0xc0,
	0x00,0x00,0x13,0x64,0x00,0x00,0x03,0xc1,
	0x00,0x00,0x04,0x65,0x00,0x09,0x20,0x00,
	0x00,0x00,0x04,0x48,0x00,0x00,0x14,0x68,
	0x00,0x00,0x01,0xc0,0x00,0x00,0x13,0xc2,
	0x00,0x00,0x01,0xc4,0x00,0x00,0x13,0xe6,
	0x00,0x04,0x20,0x00,0x00,0x00,0x14,0x48,
	0x00,0x00,0x00,0xe8,0x00,0x00,0x12,0xc1,
	0x00,0x00,0x00,0xc3,0x00,0x00,0x12,0xc5,
	0x00,0x00,0x00,0xe7,0x00,0x04,0x20,0x00,
	0x00,0x00,0x14,0x68,0x00,0x00,0x14,0x68,
	0x00,0x00,0x01,0x40,0x00,0x00,0x02,0x40,
	0x00,0x00,0x13,0x41,0x00,0x00,0x00,0x42,
	0x00,0x00,0x01,0x43,0x00,0x00,0x02,0x44,
	0x00,0x00,0x13,0x45,0x00,0x00,0x00,0x46,
	0x00,0x00,0x01,0x67,0x00,0x08,0x20,0x00,
	0x00,0x00,0x14,0x68,0x00,0x00,0x14,0x68,
	0x00,0x00,0x00,0xc0,0x00,0x00,0x01,0xc0,
	0x00,0x00,0x02,0xc1,0x00,0x00,0x13,0xc2,
	0x00,0x00,0x00,0xc3,0x00,0x00,0x01,0xc4,
	0x00,0x00,0x02,0xc5,0x00,0x00,0x13,0xc6,
	0x00,0x00,0x00,0xe7,0x00,0x08,0x20,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x1c,0x64,
	0x00,0x00,0x11,0xc2,0x00,0x00,0x02,0xe7,
	0x00,0x03,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x02,0xc2,0x00,0x00,0x1c,0x67,
	0x00,0x00,0x11,0xe4,0x00,0x03,0x20,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x04,0x64,
	0x00,0x00,0x04,0x41,0x00,0x00,0x14,0x65,
	0x00,0x00,0x12,0xc2,0x00,0x00,0x13,0x67,
	0x00,0x05,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x12,0xc1,0x00,0x00,0x03,0x66,
	0x00,0x00,0x04,0x63,0x00,0x00,0x04,0x40,
	0x00,0x00,0x14,0x65,0x00,0x05,0x20,0x00,
	0x00,0x00,0x04,0x68,0x00,0x00,0x1c,0x64,
	0x00,0x00,0x11,0x41,0x00,0x00,0x11,0xe5,
	0x00,0x00,0x12,0xc2,0x00,0x00,0x03,0x67,
	0x00,0x05,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x1c,0x42,0x00,0x00,0x11,0x67,
	0x00,0x00,0x12,0x64,0x00,0x00,0x13,0x41,
	0x00,0x00,0x03,0xe5,0x00,0x05,0x20,0x00,
	0x00,0x00,0x14,0x68,0x00,0x00,0x13,0xc2,
	0x00,0x00,0x12,0xe6,0x00,0x00,0x12,0x41,
	0x00,0x00,0x11,0xe4,0x00,0x00,0x10,0xc0,
	0x00,0x00,0x00,0x43,0x00,0x00,0x13,0xe6,
	0x00,0x00,0x12,0xc2,0x00,0x00,0x12,0x65,
	0x00,0x00,0x11,0xc0,0x00,0x00,0x10,0xc4,
	0x00,0x00,0x10,0x67,0x00,0x0c,0x20,0x00,
	0x00,0x00,0x11,0xc1,0x00,0x00,0x11,0x44,
	0x00,0x00,0x00,0xe7,0x00,0x00,0x13,0xc3,
	0x00,0x00,0x13,0x66,0x00,0x00,0x12,0xc1,
	0x00,0x00,0x11,0xc5,0x00,0x00,0x11,0x60,
	0x00,0x00,0x00,0xc3,0x00,0x00,0x13,0xe7,
	0x00,0x00,0x13,0x42,0x00,0x00,0x12,0xe5,
	0x00,0x0c,0x20,0x00,0x00,0x00,0x04,0x68,
	0x00,0x00,0x1c,0x63,0x00,0x00,0x10,0xc0,
	0x00,0x00,0x11,0x64,0x00,0x00,0x11,0xc1,
	0x00,0x00,0x12,0x65,0x00,0x00,0x12,0x42,
	0x00,0x00,0x12,0xe6,0x00,0x00,0x13,0x43,
	0x00,0x00,0x03,0xe7,0x00,0x09,0x20,0x00,
	0x00,0x00,0x14,0x68,0x00,0x00,0x12,0x41,
	0x00,0x00,0x12,0xe6,0x00,0x00,0x13,0x42,
	0x00,0x00,0x03,0xe7,0x00,0x00,0x1c,0x43,
	0x00,0x00,0x10,0xe7,0x00,0x00,0x11,0x64,
	0x00,0x00,0x11,0xc0,0x00,0x00,0x12,0x65,
	0x00,0x09,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x14,0x68,0x00,0x00,0x12,0x41,
	0x00,0x00,0x00,0x43,0x00,0x00,0x12,0x45,
	0x00,0x00,0x00,0x67,0x00,0x04,0x20,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x48,0x00,0x00,0x14,0x68,
	0x00,0x00,0x01,0x48,0x00,0x00,0x13,0x68,
	0x00,0x00,0x01,0x42,0x00,0x00,0x13,0x44,
	0x00,0x00,0x01,0x66,0x00,0x00,0x13,0x40,
	0x00,0x04,0x20,0x00,0x00,0x00,0x14,0x68,
	0x00,0x00,0x14,0x68,0x00,0x00,0x12,0x41,
	0x00,0x00,0x00,0x43,0x00,0x00,0x12,0x45,
	0x00,0x00,0x00,0x67,0x00,0x04,0x20,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x14,0x48,0x00,0x00,0x01,0x68,
	0x00,0x00,0x13,0x42,0x00,0x00,0x01,0x44,
	0x00,0x00,0x13,0x66,0x00,0x00,0x01,0x40,
	0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x48,
	0x00,0x00,0x14,0x68,0x00,0x00,0x01,0x40,
	0x00,0x00,0x02,0x41,0x00,0x00,0x13,0x42,
	0x00,0x00,0x00,0x43,0x00,0x00,0x01,0x44,
	0x00,0x00,0x02,0x45,0x00,0x00,0x13,0x46,
	0x00,0x00,0x00,0x67,0x00,0x08,0x20,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x48,
	0x00,0x00,0x14,0x68,0x00,0x00,0x00,0x40,
	0x00,0x00,0x00,0xc0,0x00,0x00,0x01,0xc0,
	0x00,0x00,0x02,0xc0,0x00,0x00,0x13,0xc1,
	0x00,0x00,0x00,0xc2,0x00,0x00,0x01,0xc3,
	0x00,0x00,0x02,0xc4,0x00,0x00,0x13,0xc5,
	0x00,0x00,0x00,0xc6,0x00,0x00,0x01,0xe7,
	0x00,0x08,0x20,0x00,0x00,0x00,0x14,0x48,
	0x00,0x00,0x14,0x68,0x00,0x00,0x00,0xc1,
	0x00,0x00,0x01,0xc2,0x00,0x00,0x02,0xc3,
	0x00,0x00,0x13,0xc4,0x00,0x00,0x00,0xc5,
	0x00,0x00,0x01,0xc6,0x00,0x00,0x02,0xe7,
	0x00,0x00,0x13,0xc0,0x00,0x08,0x20,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x08,0x00,0x08,0x00,0x00,
	0x00,0x50,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x50,0x08,0x10,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x50,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x50,0x08,0x10,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x30,0x00,0x08,0x00,0x00,
	0x00,0x50,0x08,0x10,0x00,0x08,0x08,0x08,
	0x00,0x10,0x08,0x10,0x00,0x50,0x08,0x10,
	0x00,0x08,0x00,0x08,0x00,0x10,0x08,0x10,
	0x00,0x80,0x00,0x18,0x00,0x08,0x00,0x00,
	0x00,0x10,0x08,0x10,0x00,0x50,0x08,0x10,
	0x00,0x08,0x08,0x08,0x00,0x10,0x08,0x10,
	0x00,0x50,0x00,0x10,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x18,0x00,0x08,0x00,0x00,
	0x00,0x50,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x08,0x08,
	0x00,0x50,0x00,0x10,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x20,0x00,0x08,0x00,0x00,
	0x00,0x50,0x00,0x10,0x00,0x08,0x08,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x50,0x08,0x10,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x20,0x00,0x00,0x00,0x00,
	0x00,0x10,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x80,0x00,0x0c,
	0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x10,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x0c,0x00,0x00,0x00,0x00,
	0x00,0x10,0x08,0x10,0x00,0x08,0x08,0x08,
	0x00,0x10,0x08,0x10,0x00,0x10,0x08,0x10,
	0x00,0x08,0x00,0x08,0x00,0x10,0x08,0x10,
	0x00,0x80,0x00,0x18,0x00,0x00,0x00,0x00,
	0x00,0x10,0x08,0x10,0x00,0x10,0x08,0x10,
	0x00,0x08,0x08,0x08,0x00,0x10,0x08,0x10,
	0x00,0x10,0x00,0x10,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x18,0x00,0x00,0x00,0x00,
	0x00,0x10,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x08,0x08,
	0x00,0x10,0x00,0x10,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x20,0x00,0x00,0x00,0x00,
	0x00,0x10,0x00,0x10,0x00,0x08,0x08,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x10,0x08,0x10,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x20,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x00,0x00,0x80,0x00,0x0c,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,
	0x00,0x80,0x00,0x0c,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x80,0x00,0x30,0x00,0x00,0x04,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x80,0x00,0x30,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x80,0x00,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,
	0x00,0x80,0x00,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x80,0x00,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x80,0x00,0x30,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,
	0x00,0x80,0x00,0x30,0x00,0x00,0x00,0x00,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x00,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,
	0x00,0x80,0x00,0x30,0x00,0x00,0x00,0x00,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x00,0x08,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x00,0x00,0x00,
	0x00,0x80,0x00,0x30,0x00,0x00,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x08,0x00,0x00,0x04,0x04,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x00,0x04,0x08,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x80,0x00,0x14,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x04,
	0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x08,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,
	0x00,0x80,0x00,0x14,0x00,0x08,0x00,0x00,
	0x00,0x50,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x80,0x00,0x24,
	0x00,0x08,0x00,0x00,0x00,0x50,0x00,0x10,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x24,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x80,0x00,0x10,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x80,0x00,0x10,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,
	0x00,0x80,0x00,0x20,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x00,
	0x00,0x80,0x00,0x20,0x00,0x08,0x00,0x00,
	0x00,0x50,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x80,0x00,0x0c,
	0x00,0x00,0x08,0x08,0x00,0x18,0x00,0x08,
	0x00,0x40,0x08,0x10,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x0c,0x00,0x00,0x00,0x00,
	0x00,0x08,0x08,0x08,0x00,0x10,0x08,0x10,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x80,0x00,0x14,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x08,0x08,
	0x00,0x10,0x00,0x10,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x14,0x00,0x00,0x00,0x00,
	0x00,0x08,0x08,0x00,0x00,0x50,0x08,0x10,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x14,0x00,0x00,0x00,0x00,
	0x00,0x08,0x08,0x00,0x00,0x50,0x00,0x10,
	0x00,0x08,0x08,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x14,0x00,0x00,0x00,0x00,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x00,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,
	0x00,0x80,0x00,0x30,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,
	0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x30,0x00,0x08,0x00,0x00,
	0x00,0x50,0x08,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x80,0x00,0x24,
	0x00,0x10,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x08,0x00,0x50,0x00,0x10,
	0x00,0x08,0x08,0x08,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x08,
	0x00,0x80,0x00,0x24,0x00,0x00,0x00,0x00,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x08,
	0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x00,0x00,0x80,0x00,0x10,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,
	0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,
	0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x00,0x00,0x08,0x00,0x08,
	0x00,0x80,0x00,0x10,0x00,0x08,0x00,0x08,
	0x00,0x08,0x08,0x00,0x00,0x08,0x00,0x08,
	0x00,0x08,0x00,0x00,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x00,0x00,0x80,0x00,0x10,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x08,0x00,0x00,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x00,
	0x00,0x80,0x00,0x20,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x08,0x00,0x00,0x00,0x08,0x08,0x08,
	0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,
	0x00,0x08,0x08,0x00,0x00,0x80,0x00,0x20,
	0x00,0x08,0x00,0x08,0x00,0x08,0x08,0x00,
	0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,
	0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x08,0x08,0x08,0x00,0x08,0x00,0x00,
	0x00,0x80,0x00,0x20,0x00,0x00,0x00,0x00,
	0x44,0x56,0x44,0x5f,0x52,0x45,0x4c,0x5f,
	0x32,0x2e,0x33,0x32,0x0a,0x00,0x00,0x00,
	0x02,0x01,0x32,0x2e,0x33,0x32,0x20,0x44,
	0x56,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x56,
	0x44,0x31,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x28,0x43,0x29,0x20,0x43,0x2d,
	0x43,0x75,0x62,0x65,0x20,0x4d,0x69,0x63,
	0x72,0x6f,0x73,0x79,0x73,0x74,0x65,0x6d,
	0x73,0x20,0x49,0x6e,0x63,0x2e,0x20,0x31,
	0x39,0x39,0x35,0x2d,0x31,0x39,0x39,0x37,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x2a,0x10,0x00,0x00,0x00 };

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\mpevent.h ===
//**************************************************************************
//
//      Title   : MPEvent.h
//
//      Date    : 1997.12.09    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.09   000.0000   1st making.
//
//**************************************************************************
class   HW_DEVICE_EXTENSION;

class   CDataXferEvent : public IMPEGBoardEvent
{
public:
        IMBoardListItem *GetNext( void );
        void            SetNext( IMBoardListItem *item );
        HALEVENTTYPE    GetEventType( void );
        void            Advice( void *pData );
        VOID            CancelCallBack( void );

        CDataXferEvent( ){ m_Next=NULL; m_EventType = ClassLibEvent_SendData; };
        ~CDataXferEvent( ){ m_Next=NULL; m_EventType = ClassLibEvent_SendData; };

private:
        IMBoardListItem *m_Next;
        HALEVENTTYPE    m_EventType;
};

class   CUserDataEvent : public IMPEGBoardEvent
{
public:
        IMBoardListItem *GetNext( void );
        void            SetNext( IMBoardListItem *item );
        HALEVENTTYPE    GetEventType( void );
        void            Advice( void *pData );

        void            Init( HW_DEVICE_EXTENSION *pHwDevExt );
        CUserDataEvent() { m_Next=NULL; m_EventType=WrapperEvent_UserData; m_pHwDevExt=NULL; }
        ~CUserDataEvent() { m_Next=NULL; m_EventType=WrapperEvent_UserData; m_pHwDevExt=NULL; }

private:
        IMBoardListItem *m_Next;
        HALEVENTTYPE    m_EventType;
        HW_DEVICE_EXTENSION *m_pHwDevExt;
};

class   CVSyncEvent : public IMPEGBoardEvent
{
public:
        IMBoardListItem *GetNext( void );
        void            SetNext( IMBoardListItem *item );
        HALEVENTTYPE    GetEventType( void );
        void            Advice( void *pData );

        void            Init( HW_DEVICE_EXTENSION *pHwDevExt );
        CVSyncEvent() { m_Next=NULL; m_EventType=WrapperEvent_VSync; m_pHwDevExt=NULL; m_Vcount=0; }
        ~CVSyncEvent() { m_Next=NULL; m_EventType=WrapperEvent_VSync; m_pHwDevExt=NULL; m_Vcount=0; }

private:
        IMBoardListItem *m_Next;
        HALEVENTTYPE    m_EventType;
        HW_DEVICE_EXTENSION *m_pHwDevExt;
        ULONG           m_Vcount;
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\mpevent.cpp ===
//**************************************************************************
//
//      Title   : MPEvent.cpp
//
//      Date    : 1997.12.09    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.09   000.0000   1st making.
//
//**************************************************************************
#include        "includes.h"
#include        "hal.h"
#include        "classlib.h"
#include        "ctime.h"
#include        "schdat.h"
#include        "mpevent.h"
#include        "wdmbuff.h"
#include        "ccque.h"
#include        "userdata.h"
#include        "wdmkserv.h"
#include        "ctvctrl.h"
#include		"hlight.h"
#include        "hwdevex.h"
#include        "dvdinit.h"

#define     USCC_BuffSize   0x200           // OK?

////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////
void  AdviceCallBack( PHW_STREAM_REQUEST_BLOCK  pSrb )
{
    StreamClassStreamNotification( StreamRequestComplete,
                       pSrb->StreamObject, pSrb );

}


IMBoardListItem *CDataXferEvent::GetNext( void )
{
        return( m_Next );
}


void CDataXferEvent::SetNext( IMBoardListItem *item )
{
        m_Next = item;

        return;
}


HALEVENTTYPE CDataXferEvent::GetEventType( void )
{
        return( m_EventType );
}



void CDataXferEvent::Advice( void *pData )
{
        CWDMBuffer  *ptr;
        PHW_STREAM_REQUEST_BLOCK    pSrb;
        ptr = (CWDMBuffer *)pData;
        
        ptr->SetNext( NULL );           // 98.04.10        
        pSrb = ptr->GetSRB();
        if( pSrb->Status != STATUS_CANCELLED ){
            pSrb->Status = STATUS_SUCCESS;
        }

        DBG_PRINTF( ("DataXfer-Advice: cuurent Irql = 0x%04x pSrb=0x%x\n\r", KeGetCurrentIrql(),pSrb ) );
//        if( KeGetCurrentIrql() > PASSIVE_LEVEL ){
//            StreamClassCallAtNewPriority( NULL,
//                                    pSrb->HwDeviceExtension,
////                                    LowToigh,
//                                    Low,
//                                    (PHW_PRIORITY_ROUTINE)AdviceCallBack,
//                                    pSrb
//            );
//        }else{

#ifndef		REARRANGEMENT
		if (ptr->m_EndFlag == FALSE)
			return;			//non last buffer
	    DBG_PRINTF( ("DVDWDM:Advice()---CompleteNotification Srb=%x\n\r", pSrb));
#endif		REARRANGEMENT

            StreamClassStreamNotification( StreamRequestComplete,
                       pSrb->StreamObject, pSrb );
//        }

        return;
}


////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////
void CUserDataEvent::Init( HW_DEVICE_EXTENSION *pHwDevExt )
{
    m_Next = NULL;
    m_EventType = WrapperEvent_UserData;

    m_pHwDevExt = pHwDevExt;
}

IMBoardListItem *CUserDataEvent::GetNext( void )
{

        return( m_Next );
}


void CUserDataEvent::SetNext( IMBoardListItem *item )
{
        m_Next = item;

        return;
}


HALEVENTTYPE CUserDataEvent::GetEventType( void )
{
        return( m_EventType );
}



void CUserDataEvent::Advice( void *pData )
{
        HW_DEVICE_EXTENSION *pHwDevExt;
        pHwDevExt = m_pHwDevExt;
        LONG        cp;
        UCHAR       field;
        CUserData   *pUData;
        DWORD       dwSizeUData;
        UCHAR       ccbuff[ USCC_BuffSize ];    // tmp buff for USCC data
        PUCHAR      pDest;

        // If FF or FR play mode now, no process for Closed Caption.
        if( pHwDevExt->Rate < 10000 )
            return;

        pUData = (CUserData *)pData;            // pointer to user data
        dwSizeUData = pUData->GetDataSize();

        PHW_STREAM_REQUEST_BLOCK    pSrb;       // pointer to SRB included
                                                // SRB_READ_DATA for C.C.
        // Copy User Data to temp buffer.
        pUData->DataCopy( ccbuff, dwSizeUData );

        // Get SRB included SRB_READ_DATA.
        pSrb = pHwDevExt->ccque.get();

        cp = 0;
        if( pSrb!=NULL ){
            if( pSrb->CommandData.DataBufferArray->FrameExtent < sizeof( KSGOP_USERDATA ) ){
                pSrb->Status = STATUS_INVALID_BUFFER_SIZE;
                pSrb->ActualBytesTransferred = 0;
                StreamClassStreamNotification( StreamRequestComplete,
                                    pSrb->StreamObject,
                                    pSrb );
                return;
            }
            pDest = (PUCHAR)(pSrb->CommandData.DataBufferArray->Data);

            *(PULONG)pDest = 0xB2010000;        // user_data_start_code
            pDest += 4;

            *pDest++ = ccbuff[cp++];            // line21_indicator
            *pDest++ = ccbuff[cp++];
            *pDest++ = ccbuff[cp++];            // reserved
            *pDest++ = ccbuff[cp++];

            field = *pDest++ = ccbuff[cp++];    // top_field_flag_of_gop &
            field &= 0x3f;                      // number_of_displayed_field

            if( pSrb->CommandData.DataBufferArray->FrameExtent <
                (field-1)*3 + sizeof(KSGOP_USERDATA) ){
                pSrb->Status = STATUS_INVALID_BUFFER_SIZE;
                pSrb->ActualBytesTransferred = 0;
                StreamClassStreamNotification( StreamRequestComplete,
                                    pSrb->StreamObject,
                                    pSrb );
                return;
            }
            pSrb->CommandData.DataBufferArray->DataUsed =
                pSrb->ActualBytesTransferred =
                    (field-1)*3 + sizeof(KSGOP_USERDATA);

            //
            // copy line21_data()
            //
            for( ;field ; field-- ){
                *pDest++ = ccbuff[cp++];        // marker_bits & line21_switch
                *pDest++ = ccbuff[cp++];        // line21_data1
                *pDest++ = ccbuff[cp++];        // line21_data2
            }

            PKSSTREAM_HEADER pPacket;

            pPacket = pSrb->CommandData.DataBufferArray;
            pPacket->OptionsFlags = KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                                    KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
            pSrb->NumberOfBuffers = 1;

            pPacket->PresentationTime.Time = pHwDevExt->ticktime.GetStreamTime();
            pPacket->Duration = 1000;

            pSrb->Status = STATUS_SUCCESS;
            StreamClassStreamNotification( StreamRequestComplete,
                                pSrb->StreamObject,
                                pSrb );

        }
        return;
}


////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////
void CVSyncEvent::Init( HW_DEVICE_EXTENSION *pHwDevExt )
{
    m_Next = NULL;
    m_EventType = WrapperEvent_VSync;

    m_pHwDevExt = pHwDevExt;
    m_Vcount = 0;
}

IMBoardListItem *CVSyncEvent::GetNext( void )
{
        return( m_Next );
}


void CVSyncEvent::SetNext( IMBoardListItem *item )
{
        m_Next = item;

        return;
}


HALEVENTTYPE CVSyncEvent::GetEventType( void )
{
        return( m_EventType );
}



void CVSyncEvent::Advice( void *pData )
{
        HW_DEVICE_EXTENSION *pHwDevExt;
        pHwDevExt = m_pHwDevExt;
        PKSEVENT_ENTRY pEvent, pLast;
        PMYTIME pTim;

        LONGLONG     MinIntTime;
        LONGLONG     strmTime;
        ULONGLONG    sysTime;

        // do this process every 5 Vsyncs.
        if( m_Vcount<=5 ){
            m_Vcount++;
            return;
        }
        m_Vcount = 0;

        sysTime = pHwDevExt->ticktime.GetSystemTime();
        
        if( !pHwDevExt || !pHwDevExt->pstroAud || !pHwDevExt->pstroSP ){
            return;
        }

        strmTime = pHwDevExt->ticktime.GetStreamTime();

        //
        // loop through all time_mark events
        //
        pEvent = NULL;
        pLast = NULL;

        while((pEvent = StreamClassGetNextEvent( pHwDevExt,
                                    pHwDevExt->pstroAud,
                                    (GUID *)&KSEVENTSETID_Clock,
                                    KSEVENT_CLOCK_POSITION_MARK,
                                    pLast)) != NULL )
        {
            if( ((PKSEVENT_TIME_MARK)(pEvent+1))->MarkTime <= strmTime ){
                //
                // signal the event here
                //

                StreamClassStreamNotification( SignalStreamEvent,
                                    pHwDevExt->pstroAud,
                                    pEvent );
            }
            pLast = pEvent;
        }

        //
        // loop through all time_interval events
        //

        pEvent = NULL;
        pLast = NULL;

        while( (pEvent = StreamClassGetNextEvent( pHwDevExt,
                            pHwDevExt->pstroAud,
                            (GUID *)&KSEVENTSETID_Clock,
                            KSEVENT_CLOCK_INTERVAL_MARK,
                            pLast)) !=NULL )
        {
        //
        // check if this event has been used for this interval yet
        //

        pTim = ((PMYTIME)(pEvent + 1 ));

        if( pTim && pTim->tim.Interval ){
            if( pTim->tim.TimeBase <= strmTime){
                MinIntTime = (strmTime - pTim->tim.TimeBase)/pTim->tim.Interval;
                MinIntTime *= pTim->tim.Interval;
                MinIntTime += pTim->tim.TimeBase;

                if( MinIntTime > pTim->LastTime ){
                    //
                    // signal the event here
                    //
                    StreamClassStreamNotification( SignalStreamEvent,
                                        pHwDevExt->pstroAud,
                                        pEvent );
                    pTim->LastTime = strmTime;
                }
            }
        }else{
            ;
            DBG_BREAK();
        }
        pLast = pEvent;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\mixhal.cpp ===
//***************************************************************************
//
//	FileName:
//		$Workfile: mixhal.cpp $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.WDM/mixhal.cpp 65    99/03/02 11:03a Yagi $
// $Modtime: 99/03/02 10:26a $
// $Nokeywords:$
//***************************************************************************
//     Date    |   Author     |  Description
//  -----------+--------------+--------------------------------------------
//  1998.03.27 |  Hideki Yagi | Add SetDataDirection method.
//

//***************************************************************************
//	
//***************************************************************************

#include "includes.h"
#include "timeout.h"
#include "ioif.h"
#include "zivachip.h"
#include "adv.h"
#include "mixhal.h"
// by oka
#include "userdata.h"
#include "zivabrd.h"


//---------------------------------------------------------------------------
//	CMixHALStream Constructor
//---------------------------------------------------------------------------

CMixHALStream::CMixHALStream( void ): m_pZiVA(NULL), m_pKernelObj( NULL ), m_pioif(NULL), m_pZiVABoard( NULL )
{
	pQueuedBuff[0] = NULL;
	pQueuedBuff[1] = NULL;
	fCanSendData = FALSE;
	fCanDMA = FALSE;
	m_StreamState = StreamStop;
};

//---------------------------------------------------------------------------
//	CMixHALStream::Init
//---------------------------------------------------------------------------

void CMixHALStream::Init( CZiVA *pZiVA, IKernelService *pKernelObj, CIOIF *pioif , CMPEGBoardHAL *pZiVABoard)
{
	pQueuedBuff[0] = NULL;
	pQueuedBuff[1] = NULL;
	m_StreamState = StreamStop;

	m_pZiVA = pZiVA;
	m_pKernelObj = pKernelObj;
	m_pioif = pioif;
	m_pZiVABoard = pZiVABoard;
	fCanSendData = FALSE;
	fCanDMA = FALSE;
};


//---------------------------------------------------------------------------
//	CMixHALStream Defifo
//---------------------------------------------------------------------------
HALRESULT CMixHALStream::DeFifo( void )
{
//    if( m_StreamState == StreamPause )
//        return HAL_SUCCESS;

	// 1998/5/21 seichan
	// ݏ[`ƒʏ̃[`瓯ɌĂ΂邱Ƃ
	// ֎~邽߂ɁA݋֎~ɐݒ
	CAutoHwInt	hwintlock( m_pKernelObj );

    if( fCanDMA == FALSE )
        return HAL_SUCCESS;
        
	DWORD pQueueNum = m_DmaFifo.GetMaxSize() - m_DmaFifo.GetItemNum();
	if( pQueueNum == 0 || m_HalFifo.GetItemNum() == 0 )
		return HAL_SUCCESS;
	
	IHALBuffer *pData;
	m_HalFifo.GetItem( &pData );
	return SendToDMA( pData );
};


//---------------------------------------
// CMixHALStream::SendData
//---------------------------------------
HALRESULT CMixHALStream::SendData( IHALBuffer *pData )
{
	ASSERT( m_pioif != NULL );
	ASSERT( pData != NULL );


	DWORD QueueNum;
	GetAvailableQueue( &QueueNum );
	if( QueueNum == 0 || fCanSendData == FALSE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	if( m_HalFifo.AddItem( pData ) == FALSE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	return DeFifo();
};

//---------------------------------------
// CMixHALStream::SendToDMA
//---------------------------------------
HALRESULT CMixHALStream::SendToDMA( IHALBuffer *pData )
{
	ASSERT( m_pioif != NULL );
	ASSERT( pData != NULL );

/*
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};
*/

	DWORD i;

	for( i = 0 ; i < ZIVA_QUEUE_SIZE; i ++ )
	{
		if( pQueuedBuff[i] == NULL )
			break;
	};
	if( i == ZIVA_QUEUE_SIZE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	pQueuedBuff[i] = pData;

#ifdef _WDMDDK_NONEED_CAUSE_FIXED_BY_UCODE
	// ZiVA 1.1WDMŃj[܂\łȂ
	{
		UCHAR *Buffer = pData->GetLinBuffPointer();

		ASSERT( Buffer != NULL );
		
		if( Buffer != NULL )
		{
			// SCR check
			if(		((Buffer[4] & 0x44) == 0x44 )
				&&	((Buffer[6] & 0x04) == 0x04 )
				&&	((Buffer[8] & 0x04) == 0x04 )
				&&	((Buffer[9] & 0x01) == 0x01 ) )
			{
				DWORD	SCR = 0;
				SCR += ((Buffer[4] & 0x03) >> 0) << 28;
				SCR += ((Buffer[5] & 0xff) >> 0) << 20;
				SCR += ((Buffer[6] & 0xf8) >> 3) << 15;
				SCR += ((Buffer[6] & 0x03) >> 0) << 13;
				SCR += ((Buffer[7] & 0xff) >> 0) <<  5;
				SCR += ((Buffer[8] & 0xf8) >> 3) <<  0;

/*
				DWORD	PTS = 0;

				if( (Buffer[14+7] & 0x80 ) != 0 )		// check PTS_DTS Flags
				{
					PTS = ( ( Buffer[14+9] >> 1 ) & 0x7 ) << 30;		// 32-30
					PTS |= ( ( Buffer[14+10] >> 0 ) & 0xff ) << 22;	// 29-22
					PTS |= ( ( Buffer[14+11] >> 1 ) & 0x7f ) << 15;	// 21-15
					PTS |= ( ( Buffer[14+12] >> 0 ) & 0xff ) << 7;	// 14-7
					PTS |= ( ( Buffer[14+13] >> 1 ) & 0x7f ) << 0;	// 6-0

					if( Buffer[14+3] == 0xe0 )
						DBG_PRINTF((" [%04d]SCR = 0x%x  PTS = 0x%x Video \r\n",BuffCount, SCR,PTS  ));
					else
						DBG_PRINTF((" [%04d]SCR = 0x%x  PTS = 0x%x (0x%x)\r\n",BuffCount, SCR,PTS,Buffer[14+3]  ));
				}
				else
				{
					if( Buffer[14+3] == 0xe0 )
						DBG_PRINTF((" [%04d]SCR = 0x%x Video \r\n", BuffCount, SCR ));
					else
						DBG_PRINTF((" [%04d]SCR = 0x%x (0x%x)\r\n", BuffCount, SCR,Buffer[14+3]  ));
				};
*/
				if( SCR < 500 *90 )
				{
					// set scr = 0 !!!!
					Buffer[4] = 0x44;
					Buffer[5] = 0x00;
					Buffer[6] = 0x04;
					Buffer[7] = 0x00;
					Buffer[8] = 0x04;
					Buffer[9] = 0x01;
				};
			}
			else
			{
				DBG_PRINTF((" mixhal: SCR CHECK ERROR !!! LINE=%d\r\n", __LINE__ ));
				DBG_BREAK();
			};
		};
	};
#endif

	switch( i )
	{
		case 0:
			// Select DMA0
			m_pioif->luke2.IO_CONT &= 0xFFFFFFF8;
			break;
		case 1:
			// Select DMA1
			m_pioif->luke2.IO_CONT = ( m_pioif->luke2.IO_CONT & 0xFFFFFFF8 ) | 0x04;
			break;
		default:
			DBG_BREAK();
			return HAL_ERROR;
	};
	
	m_pioif->luke2.IO_MADR = (DWORD)pData->GetBuffPointer();
	m_pioif->luke2.IO_MTC = pData->GetSize() -1;

	switch( i )
	{
		case 0:
			// Start DMA0
			m_DmaFifo.AddItem( 0 );
			m_pioif->luke2.IO_CONT = ( m_pioif->luke2.IO_CONT & 0xFFFFFFF8 ) | 0x01;
			break;
		case 1:
			// Start DMA1
			m_DmaFifo.AddItem( 1 );
			m_pioif->luke2.IO_CONT = ( m_pioif->luke2.IO_CONT & 0xFFFFFFF8 ) | 0x04 | 0x02;
			break;
		default:
			DBG_BREAK();
			return HAL_ERROR;
	};

	return HAL_SUCCESS;
};

//---------------------------------------
// CMixHALStream::SetTransferMode
//---------------------------------------
HALRESULT CMixHALStream::SetTransferMode( HALSTREAMMODE dwStreamMode )
{
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	switch( dwStreamMode )
	{
		case HALSTREAM_DVD_MODE:
			if( ZiVADVDMode() == FALSE )
			{
				DBG_BREAK();
				return HAL_ERROR;
			};
			break;
		default:
			return HAL_NOT_IMPLEMENT;
	}

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::GetAvailableQueue
//---------------------------------------
HALRESULT CMixHALStream::GetAvailableQueue( DWORD *pQueueNum )
{
	ASSERT( m_pKernelObj != NULL );

	CAutoHwInt	hwintlock( m_pKernelObj );

	*pQueueNum = m_HalFifo.GetMaxSize() - m_HalFifo.GetItemNum();

//	*pQueueNum = m_DmaFifo.GetMaxSize() - m_DmaFifo.GetItemNum();

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetPlayNormal
//---------------------------------------
HALRESULT CMixHALStream::SetPlayNormal( void )
{
	ASSERT( m_pZiVA != NULL );
	
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	VideoProperty_SkipFieldControl_Value  ContData;
	m_pZiVABoard->GetVideoProperty_SkipFieldControl( &ContData );
	if( ContData == SkipFieldControl_On )
		m_pZiVA->INT_MASK = m_pZiVABoard->GetEventIntMask() | ZIVA_INT_VSYNC;
	else
		m_pZiVA->INT_MASK = m_pZiVABoard->GetEventIntMask();


	if( ZIVA_STATE_PLAY != m_pZiVA->PROC_STATE )
		m_pZiVA->Resume();

	DWORD Volume;
	m_pZiVABoard->GetAudioProperty_Volume( (PVOID)&Volume );
	m_pZiVABoard->SetAudioProperty_Volume( (PVOID)&Volume );

	if( ZiVAStatusWait( ZIVA_STATE_PLAY ) == FALSE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	fCanSendData = TRUE;
	fCanDMA = TRUE;
	m_StreamState = StreamPlay;

	DeFifo();

	
	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetPlaySlow
//---------------------------------------
HALRESULT CMixHALStream::SetPlaySlow( DWORD SlowFlag )
{
	ASSERT( m_pZiVA != NULL );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	if( (SlowFlag>31)||(SlowFlag<2) )
		return HAL_INVALID_PARAM;


	// ZiVA support 3<=param<=32, & 1.5<=speed<=16
	DWORD  SlowSpeed;
	SlowSpeed = SlowFlag * 2;
	if( SlowSpeed > 32 )
			SlowSpeed = 32;

	m_pZiVA->AUDIO_ATTENUATION = 0x96;	// Audio Mute
	m_pZiVA->INT_MASK = m_pZiVABoard->GetEventIntMask();

	VideoProperty_TVSystem_Value TvSystem = TV_NTSC;
	m_pZiVABoard->GetVideoProperty_TVSystem( &TvSystem );
	
	if( TvSystem == TV_NTSC )
		m_pZiVA->SlowMotion( SlowSpeed, 3 );
	else
		m_pZiVA->SlowMotion( SlowSpeed, 1 );
	
	if( ZiVAStatusWait( ZIVA_STATE_SLOWMOTION ) == FALSE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	fCanSendData = TRUE;
	fCanDMA = TRUE;
	m_StreamState = StreamSlow;

	DeFifo();

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetPlayPause
//---------------------------------------
HALRESULT CMixHALStream::SetPlayPause( void )
{
	ASSERT( m_pZiVA != NULL );
	
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};


	m_pZiVA->AUDIO_ATTENUATION = 0x96;	// Audio Mute

	if( m_StreamState == StreamStop )
	{
//#ifdef _WDMDDK_
//        CAutoHwInt  hwintlock( m_pKernelObj );
//#endif
		// wait play 
		if( m_pZiVABoard->m_NeedPowerOnDelay == TRUE  )
		{
			m_pZiVABoard->m_NeedPowerOnDelay = FALSE;
			DWORD CurrTime;
			m_pKernelObj->GetTickCount( &CurrTime );
			if( CurrTime < m_pZiVABoard->m_PowerOnTime + 600 )
				m_pKernelObj->Sleep( m_pZiVABoard->m_PowerOnTime + 600 - CurrTime );
		};

		for( int counter = 0 ; counter < 5 ; counter ++ )
		{
			// Play Command Send to ZIVA
//#ifndef _WDMDDK_
			m_pKernelObj->DisableHwInt();
//#endif
			m_pZiVA->INT_MASK = ZIVA_INT_RDYD;
			m_pZiVABoard->ClearRDYDEvent();
//#ifndef _WDMDDK_
			m_pKernelObj->EnableHwInt();
//#endif
			m_pZiVA->Play( 1, 0, 0, 0 );

			// Wait RDYD interrupt
			if( m_pZiVABoard->WaitRDYD() == FALSE )
			{
				DBG_PRINTF( ( "mixhal: SetPlayPause FAIL. LINE = %d\n", __LINE__ ));
				DBG_BREAK();
				if( counter == 4 )
					return HAL_ERROR;

				DBG_PRINTF( ( "---------------- retry %d --------------\n", counter ));
				// Abort Command Send to ZIVA
//#ifndef _WDMDDK_
				m_pKernelObj->DisableHwInt();
//#endif
				m_pZiVA->INT_MASK = ZIVA_INT_ENDC;
				m_pZiVABoard->ClearENDCEvent();
//#ifndef _WDMDDK_
				m_pKernelObj->EnableHwInt();
//#endif
			    m_pZiVA->Abort( 1 );

				// Wait ENDC interrupt
				if( m_pZiVABoard->WaitENDC() == FALSE )
				{
					DBG_PRINTF( ( "mixhal: SetPlayStop FAIL. LINE = %d\n", __LINE__ ));
					DBG_BREAK();
					return HAL_ERROR;
				};
			}
			else
			{
				DBG_PRINTF( ( "RDYD OK!\n"));
				break;
			};
		};
		m_pZiVA->INT_MASK = (m_pZiVABoard->GetEventIntMask() & (~ZIVA_INT_EPTM));
		fCanDMA = FALSE;

//#ifdef _WDMDDK_
//        m_pZiVABoard->HALHwInterrupt();
//#endif
	}
	else
	{
		m_pZiVA->INT_MASK = (m_pZiVABoard->GetEventIntMask() & (~ZIVA_INT_EPTM));

		m_pZiVA->Pause( 3 );

		if( ZiVAStatusWait( ZIVA_STATE_PAUSE ) == FALSE )
		{
			DBG_BREAK();
			return HAL_ERROR;
		};
		fCanDMA = TRUE;

	};
	
	fCanSendData = TRUE;
	m_StreamState = StreamPause;

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetPlayScan
//---------------------------------------
HALRESULT CMixHALStream::SetPlayScan( DWORD ScanFlag )
{
	ASSERT( m_pZiVA != NULL );
	
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->AUDIO_ATTENUATION = 0x96;	// Audio Mute

	// Ziva Playback timing host interrupt enable   NV, GOP-V
	m_pZiVA->INT_MASK = (m_pZiVABoard->GetEventIntMask() & (~ZIVA_INT_EPTM));

	switch( ScanFlag )
	{
		case ScanOnlyI:
			m_pZiVA->Scan( 0, 0, 3 );
			break;

		case ScanIandP:
			m_pZiVA->Scan( 1, 0, 3 );
			break;

		default:
			return HAL_ERROR;
	};

	m_pZiVA->SelectStream( 2, 0xffff );
	m_pZiVA->SelectStream( 1, 0xffff );

	fCanSendData = TRUE;
	fCanDMA = TRUE;
	m_StreamState = StreamScan;
	DeFifo();
	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetPlaySingleStep
//---------------------------------------
HALRESULT CMixHALStream::SetPlaySingleStep( void )
{
	ASSERT( m_pZiVA != NULL );
	
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->AUDIO_ATTENUATION = 0x96;	// Audio Mute
	m_pZiVA->INT_MASK = m_pZiVABoard->GetEventIntMask();

	VideoProperty_TVSystem_Value TvSystem = TV_NTSC;
	m_pZiVABoard->GetVideoProperty_TVSystem( &TvSystem );
	
	if( TvSystem == TV_NTSC )
		m_pZiVA->SingleStep( 3 );
	else
		m_pZiVA->SingleStep( 1 );

	if( ZiVAStatusWait( ZIVA_STATE_PAUSE ) == FALSE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	fCanSendData = TRUE;
	fCanDMA = TRUE;
	m_StreamState = StreamSingleStep;

	DeFifo();
	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetPlayStop
//---------------------------------------
HALRESULT CMixHALStream::SetPlayStop( void )
{
	DBG_PRINTF( ( "mixhal: SetPlayStop called.\n"));
	ASSERT( m_pZiVA != NULL );
	ASSERT( m_pioif != NULL );
	
	fCanSendData = FALSE;

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		IHALBuffer *pFinishBuff;

		DWORD Num, DmaNo ;
		
		Num = m_DmaFifo.GetItemNum();
		for( DWORD i = 0 ; i < Num ; i ++ )
		{
			m_DmaFifo.GetItem( &DmaNo );
			pFinishBuff = DMAFinish( DmaNo );
			if( pFinishBuff != NULL )
				m_pZiVABoard->NotifyEvent( &m_pZiVABoard->m_SendDataEventList , (VOID *)pFinishBuff );
		};

		m_pZiVABoard->m_NaviCount = 0;
		m_DmaFifo.Flush();

		Num = m_HalFifo.GetItemNum();
		for( i = 0 ; i < Num ; i ++ )
		{
			m_HalFifo.GetItem( &pFinishBuff );
			if( pFinishBuff != NULL )
				m_pZiVABoard->NotifyEvent( &m_pZiVABoard->m_SendDataEventList , (VOID *)pFinishBuff );
		};
		m_HalFifo.Flush();

		m_StreamState = StreamStop;
    	fCanDMA = FALSE;

		return HAL_SUCCESS;
	};

	m_pZiVA->AUDIO_ATTENUATION = 0x96;	// Audio Mute
	m_pKernelObj->Sleep( 40 );			// wait 40 msec for Audio Mute

//#ifdef _WDMDDK_
//    {
//        CAutoHwInt  hwintlock( m_pKernelObj );
//#endif
	// Abort Command Send to ZIVA
//#ifndef _WDMDDK_
	m_pKernelObj->DisableHwInt();
//#endif
	m_pZiVA->INT_MASK = ZIVA_INT_ENDC;
	m_pZiVABoard->ClearENDCEvent();
//#ifndef _WDMDDK_
	m_pKernelObj->EnableHwInt();
//#endif
    m_pZiVA->Abort( 1 );

	// Wait ENDC interrupt
	if( m_pZiVABoard->WaitENDC() == FALSE )
	{
		DBG_PRINTF( ( "mixhal: SetPlayStop FAIL. LINE = %d\n", __LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	// Wait IDLE STATE
	CTimeOut	TimeOutObj( 1000, 10, m_pKernelObj );
	while( TRUE )
	{
		// Check IDLE State
		if( m_pZiVA->PROC_STATE == (DWORD)ZIVA_STATE_IDLE )
			break;

		TimeOutObj.Sleep();
		if( TimeOutObj.CheckTimeOut() == TRUE )
		{
			DBG_PRINTF( ( "mixhal: SetPlayStop FAIL. ZiVA Status = 0x%x\n", m_pZiVA->PROC_STATE ));
			DBG_BREAK();
			return HAL_ERROR;
		};
	};
	

	// Send DMA ABORT Command to LUKE2
//#ifndef _WDMDDK_
	m_pKernelObj->DisableHwInt();
//#endif
	m_pZiVABoard->ClearMasterAbortEvent();
	m_pioif->luke2.IO_INTF |= 0x04;		// DMA abort
	m_pZiVA->INT_MASK = 0x0000;			// disable all ziva interrupt
//#ifndef _WDMDDK_
	m_pKernelObj->EnableHwInt();
//#endif

	// Wait Master Abort interrupt
	if( m_pZiVABoard->WaitMasterAbort() == FALSE )
	{
		DBG_PRINTF( ( "mixhal: SetPlayStop FAIL. LINE = %d\n", __LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

//#ifdef _WDMDDK_
//        m_pZiVABoard->HALHwInterrupt();
//    };
//#endif

	ASSERT( m_DmaFifo.GetItemNum() == 0 );
	ASSERT( m_HalFifo.GetItemNum() == 0 );

	fCanDMA = FALSE;
	m_StreamState = StreamStop;

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::CPPInit
//---------------------------------------
HALRESULT CMixHALStream::CPPInit( void )
{
	ASSERT( m_pZiVA != NULL );
	ASSERT( m_pKernelObj != NULL );
	ASSERT( m_StreamState == StreamStop );

    m_CppState = CppState_OK;
	
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

//#ifdef _WDMDDK_
//    {
//        CAutoHwInt  hwintlock( m_pKernelObj );
//#endif
	// Abort Command Send to ZIVA
//#ifndef _WDMDDK_
	m_pKernelObj->DisableHwInt();
//#endif
	m_pZiVA->INT_MASK = ZIVA_INT_ENDC;
	m_pZiVABoard->ClearENDCEvent();
//#ifndef _WDMDDK_
	m_pKernelObj->EnableHwInt();
//#endif
    m_pZiVA->Abort( 1 );

	// Wait ENDC interrupt
	if( m_pZiVABoard->WaitENDC() == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Abort FAIL. LINE = %d\n", __LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	CTimeOut	TimeOutObj( 1000, 10, m_pKernelObj );

	while( TRUE )
	{
		// Check IDLE State
		if( m_pZiVA->PROC_STATE == (DWORD)ZIVA_STATE_IDLE )
			break;

		TimeOutObj.Sleep();
		if( TimeOutObj.CheckTimeOut() == TRUE )
		{
			DBG_PRINTF( ( "mixhal: CPPInit FAIL. ZiVA Status = 0x%x\n", m_pZiVA->PROC_STATE ));
			DBG_BREAK();
			return HAL_ERROR;
		};
	};
//#ifdef _WDMDDK_
//        m_pZiVABoard->HALHwInterrupt();
//    };
//#endif
	
	m_pZiVA->CppInit( m_pZiVA->KEY_ADDRESS );	// Key Addr Setup
	m_pZiVA->KEY_LENGTH = 0x1;					// 2048 bytes

	m_pZiVA->TransferKey( 1 , 0 );				// TransferKey( 1, 1 )?

//    m_pZiVA->KEY_COMMAND = SET_DECRYPTION_MODE;
	m_pZiVA->KEY_COMMAND = SET_PASS_THROUGH_MODE;
        m_pZiVA->HOST_OPTIONS |= 0x04;   	// add by H. Yagi  99.03.02
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

    ZiVACopyProtectStatusCheck( COMMAND_COMPLETE );

	m_pZiVA->KEY_COMMAND = RESET_AUTHENTICATION;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	ZiVACopyProtectStatusCheck( COMMAND_COMPLETE );

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::GetDriveChallenge
//---------------------------------------
HALRESULT CMixHALStream::GetDriveChallenge( UCHAR *pDriveChallenge )
{
	ASSERT( m_pZiVA != NULL );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->TransferKey( 1 , 0 );  	// TransferKey( 1, 1 )?

	m_pZiVA->KEY_COMMAND = GET_CHALLENGE_DATA;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	// wait for KEY_COMMAND complete.
	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	pDriveChallenge[0]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_9;
	pDriveChallenge[1]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_8;
	pDriveChallenge[2]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_7;
	pDriveChallenge[3]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_6;
	pDriveChallenge[4]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_5;
	pDriveChallenge[5]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_4;
	pDriveChallenge[6]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_3;
	pDriveChallenge[7]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_2;
	pDriveChallenge[8]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_1;
	pDriveChallenge[9]  = (BYTE)m_pZiVA->DRIVE_CHALLENGE_0;

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetDriveResponse
//---------------------------------------
HALRESULT CMixHALStream::SetDriveResponse( UCHAR *pDriveResponse )
{
	ASSERT( m_pZiVA != NULL );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->DRIVE_RESULT_4 = pDriveResponse[0];
	m_pZiVA->DRIVE_RESULT_3 = pDriveResponse[1];
	m_pZiVA->DRIVE_RESULT_2 = pDriveResponse[2];
	m_pZiVA->DRIVE_RESULT_1 = pDriveResponse[3];
	m_pZiVA->DRIVE_RESULT_0 = pDriveResponse[4];

	m_pZiVA->KEY_COMMAND = SEND_RESPONSE_DATA;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetDecoderChallenge
//---------------------------------------
HALRESULT CMixHALStream::SetDecoderChallenge( UCHAR *pDecoderChallenge )
{
	ASSERT( m_pZiVA != NULL );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->DECODER_CHALLENGE_9 = pDecoderChallenge[0];
	m_pZiVA->DECODER_CHALLENGE_8 = pDecoderChallenge[1];
	m_pZiVA->DECODER_CHALLENGE_7 = pDecoderChallenge[2];
	m_pZiVA->DECODER_CHALLENGE_6 = pDecoderChallenge[3];
	m_pZiVA->DECODER_CHALLENGE_5 = pDecoderChallenge[4];
	m_pZiVA->DECODER_CHALLENGE_4 = pDecoderChallenge[5];
	m_pZiVA->DECODER_CHALLENGE_3 = pDecoderChallenge[6];
	m_pZiVA->DECODER_CHALLENGE_2 = pDecoderChallenge[7];
	m_pZiVA->DECODER_CHALLENGE_1 = pDecoderChallenge[8];
	m_pZiVA->DECODER_CHALLENGE_0 = pDecoderChallenge[9];

	m_pZiVA->KEY_COMMAND = SEND_CHALLENGE_DATA;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::GetDecoderResponse
//---------------------------------------
HALRESULT CMixHALStream::GetDecoderResponse( UCHAR *pDecoderResponse )
{
	ASSERT( m_pZiVA != NULL );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->KEY_COMMAND = GET_RESPONSE_DATA;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	pDecoderResponse[0] = (BYTE)m_pZiVA->DECODER_RESULT_4;
	pDecoderResponse[1] = (BYTE)m_pZiVA->DECODER_RESULT_3;
	pDecoderResponse[2] = (BYTE)m_pZiVA->DECODER_RESULT_2;
	pDecoderResponse[3] = (BYTE)m_pZiVA->DECODER_RESULT_1;
	pDecoderResponse[4] = (BYTE)m_pZiVA->DECODER_RESULT_0;

	return HAL_SUCCESS;
};
//---------------------------------------
// CMixHALStream::SetDiskKey
//---------------------------------------
HALRESULT CMixHALStream::SetDiskKey( UCHAR *pDiskKey )
{


	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->KEY_COMMAND = SEND_DISK_KEY;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	// wait for KEY_COMMAND complete.
	if( ZiVACopyProtectStatusCheck( READY_DKEY ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	// DATA Transfer By DMA!!

	DWORD QueueNum;
	GetAvailableQueue( &QueueNum );

	// check DMA 
	if( QueueNum != ZIVA_QUEUE_SIZE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};
	// Check MY DMA Buffer
	if( m_pZiVABoard->GetDMABufferPhysicalAddr() == 0 
		||  m_pZiVABoard->GetDMABufferLinearAddr() == 0 )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	UCHAR *pDMABuffer = (UCHAR *)m_pZiVABoard->GetDMABufferLinearAddr();
	// copy to My DMA Buffer
    for( int i = 0 ; i < 2048 ; i ++ )
		pDMABuffer[i] = pDiskKey[i];

//// output debug info.
//    DBG_PRINTF( ("!!!!!!! Disc Key Transfer\n\r") );
//    ULONG k, j;
//    for( k=0; k<2048; ){
//        DBG_PRINTF( ("DISCKEY: ") );
//        for( j=0; j<8 && k<2048; j++, k++ ){
//            DBG_PRINTF( ("0x%02x ", (UCHAR)pDMABuffer[k] ) );
//        }
//        DBG_PRINTF( ("\n\r") );
//    }


	// Select DMA0
	m_pioif->luke2.IO_CONT &= 0xFFFFFFF8;
	m_pioif->luke2.IO_MADR = m_pZiVABoard->GetDMABufferPhysicalAddr();
	m_pioif->luke2.IO_MTC = 2048 -1;
	// DMA0 START!!
	m_pioif->luke2.IO_CONT = ( m_pioif->luke2.IO_CONT & 0xFFFFFFF8 ) | 0x01;

	// wait for transfering Disk-Key
	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
        m_CppState = CppState_Error;      // Yagi 98.02.09
//        return HAL_ERROR;             // Yagi 98.02.09
	};
	
	m_pZiVA->KEY_COMMAND = RESET_AUTHENTICATION;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	// wait KEY_COMMAND
	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

    if( m_CppState!=CppState_OK ){
        return( HAL_ERROR );
    }else{
        return HAL_SUCCESS;
    }
};
//---------------------------------------
// CMixHALStream::SetTitleKey
//---------------------------------------
HALRESULT CMixHALStream::SetTitleKey( UCHAR *pTitleKey )
{
	ASSERT( m_pZiVA != NULL );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	m_pZiVA->TITLE_KEY_4 = pTitleKey[1];
	m_pZiVA->TITLE_KEY_3 = pTitleKey[2];
	m_pZiVA->TITLE_KEY_2 = pTitleKey[3];
	m_pZiVA->TITLE_KEY_1 = pTitleKey[4];
	m_pZiVA->TITLE_KEY_0 = pTitleKey[5];

	m_pZiVA->KEY_COMMAND = SEND_TITLE_KEY;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;


	// wait foe SEND_TITLE_KEY complete.
	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

// If you remove these commented mark( // ), you can play the bad disk-key
// title(Not encrypted but copy protected info).  Yagi 98.02.09
// 98.05.29 H.Yagi
//    if( m_CppState != CppState_Error ){
        m_pZiVA->KEY_COMMAND = SET_DECRYPTION_MODE;
//    }else{
//        m_pZiVA->KEY_COMMAND = SET_PASS_THROUGH_MODE;
//        m_pZiVA->HOST_OPTIONS |= 0x04;
//    }
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	m_pZiVA->KEY_COMMAND = RESET_AUTHENTICATION;
	m_pZiVA->KEY_STATUS = SET_NEW_COMMAND;

	if( ZiVACopyProtectStatusCheck( COMMAND_COMPLETE ) == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};
	
	return HAL_SUCCESS;
};

//---------------------------------------
// CMixHALStream::ZiVACopyProtectStatusCheck
//---------------------------------------
BOOL CMixHALStream::ZiVACopyProtectStatusCheck( COPY_PROTECT_COMMAND Cmd )
{
	ASSERT( m_pKernelObj != NULL );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_PRINTF( ( "mixhal: Copyprotect ERROR!! line=%d\n",__LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	CTimeOut	TimeOut( 1000, 10 , m_pKernelObj );
	while( TRUE )
	{
		if( (DWORD)Cmd == m_pZiVA->KEY_STATUS )
			return TRUE;

		TimeOut.Sleep();            // Sleep

        if( TimeOut.CheckTimeOut() == TRUE ){
			DBG_PRINTF(("CPP STATUS ERROR = 0x%x\n", m_pZiVA->KEY_STATUS ));
			DBG_BREAK();
			return FALSE;
        };
    };
//    DBG_BREAK();
//    return FALSE;
};

//---------------------------------------
// CMixHALStream::ZiVAStatusWait
//---------------------------------------
BOOL	CMixHALStream::ZiVAStatusWait( DWORD Status )
{
	// debug debug
	return TRUE;

	// check power state

	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	ASSERT( m_pKernelObj != NULL );

	CTimeOut	TimeOut( 1000, 10 , m_pKernelObj );
	while( TRUE )
	{
		if( Status == m_pZiVA->PROC_STATE )
			return TRUE;

		TimeOut.Sleep();            // Sleep

        if( TimeOut.CheckTimeOut() == TRUE ){
			DBG_PRINTF(("ZIVA STATUS ERROR = 0x%x\n", m_pZiVA->PROC_STATE ));
			DBG_BREAK();
			return FALSE;
        };
    };
	DBG_BREAK();
	return FALSE;

};

//---------------------------------------
// CMixHALStream::DMAFinish
//---------------------------------------
IHALBuffer	*CMixHALStream::DMAFinish( DWORD dwDMA_No )
{
	IHALBuffer	*pRetBuff;
	if( ZIVA_QUEUE_SIZE <= dwDMA_No || pQueuedBuff[dwDMA_No] == NULL )
		return NULL;

	pRetBuff = pQueuedBuff[dwDMA_No ];
	pQueuedBuff[dwDMA_No] = NULL;
	return pRetBuff;
};



//---------------------------------------
// CMixHALStream::ZiVADVDMode
//---------------------------------------
BOOL	CMixHALStream::ZiVADVDMode( void )
{
	ASSERT( m_pZiVA != NULL );
	ASSERT( m_StreamState == StreamStop );

	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return FALSE;
	};

	// Audio Mute
//    m_pioif->luke2.IO_CONT = ( m_pioif->luke2.IO_CONT & 0xffffff00) | 0x40;
    m_pioif->luke2.IO_CONT = ( m_pioif->luke2.IO_CONT & 0xffffff00);  // *Luke2Z specification is changed.
    m_pioif->luke2.IO_PSCNT = 0x02;              // I don't decide insert it
                                                // in this place....
//#ifdef _WDMDDK_
//    {
//        CAutoHwInt  hwintlock( m_pKernelObj );
//#endif
	// Abort Command Send to ZIVA
//#ifndef _WDMDDK_
	m_pKernelObj->DisableHwInt();
//#endif
	m_pZiVA->INT_MASK = ZIVA_INT_ENDC;
	m_pZiVABoard->ClearENDCEvent();
//#ifndef _WDMDDK_
	m_pKernelObj->EnableHwInt();
//#endif
    m_pZiVA->Abort( 1 );

	// Wait ENDC interrupt
	if( m_pZiVABoard->WaitENDC() == FALSE )
	{
		DBG_PRINTF( ( "mixhal: Abort FAIL. LINE = %d\n", __LINE__ ));
		DBG_BREAK();
		return HAL_ERROR;
	};

	CTimeOut	TimeOutObj( 1000, 10, m_pKernelObj );

	while( TRUE )
	{
		// Check IDLE State
		if( m_pZiVA->PROC_STATE == (DWORD)ZIVA_STATE_IDLE )
			break;

		TimeOutObj.Sleep();
		if( TimeOutObj.CheckTimeOut() == TRUE )
		{
			DBG_PRINTF( ( "ZiVADVDMode ERROR !!! ZiVA Status = 0x%x\n", m_pZiVA->PROC_STATE ));
			DBG_BREAK();
			return HAL_ERROR;
		};
	};
//#ifdef _WDMDDK_
//        m_pZiVABoard->HALHwInterrupt();
//    };
//#endif
	
//	m_pZiVA->VIDEO_ENV_CHANGE	= 0x01;					// NTSC mode

	m_pZiVA->BITSTREAM_TYPE 	= 0x00;					// OK?
	m_pZiVA->BITSTREAM_SOURCE	= 0x00;					// OK?
	m_pZiVA->SD_MODE			= 0x0D;					// OK?
	m_pZiVA->CD_MODE			= 0x24;					// OK?
	m_pZiVA->AV_SYNC_MODE = 0x01;   					// SYNC_A/V
	m_pZiVA->DISPLAY_ASPECT_RATIO = 0x00;				// outout is 4:3
	m_pZiVA->NewPlayMode();

	// set several data for Audio Parameters.
	// Note that these setting are implemented here now for only
	// H/W debug.
	m_pZiVA->AUDIO_CONFIG = 0x06;
	m_pZiVA->AUDIO_DAC_MODE = 0x8;
//    m_pZiVA->AUDIO_CLOCK_SELECTION = 0x00;              // FS384
    m_pZiVA->AUDIO_CLOCK_SELECTION = 0x01;              // FS384
	m_pZiVA->IEC_958_DELAY = 0x0;
	m_pZiVA->AUDIO_ATTENUATION = 0x96;					// Audio Mute
	m_pZiVA->AU_CLK_INOUT = 0x01;   					// Toshiba special

	m_pZiVA->HIGHLIGHT_ENABLE = 0x00;		// ziva Hilight engine disable.

	// AC-3 setting.
	// Note that these setting are implemented here now for only
	// H/W debug.
//		m_pZiVA->AC3_OUT_MODE = 0x07;
//    m_pZiVA->AC3_OUTPUT_MODE = 0x02;
    m_pZiVA->AC3_OUTPUT_MODE = 0x00;            // Dolby Pro-Logic
	m_pZiVA->AC3_OPERATIONAL_MODE = 0x0; 						// OK?

	m_pZiVA->NEW_AUDIO_CONFIG = 0x01;

	CTimeOut		TimeOut2( 1000, 10, m_pKernelObj );   	// wait 1s, sleep 1ms

	while( TRUE )
	{
		if( 0 ==  m_pZiVA->NEW_AUDIO_CONFIG )
			break;
		TimeOut2.Sleep();
		if( TimeOut2.CheckTimeOut()==TRUE )
		{
			DBG_BREAK();
			return FALSE;
		};

	}

	// Audio Mute Off
//    m_pioif->luke2.IO_CONT = m_pioif->luke2.IO_CONT & 0xffffffb8;
    m_pioif->luke2.IO_CONT = ( (m_pioif->luke2.IO_CONT & 0xffffffb8)|0x40 );    // *Luke2Z spec is changed.
	return TRUE;
};



//---------------------------------------
// CMixHALStream::SetDataDirection          1998.03.27 H.Yagi
//---------------------------------------
HALRESULT CMixHALStream::SetDataDirection( DirectionType DataType )
{
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

    switch( DataType )
	{
        case DataType_NormalAll:
        case DataType_OpositeAll:
        case DataType_IpicOnly:
            return HAL_NOT_IMPLEMENT;
			break;
		default:
			return HAL_NOT_IMPLEMENT;
	}

	return HAL_SUCCESS;

};


//---------------------------------------
// CMixHALStream::GetDataDirection          1998.03.27 H.Yagi
//---------------------------------------
HALRESULT CMixHALStream::GetDataDirection( DirectionType *pDataType )
{
	// check power state
	POWERSTATE PowerState;
	ASSERT( m_pZiVABoard != NULL );
	m_pZiVABoard->GetPowerState( &PowerState );

	if( PowerState == POWERSTATE_OFF )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};

	return HAL_NOT_IMPLEMENT;

};


//***************************************************************************
//	End of 
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\mixhal.h ===
//***************************************************************************
//
//	FileName:
//		$Workfile: mixhal.h $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.WDM/mixhal.h 15    98/06/23 3:13p Seichan $
// $Modtime: 98/06/23 3:12p $
// $Nokeywords:$
//***************************************************************************

#ifndef _MIXHAL_H_
#define _MIXHAL_H_

class CMPEGBoardHAL;


#define		ZIVA_QUEUE_SIZE		(2)

template<class T, class PT> class CHALFIFO
{
	private:
		T	m_datas[ ZIVA_QUEUE_SIZE ];
		DWORD	m_DataNum;
	
	public:
		CHALFIFO( )
		{
			m_DataNum = 0;
		};
		BOOL	AddItem( T No )
		{
			ASSERT( m_DataNum != ZIVA_QUEUE_SIZE );
            if( m_DataNum==ZIVA_QUEUE_SIZE )
                return  FALSE;
			m_datas[ m_DataNum ] = No;
			m_DataNum ++;
			return TRUE;
		};
		BOOL	GetItem( PT No )
		{
			ASSERT( m_DataNum != 0 );

			*No = m_datas[0];
			for( DWORD i = 0 ; i < m_DataNum -1; i ++ )
				m_datas[i] = m_datas[i+1];
			m_DataNum --;
			return TRUE;
		};
		void	Flush( void )
		{
			m_DataNum = 0;
		};
		DWORD	GetItemNum( void )
		{
			return m_DataNum;
		};
		DWORD	GetMaxSize( void )
		{
			return ZIVA_QUEUE_SIZE;
		};
};

typedef	CHALFIFO< DWORD, DWORD * >	CDMAFIFO;
typedef	CHALFIFO< IHALBuffer *,IHALBuffer ** >	CPAUSEFIFO;

typedef enum
{
	StreamStop = 0,
	StreamPlay,
	StreamScan,
	StreamPause,
	StreamSlow,
	StreamSingleStep
} StreamState;

typedef enum
{
    CppState_OK = 0,
    CppState_Error
} CppState;



//***************************************************************************
//	MixHAL Stream control class
//***************************************************************************
class CMixHALStream: public IHALStreamControl
{
	private:
		CZiVA			*m_pZiVA;
		IKernelService	*m_pKernelObj;
		CIOIF			*m_pioif;
		IHALBuffer		*pQueuedBuff[ZIVA_QUEUE_SIZE];
		CMPEGBoardHAL		*m_pZiVABoard;
		BOOL			fCanSendData;		// queueing
		BOOL            fCanDMA;            // 98.02.17
		StreamState		m_StreamState;
        CppState        m_CppState;         // Yagi 98.02.09

	private:
		BOOL	ZiVACopyProtectStatusCheck( COPY_PROTECT_COMMAND Cmd );
		BOOL	ZiVAStatusWait( DWORD Status );
		BOOL	ZiVADVDMode( void );
		HALRESULT	SendToDMA( IHALBuffer *pData );
		
	public:
		CMixHALStream( void );
		void Init( CZiVA *pZiVA , IKernelService *pKernelObj, CIOIF *pIOIF , CMPEGBoardHAL *pZiVABoard);
		IHALBuffer	*DMAFinish( DWORD dwDMA_No );
		StreamState	GetStreamState( void ){ return m_StreamState; };
		HALRESULT	DeFifo( void );

		CDMAFIFO	m_DmaFifo;
		CPAUSEFIFO	m_HalFifo;

		//---------------------------------------
		// HAL Stream Control Interface
		//---------------------------------------
		HALRESULT SendData( IHALBuffer *pData );
		HALRESULT SetTransferMode( HALSTREAMMODE StreamMode );
		HALRESULT GetAvailableQueue( DWORD *pQueueNum );
		HALRESULT SetPlayNormal( void );
		HALRESULT SetPlaySlow( DWORD SlowFlag );
		HALRESULT SetPlayPause( void );
		HALRESULT SetPlayScan( DWORD ScanFlag );
		HALRESULT SetPlaySingleStep( void );
		HALRESULT SetPlayStop( void );
		HALRESULT CPPInit( void );
		HALRESULT GetDriveChallenge( UCHAR *pDriveChallenge );
		HALRESULT SetDriveResponse( UCHAR *pDriveResponse );
		HALRESULT SetDecoderChallenge( UCHAR *pDecoderChallenge );
		HALRESULT GetDecoderResponse( UCHAR *pDecoderResponse );
		HALRESULT SetDiskKey( UCHAR *pDiskKey );
		HALRESULT SetTitleKey( UCHAR *pTitleKey );
        HALRESULT SetDataDirection( DirectionType DataType );
        HALRESULT GetDataDirection( DirectionType *pDataType );
};



#endif	// _MIXHAL_H_

//***************************************************************************
//	End of 
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\ssif.h ===
/* ===========================================================================
	Copyright(C) 1998 Toshiba Corporation
=========================================================================== */

// Media Type
#define STATIC_DATAFORMAT_TYPE_DEVIO \
	0xe994e9e0, 0xeeea, 0x11d1, 0xbe, 0x92, 0x0, 0x0, 0x39, 0x24, 0x58, 0x5

#define STATIC_DATAFORMAT_SUBTYPE_DEVIO \
	0xe994e9e1, 0xeeea, 0x11d1, 0xbe, 0x92, 0x0, 0x0, 0x39, 0x24, 0x58, 0x5

#define STATIC_DATAFORMAT_FORMAT_DEVIO \
	0xe994e9e2, 0xeeea, 0x11d1, 0xbe, 0x92, 0x0, 0x0, 0x39, 0x24, 0x58, 0x5

// Registry
//#define REGPATH_FOR_CPL "Software\\Toshiba\\DvdDecoder\\SetupData"
// #define REGPATH_FOR_WDM L"\\Registry\\Machine\\Software\\Toshiba\\DvdDecoder\\SetupData"
#define REGPATH_FOR_CPL "System\\CurrentControlSet\\Services\\ToshibaDvdDecoder\\Parameters"
#define REGPATH_FOR_WDM L"ToshibaDvdDecoder\\Parameters"

// Interface ID
#define CAP_AUDIO_DIGITAL_OUT		0x0001
#define CAP_VIDEO_DIGITAL_PALETTE	0x0002
#define CAP_VIDEO_TVOUT				0x0003
#define CAP_VIDEO_DISPMODE			0x0004

#define SET_AUDIO_DIGITAL_OUT		0x1001
#define SET_VIDEO_DIGITAL_PALETTE	0x1002
#define SET_VIDEO_TVOUT				0x1003
#define SET_VIDEO_DISPMODE			0x1004

#define SSIF_TVOUT_VGA				0
#define SSIF_TVOUT_DVD				1

#define SSIF_AUDIOOUT_DISABLE		0
#define SSIF_AUDIOOUT_AC3MPEG		1
#define SSIF_AUDIOOUT_PCM			2

#define SSIF_DISPMODE_VGA			0
#define SSIF_DISPMODE_43TV			1
#define SSIF_DISPMODE_169TV			2

// Interface structure
#pragma pack(push, 1)
typedef struct {
	DWORD	dwSize;
	DWORD	dwCmd;
//
	DWORD	dwCap;
	DWORD	dwAudioOut;
	DWORD	dwTVOut;
	struct {
			BYTE	Y[256];
			BYTE	Cr[256];
			BYTE	Cb[256];
	};
	DWORD	dwDispMode;
} CMD;
#pragma pack(pop)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\schdat.cpp ===
//**************************************************************************
//
//      Title   : SchDat.cpp
//
//      Date    : 1998.03.10    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1998.03.10   000.0000   1st making.
//
//**************************************************************************
#include    "includes.h"

#include    "hal.h"
#include    "wdmkserv.h"
#include    "mpevent.h"
#include    "classlib.h"
#include    "ctime.h"
#include    "schdat.h"
#include    "ccque.h"
#include    "ctvctrl.h"
#include	"hlight.h"
#include    "hwdevex.h"
#include    "wdmbuff.h"
#include    "dvdinit.h"


VOID    ScanCallBack( PHW_DEVICE_EXTENSION pHwDevExt );


CScheduleData::CScheduleData( void )
{
    count = 0;
    pTopSrb = pBottomSrb = NULL;

    fScanCallBack = FALSE;

#ifndef		REARRANGEMENT
	InitRearrangement();
#endif		REARRANGEMENT

}


CScheduleData::~CScheduleData( void )
{
    count = 0;
    pTopSrb = pBottomSrb = NULL;

    fScanCallBack = FALSE;
}


BOOL CScheduleData::Init( void )
{
    count = 0;
    pTopSrb = pBottomSrb = NULL;

    fScanCallBack = FALSE;
    KeInitializeEvent( &m_Event,
                        SynchronizationEvent,
                        FALSE   //TRUE,
    );
#ifndef		REARRANGEMENT
	InitRearrangement();
#endif		REARRANGEMENT
    return( TRUE );
}


BOOL CScheduleData::SendData( PHW_STREAM_REQUEST_BLOCK pSrb )

//------------------------------------packet rearrangement code--------------------------------
#ifndef		REARRANGEMENT
{
	KSSTREAM_HEADER * pHeader;
	WORD wOrderNumber = 0;
	WORD wReadPacketNumber = 0, wWdmBuffptr = 0, wDvdDataptr = 0, wSrbCounter = 0;
	WORD wLateNumber = 0;
	BOOL bLateData = FALSE;
	ULONG ulNumber = 0;

	ASSERT( pSrb != NULL );
	ASSERT( pSrb->SRBExtension != NULL );

//------------------packet partition---------------
	for( ulNumber = 0; ulNumber < pSrb->NumberOfBuffers; ulNumber++ )
	{
		pHeader = ((PKSSTREAM_HEADER)pSrb->CommandData.DataBufferArray) + ulNumber;
		wOrderNumber = (WORD)(pHeader->TypeSpecificFlags >> 16);		//get packet number

	    DBG_PRINTF( ("DVDWDM:ScheduleData::SendData-Start--- pSrb=%x m_SendPacketNumber=%x wOrderNumber=%x\n\r", pSrb,m_SendPacketNumber,wOrderNumber));

		if ((ulNumber == 0) && (pSrb->Status == STATUS_PENDING))
		{
			if (m_SendPacketNumber == 0)
			{
				m_SendPacketNumber = wOrderNumber;
				if (wOrderNumber != 0)
				{
					WORD InvalidDataCnt;
					for(InvalidDataCnt = 0; InvalidDataCnt < wOrderNumber; InvalidDataCnt++)
					{
						if( m_bDvdDataTable[InvalidDataCnt] == INVALID_DVD_DATA)
							m_bDvdDataTable[InvalidDataCnt] = INIT_DVD_DATA;
					}
				}
			}
			wReadPacketNumber = wOrderNumber;	//set original data
			wWdmBuffptr = 0;		//init packet partition counter
			SetWdmBuff(pSrb, wWdmBuffptr, wReadPacketNumber, ulNumber);

//---------------Late data check-----------
			if (((m_SendPacketNumber < 0x1000) && ((wOrderNumber < m_SendPacketNumber) || (wOrderNumber > (m_SendPacketNumber + 0xf000))))
				|| ((m_SendPacketNumber >= 0x1000) && (((m_SendPacketNumber - 0x1000) < wOrderNumber) && (wOrderNumber < m_SendPacketNumber))))
			{
				wLateNumber = wOrderNumber;
				bLateData = TRUE;
			}
		}
//---------------Set DVD data table--------
		if (pSrb->Status == STATUS_PENDING)
			m_bDvdDataTable[wOrderNumber] = VALID_DVD_DATA;			//valid DVD data receive
		else
		{
			if (((m_SendPacketNumber < 0x1000) && ((wOrderNumber < m_SendPacketNumber) || (wOrderNumber > (m_SendPacketNumber + 0xf000))))
				|| ((m_SendPacketNumber >= 0x1000) && (((m_SendPacketNumber - 0x1000) < wOrderNumber) && (wOrderNumber < m_SendPacketNumber))))
			{
				m_bDvdDataTable[wOrderNumber] = INIT_DVD_DATA;		//invalid DVD data(Late) receive
			}
			else
			{
				m_bDvdDataTable[wOrderNumber] = INVALID_DVD_DATA;		//invalid DVD data receive
			}
		    DBG_PRINTF( ("DVDWDM:ScheduleData::SendData---InvalidData wOrderNumber = %x\n\r", wOrderNumber));
			return(TRUE);
		}

		if (wReadPacketNumber != wOrderNumber)	//packet number continuity check
		{					//packet partition
			(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_EndFlag = FALSE;
			(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_PacketNum =
				(WORD)(wReadPacketNumber - (((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_StartPacketNumber);

			wWdmBuffptr++;		//packet partition counter up

			wReadPacketNumber = wOrderNumber;	//set original data
			SetWdmBuff(pSrb, wWdmBuffptr, wReadPacketNumber, ulNumber);
		}

       	if (wReadPacketNumber == (DVD_DATA_MAX - 1))	wReadPacketNumber = 0;
		else											wReadPacketNumber++;
		ASSERT (wWdmBuffptr != WDM_BUFFER_MAX);
	}

					//last packet number institution
	(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_PacketNum =
			(WORD)(wReadPacketNumber - (((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_StartPacketNumber);


//--------------save srb pointer----------------
	wSrbCounter = SetSrbPointerTable( pSrb );
	ASSERT (wSrbCounter != SRB_POINTER_MAX);
	if (wSrbCounter == SRB_POINTER_MAX)
		return(FALSE);

//--------------------------------receive-end------------------------------------
//--------------------------------send-start-------------------------------------

	for(;;)	//send packet
	{
		if ((wSrbCounter > 0x20) && (m_bDvdDataTable[m_SendPacketNumber] == INIT_DVD_DATA))
		{
		    DBG_PRINTF( ("DVDWDM:ScheduleData::wSrbCounter > 3\n\r"));
			for( wDvdDataptr = 0; wDvdDataptr < DVD_DATA_MAX; wDvdDataptr++)
			{
				if (m_bDvdDataTable[m_SendPacketNumber] != INIT_DVD_DATA)
					break;
				IncSendPacketNumber();
			}
		}
		wSrbCounter = 0;
		SkipInvalidDvdData();

//-----------------LateData Send ---------------------------
		if (bLateData == TRUE)
		{
			WORD	CheckMax;
		    DBG_PRINTF( ("DVDWDM:ScheduleData::LateData Start\n\r"));
			if (m_SendPacketNumber == 0)	CheckMax = (WORD)(DVD_DATA_MAX - 1);
			else 							CheckMax = (WORD)(m_SendPacketNumber - 1);
			for( ;wLateNumber != CheckMax;)
			{
				if( m_bDvdDataTable[wLateNumber] == VALID_DVD_DATA)
					SendPacket(wLateNumber);
				if (wLateNumber == (DVD_DATA_MAX - 1))	wLateNumber = 0;
				else									wLateNumber++;
			}
			bLateData = FALSE;
		    DBG_PRINTF( ("DVDWDM:ScheduleData::LateData End\n\r"));
		}

//-----------
		if( m_bDvdDataTable[m_SendPacketNumber] != VALID_DVD_DATA)
			break;

//-----------------search send packet & SendData------------
		BOOL ret = SendPacket(m_SendPacketNumber);
		ASSERT (ret != FALSE);
		if (ret == FALSE)
		{
			IncSendPacketNumber();
			return(FALSE);
		}

	}	//End For
    return( TRUE );
}
#else
//------------------------------------before code--------------------------------
{
    PHW_DEVICE_EXTENSION    pHwDevExt;
    PKSSTREAM_HEADER        pStruc;
    IMPEGBuffer             *MPBuff;
//    PHW_STREAM_REQUEST_BLOCK    pTmpSrb;
    DWORD       WaitTime=0;

	ASSERT( pSrb != NULL );
	ASSERT( pSrb->SRBExtension != NULL );


    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
    pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[0];

    MPBuff = &(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff);

    ASSERT( pHwDevExt != NULL );
	ASSERT( pStruc != NULL );
    ASSERT( MPBuff );

    DBG_PRINTF( ("DVDWDM:ScheduleData--- pHwDevExt->Rate=%d\n\r", pHwDevExt->Rate ));
    // F.F. or F.R.
    if( pHwDevExt->Rate < 10000 ){
//        FastSlowControl( pSrb );                // Modify PTS/DTS

        putSRB( pSrb );

        if( fScanCallBack==FALSE ){             // 1st time putting SRB?
        	DWORD pts = GetDataPTS( pStruc );
	        if( pts!=0xffffffff )
			{
//				pHwDevExt->ticktime.SetStreamTime( (ULONGLONG)pts * 1000 / 9 );

	            WaitTime = pHwDevExt->scheduler.calcWaitTime( pSrb );
	            if( WaitTime==0 ){
	                WaitTime = 1;
	            }
//--- 98.09.17 S.Watanabe
			}
			else {
				WaitTime = 1;
			}
//--- End.
	            StreamClassScheduleTimer( pHwDevExt->pstroVid,
	                                      pHwDevExt,
	                                      WaitTime*1000,
	                                      (PHW_TIMER_ROUTINE)ScanCallBack,
	                                      pHwDevExt
	            );
	            fScanCallBack = TRUE;
//--- 98.09.17 S.Watanabe
//			};
//            return( TRUE );
//--- End.
        }
    }else{
        pHwDevExt->dvdstrm.SendData( MPBuff );
    }

    return( TRUE );
}
#endif		REARRANGEMENT


DWORD CScheduleData::GetDataPTS( PKSSTREAM_HEADER pStruc )
{
    PUCHAR  pDat;
    DWORD   pts = 0xffffffff;

    if( pStruc->DataUsed ){
        pDat = (PUCHAR)pStruc->Data;
        if( *(pDat+21) & 0x80 ){
            pts = 0;
            pts += ((DWORD)(*(pDat+23)& 0x0E) ) << 29;
            pts += ((DWORD)(*(pDat+24)& 0xFF) ) << 22;
            pts += ((DWORD)(*(pDat+25)& 0xFE) ) << 14;
            pts += ((DWORD)(*(pDat+26)& 0xFF) ) <<  7;
            pts += ((DWORD)(*(pDat+27)& 0xFE) ) >>  1;
        }
    }

    return( pts );
}


DWORD CScheduleData::calcWaitTime( PHW_STREAM_REQUEST_BLOCK pSrb )
{
    PHW_DEVICE_EXTENSION    pHwDevExt;
    PKSSTREAM_HEADER        pStruc;
    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
    pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[0];

    DWORD   WaitTime, pts, DataStrm;
    WaitTime = DataStrm= 0;

    // Get PTS value from data.
    pts = GetDataPTS( pStruc );
    if( pts!=0xffffffff ){
        DBG_PRINTF( ("DVDWDM:   Data PTS = 0x%08x\n\r", pts) );
        DWORD       dwstc;
        if( pHwDevExt->ticktime.GetStreamSTC( &dwstc ) ){
            DBG_PRINTF( ("DVDWDM:   Borad STC = 0x%08x\n\r", dwstc) );
            if( dwstc < pts ){
                WaitTime = (pts - dwstc)/90;          // ms unit
                WaitTime = WaitTime / (10000 / pHwDevExt->Rate );
            }
        }else{
            WaitTime = 0;
        }
        DBG_PRINTF( ("DVDWDM:   Schedule Data---- WaitTime =0x%08x  WaitTime(ms)=%0d\n\r", WaitTime, WaitTime ) );
    }

//--- 98.09.07 S.Watanabe
//--- 98.09.17 S.Watanabe
//	if( WaitTime > 300 ) {
	if( WaitTime > 500 ) {
//--- End.
        DBG_PRINTF( ("DVDWDM:     Invalid WaitTime!! change to 1ms!!\n\r" ) );
		WaitTime = 1;
	}
//--- End.

    return( WaitTime );

}


void CScheduleData::putSRB( PHW_STREAM_REQUEST_BLOCK pSrb )
{

    pSrb->NextSRB = NULL;
    if( pTopSrb == NULL ){
        pTopSrb = pBottomSrb = pSrb;
        count++;
        return;
    }

    pBottomSrb->NextSRB = pSrb;
    pBottomSrb = pSrb;
    count++;

    return;


}


PHW_STREAM_REQUEST_BLOCK CScheduleData::getSRB( void )
{
    PHW_STREAM_REQUEST_BLOCK    pTmp;

    if( pTopSrb==NULL ){
        return( NULL );
    }

    pTmp = pTopSrb;
    pTopSrb = pTopSrb->NextSRB;

    count--;
    if( count==0 ){
        pTopSrb = pBottomSrb = NULL;
        fScanCallBack = FALSE;
    }

    return( pTmp );
}


PHW_STREAM_REQUEST_BLOCK CScheduleData::checkTopSRB( void )
{
    return( pTopSrb );

}


void CScheduleData::flushSRB()
{
    PHW_STREAM_REQUEST_BLOCK    pTmp;

    if( pTopSrb==NULL){
        return;
    }

    pTmp = getSRB();

    while( pTmp != NULL ){
        pTmp = getSRB();
    }
//--- 98.09.17 S.Watanabe
//    fScanCallBack = TRUE;
    fScanCallBack = FALSE;
//--- End.

}



void CScheduleData::FastSlowControl( PHW_STREAM_REQUEST_BLOCK pSrb )
{
    PHW_DEVICE_EXTENSION    pHwDevExt;
    ULONG               i;
    PKSSTREAM_HEADER    pStruc;
    PUCHAR              pDat;
    LONGLONG            pts, dts, tmp;
    LONG                Rate;
    LONGLONG            start;
    REFERENCE_TIME  InterceptTime;
    pts = dts = tmp = 0;

    pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

    for( i=0; i<pSrb->NumberOfBuffers; i++ ){
        pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
        if( pStruc->DataUsed ){
            pDat = (PUCHAR)pStruc->Data;
            if( *(pDat+21) & 0x80 ){
                pts += ((DWORD)(*(pDat+23) & 0x0E)) << 29;
                pts += ((DWORD)(*(pDat+24) & 0xFF)) << 22;
                pts += ((DWORD)(*(pDat+25) & 0xFE)) << 14;
                pts += ((DWORD)(*(pDat+26) & 0xFF)) <<  7;
                pts += ((DWORD)(*(pDat+27) & 0xFE)) >>  1;
            }
        }
    }
    pts = 0;

    if( pHwDevExt->Rate < 10000 ){
        Rate = pHwDevExt->Rate;
        InterceptTime = pHwDevExt->InterceptTime;
        start = pHwDevExt->StartTime * 9 / 1000;
        for( i=0; i<pSrb->NumberOfBuffers; i++ ){
            pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
            if( pStruc->DataUsed ){
                pDat = (PUCHAR)pStruc->Data;

                // PTS modify
                if( *(pDat+21) & 0x80 ){
                    pts += ((DWORD)(*(pDat+23) & 0x0E)) << 29;
                    pts += ((DWORD)(*(pDat+24) & 0xFF)) << 22;
                    pts += ((DWORD)(*(pDat+25) & 0xFE)) << 14;
                    pts += ((DWORD)(*(pDat+26) & 0xFF)) <<  7;
                    pts += ((DWORD)(*(pDat+27) & 0xFE)) >>  1;

                    tmp = pts;
                    pts = Rate * ( pts-(InterceptTime * 9/ 1000) )/10000;

                    *(pDat+23) = (UCHAR)(((pts & 0xC0000000) >> 29 ) | 0x11);
                    *(pDat+24) = (UCHAR)(((pts & 0x3FC00000) >> 22 ) | 0x00);
                    *(pDat+25) = (UCHAR)(((pts & 0x003F8000) >> 14 ) | 0x01);
                    *(pDat+26) = (UCHAR)(((pts & 0x00007F80) >>  7 ) | 0x00);
                    *(pDat+27) = (UCHAR)(((pts & 0x0000007F) <<  1 ) | 0x01);

                }

                // DTS modify
                if( *(pDat+17) == 0xE0 ){
                    if( (*(pDat+21) & 0xC0) == 0xC0 ){
                        dts += ((DWORD)(*(pDat+28) & 0x0E)) << 29;
                        dts += ((DWORD)(*(pDat+29) & 0xFF)) << 22;
                        dts += ((DWORD)(*(pDat+30) & 0xFE)) << 14;
                        dts += ((DWORD)(*(pDat+31) & 0xFF)) <<  7;
                        dts += ((DWORD)(*(pDat+32) & 0xFE)) >>  1;
                        dts = pts - (tmp - dts);
                        *(pDat+28) = (UCHAR)(((dts & 0xC0000000) >> 29 ) | 0x11);
                        *(pDat+29) = (UCHAR)(((dts & 0x3FC00000) >> 22 ) | 0x00);
                        *(pDat+30) = (UCHAR)(((dts & 0x003F8000) >> 14 ) | 0x01);
                        *(pDat+31) = (UCHAR)(((dts & 0x00007F80) >>  7 ) | 0x00);
                        *(pDat+32) = (UCHAR)(((dts & 0x0000007F) <<  1 ) | 0x01);

                    }
                }
            }
        }
    }
}


BOOL CScheduleData::removeSRB( PHW_STREAM_REQUEST_BLOCK pSrb )
{

    if( pTopSrb==NULL ){
        return( FALSE );
    }

    if( pTopSrb == pSrb ){
        pTopSrb = pTopSrb->NextSRB;
        count--;
// 1998.8.21  S.Watanabe
//        if( count==0 )
//            pTopSrb = pBottomSrb = NULL;
        if( count==0 ) {
            pTopSrb = pBottomSrb = NULL;
            fScanCallBack = FALSE;
        }
// End
        return( TRUE );
    }

    PHW_STREAM_REQUEST_BLOCK    srbPrev;
    PHW_STREAM_REQUEST_BLOCK    srb;

    srbPrev = pTopSrb;
    srb = srbPrev->NextSRB;

    while( srb!=NULL ){
        if( srb==pSrb ){
            srbPrev->NextSRB = srb->NextSRB;
// 1998.8.21  S.Watanabe
//            if( srbPrev->NextSRB == pBottomSrb ){
            if( srb == pBottomSrb ){
// End
                pBottomSrb = srbPrev;
            }
            count--;
            return( TRUE );
        }
        srbPrev = srb;
        srb = srbPrev->NextSRB;
    }
    return( FALSE );
}


void ScanCallBack( PHW_DEVICE_EXTENSION pHwDevExt )
{
    DBG_PRINTF( ("DVDWDM:   ScanCallBack\n\r") );


    PKSSTREAM_HEADER        pStruc = NULL;
    IMPEGBuffer             *MPBuff = NULL;
    PHW_STREAM_REQUEST_BLOCK    pTmpSrb = NULL;
    DWORD       WaitTime=0;
    LIBSTATE    strmState;
    DWORD pts;
#ifndef		REARRANGEMENT
	WORD		wWdmBuffptr;
#endif		REARRANGEMENT

    ASSERT( pHwDevExt != NULL );

    pHwDevExt->kserv.DisableHwInt();

    pTmpSrb = pHwDevExt->scheduler.getSRB();
    if( pTmpSrb == NULL ){
        pHwDevExt->scheduler.fScanCallBack = FALSE;
        pHwDevExt->kserv.EnableHwInt();
        return;
    }else{
        pStruc = &((PKSSTREAM_HEADER)(pTmpSrb->CommandData.DataBufferArray))[0];
        pts = pHwDevExt->scheduler.GetDataPTS( pStruc );
        if( pts!=0xffffffff )
			pHwDevExt->ticktime.SetStreamTime( (ULONGLONG)pts * 1000 / 9 );

#ifndef		REARRANGEMENT
		for( wWdmBuffptr = 0; wWdmBuffptr < WDM_BUFFER_MAX; wWdmBuffptr++)
		{
		    MPBuff = &(((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]);
	        ASSERT( MPBuff );
    	    strmState = pHwDevExt->dvdstrm.GetState();
        	if( strmState!=Stop && strmState!=PowerOff )
			{
				if ((((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_Enable == TRUE)
				{
	            	pHwDevExt->dvdstrm.SendData( MPBuff );
					(((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_Enable = FALSE;
					break;
				}
			}
			if ((((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_EndFlag == TRUE)
			{
				break;	//last buffer
			}
        }
#else
        MPBuff = &(((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff);
        ASSERT( MPBuff );
        strmState = pHwDevExt->dvdstrm.GetState();
        if( strmState!=Stop && strmState!=PowerOff ){
            pHwDevExt->dvdstrm.SendData( MPBuff );
        }
#endif		REARRANGEMENT

    }

    while( (pTmpSrb = pHwDevExt->scheduler.checkTopSRB())!=NULL ){
        pStruc = &((PKSSTREAM_HEADER)(pTmpSrb->CommandData.DataBufferArray))[0];
        // Check PTS is valid
        pts = pHwDevExt->scheduler.GetDataPTS( pStruc );
        if( pts!=0xffffffff ){
            WaitTime = pHwDevExt->scheduler.calcWaitTime( pTmpSrb );
            if( WaitTime==0 ){
                WaitTime = 1;
            }
            StreamClassScheduleTimer( pHwDevExt->pstroVid,
                                      pHwDevExt,
                                      WaitTime*1000,
                                      (PHW_TIMER_ROUTINE)ScanCallBack,
                                      pHwDevExt
            );
            pHwDevExt->kserv.EnableHwInt();
            return;
        }else{
            pTmpSrb = pHwDevExt->scheduler.getSRB();

#ifndef	REARRANGEMENT
			for( wWdmBuffptr = 0; wWdmBuffptr < WDM_BUFFER_MAX; wWdmBuffptr++)
			{
			    MPBuff = &(((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]);
	            ASSERT( MPBuff );
    	        strmState = pHwDevExt->dvdstrm.GetState();
        	    if( strmState!=Stop && strmState!=PowerOff )
				{
					if ((((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_Enable == TRUE)
					{
	    	        	pHwDevExt->dvdstrm.SendData( MPBuff );
						(((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_Enable = FALSE;
						break;
					}
	            }
				if ((((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_EndFlag == TRUE)
				{
					break;	//last buffer
				}
			}
#else
            MPBuff = &(((PSRB_EXTENSION)(pTmpSrb->SRBExtension))->m_wdmbuff);
            ASSERT( MPBuff );
            strmState = pHwDevExt->dvdstrm.GetState();
            if( strmState!=Stop && strmState!=PowerOff ){
                pHwDevExt->dvdstrm.SendData( MPBuff );
            }
#endif	REARRANGEMENT

        }

    }
    pHwDevExt->scheduler.fScanCallBack = FALSE;
    pHwDevExt->kserv.EnableHwInt();


}

#ifndef	REARRANGEMENT
void CScheduleData::InitRearrangement(void)
{
	memset(m_bDvdDataTable, INIT_DVD_DATA, DVD_DATA_MAX);
	memset(m_SrbPointerTable, NULL, SRB_POINTER_MAX * 4);
	m_SendPacketNumber = 0;
}


WORD CScheduleData::SetSrbPointerTable( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	WORD	wSrbptr;
	for( wSrbptr = 0; wSrbptr < SRB_POINTER_MAX; wSrbptr++)		//search empty for SRB pointer table
	{
		if (m_SrbPointerTable[wSrbptr] == NULL)
		{
			m_SrbPointerTable[wSrbptr] = (LONG)pSrb;		//set SRB pointer
			break;
		}
	}
    DBG_PRINTF( ("DVDWDM:ScheduleData::SetSrbPointerTable--- m_SrbPointerTable[%x]=%x\n\r", wSrbptr,pSrb));
	ASSERT(wSrbptr != SRB_POINTER_MAX);
	return(wSrbptr);
}

void CScheduleData::SkipInvalidDvdData(void)
{
	WORD wDvdDataptr;
	for( wDvdDataptr = 0; wDvdDataptr < DVD_DATA_MAX; wDvdDataptr++)
	{
		if (m_bDvdDataTable[m_SendPacketNumber] != INVALID_DVD_DATA)
			break;
		m_bDvdDataTable[m_SendPacketNumber] = INIT_DVD_DATA;
		IncSendPacketNumber();
	    DBG_PRINTF( ("DVDWDM:ScheduleData::SkipInvalidDvdData--- SKIP\n\r"));
	}
    DBG_PRINTF( ("DVDWDM:ScheduleData::SkipInvalidDvdData--- m_SendPacketNumber=%x\n\r", m_SendPacketNumber));
}

void CScheduleData::SetWdmBuff(PHW_STREAM_REQUEST_BLOCK pSrb, WORD wWdmBuffptr, WORD wReadPacketNumber, ULONG ulNumber)
{
	(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_BuffNumber = wWdmBuffptr;
	(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_EndFlag = TRUE;
	(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_StartPacketNumber = wReadPacketNumber;
	(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_BeforePacketNum = (WORD)ulNumber;
	(((PSRB_EXTENSION)(pSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_Enable = TRUE;
	DBG_PRINTF( ("DVDWDM:ScheduleData::SetWdmBuff--- Srb = %x m_wdmbuff[%x].m_StartPacketNumber=%x\n\r", pSrb,wWdmBuffptr,wReadPacketNumber));
}

void CScheduleData::IncSendPacketNumber(void)
{
	m_SendPacketNumber++;
	if (m_SendPacketNumber >= DVD_DATA_MAX)
		m_SendPacketNumber = 0;
}

void CScheduleData::SendWdmBuff(PHW_STREAM_REQUEST_BLOCK pWorkSrb, IMPEGBuffer *MPBuff)
{
    PHW_DEVICE_EXTENSION    pHwDevExt;
    PKSSTREAM_HEADER        pStruc;
    DWORD       WaitTime = 0;

    pHwDevExt = (PHW_DEVICE_EXTENSION)pWorkSrb->HwDeviceExtension;
   	pStruc = &((PKSSTREAM_HEADER)(pWorkSrb->CommandData.DataBufferArray))[0];
    ASSERT( pHwDevExt != NULL );
	ASSERT( pStruc != NULL );
    ASSERT( MPBuff );
   	DBG_PRINTF( ("DVDWDM:ScheduleData--- pHwDevExt->Rate=%d\n\r", pHwDevExt->Rate ));    // F.F. or F.R.
    if( pHwDevExt->Rate < 10000 )
	{
   	    putSRB( pWorkSrb );
   	    if( fScanCallBack==FALSE )             // 1st time putting SRB?
		{
       		DWORD pts = GetDataPTS( pStruc );
	        if( pts!=0xffffffff )
			{
        	    WaitTime = pHwDevExt->scheduler.calcWaitTime( pWorkSrb );
            	if( WaitTime==0 )
                	WaitTime = 1;
			}
			else
				WaitTime = 1;
       	    StreamClassScheduleTimer( pHwDevExt->pstroVid,
               	                      pHwDevExt,
                   	                  WaitTime*1000,
                       	              (PHW_TIMER_ROUTINE)ScanCallBack,
                           	          pHwDevExt
            );
		    DBG_PRINTF( ("DVDWDM:ScheduleData::SendWdmBuff-StreamClassScheduleTimer()--- Srb=%x\n\r", pWorkSrb));
   	        fScanCallBack = TRUE;
       	}
    }
	else
	{
    	pHwDevExt->dvdstrm.SendData( MPBuff );
	    DBG_PRINTF( ("DVDWDM:ScheduleData::SendWdmBuff-SendData()--- Srb=%x\n\r", pWorkSrb));
   	}
}

BOOL CScheduleData::SendPacket(INT SendNumber)
{
    PHW_STREAM_REQUEST_BLOCK pWorkSrb = 0L;
    IMPEGBuffer             *MPBuff = 0;
	WORD	wSrbptr = 0, wWdmBuffptr = 0;
	BOOL	Find = FALSE;
	for( wSrbptr = 0; wSrbptr < SRB_POINTER_MAX; wSrbptr++)
	{
		if (m_SrbPointerTable[wSrbptr] != NULL)
		{
			pWorkSrb = (PHW_STREAM_REQUEST_BLOCK)m_SrbPointerTable[wSrbptr];		//get SRB pointer
			for( wWdmBuffptr = 0; wWdmBuffptr < WDM_BUFFER_MAX; wWdmBuffptr++)
			{
			    MPBuff = &(((PSRB_EXTENSION)(pWorkSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]);
				if (SendNumber == (((PSRB_EXTENSION)(pWorkSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_StartPacketNumber)
				{
				    DBG_PRINTF( ("DVDWDM:ScheduleData::SendPacket-Find--- Srb=%x m_wdmbuff[%x]\n\r", pWorkSrb,wWdmBuffptr));
				    DBG_PRINTF( ("DVDWDM:ScheduleData::SendPacket-Find--- SendNumber=%x\n\r", SendNumber));
					Find = TRUE;	//find send packet
					break;
				}
				if ((((PSRB_EXTENSION)(pWorkSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_EndFlag == TRUE)
					break;	//last buffer
			}
			if (Find == TRUE)
			{
				if((((PSRB_EXTENSION)(pWorkSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_EndFlag == TRUE)
					m_SrbPointerTable[wSrbptr] = NULL;
				break;
			}
		}
	}
	if (wSrbptr == SRB_POINTER_MAX)
	{
		ASSERT (wSrbptr != SRB_POINTER_MAX);
		IncSendPacketNumber();
		return(FALSE);
	}
	if (SendNumber == m_SendPacketNumber)
	{
		for(int cnt1 = 0; cnt1 < (((PSRB_EXTENSION)(pWorkSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_PacketNum; cnt1++)
		{
			IncSendPacketNumber();
		}
	    DBG_PRINTF( ("DVDWDM:ScheduleData::SendPacket--- m_PacketNum=%x\n\r", (((PSRB_EXTENSION)(pWorkSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_PacketNum));
	}
	for(int cnt2 = 0; cnt2 < (((PSRB_EXTENSION)(pWorkSrb->SRBExtension))->m_wdmbuff[wWdmBuffptr]).m_PacketNum; cnt2++)
	{
		m_bDvdDataTable[SendNumber] = INIT_DVD_DATA;
		if (SendNumber == (DVD_DATA_MAX - 1))	SendNumber = 0;
		else									SendNumber++;
	}
    DBG_PRINTF( ("DVDWDM:ScheduleData::SendPacket--- m_SendPacketNumber=%x\n\r", m_SendPacketNumber));

	SendWdmBuff(pWorkSrb, MPBuff);			// call SendData()
	return (TRUE);
}

#endif	REARRANGEMENT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\schdat.h ===
//**************************************************************************
//
//      Title   : SchDat.h
//
//      Date    : 1998.03.10    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1998.03.10   000.0000   1st making.
//
//**************************************************************************

#ifndef		REARRANGEMENT
#define			INIT_DVD_DATA		0
#define			VALID_DVD_DATA		1
#define			INVALID_DVD_DATA	2
#define			DVD_DATA_MAX		0x10000
#define			SRB_POINTER_MAX		0x30
#endif		REARRANGEMENT

class   CScheduleData
{
public:
        CScheduleData( void );
        ~CScheduleData( void );
        BOOL    Init( void );
        BOOL    SendData( PHW_STREAM_REQUEST_BLOCK pSrb );
        DWORD   calcWaitTime( PHW_STREAM_REQUEST_BLOCK pSrb );
        void    putSRB( PHW_STREAM_REQUEST_BLOCK pSrb );
        PHW_STREAM_REQUEST_BLOCK    getSRB( void );
        PHW_STREAM_REQUEST_BLOCK    checkTopSRB( void );
        void    flushSRB( void );
        void    FastSlowControl( PHW_STREAM_REQUEST_BLOCK pSrb );
        BOOL    removeSRB( PHW_STREAM_REQUEST_BLOCK pSRb );
        DWORD   GetDataPTS( PKSSTREAM_HEADER pStruc );
#ifndef		REARRANGEMENT
		void	InitRearrangement(void);
		WORD	SetSrbPointerTable( PHW_STREAM_REQUEST_BLOCK pSrb );
		void	SkipInvalidDvdData(void);
		void 	SetWdmBuff(PHW_STREAM_REQUEST_BLOCK pSrb, WORD wWdmBuffptr, WORD wReadPacketNumber, ULONG ulNumber);
		void	IncSendPacketNumber(void);
		void	SendWdmBuff( PHW_STREAM_REQUEST_BLOCK pSrb, IMPEGBuffer *MPBuff);
		BOOL 	SendPacket(INT SendNumber);
#endif		REARRANGEMENT

//private:
//        DWORD   GetDataPTS( PKSSTREAM_HEADER pStruc );

private:
        PHW_STREAM_REQUEST_BLOCK    pTopSrb;
        PHW_STREAM_REQUEST_BLOCK    pBottomSrb;
        ULONG                       count;

public:
        KEVENT  m_Event;
        BOOL                        fScanCallBack;

#ifndef		REARRANGEMENT
		char			m_bDvdDataTable[DVD_DATA_MAX];//DVDްǗð
		LONG			m_SrbPointerTable[SRB_POINTER_MAX];	//SRB pointer table
		int				m_SendPacketNumber;
#endif		REARRANGEMENT

};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\timeout.h ===
//***************************************************************************
//
//	FileName:
//		$Workfile: timeout.h $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.VxD/timeout.h 2     97/07/11 16:56 Yagi $
// $Modtime: 97/07/11 11:14 $
// $Nokeywords:$
//***************************************************************************



#ifndef _TIMEOUT_H_
#define _TIMEOUT_H_

//---------------------------------------------------------------------------
//	Timeout Class
//---------------------------------------------------------------------------

class CTimeOut
{
	private:
		DWORD	m_StartTime;
		DWORD	m_WaitTime;
		DWORD	m_SleepTime;
		IKernelService  *m_pKernelService;
		
	public:
		CTimeOut( DWORD WaitTime, DWORD SleepTime, IKernelService *pKernelService )
		{ 
			ASSERT( pKernelService != NULL );

			m_pKernelService = pKernelService;
			m_WaitTime = WaitTime;
			m_SleepTime = SleepTime;
			m_pKernelService->GetTickCount( &m_StartTime );
		 };

		BOOL CheckTimeOut( void )
		{
			DWORD	m_CurrentTime;

			m_pKernelService->GetTickCount( &m_CurrentTime );

			if( m_CurrentTime - m_StartTime > m_WaitTime )
				return TRUE;
			return FALSE;
		};

		void Sleep( void )
		{
//            m_pKernelService->Sleep( m_WaitTime );
            m_pKernelService->Sleep( m_SleepTime );
		};
};

#endif	//  _TIMEOUT_H_

//***************************************************************************
//	End of 
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\stdafx.h ===
// This is dummy file.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\userdata.cpp ===
//***************************************************************************
//
//   Title      : UserData.cpp
//
//   Date       : 1998.03.26       1st making
//
//   Author     : Toshiba [NPC](NP2) Hiroyuki Oka
//
//   Copyright 1998  Toshiba Corporation.  All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//   Change Log :
//
//      Date      Revision                 Description
//  ------------ ---------- -----------------------------------------------
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.WDM/userdata.cpp 2     98/04/30 10:31a Yagi $
// $Modtime: 98/04/28 8:56p $
// $Nokeywords: $
//***************************************************************************
#include "includes.h"
#include "userdata.h"

CUserData::CUserData()
{
	m_DataPoint = 0;
	m_DataSize = 0;
};

CUserData::~CUserData()
{
};
//---------------------------------------------------------------------------
//	CUserData::Init
//---------------------------------------------------------------------------
BOOL CUserData::Init()
{
	m_DataPoint = 0;
	m_DataSize = 0;
	return TRUE;
};

//---------------------------------------------------------------------------
//	CUserData::Set
//---------------------------------------------------------------------------
BOOL CUserData::Set( DWORD data_tmp )
{
	if (m_DataPoint >= USER_DATA_SIZE)
	{
		//RETAILMSG(ZONE_ERROR, (TEXT("CUserData::Set size Error!!\r\n")));
        DBG_BREAK();
		return FALSE;
	}
	data[m_DataPoint] =   (BYTE)((data_tmp & 0xFF000000) >> 24);
	data[m_DataPoint+1] = (BYTE)((data_tmp & 0x00FF0000) >> 16);
	data[m_DataPoint+2] = (BYTE)((data_tmp & 0x0000FF00) >>  8);
	data[m_DataPoint+3] = (BYTE)(data_tmp & 0x000000FF);
	
	m_DataPoint += 4;
	m_DataSize += 4;
	
	return TRUE;
};
//---------------------------------------------------------------------------
//	CUserData::Get
//---------------------------------------------------------------------------
BYTE CUserData::Get( DWORD number )
{
	return data[number];
};

//---------------------------------------------------------------------------
//	CUserData::DataCopy
//---------------------------------------------------------------------------
BOOL CUserData::DataCopy(PVOID pDestPoint, DWORD dwSize)
{
	if (dwSize > m_DataSize)
		return FALSE;

	memcpy(pDestPoint, data, dwSize);
	
	return TRUE;
};
//---------------------------------------------------------------------------
//	CUserData::GetDataSize
//---------------------------------------------------------------------------
DWORD CUserData::GetDataSize()
{
	return 	m_DataSize;
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\userdata.h ===
//***************************************************************************
//
//   Title      : CCData.h
//
//   Date       : 1998.03.26       1st making
//
//   Author     : Toshiba [NPC](NP2) Hiroyuki Oka
//
//   Copyright 1998  Toshiba Corporation.  All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//   Change Log :
//
//      Date      Revision                 Description
//  ------------ ---------- -----------------------------------------------
//
//***************************************************************************
// $Header: /DVD Drivers/Sources/ZiVAHAL/userdata.h 1     98/04/20 7:30p Hero $
// $Modtime: 98/03/30 7:13p $
// $Nokeywords: $
//***************************************************************************

#ifndef _CCDATA_H_
#define _CCDATA_H_

// 1GOPline21f[^̈̊m(header + 36field * data_size + alpha)
// data_sizeɉăf[^̈mۂق
#define USER_DATA_SIZE (5+36*3+10)

// N[YhLvVpOobt@̃TCY(DWORD)
#define	CC_DATA_SIZE	90

class CUserData
{
public:
	CUserData(void);
	~CUserData(void);

	BOOL	Init();
	BOOL	Set(DWORD data);
	BYTE	Get(DWORD number);
	BOOL	DataCopy(PVOID pDestPoint, DWORD dwSize);
	DWORD	GetDataSize();
private:
	BYTE data[USER_DATA_SIZE];
	DWORD	m_DataSize;
	DWORD	m_DataPoint;

//friend CMPEGBoardHAL;
};

#endif // _CCDATA_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\toollib.h ===
//***************************************************************************
//
//	FileName:
//		$Workfile: ToolLib.h $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/Sources/ToolLib/ToolLib.h 2     97/06/26 20:40 Seichan $
// $Modtime: 97/06/26 20:40 $
// $Nokeywords:$
//***************************************************************************


//---------------------------------------------------------------------------
//	List Item Base CLASS
//---------------------------------------------------------------------------
class IMBoardListItem
{
	public:
		virtual IMBoardListItem* GetNext( void ) PURE;
		virtual void             SetNext( IMBoardListItem *Item ) PURE;
};


//***************************************************************************
//	
//***************************************************************************



//***************************************************************************
//	End of 
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\strmid.h ===
//***************************************************************************
//	Header file
//
//***************************************************************************

extern "C" {

#include "ksmedia.h"	// Definition ?
//#include "mpeg2ids.h"	// Definition ?
//#include "mpegprop.h"	// sample?

//#include "kspvpe.h"
//#include "ddvptype.h"
//#include "vptype.h"

//#include "ksguid.h"
//#include "mpegguid.h"

}

// This information is not defined in ksmedia.h, why???? I got these information from DirectX5.2 SDK
//#define DDVPTYPE_E_HREFH_VREFL   \
//        0x54F39980L, 0xDA60, 0x11CF, 0x9B, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8
#define DDVPTYPE_E_HREFL_VREFH   \
        0xA07A02E0L, 0xDA60, 0x11CF, 0x9B, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8
#define DDVPCONNECT_DISCARDSVREFDATA    0x00000008L

GUID g_ZVGuid = {DDVPTYPE_E_HREFL_VREFH};
GUID g_S3Guid = {DDVPTYPE_E_HREFL_VREFL};
GUID g_ATIGuid = {0x1352A560L,0xDA61,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8};	// DDVPTYPE_BROOKTREE

// define this macro to facilitate giving the pixel format
#define MKFOURCC(ch0, ch1, ch2, ch3)    ((DWORD)(BYTE)(ch0) |           \
					((DWORD)(BYTE)(ch1) << 8) |     \
					((DWORD)(BYTE)(ch2) << 16) |    \
					((DWORD)(BYTE)(ch3) << 24 ))


/*****************************************************************************

                define the data formats used by the pins in this minidriver

*****************************************************************************/

/*

 Define the Mpeg2Video format that the minidriver supports

 */

KSDATAFORMAT hwfmtiMpeg2Vid
     = {

	sizeof (KSDATAFORMAT), // + sizeof (KS_MPEGVIDEOINFO2),
//     sizeof (KSDATAFORMAT),
	0,
	0,
	0,

	//
	// specify media type, subtype, and format from mpeg2 video
	//

    STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
//    STATIC_KSDATAFORMAT_TYPE_MPEG2_PES,
	STATIC_KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO,
//	STATIC_KSDATAFORMAT_FORMAT_MPEG2_VIDEO
	STATIC_KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO

	};

/*

 Define the supported AC3 Audio format

 */

//--- 98.06.01 S.Watanabe
//KSDATAFORMAT hwfmtiMpeg2Aud[] = {
//	{
//	sizeof (KSDATAFORMAT),
//    0,
//	0,
//	0,
//    STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
////    STATIC_KSDATAFORMAT_TYPE_MPEG2_PES,
//    STATIC_KSDATAFORMAT_SUBTYPE_AC3_AUDIO,
////    STATIC_KSDATAFORMAT_FORMAT_WAVEFORMATEX
//	STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
//	},
//	{
//	sizeof (KSDATAFORMAT),
//    0,
//	0,
//	0,
//    STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
//    STATIC_KSDATAFORMAT_SUBTYPE_LPCM_AUDIO,
////	STATIC_KSDATAFORMAT_SPECIFIER_LPCM_AUDIO
//	STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
//	},
//	{
//	sizeof (KSDATAFORMAT),
//    0,
//	0,
//	0,
//    STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
//    STATIC_KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO,
////	STATIC_KSDATAFORMAT_SPECIFIER_LPCM_AUDIO
//	STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
//	},
//};
KSDATAFORMAT Mpeg2ksdataformat = {
   sizeof (KSDATAFORMAT) + sizeof (WAVEFORMATEX),
   0,
   1,
   0,
   STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
   STATIC_KSDATAFORMAT_SUBTYPE_AC3_AUDIO,
   STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
};

WAVEFORMATEX Mpeg2waveformatex = {
   0,	// WAVE_FORMAT_UNKNOWN
   6,	// channels
   48000,  // sampling rate
   0,  // byte rate
   768,	// align
   0,	// resolution
   0	// extra
};

/*

Define the supported LPCM audio format.

*/

KSDATAFORMAT LPCMksdataformat = {
   sizeof (KSDATAFORMAT) + sizeof (WAVEFORMATEX),
   0,
   1,
   0,
   STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
   STATIC_KSDATAFORMAT_SUBTYPE_LPCM_AUDIO,
   STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
};

WAVEFORMATEX LPCMwaveformatex = {
/*
The navigator currently does not look at this, all it cares about is that
we provide a valid format block for Mpeg2.  So the correctness of these
values has not been verified.
*/

   WAVE_FORMAT_PCM,
   2,	// channels
   48000,  // sampling rate
   192000,  // byte rate
   4,	// alignment
   16,	// bit resolution
   0	// extra
};

/* The KSDATAFORMAT and WAVEFORMATEX structures above are copied in
   here at run time.  See the comment just before the four calls to
   RtlCopyMemory in AdapterStreamInfo() in dvdcmd.cpp.
*/
BYTE hwfmtiMpeg2Aud[sizeof (KSDATAFORMAT) + sizeof (WAVEFORMATEX)];
BYTE hwfmtiLPCMAud[sizeof (KSDATAFORMAT) + sizeof (WAVEFORMATEX)];
//--- End.

/*

 Define the supported Sub picture format

 */

KSDATAFORMAT hwfmtiMpeg2Subpic = {
	sizeof (KSDATAFORMAT),
	0,
	0,
	0,

	//
	// specify media type, subtype
	//

    STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
//	STATIC_KSDATAFORMAT_TYPE_MPEG2_PES,
	STATIC_KSDATAFORMAT_SUBTYPE_SUBPICTURE,
//	STATIC_KSDATAFORMAT_FORMAT_NONE
//	STATIC_KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO
//	STATIC_KSDATAFORMAT_FORMAT_MPEG2_VIDEO
	STATIC_GUID_NULL
};


//--- 98.06.01 S.Watanabe
///*
//
//  Define the NTSC Composite output format
//
// */
//
//KSDATAFORMAT hwfmtiNtscOut
//	= {
//	sizeof (KSDATAFORMAT),
//	0,
//	0,
//	0,
//	STATIC_KSDATAFORMAT_TYPE_MPEG2_PES,
//	STATIC_KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO,
////	STATIC_KSDATAFORMAT_FORMAT_WAVEFORMATEX
//	STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
//	};
//--- End.


KSDATAFORMAT hwfmtiVPEOut
    = {
	sizeof (KSDATAFORMAT),
    0,
	0,
	0,
    STATIC_KSDATAFORMAT_TYPE_VIDEO,
    STATIC_KSDATAFORMAT_SUBTYPE_VPVideo,
//  STATIC_KSDATAFORMAT_TYPE_VIDEO,
    STATIC_KSDATAFORMAT_SPECIFIER_NONE
//  STATIC_KSDATAFORMAT_TYPE_VIDEO
    };

KSDATAFORMAT hwfmtiCCOut
    = {
	sizeof(KSDATAFORMAT),
    0,
	200,
	0,
    STATIC_KSDATAFORMAT_TYPE_AUXLine21Data,
    STATIC_KSDATAFORMAT_SUBTYPE_Line21_GOPPacket,
//    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	// 98.12.18 H.Yagi commented out
    STATIC_KSDATAFORMAT_SPECIFIER_NONE		// 98.12.18 H.Yagi added
    };

//--- 98.05.21 S.Watanabe

KSDATAFORMAT hwfmtiSS
    = {
	sizeof(KSDATAFORMAT),
    0,
	0,
	0,
    STATIC_DATAFORMAT_TYPE_DEVIO,
    STATIC_DATAFORMAT_SUBTYPE_DEVIO,
    STATIC_DATAFORMAT_FORMAT_DEVIO
    };

//--- End.

//
// this array indicates that stream 0 (as constructed in sscmd.c) supports
// the MPEG 2 video format.  If stream zero supported more formats, the 
// addresses of these formats would be additional elements in this array.
//

PKSDATAFORMAT Mpeg2VidInfo[] = {
    &hwfmtiMpeg2Vid  // pointer to the MPEG 2 video format block
};

//
// this structure indicates that stream 1 (as constructed in sscmd.c) supports
// the MPEG 2 audio format.  If stream 1 supported more formats, the 
// addresses of these formats would be additional elements in this array.
//
// This stream also supports LPCM, and the second element of this array now
// makes this fact known to KS.  See the comment about LPCM's WAVEFORMATEX
// above, however.

PKSDATAFORMAT Mpeg2AudInfo[] = {
//--- 98.06.01 S.Watanabe
//    hwfmtiMpeg2Aud,  // pointer to the MPEG 2 audio format block
	(PKSDATAFORMAT) hwfmtiMpeg2Aud, // pointer to the Mpeg2 format
	(PKSDATAFORMAT) hwfmtiLPCMAud   // pointer to the LPCM format
//--- End.
};

// Sub-pic

PKSDATAFORMAT Mpeg2SubpicInfo[] = {
	&hwfmtiMpeg2Subpic  // pointer to the MPEG 2 subpic format block
};


//--- 98.06.01 S.Watanabe
////
//// this structure indicates that stream 2 (as constructed in sscmd.c) supports
//// the NTSC composite format.  If stream 1 supported more formats, the 
//// addresses of these formats would be additional elements in this array.
////
//
//PKSDATAFORMAT NtscInfo[] = {
//    &hwfmtiNtscOut  // pointer to the NTSC format block
//};
//--- End.

PKSDATAFORMAT VPEInfo[] = {
    &hwfmtiVPEOut
};

PKSDATAFORMAT CCInfo[] = {   // CC output formats array
    &hwfmtiCCOut
};

//--- 98.05.21 S.Watanabe

PKSDATAFORMAT SSInfo[] = {   // Special Stream formats array
	&hwfmtiSS
};

//--- End.

/*****************************************************************************

                define the Individual property items for the video property sets

*****************************************************************************/

// Video

static const KSPROPERTY_ITEM mpegVidPropItm[]={
	{KSPROPERTY_DVDSUBPIC_PALETTE,
	FALSE,
	sizeof(KSPROPERTY),
	sizeof(KSPROPERTY_SPPAL),
	(PFNKSHANDLER) FALSE,
	NULL,
	0,
	NULL,
	NULL,
	0
	}};

// Audio

static const KSPROPERTY_ITEM audPropItm[] = {

    {KSPROPERTY_AUDDECOUT_MODES,// available audio decoder output formats
        // property
        (PFNKSHANDLER) TRUE,    // get available modes is supported
        sizeof(KSPROPERTY),
        sizeof(ULONG),          // minimum size of data requested
        (PFNKSHANDLER) FALSE,   // set available modes is not supported
        NULL,
        0,
        NULL,
        NULL,
        0
    },

    {KSPROPERTY_AUDDECOUT_CUR_MODE, // current audio decoder output format
        // property
        (PFNKSHANDLER) TRUE,    // get current mode is supported
        sizeof(KSPROPERTY),
        sizeof(ULONG),          // minimum size of data requested
        (PFNKSHANDLER) TRUE,    // set current modes is supported
        NULL,
        0,
        NULL,
        NULL,
        0
    }
};

// Sub-pic

static const KSPROPERTY_ITEM spPropItm[]={

	{KSPROPERTY_DVDSUBPIC_PALETTE,
	FALSE,
	sizeof (KSPROPERTY),
	sizeof (KSPROPERTY_SPPAL),
	(PFNKSHANDLER) TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	},


	{KSPROPERTY_DVDSUBPIC_HLI,
	FALSE,
	sizeof (KSPROPERTY),
	sizeof (KSPROPERTY_SPHLI),
	(PFNKSHANDLER)TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	},


	{KSPROPERTY_DVDSUBPIC_COMPOSIT_ON,
	FALSE,
	sizeof (KSPROPERTY),
	sizeof (KSPROPERTY_COMPOSIT_ON),
	(PFNKSHANDLER)TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	}

	};

// NTSC

static const KSPROPERTY_ITEM MacroVisionPropItm[] = {
	{
		KSPROPERTY_COPY_MACROVISION,		// support for setting macrovision level
		(PFNKSHANDLER) FALSE, 		// get not supported
		sizeof (KSPROPERTY),
		sizeof (KS_COPY_MACROVISION),
		(PFNKSHANDLER) TRUE,		// set MACROVISION level supported
		NULL,
		0,
		NULL,
		NULL,
		0
	}
};

// VPE

static /* const */ KSPROPERTY_ITEM VideoPortPropItm[]={
	{
		KSPROPERTY_VPCONFIG_NUMCONNECTINFO,
		(PFNKSHANDLER) TRUE,
		sizeof(KSPROPERTY),
		sizeof(ULONG),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT,
		(PFNKSHANDLER) TRUE,
		sizeof(KSPROPERTY),
		sizeof(ULONG),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_GETCONNECTINFO,
		(PFNKSHANDLER) TRUE,
		sizeof (KSMULTIPLE_DATA_PROP),  // minimum property input size
		sizeof (ULONG),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_SETCONNECTINFO,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),  			// minimum property input size
		sizeof (ULONG),					// minimum buffer size
		(PFNKSHANDLER)TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_VPDATAINFO,
		(PFNKSHANDLER) TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AMVPDATAINFO),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_MAXPIXELRATE,
		(PFNKSHANDLER) TRUE,
		sizeof (KSVPSIZE_PROP),
		sizeof (KSVPMAXPIXELRATE),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_INFORMVPINPUT,
		(PFNKSHANDLER) TRUE,
		sizeof (PKSPROPERTY),
		sizeof (DDPIXELFORMAT),	// could be 0 too
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_DDRAWHANDLE,
		(PFNKSHANDLER)FALSE,
		sizeof (PKSPROPERTY),
		sizeof (ULONG),    // could be 0 too
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_VIDEOPORTID,
		(PFNKSHANDLER)FALSE,
		sizeof (PKSPROPERTY),
		sizeof (ULONG),    // could be 0 too
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE,
		(PFNKSHANDLER)FALSE,
		sizeof (PKSPROPERTY),
		sizeof (ULONG),    // could be 0 too
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_GETVIDEOFORMAT,
		(PFNKSHANDLER) TRUE,
		sizeof (KSMULTIPLE_DATA_PROP), 		// for _GET; KSPROPERTY for _SET
		sizeof (ULONG),				// could be 4 or more
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_SETVIDEOFORMAT,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),  			// minimum property input size
		sizeof (ULONG),					// minimum buffer size
		(PFNKSHANDLER)TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_INVERTPOLARITY,
		(PFNKSHANDLER)TRUE,
		sizeof (KSPROPERTY),
		0,
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY,
		(PFNKSHANDLER)TRUE,
		sizeof (KSPROPERTY),
		sizeof (BOOL),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_SCALEFACTOR,
		(PFNKSHANDLER)TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AMVPSIZE),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	}
};

// CC

static /* const */ KSPROPERTY_ITEM CCPropItm[] = {
	{
		KSPROPERTY_CONNECTION_ALLOCATORFRAMING,	// support for setting CC buffer size
		(PFNKSHANDLER) TRUE, 					// get supported
		sizeof (KSPROPERTY),
		sizeof (KSALLOCATOR_FRAMING),
		(PFNKSHANDLER) FALSE,					// we only provide the allocator requirments
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_CONNECTION_STATE,			// support for setting CC buffer size
		(PFNKSHANDLER) TRUE, 					// get supported
		sizeof (KSPROPERTY),
		sizeof (KSSTATE),
		(PFNKSHANDLER) FALSE,					// we only provide the allocator requirments
		NULL,
		0,
		NULL,
		NULL,
		0
	}
};

// Copy Protect

static const KSPROPERTY_ITEM cppPropItm[]={

	{
		KSPROPERTY_DVDCOPY_CHLG_KEY,
		(PFNKSHANDLER) TRUE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_CHLGKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_DVD_KEY1,
		FALSE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_BUSKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_DEC_KEY2,
		(PFNKSHANDLER) TRUE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_BUSKEY ),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_TITLE_KEY,
		FALSE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_TITLEKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_DISC_KEY,
		FALSE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_DISCKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_SET_COPY_STATE,
		(PFNKSHANDLER)TRUE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_SET_COPY_STATE ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},

//	{KSPROPERTY_DVDCOPY_REGION,  // DVD region request
//								 // the minidriver shall fit in exactly
//								 // one region bit, corresponding to the region
//   								 // that the decoder is currently in
//        (PFNKSHANDLER)TRUE,
//        sizeof(KSPROPERTY),
//        sizeof(KS_DVDCOPY_REGION),	 // minimum size of data requested
//        (PFNKSHANDLER)FALSE,     // set key is not valid
//        NULL,
//        0,
//        NULL,
//        NULL,
//        0
//    },
//--- 97.11.27 S.Watanabe
	{
		KSPROPERTY_COPY_MACROVISION,		// support for setting macrovision level
		(PFNKSHANDLER) FALSE, 		// get not supported
		sizeof (KSPROPERTY),
		sizeof (KS_COPY_MACROVISION),
		(PFNKSHANDLER) TRUE,		// set MACROVISION level supported
		NULL,
		0,
		NULL,
		NULL,
		0
	},
//--- End.
};

// Rate Change

static const KSPROPERTY_ITEM RateChangePropItm[]={

	{
		KS_AM_RATE_SimpleRateChange,
		(PFNKSHANDLER) TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_SimpleRateChange),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	},


	{
		KS_AM_RATE_ExactRateChange,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_ExactRateChange),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	},


	{
		KS_AM_RATE_MaxFullDataRate,
		(PFNKSHANDLER) TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_MaxFullDataRate),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	},


	{
		KS_AM_RATE_Step,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_Step),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	}
};

/*****************************************************************************

				define the array of video property sets supported

*****************************************************************************/

//GUID Mpeg2Vid = {STATIC_KSPROPSETID_Mpeg2Vid};

// original is const
// modify for except warning
static /* const*/ KSPROPERTY_SET mpegVidPropSet[] = {
	{
		&KSPROPSETID_Mpeg2Vid,
		SIZEOF_ARRAY(mpegVidPropItm),
		(PKSPROPERTY_ITEM)mpegVidPropItm
	},
	{
		&KSPROPSETID_CopyProt,
		SIZEOF_ARRAY(cppPropItm),
		(PKSPROPERTY_ITEM)cppPropItm
	},
	{
		&KSPROPSETID_TSRateChange,
		SIZEOF_ARRAY(RateChangePropItm),
		(PKSPROPERTY_ITEM)RateChangePropItm
	}
};

static /* const*/ KSPROPERTY_SET mpegAudioPropSet[] = {
	{
		&KSPROPSETID_AudioDecoderOut,
		SIZEOF_ARRAY(audPropItm),
		(PKSPROPERTY_ITEM) audPropItm
	},
	{
		&KSPROPSETID_CopyProt,
		SIZEOF_ARRAY(cppPropItm),
		(PKSPROPERTY_ITEM)cppPropItm
	},
	{
		&KSPROPSETID_TSRateChange,
		SIZEOF_ARRAY(RateChangePropItm),
		(PKSPROPERTY_ITEM)RateChangePropItm
	}
};

static KSPROPERTY_SET SPPropSet[] = {
	{
		&KSPROPSETID_DvdSubPic,
		SIZEOF_ARRAY(spPropItm),
		(PKSPROPERTY_ITEM)spPropItm
	},
	{
		&KSPROPSETID_CopyProt,
		SIZEOF_ARRAY(cppPropItm),
		(PKSPROPERTY_ITEM)cppPropItm
	},
	{
		&KSPROPSETID_TSRateChange,
		SIZEOF_ARRAY(RateChangePropItm),
		(PKSPROPERTY_ITEM)RateChangePropItm
	}
};

//--- 98.06.01 S.Watanabe
//static KSPROPERTY_SET NTSCPropSet[] = {
//	&KSPROPSETID_CopyProt,
//	SIZEOF_ARRAY(MacroVisionPropItm),
//	(PKSPROPERTY_ITEM) MacroVisionPropItm
//};
//--- End.

GUID vpePropSetid = {STATIC_KSPROPSETID_VPConfig};

static /* const */ KSPROPERTY_SET VideoPortPropSet[] = {
	&vpePropSetid,
	SIZEOF_ARRAY(VideoPortPropItm),
	(PKSPROPERTY_ITEM)VideoPortPropItm
};

static /* const */ KSPROPERTY_SET CCPropSet[] = {
	&KSPROPSETID_Connection,
	SIZEOF_ARRAY(CCPropItm),
	(PKSPROPERTY_ITEM) CCPropItm
};

/*****************************************************************************

				other

*****************************************************************************/

static const KSTOPOLOGY Topology = {
	1,
	(GUID *) & KSCATEGORY_DATADECOMPRESSOR,
	0,
	NULL,
	0,
	NULL
};

KSEVENT_ITEM VPEventItm[] =
{
	{
		KSEVENT_VPNOTIFY_FORMATCHANGE,
		0,
		0,
		NULL,
		NULL,
		NULL
	}
};

GUID MY_KSEVENTSETID_VPNOTIFY = {STATIC_KSEVENTSETID_VPNotify};

KSEVENT_SET VPEventSet[] =
{
	{
		&MY_KSEVENTSETID_VPNOTIFY,
		SIZEOF_ARRAY(VPEventItm),
		VPEventItm,
	}
};

KSEVENT_ITEM ClockEventItm[] =
{
	{
        KSEVENT_CLOCK_POSITION_MARK,		// position mark event supported
		sizeof (KSEVENT_TIME_MARK),			// requires this data as input
		sizeof (KSEVENT_TIME_MARK),			// allocate space to copy the data
		NULL,
		NULL,
		NULL
	},
	{
		KSEVENT_CLOCK_INTERVAL_MARK,		// interval mark event supported
		sizeof (KSEVENT_TIME_INTERVAL),		// requires interval data as input
		sizeof (MYTIME),					// we use an additional workspace of
											// size longlong for processing
											// this event
		NULL,
		NULL,
		NULL
	}
};

KSEVENT_SET ClockEventSet[] =
{
	{
		&KSEVENTSETID_Clock,
		SIZEOF_ARRAY(ClockEventItm),
		ClockEventItm,
	}
};


// device property

typedef struct _DevPropData {
	DWORD	data;
} DEVPROPDATA, *PDEVPROPDATA;

static const KSPROPERTY_ITEM devicePropItm[]={
	{0,
	(PFNKSHANDLER)TRUE,
	sizeof(KSPROPERTY),
	sizeof(DEVPROPDATA),
	(PFNKSHANDLER)TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	}};

static /* const*/ KSPROPERTY_SET devicePropSet[] = {
	&GUID_NULL,
	SIZEOF_ARRAY(devicePropItm),
	(PKSPROPERTY_ITEM)devicePropItm
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\wdmbuff.h ===
//**************************************************************************
//
//      Title   : WDMBuff.h
//
//      Date    : 1997.11.28    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.11.28   000.0000   1st making.
//
//**************************************************************************
class  CWDMBuffer : public IMPEGBuffer
{
public:
    IMBoardListItem *GetNext( void );
    void            SetNext( IMBoardListItem *item );
    DWORD           GetPageNum( void );
    DWORD           GetPageSize( DWORD pagenum );
    BOOL            GetPagePointer( DWORD pagenum, DWORD *LinAddr, DWORD *PhysAddr );
    DWORD           GetBufferFlag( void );
    CWDMBuffer();
    ~CWDMBuffer();

    VOID            Init( void );
    BOOL            SetSRB( PHW_STREAM_REQUEST_BLOCK pSrb );
    PHW_STREAM_REQUEST_BLOCK    GetSRB( void);
    
private:
    PHW_STREAM_REQUEST_BLOCK    m_pSrb;
    IMBoardListItem             *m_WDMBuffNext;

#ifndef		REARRANGEMENT
public:
    BOOL						m_EndFlag;
	int							m_BuffNumber;
	WORD						m_StartPacketNumber;
	WORD						m_PacketNum;
	WORD						m_BeforePacketNum;
	WORD						m_Enable;
#endif		REARRANGEMENT
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\wdmbuff.cpp ===
//**************************************************************************
//
//      Title   : WDMBuff.cpp
//
//      Date    : 1997.12.08    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.08   000.0000   1st making.
//
//**************************************************************************
#include        "includes.h"

#include        "wdmbuff.h"
#include        "dvdinit.h"


CWDMBuffer::CWDMBuffer( void )
{
    m_pSrb = NULL;
    m_WDMBuffNext = NULL;

#ifndef		REARRANGEMENT
    m_EndFlag = TRUE;				//TRUE:last buffer  FALSE:non last buffer
	m_BuffNumber = 0;
	m_StartPacketNumber = 0;
	m_PacketNum = 0;
	m_BeforePacketNum = 0;
	m_Enable = FALSE;
#endif		REARRANGEMENT
}

CWDMBuffer::~CWDMBuffer( void )
{
    m_pSrb = NULL;
    m_WDMBuffNext = NULL;

#ifndef		REARRANGEMENT
//ǉϐ̏
    m_EndFlag = TRUE;
	m_BuffNumber = 0;
	m_StartPacketNumber = 0;
	m_PacketNum = 0;
	m_BeforePacketNum = 0;
	m_Enable = FALSE;
#endif		REARRANGEMENT
}


IMBoardListItem *CWDMBuffer::GetNext( void )
{
    return( m_WDMBuffNext );
}


void    CWDMBuffer::SetNext( IMBoardListItem *item )
{
    m_WDMBuffNext = item;
}


DWORD   CWDMBuffer::GetPageNum( void )
{
	ASSERT( m_pSrb != NULL );

#ifndef		REARRANGEMENT
	return ((DWORD) m_PacketNum);
#else
    return( (DWORD)(m_pSrb->NumberOfPhysicalPages) );        // Is it OK??????
#endif		REARRANGEMENT

//    return( (DWORD)(m_pSrb->NumberOfBuffers) );        // Is it OK??????
}


DWORD   CWDMBuffer::GetPageSize( DWORD pagenum )
{
    ULONG   PageSize;
//    DWORD   i, j;
//    PKSSTREAM_HEADER    pStruc;

	ASSERT( m_pSrb != NULL );

#ifndef		REARRANGEMENT
	ASSERT( m_PacketNum >= pagenum );
#else
	ASSERT( m_pSrb->NumberOfPhysicalPages >= pagenum );
#endif		REARRANGEMENT

	ASSERT( pagenum != 0 );

#ifndef		REARRANGEMENT
	PageSize = m_pSrb->ScatterGatherBuffer[m_BeforePacketNum + pagenum - 1].Length;
#else
    PageSize = m_pSrb->ScatterGatherBuffer[pagenum-1].Length;
#endif		REARRANGEMENT

//    DBG_PRINTF( ("WDMBUFF:   PageSzie = 0x%0x\n\r", PageSize ) );
    
/*
    j = 0;
    for( i=0; i<(m_pSrb->NumberOfBuffers); i++ ){
        pStruc = &((PKSSTREAM_HEADER)(m_pSrb->CommandData.DataBufferArray))[i];
        if( pStruc->DataUsed != 0  ){
            if(  !(pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ) ){
                // DVD valid data to transfer to decoder board.
                PageSize = m_pSrb->ScatterGatherBuffer[j].Length;
                j++;
            }
            if( j>=pagenum )
                break;
        }
    }
*/
    ASSERT( (PageSize % 2048) == 0 );
    
    return( (DWORD)PageSize );
}


BOOL   CWDMBuffer::GetPagePointer( DWORD pagenum, DWORD *LinAddr, DWORD *PhysAddr )
{
    PHYSICAL_ADDRESS    pAdd;
    DWORD               i, j;
    PKSSTREAM_HEADER    pStruc;

	ASSERT( m_pSrb != NULL );

#ifndef		REARRANGEMENT
	ASSERT( m_PacketNum >= pagenum );
#else
	ASSERT( m_pSrb->NumberOfPhysicalPages >= pagenum );
#endif		REARRANGEMENT

	ASSERT( pagenum != 0 );

#ifndef		REARRANGEMENT
    pAdd = m_pSrb->ScatterGatherBuffer[m_BeforePacketNum + pagenum - 1].PhysicalAddress;
#else
    pAdd = m_pSrb->ScatterGatherBuffer[pagenum-1].PhysicalAddress;
#endif		REARRANGEMENT

    *PhysAddr = (DWORD)(pAdd.LowPart);
    *LinAddr = (DWORD)0;

    // Linear address is validate?

    j = 0;

    for( i=0; i<(m_pSrb->NumberOfBuffers); i++ ){
        pStruc = &((PKSSTREAM_HEADER)(m_pSrb->CommandData.DataBufferArray))[i];
		ASSERT( pStruc != NULL );
        if( pStruc->DataUsed != 0  ){
            if(  !(pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED) )
            {
                // DVD valid data to transfer to decoder board.
                *LinAddr = (DWORD)(pStruc->Data);
                j++;
            }
            if( j>=pagenum )
                break;
        }
    }
	ASSERT( j != 0 );
	ASSERT( *LinAddr != 0 );
    return( TRUE );

}

DWORD   CWDMBuffer::GetBufferFlag( void )
{
    return( (DWORD)0 );
//    return( (DWORD)m_pSrb->Flags );
}

BOOL    CWDMBuffer::SetSRB( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	ASSERT( pSrb != NULL );

    if( pSrb == NULL ){
        return( FALSE );
    }
    
    m_pSrb = pSrb;
    return( TRUE );
}

PHW_STREAM_REQUEST_BLOCK CWDMBuffer::GetSRB( void )
{
	ASSERT( m_pSrb != NULL );
    return( m_pSrb );
}

VOID    CWDMBuffer::Init( void )
{
    m_pSrb = NULL;
    m_WDMBuffNext = NULL;

#ifndef		REARRANGEMENT
    m_EndFlag = TRUE;
	m_BuffNumber = 0;
	m_StartPacketNumber = 0;
	m_PacketNum = 0;
	m_BeforePacketNum = 0;
	m_Enable = FALSE;
#endif		REARRANGEMENT
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\wdmkserv.h ===
//**************************************************************************
//
//      Title   : WDMKServ.h
//
//      Date    : 1997.12.02    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.02   000.0000   1st making.
//
//**************************************************************************

class HW_DEVICE_EXTENSION;

class   CWDMKernelService : public IKernelService
{
public:
        CWDMKernelService(void){ m_ioBase=0; m_pHwDevExt=NULL; };
        ~CWDMKernelService(void){ m_ioBase=0; m_pHwDevExt=NULL; };
        BOOL    Init( DWORD address, HW_DEVICE_EXTENSION *pHwDevExt, PCHAR szID );
		BOOL	InitConfig( DWORD ID );
        BOOL    SetPCIConfigData( DWORD address, DWORD data );
        BOOL    SetPCIConfigData( DWORD address, WORD data );
        BOOL    SetPCIConfigData( DWORD address, BYTE data );
        BOOL    GetPCIConfigData( DWORD address, DWORD *data );
        BOOL    GetPCIConfigData( DWORD address, WORD *data );
        BOOL    GetPCIConfigData( DWORD address, BYTE *data );
        BOOL    SetPortData( DWORD address, DWORD data );
        BOOL    SetPortData( DWORD address, WORD data );
        BOOL    SetPortData( DWORD address, BYTE data );
        BOOL    GetPortData( DWORD address, DWORD *data );
        BOOL    GetPortData( DWORD address, WORD *data );
        BOOL    GetPortData( DWORD address, BYTE *data );
        BOOL    GetTickCount( DWORD *pTickCount );
        BOOL    Sleep( DWORD SleepCount );
        void    DisableHwInt( void );
        void    EnableHwInt( void );

        BOOL    CheckInt( void );

private:
        DWORD                   m_ioBase;
        HW_DEVICE_EXTENSION     *m_pHwDevExt;
        DWORD                   m_IntCount;
        KIRQL                   m_OldIrql;
        PKTHREAD                m_pThread;
        KEVENT                  m_Event;
        DWORD					m_PCIConfigData;
        KIRQL                   m_Irql;
        CHAR                    m_MachineID[20];        // save Machine inf
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\wdmkserv.cpp ===
//**************************************************************************
//
//      Title   : WDMKServ.cpp
//
//      Date    : 1997.12.02    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1997.12.02   000.0000   1st making.
//
//**************************************************************************
#include    "includes.h"

#include    "hal.h"
#include    "wdmkserv.h"
#include    "mpevent.h"
#include    "classlib.h"
#include    "ctime.h"
#include    "schdat.h"
#include    "ccque.h"
#include    "ctvctrl.h"
#include	"hlight.h"
#include    "hwdevex.h"


// 1998.06.09 Seichan
// DefineLɂƁAPCĨRtBOԂ𒼐ڑ삷悤ɂȂ
//#define DIRECTPCICONFIG


BOOL CWDMKernelService::Init( DWORD address, HW_DEVICE_EXTENSION *pHwDevExt, PCHAR szID )
{
    if( address==0 || pHwDevExt==NULL ){
        return( FALSE );
    }

    m_ioBase = address;
    m_pHwDevExt = pHwDevExt;
    m_IntCount = 0;
    m_OldIrql = 0;

    m_pThread = NULL;

    m_Irql = (KIRQL)((pHwDevExt->Irq) & 0xFF );
    if( m_Irql>31 ){
        DBG_PRINTF( ("DVDWDM:    Invalid IRQL!!\n\r") );
        DBG_BREAK();
        return( FALSE );
    }
    KeInitializeEvent( &m_Event, NotificationEvent, FALSE );

    DBG_PRINTF( ("KSERV:HwDevExt=%08x\n\r", m_pHwDevExt) );

    // save MAchine informaton.
    strncpy( m_MachineID, szID, 19 );
    m_MachineID[19] = '0';
    DBG_PRINTF( ("KSERV:MachineID = %s\n\r", m_MachineID ) );

    return( TRUE );
}

BOOL CWDMKernelService::InitConfig( DWORD Id )
{
#ifdef DIRECTPCICONFIG
    if( Id==0  ){
        return( FALSE );
    }

	ULONG OldPort = READ_PORT_ULONG( (PULONG)0xcf8 );
	m_PCIConfigData = 0xffffffff;

	for( ULONG i = 0 ; i < 32; i ++ )
	{
		for( ULONG j = 0 ; j < 32; j ++ )
		{
			WRITE_PORT_ULONG( (PULONG)0xcf8, ( i <<  16 ) | (j << 11 ) | 0x80000000 );
			ULONG Data = READ_PORT_ULONG( (PULONG)0xcfc );
			if( Data != 0xffffffff )
			{
				DBG_PRINTF(("(%d,%d)=0x%x", i,j,Data ));
			};
			if( Data == Id )
			{
				DBG_PRINTF(("!!!!!!\r\n"));
				m_PCIConfigData = (i << 16 ) | (j << 11 ) | 0x80000000;
				break;
			}
		};
	};

	WRITE_PORT_ULONG( (PULONG)0xcf8, OldPort );
#endif
    return( TRUE );
}


BOOL CWDMKernelService::SetPCIConfigData( DWORD address, DWORD data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFF ){
        DBG_BREAK();
        return( FALSE );
    }

#ifdef DIRECTPCICONFIG
//    DBG_PRINTF( ("XXXPCIConfigData currIrql = 0x%0x LINE=%d\n\r", KeGetCurrentIrql(),__LINE__ ) );

	if( m_PCIConfigData == 0xffffffff )
		return FALSE;

	ULONG OldPort = READ_PORT_ULONG( (PULONG)0xcf8 );

	WRITE_PORT_ULONG( (PULONG)0xcf8, ( m_PCIConfigData | address) & 0xfffffffc );
	WRITE_PORT_ULONG( (PULONG)0xcfc, data );

	WRITE_PORT_ULONG( (PULONG)0xcf8, OldPort );

	return TRUE;
#else
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );
    return( StreamClassReadWriteConfig( m_pHwDevExt,
                                        FALSE,
                                        &data,
                                        address,
                                        4 ) );
#endif
}


BOOL CWDMKernelService::SetPCIConfigData( DWORD address, WORD data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFF ){
        DBG_BREAK();
        return( FALSE );
    }

#ifdef DIRECTPCICONFIG
//    DBG_PRINTF( ("XXXPCIConfigData currIrql = 0x%0x LINE=%d\n\r", KeGetCurrentIrql(),__LINE__ ) );

	if( m_PCIConfigData == 0xffffffff )
		return FALSE;

	ULONG OldPort = READ_PORT_ULONG( (PULONG)0xcf8 );

	WRITE_PORT_ULONG( (PULONG)0xcf8, (m_PCIConfigData | address) & 0xfffffffc );
	ULONG OrgData = READ_PORT_ULONG( (PULONG)0xcfc );
	switch( address % 4 )
	{
		case 0:
			WRITE_PORT_ULONG( (PULONG)0xcfc, (OrgData & 0xffff0000 ) | (DWORD)data  );
			break;
		case 2:
			WRITE_PORT_ULONG( (PULONG)0xcfc, (OrgData & 0x0000ffff ) | ((DWORD)data << 16) );
			break;
		default:
			DBG_BREAK();
	};

	WRITE_PORT_ULONG( (PULONG)0xcf8, OldPort );

	return TRUE;
#else
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );
    return( StreamClassReadWriteConfig( m_pHwDevExt,
                                        FALSE,
                                        &data,
                                        address,
                                        2 ) );
#endif
}


BOOL CWDMKernelService::SetPCIConfigData( DWORD address, BYTE data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFF ){
        DBG_BREAK();
        return( FALSE );
    }

#ifdef DIRECTPCICONFIG
//    DBG_PRINTF( ("XXXPCIConfigData currIrql = 0x%0x LINE=%d\n\r", KeGetCurrentIrql(),__LINE__ ) );
 
	if( m_PCIConfigData == 0xffffffff )
		return FALSE;

	ULONG OldPort = READ_PORT_ULONG( (PULONG)0xcf8 );

	WRITE_PORT_ULONG( (PULONG)0xcf8, (m_PCIConfigData | address) & 0xfffffffc );
	ULONG OrgData = READ_PORT_ULONG( (PULONG)0xcfc );
	switch( address % 4 )
	{
		case 0:
			WRITE_PORT_ULONG( (PULONG)0xcfc, (OrgData & 0xffffff00 ) | (DWORD)data  );
			break;
		case 1:
			WRITE_PORT_ULONG( (PULONG)0xcfc, (OrgData & 0xffff00ff ) | ((DWORD)data << 8) );
			break;
		case 2:
			WRITE_PORT_ULONG( (PULONG)0xcfc, (OrgData & 0xff00ffff ) | ((DWORD)data << 16) );
			break;
		case 3:
			WRITE_PORT_ULONG( (PULONG)0xcfc, (OrgData & 0x00ffffff ) | ((DWORD)data << 24) );
			break;
	};

	WRITE_PORT_ULONG( (PULONG)0xcf8, OldPort );

	return TRUE;
#else
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );
    return( StreamClassReadWriteConfig( m_pHwDevExt,
                                        FALSE,
                                        &data,
                                        address,
                                        1 ) );
#endif
}


BOOL CWDMKernelService::GetPCIConfigData( DWORD address, DWORD *data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFF ){
        DBG_BREAK();
        return( FALSE );
    }

#ifdef DIRECTPCICONFIG
//    DBG_PRINTF( ("XXXPCIConfigData currIrql = 0x%0x LINE=%d\n\r", KeGetCurrentIrql(),__LINE__ ) );

	if( m_PCIConfigData == 0xffffffff )
		return FALSE;

	ULONG OldPort = READ_PORT_ULONG( (PULONG)0xcf8 );

	WRITE_PORT_ULONG( (PULONG)0xcf8, ( m_PCIConfigData | address) & 0xfffffffc );
	*data = READ_PORT_ULONG( (PULONG)0xcfc );

	WRITE_PORT_ULONG( (PULONG)0xcf8, OldPort );

//    return TRUE;

#else
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );
    StreamClassReadWriteConfig( m_pHwDevExt,
                                TRUE,
                                data,
                                address,
                                4 );

#endif

    if( address==0x2C ){
        if( *data!=0x8888123F ){
            return( TRUE );
        }

        if( strncmp( m_MachineID, "TECRA", 5 )==0 ){
            *data = 0x00011179;
        }else if( strncmp( m_MachineID, "PORTEGE", 7 )==0 ){
            *data = 0x00021179;
        }
    }
    return( TRUE );

}


BOOL CWDMKernelService::GetPCIConfigData( DWORD address, WORD *data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFF ){
        DBG_BREAK();
        return( FALSE );
    }

#ifdef DIRECTPCICONFIG
//    DBG_PRINTF( ("XXXPCIConfigData currIrql = 0x%0x LINE=%d\n\r", KeGetCurrentIrql(),__LINE__ ) );
	if( m_PCIConfigData == 0xffffffff )
		return FALSE;

	ULONG OldPort = READ_PORT_ULONG( (PULONG)0xcf8 );

	WRITE_PORT_ULONG( (PULONG)0xcf8, ( m_PCIConfigData | address) & 0xfffffffc );
	switch( address % 4 )
	{
		case 0:
			*data = (WORD)(READ_PORT_ULONG( (PULONG)0xcfc ) & 0xffff);
			break;
		case 2:
			*data = (WORD)((READ_PORT_ULONG( (PULONG)0xcfc ) >> 16 ) & 0xffff );
			break;
		default:
			*data = 0xffff;
			DBG_BREAK();
	};

	WRITE_PORT_ULONG( (PULONG)0xcf8, OldPort );

//    return TRUE;
#else
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );
    StreamClassReadWriteConfig( m_pHwDevExt,
                                TRUE,
                                data,
                                address,
                                2 );
#endif

    if( address==0x2C ){
        if( *data!=0x123F ){
            return( TRUE );
        }

        if( strncmp( m_MachineID, "TECRA", 5 )==0 ){
            *data = 0x1179;
        }else if( strncmp( m_MachineID, "PORTEGE", 7 )==0 ){
            *data = 0x1179;
        }
    }
    if( address==0x2E ){
        if( *data!=0x8888 ){
            return( TRUE );
        }

        if( strncmp( m_MachineID, "TECRA", 5 )==0 ){
            *data = 0x0001;
        }else if( strncmp( m_MachineID, "PORTEGE", 7 )==0 ){
            *data = 0x0002;
        }
    }

    return( TRUE );

}


BOOL CWDMKernelService::GetPCIConfigData( DWORD address, BYTE *data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFF ){
        DBG_BREAK();
        return( FALSE );
    }

#ifdef DIRECTPCICONFIG
//    DBG_PRINTF( ("XXXPCIConfigData currIrql = 0x%0x LINE=%d\n\r", KeGetCurrentIrql(),__LINE__ ) );
	if( m_PCIConfigData == 0xffffffff )
		return FALSE;

	ULONG OldPort = READ_PORT_ULONG( (PULONG)0xcf8 );

	WRITE_PORT_ULONG( (PULONG)0xcf8, ( m_PCIConfigData | address) & 0xfffffffc );
	switch( address % 4 )
	{
		case 0:
			*data = (BYTE)(READ_PORT_ULONG( (PULONG)0xcfc ) & 0xff);
			break;
		case 1:
			*data = (BYTE)((READ_PORT_ULONG( (PULONG)0xcfc ) >> 8 ) & 0xff );
			break;
		case 2:
			*data = (BYTE)((READ_PORT_ULONG( (PULONG)0xcfc ) >> 16 ) & 0xff );
			break;
		case 3:
			*data = (BYTE)((READ_PORT_ULONG( (PULONG)0xcfc ) >> 24 ) & 0xff );
			break;
	};

	WRITE_PORT_ULONG( (PULONG)0xcf8, OldPort );

	return TRUE;
#else
	ASSERT( KeGetCurrentIrql() == PASSIVE_LEVEL );
    return( StreamClassReadWriteConfig( m_pHwDevExt,
                                        TRUE,
                                        data,
                                        address,
                                        1 ) );
#endif
}

BOOL CWDMKernelService::SetPortData( DWORD address, DWORD data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFFFF ){
        DBG_BREAK();
        return( FALSE );
    }

    PULONG   addr = (PULONG)(m_ioBase + address);
    ULONG   o_data = (ULONG)data;
    WRITE_PORT_ULONG( addr, o_data );

    return( TRUE );

}

BOOL CWDMKernelService::SetPortData( DWORD address, WORD data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFFFF ){
        DBG_BREAK();
        return( FALSE );
    }

    PUSHORT   addr = (PUSHORT)(m_ioBase + address);
    USHORT  o_data = (USHORT)data;
    WRITE_PORT_USHORT( addr, o_data );

    return( TRUE );

}


BOOL CWDMKernelService::SetPortData( DWORD address, BYTE data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFFFF ){
        DBG_BREAK();
        return( FALSE );
    }

    PUCHAR   addr = (PUCHAR)(m_ioBase + address);
    UCHAR   o_data = (UCHAR)data;
    WRITE_PORT_UCHAR( addr, o_data );

    return( TRUE );

}

BOOL CWDMKernelService::GetPortData( DWORD address, DWORD *data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFFFF ){
        DBG_BREAK();
        return( FALSE );
    }

    PULONG   addr = (PULONG)(m_ioBase + address);
    *data = READ_PORT_ULONG( addr );

    return( TRUE );

}

BOOL CWDMKernelService::GetPortData( DWORD address, WORD *data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFFFF ){
        DBG_BREAK();
        return( FALSE );
    }

    PUSHORT   addr = (PUSHORT)(m_ioBase + address);
    *data = READ_PORT_USHORT( addr );

    return( TRUE );

}



BOOL CWDMKernelService::GetPortData( DWORD address, BYTE *data )
{
    if( m_ioBase==0 || m_pHwDevExt==NULL ){
        return( FALSE );
    }

    if( address>0xFFFF ){
        DBG_BREAK();
        return( FALSE );
    }

    PUCHAR   addr = (PUCHAR)(m_ioBase + address);
    *data = READ_PORT_UCHAR( addr );

    return( TRUE );

}


BOOL CWDMKernelService::GetTickCount( DWORD *pTickCount )
{
    ULONGLONG   ticks;
    ULONGLONG   rate;
    DWORD       time;

    ticks = (ULONGLONG)KeQueryPerformanceCounter((PLARGE_INTEGER)&rate).QuadPart;

    //
    // convert from ticks to 100ns clock
    //
    ticks = ( (ticks & 0xFFFFFFFF00000000) / rate * 10000000 +
            (ticks & 0xFFFFFFFF) * 10000000 /rate );
    //
    // convert from ticks to 1ms clock
    //
    time = (DWORD)( ticks / 10000 );
    *pTickCount = time;

    return( TRUE );

}



BOOL CWDMKernelService::Sleep( DWORD SleepCount )
{
    DWORD   StartTime, EndTime, CurrentTime;
    LARGE_INTEGER  time, rate;
    LARGE_INTEGER  waittime;

    time = KeQueryPerformanceCounter( &rate );
    CurrentTime = (DWORD)(( (time.QuadPart*1000)/(rate.QuadPart) ));
//    DBG_PRINTF(("Sleep: Start = x0x%x\n\r", CurrentTime ));

    time = KeQueryPerformanceCounter( &rate );
    StartTime = (DWORD)( (time.QuadPart*1000)/rate.QuadPart );
    EndTime = StartTime + SleepCount;

    if( KeGetCurrentIrql() > PASSIVE_LEVEL ){

        while( TRUE ){
            KeStallExecutionProcessor( 1000 );

            time = KeQueryPerformanceCounter( &rate );
            CurrentTime = (DWORD)(( (time.QuadPart*1000)/(rate.QuadPart) ));
//DBG_PRINTF(("Sleep: Current = x0%x, End = 0x%x\r\n", CurrentTime, EndTime ));
            if( CurrentTime>=EndTime )
                break;
        }

    }else{

        waittime.QuadPart = SleepCount * 10000;
        while( TRUE ){
            
            KeWaitForSingleObject( &m_Event, Executive,
                                    KernelMode, FALSE, &waittime );
            time = KeQueryPerformanceCounter( &rate );
            CurrentTime = (DWORD)(( (time.QuadPart*1000)/(rate.QuadPart) ));
            if( CurrentTime >= EndTime ){
                break;
            }else{
                waittime.QuadPart = (EndTime-CurrentTime) * 10000;
            }
        }

    }
    time = KeQueryPerformanceCounter( &rate );
    CurrentTime = (DWORD)(( (time.QuadPart*1000)/(rate.QuadPart) ));
//    DBG_PRINTF(("Sleep: End = 0x%x\n\r", CurrentTime ));

    return( TRUE );
}



void CWDMKernelService::DisableHwInt( void )
{
    KIRQL   currIrql;
    currIrql = KeGetCurrentIrql();


    if( m_IntCount==0 ){
        if( currIrql == m_Irql ){
            m_OldIrql = m_Irql;
            m_IntCount++;
            return;
        }
        KeRaiseIrql( m_Irql, &m_OldIrql );
    }
    m_IntCount++;
    
    return;
}



void CWDMKernelService::EnableHwInt( void )
{
    m_IntCount--;

    if( m_IntCount==0 ){
        if( m_OldIrql == m_Irql ){
            return;
        }
        KeLowerIrql( m_OldIrql );
    } 
    return;
}



BOOL CWDMKernelService::CheckInt( void )
{
    if( m_IntCount != 0 ){
        DBG_BREAK();
    }
    return(TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\zivabrd.h ===
//***************************************************************************
//
//	FileName:
//		$Workfile: zivabrd.h $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.WDM/zivabrd.h 38    99/04/21 2:46p Yagi $
// $Modtime: 99/04/21 2:21p $
// $Nokeywords:$
//***************************************************************************
//     Date    |   Author     |  Description
//  -----------+--------------+--------------------------------------------
//  1997.12.04 |  Hideki Yagi | Add VideoProperty_FilmCamera.
//             |              | This Property is necessary to support WSS.
//  1998.02.19 |  Hideki Yagi | Add AudioProperty_AC3OutputMode.
//             |              | This Property is necessary to support KARAOKE.
//  1998.03.27 |  Hideki Yagi | Add GetCapability method.
//             |              | Add VideoProperty_SuquarePixel.
//  1998.05.01 |  Hideki Yagi | Add SubpicProperty_FlushBuff.
//  1998.05.12 |  Hideki Yagi | Add m_VSyncEventList.
//  1998.09.25 |  Hideki Yagi | Add m_WrapperType.
//             |              |
//

#ifndef _ZIVA_BOARD_H_
#define _ZIVA_BOARD_H_

class CZiVA;
class CIOIF;

//***************************************************************************
//	KernelService HWInt Help Class
//***************************************************************************
class CAutoHwInt
{
	private:
		IKernelService *m_pKernelObj;
	public:
		CAutoHwInt( IKernelService *pKernelObj )
		{
			m_pKernelObj = NULL;
			ASSERT( pKernelObj != NULL );
			m_pKernelObj = pKernelObj;
			m_pKernelObj->DisableHwInt();
		};
		
		~CAutoHwInt( void )
		{
			m_pKernelObj->EnableHwInt();
		};
};

//***************************************************************************
//	IMBoardListItem Help Class
//***************************************************************************
class CList
{
	private:
		IMBoardListItem *pTopItem;
		IMBoardListItem *pCurrentItem;

	public:
		CList( void );
		void	Init( void );

		BOOL	SearchItem( IMBoardListItem *pItem );
		BOOL	AddItem( IMBoardListItem *pItem );
		BOOL	DeleteItem( IMBoardListItem *pItem );
		BOOL	SetCurrentToTop( void );
		IMBoardListItem *GetNext( void );
		IMBoardListItem *SearchBottomItem( void );
};

//***************************************************************************
//	VideoPropatySet Class
//***************************************************************************
class CVideoPropSet
{
	public:
		VideoProperty_TVSystem_Value		m_TVSystem;
		VideoProperty_AspectRatio_Value		m_AspectRatio;
		VideoProperty_DisplayMode_Value		m_DisplayMode;
		VideoSizeStruc						m_Size;
		VideoProperty_DigitalOut_Value		m_DigitalOut;
		UCHAR								m_DigitalPalette[3][256];
		VideoAPSStruc						m_APS;
		VideoProperty_ClosedCaption_Value	m_ClosedCaption;
		VideoProperty_OutputSource_Value	m_OutputSource;
		VideoProperty_CompositeOut_Value	m_CompositeOut;
		VideoProperty_SVideoOut_Value		m_SVideoOut;
		VideoProperty_SkipFieldControl_Value	m_SkipFieldControl;
		VideoProperty_FilmCamera_Value		m_FilmCamera;
        VideoProperty_SquarePixel_Value     m_SquarePixel;
//by oka
		VideoProperty_OSD_Switch_Value		m_OSDSwitch;

	public:
		CVideoPropSet(){ Init(); };
		
		void Init( void )
		{
			// setup default value
			m_TVSystem				= TV_NTSC;
			m_AspectRatio			= Aspect_04_03;
			m_DisplayMode			= Display_Original;
			m_Size.ResHorizontal	= 720;
			m_Size.ResVertical		= 480;
			m_DigitalOut			= DigitalOut_Off;

			for( int i = 0 ; i < 3 ; i ++ )
				for( int j = 0 ; j < 256; j ++ )
                m_DigitalPalette[i][j] = (UCHAR)j;

			m_APS.CgmsType			= CgmsType_Off;
			m_APS.APSType			= ApsType_Off;
			m_ClosedCaption			= ClosedCaption_Off;
			m_OutputSource			= OutputSource_DVD;
			m_CompositeOut			= CompositeOut_Off;
			m_SVideoOut				= SVideoOut_Off;
			m_SkipFieldControl		= SkipFieldControl_Off;
			m_FilmCamera			= Source_Camera;
            m_SquarePixel           = SquarePixel_Off;
// by oka
			m_OSDSwitch				= Video_OSD_Off;
		};
};

//***************************************************************************
//	AudioPropatySet Class
//***************************************************************************
class CAudioPropSet
{
	public:
		AudioProperty_Type_Value			m_Type;
		DWORD								m_StreamNo;
		DWORD								m_Volume;
		DWORD								m_Sampling;
		DWORD								m_ChannelNo;
		DWORD								m_Quant;
		AudioProperty_AudioOut_Value		m_OutType;
		AudioProperty_Cgms_Value			m_Cgms;
		AudioProperty_AnalogOut_Value		m_AnalogOut;
		AudioProperty_DigitalOut_Value		m_DigitalOut;
		DWORD								m_AC3DRangeLowBoost;
		DWORD								m_AC3DRangeHighCut;
		AudioProperty_AC3OperateMode_Value	m_AC3OperateMode;
		AudioProperty_AC3OutputMode_Value   m_AC3OutputMode;


	public:
		CAudioPropSet(){ Init(); };
		
		void Init( void )
		{
			// setup default value
			m_Type = AudioType_AC3;
			m_StreamNo	= 0;
			m_Volume	= 100;
			m_Sampling	= 48000;
			m_ChannelNo	= 2;
			m_Quant		= 16;
			m_OutType	= AudioOut_Encoded;
			m_Cgms		= AudioCgms_Off;
			m_AnalogOut	= AudioAnalogOut_On;
			m_DigitalOut = AudioDigitalOut_Off;
			m_AC3DRangeLowBoost = 128;
			m_AC3DRangeHighCut = 128;
			m_AC3OperateMode = AC3OperateLine;
		};

};

//***************************************************************************
//	SubpicPropatySet Class
//***************************************************************************
class CSubpicPropSet
{
	public:
		DWORD								m_StreamNo;
		UCHAR								m_Palette[48];
		SubpHlightStruc						m_Hlight;
		SubpicProperty_State_Value			m_OutType;
// by oka
		SubpHlightButtonStruc				m_HlightButton;

	public:
				// setup default value
		CSubpicPropSet(){ Init(); };

		void Init( void )
		{
			m_StreamNo		= 0;
			for( int i = 0 ; i < 48 ; i ++ )
				m_Palette[ i ] = 0;
			m_Hlight.Hlight_Switch	=  Hlight_Off;
			m_Hlight.Hlight_StartX	=  0;
			m_Hlight.Hlight_EndX	=  0;
			m_Hlight.Hlight_StartY	=  0;
			m_Hlight.Hlight_EndY	=  0;
			m_Hlight.Hlight_Color	=  0;
			m_Hlight.Hlight_Contrast=  0;
			m_OutType				=  Subpic_On;
//  by oka
			m_HlightButton.Hlight_Button = 0;
			m_HlightButton.Hlight_Action = Button_Unhighlight;
		};
};

//***************************************************************************
//	ZiVA Board Class
//***************************************************************************
class CMPEGBoardHAL: public IClassLibHAL, public IWrapperHAL
{
	// 
	private:
		IKernelService *m_pKernelObj;		// Kernel Service Object
		CIOIF			ioif;				// IO interface object
		CZiVA			ziva;				// ZiVA chip control object
        CADV7175A       adv7175a;           // ADV7175A control object
        CADV7170        adv7170;            // ADV7170 ccontrol object
        CADV            *adv;               // pointer to ADV object
		CMixHALStream	m_Stream;			// Mix Hal Stream object
		
#ifdef POWERCHECK_BY_FLAG
		POWERSTATE		m_PowerState;		// Hardware power state
#endif
		CList			m_SendDataEventList;
		CList			m_StartVOBUEventList;
		CList			m_EndVOBEventList;
		CList			m_VUnderFlowEventList;
		CList			m_AUnderFlowEventList;
		CList			m_SPUnderFlowEventList;
		CList			m_VOverFlowEventList;
		CList			m_AOverFlowEventList;
		CList			m_SPOverFlowEventList;
// by oka
		CList			m_ButtonActivteEventList;
		CList			m_NextPictureEventList;
		CList			m_UserDataEventList;
// end
        CList           m_VSyncEventList;           // 98.05.12 H.Yagi
		
		CVideoPropSet	m_VideoProp;		// Video Property Set
		CAudioPropSet	m_AudioProp;		// Audio Property Set
		CSubpicPropSet	m_SubpicProp;		// Subpic Property Set

		DWORD			m_DMABufferLinearAddr;		// DMA buffer addr
		DWORD			m_DMABufferPhysicalAddr;	// DMA buffer addr

		BOOL			fMasterAbortFlag;
		BOOL			fRDYDFlag;
		BOOL			fENDPFlag;
		BOOL			fENDCFlag;
		DWORD			m_NaviCount;

		DWORD			m_EventIntMask;
// by oka
		DWORD			m_ZivaPbtIntMask;		// stock mask for PBT_INT
		DWORD			m_MaskReference[24];	// interrupt bit reference counter
		BOOL			m_NeedPowerOnDelay;		// power on delay for audio
		DWORD			m_PowerOnTime;			// power on time.

		// 1998.8.18 seichan
		//DisplayModeZiVAPICV荞݂Őݒ肷邽߂̃tO
		BOOL		m_SetVideoProperty_DisplayMode_Event;

        WRAPPERTYPE     m_WrapperType;          // WrappertType Flag

	private:
		void	NotifyEvent( CList *pList , VOID *Ret );
		void	CheckZiVAInterrupt( DWORD dwIntFlag );
		DWORD	GetDMABufferLinearAddr( void ) { return m_DMABufferLinearAddr; };
		DWORD	GetDMABufferPhysicalAddr( void ) { return m_DMABufferPhysicalAddr; };

		void	ClearMasterAbortEvent( void );
		void	SetMasterAbortEvent( void );
		BOOL	IsMasterAbortOccurred( void );
		BOOL	WaitMasterAbort( void );

		void	ClearRDYDEvent( void );
		void	SetRDYDEvent( void );
		BOOL	IsRDYDOccurred( void );
		BOOL	WaitRDYD( void );

		void	ClearENDPEvent( void );
		void	SetENDPEvent( void );
		BOOL	IsENDPOccurred( void );
		BOOL	WaitENDP( void );

		void	ClearENDCEvent( void );
		void	SetENDCEvent( void );
		BOOL	IsENDCOccurred( void );
		BOOL	WaitENDC( void );

		DWORD	GetEventIntMask( void ){ return m_EventIntMask; };
// by oka
		BOOL	SetEventIntMask( DWORD mask );
		BOOL	UnsetEventIntMask( DWORD mask );

// by oka for Closed Caption
		inline void	SetUSRData( void );
		inline void	SendCCData( void );
		DWORD	m_CCData[CC_DATA_SIZE];
		DWORD	m_CCDataPoint;
		DWORD	m_CCDataNumber;
		DWORD	m_CCRingBufferStart;
		DWORD	m_CCRingBufferNumber;
		DWORD	m_CCstart;	// User Data Area start point
		DWORD	m_CCend;	// User Data Area end point

		DWORD	m_CCsend_point;		//Oobt@ł̃|C^[
		DWORD	m_CCpending;		//Ȃ
		DWORD	m_CCnumber;		//f[^̐

// by oka for OnScreenDisplay
		DWORD	m_OSDStartAddr;
		DWORD	m_OSDEndAddr;
// end
		//-------------------------------------------------------------------
		// Video property private functions( Set series )
		//-------------------------------------------------------------------
		BOOL	SetVideoProperty_TVSystem( PVOID pData );
		BOOL	SetVideoProperty_AspectRatio( PVOID pData );
		BOOL	SetVideoProperty_DisplayMode( PVOID pData );
		BOOL	SetVideoProperty_Resolution( PVOID pData );
		BOOL	SetVideoProperty_DigitalOut( PVOID pData );
		BOOL	SetVideoProperty_DigitalPalette( PVOID pData );
		BOOL	SetVideoProperty_APS( PVOID pData );
		BOOL	SetVideoProperty_ClosedCaption( PVOID pData );
		BOOL	SetVideoProperty_OutputSource( PVOID pData );
		BOOL	SetVideoProperty_CompositeOut( PVOID pData );
		BOOL	SetVideoProperty_SVideoOut( PVOID pData );
		BOOL	SetVideoProperty_SkipFieldControl( PVOID pData );
		BOOL	SetVideoProperty_FilmCamera( PVOID pData );
        BOOL    SetVideoProperty_SquarePixel( PVOID pData );
// by oka
		BOOL	SetVideoProperty_Digest( PVOID pData );
		BOOL	SetVideoProperty_OSDData( PVOID pData );
		BOOL	SetVideoProperty_OSDSwitch( PVOID pData );
		BOOL	SetVideoProperty_Magnify( PVOID pData );
		BOOL	SetVideoProperty_ClosedCaptionData( PVOID pData );
		
		//-------------------------------------------------------------------
		// Video property private functions( Get series )
		//-------------------------------------------------------------------
		BOOL	GetVideoProperty_TVSystem( PVOID pData );
		BOOL	GetVideoProperty_AspectRatio( PVOID pData );
		BOOL	GetVideoProperty_DisplayMode( PVOID pData );
		BOOL	GetVideoProperty_Resolution( PVOID pData );
		BOOL	GetVideoProperty_DigitalOut( PVOID pData );
		BOOL	GetVideoProperty_DigitalPalette( PVOID pData );
		BOOL	GetVideoProperty_APS( PVOID pData );
		BOOL	GetVideoProperty_ClosedCaption( PVOID pData );
		BOOL	GetVideoProperty_OutputSource( PVOID pData );
		BOOL	GetVideoProperty_CompositeOut( PVOID pData );
		BOOL	GetVideoProperty_SVideoOut( PVOID pData );
		BOOL	GetVideoProperty_SkipFieldControl( PVOID pData );
		BOOL	GetVideoProperty_FilmCamera( PVOID pData );
        BOOL    GetVideoProperty_SquarePixel( PVOID pData );
// by oka
		BOOL	GetVideoProperty_Digest( PVOID pData );
		BOOL	GetVideoProperty_OSDData( PVOID pData );
		BOOL	GetVideoProperty_OSDSwitch( PVOID pData );
		BOOL	GetVideoProperty_Magnify( PVOID pData );
		BOOL	GetVideoProperty_ClosedCaptionData( PVOID pData );

		//-------------------------------------------------------------------
		// Audio property private functions( Set series )
		//-------------------------------------------------------------------
		BOOL	SetAudioProperty_Type( PVOID pData );
		BOOL	SetAudioProperty_Number( PVOID pData );
		BOOL	SetAudioProperty_Volume( PVOID pData );
		BOOL	SetAudioProperty_Sampling( PVOID pData );
		BOOL	SetAudioProperty_Channel( PVOID pData );
		BOOL	SetAudioProperty_Quant( PVOID pData );
		BOOL	SetAudioProperty_AudioOut( PVOID pData );
		BOOL	SetAudioProperty_Cgms( PVOID pData );
		BOOL	SetAudioProperty_AnalogOut( PVOID pData );
		BOOL	SetAudioProperty_DigitalOut( PVOID pData );
		BOOL	SetAudioProperty_AC3DRangeLowBoost( PVOID pData );
		BOOL	SetAudioProperty_AC3DRangeHighCut( PVOID pData );
		BOOL	SetAudioProperty_AC3OperateMode( PVOID pData );
        BOOL    SetAudioProperty_AC3OutputMode( PVOID pData );
		//-------------------------------------------------------------------
		// Audio property private functions( Get series )
		//-------------------------------------------------------------------
		BOOL	GetAudioProperty_Type( PVOID pData );
		BOOL	GetAudioProperty_Number( PVOID pData );
		BOOL	GetAudioProperty_Volume( PVOID pData );
		BOOL	GetAudioProperty_Sampling( PVOID pData );
		BOOL	GetAudioProperty_Channel( PVOID pData );
		BOOL	GetAudioProperty_Quant( PVOID pData );
		BOOL	GetAudioProperty_AudioOut( PVOID pData );
		BOOL	GetAudioProperty_Cgms( PVOID pData );
		BOOL	GetAudioProperty_AnalogOut( PVOID pData );
		BOOL	GetAudioProperty_DigitalOut( PVOID pData );
		BOOL	GetAudioProperty_AC3DRangeLowBoost( PVOID pData );
		BOOL	GetAudioProperty_AC3DRangeHighCut( PVOID pData );
		BOOL	GetAudioProperty_AC3OperateMode( PVOID pData );
        BOOL    GetAudioProperty_AC3OutputMode( PVOID pData );
		//-------------------------------------------------------------------
		// Subpic property private functions( Set series )
		//-------------------------------------------------------------------
		BOOL	SetSubpicProperty_Number( PVOID pData );
		BOOL	SetSubpicProperty_Palette( PVOID pData );
		BOOL	SetSubpicProperty_Hilight( PVOID pData );
		BOOL	SetSubpicProperty_State( PVOID pData );
		// by oka
		BOOL	SetSubpicProperty_HilightButton( PVOID pData );
        BOOL    SetSubpicProperty_FlushBuff( PVOID pData );

		//-------------------------------------------------------------------
		// Subpic property private functions( Get series )
		//-------------------------------------------------------------------
		BOOL	GetSubpicProperty_Number( PVOID pData );
		BOOL	GetSubpicProperty_Palette( PVOID pData );
		BOOL	GetSubpicProperty_Hilight( PVOID pData );
		BOOL	GetSubpicProperty_State( PVOID pData );
// by oka
		BOOL	GetSubpicProperty_HilightButton( PVOID pData );
        BOOL    GetSubpicProperty_FlushBuff( PVOID pData );

	public:
		CMPEGBoardHAL();
		~CMPEGBoardHAL();

		//---------------------------------------------------------------------------
		// HAL interface for Wrapper
		//---------------------------------------------------------------------------
        HALRESULT Init( WRAPPERTYPE wraptype );
		HALRESULT SetKernelService( IKernelService *pKernelService );
		HALRESULT SetSinkWrapper( IMPEGBoardEvent *pMPEGBoardEvent );
		HALRESULT UnsetSinkWrapper( IMPEGBoardEvent *pMPEGBoardEvent );
		HALRESULT HALHwInterrupt( void );
		HALRESULT QueryDMABufferSize( DWORD *Size, DWORD *BFlag );
		HALRESULT SetDMABuffer( DWORD LinearAddr, DWORD physicalAddr );
// add by H.Yagi  1999.04.21
		HALRESULT GetHALType( HALTYPE *HALType ){ *HALType = HalType_ZIVA; return(HAL_SUCCESS); };
		

		//---------------------------------------------------------------------------
		// HAL interface for Class Library
		//---------------------------------------------------------------------------
		HALRESULT GetMixHALStream( IHALStreamControl **ppHALStreamControl );
		HALRESULT GetVideoHALStream( IHALStreamControl **ppHALStreamControl );
		HALRESULT GetAudioHALStream( IHALStreamControl **ppHALStreamControl );
		HALRESULT GetSubpicHALStream( IHALStreamControl **ppHALStreamControl );
		HALRESULT SetVideoProperty( VIDEOPROPTYPE PropertyType, VOID *pData );
		HALRESULT GetVideoProperty( VIDEOPROPTYPE PropertyType, VOID *pData );
		HALRESULT SetAudioProperty( AUDIOPROPTYPE PropertyType, VOID *pData );
		HALRESULT GetAudioProperty( AUDIOPROPTYPE PropertyType, VOID *pData );
		HALRESULT SetSubpicProperty( SUBPICPROPTYPE PropertyType, VOID *pData );
		HALRESULT GetSubpicProperty( SUBPICPROPTYPE PropertyType, VOID *pData );
		HALRESULT SetSinkClassLib( IMPEGBoardEvent *pMPEGBoardEvent );
		HALRESULT UnsetSinkClassLib( IMPEGBoardEvent *pMPEGBoardEvent );
		HALRESULT SetPowerState( POWERSTATE Switch );
		HALRESULT GetPowerState( POWERSTATE *pSwitch );
		HALRESULT SetSTC( DWORD STCValue );
		HALRESULT GetSTC( DWORD *pSTCValue );
        HALRESULT GetCapability( CAPSTYPE PropType, DWORD *pPropType );

// by oka
		CUserData	m_UserData;

		friend CMixHALStream;
};


//---------------------------------------------------------------------------
//	
//---------------------------------------------------------------------------

#endif		// _ZIVA_BOARD_H_

//***************************************************************************
//	End of ZiVABoard class header
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\zivabrd.cpp ===
//***************************************************************************
//
//	FileName:
//		$Workfile: zivabrd.cpp $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.WDM/zivabrd.cpp 66    98/10/15 12:20p Yagi $
// $Modtime: 98/10/13 12:02p $
// $Nokeywords:$
//***************************************************************************

#include	"includes.h"
#include	"ioif.h"
#include	"zivachip.h"
#include	"adv.h"
#include	"mixhal.h"
// by oka
#include	"userdata.h"
#include	"zivabrd.h"
#include	"timeout.h"
#include	"dramcfg.h"

//***************************************************************************
//	IMBoardListItem Help Class
//***************************************************************************
CList::CList( void ): pTopItem( NULL ), pCurrentItem( NULL )
{
};

void CList::Init( void )
{
	pTopItem = NULL;
	pCurrentItem = NULL;
};

BOOL CList::SearchItem( IMBoardListItem *pItem )
{
	IMBoardListItem *pCurrent;
	
	if( pTopItem == NULL )
		return FALSE;

	pCurrent = pTopItem;
	while( pCurrent != NULL )
	{
		if( pCurrent == pItem )
			return TRUE;
		pCurrent = pCurrent->GetNext();
	}
	return FALSE;
};

IMBoardListItem *CList::SearchBottomItem( void )
{
	IMBoardListItem *pCurrent;
	
	if( pTopItem == NULL )
		return NULL;

	pCurrent = pTopItem;
	while( pCurrent->GetNext() != NULL )
		pCurrent = pCurrent->GetNext();

	return pCurrent;
};

BOOL CList::AddItem( IMBoardListItem *pItem )
{
	IMBoardListItem *pBottom;

	if( SearchItem( pItem ) == TRUE )
		return FALSE;

	pItem->SetNext( NULL );

	if( pTopItem == NULL )
	{
		pTopItem = pCurrentItem = pItem;
		return TRUE;
	};

	pBottom = SearchBottomItem();

	ASSERT( pBottom != NULL );

	pBottom->SetNext( pItem );

	return TRUE;
};

BOOL CList::DeleteItem( IMBoardListItem *pItem )
{
	IMBoardListItem *pCurrent;
	
	if( SearchItem( pItem ) == FALSE )
		return FALSE;

	if( pTopItem == pItem )
	{
		pTopItem = pTopItem->GetNext();
		pItem->SetNext( NULL );
		return TRUE;
	};

	pCurrent = pTopItem;
	while( pCurrent->GetNext() != pItem )
		pCurrent = pCurrent->GetNext();

	pCurrent->SetNext( pItem->GetNext() );
	pItem->SetNext( NULL );

	return TRUE;
};

BOOL CList::SetCurrentToTop( void )
{
	pCurrentItem = pTopItem;
	return TRUE;
};

IMBoardListItem *CList::GetNext( void )
{
	IMBoardListItem *pItem;
	pItem = pCurrentItem;
	if( pCurrentItem != NULL )
		pCurrentItem = pCurrentItem->GetNext();

	return pItem;
};


//***************************************************************************
//	ZiVA Board Class
//***************************************************************************

//---------------------------------------------------------------------------
//	CMPEGBoardHAL Constructor
//---------------------------------------------------------------------------
CMPEGBoardHAL::CMPEGBoardHAL()
{
	m_pKernelObj = NULL;		// KernelService Object 
#ifdef POWERCHECK_BY_FLAG
	m_PowerState = POWERSTATE_OFF;
#endif

	m_DMABufferLinearAddr	= 0;		// DMA buffer addr
	m_DMABufferPhysicalAddr	= 0;		// DMA buffer addr

	m_EventIntMask	= 0;
// by oka
	m_ZivaPbtIntMask = 0;
	for(DWORD i=0;i<24;i++)
		m_MaskReference[i]=0;
	m_PowerOnTime = 0;
	m_NeedPowerOnDelay = FALSE;

    m_WrapperType = WrapperType_VxD;        // default WrapperType
};

//---------------------------------------------------------------------------
//	CMPEGBoardHAL Destructor
//---------------------------------------------------------------------------
CMPEGBoardHAL::~CMPEGBoardHAL()
{
	
};

//---------------------------------------------------------------------------
//	CMPEGBoardHAL Init
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::Init( WRAPPERTYPE  wraptype )
{
	m_pKernelObj = NULL;		// KernelService Object 
	m_DMABufferLinearAddr	= 0;		// DMA buffer addr
    m_DMABufferPhysicalAddr = 0;        // DMA buffer addr
	m_EventIntMask	= 0;

    m_WrapperType = wraptype;

// by oka
	m_ZivaPbtIntMask = 0;
	for(DWORD i=0;i<24;i++)
		m_MaskReference[i]=0;
	m_PowerOnTime = 0;
	m_NeedPowerOnDelay = FALSE;

// by oka
	m_CCRingBufferStart = 0xFFFFFFFF;
	m_CCDataPoint = m_CCDataNumber = m_CCRingBufferNumber = 0;
	m_CCsend_point = m_CCpending = m_CCnumber = 0;

	m_SendDataEventList.Init();
	m_StartVOBUEventList.Init();
	m_EndVOBEventList.Init();
	m_VUnderFlowEventList.Init();
	m_AUnderFlowEventList.Init();
	m_SPUnderFlowEventList.Init();
	m_VOverFlowEventList.Init();
	m_AOverFlowEventList.Init();
	m_SPOverFlowEventList.Init();

	m_VideoProp.Init();		// Video Property Set
	m_AudioProp.Init();		// Audio Property Set
	m_SubpicProp.Init();		// Subpic Property Set

	return HAL_SUCCESS;
};
//---------------------------------------------------------------------------
//	IWrapperHAL  SetKernelService
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::SetKernelService( IKernelService *pKernelService )
{
	ASSERT( m_pKernelObj == NULL );
	
	m_pKernelObj = pKernelService;
	ioif.Init( m_pKernelObj );
	ziva.Init( m_pKernelObj, &ioif );
    adv7175a.Init(  m_pKernelObj, &ioif );
    adv7170.Init(  m_pKernelObj, &ioif );
	m_Stream.Init( &ziva , m_pKernelObj , &ioif , this );
	
	// LUKE BUG!!!!!!
	{
		BYTE Data;
		
		m_pKernelObj->GetPCIConfigData( 0x44, &Data );
        Data = (BYTE)( Data & 0xfb );               // reset bit 2(CLKON)
		m_pKernelObj->SetPCIConfigData( 0x44, Data );
	};

    // Check sub device ID and select ADV device
    {
        WORD    SubDevID;
        m_pKernelObj->GetPCIConfigData( 0x2E, &SubDevID );
        if( SubDevID==0x0001 )              // SantaClara2
        {
            adv = &adv7175a;
        }
        else
        {
            adv = &adv7170;
        }
    }

	return HAL_SUCCESS;
};
//---------------------------------------------------------------------------
//	IWrapperHAL  SetSinkWrapper
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::SetSinkWrapper( IMPEGBoardEvent *pMPEGBoardEvent )
{
	ASSERT( m_pKernelObj != NULL );
	ASSERT( pMPEGBoardEvent != NULL );

	BOOL rc = FALSE;

	CAutoHwInt hwintLock( m_pKernelObj );
	
	switch( pMPEGBoardEvent->GetEventType() )
	{
		case WrapperEvent_StartVOBU:
				rc = m_StartVOBUEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ( ZIVA_INT_GOPV | ZIVA_INT_NV );
				break;
		case WrapperEvent_EndVOB:
				rc = m_EndVOBEventList.AddItem( pMPEGBoardEvent );
				m_ZivaPbtIntMask |= PBT_INT_END_VOB; // by oka for PBT_INT_SRC
				m_EventIntMask |= ZIVA_INT_AOR;
				break;
		case WrapperEvent_VUnderFlow:
				rc = m_VUnderFlowEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_UND;
				break;
		case WrapperEvent_AUnderFlow:
				rc = m_AUnderFlowEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_UND;
				break;
		case WrapperEvent_SPUnderFlow:
				rc = m_SPUnderFlowEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_UND;
				break;
		case WrapperEvent_VOverFlow:
				rc = m_VOverFlowEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_BUFF;
				break;
		case WrapperEvent_AOverFlow:
				rc = m_AOverFlowEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_BUFF;
				break;
		case WrapperEvent_SPOverFlow:
				rc = m_SPOverFlowEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_BUFF;
				break;
// by oka
		case WrapperEvent_ButtonActivate:
				rc = m_ButtonActivteEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_HLI ;
				break;
		case WrapperEvent_NextPicture:
				rc = m_NextPictureEventList.AddItem( pMPEGBoardEvent );
				m_EventIntMask |= ZIVA_INT_PICD ;
				break;
		case WrapperEvent_UserData:
				rc = m_UserDataEventList.AddItem( pMPEGBoardEvent );
				//m_EventIntMask	|= ZIVA_INT_USR | ZIVA_INT_VSYNC;
				// by oka
				if (!SetEventIntMask( ZIVA_INT_USR ))
				{
					DBG_BREAK();
					return HAL_ERROR;
				}
				break;
// end
        case WrapperEvent_VSync:
                rc = m_VSyncEventList.AddItem( pMPEGBoardEvent );
                if (!SetEventIntMask( ZIVA_INT_VSYNC ))
				{
					DBG_BREAK();
					return HAL_ERROR;
				}
//                ziva.INT_MASK = GetEventIntMask();
				break;
		default:
			DBG_BREAK();
			return HAL_ERROR;
	};

	if( rc == FALSE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};
	return HAL_SUCCESS;
};
//---------------------------------------------------------------------------
//	IWrapperHAL  UnsetSinkWrapper
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::UnsetSinkWrapper( IMPEGBoardEvent *pMPEGBoardEvent )
{
	ASSERT( m_pKernelObj != NULL );
	ASSERT( pMPEGBoardEvent != NULL );
	
	BOOL rc = FALSE;
	CAutoHwInt hwintLock( m_pKernelObj );

	switch( pMPEGBoardEvent->GetEventType() )
	{
		case WrapperEvent_StartVOBU:
				rc = m_StartVOBUEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~( ZIVA_INT_GOPV | ZIVA_INT_NV );
				break;
		case WrapperEvent_EndVOB:
				rc = m_EndVOBEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_AOR;
				m_ZivaPbtIntMask &= ~PBT_INT_END_VOB; // by oka for PBT_INT_SRC
				break;
		case WrapperEvent_VUnderFlow:
				rc = m_VUnderFlowEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_UND;
				break;
		case WrapperEvent_AUnderFlow:
				rc = m_AUnderFlowEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_UND;
				break;
		case WrapperEvent_SPUnderFlow:
				rc = m_SPUnderFlowEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_UND;
				break;
		case WrapperEvent_VOverFlow:
				rc = m_VOverFlowEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_BUFF;
				break;
		case WrapperEvent_AOverFlow:
				rc = m_AOverFlowEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_BUFF;
				break;
		case WrapperEvent_SPOverFlow:
				rc = m_SPOverFlowEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_BUFF;
				break;
// by oka
		case WrapperEvent_ButtonActivate:
				rc = m_ButtonActivteEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_HLI ;
				break;
		case WrapperEvent_NextPicture:
				rc = m_NextPictureEventList.DeleteItem( pMPEGBoardEvent );
				m_EventIntMask &= ~ZIVA_INT_PICD ;
				break;
		case WrapperEvent_UserData:
				rc = m_UserDataEventList.DeleteItem( pMPEGBoardEvent );
				//m_EventIntMask	&= ~(ZIVA_INT_USR | ZIVA_INT_VSYNC);
				// by oka
				if (!UnsetEventIntMask( ZIVA_INT_USR ))
				{
					DBG_BREAK();
					return HAL_ERROR;
				}
				break;
// end
        case WrapperEvent_VSync:
                rc = m_VSyncEventList.DeleteItem( pMPEGBoardEvent );
                if (!UnsetEventIntMask( ZIVA_INT_VSYNC ))
				{
					DBG_BREAK();
					return HAL_ERROR;
				}
				break;
		default:
			DBG_BREAK();
			return HAL_ERROR;
	};

	if( rc == FALSE )
	{
		DBG_BREAK();
		return HAL_ERROR;
	};
	return HAL_SUCCESS;
};
//---------------------------------------------------------------------------
//	IWrapperHAL  HALHwInterrupt
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::HALHwInterrupt( void )
{
	ASSERT( m_pKernelObj != NULL );

//	POWERSTATE PowerState;
//    GetPowerState( &PowerState );

//    if( PowerState!=POWERSTATE_ON )
//        return( HAL_IRQ_OTHER );

    WORD   wLukeIntFlag;

    // get interrupt flag register from luke
    wLukeIntFlag = ioif.luke2.IO_INTF;

    if( wLukeIntFlag==0xFFFF )                      // Yagi  97.09.24
        return( HAL_IRQ_OTHER );                    //

	// Clear interrupt flag
    ioif.luke2.IO_INTF = (WORD)(wLukeIntFlag & 0x039f);


	// STCREFINT (STC Reference interrupt flag )
	if( (wLukeIntFlag & 0x200 ) != 0 )
	{
	};

	// MBAT ( Master Abort Occur interrupt flag )	this interrupt is ERROR!!!
	if( (wLukeIntFlag & 0x100 ) != 0 )
	{
		BYTE Data;
		
		// Config Data Master and Target Abort clear
		m_pKernelObj->GetPCIConfigData( 0x07, &Data );
		m_pKernelObj->SetPCIConfigData( 0x07, Data );

	};

	// STCINT( System timer interrupt flag )
	if( (wLukeIntFlag & 0x80 ) != 0 )
	{
	};

	// VS_INT( v-sync interrupt flag )
	if( (wLukeIntFlag & 0x10 ) != 0 )
	{
	};

	// VD_INT( video decoder interrut flag )
	if( (wLukeIntFlag & 0x08 ) != 0 )
	{
		DWORD dwZiVAIntFlag;
		
		dwZiVAIntFlag = ziva.INT_STATUS & ziva.INT_MASK;

		CheckZiVAInterrupt( dwZiVAIntFlag );

		// Clear ZiVA Interrupt
        ziva.Host_Control = (ziva.Host_Control & 0xFFFFFFFC) | 0x82;

		// Clear Ziva Interrupt Source
		ziva.HLI_INT_SRC  = 0;
		ziva.BUFF_INT_SRC = 0;
		ziva.UND_INT_SRC  = 0;
		ziva.AOR_INT_SRC  = 0;
		ziva.AEE_INT_SRC  = 0;
		ziva.ERR_INT_SRC  = 0;

		ziva.INT_STATUS   = 0;

	};

	// MST_ABT( bus-master DMA software abort )
	if( (wLukeIntFlag & 0x04 ) != 0 )
	{
		IHALBuffer *pFinishBuff;

		DWORD Num, DmaNo ;
		
		Num = m_Stream.m_DmaFifo.GetItemNum();
		for( DWORD i = 0 ; i < Num ; i ++ )
		{
			m_Stream.m_DmaFifo.GetItem( &DmaNo );
			pFinishBuff = m_Stream.DMAFinish( DmaNo );
			if( pFinishBuff != NULL )
				NotifyEvent( &m_SendDataEventList , (VOID *)pFinishBuff );
		};

		m_NaviCount = 0;
		m_Stream.m_DmaFifo.Flush();

		Num = m_Stream.m_HalFifo.GetItemNum();
		for( i = 0 ; i < Num ; i ++ )
		{
			m_Stream.m_HalFifo.GetItem( &pFinishBuff );
			if( pFinishBuff != NULL )
				NotifyEvent( &m_SendDataEventList , (VOID *)pFinishBuff );
		};
		m_Stream.m_HalFifo.Flush();

		SetMasterAbortEvent();
	};

	// check Data complete
	if( (wLukeIntFlag & 0x03 ) != 0 )
	{
		BYTE Num = 0;
		if( (wLukeIntFlag & 0x02 ) != 0 )Num ++;
		if( (wLukeIntFlag & 0x01 ) != 0 )Num ++;
		
		for( int i = 0 ; i < Num; i ++ )
		{
			DWORD DMANo;
			if( m_Stream.m_DmaFifo.GetItemNum() != 0 )
			{
				m_Stream.m_DmaFifo.GetItem( &DMANo );
				switch( DMANo )
				{
					case 0:
						// MST_INT0( bus-master DMA complete interrupt flag )
						if( (wLukeIntFlag & 0x01 ) != 0 )
						{
							IHALBuffer *pFinishBuff;

							pFinishBuff = m_Stream.DMAFinish( 0 );
							if( pFinishBuff != NULL )
								NotifyEvent( &m_SendDataEventList , (VOID *)pFinishBuff );
						}
						else
						{
							DBG_PRINTF( ("status ERROR!!! LINE = %d\r\n", __LINE__ ));
							DBG_BREAK();
						};
						break;
					case 1:
						// MST_INT1( bus-master DMA complete interrupt flag )
						if( (wLukeIntFlag & 0x02 ) != 0 )
						{
							IHALBuffer *pFinishBuff;

							pFinishBuff = m_Stream.DMAFinish( 1 );
							if( pFinishBuff != NULL )
								NotifyEvent( &m_SendDataEventList , (VOID *)pFinishBuff );
						}
						else
						{
							DBG_PRINTF( ("status ERROR!!! LINE = %d\r\n", __LINE__ ));
							DBG_BREAK();
						};
						break;
					default:
							DBG_PRINTF( ("status ERROR!!! LINE = %d\r\n", __LINE__ ));
							ASSERT( 0 == 1 );
				};
			};
		};

		m_Stream.DeFifo();
	};
	
	if( (wLukeIntFlag & 0x039f) != 0 )
		return HAL_IRQ_MINE;

	return HAL_IRQ_OTHER;

};


//---------------------------------------------------------------------------
//	IWrapperHAL  QueryDMABufferSize
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::QueryDMABufferSize( DWORD *Size, DWORD *BFlag )
{
	*Size = 2048;		// 2048 byte
	*BFlag = 0;
	return HAL_SUCCESS;
};

//---------------------------------------------------------------------------
//	IWrapperHAL  QueryDMABufferSize
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::SetDMABuffer( DWORD LinearAddr, DWORD physicalAddr )
{
	m_DMABufferLinearAddr = LinearAddr;
	m_DMABufferPhysicalAddr = physicalAddr;

	return HAL_SUCCESS;
};

//---------------------------------------------------------------------------
//  IWrapperHAL  GetCapability                      1998.03.27 H.Yagi
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::GetCapability( CAPSTYPE PropType, DWORD *pPropType )
{
	ASSERT( m_pKernelObj != NULL );

    HALRESULT   ret;
    WORD        DeviceID, SubDevID, VenderID, SubVenID;
    ret = HAL_SUCCESS;

    m_pKernelObj->GetPCIConfigData( 0x00, &VenderID );
    m_pKernelObj->GetPCIConfigData( 0x02, &DeviceID );
    m_pKernelObj->GetPCIConfigData( 0x2C, &SubVenID );
    m_pKernelObj->GetPCIConfigData( 0x2E, &SubDevID );
    
    switch( PropType ){
        case VideoProperty:
            *pPropType = VideoProperty_TVSystem_BIT |
                         VideoProperty_AspectRatio_BIT |
                         VideoProperty_DisplayMode_BIT |
                         VideoProperty_Resolution_BIT |
                         VideoProperty_DigitalOut_BIT |
                         VideoProperty_DigitalPalette_BIT |
                         VideoProperty_APS_BIT |
                         VideoProperty_ClosedCaption_BIT |
//                         VideoProperty_OutputSource_BIT |
                         VideoProperty_CompositeOut_BIT |
                         VideoProperty_SVideoOut_BIT |
                         VideoProperty_SkipFieldControl_BIT |
                         VideoProperty_FilmCamera_BIT |
                         VideoProperty_SquarePixel_BIT;
            if(  VenderID==0x1179 && DeviceID==0x0407 ){    // SantaClara2 or SanJode
                switch( SubDevID ){
                    case 0x0001:                     // SantaClara2
                    case 0x0003:                     // SanJose
                        *pPropType |= VideoProperty_OutputSource_BIT;
                        break;
                }
            }
            ret = HAL_SUCCESS;
            break;

        case AudioProperty:
        case SubpicProperty:
            ret = HAL_NOT_IMPLEMENT;
            break;

        case DigitalVideoOut:
            *pPropType = DigitalVideoOut_ZV_BIT |
                         DigitalVideoOut_LPB08_BIT |
                         DigitalVideoOut_LPB16_BIT |
                         DigitalVideoOut_VMI_BIT |
                         DigitalVideoOut_AMCbt_BIT |
                         DigitalVideoOut_AMC656_BIT |
                         DigitalVideoOut_DAV2_BIT |
                         DigitalVideoOut_CIRRUS_BIT ;

            // Check SubDevID
            switch( SubDevID ){
                case 0x0001:                    // SantaClara2
                case 0x0003:                    // SanJose
                    *pPropType = DigitalVideoOut_ZV_BIT;
                    break;
            }
            ret = HAL_SUCCESS;
            break;
    }

    return ret;
};


//---------------------------------------------------------------------------
//	IClassLibHAL  GetMixHALStream
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::GetMixHALStream( IHALStreamControl **ppHALStreamControl )
{
	ASSERT( m_pKernelObj != NULL );
	
	*ppHALStreamControl = (IHALStreamControl *)&m_Stream;

	return HAL_SUCCESS;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  GetVideoHALStream
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::GetVideoHALStream( IHALStreamControl **ppHALStreamControl )
{
	return HAL_NOT_IMPLEMENT;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  GetAudioHALStream
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::GetAudioHALStream( IHALStreamControl **ppHALStreamControl )
{
	return HAL_NOT_IMPLEMENT;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  GetSubpicHALStream
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::GetSubpicHALStream( IHALStreamControl **ppHALStreamControl )
{
	return HAL_NOT_IMPLEMENT;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  SetSinkClassLib
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::SetSinkClassLib( IMPEGBoardEvent *pMPEGBoardEvent )
{
	if( pMPEGBoardEvent->GetEventType() == ClassLibEvent_SendData )
	{
		if( m_SendDataEventList.AddItem( pMPEGBoardEvent ) == FALSE )
		{
			DBG_BREAK();
			return HAL_ERROR;
		};
		return HAL_SUCCESS;
	}

	DBG_BREAK();
	return HAL_ERROR;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  UnsetSinkClassLib
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::UnsetSinkClassLib( IMPEGBoardEvent *pMPEGBoardEvent )
{
	if( pMPEGBoardEvent->GetEventType() == ClassLibEvent_SendData )
	{
		if( m_SendDataEventList.DeleteItem( pMPEGBoardEvent ) == FALSE )
		{
			DBG_BREAK();
			return HAL_ERROR;
		};
		return HAL_SUCCESS;
	}

	DBG_BREAK();
	return HAL_ERROR;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  SetPowerState
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::SetPowerState( POWERSTATE dwSwitch )
{
	ASSERT( m_pKernelObj != NULL );

//	CAutoHwInt hwintLock( m_pKernelObj );

//	POWERSTATE PowerState;
//	GetPowerState( &PowerState );

//	DBG_PRINTF( ("HAL:SetPowerState: OldState = %d, NewState = %d\n", PowerState, dwSwitch));

/*
	if( dwSwitch == PowerState )
		return HAL_SUCCESS;
*/

	if( dwSwitch == POWERSTATE_ON )
	{
		BYTE Data;

#ifndef _WDMDDK_
		m_pKernelObj->DisableHwInt();
#endif
		// reset bit 7(PWROFF)  and set bit 2(CLKON)
		m_pKernelObj->GetPCIConfigData( 0x44, &Data );
        Data = (BYTE)( (Data & 0x7f) | 0x04 ); 
		m_pKernelObj->SetPCIConfigData( 0x44, Data );
		
		// 10 msec wait.
		m_pKernelObj->Sleep( 10 );

		// set bit 6(BOFFZ)  and bit 5(SRESET)
		m_pKernelObj->GetPCIConfigData( 0x44, &Data );
        Data = (BYTE)( Data | 0x60 );
		m_pKernelObj->SetPCIConfigData( 0x44, Data );
		
		// 1 msec wait.
		m_pKernelObj->Sleep( 1 );

		// reset bit 5(SRESET)
		m_pKernelObj->GetPCIConfigData( 0x44, &Data );
        Data = (BYTE)( Data & 0xdf );
		m_pKernelObj->SetPCIConfigData( 0x44, Data );

#ifndef _WDMDDK_
		m_pKernelObj->EnableHwInt();
#endif
		// Download ZiVA microcode
		switch( m_VideoProp.m_TVSystem )
		{
			case TV_NTSC:
				if( ziva.WriteMicrocode( 0 ) == FALSE )
				{
					DBG_BREAK();
					return HAL_ERROR;
				};
				break;
			case TV_PALB:	case TV_PALD:	case TV_PALG:
			case TV_PALH:	case TV_PALI:	case TV_PALM:
			case TV_PALN:
				if( ziva.WriteMicrocode( 1 ) == FALSE )
				{
					DBG_BREAK();
					return HAL_ERROR;
				};
				break;
			default:
				DBG_BREAK();
				return HAL_ERROR;
		};
		
		// HOST_control reset ZiVA and translate Run mode.
		ziva.Host_Control |= 0x00000022;

        // HOST_OPTIONS set by WrapperType.         98.09.25 by H.Yagi
        if( m_WrapperType == WrapperType_WDM ){
            ziva.HOST_OPTIONS |= 0x010;
        }

#ifdef POWERCHECK_BY_FLAG
		m_PowerState = POWERSTATE_ON;
#endif
		m_Stream.SetTransferMode( HALSTREAM_DVD_MODE );

		// setup properties
		SetVideoProperty_TVSystem(			(void *)&m_VideoProp.m_TVSystem );
		SetVideoProperty_AspectRatio(		(void *)&m_VideoProp.m_AspectRatio );
		SetVideoProperty_DisplayMode(		(void *)&m_VideoProp.m_DisplayMode );
		SetVideoProperty_Resolution(		(void *)&m_VideoProp.m_Size );
		SetVideoProperty_DigitalOut(		(void *)&m_VideoProp.m_DigitalOut );
		for( int i = 0; i < 3; i ++ )
		{
			Digital_Palette Pal;
			Pal.Select = (VIDEOPALETTETYPE)i;
			Pal.pPalette = m_VideoProp.m_DigitalPalette[i];
			SetVideoProperty_DigitalPalette(	(void *)&Pal );
		};

		SetVideoProperty_APS(				(void *)&m_VideoProp.m_APS );
		SetVideoProperty_ClosedCaption(		(void *)&m_VideoProp.m_ClosedCaption );
		SetVideoProperty_OutputSource(		(void *)&m_VideoProp.m_OutputSource );
		SetVideoProperty_CompositeOut(		(void *)&m_VideoProp.m_CompositeOut );
		SetVideoProperty_SVideoOut(			(void *)&m_VideoProp.m_SVideoOut );
		SetVideoProperty_SkipFieldControl(	(void *)&m_VideoProp.m_SkipFieldControl );

		SetAudioProperty_Type(				(void *)&m_AudioProp.m_Type );
		SetAudioProperty_Number(			(void *)&m_AudioProp.m_StreamNo  );
		SetAudioProperty_Volume(			(void *)&m_AudioProp.m_Volume  );
		SetAudioProperty_Sampling(			(void *)&m_AudioProp.m_Sampling );
		SetAudioProperty_Channel(			(void *)&m_AudioProp.m_ChannelNo );
		SetAudioProperty_Quant(				(void *)&m_AudioProp.m_Quant  );
		SetAudioProperty_AudioOut(			(void *)&m_AudioProp.m_OutType );
		SetAudioProperty_Cgms(				(void *)&m_AudioProp.m_Cgms  );
		SetAudioProperty_AnalogOut(			(void *)&m_AudioProp.m_AnalogOut );
		SetAudioProperty_DigitalOut(		(void *)&m_AudioProp.m_DigitalOut );
		SetAudioProperty_AC3DRangeLowBoost(	(void *)&m_AudioProp.m_AC3DRangeLowBoost );
		SetAudioProperty_AC3DRangeHighCut(	(void *)&m_AudioProp.m_AC3DRangeHighCut );
		SetAudioProperty_AC3OperateMode(	(void *)&m_AudioProp.m_AC3OperateMode );

		SetSubpicProperty_Number(			(void *)&m_SubpicProp.m_StreamNo);
		SetSubpicProperty_Palette(			(void *)&m_SubpicProp.m_Palette );
		SetSubpicProperty_Hilight(			(void *)&m_SubpicProp.m_Hlight  );
		SetSubpicProperty_State(			(void *)&m_SubpicProp.m_OutType  );

		// Audio Mute Off
//        ioif.luke2.IO_CONT = ioif.luke2.IO_CONT & 0xffffffb8;
        ioif.luke2.IO_CONT = ( (ioif.luke2.IO_CONT & 0xffffffb8)|0x40 );    // *Luke2Z spec is changed.

		// power on delay
		m_NeedPowerOnDelay = TRUE;
		m_pKernelObj->GetTickCount( &m_PowerOnTime );

//by oka
		m_CCstart = ziva.USER_DATA_BUFFER_START;
		m_CCend =   ziva.USER_DATA_BUFFER_END;
		m_OSDStartAddr = ziva.OSD_BUFFER_START;
		m_OSDEndAddr = ziva.OSD_BUFFER_END;
// end

		return HAL_SUCCESS;
	};
	
	if( dwSwitch == POWERSTATE_OFF )
	{
		BYTE Data;

#ifndef _WDMDDK_
		m_pKernelObj->DisableHwInt();
#endif
		// Audio Mute
//        ioif.luke2.IO_CONT = (ioif.luke2.IO_CONT & 0xffffff00) | 0x40;
        ioif.luke2.IO_CONT = (ioif.luke2.IO_CONT & 0xffffff00);     // *Luke2Z spec is changed.

		// Check ZV Enable bit
		m_pKernelObj->GetPCIConfigData( 0x44, &Data );
		if( (Data & 0x01) != 0 )
		{
            Data = (BYTE)( Data & 0xfe );
			m_pKernelObj->SetPCIConfigData( 0x44, Data );
		};

		// reset bit 6(BOFFZ)
		m_pKernelObj->GetPCIConfigData( 0x44, &Data );
        Data = (BYTE)( Data & 0xbf );
		m_pKernelObj->SetPCIConfigData( 0x44, Data );
		
		// reset bit 2(CLKON) and set bit 7(PWROFF)
		m_pKernelObj->GetPCIConfigData( 0x44, &Data );
        Data = (BYTE)( (Data & 0xfb) | 0x80 );
		m_pKernelObj->SetPCIConfigData( 0x44, Data );
		
#ifdef POWERCHECK_BY_FLAG
		m_PowerState = POWERSTATE_OFF;
#endif

#ifndef _WDMDDK_
		m_pKernelObj->EnableHwInt();
#endif

		return HAL_SUCCESS;
	};

	return HAL_INVALID_PARAM;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  GetPowerState
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::GetPowerState( POWERSTATE *pSwitch )
{
	ASSERT( m_pKernelObj != NULL );

#ifdef POWERCHECK_BY_FLAG
	*pSwitch = m_PowerState;
	return HAL_SUCCESS;
#else
	BYTE Data;
	
	m_pKernelObj->GetPCIConfigData( 0x44, &Data );
	if( ( Data & 0x80 ) == 0 )
	{
		if( ( ziva.Host_Control & 0xc00000 ) == 0 )
			*pSwitch = POWERSTATE_ON;
		else
		{
			SetPowerState( POWERSTATE_OFF );
			*pSwitch = POWERSTATE_OFF;
		};
	}
	else
		*pSwitch = POWERSTATE_OFF;
#endif

	return HAL_SUCCESS;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  SetSTC
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::SetSTC( DWORD STCValue )
{
	POWERSTATE PowerState;
	GetPowerState( &PowerState );

	if( PowerState != POWERSTATE_ON )
		return HAL_POWEROFF;

	ziva.MRC_PIC_STC = STCValue;
	
	return HAL_SUCCESS;
};
//---------------------------------------------------------------------------
//	IClassLibHAL  GetSTC
//---------------------------------------------------------------------------
HALRESULT CMPEGBoardHAL::GetSTC( DWORD *pSTCValue )
{
	POWERSTATE PowerState;
	GetPowerState( &PowerState );

	if( PowerState != POWERSTATE_ON )
		return HAL_POWEROFF;

	*pSTCValue = ziva.MRC_PIC_STC;
	
	return HAL_SUCCESS;
};

//---------------------------------------------------------------------------
//	Send HAL Notify
//---------------------------------------------------------------------------
void	CMPEGBoardHAL::NotifyEvent( CList *pList, VOID *Ret  )
{
	IMPEGBoardEvent *pEvent;
	
	pList->SetCurrentToTop();
	while( ( pEvent = (IMPEGBoardEvent *)pList->GetNext() ) != NULL )
		pEvent->Advice( Ret );
};


//---------------------------------------------------------------------------
//	Check ZIVA Interrupt(ZiVA Decoder To Host Interrupt Check )
//---------------------------------------------------------------------------
void	CMPEGBoardHAL::CheckZiVAInterrupt( DWORD dwIntFlag )
{
	
	// ERR:		Bitstream data error has been deteced.
	if( ( dwIntFlag & ZIVA_INT_ERR ) != 0 )
	{
	};

	// PIC-V:	Starting display of new picture.
	if( ( dwIntFlag & ZIVA_INT_PICV ) != 0 )
	{
// by oka
		NotifyEvent( &m_NextPictureEventList, NULL );
	};

	// GOP-V:	Starting display of first I-Picture after GOP startcode.
	if( ( dwIntFlag & ZIVA_INT_GOPV ) != 0 )
	{
		for( DWORD i = 0 ; i < m_NaviCount; i ++ )
			NotifyEvent( &m_StartVOBUEventList, NULL );
		m_NaviCount = 0;
	};

	// SEQ-V:	Starting display of first I-Pucture after sequence start-code.
	if( ( dwIntFlag & ZIVA_INT_SEQV ) != 0 )
	{
	};

	// END-V:	Starting display of last picture before sequence-end startcode.
	if( ( dwIntFlag & ZIVA_INT_ENDV ) != 0 )
	{
	};

	// PIC-D:	Completed picture decode.
	if( ( dwIntFlag & ZIVA_INT_PICD ) != 0 )
	{
	};

	// VSYNC:	VSYNC pulse occurred.
	if( ( dwIntFlag & ZIVA_INT_VSYNC ) != 0 )
	{
        // for VSyncEvent
        NotifyEvent( &m_VSyncEventList, NULL );

// by oka
        if( m_VideoProp.m_ClosedCaption == ClosedCaption_On ){
            SendCCData();
        }

/****** commented out by H.Yagi 98.05.13 **** start *****
		DWORD Data;
		switch( (DWORD)ziva.CURR_PIC_DISPLAYED )
		{
			case ADDR_PIC1_BUFFER_START:
				Data = ziva.PIC1_TREF_PTYP_FLGS;
				break;
			case ADDR_PIC2_BUFFER_START:
				Data = ziva.PIC2_TREF_PTYP_FLGS;
				break;
			case ADDR_PIC3_BUFFER_START:
				Data = ziva.PIC3_TREF_PTYP_FLGS;
				break;
			default:
				Data = 0;
		};

		static DWORD	SkipCounter = 0;
		static DWORD	OldData = 0;
		
		if( ( OldData & 0x40 ) == 0 && (Data & 0x40 ) != 0 )
			SkipCounter = 5;
		OldData = Data;
****** commented out by H.Yagi 98.05.13 **** end *****/

/*
		// check Progressive and repeat_first
		if( (Data & 0x50 ) == 0x50 )
		{
			if( ziva.VIDEO_FIELD == 0 )		// check Top field?
			{
				if( (Data & 0x20 ) == 0 && SkipCounter == 0 )	// check Top_Field_first = 1?
				{
					// Skip!!
					SkipCounter = 5;
				};
			}
			else							// Bottom field.
			{
				if( (Data & 0x20 ) != 0 && SkipCounter == 0 )	// check Top_Field_first = 0?
				{
					// Skip!!
					SkipCounter = 5;
				};
			};
		};
*/

/****** commented out by H.Yagi 98.05.13 **** start *****
		DWORD Flag;
		ziva.ZiVAReadMemory( 0x210, &Flag );

//		if( SkipCounter == 4 || SkipCounter ==3 || SkipCounter == 5 )
//		if( Flag != 0 && SkipCounter == Flag )
		if( Flag != 0 )
		{
			if( ( Flag & 0x01 ) != 0 && SkipCounter == 5 )
				ioif.luke2.AVCONT |= 0x02;
			if( ( Flag & 0x02 ) != 0 && SkipCounter == 4 )
				ioif.luke2.AVCONT |= 0x02;
			if( ( Flag & 0x04 ) != 0 && SkipCounter == 3 )
				ioif.luke2.AVCONT |= 0x02;
			if( ( Flag & 0x08 ) != 0 && SkipCounter == 2 )
				ioif.luke2.AVCONT |= 0x02;
			if( ( Flag & 0x10 ) != 0 && SkipCounter == 1 )
				ioif.luke2.AVCONT |= 0x02;
		};

		if( SkipCounter > 0 )
			SkipCounter --;
****** commented out by H.Yagi 98.05.13 **** end *****/
	};

	// AOR:		VCD Mode: VCD sector address out of range in CDROM_MPEG mode 
	// PBT:		DVD Mode: Delect VOBU_E_PTM
	if( ( dwIntFlag & ZIVA_INT_AOR ) != 0 )
	{
		//  by oka for END_VOB or NV_LBN
		DWORD PbtInt = (m_ZivaPbtIntMask & ziva.PBT_INT_SRC);
		// END_VOB
		if ((PbtInt & PBT_INT_END_VOB) != 0)
		{
			ziva.INT_MASK &= (ULONG)(~ZIVA_INT_AOR);
			NotifyEvent( &m_EndVOBEventList, NULL );
		}
	};

	// UND:		Input buffer underflow.
	if( ( dwIntFlag & ZIVA_INT_UND ) != 0 )
	{
		DWORD UFlag = ziva.UND_INT_SRC;

		// Check Video Underflow
		if( (UFlag & 0x01) != 0 )
			NotifyEvent( &m_VUnderFlowEventList , NULL );

		// Check Audio Underflow
		if( (UFlag & 0x02) != 0 )
			NotifyEvent( &m_AUnderFlowEventList , NULL );

		// Check SubPic Underflow
		if( (UFlag & 0x04) != 0 )
			NotifyEvent( &m_SPUnderFlowEventList , NULL );
	};

	// END-C:	High-Priority command execution is complete.
	if( ( dwIntFlag & ZIVA_INT_ENDC ) != 0 )
	{
		SetENDCEvent();
	};

	// RDY-S:	Ready for data during CDROM_MPEG mode SlowMotion() or SingleStep() Commands.
	if( ( dwIntFlag & ZIVA_INT_RDYS ) != 0 )
	{
	};

	// SCN:		A Scan() command has caused a transition to PAUSE()
	if( ( dwIntFlag & ZIVA_INT_SCN ) != 0 )
	{
	};

	// USR:		User data is ready
	if( ( dwIntFlag & ZIVA_INT_USR ) != 0 )
	{
// by oka
		SetUSRData();
	};

	// END-P:	Entered PAUSE state.
	if( ( dwIntFlag & ZIVA_INT_ENDP ) != 0 )
	{
		SetENDPEvent();
	};

	// END-D:	a data transfer is complete, from either a Dump DumpData_VCD(),DumpData_DVD(),or ROMtoDRAM() command.
	if( ( dwIntFlag & ZIVA_INT_ENDD ) != 0 )
	{
	};

	// A/E/E:	Deteced CD submode auto-pause, end of recoerd, or end of file.
	if( ( dwIntFlag & ZIVA_INT_AEE ) != 0 )
	{
	};

	// BUF-F:	An input buffer is full or the video input buffer  os fulling CDROM_MPEG mode SlowMotion() and SingleStep() commands.
	if( ( dwIntFlag & ZIVA_INT_BUFF ) != 0 )
	{
		DWORD OFlag = ziva.BUFF_INT_SRC;

		// Check Video OverFlow
		if( (OFlag & 0x01) != 0 )
			NotifyEvent( &m_VOverFlowEventList , NULL );

		// Check Audio OverFlow
		if( (OFlag & 0x02) != 0 )
			NotifyEvent( &m_AOverFlowEventList , NULL );

		// Check SubPic Underflow
		if( (OFlag & 0x04) != 0 )
			NotifyEvent( &m_SPOverFlowEventList , NULL );
	};

	// SEQ-E:	A sequence_end_code startcode has been processed by the MPEG video decoder.
	if( ( dwIntFlag & ZIVA_INT_SEQE ) != 0 )
	{
	};

	// NV:		an NV_PACK has benn received and parsed into DSI and PCI packets.
	if( ( dwIntFlag & ZIVA_INT_NV ) != 0 )
	{
		m_NaviCount ++;
	};

	// HLI:		a button activation highlight has just been displayed.
	if( ( dwIntFlag & ZIVA_INT_HLI ) != 0 )
	{
// by oka
		DWORD Data;
		Data = ziva.HLI_INT_SRC;
		NotifyEvent( &m_ButtonActivteEventList, (PVOID)Data );
	};

	// RDY-D:	The decoder is ready to receive data.
	if( ( dwIntFlag & ZIVA_INT_RDYD ) != 0 )
	{
		SetRDYDEvent();
	};

	// Reserved.
	if( ( dwIntFlag & ZIVA_INT_RESERV1 ) != 0 )
	{
	};

	// AUD:		A new audio frequency, sample size, or audio emphasis value was detected.
	if( ( dwIntFlag & ZIVA_INT_AUD ) != 0 )
	{
	};

	// INIT:	Decoder microcode initialization is complete. Status Area is Valid. Decoder is ready to accept host commands.
	if( ( dwIntFlag & ZIVA_INT_INIT ) != 0 )
	{
	};

};


//---------------------------------------------------------------------------
//	WaitMasterAbort
//---------------------------------------------------------------------------
BOOL	CMPEGBoardHAL::WaitMasterAbort( void )
{
	// Wait Master Abort interrupt
	CTimeOut	TimeOut( 5000, 10, m_pKernelObj );
//#ifdef _WDMDDK_
//    WORD wLukeIntFlag;
//#endif
	while( TRUE )
	{
		if( IsMasterAbortOccurred() == TRUE )
			break;

//#ifdef _WDMDDK_
//        wLukeIntFlag = ioif.luke2.IO_INTF;
//        if( (wLukeIntFlag & 0x04 ) != 0 )
//            break;
//#endif
		TimeOut.Sleep();
		if( TimeOut.CheckTimeOut() == TRUE )
		{
			DBG_BREAK();
			return FALSE;
		};
	};
	return TRUE;
};

//---------------------------------------------------------------------------
//	WaitWaitRDYD
//---------------------------------------------------------------------------
BOOL	CMPEGBoardHAL::WaitRDYD( void )
{
	// Wait RDY-D interrupt
	CTimeOut	TimeOut( 5000, 10, m_pKernelObj );
//#ifdef _WDMDDK_
//    DWORD   dwZiVAIntFlag;
//#endif
	while( TRUE )
	{
		if( IsRDYDOccurred() == TRUE )
			break;

//#ifdef _WDMDDK_
//        dwZiVAIntFlag = ziva.INT_STATUS & ziva.INT_MASK;
//        if( ( dwZiVAIntFlag & ZIVA_INT_RDYD ) != 0 )
//            break;
//#endif
		TimeOut.Sleep();
		if( TimeOut.CheckTimeOut() == TRUE )
		{
			DBG_BREAK();
			return FALSE;
		};
	};
	return TRUE;
};
//---------------------------------------------------------------------------
//	WaitWaitENDP
//---------------------------------------------------------------------------
BOOL	CMPEGBoardHAL::WaitENDP( void )
{
	// Wait END-P interrupt
	CTimeOut	TimeOut( 5000, 10, m_pKernelObj );
//#ifdef _WDMDDK_
//    DWORD   dwZiVAIntFlag;
//#endif
	while( TRUE )
	{
		if( IsENDPOccurred() == TRUE )
			break;

//#ifdef _WDMDDK_
//        dwZiVAIntFlag = ziva.INT_STATUS & ziva.INT_MASK;
//        if( ( dwZiVAIntFlag & ZIVA_INT_ENDP ) != 0 )
//            break;
//#endif
		TimeOut.Sleep();
		if( TimeOut.CheckTimeOut() == TRUE )
		{
			DBG_BREAK();
			return FALSE;
		};
	};
	return TRUE;
};
//---------------------------------------------------------------------------
//	WaitWaitENDC
//---------------------------------------------------------------------------
BOOL	CMPEGBoardHAL::WaitENDC( void )
{
	// Wait END-C interrupt
	CTimeOut	TimeOut( 5000, 10, m_pKernelObj );
//#ifdef _WDMDDK_
//    DWORD   dwZiVAIntFlag;
////  DWORD   StatusPointer,Status;
//#endif
	while( TRUE )
	{
		if( IsENDCOccurred() == TRUE )
			break;

//#ifdef _WDMDDK_
//        dwZiVAIntFlag = ziva.INT_STATUS & ziva.INT_MASK;
//        if( ( dwZiVAIntFlag & ZIVA_INT_ENDC ) != 0 )
//            break;
//
///*
//        StatusPointer = Status = 0;
//        ziva.ZiVAReadMemory(ADDR_STATUS_ADDRESS, &StatusPointer);
//        if( StatusPointer != 0 )
//        {
//            ziva.ZiVAReadMemory(StatusPointer, &Status);
//            if( Status == 0x04 )
//                return TRUE;
//        };
//*/
//#endif
		TimeOut.Sleep();
		if( TimeOut.CheckTimeOut() == TRUE )
		{
			DBG_BREAK();
			return FALSE;
		};
	};
	return TRUE;
};

//---------------------------------------------------------------------------
//	
//---------------------------------------------------------------------------
void	CMPEGBoardHAL::ClearMasterAbortEvent( void ){ fMasterAbortFlag = FALSE; };
void	CMPEGBoardHAL::SetMasterAbortEvent( void ){ fMasterAbortFlag = TRUE; };
BOOL	CMPEGBoardHAL::IsMasterAbortOccurred( void ) { return fMasterAbortFlag; };

void	CMPEGBoardHAL::ClearRDYDEvent( void ){ fRDYDFlag = FALSE; };
void	CMPEGBoardHAL::SetRDYDEvent( void ){ fRDYDFlag = TRUE; };
BOOL	CMPEGBoardHAL::IsRDYDOccurred( void ) { return fRDYDFlag; };

void	CMPEGBoardHAL::ClearENDPEvent( void ){ fENDPFlag = FALSE; };
void	CMPEGBoardHAL::SetENDPEvent( void ){ fENDPFlag = TRUE; };
BOOL	CMPEGBoardHAL::IsENDPOccurred( void ) { return fENDPFlag; };

void	CMPEGBoardHAL::ClearENDCEvent( void ){ fENDCFlag = FALSE; };
void	CMPEGBoardHAL::SetENDCEvent( void ){ fENDCFlag = TRUE; };
BOOL	CMPEGBoardHAL::IsENDCOccurred( void ) { return fENDCFlag; };

//---------------------------------------------------------------------------
//	CMPEGBoardHAL::SetUSRData
// by oka Closed Caption
//---------------------------------------------------------------------------
inline void 	CMPEGBoardHAL::SetUSRData( void )
{

//	USER_DATA_WRITẼAhXf[^o

	DWORD read, write;
	read =  ziva.USER_DATA_READ;
	write = ziva.USER_DATA_WRITE;

	// check header
	DWORD header,data_size;
//	DWORD header_type;
	ziva.ZiVAReadMemory(read, &header);
	if (read == 0xFFFFFFFF)
	{
		// FIFO overflow
	    //RETAILMSG(ZONE_TRACE,(TEXT("FIFO overflow \r\n")));
		ziva.USER_DATA_READ = write;
        //DBG_BREAK();
		return;
	}

	ASSERT((header & 0xFFFF0000) >> 16 == 0xFEED);
//	header_type = (header & 0x0000F000) >> 12;
	data_size = (header & 0x00000FFF);

//	RETAILMSG(1,(TEXT("start=%08X end=%08X read=%X header=%08X header_type=%01d size=%04X \r\n"),
//			start, end, read, header, header_type, data_size ));

	m_UserData.Init();

	DWORD data_tmp;
	DWORD point;
	point = read;

	DWORD count;
	for(count=0;count<data_size;count+=4)
	{
		// for ring buffer
		if (point+4 >= m_CCend)
		{
			point = m_CCstart;
		} else {
			point += 4;
		}

		// Get user data
		ziva.ZiVAReadMemory(point, &data_tmp);

		if (!(m_UserData.Set(data_tmp)))
		{
		    //RETAILMSG(ZONE_ERROR, (TEXT("CMPEGBoardHAL::SetUSRData UserData size too Big!!\r\n")));
            DBG_BREAK();
			break;
		}
	}

	// check line21 indicator (first user data must be line21 data in DVD Book)
	if(!((m_UserData.Get(0) == 0x43) && (m_UserData.Get(1) == 0x43)))
	{
		//Not Line21 data
        //DBG_BREAK();
	    //RETAILMSG(ZONE_ERROR,(TEXT("Not Line21 Data \r\n")));
		ziva.USER_DATA_READ = write;
		return;
	}

	// check top_field_flag_of_gop
	//  GOP̓̃tB[h킵ĂB
	//  𑗂ȂƂׂĂ\邱ƂłȂB
//	if((data[4] & 0x80) == 0)
//	{
//		// data size error
//      DBG_BREAK();
//		DEBUGMSG(ZONE_TRACE,(TEXT("Bottom field data!!\r\n")));
//		ziva.USER_DATA_READ = write;
//		return;
//	} else {
//		ziva.USER_DATA_READ = write;
//		return;
//	}


	DWORD number_of_data;
	number_of_data = m_UserData.Get(4) & 0x3F;

	// user_data_start_code -> number_of_displayed_field_gop = 5byte
	if ((number_of_data * 3) + 5 > data_size)
	{
		// data size error
        DBG_BREAK();
		//DEBUGMSG(ZONE_ERROR,(TEXT("line21 data size error \r\n")));
		return;
	}

	// Lf[^Oobt@ɓo^
	count = 0;
	point = m_CCDataPoint;
	m_CCRingBufferNumber = 0;
	while(count<number_of_data)
	{
		if(m_UserData.Get(5+count*3) != 0xFF)
		{
			// line21_switch off
			count++;
		} else {
//			RETAILMSG(1,(TEXT("%c%c"),(data[count*3+6] & 0x7f),(data[count*3+7] & 0x7f)));
			m_CCData[m_CCDataPoint] =  (DWORD)(m_UserData.Get(count*3+6)<<8) 
												| m_UserData.Get(count*3+7);
			m_CCRingBufferNumber++;
			count++;
			m_CCDataPoint++;
			if (m_CCDataPoint >= CC_DATA_SIZE)
			{	m_CCDataPoint = 0; }
		}
	}
	m_CCRingBufferStart = point;

	NotifyEvent( &m_UserDataEventList, &m_UserData );

//	RETAILMSG(1,(TEXT("\r\n")));
//	DEBUGMSG(ZONE_TRACE,(TEXT("line21 data size 0x%x ring start 0x%x num0x%x \r\n"),
//									m_CCDataNumber,
//									m_CCRingBufferStart,m_CCRingBufferNumber));

//	USER_DATA_READUSER_DATA_WRITẼAhX݁AZiVAɃf[^̓]I
//  m点B
	ziva.USER_DATA_READ = write;
	return;
}

//---------------------------------------------------------------------------
//	CMPEGBoardHAL::SendCCData
//			m_CCDataNumber	ꂩ瑗ׂf[^̃TCY
// by oka for Closed Caption
//---------------------------------------------------------------------------
inline void CMPEGBoardHAL::SendCCData( void )
{
	// Е̃tB[hł̂ݏBEven̂ƂOdd̃f[^̂z
	// AtȂƂƂłȂBHHH
	if( ziva.VIDEO_FIELD == 0 )		// check Top field?
	{
//		RETAILMSG(1,(TEXT("top field\r\n")));
//		return;
	} else {
		return;
	}

	// ^C~OɂĂ͐VKf[^̓o^̂ƂɏقȂB
	if(m_CCnumber < m_CCDataNumber)
	{
		adv->SetClosedCaptionData( m_CCData[m_CCsend_point] );
		m_CCsend_point++;
		m_CCnumber++;
	} else {
		adv->SetClosedCaptionData( 0x00008080 );
	}
	// Ringobt@̐ݒ
	if (m_CCsend_point >= CC_DATA_SIZE)
		m_CCsend_point = 0;
	
	// ̃obt@̊Jnʒu^炽
	if (m_CCRingBufferStart != 0xFFFFFFFF)
	{
		//Õf[^̓]ׂďIĂ
		if (m_CCnumber == m_CCDataNumber)
		{
            ASSERT(m_CCsend_point == m_CCRingBufferStart);
			m_CCsend_point = m_CCRingBufferStart;
			m_CCDataNumber = m_CCRingBufferNumber;
		}
		else // f[^̓]ǂȂƂ̏
		{
			m_CCpending = m_CCDataNumber - m_CCnumber;

			// ꂩ瑗ׂf[^̐
			m_CCDataNumber = m_CCpending + m_CCRingBufferNumber;
			// Ȃf[^RO𒴂AłȂ̂Ŏ̂ĂB
			if (m_CCpending > 30)
			{
				//RETAILMSG(ZONE_ERROR,(TEXT("pendig data is too large \r\n")));
				m_CCpending = 0;
				m_CCDataNumber = m_CCRingBufferNumber;
				m_CCsend_point = m_CCRingBufferStart;
			}
		}
//		if (m_CCpending > 0)
//		{
//			RETAILMSG(ZONE_TRACE,(TEXT("send_p %02x num %02x RingStart %02x RingNumber %02x "),
//					m_CCsend_point,m_CCnumber, m_CCRingBufferStart,m_CCRingBufferNumber));
//
//			RETAILMSG(ZONE_TRACE,(TEXT("pend %02x CCDataNumber %04x \r\n"),
//					m_CCpending,m_CCDataNumber));		
//		}
		m_CCRingBufferStart = 0xFFFFFFFF;
		// f[^̐̏
		m_CCnumber = 0;
	} else {
	
		//]ǂȂƂɂȂf[^Ƃ΂
		while((m_CCpending > 0) && (m_CCData[m_CCsend_point] == 0x00008080))
		{
			m_CCsend_point++;
			m_CCpending--;
			m_CCnumber++;
			if (m_CCsend_point >= CC_DATA_SIZE)
			{	m_CCsend_point = 0;}
		}
	}

//	if(m_CCnumber > m_CCDataNumber)
//	{
//		RETAILMSG(1,(TEXT("m_CCnumber > m_CCDataNumber \r\n")));
//      DBG_BREAK();
//	}
	ASSERT(m_CCnumber <= m_CCDataNumber);
	
	return;
}
//---------------------------------------------------------------------------
//	CMPEGBoardHAL::SetEventIntMask
//			mask	gpCxgrbg𗧂Ăl
// by oka
//---------------------------------------------------------------------------
BOOL	CMPEGBoardHAL::SetEventIntMask( DWORD mask )
{
	// ZiVA use 0-23 bit
	if ( (mask & 0xff000000) != 0)
		return FALSE;

	DWORD tmp_mask;
	tmp_mask = mask;
	for ( DWORD bit = 0; bit < 24 ; bit++ )
	{
		if( (tmp_mask & 0x00000001) != 0 )
		{
			m_MaskReference[bit]++;
		}
		tmp_mask = tmp_mask >> 1;
	}
	m_EventIntMask |= mask;

	return TRUE;
}
//---------------------------------------------------------------------------
//	CMPEGBoardHAL::UnsetEventIntMask
//			mask	gpsɂCxgrbg𗧂Ăl
// by oka
//---------------------------------------------------------------------------
BOOL	CMPEGBoardHAL::UnsetEventIntMask( DWORD mask )
{
	// ZiVA use 0-23 bit
	if ( (mask & 0xff000000) != 0)
		return FALSE;

	DWORD tmp_mask = 0;
	for ( DWORD bit = 0; bit < 24 ; bit++ )
	{
		if( (mask & 0x00000001) != 0 )
		{
			if ( m_MaskReference[bit] < 2 )
			{
				tmp_mask |= (0x1 << bit);
				m_MaskReference[bit] = 0;
			} else {
				m_MaskReference[bit]--;
			}
		}
		mask = (mask >> 1);
	}
	m_EventIntMask &= (DWORD)~(tmp_mask);

	return TRUE;
}
//---------------------------------------------------------------------------
//	
//---------------------------------------------------------------------------
//***************************************************************************
//	End of Zivabrd.cpp
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\wrapdef.h ===
//**************************************************************************
//
//      Title   : Wrapdef.h
//
//      Date    : 1998.01.21    1st making
//
//      Author  : Toshiba [PCS](PSY) Hideki Yagi
//
//      Copyright 1997,1998 Toshiba Corporation. All Rights Reserved.
//
// -------------------------------------------------------------------------
//
//      Change log :
//
//      Date       Revision                  Description
//   ------------ ---------- -----------------------------------------------
//    1998.01.21   000.0000   1st making.
//
//**************************************************************************

#define     StreamState_Off           0x0000
#define     StreamState_Stop          0x0001
#define     StreamState_Pause         0x0002
#define     StreamState_Play          0x0004


#define     PLAY_MODE_NORMAL        0x0001
#define     PLAY_MODE_FAST          0x0002
#define     PLAY_MODE_SLOW          0x0003
#define     PLAY_MODE_FREEZE        0x0004
#define     PLAY_MODE_STILL         0x0005
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\zivachip.h ===
//***************************************************************************
//
//	FileName:
//		$Workfile: ZIVACHIP.H $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.VxD/ZIVACHIP.H 18    98/06/01 6:38p Yagi $
// $Modtime: 98/05/29 9:11a $
// $Nokeywords:$
//***************************************************************************

//***************************************************************************
//	
//***************************************************************************

#ifndef _ZIVACHIP_H_
#define _ZIVACHIP_H_

#define		ZIVA_INT_ERR		(0x00000001L)
#define		ZIVA_INT_PICV		(0x00000002L)
#define		ZIVA_INT_GOPV		(0x00000004L)
#define		ZIVA_INT_SEQV		(0x00000008L)

#define		ZIVA_INT_ENDV		(0x00000010L)
#define		ZIVA_INT_PICD		(0x00000020L)
#define		ZIVA_INT_VSYNC		(0x00000040L)
#define		ZIVA_INT_AOR		(0x00000080L)
#define		ZIVA_INT_EPTM		(0x00000080L)

#define		ZIVA_INT_UND		(0x00000100L)
#define		ZIVA_INT_ENDC		(0x00000200L)
#define		ZIVA_INT_RDYS		(0x00000400L)
#define		ZIVA_INT_SCN		(0x00000800L)

#define		ZIVA_INT_USR		(0x00001000L)
#define		ZIVA_INT_ENDP		(0x00002000L)
#define		ZIVA_INT_ENDD		(0x00004000L)
#define		ZIVA_INT_AEE		(0x00008000L)

#define		ZIVA_INT_BUFF		(0x00010000L)
#define		ZIVA_INT_SEQE		(0x00020000L)
#define		ZIVA_INT_NV			(0x00040000L)
#define		ZIVA_INT_HLI		(0x00080000L)

#define		ZIVA_INT_RDYD		(0x00100000L)
#define		ZIVA_INT_RESERV1	(0x00200000L)
#define		ZIVA_INT_AUD		(0x00400000L)
#define		ZIVA_INT_INIT		(0x00800000L)
// by oka
#define		PBT_INT_END_VOB		(0x00000001L)
#define		PBT_INT_NV_PCK		(0x00000002L)

typedef enum
{
	ZIVARESULT_NOERROR = 0,
	ZIVARESULT_TIMEOUT
} ZIVARESULT;

typedef enum
{
	RESET_AUTHENTICATION      =  0,
	GET_CHALLENGE_DATA        =  1,
	SEND_RESPONSE_DATA        =  2,
	SEND_CHALLENGE_DATA       =  3,
	GET_RESPONSE_DATA         =  4,
	SEND_DISK_KEY             =  5,
	SEND_TITLE_KEY            =  6,
	SET_DECRYPTION_MODE       =  7,
	SET_PASS_THROUGH_MODE     =  8
} COPY_PROTECT_COMMAND_TYPE; 

typedef enum
{
	SET_NEW_COMMAND           =  0,
	COMMAND_COMPLETE          =  1,
	COMMAND_ERROR             =  2,
	READY_DKEY                =  3
} COPY_PROTECT_COMMAND;

typedef enum
{
	ZIVA_STATE_INITIALIZATION	= 0x01,
	ZIVA_STATE_IDLE				= 0x02,
	ZIVA_STATE_PLAY				= 0x04,
	ZIVA_STATE_PAUSE			= 0x08,
	ZIVA_STATE_SCAN				= 0x10,
	ZIVA_STATE_FREEZE			= 0x20,
	ZIVA_STATE_SLOWMOTION		= 0x40
} ZIVA_PROC_STATE;

class CIOIF;

//---------------------------------------------------------------------------
//	CZiVA for CL6105
//---------------------------------------------------------------------------

class CZiVA	{

	public:

	//------------------------
	//	Private class for ZiVA
	//------------------------
	class CZiVAMemory
	{
		private:
			DWORD	Address;
			CZiVA	*m_ziva;

		public:
			CZiVAMemory();
			
			void	Init( CZiVA *pziva , DWORD addr );
			DWORD	Get( DWORD *pData );
			DWORD	Set( DWORD Data );
			DWORD	GetAndSet( DWORD Mask, DWORD SetData );
			
			CZiVAMemory& operator=(const DWORD &Data )
			{
				Set( Data );
				return *this;
			};

			operator DWORD()
			{
				DWORD Data;
				Get( &Data );
				return Data;
			};

			CZiVAMemory& operator&=(const DWORD &Data );
			CZiVAMemory& operator|=(const DWORD &Data );

	};

	friend	class CZiVAMemory;

	private:	// datas
		CIOIF	*m_pioif;
		static BYTE	UXData[];
		BYTE * gpbRead;   // Read pointer to the UCode buffer
		IKernelService *m_pKernelObj;	// Kernel service object 
		

	private:	// commands
		ZIVARESULT	ZiVACommand( DWORD CommandID, DWORD d1 = 0, DWORD d2 = 0, DWORD d3 = 0, DWORD d4 = 0, DWORD d5 = 0, DWORD d6 = 0 );
		ZIVARESULT	ZiVACommandNoWait( DWORD CommandID, DWORD d1 = 0, DWORD d2 = 0, DWORD d3 = 0, DWORD d4 = 0, DWORD d5 = 0, DWORD d6 = 0 );

		DWORD	ZiVAWriteReg(DWORD Addr, DWORD Data );
		DWORD	ZiVAReadReg(DWORD Addr, DWORD *Data );

		DWORD	ZiVAWriteIMEM(DWORD Addr, DWORD Data );
		DWORD	ZiVAReadIMEM(DWORD Addr, DWORD *Data );

		// for microcode down load....
		DWORD load_GetDWORD();
		DWORD load_GetDWORDSwap();
		DWORD load_GetDWORDSwapBackward();

	public:		// datas
		CZiVAMemory		Host_Control;

		CZiVAMemory		ROM_INFO;
		CZiVAMemory		DRAM_INFO;
		CZiVAMemory		UCODE_MEMORY;
		CZiVAMemory		VIDEO_MODE;
		CZiVAMemory		DISPLAY_ASPECT_RATIO;
		CZiVAMemory		ASPECT_RATIO_MODE;
		CZiVAMemory		PAN_SCAN_SOURCE;
		CZiVAMemory		PAN_SCAN_HORIZONTAL_OFFSET;
		CZiVAMemory		TOP_BORDER;
		CZiVAMemory		BORDER_COLOR;
		CZiVAMemory		BACKGROUND_COLOR;
		CZiVAMemory		OSD_EVEN_FIELD;
		CZiVAMemory		OSD_ODD_FIELD;
		CZiVAMemory		IC_TYPE;
		CZiVAMemory		ERR_CONCEALMENT_LEVEL;
		CZiVAMemory		ERR_HORIZONTAL_SIZE;
		CZiVAMemory		ERR_VERTICAL_SIZE;
		CZiVAMemory		ERR_ASPECT_RATIO_INFORMATION;
		CZiVAMemory		ERR_FRAME_RATE_CODE;
		CZiVAMemory		FORCE_CODED_ASPECT_RATIO;
		CZiVAMemory		AUDIO_CONFIG;
		CZiVAMemory		AUDIO_DAC_MODE;
		CZiVAMemory		AUDIO_CLOCK_SELECTION;
		CZiVAMemory		IEC_958_DELAY;
		CZiVAMemory		AUDIO_ATTENUATION;
		CZiVAMemory		IEC_958_CHANNEL_STATUS_BITS;
		CZiVAMemory		AC3_OUTPUT_MODE;
		CZiVAMemory		AC3_OPERATIONAL_MODE;
		CZiVAMemory		AC3_LOW_BOOST;
		CZiVAMemory		AC3_HIGH_CUT;
		CZiVAMemory		AC3_PCM_SCALE_FACTOR;
		CZiVAMemory		AC3_LFE_OUTPUT_ENABLE;
		CZiVAMemory		AC3_VOICE_SELECT;
		CZiVAMemory		AC3_L_LEVEL;
		CZiVAMemory		AC3_C_LEVEL;
		CZiVAMemory		AC3_R_LEVEL;
		CZiVAMemory		AC3_SL_LEVEL;
		CZiVAMemory		AC3_SR_LEVEL;
		CZiVAMemory		AC3_CENTER_DELAY;
		CZiVAMemory		AC3_SURROUND_DELAY;
		CZiVAMemory		BITSTREAM_TYPE;
		CZiVAMemory		BITSTREAM_SOURCE;
		CZiVAMemory		SD_MODE;
		CZiVAMemory		CD_MODE;
		CZiVAMemory		AV_SYNC_MODE;
		CZiVAMemory		VIDEO_PTS_SKIP_INTERVAL;
		CZiVAMemory		VIDEO_PTS_REPEAT_INTERVAL;
		CZiVAMemory		AUTOPAUSE_ENABLE;
		CZiVAMemory		VIDEO_ENV_CHANGE;
        CZiVAMemory     MEMCOPY_XFER_BLOCKSIZE;
		CZiVAMemory		INT_MASK;
		CZiVAMemory		AUTO_FLUSH_INTERVAL;
		CZiVAMemory		RDY_S_THRESHOLD_LOW;
		CZiVAMemory		MEMORY_MAP;
		CZiVAMemory		PCI_BUFFER_START;
		CZiVAMemory		PCI_BUFFER_END;
		CZiVAMemory		DSI_BUFFER_START;
		CZiVAMemory		DSI_BUFFER_END;
		CZiVAMemory		OSD_BUFFER_START;
		CZiVAMemory		OSD_BUFFER_END;
		CZiVAMemory		OSD_BUFFER_IDLE_START;
		CZiVAMemory		USER_DATA_BUFFER_START;
		CZiVAMemory		USER_DATA_BUFFER_END;
		CZiVAMemory		USER_DATA_READ;
		CZiVAMemory		USER_DATA_WRITE;
		CZiVAMemory		DUMP_DATA_BUFFER_START;
		CZiVAMemory		DUMP_DATA_BUFFER_END;
		CZiVAMemory		SUB_PICTURE_PALETTE_START;
		CZiVAMemory		SUB_PICTURE_PALETTE_END;
		CZiVAMemory		PROC_STATE;
		CZiVAMemory		MRC_ID;
		CZiVAMemory		MRC_STATUS;
		CZiVAMemory		INT_STATUS;
		CZiVAMemory		HLI_INT_SRC;
		CZiVAMemory		BUFF_INT_SRC;
		CZiVAMemory		UND_INT_SRC;
		CZiVAMemory		PBT_INT_SRC;
		CZiVAMemory		AOR_INT_SRC;
		CZiVAMemory		AEE_INT_SRC;
		CZiVAMemory		ERR_INT_SRC;
		CZiVAMemory		VIDEO_EMPTINESS;
		CZiVAMemory		AUDIO_EMPTINESS;
		CZiVAMemory		CURR_PIC_DISPLAYED;
		CZiVAMemory		NEXT_PIC_DISPLAYED;
		CZiVAMemory		VIDEO_FIELD;
		CZiVAMemory		OSD_VALID;
		CZiVAMemory		NUM_DECODED;
		CZiVAMemory		NUM_SKIPPED;
		CZiVAMemory		NUM_REPEATED;
		CZiVAMemory		MRC_PIC_PTS;
		CZiVAMemory		MRC_PIC_STC;
		CZiVAMemory		N_AUD_DECODED;
		CZiVAMemory		NEXT_SECTOR_ADDR;
		CZiVAMemory		N_SYS_ERRORS;
		CZiVAMemory		N_VID_ERRORS;
		CZiVAMemory		N_AUD_ERRORS;
		CZiVAMemory		DATE_TIME;
		CZiVAMemory		VERSION;
		CZiVAMemory		EXTENDED_VERSION;
		CZiVAMemory		PIC1_BUFFER_START;
		CZiVAMemory		PIC1_PTS;
		CZiVAMemory		PIC1_PAN_SCAN;
		CZiVAMemory		PIC1_USER_DATA;
		CZiVAMemory		PIC1_TREF_PTYP_FLGS;
		CZiVAMemory		PIC2_BUFFER_START;
		CZiVAMemory		PIC2_PTS;
		CZiVAMemory		PIC2_PAN_SCAN;
		CZiVAMemory		PIC2_USER_DATA;
		CZiVAMemory		PIC2_TREF_PTYP_FLGS;
		CZiVAMemory		PIC3_BUFFER_START;
		CZiVAMemory		PIC3_PTS;
		CZiVAMemory		PIC3_PAN_SCAN;
		CZiVAMemory		PIC3_USER_DATA;
		CZiVAMemory		PIC3_TREF_PTYP_FLGS;
		CZiVAMemory		STREAM_ID;
		CZiVAMemory		PACKET_LEN;
		CZiVAMemory		PES_HEADER;
		CZiVAMemory		SUBPIC_EMPTINESS;
		CZiVAMemory		H_SIZE;
		CZiVAMemory		V_SIZE;
		CZiVAMemory		APSECT_RATIO;
		CZiVAMemory		FRAME_RATE;
		CZiVAMemory		BIT_RATE;
		CZiVAMemory		VBV_SIZE;
		CZiVAMemory		SEQ_FLAGS;
		CZiVAMemory		DISP_SIZE_H_V;
		CZiVAMemory		TIME_CODE;
		CZiVAMemory		GOP_FLAGS;
		CZiVAMemory		TEMP_REF;
		CZiVAMemory		PIC_TYPE;
		CZiVAMemory		VBV_DELAY;
		CZiVAMemory		PIC_HEADER;
		CZiVAMemory		AUDIO_TYPE;
		CZiVAMemory		MPEG_AUDIO_HEADER1;
		CZiVAMemory		AC3_FRAME_NUMBER;
		CZiVAMemory		LPCM_AUDIO_EMPHASIS_FLAG;
		CZiVAMemory		MPEG_AUDIO_HEADER2;
		CZiVAMemory		LPCM_AUDIO_MUTE_FLAG;
		CZiVAMemory		AC3_BSI_IS_BEING_READ;
		CZiVAMemory		LPCM_AUDIO_FRAME_NUMBER;
		CZiVAMemory		AC3_BSI_VALID;
		CZiVAMemory		LPCM_AUDIO_QUANTIZATION_WORD_LENGTH;
		CZiVAMemory		AC3_BSI_FRAME;
		CZiVAMemory		LPCM_AUDIO_SAMPLING_FREQUENCY;
		CZiVAMemory		AC3_FSCOD_FRMSIZECOD;
		CZiVAMemory		LPCM_AUDIO_NUMBER_OF_AUDIO_CHANNELS;
		CZiVAMemory		AC3_BSID_BSMOD;
		CZiVAMemory		LPCM_AUDIO_DYNAMIC_RANGE_CONTROL;
		CZiVAMemory		AC3_ACMOD_CMIXLEV;
		CZiVAMemory		AC3_SURMIXLEV_DSURMOD;
		CZiVAMemory		AC3_LFEON_DIALNORM;
		CZiVAMemory		AC3_COMPR_LANGCOD;
		CZiVAMemory		AC3_MIXLEV_ROOMTYP;
		CZiVAMemory		AC3_DIALNORM2_COMPR2;
		CZiVAMemory		AC3_LANGCOD2_MIXLEV2;
		CZiVAMemory		AC3_ROOMTYP2_COPYRIGHTB;
		CZiVAMemory		AC3_ORIGBS_TIMECOD1;
		CZiVAMemory		AC3_TIMECOD2;
		CZiVAMemory		SE_STATUS;
		CZiVAMemory		NEW_AUDIO_MODE;
		CZiVAMemory		NEW_SUBPICTURE_PALETTE;
		CZiVAMemory		NEW_AUDIO_CONFIG;
		CZiVAMemory		VSYNC_HEARTBEAT;
		CZiVAMemory		ML_HEARTBEAT;
		CZiVAMemory		SUBPICTURE_ENABLE;
		CZiVAMemory		HIGHLIGHT_ENABLE;
		CZiVAMemory		CURRENT_BUTTON;

		CZiVAMemory		AU_CLK_INOUT;   //Toshiba special
        CZiVAMemory     IDLE_DELAY;

        CZiVAMemory     ERR_MPEG_VERSION;       // 98.04.02 H.Yagi
        CZiVAMemory     VERTICAL_DISPLAYMODE;   // 98.04.02 H.Yagi
        CZiVAMemory     AC3_ENGINE_VERSION;     // 98.04.02 H.Yagi
        CZiVAMemory     ROM_END_POINTER;        // 98.04.02 H.Yagi
        CZiVAMemory     CURRENT_VOB_CELL_ID;    // 98.04.02 H.Yagi
        CZiVAMemory     PREV_VOBU_VIDEO_RLBN;   // 98.04.02 H.Yagi
        CZiVAMemory     HOST_OPTIONS;           // 98.05.29 H.Yagi

        // Authentication
		CZiVAMemory		KEY_ADDRESS;            // Yagi
		CZiVAMemory		KEY_LENGTH;             // Yagi
		CZiVAMemory		KEY_COMMAND;            // Yagi
		CZiVAMemory		KEY_STATUS;             // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_0;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_1;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_2;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_3;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_4;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_5;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_6;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_7;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_8;      // Yagi
		CZiVAMemory		DRIVE_CHALLENGE_9;      // Yagi
		CZiVAMemory		DECODER_CHALLENGE_0;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_1;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_2;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_3;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_4;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_5;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_6;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_7;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_8;    // Yagi
		CZiVAMemory		DECODER_CHALLENGE_9;    // Yagi
		CZiVAMemory		DRIVE_RESULT_0;         // Yagi
		CZiVAMemory		DRIVE_RESULT_1;         // Yagi
		CZiVAMemory		DRIVE_RESULT_2;         // Yagi
		CZiVAMemory		DRIVE_RESULT_3;         // Yagi
		CZiVAMemory		DRIVE_RESULT_4;         // Yagi
		CZiVAMemory		DECODER_RESULT_0;       // Yagi
		CZiVAMemory		DECODER_RESULT_1;       // Yagi
		CZiVAMemory		DECODER_RESULT_2;       // Yagi
		CZiVAMemory		DECODER_RESULT_3;       // Yagi
		CZiVAMemory		DECODER_RESULT_4;       // Yagi
		CZiVAMemory		TITLE_KEY_0;            // Yagi
		CZiVAMemory		TITLE_KEY_1;            // Yagi
		CZiVAMemory		TITLE_KEY_2;            // Yagi
		CZiVAMemory		TITLE_KEY_3;            // Yagi
		CZiVAMemory		TITLE_KEY_4;            // Yagi

	public:
		CZiVA( void );

	public:		// commands
		void	Init( IKernelService *pKernelObj, CIOIF *pioif );
		void	CppInit( DWORD KeyAddr );

		// Type 0: NTSC, Type 1: NTSC
		BOOL	WriteMicrocode( DWORD Type );

		DWORD	ZiVAWriteMemory(DWORD Addr, DWORD Data );
		DWORD	ZiVAReadMemory(DWORD Addr, DWORD *Data );

		ZIVARESULT		Abort( DWORD Flush );
		ZIVARESULT		Digest( DWORD x, DWORD y, DWORD decimation, DWORD threshold, DWORD start );
		ZIVARESULT		DumpData_VCD( DWORD start, DWORD length, DWORD address );
		ZIVARESULT		DumpData_DVD( DWORD numberOfBytes );
		ZIVARESULT		Fade( DWORD level, DWORD fadetime );
		ZIVARESULT		Freeze( DWORD displayMode );
// by oka
		ZIVARESULT		HighLight( DWORD button, DWORD action );
		ZIVARESULT		HighLight2( DWORD Contrast, DWORD Color, DWORD YGeom, DWORD XGeom );
//		ZIVARESULT		NewAudioMode( void );
		ZIVARESULT		NewPlayMode( void );
		ZIVARESULT		Pause( DWORD displaymode );
		ZIVARESULT		Play( DWORD playmode, DWORD fadetime, DWORD start, DWORD stop );
        ZIVARESULT      MemCopy( DWORD romAddr, DWORD dramAddr, DWORD Length );
		ZIVARESULT		Reset( void );
		ZIVARESULT		Resume( void );
		ZIVARESULT		Scan( DWORD skip, DWORD scanmode, DWORD displaymode );
		ZIVARESULT		ScreenLoad( DWORD address, DWORD length, DWORD displaymode );
		ZIVARESULT		SelectStream( DWORD streamtype, DWORD streamnumber );
		ZIVARESULT		SetFill( DWORD x, DWORD y, DWORD length, DWORD height, DWORD color );
		ZIVARESULT		SetStreams( DWORD videoID, DWORD audioID );
		ZIVARESULT		SingleStep( DWORD displaymode );
		ZIVARESULT		SlowMotion( DWORD N, DWORD displaymode );
// by oka
		ZIVARESULT		Magnify( DWORD x, DWORD y, DWORD factor );
//		ZIVARESULT		SwitchOSDBuffer( DWORD evenfield, DWORD oddfield );
	
		ZIVARESULT		TransferKey( DWORD KeyType, DWORD Authenticate );
	
};

#endif			// _ZIVACHIP_H_

//***************************************************************************
//	End of 
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\tecra\zivachip.cpp ===
//***************************************************************************
//
//	FileName:
//		$Workfile: ZIVACHIP.CPP $
//
//	Author:
//		TOSHIBA [PCS](PSY) Seiichi Nakamura
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//
//***************************************************************************
// $Header: /DVD Drivers/ZiVA.WDM/ZIVACHIP.CPP 26    99/02/12 4:44p Yagi $
// $Modtime: 99/02/10 1:24p $
// $Nokeywords:$
//***************************************************************************

// for ziva debug
//#define		DEBUG_ZIVA

// for ziva command print out
//#define		DEBUG_ZIVA_COMMAND

//---------------------------------------------------------------------------
//	INCLUDES
//---------------------------------------------------------------------------

#include "includes.h"

#include "ioif.h"
#include "timeout.h"
#include "zivachip.h"

#include "dvd1cmd.h"	// from C-CUBE
#include "dramcfg.h"	// from C-CUBE

// Ziva Command time out setting.	1000 is 1 sec
#define COMMAND_TIMEOUT	(1000)


//---------------------------------------------------------------------------
//	Constructor for CViZAMemory
//---------------------------------------------------------------------------
CZiVA::CZiVAMemory::CZiVAMemory(void):Address(0),m_ziva(NULL)
{
};

//---------------------------------------------------------------------------
//	CZiVAMemory::Init
//---------------------------------------------------------------------------
void	CZiVA::CZiVAMemory::Init( CZiVA *pziva, DWORD addr )
{
	Address = addr;
	m_ziva = pziva;
};

//---------------------------------------------------------------------------
//	CZiVAMemory::Get
//---------------------------------------------------------------------------
DWORD	CZiVA::CZiVAMemory::Get( DWORD *pData )
{
	ASSERT( m_ziva != NULL );
#ifdef ZIVA_DEBUG
	DBG_PRINTF( ("CZiVAMemory::Get Addr = 0x%x\n", Address ) );
#endif
	return m_ziva->ZiVAReadMemory( Address, pData );
};

//---------------------------------------------------------------------------
//	CZiVAMemory::Set
//---------------------------------------------------------------------------
DWORD	CZiVA::CZiVAMemory::Set( DWORD Data )
{
	ASSERT( m_ziva != NULL );
#ifdef ZIVA_DEBUG
	DBG_PRINTF( ("CZiVAMemory::Set Addr = 0x%x Data = 0x%x\n", Address, Data) );
#endif
	return m_ziva->ZiVAWriteMemory( Address, Data );
};


//---------------------------------------------------------------------------
//	CZiVAMemory::GetAndSet
//---------------------------------------------------------------------------
DWORD	CZiVA::CZiVAMemory::GetAndSet( DWORD Mask, DWORD Data )
{
	ASSERT( m_ziva != NULL );
	DWORD GetData = 0;
	m_ziva->ZiVAReadMemory( Address, &GetData );
	GetData = GetData & Mask;
	GetData = GetData | Data;
#ifdef ZIVA_DEBUG
//	DBG_PRINTF( ("CZiVAMemory::GetAndSet Addr = 0x%x Mask = 0x%x Data = 0x%x WriteData = 0x%x \n", Address, Mask, Data,GetData ) );
#endif
	return m_ziva->ZiVAWriteMemory( Address, GetData );
};

//---------------------------------------------------------------------------
//	CZiVAMemory::operator&=
//---------------------------------------------------------------------------
CZiVA::CZiVAMemory& CZiVA::CZiVAMemory::operator&=(const DWORD &Data )
{
	ASSERT( m_ziva != NULL );
	DWORD GetData = 0;
	m_ziva->ZiVAReadMemory( Address, &GetData );
	GetData = GetData & Data;
#ifdef ZIVA_DEBUG
//	DBG_PRINTF( ("CZiVAMemory::operator &= Addr = 0x%x Data = 0x%x WriteData = 0x%x \n", Address, Data,GetData ) );
#endif
	m_ziva->ZiVAWriteMemory( Address, GetData );
	return *this;
};

//---------------------------------------------------------------------------
//	CZiVAMemory::operator|=
//---------------------------------------------------------------------------
CZiVA::CZiVAMemory& CZiVA::CZiVAMemory::operator|=(const DWORD &Data )
{
	ASSERT( m_ziva != NULL );
	DWORD GetData = 0;
	m_ziva->ZiVAReadMemory( Address, &GetData );
	GetData = GetData | Data;
#ifdef ZIVA_DEBUG
//	DBG_PRINTF( ("CZiVAMemory::operator |= Addr = 0x%x Data = 0x%x WriteData = 0x%x \n", Address, Data,GetData ) );
#endif
	m_ziva->ZiVAWriteMemory( Address, GetData );
	return *this;
};


//---------------------------------------------------------------------------
//	CZiVA constructor
//---------------------------------------------------------------------------
CZiVA::CZiVA( void ): m_pioif(NULL),m_pKernelObj( NULL )
{
};

//---------------------------------------------------------------------------
//	CZiVA::ZiVAWriteMemory
//---------------------------------------------------------------------------
DWORD	CZiVA::ZiVAWriteMemory( DWORD Addr, DWORD Data )
{
	ASSERT( m_pKernelObj != NULL );
	ASSERT( m_pioif != NULL );

	m_pKernelObj->DisableHwInt();

#ifdef ZIVA_DEBUG
//	DBG_PRINTF(( "ZiVAWriteMemory  Addr = 0x%x  Data = 0x%x\n", Addr,Data ));
#endif

	// set auto increment off
    m_pioif->zivaio.HIO[7] &= (BYTE)(~0x08);

	m_pioif->zivaio.HIO[4] = (BYTE)( Addr & 0xff );
	m_pioif->zivaio.HIO[5] = (BYTE)( ( Addr >> 8  ) & 0xff );
	m_pioif->zivaio.HIO[6] = (BYTE)( ( Addr >> 16 ) & 0xff );

	m_pioif->zivaio.HIO[3] = (BYTE)( (Data >> 24 ) & 0xff );
	m_pioif->zivaio.HIO[2] = (BYTE)( (Data >> 16 ) & 0xff );
	m_pioif->zivaio.HIO[1] = (BYTE)( (Data >>  8 ) & 0xff );
	m_pioif->zivaio.HIO[0] = (BYTE)( Data & 0xff );

	m_pKernelObj->EnableHwInt();
	return 0;
};

//---------------------------------------------------------------------------
//	CZiVA::ZiVAReadMemory
//---------------------------------------------------------------------------
DWORD	CZiVA::ZiVAReadMemory( DWORD Addr, DWORD *Data )
{
	ASSERT( m_pioif != NULL );
	ASSERT( m_pKernelObj != NULL );

	m_pKernelObj->DisableHwInt();

	DWORD rcData = 0;
	
	// set auto increment off
    m_pioif->zivaio.HIO[7] &= (BYTE)(~0x08);

	m_pioif->zivaio.HIO[4] = (BYTE)( Addr & 0xff );
	m_pioif->zivaio.HIO[5] = (BYTE)( ( Addr >> 8  ) & 0xff );
	m_pioif->zivaio.HIO[6] = (BYTE)( ( Addr >> 16 ) & 0xff );

	rcData  = (BYTE)m_pioif->zivaio.HIO[3];	rcData = rcData << 8;
	rcData += (BYTE)m_pioif->zivaio.HIO[2];	rcData = rcData << 8;
	rcData += (BYTE)m_pioif->zivaio.HIO[1];	rcData = rcData << 8;
	rcData += (BYTE)m_pioif->zivaio.HIO[0];
	
	*Data = rcData;

#ifdef ZIVA_DEBUG
	DBG_PRINTF(( "ZiVAReadMemory  Addr = 0x%x  Ret = 0x%x\n", Addr, *Data ));
#endif

	m_pKernelObj->EnableHwInt();
	return 0;
};

//---------------------------------------------------------------------------
//	CZiVA::Init
//---------------------------------------------------------------------------
void	CZiVA::Init( IKernelService *pKernelObj, CIOIF *pioif )
{
	m_pioif = pioif;
	m_pKernelObj = pKernelObj;

	Host_Control.Init( this , 0x00 | 0x800000 );

	ROM_INFO.Init(						this, ADDR_ROM_INFO );
	DRAM_INFO.Init(						this, ADDR_DRAM_INFO );
	UCODE_MEMORY.Init(					this, ADDR_UCODE_MEMORY );
	VIDEO_MODE.Init(					this, ADDR_VIDEO_MODE );
	DISPLAY_ASPECT_RATIO.Init(			this, ADDR_DISPLAY_ASPECT_RATIO );
	ASPECT_RATIO_MODE.Init(				this, ADDR_ASPECT_RATIO_MODE );
	PAN_SCAN_SOURCE.Init(				this, ADDR_PAN_SCAN_SOURCE );
	PAN_SCAN_HORIZONTAL_OFFSET.Init(	this, ADDR_PAN_SCAN_HORIZONTAL_OFFSET );
	TOP_BORDER.Init(					this, ADDR_TOP_BORDER );
	BORDER_COLOR.Init(					this, ADDR_BORDER_COLOR );
	BACKGROUND_COLOR.Init(				this, ADDR_BACKGROUND_COLOR );
	OSD_EVEN_FIELD.Init(				this, ADDR_OSD_EVEN_FIELD );
	OSD_ODD_FIELD.Init(					this, ADDR_OSD_ODD_FIELD );
	IC_TYPE.Init(						this, ADDR_IC_TYPE );
	ERR_CONCEALMENT_LEVEL.Init(			this, ADDR_ERR_CONCEALMENT_LEVEL );
	ERR_HORIZONTAL_SIZE.Init(			this, ADDR_ERR_HORIZONTAL_SIZE );
	ERR_VERTICAL_SIZE.Init(				this, ADDR_ERR_VERTICAL_SIZE );
	ERR_ASPECT_RATIO_INFORMATION.Init(	this, ADDR_ERR_ASPECT_RATIO_INFORMATION );
	ERR_FRAME_RATE_CODE.Init(			this, ADDR_ERR_FRAME_RATE_CODE );
	FORCE_CODED_ASPECT_RATIO.Init(		this, ADDR_FORCE_CODED_ASPECT_RATIO );
	AUDIO_CONFIG.Init(					this, ADDR_AUDIO_CONFIG );
	AUDIO_DAC_MODE.Init(				this, ADDR_AUDIO_DAC_MODE );
	AUDIO_CLOCK_SELECTION.Init(			this, ADDR_AUDIO_CLOCK_SELECTION );
	IEC_958_DELAY.Init(					this, ADDR_IEC_958_DELAY );
	AUDIO_ATTENUATION.Init(				this, ADDR_AUDIO_ATTENUATION );
	IEC_958_CHANNEL_STATUS_BITS.Init(	this, ADDR_IEC_958_CHANNEL_STATUS_BITS );
	AC3_OUTPUT_MODE.Init(				this, ADDR_AC3_OUTPUT_MODE );
	AC3_OPERATIONAL_MODE.Init(			this, ADDR_AC3_OPERATIONAL_MODE );
	AC3_LOW_BOOST.Init(					this, ADDR_AC3_LOW_BOOST );
	AC3_HIGH_CUT.Init(					this, ADDR_AC3_HIGH_CUT );
	AC3_PCM_SCALE_FACTOR.Init(			this, ADDR_AC3_PCM_SCALE_FACTOR );
	AC3_LFE_OUTPUT_ENABLE.Init(			this, ADDR_AC3_LFE_OUTPUT_ENABLE );
	AC3_VOICE_SELECT.Init(				this, ADDR_AC3_VOICE_SELECT );
	AC3_L_LEVEL.Init(					this, ADDR_AC3_L_LEVEL );
	AC3_C_LEVEL.Init(					this, ADDR_AC3_C_LEVEL );
	AC3_R_LEVEL.Init(					this, ADDR_AC3_R_LEVEL );
	AC3_SL_LEVEL.Init(					this, ADDR_AC3_SL_LEVEL );
	AC3_SR_LEVEL.Init(					this, ADDR_AC3_SR_LEVEL );
	AC3_CENTER_DELAY.Init(				this, ADDR_AC3_CENTER_DELAY );
	AC3_SURROUND_DELAY.Init(			this, ADDR_AC3_SURROUND_DELAY );
	BITSTREAM_TYPE.Init(				this, ADDR_BITSTREAM_TYPE );
	BITSTREAM_SOURCE.Init(				this, ADDR_BITSTREAM_SOURCE );
	SD_MODE.Init(						this, ADDR_SD_MODE );
	CD_MODE.Init(						this, ADDR_CD_MODE );
	AV_SYNC_MODE.Init(					this, ADDR_AV_SYNC_MODE );
	VIDEO_PTS_SKIP_INTERVAL.Init(		this, ADDR_VIDEO_PTS_SKIP_INTERVAL );
	VIDEO_PTS_REPEAT_INTERVAL.Init(		this, ADDR_VIDEO_PTS_REPEAT_INTERVAL );
	AUTOPAUSE_ENABLE.Init(				this, ADDR_AUTOPAUSE_ENABLE );
	VIDEO_ENV_CHANGE.Init(				this, ADDR_VIDEO_ENV_CHANGE );
    MEMCOPY_XFER_BLOCKSIZE.Init(        this, ADDR_MEMCOPY_XFER_BLOCKSIZE );
	INT_MASK.Init(						this, ADDR_INT_MASK );
	AUTO_FLUSH_INTERVAL.Init(			this, ADDR_AUTO_FLUSH_INTERVAL );
	RDY_S_THRESHOLD_LOW.Init(			this, ADDR_RDY_S_THRESHOLD_LOW );
	MEMORY_MAP.Init(					this, ADDR_MEMORY_MAP );
	PCI_BUFFER_START.Init(				this, ADDR_PCI_BUFFER_START );
	PCI_BUFFER_END.Init(				this, ADDR_PCI_BUFFER_END );
	DSI_BUFFER_START.Init(				this, ADDR_DSI_BUFFER_START );
	DSI_BUFFER_END.Init(				this, ADDR_DSI_BUFFER_END );
	OSD_BUFFER_START.Init(				this, ADDR_OSD_BUFFER_START );
	OSD_BUFFER_END.Init(				this, ADDR_OSD_BUFFER_END );
	OSD_BUFFER_IDLE_START.Init(			this, ADDR_OSD_BUFFER_IDLE_START );
	USER_DATA_BUFFER_START.Init(		this, ADDR_USER_DATA_BUFFER_START );
	USER_DATA_BUFFER_END.Init(			this, ADDR_USER_DATA_BUFFER_END );
	USER_DATA_READ.Init(				this, ADDR_USER_DATA_READ );
	USER_DATA_WRITE.Init(				this, ADDR_USER_DATA_WRITE );
	DUMP_DATA_BUFFER_START.Init(		this, ADDR_DUMP_DATA_BUFFER_START );
	DUMP_DATA_BUFFER_END.Init(			this, ADDR_DUMP_DATA_BUFFER_END );
	SUB_PICTURE_PALETTE_START.Init(		this, ADDR_SUB_PICTURE_PALETTE_START );
	SUB_PICTURE_PALETTE_END.Init(		this, ADDR_SUB_PICTURE_PALETTE_END );
	PROC_STATE.Init(					this, ADDR_PROC_STATE );
	MRC_ID.Init(						this, ADDR_MRC_ID );
	MRC_STATUS.Init(					this, ADDR_MRC_STATUS );
	INT_STATUS.Init(					this, ADDR_INT_STATUS );
	HLI_INT_SRC.Init(					this, ADDR_HLI_INT_SRC );
	BUFF_INT_SRC.Init(					this, ADDR_BUFF_INT_SRC );
	UND_INT_SRC.Init(					this, ADDR_UND_INT_SRC );
	PBT_INT_SRC.Init(					this, ADDR_PBT_INT_SRC );
	AOR_INT_SRC.Init(					this, ADDR_AOR_INT_SRC );
	AEE_INT_SRC.Init(					this, ADDR_AEE_INT_SRC );
	ERR_INT_SRC.Init(					this, ADDR_ERR_INT_SRC );
	VIDEO_EMPTINESS.Init(					this, ADDR_VIDEO_EMPTINESS );
	AUDIO_EMPTINESS.Init(					this, ADDR_AUDIO_EMPTINESS );
	CURR_PIC_DISPLAYED.Init(					this, ADDR_CURR_PIC_DISPLAYED );
	NEXT_PIC_DISPLAYED.Init(					this, ADDR_NEXT_PIC_DISPLAYED );
	VIDEO_FIELD.Init(					this, ADDR_VIDEO_FIELD );
	OSD_VALID.Init(					this, ADDR_OSD_VALID );
	NUM_DECODED.Init(					this, ADDR_NUM_DECODED );
	NUM_SKIPPED.Init(					this, ADDR_NUM_SKIPPED );
	NUM_REPEATED.Init(					this, ADDR_NUM_REPEATED );
	MRC_PIC_PTS.Init(					this, ADDR_MRC_PIC_PTS );
	MRC_PIC_STC.Init(					this, ADDR_MRC_PIC_STC );
	N_AUD_DECODED.Init(					this, ADDR_N_AUD_DECODED );
	NEXT_SECTOR_ADDR.Init(					this, ADDR_NEXT_SECTOR_ADDR );
	N_SYS_ERRORS.Init(					this, ADDR_N_SYS_ERRORS );
	N_VID_ERRORS.Init(					this, ADDR_N_VID_ERRORS );
	N_AUD_ERRORS.Init(					this, ADDR_N_AUD_ERRORS );
	DATE_TIME.Init(								this, ADDR_DATE_TIME );
	VERSION.Init(								this, ADDR_VERSION );
	EXTENDED_VERSION.Init(						this, ADDR_EXTENDED_VERSION );
	PIC1_BUFFER_START.Init(						this, ADDR_PIC1_BUFFER_START );
	PIC1_PTS.Init(								this, ADDR_PIC1_PTS );
	PIC1_PAN_SCAN.Init(							this, ADDR_PIC1_PAN_SCAN );
	PIC1_USER_DATA.Init(						this, ADDR_PIC1_USER_DATA );
	PIC1_TREF_PTYP_FLGS.Init(					this, ADDR_PIC1_TREF_PTYP_FLGS );
	PIC2_BUFFER_START.Init(						this, ADDR_PIC2_BUFFER_START );
	PIC2_PTS.Init(								this, ADDR_PIC2_PTS );
	PIC2_PAN_SCAN.Init(							this, ADDR_PIC2_PAN_SCAN );
	PIC2_USER_DATA.Init(						this, ADDR_PIC2_USER_DATA );
	PIC2_TREF_PTYP_FLGS.Init(					this, ADDR_PIC2_TREF_PTYP_FLGS );
	PIC3_BUFFER_START.Init(						this, ADDR_PIC3_BUFFER_START );
	PIC3_PTS.Init(								this, ADDR_PIC3_PTS );
	PIC3_PAN_SCAN.Init(							this, ADDR_PIC3_PAN_SCAN );
	PIC3_USER_DATA.Init(						this, ADDR_PIC3_USER_DATA );
	PIC3_TREF_PTYP_FLGS.Init(					this, ADDR_PIC3_TREF_PTYP_FLGS );
	STREAM_ID.Init(								this, ADDR_STREAM_ID );
	PACKET_LEN.Init(							this, ADDR_PACKET_LEN );
	PES_HEADER.Init(							this, ADDR_PES_HEADER );
	SUBPIC_EMPTINESS.Init(						this, ADDR_SUBPIC_EMPTINESS );
	H_SIZE.Init(								this, ADDR_H_SIZE );
	V_SIZE.Init(								this, ADDR_V_SIZE );
	APSECT_RATIO.Init(							this, ADDR_APSECT_RATIO );
	FRAME_RATE.Init(							this, ADDR_FRAME_RATE );
	BIT_RATE.Init(								this, ADDR_BIT_RATE );
	VBV_SIZE.Init(								this, ADDR_VBV_SIZE );
	SEQ_FLAGS.Init(								this, ADDR_SEQ_FLAGS );
	DISP_SIZE_H_V.Init(							this, ADDR_DISP_SIZE_H_V );
	TIME_CODE.Init(								this, ADDR_TIME_CODE );
	GOP_FLAGS.Init(								this, ADDR_GOP_FLAGS );
	TEMP_REF.Init(								this, ADDR_TEMP_REF );
	PIC_TYPE.Init(								this, ADDR_PIC_TYPE );
	VBV_DELAY.Init(								this, ADDR_VBV_DELAY );
	PIC_HEADER.Init(							this, ADDR_PIC_HEADER );
	AUDIO_TYPE.Init(							this, ADDR_AUDIO_TYPE );
	MPEG_AUDIO_HEADER1.Init(					this, ADDR_MPEG_AUDIO_HEADER1 );
	AC3_FRAME_NUMBER.Init(						this, ADDR_AC3_FRAME_NUMBER );
	LPCM_AUDIO_EMPHASIS_FLAG.Init(				this, ADDR_LPCM_AUDIO_EMPHASIS_FLAG );
	MPEG_AUDIO_HEADER2.Init(					this, ADDR_MPEG_AUDIO_HEADER2 );
	LPCM_AUDIO_MUTE_FLAG.Init(					this, ADDR_LPCM_AUDIO_MUTE_FLAG );
	AC3_BSI_IS_BEING_READ.Init(					this, ADDR_AC3_BSI_IS_BEING_READ );
	LPCM_AUDIO_FRAME_NUMBER.Init(				this, ADDR_LPCM_AUDIO_FRAME_NUMBER );
	AC3_BSI_VALID.Init(							this, ADDR_AC3_BSI_VALID );
	LPCM_AUDIO_QUANTIZATION_WORD_LENGTH.Init(	this, ADDR_LPCM_AUDIO_QUANTIZATION_WORD_LENGTH );
	AC3_BSI_FRAME.Init(							this, ADDR_AC3_BSI_FRAME );
	LPCM_AUDIO_SAMPLING_FREQUENCY.Init(			this, ADDR_LPCM_AUDIO_SAMPLING_FREQUENCY );
	AC3_FSCOD_FRMSIZECOD.Init(					this, ADDR_AC3_FSCOD_FRMSIZECOD );
	LPCM_AUDIO_NUMBER_OF_AUDIO_CHANNELS.Init(	this, ADDR_LPCM_AUDIO_NUMBER_OF_AUDIO_CHANNELS );
	AC3_BSID_BSMOD.Init(						this, ADDR_AC3_BSID_BSMOD );
	LPCM_AUDIO_DYNAMIC_RANGE_CONTROL.Init(		this, ADDR_LPCM_AUDIO_DYNAMIC_RANGE_CONTROL );
	AC3_ACMOD_CMIXLEV.Init(						this, ADDR_AC3_ACMOD_CMIXLEV );
	AC3_SURMIXLEV_DSURMOD.Init(					this, ADDR_AC3_SURMIXLEV_DSURMOD );
	AC3_LFEON_DIALNORM.Init(					this, ADDR_AC3_LFEON_DIALNORM );
	AC3_COMPR_LANGCOD.Init(						this, ADDR_AC3_COMPR_LANGCOD );
	AC3_MIXLEV_ROOMTYP.Init(					this, ADDR_AC3_MIXLEV_ROOMTYP );
	AC3_DIALNORM2_COMPR2.Init(					this, ADDR_AC3_DIALNORM2_COMPR2 );
	AC3_LANGCOD2_MIXLEV2.Init(					this, ADDR_AC3_LANGCOD2_MIXLEV2 );
	AC3_ROOMTYP2_COPYRIGHTB.Init(				this, ADDR_AC3_ROOMTYP2_COPYRIGHTB );
	AC3_ORIGBS_TIMECOD1.Init(					this, ADDR_AC3_ORIGBS_TIMECOD1 );
//	AC3_TIMECOD2.Init(							this, ADDR_AC3_TIMECOD2 );          // 98.04.02 H.Yagi
	AC3_TIMECOD2.Init(							this, ADDR_AC3_TIMECOD2_EBITS );    // 98.04.02 H.Yagi
	SE_STATUS.Init(								this, ADDR_SE_STATUS );
	NEW_AUDIO_MODE.Init(						this, ADDR_NEW_AUDIO_MODE );
	NEW_SUBPICTURE_PALETTE.Init(				this, ADDR_NEW_SUBPICTURE_PALETTE );
	NEW_AUDIO_CONFIG.Init(						this, ADDR_NEW_AUDIO_CONFIG );
	VSYNC_HEARTBEAT.Init(						this, ADDR_VSYNC_HEARTBEAT );
	ML_HEARTBEAT.Init(							this, ADDR_ML_HEARTBEAT );
	SUBPICTURE_ENABLE.Init(						this, ADDR_SUBPICTURE_ENABLE );
	HIGHLIGHT_ENABLE.Init(						this, ADDR_HIGHLIGHT_ENABLE );
	CURRENT_BUTTON.Init(						this, ADDR_CURRENT_BUTTON );

    ERR_MPEG_VERSION.Init(                      this, ADDR_ERR_MPEG_VERSION );          // 98.04.02 H.Yagi
    VERTICAL_DISPLAYMODE.Init(                  this, ADDR_VERTICAL_DISPLAYMODE );      // 98.04.02 H.Yagi
	AC3_ENGINE_VERSION.Init(					this, ADDR_AC3_ENGINE_VERSION );        // 98.04.02 H.Yagi
	ROM_END_POINTER.Init(						this, ADDR_ROM_END_POINTER );           // 98.04.02 H.Yagi
	CURRENT_VOB_CELL_ID.Init(					this, ADDR_CURRENT_VOB_CELL_ID );       // 98.04.02 H.Yagi
	PREV_VOBU_VIDEO_RLBN.Init(					this, ADDR_PREV_VOBU_VIDEO_RLBN );      // 98.04.02 H.Yagi


	// Authentication for only ZiVA1.1 or later     // Yagi
	KEY_ADDRESS.Init( 					this, 0x480 );
	KEY_LENGTH.Init(					this, 0x484 );

	// toshiba special
	AU_CLK_INOUT.Init(					this, 0xf8 );
    IDLE_DELAY.Init(                  this, ADDR_IDLE_DELAY );

    // 98.05.29 H.Yagi
    HOST_OPTIONS.Init(          this, ADDR_HOST_OPTIONS );
};



void    CZiVA::CppInit(  DWORD gKeyAddress )
{
        KEY_COMMAND.Init( this, gKeyAddress );
        KEY_STATUS.Init( this, gKeyAddress+1*4 );
        DRIVE_CHALLENGE_0.Init( this, gKeyAddress+2*4 );
        DRIVE_CHALLENGE_1.Init( this, gKeyAddress+3*4 );
        DRIVE_CHALLENGE_2.Init( this, gKeyAddress+4*4 );
        DRIVE_CHALLENGE_3.Init( this, gKeyAddress+5*4 );
        DRIVE_CHALLENGE_4.Init( this, gKeyAddress+6*4 );
        DRIVE_CHALLENGE_5.Init( this, gKeyAddress+7*4 );
        DRIVE_CHALLENGE_6.Init( this, gKeyAddress+8*4 );
        DRIVE_CHALLENGE_7.Init( this, gKeyAddress+9*4 );
        DRIVE_CHALLENGE_8.Init( this, gKeyAddress+10*4 );
        DRIVE_CHALLENGE_9.Init( this, gKeyAddress+11*4 );
        DECODER_CHALLENGE_0.Init( this, gKeyAddress+12*4 );
        DECODER_CHALLENGE_1.Init( this, gKeyAddress+13*4 );
        DECODER_CHALLENGE_2.Init( this, gKeyAddress+14*4 );
        DECODER_CHALLENGE_3.Init( this, gKeyAddress+15*4 );
        DECODER_CHALLENGE_4.Init( this, gKeyAddress+16*4 );
        DECODER_CHALLENGE_5.Init( this, gKeyAddress+17*4 );
        DECODER_CHALLENGE_6.Init( this, gKeyAddress+18*4 );
        DECODER_CHALLENGE_7.Init( this, gKeyAddress+19*4 );
        DECODER_CHALLENGE_8.Init( this, gKeyAddress+20*4 );
        DECODER_CHALLENGE_9.Init( this, gKeyAddress+21*4 );
        DRIVE_RESULT_0.Init( this, gKeyAddress+22*4 );
        DRIVE_RESULT_1.Init( this, gKeyAddress+23*4 );
        DRIVE_RESULT_2.Init( this, gKeyAddress+24*4 );
        DRIVE_RESULT_3.Init( this, gKeyAddress+25*4 );
        DRIVE_RESULT_4.Init( this, gKeyAddress+26*4 );
        DECODER_RESULT_0.Init( this, gKeyAddress+27*4 );
        DECODER_RESULT_1.Init( this, gKeyAddress+28*4 );
        DECODER_RESULT_2.Init( this, gKeyAddress+29*4 );
        DECODER_RESULT_3.Init( this, gKeyAddress+30*4 );
        DECODER_RESULT_4.Init( this, gKeyAddress+31*4 );
        TITLE_KEY_0.Init( this, gKeyAddress+32*4 );
        TITLE_KEY_1.Init( this, gKeyAddress+33*4 );
        TITLE_KEY_2.Init( this, gKeyAddress+34*4 );
        TITLE_KEY_3.Init( this, gKeyAddress+35*4 );
        TITLE_KEY_4.Init( this, gKeyAddress+36*4 );
};



//---------------------------------------------------------------------------
//	CZiVA::ZiVACommand
//---------------------------------------------------------------------------
ZIVARESULT		CZiVA::ZiVACommand( DWORD CommandID, DWORD d1, DWORD d2,  DWORD d3, DWORD d4, DWORD d5, DWORD d6 )
{
	ASSERT( m_pioif != NULL );
	
	DWORD StatusPointer = 0;
	DWORD ZiVAStatus = 0;
	
	CTimeOut TimeOut( COMMAND_TIMEOUT, 1 , m_pKernelObj );

	// status pointer check?
	while( TRUE ) 
	{
		ZiVAReadMemory(ADDR_STATUS_ADDRESS, &StatusPointer);
		if( StatusPointer != 0 )
		{
			ZiVAReadMemory( StatusPointer, &ZiVAStatus );
//			DBG_PRINTF( ("ZiVA Status = 0x%x\n", ZiVAStatus ));
			break;
		};
		// Sleep
		TimeOut.Sleep();

		// check Time out....... 1 sec
		if( TimeOut.CheckTimeOut() == TRUE )
			return ZIVARESULT_TIMEOUT;
	};
	
	m_pKernelObj->DisableHwInt();
	
    ZiVAWriteMemory( ADDR_COMMAND, CommandID );
	ZiVAWriteMemory( ADDR_PARAMETER_1, d1 );
	ZiVAWriteMemory( ADDR_PARAMETER_2, d2 );
	ZiVAWriteMemory( ADDR_PARAMETER_3, d3 );
	ZiVAWriteMemory( ADDR_PARAMETER_4, d4 );
	ZiVAWriteMemory( ADDR_PARAMETER_5, d5 );
	ZiVAWriteMemory( ADDR_PARAMETER_6, d6 );
	ZiVAWriteMemory( ADDR_STATUS_ADDRESS, 0x00 );		// zero the status pointer
	
	// interrupt
//	Host_Control |= 0x10C2;

	m_pKernelObj->EnableHwInt();

    CTimeOut TimeOut2( COMMAND_TIMEOUT, 1, m_pKernelObj );

	// status pointer check?
	while( TRUE ) 
	{
		ZiVAReadMemory(ADDR_STATUS_ADDRESS, &StatusPointer);
		if( StatusPointer != 0 )
		{
			ZiVAReadMemory( StatusPointer, &ZiVAStatus );
			DBG_PRINTF( ("ZiVA Status = 0x%x\n", ZiVAStatus ));
			break;
		};
		// Sleep
        TimeOut2.Sleep();

		// check Time out....... 1 sec
        if( TimeOut2.CheckTimeOut() == TRUE )
			return ZIVARESULT_TIMEOUT;
	};
	
	
	return ZIVARESULT_NOERROR;
};


//---------------------------------------------------------------------------
//	CZiVA::ZiVACommandNoWait
//---------------------------------------------------------------------------
ZIVARESULT		CZiVA::ZiVACommandNoWait( DWORD CommandID, DWORD d1, DWORD d2,  DWORD d3, DWORD d4, DWORD d5, DWORD d6 )
{
	ASSERT( m_pioif != NULL );
	
	DWORD StatusPointer = 0;
//    DWORD ZiVAStatus = 0;
	
	// status pointer check?

	ZiVAReadMemory(ADDR_STATUS_ADDRESS, &StatusPointer);
	if( StatusPointer == 0 )
		return ZIVARESULT_TIMEOUT;

	m_pKernelObj->DisableHwInt();
	
	ZiVAWriteMemory( ADDR_COMMAND, CommandID );
	ZiVAWriteMemory( ADDR_PARAMETER_1, d1 );
	ZiVAWriteMemory( ADDR_PARAMETER_2, d2 );
	ZiVAWriteMemory( ADDR_PARAMETER_3, d3 );
	ZiVAWriteMemory( ADDR_PARAMETER_4, d4 );
	ZiVAWriteMemory( ADDR_PARAMETER_5, d5 );
	ZiVAWriteMemory( ADDR_PARAMETER_6, d6 );
	ZiVAWriteMemory( ADDR_STATUS_ADDRESS, 0x00 );		// zero the status pointer
	
	// interrupt
//	Host_Control |= 0x10C2;

	m_pKernelObj->EnableHwInt();

	ZiVAReadMemory(ADDR_STATUS_ADDRESS, &StatusPointer);
	if( StatusPointer == 0 )
		return ZIVARESULT_TIMEOUT;
	
	return ZIVARESULT_NOERROR;
};



//---------------------------------------------------------------------------
//	CZiVA::Abort
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Abort( DWORD Flush )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Abort 0x%x\n",Flush ));
#endif
	return ZiVACommand( ABORT , Flush );
};

//---------------------------------------------------------------------------
//	CZiVA::Digest
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Digest( DWORD x, DWORD y, DWORD decimation, DWORD threshold, DWORD start )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Digest 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\n", x, y, decimation, threshold, start  ));
#endif
	return ZiVACommand( DIGEST ,  x,  y,  decimation,  threshold,  start );
};

//---------------------------------------------------------------------------
//	CZiVA::DumpDumpData_VCD
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::DumpData_VCD( DWORD start, DWORD length, DWORD address )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::DumpData_VCD 0x%x, 0x%x, 0x%x\n", start, length, address ));
#endif
	return ZiVACommand( DUMPDATA_VCD ,  start,  length,  address );
};

//---------------------------------------------------------------------------
//	CZiVA::DumpData_DVD
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::DumpData_DVD( DWORD numberOfBytes )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("	CZiVA::DumpData_DVD 0x%x\n", numberOfBytes ));
#endif
	return ZiVACommand( DUMPDATA_DVD ,  numberOfBytes );
};

//---------------------------------------------------------------------------
//	CZiVA::Fade
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Fade( DWORD level, DWORD fadetime )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Fade 0x%x, 0x%x\n", level, fadetime  ));
#endif
	return ZiVACommand( FADE ,  level,  fadetime );
};

//---------------------------------------------------------------------------
//	CZiVA::Freeze
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Freeze( DWORD displayMode )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Freeze 0x%x\n", displayMode  ));
#endif
	return ZiVACommand( FREEZE ,  displayMode );
};

//---------------------------------------------------------------------------
//	CZiVA::HighLight
//---------------------------------------------------------------------------
// by oka
ZIVARESULT	CZiVA::HighLight( DWORD button, DWORD action )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::HighLight 0x%x, 0x%x, 0x%x\n", button, group, action ));
#endif
// by oka
	return ZiVACommand( HIGHLIGHT ,  button,  action );
};

//---------------------------------------------------------------------------
//	CZiVA::HighLight2
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::HighLight2( DWORD Contrast, DWORD Color, DWORD YGeom, DWORD XGeom )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::HighLight2 0x%x, 0x%x, 0x%x, 0x%x\n", Contrast, Color, YGeom, XGeom ));
#endif
	return ZiVACommand(  HIGHLIGHT2,Contrast, Color, YGeom, XGeom );
};

/*
//---------------------------------------------------------------------------
//	CZiVA::NewAudioMode
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::NewAudioMode( void )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::NewAudioMode\n" ));
#endif
	return ZiVACommand( 0x0027 );
};
*/

//---------------------------------------------------------------------------
//	CZiVA::NewPlayMode
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::NewPlayMode( void )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::NewPlayMode\n" ));
#endif
	return ZiVACommand( NEWPLAYMODE );
};

//---------------------------------------------------------------------------
//	CZiVA::Pause
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Pause( DWORD displaymode )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Pause 0x%x\n" , displaymode ));
#endif
	return ZiVACommand( PAUSE ,  displaymode );
};

//---------------------------------------------------------------------------
//	CZiVA::Play
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Play( DWORD playmode, DWORD fadetime, DWORD start, DWORD stop )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Play 0x%x, 0x%x, 0x%x, 0x%x\n" , playmode, fadetime, start, stop ));
#endif
	return ZiVACommand( PLAY ,  playmode,  fadetime,  start,  stop );
};

//---------------------------------------------------------------------------
//  CZiVA::MemCopy(ROMtoDRAM)
//---------------------------------------------------------------------------
ZIVARESULT  CZiVA::MemCopy( DWORD romAddr, DWORD dramAddr, DWORD Length )
{
#ifdef		DEBUG_ZIVA_COMMAND
    DBG_PRINTF( ("CZiVA::MemCopy 0x%x, 0x%x, 0x%x\n", romAddr, dramAddr, Length ));
#endif
    return ZiVACommand( MEMCOPY ,  romAddr,  dramAddr,  Length );
};

//---------------------------------------------------------------------------
//	CZiVA::Reset
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Reset( void )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Reset\n" ));
#endif
	return ZiVACommand( RESET );
};

//---------------------------------------------------------------------------
//	
//---------------------------------------------------------------------------
//ZIVARESULT      CZiVA::Resume( DWORD playmode )
//{
//        return ZiVACommand( 0x012e ,  playmode );
//};

//---------------------------------------------------------------------------
//	     CZiVA::Resume
//---------------------------------------------------------------------------
ZIVARESULT      CZiVA::Resume( void )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Resume\n" ));
#endif
        return ZiVACommand( RESUME );
};

//---------------------------------------------------------------------------
//	CZiVA::Scan
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Scan( DWORD skip, DWORD scanmode, DWORD displaymode )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Scan 0x%x, 0x%x, 0x%x\n", skip, scanmode, displaymode ));
#endif
	return ZiVACommand( SCAN ,  skip,  scanmode,  displaymode );
};

//---------------------------------------------------------------------------
//	CZiVA::ScreenLoad
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::ScreenLoad( DWORD address, DWORD length, DWORD displaymode )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::ScreenLoad 0x%x0, 0x%x, 0x%x\n", address, length, displaymode ));
#endif
	return ZiVACommand( SCREENLOAD ,  address,  length,  displaymode );
};

//---------------------------------------------------------------------------
//	CZiVA::SelectStream
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::SelectStream( DWORD streamtype, DWORD streamnumber )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::SelectStream 0x%x, 0x%x\n", streamtype, streamnumber ));
#endif
	return ZiVACommand( SELECTSTREAM ,  streamtype,  streamnumber );
};

//---------------------------------------------------------------------------
//	CZiVA::SetFill
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::SetFill( DWORD x, DWORD y, DWORD length, DWORD height, DWORD color )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::SetFill 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\n", x, y, length, height, color  ));
#endif
	return ZiVACommand( SETFILL ,  x,  y,  length,  height,  color );
};

//---------------------------------------------------------------------------
//	CZiVA::SetStreams
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::SetStreams( DWORD videoID, DWORD audioID )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::SetStreams 0x%x, 0x%x\n", videoID, audioID ));
#endif
	return ZiVACommand( SETSTREAMS ,  videoID,  audioID );
};

//---------------------------------------------------------------------------
//	CZiVA::SingleStep
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::SingleStep( DWORD displaymode )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::SingleStep 0x%x\n", displaymode ));
#endif
	return ZiVACommand( SINGLESTEP ,  displaymode );
};

//---------------------------------------------------------------------------
//	CZiVA::SlowMotion
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::SlowMotion( DWORD N, DWORD displaymode )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::SlowMotion 0x%x, 0x%x\n", N, displaymode ));
#endif
	return ZiVACommand( SLOWMOTION ,  N,  displaymode );
};

// by oka
//---------------------------------------------------------------------------
//	CZiVA::Magnify
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::Magnify( DWORD x, DWORD y, DWORD factor )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("CZiVA::Magnify 0x%x, 0x%x\n", x,y,factor ));
#endif
	return ZiVACommand( MAGNIFY ,  x,  y,  factor );
};
/*
//---------------------------------------------------------------------------
//	CZiVA::SwitchOSDBuffer
//---------------------------------------------------------------------------
ZIVARESULT	CZiVA::SwitchOSDBuffer( DWORD evenfield, DWORD oddfield )
{
	return ZiVACommand( 0x8254 ,  evenfield,  oddfield );
}
*/

ZIVARESULT	CZiVA::TransferKey( DWORD KeyType, DWORD Authenticate )
{
#ifdef		DEBUG_ZIVA_COMMAND
	DBG_PRINTF( ("	CZiVA::TransferKey 0x%x, 0x%x\n", KeyType, Authenticate ));
#endif
        return ZiVACommand( 0x0137 ,  KeyType,  Authenticate );
}


//===================================================
//	ZiVA register ACCESS functions.
//===================================================

// CL6100 GBUS map
#define CF_read1          0x2d
#define CF_intrpt         0x1c    // all the CFIFO registers changed
#define CF_command        0x1f
#define CPU_imdt          0x34    // IMEM data register
#define CPU_imadr         0x36    // IMEM read/write pointer
#define CPU_index         0x3a    // index register for indirect regs
#define CPU_idxdt         0x3b    // data port for indirect regs
#define HOST_control      0x00
#define DMA_adr           0x22    // DMA Indirect Index registe
#define DMA_MODE          0x0f    // DMA Mode Setting register
#define DMA_data          0x23    // DMA Indirect Data register
#define DMA_CYCLE         0x11    // DMA Cycle register to define rom cycle/size
#define CPU_PC            0x9     // IMEM instruction pointer register
#define CPU_DIR           0xA     // instruction register


//---------------------------------------------------------------------------
//	CZiVA::ZiVAWriteReg
//---------------------------------------------------------------------------
DWORD	CZiVA::ZiVAWriteReg(DWORD Addr, DWORD Data )
{
	return ZiVAWriteMemory( Addr | 0x800000 , Data );
};

//---------------------------------------------------------------------------
//	CZiVA::ZiVAReadReg
//---------------------------------------------------------------------------
DWORD	CZiVA::ZiVAReadReg(DWORD Addr, DWORD *Data )
{
	return ZiVAReadMemory( Addr | 0x800000 , Data );
};

//---------------------------------------------------------------------------
//	ZiVA::ZiVAWriteIMEM
//---------------------------------------------------------------------------
DWORD	CZiVA::ZiVAWriteIMEM(DWORD Addr, DWORD Data )
{
	ZiVAWriteReg( CPU_imadr, Addr );
	return ZiVAWriteReg( CPU_imdt, Data );
};

//---------------------------------------------------------------------------
//	ZiVA::ZiVAReadIMEM
//---------------------------------------------------------------------------
DWORD	CZiVA::ZiVAReadIMEM(DWORD Addr, DWORD *Data )
{
	ZiVAWriteReg( CPU_index, 0x0b );
	ZiVAWriteReg( CPU_idxdt, Addr );
	ZiVAWriteReg( CPU_index, 0x0e );
	return ZiVAReadReg( CPU_idxdt , Data );
};


//---------------------------------------------------------------------------
//	CZiVA::load_GetDWORD
//---------------------------------------------------------------------------
DWORD CZiVA::load_GetDWORD()
{
	DWORD dwResult =  gpbRead[0] + (gpbRead[1] << 8) + (gpbRead[2] << 16) + (gpbRead[3] << 24);
	gpbRead += 4;
	return dwResult;
};

//---------------------------------------------------------------------------
//	CZiVA::load_GetDWORDSwap
//---------------------------------------------------------------------------
DWORD CZiVA::load_GetDWORDSwap()
{
	DWORD dwResult =  gpbRead[3] + (gpbRead[2] << 8) + (gpbRead[1] << 16) + (gpbRead[0] << 24);
	gpbRead += 4;
	return dwResult;
};

//---------------------------------------------------------------------------
//	CZiVA::load_GetDWORDSwapBackward
//---------------------------------------------------------------------------
DWORD CZiVA::load_GetDWORDSwapBackward()
{
	DWORD dwResult =  gpbRead[3] + (gpbRead[2] << 8) + (gpbRead[1] << 16) + (gpbRead[0] << 24);
	gpbRead -= 4;
	return dwResult;
};


#define IMEM_START_OFFSET       0x800   // byte offset
#define IMEM_LENGTH             0xFF    // in 32-bit words
#define DRAM_IMAGE_LENGTH       0x7FF   // in bytes

#define GBUS_TABLE_OFFSET       0xBFC   // byte offset
#define STREAM_SOURCE           0x0     // SD Interface

#define SD_MODE                 0xD   // For SD Interface



//===================================================
//	ZiVA Microcode Downloading 
//===================================================

//---------------------------------------------------------------------------
//	CZiVA::WriteMicrocode
//---------------------------------------------------------------------------
// Type 0:NTSC , 1:PAL
BOOL CZiVA::WriteMicrocode( DWORD Type )
{

  DWORD dwSectionLength;    // Section length in bytes
  DWORD dwSectionAddress;   // Start address in DRAM (WORD address)
  DWORD dwSectionChecksum;  // Section check sum value
  DWORD dwCnt;              // Counter of the bytes written to the DVD chip
  DWORD dwAddress;          // Current DRAM address (byte address)
  BYTE * pbUCodeStart;      // Sarting point of the UCode in the buffer (file)
  BYTE * pbFinalGBUSStart;  // Sarting point of the final GBUS writes.
  DWORD  dwTmp;
  BYTE TmpTmp;

  gpbRead = UXData;        // Set pointer to the beginning of the buffer

  // I-MODE SETING!!! 
  TmpTmp = m_pioif->zivaio.HIO[7];
	

  // A. Skip the initial header of the file (12 bytes)
  gpbRead += 12;

  // B. Skip data_type, section flags and unused (4 bytes)
  gpbRead += 4;

  dwSectionLength   = load_GetDWORD();
  dwSectionAddress  = load_GetDWORD();
  dwSectionChecksum = load_GetDWORD();

  // Remember the start of the UCode.
  pbUCodeStart = gpbRead;

  // C.1. Configuration-specific GBUS writes


  // Issue "Host Run" command
  Host_Control = 0x1000;

  // C.1.1 Set up the DRAM.
  ZiVAWriteReg( DMA_adr, DMA_MODE );
  //ZiVAWriteReg( DMA_data, 0x4EC );   // 16 Mbits DRAM
  ZiVAWriteReg( DMA_data, 0x14EC );   // 20 Mbits DRAM

  // C.1.2 Set up the ROM and SRAM (if any).
  ZiVAWriteReg( DMA_adr, DMA_CYCLE );
  ZiVAWriteReg( DMA_data, 0 );        // No ROM or SRAM present

  // C.2. Initial GBUS writes:
  gpbRead = pbUCodeStart + GBUS_TABLE_OFFSET;
  for ( dwCnt = load_GetDWORDSwapBackward(); dwCnt; dwCnt-- )
  {
    dwAddress = load_GetDWORDSwapBackward();
    ZiVAWriteReg( dwAddress, load_GetDWORDSwapBackward() );
  }

  // Remember the start of the Final GBUS writes table.
  pbFinalGBUSStart = gpbRead;

  // C.3. Copy bootstrap code into IMEM
  gpbRead = pbUCodeStart + IMEM_START_OFFSET;

  for ( dwAddress=0; dwAddress < IMEM_LENGTH; dwAddress ++ )
  {
    DWORD dwValue = load_GetDWORDSwap();
    ZiVAWriteIMEM( dwAddress, dwValue );
  }

  //return TRUE;

  // C.4. Copy default DVD1 configuration data into DRAM
  gpbRead = pbUCodeStart;

  for ( dwAddress=0; dwAddress < dwSectionLength/*DRAM_IMAGE_LENGTH*/; )
  {
    ZiVAWriteMemory( dwAddress, load_GetDWORDSwap() );
    dwAddress += 4; // Next 32-bit-WORD byte address in DRAM
  }

  // Check DRAM 12345
  ZiVAReadMemory( 0x128, &dwTmp );
  DBG_PRINTF( ("check DRAM 12345 ? Data = 0x%x\n", dwTmp ) );

/*
  // C.5. Update configuration data in DRAM for the specific system.
  DVD_WriteDRAM( DRAM_Stream_Source, STREAM_SOURCE );
  DVD_WriteDRAM( DRAM_SD_Mode, SD_MODE );
  DVD_WriteDRAM( DRAM_CFifo_Level, CFIFO_THRESHOLD );
  DVD_WriteDRAM( DRAM_INFO, 1 );        // one 4Mbits DRAM increment
  DVD_WriteDRAM( UCODE_MEMORY, 0 );     // Microcode is in DRAM
  DVD_WriteDRAM( MEMORY_MAP, 3 );       // for 20 Mbits DRAM
  DVD_WriteDRAM( AC3_OUTPUT_MODE, 7 );  // 6 channels audio

*/
	DRAM_INFO = 0x01;		// one 4Mbits DRAM increment
	UCODE_MEMORY = 0x00;	// microcode is in DRAM
	VIDEO_MODE = 0x03;		// VCLK slave, HSYNC and VSYNC master, CCIR-656 output

	switch( Type )
	{
		case 0:
			MEMORY_MAP = 0x03;		// 	for 20 Mbits DRAM And NTSC
			break;
		case 1:
			MEMORY_MAP = 0x06;		// 	for 20 Mbits DRAM And PAL
			break;
		default:
			DBG_BREAK();
			return FALSE;
	};
 
  // C.6. Perform final GBUS writes.
  gpbRead = pbFinalGBUSStart;

  for ( dwCnt = load_GetDWORDSwapBackward(); dwCnt; dwCnt-- )
  {
    dwAddress = load_GetDWORDSwapBackward();
    ZiVAWriteReg( dwAddress, load_GetDWORDSwapBackward() );
  }


    // Extend watchdog timer threashold.  by H.Yagi  99.02.10
    HOST_OPTIONS  |= 0x0400;

  //ZiVAWriteReg( CPU_cntl, 0x900000 ); // Run CPU.

  // D. Wait for the DVD1 to enter the Idle state
	


	// gets current time.
	CTimeOut TimeOut( COMMAND_TIMEOUT, 1, m_pKernelObj );	
	// status pointer check?
	DWORD State;
	while( TRUE ) 
	{
		State = (DWORD)PROC_STATE;
        DBG_PRINTF(( " Load UCode PROCSTATE = 0x%x\n" , State));
		if( State == ZIVA_STATE_IDLE )
			break;
		// Sleep
		TimeOut.Sleep();

		// check Time out....... 1 sec
		if( TimeOut.CheckTimeOut() == TRUE )
		{
			DBG_PRINTF(( " Load UCode failed:  State = 0x%x\n" , (DWORD)PROC_STATE ));
			DBG_BREAK();
			return FALSE;
		};
	};

    IDLE_DELAY = 0x10;                  // Power saving value
    HOST_OPTIONS |= 0x20;               // for NV interrupt correctly

	DBG_PRINTF( (" LOAD UCODE completed. State = 0x%x\n", (DWORD)PROC_STATE ));
//        _Debug_Printf_Service(" LOAD UCODE completed. State = 0x%x\n", (DWORD)PROC_STATE );

  return TRUE;
};


//***************************************************************************
//	End of 
//***************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cadec.cpp ===
//***************************************************************************
//	Audio decoder process
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "cadec.h"
#include "zrnpch6.h"
#include "cdack.h"

void ADecoder::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;

// shoud be remove when release
//	ASSERT( sizeof(ZRN_AC3_DEC) == 3891 );
//	ASSERT( sizeof(ZRN_AC3_SPD) == 410 );
//	ASSERT( sizeof(ZRN_PCM) == 6965 );

}

void ADecoder::SetParam( ULONG aMode, ULONG aFreq, ULONG aType, BOOL aCgms, Dack *pDak )
{
	AudioMode = aMode;
	AudioFreq = aFreq;
	AudioType = aType;
	AudioCgms = ( 0<=aCgms && aCgms<=3 ) ? aCgms : 3;
	pDack = pDak;
}

// ***************************************************************************
//        T C 6 8 0 0 A F
// ***************************************************************************

void ADecoder::AUDIO_TC6800_INIT_PCM()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0xa0 );

	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x80 );
}

void ADecoder::AUDIO_TC6800_INIT_AC3()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x20 );

	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );
}

void ADecoder::AUDIO_TC6800_INIT_MPEG()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x20 );

	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );
}

void ADecoder::AUDIO_TC6800_DATA_OFF()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x60 );
}

// ***************************************************************************
//        Z R 3 8 5 2 1 
// ***************************************************************************

void ADecoder::AUDIO_ZR385_OUT( UCHAR val )
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x08 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

// necessary?
	pDack->PCIF_CHECK_SERIAL();
}

void ADecoder::AUDIO_ZR385_DOWNLOAD( PUCHAR pData, ULONG size )
{
	ULONG i;

	for( i = 0; i < size; i++ )
		AUDIO_ZR385_OUT( *pData++ );
}

void ADecoder::AUDIO_ZR38521_BOOT_AC3()
{
	AUDIO_ZR385_DOWNLOAD( ZRN_AC3_DEC, sizeof(ZRN_AC3_DEC) );

	if( AudioType == AUDIO_OUT_DIGITAL )
		AUDIO_ZR385_DOWNLOAD( ZRN_AC3_SPD, sizeof(ZRN_AC3_SPD) );
}

void ADecoder::AUDIO_ZR38521_BOOT_MPEG()
{

// not support!

}

void ADecoder::AUDIO_ZR38521_BOOT_PCM()
{
	AUDIO_ZR385_DOWNLOAD( ZRN_PCM, sizeof(ZRN_PCM) );
}

NTSTATUS ADecoder::AUDIO_ZR38521_CFG()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x82 );
	AUDIO_ZR385_OUT( 0x50 );
	AUDIO_ZR385_OUT( 0x40 );
	AUDIO_ZR385_OUT( 0x09 );
	AUDIO_ZR385_OUT( 0x09 );

	if( AudioType == AUDIO_OUT_DIGITAL )
		AUDIO_ZR385_OUT( 0x70 );
	else
		AUDIO_ZR385_OUT( 0x50 );

	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( 0x04 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_PCMX()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x88 );
	AUDIO_ZR385_OUT( 0x81 );
	AUDIO_ZR385_OUT( 0x82 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0xff );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_AC3()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x85 );
	AUDIO_ZR385_OUT( 0x08 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x11 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0xff );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_MPEG1()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x87 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0xff );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_PLAY()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8a );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_MUTE_OFF()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x89 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_MUTE_ON()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8b );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STOP()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8c );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STOPF()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8d );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STCR()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x94 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf6 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_VDSCR_ON( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_VDSCR_OFF( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0x80 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_AVSYNC_OFF( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0xc0 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_AVSYNC_ON( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0x40 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STAT( PULONG pDiff )
{
	UCHAR val;

	if( pDiff == NULL )
		return STATUS_UNSUCCESSFUL;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 ) {
		*pDiff = 0x0908;
		return STATUS_UNSUCCESSFUL;
	}

	*pDiff = 0;

	AUDIO_ZR385_OUT( 0x8e );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

// Check DIFTH
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	*pDiff |= (ULONG)val << 8;

	AUDIO_ZR385_OUT( 0x00 );

// Check DIFTL
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	*pDiff |= val & 0xff;

	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_KCOEF()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf0 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x59 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x59 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

void ADecoder::AUDIO_ZR38521_REPEAT_02()
{

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0xc3 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x13 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xd0 );
	AUDIO_ZR385_OUT( 0x44 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
}

void ADecoder::AUDIO_ZR38521_REPEAT_16()
{

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0xc3 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x13 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xd3 );
	AUDIO_ZR385_OUT( 0xc4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
}

NTSTATUS ADecoder::AUDIO_ZR38521_BFST( PULONG pErrCode )
{
	UCHAR val;

	if( pErrCode == NULL )
		return STATUS_UNSUCCESSFUL;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 ) {
		*pErrCode = 0x0908;
		return STATUS_UNSUCCESSFUL;
	}

	*pErrCode = 0;

	AUDIO_ZR385_OUT( 0x8e );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

// Check IST
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	val &= 0x07;
	*pErrCode |= (ULONG)val << 8;

	AUDIO_ZR385_OUT( 0x00 );

// Check BFST
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	val &= 0x07;
	*pErrCode |= val;

	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

// ***************************************************************************
//        T C 9 4 2 5 F
// ***************************************************************************

void ADecoder::AUDIO_TC9425_INIT_DIGITAL()
{
	UCHAR val;

	val = 0;

	if( AudioType != AUDIO_OUT_ANALOG )
		if( AudioMode == AUDIO_TYPE_AC3 )
			val |= 0x40;
	if( (AudioCgms & 0x02) == 0x00 ) {
		val |= 0x20;	// Copying is permitted without restriction
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  AUDIO Copy OK\r\n" ) );
	}
	else {
		val &= 0xDF;	// Basically no copying is permitted (depend on L-Bit below)
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  AUDIO Copy NG\r\n" ) );
	}

//  COPY, EMPH
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

	if( (AudioCgms & 0x01) == 0x00 ) {
		val = 0x98;		// L-Bit==0; One generation of copies may be made
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  AUDIO 1 Time Copy OK\r\n" ) );
	}
	else {
		val = 0x99;		// L-Bit==1; No copying is permitted
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  AUDIO 1 Time Copy NG\r\n" ) );
	}

// Category Code, LBIT
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

// Channel Num
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	if( AudioFreq == AUDIO_FS_32 )
		val = 0xc0;
	else if( AudioFreq == AUDIO_FS_44 )
		val = 0x00;
	else if( AudioFreq == AUDIO_FS_48 )
		val = 0x40;
	else
		val = 0x40;

// FS1, FS2, CKA1, CKA2
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );
}

void ADecoder::AUDIO_TC9425_INIT_ANALOG()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

// MONO, CHS, EM, EMP
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0xc0 );

//
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	if( AudioType == AUDIO_OUT_DIGITAL )
		val = 0x79;
	else
		val = 0x69;
	if( AudioFreq == AUDIO_FS_96 )
		val |= 0x04;
	else if( AudioFreq == AUDIO_FS_48 )
		val |= 0x04;

// BIT, DOIN, DOSEL, IFSEL, RLS
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0xc0 );

	AUDIO_TC9425_SET_VOLUME( AudioVolume );
}

void ADecoder::AUDIO_TC9425_SET_VOLUME( ULONG vol )
{
	UCHAR ucvol;

	AudioVolume = vol;

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	ucvol = (UCHAR)vol;
	ucvol = INVERSE_BYTE( ucvol );
	ucvol = (UCHAR)( ucvol >> 1 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, ucvol );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x40 );
}

UCHAR ADecoder::INVERSE_BYTE( UCHAR uc )
{
	ULONG i;
	UCHAR retch = 0;

	for( i = 0; i < 8; i++ )
		retch |= ( uc & 0x01 ) << ( 7 - i );

	return retch;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cadec.h ===
//***************************************************************************
//	Audio decoder header
//
//***************************************************************************

#ifndef __CADEC_H__
#define __CADEC_H__

class ADecoder {
private:
	PUCHAR	ioBase;
	ULONG	AudioMode;	// AC3, PCM, ...
	ULONG	AudioFreq;	// audio frequency
	ULONG	AudioType;	// audio type - analog, digital, ...
	ULONG	AudioCgms;	// audio cgms
						//    3:No copying is permitted
						//    2:One generation of copies may be made
						//    1:Condition is not be used
						//    0:Copying is permitted without restriction

	ULONG	AudioVolume;
	Dack	*pDack;

	UCHAR INVERSE_BYTE( UCHAR uc );

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void SetParam( ULONG aMode, ULONG aFreq, ULONG aType, BOOL aCgms, Dack *pDack );

	// ***************************************************************************
	//        T C 6 8 0 0 A F
	// ***************************************************************************

	void AUDIO_TC6800_INIT_PCM();
	void AUDIO_TC6800_INIT_AC3();
	void AUDIO_TC6800_INIT_MPEG();
	void AUDIO_TC6800_DATA_OFF();

	// ***************************************************************************
	//        Z R 3 8 5 2 1 
	// ***************************************************************************

	void AUDIO_ZR385_OUT( UCHAR val );
	void AUDIO_ZR385_DOWNLOAD( PUCHAR pData, ULONG size );
	void AUDIO_ZR38521_BOOT_AC3();
	void AUDIO_ZR38521_BOOT_MPEG();
	void AUDIO_ZR38521_BOOT_PCM();
	NTSTATUS AUDIO_ZR38521_CFG();
	NTSTATUS AUDIO_ZR38521_PCMX();
	NTSTATUS AUDIO_ZR38521_AC3();
	NTSTATUS AUDIO_ZR38521_MPEG1();
	NTSTATUS AUDIO_ZR38521_PLAY();
	NTSTATUS AUDIO_ZR38521_MUTE_OFF();
	NTSTATUS AUDIO_ZR38521_MUTE_ON();
	NTSTATUS AUDIO_ZR38521_STOP();
	NTSTATUS AUDIO_ZR38521_STOPF();
	NTSTATUS AUDIO_ZR38521_STCR();
	NTSTATUS AUDIO_ZR38521_VDSCR_ON( ULONG stc );
	NTSTATUS AUDIO_ZR38521_VDSCR_OFF( ULONG stc );
	NTSTATUS AUDIO_ZR38521_AVSYNC_OFF( ULONG stc );
	NTSTATUS AUDIO_ZR38521_AVSYNC_ON( ULONG stc );
	NTSTATUS AUDIO_ZR38521_STAT( PULONG pDiff );
	NTSTATUS AUDIO_ZR38521_KCOEF();
	void AUDIO_ZR38521_REPEAT_02();
	void AUDIO_ZR38521_REPEAT_16();
	NTSTATUS AUDIO_ZR38521_BFST( PULONG pErrCode );

	// ***************************************************************************
	//        T C 9 4 2 5 F
	// ***************************************************************************

	void AUDIO_TC9425_INIT_DIGITAL();
	void AUDIO_TC9425_INIT_ANALOG();
	void AUDIO_TC9425_SET_VOLUME( ULONG vol );

};

#endif	// __CADEC_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\ccap.cpp ===
//***************************************************************************
//	Closed Caption process
//
//***************************************************************************

#include "common.h"

#include "que.h"

#include "regs.h"

void USCC_on( PHW_DEVICE_EXTENSION pHwDevExt );
void USCC_off( PHW_DEVICE_EXTENSION pHwDevExt );
void USCC_get( PHW_DEVICE_EXTENSION pHwDevExt );
void USCC_put( PHW_DEVICE_EXTENSION pHwDevExt );
static BOOL USCC_Wait( PHW_DEVICE_EXTENSION pHwDevExt );
//--- for Debug
//static void USCC_Test( void );
//
//--- End.
void USCC_discont( PHW_DEVICE_EXTENSION pHwDevExt );

extern ULONGLONG ConvertPTStoStrm(ULONG pts);

#define USCC_BuffSize 0x200
static UCHAR USCCF[USCC_BuffSize];
static UCHAR USCC1[USCC_BuffSize];
static UCHAR USCC2[USCC_BuffSize];
WORD wUsccSize = 0;
WORD wUsccWptr = 0;
WORD wUsccRptr = 0;

void USCC_on( PHW_DEVICE_EXTENSION pHwDevExt )
{
	// User Data Interrupt Enable
	pHwDevExt->VDec.VIDEO_UDSC_INT_ON();
	// Set Read Mode (from GOP Layer, channel 0)
	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA1, 0x08 );
	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_CMDR1, V_SET_UDATA );
	pHwDevExt->VPro.VPRO_CC_ON();
	pHwDevExt->CPgd.CPGD_CC_ON();
	wUsccSize = 0;
	wUsccRptr = 0;
	wUsccWptr = 0;

//--- for Debug
//	USCC_Test();
//--- End.

}

void USCC_off( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->VDec.VIDEO_UDSC_INT_OFF();
	pHwDevExt->VPro.VPRO_CC_OFF();
	pHwDevExt->CPgd.CPGD_CC_OFF();
}

void USCC_get( PHW_DEVICE_EXTENSION pHwDevExt )
{
	static UCHAR ccbuff[USCC_BuffSize];
	LONG cp;
	UCHAR channels;
	UCHAR cnumber;
	UCHAR fieldFlg;
	UCHAR fieldNum;
	UCHAR field;
	UCHAR marker;
	UCHAR fswitch;
	UCHAR cc1, cc2;
	UCHAR uscc_or, uscc_and;
	LONG i;

	cp = 0;

	uscc_or = 0x00;
	uscc_and = 0xFF;

	// Sometimes bad Data Come, chip bug ?
	do {
		// Check ready to read next CC data
		if( USCC_Wait( pHwDevExt )==FALSE ) {
		}
		channels = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UDAT );
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  CC channels = 0x%x\r\n", channels ) );
	} while( channels==0x43 );

	ccbuff[cp++] = 0x43;				// 0x43 ?
	ccbuff[cp++] = 0x43;				// 0x43 ?
	ccbuff[cp++] = channels;

	// Check ready to read next CC data
	if( USCC_Wait( pHwDevExt )==FALSE ) {
	}
	cnumber = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UDAT );
//	DebugPrint(( DebugLevelTrace, "TOSDVD:  CC cnumber = 0x%x\r\n", cnumber ) );

	ccbuff[cp++] = (UCHAR)(cnumber | 0xF8);

	// Check ready to read next CC data
	if( USCC_Wait( pHwDevExt )==FALSE ) {
	}
	fieldFlg = fieldNum = field = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UDAT );
//	DebugPrint(( DebugLevelTrace, "TOSDVD:  CC field = 0x%x\r\n", field ) );

	ccbuff[cp++] = field;

	fieldFlg &= 0x80;
	fieldNum &= 0x3F;

	for( i=0; i<fieldNum; i++ ) {

		// Check ready to read next CC data
		if( USCC_Wait( pHwDevExt )==FALSE ) {
		}
		marker = fswitch = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UDAT );
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  CC mk & sw = 0x%x", marker ) );

		ccbuff[cp++] = marker;
		
		marker &= 0xFE;
		if( marker != 0xFE ) {
//			DebugPrint(( DebugLevelTrace, "TOSDVD:  CC marker is Bad = 0x%x\r\n", marker ) );
		}
		fswitch &= 0x01;

		// Check ready to read next CC data
		if( USCC_Wait( pHwDevExt )==FALSE ) {
		}
		cc1 = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UDAT );

		ccbuff[cp++] = cc1;

		// Check ready to read next CC data
		if( USCC_Wait( pHwDevExt )==FALSE ) {
		}
		cc2 = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UDAT );

		ccbuff[cp++] = cc2;

		if( fswitch==0x01 ) {
			USCCF[wUsccWptr] = fieldFlg;
			USCC1[wUsccWptr] = cc1;
			USCC2[wUsccWptr] = cc2;
			wUsccWptr++;
			if( wUsccWptr>=USCC_BuffSize )
				wUsccWptr = 0;
			wUsccSize++;
		}

//		DebugPrint(( DebugLevelTrace, " 0x%02x 0x%02x", cc1, cc2 ) );
		if( fswitch==0x01 ) {
			uscc_or |= (cc1 | cc2);
			uscc_and &= (cc1 & cc2);
		}
//		DebugPrint(( DebugLevelTrace, " \r\n" ) );
	}
//	DebugPrint(( DebugLevelTrace, " \r\n" ) );

	do {
		if( (READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_STT1 ) & 0x08)==0x00 )
			break;
		// Check ready to read next CC data
		if( USCC_Wait( pHwDevExt )==FALSE ) {
		}
		READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UDAT );
	} while( 1 );

	//------------------------------------------------

	PHW_STREAM_REQUEST_BLOCK pSrb;
	PUCHAR pDest;

   if (pHwDevExt->bStopCC)
   {
      return;
   }

	pSrb = pHwDevExt->CCQue.get();

//	DebugPrint(( DebugLevelTrace, "TOSDVD:  get queue CC pSrb = 0x%x\r\n", pSrb ));

	cp = 0;
	if( pSrb != NULL ) {

		if (pSrb->CommandData.DataBufferArray->FrameExtent < sizeof(KSGOP_USERDATA))
		{
			TRAP

			pSrb->Status = STATUS_INVALID_BUFFER_SIZE;

			pSrb->ActualBytesTransferred = 0;

			StreamClassStreamNotification(StreamRequestComplete,
					pSrb->StreamObject,
					pSrb);

			return;
		}
		pDest = (PUCHAR)(pSrb->CommandData.DataBufferArray->Data);

		*(PULONG)pDest = 0xB2010000;
		pDest += 4;

		*pDest++ = ccbuff[cp++];
		*pDest++ = ccbuff[cp++];
		*pDest++ = ccbuff[cp++];
		*pDest++ = ccbuff[cp++];

		field = *pDest++= ccbuff[cp++];
		DebugPrint(( DebugLevelTrace, "TOSDVD:CC field %d\r\n", field ));
		field &= 0x3F;

		if (pSrb->CommandData.DataBufferArray->FrameExtent <
					(field -1) * 3 + sizeof (KSGOP_USERDATA))
		{
			TRAP

			pSrb->Status = STATUS_INVALID_BUFFER_SIZE;

			pSrb->ActualBytesTransferred = 0;

			StreamClassStreamNotification(StreamRequestComplete,
					pSrb->StreamObject,
					pSrb);

			return;
		}

		pSrb->CommandData.DataBufferArray->DataUsed =
			pSrb->ActualBytesTransferred =
				(field -1 ) * 3 + sizeof (KSGOP_USERDATA);

		//
		// copy the bits
		//

		for( ;field; field-- ) {

			*pDest++ = ccbuff[cp++];
			*pDest++ = ccbuff[cp++];
			*pDest++ = ccbuff[cp++];

		}

		pSrb->Status = STATUS_SUCCESS;

		PKSSTREAM_HEADER pPacket;

		pPacket = pSrb->CommandData.DataBufferArray;

		pPacket->OptionsFlags = KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
					KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
		pSrb->NumberOfBuffers = 1;

		DWORD dwSTC = pHwDevExt->VDec.VIDEO_GET_STCA();
		pPacket->PresentationTime.Time = ConvertPTStoStrm( dwSTC );
		pPacket->Duration = 1000;

		DebugPrint(( DebugLevelTrace, "TOSDVD:CC Notify 0x%x(0x%x(90kHz))\r\n", (DWORD)(pPacket->PresentationTime.Time), dwSTC ));

		StreamClassStreamNotification(StreamRequestComplete,
				pSrb->StreamObject,
				pSrb);

		return;
	}
	else {
//		DebugPrint(( DebugLevelTrace, "TOSDVD:CCQue.get() == NULL\r\n" ));
//		TRAP
	}

	//------------------------------------------------

}

void USCC_put( PHW_DEVICE_EXTENSION pHwDevExt )
{
	UCHAR var;
	static LONG debCounter = 0;

	// Using later VPRO, possibly you have to add codes ( ex. subp command register )

	if( wUsccSize==0 ) {
//--- for Debug
//		USCC_Test();
//--- End.
		return;
	}

//	debCounter++;
//	if( debCounter==100 ) {
//		debCounter = 0;
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  USCC_put\r\n" ) );
//	}

	// Top field ; output to register CC1
	if( USCCF[wUsccRptr] == 0x80 ) {
		var = USCC1[wUsccRptr];
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  TOP USCC1 = %x\r\n", var ) );
		WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + SUBP_CC1, var );
		var = USCC2[wUsccRptr];
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  TOP USCC2 = %x\r\n", var ) );
		WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + SUBP_CC1, var );
	}
	// Bottom field ; output to register CC2
	else {
		var = USCC1[wUsccRptr];
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  BTM USCC1 = %x\r\n", var ) );
		WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + SUBP_CC2, var );
		var = USCC2[wUsccRptr];
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  BTM USCC2 = %x\r\n", var ) );
		WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + SUBP_CC2, var );

	wUsccRptr++;
	if( wUsccRptr>=USCC_BuffSize )
		wUsccRptr = 0;

	wUsccSize--;

	}

#if 0
	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + SUBP_CC1, 0x2C );
	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + SUBP_CC1, 0x94 );
#endif
	
}

static BOOL USCC_Wait( PHW_DEVICE_EXTENSION pHwDevExt )
{
	UCHAR val;
	LONG i;

	for( i=0; i<10; i++ ) {
		val = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_STT1 );
		if( val & 0x08 )
			return( TRUE );
	}
	return( FALSE );
}

//--- for Debug
//static void USCC_Test( void )
//{
//	wUsccSize = 0;
//	wUsccWptr = 0;
//	wUsccRptr = 0;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x20;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x20;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x54;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x54;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x20;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x20;
//	wUsccWptr++;
//	wUsccSize++;
//
//	wUsccWptr++;
//
//	USCC1[wUsccWptr] = 0x5B;
//	USCC2[wUsccWptr] = 0xD0;
//	wUsccWptr++;
//	wUsccSize++;
//
//	wUsccWptr++;
//
//	USCC1[wUsccWptr] = 0x4F;
//	USCC2[wUsccWptr] = 0x4C;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x49;
//	USCC2[wUsccWptr] = 0x43;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x45;
//	USCC2[wUsccWptr] = 0x20;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x4F;
//	USCC2[wUsccWptr] = 0x46;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x46;
//	USCC2[wUsccWptr] = 0x49;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x43;
//	USCC2[wUsccWptr] = 0x45;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x52;
//	USCC2[wUsccWptr] = 0x5D;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x97;
//	USCC2[wUsccWptr] = 0x76;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x76;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x76;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0xC2;
//	USCC2[wUsccWptr] = 0xC1;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x43;
//	USCC2[wUsccWptr] = 0xCB;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0xD0;
//	USCC2[wUsccWptr] = 0xA1;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x2C;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x2C;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x2F;
//	wUsccWptr++;
//	wUsccSize++;
//
//	USCC1[wUsccWptr] = 0x94;
//	USCC2[wUsccWptr] = 0x2F;
//	wUsccWptr++;
//	wUsccSize++;
//
//}
//--- End.

void USCC_discont( PHW_DEVICE_EXTENSION pHwDevExt )
{
	PHW_STREAM_REQUEST_BLOCK pSrb;
	PKSSTREAM_HEADER pPacket;

	DebugPrint(( DebugLevelTrace, "TOSDVD:USCC_discont()\r\n" ));

	if( pHwDevExt->pstroCC && ((PSTREAMEX)(pHwDevExt->pstroCC->HwStreamExtension))->state == KSSTATE_RUN ) {
		pSrb = pHwDevExt->CCQue.get();
		if( pSrb ) {
			//
			// we have a request, send a discontinuity
			//

//			DebugPrint(( DebugLevelTrace, "TOSDVD:  get queue CC pSrb = 0x%x\r\n", pSrb ));

			pSrb->Status = STATUS_SUCCESS;
			pPacket = pSrb->CommandData.DataBufferArray;

			pPacket->OptionsFlags = KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY |
				KSSTREAM_HEADER_OPTIONSF_TIMEVALID | KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
			pPacket->DataUsed = 0;
			pSrb->NumberOfBuffers = 0;

// BUG!
// it must set PTS of packet ?
			pPacket->PresentationTime.Time = ConvertPTStoStrm( pHwDevExt->VDec.VIDEO_GET_STCA() );
			pPacket->Duration = 1000;

			DebugPrint(( DebugLevelTrace, "TOSDVD:  CC Notify %d\r\n", (DWORD)pPacket->PresentationTime.Time ));

			StreamClassStreamNotification(StreamRequestComplete,
					pSrb->StreamObject,
					pSrb);
		}
		else
		{
			TRAP;
		}
	}
	else {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  CC stream not RUN\r\n" ));

	}
}

// CCQueue

void CCQueue::init( void )
{
	count = 0;
	top = bottom = NULL;
}

void CCQueue::put( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->NextSRB = NULL;
	if ( top == NULL ) {
		top = bottom = pSrb;
		count++;
		return;
	}

	bottom->NextSRB = pSrb;
	bottom = pSrb;
	count++;

	return;
}

PHW_STREAM_REQUEST_BLOCK CCQueue::get( void )
{
	PHW_STREAM_REQUEST_BLOCK srb;

	if ( top == NULL )
		return NULL;

	srb = top;

	top = top->NextSRB;

	count--;
	if ( count == 0 )
		top = bottom = NULL;

	return srb;
}

void CCQueue::remove( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	if ( top == NULL )
		return;

	if( top == pSrb ) {
		top = top->NextSRB;
		count--;
		if ( count == 0 )
			top = bottom = NULL;

		DebugPrint(( DebugLevelTrace, "TOSDVD:CCQueue::remove srb = 0x%x\r\n", pSrb ));

		return;
	}

	PHW_STREAM_REQUEST_BLOCK srbPrev;
	PHW_STREAM_REQUEST_BLOCK srb;

	srbPrev = top;
	srb = srbPrev->NextSRB;

	while ( srb != NULL ) {
		if( srb == pSrb ) {
			srbPrev->NextSRB = srb->NextSRB;
			if( srbPrev->NextSRB == bottom )
				bottom = srbPrev;
			count--;

			DebugPrint(( DebugLevelTrace, "TOSDVD:CCQueue::remove srb = 0x%x\r\n", pSrb ));

			break;
		}
		srbPrev = srb;
		srb = srbPrev->NextSRB;
	}
}

BOOL CCQueue::isEmpty( void )
{
	if( top == NULL )
		return TRUE;
	else
		return FALSE;
}

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\ccpgd.h ===
//***************************************************************************
//	Analog Copy protection Processor header
//
//***************************************************************************

#ifndef __CCPGD_H__
#define __CCPGD_H__

//--- 97.09.15 K.Chujo
enum {
	NO_ACG,
	TC6802,
	TC6814,
	TC6818
};
//--- End.

class CGuard {
private:
	PUCHAR	ioBase;
	UCHAR	VproRESET_REG;
	UCHAR	VproVMODE_REG;
	UCHAR	VproAVM_REG;
//--- 97.09.15 K.Chujo
	ULONG	CpgdVsyncCount;
	ULONG	ACGchip;
	BOOL	CGMSnCPGDvalid;
	ULONG	AspectFlag;		// Aspect Ratio
							//    0: 4:3
							//    1: 16:9
	ULONG	LetterFlag;		// Letter Box
							//    0: Letter Box OFF
							//    1: Letter Box ON
	ULONG	CgmsFlag;		// NTSC Anolog CGMS
							//    0: Copying is permitted without restriction
							//    1: Condition is not be used
							//    2: One generation of copies may be made
							//    3: No copying is permitted
	ULONG	CpgdFlag;		// APS
							//    0: AGC pulse OFF, Burst inv OFF
							//    1: AGC pulse ON , Burst inv OFF
							//    2: AGC pulse ON , Burst inv ON (2line)
							//    3: AGC pulse ON , Burst inv ON (4line)

	void CPGD_SET_CGMSparameter( void );
	void CPGD_SET_CPGDparameter( void );
	void CPGD_SET_BURST( PWORD data, ULONG size );
	void CPGD_SET_AGC( WORD Cval, WORD Yval );
	ULONG CPGD_CALC_CRC( ULONG val );
	void CPGD_SET_CGMS_A_0( ULONG aspect, ULONG letter );
	void CPGD_SET_CGMS_A_1( ULONG aspect, ULONG letter );
	void CPGD_SET_CGMS_A_2( ULONG aspect, ULONG letter );
	void CPGD_SET_CGMS_A_3( ULONG aspect, ULONG letter );
	void CPGD_SET_CLR_STRIPE_OFF( void );
	void CPGD_SET_CLR_STRIPE_2( void );
	void CPGD_SET_CLR_STRIPE_4( void );
	void CPGD_SET_CPGD_0( void );
	void CPGD_SET_CPGD_1( void );
	void CPGD_SET_CPGD_2( void );
	void CPGD_SET_CPGD_3( void );
//	void CPGD_BURST_Y_OFF( void );
//--- End.

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void CPGD_RESET_FUNC();
	void CPGD_VIDEO_MUTE_ON();
	void CPGD_VIDEO_MUTE_OFF();
	void CPGD_INIT_NTSC();
	void CPGD_INIT_PAL();
	void CPGD_CC_ON();
	void CPGD_CC_OFF();
	void CPGD_SUBP_PALETTE( PUCHAR pPalData );
	void CPGD_OSD_PALETTE( PUCHAR pPalData );
//--- 97.09.15 K.Chujo
	BOOL CPGD_SET_AGC_CHIP( ULONG rev );
	void CPGD_SET_ASPECT( ULONG aspect );
	void CPGD_SET_LETTER( ULONG letter );
	void CPGD_SET_CGMS( ULONG cgms );
	void CPGD_SET_CPGD( ULONG cpgd );
	void CPGD_SET_CGMSnCPGD( ULONG aspect, ULONG letter, ULONG cgms, ULONG cpgd);
	void CPGD_UPDATE_AGC( void );
//--- End.

};

#endif  // __CCPGD_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\ccpgd.cpp ===
//***************************************************************************
//	Analog Copy protection Processor process
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "ccpgd.h"

//--- 97.09.15 K.Chujo

//=================================================//
//  Burst Inverse line data( Color stripe off )    //
//=================================================//
ULONG CPGD_BSTLNOFF_SIZE = 0x1A;

WORD CPGD_BSTLNOFF_DATA[] = {
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000
};

//=================================================//
//  Burst Inverse line data( Color stripe 2 line)  //
//=================================================//
ULONG CPGD_BSTLN2_SIZE = 0x1A;

WORD CPGD_BSTLN2_DATA[] = {
	0x001D, 0x002E, 0x003F, 0x0050,
    0x0061, 0x0072, 0x0083, 0x0094,
    0x00A5, 0x00B6, 0x00C7, 0x00D8,
    0x00E9, 0x012C, 0x013D, 0x014E,
    0x015F, 0x0170, 0x0181, 0x0192,
    0x01A3, 0x01B4, 0x01C5, 0x01D6,
    0x01E7, 0x01F8
};

//=================================================//
//  Burst Inverse line data( Color stripe 4 line)  //
//=================================================//
ULONG CPGD_BSTLN4_SIZE = 0x1A;

WORD CPGD_BSTLN4_DATA[] = {
	0x0017, 0x002C, 0x0041, 0x0056,
    0x006B, 0x0080, 0x0095, 0x00AA,
    0x00BF, 0x00D4, 0x00E9, 0x0000,
    0x0000, 0x0128, 0x013D, 0x0152,
    0x0167, 0x017C, 0x0191, 0x01A6,
    0x01BB, 0x01D0, 0x01E5, 0x01FA,
    0x0000, 0x0000
};

//=================================================//
//  AGC data (for Y of S input)                    //
//=================================================//
WORD CPGD_AGC_Y_TBL[] = {
	0x03E7, 0x03E2, 0x03DE, 0x03D9, 0x03D5, 0x03D0, 0x03CC, 0x03C7,
	0x03C3, 0x03BE, 0x03BA, 0x03B5, 0x03B1, 0x03AC, 0x03A8, 0x03A3,
	0x039E, 0x039A, 0x0395, 0x0391, 0x038C, 0x0388, 0x0383, 0x037F,
	0x037A, 0x0376, 0x0371, 0x036D, 0x0368, 0x0363, 0x035F, 0x035A,
	0x0356, 0x0351, 0x034D, 0x0348, 0x0344, 0x033F, 0x033B, 0x0336,
	0x0332, 0x032D, 0x0329, 0x0324, 0x031F, 0x031B, 0x0316, 0x0312,
	0x030D, 0x0309, 0x0304, 0x0300, 0x02FB, 0x02F7, 0x02F2, 0x02EE,
	0x02E9, 0x02E4, 0x02E0, 0x02DB, 0x02D7, 0x02D2, 0x02CE, 0x02C9,
	0x02C5, 0x02C0, 0x02BC, 0x02B7, 0x02B3, 0x02AE, 0x02AA, 0x02A5,
	0x02A0, 0x029C, 0x0297, 0x0293, 0x028E, 0x028A, 0x0285, 0x0281,
	0x027C, 0x0278, 0x0273, 0x026F, 0x026A, 0x0265, 0x0261, 0x025C,
	0x0258, 0x0253, 0x024F, 0x024A, 0x0246, 0x0241, 0x023D, 0x0238,
	0x0234, 0x022F, 0x022B, 0x0226, 0x0221, 0x021D, 0x0218, 0x0214,
	0x020F, 0x020B, 0x0206, 0x0202, 0x01FD, 0x01F9, 0x01F4, 0x01F0,
	0x01EB, 0x01E6, 0x01E2, 0x01DD, 0x01D9, 0x01D4, 0x01D0, 0x01CB,
	0x01C7, 0x01C2, 0x01BE, 0x01B9, 0x01B5, 0x01B0, 0x01AC, 0x01A7,
	0x01A2, 0x019E, 0x0199, 0x0195, 0x0190, 0x018C, 0x0187, 0x0183,
	0x017E, 0x017A, 0x0175, 0x0171, 0x016C, 0x0167, 0x0163, 0x015E,
	0x015A, 0x0155, 0x0151, 0x014C, 0x0148, 0x0143, 0x013F, 0x013A,
	0x0136, 0x0131, 0x012D, 0x0128
};

//=================================================//
//  AGC data (for Composit input)                  //
//=================================================//
WORD CPGD_AGC_C_TBL[] = {
	0x0382, 0x037E, 0x037A, 0x0375, 0x0371, 0x036D, 0x0369, 0x0364,
	0x0360, 0x035C, 0x0358, 0x0353, 0x034F, 0x034B, 0x0347, 0x0342,
	0x033E, 0x033A, 0x0336, 0x0331, 0x032D, 0x0329, 0x0325, 0x0320,
	0x031C, 0x0318, 0x0314, 0x030F, 0x030B, 0x0307, 0x0303, 0x02FE,
	0x02FA, 0x02F6, 0x02F2, 0x02ED, 0x02E9, 0x02E5, 0x02E1, 0x02DC,
	0x02D8, 0x02D4, 0x02D0, 0x02CB, 0x02C7, 0x02C3, 0x02BF, 0x02BA,
	0x02B6, 0x02B2, 0x02AE, 0x02A9, 0x02A5, 0x02A1, 0x029D, 0x0299,
	0x0294, 0x0290, 0x028C, 0x0288, 0x0283, 0x027F, 0x027B, 0x0277,
	0x0272, 0x026E, 0x026A, 0x0266, 0x0261, 0x025D, 0x0259, 0x0255,
	0x0250, 0x024C, 0x0248, 0x0244, 0x023F, 0x023B, 0x0237, 0x0233,
	0x022E, 0x022A, 0x0226, 0x0222, 0x021D, 0x0219, 0x0215, 0x0211,
	0x020C, 0x0208, 0x0204, 0x0200, 0x01FB, 0x01F7, 0x01F3, 0x01EF,
	0x01EA, 0x01E6, 0x01E2, 0x01DE, 0x01D9, 0x01D5, 0x01D1, 0x01CD,
	0x01C9, 0x01C4, 0x01C0, 0x01BC, 0x01B8, 0x01B3, 0x01AF, 0x01AB,
	0x01A7, 0x01A2, 0x019E, 0x019A, 0x0196, 0x0191, 0x018D, 0x0189,
	0x0185, 0x0180, 0x017C, 0x0178, 0x0174, 0x016F, 0x016B, 0x0167,
	0x0163, 0x015E, 0x015A, 0x0156, 0x0152, 0x014E, 0x0149, 0x0145,
	0x0141, 0x013C, 0x0138, 0x0134, 0x0130, 0x012B, 0x0127, 0x0123,
	0x011F, 0x011A, 0x0116, 0x0112, 0x010E, 0x0109, 0x0105, 0x0101,
	0x00FD, 0x00F8, 0x00F4, 0x00F0
};

//--- End.

void CGuard::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
//--- 97.09.15 K.Chujo
	ACGchip = NO_ACG;
//--- End.
}

void CGuard::CPGD_RESET_FUNC()
{
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, 0 );
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, 0x80 );

	VproRESET_REG = 0x80;
	VproVMODE_REG = 0;	// ? ? ?
	VproAVM_REG = 0;	// ? ? ?
//--- 97.09.15 K.Chujo
	CpgdVsyncCount = 0;
	CGMSnCPGDvalid = FALSE;
	AspectFlag = 0x0000;
	LetterFlag = 0x0000; 
	CgmsFlag = 0x0000;
	CpgdFlag = 0x0000;
//--- End.
}

void CGuard::CPGD_VIDEO_MUTE_ON()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, VproRESET_REG );
}

void CGuard::CPGD_VIDEO_MUTE_OFF()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, VproRESET_REG );
}

void CGuard::CPGD_INIT_NTSC()
{
	VproVMODE_REG &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + CPGD_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + CPGD_DVEN, 0xc0 );
}

void CGuard::CPGD_INIT_PAL()
{
	VproVMODE_REG |= 0x80;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + CPGD_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + CPGD_DVEN, 0x80 );
}

void CGuard::CPGD_CC_ON()
{
//	VproVMODE_REG &= 0xbf;
	VproVMODE_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );
}

void CGuard::CPGD_CC_OFF()
{
//	VproVMODE_REG |= 0x40;
	VproVMODE_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );
}

void CGuard::CPGD_SUBP_PALETTE( PUCHAR pPalData )
{
	ULONG i;

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x80 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + CPGD_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x40 );
	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0 );
}

void CGuard::CPGD_OSD_PALETTE( PUCHAR pPalData )
{
	int i;

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x20 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + CPGD_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x10 );
	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0 );
}

BOOL CGuard::CPGD_SET_AGC_CHIP( ULONG rev )
{
	switch( rev ) {

		case 0x02:
		case 0x03:
			ACGchip = TC6802;
			DebugPrint( ( DebugLevelTrace, "TOSDVD:  ACGchip: TC6802\r\n" ) );
			break;

		case 0x04:
			ACGchip = TC6814;
			DebugPrint( ( DebugLevelTrace, "TOSDVD:  ACGchip: TC6814\r\n" ) );
			break;

		case 0x05:
			ACGchip = TC6818;
			DebugPrint( ( DebugLevelTrace, "TOSDVD:  ACGchip: TC6818\r\n" ) );
			break;

		default :
			ACGchip = TC6818;
			DebugPrint( ( DebugLevelTrace, "TOSDVD:  ACGchip: UNKNOWN, use parameter for TC6818\r\n" ) );
			break;

	}

	if( ACGchip == NO_ACG )
		return( FALSE );
	else
		return( TRUE );
}

void CGuard::CPGD_SET_ASPECT( ULONG aspect )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( aspect, LetterFlag, CgmsFlag, CpgdFlag );
	}
}

void CGuard::CPGD_SET_LETTER( ULONG letter )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( AspectFlag, letter, CgmsFlag, CpgdFlag );
	}
}

void CGuard::CPGD_SET_CGMS( ULONG cgms )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( AspectFlag, LetterFlag, cgms, CpgdFlag );
	}
}

void CGuard::CPGD_SET_CPGD( ULONG cpgd )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( AspectFlag, LetterFlag, CgmsFlag, cpgd );
	}
}

void CGuard::CPGD_SET_CGMSnCPGD( ULONG aspect, ULONG letter, ULONG cgms, ULONG cpgd )
{
	if( ACGchip == NO_ACG ) {
		return;
	}
	else {
		// Clear unnecessary bits
		aspect &= 0x01;
		letter &= 0x01;
		cgms &= 0x03;
		cpgd &= 0x03;

		// When CpgdFlag is changed or all flags are not initialized,
		if( CGMSnCPGDvalid==FALSE || CpgdFlag!=cpgd) {
			DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSnCPGD(1)\r\n" ) );
			AspectFlag = aspect;
			LetterFlag = letter;
			CgmsFlag = cgms;
			CpgdFlag = cpgd;
			CPGD_SET_CGMSparameter();
			CPGD_SET_CPGDparameter();
			CGMSnCPGDvalid = TRUE;
		}

		// When one of Flags except CpgdFlag is changed, 
		else if ( AspectFlag!=aspect || LetterFlag!=letter || CgmsFlag!=cgms ) {
			DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSnCPGD(2)\r\n" ) );
			AspectFlag = aspect;
			LetterFlag = letter;
			CgmsFlag = cgms;
			CPGD_SET_CGMSparameter();
		}

		// When no flags are changed,
		else
			DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSnCPGD(3)\r\n" ) );

	}
}

void CGuard::CPGD_UPDATE_AGC( void )
{
	WORD Cval, Yval;

	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( CpgdVsyncCount == 0 ) {
			Cval = CPGD_AGC_C_TBL[0];
			Yval = CPGD_AGC_Y_TBL[0];
			CPGD_SET_AGC( Cval, Yval );
//			DebugPrint( ( DebugLevelTrace, "TOSDVD:  AGC_C %x, AGC_Y %x\r\n", Cval, Yval ) );
		}
		else if( 720<=CpgdVsyncCount && CpgdVsyncCount<=875 ) {
			Cval = CPGD_AGC_C_TBL[CpgdVsyncCount- 720];
			Yval = CPGD_AGC_Y_TBL[CpgdVsyncCount- 720];
			CPGD_SET_AGC( Cval, Yval );
//			DebugPrint( ( DebugLevelTrace, "TOSDVD:  AGC_C %x, AGC_Y %x\r\n", Cval, Yval ) );
		}
		else if( 1044<=CpgdVsyncCount && CpgdVsyncCount<=1199 ) {
			Cval = CPGD_AGC_C_TBL[1199-CpgdVsyncCount];
			Yval = CPGD_AGC_Y_TBL[1199-CpgdVsyncCount];
			CPGD_SET_AGC( Cval, Yval );
//			DebugPrint( ( DebugLevelTrace, "TOSDVD:  AGC_C %x, AGC_Y %x\r\n", Cval, Yval ) );
		}
		CpgdVsyncCount++;
		if( CpgdVsyncCount>=1200 )
			CpgdVsyncCount = 0;
	}
}

void CGuard::CPGD_SET_CGMSparameter( void )
{
	ULONG tmp;
	ULONG crc;

	tmp = ( 0x8000 | (AspectFlag<<13) | (LetterFlag<<12) | (CgmsFlag<<6) | (CpgdFlag<<4) );
	crc = CPGD_CALC_CRC( tmp ) << 2;
	WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(tmp >> 8) );
	DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAL%x\r\n", (UCHAR)(tmp>>8) ) );
	WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(tmp & 0xFF) );
	DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAM%x\r\n", (UCHAR)(tmp&0xFF) ) );
	WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
	DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAH%x\r\n", (crc & 0xFF) ) );
}

void CGuard::CPGD_SET_CPGDparameter( void )
{
	switch( CpgdFlag ) {
		case 0x00 :
			CPGD_SET_CLR_STRIPE_OFF();
			CPGD_SET_CPGD_0();
			break;
		case 0x01 :
			CPGD_SET_CLR_STRIPE_OFF();
			CPGD_SET_CPGD_1();
			break;
		case 0x02 :
			CPGD_SET_CLR_STRIPE_2();
			CPGD_SET_CPGD_2();
			break;
		case 0x03 :
			CPGD_SET_CLR_STRIPE_4();
			CPGD_SET_CPGD_3();
			break;
		default   :
			TRAP;
			break;
	}
}

void CGuard::CPGD_SET_CGMS_A_0( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;

	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xC0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAL%x\r\n", (UCHAR)(temp>>8) ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAM%x\r\n", (UCHAR)(temp&0xFF) ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAH%x\r\n", (crc & 0xFF) ) );
	}
}

void CGuard::CPGD_SET_CGMS_A_1( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;

	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xD0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAL%x\r\n", (UCHAR)(temp>>8) ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAM%x\r\n", (UCHAR)(temp&0xFF) ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAH%x\r\n", (crc & 0xFF) ) );
	}
}

void CGuard::CPGD_SET_CGMS_A_2( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;
	
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xE0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA L = %x\r\n", temp>>8 ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA M = %x\r\n", temp & 0xFF ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA H = %x\r\n", crc & 0xFF ) );
	}
}

void CGuard::CPGD_SET_CGMS_A_3( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;
	
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xF0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA L = %x\r\n", temp>>8 ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA M = %x\r\n", temp & 0xFF ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA H = %x\r\n", crc & 0xFF ) );
	}
}

void CGuard::CPGD_SET_CLR_STRIPE_OFF( void )
{
	// notes:	*1 are unnecessary originally (if TC6802 is on board).
	//			But I have to use TC6802 parameters when TC6814/TC6818 is on board for beta 3
	//			because I can't get RevID ( I can't know which ACG chip is ).
	//			These codes make safe when TC6814/TC6818 is, of cource TC6802 is, NO PROBLEM.

	if( ACGchip==NO_ACG ) {
		return;
	}
	else if( ACGchip==TC6802 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );		// *1
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );		// *1
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_OFF for TC6802\r\n" ) );
	}
	else if( ACGchip==TC6814 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		CPGD_SET_BURST( CPGD_BSTLNOFF_DATA, CPGD_BSTLNOFF_SIZE );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_OFF for TC6814\r\n" ) );
	}
	else if( ACGchip==TC6818 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0x04 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x80 );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_OFF for TC6818\r\n" ) );
	}
}

void CGuard::CPGD_SET_CLR_STRIPE_2( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else if( ACGchip==TC6802 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAA );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_2 for TC6802\r\n" ) );
	}
	else if( ACGchip==TC6814 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_2 for TC6814\r\n" ) );
	}
	else if( ACGchip==TC6818 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0x04 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x80 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_2 for TC6818\r\n" ) );
	}
	CPGD_SET_BURST( CPGD_BSTLN2_DATA, CPGD_BSTLN2_SIZE );
}

void CGuard::CPGD_SET_CLR_STRIPE_4( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else if( ACGchip==TC6802 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAA );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_4 for TC6802\r\n" ) );
	}
	else if( ACGchip==TC6814 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_4 for TC6814\r\n" ) );
	}
	else if( ACGchip==TC6818 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0x04 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x80 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_4 for TC6818\r\n" ) );
	}
	CPGD_SET_BURST( CPGD_BSTLN4_DATA, CPGD_BSTLN4_SIZE );
}

void CGuard::CPGD_SET_CPGD_0( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0x00 );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_0\r\n" ) );
	}
}

void CGuard::CPGD_SET_CPGD_1( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0xE8 );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_1\r\n" ) );
	}
}

void CGuard::CPGD_SET_CPGD_2( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0xF8 );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_2\r\n" ) );
	}
}

void CGuard::CPGD_SET_CPGD_3( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0xF8 );
		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_3\r\n" ) );
	}
}

void CGuard::CPGD_SET_BURST( PWORD data, ULONG size )
{
	ULONG i;
	WORD temp;

	for( i=0; i<size; i++ ) {
		temp = (WORD)((*(data+i)) & 0x3FF);
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTLSL, (UCHAR)(temp & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  BURST L %x\r\n", temp & 0xFF ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTLSH, (UCHAR)(temp >> 8) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  BURST H %x\r\n", temp >> 8 ) );
	}
}

void CGuard::CPGD_SET_AGC( WORD Cval, WORD Yval )
{
	WORD	Lval;

	Lval = (WORD)(((Yval & 0x03) << 4) + ((Cval & 0x03) << 6));
	Cval >>= 2;
	Yval >>= 2;
	WRITE_PORT_UCHAR( ioBase + CPGD_CAGC, (UCHAR)Cval );
	WRITE_PORT_UCHAR( ioBase + CPGD_YAGC, (UCHAR)Yval );
	WRITE_PORT_UCHAR( ioBase + CPGD_LAGC, (UCHAR)Lval );
}

ULONG CGuard::CPGD_CALC_CRC( ULONG val )
{
	ULONG crc = 0;
	ULONG i, j;

	crc = (val & 0x3FFF) << 6;

	i = 0x80000000;
	j = 0x86000000;					// 100001100....00(b)

	do {
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  i=%x, j=%x, crc=%x\r\n", i, j, crc ) );
		if( (crc & i)==0 ) {
			i >>= 1;
			j >>= 1;
			if( i<=0x20 )
				break;
		}
		else {
			crc ^= j;
		}
	} while( 1 );

	return( crc );
}

//void CGuard::CPGD_BURST_Y_OFF( void )
//{
//	// always turn off Burst Y.
//	if( AGCchip==NO_AGC ) {
//		return;
//	}
//	else if( AGCchip==TC6802 || AGCchip==TC6814 ) {
//		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  BURST_Y_OFF\r\n" ) );
//	}
//	else if( AGCchip==TC6818 ) {
//		// no operation, because this register is set by other functions.
//	}
//}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\ccpp.h ===
//***************************************************************************
//	Copy protect header
//
//***************************************************************************

#ifndef __CCPP_H__
#define __CCPP_H__

#include "ksmedia.h"

#define	CG_INDEX		0xc0
#define	CG_DATA			0xc1

#define COM				0x00
#define CNT_1			0x01
#define CNT_2			0x02
#define SD_STS			0x03
#define DETP_L			0x04
#define DETP_M			0x05

#define VER				0x0f

#define ETKG1			0x10
#define ETKG2			0x11
#define ETKG3			0x12
#define ETKG4			0x13
#define ETKG5			0x14
#define ETKG6			0x15

#define ACC				0x20

#define CHGG1			0x30
#define CHGG2			0x31
#define CHGG3			0x32
#define CHGG4			0x33
#define CHGG5			0x34
#define CHGG6			0x35
#define CHGG7			0x36
#define CHGG8			0x37
#define CHGG9			0x38
#define CHGG10			0x39

#define RSPG1			0x40
#define RSPG2			0x41
#define RSPG3			0x42
#define RSPG4			0x43
#define RSPG5			0x44

#define CMD_NOP			0x00
#define CMD_DEC_RAND	0x12
#define CMD_DEC_DKY		0x15
#define CMD_DRV_AUTH	0x17
#define CMD_DEC_AUTH	0x18
#define CMD_DEC_DTK		0x25
#define CMD_DEC_DT		0x23

#define	CNT2_DEFAULT	0xf2

typedef enum
{
	NO_GUARD,
	GUARD
} CPPMODE;

class Cpp
{
private:
	PUCHAR ioBase;

	void cpp_outp( UCHAR index, UCHAR data );
	UCHAR cpp_inp( UCHAR index );
	void wait( ULONG msec );
	BOOLEAN cmd_wait_loop( void );

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	BOOLEAN reset( CPPMODE mode );
	BOOLEAN decoder_challenge( PKS_DVDCOPY_CHLGKEY r1 );
	BOOLEAN drive_bus( PKS_DVDCOPY_BUSKEY fsr1 );
	BOOLEAN drive_challenge( PKS_DVDCOPY_CHLGKEY r2 );
	BOOLEAN decoder_bus( PKS_DVDCOPY_BUSKEY fsr2 );
	BOOLEAN DiscKeyStart();
	BOOLEAN DiscKeyEnd();
	BOOLEAN TitleKey( PKS_DVDCOPY_TITLEKEY tk );
};

#endif	// __CCPP_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cdack.h ===
//***************************************************************************
//	PCI Interface(DACK) header
//
//***************************************************************************

#ifndef __CDACK_H__
#define __CDACK_H__

#define PALETTE_Y	0x01
#define PALETTE_Cb	0x02
#define PALETTE_Cr	0x03

class Dack
{
private:
	PUCHAR ioBase;
	UCHAR DigitalOutMode;
	UCHAR paldata[3][256];

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	NTSTATUS PCIF_RESET( void );
	void PCIF_AMUTE_ON( void );
	void PCIF_AMUTE_OFF( void );
	void PCIF_AMUTE2_ON( void );
	void PCIF_AMUTE2_OFF( void );
	void PCIF_VSYNC_ON( void );
	void PCIF_VSYNC_OFF( void );
	void PCIF_PACK_START_ON( void );
	void PCIF_PACK_START_OFF( void );
	void PCIF_SET_DIGITAL_OUT( UCHAR mode );
	void PCIF_SET_DMA0_SIZE( ULONG dmaSize );
	void PCIF_SET_DMA1_SIZE( ULONG dmaSize );
	void PCIF_SET_DMA0_ADDR( ULONG dmaAddr );
	void PCIF_SET_DMA1_ADDR( ULONG dmaAddr );
	void PCIF_DMA0_START( void );
	void PCIF_DMA1_START( void );
	void PCIF_SET_PALETTE( UCHAR select, PUCHAR pPalette );
	void PCIF_GET_PALETTE( UCHAR select, PUCHAR pPalette );
	void PCIF_CHECK_SERIAL( void );
	void PCIF_DMA_ABORT( void );
	void PCIF_ALL_IFLAG_CLEAR( void );
	void PCIF_ASPECT_0403( void );
	void PCIF_ASPECT_1609( void );
};

#endif	// __CACK_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\ccpp.cpp ===
//***************************************************************************
//	Copy protect process
//
//***************************************************************************

#include "common.h"
#include "ccpp.h"

void Cpp::cpp_outp( UCHAR index, UCHAR data )
{
	WRITE_PORT_UCHAR( (PUCHAR)( ioBase + CG_INDEX ), (UCHAR)index );
	WRITE_PORT_UCHAR( (PUCHAR)( ioBase + CG_DATA ),  data );
}

UCHAR Cpp::cpp_inp( UCHAR index )
{
	WRITE_PORT_UCHAR( (PUCHAR)( ioBase + CG_INDEX ), (UCHAR)index );
	return READ_PORT_UCHAR( (PUCHAR)( ioBase + CG_DATA ) );
}

void Cpp::wait( ULONG msec )
{
	DWORD st, et;
	st = GetCurrentTime_ms();
	for( ; ; ) {
		KeStallExecutionProcessor( 1 );
		et = GetCurrentTime_ms();
		if( st + msec * 10 < et )
			break;
	}
}

BOOLEAN Cpp::cmd_wait_loop( void )
{
	int i;

	for ( i = 0; i < 100; i++ )
	{
		if ( ( cpp_inp( COM ) & 0xc0 ) != 0 )
			break;
		wait( 1 );
	}
	if ( ( cpp_inp( COM ) & 0x40 ) == 0x40 )
		return FALSE;
	else
		return TRUE;
}

BOOLEAN Cpp::decoder_challenge( PKS_DVDCOPY_CHLGKEY r1 )
{
	int i;

	cpp_outp( COM, CMD_DEC_RAND );
	for ( i = 0; i < 10; i++ )
		r1->ChlgKey[i] = cpp_inp( (UCHAR)(CHGG1 + i) );
	r1->Reserved[0] = r1->Reserved[1] = 0;
	return TRUE;
}

BOOLEAN Cpp::drive_bus( PKS_DVDCOPY_BUSKEY fsr1 )
{
	int i;
	cpp_outp( COM, CMD_NOP );
	for ( i = 0; i < 5; i++ )
		cpp_outp( (UCHAR)(RSPG1 + i), fsr1->BusKey[i] );
	cpp_outp( COM, CMD_DRV_AUTH );
	return cmd_wait_loop();
}

BOOLEAN Cpp::drive_challenge( PKS_DVDCOPY_CHLGKEY r2 )
{
	int i;

	for ( i = 0; i < 10; i++ )
		cpp_outp( (UCHAR)(CHGG1 + i), r2->ChlgKey[i] );
	cpp_outp( COM, CMD_DEC_AUTH );
	return cmd_wait_loop();
}

BOOLEAN Cpp::decoder_bus( PKS_DVDCOPY_BUSKEY fsr2 )
{
	int i;

	for ( i = 0; i < 5; i++ )
		fsr2->BusKey[i] = cpp_inp( (UCHAR)(RSPG1 + i) );
	return TRUE;
}

BOOLEAN Cpp::DiscKeyStart()
{
	cpp_outp( COM, CMD_DEC_DKY );
	return TRUE;
}

BOOLEAN Cpp::DiscKeyEnd()
{
	return cmd_wait_loop();
}

BOOLEAN Cpp::TitleKey( PKS_DVDCOPY_TITLEKEY tk )
{
	int i;
	BOOLEAN stat;

	cpp_outp( ETKG1 + 0, (UCHAR)(tk->KeyFlags) );
	for ( i = 1; i < 6; i++ )
		cpp_outp( (UCHAR)(ETKG1 + i), tk->TitleKey[i-1] );
	cpp_outp( COM, CMD_NOP );
	cpp_outp( COM, CMD_DEC_DTK );
	stat = cmd_wait_loop();
	cpp_outp( COM, CMD_NOP );
	cpp_outp( COM, CMD_DEC_DT );

	return stat;
}

void Cpp::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
}

BOOLEAN Cpp::reset( CPPMODE mode )
{
	UCHAR val;

// Reset TC6808AF
	val = READ_PORT_UCHAR( ioBase + 0x27 );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + 0x27, val );
	wait( 10 );
	val = READ_PORT_UCHAR( ioBase + 0x27 );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + 0x27, val );

//	_outp( (WORD)( pIO_Base + 0x27 ), _inp( (WORD)( pIO_Base + 0x27 ) ) | 0x10 );
//	dcg_wait( 10 );
//	_outp( (WORD)( pIO_Base + 0x27 ), _inp( (WORD)( pIO_Base + 0x27 ) ) & 0xef );


// Set Registers
	cpp_outp( CNT_1, 0xe3 );	// ???????????????
	if ( mode == NO_GUARD )
		cpp_outp( CNT_2, CNT2_DEFAULT + 0x01 );
	else
		cpp_outp( CNT_2, CNT2_DEFAULT );
	cpp_outp( DETP_L, 0x00 );
	cpp_outp( DETP_M, 0x00 );

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cdack.cpp ===
//***************************************************************************
//	PCI Interface(DACK) process
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "cdack.h"

extern DWORD GetCurrentTime_ms( void );

void Dack::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
}

NTSTATUS Dack::PCIF_RESET( void )
{
	DWORD st, et;
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, 0x80 );
	DigitalOutMode = 0x00;

	st = GetCurrentTime_ms();
	for( ; ; ) {
		val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
		if( ( val & 0x80 ) != 0x80 )
			break;

		et = GetCurrentTime_ms();
		if( st + 10000 < et ) {
			TRAP;
			return STATUS_UNSUCCESSFUL;
		}
	}

	UCHAR	initpaldata[256];
	int	i;

	for( i = 0; i < 256; i++ )
		initpaldata[i] = (UCHAR)i;

	PCIF_SET_PALETTE( PALETTE_Y, initpaldata );
	PCIF_SET_PALETTE( PALETTE_Cb, initpaldata );
	PCIF_SET_PALETTE( PALETTE_Cr, initpaldata );

	return STATUS_SUCCESS;
}

void Dack::PCIF_AMUTE_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val |= 0x40;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_AMUTE_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_AMUTE2_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val |= 0x20;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_AMUTE2_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xdf;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_VSYNC_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_VSYNC_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_PACK_START_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + PCIF_PSCNT, 0x04 );
}

void Dack::PCIF_PACK_START_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + PCIF_PSCNT, 0x00 );
}

void Dack::PCIF_SET_DIGITAL_OUT( UCHAR mode )
{
	DigitalOutMode = mode;

	PCIF_SET_PALETTE( PALETTE_Y, paldata[PALETTE_Y-1] );
	PCIF_SET_PALETTE( PALETTE_Cb, paldata[PALETTE_Cb-1] );
	PCIF_SET_PALETTE( PALETTE_Cr, paldata[PALETTE_Cr-1] );

	WRITE_PORT_UCHAR( ioBase + PCIF_VMODE, mode );
	WRITE_PORT_UCHAR( ioBase + PCIF_HSCNT, 0x70 );
	WRITE_PORT_UCHAR( ioBase + PCIF_VSCNT, 0x0b );
	if ( mode == 0x04 )	// S3 LPB
		WRITE_PORT_UCHAR( ioBase + PCIF_HSVS, 0x00 );
	else
		WRITE_PORT_UCHAR( ioBase + PCIF_HSVS, 0x00 );
}

void Dack::PCIF_SET_DMA0_SIZE( ULONG dmaSize )
{
	UCHAR val;

	if ( dmaSize == 0 )
		return;

	dmaSize--;

	// select MTC-0
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA size
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLL, (UCHAR)( dmaSize & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLH, (UCHAR)( ( dmaSize >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHL, (UCHAR)( ( dmaSize >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHH, (UCHAR)( ( dmaSize >> 24 ) & 0xff ) );
}

void Dack::PCIF_SET_DMA1_SIZE( ULONG dmaSize )
{
	UCHAR val;

	if ( dmaSize == 0 )
		return;

	dmaSize--;

	// select MTC-1
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA size
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLL, (UCHAR)( dmaSize & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLH, (UCHAR)( ( dmaSize >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHL, (UCHAR)( ( dmaSize >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHH, (UCHAR)( ( dmaSize >> 24 ) & 0xff ) );
}

void Dack::PCIF_SET_DMA0_ADDR( ULONG dmaAddr )
{
	UCHAR val;

	// select MTC-0
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA0 address
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLL, (UCHAR)( dmaAddr & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLH, (UCHAR)( ( dmaAddr >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHL, (UCHAR)( ( dmaAddr >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHH, (UCHAR)( ( dmaAddr >> 24 ) & 0xff ) );
}

void Dack::PCIF_SET_DMA1_ADDR( ULONG dmaAddr )
{
	UCHAR val;

	// select MTC-1
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA1 address
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLL, (UCHAR)( dmaAddr & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLH, (UCHAR)( ( dmaAddr >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHL, (UCHAR)( ( dmaAddr >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHH, (UCHAR)( ( dmaAddr >> 24 ) & 0xff ) );
}

void Dack::PCIF_DMA0_START( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xfc;
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_DMA1_START( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xfc;
	val |= 0x02;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_SET_PALETTE( UCHAR select, PUCHAR pPalette )
{
	int i;
	UCHAR val;

	ASSERT( PALETTE_Y <= select && select <= PALETTE_Cr );

	for ( i = 0; i < 256; i++ )
		paldata[select-1][i] = pPalette[i];

	val = (UCHAR)( ( READ_PORT_UCHAR( ioBase + PCIF_CPCNT ) & 0xFC ) | select | 0x04 );
	WRITE_PORT_UCHAR( ioBase + PCIF_CPCNT, val );	// clear color palette pointer

	for ( i = 0; i < 256; i++ ) {
		// DACK bug recovery. Use value from 0x07 to 0xFD in AMC mode and setting Palette Y.
		if( DigitalOutMode == 0x07 ) {
			if( select == PALETTE_Y ) {
				// convert 0x00 to 0xFF --> 0x07 to 0xFD
				//     round up numbers of five and above and drop anything under five
				val = (UCHAR)(((LONG)pPalette[i] * 246 * 2 + 255) / (255 * 2) + 7);
			}
			else {
				if( pPalette[i] > 253 )
					val = 253;
				else
					val = pPalette[i];
			}
		}
		else
			val = pPalette[i];

		WRITE_PORT_UCHAR( ioBase + PCIF_CPLT, val );
	}
}

void Dack::PCIF_GET_PALETTE( UCHAR select, PUCHAR pPalette )
{
	int i;
	UCHAR val;

	val = (UCHAR)( ( READ_PORT_UCHAR( ioBase + PCIF_CPCNT ) & 0xFC ) | select | 0x04 );
	WRITE_PORT_UCHAR( ioBase + PCIF_CPCNT, val );	// clear color palette pointer
	for ( i = 0; i < 256; i++ )
		pPalette[i] = READ_PORT_UCHAR( ioBase + PCIF_CPLT );
}

void Dack::PCIF_CHECK_SERIAL( void )
{
	DWORD st, et;
	UCHAR val;

	st = GetCurrentTime_ms();
	for( ; ; ) {
		val = READ_PORT_UCHAR( ioBase + PCIF_SCNT );
		if( ( val & 0x80 ) != 0x80 )
			break;

		et = GetCurrentTime_ms();
		if( st + 10000 < et ) {
			TRAP;
			break;
		}
	}
}

void Dack::PCIF_DMA_ABORT( void )
{
	WRITE_PORT_UCHAR( ioBase + PCIF_INTF, 0x04 );
}

void Dack::PCIF_ALL_IFLAG_CLEAR( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_INTF );
	val |= 0x23;
	WRITE_PORT_UCHAR( ioBase + PCIF_INTF, val );
}

void Dack::PCIF_ASPECT_0403( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_TEST );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + PCIF_TEST, val );
}

void Dack::PCIF_ASPECT_1609( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_TEST );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + PCIF_TEST, val );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cvdec.h ===
//***************************************************************************
//	Video decoder header
//
//***************************************************************************

#ifndef __CVDEC_H__
#define __CVDEC_H__

class VDecoder
{
private:
	PUCHAR ioBase;
//	BOOL UF_FLAG;		// for debug 

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void VIDEO_RESET( void );
	void VIDEO_MODE_DVD( void );
	void VDVD_VIDEO_MODE_PS( void );
	void VIDEO_PRSO_PS1( void );
	void VIDEO_PRSO_NON( void );
	void VIDEO_OUT_NTSC( void );
	void VIDEO_ALL_INT_OFF( void );
	void VIDEO_SCR_INT_ON( void );
	void VIDEO_SCR_INT_OFF( void );
	void VIDEO_VERR_INT_ON( void );
	void VIDEO_VERR_INT_OFF( void );
	void VIDEO_UFLOW_INT_ON( void );
	void VIDEO_UFLOW_INT_OFF( void );
	void VIDEO_DECODE_INT_ON( void );
	void VIDEO_DECODE_INT_OFF( void );
	void VIDEO_USER_INT_ON( void );
	void VIDEO_USER_INT_OFF( void );
//--- 97.09.23 K.Chujo
	void VIDEO_UDSC_INT_ON( void );
	void VIDEO_UDSC_INT_OFF( void );
//--- End.
	void VIDEO_ALL_IFLAG_CLEAR( void );
	void VIDEO_SET_STCA( ULONG stca );
	void VIDEO_SET_STCS( ULONG stcs );
	ULONG VIDEO_GET_STCA( void );
	ULONG VIDEO_GET_STCS( void );
	void VIDEO_SYSTEM_START( void );
	void VIDEO_SYSTEM_STOP( void );
	ULONG VIDEO_GET_STD_CODE( void );
	BOOL VIDEO_GET_DECODE_STATE( void );
	void VIDEO_DECODE_START( void );
	NTSTATUS VIDEO_DECODE_STOP( void );
	void VIDEO_STD_CLEAR( void );
	void VIDEO_USER_CLEAR( void );
	void VIDEO_PVSIN_ON( void );
	void VIDEO_PVSIN_OFF( void );
	void VIDEO_SET_DTS( ULONG dts );
	ULONG VIDEO_GET_DTS( void );
	void VIDEO_SET_PTS( ULONG pts );
	ULONG VIDEO_GET_PTS( void );
	ULONG VIDEO_GET_SCR( void );
	ULONG VIDEO_GET_STCC( void );
	void VIDEO_SEEMLESS_ON( void );
	void VIDEO_SEEMLESS_OFF( void );
	void VIDEO_VIDEOCD_OFF( void );
	NTSTATUS VIDEO_GET_UDATA( PUCHAR pudata );
	void VIDEO_PLAY_NORMAL( void );
	void VIDEO_PLAY_FAST( ULONG flag );
	void VIDEO_PLAY_SLOW( ULONG speed );
	void VIDEO_PLAY_FREEZE( void );
	void VIDEO_PLAY_STILL( void );
	void VIDEO_LBOX_ON( void );
	void VIDEO_LBOX_OFF( void );
	void VIDEO_PANSCAN_ON( void );
	void VIDEO_PANSCAN_OFF( void );
	void VIDEO_UFLOW_CURB_ON( void );
	void VIDEO_UFLOW_CURB_OFF( void );
	ULONG VIDEO_USER_DWORD( ULONG offset );
	void VIDEO_UDAT_CLEAR( void );
	ULONG VIDEO_GET_TRICK_MODE( void );
	void VIDEO_BUG_PRE_SEARCH_01( void );
	void VIDEO_BUG_PRE_SEARCH_02( void );
	void VIDEO_BUG_PRE_SEARCH_03( void );
	void VIDEO_BUG_PRE_SEARCH_04( void );
	void VIDEO_BUG_PRE_SEARCH_05( void );
	void VIDEO_BUG_SLIDE_01( void );
//	void VIDEO_DEBUG_SET_UF( void ); // for debug
//	void VIDEO_DEBUG_CLR_UF( void ); // for debug
};

#endif	// __CVDEC_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cvdec.cpp ===
//***************************************************************************
//	Video decoder process
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "cvdec.h"

extern BOOLEAN fProgrammed;

void VDecoder::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
}

void VDecoder::VIDEO_RESET( void )
{
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_RESET );
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
		// wait !!
	}
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x10 ) != 0x10 )
			break;
		// wait !!
	}

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x05 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x13 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x14 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x05 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x13 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x34 );

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_RESET );
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
		// wait !!
	}
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x10 ) != 0x10 )
			break;
		// wait !!
	}
}

void VDecoder::VIDEO_MODE_DVD( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DEC_MODE );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xe0 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_INT_ID );

	VIDEO_PRSO_PS1();
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xbf );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_USER_ID );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DMODE );

	WRITE_PORT_UCHAR( ioBase + TC812_DSPL, 0x1f );

	VIDEO_VIDEOCD_OFF();
}

void VDecoder::VDVD_VIDEO_MODE_PS( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xbd );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PRSO_ID );
}

void VDecoder::VIDEO_PRSO_PS1( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xbd );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PRSO_ID );
}

void VDecoder::VIDEO_PRSO_NON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PRSO_ID );
}

void VDecoder::VIDEO_OUT_NTSC( void )
{
	UCHAR val;

	// set video frame size mode to NTSC
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VFMODE );

	// set STD buffer size
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x40 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x11 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STD_SIZE );

	// set USER1/2 area size
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xf7 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_USER_SIZE );

	// set ext. memory mapping
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_MEM_MAP );
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x10 ) != 0x10 )
			break;
		// wait !!! & timeout !!!
	}

	// set underflow/overflow size
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_UOF_SIZE );

	// default RHOS
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_HOFFSET );

	// default RVOS
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VOFFSET );
}

void VDecoder::VIDEO_ALL_INT_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DEM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_WEM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_ERM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_UOM, 0xff );
}

void VDecoder::VIDEO_SCR_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xfd;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_SCR_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x02;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_VERR_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	WRITE_PORT_UCHAR( ioBase + TC812_ERM, 0x00 );
}

void VDecoder::VIDEO_VERR_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	WRITE_PORT_UCHAR( ioBase + TC812_ERM, 0x7f );
}

void VDecoder::VIDEO_UFLOW_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_UOM );
	val &= 0xfe;
	WRITE_PORT_UCHAR( ioBase + TC812_UOM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_UFLOW_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x40;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_UOM );
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + TC812_UOM, val );
}

void VDecoder::VIDEO_DECODE_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_DEM );
	val &= 0xfb;
	WRITE_PORT_UCHAR( ioBase + TC812_DEM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xfb;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_DECODE_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_DEM );
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + TC812_DEM, val );
}

void VDecoder::VIDEO_USER_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_WEM );
	val &= 0xfe;
	WRITE_PORT_UCHAR( ioBase + TC812_WEM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xf7;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_USER_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x08;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_WEM );
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + TC812_WEM, val );
}

//--- 97.09.23 K.Chujo
void VDecoder::VIDEO_UDSC_INT_ON( void )
{
	// user data start code interrupt on
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xFE;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_UDSC_INT_OFF( void )
{
	// user data start code interrput off
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}
//--- End.

void VDecoder::VIDEO_ALL_IFLAG_CLEAR( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_UOF );
	val = READ_PORT_UCHAR( ioBase + TC812_ERF );
	val = READ_PORT_UCHAR( ioBase + TC812_WEF );
	val = READ_PORT_UCHAR( ioBase + TC812_DEF );
	val = READ_PORT_UCHAR( ioBase + TC812_IRF );
}

void VDecoder::VIDEO_SET_STCA( ULONG stca )
{
	UCHAR val;

	val = (UCHAR)( stca & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, val );
	val = (UCHAR)( ( stca >> 8 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, val );
	val = (UCHAR)( ( stca >> 16 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, val );
	val = (UCHAR)( ( stca >> 24 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA6, val );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA7, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCA );
}

void VDecoder::VIDEO_SET_STCS( ULONG stcs )
{
	UCHAR val;

	val = (UCHAR)( stcs & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, val );
	val = (UCHAR)( ( stcs >> 8 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, val );
	val = (UCHAR)( ( stcs >> 16 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, val );
	val = (UCHAR)( ( stcs >> 24 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA6, val );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA7, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCS );
}

ULONG VDecoder::VIDEO_GET_STCA( void )
{
	ULONG rval = 0, val;

   if (fProgrammed)
   {

      WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STCA );
   
      rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
      val <<= 8;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
      val <<= 16;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
      val <<= 24;
      rval += val;
   
   }

	return rval;
}

ULONG VDecoder::VIDEO_GET_STCS( void )
{
	ULONG rval = 0, val;

   if (fProgrammed)
   {

      WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STCS );
      
      rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
      val <<= 8;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
      val <<= 16;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
      val <<= 24;
      rval += val;

   }
	return rval;
}

void VDecoder::VIDEO_SYSTEM_START( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x07 );	// video buffer flow control
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SYS );
}

void VDecoder::VIDEO_SYSTEM_STOP( void )
{
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_SYS );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val &= 0xfe;
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, val );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SYS );
}

ULONG VDecoder::VIDEO_GET_STD_CODE( void )
{
	ULONG rval, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STD_CODE );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val <<= 16;
	rval += val;

	rval <<= 2;
	return rval;
}

BOOL VDecoder::VIDEO_GET_DECODE_STATE( void )
{
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_DECODE );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	if ( ( val & 0x01 ) == 0x01 )
		return TRUE;	// Decode
	else
		return FALSE;	// Non Decode
}

void VDecoder::VIDEO_DECODE_START( void )
{
	UCHAR val;

	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT2 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
	}
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x05 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DECODE );
}

NTSTATUS VDecoder::VIDEO_DECODE_STOP( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_STT2 );
	if ( ( val & 0x01 ) == 0x01 )
		return (NTSTATUS)-1;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_DECODE );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val &= 0x0e;
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, val );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DECODE );

	return 0;
}

void VDecoder::VIDEO_STD_CLEAR( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_STD_CLEAR );
}

void VDecoder::VIDEO_USER_CLEAR( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_USER1_CLEAR );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_USER2_CLEAR );
}

void VDecoder::VIDEO_PVSIN_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PVSIN );
}

void VDecoder::VIDEO_PVSIN_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PVSIN );
}

void VDecoder::VIDEO_SET_DTS( ULONG dts )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, (UCHAR)( dts & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, (UCHAR)( ( dts >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, (UCHAR)( ( dts >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, (UCHAR)( ( dts >> 24 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, 0 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DTS );
}

ULONG VDecoder::VIDEO_GET_DTS( void )
{
	ULONG rval, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_DTS );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 24;
	rval += val;

	return rval;
}

void VDecoder::VIDEO_SET_PTS( ULONG pts )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, (UCHAR)( pts & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, (UCHAR)( ( pts >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, (UCHAR)( ( pts >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, (UCHAR)( ( pts >> 24 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PTS );
}

ULONG VDecoder::VIDEO_GET_PTS( void )
{
	ULONG rval, val;

   if (fProgrammed)
   {

      WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_PTS );
      rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
      val <<= 8;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
      val <<= 16;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
      val <<= 24;
      rval += val;
   }
   else
   {
      rval = 0;
   }


	return rval;
}

ULONG VDecoder::VIDEO_GET_SCR( void )
{
	ULONG rval =0, val;

   if (fProgrammed)
   {

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_SCR );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
	val <<= 24;
	rval += val;
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCR_END );

   }
	return rval;
}

ULONG VDecoder::VIDEO_GET_STCC( void )
{
	ULONG rval=0, val;

   if (fProgrammed)
   {

      WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STCC );
      rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
      val <<= 8;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
      val <<= 16;
      rval += val;
      val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
      val <<= 24;
      rval += val;
      WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCR_END );
   }

	return rval;
}

void VDecoder::VIDEO_SEEMLESS_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SEEMLES );
}

void VDecoder::VIDEO_SEEMLESS_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SEEMLES );
}

void VDecoder::VIDEO_VIDEOCD_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VCD );
}

NTSTATUS VDecoder::VIDEO_GET_UDATA( PUCHAR pudata )
{
	if ( ( READ_PORT_UCHAR( ioBase + TC812_STT1 ) & 0x80 ) != 0x80 )
		return (NTSTATUS)-1;	// no user data

	*pudata = READ_PORT_UCHAR( ioBase + TC812_UDAT );
	return 0;
}

void VDecoder::VIDEO_PLAY_NORMAL( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_NORMAL );
}

void VDecoder::VIDEO_PLAY_FAST( ULONG flag )
{
	if ( flag == FAST_ONLYI )
		WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	else if ( flag == FAST_IANDP )
		WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x07 );
	else
		return;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_FAST );
}

void VDecoder::VIDEO_PLAY_SLOW( ULONG speed )
{
	if ( speed == 0 || speed > 31 )
		return;

	speed <<= 2;
	speed |= 3;
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, (UCHAR)speed );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_SLOW );
}

void VDecoder::VIDEO_PLAY_FREEZE( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_FREEZE );
}

void VDecoder::VIDEO_PLAY_STILL( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_STILL );
}

void VDecoder::VIDEO_LBOX_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_DSPL );
	val &= 0xf7;
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + TC812_DSPL, val );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x3e );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VOFFSET );
}

void VDecoder::VIDEO_LBOX_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_DSPL );
	val |= 0x18;
	WRITE_PORT_UCHAR( ioBase + TC812_DSPL, val );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x04 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VOFFSET );
}

void VDecoder::VIDEO_PANSCAN_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DMODE );
}

void VDecoder::VIDEO_PANSCAN_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x1b );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DMODE );
}

void VDecoder::VIDEO_UFLOW_CURB_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_UF_CURB );
}

void VDecoder::VIDEO_UFLOW_CURB_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_UF_CURB );
}

ULONG VDecoder::VIDEO_USER_DWORD( ULONG offset )
{
	ULONG rval, val;

	for ( ; ; )
	{
		val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_STT2 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
	}

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, (UCHAR)( offset & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, (UCHAR)( ( offset >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, (UCHAR)( ( offset >> 16 ) & 0x07 ) );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_WRITE_MEM );

	for ( ; ; )
	{
		val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_STT2 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
	}

	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	rval <<= 8;
	rval += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	rval <<= 8;
	rval += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
	rval <<= 8;
	rval += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	rval <<= 8;

	return rval;
}

void VDecoder::VIDEO_UDAT_CLEAR( void )
{
	UCHAR val;

	for ( ; ; )
	{
	val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
	if ( ( val & 0x08 ) != 0x08 )
		break;
	val = READ_PORT_UCHAR( ioBase + TC812_UDAT );
	}
}

ULONG VDecoder::VIDEO_GET_TRICK_MODE( void )
{
	ULONG val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_TRICK );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val &= 0x07;

	return val;
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_01( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x25 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x11 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x02 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x5d );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_02( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x02 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x1b );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x42 );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_03( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xc1 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xb8 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_04( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x1b );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_05( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x5d );
}


// NEEDED TO BE DEBUGGED !!!
void VDecoder::VIDEO_BUG_SLIDE_01( void )
{
	UCHAR val;
	ULONG ul;

	// check whether vdec hanged-up
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x7d );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA2 );
//	if( UF_FLAG == TRUE ) {
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER STATUS = %x\r\n", val ));
//	}
	if ( ( val & 0x30 ) == 0x00 )
	{
		WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x72 );
		ul = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
		ul <<= 8;
		ul += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
//		if( UF_FLAG == TRUE ) {
//			DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER PC(1) = %x\r\n", ul ));
//		}
		if ( ul == 0x1a5 )
		{
			WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xb8 );
			WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
			WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );
			DebugPrint(( DebugLevelTrace, "TOSDVD:  <<RE-ORDER(1)>>\r\n" ));
			// uf
		} else {
			WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0xb0 );
			ul = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
			ul <<= 8;
			val = READ_PORT_UCHAR( ioBase + TC812_DATA3 );
			ul += (ULONG)val;
			ul <<= 8;
			val = READ_PORT_UCHAR( ioBase + TC812_DATA2 );
			ul += (ULONG)val;
			ul <<= 8;
			val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
			ul += (ULONG)val;

//			if( UF_FLAG == TRUE ) {
//				DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER DTS = %x\r\n", ul ));
//			}
			if ( ( VIDEO_GET_STCA() - 2 ) > ul )
			{
				ul = VIDEO_GET_STD_CODE();
//				if( UF_FLAG == TRUE ) {
//					DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER STD = %x\r\n", ul ));
//				}
				if ( ul >= 0x200 )
				{
					WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x72 );
					ul = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
					ul <<= 8;
					ul += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
//					if( UF_FLAG == TRUE ) {
//						DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER PC(2) = %x\r\n", ul ));
//					}
					if ( ul >= 0x404 && ul <= 0x409 )
					{
						WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x18 );
						WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x04 );
						WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );
						DebugPrint(( DebugLevelTrace, "TOSDVD:  <<RE-ORDER(2)>>\r\n" ));
						// uf
					}
				}
			}
		}
	}
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x5d );
}
//
//void VDecoder::VIDEO_DEBUG_SET_UF( void )
//{
//	UF_FLAG = TRUE;
//}
//
//void VDecoder::VIDEO_DEBUG_CLR_UF( void )
//{
//	UF_FLAG = FALSE;
//}

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cvpro.cpp ===
//***************************************************************************
//	Video Processor(V-PRO) process
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "cvpro.h"

void VProcessor::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;

//--- 97.09.04 K.Chujo
	// You should reset SUBPIC part to change the subpic stream ID safely,
	// because early VPRO has a bug.
	// But if you reset it, you must restore registers.
//--- End.

}

void VProcessor::SetParam( ULONG aMode, BOOL bSubpicMute )
{
	AudioMode = aMode;
	SubpicMute = bSubpicMute;

	if( SubpicMute )
		VproCOMMAND_REG = 0xA0;			// see specifications (date 96.09.26 spec)
	else
		VproCOMMAND_REG = 0x20;			// see specifications (date 96.09.26 spec)
}

void VProcessor::VPRO_RESET_FUNC()
{
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, 0 );
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, 0x80 );

	VproRESET_REG = 0x80;
	VproVMODE_REG = 0;	// ? ? ?
	VproAVM_REG = 0;	// ? ? ?
}

void VProcessor::VPRO_VIDEO_MUTE_ON()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, VproRESET_REG );
}

void VProcessor::VPRO_VIDEO_MUTE_OFF()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, VproRESET_REG );
}

void VProcessor::VPRO_INIT_NTSC()
{
	VproVMODE_REG &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + VPRO_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + VPRO_DVEN, 0xc0 );
}

void VProcessor::VPRO_INIT_PAL()
{
	VproVMODE_REG |= 0x80;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + VPRO_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + VPRO_DVEN, 0x80 );
}

void VProcessor::VPRO_CC_ON()
{
//	VproVMODE_REG &= 0xbf;
	VproVMODE_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );
}

void VProcessor::VPRO_CC_OFF()
{
//	VproVMODE_REG |= 0x40;
	VproVMODE_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );
}

void VProcessor::VPRO_SUBP_PALETTE( PUCHAR pPalData )
{
	ULONG i;

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x80 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + VPRO_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x40 );
	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0 );
}

void VProcessor::VPRO_OSD_PALETTE( PUCHAR pPalData )
{
	int i;

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x20 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + VPRO_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x10 );
	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0 );
}

void VProcessor::SUBP_RESET_INIT()
{
	UCHAR	ch;

	SUBP_RESET_FUNC();

// Interrupt Mask.
	WRITE_PORT_UCHAR( ioBase + SUBP_STSINT, 0xf0 );

// select Audio Stream.
	if( AudioMode == AUDIO_TYPE_AC3 || AudioMode == AUDIO_TYPE_PCM )
		SUBP_SELECT_AUDIO_SSID();
	else
		SUBP_SELECT_AUDIO_STID();

	SUBP_STC_OFF();

// Audio channel
	if( AudioMode == AUDIO_TYPE_AC3 )
		ch = SUB_STRMID_AC3;
	else if( AudioMode == AUDIO_TYPE_MPEG_F1 )
		ch = STRMID_MPEG_AUDIO;
	else if( AudioMode == AUDIO_TYPE_MPEG_F2 )
		ch = STRMID_MPEG_AUDIO;
	else
		ch = SUB_STRMID_PCM;

	ch = (UCHAR)SUBP_GET_AUDIO_CH();
	SUBP_SET_AUDIO_CH( ch );

// Sub-Pic Channel
	SUBP_SET_SUBP_CH( 0 );

// Sub-Pic MUTE ON/OFF.
	if( SubpicMute )
		SUBP_MUTE_ON();
	else
		SUBP_MUTE_OFF();
	SUBP_BUFF_CLEAR();
}

void VProcessor::SUBP_RESET_FUNC()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0x80 );
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0 );

	// set or restore COMMAND REGISTER
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );
}

void VProcessor::SUBP_RESET_STC()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0x40 );
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0 );
}

void VProcessor::SUBP_BUFF_CLEAR()
{
//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val |= 0x10;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

//	val &= 0xef;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG |= 0x10;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG);

	VproCOMMAND_REG &= 0xef;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG);

//--- End.
}

void VProcessor::SUBP_MUTE_ON()
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:VProcessor::SUBP_MUTE_ON()\r\n" ));

//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val |= 0x80;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG |= 0x80;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.

	SubpicMute = TRUE;
}

void VProcessor::SUBP_MUTE_OFF()
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:VProcessor::SUBP_MUTE_OFF()\r\n" ));

//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val &= 0x7f;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.

	SubpicMute = FALSE;
}

void VProcessor::SUBP_HLITE_ON()
{
//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val |= 0x40;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.
}

void VProcessor::SUBP_HLITE_OFF()
{
//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val &= 0xbf;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.
}

void VProcessor::SUBP_SET_STC( ULONG stc )
{
	SUBP_STC_OFF();

	WRITE_PORT_UCHAR( ioBase + SUBP_STCLL, (UCHAR)( stc & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + SUBP_STCLH, (UCHAR)( ( stc >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + SUBP_STCHL, (UCHAR)( ( stc >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + SUBP_STCHH, (UCHAR)( ( stc >> 24 ) & 0xff ) );

//	SUBP_STC_ON();
}

void VProcessor::SUBP_SET_LNCTLI( PUCHAR pData )
{
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFLL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFLH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFHL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFHH, *pData++ );
}

void VProcessor::SUBP_SET_PXCTLIS( PUCHAR pData )
{
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSLL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSLH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSML, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSMH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSHL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSHH, *pData++ );
}

void VProcessor::SUBP_SET_PXCTLIE( PUCHAR pData )
{
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFELL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFELH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEML, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEMH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEHL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEHH, *pData++ );
}

void VProcessor::SUBP_STC_ON()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_STCCNT );

	val |= 0x80;
	WRITE_PORT_UCHAR( ioBase + SUBP_STCCNT, val );
}

void VProcessor::SUBP_STC_OFF()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_STCCNT );

	val &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + SUBP_STCCNT, val );
}

void VProcessor::SUBP_SET_SUBP_CH( ULONG ch )
{
	UCHAR ucch;

	ucch = (UCHAR)( ch & 0x1f );
	ucch |= 0x20;

//--- 97.09.14 K.Chujo

	SubpicID = ucch;

#if 1
	// VPRO (early TC90A09F) has a bug. When change subpic ID, subpic disappears somtimes.
	// You should reset SUBPIC part to change subpic ID safely.

	// reset SUBPIC part
	SUBP_RESET_FUNC();

	// Interrupt Mask.
	WRITE_PORT_UCHAR( ioBase + SUBP_STSINT, 0xf0 );

	// select Audio Stream.
	if( AudioMode == AUDIO_TYPE_AC3 || AudioMode == AUDIO_TYPE_PCM )
		SUBP_SELECT_AUDIO_SSID();
	else
		SUBP_SELECT_AUDIO_STID();

//	SUBP_STC_OFF();

	// Audio channel
	SUBP_SET_AUDIO_CH( AudioID );
	DebugPrint(( DebugLevelTrace, "TOSDVD:  <<< New Audio ID = %x >>>\r\n", AudioID ));

	// Sub-Pic Channel
	WRITE_PORT_UCHAR( ioBase + SUBP_SPID, SubpicID );
	DebugPrint(( DebugLevelTrace, "TOSDVD:  <<< New Subpic ID = %x >>>\r\n", SubpicID ));

	// Sub-Pic MUTE ON/OFF.
	if( SubpicMute )
		SUBP_MUTE_ON();
	else
		SUBP_MUTE_OFF();
//	SUBP_BUFF_CLEAR();

#else
	// Maybe VPRO works only next one code if later version (ex. Timpani).

	WRITE_PORT_UCHAR( ioBase + SUBP_SPID, SubpicID );

#endif

//--- End.
}

ULONG VProcessor::SUBP_GET_SUBP_CH()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_SPID );

	return val;
}

void VProcessor::SUBP_SET_AUDIO_CH( ULONG ch )
{
	UCHAR ucch;

	ucch = (UCHAR)( ch & 0x7 );

	if( AudioMode == AUDIO_TYPE_AC3 )
		ucch |= 0x80;
	else if( AudioMode == AUDIO_TYPE_PCM )
		ucch |= 0xa0;
	else if( AudioMode == AUDIO_TYPE_MPEG_F1 )
		ucch |= 0xc0;
	else
		ucch |= 0xd0;

//--- 97.09.14 K.Chujo
	AudioID = ucch;
//--- End.
	WRITE_PORT_UCHAR( ioBase + SUBP_AAID, ucch );
	WRITE_PORT_UCHAR( ioBase + SUBP_ABID, 0 );
}

void VProcessor::SUBP_SET_AUDIO_NON()
{
//--- 97.09.14 K.Chujo
	AudioID = 0;
//--- End.
	WRITE_PORT_UCHAR( ioBase + SUBP_AAID, 0 );
	WRITE_PORT_UCHAR( ioBase + SUBP_ABID, 0 );
}

//--- 97.09.10 K.Chujo
ULONG VProcessor::SUBP_GET_AUDIO_CH()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_AAID );

	return (ULONG)val;
}
//--- End.

void VProcessor::SUBP_SELECT_AUDIO_STID()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_ASEL, 0 );
}

void VProcessor::SUBP_SELECT_AUDIO_SSID()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_ASEL, 3 );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\cvpro.h ===
//***************************************************************************
//	Video Processor(V-PRO) header
//
//***************************************************************************

#ifndef __CVPRO_H__
#define __CVPRO_H__

class VProcessor {
private:
	PUCHAR	ioBase;
	ULONG	AudioMode;	// AC3, PCM, ...
	BOOL	SubpicMute;

	UCHAR	VproRESET_REG;
	UCHAR	VproVMODE_REG;
	UCHAR	VproAVM_REG;
//--- 97.09.04 K.Chujo
	// new code
	UCHAR	VproCOMMAND_REG;
//--- End
//--- 97.09.10 K.Chujo
	UCHAR	AudioID;
	UCHAR	SubpicID;
//--- End.

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void SetParam( ULONG aMode, BOOL bSubpicMute );

	void VPRO_RESET_FUNC();
	void VPRO_VIDEO_MUTE_ON();
	void VPRO_VIDEO_MUTE_OFF();
	void VPRO_INIT_NTSC();
	void VPRO_INIT_PAL();
	void VPRO_CC_ON();
	void VPRO_CC_OFF();
	void VPRO_SUBP_PALETTE( PUCHAR pPalData );
	void VPRO_OSD_PALETTE( PUCHAR pPalData );

	void SUBP_RESET_INIT();
	void SUBP_RESET_FUNC();
	void SUBP_RESET_STC();
	void SUBP_BUFF_CLEAR();
	void SUBP_MUTE_ON();
	void SUBP_MUTE_OFF();
	void SUBP_HLITE_ON();
	void SUBP_HLITE_OFF();
	void SUBP_SET_STC( ULONG stc );
	void SUBP_SET_LNCTLI( PUCHAR pData );
	void SUBP_SET_PXCTLIS( PUCHAR pData );
	void SUBP_SET_PXCTLIE( PUCHAR pData );
	void SUBP_STC_ON();
	void SUBP_STC_OFF();
	void SUBP_SET_SUBP_CH( ULONG ch );
	ULONG SUBP_GET_SUBP_CH();
	void SUBP_SET_AUDIO_CH( ULONG ch );
	void SUBP_SET_AUDIO_NON();
	ULONG SUBP_GET_AUDIO_CH();
	void SUBP_SELECT_AUDIO_STID();
	void SUBP_SELECT_AUDIO_SSID();

};

#endif	// __CVPRO_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\common.h ===
//***************************************************************************
//	Common header
//
//***************************************************************************

#ifndef __COMMON_H
#define __COMMON_H
#endif

extern "C" {
#include "wdmwarn4.h"
#include "strmini.h"
#include "ks.h"
}

typedef struct _DEVICE_INIT_INFO {
	PUCHAR	ioBase;
} DEVICE_INIT_INFO, *PDEVICE_INIT_INFO;

#include "que.h"
#include "cdack.h"
#include "cvdec.h"
#include "cadec.h"
#include "cvpro.h"
#include "ccpgd.h"
#include "ccpp.h"
#include "dvdinit.h"
#include "debug.h"
#include "decoder.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dack.cpp ===
#include "common.h"
#include "regs.h"
#include "dack.h"

extern DWORD GetCurrentTime_ms( void );

void Dack::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
}

NTSTATUS Dack::PCIF_RESET( void )
{
	DWORD st, et;
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, 0x80 );
	DigitalOutMode = 0x00;

	st = GetCurrentTime_ms();
	for( ; ; ) {
		val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
		if( ( val & 0x80 ) != 0x80 )
			break;

		et = GetCurrentTime_ms();
		if( st + 10000 < et ) {
			TRAP;
			return STATUS_UNSUCCESSFUL;
		}
	}

	return STATUS_SUCCESS;
}

void Dack::PCIF_AMUTE_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val |= 0x40;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_AMUTE_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_AMUTE2_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val |= 0x20;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_AMUTE2_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xdf;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_VSYNC_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_VSYNC_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_PACK_START_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + PCIF_PSCNT, 0x04 );
}

void Dack::PCIF_PACK_START_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + PCIF_PSCNT, 0x00 );
}

void Dack::PCIF_SET_DIGITAL_OUT( UCHAR mode )
{
	DigitalOutMode = mode;
	WRITE_PORT_UCHAR( ioBase + PCIF_VMODE, mode );
	WRITE_PORT_UCHAR( ioBase + PCIF_HSCNT, 0x70 );
	WRITE_PORT_UCHAR( ioBase + PCIF_VSCNT, 0x0b );
	if ( mode == 0x04 )	// S3 LPB
		WRITE_PORT_UCHAR( ioBase + PCIF_HSVS, 0x00 );
	else
		WRITE_PORT_UCHAR( ioBase + PCIF_HSVS, 0x00 );
}

void Dack::PCIF_SET_DMA0_SIZE( ULONG dmaSize )
{
	UCHAR val;

	if ( dmaSize == 0 )
		return;

	dmaSize--;

	// select MTC-0
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA size
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLL, (UCHAR)( dmaSize & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLH, (UCHAR)( ( dmaSize >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHL, (UCHAR)( ( dmaSize >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHH, (UCHAR)( ( dmaSize >> 24 ) & 0xff ) );
}

void Dack::PCIF_SET_DMA1_SIZE( ULONG dmaSize )
{
	UCHAR val;

	if ( dmaSize == 0 )
		return;

	dmaSize--;

	// select MTC-1
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA size
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLL, (UCHAR)( dmaSize & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCLH, (UCHAR)( ( dmaSize >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHL, (UCHAR)( ( dmaSize >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MTCHH, (UCHAR)( ( dmaSize >> 24 ) & 0xff ) );
}

void Dack::PCIF_SET_DMA0_ADDR( ULONG dmaAddr )
{
	UCHAR val;

	// select MTC-0
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA0 address
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLL, (UCHAR)( dmaAddr & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLH, (UCHAR)( ( dmaAddr >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHL, (UCHAR)( ( dmaAddr >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHH, (UCHAR)( ( dmaAddr >> 24 ) & 0xff ) );
}

void Dack::PCIF_SET_DMA1_ADDR( ULONG dmaAddr )
{
	UCHAR val;

	// select MTC-1
	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xf8;
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );

	// write DMA1 address
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLL, (UCHAR)( dmaAddr & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRLH, (UCHAR)( ( dmaAddr >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHL, (UCHAR)( ( dmaAddr >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + PCIF_MADRHH, (UCHAR)( ( dmaAddr >> 24 ) & 0xff ) );
}

void Dack::PCIF_DMA0_START( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xfc;
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_DMA1_START( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_CNTL );
	val &= 0xfc;
	val |= 0x02;
	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, val );
}

void Dack::PCIF_SET_PALETTE( UCHAR select, PUCHAR pPalette )
{
	int i;
	UCHAR val;

	val = (READ_PORT_UCHAR( ioBase + PCIF_CPCNT ) & 0xFC) | select | 0x04;
	WRITE_PORT_UCHAR( ioBase + PCIF_CPCNT, val );	// clear color palette pointer

	for ( i = 0; i < 256; i++ ) {
		// DACK bug recovery. Use value from 0x07 to 0xFD in AMC mode and setting Palette Y.
		if( DigitalOutMode == 0x07 ) {
			if( select == PALETTE_Y ) {
				// convert 0x00 to 0xFF --> 0x07 to 0xFD
				//     round up numbers of five and above and drop anything under five
				val = (UCHAR)(((LONG)pPalette[i] * 246 * 2 + 255) / (255 * 2) + 7);
			}
		}
		else if( pPalette[i] > 253 )
			val = 253;
		else
			val = pPalette[i];
		WRITE_PORT_UCHAR( ioBase + PCIF_CPLT, val );
	}
}

void Dack::PCIF_GET_PALETTE( UCHAR select, PUCHAR pPalette )
{
	int i;
	UCHAR val;

	val = (READ_PORT_UCHAR( ioBase + PCIF_CPCNT ) & 0xFC) | select | 0x04;
	WRITE_PORT_UCHAR( ioBase + PCIF_CPCNT, val );	// clear color palette pointer
	for ( i = 0; i < 256; i++ )
		pPalette[i] = READ_PORT_UCHAR( ioBase + PCIF_CPLT );
}

void Dack::PCIF_CHECK_SERIAL( void )
{
	DWORD st, et;
	UCHAR val;

	st = GetCurrentTime_ms();
	for( ; ; ) {
		val = READ_PORT_UCHAR( ioBase + PCIF_SCNT );
		if( ( val & 0x80 ) != 0x80 )
			break;

		et = GetCurrentTime_ms();
		if( st + 10000 < et ) {
			TRAP;
			break;
		}
	}
}

void Dack::PCIF_DMA_ABORT( void )
{
	WRITE_PORT_UCHAR( ioBase + PCIF_INTF, 0x04 );
}

void Dack::PCIF_ALL_IFLAG_CLEAR( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_INTF );
	val |= 0x23;
	WRITE_PORT_UCHAR( ioBase + PCIF_INTF, val );
}

void Dack::PCIF_ASPECT_0403( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_TEST );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + PCIF_TEST, val );
}

void Dack::PCIF_ASPECT_1609( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + PCIF_TEST );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + PCIF_TEST, val );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dack.h ===
#ifndef __DACK_H__
#define __DACK_H__

#define PALETTE_Y	0x01
#define PALETTE_Cb	0x02
#define PALETTE_Cr	0x03

class Dack
{
private:
	PUCHAR ioBase;
	UCHAR DigitalOutMode;

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	NTSTATUS PCIF_RESET( void );
	void PCIF_AMUTE_ON( void );
	void PCIF_AMUTE_OFF( void );
	void PCIF_AMUTE2_ON( void );
	void PCIF_AMUTE2_OFF( void );
	void PCIF_VSYNC_ON( void );
	void PCIF_VSYNC_OFF( void );
	void PCIF_PACK_START_ON( void );
	void PCIF_PACK_START_OFF( void );
	void PCIF_SET_DIGITAL_OUT( UCHAR mode );
	void PCIF_SET_DMA0_SIZE( ULONG dmaSize );
	void PCIF_SET_DMA1_SIZE( ULONG dmaSize );
	void PCIF_SET_DMA0_ADDR( ULONG dmaAddr );
	void PCIF_SET_DMA1_ADDR( ULONG dmaAddr );
	void PCIF_DMA0_START( void );
	void PCIF_DMA1_START( void );
	void PCIF_SET_PALETTE( UCHAR select, PUCHAR pPalette );
	void PCIF_GET_PALETTE( UCHAR select, PUCHAR pPalette );
	void PCIF_CHECK_SERIAL( void );
	void PCIF_DMA_ABORT( void );
	void PCIF_ALL_IFLAG_CLEAR( void );
	void PCIF_ASPECT_0403( void );
	void PCIF_ASPECT_1609( void );
};

#endif	// __DACK_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\debug.h ===
//***************************************************************************
//	Debug header
//
//***************************************************************************

#if DBG
void DebugDumpWriteData( PHW_STREAM_REQUEST_BLOCK pSrb );
void DebugDumpPackHeader( PHW_STREAM_REQUEST_BLOCK pSrb );
void DebugDumpKSTIME( PHW_STREAM_REQUEST_BLOCK pSrb );
char * DebugLLConvtoStr( ULONGLONG val, int base );
#endif
DWORD GgetSCR( void *pBuf );

#define TRAP DEBUG_BREAKPOINT();
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\decoder.h ===
//***************************************************************************
//	Decoder header
//
//***************************************************************************

extern DWORD GetCurrentTime_ms( void );
void decStopData( PHW_DEVICE_EXTENSION pHwDevExt, BOOL bKeep );
void decHighlight( PHW_DEVICE_EXTENSION pHwDevExt, PKSPROPERTY_SPHLI phli );
void decDisableInt( PHW_DEVICE_EXTENSION pHwDevExt );
void decGenericNormal( PHW_DEVICE_EXTENSION pHwDevExt );
void decGenericFreeze( PHW_DEVICE_EXTENSION pHwDevExt );
void decGenericSlow( PHW_DEVICE_EXTENSION pHwDevExt );
void decStopForFast( PHW_DEVICE_EXTENSION pHwDevExt );
void decResumeForFast( PHW_DEVICE_EXTENSION pHwDevExt );
void decFastNormal( PHW_DEVICE_EXTENSION pHwDevExt );
void decFastSlow( PHW_DEVICE_EXTENSION pHwDevExt );
void decFastFreeze( PHW_DEVICE_EXTENSION pHwDevExt );
void decFreezeFast( PHW_DEVICE_EXTENSION pHwDevExt );
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\decoder.cpp ===
//***************************************************************************
//	Decoder process
//
//***************************************************************************

#include "common.h"
#include "regs.h"

void decStopData( PHW_DEVICE_EXTENSION pHwDevExt, BOOL bKeep )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:decStopData()\r\n" ));

	pHwDevExt->ADec.AUDIO_ZR38521_STOPF();
	pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();

	if( !bKeep ) {
		pHwDevExt->VPro.VPRO_VIDEO_MUTE_ON();
		pHwDevExt->CPgd.CPGD_VIDEO_MUTE_ON();
	}

	pHwDevExt->VDec.VIDEO_DECODE_STOP();
	pHwDevExt->VDec.VIDEO_SYSTEM_STOP();
	pHwDevExt->VPro.SUBP_STC_OFF();

//	pHwDevExt->DAck.PCIF_DMA_ABORT();

	pHwDevExt->VDec.VIDEO_STD_CLEAR();
	pHwDevExt->VPro.SUBP_BUFF_CLEAR();
	pHwDevExt->VDec.VIDEO_SYSTEM_STOP();
	pHwDevExt->VDec.VIDEO_DECODE_INT_OFF();

	if( pHwDevExt->AudioMode == AUDIO_TYPE_AC3 )
		pHwDevExt->ADec.AUDIO_TC6800_INIT_AC3();
	else if( pHwDevExt->AudioMode == AUDIO_TYPE_PCM )
		pHwDevExt->ADec.AUDIO_TC6800_INIT_PCM();
	else
		TRAP;
}

void decHighlight( PHW_DEVICE_EXTENSION pHwDevExt, PKSPROPERTY_SPHLI phli )
{
//h	DebugPrint(( DebugLevelTrace, "TOSDVD:decHighlight\r\n" ));

	UCHAR ln_ctli[4];
	UCHAR px_ctlis[6];
	UCHAR px_ctlie[6];

	if( phli->StartX == phli->StopX && phli->StartY == phli->StopY ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  Highlight Off\r\n" ));
		pHwDevExt->VPro.SUBP_HLITE_OFF();
	}
	else {
		pHwDevExt->VPro.SUBP_HLITE_ON();
		ln_ctli[3] = (UCHAR)(( phli->StartY >> 8 ) & 0x03);
		ln_ctli[2] = (UCHAR)(phli->StartY & 0xff);
		ln_ctli[1] = (UCHAR)(( phli->StopY >> 8 ) & 0x03 | 0x20);
		ln_ctli[0] = (UCHAR)(phli->StopY & 0xff);

		px_ctlis[5] = (UCHAR)(( phli->StartX >> 8 ) & 0x03);
		px_ctlis[4] = (UCHAR)(phli->StartX & 0xff);
		px_ctlis[3] = (UCHAR)(phli->ColCon.emph2col << 4 | phli->ColCon.emph1col);
		px_ctlis[2] = (UCHAR)(phli->ColCon.patcol   << 4 | phli->ColCon.backcol);
		px_ctlis[1] = (UCHAR)(phli->ColCon.emph2con << 4 | phli->ColCon.emph1con);
		px_ctlis[0] = (UCHAR)(phli->ColCon.patcon   << 4 | phli->ColCon.backcon);

		px_ctlie[5] = (UCHAR)(( phli->StopX >> 8 ) & 0x03 | 0x08);
		px_ctlie[4] = (UCHAR)(phli->StopX & 0xff);
		px_ctlie[3] = 0;
		px_ctlie[2] = 0;
		px_ctlie[1] = 0;
		px_ctlie[0] = 0;

//h		DebugPrint( (DebugLevelTrace, "TOSDVD:  %d, %d - %d, %d : %02x%02x%02x%02x\r\n",
//h			phli->StartX, phli->StartY, phli->StopX, phli->StopY,
//h			px_ctlis[3], px_ctlis[2], px_ctlis[1], px_ctlis[0]
//h			) );

		pHwDevExt->VPro.SUBP_SET_PXCTLIE( px_ctlie );
		pHwDevExt->VPro.SUBP_SET_PXCTLIS( px_ctlis );
		pHwDevExt->VPro.SUBP_SET_LNCTLI( ln_ctli );
	}
}

void decDisableInt( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->VDec.VIDEO_ALL_INT_OFF();
	pHwDevExt->DAck.PCIF_VSYNC_OFF();
}

void decGenericNormal( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  decGenericNormal\r\n") );

	ULONG	TrickMode;
	ULONG	dwSTC;

	if( pHwDevExt->AudioMode == AUDIO_TYPE_AC3 )
		pHwDevExt->ADec.AUDIO_TC6800_INIT_AC3();
	else if( pHwDevExt->AudioMode == AUDIO_TYPE_PCM )
		pHwDevExt->ADec.AUDIO_TC6800_INIT_PCM();
	else
		TRAP;

	pHwDevExt->ADec.AUDIO_ZR38521_STOPF();
	pHwDevExt->VDec.VIDEO_PRSO_PS1();
	pHwDevExt->VDec.VIDEO_PLAY_NORMAL();

// Bad loop !!
	DWORD st, et;

	st = GetCurrentTime_ms();
	for( ; ; ) {
		KeStallExecutionProcessor( 1 );
		et = GetCurrentTime_ms();

		TrickMode = pHwDevExt->VDec.VIDEO_GET_TRICK_MODE();
		if( TrickMode == 0x07 )
			break;

		if( st + 2000 < et ) {
			TRAP;
			break;
		}
	}
	DebugPrint( (DebugLevelTrace, "TOSDVD:  wait %dms\r\n", et - st ) );

	dwSTC = pHwDevExt->VDec.VIDEO_GET_STCA();
	pHwDevExt->ADec.AUDIO_ZR38521_VDSCR_ON( dwSTC );
	pHwDevExt->ADec.AUDIO_ZR38521_PLAY();
	pHwDevExt->VDec.VIDEO_UFLOW_INT_ON();

	DebugPrint(( DebugLevelTrace, "TOSDVD:  STC 0x%x( %d )\r\n", dwSTC, dwSTC ));
}

void decGenericFreeze( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:  decGenericFreeze\r\n" ));
	pHwDevExt->VDec.VIDEO_PLAY_FREEZE();
	pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
	pHwDevExt->ADec.AUDIO_ZR38521_STOP();
}

void decGenericSlow( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  decGenericSlow\r\n") );
	pHwDevExt->VDec.VIDEO_PRSO_PS1();
	pHwDevExt->VPro.SUBP_SET_AUDIO_NON();
	pHwDevExt->VDec.VIDEO_PLAY_SLOW( (UCHAR)(pHwDevExt->Rate/10000) );
	pHwDevExt->ADec.AUDIO_ZR38521_STOP();
	pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
	pHwDevExt->VDec.VIDEO_UFLOW_INT_ON();
}

void decStopForFast( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:  decGenericFast\r\n" ));
	pHwDevExt->VDec.VIDEO_UFLOW_INT_OFF();
	pHwDevExt->VDec.VIDEO_SET_STCA( (ULONG)(pHwDevExt->StartTime / 1000 * 9) );
	pHwDevExt->VDec.VIDEO_PRSO_NON();
	pHwDevExt->VDec.VIDEO_PLAY_FAST( FAST_ONLYI );
	pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
	pHwDevExt->ADec.AUDIO_ZR38521_STOP();
	pHwDevExt->VPro.SUBP_MUTE_ON();
	pHwDevExt->VPro.SUBP_STC_OFF();
	pHwDevExt->VDec.VIDEO_DECODE_STOP();
}

void decResumeForFast( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->VDec.VIDEO_STD_CLEAR();
	pHwDevExt->ADec.AUDIO_ZR38521_STOPF();
	pHwDevExt->VPro.SUBP_BUFF_CLEAR();
	pHwDevExt->VDec.VIDEO_DECODE_START();
}

void decFastNormal( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  decFastNormal\r\n") );
	pHwDevExt->VDec.VIDEO_PRSO_PS1();
	pHwDevExt->dwSTCtemp = pHwDevExt->VDec.VIDEO_GET_STCA();
}

void decFastSlow( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  decFastSlow\r\n") );
	pHwDevExt->VDec.VIDEO_PRSO_PS1();
	pHwDevExt->VPro.SUBP_SET_AUDIO_NON();
	pHwDevExt->dwSTCtemp = pHwDevExt->VDec.VIDEO_GET_STCA();
}

void decFastFreeze( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:  decFastFreeze\r\n" ));

	pHwDevExt->dwSTCinPause = pHwDevExt->VDec.VIDEO_GET_STCA();
	pHwDevExt->VDec.VIDEO_PLAY_FREEZE();
}

void decFreezeFast( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:  decFreezeFast\r\n" ));
	pHwDevExt->VDec.VIDEO_SET_STCA( pHwDevExt->dwSTCinPause );
	pHwDevExt->VDec.VIDEO_PLAY_FAST( FAST_ONLYI );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\debug.cpp ===
//***************************************************************************
//	Debug
//
//***************************************************************************

#include "common.h"

typedef struct tagPack {
	DWORD	pack_start_code;
	BYTE	scr_byte[6];
	DWORD	program_mux_rate;	// ۂɂ͓ 3 oCg
} PACK, *PPACK;

#if DBG

void DebugDumpWriteData( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	ULONG	i;
	unsigned char	*p;
	PKSSTREAM_HEADER pStruc;
//	PHYSICAL_ADDRESS	phyadd;
	static DWORD	scr;

//	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelVerbose, "TOSDVD:  SRB pointer 0x%x\r\n", pSrb ) );

	DebugPrint( (DebugLevelVerbose, "TOSDVD:  NumberOfPhysicalPages %d\r\n", pSrb->NumberOfPhysicalPages ) );
	for( i = 0; i < pSrb->NumberOfPhysicalPages; i++ ) {
		DebugPrint( (DebugLevelVerbose, "TOSDVD:  PhysicalAddress[%d] 0x%x\r\n", i, pSrb->ScatterGatherBuffer[i].PhysicalAddress ) );
		DebugPrint( (DebugLevelVerbose, "TOSDVD:  Length[%d] %d(0x%x)\r\n", i, pSrb->ScatterGatherBuffer[i].Length, pSrb->ScatterGatherBuffer[i].Length ) );
	}

	DebugPrint( (DebugLevelVerbose, "TOSDVD:NumberOfBuffers %d\r\n", pSrb->NumberOfBuffers ) );
	DebugPrint( (DebugLevelVerbose, "TOSDVD:NumberOfBytesToTransfer %d\r\n", pSrb->NumberOfBytesToTransfer ) );

	for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
		DebugPrint( (DebugLevelVerbose, "TOSDVD:DataBufferArray[%d] 0x%x\r\n", i, &(pSrb->CommandData.DataBufferArray[i]) ) );

		pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];

		DebugPrint( (DebugLevelVerbose, "TOSDVD:  Time 0x%x 0x%x\r\n", (DWORD)( ((ULONGLONG)pStruc->PresentationTime.Time) >> 32 ), (DWORD)( pStruc->PresentationTime.Time ) ) );
		DebugPrint( (DebugLevelVerbose, "TOSDVD:  Numerator 0x%x\r\n", pStruc->PresentationTime.Numerator ) );
		DebugPrint( (DebugLevelVerbose, "TOSDVD:  Denominator 0x%x\r\n", pStruc->PresentationTime.Denominator ) );
		if( pStruc->PresentationTime.Denominator != 0 ) {
			DebugPrint( (DebugLevelVerbose, "TOSDVD:    ? Time ? %d\r\n",
				(DWORD)( pStruc->PresentationTime.Time * pStruc->PresentationTime.Numerator / pStruc->PresentationTime.Denominator )
				) );
		}
		DebugPrint( (DebugLevelVerbose, "TOSDVD:  Duration 0x%x 0x%x\r\n", (DWORD)( ((ULONGLONG)pStruc->Duration) >> 32), (DWORD)(pStruc->Duration) ) );
		// kato //DebugPrint( (DebugLevelVerbose, "TOSDVD:  DataSize %d\r\n", pStruc->DataSize ) );
		DebugPrint( (DebugLevelVerbose, "TOSDVD:  DataUsed %d\r\n", pStruc->DataUsed ) );

		DebugPrint( (DebugLevelVerbose, "TOSDVD:  Data 0x%x\r\n", pStruc->Data ) );
		//phyadd = MmGetPhysicalAddress( pStruc->Data );
		//DebugPrint( (DebugLevelVerbose, "TOSDVD:  Physical address 0x%x\r\n", phyadd.LowPart ) );
		p = (PUCHAR)pStruc->Data;

// BGP - HACK - this should be fixed

                p += 14;

		DebugPrint( (DebugLevelVerbose, "TOSDVD:    %02x %02x %02x %02x %02x %02x %02x %02x\r\n",
			*(p+0), *(p+1), *(p+2), *(p+3),
			*(p+4), *(p+5), *(p+6), *(p+7)
				) );
		if( p != NULL ) {
			scr = GgetSCR( p - 14 );
			DebugPrint( (DebugLevelVerbose, "TOSDVD:  SCR 0x%x( %d )\r\n", scr, scr ) );
		}

//		if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY ) {
//			TRAP;
//		}
//		if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY ) {
//			TRAP;
//		}
//		if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE ) {
//			TRAP;
//		}

	}

//	if( pSrb->NumberOfBuffers > 1 )
//		TRAP;

}

//void DebugDumpPackHeader( PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//	ULONG	i, j;
//	unsigned char	*p;
//	PKSSTREAM_HEADER pStruc;
//	DWORD	scr;
//	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
//	static int count = 0;
//
//	for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
//		pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
//		p = pStruc->Data;
//		if( p != NULL ) {
//			scr = GgetSCR( p);
//
//			if( scr < 0x100 ) {
//				for( j = 0; j < 32; j++ )
//					pHwDevExt->dmp[count++] = 0xaa;
//			}
//			if( count >= 32*10000 )
//				TRAP;
//
//			for( j = 0; j < 32; j++ )
//				pHwDevExt->dmp[count++] = *(p+j);
//			if( count >= 32*10000 )
//				TRAP;
//			pHwDevExt->dmp[count] = 0xff;
//			pHwDevExt->dmp[count+1] = 0xff;
//			pHwDevExt->dmp[count+2] = 0xff;
//			pHwDevExt->dmp[count+3] = 0xff;
//		}
//	}
//}


//void DebugDumpKSTIME( PHW_STREAM_REQUEST_BLOCK pSrb )
//{
//	int j;
//	PKSSTREAM_HEADER pStruc;
//	PUCHAR p;
//	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
//	static int count = 0;
//
//	pStruc = (PKSSTREAM_HEADER)pSrb->CommandData.DataBufferArray;
//
//	if( pStruc->OptionsFlags == 0 ) {
//		p = (PUCHAR)&pStruc[0];
//
//		for( j = 0; j < 16; j++ )
//			pHwDevExt->dmp2[count++] = *(p+j);
//		if( count >= 16*10000 ) {
//			TRAP;
//			count = 0;
//		}
//	}
//}

char * DebugLLConvtoStr( ULONGLONG val, int base )
{
	static char str[5][100];
	static int cstr = -1;

	int count = 0;
	int digit;
	char tmp[100];
	int i;

	if( ++cstr >= 5 )
		cstr = 0;

	if( base == 10 ) {
		for( ; ; ) {
			digit = (int)( val % 10 );
			tmp[count++] = (char)( digit + '0' );
			val /= 10;
			if( val == 0 )
				break;
		}
	}
	else if( base == 16 ) {
		for( ; ; ) {
			digit = (int)( val & 0xF );
			if( digit < 10 )
				tmp[count++] = (char)( digit + '0' );
			else
				tmp[count++] = (char)( digit - 10 + 'a' );
			val >>= 4;
			if( val == 0 )
				break;
		}
	}
	else
		TRAP;

	for( i = 0; i < count; i++ ) {
		str[cstr][i] = tmp[count-i-1];
	}
	str[cstr][i] = '\0';

	return str[cstr];
}

#endif


DWORD GgetSCR( void *pBuf )
{
	PPACK	pPack = (PPACK)pBuf;
	DWORD	scr;

	if( ( (DWORD)pPack->scr_byte[0] & 0xc0L ) == 0 ) {	// MPEG1
		scr  = ( (DWORD)pPack->scr_byte[0] & 0x6L ) << 29;
		scr |= ( (DWORD)pPack->scr_byte[1] ) << 22;
		scr |= ( (DWORD)pPack->scr_byte[2] & 0xfeL ) << 14;
		scr |= ( (DWORD)pPack->scr_byte[3] ) << 7;
		scr |= ( (DWORD)pPack->scr_byte[4] & 0xfeL ) >> 1;
	}
	else {	// MPEG2 or DVD
		scr  = ( (DWORD)pPack->scr_byte[0] & 0x18L ) << 27;
		scr |= ( (DWORD)pPack->scr_byte[0] & 0x3L ) << 28;
		scr |= ( (DWORD)pPack->scr_byte[1] ) << 20;
		scr |= ( (DWORD)pPack->scr_byte[2] & 0xf8L ) << 12;
		scr |= ( (DWORD)pPack->scr_byte[2] & 0x3L ) << 13;
		scr |= ( (DWORD)pPack->scr_byte[3] ) << 5;
		scr |= ( (DWORD)pPack->scr_byte[4] & 0xf8L ) >> 3;
	}

	return scr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdado.cpp ===
//***************************************************************************
//
//	DVDADO.CPP
//		Audio Routine
//
//	Author:	
//		TOSHIBA [PCS](PSY) Satoshi Watanabe
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//		02/24/97	converted from VxD source
//		03/09/97	converted C++ class
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "dvdado.h"
#include "zrnpch6.h"
#include "dack.h"

void ADecoder::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;

// shoud be remove when release
//	ASSERT( sizeof(ZRN_AC3_DEC) == 3891 );
//	ASSERT( sizeof(ZRN_AC3_SPD) == 410 );
//	ASSERT( sizeof(ZRN_PCM) == 6965 );

}

void ADecoder::SetParam( ULONG aMode, ULONG aFreq, ULONG aType, BOOL aCopy, Dack *pDak )
{
	AudioMode = aMode;
	AudioFreq = aFreq;
	AudioType = aType;
	AudioCopy = aCopy;
	pDack = pDak;
}

// ***************************************************************************
//        T C 6 8 0 0 A F
// ***************************************************************************

void ADecoder::AUDIO_TC6800_INIT_PCM()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0xa0 );

	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x80 );
}

void ADecoder::AUDIO_TC6800_INIT_AC3()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x20 );

	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );
}

void ADecoder::AUDIO_TC6800_INIT_MPEG()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x20 );

	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );
}

void ADecoder::AUDIO_TC6800_DATA_OFF()
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x66 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x60 );
}

// ***************************************************************************
//        Z R 3 8 5 2 1 
// ***************************************************************************

void ADecoder::AUDIO_ZR385_OUT( UCHAR val )
{
	pDack->PCIF_CHECK_SERIAL();

	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x08 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

// necessary?
	pDack->PCIF_CHECK_SERIAL();
}

void ADecoder::AUDIO_ZR385_DOWNLOAD( PUCHAR pData, ULONG size )
{
	ULONG i;

	for( i = 0; i < size; i++ )
		AUDIO_ZR385_OUT( *pData++ );
}

void ADecoder::AUDIO_ZR38521_BOOT_AC3()
{
	AUDIO_ZR385_DOWNLOAD( ZRN_AC3_DEC, sizeof(ZRN_AC3_DEC) );

	if( AudioType == AUDIO_OUT_DIGITAL )
		AUDIO_ZR385_DOWNLOAD( ZRN_AC3_SPD, sizeof(ZRN_AC3_SPD) );
}

void ADecoder::AUDIO_ZR38521_BOOT_MPEG()
{

// not support!

}

void ADecoder::AUDIO_ZR38521_BOOT_PCM()
{
	AUDIO_ZR385_DOWNLOAD( ZRN_PCM, sizeof(ZRN_PCM) );
}

NTSTATUS ADecoder::AUDIO_ZR38521_CFG()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x82 );
	AUDIO_ZR385_OUT( 0x50 );
	AUDIO_ZR385_OUT( 0x40 );
	AUDIO_ZR385_OUT( 0x09 );
	AUDIO_ZR385_OUT( 0x09 );

	if( AudioType == AUDIO_OUT_DIGITAL )
		AUDIO_ZR385_OUT( 0x70 );
	else
		AUDIO_ZR385_OUT( 0x50 );

	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( 0x04 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_PCMX()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x88 );
	AUDIO_ZR385_OUT( 0x81 );
	AUDIO_ZR385_OUT( 0x82 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0xff );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_AC3()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x85 );
	AUDIO_ZR385_OUT( 0x08 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x11 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0xff );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_MPEG1()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x87 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0xff );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_PLAY()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8a );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_MUTE_OFF()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x89 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_MUTE_ON()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8b );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STOP()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8c );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STOPF()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x8d );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STCR()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x94 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf6 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_VDSCR_ON( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_VDSCR_OFF( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0x80 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_AVSYNC_OFF( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0xc0 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_AVSYNC_ON( ULONG stc )
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x02 );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 25 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 17 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 9 ) & 0xff ) );
	AUDIO_ZR385_OUT( (UCHAR)( ( stc >> 1 ) & 0xff ) );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xc8 );
	AUDIO_ZR385_OUT( 0x40 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_STAT( PULONG pDiff )
{
	UCHAR val;

	if( pDiff == NULL )
		return STATUS_UNSUCCESSFUL;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 ) {
		*pDiff = 0x0908;
		return STATUS_UNSUCCESSFUL;
	}

	*pDiff = 0;

	AUDIO_ZR385_OUT( 0x8e );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

// Check DIFTH
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	*pDiff |= (ULONG)val << 8;

	AUDIO_ZR385_OUT( 0x00 );

// Check DIFTL
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	*pDiff |= val & 0xff;

	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

NTSTATUS ADecoder::AUDIO_ZR38521_KCOEF()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 )
		return STATUS_UNSUCCESSFUL;

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0xf0 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x03 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x59 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x7f );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x59 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

void ADecoder::AUDIO_ZR38521_REPEAT_02()
{

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0xc3 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x13 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xd0 );
	AUDIO_ZR385_OUT( 0x44 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
}

void ADecoder::AUDIO_ZR38521_REPEAT_16()
{

	AUDIO_ZR385_OUT( 0x93 );
	AUDIO_ZR385_OUT( 0x0d );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0xc3 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x01 );
	AUDIO_ZR385_OUT( 0x13 );
	AUDIO_ZR385_OUT( 0xfb );
	AUDIO_ZR385_OUT( 0xd3 );
	AUDIO_ZR385_OUT( 0xc4 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
}

NTSTATUS ADecoder::AUDIO_ZR38521_BFST( PULONG pErrCode )
{
	UCHAR val;

	if( pErrCode == NULL )
		return STATUS_UNSUCCESSFUL;

	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );

	if( val != 0x80 ) {
		*pErrCode = 0x0908;
		return STATUS_UNSUCCESSFUL;
	}

	*pErrCode = 0;

	AUDIO_ZR385_OUT( 0x8e );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

// Check IST
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	val &= 0x07;
	*pErrCode |= (ULONG)val << 8;

	AUDIO_ZR385_OUT( 0x00 );

// Check BFST
	pDack->PCIF_CHECK_SERIAL();

	val = READ_PORT_UCHAR( ioBase + PCIF_SR );
	val &= 0x07;
	*pErrCode |= val;

	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );
	AUDIO_ZR385_OUT( 0x00 );

	return STATUS_SUCCESS;
}

// ***************************************************************************
//        T C 9 4 2 5 F
// ***************************************************************************

void ADecoder::AUDIO_TC9425_INIT_DIGITAL()
{
	UCHAR val;

	val = 0;

	if( AudioType != AUDIO_OUT_ANALOG )
		if( AudioMode == AUDIO_TYPE_AC3 )
			val |= 0x40;
	if( AudioCopy != AUDIO_COPY_ON )
			val |= 0x20;
//--- 97.09.15 K.Chujo; for beta 3, always audio copy protect enable.
	val &= 0xDF;
//--- End.

//  COPY, EMPH
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

// Category Code, LBIT
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x99 );

// Channel Num
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	if( AudioFreq == AUDIO_FS_32 )
		val = 0xc0;
	else if( AudioFreq == AUDIO_FS_44 )
		val = 0x00;
	else if( AudioFreq == AUDIO_FS_48 )
		val = 0x40;
	else
		val = 0x40;

// FS1, FS2, CKA1, CKA2
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );
}

void ADecoder::AUDIO_TC9425_INIT_ANALOG()
{
	UCHAR val;

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

// MONO, CHS, EM, EMP
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0xc0 );

//
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	if( AudioType == AUDIO_OUT_DIGITAL )
		val = 0x79;
	else
		val = 0x69;
	if( AudioFreq == AUDIO_FS_96 )
		val |= 0x04;
	else if( AudioFreq == AUDIO_FS_48 )
		val |= 0x04;

// BIT, DOIN, DOSEL, IFSEL, RLS
	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, val );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0xc0 );

	AUDIO_TC9425_SET_VOLUME( AudioVolume );
}

void ADecoder::AUDIO_TC9425_SET_VOLUME( ULONG vol )
{
	UCHAR ucvol;

	AudioVolume = vol;

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x00 );

	ucvol = (UCHAR)vol;
	ucvol = INVERSE_BYTE( ucvol );
	ucvol = (UCHAR)( ucvol >> 1 );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x38 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, ucvol );

	pDack->PCIF_CHECK_SERIAL();
	WRITE_PORT_UCHAR( ioBase + PCIF_SCNT, 0x72 );
	WRITE_PORT_UCHAR( ioBase + PCIF_SW, 0x40 );
}

UCHAR ADecoder::INVERSE_BYTE( UCHAR uc )
{
	ULONG i;
	UCHAR retch = 0;

	for( i = 0; i < 8; i++ )
		retch |= ( uc & 0x01 ) << ( 7 - i );

	return retch;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\devque.cpp ===
//***************************************************************************
//	Device queue process
//
//***************************************************************************

#include "common.h"

#include "que.h"

void DeviceQueue::init( void )
{
	count = 0;
	top = bottom = NULL;
}

void DeviceQueue::put( PHW_STREAM_REQUEST_BLOCK pOrigin, PHW_STREAM_REQUEST_BLOCK pSrb )
{
	pSrb->NextSRB = NULL;
	if ( top == NULL ) {
		top = bottom = pSrb;
		count++;
		return;
	}

	bottom->NextSRB = pSrb;
	bottom = pSrb;
	count++;

	return;
}

void DeviceQueue::put_first( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	// This routine does not called
}

void DeviceQueue::put_from_bottom( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	// This routine does not called
}

void DeviceQueue::put_video( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	SRBIndex( pSrb ) = 0;
	SRBpfnEndSrb( pSrb ) = NULL;
	SRBparamSrb( pSrb ) = NULL;

	put( top, pSrb );
}

void DeviceQueue::put_audio( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	SRBIndex( pSrb ) = 0;
	SRBpfnEndSrb( pSrb ) = NULL;
	SRBparamSrb( pSrb ) = NULL;

	put( top, pSrb );
}

void DeviceQueue::put_subpic( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	SRBIndex( pSrb ) = 0;
	SRBpfnEndSrb( pSrb ) = NULL;
	SRBparamSrb( pSrb ) = NULL;

	put( top, pSrb );
}

PHW_STREAM_REQUEST_BLOCK DeviceQueue::get( PULONG index, PBOOLEAN last )
{
	PHW_STREAM_REQUEST_BLOCK srb;

	if ( top == NULL )
		return NULL;

	srb = top;
	(*index) = SRBIndex( srb );

// debug
#if DBG
	if( srb->NumberOfPhysicalPages == 0 )
		TRAP;
#endif

	if ( SRBIndex( srb ) != ( srb->NumberOfPhysicalPages - 1 ) ) {
		(*last) = FALSE;
		SRBIndex( srb )++;
		return srb;
	}

	(*last) = TRUE;

	top = top->NextSRB;

	count--;
	if ( count == 0 )
		top = bottom = NULL;

	return srb;
}

PHW_STREAM_REQUEST_BLOCK DeviceQueue::refer1st( PULONG index, PBOOLEAN last )
{
	PHW_STREAM_REQUEST_BLOCK srb;

	if( top == NULL )
		return NULL;

	srb = top;
	(*index) = SRBIndex( srb );

	if ( SRBIndex( srb ) != ( srb->NumberOfPhysicalPages - 1 ) ) {
		(*last) = FALSE;
	}
	else {
		(*last) = TRUE;
	}

	return srb;
}

PHW_STREAM_REQUEST_BLOCK DeviceQueue::refer2nd( PULONG index, PBOOLEAN last )
{
	PHW_STREAM_REQUEST_BLOCK srb;

	if( top == NULL )
		return NULL;

	srb = top;
	if( SRBIndex( srb ) != ( srb->NumberOfPhysicalPages - 1) ) {
		(*index) = SRBIndex( srb ) + 1;
		if( (SRBIndex( srb ) + 1) != ( srb->NumberOfPhysicalPages - 1 ) ) {
			(*last) = FALSE;
		}
		else {
			(*last) = TRUE;
		}
	}
	else {
		srb = srb->NextSRB;
		if( srb == NULL )
			return NULL;
		(*index) = SRBIndex( srb );
		if( SRBIndex( srb ) != ( srb->NumberOfPhysicalPages - 1 ) ) {
			(*last) = FALSE;
		}
		else {
			(*last) = TRUE;
		}
	}
	return srb;
}

void DeviceQueue::remove( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	if ( top == NULL )
		return;

	if( top == pSrb ) {
		top = top->NextSRB;
		count--;
		if ( count == 0 )
			top = bottom = NULL;

		DebugPrint(( DebugLevelTrace, "TOSDVD:DeviceQueue::remove srb = 0x%x\r\n", pSrb ));

		return;
	}

	PHW_STREAM_REQUEST_BLOCK srbPrev;
	PHW_STREAM_REQUEST_BLOCK srb;

	srbPrev = top;
	srb = srbPrev->NextSRB;

	while ( srb != NULL ) {
		if( srb == pSrb ) {
			srbPrev->NextSRB = srb->NextSRB;
			if( srbPrev->NextSRB == bottom )
				bottom = srbPrev;
			count--;

			DebugPrint(( DebugLevelTrace, "TOSDVD:DeviceQueue::remove srb = 0x%x\r\n", pSrb ));

			break;
		}
		srbPrev = srb;
		srb = srbPrev->NextSRB;
	}
}

BOOL DeviceQueue::setEndAddress( PHW_TIMER_ROUTINE pfn, PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_STREAM_REQUEST_BLOCK srb;

	srb = top;
	while( srb != NULL ) {
		if( srb->NextSRB == NULL ) {
			SRBpfnEndSrb( srb ) = pfn;
			SRBparamSrb( srb ) = pSrb;

			DebugPrint(( DebugLevelTrace, "TOSDVD:setEndAddress srb = 0x%x\r\n", srb ));

			return TRUE;
		}
		srb = srb->NextSRB;
	}
	return FALSE;
}

//--- 97.09.14 K.Chujo
BOOL DeviceQueue::isEmpty( void )
{
	if( top==NULL )
		return TRUE;
	else
		return FALSE;
}

ULONG DeviceQueue::getCount( void )
{
	return( count );
}
//--- End.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdado.h ===
//***************************************************************************
//
//	DVDADO.H
//
//	Author:
//		TOSHIBA [PCS](PSY) Satoshi Watanabe
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//		02/24/97	converted from VxD source
//		03/09/97	converted C++ class
//
//***************************************************************************

#ifndef __DVDADO_H__
#define __DVDADO_H__

class ADecoder {
private:
	PUCHAR	ioBase;
	ULONG	AudioMode;	// AC3, PCM, ...
	ULONG	AudioFreq;	// audio frequency
	ULONG	AudioType;	// audio type - analog, digital, ...
	BOOL	AudioCopy;	// audio copy
	ULONG	AudioVolume;
	Dack	*pDack;

	UCHAR INVERSE_BYTE( UCHAR uc );

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void SetParam( ULONG aMode, ULONG aFreq, ULONG aType, BOOL aCopy, Dack *pDack );

	// ***************************************************************************
	//        T C 6 8 0 0 A F
	// ***************************************************************************

	void AUDIO_TC6800_INIT_PCM();
	void AUDIO_TC6800_INIT_AC3();
	void AUDIO_TC6800_INIT_MPEG();
	void AUDIO_TC6800_DATA_OFF();

	// ***************************************************************************
	//        Z R 3 8 5 2 1 
	// ***************************************************************************

	void AUDIO_ZR385_OUT( UCHAR val );
	void AUDIO_ZR385_DOWNLOAD( PUCHAR pData, ULONG size );
	void AUDIO_ZR38521_BOOT_AC3();
	void AUDIO_ZR38521_BOOT_MPEG();
	void AUDIO_ZR38521_BOOT_PCM();
	NTSTATUS AUDIO_ZR38521_CFG();
	NTSTATUS AUDIO_ZR38521_PCMX();
	NTSTATUS AUDIO_ZR38521_AC3();
	NTSTATUS AUDIO_ZR38521_MPEG1();
	NTSTATUS AUDIO_ZR38521_PLAY();
	NTSTATUS AUDIO_ZR38521_MUTE_OFF();
	NTSTATUS AUDIO_ZR38521_MUTE_ON();
	NTSTATUS AUDIO_ZR38521_STOP();
	NTSTATUS AUDIO_ZR38521_STOPF();
	NTSTATUS AUDIO_ZR38521_STCR();
	NTSTATUS AUDIO_ZR38521_VDSCR_ON( ULONG stc );
	NTSTATUS AUDIO_ZR38521_VDSCR_OFF( ULONG stc );
	NTSTATUS AUDIO_ZR38521_AVSYNC_OFF( ULONG stc );
	NTSTATUS AUDIO_ZR38521_AVSYNC_ON( ULONG stc );
	NTSTATUS AUDIO_ZR38521_STAT( PULONG pDiff );
	NTSTATUS AUDIO_ZR38521_KCOEF();
	void AUDIO_ZR38521_REPEAT_02();
	void AUDIO_ZR38521_REPEAT_16();
	NTSTATUS AUDIO_ZR38521_BFST( PULONG pErrCode );

	// ***************************************************************************
	//        T C 9 4 2 5 F
	// ***************************************************************************

	void AUDIO_TC9425_INIT_DIGITAL();
	void AUDIO_TC9425_INIT_ANALOG();
	void AUDIO_TC9425_SET_VOLUME( ULONG vol );

};

#endif	// __DVDADO_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdcmd.cpp ===
//***************************************************************************
//	Command process
//
//***************************************************************************

extern "C" {
#include <wdmwarn4.h>
#include <strmini.h>
#include <mmsystem.h>
}

#include "common.h"

#include "regs.h"
#include "cdack.h"
#include "cvdec.h"
#include "cvpro.h"
#include "cadec.h"
#include "ccpgd.h"
#include "dvdcmd.h"

#include "strmid.h"

extern "C" {
//#include "dxapi.h"
#include "ddkmapi.h"
}

extern void USCC_on( PHW_DEVICE_EXTENSION pHwDevExt );
extern void USCC_discont( PHW_DEVICE_EXTENSION pHwDevExt );


HANDLE	hClk;
HANDLE	hMaster;

BOOL fClkPause;
ULONGLONG LastSysTime = 0;
ULONGLONG PauseTime = 0;

static ULONGLONG LastStamp;
static ULONGLONG LastSys;
static BOOLEAN fValid;
extern BOOLEAN fProgrammed;
extern BOOLEAN fStarted;
BOOLEAN fProgrammed;
BOOLEAN fStarted;
static ULONGLONG StartSys;

KSPIN_MEDIUM VPMedium = {
	STATIC_KSMEDIUMSETID_VPBus,
	0,
	0
};


/*
** AdapterCancelPacket()
*/
extern "C" VOID STREAMAPI AdapterCancelPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint(( DebugLevelVerbose, "TOSDVD:AdapterCancelPacket\r\n" ));
	DebugPrint(( DebugLevelVerbose, "TOSDVD:  pSrb = 0x%x\r\n", pSrb ));

	if( pHwDevExt->pSrbDMA0 == pSrb ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  pSrb == pSrbDMA0\r\n" ) );
		pHwDevExt->pSrbDMA0 = NULL;
		pHwDevExt->fSrbDMA0last = FALSE;
	}
	if( pHwDevExt->pSrbDMA1 == pSrb ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  pSrb == pSrbDMA1\r\n" ) );
		pHwDevExt->pSrbDMA1 = NULL;
		pHwDevExt->fSrbDMA1last = FALSE;
	}

	pSrb->Status = STATUS_CANCELLED;

	switch (pSrb->Flags & (SRB_HW_FLAGS_DATA_TRANSFER |
								SRB_HW_FLAGS_STREAM_REQUEST)) {
		//
		// find all stream commands, and do stream notifications
		//

	  case SRB_HW_FLAGS_STREAM_REQUEST | SRB_HW_FLAGS_DATA_TRANSFER:

		DebugPrint(( DebugLevelVerbose, "TOSDVD:    SRB_HW_FLAGS_STREAM_REQUEST | SRB_HW_FLAGS_DATA_TRANSFER\r\n", pSrb ));

//		StreamClassStreamNotification( ReadyForNextStreamDataRequest,
//										pSrb->StreamObject);

		pHwDevExt->DevQue.remove( pSrb );
		pHwDevExt->CCQue.remove( pSrb );

		StreamClassStreamNotification( StreamRequestComplete,
										pSrb->StreamObject,
										pSrb);
		break;

	  case SRB_HW_FLAGS_STREAM_REQUEST:

		DebugPrint( (DebugLevelTrace, "TOSDVD:    SRB_HW_FLAGS_STREAM_REQUEST\r\n", pSrb ) );

		StreamClassStreamNotification( ReadyForNextStreamControlRequest,
										pSrb->StreamObject);

		StreamClassStreamNotification( StreamRequestComplete,
										pSrb->StreamObject,
										pSrb);
		break;

	  default:

		DebugPrint( (DebugLevelTrace, "TOSDVD:    default\r\n", pSrb ) );

		StreamClassDeviceNotification( ReadyForNextDeviceRequest,
										pSrb->HwDeviceExtension );
		StreamClassDeviceNotification( DeviceRequestComplete,
										pSrb->HwDeviceExtension,
										pSrb );
		break;
	}
}

/*
** AdapterTimeoutPacket()
*/
extern "C" VOID STREAMAPI AdapterTimeoutPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelTrace, "TOSDVD:AdapterTimeoutPacket\r\n") );

	if( pHwDevExt->PlayMode == PLAY_MODE_FREEZE ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  pause mode\r\n") );
		pSrb->TimeoutCounter = pSrb->TimeoutOriginal;
		return;
	}

	TRAP;

//	pSrb->TimeoutCounter = pSrb->TimeoutOriginal;

	if( pHwDevExt->pSrbDMA0 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  pSrbDMA0 exist\r\n" ));
		pHwDevExt->pSrbDMA0 = NULL;
		pHwDevExt->fSrbDMA0last = FALSE;
	}
	if( pHwDevExt->pSrbDMA1 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  pSrbDMA1 exist\r\n" ));
		pHwDevExt->pSrbDMA1 = NULL;
		pHwDevExt->fSrbDMA1last = FALSE;
	}

	if( pHwDevExt->pstroVid ) {
		StreamClassScheduleTimer(
			pHwDevExt->pstroVid,
			pHwDevExt,
			0,
			NULL,
			pHwDevExt->pstroVid
			);
	}
	if( pHwDevExt->pstroAud ) {
		StreamClassScheduleTimer(
			pHwDevExt->pstroAud,
			pHwDevExt,
			0,
			NULL,
			pHwDevExt->pstroAud
			);
	}
	if( pHwDevExt->pstroSP ) {
		StreamClassScheduleTimer(
			pHwDevExt->pstroSP,
			pHwDevExt,
			0,
			NULL,
			pHwDevExt->pstroSP
			);
	}

	pHwDevExt->DevQue.init();
	pHwDevExt->CCQue.init();

	pHwDevExt->pSrbCpp = NULL;
	pHwDevExt->bDMAstop = FALSE;

	StreamClassAbortOutstandingRequests( pHwDevExt, NULL, STATUS_CANCELLED );

}


/*
** AdapterReceivePacket()
*/
extern "C" VOID STREAMAPI AdapterReceivePacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
//	DWORD st, et;

	DebugPrint( (DebugLevelTrace, "TOSDVD:AdapterReceivePacket\r\n") );

	switch( pSrb->Command ){
		case SRB_GET_STREAM_INFO:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_INFO\r\n") );
			AdapterStreamInfo( pSrb );
			break;

		case SRB_OPEN_STREAM:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_OPEN_STREAM\r\n") );
			AdapterOpenStream( pSrb );
			break;

		case SRB_CLOSE_STREAM:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_CLOSE_STREAM\r\n") );
			AdapterCloseStream( pSrb );
			break;

		case SRB_INITIALIZE_DEVICE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_INITIALIZE_DEVICE\r\n") );

			//
			// schedule a low priority callback to get the config
			// space.  processing will continue when this runs.
			//

			StreamClassCallAtNewPriority(
				NULL,
				pSrb->HwDeviceExtension,
				Low,
				(PHW_PRIORITY_ROUTINE) GetPCIConfigSpace,
				pSrb
			);

			return;

//			st = GetCurrentTime_ms();
//
//			HwInitialize( pSrb );
//
//			et = GetCurrentTime_ms();
//			DebugPrint( (DebugLevelTrace, "TOSDVD:init %dms\r\n", et - st ) );
//
//			break;

		case SRB_OPEN_DEVICE_INSTANCE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_OPEN_DEVICE_INSTANCE\r\n") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_CLOSE_DEVICE_INSTANCE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_CLOSE_DEVICE_INSTANCE\r\n") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_GET_DEVICE_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_DEVICE_PROPERTY\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_DEVICE_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_DEVICE_PROPERTY\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_CHANGE_POWER_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_CHANGE_POWER_STATE\r\n") );

			if (pSrb->CommandData.DeviceState == PowerDeviceD0) {

				//
				// bugbug - need to turn power back on here.
				//

			} else {

				//
				// bugbug - need to turn power off here, as well as
				// disabling interrupts.
				//

				decDisableInt( pHwDevExt );
			}

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNINITIALIZE_DEVICE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_UNINITIALIZE_DEVICE\r\n") );

			decDisableInt( pHwDevExt );

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNKNOWN_DEVICE_COMMAND:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_UNKNOWN_DEVICE_COMMAND\r\n") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

//		case SRB_QUERY_UNLOAD:
//			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_QUERY_UNLOAD\r\n") );
//			pSrb->Status = STATUS_NOT_IMPLEMENTED;
//			break;

		case SRB_PAGING_OUT_DRIVER:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_PAGING_OUT_DRIVER\r\n") );

			decDisableInt( pHwDevExt );

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_DATA_INTERSECTION:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_DATA_INTERSECTION\r\n") );
			HwProcessDataIntersection( pSrb );
			break;

		default:
			if( pSrb->Command == 0x10D ) {
				DebugPrint( (DebugLevelTrace, "TOSDVD:  ---------------------------------------------\r\n" ) );
				DebugPrint( (DebugLevelTrace, "TOSDVD:  -------- UNKNOWN SRB COMMAND (0x10D) --------\r\n" ) );
				DebugPrint( (DebugLevelTrace, "TOSDVD:  ---------------------------------------------\r\n" ) );
			}
			else {
				DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
				TRAP;
			}

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
	}

	StreamClassDeviceNotification( ReadyForNextDeviceRequest,
									pSrb->HwDeviceExtension );
	StreamClassDeviceNotification( DeviceRequestComplete,
									pSrb->HwDeviceExtension,
									pSrb );
}

/*
** AdapterStreamInfo()
*/
VOID AdapterStreamInfo( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_STREAM_INFORMATION pstrinfo =
			&(pSrb->CommandData.StreamBuffer->StreamInfo );

	// define the number of streams which this mini driver can support.
	pSrb->CommandData.StreamBuffer->StreamHeader.NumberOfStreams = STREAMNUM;

	pSrb->CommandData.StreamBuffer->StreamHeader.SizeOfHwStreamInformation =
		sizeof(HW_STREAM_INFORMATION);

	// store a pointer to the topology for the device
	pSrb->CommandData.StreamBuffer->StreamHeader.Topology = (KSTOPOLOGY *)&Topology;

//	pSrb->CommandData.StreamBuffer->StreamHeader.NumDevPropArrayEntries = 1;
//	pSrb->CommandData.StreamBuffer->StreamHeader.DevicePropertiesArray = devicePropSet;


/* Video */
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_IN;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = 1;
	pstrinfo->StreamFormatsArray = Mpeg2VidInfo;	// see strmid.h
//--- 97.09.23 K.Chujo
//	pstrinfo->NumStreamPropArrayEntries = 2;
	pstrinfo->NumStreamPropArrayEntries = 3;
//--- End.
	pstrinfo->StreamPropertiesArray = mpegVidPropSet;	// see strmid.h

	pstrinfo++;

/* Audio */
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_IN;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = 2;
	pstrinfo->StreamFormatsArray = AudioFormatBlocks;
//--- 97.09.23 K.Chujo
//	pstrinfo->NumStreamPropArrayEntries = 2;
	pstrinfo->NumStreamPropArrayEntries = 3;
//--- End.
	pstrinfo->StreamPropertiesArray = mpegAudioPropSet;	// see strmid.h

	pstrinfo->StreamEventsArray = ClockEventSet;
	pstrinfo->NumStreamEventArrayEntries = SIZEOF_ARRAY(ClockEventSet);

	pstrinfo++;

/* Sub-pic */
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_IN;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = 1;
	pstrinfo->StreamFormatsArray = Mpeg2SubpicInfo;
//--- 97.09.23 K.Chujo
//	pstrinfo->NumStreamPropArrayEntries = 2;
	pstrinfo->NumStreamPropArrayEntries = 3;
//--- End.
	pstrinfo->StreamPropertiesArray = SPPropSet;

	pstrinfo++;

/* V-port */
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_OUT;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = 1;
	pstrinfo->StreamFormatsArray = VPEInfo;
	pstrinfo->NumStreamPropArrayEntries = 1;
	pstrinfo->StreamPropertiesArray = VideoPortPropSet;

	pstrinfo->MediumsCount = 1;
	pstrinfo->Mediums = &VPMedium;

	pstrinfo->StreamEventsArray = VPEventSet;
	pstrinfo->NumStreamEventArrayEntries = SIZEOF_ARRAY(VPEventSet);

	pstrinfo++;

/* CC */
	pstrinfo->NumberOfPossibleInstances = 1;
	pstrinfo->DataFlow = KSPIN_DATAFLOW_OUT;
	pstrinfo->DataAccessible = TRUE;
	pstrinfo->NumberOfFormatArrayEntries = 1;
	pstrinfo->StreamFormatsArray = CCInfo;
	pstrinfo->NumStreamPropArrayEntries = 1;
	pstrinfo->StreamPropertiesArray = CCPropSet;

	pSrb->Status = STATUS_SUCCESS;
}

/*
** HwProcessDataIntersection()
*/

VOID HwProcessDataIntersection( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	NTSTATUS		Status = STATUS_SUCCESS;
	PSTREAM_DATA_INTERSECT_INFO	IntersectInfo;
	PKSDATARANGE	DataRange;
	PKSDATAFORMAT	pFormat = NULL;
	ULONG			formatSize;

	//
	// BUGBUG - this is a tempory implementation.   We need to compare
	// the data types passed in and error if the ranges don't overlap.
	// we also need to return valid format blocks, not just the data range.
	//

	IntersectInfo = pSrb->CommandData.IntersectInfo;
   DataRange = IntersectInfo->DataRange;

	switch (IntersectInfo->StreamNumber) {

	case strmVideo:

		pFormat = &hwfmtiMpeg2Vid;
		formatSize = sizeof hwfmtiMpeg2Vid;
		break;

	case strmAudio:

      if (IsEqualGUID2(&(DataRange->SubFormat), &(Mpeg2AudioFormat.DataFormat.SubFormat))) {
         // DebugPrint( (DebugLevelError, "TOSDVD:    AC3 Audio format query\r\n") );
         pFormat = (PKSDATAFORMAT) &Mpeg2AudioFormat;
         formatSize = sizeof (KSDATAFORMAT_WAVEFORMATEX);
      }
      else if (IsEqualGUID2(&(DataRange->SubFormat), &(LPCMAudioFormat.DataFormat.SubFormat))) {
         // DebugPrint( (DebugLevelError, "TOSDVD:    LPCM Audio format query\r\n") );
         pFormat = (PKSDATAFORMAT) &LPCMAudioFormat;
         formatSize = sizeof (KSDATAFORMAT_WAVEFORMATEX);
      }
      else {
         // DebugPrint( (DebugLevelError, "TOSDVD:    unknown Audio format query\r\n") );
         pFormat = NULL;
         formatSize = 0;
      }
		break;

	case strmSubpicture:

		pFormat = &hwfmtiMpeg2Subpic;
		formatSize = sizeof hwfmtiMpeg2Subpic;
		break;

	case strmYUVVideo:

		DebugPrint( (DebugLevelTrace, "TOSDVD:    VPE\r\n") );
		pFormat = &hwfmtiVPEOut;
		formatSize = sizeof hwfmtiVPEOut;
		break;

	case strmCCOut:

		DebugPrint(( DebugLevelTrace, "TOSDVD:    CC\r\n" ));
		pFormat = &hwfmtiCCOut;
		formatSize = sizeof hwfmtiCCOut;
		break;

	default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:    STATUS_NOT_IMPLEMENTED\r\n") );
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			return;

	}						   // end streamnumber switch

	if (pFormat) {

		//
		// do a minimal compare of the dataranges to at least verify
		// that the guids are the same.
		// BUGBUG - this is woefully incomplete.
		//

		DataRange = IntersectInfo->DataRange;

		if (!(IsEqualGUID2(&DataRange->MajorFormat,
						  &pFormat->MajorFormat) &&
			  IsEqualGUID2(&DataRange->Specifier,
						  &pFormat->Specifier))) {

         // if (IntersectInfo->StreamNumber == strmAudio)
         //   DebugPrint( (DebugLevelError, "TOSDVD:    Audio STATUS_NO_MATCH\r\n") );
			DebugPrint( (DebugLevelTrace, "TOSDVD:      STATUS_NO_MATCH\r\n") );
			Status = STATUS_NO_MATCH;

		} else {				// if guids are equal


			//
			// check to see if the size of the passed in buffer is a ULONG.
			// if so, this indicates that we are to return only the size
			// needed, and not return the actual data.
			//
         // if (IntersectInfo->StreamNumber == strmAudio)
         //   DebugPrint( (DebugLevelError, "TOSDVD:    Audio GUIDs are equal\r\n") );

			if (IntersectInfo->SizeOfDataFormatBuffer != sizeof(ULONG)) {

				//
				// we are to copy the data, not just return the size
				//

				if (IntersectInfo->SizeOfDataFormatBuffer < formatSize) {

					DebugPrint( (DebugLevelTrace, "TOSDVD:      STATUS_BUFFER_TOO_SMALL\r\n") );
					Status = STATUS_BUFFER_TOO_SMALL;

				} else {		// if too small

					RtlCopyMemory(IntersectInfo->DataFormatBuffer,
								  pFormat,
								  formatSize);

					pSrb->ActualBytesTransferred = formatSize;

               // if (IntersectInfo->StreamNumber == strmAudio)
               //   DebugPrint( (DebugLevelError, "TOSDVD:    Audio STATUS_SUCCESS\r\n") );
					DebugPrint( (DebugLevelTrace, "TOSDVD:      STATUS_SUCCESS(data copy)\r\n") );
					Status = STATUS_SUCCESS;

				}			   // if too small

			} else {			// if sizeof ULONG specified

				//
				// caller wants just the size of the buffer.  Get that.
				//

				*(PULONG) IntersectInfo->DataFormatBuffer = formatSize;
				pSrb->ActualBytesTransferred = sizeof(ULONG);

				DebugPrint( (DebugLevelTrace, "TOSDVD:      STATUS_SUCCESS(return size)\r\n") );

			}				   // if sizeof ULONG

		}					   // if guids are equal

	} else {					// if pFormat

		DebugPrint( (DebugLevelTrace, "TOSDVD:      STATUS_NOT_SUPPORTED\r\n") );
		Status = STATUS_NOT_SUPPORTED;
	}						   // if pFormat

	pSrb->Status = Status;

	return;
}


/*
** AdapterOpenStream()
*/
VOID AdapterOpenStream( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	pSrb->Status = STATUS_SUCCESS;

	pHwDevExt->lCPPStrm = -1;	// reset the copy protection stream number.

	ASSERT( pHwDevExt->CppFlagCount == 0 );
	ASSERT( pHwDevExt->pSrbCpp == NULL );
	ASSERT( pHwDevExt->bCppReset == FALSE );

	pHwDevExt->CppFlagCount = 0;
	pHwDevExt->pSrbCpp = NULL;
	pHwDevExt->bCppReset = FALSE;

	switch( pSrb->StreamObject->StreamNumber ){
		case strmVideo:
			DebugPrint( (DebugLevelTrace, "TOSDVD:    Video\r\n") );
			pSrb->StreamObject->ReceiveDataPacket =
				VideoReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket =
				VideoReceiveCtrlPacket;

			pHwDevExt->pstroVid = pSrb->StreamObject;

			ProcessVideoFormat( pSrb->CommandData.OpenFormat, pHwDevExt );

			pHwDevExt->DevQue.init();

			SetVideoRateDefault( pHwDevExt );

			// If you would like to take out of previous picture,
			// insert codes here to reset and initialize MPEG Decoder Chip.

			pHwDevExt->cOpenInputStream++;

			pHwDevExt->DAck.PCIF_VSYNC_ON();
			USCC_on( pHwDevExt );

			break;

		case strmAudio:
			DebugPrint( (DebugLevelTrace, "TOSDVD:    Audio\r\n") );
			pSrb->StreamObject->ReceiveDataPacket =
				AudioReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket =
				AudioReceiveCtrlPacket;

			pSrb->StreamObject->HwClockObject.HwClockFunction = StreamClockRtn;
			pSrb->StreamObject->HwClockObject.ClockSupportFlags =
				CLOCK_SUPPORT_CAN_SET_ONBOARD_CLOCK | CLOCK_SUPPORT_CAN_READ_ONBOARD_CLOCK |
				CLOCK_SUPPORT_CAN_RETURN_STREAM_TIME;

			pHwDevExt->pstroAud = pSrb->StreamObject;

			ProcessAudioFormat( pSrb->CommandData.OpenFormat, pHwDevExt );

			pSrb->StreamObject->HwEventRoutine = (PHW_EVENT_ROUTINE) AudioEvent;

			fStarted = fProgrammed = FALSE;

			SetAudioRateDefault( pHwDevExt );

			pHwDevExt->cOpenInputStream++;

			break;

		case strmSubpicture:
			DebugPrint( (DebugLevelTrace, "TOSDVD:    Subpic\r\n") );
			pSrb->StreamObject->ReceiveDataPacket =
				SubpicReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket =
				SubpicReceiveCtrlPacket;

			pHwDevExt->pstroSP = pSrb->StreamObject;

			SetSubpicRateDefault( pHwDevExt );

			pHwDevExt->cOpenInputStream++;

			break;

		case strmYUVVideo:
			DebugPrint( (DebugLevelTrace, "TOSDVD:    VPE\r\n") );
			pSrb->StreamObject->ReceiveDataPacket =
				VpeReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket =
				VpeReceiveCtrlPacket;

			pHwDevExt->pstroYUV = pSrb->StreamObject;

			pSrb->StreamObject->HwEventRoutine = (PHW_EVENT_ROUTINE) CycEvent;

			break;

		case strmCCOut:
			DebugPrint(( DebugLevelTrace, "TOSDVD:    CC\r\n" ));
			pSrb->StreamObject->ReceiveDataPacket =
				CCReceiveDataPacket;
			pSrb->StreamObject->ReceiveControlPacket =
				CCReceiveCtrlPacket;

			pHwDevExt->pstroCC = pSrb->StreamObject;

			pHwDevExt->CCQue.init();

			break;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->StreamObject->StreamNumber, pSrb->StreamObject->StreamNumber ) );
			TRAP;

			break;
	}

	pSrb->StreamObject->Dma = TRUE;
	pSrb->StreamObject->Pio = TRUE;	// Need Pio = TRUE for access on CPU
}

/*
** AdapterCloseStream()
*/
VOID AdapterCloseStream( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	pSrb->Status = STATUS_SUCCESS;

	switch ( pSrb->StreamObject->StreamNumber ) {
	  case strmVideo:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    Video\r\n" ));
		pHwDevExt->pstroVid = NULL;
		pHwDevExt->cOpenInputStream--;

// Temporary ??
		pHwDevExt->XferStartCount = 0;
		pHwDevExt->DecodeStart = FALSE;
		pHwDevExt->SendFirst = FALSE;

		break;

	  case strmAudio:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    Audio\r\n" ));
		pHwDevExt->pstroAud = NULL;
		pHwDevExt->cOpenInputStream--;
		break;

	  case strmSubpicture:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    Subpic\r\n" ));
		pHwDevExt->pstroSP = NULL;
		pHwDevExt->cOpenInputStream--;
		break;

	  case strmYUVVideo:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    VPE\r\n" ));
		pHwDevExt->pstroYUV = NULL;
                pHwDevExt->VideoPort = 0;   // Disable
                pHwDevExt->DAck.PCIF_SET_DIGITAL_OUT( pHwDevExt->VideoPort );
		break;

	  case strmCCOut:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    CC\r\n" ));
		pHwDevExt->pstroCC = NULL;

//		PHW_STREAM_REQUEST_BLOCK pSrbTmp;
//		for( ; ; ) {
//			pSrbTmp = pHwDevExt->CCQue.get();
//			if( pSrbTmp == NULL )
//				break;
//			pSrbTmp->Status = STATUS_SUCCESS;
//
//			DebugPrint(( DebugLevelTrace, "TOSDVD:  CC pSrb = 0x%x\r\n", pSrbTmp ));
//
//			StreamClassStreamNotification( StreamRequestComplete,
//											pSrbTmp->StreamObject,
//											pSrbTmp );
//		}

		break;

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->StreamObject->StreamNumber, pSrb->StreamObject->StreamNumber ) );
		TRAP;

		break;
	}
}


/*
** ClockEvents ()
**
**     handle any time event mark events
**
** Arguments:
**
**
**
** Returns:
**
** Side Effects:
*/

void ClockEvents( PHW_DEVICE_EXTENSION pHwDevExt )
{
	PKSEVENT_ENTRY pEvent, pLast;
	PMYTIME pTim;
	LONGLONG MinIntTime;
	LONGLONG strmTime;

	if( !pHwDevExt || !pHwDevExt->pstroAud )
		return;


// BUGBUG
if( !pHwDevExt->pstroSP )
return;


	strmTime = LastStamp + ( GetSystemTime() - LastSys );

	//
	// loop through all time_mark events
	//

	pEvent = NULL;
	pLast = NULL;

	while(( pEvent = StreamClassGetNextEvent(
				pHwDevExt,
				pHwDevExt->pstroAud,
				(GUID *)&KSEVENTSETID_Clock,
				KSEVENT_CLOCK_POSITION_MARK,
				pLast )) != NULL )
	{
		DebugPrint((
			DebugLevelTrace,
			"TOSDVD:ClockEvent(1) 0x%s, 0x%s\r\n",
			DebugLLConvtoStr( ((PKSEVENT_TIME_MARK)(pEvent +1))->MarkTime, 16 ),
			DebugLLConvtoStr( strmTime, 16 )
			));
//c		DebugPrint(( DebugLevelTrace, "TOSDVD:  strmTime        0x%x\r\n", strmTime ));
//c		DebugPrint(( DebugLevelTrace, "TOSDVD:  LastStamp       0x%x\r\n", LastStamp ));
//c		DebugPrint(( DebugLevelTrace, "TOSDVD:  GetSystemTime() 0x%x\r\n", GetSystemTime() ));
//c		DebugPrint(( DebugLevelTrace, "TOSDVD:  LastSys         0x%x\r\n", LastSys ));

//		TRAP;

		if (((PKSEVENT_TIME_MARK)(pEvent +1))->MarkTime <= strmTime ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:    Notify\r\n" ));
//			TRAP;

			//
			// signal the event here
			//

			StreamClassStreamNotification(
				SignalStreamEvent,
				pHwDevExt->pstroAud,
				pEvent
				);

		}
		pLast = pEvent;
	}

	//
	// loop through all time_interval events
	//

	pEvent = NULL;
	pLast = NULL;

	while(( pEvent = StreamClassGetNextEvent(
                pHwDevExt,
                pHwDevExt->pstroAud,
                (GUID *)&KSEVENTSETID_Clock,
                KSEVENT_CLOCK_INTERVAL_MARK,
                pLast )) != NULL )
	{
		//
		// check if this event has been used for this interval yet
		//

		pTim = ((PMYTIME)(pEvent + 1));

		DebugPrint((
			DebugLevelTrace,
			"TOSDVD:ClockEvent(2) strmTime 0x%s\r\n",
			DebugLLConvtoStr( strmTime, 16 )
			));
		DebugPrint((
			DebugLevelTrace,
			"TOSDVD:               Interval 0x%s\r\n",
			DebugLLConvtoStr( pTim->tim.Interval, 16 )
			));
		DebugPrint((
			DebugLevelTrace,
			"TOSDVD:               TimeBase 0x%s\r\n",
			DebugLLConvtoStr( pTim->tim.TimeBase, 16 )
			));

		if (pTim && pTim->tim.Interval)
		{

			if (pTim->tim.TimeBase <= strmTime)
			{
				MinIntTime = (strmTime - pTim->tim.TimeBase) / pTim->tim.Interval;
				MinIntTime *= pTim->tim.Interval;
				MinIntTime +=  pTim->tim.TimeBase;

			DebugPrint((
				DebugLevelTrace,
				"TOSDVD:               MinIntTime 0x%s\r\n",
				DebugLLConvtoStr( MinIntTime, 16 )
				));
			DebugPrint((
				DebugLevelTrace,
				"TOSDVD:               LastTime 0x%s\r\n",
				DebugLLConvtoStr( pTim->LastTime, 16 )
				));

				if (MinIntTime > pTim->LastTime  )
				{

					DebugPrint(( DebugLevelTrace, "TOSDVD:  Notify\r\n" ));
					TRAP;

					//
					// signal the event here
					//

					StreamClassStreamNotification(
						SignalStreamEvent,
						pHwDevExt->pstroAud,
						pEvent
						);

					pTim->LastTime = strmTime;

				}
			}

		}
		else
		{
			DebugPrint(( DebugLevelTrace, "TOSDVD:ClockEvent(?)\r\n" ));
			TRAP;
		}
		pLast = pEvent;
	}
}


/*
** AudioEvent ()
**
**    receives notification for audio clock enable / disable events
**
** Arguments:
**
**
**
** Returns:
**
** Side Effects:
*/

NTSTATUS STREAMAPI AudioEvent( PHW_EVENT_DESCRIPTOR pEvent )
{
	PUCHAR pCopy = (PUCHAR)( pEvent->EventEntry + 1 );
        PMYTIME pmyt = (PMYTIME)pCopy;
	PUCHAR pSrc = (PUCHAR)pEvent->EventData;
	ULONG cCopy;

	DebugPrint(( DebugLevelVerbose, "TOSDVD:AudioEvent\r\n" ));

	if( pEvent->Enable ) {
		switch( pEvent->EventEntry->EventItem->EventId ) {
		  case KSEVENT_CLOCK_POSITION_MARK:
			cCopy = sizeof( KSEVENT_TIME_MARK );
			break;

		  case KSEVENT_CLOCK_INTERVAL_MARK:
			cCopy = sizeof( KSEVENT_TIME_INTERVAL );
			break;

		  default:

			TRAP;

			return( STATUS_NOT_IMPLEMENTED );
		}

		if( pEvent->EventEntry->EventItem->DataInput != cCopy ) {
			TRAP;

			return( STATUS_INVALID_BUFFER_SIZE );
		}

		//
		// copy the input buffer
		//

		for( ; cCopy > 0; cCopy-- ) {
			*pCopy++ = *pSrc++;
		}
		if( pEvent->EventEntry->EventItem->EventId == KSEVENT_CLOCK_INTERVAL_MARK) {
                         pmyt->LastTime = 0;
                }

	}

	return( STATUS_SUCCESS );
}


/*
** CycEvent ()
**
**    receives notification for stream event enable/ disable
**
** Arguments:}
**
**
**
** Returns:
**
** Side Effects:
*/


NTSTATUS STREAMAPI CycEvent( PHW_EVENT_DESCRIPTOR pEvent )
{
	PSTREAMEX pstrm = (PSTREAMEX)( pEvent->StreamObject->HwStreamExtension );

	DebugPrint( (DebugLevelTrace, "TOSDVD:CycEvent\r\n") );

	if( pEvent->Enable ) {
		pstrm->EventCount++;
	}
	else {
		pstrm->EventCount--;
	}

	return( STATUS_SUCCESS );
}


/*
** VideoReceiveDataPacket()
*/
extern "C" VOID STREAMAPI VideoReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
//	PULONG pCount = &(pHwDevExt->XferStartCount);

	DebugPrint( (DebugLevelVerbose, "TOSDVD:VideoReceiveDataPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_WRITE_DATA:
			DebugPrint( (DebugLevelVerbose, "TOSDVD:  SRB_WRITE_DATA\r\n") );

			{	// Temporary
				ULONG i;
				PKSSTREAM_HEADER pStruc;

				for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
					pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];

					if( !( pStruc->OptionsFlags & (KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY |
						KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY |
							KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ))) {
//						DebugPrint(( DebugLevelTrace, "TOSDVD: *** Video # 0x%x\r\n",
//							pStruc->xHdr.MediaSpecificFlags >> 16 ));
					}

					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:  DATADISCONTINUITY(Video)\r\n" ));

						VideoDataDiscontinuity( pHwDevExt );
                  pHwDevExt->bStopCC = TRUE;
						USCC_discont( pHwDevExt );

					}
					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:  TIMEDISCONTINUITY(Video)\r\n" ));
//--- 97.09.08 K.Chujo
						pHwDevExt->TimeDiscontFlagCount++;
						DebugPrint(( DebugLevelTrace, "TOSDVD:  TimeDiscontFlagCount=%ld\r\n", pHwDevExt->TimeDiscontFlagCount ));
						if( pHwDevExt->TimeDiscontFlagCount >= pHwDevExt->cOpenInputStream ) {
//--- 97.09.10 K.Chujo
							// old
//							DecodeStart(pHwDevExt, pHwDevExt->dwSTCInit);
							// new
							StreamClassScheduleTimer(
								NULL,
								pHwDevExt,
								1,
								(PHW_TIMER_ROUTINE)MenuDecodeStart,	// 97.09.14 rename
								pHwDevExt
							);
//--- End.
						}
//--- End.
					}
					if( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey ) {
						pHwDevExt->CppFlagCount++;
						DebugPrint(( DebugLevelTrace, "TOSDVD:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
						if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
							SetCppFlag( pHwDevExt );
					}
				}

				for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
					pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];

					DebugPrint( (DebugLevelVerbose, "TOSDVD: VideoPacet Flag = 0x%x\r\n", pStruc->OptionsFlags ));

					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:TYPECHANGE(Video)\r\n" ));
						if( pStruc->DataUsed >= sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2) ) {
							ProcessVideoFormat( (PKSDATAFORMAT)pStruc->Data, pHwDevExt );
						}
						else {
							TRAP;
						}
						i = pSrb->NumberOfBuffers;
						break;
					}

					if( pStruc->DataUsed )
						break;

				}
				if( i == pSrb->NumberOfBuffers ) {
					pSrb->Status = STATUS_SUCCESS;
					break;
				}
			}

//			DebugDumpKSTIME( pSrb );

// for Debug
//	if(	pHwDevExt->Rate < 10000 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  Change PTS for F.F. (Video)\r\n" ) );
//	}
// end
//--- 97.09.25 K.Chujo
			FastSlowControl( pSrb );
//--- End.
			if( pHwDevExt->bVideoQueue == TRUE ) {
            pHwDevExt->bStopCC = FALSE;
				pHwDevExt->DevQue.put_video( pSrb );
			}
			else {
				pSrb->Status = STATUS_SUCCESS;
				DebugPrint( (DebugLevelTrace, "TOSDVD:  VideoData was Discarded\r\n" ) );
				break;
			}

//			if( *pCount <= 24 )
//				(*pCount)++;
//			if( *pCount == 24 )
//				DMAxfer( pHwDevExt, 0x03 );
//			else if( (*pCount) == 25 ) {

			if( pHwDevExt->pSrbDMA0 == NULL && pHwDevExt->pSrbDMA1 == NULL )
				PreDMAxfer( pHwDevExt/*, 0x03 */);

//			}

// for Debug
//	if(	pHwDevExt->Rate < 10000 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  ReadyForNextStreamDataRequest(Video)\r\n" ) );
//	}
// end
			StreamClassStreamNotification( ReadyForNextStreamDataRequest,
											pSrb->StreamObject );

			return;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	DebugPrint(( DebugLevelTrace, "TOSDVD:---------VideoReceiveDataPacket( SRB has no data)\r\n" ));

	StreamClassStreamNotification( ReadyForNextStreamDataRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}


/*
** VideoReceiveCtrlPacket()
*/
extern "C" VOID STREAMAPI VideoReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelTrace, "TOSDVD:VideoReceiveCtrlPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_SET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_STATE\r\n") );

			switch( pSrb->CommandData.StreamState ) {
				case KSSTATE_STOP:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_STOP\r\n") );

					StopData( pHwDevExt );

					SetVideoRateDefault( pHwDevExt );
					pHwDevExt->bVideoQueue = FALSE;
					pHwDevExt->bAudioQueue = FALSE;
					pHwDevExt->bSubpicQueue = FALSE;

					break;

				case KSSTATE_PAUSE:

					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_PAUSE\r\n") );

					PauseTime = GetSystemTime();
					if( !fStarted ) {
						fStarted = TRUE;
						LastStamp = 0;
						StartSys = LastSysTime = PauseTime;
					}

					fClkPause = TRUE;

					SetPlayMode( pHwDevExt, PLAY_MODE_FREEZE );

					break;

				case KSSTATE_RUN:

					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_RUN\r\n") );

					if( !fStarted && !fProgrammed ) {
						LastStamp = 0;
						StartSys = LastSysTime = GetSystemTime();
					}

					fStarted = TRUE;
					fClkPause = FALSE;

					SetPlayMode( pHwDevExt, pHwDevExt->RunMode );

					break;
			}

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_STATE\r\n") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_PROPERTY\r\n") );

			GetVideoProperty( pSrb );

			if( pSrb->Status != STATUS_PENDING ) {
				StreamClassStreamNotification( ReadyForNextStreamControlRequest,
												pSrb->StreamObject );

				StreamClassStreamNotification( StreamRequestComplete,
												pSrb->StreamObject,
												pSrb );
			}

			return;

		case SRB_SET_STREAM_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_PROPERTY\r\n") );

			SetVideoProperty( pSrb );

			if( pSrb->Status != STATUS_PENDING ) {
				StreamClassStreamNotification( ReadyForNextStreamControlRequest,
												pSrb->StreamObject );

				StreamClassStreamNotification( StreamRequestComplete,
												pSrb->StreamObject,
												pSrb );
			}

			return;

		case SRB_OPEN_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_OPEN_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_CLOSE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_CLOSE_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_INDICATE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_INDICATE_MASTER_CLOCK\r\n") );

			hClk = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNKNOWN_STREAM_COMMAND:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_UNKNOWN_STREAM_COMMAND\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_STREAM_RATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_RATE\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_PROPOSE_DATA_FORMAT:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_PROPOSE_DATA_FORMAT\r\n") );

			VideoQueryAccept( pSrb );

			break;

//--- 97.09.23 K.Chujo
		case SRB_PROPOSE_STREAM_RATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_PROPOSE_STREAM_RATE\r\n") );

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
//			SetRateChange( pSrb );
			break;
//--- End.

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

/*
** AudioReceiveDataPacket()
*/
extern "C" VOID STREAMAPI AudioReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelVerbose, "TOSDVD:AudioReceiveDataPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_WRITE_DATA:
			DebugPrint( (DebugLevelVerbose, "TOSDVD:  SRB_WRITE_DATA\r\n") );

			{	// Temporary
				ULONG i;
				PKSSTREAM_HEADER pStruc;

				for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
					pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];

					if( !( pStruc->OptionsFlags & (KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY |
						KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY |
							KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ))) {
//						DebugPrint(( DebugLevelTrace, "TOSDVD: *** Audio # 0x%x\r\n",
//							pStruc->xHdr.MediaSpecificFlags >> 16 ));
					}

					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:  DATADISCONTINUITY(Audio)\r\n" ));
						AudioDataDiscontinuity( pHwDevExt );
					}
					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:  TIMEDISCONTINUITY(Audio)\r\n" ));
//--- 97.09.08 K.Chujo
						pHwDevExt->TimeDiscontFlagCount++;
						DebugPrint(( DebugLevelTrace, "TOSDVD:  TimeDiscontFlagCount=%ld\r\n", pHwDevExt->TimeDiscontFlagCount ));
						if( pHwDevExt->TimeDiscontFlagCount >= pHwDevExt->cOpenInputStream ) {
//--- 97.09.10 K.Chujo
							// old
//							DecodeStart(pHwDevExt, pHwDevExt->dwSTCInit);
							// new
							StreamClassScheduleTimer(
								NULL,
								pHwDevExt,
								1,
								(PHW_TIMER_ROUTINE)MenuDecodeStart,	// 97.09.14 rename
								pHwDevExt
							);
//--- End.
						}
//--- End.
					}
					if( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey ) {
						pHwDevExt->CppFlagCount++;
						DebugPrint(( DebugLevelTrace, "TOSDVD:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
						if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
							SetCppFlag( pHwDevExt );
					}
				}

				for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
					pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];

					DebugPrint( (DebugLevelVerbose, "TOSDVD: AudioPacket Flag = 0x%x\r\n", pStruc->OptionsFlags ));

					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:TYPECHANGE(Audio)\r\n" ));
//						if( pStruc->DataUsed >= sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2) ) {
						if( pStruc->DataUsed ) {
							ProcessAudioFormat( (PKSDATAFORMAT)pStruc->Data, pHwDevExt );
						}
						else {
							TRAP;
						}
						i = pSrb->NumberOfBuffers;
						break;
					}

					if( pStruc->DataUsed )
						break;
				}
				if( i == pSrb->NumberOfBuffers ) {
					pSrb->Status = STATUS_SUCCESS;
					break;
				}
			}

// for Debug
//	if(	pHwDevExt->Rate < 10000 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  Change PTS for F.F. (Audio)\r\n" ) );
//	}
// end
//--- 97.09.25 K.Chujo
//			FastSlowControl( pSrb );
//--- End.
			if( pHwDevExt->bAudioQueue == TRUE ) {
				pHwDevExt->DevQue.put_audio( pSrb );
			}
			else {
				pSrb->Status = STATUS_SUCCESS;
				DebugPrint( (DebugLevelTrace, "TOSDVD:  AudioData was Discarded\r\n" ) );
				break;
			}

			if( pHwDevExt->pSrbDMA0 == NULL && pHwDevExt->pSrbDMA1 == NULL )
				PreDMAxfer( pHwDevExt/*, 0x03 */);

// for Debug
//	if(	pHwDevExt->Rate < 10000 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  ReadyForNextStreamDataRequest(Audio)\r\n" ) );
//	}
// end
			StreamClassStreamNotification( ReadyForNextStreamDataRequest,
											pSrb->StreamObject );

			return;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	DebugPrint(( DebugLevelTrace, "TOSDVD:---------AudioReceiveDataPacket( SRB has no data)\r\n" ));

	StreamClassStreamNotification( ReadyForNextStreamDataRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

/*
** AudioReceiveCtrlPacket()
*/
extern "C" VOID STREAMAPI AudioReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelTrace, "TOSDVD:AudioReceiveCtrlPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_SET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_STATE\r\n") );

			switch( pSrb->CommandData.StreamState ) {
				case KSSTATE_STOP:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_STOP\r\n") );
					SetAudioRateDefault( pHwDevExt );
					pHwDevExt->bAudioQueue = FALSE;
					break;

				case KSSTATE_PAUSE:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_PAUSE\r\n") );
					break;

				case KSSTATE_RUN:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_RUN\r\n") );
					break;
			}

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_STATE\r\n") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_PROPERTY\r\n") );

			GetAudioProperty( pSrb );

			if( pSrb->Status != STATUS_PENDING ) {
				StreamClassStreamNotification( ReadyForNextStreamControlRequest,
												pSrb->StreamObject );

				StreamClassStreamNotification( StreamRequestComplete,
												pSrb->StreamObject,
												pSrb );
			}

			return;

		case SRB_SET_STREAM_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_PROPERTY\r\n") );

			SetAudioProperty( pSrb );

			if( pSrb->Status != STATUS_PENDING ) {
				StreamClassStreamNotification( ReadyForNextStreamControlRequest,
												pSrb->StreamObject );

				StreamClassStreamNotification( StreamRequestComplete,
												pSrb->StreamObject,
												pSrb );
			}

			return;

		case SRB_OPEN_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_OPEN_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_CLOSE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_CLOSE_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_INDICATE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_INDICATE_MASTER_CLOCK\r\n") );

			hClk = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNKNOWN_STREAM_COMMAND:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_UNKNOWN_STREAM_COMMAND\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_STREAM_RATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_RATE\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_PROPOSE_DATA_FORMAT:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_PROPOSE_DATA_FORMAT\r\n") );

			AudioQueryAccept( pSrb );

			break;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}


/*
** SubpicReceiveDataPacket()
*/
extern "C" VOID STREAMAPI SubpicReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelVerbose, "TOSDVD:SubpicReceiveDataPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_WRITE_DATA:
			DebugPrint( (DebugLevelVerbose, "TOSDVD:  SRB_WRITE_DATA\r\n") );

			{	// Temporary
				ULONG i;
				PKSSTREAM_HEADER pStruc;

				for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
					pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];

					if(!( pStruc->OptionsFlags & (KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY |
						KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY |
							KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ))) {
//						DebugPrint(( DebugLevelTrace, "TOSDVD: *** Subpic # 0x%x\r\n",
//							pStruc->xHdr.MediaSpecificFlags >> 16 ));
					}

					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:  DATADISCONTINUITY(Subpic)\r\n" ));
						SubpicDataDiscontinuity( pHwDevExt );
					}
					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:  TIMEDISCONTINUITY(Subpic)\r\n" ));
//--- 97.09.08 K.Chujo
						pHwDevExt->TimeDiscontFlagCount++;
						DebugPrint(( DebugLevelTrace, "TOSDVD:  TimeDiscontFlagCount=%ld\r\n", pHwDevExt->TimeDiscontFlagCount ));
						if( pHwDevExt->TimeDiscontFlagCount >= pHwDevExt->cOpenInputStream ) {
//--- 97.09.10 K.Chujo
							// old
//							DecodeStart(pHwDevExt, pHwDevExt->dwSTCInit);
							// new
							StreamClassScheduleTimer(
								NULL,
								pHwDevExt,
								1,
								(PHW_TIMER_ROUTINE)MenuDecodeStart,	// 97.09.14 rename
								pHwDevExt
							);
//--- End.
						}
//--- End.
					}
					if( pStruc->TypeSpecificFlags & KS_AM_UseNewCSSKey ) {
						pHwDevExt->CppFlagCount++;
						DebugPrint(( DebugLevelTrace, "TOSDVD:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
						if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
							SetCppFlag( pHwDevExt );
					}
				}

				for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
					pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];

					DebugPrint( (DebugLevelVerbose, "TOSDVD: SubPicPacket Flag = 0x%x\r\n", pStruc->OptionsFlags ));

					if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TYPECHANGED ) {
						DebugPrint(( DebugLevelTrace, "TOSDVD:TYPECHANGE(subpic)\r\n" ));
						TRAP;
						i = pSrb->NumberOfBuffers;
						break;
					}

					if( pStruc->DataUsed )
						break;
				}
				if( i == pSrb->NumberOfBuffers ) {
					pSrb->Status = STATUS_SUCCESS;
					break;
				}
			}
//--- 97.09.14 K.Chujo
			{
				ULONG i;
				PKSSTREAM_HEADER pStruc;
//				PUCHAR	pDat;
//				ULONG strID;

				for ( i=0; i<pSrb->NumberOfBuffers; i++ ) {
					pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
					SetSubpicID( pHwDevExt, pStruc );
//					pDat = (PUCHAR)pStruc->Data;
//					strID = (ULONG)GetStreamID(pDat);
//					if( (strID & 0xE0)==0x20 ) {
//						if( pHwDevExt->VPro.SUBP_GET_SUBP_CH() != strID ) {
//							SetSubpicID( pHwDevExt, strID );
//						}
//					}
				}
			}
//--- End.

// for Debug
//	if(	pHwDevExt->Rate < 10000 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  Change PTS for F.F. (Subpic)\r\n" ) );
//	}
// end
//--- 97.09.25 K.Chujo
//			FastSlowControl( pSrb );
//--- End.
			if( pHwDevExt->bSubpicQueue == TRUE ) {
				pHwDevExt->DevQue.put_subpic( pSrb );
			}
			else {
				pSrb->Status = STATUS_SUCCESS;
				DebugPrint( (DebugLevelTrace, "TOSDVD:  SubpicData was Discarded\r\n" ) );
				break;
			}

//			if( pHwDevExt->pSrbDMA0 == NULL && pHwDevExt->pSrbDMA1 == NULL )
//				PreDMAxfer( pHwDevExt/*, 0x03 */);

// for Debug
//	if(	pHwDevExt->Rate < 10000 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  ReadyForNextStreamDataRequest(Subpic)\r\n" ) );
//	}
// end
			StreamClassStreamNotification( ReadyForNextStreamDataRequest,
											pSrb->StreamObject );

			return;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	DebugPrint(( DebugLevelTrace, "TOSDVD:---------SubpicReceiveDataPacket( SRB has no data)\r\n" ));

	StreamClassStreamNotification( ReadyForNextStreamDataRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

/*
** SubpicReceiveCtrlPacket()
*/
extern "C" VOID STREAMAPI SubpicReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

//h	DebugPrint( (DebugLevelTrace, "TOSDVD:SubpicReceiveCtrlPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_SET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_STATE\r\n") );

			switch( pSrb->CommandData.StreamState ) {
				case KSSTATE_STOP:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_STOP\r\n") );
					SetSubpicRateDefault( pHwDevExt );
					pHwDevExt->bSubpicQueue = FALSE;
					break;
				case KSSTATE_PAUSE:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_PAUSE\r\n") );
					break;
				case KSSTATE_RUN:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_RUN\r\n") );
					break;
			}

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_STATE\r\n") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_PROPERTY\r\n") );

			GetSubpicProperty( pSrb );

			if( pSrb->Status != STATUS_PENDING ) {
				StreamClassStreamNotification( ReadyForNextStreamControlRequest,
												pSrb->StreamObject );

				StreamClassStreamNotification( StreamRequestComplete,
												pSrb->StreamObject,
												pSrb );
			}

			return;

		case SRB_SET_STREAM_PROPERTY:
//h			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_PROPERTY\r\n") );

			SetSubpicProperty( pSrb );

			if( pSrb->Status != STATUS_PENDING ) {
				StreamClassStreamNotification( ReadyForNextStreamControlRequest,
												pSrb->StreamObject );

				StreamClassStreamNotification( StreamRequestComplete,
												pSrb->StreamObject,
												pSrb );
			}

			return;

		case SRB_OPEN_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_OPEN_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_CLOSE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_CLOSE_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_INDICATE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_INDICATE_MASTER_CLOCK\r\n") );

			hClk = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNKNOWN_STREAM_COMMAND:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_UNKNOWN_STREAM_COMMAND\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_STREAM_RATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_RATE\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_PROPOSE_DATA_FORMAT:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_PROPOSE_DATA_FORMAT\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

/*
** VpeReceiveDataPacket()
*/
extern "C" VOID STREAMAPI VpeReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelVerbose, "TOSDVD:VpeReceiveDataPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_READ_DATA:
			DebugPrint( (DebugLevelVerbose, "TOSDVD:  SRB_READ_DATA\r\n") );

			pSrb->ActualBytesTransferred = 0;
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_WRITE_DATA:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_WRITE_DATA\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamClassStreamNotification( ReadyForNextStreamDataRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

/*
** VpeReceiveCtrlPacket()
*/
extern "C" VOID STREAMAPI VpeReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:VpeReceiveCtrlPacket---------\r\n") );

	switch( pSrb->Command ){
		case SRB_SET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_STATE\r\n") );

			switch( pSrb->CommandData.StreamState ) {
				case KSSTATE_STOP:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_STOP\r\n") );
					break;
				case KSSTATE_PAUSE:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_PAUSE\r\n") );
					break;
				case KSSTATE_RUN:
					DebugPrint( (DebugLevelTrace, "TOSDVD:    KSSTATE_RUN\r\n") );
					break;
			}

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_STATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_STATE\r\n") );
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_PROPERTY\r\n") );

			GetVpeProperty( pSrb );

			if( pSrb->Status != STATUS_PENDING ) {
				StreamClassStreamNotification( ReadyForNextStreamControlRequest,
												pSrb->StreamObject );

				StreamClassStreamNotification( StreamRequestComplete,
												pSrb->StreamObject,
												pSrb );
			}

			return;

		case SRB_SET_STREAM_PROPERTY:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_PROPERTY\r\n") );

			SetVpeProperty( pSrb );

			break;

		case SRB_OPEN_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_OPEN_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_CLOSE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_CLOSE_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_INDICATE_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_INDICATE_MASTER_CLOCK\r\n") );

			hClk = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNKNOWN_STREAM_COMMAND:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_UNKNOWN_STREAM_COMMAND\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_STREAM_RATE:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_RATE\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_PROPOSE_DATA_FORMAT:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_PROPOSE_DATA_FORMAT\r\n") );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ) );
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

/*
** CCReceiveDataPacket()
*/
extern "C" VOID STREAMAPI CCReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint(( DebugLevelVerbose, "TOSDVD:CCReceiveDataPacket---------\r\n" ));

	switch( pSrb->Command ) {
		case SRB_READ_DATA:
			DebugPrint(( DebugLevelVerbose, "TOSDVD:  SRB_READ_DATA\r\n" ));

			DebugPrint(( DebugLevelTrace, "TOSDVD:  put queue CC pSrb = 0x%x\r\n", pSrb ));
			pHwDevExt->CCQue.put( pSrb );

			pSrb->Status = STATUS_PENDING;

                        pSrb->TimeoutCounter = 0;        // prevent the packet from timing out, ever
			StreamClassStreamNotification( ReadyForNextStreamDataRequest,
											pSrb->StreamObject );
			return;

		case SRB_WRITE_DATA:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_WRITE_DATA\r\n" ));
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ));
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamClassStreamNotification( ReadyForNextStreamDataRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

/*
** CCReceiveCtrlPacket()
*/
extern "C" VOID STREAMAPI CCReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint(( DebugLevelTrace, "TOSDVD:CCReceiveCtrlPacket---------\r\n" ));

	switch( pSrb->Command ) {
		case SRB_SET_STREAM_STATE:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_STATE\r\n" ));

			switch( pSrb->CommandData.StreamState ) {
				case KSSTATE_STOP:
					DebugPrint(( DebugLevelTrace, "TOSDVD:    KSSTATE_STOP\r\n" ));
					break;
				case KSSTATE_PAUSE:
					DebugPrint(( DebugLevelTrace, "TOSDVD:    KSSTATE_PAUSE\r\n" ));
					break;
				case KSSTATE_RUN:
					DebugPrint(( DebugLevelTrace, "TOSDVD:    KSSTATE_RUN\r\n" ));
					break;
			}

			((PSTREAMEX)(pHwDevExt->pstroCC->HwStreamExtension))->state = pSrb->CommandData.StreamState;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_STATE:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_STATE\r\n" ));
			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_GET_STREAM_PROPERTY:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_GET_STREAM_PROPERTY\r\n" ));

			GetCCProperty( pSrb );

			break;

		case SRB_SET_STREAM_PROPERTY:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_PROPERTY\r\n" ));

			SetCCProperty( pSrb );

			break;

		case SRB_OPEN_MASTER_CLOCK:
			DebugPrint( (DebugLevelTrace, "TOSDVD:  SRB_OPEN_MASTER_CLOCK\r\n") );

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_CLOSE_MASTER_CLOCK:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_CLOSE_MASTER_CLOCK\r\n" ));

			hMaster = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_INDICATE_MASTER_CLOCK:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_INDICATE_MASTER_CLOCK\r\n" ));

			hClk = pSrb->CommandData.MasterClockHandle;

			pSrb->Status = STATUS_SUCCESS;
			break;

		case SRB_UNKNOWN_STREAM_COMMAND:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_UNKNOWN_STREAM_COMMAND\r\n" ));
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_SET_STREAM_RATE:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_SET_STREAM_RATE\r\n" ));
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case SRB_PROPOSE_DATA_FORMAT:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  SRB_PROPOSE_DATA_FORMAT\r\n" ));
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		default:
			DebugPrint(( DebugLevelTrace, "TOSDVD:  default %d(0x%x)\r\n", pSrb->Command, pSrb->Command ));
			TRAP;

			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );
}

void VideoQueryAccept(PHW_STREAM_REQUEST_BLOCK pSrb)
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:VideoQueryAccept\r\n" ) );

	PKSDATAFORMAT pfmt = pSrb->CommandData.OpenFormat;
//	KS_MPEGVIDEOINFO2 * pblock = (KS_MPEGVIDEOINFO2 *)((ULONG)pfmt + sizeof  (KSDATAFORMAT));

	//
	// pick up the format block and examine it. Default to not implemented
	//

	pSrb->Status = STATUS_NOT_IMPLEMENTED;

	if (pfmt->FormatSize != sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2))
	{
		return;
	}

	pSrb->Status = STATUS_SUCCESS;

}

void ProcessVideoFormat( PKSDATAFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:ProcessVideoFormat\r\n" ) );

        KS_MPEGVIDEOINFO2 * VidFmt = (KS_MPEGVIDEOINFO2 *)((DWORD_PTR)pfmt + sizeof  (KSDATAFORMAT));

	if( pfmt->FormatSize != sizeof(KSDATAFORMAT) + sizeof(KS_MPEGVIDEOINFO2) ) {
		TRAP;

		return;
	}

	//
	// copy the picture aspect ratio for now
	//

	pHwDevExt->VPFmt.dwPictAspectRatioX = VidFmt->hdr.dwPictAspectRatioX;
	pHwDevExt->VPFmt.dwPictAspectRatioY = VidFmt->hdr.dwPictAspectRatioY;

	DebugPrint(( DebugLevelTrace, "TOSDVD:  AspectRatioX %d\r\n", VidFmt->hdr.dwPictAspectRatioX ));
	DebugPrint(( DebugLevelTrace, "TOSDVD:  AspectRatioY %d\r\n", VidFmt->hdr.dwPictAspectRatioY ));

	if( pHwDevExt->VPFmt.dwPictAspectRatioX == 4 && pHwDevExt->VPFmt.dwPictAspectRatioY == 3 ) {
		pHwDevExt->CPgd.CPGD_SET_ASPECT( 0 );
	}
	else if (pHwDevExt->VPFmt.dwPictAspectRatioX == 16 && pHwDevExt->VPFmt.dwPictAspectRatioY == 9 ) {
		pHwDevExt->CPgd.CPGD_SET_ASPECT( 1 );
	}

	//
	// check for pan scan enabled
	//
#if DBG
	if( VidFmt->dwFlags & KS_MPEG2_DoPanScan )
		DebugPrint(( DebugLevelTrace, "TOSDVD:  KS_MPEG2_DoPanScan\r\n" ));
	if( VidFmt->dwFlags & KS_MPEG2_DVDLine21Field1 )
		DebugPrint(( DebugLevelTrace, "TOSDVD:  KS_MPEG2_DVDLine21Field1\r\n" ));
	if( VidFmt->dwFlags & KS_MPEG2_DVDLine21Field2 )
		DebugPrint(( DebugLevelTrace, "TOSDVD:  KS_MPEG2_DVDLine21Field2\r\n" ));
	if( VidFmt->dwFlags & KS_MPEG2_SourceIsLetterboxed )
		DebugPrint(( DebugLevelTrace, "TOSDVD:  KS_MPEG2_SourceIsLetterboxed\r\n" ));
	if( VidFmt->dwFlags & KS_MPEG2_FilmCameraMode )
		DebugPrint(( DebugLevelTrace, "TOSDVD:  KS_MPEG2_FilmCameraMode\r\n" ));
#endif
	if (VidFmt->dwFlags & KS_MPEG2_DoPanScan)
	{
		TRAP;

		//
		// under pan scan for DVD for NTSC, we must be going to a 540 by
		// 480 bit image, from a 720 x 480 (or 704 x 480)  We will
		// use this as the base starting dimensions.  If the Sequence
		// header provides other sizes, then those should be updated,
		// and the Video port connection should be updated when the
		// sequence header is received.
		//

		//
		// change the picture aspect ratio.  Since we will be stretching
		// from 540 to 720 in the horizontal direction, our aspect ratio
		// will
		//

		pHwDevExt->VPFmt.dwPictAspectRatioX = (VidFmt->hdr.dwPictAspectRatioX * (54000 / 72));
		pHwDevExt->VPFmt.dwPictAspectRatioY = VidFmt->hdr.dwPictAspectRatioY * 1000;

	}

	//
	// call the IVPConfig interface here
	//

	if (pHwDevExt->pstroYUV &&
			((PSTREAMEX)(pHwDevExt->pstroYUV->HwStreamExtension))->EventCount)
	{
		StreamClassStreamNotification(
			SignalMultipleStreamEvents,
			pHwDevExt->pstroYUV,
			&MY_KSEVENTSETID_VPNOTIFY,
			KSEVENT_VPNOTIFY_FORMATCHANGE
			);

	}
}





// Debug

void BadWait( DWORD dwTime )
{
	DWORD st, et;

	st = GetCurrentTime_ms();
	for( ; ; ) {
		KeStallExecutionProcessor( 1 );
		et = GetCurrentTime_ms();
		if( st + dwTime < et )
			break;
	}
	DebugPrint( (DebugLevelTrace, "TOSDVD:wait %dms\r\n", et - st ) );
}

void VideoDataDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->DataDiscontFlagCount |= VIDEO_DISCONT_FLAG;
	pHwDevExt->bVideoQueue = TRUE;
}

void AudioDataDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->DataDiscontFlagCount |= AUDIO_DISCONT_FLAG;
	pHwDevExt->bAudioQueue = TRUE;
}

void SubpicDataDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->DataDiscontFlagCount |= SUBPIC_DISCONT_FLAG;
	pHwDevExt->bSubpicQueue = TRUE;
}

void ClearDataDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->DataDiscontFlagCount = 0;
}

void VideoTimeDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
}

void AudioTimeDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
}

void SubpicTimeDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
}

void ClearTimeDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->TimeDiscontFlagCount = 0;
}

void FastSlowControl( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	ULONG i;
	PKSSTREAM_HEADER pStruc;
	PUCHAR pDat;
	LONGLONG pts = 0;
	LONGLONG dts = 0;
	LONGLONG tmp = 0;
	LONG Rate;
	LONGLONG start;
	REFERENCE_TIME InterceptTime;

	for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
		pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
		if( pStruc->DataUsed ) {
			pDat = (PUCHAR)pStruc->Data;
			if( *(pDat+21) & 0x80 ) {
				pts += ((DWORD)(*(pDat+23) & 0x0E)) << 29;
				pts += ((DWORD)(*(pDat+24) & 0xFF)) << 22;
				pts += ((DWORD)(*(pDat+25) & 0xFE)) << 14;
				pts += ((DWORD)(*(pDat+26) & 0xFF)) <<  7;
				pts += ((DWORD)(*(pDat+27) & 0xFE)) >>  1;

				DebugPrint( (DebugLevelTrace, "TOSDVD:ReceiveDataPacket PTS 0x%lx(100ns)\r\n", pts * 1000 / 9));
			}
		}
	}
	pts = 0;

//	if( pHwDevExt->PlayMode == PLAY_MODE_FAST ) {
	if( pHwDevExt->RunMode == PLAY_MODE_FAST ) {

//		DebugPrint( (DebugLevelTrace, "TOSDVD:    FastSlowControl\r\n") );

		Rate = pHwDevExt->Rate;
		InterceptTime = pHwDevExt->InterceptTime;
		start = pHwDevExt->StartTime * 9 / 1000;
		for( i = 0; i < pSrb->NumberOfBuffers; i++ ) {
			pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[i];
			if( pStruc->DataUsed ) {
				pDat = (PUCHAR)pStruc->Data;

				// PTS modify
				if( *(pDat+21) & 0x80 ) {
					pts += ((DWORD)(*(pDat+23) & 0x0E)) << 29;
					pts += ((DWORD)(*(pDat+24) & 0xFF)) << 22;
					pts += ((DWORD)(*(pDat+25) & 0xFE)) << 14;
					pts += ((DWORD)(*(pDat+26) & 0xFF)) <<  7;
					pts += ((DWORD)(*(pDat+27) & 0xFE)) >>  1;

					DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS before Rate Change = %lx\r\n", pts ));
//					DebugPrint( (DebugLevelTrace, "TOSDVD:  Rate                   = %lx\r\n", Rate ));
//					DebugPrint( (DebugLevelTrace, "TOSDVD:  InterceptTime          = %lx\r\n", InterceptTime ));

					tmp = pts;
//					pts = Rate * ( pts - ConvertStrmtoPTS(InterceptTime) ) / 10000;
					pts = Rate * ( pts - (InterceptTime * 9 / 1000) ) / 10000;

					*(pDat+23) = (UCHAR)(((pts & 0xC0000000) >> 29) | 0x11);
					*(pDat+24) = (UCHAR)(((pts & 0x3FC00000) >> 22) | 0x00);
					*(pDat+25) = (UCHAR)(((pts & 0x003F8000) >> 14) | 0x01);
					*(pDat+26) = (UCHAR)(((pts & 0x00007F80) >>  7) | 0x00);
					*(pDat+27) = (UCHAR)(((pts & 0x0000007F) <<  1) | 0x01);

					DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS after Rate Change = %lx\r\n", pts ));

				}

				// DTS modify
				if( *(pDat+17)==0xE0 ) {			// 0xE0 is Video Stream ID
					if( (*(pDat+21) & 0xC0) == 0xC0 ) {
						dts += ((DWORD)(*(pDat+28) & 0x0E)) << 29;
						dts += ((DWORD)(*(pDat+29) & 0xFF)) << 22;
						dts += ((DWORD)(*(pDat+30) & 0xFE)) << 14;
						dts += ((DWORD)(*(pDat+31) & 0xFF)) <<  7;
						dts += ((DWORD)(*(pDat+32) & 0xFE)) >>  1;
						dts = pts - (tmp - dts);
						*(pDat+28) = (UCHAR)(((dts & 0xC0000000) >> 29) | 0x11);
						*(pDat+29) = (UCHAR)(((dts & 0x3FC00000) >> 22) | 0x00);
						*(pDat+30) = (UCHAR)(((dts & 0x003F8000) >> 14) | 0x01);
						*(pDat+31) = (UCHAR)(((dts & 0x00007F80) >>  7) | 0x00);
						*(pDat+32) = (UCHAR)(((dts & 0x0000007F) <<  1) | 0x01);
					}
				}
			}
		}
	}
}

//--- for Debug 97.08.30; K.Chujo
DWORD xunGetPTS(void *pBuf)
{
	PUCHAR  pDat;
	DWORD	pts = 0;
//	DWORD	dts = 0;
	static  count = 0;

	pDat = (PUCHAR)pBuf;
	if (*(pDat+21) & 0x80) {	// if PTS exists,
		pts += ((DWORD)(*(pDat+23) & 0x0E)) << 29;
		pts += ((DWORD)(*(pDat+24) & 0xFF)) << 22;
		pts += ((DWORD)(*(pDat+25) & 0xFE)) << 14;
		pts += ((DWORD)(*(pDat+26) & 0xFF)) <<  7;
		pts += ((DWORD)(*(pDat+27) & 0xFE)) >>  1;
	}
	if (*(pDat+17)==0xE0) {			// 0xE0 is Video Stream ID

//		if ( (*(pDat+21) & 0xC0) == 0xC0 ) {
//			dts += ((DWORD)(*(pDat+28) & 0x0E)) << 29;
//			dts += ((DWORD)(*(pDat+29) & 0xFF)) << 22;
//			dts += ((DWORD)(*(pDat+30) & 0xFE)) << 14;
//			dts += ((DWORD)(*(pDat+31) & 0xFF)) <<  7;
//			dts += ((DWORD)(*(pDat+32) & 0xFE)) >>  1;
////			DebugPrint( (DebugLevelTrace, "TOSDVD:  DTS(V) 0x%08lX\r\n", dts) );
////			DebugPrint( (DebugLevelTrace, "TOSDVD:  DIFF(pts - dts) = 0x%04lX\r\n", pts-dts) );
//
//			dts = pts - 0x2328; // PTS - 100ms
//			*(pDat+28) = (UCHAR)(((dts & 0xC0000000) >> 29) | 0x11);
//			*(pDat+29) = (UCHAR)(((dts & 0x3FC00000) >> 22) | 0x00);
//			*(pDat+30) = (UCHAR)(((dts & 0x003F8000) >> 14) | 0x01);
//			*(pDat+31) = (UCHAR)(((dts & 0x00007F80) >>  7) | 0x00);
//			*(pDat+32) = (UCHAR)(((dts & 0x0000007F) <<  1) | 0x01);
//		}

//		if (pts!=0) {
//			DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS(V) 0x%04lX\r\n", pts) );
//		}
//		else {
//			DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS(V) ******\r\n") );
//		}
	}
	else if (*(pDat+17)==0xBD && (*(pDat+(*(pDat+22)+23)) & 0xF8)==0x80) {
//		if (pts!=0) {
//			DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS(A) 0x%04lX\r\n", pts) );
//		}
//		else {
//			DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS(A) ******\r\n") );
//		}
	}
	else if (*(pDat+17)==0xBD && (*(pDat+(*(pDat+22)+23)) & 0xE0)==0x20) {
//		if (pts!=0) {
//			DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS(S) 0x%04lX\r\n", pts) );
//		}
//		else {
//			DebugPrint( (DebugLevelTrace, "TOSDVD:  PTS(S) ******\r\n") );
//		}
	}
	else if (*(pDat+17)==0xBD && (*(pDat+(*(pDat+22)+23)) & 0xF8)==0xA0) {
	}
	else {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  unexpected ID(%02X)  "/*\r\n"*/, *(pDat+17) ) );
		pts = 0xFFFFFFFF;
		DebugPrint( (DebugLevelTrace, "--> %02X %02X %02X %02X\r\n", *(pDat+0), *(pDat+1), *(pDat+2), *(pDat+3) ));
	}
	return(pts);
}

//---

//--- 97.09.10 K.Chujo
DWORD	GetStreamID(void *pBuf)
{
	PUCHAR  pDat = (PUCHAR)pBuf;
	UCHAR	strID;
	UCHAR	subID;

	strID = *(pDat+17);
	// Check Video Stream
	if( strID==0xE0 ) {
		return( (DWORD)strID );
	}
#if 0
	// MPEG Audio
	else if ( (strID & 0x??) == 0x@@ ) {
		return( (DWORD)strID );
	}
#endif
	// Check Private Stream 1 (AC-3/PCM/Subpic)
	else {
		subID = *(pDat+(*(pDat+22)+23));
		return( (DWORD)subID );
	}
}
//--- End.

ULONG GetHowLongWait( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc )
{
	ULONGLONG stc;
	ULONGLONG pts = 0;
	ULONGLONG waitTime = 0;
	PUCHAR pDat;

	if( pStruc->DataUsed ) {
		pDat = (PUCHAR)pStruc->Data;
		if( *(pDat+21) & 0x80 ) {
			pts += ((ULONGLONG)(*(pDat+23) & 0x0E)) << 29;
			pts += ((ULONGLONG)(*(pDat+24) & 0xFF)) << 22;
			pts += ((ULONGLONG)(*(pDat+25) & 0xFE)) << 14;
			pts += ((ULONGLONG)(*(pDat+26) & 0xFF)) <<  7;
			pts += ((ULONGLONG)(*(pDat+27) & 0xFE)) >>  1;
			stc = (ULONGLONG)pHwDevExt->VDec.VIDEO_GET_STCA();
			DebugPrint( (DebugLevelTrace, "TOSDVD:  pts = %lx(90KHz) %ld(100ns dec)\r\n", pts, pts * 1000 / 9) );
			DebugPrint( (DebugLevelTrace, "TOSDVD:  stc = %lx(90KHz) %ld(100ns dec)\r\n", stc, stc * 1000 / 9) );
			if( stc < pts && pts - stc > 45000 ) {
				waitTime = (pts - stc - 45000) * 100 / 9;
				if( waitTime > 1000000 ) {
					// Buggy. This is temporary coding for Windows98 beta 3
					pHwDevExt->VDec.VIDEO_SET_STCA( (ULONG)pts );
					DebugPrint( (DebugLevelTrace, "TOSDVD:  <<<< Bad Wait Time (%ldms)\r\n", waitTime/1000 ) );
					waitTime = 0;
				}
			}
		}
	}
	return( (ULONG)waitTime );
}

void ScheduledDMAxfer( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++ Schedule flag off ++++\r\n" ) );
	if( pHwDevExt->bDMAscheduled == TRUE ) {
		pHwDevExt->bDMAscheduled = FALSE;
		PreDMAxfer( pHwDevExt );
	}
}

void PreDMAxfer( PHW_DEVICE_EXTENSION pHwDevExt )
{
	PHW_STREAM_REQUEST_BLOCK pSrb;
	PKSSTREAM_HEADER pStruc;
	ULONG	index;
	BOOLEAN	last;
	BOOLEAN	fDMA0 = FALSE;
	BOOLEAN	fDMA1 = FALSE;
	ULONG	time0 = 0;
	ULONG	time1 = 0;

	if( pHwDevExt->bDMAstop == TRUE ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++ bDMAstop == TRUE ++++\r\n" ) );
		return;
	}

	pHwDevExt->fDMA = 0x03;

	// If Play Mode is not FAST, call DMAxfer directrly
//	if( pHwDevExt->PlayMode != PLAY_MODE_FAST || pHwDevExt->DecodeStart == FALSE ) {
	if( pHwDevExt->RunMode != PLAY_MODE_FAST || pHwDevExt->DecodeStart == FALSE ) {
		if( pHwDevExt->bDMAscheduled == TRUE ) {
			pHwDevExt->bDMAscheduled = FALSE;
		}
		DMAxfer( pHwDevExt );
		return;
	}

//	{
//		ULONG dwSTC;
//		dwSTC = pHwDevExt->VDec.VIDEO_GET_STCA();
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  dwSTC = %lx\r\n", dwSTC ) );
//	}

	// If called from end of DMA interrupt routine when scheduled, then no operation.
	if( pHwDevExt->bDMAscheduled == TRUE )
		return;

	if( pHwDevExt->PlayMode == PLAY_MODE_FREEZE )
		return;

	if( pHwDevExt->pSrbDMA0 == NULL ) {
		pSrb = pHwDevExt->DevQue.refer1st( &index, &last );
		if( pSrb != NULL ) {
			fDMA0 = TRUE;
			pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[index];
			time0 = GetHowLongWait( pHwDevExt, pStruc );
		}
		if( pHwDevExt->pSrbDMA1 == NULL ) {
			pSrb = pHwDevExt->DevQue.refer2nd( &index, &last );
			if( pSrb != NULL ) {
				fDMA1 = TRUE;
				pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[index];
				time1 = GetHowLongWait( pHwDevExt, pStruc );
			}
		}
	}
	else if( pHwDevExt->pSrbDMA1 == NULL ) {
		pSrb = pHwDevExt->DevQue.refer1st( &index, &last );
		if( pSrb != NULL ) {
			fDMA1 = TRUE;
			pStruc = &((PKSSTREAM_HEADER)(pSrb->CommandData.DataBufferArray))[index];
			time1 = GetHowLongWait( pHwDevExt, pStruc );
		}
	}

	// both DMA0 and DMA1 are available
	if( fDMA0 == TRUE && fDMA1 == TRUE ) {
		if( time0 == 0 && time1 == 0 ) {
			DMAxfer( pHwDevExt );
		}
		else if( time0 == 0 ) {
			pHwDevExt->fDMA = 0x01;
			DMAxfer( pHwDevExt );
			// Scheduling
			DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++ Scheduling ++++\r\n" ) );
			DebugPrint( (DebugLevelTrace, "TOSDVD:  time1 = %x\r\n", time1 ) );
			pHwDevExt->bDMAscheduled = TRUE;
			StreamClassScheduleTimer(
				NULL,
				pHwDevExt,
				time1,
				(PHW_TIMER_ROUTINE)ScheduledDMAxfer,
				pHwDevExt
			);
		}
		else {
			// Scheduling
			DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++ Scheduling ++++\r\n" ) );
			DebugPrint( (DebugLevelTrace, "TOSDVD:  time0 = %x\r\n", time0 ) );
			pHwDevExt->bDMAscheduled = TRUE;
			StreamClassScheduleTimer(
				NULL,
				pHwDevExt,
				time0,
				(PHW_TIMER_ROUTINE)ScheduledDMAxfer,
				pHwDevExt
			);
		}
	}
	// only DMA0 is available
	else if( fDMA0 == TRUE ) {
		if( time0 == 0 ) {
			DMAxfer( pHwDevExt );
		}
		else {
			// Scheduling
			DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++ Scheduling ++++\r\n" ) );
			DebugPrint( (DebugLevelTrace, "TOSDVD:  time0 = %x\r\n", time0 ) );
			pHwDevExt->bDMAscheduled = TRUE;
			StreamClassScheduleTimer(
				NULL,
				pHwDevExt,
				time0,
				(PHW_TIMER_ROUTINE)ScheduledDMAxfer,
				pHwDevExt
			);
		}
	}
	// only DMA1 is available
	else if( fDMA1 == TRUE ) {
		if( time1 == 0 ) {
			DMAxfer( pHwDevExt );
		}
		else {
			// Scheduling
			DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++ Scheduling ++++\r\n" ) );
			DebugPrint( (DebugLevelTrace, "TOSDVD:  time1 = %x\r\n", time1 ) );
			pHwDevExt->bDMAscheduled = TRUE;
			StreamClassScheduleTimer(
				NULL,
				pHwDevExt,
				time1,
				(PHW_TIMER_ROUTINE)ScheduledDMAxfer,
				pHwDevExt
			);
		}
	}
	else {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++++ No Data in queue (PreDMAxfer) ++++++\r\n" ) );
	}
}

void DMAxfer( PHW_DEVICE_EXTENSION pHwDevExt )
{
	ULONG	addr;
	ULONG	vbuffsize;
	ULONG	index0 = 0, index1 = 0;
//	PUCHAR ioBase = pHwDevExt->ioBaseLocal;
	BOOL fDMA0 = FALSE;
	BOOL fDMA1 = FALSE;
	UCHAR fDMA;

	// SCR discontinue test
	PKSSTREAM_HEADER pStruc;
//	unsigned char	*p;
	DWORD dwTMP;
	DWORD dwPTS = 0;
	BOOL TimeValid = FALSE;

	if( (fDMA = pHwDevExt->fDMA) == 0 )
		return;

	if( !pHwDevExt->SendFirst ) {
		fProgrammed = FALSE;
		pHwDevExt->bSTCvalid = FALSE;
	}

	if( pHwDevExt->pSrbDMA0 == NULL && (fDMA & 0x01) ) {
		pHwDevExt->pSrbDMA0 = pHwDevExt->DevQue.get( &index0, &(pHwDevExt->fSrbDMA0last) );
		if( pHwDevExt->pSrbDMA0 == NULL ) {
			pHwDevExt->fSrbDMA0last = FALSE;
			DebugPrint( (DebugLevelVerbose, "TOSDVD:  pHwDevExt->pSrbDMA0 == NULL\r\n") );
		}
		else {
			// debug
			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(DmaXfer0) srb = 0x%x, %d\r\n", pHwDevExt->pSrbDMA0, pHwDevExt->fSrbDMA0last ));
			}

			fDMA0 = TRUE;

			ULONG	index;
			index = index0;
			if( pHwDevExt->pSrbDMA0->NumberOfBuffers != pHwDevExt->pSrbDMA0->NumberOfPhysicalPages )
				index++;
			pStruc = &((PKSSTREAM_HEADER)(pHwDevExt->pSrbDMA0->CommandData.DataBufferArray))[index];
			SetAudioID( pHwDevExt, pStruc );
//--- Change DTS ---//
//xunGetPTS( (PUCHAR)pStruc->Data );
//------------------//
			if( !pHwDevExt->DecodeStart ) {
				if( !(pHwDevExt->DataDiscontFlagCount & VIDEO_DISCONT_FLAG) && !pHwDevExt->bSTCvalid ) {
					dwPTS = pHwDevExt->dwSTCtemp;
					TimeValid = TRUE;
					DebugPrint( (DebugLevelTrace, "TOSDVD:  <---- Underflow STC ---->\r\n") );
				}
				else if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEVALID ) {
					if( TimeValid==FALSE ) {
						dwPTS = ConvertStrmtoPTS( pStruc->PresentationTime.Time );
					}
					else {
						dwTMP = ConvertStrmtoPTS( pStruc->PresentationTime.Time );
						dwPTS = (dwPTS>dwTMP) ? dwTMP : dwPTS;
					}
					TimeValid = TRUE;
				}
			}
		}
	}

	if( pHwDevExt->pSrbDMA1 == NULL && (fDMA & 0x02) ) {
		pHwDevExt->pSrbDMA1 = pHwDevExt->DevQue.get( &index1, &(pHwDevExt->fSrbDMA1last) );
		if( pHwDevExt->pSrbDMA1 == NULL ) {
			pHwDevExt->fSrbDMA1last = FALSE;
			DebugPrint( (DebugLevelVerbose, "TOSDVD:  pHwDevExt->pSrbDMA1 == NULL\r\n") );
		}
		else {
			// debug
			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(DmaXfer1) srb = 0x%x, %d\r\n", pHwDevExt->pSrbDMA1, pHwDevExt->fSrbDMA1last ));
			}

			fDMA1 = TRUE;

			ULONG	index;
			index = index1;
			if( pHwDevExt->pSrbDMA1->NumberOfBuffers != pHwDevExt->pSrbDMA1->NumberOfPhysicalPages )
				index++;
			pStruc = &((PKSSTREAM_HEADER)(pHwDevExt->pSrbDMA1->CommandData.DataBufferArray))[index];
			SetAudioID( pHwDevExt, pStruc );
//--- Change DTS ---//
//xunGetPTS( (PUCHAR)pStruc->Data );
//------------------//
			if( !pHwDevExt->DecodeStart ) {
				if( !(pHwDevExt->DataDiscontFlagCount & VIDEO_DISCONT_FLAG) && !pHwDevExt->bSTCvalid ) {
					dwPTS = pHwDevExt->dwSTCtemp;
					TimeValid = TRUE;
					DebugPrint( (DebugLevelTrace, "TOSDVD:  <---- Underflow STC ---->\r\n") );
				}
				else if( pStruc->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEVALID ) {
					if( TimeValid==FALSE ) {
						dwPTS = ConvertStrmtoPTS( pStruc->PresentationTime.Time );
					}
					else {
						dwTMP = ConvertStrmtoPTS( pStruc->PresentationTime.Time );
						dwPTS = (dwPTS>dwTMP) ? dwTMP : dwPTS;
					}
					TimeValid = TRUE;
				}
			}
		}
	}

	if( !fDMA0 && !fDMA1 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  ++++ No Data in Queue (DMAxfer) ++++\r\n") );
		return;
	}

	if( pHwDevExt->SendFirst && !pHwDevExt->DecodeStart ) {

		if( TimeValid && pHwDevExt->bSTCvalid == FALSE ) {
			pHwDevExt->bSTCvalid = TRUE;
			pHwDevExt->dwSTCInit = dwPTS;
		}

		if( TimeValid && pHwDevExt->dwSTCInit > dwPTS ) {
			DebugPrint( (DebugLevelTrace, "TOSDVD:  %lx --> %lx\r\n", pHwDevExt->dwSTCInit, dwPTS ) );
			pHwDevExt->dwSTCInit = dwPTS;
		}

		vbuffsize = pHwDevExt->VDec.VIDEO_GET_STD_CODE();

		if( vbuffsize > 250000 ) {
#if DBG
			DWORD ct = GetCurrentTime_ms();
			DebugPrint(( DebugLevelTrace, "TOSDVD:VBuff Size %d ( %dms )\r\n", vbuffsize, ct - pHwDevExt->SendFirstTime ));
#endif

			if( pHwDevExt->bSTCvalid == FALSE ) {
				DebugPrint( (DebugLevelTrace, "TOSDVD:  Use old STC in Decode Start %lx --> %lx\r\n", pHwDevExt->dwSTCInit, pHwDevExt->dwSTCtemp ) );
				pHwDevExt->dwSTCInit = pHwDevExt->dwSTCtemp;
			}
			DecodeStart( pHwDevExt, pHwDevExt->dwSTCInit );
		}
	}

	if( ! pHwDevExt->SendFirst ) {

		DebugPrint( (DebugLevelTrace, "TOSDVD:Send First\r\n" ) );

		pHwDevExt->bSTCvalid = TimeValid;
		if( pHwDevExt->bSTCvalid==FALSE ) {
			DebugPrint( (DebugLevelTrace, "TOSDVD:  <-------- PTS as STC is invalid in SendFirst -------->\r\n" ) );
		}
		InitFirstTime( pHwDevExt, dwPTS );
		pHwDevExt->SendFirst = TRUE;
		pHwDevExt->dwSTCInit = dwPTS;

		StreamClassScheduleTimer(
			pHwDevExt->pstroVid,
			pHwDevExt,
			3000000,
			(PHW_TIMER_ROUTINE)TimerDecodeStart,
			pHwDevExt
			);

		fProgrammed = TRUE;

		pHwDevExt->SendFirstTime = GetCurrentTime_ms();
	}

	if( fDMA0 ) {
//		DebugDumpPackHeader( pHwDevExt->pSrbDMA0 );
//		DebugDumpWriteData( pHwDevExt->pSrbDMA0 );

		addr = (ULONG)( pHwDevExt->pSrbDMA0->ScatterGatherBuffer[index0].PhysicalAddress.LowPart );
		pHwDevExt->DAck.PCIF_SET_DMA0_ADDR( addr );

		ASSERT( ( pHwDevExt->pSrbDMA0->ScatterGatherBuffer[index0].Length & 0x7ff ) == 0 );

		pHwDevExt->DAck.PCIF_SET_DMA0_SIZE( pHwDevExt->pSrbDMA0->ScatterGatherBuffer[index0].Length );

		pHwDevExt->DAck.PCIF_DMA0_START();

		DebugPrint(( DebugLevelVerbose, "TOSDVD:DMA0 start! srb = 0x%x\r\n", pHwDevExt->pSrbDMA0 ));
	}
	if( fDMA1 ) {
//		DebugDumpPackHeader( pHwDevExt->pSrbDMA1 );
//		DebugDumpWriteData( pHwDevExt->pSrbDMA1 );

		addr = (ULONG)( pHwDevExt->pSrbDMA1->ScatterGatherBuffer[index1].PhysicalAddress.LowPart );
		pHwDevExt->DAck.PCIF_SET_DMA1_ADDR( addr );

		ASSERT( ( pHwDevExt->pSrbDMA1->ScatterGatherBuffer[index1].Length & 0x7ff ) == 0 );

		pHwDevExt->DAck.PCIF_SET_DMA1_SIZE( pHwDevExt->pSrbDMA1->ScatterGatherBuffer[index1].Length );

		pHwDevExt->DAck.PCIF_DMA1_START();

		DebugPrint(( DebugLevelVerbose, "TOSDVD:DMA1 start! srb = 0x%x\r\n", pHwDevExt->pSrbDMA1 ));
	}
}

void DMAxferKeyData( PHW_DEVICE_EXTENSION pHwDevExt, PHW_STREAM_REQUEST_BLOCK pSrb, PUCHAR addr, DWORD dwSize, PHW_TIMER_ROUTINE pfnCallBack )
{
	PHYSICAL_ADDRESS	phyadd;

	DebugPrint( (DebugLevelTrace, "TOSDVD:DMAxferKeyData\r\n" ) );

	ASSERT( pHwDevExt->pSrbDMA0 == NULL && pHwDevExt->pSrbDMA1 == NULL );

// BUGBUG!
// must be wait underflow!

	// SendFirst
	decStopData( pHwDevExt, TRUE );
	InitFirstTime( pHwDevExt, 0 );

	RtlCopyMemory(pHwDevExt->pDmaBuf,
					addr,
					dwSize);

	phyadd = pHwDevExt->addr;

	pHwDevExt->DAck.PCIF_SET_DMA0_ADDR( phyadd.LowPart );
	pHwDevExt->DAck.PCIF_SET_DMA0_SIZE( dwSize );
	pHwDevExt->DAck.PCIF_DMA0_START();

	pHwDevExt->bKeyDataXfer = TRUE;
	pHwDevExt->pSrbDMA0 = pSrb;
	pHwDevExt->pfnEndKeyData = pfnCallBack;

	pSrb->Status = STATUS_PENDING; // add by seichan 1997/07/10
	return;
}

void EndKeyData( PHW_DEVICE_EXTENSION pHwDevExt )
{
	BOOLEAN	bStatus;

	DebugPrint( (DebugLevelTrace, "TOSDVD:EndKeyData\r\n" ) );

	pHwDevExt->bKeyDataXfer = FALSE;

	bStatus = pHwDevExt->CPro.DiscKeyEnd();

	ASSERTMSG( "\r\n...CPro Status Error!!( DiscKeyEnd )", bStatus );

	pHwDevExt->pSrbDMA0->Status = STATUS_SUCCESS;

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pHwDevExt->pSrbDMA0->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pHwDevExt->pSrbDMA0->StreamObject,
									pHwDevExt->pSrbDMA0 );

	pHwDevExt->pSrbDMA0 = NULL;

	pHwDevExt->XferStartCount = 0;
	pHwDevExt->DecodeStart = FALSE;
	pHwDevExt->SendFirst = FALSE;

	StreamClassScheduleTimer(
		pHwDevExt->pstroVid,
		pHwDevExt,
		0,
		(PHW_TIMER_ROUTINE)TimerDecodeStart,
		pHwDevExt
		);

	return;
}



void InitFirstTime( PHW_DEVICE_EXTENSION pHwDevExt, DWORD dwSTC )
{
	DWORD st, et;

	DebugPrint(( DebugLevelTrace, "TOSDVD:InitFirstTime\r\n" ));
	DebugPrint(( DebugLevelTrace, "TOSDVD:  STC 0x%x( 0x%s(100ns) )\r\n", dwSTC, DebugLLConvtoStr( ConvertPTStoStrm(dwSTC), 16 ) ));
// for debug
	UCHAR mvar;
	mvar = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_IRM );
	mvar &= 0xEF;
	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_IRM, mvar );
	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_ERM, 0 );
//
	st = GetCurrentTime_ms();

	// TC81201F bug recovery
	pHwDevExt->VDec.VIDEO_PLAY_STILL();
	BadWait( 200 );

	// normal process
	pHwDevExt->VDec.VIDEO_SYSTEM_STOP();
	pHwDevExt->VDec.VIDEO_DECODE_STOP();
	pHwDevExt->ADec.AUDIO_ZR38521_STOP();
	pHwDevExt->VPro.SUBP_STC_OFF();

	// TC81201F bug recovery
	pHwDevExt->VDec.VIDEO_BUG_PRE_SEARCH_01();

	// normal process
	pHwDevExt->VDec.VIDEO_STD_CLEAR();
	pHwDevExt->VDec.VIDEO_USER_CLEAR();
	pHwDevExt->VDec.VIDEO_UDAT_CLEAR();
	pHwDevExt->ADec.AUDIO_ZR38521_STOPF();
	if( pHwDevExt->DataDiscontFlagCount & VIDEO_DISCONT_FLAG ) {
		// when decode new data
		pHwDevExt->VPro.SUBP_RESET_INIT();
		pHwDevExt->VPro.SUBP_BUFF_CLEAR();
	}
	else {
		// when recover underflow
		//     Don't reset and clear buffer.
	}
	pHwDevExt->VDec.VIDEO_UFLOW_INT_OFF();
	pHwDevExt->VDec.VIDEO_ALL_IFLAG_CLEAR();
	pHwDevExt->DAck.PCIF_ALL_IFLAG_CLEAR();
	pHwDevExt->DAck.PCIF_PACK_START_ON();

	pHwDevExt->VDec.VIDEO_SYSTEM_START();

	// TC81201F bug recovery
	//     Accoding to TOSHIBA MM lab. Hisatomi-san,
	//     BLACK DATA or SKIP DATA should be set from host bus.
	//     However the VxD is not implemented and work good,
	//     so the minidriver is not implemented too.
	//     If you need, insert code here.

	// TC81201F bug recovery
	pHwDevExt->VDec.VIDEO_PVSIN_OFF();
	pHwDevExt->VDec.VIDEO_BUG_PRE_SEARCH_02();

	// TC81201F bug recovery
	BadWait( 200 );
//	pHwDevExt->VDec.VIDEO_BUG_PRE_SEARCH_03();
//	/* error check */ pHwDevExt->VDec.VIDEO_DECODE_STOP();

	// TC81201F bug recovery
	pHwDevExt->VDec.VIDEO_PVSIN_ON();
	pHwDevExt->VDec.VIDEO_BUG_PRE_SEARCH_05();

//	pHwDevExt->VDec.VIDEO_DECODE_INT_ON();	// Not Use ?

	pHwDevExt->VDec.VIDEO_SET_STCS( dwSTC );	// ? ? ? ?
	pHwDevExt->ADec.AUDIO_ZR38521_VDSCR_ON( dwSTC );

	if( pHwDevExt->DataDiscontFlagCount & VIDEO_DISCONT_FLAG ) {
		// when decode new data
		pHwDevExt->VPro.SUBP_SET_STC( /* dwSTC */ 0 );
		pHwDevExt->VPro.SUBP_BUFF_CLEAR();
	}
	else {
		// when recover underflow
		//    Don't set stc, because sub stc is reset.
	}

	pHwDevExt->VPro.SUBP_MUTE_ON();

	pHwDevExt->fCauseOfStop = 0;

	et = GetCurrentTime_ms();
	DebugPrint( (DebugLevelTrace, "TOSDVD:init first time %dms\r\n", et - st ) );
}

//--- 97.09.10 K.Chujo
// 97.09.14 rename
void MenuDecodeStart( PHW_DEVICE_EXTENSION pHwDevExt )
{
//--- 97.09.14 K.Chujo
	// if no data exists in queue,
	if( pHwDevExt->DevQue.isEmpty()==TRUE ) {
		// if DMA transfer dosen't finish, wait.
		if( pHwDevExt->pSrbDMA0 != NULL || pHwDevExt->pSrbDMA1 != NULL ) {
			StreamClassScheduleTimer(
				NULL,
				pHwDevExt,
				100000,
				(PHW_TIMER_ROUTINE)MenuDecodeStart,
				pHwDevExt
			);
			DebugPrint( (DebugLevelTrace, "TOSDVD:Schedule MenuDecodeStart(1)\r\n" ) );
			return;
		}
	}
	// if data exist in queue, wait.
	else {
		StreamClassScheduleTimer(
			NULL,
			pHwDevExt,
			100000,
			(PHW_TIMER_ROUTINE)MenuDecodeStart,
			pHwDevExt
		);
		DebugPrint( (DebugLevelTrace, "TOSDVD:Schedule MenuDecodeStart(2)\r\n" ) );
		return;
	}
#if DBG
//--- for Debug
	{
		DebugPrint(( DebugLevelTrace, "TOSDVD:MenuDecodeStart\r\n" ));
		ULONG vbuffsize = pHwDevExt->VDec.VIDEO_GET_STD_CODE();
		DWORD ct = GetCurrentTime_ms();
		DebugPrint(( DebugLevelTrace, "TOSDVD:  VBuff Size %d ( %dms )\r\n", vbuffsize, ct - pHwDevExt->SendFirstTime ));
	}
//---
#endif
//--- End.
	pHwDevExt->fCauseOfStop = 0x01;
	if( pHwDevExt->DecodeStart == FALSE ) {
		DecodeStart( pHwDevExt, pHwDevExt->dwSTCInit );
	}
}
//--- End.

void DecodeStart( PHW_DEVICE_EXTENSION pHwDevExt, DWORD dwSTC )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:Decode Start\r\n" ));
	DebugPrint(( DebugLevelTrace, "TOSDVD:  STC 0x%x( 0x%s(100ns) )\r\n", dwSTC, DebugLLConvtoStr( ConvertPTStoStrm(dwSTC), 16 ) ));

	if( pHwDevExt->PlayMode == PLAY_MODE_NORMAL ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  PlayMode = PLAY_MODE_NORMAL\r\n") );

		pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
//		pHwDevExt->ADec.AUDIO_ZR38521_MUTE_OFF();

		pHwDevExt->VDec.VIDEO_PRSO_PS1();
		pHwDevExt->VDec.VIDEO_PLAY_NORMAL();
		pHwDevExt->PlayMode = PLAY_MODE_NORMAL;
		pHwDevExt->RunMode = PLAY_MODE_NORMAL;
		pHwDevExt->VDec.VIDEO_SET_STCS( dwSTC );
		pHwDevExt->ADec.AUDIO_ZR38521_VDSCR_ON( dwSTC );
//		pHwDevExt->ADec.AUDIO_ZR38521_VDSCR_OFF( dwSTC );

//		pHwDevExt->VPro.SUBP_MUTE_OFF();
		if( pHwDevExt->SubpicMute == TRUE )
			pHwDevExt->VPro.SUBP_MUTE_ON();
		else
			pHwDevExt->VPro.SUBP_MUTE_OFF();

		if( pHwDevExt->DataDiscontFlagCount & VIDEO_DISCONT_FLAG ) {
			// when decode new data
			pHwDevExt->VPro.SUBP_SET_STC( dwSTC );
		}
		else {
			// when recover underflow
			//    Don't set stc, because sub stc is reset.
		}
		pHwDevExt->VPro.SUBP_STC_ON();

		decHighlight( pHwDevExt, &(pHwDevExt->hli) );

		pHwDevExt->VDec.VIDEO_UFLOW_INT_ON();
//		pHwDevExt->VDec.VIDEO_UFLOW_INT_OFF();
		pHwDevExt->VDec.VIDEO_BUG_PRE_SEARCH_04();
		pHwDevExt->VDec.VIDEO_DECODE_START();
		pHwDevExt->ADec.AUDIO_ZR38521_PLAY();
		pHwDevExt->VPro.VPRO_VIDEO_MUTE_OFF();
		pHwDevExt->CPgd.CPGD_VIDEO_MUTE_OFF();

//		pHwDevExt->VDec.VIDEO_SEEMLESS_ON();

		StreamClassScheduleTimer(
			NULL,
			pHwDevExt,
			1,
			(PHW_TIMER_ROUTINE)TimerAudioMuteOff,
			pHwDevExt
			);
	}

	else if( pHwDevExt->PlayMode == PLAY_MODE_FAST ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  PlayMode = PLAY_MODE_FAST\r\n") );
		pHwDevExt->VDec.VIDEO_PRSO_NON();
		pHwDevExt->VDec.VIDEO_PLAY_NORMAL();
		pHwDevExt->VDec.VIDEO_UFLOW_INT_OFF();
		pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
		pHwDevExt->VDec.VIDEO_BUG_PRE_SEARCH_04();
		pHwDevExt->VDec.VIDEO_DECODE_START();
		pHwDevExt->VDec.VIDEO_SYSTEM_STOP();
		pHwDevExt->VDec.VIDEO_PLAY_FAST( FAST_ONLYI );
		pHwDevExt->VDec.VIDEO_SYSTEM_START();
//		pHwDevExt->VDec.VIDEO_SET_STCS( dwSTC );
//		pHwDevExt->ADec.AUDIO_ZR38521_VDSCR_ON( dwSTC );
//		pHwDevExt->VPro.SUBP_MUTE_ON();
//		pHwDevExt->VPro.SUBP_SET_STC( dwSTC );
//		pHwDevExt->VPro.SUBP_STC_ON();
		pHwDevExt->ADec.AUDIO_ZR38521_PLAY();
		dwSTC = pHwDevExt->VDec.VIDEO_GET_STCA( );
		DebugPrint( (DebugLevelTrace, "TOSDVD:  dwSTC = %lx\r\n", dwSTC) );
	}

	else if( pHwDevExt->PlayMode == PLAY_MODE_SLOW ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  PlayMode = PLAY_MODE_SLOW\r\n") );

		pHwDevExt->VDec.VIDEO_PRSO_PS1();
		pHwDevExt->VPro.SUBP_SET_AUDIO_NON();
//		pHwDevExt->VDec.VIDEO_PLAY_SLOW();
//		SetPlaySlow( pHwDevExt );
		pHwDevExt->VDec.VIDEO_PLAY_SLOW( (UCHAR)(pHwDevExt->Rate/10000) );

		pHwDevExt->VDec.VIDEO_SET_STCS( dwSTC );
		pHwDevExt->ADec.AUDIO_ZR38521_STOP();
		pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
		if( pHwDevExt->SubpicMute == TRUE )
			pHwDevExt->VPro.SUBP_MUTE_ON();
		else
			pHwDevExt->VPro.SUBP_MUTE_OFF();

		if( pHwDevExt->DataDiscontFlagCount & VIDEO_DISCONT_FLAG ) {
			// when decode new data
			pHwDevExt->VPro.SUBP_SET_STC( dwSTC );
		}
		else {
			// when recover underflow
			//    Don't set stc, because sub stc is reset.
		}
		pHwDevExt->VPro.SUBP_STC_ON();
		pHwDevExt->VDec.VIDEO_UFLOW_INT_ON();
		pHwDevExt->VDec.VIDEO_BUG_PRE_SEARCH_04();
		pHwDevExt->VDec.VIDEO_DECODE_START();
		pHwDevExt->VPro.VPRO_VIDEO_MUTE_OFF();
		pHwDevExt->CPgd.CPGD_VIDEO_MUTE_OFF();
	}

	else if( pHwDevExt->PlayMode == PLAY_MODE_FREEZE ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  PlayMode = PLAY_MODE_FREEZE\r\n") );
	}

	else {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  PlayMode = PLAY_MODE_??????\r\n") );
	}

//--- 97.09.08 K.Chujo
		ClearDataDiscontinuity( pHwDevExt );
		ClearTimeDiscontinuity( pHwDevExt );
		pHwDevExt->DecodeStart = TRUE;
//--- End.

	StreamClassScheduleTimer(
		pHwDevExt->pstroVid,
		pHwDevExt,
		0,
		(PHW_TIMER_ROUTINE)TimerDecodeStart,
		pHwDevExt
		);
}

void TimerDecodeStart( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:TimerDecodeStart()\r\n" ));

	ULONG vbuffsize = pHwDevExt->VDec.VIDEO_GET_STD_CODE();
#if DBG
	DWORD ct = GetCurrentTime_ms();
	DebugPrint(( DebugLevelTrace, "TOSDVD:  VBuff Size %d ( %dms )\r\n", vbuffsize, ct - pHwDevExt->SendFirstTime ));
#endif
// Temporary
	if( vbuffsize > 0 )
		DecodeStart( pHwDevExt, pHwDevExt->dwSTCInit );
	else
		pHwDevExt->SendFirst = FALSE;
}

VOID TimerAudioMuteOff( PHW_DEVICE_EXTENSION pHwDevExt )
{
	ULONG Diff, VStc;

	DebugPrint( (DebugLevelTrace, "TOSDVD:TimerAudioCheck\r\n") );

	if( !pHwDevExt->DecodeStart ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  Timer cancel\r\n" ));
		return;
	}

	pHwDevExt->ADec.AUDIO_ZR38521_STAT( &Diff );
	if( (Diff > 0xfb50) || (Diff < 0x01e0) ) {
		pHwDevExt->ADec.AUDIO_ZR38521_MUTE_OFF();
		DebugPrint(( DebugLevelTrace, "TOSDVD:  Audio Mute Off\r\n" ));
	}
	else {
		VStc = pHwDevExt->VDec.VIDEO_GET_STCA();
		pHwDevExt->ADec.AUDIO_ZR38521_VDSCR_ON( VStc );

		StreamClassScheduleTimer(
			NULL,
			pHwDevExt,
			120000,
			(PHW_TIMER_ROUTINE)TimerAudioMuteOff,
			pHwDevExt
			);
	}
}


// Property

void GetVideoProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	switch ( pSrb->CommandData.PropertyInfo->PropertySetID ) {
	  case 0:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetVideoProperty 0\r\n") );
		TRAP;

		pSrb->Status = STATUS_SUCCESS;
		break;

	  case 1:
		GetCppProperty( pSrb, strmVideo );
		break;

//--- 97.09.24 K.Chujo
	  case 2:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetVideoProperty 2\r\n") );
		GetVideoRateChange( pSrb );
		break;
//--- End.

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetVideoProperty-default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->PropertySetID, pSrb->CommandData.PropertyInfo->PropertySetID ) );
		TRAP;
		pSrb->Status = STATUS_SUCCESS;
		break;
	}
}

void SetVideoProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	switch ( pSrb->CommandData.PropertyInfo->PropertySetID ) {
	  case 0:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetVideoProperty 0\r\n") );
		TRAP;

		pSrb->Status = STATUS_SUCCESS;
		break;

	  case 1:
		SetCppProperty( pSrb );
		break;

//--- 97.09.24 K.Chujo
	  case 2:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetVideoProperty 2\r\n") );
		SetVideoRateChange( pSrb );
		break;
//--- End.

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetVideoProperty-default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->PropertySetID, pSrb->CommandData.PropertyInfo->PropertySetID ) );
		TRAP;
		pSrb->Status = STATUS_SUCCESS;
		break;
	}
}

ULONG audiodecoutmode = KSAUDDECOUTMODE_STEREO_ANALOG;

void GetAudioProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	switch ( pSrb->CommandData.PropertyInfo->PropertySetID ) {
	  case 0:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetAudioProperty\r\n") );

		pSrb->Status = STATUS_SUCCESS;

		switch(pSrb->CommandData.PropertyInfo->Property->Id) {
		  case KSPROPERTY_AUDDECOUT_MODES:
			*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo) =
				KSAUDDECOUTMODE_STEREO_ANALOG | KSAUDDECOUTMODE_SPDIFF;
			break;

		  case KSPROPERTY_AUDDECOUT_CUR_MODE:
			*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo) = audiodecoutmode;
			break;

		  default:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		}
		break;

	  case 1:
		GetCppProperty( pSrb, strmAudio );
		break;

//--- 97.09.24 K.Chujo
	  case 2:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetAudioProperty 2\r\n") );
		GetAudioRateChange( pSrb );
		break;
//--- End.

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetAudioProperty-default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->PropertySetID, pSrb->CommandData.PropertyInfo->PropertySetID ) );
		TRAP;
		pSrb->Status = STATUS_SUCCESS;
		break;
	}
}

void SetAudioProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	switch ( pSrb->CommandData.PropertyInfo->PropertySetID ) {
	  case 0:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetAudioProperty\r\n") );

		pSrb->Status = STATUS_SUCCESS;

		switch(pSrb->CommandData.PropertyInfo->Property->Id) {
		  case KSPROPERTY_AUDDECOUT_CUR_MODE:
			if ((*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo)) &
				(!(KSAUDDECOUTMODE_STEREO_ANALOG | KSAUDDECOUTMODE_SPDIFF)))
			{
				pSrb->Status = STATUS_NOT_IMPLEMENTED;
				break;
			}

//			HwCodecAc3BypassMode(*(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo) &
//				 KSAUDDECOUTMODE_SPDIFF);

			audiodecoutmode = *(PULONG)(pSrb->CommandData.PropertyInfo->PropertyInfo);
			break;

		  default:
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
		}
		break;

	  case 1:
		SetCppProperty( pSrb );
		break;

//--- 97.09.24 K.Chujo
	  case 2:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetAudioProperty 2\r\n") );
		SetAudioRateChange( pSrb );
		break;
//--- End.

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetAudioProperty-default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->PropertySetID, pSrb->CommandData.PropertyInfo->PropertySetID ) );
		TRAP;
		pSrb->Status = STATUS_SUCCESS;
		break;
	}
}

void GetSubpicProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
//	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	switch ( pSrb->CommandData.PropertyInfo->PropertySetID ) {
	  case 0:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetSubpicProperty\r\n") );
		TRAP;

		pSrb->Status = STATUS_SUCCESS;
		break;

	  case 1:
		GetCppProperty( pSrb, strmSubpicture );
		break;

//--- 97.09.24 K.Chujo
	  case 2:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetSubpicProperty 2\r\n") );
		GetSubpicRateChange( pSrb );
		break;
//--- End.

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    GetSubpicProperty-default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->PropertySetID, pSrb->CommandData.PropertyInfo->PropertySetID ) );
		TRAP;
		pSrb->Status = STATUS_SUCCESS;
		break;
	}
}

void SetSubpicProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	pSrb->Status = STATUS_SUCCESS;

	switch ( pSrb->CommandData.PropertyInfo->PropertySetID ) {
	  case 0:
		switch( pSrb->CommandData.PropertyInfo->Property->Id ) {
	  	  case KSPROPERTY_DVDSUBPIC_PALETTE:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_DVDSUBPIC_PALETTE\r\n") );

			PKSPROPERTY_SPPAL ppal;
			UCHAR paldata[48];
			int i;

			ppal = (PKSPROPERTY_SPPAL)pSrb->CommandData.PropertyInfo->PropertyInfo;
			for( i = 0; i < 16; i++ ) {
				paldata[i*3+0] = ppal->sppal[i].Y;
				paldata[i*3+1] = ppal->sppal[i].U;	// -> Cb
				paldata[i*3+2] = ppal->sppal[i].V;	// -> Cr
			}

			pHwDevExt->VPro.VPRO_SUBP_PALETTE( paldata );
			pHwDevExt->CPgd.CPGD_SUBP_PALETTE( paldata );

			}
			break;

	  	  case KSPROPERTY_DVDSUBPIC_HLI:
			{
//h			DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_DVDSUBPIC_HLI\r\n") );

			PKSPROPERTY_SPHLI	phli;
			phli = (PKSPROPERTY_SPHLI)pSrb->CommandData.PropertyInfo->PropertyInfo;

			pHwDevExt->hli = *phli;

			decHighlight( pHwDevExt, phli );

			}
			break;

	  	  case KSPROPERTY_DVDSUBPIC_COMPOSIT_ON:
//			DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_DVDSUBPIC_COMPOSIT_ON\r\n") );

			if( *((PKSPROPERTY_COMPOSIT_ON)pSrb->CommandData.PropertyInfo->PropertyInfo )) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:    COMPOSIT_ON\r\n" ));
//--- 97.09.12 K.Chujo; bug fix
//				pHwDevExt->VPro.SUBP_HLITE_ON();
				pHwDevExt->VPro.SUBP_MUTE_OFF();
//--- End.
				pHwDevExt->SubpicMute = FALSE;
			}
			else {
				DebugPrint(( DebugLevelTrace, "TOSDVD:    COMPOSIT_OFF\r\n" ));
//--- 97.09.12 K.Chujo; bug fix
//				pHwDevExt->VPro.SUBP_HLITE_OFF();
				pHwDevExt->VPro.SUBP_MUTE_ON();
//--- End.
				pHwDevExt->SubpicMute = TRUE;
			}
			break;

	  	  default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:    PropertySetID 0 default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
			TRAP;
			break;
		}
		break;

	  case 1:
		SetCppProperty( pSrb );
		break;

//--- 97.09.24 K.Chujo
	  case 2:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetSubpicProperty 2\r\n") );
		SetSubpicRateChange( pSrb );
		break;
//--- End.

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    SetVideoProperty-default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->PropertySetID, pSrb->CommandData.PropertyInfo->PropertySetID ) );
		TRAP;
		break;
	}
}

void GetVpeProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	DWORD dwInputBufferSize;
	DWORD dwOutputBufferSize;
	DWORD dwNumConnectInfo = 2;
	DWORD dwNumVideoFormat = 1;
	DWORD dwFieldWidth = 720;
	DWORD dwFieldHeight = 240;

	// the pointers to which the input buffer will be cast to
	LPDDVIDEOPORTCONNECT pConnectInfo;
	LPDDPIXELFORMAT pVideoFormat;
	PKSVPMAXPIXELRATE pMaxPixelRate;
	PKS_AMVPDATAINFO pVpdata;

	// LPAMSCALINGINFO pScaleFactor;

	//
	// NOTE:  ABSOLUTELY DO NOT use pmulitem, until it is determined that
	// the stream property descriptor describes a multiple item, or you will
	// pagefault.
	//

	PKSMULTIPLE_ITEM  pmulitem =
		&(((PKSMULTIPLE_DATA_PROP)pSrb->CommandData.PropertyInfo->Property)->MultipleItem);

	//
	// NOTE: same goes for this one as above.
	//

//	PKS_AMVPSIZE pdim = &(((PKSVPSIZE_PROP)pSrb->CommandData.PropertyInfo->Property)->Size);

	if( pSrb->CommandData.PropertyInfo->PropertySetID ) {
		TRAP;
		pSrb->Status = STATUS_NO_MATCH;
		return;
	}

	dwInputBufferSize = pSrb->CommandData.PropertyInfo->PropertyInputSize;
	dwOutputBufferSize = pSrb->CommandData.PropertyInfo->PropertyOutputSize;

	pSrb->Status = STATUS_SUCCESS;

	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {
	  case KSPROPERTY_VPCONFIG_NUMCONNECTINFO:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_NUMCONNECTINFO\r\n") );

		// check that the size of the output buffer is correct
		ASSERT(dwInputBufferSize >= sizeof(DWORD));

		pSrb->ActualBytesTransferred = sizeof(DWORD);

		*(PULONG) pSrb->CommandData.PropertyInfo->PropertyInfo
					= dwNumConnectInfo;
		break;

	  case KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT\r\n") );

		// check that the size of the output buffer is correct
		ASSERT(dwInputBufferSize >= sizeof(DWORD));

		pSrb->ActualBytesTransferred = sizeof(DWORD);

		*(PULONG) pSrb->CommandData.PropertyInfo->PropertyInfo
				= dwNumVideoFormat;

		break;

	  case KSPROPERTY_VPCONFIG_GETCONNECTINFO:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_GETCONNECTINFO\r\n") );

		if (pmulitem->Count > dwNumConnectInfo ||
			pmulitem->Size != sizeof (DDVIDEOPORTCONNECT) ||
			dwOutputBufferSize <
			(pmulitem->Count * sizeof (DDVIDEOPORTCONNECT)))

		{
			DebugPrint(( DebugLevelTrace, "TOSDVD:      pmulitem->Count %d\r\n", pmulitem->Count ));
			DebugPrint(( DebugLevelTrace, "TOSDVD:      pmulitem->Size %d\r\n", pmulitem->Size ));
			DebugPrint(( DebugLevelTrace, "TOSDVD:      dwOutputBufferSize %d\r\n", dwOutputBufferSize ));
			DebugPrint(( DebugLevelTrace, "TOSDVD:      sizeof(DDVIDEOPORTCONNECT) %d\r\n", sizeof(DDVIDEOPORTCONNECT) ));

			TRAP;

			//
			// buffer size is invalid, so error the call
			//

			pSrb->Status = STATUS_INVALID_BUFFER_SIZE;

			return;
		}


		//
		// specify the number of bytes written
		//

		pSrb->ActualBytesTransferred = pmulitem->Count*sizeof(DDVIDEOPORTCONNECT);

		pConnectInfo = (LPDDVIDEOPORTCONNECT)(pSrb->CommandData.PropertyInfo->PropertyInfo);

		// S3
		pConnectInfo->dwSize = sizeof (DDVIDEOPORTCONNECT);
		pConnectInfo->dwPortWidth = 8;
		pConnectInfo->guidTypeID = g_S3Guid;
		pConnectInfo->dwFlags = 0x3F;
		pConnectInfo->dwReserved1 = 0;

		pConnectInfo++;

		// ATI
		pConnectInfo->dwSize = sizeof (DDVIDEOPORTCONNECT);
		pConnectInfo->dwPortWidth = 8;
		pConnectInfo->guidTypeID = g_ATIGuid;
		pConnectInfo->dwFlags = 0x4;
		pConnectInfo->dwReserved1 = 0;

		break;

	  case KSPROPERTY_VPCONFIG_VPDATAINFO:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_VPDATAINFO\r\n" ));

		//
		// specify the number of bytes written
		//

		pSrb->ActualBytesTransferred = sizeof(KS_AMVPDATAINFO);

		//
		// cast the buffer to the porper type
		//
		pVpdata = (PKS_AMVPDATAINFO)pSrb->CommandData.PropertyInfo->PropertyInfo;

		*pVpdata = pHwDevExt->VPFmt;
		pVpdata->dwSize = sizeof (KS_AMVPDATAINFO);

		pVpdata->dwMicrosecondsPerField	= 17;

		ASSERT( pVpdata->dwNumLinesInVREF == 0 );

		pVpdata->dwNumLinesInVREF		= 0;

		if( pHwDevExt->VideoPort == 4 ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:      Set for S3 LPB\r\n" ));
			// S3 LPB
			pVpdata->bEnableDoubleClock		= FALSE;
			pVpdata->bEnableVACT			= FALSE;
			pVpdata->bDataIsInterlaced		= TRUE;
			pVpdata->lHalfLinesOdd  		= 0;
			pVpdata->lHalfLinesEven  		= 0;
			pVpdata->bFieldPolarityInverted	= FALSE;

			pVpdata->amvpDimInfo.dwFieldWidth	= 720 + 158/2;
			pVpdata->amvpDimInfo.dwFieldHeight	= 240 + 1;

			pVpdata->amvpDimInfo.rcValidRegion.left		= 158/2;
			pVpdata->amvpDimInfo.rcValidRegion.top		= 1;
			pVpdata->amvpDimInfo.rcValidRegion.right	= 720 + 158/2 - 4;
			pVpdata->amvpDimInfo.rcValidRegion.bottom	= 240 + 1;

            pVpdata->amvpDimInfo.dwVBIWidth     = pVpdata->amvpDimInfo.dwFieldWidth;
			pVpdata->amvpDimInfo.dwVBIHeight    = pVpdata->amvpDimInfo.rcValidRegion.top;
		}
		else if( pHwDevExt->VideoPort == 7 ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:      Set for ATI AMC\r\n" ));
			// ATI AMC
			pVpdata->bEnableDoubleClock		= FALSE;
			pVpdata->bEnableVACT			= FALSE;
			pVpdata->bDataIsInterlaced		= TRUE;
			pVpdata->lHalfLinesOdd  		= 1;
			pVpdata->lHalfLinesEven  		= 0;
			pVpdata->bFieldPolarityInverted	= FALSE;

			pVpdata->amvpDimInfo.dwFieldWidth	= 720;
			pVpdata->amvpDimInfo.dwFieldHeight	= 240 + 2;

			pVpdata->amvpDimInfo.rcValidRegion.left		= 0;
			pVpdata->amvpDimInfo.rcValidRegion.top		= 2;
			pVpdata->amvpDimInfo.rcValidRegion.right	= 720 - 8;
			pVpdata->amvpDimInfo.rcValidRegion.bottom	= 240 + 2;

            pVpdata->amvpDimInfo.dwVBIWidth     = pVpdata->amvpDimInfo.dwFieldWidth;
			pVpdata->amvpDimInfo.dwVBIHeight    = pVpdata->amvpDimInfo.rcValidRegion.top;
		}
		else
			TRAP;

		break ;

	  case KSPROPERTY_VPCONFIG_MAXPIXELRATE:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_MAXPIXELRATE\r\n") );

		//
		// NOTE:
		// this property is special.  And has another different
		// input property!
		//

		if (dwInputBufferSize < sizeof (KSVPSIZE_PROP))
		{
			TRAP;

			pSrb->Status = STATUS_INVALID_BUFFER_SIZE;

			return;
		}

		pSrb->ActualBytesTransferred = sizeof(KSVPMAXPIXELRATE);

		// cast the buffer to the porper type
		pMaxPixelRate = (PKSVPMAXPIXELRATE)pSrb->CommandData.PropertyInfo->PropertyInfo;

		// tell the app that the pixel rate is valid for these dimensions
		pMaxPixelRate->Size.dwWidth  	= dwFieldWidth;
		pMaxPixelRate->Size.dwHeight 	= dwFieldHeight;
		pMaxPixelRate->MaxPixelsPerSecond	= 1300;

		break;

	  case KSPROPERTY_VPCONFIG_INFORMVPINPUT:

		pSrb->Status = STATUS_NOT_IMPLEMENTED;

		break ;

	  case KSPROPERTY_VPCONFIG_GETVIDEOFORMAT:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_GETVIDEOFORMAT\r\n" ));

		//
		// check that the size of the output buffer is correct
		//

		if (pmulitem->Count > dwNumConnectInfo ||
			pmulitem->Size != sizeof (DDPIXELFORMAT) ||
			dwOutputBufferSize <
			(pmulitem->Count * sizeof (DDPIXELFORMAT)))

		{
			DebugPrint(( DebugLevelTrace, "TOSDVD:      pmulitem->Count %d\r\n", pmulitem->Count ));
			DebugPrint(( DebugLevelTrace, "TOSDVD:      pmulitem->Size %d\r\n", pmulitem->Size ));
			DebugPrint(( DebugLevelTrace, "TOSDVD:      dwOutputBufferSize %d\r\n", dwOutputBufferSize ));
			DebugPrint(( DebugLevelTrace, "TOSDVD:      sizeof(DDPIXELFORMAT) %d\r\n", sizeof(DDPIXELFORMAT) ));

			TRAP;

			//
			// buffer size is invalid, so error the call
			//

			pSrb->Status = STATUS_INVALID_BUFFER_SIZE;

			return;
		}


		//
		// specify the number of bytes written
		//

		pSrb->ActualBytesTransferred = pmulitem->Count*sizeof(DDPIXELFORMAT);

		pVideoFormat = (LPDDPIXELFORMAT)(pSrb->CommandData.PropertyInfo->PropertyInfo);

		if( pHwDevExt->VideoPort == 4 ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:      Set for S3 LPB\r\n" ));
			// S3 LPB
			pVideoFormat->dwSize= sizeof (DDPIXELFORMAT);
			pVideoFormat->dwFlags = DDPF_FOURCC;
			pVideoFormat->dwFourCC = MKFOURCC( 'Y', 'U', 'Y', '2' );
			pVideoFormat->dwYUVBitCount = 16;
		}
		else if( pHwDevExt->VideoPort == 7 ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:      Set for ATI AMC\r\n" ));
			// ATI AMC
			pVideoFormat->dwSize= sizeof (DDPIXELFORMAT);
			pVideoFormat->dwFlags = DDPF_FOURCC;
			pVideoFormat->dwYUVBitCount = 16;
			pVideoFormat->dwFourCC = MKFOURCC( 'U', 'Y', 'V', 'Y' );
			// Not needed?
			pVideoFormat->dwYBitMask = (DWORD)0xFF00FF00;
			pVideoFormat->dwUBitMask = (DWORD)0x000000FF;
			pVideoFormat->dwVBitMask = (DWORD)0x00FF0000;
		}
		else
			TRAP;

		break;

	  case KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY:

		//
		// indicate that we can decimate anything, especially if it's late.
		//

		pSrb->ActualBytesTransferred = sizeof (BOOL);
		*((PBOOL)pSrb->CommandData.PropertyInfo->PropertyInfo) = TRUE;

		break;

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    PropertySetID 0 default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
		TRAP;

		pSrb->Status = STATUS_NOT_IMPLEMENTED;

		break;
	}
}

void SetVpeProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	DWORD dwInputBufferSize;
	DWORD dwOutputBufferSize;
	DWORD *lpdwOutputBufferSize;

	ULONG index;

	PKS_AMVPSIZE pDim;

	if( pSrb->CommandData.PropertyInfo->PropertySetID ) {
		TRAP;
		pSrb->Status = STATUS_NO_MATCH;
		return;
	}

	dwInputBufferSize  = pSrb->CommandData.PropertyInfo->PropertyInputSize;
	dwOutputBufferSize = pSrb->CommandData.PropertyInfo->PropertyOutputSize;
	lpdwOutputBufferSize = &(pSrb->ActualBytesTransferred);

	pSrb->Status = STATUS_SUCCESS;

	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {
	  case KSPROPERTY_VPCONFIG_SETCONNECTINFO:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_SETCONNECTINFO\r\n") );

		//
		// pSrb->CommandData.PropertInfo->PropertyInfo
		// points to a ULONG which is an index into the array of
		// connectinfo structs returned to the caller from the
		// Get call to ConnectInfo.
		//
		// Since the sample only supports one connection type right
		// now, we will ensure that the requested index is 0.
		//

		//
		// at this point, we would program the hardware to use
		// the right connection information for the videoport.
		// since we are only supporting one connection, we don't
		// need to do anything, so we will just indicate success
		//

		index = *((ULONG *)(pSrb->CommandData.PropertyInfo->PropertyInfo));

		DebugPrint(( DebugLevelTrace, "TOSDVD:      %d\r\n", index ));

		if( index == 0 ) {
			pHwDevExt->VideoPort = 4;	// S3 LPB
			pHwDevExt->DAck.PCIF_SET_DIGITAL_OUT( pHwDevExt->VideoPort );
		}
		else if( index == 1 ) {
			pHwDevExt->VideoPort = 7;	// ATI AMC
			pHwDevExt->DAck.PCIF_SET_DIGITAL_OUT( pHwDevExt->VideoPort );
		}
		else
			TRAP;

		break;

	  case KSPROPERTY_VPCONFIG_DDRAWHANDLE:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_DDRAWHANDLE\r\n") );

		pHwDevExt->ddrawHandle =
			(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);

		break;

	  case KSPROPERTY_VPCONFIG_VIDEOPORTID:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_VIDEOPORTID\r\n") );

		pHwDevExt->VidPortID =
			(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);

		break;

	  case KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE\r\n") );

		pHwDevExt->SurfaceHandle =
			(*(PULONG)pSrb->CommandData.PropertyInfo->PropertyInfo);

		break;

	  case KSPROPERTY_VPCONFIG_SETVIDEOFORMAT:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_SETVIDEOFORMAT\r\n" ));

		//
		// pSrb->CommandData.PropertInfo->PropertyInfo
		// points to a ULONG which is an index into the array of
		// VIDEOFORMAT structs returned to the caller from the
		// Get call to FORMATINFO
		//
		// Since the sample only supports one FORMAT type right
		// now, we will ensure that the requested index is 0.
		//

		//
		// at this point, we would program the hardware to use
		// the right connection information for the videoport.
		// since we are only supporting one connection, we don't
		// need to do anything, so we will just indicate success
		//

		index = *((ULONG *)(pSrb->CommandData.PropertyInfo->PropertyInfo));

		DebugPrint(( DebugLevelTrace, "TOSDVD:      %d\r\n", index ));

		break;

	  case KSPROPERTY_VPCONFIG_INFORMVPINPUT:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_INFORMVPINPUT\r\n") );

		//
		// These are the preferred formats for the VPE client
		//
		// they are multiple properties passed in, return success
		//

		pSrb->Status = STATUS_NOT_IMPLEMENTED;

		break;

	  case KSPROPERTY_VPCONFIG_INVERTPOLARITY:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_INVERTPOLARITY\r\n") );

		//
		// Toggles the global polarity flag, telling the output
		// of the VPE port to be inverted.  Since this hardware
		// does not support this feature, we will just return
		// success for now, although this should be returning not
		// implemented
		//

		break;

	  case KSPROPERTY_VPCONFIG_SCALEFACTOR:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    KSPROPERTY_VPCONFIG_SCALEFACTOR\r\n") );

		//
		// the sizes for the scaling factor are passed in, and the
		// image dimensions should be scaled appropriately
		//

		//
		// if there is a horizontal scaling available, do it here.
		//

		TRAP;

		pDim =(PKS_AMVPSIZE)(pSrb->CommandData.PropertyInfo->PropertyInfo);

		break;

	  default:
		DebugPrint( (DebugLevelTrace, "TOSDVD:    PropertySetID 0 default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
		TRAP;

		pSrb->Status = STATUS_NOT_IMPLEMENTED;

		break;
	}
}

void GetCCProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	if( pSrb->CommandData.PropertyInfo->PropertySetID ) {
		TRAP;
		pSrb->Status = STATUS_NO_MATCH;
		return;
	}

	PKSALLOCATOR_FRAMING pfrm = (PKSALLOCATOR_FRAMING)
				pSrb->CommandData.PropertyInfo->PropertyInfo;

	PKSSTATE State;

	pSrb->Status = STATUS_SUCCESS;

	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {
	  case KSPROPERTY_CONNECTION_ALLOCATORFRAMING:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    KSPROPERTY_CONNECTION_ALLOCATORFRAMING\r\n" ));

		pfrm->OptionsFlags = 0;
		pfrm->PoolType = NonPagedPool;
		pfrm->Frames = 10;
		pfrm->FrameSize = 200;
		pfrm->FileAlignment = 0;
		pfrm->Reserved = 0;

		pSrb->ActualBytesTransferred = sizeof( KSALLOCATOR_FRAMING );

		break;

	  case KSPROPERTY_CONNECTION_STATE:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    KSPROPERTY_CONNECTION_STATE\r\n" ));

		State = (PKSSTATE) pSrb->CommandData.PropertyInfo->PropertyInfo;

		pSrb->ActualBytesTransferred = sizeof( State );

		// A very odd rule:
		// When transitioning from stop to pause, DShow tries to preroll
		// the graph.  Capture sources can't preroll, and indicate this
		// by returning VFW_S_CANT_CUE in user mode.  To indicate this
		// condition from drivers, they must return ERROR_NO_DATA_DETECTED

		*State = ((PSTREAMEX)(pHwDevExt->pstroCC->HwStreamExtension))->state;

		if( ((PSTREAMEX)pHwDevExt->pstroCC->HwStreamExtension)->state == KSSTATE_PAUSE ) {
			//
			// wierd stuff for capture type state change.  When you transition
			// from stop to pause, we need to indicate that this device cannot
			// preroll, and has no data to send.
			//

			pSrb->Status = STATUS_NO_DATA_DETECTED;
		}
		break;

	  default:
		DebugPrint(( DebugLevelTrace, "TOSDVD:    PropertySetID 0 default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ));
		TRAP;

		pSrb->Status = STATUS_NOT_IMPLEMENTED;

		break;
	}
}

void SetCCProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	TRAP;
	pSrb->Status = STATUS_NOT_IMPLEMENTED;
	return;
}

void GetCppProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb, LONG strm )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	BOOLEAN	bStatus;

	DebugPrint( (DebugLevelTrace, "TOSDVD:    GetCppProperty\r\n") );

	DWORD *lpdwOutputBufferSize;

	lpdwOutputBufferSize = &(pSrb->ActualBytesTransferred);

	switch( pSrb->CommandData.PropertyInfo->Property->Id )
	{
		case KSPROPERTY_DVDCOPY_CHLG_KEY:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_CHLG_KEY\r\n") );

			PKS_DVDCOPY_CHLGKEY pChlgKey;

			pChlgKey = (PKS_DVDCOPY_CHLGKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;

			bStatus = pHwDevExt->CPro.decoder_challenge( pChlgKey );
			if( !bStatus ) {
				DebugPrint( (DebugLevelTrace, "TOSDVD:        CPro Status Error!!\r\n") );
				TRAP;
			}
			DebugPrint( (DebugLevelTrace, "TOSDVD:        %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\r\n",
				pChlgKey->ChlgKey[0], pChlgKey->ChlgKey[1], pChlgKey->ChlgKey[2], pChlgKey->ChlgKey[3], pChlgKey->ChlgKey[4],
				pChlgKey->ChlgKey[5], pChlgKey->ChlgKey[6], pChlgKey->ChlgKey[7], pChlgKey->ChlgKey[8], pChlgKey->ChlgKey[9]
			) );

			*lpdwOutputBufferSize = sizeof(KS_DVDCOPY_CHLGKEY);
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_DVD_KEY1:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_DVD_KEY1\r\n") );
			TRAP;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_DEC_KEY2:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_DEC_KEY2\r\n") );

			PKS_DVDCOPY_BUSKEY pBusKey;

			pBusKey = (PKS_DVDCOPY_BUSKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;

			bStatus = pHwDevExt->CPro.decoder_bus( pBusKey );
			if( !bStatus ) {
				DebugPrint( (DebugLevelTrace, "TOSDVD:        CPro Status Error!!\r\n") );
				TRAP;
			}
			DebugPrint( (DebugLevelTrace, "TOSDVD:        %02x %02x %02x %02x %02x\r\n",
				pBusKey->BusKey[0], pBusKey->BusKey[1], pBusKey->BusKey[2], pBusKey->BusKey[3], pBusKey->BusKey[4]
			) );

			*lpdwOutputBufferSize = sizeof(KS_DVDCOPY_BUSKEY);
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_TITLE_KEY:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_TITLE_KEY\r\n") );
			TRAP;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_DISC_KEY:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_DISC_KEY\r\n") );
			TRAP;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_SET_COPY_STATE:

			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_SET_COPY_STATE\r\n") );

			if( pHwDevExt->lCPPStrm == -1 || pHwDevExt->lCPPStrm == strm ) {
				pHwDevExt->lCPPStrm = strm;

				DebugPrint(( DebugLevelTrace, "TOSDVD:        return REQUIRED\r\n" ));

				((PKS_DVDCOPY_SET_COPY_STATE)(pSrb->CommandData.PropertyInfo->PropertyInfo))->DVDCopyState
					= KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED;
			}
			else {
				DebugPrint(( DebugLevelTrace, "TOSDVD:        return NOT REQUIRED\r\n" ));

				((PKS_DVDCOPY_SET_COPY_STATE)(pSrb->CommandData.PropertyInfo->PropertyInfo))->DVDCopyState
					= KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED;
			}

			pSrb->ActualBytesTransferred = sizeof( KS_DVDCOPY_SET_COPY_STATE );
			pSrb->Status = STATUS_SUCCESS;

			break;

//		case KSPROPERTY_DVDCOPY_REGION:
//
//			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_REGION\r\n") );
//
//			//
//			// indicate region 1 for US content
//			//
//
//			((PKS_DVDCOPY_REGION)(pSrb->CommandData.PropertyInfo->PropertyInfo))->RegionData
//				= 0x1;
//
//			pSrb->ActualBytesTransferred = sizeof (KS_DVDCOPY_REGION);
//			pSrb->Status = STATUS_SUCCESS;
//
//			break;

		default:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      PropertySetID 1 default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
			TRAP;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;
		}
}

void SetCppProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	BOOLEAN	bStatus;

	DebugPrint( (DebugLevelTrace, "TOSDVD:    SetCppProperty\r\n") );

	switch( pSrb->CommandData.PropertyInfo->Property->Id )
	{
		case KSPROPERTY_DVDCOPY_CHLG_KEY:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_CHLG_KEY\r\n") );

			PKS_DVDCOPY_CHLGKEY pChlgKey;

			pChlgKey = (PKS_DVDCOPY_CHLGKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;

			DebugPrint( (DebugLevelTrace, "TOSDVD:        %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\r\n",
				pChlgKey->ChlgKey[0], pChlgKey->ChlgKey[1], pChlgKey->ChlgKey[2], pChlgKey->ChlgKey[3], pChlgKey->ChlgKey[4],
				pChlgKey->ChlgKey[5], pChlgKey->ChlgKey[6], pChlgKey->ChlgKey[7], pChlgKey->ChlgKey[8], pChlgKey->ChlgKey[9]
			) );

			bStatus = pHwDevExt->CPro.drive_challenge( pChlgKey );

			ASSERTMSG( "\r\n...CPro Status Error!!( drive_challenge )", bStatus );

			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_DVD_KEY1:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_DVD_KEY1\r\n") );

			PKS_DVDCOPY_BUSKEY pBusKey;

			pBusKey = (PKS_DVDCOPY_BUSKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;

			DebugPrint( (DebugLevelTrace, "TOSDVD:        %02x %02x %02x %02x %02x\r\n",
				pBusKey->BusKey[0], pBusKey->BusKey[1], pBusKey->BusKey[2], pBusKey->BusKey[3], pBusKey->BusKey[4]
			) );

			bStatus = pHwDevExt->CPro.drive_bus( pBusKey );

			ASSERTMSG( "\r\n...CPro Status Error!!( drive_bus )", bStatus );

			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_DEC_KEY2:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_DEC_KEY2\r\n") );
			TRAP;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_TITLE_KEY:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_TITLE_KEY\r\n") );

			PKS_DVDCOPY_TITLEKEY pTitleKey;

			pTitleKey = (PKS_DVDCOPY_TITLEKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;

			DebugPrint( (DebugLevelTrace, "TOSDVD:        %02x, %02x %02x %02x %02x %02x\r\n",
				pTitleKey->KeyFlags, pTitleKey->TitleKey[0], pTitleKey->TitleKey[1], pTitleKey->TitleKey[2], pTitleKey->TitleKey[3], pTitleKey->TitleKey[4]
			) );

			bStatus = pHwDevExt->CPro.TitleKey( pTitleKey );

			ASSERTMSG( "\r\n...CPro Status Error!!( TitleKey )", bStatus );

			// Set CGMS for Digital Audio Copy Guard & NTSC Analog Copy Guard
			{
				ULONG cgms = (pTitleKey->KeyFlags & 0x30) >> 4;

				// for Digital Audio Copy Guard
				pHwDevExt->AudioCgms = cgms;
				pHwDevExt->ADec.SetParam(
					pHwDevExt->AudioMode,
					pHwDevExt->AudioFreq,
					pHwDevExt->AudioType,
					pHwDevExt->AudioCgms,
					&pHwDevExt->DAck
				);
				pHwDevExt->ADec.AUDIO_ZR38521_REPEAT_16();
				pHwDevExt->ADec.AUDIO_TC9425_INIT_DIGITAL();
				pHwDevExt->ADec.AUDIO_TC9425_INIT_ANALOG();

				// for NTSC Analog Copy Guard
				pHwDevExt->CPgd.CPGD_SET_CGMS( cgms );
			}
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KSPROPERTY_DVDCOPY_DISC_KEY:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_DISC_KEY\r\n") );

			PKS_DVDCOPY_DISCKEY pDiscKey;

			pDiscKey = (PKS_DVDCOPY_DISCKEY)pSrb->CommandData.PropertyInfo->PropertyInfo;

			bStatus = pHwDevExt->CPro.DiscKeyStart();

			ASSERTMSG( "\r\n...CPro Status Error!!( DiscKeyStart )", bStatus );

			DebugPrint( (DebugLevelTrace, "TOSDVD:        %02x %02x %02x %02x %02x %02x %02x %02x ...\r\n",
				pDiscKey->DiscKey[0], pDiscKey->DiscKey[1], pDiscKey->DiscKey[2], pDiscKey->DiscKey[3],
				pDiscKey->DiscKey[4], pDiscKey->DiscKey[5], pDiscKey->DiscKey[6], pDiscKey->DiscKey[7]
			) );

			DMAxferKeyData(
				pHwDevExt,
				pSrb,
				pDiscKey->DiscKey,
				2048,
				(PHW_TIMER_ROUTINE)EndKeyData );

			}
			pSrb->Status = STATUS_PENDING;
			break;

		case KSPROPERTY_DVDCOPY_SET_COPY_STATE:
			{
			DebugPrint( (DebugLevelTrace, "TOSDVD:      KSPROPERTY_DVDCOPY_SET_COPY_STATE\r\n") );

			PKS_DVDCOPY_SET_COPY_STATE pCopyState;

			pCopyState = (PKS_DVDCOPY_SET_COPY_STATE)pSrb->CommandData.PropertyInfo->PropertyInfo;

			if( pCopyState->DVDCopyState == KS_DVDCOPYSTATE_INITIALIZE ) {
				DebugPrint( (DebugLevelTrace, "TOSDVD:        KS_DVDCOPYSTATE_INITIALIZE\r\n") );

				ASSERT( !pHwDevExt->pSrbCpp );

				pHwDevExt->pSrbCpp = pSrb;
				pHwDevExt->bCppReset = TRUE;

				pHwDevExt->CppFlagCount++;
				DebugPrint(( DebugLevelTrace, "TOSDVD:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
				if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
					SetCppFlag( pHwDevExt );

				pSrb->Status = STATUS_PENDING;
			}
			else if( pCopyState->DVDCopyState == KS_DVDCOPYSTATE_INITIALIZE_TITLE ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:        KS_DVDCOPYSTATE_INITIALIZE_TITLE\r\n" ));

				pHwDevExt->CppFlagCount++;

				if( pHwDevExt->CppFlagCount > pHwDevExt->cOpenInputStream + 1 ) {
					pSrb->Status = STATUS_SUCCESS;
				}
				else {
					ASSERT( !pHwDevExt->pSrbCpp );

					pHwDevExt->pSrbCpp = pSrb;
					pHwDevExt->bCppReset = FALSE;

					DebugPrint(( DebugLevelTrace, "TOSDVD:  CppFlagCount=%ld\r\n", pHwDevExt->CppFlagCount ));
					if( pHwDevExt->CppFlagCount >= pHwDevExt->cOpenInputStream + 1 )
						SetCppFlag( pHwDevExt );

					pSrb->Status = STATUS_PENDING;
				}
			}
			else {
				DebugPrint( (DebugLevelTrace, "TOSDVD:        DVDCOPYSTATE_DONE\r\n") );

				pHwDevExt->CppFlagCount = 0;

				pSrb->Status = STATUS_SUCCESS;
			}
			}
			break;

		default:
			DebugPrint( (DebugLevelTrace, "TOSDVD:      PropertySetID 1 default %d(0x%x)\r\n", pSrb->CommandData.PropertyInfo->Property->Id, pSrb->CommandData.PropertyInfo->Property->Id ) );
			TRAP;
			pSrb->Status = STATUS_SUCCESS;
			break;
		}
}

VOID STREAMAPI StreamClockRtn( IN PHW_TIME_CONTEXT TimeContext )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)TimeContext->HwDeviceExtension;
	ULONGLONG sysTime = GetSystemTime();
	ULONG foo;

//	DebugPrint( (DebugLevelTrace, "TOSDVD:StreamClockRtn\r\n") );

	if( TimeContext->Function != TIME_GET_STREAM_TIME ) {
		TRAP;

		//
		// should handle set onboard, and read onboard clock here.
		//

//		return FALSE;
		return;
	}

	if (fClkPause) {
		if( fProgrammed ) {
			foo = pHwDevExt->VDec.VIDEO_GET_STCA();
			LastStamp = ConvertPTStoStrm( foo );
			if( pHwDevExt->RunMode == PLAY_MODE_FAST ) {
				REFERENCE_TIME tmp;
				tmp = (REFERENCE_TIME)pHwDevExt->dwSTCinPause * 1000 / 9;
				if( tmp > pHwDevExt->StartTime ) {
					LastStamp = (tmp - pHwDevExt->StartTime) * 10000/pHwDevExt->Rate + pHwDevExt->StartTime;
				}
			}
			LastSys = LastSysTime = sysTime;
			fValid = TRUE;
		}
		else {
			LastStamp = 0;
			LastSys = LastSysTime = sysTime;
		}

		TimeContext->Time = LastStamp;
		TimeContext->SystemTime = sysTime;

		DebugPrint(( DebugLevelTrace, "TOSDVD:Clk pause: 0x%x( 0x%s(100ns) )\r\n", ConvertStrmtoPTS(TimeContext->Time), DebugLLConvtoStr( TimeContext->Time, 16 ) ));

//		return( TRUE );
		return;
	}

	//
	// update the clock 4 times a second, or once every 2500000 100 ns ticks
	//

	if( TRUE || (sysTime - LastSysTime) > 2500000 ) {
		if( fProgrammed ) {
			foo = pHwDevExt->VDec.VIDEO_GET_STCA();
			LastStamp = ConvertPTStoStrm( foo );
			if( pHwDevExt->RunMode == PLAY_MODE_FAST ) {
				REFERENCE_TIME tmp;
				tmp = (REFERENCE_TIME)foo * 1000 / 9;
				if( tmp > pHwDevExt->StartTime ) {
					LastStamp = (tmp - pHwDevExt->StartTime) * 10000/pHwDevExt->Rate + pHwDevExt->StartTime;
				}
			}
		}
		else {
			LastStamp = ( sysTime - StartSys );
		}

		LastSys = LastSysTime = sysTime;
		fValid = TRUE;
	}

	TimeContext->Time = LastStamp + ( sysTime - LastSysTime );
	TimeContext->SystemTime = sysTime;
	DebugPrint(( DebugLevelTrace, "TOSDVD:Clk      : 0x%x( 0x%s(100ns) )\r\n", ConvertStrmtoPTS(TimeContext->Time), DebugLLConvtoStr( TimeContext->Time, 16 ) ));

	return;
}


ULONGLONG GetSystemTime()
{
	ULONGLONG ticks;
	ULONGLONG rate;

	ticks = (ULONGLONG)KeQueryPerformanceCounter((PLARGE_INTEGER)&rate).QuadPart;

	//
	// convert from ticks to 100ns clock
	//

	ticks = (ticks & 0xFFFFFFFF00000000) / rate * 10000000 +
			(ticks & 0xFFFFFFFF) * 10000000 / rate;

	return(ticks);

}

ULONGLONG ConvertPTStoStrm(ULONG pts)
{
	ULONGLONG strm;

	strm = (ULONGLONG)pts;
	strm = ( strm * 10000 + 45 ) / 90;

	return (strm);
}

//--- 97.09.22 K.Chujo
ULONG ConvertStrmtoPTS(ULONGLONG strm)
{
	ULONGLONG pts;

	pts = ( strm * 9 + 500 ) / 1000;
	return ( (ULONG)pts );
}
//--- End.

void TimerCppReset( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
	BOOLEAN	bStatus;
	BOOL bQueStatus = FALSE;

// Temporary
	if( pHwDevExt->pSrbCpp == NULL ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD: pSrbCpp is NULL!\r\n" ));
		return;
	}

	if( pHwDevExt->PlayMode == PLAY_MODE_FAST || pHwDevExt->PlayMode == PLAY_MODE_SLOW ) {
		bQueStatus = pHwDevExt->DevQue.isEmpty();
		if( bQueStatus == FALSE ) {
			StreamClassScheduleTimer(
				NULL,
				pHwDevExt,
				100000,
				(PHW_TIMER_ROUTINE)TimerCppReset,
				pSrb
				);
			DebugPrint( (DebugLevelTrace, "TOSDVD:Schedule TimerCppReset\r\n") );
			return;
		}
	}
	else if( pHwDevExt->DecodeStart ) {
		StreamClassScheduleTimer(
			NULL,
			pHwDevExt,
			100000,
			(PHW_TIMER_ROUTINE)TimerCppReset,
			pSrb
			);
		DebugPrint( (DebugLevelTrace, "TOSDVD:Schedule TimerCppReset\r\n") );
		return;
	}

	DebugPrint( (DebugLevelTrace, "TOSDVD:TimerCppReset\r\n") );

	// cpp initialize
	if( pHwDevExt->bCppReset ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:CPro Reset !!!!!!!!!!!! CPro Reset !!!!!!!!!!!! CPro Reset !!!!!!!!!!!!\r\n") );

		bStatus = pHwDevExt->CPro.reset( GUARD );
		ASSERTMSG( "\r\n...CPro Status Error!!( reset )", bStatus );
	}
	else {	// TitleKey

// BUGBUG!
// must be wait underflow!

		decStopData( pHwDevExt, TRUE );
		pHwDevExt->XferStartCount = 0;
		pHwDevExt->DecodeStart = FALSE;
		pHwDevExt->SendFirst = FALSE;

		StreamClassScheduleTimer(
			pHwDevExt->pstroVid,
			pHwDevExt,
			0,
			(PHW_TIMER_ROUTINE)TimerDecodeStart,
			pHwDevExt
			);
	}

	pHwDevExt->pSrbCpp = NULL;
	pHwDevExt->bCppReset = FALSE;

	pSrb->Status = STATUS_SUCCESS;

	StreamClassStreamNotification( ReadyForNextStreamControlRequest,
									pSrb->StreamObject );

	StreamClassStreamNotification( StreamRequestComplete,
									pSrb->StreamObject,
									pSrb );

	DebugPrint( (DebugLevelTrace, "TOSDVD:  Success return\r\n") );

	return;
}

void SetPlayMode( PHW_DEVICE_EXTENSION pHwDevExt, ULONG mode )
{
	BOOL bDecode;

	bDecode = pHwDevExt->VDec.VIDEO_GET_DECODE_STATE();

	if( !bDecode ) {
		pHwDevExt->VDec.VIDEO_PRSO_PS1();
		pHwDevExt->PlayMode = mode;
		if( mode != PLAY_MODE_FREEZE )
			pHwDevExt->PlayMode = mode;
//		pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
	}
	else {
		if( mode == PLAY_MODE_NORMAL ) {
			if( pHwDevExt->PlayMode == PLAY_MODE_FAST ) {
				decFastNormal( pHwDevExt );
				UnderflowStopData( pHwDevExt );
//				ADO_MUTE();
//				SP_MUTE();
			}
			else {
				decGenericNormal( pHwDevExt );
//				ADO_MUTE();
				StreamClassScheduleTimer(
					NULL,
					pHwDevExt,
					1,
					(PHW_TIMER_ROUTINE)TimerAudioMuteOff,
					pHwDevExt
					);
			}
			pHwDevExt->PlayMode = PLAY_MODE_NORMAL;
			pHwDevExt->RunMode = PLAY_MODE_NORMAL;
//			pHwDevExt->bDMAscheduled = FALSE;
//			if( pHwDevExt->pSrbDMA0 == NULL && pHwDevExt->pSrbDMA1 == NULL ) {
//				PreDMAxfer( pHwDevExt );
//			}
		}
		else if( mode == PLAY_MODE_SLOW ) {
			if( pHwDevExt->PlayMode == PLAY_MODE_FAST ) {
				decFastSlow( pHwDevExt );
				UnderflowStopData( pHwDevExt );
			}
			else {
				decGenericSlow( pHwDevExt );
			}
			pHwDevExt->PlayMode = PLAY_MODE_SLOW;
			pHwDevExt->RunMode = PLAY_MODE_SLOW;
		}
		else if( mode == PLAY_MODE_FREEZE ) {
			if( pHwDevExt->PlayMode == PLAY_MODE_FAST ) {
				decFastFreeze( pHwDevExt );
			}
			else {
//				CANCEL_ADO_MUTE();
				decGenericFreeze( pHwDevExt );
//				SP_MUTE();
			}
			pHwDevExt->PlayMode = PLAY_MODE_FREEZE;
			// Doesn't change RunMode. Because RunMode indicates the next play mode.
		}
		else if( mode == PLAY_MODE_FAST ) {
			if( pHwDevExt->PlayMode == PLAY_MODE_FREEZE ) {
				decFreezeFast( pHwDevExt );
				pHwDevExt->PlayMode = PLAY_MODE_FAST;
				if( pHwDevExt->pSrbDMA0 == NULL && pHwDevExt->pSrbDMA1 == NULL ) {
					DebugPrint( (DebugLevelTrace, "TOSDVD:  <<<< kick >>>>\r\n") );
					PreDMAxfer( pHwDevExt );
				}
			}
			else {
				decStopForFast( pHwDevExt );
				ForcedStopData( pHwDevExt, 0x04 );
			}
			pHwDevExt->PlayMode = PLAY_MODE_FAST;
			pHwDevExt->RunMode = PLAY_MODE_FAST;
		}
		else
			TRAP;
	}
}

// unit = ms
DWORD GetCurrentTime_ms( void )
{
	LARGE_INTEGER time, rate;

	time = KeQueryPerformanceCounter( &rate );

	return( (DWORD)( ( time.QuadPart * 1000 ) / rate.QuadPart  ) );
}

void StopData( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->SendFirst = FALSE;
	pHwDevExt->DecodeStart = FALSE;
	pHwDevExt->XferStartCount = 0;
	pHwDevExt->CppFlagCount = 0;

	StreamClassScheduleTimer(
		pHwDevExt->pstroVid,
		pHwDevExt,
		0,
		(PHW_TIMER_ROUTINE)TimerDecodeStart,
		pHwDevExt
		);

	StreamClassScheduleTimer(
		pHwDevExt->pstroAud,
		pHwDevExt,
		0,
		(PHW_TIMER_ROUTINE)CheckAudioUnderflow,
		pHwDevExt
	);

	if( pHwDevExt->pSrbDMA0 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:      pSrbDMA0 = 0x%x exist\r\n", pHwDevExt->pSrbDMA0 ));

		if( pHwDevExt->fSrbDMA0last ) {
			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(StopData) srb = 0x%x\r\n", pHwDevExt->pSrbDMA0 ));
				if( pHwDevExt->pSrbDMA0 == pHwDevExt->pSrbDMA1 || pHwDevExt->pSrbDMA1 == NULL ) {
					DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(StopData)\r\n" ));
					StreamClassScheduleTimer(
						NULL,
						pHwDevExt,
						1,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->parmSrb
						);
				}
			}

			pHwDevExt->pSrbDMA0->Status = STATUS_SUCCESS;
			StreamClassStreamNotification( StreamRequestComplete,
											pHwDevExt->pSrbDMA0->StreamObject,
											pHwDevExt->pSrbDMA0 );
		}
		pHwDevExt->pSrbDMA0 = NULL;
		pHwDevExt->fSrbDMA0last = FALSE;
	}
	if( pHwDevExt->pSrbDMA1 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:      pSrbDMA1 = 0x%x exist\r\n", pHwDevExt->pSrbDMA1 ));

		if( pHwDevExt->fSrbDMA1last ) {
			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(StopData) srb = 0x%x\r\n", pHwDevExt->pSrbDMA1 ));
				if( pHwDevExt->pSrbDMA0 == NULL ) {
					DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(StopData)\r\n" ));
					StreamClassScheduleTimer(
						NULL,
						pHwDevExt,
						1,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->parmSrb
						);
				}
			}

			pHwDevExt->pSrbDMA1->Status = STATUS_SUCCESS;
			StreamClassStreamNotification( StreamRequestComplete,
											pHwDevExt->pSrbDMA1->StreamObject,
											pHwDevExt->pSrbDMA1 );
		}
		pHwDevExt->pSrbDMA1 = NULL;
		pHwDevExt->fSrbDMA1last = FALSE;
	}

	PHW_STREAM_REQUEST_BLOCK pSrbTmp;
	ULONG	index;
	BOOLEAN	fSrbDMAlast;

	for( ; ; ) {
		pSrbTmp = pHwDevExt->DevQue.get( &index, &fSrbDMAlast );
		if( pSrbTmp == NULL )
			break;
		if( fSrbDMAlast ) {
			DebugPrint(( DebugLevelVerbose, "TOSDVD:  pSrb = 0x%x\r\n", pSrbTmp ));

			if( ((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(StopData) srb = 0x%x\r\n", pSrbTmp ));
				DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(StopData)\r\n" ));
					StreamClassScheduleTimer(
						NULL,
						pHwDevExt,
						1,
						((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->pfnEndSrb,
						((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->parmSrb
						);
			}

			pSrbTmp->Status = STATUS_SUCCESS;
			StreamClassStreamNotification( StreamRequestComplete,
											pSrbTmp->StreamObject,
											pSrbTmp );
		}
	}

	pHwDevExt->RunMode = PLAY_MODE_NORMAL;	// PlayMode after STOP is Normal Mode;
	fProgrammed = fStarted = FALSE;
	fClkPause = FALSE;

	decStopData( pHwDevExt, FALSE );

}

void CheckAudioUnderflow( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:CheckAudioUnderflow\r\n" ));

	NTSTATUS status;
	ULONG buffStatus;

	status = pHwDevExt->ADec.AUDIO_ZR38521_BFST( &buffStatus );
	if( status == STATUS_UNSUCCESSFUL ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  AUDIO_ZR38521_BFST Unsuccessful\r\n" ));
		TRAP;
	}
	if( pHwDevExt->VDec.VIDEO_GET_STD_CODE() >= 1024 /* Underflow Size of Video */ ) {
		// cancel ScheduleTimer
		StreamClassScheduleTimer(
			pHwDevExt->pstroAud,
			pHwDevExt,
			0,
			(PHW_TIMER_ROUTINE)CheckAudioUnderflow,
			pHwDevExt
		);
		return;
	}
	if( (buffStatus & 0x0700)!=0x0700 && (buffStatus & 0x0001)!=0x0001 ) {
		// reschedule
		StreamClassScheduleTimer(
			pHwDevExt->pstroAud,
			pHwDevExt,
			500000,
			(PHW_TIMER_ROUTINE)CheckAudioUnderflow,
			pHwDevExt
		);
		return;
	}
	UnderflowStopData( pHwDevExt );
}

void UnderflowStopData( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:UnderflowStopData fCauseOfStop = %d\r\n", pHwDevExt->fCauseOfStop ));
	ClearTimeDiscontinuity( pHwDevExt );

	pHwDevExt->SendFirst = FALSE;
	pHwDevExt->DecodeStart = FALSE;
//	pHwDevExt->XferStartCount = 0;
//	pHwDevExt->CppFlagCount = 0;

	StreamClassScheduleTimer(
		pHwDevExt->pstroVid,
		pHwDevExt,
		0,
		(PHW_TIMER_ROUTINE)TimerDecodeStart,
		pHwDevExt
		);

	StreamClassScheduleTimer(
		pHwDevExt->pstroAud,
		pHwDevExt,
		0,
		(PHW_TIMER_ROUTINE)CheckAudioUnderflow,
		pHwDevExt
	);

// 97.10.25
	pHwDevExt->bDMAstop = TRUE;

	pHwDevExt->fCauseOfStop = 0x00;

//	StreamClassScheduleTimer(
//		NULL,
//		pHwDevExt,
//		100000,
//		(PHW_TIMER_ROUTINE)StopDequeue,
//		pHwDevExt
//	);

	StopDequeue( pHwDevExt );

// 97.10.25

//	if( pHwDevExt->pSrbDMA0 ) {
//		DebugPrint(( DebugLevelTrace, "TOSDVD:      pSrbDMA0 = 0x%x exist\r\n", pHwDevExt->pSrbDMA0 ));
//
//		if( pHwDevExt->fSrbDMA0last ) {
//			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb ) {
//				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(UnderflowStopData) srb = 0x%x\r\n", pHwDevExt->pSrbDMA0 ));
//				if( pHwDevExt->pSrbDMA0 == pHwDevExt->pSrbDMA1 || pHwDevExt->pSrbDMA1 == NULL ) {
//					DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(UnderflowStopData)\r\n" ));
//					StreamClassScheduleTimer(
//						NULL,
//						pHwDevExt,
//						1,
//						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb,
//						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->parmSrb
//						);
//				}
//			}
//
//			pHwDevExt->pSrbDMA0->Status = STATUS_SUCCESS;
//			StreamClassStreamNotification( StreamRequestComplete,
//											pHwDevExt->pSrbDMA0->StreamObject,
//											pHwDevExt->pSrbDMA0 );
//		}
//		pHwDevExt->pSrbDMA0 = NULL;
//		pHwDevExt->fSrbDMA0last = FALSE;
//	}
//	if( pHwDevExt->pSrbDMA1 ) {
//		DebugPrint(( DebugLevelTrace, "TOSDVD:      pSrbDMA1 = 0x%x exist\r\n", pHwDevExt->pSrbDMA1 ));
//
//		if( pHwDevExt->fSrbDMA1last ) {
//			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb ) {
//				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(UnderflowStopData) srb = 0x%x\r\n", pHwDevExt->pSrbDMA1 ));
//				if( pHwDevExt->pSrbDMA0 == NULL ) {
//					DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(UnderflowStopData)\r\n" ));
//					StreamClassScheduleTimer(
//						NULL,
//						pHwDevExt,
//						1,
//						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb,
//						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->parmSrb
//						);
//				}
//			}
//
//			pHwDevExt->pSrbDMA1->Status = STATUS_SUCCESS;
//			StreamClassStreamNotification( StreamRequestComplete,
//											pHwDevExt->pSrbDMA1->StreamObject,
//											pHwDevExt->pSrbDMA1 );
//		}
//		pHwDevExt->pSrbDMA1 = NULL;
//		pHwDevExt->fSrbDMA1last = FALSE;
//	}
//
//	PHW_STREAM_REQUEST_BLOCK pSrbTmp;
//	ULONG	index;
//	BOOLEAN	fSrbDMAlast;
//
//	for( ; ; ) {
//		pSrbTmp = pHwDevExt->DevQue.get( &index, &fSrbDMAlast );
//		if( pSrbTmp == NULL )
//			break;
//		if( fSrbDMAlast ) {
//			DebugPrint(( DebugLevelVerbose, "TOSDVD:  pSrb = 0x%x\r\n", pSrbTmp ));
//
//			if( ((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->pfnEndSrb ) {
//				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(UnderflowStopData) srb = 0x%x\r\n", pSrbTmp ));
//				DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(UnderflowStopData)\r\n" ));
//					StreamClassScheduleTimer(
//						NULL,
//						pHwDevExt,
//						1,
//						((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->pfnEndSrb,
//						((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->parmSrb
//						);
//			}
//
//			pSrbTmp->Status = STATUS_SUCCESS;
//			StreamClassStreamNotification( StreamRequestComplete,
//											pSrbTmp->StreamObject,
//											pSrbTmp );
//		}
//	}

//	if( pHwDevExt->fCauseOfStop == 0x01 )
//		return;

//	fProgrammed = fStarted = FALSE;
	fClkPause = FALSE;

//	if( pHwDevExt->fCauseOfStop == 0x00 ) {
//		decStopData( pHwDevExt, TRUE );
//	}
//	pHwDevExt->VDec.VIDEO_DECODE_STOP();
//	pHwDevExt->ADec.AUDIO_ZR38521_STOP();
//	pHwDevExt->VPro.SUBP_STC_OFF();
//	pHwDevExt->bDMAstop = FALSE;
//	DebugPrint(( DebugLevelTrace, "TOSDVD:  bDMAstop = FALSE\r\n" ));
}

void ForcedStopData( PHW_DEVICE_EXTENSION pHwDevExt, ULONG flag )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:ForcedStopData\r\n" ));

	pHwDevExt->VDec.VIDEO_UFLOW_INT_OFF();
	pHwDevExt->VDec.VIDEO_DECODE_STOP();
	pHwDevExt->ADec.AUDIO_ZR38521_STOP();
	pHwDevExt->VPro.SUBP_STC_OFF();
	pHwDevExt->bDMAstop = TRUE;

	pHwDevExt->fCauseOfStop = flag;

	StreamClassScheduleTimer(
		pHwDevExt->pstroAud,
		pHwDevExt,
		0,
		(PHW_TIMER_ROUTINE)CheckAudioUnderflow,
		pHwDevExt
	);

	StopDequeue( pHwDevExt );
//	StreamClassScheduleTimer(
//		NULL,
//		pHwDevExt,
//		100000,
//		(PHW_TIMER_ROUTINE)StopDequeue,
//		pHwDevExt
//	);
}

void StopDequeue( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:StopDequeue\r\n" ));

	if( pHwDevExt->pSrbDMA0 != NULL || pHwDevExt->pSrbDMA1 != NULL ) {
		StreamClassScheduleTimer(
			NULL,
			pHwDevExt,
			100000,
			(PHW_TIMER_ROUTINE)StopDequeue,
			pHwDevExt
		);
		DebugPrint(( DebugLevelTrace, "TOSDVD:Schedule StopDequeue\r\n" ));
		return;
	}

	PHW_STREAM_REQUEST_BLOCK pSrbTmp;
	ULONG	index;
	BOOLEAN	fSrbDMAlast;

	for( ; ; ) {
		pSrbTmp = pHwDevExt->DevQue.get( &index, &fSrbDMAlast );
		if( pSrbTmp == NULL )
			break;
		if( fSrbDMAlast ) {
			DebugPrint(( DebugLevelVerbose, "TOSDVD:  pSrb = 0x%x\r\n", pSrbTmp ));

			if( ((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(StopDequeue) srb = 0x%x\r\n", pSrbTmp ));
				DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(StopDequeue)\r\n" ));
					StreamClassScheduleTimer(
						NULL,
						pHwDevExt,
						1,
						((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->pfnEndSrb,
						((PSRB_EXTENSION)(pSrbTmp->SRBExtension))->parmSrb
						);
			}

			pSrbTmp->Status = STATUS_SUCCESS;
			StreamClassStreamNotification( StreamRequestComplete,
											pSrbTmp->StreamObject,
											pSrbTmp );
		}
	}
	pHwDevExt->bDMAstop = FALSE;

	// 0x04: NORMAL to F.F. or F.F. to F.F.
	if( pHwDevExt->fCauseOfStop == 0x04 ) {
//		pHwDevExt->ADec.AUDIO_ZR38521_STOPF();
//		pHwDevExt->ADec.AUDIO_ZR38521_MUTE_ON();
//		pHwDevExt->VDec.VIDEO_STD_CLEAR();
//		pHwDevExt->VPro.SUBP_BUFF_CLEAR();
//		pHwDevExt->VDec.VIDEO_DECODE_START();
		decResumeForFast( pHwDevExt );
	}
}

void SetAudioID( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc )
{
	ULONG	strID;

	strID = (ULONG)GetStreamID(pStruc->Data);

	// AC-3
	if( (strID & 0xF8)==0x80 ) {
		if( pHwDevExt->VPro.SUBP_GET_AUDIO_CH() != strID ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:AC-3 0x%x\r\n", strID ));

			MYAUDIOFORMAT fmt;

			fmt.dwMode = AUDIO_TYPE_AC3;
			fmt.dwFreq = AUDIO_FS_48;

			ProcessAudioFormat2( &fmt, pHwDevExt );

			pHwDevExt->VPro.SUBP_SET_AUDIO_CH(strID);
		}
	}
	// LPCM
	else if( (strID & 0xF8)==0xA0 ) {
		if( pHwDevExt->VPro.SUBP_GET_AUDIO_CH() != strID ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:LPCM 0x%x\r\n", strID ));

			MYAUDIOFORMAT fmt;

			fmt.dwMode = AUDIO_TYPE_PCM;
			GetLPCMInfo( pStruc->Data, &fmt );

			ProcessAudioFormat2( &fmt, pHwDevExt );

			pHwDevExt->VPro.SUBP_SET_AUDIO_CH(strID);
		}
	}
#if 0
	// MPEG audio
	else if( (strID & 0x??)==0x@@ ) {
	}
#endif
}

//--- 97.09.14 K.Chujo
void SetSubpicID( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc )
{
	ULONG strID;
	ULONG stc;

	strID = (ULONG)GetStreamID(pStruc->Data);

	if( (strID & 0xE0)==0x20 ) {
		if( pHwDevExt->VPro.SUBP_GET_SUBP_CH() != strID ) {
			pHwDevExt->VPro.SUBP_SET_SUBP_CH( strID );
			stc = pHwDevExt->VDec.VIDEO_GET_STCA();
			pHwDevExt->VPro.SUBP_SET_STC( stc );
			pHwDevExt->VPro.SUBP_STC_ON();
		}
	}
}
//--- End.

void SetCppFlag( PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:SetCppFlag()\r\n" ));

	BOOL bSet;

//	pHwDevExt->CppFlagCount = 0;

	ASSERT( pHwDevExt->pSrbCpp );

	bSet = pHwDevExt->DevQue.setEndAddress( (PHW_TIMER_ROUTINE)TimerCppReset, pHwDevExt->pSrbCpp );

	DebugPrint(( DebugLevelTrace, "TOSDVD:  bSet %d\r\n", bSet ));

	if( !bSet ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:    pSrbDMA0 0x%x, pSrbDMA1 0x%x\r\n", pHwDevExt->pSrbDMA0, pHwDevExt->pSrbDMA1 ));

		if( pHwDevExt->pSrbDMA0 == NULL && pHwDevExt->pSrbDMA1 == NULL ) {
			StreamClassScheduleTimer(
				NULL,
				pHwDevExt,
				1,
				(PHW_TIMER_ROUTINE)TimerCppReset,
				pHwDevExt->pSrbCpp
				);
			return;
		}

		if( pHwDevExt->pSrbDMA0 ) {
			((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb = (PHW_TIMER_ROUTINE)TimerCppReset;
			((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->parmSrb = pHwDevExt->pSrbCpp;
		}
		if( pHwDevExt->pSrbDMA1 ) {
			((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb = (PHW_TIMER_ROUTINE)TimerCppReset;
			((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->parmSrb = pHwDevExt->pSrbCpp;
		}
	}
	return;
}

void AudioQueryAccept( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:AudioQueryAccept\r\n" ));

   // We now get connected with a valid format block, so this gets in the way
	// by serges TRAP;

	pSrb->Status = STATUS_SUCCESS;
}

void ProcessAudioFormat( PKSDATAFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:ProcessAudioFormat\r\n" ));

	if( ( IsEqualGUID2( &pfmt->MajorFormat, &KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK ) &&
			IsEqualGUID2( &pfmt->SubFormat, &KSDATAFORMAT_SUBTYPE_AC3_AUDIO ) ) ) {
		// AC-3
		DebugPrint(( DebugLevelTrace, "TOSDVD:  AC-3\r\n" ));

		pHwDevExt->AudioFreq = AUDIO_FS_48;

      // We now receive format switches, so this gets in the way
      // TRAP; // added by serges

      /* If the audio type is not already set to AC3 in the decoder, set it to AC3 now */
		if( pHwDevExt->AudioMode != AUDIO_TYPE_AC3 ) {

			pHwDevExt->AudioMode = AUDIO_TYPE_AC3;

			pHwDevExt->VDec.VIDEO_PRSO_PS1();
			pHwDevExt->ADec.AUDIO_ZR38521_BOOT_AC3();

			pHwDevExt->ADec.AUDIO_ZR38521_CFG();
			pHwDevExt->ADec.AUDIO_ZR38521_AC3();
			pHwDevExt->ADec.AUDIO_ZR38521_KCOEF();
			pHwDevExt->ADec.AUDIO_TC6800_INIT_AC3();
			pHwDevExt->VPro.SUBP_SELECT_AUDIO_SSID();
		}
	}
	else if( ( IsEqualGUID2( &pfmt->MajorFormat, &KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK ) &&
			IsEqualGUID2( &pfmt->SubFormat, &KSDATAFORMAT_SUBTYPE_LPCM_AUDIO ) ) ) {
		// LPCM
		DebugPrint(( DebugLevelTrace, "TOSDVD:  LPCM\r\n" ));

      // We now receive format switches, so this gets in the way
		// by serges TRAP;
#if DBG
                WAVEFORMATEX * pblock = (WAVEFORMATEX *)((DWORD_PTR)pfmt + sizeof(KSDATAFORMAT) );

		DebugPrint(( DebugLevelTrace, "TOSDVD:    wFormatTag      %d\r\n", (DWORD)(pblock->wFormatTag) ));
		DebugPrint(( DebugLevelTrace, "TOSDVD:    nChannels       %d\r\n", (DWORD)(pblock->nChannels) ));
		DebugPrint(( DebugLevelTrace, "TOSDVD:    nSamplesPerSec  %d\r\n", (DWORD)(pblock->nSamplesPerSec) ));
		DebugPrint(( DebugLevelTrace, "TOSDVD:    nAvgBytesPerSec %d\r\n", (DWORD)(pblock->nAvgBytesPerSec) ));
		DebugPrint(( DebugLevelTrace, "TOSDVD:    nBlockAlign     %d\r\n", (DWORD)(pblock->nBlockAlign) ));
		DebugPrint(( DebugLevelTrace, "TOSDVD:    wBitsPerSample  %d\r\n", (DWORD)(pblock->wBitsPerSample) ));
		DebugPrint(( DebugLevelTrace, "TOSDVD:    cbSize          %d\r\n", (DWORD)(pblock->cbSize) ));

      // We now receive format switches, so this gets in the way
      // TRAP; // added by serges
#endif

      /* If the audio type is not already set to LPCM in the decoder, set it to LPCM now */
		if( pHwDevExt->AudioMode != AUDIO_TYPE_PCM ) {

			pHwDevExt->AudioMode = AUDIO_TYPE_PCM;

			pHwDevExt->VDec.VIDEO_PRSO_PS1();
			pHwDevExt->ADec.AUDIO_ZR38521_BOOT_PCM();

			pHwDevExt->ADec.AUDIO_ZR38521_CFG();
			pHwDevExt->ADec.AUDIO_ZR38521_PCMX();
			pHwDevExt->ADec.AUDIO_TC6800_INIT_PCM();
			pHwDevExt->VPro.SUBP_SELECT_AUDIO_SSID();
		}
	}
	else {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  Unsupport audio type\r\n" ));

		DebugPrint(( DebugLevelTrace, "TOSDVD:  Major  %08x-%04x-%04x-%02x%02x%02x%02x%02x%02x%02x%02x\r\n",
			pfmt->MajorFormat.Data1,
			pfmt->MajorFormat.Data2,
			pfmt->MajorFormat.Data3,
			pfmt->MajorFormat.Data4[0],
			pfmt->MajorFormat.Data4[1],
			pfmt->MajorFormat.Data4[2],
			pfmt->MajorFormat.Data4[3],
			pfmt->MajorFormat.Data4[4],
			pfmt->MajorFormat.Data4[5],
			pfmt->MajorFormat.Data4[6],
			pfmt->MajorFormat.Data4[7]
			));
		DebugPrint(( DebugLevelTrace, "TOSDVD:  Sub    %08x-%04x-%04x-%02x%02x%02x%02x%02x%02x%02x%02x\r\n",
			pfmt->SubFormat.Data1,
			pfmt->SubFormat.Data2,
			pfmt->SubFormat.Data3,
			pfmt->SubFormat.Data4[0],
			pfmt->SubFormat.Data4[1],
			pfmt->SubFormat.Data4[2],
			pfmt->SubFormat.Data4[3],
			pfmt->SubFormat.Data4[4],
			pfmt->SubFormat.Data4[5],
			pfmt->SubFormat.Data4[6],
			pfmt->SubFormat.Data4[7]
			));
		DebugPrint(( DebugLevelTrace, "TOSDVD:  Format %08x-%04x-%04x-%02x%02x%02x%02x%02x%02x%02x%02x\r\n",
			pfmt->Specifier.Data1,
			pfmt->Specifier.Data2,
			pfmt->Specifier.Data3,
			pfmt->Specifier.Data4[0],
			pfmt->Specifier.Data4[1],
			pfmt->Specifier.Data4[2],
			pfmt->Specifier.Data4[3],
			pfmt->Specifier.Data4[4],
			pfmt->Specifier.Data4[5],
			pfmt->Specifier.Data4[6],
			pfmt->Specifier.Data4[7]
			));

		TRAP;

		return;
	}

	pHwDevExt->ADec.SetParam(
		pHwDevExt->AudioMode,
		pHwDevExt->AudioFreq,
		pHwDevExt->AudioType,
		pHwDevExt->AudioCgms,
		&pHwDevExt->DAck
	);
	pHwDevExt->VPro.SetParam( pHwDevExt->AudioMode, pHwDevExt->SubpicMute );

	pHwDevExt->ADec.AUDIO_ZR38521_REPEAT_16();
	pHwDevExt->ADec.AUDIO_TC9425_INIT_DIGITAL();
	pHwDevExt->ADec.AUDIO_TC9425_INIT_ANALOG();

//	pHwDevExt->ADec.AUDIO_ZR38521_MUTE_OFF();

// AudioType
//	pHwDevExt->DAck.PCIF_AMUTE2_OFF();
//	pHwDevExt->DAck.PCIF_AMUTE_OFF();
}

void ProcessAudioFormat2( PMYAUDIOFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt )
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:ProcessAudioFormat2()\r\n" ));

	if( pfmt->dwMode == AUDIO_TYPE_AC3 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  AC-3\r\n" ));

		pHwDevExt->AudioFreq = pfmt->dwFreq;

		if( pHwDevExt->AudioMode != AUDIO_TYPE_AC3 ) {

			pHwDevExt->AudioMode = pfmt->dwMode;

			pHwDevExt->VDec.VIDEO_PRSO_PS1();
			pHwDevExt->ADec.AUDIO_ZR38521_BOOT_AC3();

			pHwDevExt->ADec.AUDIO_ZR38521_CFG();
			pHwDevExt->ADec.AUDIO_ZR38521_AC3();
			pHwDevExt->ADec.AUDIO_ZR38521_KCOEF();
			pHwDevExt->ADec.AUDIO_TC6800_INIT_AC3();
			pHwDevExt->VPro.SUBP_SELECT_AUDIO_SSID();
		}
	}
	else if( pfmt->dwMode == AUDIO_TYPE_PCM ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  LPCM\r\n" ));

		pHwDevExt->AudioFreq = pfmt->dwFreq;

		if( pHwDevExt->AudioMode != AUDIO_TYPE_PCM ) {

			pHwDevExt->AudioMode = pfmt->dwMode;

			pHwDevExt->VDec.VIDEO_PRSO_PS1();
			pHwDevExt->ADec.AUDIO_ZR38521_BOOT_PCM();

			pHwDevExt->ADec.AUDIO_ZR38521_CFG();
			pHwDevExt->ADec.AUDIO_ZR38521_PCMX();
			pHwDevExt->ADec.AUDIO_TC6800_INIT_PCM();
			pHwDevExt->VPro.SUBP_SELECT_AUDIO_SSID();
		}
	}
	else {
		TRAP;
		return;
	}

	pHwDevExt->ADec.SetParam(
		pHwDevExt->AudioMode,
		pHwDevExt->AudioFreq,
		pHwDevExt->AudioType,
		pHwDevExt->AudioCgms,
		&pHwDevExt->DAck
	);
	pHwDevExt->VPro.SetParam( pHwDevExt->AudioMode, pHwDevExt->SubpicMute );

	pHwDevExt->ADec.AUDIO_ZR38521_REPEAT_16();
	pHwDevExt->ADec.AUDIO_TC9425_INIT_DIGITAL();
	pHwDevExt->ADec.AUDIO_TC9425_INIT_ANALOG();

//	pHwDevExt->ADec.AUDIO_ZR38521_MUTE_OFF();

// AudioType
//	pHwDevExt->DAck.PCIF_AMUTE2_OFF();
//	pHwDevExt->DAck.PCIF_AMUTE_OFF();

	DebugPrint(( DebugLevelTrace, "TOSDVD:  return\r\n" ));
}

//--- 97.09.24 K.Chujo
void SetVideoRateDefault( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->VideoStartTime = 0;
	pHwDevExt->VideoInterceptTime = 0;
	pHwDevExt->VideoRate = 1 * 10000;
	pHwDevExt->StartTime = 0;
	pHwDevExt->InterceptTime = 0;
	pHwDevExt->Rate = 1 * 10000;
	pHwDevExt->ChangeFlag = 0;
}

void SetAudioRateDefault( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->AudioStartTime = 0;
	pHwDevExt->AudioInterceptTime = 0;
	pHwDevExt->AudioRate = 1 * 10000;
}

void SetSubpicRateDefault( PHW_DEVICE_EXTENSION pHwDevExt )
{
	pHwDevExt->SubpicStartTime = 0;
	pHwDevExt->SubpicInterceptTime = 0;
	pHwDevExt->SubpicRate = 1 * 10000;
}

void SetRateChange( PHW_DEVICE_EXTENSION pHwDevExt, LONG strm )
{
	// strm = 1:video, 2:audio, 4:subpic
	pHwDevExt->ChangeFlag = strm;

	// When video stream rate is changed, rate change is enable... Is this OK?
	if( (pHwDevExt->ChangeFlag & 0x01)==0x01 ) {
		pHwDevExt->ChangeFlag = 0;

		// Maybe buggy? use video rate, start time and intercept time
		pHwDevExt->StartTime = pHwDevExt->VideoStartTime;
		pHwDevExt->InterceptTime = pHwDevExt->VideoInterceptTime;
		pHwDevExt->Rate = pHwDevExt->VideoRate;

DebugPrint( (DebugLevelTrace, "TOSDVD:    Calculated Data\r\n" ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      InterceptTime = 0x%08x\r\n", pHwDevExt->VideoInterceptTime ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      StartTime     = 0x%08x\r\n", pHwDevExt->VideoStartTime ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      Rate          = 0x%08x\r\n", pHwDevExt->VideoRate ) );

		if( pHwDevExt->Rate == 10000 ) {
			SetPlayMode( pHwDevExt, PLAY_MODE_NORMAL );
		}
		else if( pHwDevExt->Rate < 10000 ) {
			SetPlayMode( pHwDevExt, PLAY_MODE_FAST );
		}
		else {
#if DBG
//--- debug
{
	ULONG dwSTC = pHwDevExt->VDec.VIDEO_GET_STCA();
	DebugPrint( (DebugLevelTrace, "TOSDVD:  STC in SLOW = %lx (100ns)\r\n", dwSTC * 1000/9 ) );
}
//---
#endif
			SetPlayMode( pHwDevExt, PLAY_MODE_SLOW );
		}
	}
}

void SetVideoRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  SetVideoRateChange\r\n") );
	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {

		case KS_AM_RATE_SimpleRateChange :
			{
				KS_AM_SimpleRateChange* pRateChange;
				PHW_DEVICE_EXTENSION pHwDevExt;
				REFERENCE_TIME NewStartTime;
				LONG NewRate;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_SimpleRateChange\r\n") );

				pRateChange = (KS_AM_SimpleRateChange*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
				NewStartTime = pRateChange->StartTime;
				NewRate = ( pRateChange->Rate < 0 ) ? -pRateChange->Rate : pRateChange->Rate;

DebugPrint( (DebugLevelTrace, "TOSDVD:    Received Data\r\n" ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      StartTime     = 0x%08x\r\n", NewStartTime ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      Rate          = 0x%08x\r\n", NewRate) );

DebugPrint( (DebugLevelTrace, "TOSDVD:    Current Data\r\n" ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      InterceptTime = 0x%08x\r\n", pHwDevExt->VideoInterceptTime ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      StartTime     = 0x%08x\r\n", pHwDevExt->VideoStartTime ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      Rate          = 0x%08x\r\n", pHwDevExt->VideoRate ) );

//				pHwDevExt->VideoInterceptTime
//					= (pHwDevExt->VideoInterceptTime - NewStartTime)
//					* pHwDevExt->VideoRate
//					/ NewRate
//					+ NewStartTime;

				pHwDevExt->VideoRate = NewRate;
				if( NewRate == 10000 ) {
					pHwDevExt->VideoInterceptTime = 0;
					pHwDevExt->VideoStartTime = 0;
				}
				else {
					pHwDevExt->VideoInterceptTime = (-NewStartTime) * 10000 / NewRate + NewStartTime;
					pHwDevExt->VideoStartTime = NewStartTime;
				}

				SetRateChange( pHwDevExt, 0x01 );
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_ExactRateChange :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_MaxFullDataRate :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_Step :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}

void SetAudioRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  SetAudioRateChange\r\n") );
	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {

		case KS_AM_RATE_SimpleRateChange :
			{
				KS_AM_SimpleRateChange* pRateChange;
				PHW_DEVICE_EXTENSION pHwDevExt;
				REFERENCE_TIME NewStartTime;
				LONG NewRate;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_SimpleRateChange\r\n") );

				pRateChange = (KS_AM_SimpleRateChange*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
				NewStartTime = pRateChange->StartTime;
				NewRate = ( pRateChange->Rate < 0 ) ? -pRateChange->Rate : pRateChange->Rate;

DebugPrint( (DebugLevelTrace, "TOSDVD:    Received Data\r\n" ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      StartTime     = 0x%08x\r\n", NewStartTime ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      Rate          = 0x%08x\r\n", NewRate) );

//				pHwDevExt->AudioInterceptTime
//					= (pHwDevExt->AudioInterceptTime - NewStartTime)
//					* pHwDevExt->AudioRate
//					/ NewRate
//					+ NewStartTime;

				pHwDevExt->AudioRate = NewRate;
				if( NewRate == 10000 ) {
					pHwDevExt->AudioInterceptTime = 0;
					pHwDevExt->AudioStartTime = 0;
				}
				else {
					pHwDevExt->AudioInterceptTime = (-NewStartTime) * 10000 / NewRate + NewStartTime;
					pHwDevExt->AudioStartTime = NewStartTime;
				}

				SetRateChange( pHwDevExt, 0x02 );
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_ExactRateChange :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_MaxFullDataRate :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_Step :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}

void SetSubpicRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	DebugPrint( (DebugLevelTrace, "TOSDVD:  SetSubpicRateChange\r\n") );
	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {

		case KS_AM_RATE_SimpleRateChange :
			{
				KS_AM_SimpleRateChange* pRateChange;
				PHW_DEVICE_EXTENSION pHwDevExt;
				REFERENCE_TIME NewStartTime;
				LONG NewRate;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_SimpleRateChange\r\n") );

				pRateChange = (KS_AM_SimpleRateChange*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
				NewStartTime = pRateChange->StartTime;
				NewRate = ( pRateChange->Rate < 0 ) ? -pRateChange->Rate : pRateChange->Rate;

DebugPrint( (DebugLevelTrace, "TOSDVD:    Received Data\r\n" ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      StartTime     = 0x%08x\r\n", NewStartTime ) );
DebugPrint( (DebugLevelTrace, "TOSDVD:      Rate          = 0x%08x\r\n", NewRate) );

//				pHwDevExt->SubpicInterceptTime
//					= (pHwDevExt->SubpicInterceptTime - NewStartTime)
//					* pHwDevExt->SubpicRate
//					/ NewRate
//					+ NewStartTime;

				pHwDevExt->SubpicRate = NewRate;
				if( NewRate == 10000 ) {
					pHwDevExt->SubpicInterceptTime = 0;
					pHwDevExt->SubpicStartTime = 0;
				}
				else {
					pHwDevExt->SubpicInterceptTime = (-NewStartTime) * 10000 / NewRate + NewStartTime;
					pHwDevExt->SubpicStartTime = NewStartTime;
				}

				SetRateChange( pHwDevExt, 0x04 );
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_ExactRateChange :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_MaxFullDataRate :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_Step :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}

void GetVideoRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelTrace, "TOSDVD:  GetVideoRateChange\r\n") );
	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {

		case KS_AM_RATE_SimpleRateChange :
			{
				KS_AM_SimpleRateChange* pRateChange;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_SimpleRateChange\r\n") );

				pSrb->ActualBytesTransferred = sizeof (KS_AM_RATE_SimpleRateChange);
				pRateChange = (KS_AM_SimpleRateChange*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pRateChange->StartTime = pHwDevExt->VideoStartTime;
				pRateChange->Rate = pHwDevExt->VideoRate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_ExactRateChange :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_MaxFullDataRate :
			{
				KS_AM_MaxFullDataRate* pMaxRate;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_MaxFullDataRate\r\n") );

				pSrb->ActualBytesTransferred = sizeof (KS_AM_RATE_MaxFullDataRate);
				pMaxRate = (KS_AM_MaxFullDataRate*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				*pMaxRate = pHwDevExt->VideoMaxFullRate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_Step :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}

void GetAudioRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelTrace, "TOSDVD:  GetAudioRateChange\r\n") );
	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {

		case KS_AM_RATE_SimpleRateChange :
			{
				KS_AM_SimpleRateChange* pRateChange;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_SimpleRateChange\r\n") );

				pSrb->ActualBytesTransferred = sizeof (KS_AM_RATE_SimpleRateChange);
				pRateChange = (KS_AM_SimpleRateChange*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pRateChange->StartTime = pHwDevExt->AudioStartTime;
				pRateChange->Rate = pHwDevExt->AudioRate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_ExactRateChange :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_MaxFullDataRate :
			{
				KS_AM_MaxFullDataRate* pMaxRate;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_MaxFullDataRate\r\n") );

				pSrb->ActualBytesTransferred = sizeof (KS_AM_RATE_MaxFullDataRate);
				pMaxRate = (KS_AM_MaxFullDataRate*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				*pMaxRate = pHwDevExt->AudioMaxFullRate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_Step :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}

void GetSubpicRateChange( PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;

	DebugPrint( (DebugLevelTrace, "TOSDVD:  GetSubpicRateChange\r\n") );
	switch( pSrb->CommandData.PropertyInfo->Property->Id ) {

		case KS_AM_RATE_SimpleRateChange :
			{
				KS_AM_SimpleRateChange* pRateChange;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_SimpleRateChange\r\n") );

				pSrb->ActualBytesTransferred = sizeof (KS_AM_RATE_SimpleRateChange);
				pRateChange = (KS_AM_SimpleRateChange*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				pRateChange->StartTime = pHwDevExt->SubpicStartTime;
				pRateChange->Rate = pHwDevExt->SubpicRate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_ExactRateChange :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;

		case KS_AM_RATE_MaxFullDataRate :
			{
				KS_AM_MaxFullDataRate* pMaxRate;

				DebugPrint( (DebugLevelTrace, "TOSDVD:  KS_AM_RATE_MaxFullDataRate\r\n") );

				pSrb->ActualBytesTransferred = sizeof (KS_AM_RATE_MaxFullDataRate);
				pMaxRate = (KS_AM_MaxFullDataRate*)pSrb->CommandData.PropertyInfo->PropertyInfo;
				*pMaxRate = pHwDevExt->SubpicMaxFullRate;
			}
			pSrb->Status = STATUS_SUCCESS;
			break;

		case KS_AM_RATE_Step :
			pSrb->Status = STATUS_NOT_IMPLEMENTED;
			break;
	}
}
//--- End.

void GetLPCMInfo( void *pBuf, PMYAUDIOFORMAT pfmt )
{
	PUCHAR  pDat = (PUCHAR)pBuf;
	UCHAR	headlen;
	UCHAR	val;

	pDat += 14;

	ASSERT( *( pDat + 3 ) == 0xBD );

	headlen = *( pDat + 8 );

	ASSERT( ( *( pDat + 9 + headlen ) & 0xF8 ) == 0xA0 );

	val = (UCHAR)(( *( pDat + 9 + headlen + 5 ) & 0xC0 ) >> 6);

	if( val == 0x00 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  16bits\r\n" ));
		pfmt->dwQuant = AUDIO_QUANT_16;
	}
	else if( val == 0x01 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  20bits\r\n" ));
		pfmt->dwQuant = AUDIO_QUANT_20;
	}
	else if( val == 0x10 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  24bits\r\n" ));
		pfmt->dwQuant = AUDIO_QUANT_24;
	}
	else
		TRAP;

	val = (UCHAR)(( *( pDat + 9 + headlen + 5 ) & 0x30 ) >> 4);

	if( val == 0x00 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  48kHz\r\n" ));
		pfmt->dwFreq = AUDIO_FS_48;
	}
	else if( val == 0x01 ) {
		DebugPrint(( DebugLevelTrace, "TOSDVD:  96kHz\r\n" ));
		pfmt->dwFreq = AUDIO_FS_96;
	}
	else
		TRAP;

	return;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdcmd.h ===
//***************************************************************************
//	Header file
//
//***************************************************************************

extern "C" VOID STREAMAPI AdapterCancelPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI AdapterTimeoutPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI AdapterReceivePacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
VOID AdapterStreamInfo( PHW_STREAM_REQUEST_BLOCK pSrb );
VOID HwProcessDataIntersection( PHW_STREAM_REQUEST_BLOCK pSrb );
VOID AdapterOpenStream( PHW_STREAM_REQUEST_BLOCK pSrb );
VOID AdapterCloseStream( PHW_STREAM_REQUEST_BLOCK pSrb );

void ClockEvents( PHW_DEVICE_EXTENSION pHwDevExt );
NTSTATUS STREAMAPI AudioEvent( PHW_EVENT_DESCRIPTOR pEvent );
NTSTATUS STREAMAPI CycEvent( PHW_EVENT_DESCRIPTOR pEvent );

extern "C" VOID STREAMAPI VideoReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI VideoReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI AudioReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI AudioReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI SubpicReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI SubpicReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI NtscReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI NtscReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI VpeReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI VpeReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI CCReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI CCReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );

void VideoDataDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt );
void AudioDataDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt );
void SubpicDataDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt );
void VideoTimeDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt );
void AudioTimeDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt );
void SubpicTimeDiscontinuity( PHW_DEVICE_EXTENSION pHwDevExt );

void VideoQueryAccept(PHW_STREAM_REQUEST_BLOCK pSrb);
void ProcessVideoFormat( PKSDATAFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt );
void BadWait( DWORD dwTime );
void FastSlowControl( PHW_STREAM_REQUEST_BLOCK pSrb );
DWORD xunGetPTS(void *pBuf);
DWORD	GetStreamID(void *pBuf);
ULONG GetHowLongWait( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc );
void ScheduledDMAxfer( PHW_DEVICE_EXTENSION pHwDevExt );
void PreDMAxfer( PHW_DEVICE_EXTENSION pHwDevExt );
void DMAxfer( PHW_DEVICE_EXTENSION pHwDevExt );
void DMAxferKeyData( PHW_DEVICE_EXTENSION pHwDevExt, PHW_STREAM_REQUEST_BLOCK pSrb, PUCHAR addr, DWORD dwSize, PHW_TIMER_ROUTINE pfnCallBack );
void EndKeyData( PHW_DEVICE_EXTENSION pHwDevExt );
void InitFirstTime( PHW_DEVICE_EXTENSION pHwDevExt, DWORD dwSTC );
void MenuDecodeStart( PHW_DEVICE_EXTENSION pHwDevExt );
void DecodeStart( PHW_DEVICE_EXTENSION pHwDevExt, DWORD dwSTC );
void TimerDecodeStart( PHW_DEVICE_EXTENSION pHwDevExt );
VOID TimerAudioMuteOff( PHW_DEVICE_EXTENSION pHwDevExt );

void GetVideoProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void SetVideoProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void GetAudioProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void SetAudioProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void GetSubpicProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void SetSubpicProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void GetNtscProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void SetNtscProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void GetVpeProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void SetVpeProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void GetCCProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void SetCCProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );
void GetCppProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb, LONG strm );
void SetCppProperty( IN PHW_STREAM_REQUEST_BLOCK pSrb );

VOID STREAMAPI StreamClockRtn( IN PHW_TIME_CONTEXT TimeContext );
ULONGLONG GetSystemTime();
ULONGLONG ConvertPTStoStrm(ULONG pts);
ULONG ConvertStrmtoPTS(ULONGLONG strm);
void TimerCppReset( PHW_STREAM_REQUEST_BLOCK pSrb );

void SetPlayMode( PHW_DEVICE_EXTENSION pHwDevExt, ULONG mode );

DWORD GetCurrentTime_ms( void );

void StopData( PHW_DEVICE_EXTENSION pHwDevExt );
void CheckAudioUnderflow( PHW_DEVICE_EXTENSION pHwDevExt );
void UnderflowStopData( PHW_DEVICE_EXTENSION pHwDevExt );
void ForcedStopData( PHW_DEVICE_EXTENSION pHwDevExt, ULONG flag );
void StopDequeue( PHW_DEVICE_EXTENSION pHwDevExt );

void SetAudioID( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc );
void SetSubpicID( PHW_DEVICE_EXTENSION pHwDevExt, PKSSTREAM_HEADER pStruc );

void SetCppFlag( PHW_DEVICE_EXTENSION pHwDevExt );

void AudioQueryAccept( PHW_STREAM_REQUEST_BLOCK pSrb );
void ProcessAudioFormat( PKSDATAFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt );
void ProcessAudioFormat2( PMYAUDIOFORMAT pfmt, PHW_DEVICE_EXTENSION pHwDevExt );

void SetVideoRateDefault( PHW_DEVICE_EXTENSION pHwDevExt );
void SetAudioRateDefault( PHW_DEVICE_EXTENSION pHwDevExt );
void SetSubpicRateDefault( PHW_DEVICE_EXTENSION pHwDevExt );
void SetRateChange( PHW_DEVICE_EXTENSION pHwDevExt, LONG strm );
void SetVideoRateChange( PHW_STREAM_REQUEST_BLOCK pSrb );
void SetAudioRateChange( PHW_STREAM_REQUEST_BLOCK pSrb );
void SetSubpicRateChange( PHW_STREAM_REQUEST_BLOCK pSrb );
void GetVideoRateChange( PHW_STREAM_REQUEST_BLOCK pSrb );
void GetAudioRateChange( PHW_STREAM_REQUEST_BLOCK pSrb );
void GetSubpicRateChange( PHW_STREAM_REQUEST_BLOCK pSrb );

void GetLPCMInfo( void *pBuf, PMYAUDIOFORMAT pfmt );

#define	VIDEO_DISCONT_FLAG	0x01
#define	AUDIO_DISCONT_FLAG	0x02
#define	SUBPIC_DISCONT_FLAG	0x03

#define IsEqualGUID2(guid1, guid2) \
	(!memcmp((guid1), (guid2), sizeof(GUID)))
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdcpgd.h ===
//***************************************************************************
//
//	DVDCPGD.H
//
//	Author:
//		TOSHIBA [PCS](PSY) Satoshi Watanabe
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//		03/06/97	converted from VxD source
//		03/09/97	converted C++ class
//
//***************************************************************************

#ifndef __DVDCPGD_H__
#define __DVDCPGD_H__

//--- 97.09.15 K.Chujo
enum {
	NO_ACG,
	TC6802,
	TC6814,
	TC6818
};
//--- End.

class CGuard {
private:
	PUCHAR	ioBase;
	UCHAR	VproRESET_REG;
	UCHAR	VproVMODE_REG;
	UCHAR	VproAVM_REG;
//--- 97.09.15 K.Chujo
	ULONG	CpgdVsyncCount;
	ULONG	ACGchip;
	BOOL	CGMSnCPGDvalid;
	ULONG	AspectFlag;
	ULONG	LetterFlag;
	ULONG	CgmsFlag;
	ULONG	CpgdFlag;
	void CPGD_SET_CGMSparameter( void );
	void CPGD_SET_CPGDparameter( void );
	void CPGD_SET_BURST( PWORD data, ULONG size );
	void CPGD_SET_AGC( WORD Cval, WORD Yval );
	ULONG CPGD_CALC_CRC( ULONG val );
//--- End.

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void CPGD_RESET_FUNC();
	void CPGD_VIDEO_MUTE_ON();
	void CPGD_VIDEO_MUTE_OFF();
	void CPGD_INIT_NTSC();
	void CPGD_INIT_PAL();
	void CPGD_CC_ON();
	void CPGD_CC_OFF();
	void CPGD_SUBP_PALETTE( PUCHAR pPalData );
	void CPGD_OSD_PALETTE( PUCHAR pPalData );
//--- 97.09.15 K.Chujo
	void CPGD_SET_AGC_CHIP( ULONG rev );
	void CPGD_SET_ASPECT( ULONG aspect );
	void CPGD_SET_LETTER( ULONG letter );
	void CPGD_SET_CGMS( ULONG cgms );
	void CPGD_SET_CPGD( ULONG cpgd );
	void CPGD_SET_CGMSnCPGD( ULONG aspect, ULONG letter, ULONG cgms, ULONG cpgd);
	void CPGD_UPDATE_AGC( void );
	void CPGD_SET_CGMS_A_0( ULONG aspect, ULONG letter );
	void CPGD_SET_CGMS_A_1( ULONG aspect, ULONG letter );
	void CPGD_SET_CGMS_A_2( ULONG aspect, ULONG letter );
	void CPGD_SET_CGMS_A_3( ULONG aspect, ULONG letter );
	void CPGD_SET_CLR_STRIPE_OFF( void );
	void CPGD_SET_CLR_STRIPE_2( void );
	void CPGD_SET_CLR_STRIPE_4( void );
	void CPGD_SET_CPGD_0( void );
	void CPGD_SET_CPGD_1( void );
	void CPGD_SET_CPGD_2( void );
	void CPGD_SET_CPGD_3( void );
//	void CPGD_BURST_Y_OFF( void );
//--- End.

};

#endif  // __DVDCPGD_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdcpgd.cpp ===
//***************************************************************************
//
//	DVDCPGD.CPP
//		Analog Copy protection Processor Routine
//
//	Author:	
//		TOSHIBA [PCS](PSY) Satoshi Watanabe
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//		03/05/97	converted from VxD source
//		03/09/97	converted C++ class
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "dvdcpgd.h"

//--- 97.09.15 K.Chujo

//=================================================//
//  Burst Inverse line data( Color stripe off )    //
//=================================================//
ULONG CPGD_BSTLNOFF_SIZE = 0x1A;

WORD CPGD_BSTLNOFF_DATA[] = {
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000
};

//=================================================//
//  Burst Inverse line data( Color stripe 2 line)  //
//=================================================//
ULONG CPGD_BSTLN2_SIZE = 0x1A;

WORD CPGD_BSTLN2_DATA[] = {
	0x001D, 0x002E, 0x003F, 0x0050,
    0x0061, 0x0072, 0x0083, 0x0094,
    0x00A5, 0x00B6, 0x00C7, 0x00D8,
    0x00E9, 0x012C, 0x013D, 0x014E,
    0x015F, 0x0170, 0x0181, 0x0192,
    0x01A3, 0x01B4, 0x01C5, 0x01D6,
    0x01E7, 0x01F8
};

//=================================================//
//  Burst Inverse line data( Color stripe 4 line)  //
//=================================================//
ULONG CPGD_BSTLN4_SIZE = 0x1A;

WORD CPGD_BSTLN4_DATA[] = {
	0x0017, 0x002C, 0x0041, 0x0056,
    0x006B, 0x0080, 0x0095, 0x00AA,
    0x00BF, 0x00D4, 0x00E9, 0x0000,
    0x0000, 0x0128, 0x013D, 0x0152,
    0x0167, 0x017C, 0x0191, 0x01A6,
    0x01BB, 0x01D0, 0x01E5, 0x01FA,
    0x0000, 0x0000
};

//=================================================//
//  AGC data (for Y of S input)                    //
//=================================================//
WORD CPGD_AGC_Y_TBL[] = {
	0x03E7, 0x03E2, 0x03DE, 0x03D9, 0x03D5, 0x03D0, 0x03CC, 0x03C7,
	0x03C3, 0x03BE, 0x03BA, 0x03B5, 0x03B1, 0x03AC, 0x03A8, 0x03A3,
	0x039E, 0x039A, 0x0395, 0x0391, 0x038C, 0x0388, 0x0383, 0x037F,
	0x037A, 0x0376, 0x0371, 0x036D, 0x0368, 0x0363, 0x035F, 0x035A,
	0x0356, 0x0351, 0x034D, 0x0348, 0x0344, 0x033F, 0x033B, 0x0336,
	0x0332, 0x032D, 0x0329, 0x0324, 0x031F, 0x031B, 0x0316, 0x0312,
	0x030D, 0x0309, 0x0304, 0x0300, 0x02FB, 0x02F7, 0x02F2, 0x02EE,
	0x02E9, 0x02E4, 0x02E0, 0x02DB, 0x02D7, 0x02D2, 0x02CE, 0x02C9,
	0x02C5, 0x02C0, 0x02BC, 0x02B7, 0x02B3, 0x02AE, 0x02AA, 0x02A5,
	0x02A0, 0x029C, 0x0297, 0x0293, 0x028E, 0x028A, 0x0285, 0x0281,
	0x027C, 0x0278, 0x0273, 0x026F, 0x026A, 0x0265, 0x0261, 0x025C,
	0x0258, 0x0253, 0x024F, 0x024A, 0x0246, 0x0241, 0x023D, 0x0238,
	0x0234, 0x022F, 0x022B, 0x0226, 0x0221, 0x021D, 0x0218, 0x0214,
	0x020F, 0x020B, 0x0206, 0x0202, 0x01FD, 0x01F9, 0x01F4, 0x01F0,
	0x01EB, 0x01E6, 0x01E2, 0x01DD, 0x01D9, 0x01D4, 0x01D0, 0x01CB,
	0x01C7, 0x01C2, 0x01BE, 0x01B9, 0x01B5, 0x01B0, 0x01AC, 0x01A7,
	0x01A2, 0x019E, 0x0199, 0x0195, 0x0190, 0x018C, 0x0187, 0x0183,
	0x017E, 0x017A, 0x0175, 0x0171, 0x016C, 0x0167, 0x0163, 0x015E,
	0x015A, 0x0155, 0x0151, 0x014C, 0x0148, 0x0143, 0x013F, 0x013A,
	0x0136, 0x0131, 0x012D, 0x0128
};

//=================================================//
//  AGC data (for Composit input)                  //
//=================================================//
WORD CPGD_AGC_C_TBL[] = {
	0x0382, 0x037E, 0x037A, 0x0375, 0x0371, 0x036D, 0x0369, 0x0364,
	0x0360, 0x035C, 0x0358, 0x0353, 0x034F, 0x034B, 0x0347, 0x0342,
	0x033E, 0x033A, 0x0336, 0x0331, 0x032D, 0x0329, 0x0325, 0x0320,
	0x031C, 0x0318, 0x0314, 0x030F, 0x030B, 0x0307, 0x0303, 0x02FE,
	0x02FA, 0x02F6, 0x02F2, 0x02ED, 0x02E9, 0x02E5, 0x02E1, 0x02DC,
	0x02D8, 0x02D4, 0x02D0, 0x02CB, 0x02C7, 0x02C3, 0x02BF, 0x02BA,
	0x02B6, 0x02B2, 0x02AE, 0x02A9, 0x02A5, 0x02A1, 0x029D, 0x0299,
	0x0294, 0x0290, 0x028C, 0x0288, 0x0283, 0x027F, 0x027B, 0x0277,
	0x0272, 0x026E, 0x026A, 0x0266, 0x0261, 0x025D, 0x0259, 0x0255,
	0x0250, 0x024C, 0x0248, 0x0244, 0x023F, 0x023B, 0x0237, 0x0233,
	0x022E, 0x022A, 0x0226, 0x0222, 0x021D, 0x0219, 0x0215, 0x0211,
	0x020C, 0x0208, 0x0204, 0x0200, 0x01FB, 0x01F7, 0x01F3, 0x01EF,
	0x01EA, 0x01E6, 0x01E2, 0x01DE, 0x01D9, 0x01D5, 0x01D1, 0x01CD,
	0x01C9, 0x01C4, 0x01C0, 0x01BC, 0x01B8, 0x01B3, 0x01AF, 0x01AB,
	0x01A7, 0x01A2, 0x019E, 0x019A, 0x0196, 0x0191, 0x018D, 0x0189,
	0x0185, 0x0180, 0x017C, 0x0178, 0x0174, 0x016F, 0x016B, 0x0167,
	0x0163, 0x015E, 0x015A, 0x0156, 0x0152, 0x014E, 0x0149, 0x0145,
	0x0141, 0x013C, 0x0138, 0x0134, 0x0130, 0x012B, 0x0127, 0x0123,
	0x011F, 0x011A, 0x0116, 0x0112, 0x010E, 0x0109, 0x0105, 0x0101,
	0x00FD, 0x00F8, 0x00F4, 0x00F0
};

//--- End.

void CGuard::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
//--- 97.09.15 K.Chujo
	ACGchip = NO_ACG;
//--- End.
}

void CGuard::CPGD_RESET_FUNC()
{
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, 0 );
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, 0x80 );

	VproRESET_REG = 0x80;
	VproVMODE_REG = 0;	// ? ? ?
	VproAVM_REG = 0;	// ? ? ?
//--- 97.09.15 K.Chujo
	CpgdVsyncCount = 0;
	CGMSnCPGDvalid = FALSE;
	AspectFlag = 0x0000;
	LetterFlag = 0x0000; 
	CgmsFlag = 0x0000;
	CpgdFlag = 0x0000;
//--- End.
}

void CGuard::CPGD_VIDEO_MUTE_ON()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, VproRESET_REG );
}

void CGuard::CPGD_VIDEO_MUTE_OFF()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + CPGD_RESET, VproRESET_REG );
}

void CGuard::CPGD_INIT_NTSC()
{
	VproVMODE_REG &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + CPGD_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + CPGD_DVEN, 0xc0 );
}

void CGuard::CPGD_INIT_PAL()
{
	VproVMODE_REG |= 0x80;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + CPGD_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + CPGD_DVEN, 0x80 );
}

void CGuard::CPGD_CC_ON()
{
//	VproVMODE_REG &= 0xbf;
	VproVMODE_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );
}

void CGuard::CPGD_CC_OFF()
{
//	VproVMODE_REG |= 0x40;
	VproVMODE_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + CPGD_VMODE, VproVMODE_REG );
}

void CGuard::CPGD_SUBP_PALETTE( PUCHAR pPalData )
{
	ULONG i;

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x80 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + CPGD_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x40 );
	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0 );
}

void CGuard::CPGD_OSD_PALETTE( PUCHAR pPalData )
{
	int i;

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x20 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + CPGD_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0x10 );
	WRITE_PORT_UCHAR( ioBase + CPGD_CPSET, 0 );
}

void CGuard::CPGD_SET_AGC_CHIP( ULONG rev )
{
	if( rev==2 || rev==3 )
		ACGchip = TC6802;
	else if ( rev==4 )
		ACGchip = TC6814;
	else if ( rev==5 )
		ACGchip = TC6818;
	else
		ACGchip = NO_ACG;
}

void CGuard::CPGD_SET_ASPECT( ULONG aspect )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( aspect, LetterFlag, CgmsFlag, CpgdFlag );
	}
}

void CGuard::CPGD_SET_LETTER( ULONG letter )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( AspectFlag, letter, CgmsFlag, CpgdFlag );
	}
}

void CGuard::CPGD_SET_CGMS( ULONG cgms )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( AspectFlag, LetterFlag, cgms, CpgdFlag );
	}
}

void CGuard::CPGD_SET_CPGD( ULONG cpgd )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		CPGD_SET_CGMSnCPGD( AspectFlag, LetterFlag, CgmsFlag, cpgd );
	}
}

void CGuard::CPGD_SET_CGMSnCPGD( ULONG aspect, ULONG letter, ULONG cgms, ULONG cpgd )
{
	if( ACGchip == NO_ACG ) {
		return;
	}
	else {
		aspect &= 0x01;
		letter &= 0x01;
		cgms &= 0x03;
		cpgd &= 0x03;
		if( CGMSnCPGDvalid==FALSE || CpgdFlag!=cpgd) {
			AspectFlag = aspect;
			LetterFlag = letter;
			CgmsFlag = cgms;
			CpgdFlag = cpgd;
			CPGD_SET_CGMSparameter();
			CPGD_SET_CPGDparameter();
			CGMSnCPGDvalid = TRUE;
		}
		else if ( AspectFlag!=aspect || LetterFlag!=letter || CgmsFlag!=cgms ) {
			AspectFlag = aspect;
			LetterFlag = letter;
			CgmsFlag = cgms;
			CPGD_SET_CGMSparameter();
		}
	}
}

void CGuard::CPGD_UPDATE_AGC( void )
{
	WORD Cval, Yval;

	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( CpgdVsyncCount == 0 ) {
			Cval = CPGD_AGC_C_TBL[0];
			Yval = CPGD_AGC_Y_TBL[0];
			CPGD_SET_AGC( Cval, Yval );
//			DebugPrint( ( DebugLevelTrace, "TOSDVD:  AGC_C %x, AGC_Y %x\r\n", Cval, Yval ) );
		}
		else if( 720<=CpgdVsyncCount && CpgdVsyncCount<=875 ) {
			Cval = CPGD_AGC_C_TBL[CpgdVsyncCount- 720];
			Yval = CPGD_AGC_Y_TBL[CpgdVsyncCount- 720];
			CPGD_SET_AGC( Cval, Yval );
//			DebugPrint( ( DebugLevelTrace, "TOSDVD:  AGC_C %x, AGC_Y %x\r\n", Cval, Yval ) );
		}
		else if( 1044<=CpgdVsyncCount && CpgdVsyncCount<=1199 ) {
			Cval = CPGD_AGC_C_TBL[1199-CpgdVsyncCount];
			Yval = CPGD_AGC_Y_TBL[1199-CpgdVsyncCount];
			CPGD_SET_AGC( Cval, Yval );
//			DebugPrint( ( DebugLevelTrace, "TOSDVD:  AGC_C %x, AGC_Y %x\r\n", Cval, Yval ) );
		}
		CpgdVsyncCount++;
		if( CpgdVsyncCount>=1200 )
			CpgdVsyncCount = 0;
	}
}

void CGuard::CPGD_SET_CGMSparameter( void )
{
	ULONG tmp;
	ULONG crc;

	tmp = ( 0x8000 | (AspectFlag<<9) | (LetterFlag<<8) | (CgmsFlag<<6) | (CpgdFlag<<4) );
	crc = CPGD_CALC_CRC( tmp ) << 2;
	WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(tmp >> 8) );
//	DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAL%x\r\n", (UCHAR)(tmp>>8) ) );
	WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(tmp & 0xFF) );
//	DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAM%x\r\n", (UCHAR)(tmp&0xFF) ) );
	WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
//	DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAH%x\r\n", (crc & 0xFF) ) );
}

void CGuard::CPGD_SET_CPGDparameter( void )
{
	ULONG tmp;
	ULONG crc;

	switch( CpgdFlag ) {
		case 0x00 :
			CPGD_SET_CLR_STRIPE_OFF();
			CPGD_SET_CPGD_0();
			break;
		case 0x01 :
			CPGD_SET_CLR_STRIPE_OFF();
			CPGD_SET_CPGD_1();
			break;
		case 0x02 :
			CPGD_SET_CLR_STRIPE_2();
			CPGD_SET_CPGD_2();
			break;
		case 0x03 :
			CPGD_SET_CLR_STRIPE_4();
			CPGD_SET_CPGD_3();
			break;
		default   :
			TRAP;
			break;
	}
}

void CGuard::CPGD_SET_CGMS_A_0( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;

	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xC0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
	}
}

void CGuard::CPGD_SET_CGMS_A_1( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;

	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xD0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAL%x\r\n", (UCHAR)(temp>>8) ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAM%x\r\n", (UCHAR)(temp&0xFF) ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSAH%x\r\n", (crc & 0xFF) ) );
	}
}

void CGuard::CPGD_SET_CGMS_A_2( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;
	
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xE0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA L = %x\r\n", temp>>8 ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA M = %x\r\n", temp & 0xFF ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  CGMSA H = %x\r\n", crc & 0xFF ) );
	}
}

void CGuard::CPGD_SET_CGMS_A_3( ULONG aspect, ULONG letter )
{
	ULONG temp = 0x8000;
	ULONG crc;
	
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		if( letter!=0 )
			temp |= 0x1000;
		if( aspect!=0 )
			temp |= 0x2000;
		temp |= 0xF0;
		crc = CPGD_CALC_CRC( temp ) << 2;
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAL, (UCHAR)(temp >> 8) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAM, (UCHAR)(temp & 0xFF) );
		WRITE_PORT_UCHAR( ioBase + CPGD_CGMSAH, (UCHAR)(crc & 0xFF) );
	}
}

void CGuard::CPGD_SET_CLR_STRIPE_OFF( void )
{
	// notes:	*1 are unnecessary originally (if TC6802 is on board).
	//			But I have to use TC6802 parameters when TC6814/TC6818 is on board for beta 3
	//			because I can't get RevID ( I can't know which ACG chip is ).
	//			These codes make safe when TC6814/TC6818 is, of cource TC6802 is, NO PROBLEM.

	if( ACGchip==NO_ACG ) {
		return;
	}
	else if( ACGchip==TC6802 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );		// *1
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );		// *1
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_OFF for TC6802\r\n" ) );
	}
	else if( ACGchip==TC6814 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		CPGD_SET_BURST( CPGD_BSTLNOFF_DATA, CPGD_BSTLNOFF_SIZE );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_OFF for TC6814\r\n" ) );
	}
	else if( ACGchip==TC6818 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0x04 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x80 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_OFF for TC6818\r\n" ) );
	}
}

void CGuard::CPGD_SET_CLR_STRIPE_2( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else if( ACGchip==TC6802 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAA );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_2 for TC6802\r\n" ) );
	}
	else if( ACGchip==TC6814 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_2 for TC6814\r\n" ) );
	}
	else if( ACGchip==TC6818 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0x04 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x80 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_2 for TC6818\r\n" ) );
	}
	CPGD_SET_BURST( CPGD_BSTLN2_DATA, CPGD_BSTLN2_SIZE );
}

void CGuard::CPGD_SET_CLR_STRIPE_4( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else if( ACGchip==TC6802 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAA );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CLR_STRIPE_4\r\n" ) );
	}
	else if( ACGchip==TC6814 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xFE );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
	}
	else if( ACGchip==TC6818 ) {
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0xB1 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTINT, 0x04 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x80 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0x84 );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTSE, 0xAE );
	}
	CPGD_SET_BURST( CPGD_BSTLN4_DATA, CPGD_BSTLN4_SIZE );
}

void CGuard::CPGD_SET_CPGD_0( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0x00 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_0\r\n" ) );
	}
}

void CGuard::CPGD_SET_CPGD_1( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0xE8 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_1\r\n" ) );
	}
}

void CGuard::CPGD_SET_CPGD_2( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0xF8 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_2\r\n" ) );
	}
}

void CGuard::CPGD_SET_CPGD_3( void )
{
	if( ACGchip==NO_ACG ) {
		return;
	}
	else {
		WRITE_PORT_UCHAR( ioBase + CPGD_CPG, 0xF8 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  SET_CPGD_3\r\n" ) );
	}
}

void CGuard::CPGD_SET_BURST( PWORD data, ULONG size )
{
	ULONG i;
	WORD temp;

	for( i=0; i<size; i++ ) {
		temp = (*(data+i)) & 0x3FF;
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTLSL, temp & 0xFF );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  BURST L %x\r\n", temp & 0xFF ) );
		WRITE_PORT_UCHAR( ioBase + CPGD_BSTLSH, temp >> 8 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  BURST H %x\r\n", temp >> 8 ) );
	}
}

void CGuard::CPGD_SET_AGC( WORD Cval, WORD Yval )
{
	WORD	Lval;

	Lval = ((Yval & 0x03) << 4) + ((Cval & 0x03) << 6);
	Cval >>= 2;
	Yval >>= 2;
	WRITE_PORT_UCHAR( ioBase + CPGD_CAGC, (UCHAR)Cval );
	WRITE_PORT_UCHAR( ioBase + CPGD_YAGC, (UCHAR)Yval );
	WRITE_PORT_UCHAR( ioBase + CPGD_LAGC, (UCHAR)Lval );
}

ULONG CGuard::CPGD_CALC_CRC( ULONG val )
{
	ULONG crc = 0;
	ULONG i, j;

	crc = (val & 0x3FFF) << 6;

	i = 0x80000000;
	j = 0x86000000;					// 100001100....00(b)

	do {
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  i=%x, j=%x, crc=%x\r\n", i, j, crc ) );
		if( (crc & i)==0 ) {
			i >>= 1;
			j >>= 1;
			if( i<=0x20 )
				break;
		}
		else {
			crc ^= j;
		}
	} while( 1 );

	return( crc );
}

//void CGuard::CPGD_BURST_Y_OFF( void )
//{
//	// always turn off Burst Y.
//	if( AGCchip==NO_AGC ) {
//		return;
//	}
//	else if( AGCchip==TC6802 || AGCchip==TC6814 ) {
//		WRITE_PORT_UCHAR( ioBase + CPGD_BSTONY, 0x00 );
//		DebugPrint( ( DebugLevelTrace, "TOSDVD:  BURST_Y_OFF\r\n" ) );
//	}
//	else if( AGCchip==TC6818 ) {
//		// no operation, because this register is set by other functions.
//	}
//}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdcpp.cpp ===
#include "common.h"
#include "dvdcpp.h"

void Cpp::cpp_outp( UCHAR index, UCHAR data )
{
	WRITE_PORT_UCHAR( (PUCHAR)( ioBase + CG_INDEX ), (UCHAR)index );
	WRITE_PORT_UCHAR( (PUCHAR)( ioBase + CG_DATA ),  data );
}

UCHAR Cpp::cpp_inp( UCHAR index )
{
	WRITE_PORT_UCHAR( (PUCHAR)( ioBase + CG_INDEX ), (UCHAR)index );
	return READ_PORT_UCHAR( (PUCHAR)( ioBase + CG_DATA ) );
}

void Cpp::wait( ULONG msec )
{
	KeStallExecutionProcessor( msec * 2 );
}

BOOLEAN Cpp::cmd_wait_loop( void )
{
	int i;

	for ( i = 0; i < 100; i++ )
	{
		if ( ( cpp_inp( COM ) & 0xc0 ) != 0 )
			break;
		wait( 1 );
	}
	if ( ( cpp_inp( COM ) & 0x40 ) == 0x40 )
		return FALSE;
	else
		return TRUE;
}

BOOLEAN Cpp::decoder_challenge( PKS_DVDCOPY_CHLGKEY r1 )
{
	int i;

	cpp_outp( COM, CMD_DEC_RAND );
	for ( i = 0; i < 10; i++ )
		r1->ChlgKey[i] = cpp_inp( CHGG1 + i );
	r1->Reserved[0] = r1->Reserved[1] = 0;
	return TRUE;
}

BOOLEAN Cpp::drive_bus( PKS_DVDCOPY_BUSKEY fsr1 )
{
	int i;
	cpp_outp( COM, CMD_NOP );
	for ( i = 0; i < 5; i++ )
		cpp_outp( RSPG1 + i, fsr1->BusKey[i] );
	cpp_outp( COM, CMD_DRV_AUTH );
	return cmd_wait_loop();
}

BOOLEAN Cpp::drive_challenge( PKS_DVDCOPY_CHLGKEY r2 )
{
	int i;

	for ( i = 0; i < 10; i++ )
		cpp_outp( CHGG1 + i, r2->ChlgKey[i] );
	cpp_outp( COM, CMD_DEC_AUTH );
	return cmd_wait_loop();
}

BOOLEAN Cpp::decoder_bus( PKS_DVDCOPY_BUSKEY fsr2 )
{
	int i;

	for ( i = 0; i < 5; i++ )
		fsr2->BusKey[i] = cpp_inp( RSPG1 + i );
	return TRUE;
}

BOOLEAN Cpp::DiscKeyStart()
{
	cpp_outp( COM, CMD_DEC_DKY );
	return TRUE;
}

BOOLEAN Cpp::DiscKeyEnd()
{
	return cmd_wait_loop();
}

BOOLEAN Cpp::TitleKey( PKS_DVDCOPY_TITLEKEY tk )
{
	int i;
	BOOLEAN stat;

	cpp_outp( ETKG1 + 0, (UCHAR)(tk->KeyFlags) );
	for ( i = 1; i < 6; i++ )
		cpp_outp( ETKG1 + i, tk->TitleKey[i-1] );
	cpp_outp( COM, CMD_NOP );
	cpp_outp( COM, CMD_DEC_DTK );
	stat = cmd_wait_loop();
	cpp_outp( COM, CMD_NOP );
	cpp_outp( COM, CMD_DEC_DT );

	return stat;
}

void Cpp::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
}

BOOLEAN Cpp::reset( CPPMODE mode )
{
	UCHAR val;

// Reset TC6808AF
	val = READ_PORT_UCHAR( ioBase + 0x27 );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + 0x27, val );
	wait( 10 );
	val = READ_PORT_UCHAR( ioBase + 0x27 );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + 0x27, val );

//	_outp( (WORD)( pIO_Base + 0x27 ), _inp( (WORD)( pIO_Base + 0x27 ) ) | 0x10 );
//	dcg_wait( 10 );
//	_outp( (WORD)( pIO_Base + 0x27 ), _inp( (WORD)( pIO_Base + 0x27 ) ) & 0xef );


// Set Registers
	cpp_outp( CNT_1, 0xe3 );	// ???????????????
	if ( mode == NO_GUARD )
		cpp_outp( CNT_2, CNT2_DEFAULT + 0x01 );
	else
		cpp_outp( CNT_2, CNT2_DEFAULT );
	cpp_outp( DETP_L, 0x00 );
	cpp_outp( DETP_M, 0x00 );

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdcpp.h ===
#ifndef __DVDCPP_H__
#define __DVDCPP_H__

#include "ksmedia.h"

#define	CG_INDEX		0xc0
#define	CG_DATA			0xc1

#define COM				0x00
#define CNT_1			0x01
#define CNT_2			0x02
#define SD_STS			0x03
#define DETP_L			0x04
#define DETP_M			0x05

#define VER				0x0f

#define ETKG1			0x10
#define ETKG2			0x11
#define ETKG3			0x12
#define ETKG4			0x13
#define ETKG5			0x14
#define ETKG6			0x15

#define ACC				0x20

#define CHGG1			0x30
#define CHGG2			0x31
#define CHGG3			0x32
#define CHGG4			0x33
#define CHGG5			0x34
#define CHGG6			0x35
#define CHGG7			0x36
#define CHGG8			0x37
#define CHGG9			0x38
#define CHGG10			0x39

#define RSPG1			0x40
#define RSPG2			0x41
#define RSPG3			0x42
#define RSPG4			0x43
#define RSPG5			0x44

#define CMD_NOP			0x00
#define CMD_DEC_RAND	0x12
#define CMD_DEC_DKY		0x15
#define CMD_DRV_AUTH	0x17
#define CMD_DEC_AUTH	0x18
#define CMD_DEC_DTK		0x25
#define CMD_DEC_DT		0x23

#define	CNT2_DEFAULT	0xf2

typedef enum
{
	NO_GUARD,
	GUARD
} CPPMODE;

class Cpp
{
private:
	PUCHAR ioBase;

	void cpp_outp( UCHAR index, UCHAR data );
	UCHAR cpp_inp( UCHAR index );
	void wait( ULONG msec );
	BOOLEAN cmd_wait_loop( void );

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	BOOLEAN reset( CPPMODE mode );
	BOOLEAN decoder_challenge( PKS_DVDCOPY_CHLGKEY r1 );
	BOOLEAN drive_bus( PKS_DVDCOPY_BUSKEY fsr1 );
	BOOLEAN drive_challenge( PKS_DVDCOPY_CHLGKEY r2 );
	BOOLEAN decoder_bus( PKS_DVDCOPY_BUSKEY fsr2 );
	BOOLEAN DiscKeyStart();
	BOOLEAN DiscKeyEnd();
	BOOLEAN TitleKey( PKS_DVDCOPY_TITLEKEY tk );
};

#endif	// __DVDCPP_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdinit.cpp ===
//***************************************************************************
//	Initialize process
//
//***************************************************************************

#include "common.h"

#include "regs.h"
#include "cdack.h"
#include "cvdec.h"
#include "cvpro.h"
#include "cadec.h"
#include "ccpgd.h"
#include "ccpp.h"
#include "dvdcmd.h"

extern void BadWait( DWORD dwTime );
//--- 97.09.23 K.Chujo
extern void USCC_on( PHW_DEVICE_EXTENSION pHwDevExt );
extern void USCC_off( PHW_DEVICE_EXTENSION pHwDevExt );
//--- End.

extern "C" BOOLEAN STREAMAPI HwInterrupt( IN PHW_DEVICE_EXTENSION pHwDevExt );

/*
** DriverEntry()
*/
extern "C" NTSTATUS DriverEntry( IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING RegistryPath )
{
    HW_INITIALIZATION_DATA HwInitData;

//  TRAP;

    DebugPrint( (DebugLevelTrace, "TOSDVD:DriverEntry\r\n") );

    RtlZeroMemory( &HwInitData, sizeof(HW_INITIALIZATION_DATA) );

    HwInitData.HwInitializationDataSize = sizeof(HwInitData);
    HwInitData.HwInterrupt = (PHW_INTERRUPT)HwInterrupt;
    HwInitData.HwReceivePacket = AdapterReceivePacket;
    HwInitData.HwCancelPacket = AdapterCancelPacket;
    HwInitData.HwRequestTimeoutHandler = AdapterTimeoutPacket;
    HwInitData.DeviceExtensionSize = sizeof(HW_DEVICE_EXTENSION);
    HwInitData.PerRequestExtensionSize = sizeof(SRB_EXTENSION);
    HwInitData.PerStreamExtensionSize = sizeof(STREAMEX);
    HwInitData.FilterInstanceExtensionSize = 0;
    HwInitData.BusMasterDMA = TRUE;
    HwInitData.Dma24BitAddresses = FALSE;
    HwInitData.BufferAlignment = 4;
    HwInitData.TurnOffSynchronization = FALSE;
    HwInitData.DmaBufferSize = DMASIZE;

    return (
            StreamClassRegisterMinidriver(
                    (PVOID)DriverObject,
                    (PVOID)RegistryPath,
                    &HwInitData )
    );
}

void GetPCIConfigSpace(IN PHW_STREAM_REQUEST_BLOCK pSrb)
{

	PPORT_CONFIGURATION_INFORMATION ConfigInfo = pSrb->CommandData.ConfigInfo;
	PHW_DEVICE_EXTENSION pHwDevExt = (PHW_DEVICE_EXTENSION)ConfigInfo->HwDeviceExtension;

	if( StreamClassReadWriteConfig(

			pSrb->HwDeviceExtension,

			TRUE,						// indicates a READ (FALSE means a WRITE)

			(PVOID)&pHwDevExt->PciConfigSpace,

			0,							// this is the offset into the PCI space,
										// change this to whatever you need to read

			64							// this is the # of bytes to read.  Changer
										// it to the correct #.
		)) {

		//
		// process the config info your read here.
		//
		{
			ULONG i, j;

			DebugPrint( (DebugLevelTrace, "TOSDVD:PCI Config Space\r\n" ) );

			for( i=0; i<64; ) {
				DebugPrint( (DebugLevelTrace, "TOSDVD:  " ) );
				for( j=0; j<8 && i<64; j++, i++ ) {
					DebugPrint( (DebugLevelTrace, "0x%02x ", (UCHAR)*(((PUCHAR)&pHwDevExt->PciConfigSpace) + i) ) );
				}
				DebugPrint( (DebugLevelTrace, "\r\n" ) );
			}
		}
		//
		// note that the PCI_COMMON_CONFIG structure in WDM.H can be used
		// for referencing the PCI data.
		//

	}

	//
	// now return to high priority to complete initialization
	//

	StreamClassCallAtNewPriority(
		NULL,
		pSrb->HwDeviceExtension,
		LowToHigh,
		(PHW_PRIORITY_ROUTINE) InitializationEntry,
		pSrb
	);
	return;
}

void InitializationEntry(IN PHW_STREAM_REQUEST_BLOCK pSrb)
{
	DWORD st, et;

	st = GetCurrentTime_ms();

	HwInitialize( pSrb );

	et = GetCurrentTime_ms();
	DebugPrint( (DebugLevelTrace, "TOSDVD:init %dms\r\n", et - st ) );

	StreamClassDeviceNotification( ReadyForNextDeviceRequest,
									pSrb->HwDeviceExtension );
	StreamClassDeviceNotification( DeviceRequestComplete,
									pSrb->HwDeviceExtension,
									pSrb );
}

/*
** HwInitialize()
*/
NTSTATUS HwInitialize( IN PHW_STREAM_REQUEST_BLOCK pSrb )
{
	PPORT_CONFIGURATION_INFORMATION ConfigInfo = pSrb->CommandData.ConfigInfo;
	PHW_DEVICE_EXTENSION pHwDevExt =
			(PHW_DEVICE_EXTENSION)ConfigInfo->HwDeviceExtension;

	DebugPrint( (DebugLevelTrace, "TOSDVD:HwInitialize()\r\n") );
        DebugPrint( (DebugLevelTrace, "TOSDVD:  pHwDevExt = %p\r\n", pHwDevExt ) );
        DebugPrint( (DebugLevelTrace, "TOSDVD:  pSrb->HwDeviceExtension = %p\r\n", pSrb->HwDeviceExtension ) );
	DebugPrint( (DebugLevelTrace, "TOSDVD:  NumberOfAccessRanges = %d\r\n", ConfigInfo->NumberOfAccessRanges ) );

	if ( ConfigInfo->NumberOfAccessRanges < 1 ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:illegal config info") );
		pSrb->Status = STATUS_NO_SUCH_DEVICE;
		return( FALSE );
	}

	// Debug Dump ConfigInfo
        DebugPrint( (DebugLevelTrace, "TOSDVD:  Port = %p\r\n", ConfigInfo->AccessRanges[0].RangeStart.LowPart ) );
        DebugPrint( (DebugLevelTrace, "TOSDVD:  Length = %p\r\n", ConfigInfo->AccessRanges[0].RangeLength ) );
        DebugPrint( (DebugLevelTrace, "TOSDVD:  IRQ = %p\r\n", ConfigInfo->BusInterruptLevel ) );
        DebugPrint( (DebugLevelTrace, "TOSDVD:  Vector = %p\r\n", ConfigInfo->BusInterruptVector ) );
        DebugPrint( (DebugLevelTrace, "TOSDVD:  DMA = %p\r\n", ConfigInfo->DmaChannel ) );

	// initialize the size of stream descriptor information.
	ConfigInfo->StreamDescriptorSize =
		STREAMNUM * sizeof(HW_STREAM_INFORMATION) +
		sizeof(HW_STREAM_HEADER);

	// pick up the I/O windows for the card.
	pHwDevExt->ioBaseLocal =
                        (PUCHAR)ConfigInfo->AccessRanges[0].RangeStart.QuadPart;

	// pick up the Interrupt level
	pHwDevExt->Irq =
			ConfigInfo->BusInterruptLevel;

	// pick up the Revision id
	pHwDevExt->RevID =
			(ULONG)pHwDevExt->PciConfigSpace.RevisionID;

	STREAM_PHYSICAL_ADDRESS	adr;
	ULONG	Size;
	PUCHAR	pDmaBuf;

	pDmaBuf = (PUCHAR)StreamClassGetDmaBuffer( pHwDevExt );
	pHwDevExt->pDmaBuf = pDmaBuf;

	DebugPrint( (DebugLevelTrace, "TOSDVD:  DMA Buffer Logical  Addr = 0x%x\r\n", pDmaBuf ) );

	adr = StreamClassGetPhysicalAddress( pHwDevExt, NULL, pDmaBuf, DmaBuffer, &Size) ;
	pHwDevExt->addr = adr;

	DebugPrint( (DebugLevelTrace, "TOSDVD:  DMA Buffer Physical Addr = 0x%x\r\n", adr.LowPart ) );
	DebugPrint( (DebugLevelTrace, "TOSDVD:  DMA Buffer Size = %d\r\n", Size ) );

//
	NTSTATUS Stat;
	PUCHAR	ioBase = pHwDevExt->ioBaseLocal;
	DEVICE_INIT_INFO	DevInfo;

	DevInfo.ioBase = ioBase;

	// initialize the hardware settings
	pHwDevExt->StreamType = STREAM_MODE_DVD;
	pHwDevExt->TVType = DISPLAY_MODE_NTSC;
	pHwDevExt->VideoAspect = ASPECT_04_03;
	pHwDevExt->LetterBox = FALSE;
	pHwDevExt->PanScan = FALSE;

	pHwDevExt->AudioMode = AUDIO_TYPE_AC3;
//	pHwDevExt->AudioMode = AUDIO_TYPE_PCM;

	pHwDevExt->AudioType = AUDIO_OUT_ANALOG;
	pHwDevExt->AudioVolume = 0x7f;
	pHwDevExt->AudioCgms = AUDIO_CGMS_03;	// No copying is permitted
	pHwDevExt->AudioFreq = AUDIO_FS_48;

	pHwDevExt->VideoMute = FALSE;
	pHwDevExt->AudioMute = FALSE;
	pHwDevExt->SubpicMute = FALSE;
	pHwDevExt->OSDMute = TRUE;
	pHwDevExt->SubpicHilite = FALSE;

	pHwDevExt->PlayMode = PLAY_MODE_NORMAL;
	pHwDevExt->RunMode = PLAY_MODE_NORMAL;	// PlayMode after BOOT is Normal Mode;

	pHwDevExt->pSrbDMA0 = NULL;
	pHwDevExt->pSrbDMA1 = NULL;
	pHwDevExt->SendFirst = FALSE;
	pHwDevExt->DecodeStart = FALSE;
//--- 97.09.08 K.Chujo
	pHwDevExt->TimeDiscontFlagCount = 0;
//--- End.
//--- 97.09.09 K.Chujo
	pHwDevExt->DataDiscontFlagCount = 0;
//--- End.

	pHwDevExt->bKeyDataXfer = FALSE;

	pHwDevExt->CppFlagCount = 0;
	pHwDevExt->pSrbCpp = NULL;
	pHwDevExt->bCppReset = FALSE;

	pHwDevExt->XferStartCount = 0;

//	pHwDevExt->lSeemVBuff = 0;
//	pHwDevExt->dwSeemSTC = 0;
//--- 97.09.08 K.Chujo
	pHwDevExt->dwSTCInit = 0;
	pHwDevExt->bDMAscheduled = FALSE;
	pHwDevExt->fCauseOfStop = 0;
	pHwDevExt->bDMAstop = FALSE;
	pHwDevExt->bVideoQueue = FALSE;
	pHwDevExt->bAudioQueue = FALSE;
	pHwDevExt->bSubpicQueue = FALSE;
//--- End.
//--- 97.09.24
	pHwDevExt->VideoMaxFullRate = 1 * 10000;
	pHwDevExt->AudioMaxFullRate = 1 * 10000;
	pHwDevExt->SubpicMaxFullRate = 1 * 10000;
//--- End.

	pHwDevExt->cOpenInputStream = 0;

	pHwDevExt->pstroVid = NULL;
	pHwDevExt->pstroAud = NULL;
	pHwDevExt->pstroSP = NULL;
	pHwDevExt->pstroYUV = NULL;
	pHwDevExt->pstroCC = NULL;

	pHwDevExt->DAck.init( &DevInfo );
	pHwDevExt->VDec.init( &DevInfo );
	pHwDevExt->ADec.init( &DevInfo );
	pHwDevExt->VPro.init( &DevInfo );
	pHwDevExt->CPgd.init( &DevInfo );
	pHwDevExt->ADec.SetParam(
		pHwDevExt->AudioMode,
		pHwDevExt->AudioFreq,
		pHwDevExt->AudioType,
		pHwDevExt->AudioCgms,
		&pHwDevExt->DAck
	);
	pHwDevExt->VPro.SetParam( pHwDevExt->AudioMode, pHwDevExt->SubpicMute );

	pHwDevExt->CPro.init( &DevInfo );

// Set Stream Mode
	// initialize decoder
	Stat = pHwDevExt->DAck.PCIF_RESET();
	if( Stat != STATUS_SUCCESS ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:illegal config info") );
		pSrb->Status = STATUS_IO_DEVICE_ERROR;
		return FALSE;
	}
	pHwDevExt->VDec.VIDEO_RESET();
	pHwDevExt->VPro.VPRO_RESET_FUNC();
	pHwDevExt->VPro.SUBP_RESET_FUNC();
//	pHwDevExt->DAck.PCIF_INIT();
//	WRITE_PORT_UCHAR( ioBase + PCIF_CNTL, 0x10 );
	pHwDevExt->CPgd.CPGD_RESET_FUNC();

//	pHwDevExt->DAck.PCIF_DMA_ABORT();
//
//	// check end abort
//	// Bad Coding !!!!!!!
//	for( ; ; ) {
//		UCHAR val;
//
//		val = READ_PORT_UCHAR( ioBase + PCIF_INTF );
//		if( !( val & 0x04 ) )
//			break;
//	}

	pHwDevExt->VDec.VIDEO_ALL_INT_OFF();
	pHwDevExt->DAck.PCIF_VSYNC_ON();
	pHwDevExt->VDec.VIDEO_MODE_DVD( );
	pHwDevExt->DAck.PCIF_PACK_START_ON();
//	pHwDevExt->VDec.VIDEO_USER_INT_ON();

// Set Display Mode
	pHwDevExt->VDec.VIDEO_OUT_NTSC();
	pHwDevExt->VPro.VPRO_INIT_NTSC();
	pHwDevExt->CPgd.CPGD_INIT_NTSC();
	pHwDevExt->DAck.PCIF_ASPECT_0403();
	pHwDevExt->VPro.VPRO_VIDEO_MUTE_OFF();
	pHwDevExt->CPgd.CPGD_VIDEO_MUTE_OFF();

// Set Digital Out
	pHwDevExt->VideoPort = 0;	// Disable
	pHwDevExt->DAck.PCIF_SET_DIGITAL_OUT( pHwDevExt->VideoPort );

// Set Digital Palette

//	UCHAR	paldata[256];
//	ULONG	l;
//
//	for( l = 0; l < 256; l++ )
//		paldata[l] = (UCHAR)l;
//
//	pHwDevExt->DAck.PCIF_SET_PALETTE( PALETTE_Y, paldata );
//	pHwDevExt->DAck.PCIF_SET_PALETTE( PALETTE_Cb, paldata );
//	pHwDevExt->DAck.PCIF_SET_PALETTE( PALETTE_Cr, paldata );

	BOOLEAN	bStatus;

	bStatus = pHwDevExt->CPro.reset( NO_GUARD );

	ASSERTMSG( "\r\n...CPro Status Error!!( reset )", bStatus );

// Set Audio Mode
	if( pHwDevExt->AudioMode == AUDIO_TYPE_AC3 ) {
		pHwDevExt->VDec.VIDEO_PRSO_PS1();
		pHwDevExt->ADec.AUDIO_ZR38521_BOOT_AC3();

		pHwDevExt->ADec.AUDIO_ZR38521_CFG();
		pHwDevExt->ADec.AUDIO_ZR38521_AC3();
		pHwDevExt->ADec.AUDIO_ZR38521_KCOEF();
		pHwDevExt->ADec.AUDIO_TC6800_INIT_AC3();
		pHwDevExt->VPro.SUBP_SELECT_AUDIO_SSID();
	}
	else if( pHwDevExt->AudioMode == AUDIO_TYPE_PCM ) {
		pHwDevExt->VDec.VIDEO_PRSO_PS1();
		pHwDevExt->ADec.AUDIO_ZR38521_BOOT_PCM();

		pHwDevExt->ADec.AUDIO_ZR38521_CFG();
		pHwDevExt->ADec.AUDIO_ZR38521_PCMX();
		pHwDevExt->ADec.AUDIO_TC6800_INIT_PCM();
		pHwDevExt->VPro.SUBP_SELECT_AUDIO_SSID();
	}
	else
		TRAP;

	pHwDevExt->ADec.AUDIO_ZR38521_REPEAT_16();
	pHwDevExt->ADec.AUDIO_TC9425_INIT_DIGITAL();
	pHwDevExt->ADec.AUDIO_TC9425_INIT_ANALOG();
	pHwDevExt->ADec.AUDIO_ZR38521_MUTE_OFF();

	// AudioType Analog
	pHwDevExt->DAck.PCIF_AMUTE2_OFF();
	pHwDevExt->DAck.PCIF_AMUTE_OFF();

	// NTSC Copy Gaurd
	{
		BOOL ACGstatus;

		ACGstatus = pHwDevExt->CPgd.CPGD_SET_AGC_CHIP( pHwDevExt->RevID );

		ASSERTMSG( "\r\n...Analog Copy Guard Error!!", ACGstatus );

		// NTSC Analog Copy Guard Default Setting for Windows98 Beta 3
		//    Aspect Ratio  4:3
		//    Letter Box    OFF
		//    CGMS          3 ( No Copying is permitted )
		//    APS           2 ( AGC pulse ON, Burst Inv ON (2line) )
		pHwDevExt->CPgd.CPGD_SET_CGMSnCPGD( 0, 0, 3, 2 );
	}

//--- 97.09.23 K.Chujo; Closed Caption
	USCC_on( pHwDevExt );
//--- End.

	DebugPrint( (DebugLevelTrace, "TOSDVD:HwInitialize() exit\r\n") );

	pSrb->Status = STATUS_SUCCESS;
	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdinit.h ===
//***************************************************************************
//	Header file
//
//***************************************************************************

#ifndef __DVDINIT_H__
#define __DVDINIT_H__

typedef enum tagStreamType {
    strmVideo = 0,
    strmAudio,
    strmSubpicture,
    strmYUVVideo,
	strmCCOut,
	STREAMNUM
} STREAMTYPES;

#define	DMASIZE		(2*1024)

typedef struct _HW_DEVICE_EXTENSION {

//	UCHAR	dmp[32*10000+4];
//	UCHAR	dmp2[16*10000];
	PCI_COMMON_CONFIG	PciConfigSpace;

	PUCHAR			ioBaseLocal;	// board base address
	ULONG			Irq;		// irq level
	ULONG			RevID;		// Revision ID

	// hardware settings
	ULONG			StreamType;	// stream type - DVD, MPEG2, ...
	ULONG			TVType;		// TV type - NTCS, PAL, ...
	ULONG			PlayMode;	// playback mode - normal, FF, ...
	ULONG			RunMode;	// 3modes; Normal, Fast, Slow
	BOOL			VideoMute;	//
	BOOL			AudioMute;	//
	BOOL			SubpicMute;	//
	BOOL			OSDMute;	//
	BOOL			LetterBox;	//
	BOOL			PanScan;	//
	ULONG			VideoAspect;	// - 4:3, 16:9
	ULONG			AudioMode;	// AC3, PCM, ...
	ULONG			AudioType;	// audio type - analog, digital, ...
	ULONG			AudioVolume;	// audio volume
	BOOL			SubpicHilite;	// subpicture hilight
	ULONG			AudioCgms;	// audio Cgms
	ULONG			AudioFreq;	// audio frequency
	UCHAR			VideoPort;	// degital video output type

	BOOL			fTimeOut;

	PHW_STREAM_REQUEST_BLOCK	pSrbDMA0;
	PHW_STREAM_REQUEST_BLOCK	pSrbDMA1;
	BOOLEAN	fSrbDMA0last;
	BOOLEAN	fSrbDMA1last;

	BOOL	SendFirst;
	BOOL	DecodeStart;
	DWORD	TimeDiscontFlagCount;
	DWORD	DataDiscontFlagCount;
	DWORD	SendFirstTime;
	ULONG	XferStartCount;

	BOOL	bKeyDataXfer;
	PHW_TIMER_ROUTINE	pfnEndKeyData;
	DWORD	CppFlagCount;
	PHW_STREAM_REQUEST_BLOCK	pSrbCpp;
	BOOL	bCppReset;
	LONG	lCPPStrm;

	DWORD	cOpenInputStream;	// count opened input stream

	DeviceQueue DevQue;
	CCQueue CCQue;

	Dack		DAck;
	VDecoder	VDec;
	ADecoder	ADec;
	VProcessor	VPro;
	CGuard		CPgd;
	Cpp			CPro;

	PHW_STREAM_OBJECT pstroVid;
	PHW_STREAM_OBJECT pstroAud;
	PHW_STREAM_OBJECT pstroSP;
	PHW_STREAM_OBJECT pstroYUV;
	PHW_STREAM_OBJECT pstroCC;

	ULONG	ddrawHandle;
	ULONG	VidPortID;
	ULONG	SurfaceHandle;

	DWORD	dwSTCInit;
	DWORD	dwSTCtemp;
	DWORD	dwSTCinPause;	// is used to keep STC only from Fast to Pause
							// because in this case STC doesn't STOP !! (why?)
	BOOL	bSTCvalid;
	BOOL	bDMAscheduled;
	UCHAR	fDMA;
	UCHAR	bDMAstop;
	ULONG	fCauseOfStop;
	BOOL	bVideoQueue;
	BOOL	bAudioQueue;
	BOOL	bSubpicQueue;
	REFERENCE_TIME	VideoStartTime;
	REFERENCE_TIME	VideoInterceptTime;
	LONG			VideoRate;
	REFERENCE_TIME	AudioStartTime;
	REFERENCE_TIME	AudioInterceptTime;
	LONG			AudioRate;
	REFERENCE_TIME	SubpicStartTime;
	REFERENCE_TIME	SubpicInterceptTime;
	LONG			SubpicRate;

	REFERENCE_TIME	StartTime;
	REFERENCE_TIME	InterceptTime;
	LONG			Rate;

	LONG			VideoMaxFullRate;
	LONG			AudioMaxFullRate;
	LONG			SubpicMaxFullRate;

	LONG			ChangeFlag;

	PUCHAR	pDmaBuf;
	STREAM_PHYSICAL_ADDRESS	addr;

	KSPROPERTY_SPHLI	hli;

	KS_AMVPDATAINFO	VPFmt;

	BOOL	bStopCC;

} HW_DEVICE_EXTENSION, *PHW_DEVICE_EXTENSION;

typedef struct _STREAMEX {

	DWORD EventCount;
	KSSTATE	state;

} STREAMEX, *PSTREAMEX;

typedef struct _SRB_EXTENSION {

	StreamType Type;
	ULONG Index;

	PHW_TIMER_ROUTINE	pfnEndSrb;
	PHW_STREAM_REQUEST_BLOCK	parmSrb;

} SRB_EXTENSION, * PSRB_EXTENSION;

/*****************************************************************************
*
* the following section defines prototypes for the minidriver initialization
* routines
*
******************************************************************************/

extern "C" NTSTATUS DriverEntry( IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING RegistryPath );
NTSTATUS HwInitialize (IN PHW_STREAM_REQUEST_BLOCK pSrb);
void GetPCIConfigSpace(IN PHW_STREAM_REQUEST_BLOCK pSrb);
void InitializationEntry(IN PHW_STREAM_REQUEST_BLOCK pSrb);

typedef struct _MYTIME {
	KSEVENT_TIME_INTERVAL tim;
	LONGLONG LastTime;
} MYTIME, *PMYTIME;

typedef struct _MYAUDIOFORMAT {
	DWORD	dwMode;
	DWORD	dwFreq;
	DWORD	dwQuant;
} MYAUDIOFORMAT, *PMYAUDIOFORMAT;


#endif //__DVDINIT_H__

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdirq.cpp ===
//***************************************************************************
//	Interrupt process
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "dvdcmd.h"
#include "debug.h"

void HwIntDMA( PHW_DEVICE_EXTENSION pHwDevExt, UCHAR val );
void HwIntVideo( PHW_DEVICE_EXTENSION pHwDevExt );
void HwIntVSync( PHW_DEVICE_EXTENSION pHwDevExt );

//void SeemlessProc( PHW_DEVICE_EXTENSION pHwDevExt );

extern void USCC_get( PHW_DEVICE_EXTENSION pHwDevExt );
extern void USCC_put( PHW_DEVICE_EXTENSION pHwDevExt );

/*
** HwInterrupt()
*/
extern "C" BOOLEAN STREAMAPI HwInterrupt( IN PHW_DEVICE_EXTENSION pHwDevExt )
{
	UCHAR	val;
//	UCHAR	savedata[7];
	BOOLEAN	fInterrupt = TRUE;

//	savedata[0] = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA1 );
//	savedata[1] = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA2 );
//	savedata[2] = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA3 );
//	savedata[3] = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA4 );
//	savedata[4] = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA5 );
//	savedata[5] = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA6 );
//	savedata[6] = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA7 );

	val = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + PCIF_INTF );

//	DebugPrint( (DebugLevelVerbose, "TOSDVD:HwInterrupt 0x%x\r\n", (DWORD)val ) );

	if( val & 0x03 ) {
		HwIntDMA( pHwDevExt, (UCHAR)(val & 0x03) );
	}
	else if( val & 0x08 ) {
		HwIntVideo( pHwDevExt );
	}
	else if( val & 0x10 ) {
		HwIntVSync( pHwDevExt );
	}
	else if( val != 0 ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:Interrupt! Not impliment\r\n") );
		TRAP;
	}
	else {
//    Removed by serges because this was happening an awful lot, possibly
//    hurting performance.
//		DebugPrint( (DebugLevelTrace, "TOSDVD:Other Board Interrupt ??\r\n") );
//		TRAP;
		fInterrupt = FALSE;
	}

//	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA7, savedata[6] );
//	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA6, savedata[5] );
//	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA5, savedata[4] );
//	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA4, savedata[3] );
//	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA3, savedata[2] );
//	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA2, savedata[1] );
//	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_DATA1, savedata[0] );

	return( fInterrupt );
}

void HwIntDMA( PHW_DEVICE_EXTENSION pHwDevExt, UCHAR val )
{
	if( pHwDevExt->bKeyDataXfer ) {

		if( val & 0x01 )
			WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + PCIF_INTF, 0x01 );
		else
			TRAP;

		pHwDevExt->pfnEndKeyData( pHwDevExt );

		return;
	}

	if( val & 0x01 ) {
		WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + PCIF_INTF, 0x01 );

		if( pHwDevExt->pSrbDMA0 == NULL ) {
			DebugPrint( (DebugLevelTrace, "TOSDVD:  Bad Status! DMA0 HwIntDMA\r\n") );
//			TRAP;
			return;
		}

// error check for debug
		{
		UCHAR val;
		val = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + PCIF_CNTL );
		if( val & 0x01 ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:  Bad Irq? DMA0\r\n" ));
			return;
		}
		}

//		DebugDumpWriteData( pHwDevExt->pSrbDMA0 );

//		if( pHwDevExt->lSeemVBuff != 0 ) {
//			pHwDevExt->lSeemVBuff -= 2048;	// Bad Value!!
//			if( pHwDevExt->lSeemVBuff < 0 ) {
//				pHwDevExt->lSeemVBuff = 0;
//				SeemlessProc( pHwDevExt );
//			}
//		}

		if( pHwDevExt->fSrbDMA0last ) {
			DebugPrint(( DebugLevelVerbose, "TOSDVD:HWInt SrbDMA0 0x%x\r\n", pHwDevExt->pSrbDMA0 ) );

			// must fix!
			// other place that call StreamRequestComplete() does not clear pHwDevExt->bEndCpp;

			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(HWint0) srb = 0x%x\r\n", pHwDevExt->pSrbDMA0 ));
				if( pHwDevExt->pSrbDMA0 == pHwDevExt->pSrbDMA1 || pHwDevExt->pSrbDMA1 == NULL ) {
					DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(HWint0)\r\n" ));
					StreamClassScheduleTimer(
						NULL,
						pHwDevExt,
// BUG - must fix
// need wait underflow?
						500000,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->pfnEndSrb,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA0->SRBExtension))->parmSrb
						);
				}
			}

			pHwDevExt->pSrbDMA0->Status = STATUS_SUCCESS;
			StreamClassStreamNotification( StreamRequestComplete,
											pHwDevExt->pSrbDMA0->StreamObject,
											pHwDevExt->pSrbDMA0 );

		}

		// Next DMA
		pHwDevExt->pSrbDMA0 = NULL;
		pHwDevExt->fSrbDMA0last = FALSE;
	}

	if( val & 0x02 ) {
		WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + PCIF_INTF, 0x02 );

		if( pHwDevExt->pSrbDMA1 == NULL ) {
			DebugPrint( (DebugLevelTrace, "TOSDVD:  Bad Status! DMA1 HwIntDMA\r\n") );
//			TRAP;
			return;
		}

// error check for debug
		{
		UCHAR val;
		val = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + PCIF_CNTL );
		if( val & 0x02 ) {
			DebugPrint(( DebugLevelTrace, "TOSDVD:  Bad Irq? DMA1\r\n" ));
			return;
		}
		}

//		DebugDumpWriteData( pHwDevExt->pSrbDMA1 );

//		if( pHwDevExt->lSeemVBuff != 0 ) {
//			pHwDevExt->lSeemVBuff -= 2048;	// Bad Value!!
//			if( pHwDevExt->lSeemVBuff < 0 ) {
//				pHwDevExt->lSeemVBuff = 0;
//				SeemlessProc( pHwDevExt );
//			}
//		}

		if( pHwDevExt->fSrbDMA1last ) {
			DebugPrint(( DebugLevelVerbose, "TOSDVD:HWInt SrbDMA1 0x%x\r\n", pHwDevExt->pSrbDMA1 ) );

			// must fix!
			// other place that call StreamRequestComplete() does not clear pHwDevExt->bEndCpp;

			if( ((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb ) {
				DebugPrint(( DebugLevelTrace, "TOSDVD:exist pfnEndSrb(HWint1) srb = 0x%x\r\n", pHwDevExt->pSrbDMA1 ));
				if( pHwDevExt->pSrbDMA0 == NULL ) {
					DebugPrint(( DebugLevelTrace, "TOSDVD:Call TimerCppReset(HWint1)\r\n" ));
					StreamClassScheduleTimer(
						NULL,
						pHwDevExt,
						1,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->pfnEndSrb,
						((PSRB_EXTENSION)(pHwDevExt->pSrbDMA1->SRBExtension))->parmSrb
						);
				}
			}

			pHwDevExt->pSrbDMA1->Status = STATUS_SUCCESS;
			StreamClassStreamNotification( StreamRequestComplete,
											pHwDevExt->pSrbDMA1->StreamObject,
											pHwDevExt->pSrbDMA1 );
		}

		// Next DMA
		pHwDevExt->pSrbDMA1 = NULL;
		pHwDevExt->fSrbDMA1last = FALSE;
	}

	PreDMAxfer( pHwDevExt/*, val & 0x03 */);
}

void HwIntVideo( PHW_DEVICE_EXTENSION pHwDevExt )
{
	UCHAR	val;
	UCHAR	val2;

//	DebugPrint( (DebugLevelTrace, "TOSDVD:HwIntVideo\r\n") );

	val = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_IRM );
	val2 = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_IRF );
	val ^= val2;
	val2 &= val;

//--- 97.09.23 K.Chujo; User Data Start Code Interrupt for Closed Caption
	if( val2 & 0x01 ) {
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  UDSC\r\n") );
		USCC_get( pHwDevExt );
	}
//--- End.
#if DBG
	if( val2 & 0x02 )
		DebugPrint( (DebugLevelTrace, "TOSDVD:  Scr\r\n") );
	if( val2 & 0x04 )
		DebugPrint( (DebugLevelTrace, "TOSDVD:  I-PIC\r\n") );
	if( val2 & 0x08 )
		DebugPrint( (DebugLevelTrace, "TOSDVD:  User\r\n") );
//	if( val2 & 0x10 )
//		DebugPrint( (DebugLevelTrace, "TOSDVD:  Error\r\n") );
#endif
	if( val2 & 0x10 ) {
		UCHAR val3;
		DebugPrint( (DebugLevelTrace, "TOSDVD:  Error\r\n") );
		val3 = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_ERF );
		DebugPrint( (DebugLevelTrace, "TOSDVD:      Error %x\r\n", val3 ) );
	}
	if( val2 & 0x40 ) {
		DebugPrint( (DebugLevelTrace, "TOSDVD:  Underflow\r\n") );

///		pHwDevExt->XferStartCount = 0;
///		pHwDevExt->DecodeStart = FALSE;
///		pHwDevExt->SendFirst = FALSE;

//		pHwDevExt->SendFirstTime = GetCurrentTime_ms();

		// ???
///		for( int i = 0; i < 0xff /*0xffff*/; i++ )
///			val2 = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_STT1 );
		for( int i = 0; i < 0xffff /*0xffff*/; i++ )
			val2 = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_STT1 );

		val2 = READ_PORT_UCHAR( pHwDevExt->ioBaseLocal + TC812_UOF );
		pHwDevExt->dwSTCtemp = pHwDevExt->VDec.VIDEO_GET_STCA();

		// Check Audio Underflow
		StreamClassScheduleTimer(
			pHwDevExt->pstroAud,
			pHwDevExt,
			0,
			(PHW_TIMER_ROUTINE)CheckAudioUnderflow,
			pHwDevExt
		);

		StreamClassScheduleTimer(
			pHwDevExt->pstroAud,
			pHwDevExt,
			10000,
			(PHW_TIMER_ROUTINE)CheckAudioUnderflow,
			pHwDevExt
		);
	}
}

void HwIntVSync( PHW_DEVICE_EXTENSION pHwDevExt )
{
	static v_count = 0;
	static v_count2 = 0;
//	ULONG	TrickMode;

	WRITE_PORT_UCHAR( pHwDevExt->ioBaseLocal + PCIF_INTF, 0x10 );

//--- 97.09.15 K.Chujo; Analog Copy Guard for beta 3, always Type 1 (AGC only);
	pHwDevExt->CPgd.CPGD_UPDATE_AGC();
//--- End.

//--- 97.09.23 K.Chujo; Closed Caption
	USCC_put( pHwDevExt );
//--- End.

	if( ++v_count < 3 )
		return;

	v_count = 0;

// 20 / 1s

	// notes: You have to call VIDEO_BUG_SLIDE_01 to recover MPEG2 chip bug
	//        when trick mode isn't FREEZE mode.
	//        But don't use VIDEO_GET_TRICK_MODE to get current trick mode.
	//        Because MPEG2 chip returns wrong value sometimes.

	//	TrickMode = pHwDevExt->VDec.VIDEO_GET_TRICK_MODE();
//	if( TrickMode != 0x02 ) {
	if( pHwDevExt->PlayMode != PLAY_MODE_FREEZE /*&& pHwDevExt->DecodeStart == TRUE*/ ) {
		pHwDevExt->VDec.VIDEO_BUG_SLIDE_01();
	}

	if( ++v_count2 < 4 )
		return;

	v_count2 = 0;

// 5 / 1s ???
	ClockEvents( pHwDevExt );

// debug
	static v_count3 = 0;

	if( ++v_count3 < 50 )
		return;

	v_count3 = 0;

// 1 / 60s
	DebugPrint((
		DebugLevelTrace,
		"TOSDVD:  VSync 10s (0x%s(100ns))\r\n",
		DebugLLConvtoStr( ConvertPTStoStrm( pHwDevExt->VDec.VIDEO_GET_STCA() ), 16 )
		));
}

//void SeemlessProc( PHW_DEVICE_EXTENSION pHwDevExt )
//{
//	DWORD	dwSTC;
//
//	DebugPrint( (DebugLevelTrace, "TOSDVD:SeemlessProc\r\n") );
//
//	pHwDevExt->VDec.VIDEO_SET_STCA( pHwDevExt->dwSeemSTC );
//	dwSTC = pHwDevExt->VDec.VIDEO_GET_STCA();
//	pHwDevExt->ADec.AUDIO_ZR38521_VDSCR_OFF( dwSTC );
//	pHwDevExt->VPro.SUBP_SET_STC( dwSTC );
//	pHwDevExt->VPro.SUBP_STC_ON();
//
////	pHwDevExt->VDec.VIDEO_UFLOW_INT_ON();
//
//}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdvpro.h ===
//***************************************************************************
//
//	DVDVPRO.H
//
//	Author:
//		TOSHIBA [PCS](PSY) Satoshi Watanabe
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//		02/23/97	converted from VxD source
//		03/09/97	converted C++ class
//
//***************************************************************************

#ifndef __DVDVPRO_H__
#define __DVDVPRO_H__

class VProcessor {
private:
	PUCHAR	ioBase;
	ULONG	AudioMode;	// AC3, PCM, ...
	BOOL	SubpicMute;

	UCHAR	VproRESET_REG;
	UCHAR	VproVMODE_REG;
	UCHAR	VproAVM_REG;
//--- 97.09.04 K.Chujo
	// new code
	UCHAR	VproCOMMAND_REG;
//--- End
//--- 97.09.10 K.Chujo
	UCHAR	AudioID;
	UCHAR	SubpicID;
//--- End.

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void SetParam( ULONG aMode, BOOL bSubpicMute );

	void VPRO_RESET_FUNC();
	void VPRO_VIDEO_MUTE_ON();
	void VPRO_VIDEO_MUTE_OFF();
	void VPRO_INIT_NTSC();
	void VPRO_INIT_PAL();
	void VPRO_CC_ON();
	void VPRO_CC_OFF();
	void VPRO_SUBP_PALETTE( PUCHAR pPalData );
	void VPRO_OSD_PALETTE( PUCHAR pPalData );

	void SUBP_RESET_INIT();
	void SUBP_RESET_FUNC();
	void SUBP_RESET_STC();
	void SUBP_BUFF_CLEAR();
	void SUBP_MUTE_ON();
	void SUBP_MUTE_OFF();
	void SUBP_HLITE_ON();
	void SUBP_HLITE_OFF();
	void SUBP_SET_STC( ULONG stc );
	void SUBP_SET_LNCTLI( PUCHAR pData );
	void SUBP_SET_PXCTLIS( PUCHAR pData );
	void SUBP_SET_PXCTLIE( PUCHAR pData );
	void SUBP_STC_ON();
	void SUBP_STC_OFF();
	void SUBP_SET_SUBP_CH( ULONG ch );
	ULONG SUBP_GET_SUBP_CH();
	void SUBP_SET_AUDIO_CH( ULONG ch );
	void SUBP_SET_AUDIO_NON();
	ULONG SUBP_GET_AUDIO_CH();
	void SUBP_SELECT_AUDIO_STID();
	void SUBP_SELECT_AUDIO_SSID();

};

#endif	// __DVDVPRO_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\dvdvpro.cpp ===
//***************************************************************************
//
//	DVDVPRO.CPP
//		Video Processor(V-PRO) Routine
//
//	Author:	
//		TOSHIBA [PCS](PSY) Satoshi Watanabe
//		Copyright (c) 1997 TOSHIBA CORPORATION
//
//	Description:
//		02/23/97	converted from VxD source
//		03/09/97	converted C++ class
//
//***************************************************************************

#include "common.h"
#include "regs.h"
#include "dvdvpro.h"

void VProcessor::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;

//--- 97.09.04 K.Chujo
	// You should reset SUBPIC part to change the subpic stream ID safely,
	// because early VPRO has a bug.
	// But if you reset it, you must restore registers.
//--- End.

}

void VProcessor::SetParam( ULONG aMode, BOOL bSubpicMute )
{
	AudioMode = aMode;
	SubpicMute = bSubpicMute;

	if( SubpicMute )
		VproCOMMAND_REG = 0xA0;			// see specifications (date 96.09.26 spec)
	else
		VproCOMMAND_REG = 0x20;			// see specifications (date 96.09.26 spec)
}

void VProcessor::VPRO_RESET_FUNC()
{
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, 0 );
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, 0x80 );

	VproRESET_REG = 0x80;
	VproVMODE_REG = 0;	// ? ? ?
	VproAVM_REG = 0;	// ? ? ?
}

void VProcessor::VPRO_VIDEO_MUTE_ON()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, VproRESET_REG );
}

void VProcessor::VPRO_VIDEO_MUTE_OFF()
{
// debug
//	if ( !(VproRESET_REG & 0x80) )
//		Error;
// debug

	VproRESET_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + VPRO_RESET, VproRESET_REG );
}

void VProcessor::VPRO_INIT_NTSC()
{
	VproVMODE_REG &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + VPRO_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + VPRO_DVEN, 0xc0 );
}

void VProcessor::VPRO_INIT_PAL()
{
	VproVMODE_REG |= 0x80;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );

	VproAVM_REG &= 0x5f;
	WRITE_PORT_UCHAR( ioBase + VPRO_AVM, VproAVM_REG );

	WRITE_PORT_UCHAR( ioBase + VPRO_DVEN, 0x80 );
}

void VProcessor::VPRO_CC_ON()
{
//	VproVMODE_REG &= 0xbf;
	VproVMODE_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );
}

void VProcessor::VPRO_CC_OFF()
{
//	VproVMODE_REG |= 0x40;
	VproVMODE_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + VPRO_VMODE, VproVMODE_REG );
}

void VProcessor::VPRO_SUBP_PALETTE( PUCHAR pPalData )
{
	ULONG i;

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x80 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + VPRO_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x40 );
	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0 );
}

void VProcessor::VPRO_OSD_PALETTE( PUCHAR pPalData )
{
	int i;

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x20 );

	for( i = 0; i < 48; i++ )
		WRITE_PORT_UCHAR( ioBase + VPRO_CPSP, *pPalData++ );

	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0x10 );
	WRITE_PORT_UCHAR( ioBase + VPRO_CPSET, 0 );
}

void VProcessor::SUBP_RESET_INIT()
{
	UCHAR	ch;

	SUBP_RESET_FUNC();

// Interrupt Mask.
	WRITE_PORT_UCHAR( ioBase + SUBP_STSINT, 0xf0 );

// select Audio Stream.
	if( AudioMode == AUDIO_TYPE_AC3 || AudioMode == AUDIO_TYPE_PCM )
		SUBP_SELECT_AUDIO_SSID();
	else
		SUBP_SELECT_AUDIO_STID();

	SUBP_STC_OFF();

// Audio channel
	if( AudioMode == AUDIO_TYPE_AC3 )
		ch = SUB_STRMID_AC3;
	else if( AudioMode == AUDIO_TYPE_MPEG_F1 )
		ch = STRMID_MPEG_AUDIO;
	else if( AudioMode == AUDIO_TYPE_MPEG_F2 )
		ch = STRMID_MPEG_AUDIO;
	else
		ch = SUB_STRMID_PCM;

	ch = (UCHAR)SUBP_GET_AUDIO_CH();
	SUBP_SET_AUDIO_CH( ch );

// Sub-Pic Channel
	SUBP_SET_SUBP_CH( 0 );

// Sub-Pic MUTE ON/OFF.
	if( SubpicMute )
		SUBP_MUTE_ON();
	else
		SUBP_MUTE_OFF();
	SUBP_BUFF_CLEAR();
}

void VProcessor::SUBP_RESET_FUNC()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0x80 );
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0 );

	// set or restore COMMAND REGISTER
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );
}

void VProcessor::SUBP_RESET_STC()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0x40 );
	WRITE_PORT_UCHAR( ioBase + SUBP_RESET, 0 );
}

void VProcessor::SUBP_BUFF_CLEAR()
{
//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val |= 0x10;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

//	val &= 0xef;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG |= 0x10;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG);

	VproCOMMAND_REG &= 0xef;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG);

//--- End.
}

void VProcessor::SUBP_MUTE_ON()
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:VProcessor::SUBP_MUTE_ON()\r\n" ));

//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val |= 0x80;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG |= 0x80;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.

	SubpicMute = TRUE;
}

void VProcessor::SUBP_MUTE_OFF()
{
	DebugPrint(( DebugLevelTrace, "TOSDVD:VProcessor::SUBP_MUTE_OFF()\r\n" ));

//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val &= 0x7f;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.

	SubpicMute = FALSE;
}

void VProcessor::SUBP_HLITE_ON()
{
//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val |= 0x40;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG |= 0x40;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.
}

void VProcessor::SUBP_HLITE_OFF()
{
//--- 97.09.04 K.Chujo

	// old below
//	UCHAR val;

//	val = READ_PORT_UCHAR( ioBase + SUBP_COMMAND );

//	val &= 0xbf;
//	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, val );

	// new below
	VproCOMMAND_REG &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + SUBP_COMMAND, VproCOMMAND_REG );

//--- End.
}

void VProcessor::SUBP_SET_STC( ULONG stc )
{
	SUBP_STC_OFF();

	WRITE_PORT_UCHAR( ioBase + SUBP_STCLL, (UCHAR)( stc & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + SUBP_STCLH, (UCHAR)( ( stc >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + SUBP_STCHL, (UCHAR)( ( stc >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + SUBP_STCHH, (UCHAR)( ( stc >> 24 ) & 0xff ) );

//	SUBP_STC_ON();
}

void VProcessor::SUBP_SET_LNCTLI( PUCHAR pData )
{
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFLL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFLH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFHL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_LCINFHH, *pData++ );
}

void VProcessor::SUBP_SET_PXCTLIS( PUCHAR pData )
{
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSLL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSLH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSML, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSMH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSHL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFSHH, *pData++ );
}

void VProcessor::SUBP_SET_PXCTLIE( PUCHAR pData )
{
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFELL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFELH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEML, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEMH, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEHL, *pData++ );
	WRITE_PORT_UCHAR( ioBase + SUBP_PCINFEHH, *pData++ );
}

void VProcessor::SUBP_STC_ON()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_STCCNT );

	val |= 0x80;
	WRITE_PORT_UCHAR( ioBase + SUBP_STCCNT, val );
}

void VProcessor::SUBP_STC_OFF()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_STCCNT );

	val &= 0x7f;
	WRITE_PORT_UCHAR( ioBase + SUBP_STCCNT, val );
}

void VProcessor::SUBP_SET_SUBP_CH( ULONG ch )
{
	UCHAR ucch;

	ucch = (UCHAR)( ch & 0x1f );
	ucch |= 0x20;

//--- 97.09.14 K.Chujo

	SubpicID = ucch;

#if 1
	// VPRO (early TC90A09F) has a bug. When change subpic ID, subpic disappears somtimes.
	// You should reset SUBPIC part to change subpic ID safely.

	// reset SUBPIC part
	SUBP_RESET_FUNC();

	// Interrupt Mask.
	WRITE_PORT_UCHAR( ioBase + SUBP_STSINT, 0xf0 );

	// select Audio Stream.
	if( AudioMode == AUDIO_TYPE_AC3 || AudioMode == AUDIO_TYPE_PCM )
		SUBP_SELECT_AUDIO_SSID();
	else
		SUBP_SELECT_AUDIO_STID();

//	SUBP_STC_OFF();

	// Audio channel
	SUBP_SET_AUDIO_CH( AudioID );
	DebugPrint(( DebugLevelTrace, "TOSDVD:  <<< New Audio ID = %x >>>\r\n", AudioID ));

	// Sub-Pic Channel
	WRITE_PORT_UCHAR( ioBase + SUBP_SPID, SubpicID );
	DebugPrint(( DebugLevelTrace, "TOSDVD:  <<< New Subpic ID = %x >>>\r\n", SubpicID ));

	// Sub-Pic MUTE ON/OFF.
	if( SubpicMute )
		SUBP_MUTE_ON();
	else
		SUBP_MUTE_OFF();
//	SUBP_BUFF_CLEAR();

#else
	// Maybe VPRO works only next one code if later version (ex. Timpani).

	WRITE_PORT_UCHAR( ioBase + SUBP_SPID, SubpicID );

#endif

//--- End.
}

ULONG VProcessor::SUBP_GET_SUBP_CH()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_SPID );

	return val;
}

void VProcessor::SUBP_SET_AUDIO_CH( ULONG ch )
{
	UCHAR ucch;

	ucch = (UCHAR)( ch & 0x7 );

	if( AudioMode == AUDIO_TYPE_AC3 )
		ucch |= 0x80;
	else if( AudioMode == AUDIO_TYPE_PCM )
		ucch |= 0xa0;
	else if( AudioMode == AUDIO_TYPE_MPEG_F1 )
		ucch |= 0xc0;
	else
		ucch |= 0xd0;

//--- 97.09.14 K.Chujo
	AudioID = ucch;
//--- End.
	WRITE_PORT_UCHAR( ioBase + SUBP_AAID, ucch );
	WRITE_PORT_UCHAR( ioBase + SUBP_ABID, 0 );
}

void VProcessor::SUBP_SET_AUDIO_NON()
{
//--- 97.09.14 K.Chujo
	AudioID = 0;
//--- End.
	WRITE_PORT_UCHAR( ioBase + SUBP_AAID, 0 );
	WRITE_PORT_UCHAR( ioBase + SUBP_ABID, 0 );
}

//--- 97.09.10 K.Chujo
ULONG VProcessor::SUBP_GET_AUDIO_CH()
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + SUBP_AAID );

	return (ULONG)val;
}
//--- End.

void VProcessor::SUBP_SELECT_AUDIO_STID()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_ASEL, 0 );
}

void VProcessor::SUBP_SELECT_AUDIO_SSID()
{
	WRITE_PORT_UCHAR( ioBase + SUBP_ASEL, 3 );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\que.h ===
//***************************************************************************
//	Queue header
//
//***************************************************************************

#ifndef __QUE_H__
#define __QUE_H__

#define SRBIndex(srb)	(((PSRB_EXTENSION)(srb->SRBExtension))->Index)
#define SRBpfnEndSrb(srb)	(((PSRB_EXTENSION)(srb->SRBExtension))->pfnEndSrb)
#define SRBparamSrb(srb)	(((PSRB_EXTENSION)(srb->SRBExtension))->parmSrb)

#define BLOCK_SIZE 2048

typedef enum
{
	Video,
	Audio,
	SubPicture
} StreamType;

class DeviceQueue
{
private:
	ULONG count;						// srb count in this queue
	PHW_STREAM_REQUEST_BLOCK top;
	PHW_STREAM_REQUEST_BLOCK bottom;
	PHW_STREAM_REQUEST_BLOCK video;
	PHW_STREAM_REQUEST_BLOCK audio;
	PHW_STREAM_REQUEST_BLOCK subpic;
	PVOID top_addr;						// buffer address of the first srb
	PVOID bottom_addr;					// buffer address of the bottom srb
	BOOLEAN v_first, a_first, s_first;
	ULONG v_count, a_count, s_count;
//	ULONG check;
//	KSTIME kt[100];

	void put( PHW_STREAM_REQUEST_BLOCK pOrigin, PHW_STREAM_REQUEST_BLOCK pSrb );
	void put_from_bottom( PHW_STREAM_REQUEST_BLOCK pSrb );
	void put_first( PHW_STREAM_REQUEST_BLOCK pSrb );

public:
	void init( void );
	void put_video( PHW_STREAM_REQUEST_BLOCK pSrb );
	void put_audio( PHW_STREAM_REQUEST_BLOCK pSrb );
	void put_subpic( PHW_STREAM_REQUEST_BLOCK pSrb );
	PHW_STREAM_REQUEST_BLOCK get( PULONG index, PBOOLEAN last );
	PHW_STREAM_REQUEST_BLOCK refer1st( PULONG index, PBOOLEAN last );
	PHW_STREAM_REQUEST_BLOCK refer2nd( PULONG index, PBOOLEAN last );
	void remove( PHW_STREAM_REQUEST_BLOCK pSrb );
	BOOL setEndAddress( PHW_TIMER_ROUTINE pfn, PHW_STREAM_REQUEST_BLOCK pSrb );
//--- 97.09.14 K.Chujo
	BOOL isEmpty( void );
	ULONG getCount( void );
//--- End.
};

class CCQueue
{
private:
	ULONG count;						// srb count in this queue
	PHW_STREAM_REQUEST_BLOCK top;
	PHW_STREAM_REQUEST_BLOCK bottom;

public:
	void init( void );
	void put( PHW_STREAM_REQUEST_BLOCK pSrb );
	PHW_STREAM_REQUEST_BLOCK get( void );
	void remove( PHW_STREAM_REQUEST_BLOCK pSrb );
	BOOL isEmpty( void );
};

#endif	// __QUE_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\regs.h ===
//***************************************************************************
//	Decoder board register header
//
//***************************************************************************

//===========================================================================
//   PCI I/F REGISTERS
//===========================================================================
#define	PCIF_CNTL	0x00	// PCI I/F control
#define	PCIF_INTF	0x04	// Interrupt flags
#define	PCIF_MADRLL	0x08	// DMA address low-low
#define	PCIF_MADRLH	0x09	// DMA address low-high
#define	PCIF_MADRHL	0x0a	// DMA address high-low
#define	PCIF_MADRHH	0x0b	// DMA address high-high
#define	PCIF_MTCLL	0x0c	// DMA counter low-low
#define	PCIF_MTCLH	0x0d	// DMA counter low-high
#define	PCIF_MTCHL	0x0e	// DMA counter high-low
#define	PCIF_MTCHH	0x0f	// DMA counter high-high

#define	PCIF_CPLT	0x10	// Color palette
#define	PCIF_CPCNT	0x11	// Color palette control

#define	PCIF_VMODE	0x14	// video mode
#define	PCIF_HSCNT	0x15	// HSYNC count
#define	PCIF_VSCNT	0x16	// VSYNC count
#define	PCIF_HSVS	0x17	// HS/VS porarity

#define	PCIF_EEPROM	0x20	// EEPROM access

#define	PCIF_PSCNT	0x22	// PS coontrol
#define	PCIF_TEST	0x23	// test control
#define	PCIF_SCNT	0x24	// serial access control
#define	PCIF_SW		0x25	// serial write
#define	PCIF_SR		0x26	// serial read

#define	PCIF_SNOLL	0x28	// board serial # LL
#define	PCIF_SNOLH	0x29	// board serial # LH
#define	PCIF_SNOMM	0x2a	// board serial # MM
#define	PCIF_SNOHL	0x2b	// board serial # HL
#define	PCIF_SNOHH	0x2c	// board serail # HH

//===========================================================================
//   MPEG DECODER(TC81201F) REGISTERS
//===========================================================================
#define	TC812_DATA1	0x80	// data1
#define	TC812_DATA2	0x81	// data2
#define	TC812_DATA3	0x82	// data3
#define	TC812_DATA4	0x83	// data4
#define	TC812_DATA5	0x84	// data5
#define	TC812_DATA6	0x85	// data6
#define	TC812_DATA7	0x86	// data7
#define	TC812_CMDR1	0x87	// command1
//#define	TC812_CMDR2	0x88	// command2

#define	TC812_DSPL	0x8b	// filter

#define	TC812_STT1	0x8e	// status1
#define	TC812_STT2	0x8f	// status2
#define	TC812_IRF	0x90	// interrupt flags
#define	TC812_IRM	0x91	// interrupt masks
#define	TC812_DEF	0x92	// decode end flag
#define	TC812_WEF	0x93	// packet end flag
#define	TC812_ERF	0x94	// error interrupt flag

#define	TC812_UOF	0x96	// under/over flow flag

#define	TC812_DEM	0x97	// Decode end mask (R/W)
#define	TC812_WEM	0x98	// Packet end mask (R/W)
#define	TC812_ERM	0x99	// Error interrupt mask (R/W)

#define	TC812_UOM	0x9B	// Under/Over flow mask (R/W)
#define	TC812_UDAT	0x9C	// User data read (R)
#define	TC812_BST	0x9D	// Bit stream write (R/W)
#define	TC812_UAR	0x9E	// User area data read (R)
#define	TC812_IVEC	0x9F	// Interrupt vector (R/W)

//======= Command Definitions (values for CMDR1 register) =============
#define	V_SET_SYS	0x01	// Set System decode mode
#define	V_GET_SYS	0x21	// Get System decode mode

#define	V_SET_DEC_MODE	0x02	// Set decode mode
#define	V_GET_DEC_MODE	0x22	// Get decode mode

#define	V_SET_INT_ID	0x03	// Set internal decode stream id
#define	V_GET_INT_ID	0x23	// Get internal decode stream id

#define	V_SET_PRSO_ID	0x04	// Set PRSO stream id
#define	V_GET_PRSO_ID	0x24	// Get PRSO stream id

#define	V_SET_USER_ID	0x06	// Set USER1/2 stream id
#define	V_GET_USER_ID	0x26	// Get USER1/2 stream id

#define	V_SET_UOF_SIZE	0x07	// Set under/overflow size
#define	V_GET_UOF_SIZE	0x27	// Get under/overflow size

#define	V_GET_STD_CODE	0x29	// Get STD buffer size

#define	V_SET_STCA	0x0B	// Set STCA value
#define	V_GET_STCA	0x2B	// Get STCA value

#define	V_SET_STCS	0x0C	// Set STCS value
#define	V_GET_STCS	0x2C	// Get STCS value

#define	V_GET_STCC	0x2D	// Get STCC value

#define	V_GET_SCR	0x2E	// Get SCR value

#define	V_SET_STCR_END	0x0D	// Set STC/SCR read end

#define	V_USER1_CLEAR	0x0F	// USER1 area clear
#define	V_USER2_CLEAR	0x10	// USER2 area clear

#define	V_SET_PVSIN	0x11	// Set PVSIN enable
#define	V_GET_PVSIN	0x31	// Get PVSIN state

#define	V_SET_WRITE_MEM	0x13	// Set write mem mode
#define	V_WRITE_MEMORY	0x14	// Write memory
#define	V_READ_MEMORY	0x34	// Read memory
#define	V_STOP_MEMORY	0x15	// Stop memory access

#define	V_SET_DECODE	0x41	// Start decode
#define	V_GET_DECODE	0x61	// Stop decode

#define	V_TRICK_NORMAL	0x42	// Play normal mode
#define	V_TRICK_FAST	0x43	// Play fast mode
#define	V_TRICK_SLOW	0x44	// Play slow mode
#define	V_TRICK_FREEZE	0x45	// Play freeze mode
#define	V_TRICK_STILL	0X46	// Play still mode

#define	V_GET_TRICK	0x67	// Get trick mode

#define	V_STD_CLEAR	0x48	// STD buffer clear

#define	V_SET_UDATA	0x4F	// Set USER data mode
#define	V_GET_UDATA	0x6F	// Get USER data mode

#define	V_SET_DTS	0x50	// Set DTS
#define	V_GET_DTS	0x70	// Get DTS

#define	V_SET_PTS	0x51	// Set PTS
#define	V_GET_PTS	0x71	// Get PTS

#define	V_SET_SEEMLES	0x55	// Set seemless mode

#define	V_SET_VFMODE	0x58	// Set video frame mode

#define	V_SET_STD_SIZE	0x59	// Set STD buffer size
#define	V_GET_STD_SIZE	0x79	// Get STD buffer size
#define	V_SET_USER_SIZE	0x5B	// Set USER area size
#define	V_GET_USER_SIZE	0x7B	// Get USER area size
#define	V_SET_MEM_MAP	0x5F	// Set memory mapping

#define	V_SET_VCD	0x5C	// Set Video-CD static mode

#define	V_CHK_DEC_STATE	0x5D	// Check decode state
#define	V_GET_DEC_STATE	0x7D	// Get Decoding state

#define	V_UF_CURB	0x5E	// Under-flow curb mode

#define	V_SET_DMODE	0x81	// Set display mode
#define	V_GET_DMODE	0xA1	// Get display mode

#define	V_SET_HOFFSET	0x82	// Set horizontal offset
#define	V_GET_HOFFSET	0xA2	// Get horizontal offset

#define	V_SET_VOFFSET	0x83	// Set virtical offset
#define	V_GET_VOFFSET	0xA3	// Get virtical offset

#define	V_SET_HAREA	0x84	// Set horizontal area
#define	V_GET_HAREA	0xA4	// Get horizontal area

#define	V_SET_VAREA	0x85	// Set horizontal area
#define	V_GET_VAREA	0xA5	// Get horizontal area

#define	V_GET_V_DTS	0xB0	// Get decoding DTS value

#define	V_RESET		0xC1	// Reset & set default mode

//===========================================================================
//   VIDEO PROCESSOR(TC90A09F) REGISTERS
//===========================================================================
#define	SUBP_RESET	0x40	// Sub-Pic Reset
#define	SUBP_COMMAND	0x41	// Command
#define	SUBP_STSINT	0x42	// Status & Interrupt mask
//#define	SUBP_OFFSET	0x43	// Offset
#define	SUBP_STCHH	0x44	// STC 32:25
#define	SUBP_STCHL	0x45	// STC 24:17
#define	SUBP_STCLH	0x46	// STC 16:09
#define	SUBP_STCLL	0x47	// STC 08:01
#define	SUBP_LCINFHH	0x48	// LCINF 32:25
#define	SUBP_LCINFHL	0x49	// LCINF 24:17
#define	SUBP_LCINFLH	0x4A	// LCINF 16:09
#define	SUBP_LCINFLL	0x4B	// LCINF 08:01
#define	SUBP_PCINFSHH	0x4C	// PCINFS 47:40
#define	SUBP_PCINFSHL	0x4D	// PCINFS 39:32
#define	SUBP_PCINFSMH	0x4E	// PCINFS 31:24
#define	SUBP_PCINFSML	0x4F	// PCINFS 23:16
#define	SUBP_PCINFSLH	0x50	// PCINFS 15:08
#define	SUBP_PCINFSLL	0x51	// PCINFS 07:01
#define	SUBP_PCINFEHH	0x52	// PCINFE 47:40
#define	SUBP_PCINFEHL	0x53	// PCINFE 39:32
#define	SUBP_PCINFEMH	0x54	// PCINFE 31:24
#define	SUBP_PCINFEML	0x55	// PCINFE 23:16
#define	SUBP_PCINFELH	0x56	// PCINFE 15:08
#define	SUBP_PCINFELL	0x57	// PCINFE 07:01
#define	SUBP_MODE	0x58	// Audio word alignment
#define	SUBP_STCCNT	0x59	// STC Count
#define	SUBP_SPID	0x5A	// Sub-Pic sub-stream id
#define	SUBP_ASEL	0x5B	// Audio select(sub/stream id?)
#define	SUBP_CC1	0x5C	// Closed caption data1
#define	SUBP_CC2	0x5D	// Closed caption data2
#define	SUBP_AAID	0x5E	// Audio-A (sub)stream id
#define	SUBP_ABID	0x5F	// Audio-B (sub)stream id

#define	VPRO_RESET	0x60	// V-PRO Reset
#define	VPRO_VMODE	0x61	// Video mode & US caption
#define	VPRO_CPSET	0x62	// Color palette setting
#define	VPRO_CPSP	0x63	// Color palette (Sub-pic)
#define	VPRO_AVM	0x64	// Analog video mode
#define	VPRO_DVEN	0x65	// Digital output
#define	VPRO_CPG	0x66	// Copy guard
#define	VPRO_CAGC	0x68	// AGC puls(Composit)
#define	VPRO_YAGC	0x69	// AGC puls(Y)
#define	VPRO_LAGC	0x6A	// AGC low-bit
#define	VPRO_CPOSD	0x6B	// Color palette (OSD)

//===========================================================================
//   VIDEO ANALOG COPY GUARD PROCESSOR(TC6802AF) REGISTERS
//===========================================================================
#define	CPGD_RESET	0xA0	// Reset
#define	CPGD_VMODE	0xA1	// Video mode
#define	CPGD_CPSET	0xA2	// Color palette setteing
#define	CPGD_CPSP	0xA3	// Color palette
#define	CPGD_AVM	0xA4	// Analog video mode
#define	CPGD_DVEN	0xA5	// Digital output
#define	CPGD_CPG	0xA6	// Copy guard setting

#define	CPGD_CAGC	0xA8	// AGC(Composit)
#define	CPGD_YAGC	0xA9	// AGC(Y)
#define	CPGD_LAGC	0xAA	// AGC(low bit)
#define	CPGD_CDG	0xAB	// CDG
#define	CPGD_BSTLN	0xAC	// Burst Inv number
#define	CPGD_BSTSE	0xAD	// Burst Inv timing
#define	CPGD_BSTLSL	0xAE	// Burst Inv line(Low)
#define	CPGD_BSTLSH	0xAF	// Burst Inv line(High)
#define	CPGD_CGMSAL	0xB0	// CGMS-A(Low)
#define	CPGD_CGMSAM	0xB1	// CGMS-A(Middle)
#define	CPGD_CGMSAH	0xB2	// CGMS-A(High)
#define	CPGD_BSTINT	0xB3	// Color burst interval
#define	CPGD_BSTONY	0xB4	// Burst(Y)

//***************************************************************************
//              M I S S I O L I N O U S   D E F I N I T I O N S
//***************************************************************************
//===========================================================================
//   MPEG (SUB-)STREAM ID
//===========================================================================
#define	STRMID_MPEG_AUDIO	0xc0
#define	STRMID_MPEG_VIDEO	0xe0
#define	STRMID_PRIVATE_1	0xbd
#define	STRMID_PRIVATE_2	0xbf

#define	SUB_STRMID_SUBP		0x20
#define	SUB_STRMID_VBI		0x48
#define	SUB_STRMID_AC3		0x80
#define	SUB_STRMID_SRSV_DTS	0x88
#define	SUB_STRMID_SRSV_SDDS	0x90
#define	SUB_STRMID_PCM		0xa0

#define	SUB_STRMID_PCI		0x00
#define	SUB_STRMID_DSI		0x01

//===========================================================================
//   STREAM MODE
//===========================================================================
#define	STREAM_MODE_VELS	0x01
#define	STREAM_MODE_PES		0x03
#define	STREAM_MODE_PS		0x07
#define	STREAM_MODE_DVD		0x0F
#define	STREAM_MODE_VCD		0x10


//===========================================================================
//   PLAY STOP STATE
//===========================================================================
#define	STOP_KEEP	0x01
#define	STOP_FLASH	0x02

//===========================================================================
//   UFLOW EVENT STATE
//===========================================================================
#define	EVENT_FATAL_UFLOW	0x01
#define	EVENT_NORMAL_UFLOW	0x02

//===========================================================================
//   AUDIO MUTE STATE
//===========================================================================
#define	AUDIO_MUTE_ON	0x00
#define	AUDIO_MUTE_OFF	0x01

//===========================================================================
//   AUDIO OUT MODE
//===========================================================================
#define	AUDIO_OUT_DIGITAL	0x00
#define	AUDIO_OUT_ANALOG	0x01

//===========================================================================
//   AUDIO COPY PROTECT
//===========================================================================
#define	AUDIO_COPY_ON	0x00
#define	AUDIO_COPY_OFF	0x01

//===========================================================================
//   SUBPIC MUTE STATE
//===========================================================================
#define	SUBPIC_MUTE_ON	0x00
#define	SUBPIC_MUTE_OFF	0x01

//===========================================================================
//   SUBPIC Hi-LITE STATE
//===========================================================================
#define	SUBPIC_HLITE_ON		0x00
#define	SUBPIC_HLITE_OFF	0x01

//===========================================================================
//   OSD MUTE STATE
//===========================================================================
#define	OSD_MUTE_ON	0x00
#define	OSD_MUTE_OFF	0x01

//===========================================================================
//   OSD BLINK STATE
//===========================================================================
#define	OSD_BLINK_ON	0x00
#define	OSD_BLINK_OFF	0x01

//===========================================================================
//   OSD REVERSE STATE
//===========================================================================
#define	OSD_REVERSE_ON	0x00
#define	OSD_REVERSE_OFF	0x01

//===========================================================================
//   VIDEO MUTE STATE
//===========================================================================
#define	VIDEO_MUTE_ON	0x00
#define	VIDEO_MUTE_OFF	0x01

//===========================================================================
//   LETTER BOX STATE
//===========================================================================
#define	LETTER_BOX_ON	0x00
#define	LETTER_BOX_OFF	0x01

//===========================================================================
//   PAN-SCAN STATE
//===========================================================================
#define	PANSCAN_ON	0x00
#define	PANSCAN_OFF	0x01

//===========================================================================
//   DECODE FALSE STATE
//===========================================================================
#define	VIDEO_NO_DATA	0x01

//===========================================================================
//   COLOR PALTTE SELECTION
//===========================================================================
#define	PALETTE_Y	0x01
#define	PALETTE_CB	0x02
#define	PALETTE_CR	0x03

//===========================================================================
//   ANALOG IMAGE COPY GURAD MODE 
//===========================================================================
#define	APS_TYPE_OFF	0x00
#define	APS_TYPE_1	0x01
#define	APS_TYPE_2	0x02
#define	APS_TYPE_3	0x03

//===========================================================================
//   FREEZE COUNTER STATE 
//===========================================================================
#define	FREEZE_ONCE	0x00
#define	FREEZE_PLURAL	0x01

//===========================================================================
//   I-PICTURE INTERRUPT SWITCH
//===========================================================================
#define	IPIC_SW_ON	0x00
#define	IPIC_SW_OFF	0x01

//===========================================================================
//   FLAG for CATCH_IPIC return OK or not
//===========================================================================
#define	IPIC_RET_ON	0x00
#define	IPIC_RET_OFF	0x01

//***************************************************************************
//                S T R U C T U R E   D E F I N I T I O N S
//***************************************************************************
//===========================================================================
//   AUDIO_MODE structure
//===========================================================================
/*
AUDIO_MODE_STRUC        STRUC
dwATYPE         dd      ?
dwAFS           dd      ?
dwAQUANT        dd      ?
dwACOPY         dd      ?
dwACHANNEL      dd      ?
AUDIO_MODE_STRUC        ENDS
*/
#define	AUDIO_TYPE_AC3		0x01
#define	AUDIO_TYPE_MPEG_F1	0x02
#define	AUDIO_TYPE_MPEG_F2	0x03
#define	AUDIO_TYPE_PCM		0x04

#define	AUDIO_FS_32		0x01
#define	AUDIO_FS_44		0x02
#define	AUDIO_FS_48		0x03
#define	AUDIO_FS_96		0x04

#define	AUDIO_QUANT_16		0x01
#define	AUDIO_QUANT_20		0x02
#define	AUDIO_QUANT_24		0x03

#define	AUDIO_CGMS_03	0x03	// No Copying is permitted.
#define	AUDIO_CGMS_02	0x02	// One generation of copies may be made
#define AUDIO_CGMS_00	0x00	// Copying is permitted without restriction

//===========================================================================
//   PLAY_MODE structure
//===========================================================================
/*
PLAY_MODE_STRUC        STRUC
dwPLAYTYPE      dd      ?
dwPLAYFlags     dd      ?
PLAY_MODE_STRUC        ENDS
*/
#define	PLAY_MODE_NORMAL	0x01
#define	PLAY_MODE_FAST		0x02
#define	PLAY_MODE_SLOW		0x03
#define	PLAY_MODE_FREEZE	0x04
#define	PLAY_MODE_STILL		0x05

#define	FAST_ONLYI		0x01
#define	FAST_IANDP		0x02

//===========================================================================
//   SUBP_HLITE structure
//===========================================================================
/*
SUBP_HLITE_STRUC        STRUC
dwHLITE_TYPE    dd      ?
dwHLITE_Y       dw      ?
dwHLITE_H       dw      ?
dwHLITE_X       dw      ?
dwHLITE_W       dw      ?
dwHLITE_COLOR   dd      ?
SUBP_HLITE_STRUC        ENDS
*/
#define	SUBPIC_HLITE_ON		0x00
#define	SUBPIC_HLITE_OFF	0x01

//===========================================================================
//   VBUFF_SIZE structure
//===========================================================================
/*
VBUFF_SIZE_STRUC        STRUC
dwVBUFF_WHOLE   dd      ?
dwVBUFF_STD     dd      ?
VBUFF_SIZE_STRUC        ENDS
*/
//===========================================================================
//   VDVD_VER structure
//===========================================================================
/*
VDVD_VER_STRUC        STRUC
bVER_MAJOR      db      ?
bVER_MINOR      db      ?
VDVD_VER_STRUC        ENDS
*/
//===========================================================================
//   DISPLAY_MODE structure
//===========================================================================
/*
DISPLAY_MODE_STRUC        STRUC
dwDISP_MODE      dd      ?
dwASPECT_RATIO   dd      ?
DISPLAY_MODE_STRUC        ENDS
*/
#define	DISPLAY_MODE_NTSC	0x01
#define	DISPLAY_MODE_PAL	0x02

#define	ASPECT_04_03		0x00
#define	ASPECT_16_09		0x01

//===========================================================================
//   OSD_CHAR structure
//===========================================================================
/*
OSD_CHAR_STRUC        STRUC
dwCHAR_CODE     dd      ?
dwOSD_LINE      dd      ?
dwOSD_COLUM     dd      ?
dwOSD_FLAGS     dd      ?
OSD_CHAR_STRUC        ENDS
*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\proto.h ===
//***************************************************************************
//	Header file
//
//	Add subpic function define in sample proto.h.
//
//	Copyright (C) 1997 Toshiba Corporation. All rights reserved.
//***************************************************************************

/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

   proto.h

Abstract:

   This is the WDM sample streaming class minidriver.  This module contains
   function prototypes for public functions

Author:

Environment:

   Kernel mode only


Revision History:

--*/

//
// This is the prototype for the Hardware Interrupt Handler.  This routine
// will be called whenever the minidriver receives an interrupt
//

extern "C" BOOLEAN STREAMAPI HwInterrupt ( IN PHW_DEVICE_EXTENSION pDeviceExtension );

//
// This is the prototype for the stream enumeration function.  This routine
// provides the stream class driver with the information on data stream types
// supported
//

VOID AdapterStreamInfo(PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This is the prototype for the stream open function
//

VOID AdapterOpenStream(PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This is the prototype for the stream close function
//

VOID AdapterCloseStream(PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This is the prototype for the AdapterReceivePacket routine.  This is the
// entry point for command packets that are sent to the adapter (not to a
// specific open stream)
//

extern "C" VOID STREAMAPI AdapterReceivePacket(IN PHW_STREAM_REQUEST_BLOCK Srb);

//
// This is the protoype for the cancel packet routine.  This routine enables
// the stream class driver to cancel an outstanding packet.
//

extern "C" VOID STREAMAPI AdapterCancelPacket(IN PHW_STREAM_REQUEST_BLOCK Srb);

//
// This is the packet timeout function.  The adapter may choose to ignore a
// packet timeout, or rest the adapter and cancel the requests, as required.
//

extern "C" VOID STREAMAPI AdapterTimeoutPacket(IN PHW_STREAM_REQUEST_BLOCK Srb);

//

extern "C" VOID STREAMAPI VideoReceiveDataPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
extern "C" VOID STREAMAPI VideoReceiveCtrlPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
extern "C" VOID STREAMAPI AudioReceiveDataPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
extern "C" VOID STREAMAPI AudioReceiveCtrlPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
extern "C" VOID STREAMAPI SubpicReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI SubpicReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI NtscReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI NtscReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI VpeReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI VpeReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI CCReceiveDataPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
extern "C" VOID STREAMAPI CCReceiveCtrlPacket( IN PHW_STREAM_REQUEST_BLOCK pSrb );
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\strmid.h ===
//***************************************************************************
//	Header file
//
//***************************************************************************

extern "C" {

#include "ksmedia.h"	// Definition ?
//#include "mpeg2ids.h"	// Definition ?
//#include "mpegprop.h"	// sample?

//#include "kspvpe.h"
//#include "ddvptype.h"
//#include "vptype.h"

//#include "ksguid.h"
//#include "mpegguid.h"

}


GUID g_S3Guid = {DDVPTYPE_E_HREFL_VREFL};
GUID g_ATIGuid = {0x1352A560L,0xDA61,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8};	// DDVPTYPE_BROOKTREE

// define this macro to facilitate giving the pixel format
#define MKFOURCC(ch0, ch1, ch2, ch3)    ((DWORD)(BYTE)(ch0) |           \
					((DWORD)(BYTE)(ch1) << 8) |     \
					((DWORD)(BYTE)(ch2) << 16) |    \
					((DWORD)(BYTE)(ch3) << 24 ))


/*****************************************************************************

                define the data formats used by the pins in this minidriver

*****************************************************************************/

/*

 Define the Mpeg2Video format that the minidriver supports

 */

KSDATAFORMAT hwfmtiMpeg2Vid
     = {

	sizeof (KSDATAFORMAT), // + sizeof (KS_MPEGVIDEOINFO2),
//     sizeof (KSDATAFORMAT),
	0,
	0,
	0,

	//
	// specify media type, subtype, and format from mpeg2 video
	//

    STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
//    STATIC_KSDATAFORMAT_TYPE_MPEG2_PES,
	STATIC_KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO,
//	STATIC_KSDATAFORMAT_FORMAT_MPEG2_VIDEO
	STATIC_KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO

	};

/*

 Define the supported AC3 Audio format

 */

KSDATAFORMAT_WAVEFORMATEX Mpeg2AudioFormat = {
   {
      sizeof (KSDATAFORMAT_WAVEFORMATEX),
      0,
      1,
      0,
      STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
      STATIC_KSDATAFORMAT_SUBTYPE_AC3_AUDIO,
      STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
   },
   {
      0,	// WAVE_FORMAT_UNKNOWN
      6,	// channels
      48000,  // sampling rate
      0,  // byte rate
      768,	// align
      0,	// resolution
      0	// extra
   }
};

/*

Define the supported LPCM audio format.

*/

KSDATAFORMAT_WAVEFORMATEX LPCMAudioFormat = {
   {
      sizeof (KSDATAFORMAT_WAVEFORMATEX),
      0,
      1,
      0,
      STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
      STATIC_KSDATAFORMAT_SUBTYPE_LPCM_AUDIO,
      STATIC_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
   },
   {
      WAVE_FORMAT_PCM,
      2,	// channels
      48000,  // sampling rate
      192000,  // byte rate
      4,	// alignment
      16,	// bit resolution
      0	// extra
   }
};


/*

 Define the supported Sub picture format

 */

KSDATAFORMAT hwfmtiMpeg2Subpic = {
	sizeof (KSDATAFORMAT),
	0,
	0,
	0,

	//
	// specify media type, subtype
	//

    STATIC_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK,
//	STATIC_KSDATAFORMAT_TYPE_MPEG2_PES,
	STATIC_KSDATAFORMAT_SUBTYPE_SUBPICTURE,
//	STATIC_KSDATAFORMAT_FORMAT_NONE
//	STATIC_KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO
//	STATIC_KSDATAFORMAT_FORMAT_MPEG2_VIDEO
	STATIC_GUID_NULL
};


KSDATAFORMAT hwfmtiVPEOut
    = {
	sizeof (KSDATAFORMAT),
    0,
	0,
	0,
    STATIC_KSDATAFORMAT_TYPE_VIDEO,
    STATIC_KSDATAFORMAT_SUBTYPE_VPVideo,
//  STATIC_KSDATAFORMAT_TYPE_VIDEO,
    STATIC_KSDATAFORMAT_SPECIFIER_NONE
//  STATIC_KSDATAFORMAT_TYPE_VIDEO
    };

KSDATAFORMAT hwfmtiCCOut
    = {
	sizeof(KSDATAFORMAT),
    0,
	200,
	0,
    STATIC_KSDATAFORMAT_TYPE_AUXLine21Data,
    STATIC_KSDATAFORMAT_SUBTYPE_Line21_GOPPacket,
//    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO
    STATIC_KSDATAFORMAT_SPECIFIER_NONE
    };


//
// this array indicates that stream 0 (as constructed in sscmd.c) supports
// the MPEG 2 video format.  If stream zero supported more formats, the 
// addresses of these formats would be additional elements in this array.
//

PKSDATAFORMAT Mpeg2VidInfo[] = {
    &hwfmtiMpeg2Vid  // pointer to the MPEG 2 video format block
};

//
// this structure indicates that the audio stream supports two
// formats: AC3 (Mpeg2) and Linear PCM, as constructed above.
//

PKSDATAFORMAT AudioFormatBlocks[] = {
	(PKSDATAFORMAT) &Mpeg2AudioFormat, // pointer to the Mpeg2 format
	(PKSDATAFORMAT) &LPCMAudioFormat   // pointer to the LPCM format
};


// Sub-pic

PKSDATAFORMAT Mpeg2SubpicInfo[] = {
	&hwfmtiMpeg2Subpic  // pointer to the MPEG 2 subpic format block
};


PKSDATAFORMAT VPEInfo[] = {
    &hwfmtiVPEOut
};

PKSDATAFORMAT CCInfo[] = {   // CC output formats array
    &hwfmtiCCOut
};


/*****************************************************************************

                define the Individual property items for the video property sets

*****************************************************************************/

// Video

static const KSPROPERTY_ITEM mpegVidPropItm[]={
	{KSPROPERTY_DVDSUBPIC_PALETTE,
	FALSE,
	sizeof(KSPROPERTY),
	sizeof(KSPROPERTY_SPPAL),
	(PFNKSHANDLER) FALSE,
	NULL,
	0,
	NULL,
	NULL,
	0
	}};

// Audio

static const KSPROPERTY_ITEM audPropItm[] = {

    {KSPROPERTY_AUDDECOUT_MODES,// available audio decoder output formats
        // property
        (PFNKSHANDLER) TRUE,    // get available modes is supported
        sizeof(KSPROPERTY),
        sizeof(ULONG),          // minimum size of data requested
        (PFNKSHANDLER) FALSE,   // set available modes is not supported
        NULL,
        0,
        NULL,
        NULL,
        0
    },

    {KSPROPERTY_AUDDECOUT_CUR_MODE, // current audio decoder output format
        // property
        (PFNKSHANDLER) TRUE,    // get current mode is supported
        sizeof(KSPROPERTY),
        sizeof(ULONG),          // minimum size of data requested
        (PFNKSHANDLER) TRUE,    // set current modes is supported
        NULL,
        0,
        NULL,
        NULL,
        0
    }
};

// Sub-pic

static const KSPROPERTY_ITEM spPropItm[]={

	{KSPROPERTY_DVDSUBPIC_PALETTE,
	FALSE,
	sizeof (KSPROPERTY),
	sizeof (KSPROPERTY_SPPAL),
	(PFNKSHANDLER) TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	},


	{KSPROPERTY_DVDSUBPIC_HLI,
	FALSE,
	sizeof (KSPROPERTY),
	sizeof (KSPROPERTY_SPHLI),
	(PFNKSHANDLER)TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	},


	{KSPROPERTY_DVDSUBPIC_COMPOSIT_ON,
	FALSE,
	sizeof (KSPROPERTY),
	sizeof (KSPROPERTY_COMPOSIT_ON),
	(PFNKSHANDLER)TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	}

	};

// NTSC

static const KSPROPERTY_ITEM MacroVisionPropItm[] = {
	{
		KSPROPERTY_COPY_MACROVISION,		// support for setting macrovision level
		(PFNKSHANDLER) FALSE, 		// get not supported
		sizeof (KSPROPERTY),
		sizeof (KS_COPY_MACROVISION),
		(PFNKSHANDLER) TRUE,		// set MACROVISION level supported
		NULL,
		0,
		NULL,
		NULL,
		0
	}
};

// VPE

static /* const */ KSPROPERTY_ITEM VideoPortPropItm[]={
	{
		KSPROPERTY_VPCONFIG_NUMCONNECTINFO,
		(PFNKSHANDLER) TRUE,
		sizeof(KSPROPERTY),
		sizeof(ULONG),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT,
		(PFNKSHANDLER) TRUE,
		sizeof(KSPROPERTY),
		sizeof(ULONG),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_GETCONNECTINFO,
		(PFNKSHANDLER) TRUE,
		sizeof (KSMULTIPLE_DATA_PROP),  // minimum property input size
		sizeof (ULONG),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_SETCONNECTINFO,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),  			// minimum property input size
		sizeof (ULONG),					// minimum buffer size
		(PFNKSHANDLER)TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_VPDATAINFO,
		(PFNKSHANDLER) TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AMVPDATAINFO),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_MAXPIXELRATE,
		(PFNKSHANDLER) TRUE,
		sizeof (KSVPSIZE_PROP),
		sizeof (KSVPMAXPIXELRATE),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_INFORMVPINPUT,
		(PFNKSHANDLER) TRUE,
		sizeof (PKSPROPERTY),
		sizeof (DDPIXELFORMAT),	// could be 0 too
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_DDRAWHANDLE,
		(PFNKSHANDLER)FALSE,
		sizeof (PKSPROPERTY),
		sizeof (ULONG),    // could be 0 too
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_VIDEOPORTID,
		(PFNKSHANDLER)FALSE,
		sizeof (PKSPROPERTY),
		sizeof (ULONG),    // could be 0 too
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE,
		(PFNKSHANDLER)FALSE,
		sizeof (PKSPROPERTY),
		sizeof (ULONG),    // could be 0 too
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_GETVIDEOFORMAT,
		(PFNKSHANDLER) TRUE,
		sizeof (KSMULTIPLE_DATA_PROP), 		// for _GET; KSPROPERTY for _SET
		sizeof (ULONG),				// could be 4 or more
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_SETVIDEOFORMAT,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),  			// minimum property input size
		sizeof (ULONG),					// minimum buffer size
		(PFNKSHANDLER)TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_INVERTPOLARITY,
		(PFNKSHANDLER)TRUE,
		sizeof (KSPROPERTY),
		0,
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY,
		(PFNKSHANDLER)TRUE,
		sizeof (KSPROPERTY),
		sizeof (BOOL),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_VPCONFIG_SCALEFACTOR,
		(PFNKSHANDLER)TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AMVPSIZE),
		(PFNKSHANDLER)FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	}
};

// CC

static /* const */ KSPROPERTY_ITEM CCPropItm[] = {
	{
		KSPROPERTY_CONNECTION_ALLOCATORFRAMING,	// support for setting CC buffer size
		(PFNKSHANDLER) TRUE, 					// get supported
		sizeof (KSPROPERTY),
		sizeof (KSALLOCATOR_FRAMING),
		(PFNKSHANDLER) FALSE,					// we only provide the allocator requirments
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_CONNECTION_STATE,			// support for setting CC buffer size
		(PFNKSHANDLER) TRUE, 					// get supported
		sizeof (KSPROPERTY),
		sizeof (KSSTATE),
		(PFNKSHANDLER) FALSE,					// we only provide the allocator requirments
		NULL,
		0,
		NULL,
		NULL,
		0
	}
};

// Copy Protect

static const KSPROPERTY_ITEM cppPropItm[]={

	{
		KSPROPERTY_DVDCOPY_CHLG_KEY,
		(PFNKSHANDLER) TRUE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_CHLGKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_DVD_KEY1,
		FALSE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_BUSKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_DEC_KEY2,
		(PFNKSHANDLER) TRUE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_BUSKEY ),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_TITLE_KEY,
		FALSE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_TITLEKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_DISC_KEY,
		FALSE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_DISCKEY ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},
	{
		KSPROPERTY_DVDCOPY_SET_COPY_STATE,
		(PFNKSHANDLER)TRUE,
		sizeof( KSPROPERTY ),
		sizeof( KS_DVDCOPY_SET_COPY_STATE ),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0
	},

//	{KSPROPERTY_DVDCOPY_REGION,  // DVD region request
//								 // the minidriver shall fit in exactly
//								 // one region bit, corresponding to the region
//   								 // that the decoder is currently in
//        (PFNKSHANDLER)TRUE,
//        sizeof(KSPROPERTY),
//        sizeof(KS_DVDCOPY_REGION),	 // minimum size of data requested
//        (PFNKSHANDLER)FALSE,     // set key is not valid
//        NULL,
//        0,
//        NULL,
//        NULL,
//        0
//    },
};

// Rate Change

static const KSPROPERTY_ITEM RateChangePropItm[]={

	{
		KS_AM_RATE_SimpleRateChange,
		(PFNKSHANDLER) TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_SimpleRateChange),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	},


	{
		KS_AM_RATE_ExactRateChange,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_ExactRateChange),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	},


	{
		KS_AM_RATE_MaxFullDataRate,
		(PFNKSHANDLER) TRUE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_MaxFullDataRate),
		(PFNKSHANDLER) FALSE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	},


	{
		KS_AM_RATE_Step,
		(PFNKSHANDLER) FALSE,
		sizeof (KSPROPERTY),
		sizeof (KS_AM_Step),
		(PFNKSHANDLER) TRUE,
		NULL,
		0,
		NULL,
		NULL,
		0,
	}
};

/*****************************************************************************

				define the array of video property sets supported

*****************************************************************************/

//GUID Mpeg2Vid = {STATIC_KSPROPSETID_Mpeg2Vid};

// original is const
// modify for except warning
static /* const*/ KSPROPERTY_SET mpegVidPropSet[] = {
	{
		&KSPROPSETID_Mpeg2Vid,
		SIZEOF_ARRAY(mpegVidPropItm),
		(PKSPROPERTY_ITEM)mpegVidPropItm
	},
	{
		&KSPROPSETID_CopyProt,
		SIZEOF_ARRAY(cppPropItm),
		(PKSPROPERTY_ITEM)cppPropItm
	},
	{
		&KSPROPSETID_TSRateChange,
		SIZEOF_ARRAY(RateChangePropItm),
		(PKSPROPERTY_ITEM)RateChangePropItm
	},

//    {
//    	&KSPROPSETID_CopyProt,
//    	SIZEOF_ARRAY(MacroVisionPropItm),
//    	(PKSPROPERTY_ITEM) MacroVisionPropItm
//    }
};

static /* const*/ KSPROPERTY_SET mpegAudioPropSet[] = {
	{
		&KSPROPSETID_AudioDecoderOut,
		SIZEOF_ARRAY(audPropItm),
		(PKSPROPERTY_ITEM) audPropItm
	},
	{
		&KSPROPSETID_CopyProt,
		SIZEOF_ARRAY(cppPropItm),
		(PKSPROPERTY_ITEM)cppPropItm
	},
	{
		&KSPROPSETID_TSRateChange,
		SIZEOF_ARRAY(RateChangePropItm),
		(PKSPROPERTY_ITEM)RateChangePropItm
	}
};

static KSPROPERTY_SET SPPropSet[] = {
	{
		&KSPROPSETID_DvdSubPic,
		SIZEOF_ARRAY(spPropItm),
		(PKSPROPERTY_ITEM)spPropItm
	},
	{
		&KSPROPSETID_CopyProt,
		SIZEOF_ARRAY(cppPropItm),
		(PKSPROPERTY_ITEM)cppPropItm
	},
	{
		&KSPROPSETID_TSRateChange,
		SIZEOF_ARRAY(RateChangePropItm),
		(PKSPROPERTY_ITEM)RateChangePropItm
	}
};

GUID vpePropSetid = {STATIC_KSPROPSETID_VPConfig};

static /* const */ KSPROPERTY_SET VideoPortPropSet[] = {
	&vpePropSetid,
	SIZEOF_ARRAY(VideoPortPropItm),
	(PKSPROPERTY_ITEM)VideoPortPropItm
};

static /* const */ KSPROPERTY_SET CCPropSet[] = {
	&KSPROPSETID_Connection,
	SIZEOF_ARRAY(CCPropItm),
	(PKSPROPERTY_ITEM) CCPropItm
};

/*****************************************************************************

				other

*****************************************************************************/

static const KSTOPOLOGY_CONNECTION Connections[] = {
/*  FromNode   FromPin           ToNode   ToPin          */
   {(ULONG)-1,        strmVideo,        (ULONG)-1,      strmCCOut},
   {(ULONG)-1,        strmVideo,        (ULONG)-1,      strmYUVVideo},
   {(ULONG)-1,        strmSubpicture,   (ULONG)-1,      strmYUVVideo}
};

static const KSTOPOLOGY Topology = {
	1,
	(GUID *) & KSCATEGORY_DATADECOMPRESSOR,
	0,
	NULL,
   SIZEOF_ARRAY (Connections),
   Connections
};

KSEVENT_ITEM VPEventItm[] =
{
	{
		KSEVENT_VPNOTIFY_FORMATCHANGE,
		0,
		0,
		NULL,
		NULL,
		NULL
	}
};

GUID MY_KSEVENTSETID_VPNOTIFY = {STATIC_KSEVENTSETID_VPNotify};

KSEVENT_SET VPEventSet[] =
{
	{
		&MY_KSEVENTSETID_VPNOTIFY,
		SIZEOF_ARRAY(VPEventItm),
		VPEventItm,
	}
};

KSEVENT_ITEM ClockEventItm[] =
{
	{
        KSEVENT_CLOCK_POSITION_MARK,		// position mark event supported
		sizeof (KSEVENT_TIME_MARK),			// requires this data as input
		sizeof (KSEVENT_TIME_MARK),			// allocate space to copy the data
		NULL,
		NULL,
		NULL
	},
	{
		KSEVENT_CLOCK_INTERVAL_MARK,		// interval mark event supported
		sizeof (KSEVENT_TIME_INTERVAL),		// requires interval data as input
		sizeof (MYTIME),					// we use an additional workspace of
											// size longlong for processing
											// this event
		NULL,
		NULL,
		NULL
	}
};

KSEVENT_SET ClockEventSet[] =
{
	{
		&KSEVENTSETID_Clock,
		SIZEOF_ARRAY(ClockEventItm),
		ClockEventItm,
	}
};


// device property

typedef struct _DevPropData {
	DWORD	data;
} DEVPROPDATA, *PDEVPROPDATA;

static const KSPROPERTY_ITEM devicePropItm[]={
	{0,
	(PFNKSHANDLER)TRUE,
	sizeof(KSPROPERTY),
	sizeof(DEVPROPDATA),
	(PFNKSHANDLER)TRUE,
	NULL,
	0,
	NULL,
	NULL,
	0
	}};

static /* const*/ KSPROPERTY_SET devicePropSet[] = {
	&GUID_NULL,
	SIZEOF_ARRAY(devicePropItm),
	(PKSPROPERTY_ITEM)devicePropItm
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\vdec.h ===
#ifndef __VDEC_H__
#define __VDEC_H__

class VDecoder
{
private:
	PUCHAR ioBase;
//	BOOL UF_FLAG;		// for debug 

public:
	void init( const PDEVICE_INIT_INFO pDevInit );
	void VIDEO_RESET( void );
	void VIDEO_MODE_DVD( void );
	void VDVD_VIDEO_MODE_PS( void );
	void VIDEO_PRSO_PS1( void );
	void VIDEO_PRSO_NON( void );
	void VIDEO_OUT_NTSC( void );
	void VIDEO_ALL_INT_OFF( void );
	void VIDEO_SCR_INT_ON( void );
	void VIDEO_SCR_INT_OFF( void );
	void VIDEO_VERR_INT_ON( void );
	void VIDEO_VERR_INT_OFF( void );
	void VIDEO_UFLOW_INT_ON( void );
	void VIDEO_UFLOW_INT_OFF( void );
	void VIDEO_DECODE_INT_ON( void );
	void VIDEO_DECODE_INT_OFF( void );
	void VIDEO_USER_INT_ON( void );
	void VIDEO_USER_INT_OFF( void );
//--- 97.09.23 K.Chujo
	void VIDEO_UDSC_INT_ON( void );
	void VIDEO_UDSC_INT_OFF( void );
//--- End.
	void VIDEO_ALL_IFLAG_CLEAR( void );
	void VIDEO_SET_STCA( ULONG stca );
	void VIDEO_SET_STCS( ULONG stcs );
	ULONG VIDEO_GET_STCA( void );
	ULONG VIDEO_GET_STCS( void );
	void VIDEO_SYSTEM_START( void );
	void VIDEO_SYSTEM_STOP( void );
	ULONG VIDEO_GET_STD_CODE( void );
	BOOL VIDEO_GET_DECODE_STATE( void );
	void VIDEO_DECODE_START( void );
	NTSTATUS VIDEO_DECODE_STOP( void );
	void VIDEO_STD_CLEAR( void );
	void VIDEO_USER_CLEAR( void );
	void VIDEO_PVSIN_ON( void );
	void VIDEO_PVSIN_OFF( void );
	void VIDEO_SET_DTS( ULONG dts );
	ULONG VIDEO_GET_DTS( void );
	void VIDEO_SET_PTS( ULONG pts );
	ULONG VIDEO_GET_PTS( void );
	ULONG VIDEO_GET_SCR( void );
	ULONG VIDEO_GET_STCC( void );
	void VIDEO_SEEMLESS_ON( void );
	void VIDEO_SEEMLESS_OFF( void );
	void VIDEO_VIDEOCD_OFF( void );
	NTSTATUS VIDEO_GET_UDATA( PUCHAR pudata );
	void VIDEO_PLAY_NORMAL( void );
	void VIDEO_PLAY_FAST( ULONG flag );
	void VIDEO_PLAY_SLOW( ULONG speed );
	void VIDEO_PLAY_FREEZE( void );
	void VIDEO_PLAY_STILL( void );
	void VIDEO_LBOX_ON( void );
	void VIDEO_LBOX_OFF( void );
	void VIDEO_PANSCAN_ON( void );
	void VIDEO_PANSCAN_OFF( void );
	void VIDEO_UFLOW_CURB_ON( void );
	void VIDEO_UFLOW_CURB_OFF( void );
	ULONG VIDEO_USER_DWORD( ULONG offset );
	void VIDEO_UDAT_CLEAR( void );
	ULONG VIDEO_GET_TRICK_MODE( void );
	void VIDEO_BUG_PRE_SEARCH_01( void );
	void VIDEO_BUG_PRE_SEARCH_02( void );
	void VIDEO_BUG_PRE_SEARCH_03( void );
	void VIDEO_BUG_PRE_SEARCH_04( void );
	void VIDEO_BUG_PRE_SEARCH_05( void );
	void VIDEO_BUG_SLIDE_01( void );
//	void VIDEO_DEBUG_SET_UF( void ); // for debug
//	void VIDEO_DEBUG_CLR_UF( void ); // for debug
};

#endif	// __VDEC_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\dvd\mini\toshiba\vdec.cpp ===
#include "common.h"
#include "regs.h"
#include "vdec.h"

void VDecoder::init( const PDEVICE_INIT_INFO pDevInit )
{
	ioBase = pDevInit->ioBase;
}

void VDecoder::VIDEO_RESET( void )
{
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_RESET );
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
		// wait !!
	}
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x10 ) != 0x10 )
			break;
		// wait !!
	}

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x05 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x13 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x14 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x05 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x13 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x34 );

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_RESET );
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
		// wait !!
	}
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x10 ) != 0x10 )
			break;
		// wait !!
	}
}

void VDecoder::VIDEO_MODE_DVD( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DEC_MODE );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xe0 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_INT_ID );

	VIDEO_PRSO_PS1();
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xbf );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_USER_ID );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DMODE );

	WRITE_PORT_UCHAR( ioBase + TC812_DSPL, 0x1f );

	VIDEO_VIDEOCD_OFF();
}

void VDecoder::VDVD_VIDEO_MODE_PS( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xbd );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PRSO_ID );
}

void VDecoder::VIDEO_PRSO_PS1( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xbd );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PRSO_ID );
}

void VDecoder::VIDEO_PRSO_NON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PRSO_ID );
}

void VDecoder::VIDEO_OUT_NTSC( void )
{
	UCHAR val;

	// set video frame size mode to NTSC
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VFMODE );

	// set STD buffer size
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x40 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x11 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STD_SIZE );

	// set USER1/2 area size
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xf7 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_USER_SIZE );

	// set ext. memory mapping
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_MEM_MAP );
	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
		if ( ( val & 0x10 ) != 0x10 )
			break;
		// wait !!! & timeout !!!
	}

	// set underflow/overflow size
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_UOF_SIZE );

	// default RHOS
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_HOFFSET );

	// default RVOS
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VOFFSET );
}

void VDecoder::VIDEO_ALL_INT_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DEM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_WEM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_ERM, 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_UOM, 0xff );
}

void VDecoder::VIDEO_SCR_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xfd;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_SCR_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x02;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_VERR_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xef;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	WRITE_PORT_UCHAR( ioBase + TC812_ERM, 0x00 );
}

void VDecoder::VIDEO_VERR_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	WRITE_PORT_UCHAR( ioBase + TC812_ERM, 0x7f );
}

void VDecoder::VIDEO_UFLOW_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_UOM );
	val &= 0xfe;
	WRITE_PORT_UCHAR( ioBase + TC812_UOM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xbf;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_UFLOW_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x40;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_UOM );
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + TC812_UOM, val );
}

void VDecoder::VIDEO_DECODE_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_DEM );
	val &= 0xfb;
	WRITE_PORT_UCHAR( ioBase + TC812_DEM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xfb;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_DECODE_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_DEM );
	val |= 0x04;
	WRITE_PORT_UCHAR( ioBase + TC812_DEM, val );
}

void VDecoder::VIDEO_USER_INT_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_WEM );
	val &= 0xfe;
	WRITE_PORT_UCHAR( ioBase + TC812_WEM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xf7;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_USER_INT_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x08;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );

	val = READ_PORT_UCHAR( ioBase + TC812_WEM );
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + TC812_WEM, val );
}

//--- 97.09.23 K.Chujo
void VDecoder::VIDEO_UDSC_INT_ON( void )
{
	// user data start code interrupt on
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val &= 0xFE;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}

void VDecoder::VIDEO_UDSC_INT_OFF( void )
{
	// user data start code interrput off
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_IRM );
	val |= 0x01;
	WRITE_PORT_UCHAR( ioBase + TC812_IRM, val );
}
//--- End.

void VDecoder::VIDEO_ALL_IFLAG_CLEAR( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_UOF );
	val = READ_PORT_UCHAR( ioBase + TC812_ERF );
	val = READ_PORT_UCHAR( ioBase + TC812_WEF );
	val = READ_PORT_UCHAR( ioBase + TC812_DEF );
	val = READ_PORT_UCHAR( ioBase + TC812_IRF );
}

void VDecoder::VIDEO_SET_STCA( ULONG stca )
{
	UCHAR val;

	val = (UCHAR)( stca & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, val );
	val = (UCHAR)( ( stca >> 8 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, val );
	val = (UCHAR)( ( stca >> 16 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, val );
	val = (UCHAR)( ( stca >> 24 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA6, val );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA7, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCA );
}

void VDecoder::VIDEO_SET_STCS( ULONG stcs )
{
	UCHAR val;

	val = (UCHAR)( stcs & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, val );
	val = (UCHAR)( ( stcs >> 8 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, val );
	val = (UCHAR)( ( stcs >> 16 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, val );
	val = (UCHAR)( ( stcs >> 24 ) & 0xff );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA6, val );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA7, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCS );
}

ULONG VDecoder::VIDEO_GET_STCA( void )
{
	ULONG rval = 0, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STCA );

	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
	val <<= 24;
	rval += val;

	return rval;
}

ULONG VDecoder::VIDEO_GET_STCS( void )
{
	ULONG rval = 0, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STCS );

	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
	val <<= 24;
	rval += val;

	return rval;
}

void VDecoder::VIDEO_SYSTEM_START( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x07 );	// video buffer flow control
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SYS );
}

void VDecoder::VIDEO_SYSTEM_STOP( void )
{
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_SYS );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val &= 0xfe;
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, val );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SYS );
}

ULONG VDecoder::VIDEO_GET_STD_CODE( void )
{
	ULONG rval, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STD_CODE );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val <<= 16;
	rval += val;

	rval <<= 2;
	return rval;
}

BOOL VDecoder::VIDEO_GET_DECODE_STATE( void )
{
	UCHAR val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_DECODE );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	if ( ( val & 0x01 ) == 0x01 )
		return TRUE;	// Decode
	else
		return FALSE;	// Non Decode
}

void VDecoder::VIDEO_DECODE_START( void )
{
	UCHAR val;

	for ( ; ; )
	{
		val = READ_PORT_UCHAR( ioBase + TC812_STT2 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
	}
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x05 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DECODE );
}

NTSTATUS VDecoder::VIDEO_DECODE_STOP( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_STT2 );
	if ( ( val & 0x01 ) == 0x01 )
		return (NTSTATUS)-1;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_DECODE );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val &= 0x0e;
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, val );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DECODE );

	return 0;
}

void VDecoder::VIDEO_STD_CLEAR( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_STD_CLEAR );
}

void VDecoder::VIDEO_USER_CLEAR( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_USER1_CLEAR );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_USER2_CLEAR );
}

void VDecoder::VIDEO_PVSIN_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PVSIN );
}

void VDecoder::VIDEO_PVSIN_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PVSIN );
}

void VDecoder::VIDEO_SET_DTS( ULONG dts )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, (UCHAR)( dts & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, (UCHAR)( ( dts >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, (UCHAR)( ( dts >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, (UCHAR)( ( dts >> 24 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, 0 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DTS );
}

ULONG VDecoder::VIDEO_GET_DTS( void )
{
	ULONG rval, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_DTS );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 24;
	rval += val;

	return rval;
}

void VDecoder::VIDEO_SET_PTS( ULONG pts )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, (UCHAR)( pts & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, (UCHAR)( ( pts >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, (UCHAR)( ( pts >> 16 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, (UCHAR)( ( pts >> 24 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA5, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_PTS );
}

ULONG VDecoder::VIDEO_GET_PTS( void )
{
	ULONG rval, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_PTS );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 24;
	rval += val;

	return rval;
}

ULONG VDecoder::VIDEO_GET_SCR( void )
{
	ULONG rval, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_SCR );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
	val <<= 24;
	rval += val;
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCR_END );

	return rval;
}

ULONG VDecoder::VIDEO_GET_STCC( void )
{
	ULONG rval, val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_STCC );
	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	val <<= 8;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA5 );
	val <<= 16;
	rval += val;
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA6 );
	val <<= 24;
	rval += val;
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_STCR_END );

	return rval;
}

void VDecoder::VIDEO_SEEMLESS_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SEEMLES );
}

void VDecoder::VIDEO_SEEMLESS_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_SEEMLES );
}

void VDecoder::VIDEO_VIDEOCD_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VCD );
}

NTSTATUS VDecoder::VIDEO_GET_UDATA( PUCHAR pudata )
{
	if ( ( READ_PORT_UCHAR( ioBase + TC812_STT1 ) & 0x80 ) != 0x80 )
		return (NTSTATUS)-1;	// no user data

	*pudata = READ_PORT_UCHAR( ioBase + TC812_UDAT );
	return 0;
}

void VDecoder::VIDEO_PLAY_NORMAL( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_NORMAL );
}

void VDecoder::VIDEO_PLAY_FAST( ULONG flag )
{
	if ( flag == FAST_ONLYI )
		WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	else if ( flag == FAST_IANDP )
		WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x07 );
	else
		return;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_FAST );
}

void VDecoder::VIDEO_PLAY_SLOW( ULONG speed )
{
	if ( speed == 0 || speed > 31 )
		return;

	speed <<= 2;
	speed |= 3;
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, (UCHAR)speed );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_SLOW );
}

void VDecoder::VIDEO_PLAY_FREEZE( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_FREEZE );
}

void VDecoder::VIDEO_PLAY_STILL( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_TRICK_STILL );
}

void VDecoder::VIDEO_LBOX_ON( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_DSPL );
	val &= 0xf7;
	val |= 0x10;
	WRITE_PORT_UCHAR( ioBase + TC812_DSPL, val );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x3e );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VOFFSET );
}

void VDecoder::VIDEO_LBOX_OFF( void )
{
	UCHAR val;

	val = READ_PORT_UCHAR( ioBase + TC812_DSPL );
	val |= 0x18;
	WRITE_PORT_UCHAR( ioBase + TC812_DSPL, val );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x04 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_VOFFSET );
}

void VDecoder::VIDEO_PANSCAN_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DMODE );
}

void VDecoder::VIDEO_PANSCAN_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x1b );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_DMODE );
}

void VDecoder::VIDEO_UFLOW_CURB_ON( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_UF_CURB );
}

void VDecoder::VIDEO_UFLOW_CURB_OFF( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_UF_CURB );
}

ULONG VDecoder::VIDEO_USER_DWORD( ULONG offset )
{
	ULONG rval, val;

	for ( ; ; )
	{
		val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_STT2 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
	}

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, (UCHAR)( offset & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA3, (UCHAR)( ( offset >> 8 ) & 0xff ) );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA4, (UCHAR)( ( offset >> 16 ) & 0x07 ) );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_SET_WRITE_MEM );

	for ( ; ; )
	{
		val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_STT2 );
		if ( ( val & 0x01 ) != 0x01 )
			break;
	}

	rval = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
	rval <<= 8;
	rval += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA3 );
	rval <<= 8;
	rval += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
	rval <<= 8;
	rval += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	rval <<= 8;

	return rval;
}

void VDecoder::VIDEO_UDAT_CLEAR( void )
{
	UCHAR val;

	for ( ; ; )
	{
	val = READ_PORT_UCHAR( ioBase + TC812_STT1 );
	if ( ( val & 0x08 ) != 0x08 )
		break;
	val = READ_PORT_UCHAR( ioBase + TC812_UDAT );
	}
}

ULONG VDecoder::VIDEO_GET_TRICK_MODE( void )
{
	ULONG val;

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, V_GET_TRICK );
	val = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
	val &= 0x07;

	return val;
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_01( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x25 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x11 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x10 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x02 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x5d );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_02( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x02 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x1b );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );

	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x42 );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_03( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xc1 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xb8 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_04( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x1b );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );

	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x03 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x8f );
}

void VDecoder::VIDEO_BUG_PRE_SEARCH_05( void )
{
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x5d );
}


// NEEDED TO BE DEBUGGED !!!
void VDecoder::VIDEO_BUG_SLIDE_01( void )
{
	UCHAR val;
	ULONG ul;

	// check whether vdec hanged-up
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x7d );
	val = READ_PORT_UCHAR( ioBase + TC812_DATA2 );
//	if( UF_FLAG == TRUE ) {
//		DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER STATUS = %x\r\n", val ));
//	}
	if ( ( val & 0x30 ) == 0x00 )
	{
		WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x72 );
		ul = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
		ul <<= 8;
		ul += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
//		if( UF_FLAG == TRUE ) {
//			DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER PC(1) = %x\r\n", ul ));
//		}
		if ( ul == 0x1a5 )
		{
			WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0xb8 );
			WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
			WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );
			DebugPrint(( DebugLevelTrace, "TOSDVD:  <<RE-ORDER(1)>>\r\n" ));
			// uf
		} else {
			WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0xb0 );
			ul = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA4 );
			ul <<= 8;
			val = READ_PORT_UCHAR( ioBase + TC812_DATA3 );
			ul += (ULONG)val;
			ul <<= 8;
			val = READ_PORT_UCHAR( ioBase + TC812_DATA2 );
			ul += (ULONG)val;
			ul <<= 8;
			val = READ_PORT_UCHAR( ioBase + TC812_DATA1 );
			ul += (ULONG)val;

//			if( UF_FLAG == TRUE ) {
//				DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER DTS = %x\r\n", ul ));
//			}
			if ( ( VIDEO_GET_STCA() - 2 ) > ul )
			{
				ul = VIDEO_GET_STD_CODE();
//				if( UF_FLAG == TRUE ) {
//					DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER STD = %x\r\n", ul ));
//				}
				if ( ul >= 0x200 )
				{
					WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x72 );
					ul = (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA2 );
					ul <<= 8;
					ul += (ULONG)READ_PORT_UCHAR( ioBase + TC812_DATA1 );
//					if( UF_FLAG == TRUE ) {
//						DebugPrint(( DebugLevelTrace, "TOSDVD:  DECODER PC(2) = %x\r\n", ul ));
//					}
					if ( ul >= 0x404 && ul <= 0x409 )
					{
						WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x18 );
						WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x04 );
						WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x52 );
						DebugPrint(( DebugLevelTrace, "TOSDVD:  <<RE-ORDER(2)>>\r\n" ));
						// uf
					}
				}
			}
		}
	}
	WRITE_PORT_UCHAR( ioBase + TC812_DATA1, 0x00 );
	WRITE_PORT_UCHAR( ioBase + TC812_DATA2, 0x01 );
	WRITE_PORT_UCHAR( ioBase + TC812_CMDR1, 0x5d );
}
//
//void VDecoder::VIDEO_DEBUG_SET_UF( void )
//{
//	UF_FLAG = TRUE;
//}
//
//void VDecoder::VIDEO_DEBUG_CLR_UF( void )
//{
//	UF_FLAG = FALSE;
//}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\input\client\hclient\buffers.h ===
/*++

Copyright (c) Microsoft 1998, All Rights Reserved

Module Name:

    buffers.h

Abstract:

    This module declares the functions that and structures that are visible
    to other modules.

Environment:

    User mode

Revision History:

    May-98 : Created 

--*/

#ifndef _BUFFERS_H_
#define _BUFFERS_H_

typedef struct _REPORT_BUFFER
{
    PUCHAR      pBuffer;
    INT         iBufferSize;
    UCHAR       ucReportID;

} REPORT_BUFFER, *PREPORT_BUFFER;
    
typedef struct _BUFFER_DISPALY 
{
    HWND                hBufferComboBox;
    HWND                hBufferEditBox;
    INT                 iBufferSize;
    INT                 iCurrSelectionIndex;
    INT                 nReportBuffers;
    PREPORT_BUFFER      ReportBuffers;
    HIDP_REPORT_TYPE    ReportType;
} BUFFER_DISPLAY, *PBUFFER_DISPLAY;

BOOLEAN
BufferDisplay_Init(
    IN  HWND                hCB,
    IN  HWND                hEB,
    IN  INT                 nBuffers,
    IN  INT                 iBufferSize,
    IN  HIDP_REPORT_TYPE    RType,
    OUT PBUFFER_DISPLAY     *ppBufferDisplay
);

VOID
BufferDisplay_Destroy(
    IN  PBUFFER_DISPLAY     pBufferDisplay
);

VOID
BufferDisplay_ChangeSelection(
    IN  PBUFFER_DISPLAY     pBufferDisplay
);

BOOLEAN
BufferDisplay_UpdateBuffer(
    IN  PBUFFER_DISPLAY     pBufferDisplay,
    IN  PCHAR               pNewBuffer
);

INT
BufferDisplay_GetBufferSize(
    IN  PBUFFER_DISPLAY      pBufferDisplay
);

VOID
BufferDisplay_CopyCurrentBuffer(
    IN  PBUFFER_DISPLAY     pBufferDisplay,
    OUT PCHAR               pCopyBuffer
);

INT
BufferDisplay_GetCurrentBufferNumber(
    IN  PBUFFER_DISPLAY      pBufferDisplay
);

UCHAR
BufferDisplay_GetCurrentReportID(
    IN  PBUFFER_DISPLAY      pBufferDisplay
);

VOID
BufferDisplay_OutputBuffer(
    HWND            hEditBox,
    PREPORT_BUFFER  pReportBuffer
);

VOID
BufferDisplay_ClearBuffer(
    IN  PBUFFER_DISPLAY pBufferDisplay
);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\input\client\hclient\buffers.c ===
/*++

Copyright (c) Microsoft 1998, All Rights Reserved

Module Name:

    buffers.c

Abstract:

    This module contains the code for handling the display of HID report
    buffers for the extended calls dialog box.  

Environment:

    User mode

Revision History:

    May-98 : Created 

--*/

#include <windows.h>
#include <malloc.h>
#include <setupapi.h>
#include "hidsdi.h"
#include "hidpi.h"
#include "buffers.h"
#include "strings.h"

#define CURRENT_REPORT(pDisp)   (pDisp -> ReportBuffers + pDisp -> iCurrSelectionIndex)

BOOLEAN
BufferDisplay_Init(
    IN  HWND                hCB,
    IN  HWND                hEB,
    IN  INT                 nBuffers,
    IN  INT                 iBufferSize,
    IN  HIDP_REPORT_TYPE    RType,
    OUT PBUFFER_DISPLAY     *ppBufferDisplay
)
/*++
Routine Description:
    This routine initializes the buffer display mechanism for a given report type

    The display mechanism maintains a list of list of nBuffers, where is each
    is buffer is of iBufferSize and hCB and hEB are handles to the combo box and
    edit box for displaying the buffer. 

    The variable ppBufferDisplay is allocated block which is passed into other
    buffer routines and contains information about the buffer for the other 
    routines.

    This function will return FALSE if there was a problem allocating memory
--*/
{
    PBUFFER_DISPLAY pNewDisplay;
    CHAR            *pszBufferHeader;
    CHAR            szBufferName[24];
    INT             iIndex;
    INT             iCBIndex;

    pNewDisplay = (PBUFFER_DISPLAY) malloc(sizeof(BUFFER_DISPLAY));

    *ppBufferDisplay = NULL;

    if (NULL == pNewDisplay)
    {
        return (FALSE);
    }

    pNewDisplay -> ReportBuffers = (PREPORT_BUFFER) malloc(sizeof(REPORT_BUFFER) * nBuffers);

    if (NULL == pNewDisplay -> ReportBuffers) 
    {
        free(pNewDisplay);

        return (FALSE);
    }
    
    memset(pNewDisplay -> ReportBuffers, 0x00, sizeof(REPORT_BUFFER) * nBuffers);

    pNewDisplay -> hBufferComboBox = hCB;
    pNewDisplay -> hBufferEditBox = hEB;
    pNewDisplay -> nReportBuffers = nBuffers;
    pNewDisplay -> iBufferSize = iBufferSize;
    pNewDisplay -> ReportType = RType;

    switch (pNewDisplay -> ReportType) 
    {
        case HidP_Input:
            pszBufferHeader = "Input";
            break;

        case HidP_Output:
            pszBufferHeader = "Output";
            break;

        case HidP_Feature:
            pszBufferHeader = "Feature";
            break;

        default:
            pszBufferHeader = "Other";
            break;
    }

    for (iIndex = 0; iIndex < pNewDisplay -> nReportBuffers; iIndex++) 
    {
        wsprintf(szBufferName, "%s Buffer #%d", pszBufferHeader, iIndex);

        iCBIndex = (INT) SendMessage(pNewDisplay -> hBufferComboBox,
                                     CB_ADDSTRING,
                                     0, 
                                     (LPARAM) szBufferName);

        if (CB_ERR == iCBIndex || CB_ERRSPACE == iCBIndex) 
        {
            BufferDisplay_Destroy(pNewDisplay);
            return (FALSE);
        }

        iCBIndex = (INT) SendMessage(pNewDisplay -> hBufferComboBox,
                                     CB_SETITEMDATA,
                                     iCBIndex,
                                     iIndex);

        if (CB_ERR == iCBIndex || CB_ERRSPACE == iCBIndex)  
        {
            BufferDisplay_Destroy(pNewDisplay);
            return (FALSE);
        }
    }

    SendMessage(pNewDisplay -> hBufferComboBox, CB_SETCURSEL, 0, 0);

    BufferDisplay_ChangeSelection(pNewDisplay);

    *ppBufferDisplay = pNewDisplay;
    return (TRUE);
}

VOID
BufferDisplay_Destroy(
    IN  PBUFFER_DISPLAY     pBufferDisplay
)
/*++
Routine Description:
    This routine cleans up the buffer display variable that was allocated by
    the initialize routine
--*/
{
    INT     iIndex;

    for (iIndex = 0; iIndex < pBufferDisplay -> nReportBuffers; iIndex++) 
    {
        if (NULL != pBufferDisplay -> ReportBuffers[iIndex].pBuffer) 
        {
            free(pBufferDisplay -> ReportBuffers[iIndex].pBuffer);
        }
    }

    free(pBufferDisplay -> ReportBuffers);
    free(pBufferDisplay);
    return;
}

VOID
BufferDisplay_ChangeSelection(
    IN  PBUFFER_DISPLAY     pBufferDisplay
)
/*++
Routine Description:
    This routine has the selection of a buffer to display via the combo box
--*/
{
    INT     iNewIndex;

    iNewIndex = (INT) SendMessage(pBufferDisplay -> hBufferComboBox,
                                  CB_GETCURSEL, 
                                  0,
                                  0);

    iNewIndex = (INT) SendMessage(pBufferDisplay -> hBufferComboBox,
                                  CB_GETITEMDATA,
                                  iNewIndex,
                                  0);

    pBufferDisplay -> iCurrSelectionIndex = iNewIndex;

    BufferDisplay_OutputBuffer(pBufferDisplay -> hBufferEditBox,
                               &(pBufferDisplay -> ReportBuffers[iNewIndex]));

    return;
}

VOID
BufferDisplay_OutputBuffer(
    HWND            hEditBox,
    PREPORT_BUFFER  pReportBuffer
)
/*++
Routine Description:
    This routine outputs to hEditBox a byte representation of pReportBuffer
--*/
{
    PCHAR           BufferString;

    if (0 == pReportBuffer -> iBufferSize || NULL == pReportBuffer -> pBuffer) 
    {
        SetWindowText(hEditBox, "");
    }
    else 
    {
        /*
        // Create a buffer string the size of the buffer and display 
        //   as bytes
        */
        
        Strings_CreateDataBufferString(pReportBuffer -> pBuffer,
                                       pReportBuffer -> iBufferSize,
                                       pReportBuffer -> iBufferSize,
                                       1,
                                       &BufferString);

        if (NULL == BufferString) 
        {
            SetWindowText(hEditBox, "");
        }
        else
        {
            SetWindowText(hEditBox, BufferString);
            free(BufferString);
        }
    }
    return;
}

BOOLEAN
BufferDisplay_UpdateBuffer(
    IN  PBUFFER_DISPLAY     pBufferDisplay,
    IN  PCHAR               pNewBuffer
)
/*++
Routine Description:
    This routine changes the data of the currently active report buffer for the
    given buffer display structure.  

    It returns FALSE if it needed to allocate a new buffer and the memory allocation
    failed.
--*/
{
    PREPORT_BUFFER          pCurrentReport;

    pCurrentReport = CURRENT_REPORT(pBufferDisplay);
    
    if (NULL == pCurrentReport -> pBuffer) 
    {
        pCurrentReport -> pBuffer = malloc(pBufferDisplay -> iBufferSize);
        if ((NULL == pCurrentReport) || (NULL == pCurrentReport -> pBuffer))
        {
            return (FALSE);
        }

        pCurrentReport -> iBufferSize = pBufferDisplay -> iBufferSize;
    }

    memmove (pCurrentReport -> pBuffer, pNewBuffer, pCurrentReport -> iBufferSize);

    BufferDisplay_OutputBuffer(pBufferDisplay -> hBufferEditBox, pCurrentReport);

    return (TRUE);
}

INT
BufferDisplay_GetBufferSize(
    IN  PBUFFER_DISPLAY      pBufferDisplay
)
/*++
Routine Description:
    This routine simply returns the size of the given buffer
--*/
{
    return (pBufferDisplay -> iBufferSize);
}

VOID
BufferDisplay_CopyCurrentBuffer(
    IN  PBUFFER_DISPLAY     pBufferDisplay,
    OUT PCHAR               pCopyBuffer
)
/*++
Routine Description:
    This routine copies the currently active buffer for the given buffer display
    into the buffer passed in by the caller.

    It is the caller's responsibility to allocate a buffer of the appropriate size
    The appropriate size can be obtain by calling BufferDisplay_GetBufferSize
--*/
{
    PREPORT_BUFFER          pCurrentReport;

    pCurrentReport = CURRENT_REPORT(pBufferDisplay);

    if (NULL == pCurrentReport -> pBuffer) 
    {
        memset(pCopyBuffer, 0x0, pBufferDisplay -> iBufferSize);
    }
    else
    {
        memcpy(pCopyBuffer, pCurrentReport -> pBuffer, pCurrentReport -> iBufferSize);
    }
    return;
}

INT
BufferDisplay_GetCurrentBufferNumber(
    IN  PBUFFER_DISPLAY      pBufferDisplay
)
/*++
Routine Description:
    This routine returns the buffer number of the current buffer selection
--*/
{
    return (pBufferDisplay -> iCurrSelectionIndex);
}

UCHAR
BufferDisplay_GetCurrentReportID(
    IN  PBUFFER_DISPLAY      pBufferDisplay
)
/*++
Routine Description:
    This routine returns the report ID of the current buffer selection
--*/
{
    PREPORT_BUFFER pCurrentReport;

    pCurrentReport = CURRENT_REPORT(pBufferDisplay);

    return (pCurrentReport -> ucReportID);
}

VOID
BufferDisplay_ClearBuffer(
    IN  PBUFFER_DISPLAY pBufferDisplay
)
/*++
Routine Description:
    This routine frees the current report buffer and set's it to NULL
--*/
{
    PREPORT_BUFFER pCurrentReport;

    pCurrentReport = CURRENT_REPORT(pBufferDisplay);

    if (NULL != pCurrentReport -> pBuffer) 
    {
        free(pCurrentReport -> pBuffer);

        pCurrentReport -> iBufferSize = 0;
        pCurrentReport -> ucReportID = 0;
        pCurrentReport -> pBuffer = NULL;
    }

    BufferDisplay_OutputBuffer(pBufferDisplay -> hBufferEditBox,
                               pCurrentReport);
    return;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\input\client\hclient\hclient.c ===
/*++

Copyright (c) Microsoft 1998, All Rights Reserved

Module Name:

    hclient.c

Abstract:

    This module contains the code for handling HClient's main dialog box and 
    for performing/calling the appropriate other routines.

Environment:

    User mode

Revision History:

    Nov-97 : Created 

--*/

#define __HCLIENT_C__
#define LOG_FILE_NAME   NULL

//****************************************************************************
// HClient include files
//****************************************************************************

#include <windows.h>
#include <stdlib.h>
#include <wtypes.h>
#include <math.h>
#include <assert.h>
#include <dbt.h>
#include "hidsdi.h"
#include "hid.h"
#include "resource.h"
#include "hclient.h"
#include "buffers.h"
#include "ecdisp.h"
#include "logpnp.h"
#include "list.h"

//****************************************************************************
// Local display macro definitions
//****************************************************************************

#define INPUT_BUTTON    1
#define INPUT_VALUE     2
#define OUTPUT_BUTTON   3
#define OUTPUT_VALUE    4
#define FEATURE_BUTTON  5
#define FEATURE_VALUE   6
#define HID_CAPS        7
#define DEVICE_ATTRIBUTES 8
                           
#define MAX_LB_ITEMS 200

#define MAX_WRITE_ELEMENTS 100
#define MAX_OUTPUT_ELEMENTS 50

#define CONTROL_COUNT 9
#define MAX_LABEL 128
#define MAX_VALUE 128

//****************************************************************************
// Macro definition to get device block from the main dialog box procedure
//****************************************************************************

#define GET_CURRENT_DEVICE(hDlg, pDevice)   \
{ \
    pDevice = NULL; \
    iIndex = (INT) SendDlgItemMessage(hDlg, \
                                      IDC_DEVICES, \
                                      CB_GETCURSEL, \
                                      0, \
                                      0); \
    if (CB_ERR != iIndex) { \
        pDevice = (PHID_DEVICE) SendDlgItemMessage(hDlg, \
                                                   IDC_DEVICES, \
                                                   CB_GETITEMDATA, \
                                                   iIndex, \
                                                   0); \
    } \
}

//****************************************************************************
// Data types local to the HClient display routines
//****************************************************************************

typedef struct rWriteDataStruct_type
{

    char szLabel[MAX_LABEL];
    char szValue[MAX_VALUE];

} rWriteDataStruct, *prWriteDataStruct;

typedef struct rGetWriteDataParams_type
{
        prWriteDataStruct   prItems;
        int                 iCount;
        
} rGetWriteDataParams, *prGetWriteDataParams;

typedef struct _DEVICE_LIST_NODE
{
    LIST_NODE_HDR   Hdr;
    HDEVNOTIFY      NotificationHandle;
    HID_DEVICE      HidDeviceInfo;
    BOOL            DeviceOpened;

} DEVICE_LIST_NODE, *PDEVICE_LIST_NODE;

//****************************************************************************
// Global program variables
//****************************************************************************

//
// Pointers to the HID.DLL functions that were added into the Win98 OSR and 
//  Windows 2000 but we're not included in the original implementation of 
//  HID.DLL in Windows 98.  By getting pointers to these functions instead of
//  statically linking with them, we can avoid the link error that would 
//  occur when this runs on Windows 98.  The typedefs to make this easier to
//  declare are also included below.
//

PGETEXTATTRIB pfnHidP_GetExtendedAttributes = NULL;

PINITREPORT   pfnHidP_InitializeReportForID = NULL;

   
//****************************************************************************
// Global module variables
//****************************************************************************
static HINSTANCE          hGInstance; //global application instance handle

static BOOL               IsHIDTestLoaded;
static HANDLE             TestDLLModuleHandle;

static VOID               (*HIDTest_StartTestFunc) (VOID);

static HANDLE             HIDDLLModuleHandle;

//
// Variables for handling the two different types of devices that can be loaded
//   into the system.  PhysicalDeviceList contains all the actual HID devices
//   attached via the USB bus.  LogicalDeviceList contains those preparsed
//   data structures which were obtained through report descriptors and saved
//   via the latest version of HidView.
//

static LIST               PhysicalDeviceList;
static LIST               LogicalDeviceList;

//****************************************************************************
// Local data routine declarations
//****************************************************************************

VOID 
vReadDataFromControls(
    HWND hDlg,
    prWriteDataStruct prData,
    int iOffset,
    int iCount
);

INT_PTR CALLBACK 
bGetDataDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
);

INT_PTR CALLBACK 
bMainDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
);

INT_PTR CALLBACK 
bFeatureDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
);

INT_PTR CALLBACK 
bReadDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
);

VOID 
vLoadItemTypes(
    HWND hItemTypes
);

BOOL 
bGetData(
    prWriteDataStruct,
    int iCount,
    HWND hParent, 
    char *pszDialogName
);

VOID 
vLoadDevices(
    HWND hDeviceCombo
);

VOID 
vFreeDeviceList(
    PHID_DEVICE  DeviceList,
    ULONG nDevices
);

VOID 
vDisplayInputButtons(
    PHID_DEVICE pDevice,
    HWND hControl
);

VOID 
vDisplayInputValues(
    PHID_DEVICE pDevice,
    HWND hControl
);

VOID 
vDisplayOutputButtons(
    PHID_DEVICE pDevice,
    HWND hControl
);

VOID 
vDisplayOutputValues(
    PHID_DEVICE pDevice,
    HWND hControl
);

VOID 
vDisplayFeatureButtons(
    PHID_DEVICE pDevice,
    HWND hControl
);

VOID 
vDisplayFeatureValues(
    PHID_DEVICE pDevice,
    HWND hControl
);

VOID 
vWriteDataToControls(
    HWND hDlg,
    prWriteDataStruct prData,
    int iOffset,
    int iCount
);

int 
iPrepareDataFields(
    PHID_DATA pData, 
    ULONG ulDataLength, 
    rWriteDataStruct rWriteData[],
    int iMaxElements
);

BOOL 
bParseData(
    PHID_DATA pData,
    rWriteDataStruct rWriteData[],
    INT iCount,
    INT *piErrorLine
);

BOOL 
bSetButtonUsages(
    PHID_DATA pCap,
    PCHAR     pszInputString
);

VOID
BuildReportIDList(
    IN  PHIDP_BUTTON_CAPS  phidButtonCaps,
    IN  USHORT             nButtonCaps,
    IN  PHIDP_VALUE_CAPS   phidValueCaps,
    IN  USHORT             nValueCaps,
    OUT UCHAR            **ppReportIDList,
    OUT INT               *nReportIDs
);

VOID
ReportToString(
   PHID_DATA    pData,
   PCHAR        szBuff
);

BOOL
RegisterHidDevice(
    IN  HWND                WindowHandle,
    IN  PDEVICE_LIST_NODE   DeviceNode
);

VOID
DestroyDeviceListCallback(
    IN  PLIST_NODE_HDR   ListNode
);

//****************************************************************************
// Function Definitions
//****************************************************************************

/*******************************
*WinMain: Windows Entry point  *
*******************************/
int PASCAL 
WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR     lpCmdLine,
    int       nCmdShow
)
{
    //
    // Save instance of the application for further reference
    //

    hGInstance = hInstance;

    //
    // Attempt to load HID.DLL...This should already be loaded due to the 
    //  static linking of HID.DLL to this app on compilation.  However,
    //  to insure that this application runs on Windows 98 gold, we cannot
    //  directly reference the new functions HidP_GetExtendedAttributes and 
    //  HidP_InitializeReportForID so to use them, we'll get pointers to their
    //  functions instead.
    //

    HIDDLLModuleHandle = LoadLibrary("HID.DLL");

    if (NULL == HIDDLLModuleHandle) 
    {
        //
        // Something really bad happened here...Throw up and error dialog
        //  and bolt.
        //

        MessageBox(NULL, 
                   "Unable to open HID.DLL\n"
                   "This should never occur",
                   HCLIENT_ERROR,
                   MB_ICONSTOP);

        return (0);
    }

    //
    // Get the function pointers,
    //

    pfnHidP_GetExtendedAttributes = (PGETEXTATTRIB) GetProcAddress(HIDDLLModuleHandle,
                                                                   "HidP_GetExtendedAttributes");

    pfnHidP_InitializeReportForID = (PINITREPORT) GetProcAddress(HIDDLLModuleHandle,
                                                                 "HidP_InitializeReportForID");


    //
    // Attempt to load HIDTest.DLL.  If the DLL exists and can be loaded, then
    //     we can show the START_TEST button in the main dialog box.  Otherwise,
    //     the button is hidden.  
    //
    //  Note: HIDTEST.DLL is used for internal testing purposes and is not included
    //        with the DDK sources
    //
    //

    TestDLLModuleHandle = LoadLibrary("HIDTEST.DLL");

    IsHIDTestLoaded = (NULL != TestDLLModuleHandle);

    if (IsHIDTestLoaded) 
    {
        HIDTest_StartTestFunc = (VOID (*)(VOID)) GetProcAddress(TestDLLModuleHandle, 
                                                                "HIDTest_DoFullTest");

        if (NULL == HIDTest_StartTestFunc) 
        {
            IsHIDTestLoaded = FALSE;
            FreeLibrary(TestDLLModuleHandle);
        }
    }

    //
    // Try to create the main dialog box.  Cannot do much else if it fails
    //   so we'll throw up a message box and then exit the app
    //

    if (-1 == DialogBox(hInstance, "MAIN_DIALOG", NULL, (DLGPROC)bMainDlgProc)) 
    {
        MessageBox(NULL,
                   "Unable to create root dialog!",
                   "DialogBox failure",
                   MB_ICONSTOP);
    }

    //
    // Unloaded HIDTest.DLL if it is loaded
    //

    if (IsHIDTestLoaded)
    {
        FreeLibrary(TestDLLModuleHandle);
    }

    FreeLibrary (HIDDLLModuleHandle);

    return (0);
}
 
/*************************************************
 * Main Dialog proc                              *
 *************************************************/

//
// This the dialog box procedure for the main dialog display.
//

INT_PTR CALLBACK 
bMainDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
)
{
    static HWND                             hComboCtrl;
    static rWriteDataStruct                 rWriteData[MAX_OUTPUT_ELEMENTS];
    static HDEVNOTIFY                       diNotifyHandle;
           INT                              iIndex;
           INT                              iCount;
           CHAR                             szTempBuff[128];
           PHID_DEVICE                      pDevice;
           PHIDP_BUTTON_CAPS                pButtonCaps;
           PHIDP_VALUE_CAPS                 pValueCaps;
           INT                              iErrorLine;
           INT                              iItemType;
           PHID_DEVICE                      tempDeviceList;
           ULONG                            numberDevices;
           PDEVICE_LIST_NODE                listNode;
           DEV_BROADCAST_DEVICEINTERFACE    broadcastInterface;
           HID_DEVICE                       writeDevice;
           BOOL                             status;

    switch (message)
    {
        case WM_INITDIALOG:

            //
            // Initialize the two device lists.
            //  -- PhysicalDeviceList is for devices that are actually attached
            //     to the HID bus
            //
            //  -- LogicalDeviceList is for devices that are loaded from a
            //      a preparsed data file.  The preparsed data for a device
            //      can be saved by a program such as HIDView.
            //
            //
            
            InitializeList(&PhysicalDeviceList);
            InitializeList(&LogicalDeviceList);
            
            //
            // Begin by finding all the Physical HID devices currently attached to
            //  the system. If that fails, exit the dialog box.  Logical devices
            //  are loaded via the button in the main dialog box.
            //
            
            if (!FindKnownHidDevices(&tempDeviceList, &numberDevices)) 
            {
                EndDialog(hDlg, 0);
                return FALSE;
            }
          
            //
            // For each device in the newly acquired list, create a device list
            //  node and add it the the list of physical device on the system  
            //
            
            pDevice = tempDeviceList;
            for (iIndex = 0; (ULONG) iIndex < numberDevices; iIndex++, pDevice++)
            {
                listNode = malloc(sizeof(DEVICE_LIST_NODE));

                if (NULL == listNode) {

                    //
                    // When freeing up the device list, we need to kill those
                    //  already in the Physical Device List and close
                    //  that have not been added yet in the enumerated list
                    //
                    
                    DestroyListWithCallback(&PhysicalDeviceList, DestroyDeviceListCallback);

                    CloseHidDevices(pDevice, numberDevices - iIndex);

                    free(tempDeviceList);
                    
                    EndDialog(hDlg, 0);
                    return FALSE;
                }

                listNode -> HidDeviceInfo = *pDevice;
                listNode -> DeviceOpened = TRUE;

                //
                // Register this device node with the PnP system so the dialog
                //  window can recieve notification if this device is unplugged.
                //
                
                if (!RegisterHidDevice(hDlg, listNode)) 
                {
                    DestroyListWithCallback(&PhysicalDeviceList, DestroyDeviceListCallback);

                    CloseHidDevices(pDevice, numberDevices - iIndex);

                    free(tempDeviceList);
                    free(listNode);
                    
                    EndDialog(hDlg, 0);
                    return FALSE;
                }                    

                InsertTail(&PhysicalDeviceList, listNode);
            }

            //
            // Free the temporary device list...It is no longer needed
            //
            
            free(tempDeviceList);
            
            //
            // Register for notification from the HidDevice class.  Doing so 
            //  allows the dialog box to receive device change notifications 
            //  whenever a new HID device is added to the system
            //  

            broadcastInterface.dbcc_size = sizeof(DEV_BROADCAST_DEVICEINTERFACE);
            broadcastInterface.dbcc_devicetype = DBT_DEVTYP_DEVICEINTERFACE;

            HidD_GetHidGuid(&broadcastInterface.dbcc_classguid);

            diNotifyHandle = RegisterDeviceNotification(hDlg,
                                                        &broadcastInterface,
                                                        DEVICE_NOTIFY_WINDOW_HANDLE
                                                       );
            if (NULL == diNotifyHandle)
            {
                DestroyListWithCallback(&PhysicalDeviceList, DestroyDeviceListCallback);
                           
                EndDialog(hDlg, 0);
                return FALSE;
            }
                    
            //
            // Update the device list box...
            // 
            //

            vLoadDevices(GetDlgItem(hDlg, IDC_DEVICES));

            //
            // Load the types box
            //
            
            vLoadItemTypes(GetDlgItem(hDlg, IDC_TYPE));
                          
            //
            // Show the Start Tests button on if hidtest.dll was found and
            //  loaded.
            //

            ShowWindow(GetDlgItem(hDlg, IDC_START_TESTS), IsHIDTestLoaded);

            //
            // Post a message that the device changed so the appropriate
            //   data for the first device in the system can be displayed
            //

            PostMessage(hDlg,
                        WM_COMMAND,
                        IDC_DEVICES + (CBN_SELCHANGE<<16),
                        (LPARAM) GetDlgItem(hDlg, IDC_DEVICES));

            break; // end WM_INITDIALOG case

        case WM_COMMAND:

            switch(LOWORD(wParam))
            {
                //
                // For a read, simply get the current device instance
                //   from the DEVICES combo box and call the read procedure
                //   with the HID_DEVICE block 
                //

                case IDC_READ:
                    GET_CURRENT_DEVICE(hDlg, pDevice);

                    if (NULL != pDevice)
                    {
                        iIndex = (INT) DialogBoxParam(hGInstance,
                                                      "READDATA",
                                                      hDlg,
                                                      bReadDlgProc,
                                                      (LPARAM) pDevice);
                    } 
                    break;

                //
                // For a write, the following steps are performed:
                //   1) Get the current device data from the combo box
                //   2) Prepare the data fields for display based on the data
                //       output data stored in the device data
                //   3) Retrieve the data the from the user that is to be sent
                //       to the device
                //   4) If all goes well and the data parses correctly, send the
                //        the new data values to the device
                //

                case IDC_WRITE:

                    GET_CURRENT_DEVICE(hDlg, pDevice);

                    if (NULL != pDevice) 
                    {
                        //
                        // In order to write to the device, need to get a
                        //  writable handle to the device.  In this case, the
                        //  write will be a synchronous write.  Begin by
                        //  trying to open a second instance of this device with
                        //  write access
                        //

                        memcpy(&writeDevice, pDevice, sizeof(HID_DEVICE));
                        
                        status = OpenHidDevice(pDevice -> DevicePath, 
                                                FALSE,
                                                TRUE,
                                                FALSE,
                                                FALSE,
                                                FALSE,
                                                &writeDevice);
                                            
                        if (!status) 
                        {
                            MessageBox(hDlg,
                                       "Couldn't open device for write access",
                                       HCLIENT_ERROR,
                                       MB_ICONEXCLAMATION);
                        }
                        else 
                        {
                            iCount = iPrepareDataFields(writeDevice.OutputData,
                                                        writeDevice.OutputDataLength,
                                                        rWriteData,
                                                        MAX_OUTPUT_ELEMENTS);

                            if (bGetData(rWriteData, iCount, hDlg, "WRITEDATA"))
                            {

                                if (bParseData(writeDevice.OutputData, rWriteData, iCount, &iErrorLine))
                                {
                                    Write(&writeDevice);
                                }
                                else
                                {
                                    wsprintf(szTempBuff,
                                             "Unable to parse line %x of output data",
                                             iErrorLine);

                                    MessageBox(hDlg,
                                               szTempBuff,
                                               HCLIENT_ERROR,
                                               MB_ICONEXCLAMATION);
                                }
                            }
                            CloseHidDevice(&writeDevice, FALSE);
                        }                            
                        
                    } 
                    break; //end case IDC_WRITE//
                    
                //
                // For processing features, get the current device data and call
                //   the Features dialog box,  This dialog box will deal with 
                //   sending and retrieving the features.
                //

                case IDC_FEATURES:
                    GET_CURRENT_DEVICE(hDlg, pDevice);

                    if (NULL != pDevice) 
                    {
                        iIndex = (INT) DialogBoxParam(hGInstance, 
                                                      "FEATURES", 
                                                      hDlg, 
                                                      bFeatureDlgProc, 
                                                      (LPARAM) pDevice);
                    }
                    break;
                    
                //
                // Likewise with extended calls dialog box.  This procedure
                //   passes the address to the device data structure and lets
                //   the dialog box procedure manipulate the data however it 
                //   wants to.
                //

                case IDC_EXTCALLS:
                    GET_CURRENT_DEVICE(hDlg, pDevice);

                    if (NULL != pDevice) 
                    {
                        iIndex = (INT) DialogBoxParam(hGInstance,
                                                      "EXTCALLS",
                                                      hDlg,
                                                      bExtCallDlgProc,
                                                      (LPARAM) pDevice);
                    }
                    break;
                      
                //
                // START_TESTS occurs only when HIDTEST.DLL is loaded.  This
                //    DLL is for internal test purposes and is not provided
                //    in the DDK sample.
                //
                
                case IDC_START_TESTS:
                    HIDTest_StartTestFunc();
                    break;
                    
                //
                // If there was a device change, issue an IDC_TYPE
                //   change to insure that the currently displayed types are
                //    updated to reflect the values of the device that has
                //    been selected
                //

                case IDC_DEVICES:
                    switch (HIWORD(wParam)) 
                    {
                        case CBN_SELCHANGE:

                            GET_CURRENT_DEVICE(hDlg, pDevice);

                            EnableWindow(GetDlgItem(hDlg, IDC_READ), 
                                         (pDevice != NULL) && 
                                         (pDevice -> Caps.InputReportByteLength));

                            EnableWindow(GetDlgItem(hDlg, IDC_WRITE), 
                                         (pDevice != NULL) && 
                                         (pDevice -> Caps.OutputReportByteLength));
                                         
                            EnableWindow(GetDlgItem(hDlg, IDC_FEATURES),
                                         (pDevice != NULL) && 
                                         (pDevice -> Caps.FeatureReportByteLength));
                                         
                            PostMessage(hDlg,
                                        WM_COMMAND,
                                        IDC_TYPE + (CBN_SELCHANGE<<16),
                                        (LPARAM) GetDlgItem(hDlg,IDC_TYPE));
                            break;

                    } 
                    break;

                //
                // On a type change, retrieve the currently active device
                //   from the IDC_DEVICES box and display the data that 
                //   corresponds to the item just selected
                //
                
                case IDC_TYPE:
                    switch (HIWORD(wParam))
                    {
                        case CBN_SELCHANGE:
                            GET_CURRENT_DEVICE(hDlg, pDevice);
                            
                            SendDlgItemMessage(hDlg,
                                               IDC_ITEMS,
                                               LB_RESETCONTENT,
                                               0,
                                               0);

                            SendDlgItemMessage(hDlg,
                                               IDC_ATTRIBUTES,
                                               LB_RESETCONTENT,
                                               0,
                                               0);
                            
                            if (NULL != pDevice)
                            {
                                iIndex = (INT) SendDlgItemMessage(hDlg,
                                                                  IDC_TYPE,
                                                                  CB_GETCURSEL,
                                                                  0,
                                                                  0);

                                iItemType = (INT) SendDlgItemMessage(hDlg,
                                                                     IDC_TYPE,
                                                                     CB_GETITEMDATA,
                                                                     iIndex,
                                                                     0);

                                switch(iItemType)
                                {
                                    case INPUT_BUTTON:
                                        vDisplayInputButtons(pDevice,GetDlgItem(hDlg,IDC_ITEMS));
                                        break;

                                    case INPUT_VALUE:
                                         vDisplayInputValues(pDevice,GetDlgItem(hDlg,IDC_ITEMS));
                                         break;

                                    case OUTPUT_BUTTON:
                                        vDisplayOutputButtons(pDevice,GetDlgItem(hDlg,IDC_ITEMS));
                                        break;

                                    case OUTPUT_VALUE:
                                        vDisplayOutputValues(pDevice,GetDlgItem(hDlg,IDC_ITEMS));
                                        break;

                                    case FEATURE_BUTTON:
                                        vDisplayFeatureButtons(pDevice,GetDlgItem(hDlg,IDC_ITEMS));
                                        break;

                                    case FEATURE_VALUE:
                                        vDisplayFeatureValues(pDevice,GetDlgItem(hDlg,IDC_ITEMS));
                                        break;
                                } 

                                PostMessage(hDlg,
                                            WM_COMMAND,
                                            IDC_ITEMS + (LBN_SELCHANGE << 16),
                                            (LPARAM) GetDlgItem(hDlg,IDC_ITEMS));
                            } 
                            break; // case CBN_SELCHANGE

                    } //end switch HIWORD wParam
                    break; //case IDC_TYPE control

                case IDC_ITEMS:
                    switch(HIWORD(wParam))
                    {
                        case LBN_SELCHANGE:

                            iItemType = 0;

                            iIndex = (INT) SendDlgItemMessage(hDlg,
                                                              IDC_TYPE,
                                                              CB_GETCURSEL,
                                                              0,
                                                              0);

                            if (-1 != iIndex)
                            {
                                iItemType = (INT) SendDlgItemMessage(hDlg,
                                                                     IDC_TYPE,
                                                                     CB_GETITEMDATA,
                                                                     iIndex,
                                                                     0);
                            }

                            iIndex = (INT) SendDlgItemMessage(hDlg,
                                                              IDC_ITEMS,
                                                              LB_GETCURSEL,
                                                              0,
                                                              0);

                            switch (iItemType)
                            {
                                case INPUT_BUTTON:
                                case OUTPUT_BUTTON:
                                case FEATURE_BUTTON:

                                    pButtonCaps = NULL;

                                    if (-1 != iIndex)
                                    {
                                        pButtonCaps = (PHIDP_BUTTON_CAPS) SendDlgItemMessage(hDlg,
                                                                                             IDC_ITEMS,
                                                                                             LB_GETITEMDATA,
                                                                                             iIndex,
                                                                                             0);
                                    }

                                    SendDlgItemMessage(hDlg, IDC_ATTRIBUTES, LB_RESETCONTENT, 0, 0);
                                    if (NULL != pButtonCaps)
                                    {
                                        vDisplayButtonAttributes(pButtonCaps, GetDlgItem(hDlg,IDC_ATTRIBUTES));
                                    }
                                    break;

                                case INPUT_VALUE:
                                case OUTPUT_VALUE:
                                case FEATURE_VALUE:

                                    pValueCaps = NULL;

                                    if (-1 != iIndex)
                                    {
                                        pValueCaps = (PHIDP_VALUE_CAPS) SendDlgItemMessage(hDlg,
                                                                                             IDC_ITEMS,
                                                                                             LB_GETITEMDATA,
                                                                                             iIndex,
                                                                                             0);
                                    }

                                    SendDlgItemMessage(hDlg, IDC_ATTRIBUTES, LB_RESETCONTENT, 0, 0);

                                    if (NULL != pValueCaps) 
                                    {
                                        vDisplayValueAttributes(pValueCaps,GetDlgItem(hDlg,IDC_ATTRIBUTES));
                                    }
                                    break;

                                case HID_CAPS:
                                    GET_CURRENT_DEVICE(hDlg, pDevice);

                                    if (NULL != pDevice)
                                    {
                                        vDisplayDeviceCaps(&(pDevice -> Caps),GetDlgItem(hDlg,IDC_ATTRIBUTES));
                                    }
                                    break;

                                case DEVICE_ATTRIBUTES:
                                    GET_CURRENT_DEVICE(hDlg, pDevice);

                                    if (NULL != pDevice) 
                                    {
                                        SendDlgItemMessage(hDlg, IDC_ATTRIBUTES, LB_RESETCONTENT, 0, 0);

                                        vDisplayDeviceAttributes(&(pDevice -> Attributes) ,GetDlgItem(hDlg,IDC_ATTRIBUTES));
                                    }
                                    break;

                            } //end switch iItemType//
                            break; //end case LBN_SELCHANGE in IDC_ITEMS//

                    } //end switch HIWORD wParam//
                    break; //case IDC_ITEMS//

                //
                // To load a logical device, we first have insure that
                //      we have space left in the list of logical devices
                //      If there isn't space, we have to realloc more space
                //      or print an error message saying the limit has
                //      been reached.  Once we've allocated space for the
                //      logical device, the next step is to pass the HID_DEVICE
                //      structure to our load logical device routine to get
                //      the data for that device.
                //

                case IDC_LOAD_LOGICAL_DEVICE:

                    listNode = malloc(sizeof(DEVICE_LIST_NODE));

                    if (NULL == listNode) 
                    {
                        MessageBox(hDlg,
                               "Error -- Couldn't allocate memory for device list node",
                               HCLIENT_ERROR,
                               MB_ICONEXCLAMATION | MB_OK | MB_TASKMODAL);

                        return (FALSE);                      
                    
                    }
                                      
                    //
                    // Now call the LogPnp_LoadLogicalDevice to load all the data for
                    //   the logical device
                    //
                
                    if (LogPnP_LoadLogicalDevice(LOG_FILE_NAME, &(listNode -> HidDeviceInfo)))
                    {
                        listNode -> NotificationHandle = NULL;
                        
                        InsertTail(&LogicalDeviceList, listNode);
                        
                        vLoadDevices(GetDlgItem(hDlg, IDC_DEVICES));
                    }
                    else
                    {
                        free(listNode);

                        return (FALSE);
                    }

                    break;

                case IDC_ABOUT:

                    MessageBox(hDlg,
                               "Sample HID client Application.  Microsoft Corp \nCopyright (C) 1997",
                               "About HClient",
                               MB_ICONINFORMATION);
                    break;

                case IDOK:
                case IDCANCEL:

                    //
                    // Destroy the physical and logical device lists for exit
                    //

                    DestroyListWithCallback(&PhysicalDeviceList, DestroyDeviceListCallback);
                    DestroyListWithCallback(&LogicalDeviceList, DestroyDeviceListCallback);

                    EndDialog(hDlg,0);

                    break;

            } //end switch wParam//
            break;

        //
        // For a device change message, we are only concerned about the 
        //    DBT_DEVICEREMOVECOMPLETE and DBT_DEVICEARRIVAL events. I have
        //    yet to determine how to process the device change message
        //    only for HID devices.  Therefore, there are two problems
        //    with the below implementation.  First of all, we must reload
        //    the device list any time a device is added to the system.  
        //    Secondly, at least two DEVICEARRIVAL messages are received 
        //    per HID.  One corresponds to the physical device.  The second
        //    change and any more correspond to each collection on the 
        //    physical device so a system that has one HID device with
        //    two top level collections (a keyboard and a mouse) will receive
        //    three DEVICEARRIVAL/REMOVALs causing the program to reload it's
        //    device list more than once.
        //

        //
        // To handle dynamic changing of devices, we have already registered
        //    notification for both HID class changes and for notification 
        //    for our open file objects.  Since we are only concerned about
        //    arrival/removal of devices, we only need to process those wParam.
        //    lParam points to some sort of DEV_BROADCAST_HDR struct.  For device
        //    arrival, we only deal with the message if that struct is a 
        //    DEV_BROADCAST_DEVICEINTERFACE structure.  For device removal, we're
        //    only concerned if the struct is a DEV_BROADCAST_HANDLE structure.
        //

        case WM_DEVICECHANGE:
            switch (wParam) 
            {
                PDEV_BROADCAST_HDR broadcastHdr;

                case DBT_DEVICEARRIVAL:

                    broadcastHdr = (PDEV_BROADCAST_HDR) lParam;

                    if (DBT_DEVTYP_DEVICEINTERFACE == broadcastHdr -> dbch_devicetype)
                    {
                        PDEV_BROADCAST_DEVICEINTERFACE  broadcastInterface;
                        PDEVICE_LIST_NODE               currNode, lastNode;
                        
                        broadcastInterface = (PDEV_BROADCAST_DEVICEINTERFACE) lParam;

                        //
                        // Search for a previous instance of this device
                        //  in the device list...In some cases, multiple
                        //  messages are received for the same device.  We
                        //  obviously only want one instance of the device
                        //  showing up in the dialog box.
                        //

                        if (!IsListEmpty(&PhysicalDeviceList)) 
                        {
                            currNode = (PDEVICE_LIST_NODE) GetListHead(&PhysicalDeviceList);
                            lastNode = (PDEVICE_LIST_NODE) GetListTail(&PhysicalDeviceList);
                            
                            //
                            // This loop should always terminate since the device 
                            //  handle should be somewhere in the physical device list
                            //
                            
                            while (1)
                            {
                                if (0 == strcmp(currNode -> HidDeviceInfo.DevicePath, 
                                                broadcastInterface -> dbcc_name)) 
                                {
                                    return (TRUE);
                                }
                                
                                if (currNode == lastNode) 
                                {
                                    break;
                                }

                                currNode = (PDEVICE_LIST_NODE) GetNextEntry(currNode);
                            }
                        }

                        //
                        // In this structure, we are given the name of the device
                        //    to open.  So all that needs to be done is open 
                        //    a new hid device with the string
                        //

                        listNode = (PDEVICE_LIST_NODE) malloc(sizeof(DEVICE_LIST_NODE));

                        if (NULL == listNode)
                        {
                            MessageBox(hDlg,
                               "Error -- Couldn't allocate memory for new device list node",
                               HCLIENT_ERROR,
                               MB_ICONEXCLAMATION | MB_OK | MB_TASKMODAL);

                            break;

                        }
                       
                        //
                        // Open the hid device for query access
                        //
                        
                        if (!OpenHidDevice (broadcastInterface -> dbcc_name,
                                            FALSE,
                                            FALSE,
                                            FALSE,
                                            FALSE,
                                            TRUE,
                                            &(listNode -> HidDeviceInfo))) {
                            MessageBox(hDlg,
                               "Error -- Couldn't open HID device",
                               HCLIENT_ERROR,
                               MB_ICONEXCLAMATION | MB_OK | MB_TASKMODAL);
                            
                            free(listNode);

                            break;
                        }

                        if (!RegisterHidDevice(hDlg, listNode))
                        {
                            MessageBox(hDlg,
                               "Error -- Couldn't register handle notification",
                               HCLIENT_ERROR,
                               MB_ICONEXCLAMATION | MB_OK | MB_TASKMODAL);

                            CloseHidDevice(&(listNode -> HidDeviceInfo), TRUE);

                            free(listNode);

                            break;

                        }                         

                        listNode -> DeviceOpened = TRUE;

                        InsertTail(&PhysicalDeviceList, listNode);

                        vLoadDevices(GetDlgItem(hDlg,IDC_DEVICES));

                        PostMessage(hDlg,
                                   WM_COMMAND,
                                   IDC_DEVICES + (CBN_SELCHANGE << 16),
                                   (LPARAM) GetDlgItem(hDlg,IDC_DEVICES));
                                   
                    }
                    break;

                case DBT_DEVICEQUERYREMOVE:

                    //
                    // If this message is received, the device is either
                    //  being disabled or removed through device manager.
                    //  To properly handle this request, we need to close
                    //  the handle to the device.
                    //

                    broadcastHdr = (PDEV_BROADCAST_HDR) lParam;

                    if (DBT_DEVTYP_HANDLE == broadcastHdr -> dbch_devicetype)
                    {
                        PDEV_BROADCAST_HANDLE broadcastHandle;
                        PDEVICE_LIST_NODE     currNode;
                        HANDLE                deviceHandle;
                        
                        broadcastHandle = (PDEV_BROADCAST_HANDLE) lParam;

                        //
                        // Get the file handle of the device that was removed
                        //  from the system
                        //
                        
                        deviceHandle = (HANDLE) broadcastHandle -> dbch_handle;

                        //
                        // Search the physical device list for the handle that
                        //  was removed...
                        //

                        currNode = (PDEVICE_LIST_NODE) GetListHead(&PhysicalDeviceList);

                        //
                        // This loop should always terminate since the device 
                        //  handle should be somewhere in the physical device list
                        //
                        
                        while (currNode -> HidDeviceInfo.HidDevice != deviceHandle)
                        {
                            currNode = (PDEVICE_LIST_NODE) GetNextEntry(currNode);
                        }

                        CloseHidDevice(&(currNode -> HidDeviceInfo), TRUE);

                        currNode -> DeviceOpened = FALSE;
                    }
                    return (TRUE);

                case DBT_DEVICEREMOVEPENDING:
                case DBT_DEVICEREMOVECOMPLETE:

                    //
                    // Do the same steps for DBT_DEVICEREMOVEPENDING and 
                    //   DBT_DEVICEREMOVECOMPLETE.  We do not receive the 
                    //   remove complete request for a device if it is
                    //   disabled or removed via Device Manager.  However,
                    //   in that case will receive the remove pending.  
                    //   We remove the device from our currently displayed
                    //   list of devices and unregister notification.
                    //
                    
                    broadcastHdr = (PDEV_BROADCAST_HDR) lParam;

                    if (DBT_DEVTYP_HANDLE == broadcastHdr -> dbch_devicetype)
                    {
                        PDEV_BROADCAST_HANDLE broadcastHandle;
                        PDEVICE_LIST_NODE     currNode;
                        HANDLE                deviceHandle;
                        
                        broadcastHandle = (PDEV_BROADCAST_HANDLE) lParam;

                        //
                        // Get the file handle of the device that was removed
                        //  from the system
                        //
                        
                        deviceHandle = (HANDLE) broadcastHandle -> dbch_handle;

                        //
                        // Search the physical device list for the handle that
                        //  was removed...
                        //

                        currNode = (PDEVICE_LIST_NODE) GetListHead(&PhysicalDeviceList);

                        //
                        // This loop should always terminate since the device 
                        //  handle should be somewhere in the physical device list
                        //
                        
                        while (currNode -> HidDeviceInfo.HidDevice != deviceHandle)
                        {
                            currNode = (PDEVICE_LIST_NODE) GetNextEntry(currNode);
                        }

                        //
                        // Node in PhysicalDeviceList has been found, do:
                        //  1) Unregister notification
                        //  2) Close the hid device
                        //  3) Remove the entry from the list
                        //  4) Free the memory for the entry
                        // 
                        //

                        PostMessage(hDlg, 
                                    WM_UNREGISTER_HANDLE, 
                                    0, 
                                    (LPARAM) currNode -> NotificationHandle);

                        //
                        // Close the device if still opened...This would 
                        //  occur on surprise removal.
                        //

                        if (currNode -> DeviceOpened) 
                        {
                            CloseHidDevice(&(currNode -> HidDeviceInfo), TRUE);
                        }

                        RemoveNode(currNode);

                        free(currNode);
                
                        //
                        // Reload the device list
                        //
                        
                        vLoadDevices(GetDlgItem(hDlg,IDC_DEVICES));

                        PostMessage(hDlg,
                                   WM_COMMAND,
                                   IDC_DEVICES + (CBN_SELCHANGE << 16),
                                   (LPARAM) GetDlgItem(hDlg,IDC_DEVICES));
                    }
                    break;
    
                default:
                    break;
            }
            break;

        //
        // Application specific message used to defer the unregistering of a 
        //  file object for device change notification.  This separte message
        //  is sent when a WM_DEVICECHANGE (DBT_DEVICEREMOVECOMPLETE) has been
        //  received.  The Unregistering of the notification must be deferred
        //  until after the WM_DEVICECHANGE message has been processed or the 
        //  system will deadlock.  The handle that is to be freed will be passed
        //  in as lParam for this message
        //
        
        case WM_UNREGISTER_HANDLE:
            UnregisterDeviceNotification ( (HDEVNOTIFY) lParam ); 
            break;
                           
   } // end switch message
   return FALSE;
} // end MainDlgProc


BOOL 
bParseData(
    PHID_DATA           pData,
    rWriteDataStruct    rWriteData[],
    int                 iCount,
    int                 *piErrorLine
)
{  
    INT       iCap;
    PHID_DATA pWalk;
    BOOL      noError = TRUE;

    pWalk = pData;

    for (iCap = 0; (iCap < iCount) && noError; iCap++)
    {
        //
        // Check to see if our data is a value cap or not
        //

        if (!pWalk->IsButtonData)
        {
            pWalk -> ValueData.Value = atol(rWriteData[iCap].szValue);
        } 
        else
        {
            if (!bSetButtonUsages(pWalk, rWriteData[iCap].szValue) )
            {
               *piErrorLine = iCap;

               noError = FALSE;
            } 
        } 
        pWalk++;
    }
    return (noError);
}

BOOL 
bSetButtonUsages(
    PHID_DATA pCap,
    PCHAR     pszInputString
)
{
    CHAR   szTempString[128];
    CHAR   pszDelimiter[] = " ";
    PCHAR  pszToken;
    INT    iLoop;
    PUSAGE pUsageWalk;
    BOOL   bNoError=TRUE;

    strcpy(szTempString, pszInputString);

    pszToken = strtok(szTempString, pszDelimiter);
    
    pUsageWalk = pCap -> ButtonData.Usages;

    memset(pUsageWalk, 0, pCap->ButtonData.MaxUsageLength * sizeof(USAGE));

    for (iLoop = 0; ((ULONG) iLoop < pCap->ButtonData.MaxUsageLength) && (pszToken != NULL) && bNoError; iLoop++)
    {
        *pUsageWalk = (USAGE) atoi(pszToken);

        pszToken = strtok(NULL, pszDelimiter);

        pUsageWalk++;
    } 

     return bNoError;
} //end function bSetButtonUsages//


INT 
iPrepareDataFields(
    PHID_DATA           pData,
    ULONG               ulDataLength, 
    rWriteDataStruct    rWriteData[],
    int                 iMaxElements
)
{
    INT i;
    PHID_DATA pWalk;

    pWalk = pData;

    for (i = 0; (i < iMaxElements) && ((unsigned) i < ulDataLength); i++)
    {
        if (!pWalk->IsButtonData) 
        {
            wsprintf(rWriteData[i].szLabel,
                     "ValueCap; ReportID: 0x%x, UsagePage=0x%x, Usage=0x%x",
                     pWalk->ReportID,
                     pWalk->UsagePage,
                     pWalk->ValueData.Usage);
        }
        else
        {
            wsprintf(rWriteData[i].szLabel,
                     "Button; ReportID: 0x%x, UsagePage=0x%x, UsageMin: 0x%x, UsageMax: 0x%x",
                     pWalk->ReportID,
                     pWalk->UsagePage,
                     pWalk->ButtonData.UsageMin,
                     pWalk->ButtonData.UsageMax);
        }
        pWalk++;
     } 
     return i;
}  //end function iPrepareDataFields//


INT_PTR CALLBACK 
bReadDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
)
{
    static INT                  iLbCounter;
    static CHAR                 szTempBuff[1024];
    static READ_THREAD_CONTEXT  readContext;
    static HANDLE               readThread;
    static HID_DEVICE           syncDevice;
    static HID_DEVICE           asyncDevice;
    static BOOL                 doAsyncReads;
    static BOOL                 doSyncReads;

           PHID_DEVICE          pDevice;
           DWORD                threadID;
           INT                  iIndex;
           PHID_DATA            pData;
           UINT                 uLoop;


    switch(message)
    {
        case WM_INITDIALOG:

            //
            // Initialize the list box counter, the readThread, and the 
            //  readContext.DisplayEvent.
            //
            
            iLbCounter = 0;
            readThread = NULL;
            readContext.DisplayEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

            if (NULL == readContext.DisplayEvent)
            {
                EndDialog(hDlg, 0);
            } 
            
            //
            // Get the opened device information for the device to perform
            //  reads upon
            //
            
            pDevice = (PHID_DEVICE) lParam;

            //
            // To do sync and async reads requires file handles with different
            //  attributes (ie. an async must be opened with the OVERLAPPED flag
            //  set).  The device node that was passed in the context parameter
            //  was not opened for reading.  Therefore, two more devices will
            //  be opened, one for async reads and one for sync reads.
            //
            
            memcpy(&syncDevice, pDevice, sizeof(HID_DEVICE));

            doSyncReads = OpenHidDevice(pDevice -> DevicePath, 
                                       TRUE,
                                       FALSE,
                                       FALSE,
                                       FALSE,
                                       FALSE,
                                       &syncDevice);

            if (!doSyncReads)
            {
                MessageBox(hDlg, 
                           "Unable to open device for synchronous reading",
                           HCLIENT_ERROR,
                           MB_ICONEXCLAMATION);
            }

            //
            // For asynchronous read, default to using the same information
            //    passed in as the lParam.  This is because data related to
            //    Ppd and such cannot be retrieved using the standard HidD_ 
            //    functions.  However, it is necessary to parse future reports.
            //

            memcpy(&asyncDevice, pDevice, sizeof(HID_DEVICE));
            
            doAsyncReads = OpenHidDevice(pDevice -> DevicePath, 
                                       TRUE,
                                       FALSE,
                                       TRUE,
                                       FALSE,
                                       FALSE,
                                       &asyncDevice);

            if (!doAsyncReads) 
            {
                MessageBox(hDlg, 
                           "Unable to open device for asynchronous reading",
                           HCLIENT_ERROR,
                           MB_ICONEXCLAMATION);
            }

            PostMessage(hDlg, WM_READ_DONE, 0, 0);
            break; 

        case WM_DISPLAY_READ_DATA:

            //
            // LParam is the device that was read from
            // 

            pDevice = (PHID_DEVICE) lParam;
            
            //
            // Display all the data stored in the Input data field for the device
            //
            
            pData = pDevice -> InputData;

            SendDlgItemMessage(hDlg,
                               IDC_OUTPUT,
                               LB_ADDSTRING,
                               0,
                               (LPARAM)"-------------------------------------------");
                               
            iLbCounter++;

            if (iLbCounter > MAX_LB_ITEMS)
            {
                SendDlgItemMessage(hDlg,
                                   IDC_OUTPUT,
                                   LB_DELETESTRING,
                                   0,
                                   0);
            }

            for (uLoop = 0; uLoop < pDevice->InputDataLength; uLoop++)
            {
                ReportToString(pData, szTempBuff);
          
                iIndex = (INT) SendDlgItemMessage(hDlg,
                                                  IDC_OUTPUT,
                                                  LB_ADDSTRING,
                                                  0,
                                                  (LPARAM) szTempBuff);

                SendDlgItemMessage(hDlg,
                                   IDC_OUTPUT,
                                   LB_SETCURSEL,
                                   iIndex,
                                   0);

                iLbCounter++;

                if (iLbCounter > MAX_LB_ITEMS)
                {
                    SendDlgItemMessage(hDlg,
                                       IDC_OUTPUT,
                                       LB_DELETESTRING,
                                       0,
                                       0);
                }
                pData++;
            }
            SetEvent( readContext.DisplayEvent );
            break;

        case WM_READ_DONE:
            EnableWindow(GetDlgItem(hDlg, IDOK), TRUE);
            EnableWindow(GetDlgItem(hDlg, IDC_READ_SYNCH), doSyncReads);
            EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH_ONCE), doAsyncReads);
            EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH_CONT), doAsyncReads);

            SetWindowText(GetDlgItem(hDlg, IDC_READ_ASYNCH_ONCE), 
                          "One Asynchronous Read");       

            SetWindowText(GetDlgItem(hDlg, IDC_READ_ASYNCH_CONT),
                          "Continuous Asynchronous Read");       

            readThread = NULL;
            break;
            
        case WM_COMMAND:
            switch(LOWORD(wParam))
            {
                case IDC_READ_SYNCH:

                    EnableWindow(GetDlgItem(hDlg, IDOK), FALSE);
                    EnableWindow(GetDlgItem(hDlg, IDC_READ_SYNCH), FALSE);
                    EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH_ONCE), FALSE);
                    EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH_CONT), FALSE);                    

                    Read(&syncDevice);

                    PostMessage(hDlg, WM_DISPLAY_READ_DATA, 0, (LPARAM) &syncDevice);
                    PostMessage(hDlg, WM_READ_DONE, 0, 0);

                    break;

                case IDC_READ_ASYNCH_ONCE:
                case IDC_READ_ASYNCH_CONT:

                    //
                    // When these buttons are pushed there are two options:
                    //  1) Start a new asynch read thread (readThread == NULL)
                    //  2) Stop a previous asych read thread
                    //
                    
                    if (NULL == readThread) 
                    {
                        //
                        // Start a new read thread
                        //

                        readContext.HidDevice = &asyncDevice;
                        readContext.TerminateThread = FALSE;
                        readContext.DoOneRead = (IDC_READ_ASYNCH_ONCE == LOWORD(wParam));
                        readContext.DisplayWindow = hDlg;
                        
                        readThread = CreateThread(  NULL,
                                                    0,
                                                    AsynchReadThreadProc,
                                                    &readContext,
                                                    0,
                                                    &threadID);

                        if (NULL == readThread)
                        {
                            MessageBox(hDlg,
                                       "Unable to create read thread",
                                       HCLIENT_ERROR,
                                       MB_ICONEXCLAMATION);
                        }
                        else
                        {
                            EnableWindow(GetDlgItem(hDlg, IDOK), FALSE);
                            EnableWindow(GetDlgItem(hDlg, IDC_READ_SYNCH), FALSE);
                            EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH_ONCE),
                                         IDC_READ_ASYNCH_ONCE == LOWORD(wParam));

                            EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH_CONT),
                                         IDC_READ_ASYNCH_CONT == LOWORD(wParam));                                     

                            SetWindowText(GetDlgItem(hDlg, LOWORD(wParam)), 
                                          "Stop Asynchronous Read");
                        }
                    }
                    else
                    {
                        //
                        // Signal the terminate thread variable and
                        //  wait for the read thread to complete.
                        //
                        
                        readContext.TerminateThread = TRUE;
                        WaitForSingleObject(readThread, INFINITE);
                    }                        
                    break;
                        
                case IDOK:
                case IDCANCEL:
                    if (doAsyncReads)
                    {
                        CloseHidDevice(&asyncDevice, FALSE);
                    }

                    if (doSyncReads)
                    {
                        CloseHidDevice(&syncDevice, FALSE);
                    }
                    
                    EndDialog(hDlg,0);
                    break;
            }
            break;
     } // end switch message 
     return FALSE;
} // end bReadDlgProc 

VOID
ReportToString(
   PHID_DATA pData,
   PCHAR szBuff
)
{
    PCHAR   pszWalk;
    PUSAGE  pUsage;
    ULONG   i;

    //
    // For button data, all the usages in the usage list are to be displayed
    //
    
    if (pData -> IsButtonData)
    {
        wsprintf (szBuff, 
                  "Usage Page: 0x%x, Usages: ",
                  pData -> UsagePage);

        pszWalk = szBuff + strlen(szBuff);
        *pszWalk = '\0';

        for (i = 0, pUsage = pData -> ButtonData.Usages;
                     i < pData -> ButtonData.MaxUsageLength;
                         i++, pUsage++) 
        {
            if (0 == *pUsage)
            {
                break; // A usage of zero is a non button.
            }
            pszWalk += wsprintf (pszWalk, " 0x%x", *pUsage);
        }   
    }
    else
    {
        wsprintf (szBuff,
                  "Usage Page: 0x%x, Usage: 0x%x, Scaled: %d Value: %d",
                  pData->UsagePage,
                  pData->ValueData.Usage,
                  pData->ValueData.ScaledValue,
                  pData->ValueData.Value);
    }
}

INT_PTR CALLBACK 
bFeatureDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
)
{
    static PHID_DEVICE       pDevice;
    static INT               iLbCounter;
    static rWriteDataStruct  rWriteData[MAX_WRITE_ELEMENTS];
    static CHAR              szTempBuff[1024];
           INT               iIndex;
           INT               iCount;
           INT               iErrorLine;
           PHID_DATA         pData;
           UINT              uLoop;

    switch(message)
    {
        case WM_INITDIALOG:
            iLbCounter = 0;
            pDevice = (PHID_DEVICE) lParam;
            break; 

        case WM_COMMAND:
            switch(LOWORD(wParam))
            {
                case IDC_READ:

                    GetFeature(pDevice);

                    pData = pDevice -> FeatureData;

                    SendDlgItemMessage(hDlg,
                                       IDC_OUTPUT,
                                       LB_ADDSTRING,
                                       0,
                                       (LPARAM)"------------ Read Features ---------------");

                    iLbCounter++;

                    if (iLbCounter > MAX_LB_ITEMS) 
                    {
                        SendDlgItemMessage(hDlg,
                                           IDC_OUTPUT,
                                           LB_DELETESTRING,
                                           0,
                                           0);
                    }

                    for (uLoop = 0; uLoop < pDevice -> FeatureDataLength; uLoop++)
                    {
                        ReportToString(pData, szTempBuff);

                        iIndex = (INT) SendDlgItemMessage(hDlg,
                                                          IDC_OUTPUT,
                                                          LB_ADDSTRING,
                                                          0,
                                                          (LPARAM) szTempBuff);
                                                   
                        SendDlgItemMessage(hDlg,
                                           IDC_OUTPUT,
                                           LB_SETCURSEL,
                                           iIndex,
                                           (LPARAM) 0);

                        iLbCounter++;
                        if (iLbCounter > MAX_LB_ITEMS)
                        {
                            SendDlgItemMessage(hDlg,
                                               IDC_OUTPUT,
                                               LB_DELETESTRING,
                                               0,
                                               0);
                        }
                        pData++;
                    } 
                    break;

                case IDC_WRITE:
                    iCount = iPrepareDataFields(pDevice -> FeatureData, 
                                                pDevice -> FeatureDataLength,
                                                rWriteData,
                                                MAX_OUTPUT_ELEMENTS);

                    if (bGetData(rWriteData, iCount, hDlg, "WRITEFEATURE"))
                    {
                        if (!bParseData(pDevice -> FeatureData, rWriteData,iCount, &iErrorLine)) 
                        {
                            wsprintf(szTempBuff,
                                    "Unable to parse line %x of output data",
                                    iErrorLine);
                            
                            MessageBox(hDlg,
                                        szTempBuff,
                                        HCLIENT_ERROR,
                                        MB_ICONEXCLAMATION);
                        }
                        else
                        {
                            if ( SetFeature(pDevice) )
                            {
                                SendDlgItemMessage(hDlg,
                                                   IDC_OUTPUT,
                                                   LB_ADDSTRING,
                                                   0,
                                                   (LPARAM)"------------ Write Feature ---------------");                                             
                            }
                            else
                            {
                                 SendDlgItemMessage(hDlg,
                                                    IDC_OUTPUT,
                                                    LB_ADDSTRING,
                                                    0,
                                                    (LPARAM)"------------ Write Feature Error ---------------");                                             
                            }                                                             
                        }
                     }
                     break;
                      
                      
                 case IDOK:
                 case IDCANCEL:
                     EndDialog(hDlg,0);
                     break;
            }
            break;
   } //end switch message//
   return FALSE;
} //end bReadDlgProc//

VOID 
vDisplayDeviceCaps(
    IN PHIDP_CAPS pCaps,
    IN HWND hControl
)
{
    static CHAR szTempBuff[128];

    SendMessage(hControl, LB_RESETCONTENT, 0, 0);

    wsprintf(szTempBuff, "Usage Page: 0x%x", pCaps -> UsagePage);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff,"Usage: 0x%x",pCaps -> Usage);
    SendMessage(hControl,LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff,"Input report byte length: %d",pCaps -> InputReportByteLength);
    SendMessage(hControl,LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff,"Output report byte length: %d",pCaps -> OutputReportByteLength);
    SendMessage(hControl,LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff,"Feature report byte length: %d",pCaps -> FeatureReportByteLength);
    SendMessage(hControl,LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff,"Number of collection nodes %d: ", pCaps -> NumberLinkCollectionNodes);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    return;
}

VOID
vDisplayDeviceAttributes(
    PHIDD_ATTRIBUTES pAttrib,
    HWND hControl
)
{
    static CHAR szTempBuff[128];

    wsprintf(szTempBuff, "Vendor ID: 0x%x", pAttrib -> VendorID);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Product ID: 0x%x", pAttrib -> ProductID);
    SendMessage(hControl, LB_ADDSTRING, 0,(LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Version Number  0x%x", pAttrib -> VersionNumber);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    return;
}

VOID
vDisplayDataAttributes(
    PHIDP_DATA pData, 
    BOOL IsButton, 
    HWND hControl
)
{
    static CHAR szTempBuff[128];

    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) "================");

    wsprintf(szTempBuff, "Index: 0x%x", pData -> DataIndex);
    SendMessage(hControl,LB_ADDSTRING, 0, (LPARAM) szTempBuff);
    
    wsprintf(szTempBuff, "IsButton: %s", IsButton ? "TRUE" : "FALSE");
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (IsButton) 
    {
        wsprintf(szTempBuff, "Button pressed: %s", pData -> On ? "TRUE" : "FALSE");
        SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
    }
    else
    {
        wsprintf(szTempBuff, "Data value: 0x%x", pData -> RawValue);
        SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
    }
}

VOID 
vDisplayButtonAttributes(
    IN PHIDP_BUTTON_CAPS pButton,
    IN HWND hControl
)
{
    static CHAR szTempBuff[128];
   
    wsprintf(szTempBuff, "Report ID: 0x%x", pButton->ReportID);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
     
    wsprintf(szTempBuff, "Usage Page: 0x%x", pButton->UsagePage);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
        
    wsprintf(szTempBuff, 
             "Alias: %s",
             pButton -> IsAlias ? "TRUE" : "FALSE");
    
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
   
    wsprintf(szTempBuff,
             "Link Collection: %hu", 
             pButton -> LinkCollection);

    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
   
    wsprintf(szTempBuff,
             "Link Usage Page: 0x%x",
             pButton -> LinkUsagePage);
 
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);        
   
    wsprintf(szTempBuff,
             "Link Usage: 0x%x",
             pButton -> LinkUsage);

    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pButton->IsRange) 
    {
        wsprintf(szTempBuff,
                 "Usage Min: 0x%x, Usage Max: 0x%x",
                 pButton->Range.UsageMin, 
                 pButton->Range.UsageMax);
    } 
    else
    {
        wsprintf(szTempBuff,"Usage: 0x%x",pButton->NotRange.Usage);

    } 
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pButton->IsRange)
    {
         wsprintf(szTempBuff,
                  "Data Index Min: 0x%x, Data Index Max: 0x%x",
                  pButton->Range.DataIndexMin, 
                  pButton->Range.DataIndexMax);

    } 
    else 
    {
        wsprintf(szTempBuff,"DataIndex: 0x%x",pButton->NotRange.DataIndex);
    } 

    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pButton->IsStringRange)
    {
        wsprintf(szTempBuff,
                 "String Min: 0x%x, String Max: 0x%x",
                 pButton->Range.StringMin, 
                 pButton->Range.StringMax);
    } 
    else
    {
        wsprintf(szTempBuff,"String Index: 0x%x",pButton->NotRange.StringIndex);
    } 
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pButton->IsDesignatorRange) 
    {
        wsprintf(szTempBuff,
                 "Designator Min: 0x%x, Designator Max: 0x%x",
                 pButton->Range.DesignatorMin, 
                 pButton->Range.DesignatorMax);

    } 
    else
    {
        wsprintf(szTempBuff,
                 "Designator Index: 0x%x",
                 pButton->NotRange.DesignatorIndex);
    } 
    SendMessage(hControl, LB_ADDSTRING, 0,(LPARAM) szTempBuff);

    if (pButton->IsAbsolute)
    {
        SendMessage(hControl, LB_ADDSTRING,0, (LPARAM) "Absolute: Yes");
    }
    else
    {
        SendMessage(hControl, LB_ADDSTRING,0, (LPARAM) "Absolute: No");
    }
    return;
} 

VOID
vDisplayValueAttributes(
    IN PHIDP_VALUE_CAPS pValue,
    HWND hControl
)
{
    static CHAR szTempBuff[128];

    wsprintf(szTempBuff, "Report ID 0x%x", pValue->ReportID);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
 
    wsprintf(szTempBuff, "Usage Page: 0x%x", pValue->UsagePage);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Bit size: 0x%x", pValue->BitSize);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Report Count: 0x%x", pValue->ReportCount);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Unit Exponent: 0x%x", pValue->UnitsExp);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Has Null: 0x%x", pValue->HasNull);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);    

 
    if (pValue->IsAlias)
    {
        wsprintf(szTempBuff, "Alias");
    }
    else 
    {
        wsprintf(szTempBuff, "=====");
    }
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pValue->IsRange)
    {
        wsprintf(szTempBuff,
                 "Usage Min: 0x%x, Usage Max 0x%x",
                 pValue->Range.UsageMin, 
                 pValue->Range.UsageMax);
    } 
    else
    {
        wsprintf(szTempBuff, "Usage: 0x%x", pValue -> NotRange.Usage);
    } 
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pValue->IsRange)
    {
        wsprintf(szTempBuff,
                 "Data Index Min: 0x%x, Data Index Max: 0x%x",
                 pValue->Range.DataIndexMin, 
                 pValue->Range.DataIndexMax);
    } 
    else
    {
        wsprintf(szTempBuff, "DataIndex: 0x%x", pValue->NotRange.DataIndex);
    } 
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff,
            "Physical Minimum: %d, Physical Maximum: %d",
            pValue->PhysicalMin, 
            pValue->PhysicalMax);

    SendMessage(hControl, LB_ADDSTRING, 0,(LPARAM) szTempBuff);

    wsprintf(szTempBuff,
            "Logical Minimum: 0x%x, Logical Maximum: 0x%x",
            pValue->LogicalMin,
            pValue->LogicalMax);

    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pValue->IsStringRange) 
    {
       wsprintf(szTempBuff,
                "String  Min: 0x%x String Max 0x%x",
                pValue->Range.StringMin,
                pValue->Range.StringMax);
    } 
    else
    {
        wsprintf(szTempBuff,"String Index: 0x%x",pValue->NotRange.StringIndex);
    } 
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

    if (pValue->IsDesignatorRange) 
    {
        wsprintf(szTempBuff,
                 "Designator Minimum: 0x%x, Max: 0x%x",
                 pValue->Range.DesignatorMin, 
                 pValue->Range.DesignatorMax);
    } 
    else 
    {
        wsprintf(szTempBuff,"Designator Index: 0x%x",pValue->NotRange.DesignatorIndex);
    } 
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
 
    if (pValue->IsAbsolute) 
    { 
        SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) "Absolute: Yes");
    }
    else
    {
        SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) "Absolute: No");
    }
    return;
}

VOID 
vDisplayInputButtons(
    IN PHID_DEVICE pDevice,
    IN HWND hControl
)
{
    INT               iLoop;
    PHIDP_BUTTON_CAPS pButtonCaps;
    static CHAR       szTempBuff[128];
    INT               iIndex;

    SendMessage(hControl, LB_RESETCONTENT, 0, (LPARAM) 0);

    pButtonCaps = pDevice->InputButtonCaps;
    for (iLoop = 0; iLoop < pDevice->Caps.NumberInputButtonCaps; iLoop++) 
    {
        wsprintf(szTempBuff, "Input button cap # %d", iLoop);

        iIndex = (INT) SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

        if (-1 != iIndex)
        {
            SendMessage(hControl, LB_SETITEMDATA, iIndex,(LPARAM) pButtonCaps);
        }

        pButtonCaps++;
    } 
    SendMessage(hControl, LB_SETCURSEL, 0, 0 );
}

VOID 
vDisplayOutputButtons(
   IN PHID_DEVICE pDevice,
   IN HWND hControl
)
{
    INT               iLoop;
    static CHAR       szTempBuff[128];
    INT               iIndex;
    PHIDP_BUTTON_CAPS pButtonCaps;

    SendMessage(hControl, LB_RESETCONTENT, 0, (LPARAM) 0);

    pButtonCaps = pDevice -> OutputButtonCaps;

    for (iLoop = 0; iLoop < pDevice->Caps.NumberOutputButtonCaps; iLoop++) 
    {
        wsprintf(szTempBuff, "Output button cap # %d", iLoop);
        iIndex = (INT) SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

        if (-1 != iIndex)
        {
            SendMessage(hControl, LB_SETITEMDATA, iIndex, (LPARAM) pButtonCaps);
        }
        pButtonCaps++;
    }

    SendMessage(hControl, LB_SETCURSEL, 0, 0);
    return;
}

VOID 
vDisplayInputValues(
    IN PHID_DEVICE pDevice,
    IN HWND hControl
)
{
    INT              iLoop;
    static CHAR      szTempBuff[128];
    INT              iIndex;
    PHIDP_VALUE_CAPS pValueCaps;

    SendMessage(hControl, LB_RESETCONTENT, 0, 0);

    pValueCaps = pDevice -> InputValueCaps;

    for (iLoop=0; iLoop < pDevice->Caps.NumberInputValueCaps; iLoop++) 
    {
        wsprintf(szTempBuff,"Input value cap # %d",iLoop);
        iIndex = (INT) SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

        if (-1 != iIndex) 
        {
           SendMessage(hControl, LB_SETITEMDATA, iIndex,(LPARAM) pValueCaps);
        }
        pValueCaps++;
    }

    SendMessage(hControl, LB_SETCURSEL, 0, 0);
    return;
}

VOID
vDisplayOutputValues(
    IN PHID_DEVICE pDevice,
    IN HWND hControl)
{
    INT              iLoop;
    static CHAR      szTempBuff[128];
    INT              iIndex;
    PHIDP_VALUE_CAPS pValueCaps;
   
    SendMessage(hControl, LB_RESETCONTENT, 0, 0);
    pValueCaps = pDevice -> OutputValueCaps;
   
    for (iLoop = 0; iLoop < pDevice->Caps.NumberOutputValueCaps; iLoop++) 
    {
        wsprintf(szTempBuff, "Output value cap # %d", iLoop);
        iIndex = (INT) SendMessage(hControl, 
                                   LB_ADDSTRING, 
                                   0, 
                                   (LPARAM) szTempBuff);
       
        if (-1 != iIndex) 
        {
            SendMessage(hControl, LB_SETITEMDATA, iIndex, (LPARAM) pValueCaps);
        }
        pValueCaps++;
    }

    SendMessage(hControl, LB_SETCURSEL, 0, 0);

    return;
}

VOID
vDisplayFeatureButtons(
    IN PHID_DEVICE pDevice,
    IN HWND hControl
)
{
    INT               iLoop;
    static CHAR       szTempBuff[128];
    INT               iIndex;
    PHIDP_BUTTON_CAPS pButtonCaps;

    SendMessage(hControl, LB_RESETCONTENT, 0, 0);

    pButtonCaps = pDevice -> FeatureButtonCaps;

    for (iLoop = 0; iLoop < pDevice->Caps.NumberFeatureButtonCaps; iLoop++) 
    {
        wsprintf(szTempBuff, "Feature button cap # %d", iLoop);
        iIndex = (INT) SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

        if (-1 != iIndex) 
        {
            SendMessage(hControl, LB_SETITEMDATA, iIndex, (LPARAM) pButtonCaps);
        }
        pButtonCaps++;
    } 
    SendMessage(hControl, LB_SETCURSEL, 0, 0);
    return;
}

VOID
vDisplayFeatureValues(
    IN PHID_DEVICE pDevice,
    IN HWND hControl
)
{
    INT              iLoop;
    static CHAR      szTempBuff[128];
    INT              iIndex;
    PHIDP_VALUE_CAPS pValueCaps;

    SendMessage(hControl, LB_RESETCONTENT, 0, 0);
    pValueCaps = pDevice ->FeatureValueCaps;

    for (iLoop = 0; iLoop < pDevice->Caps.NumberFeatureValueCaps; iLoop++) 
    {
        wsprintf(szTempBuff, "Feature value cap # %d", iLoop);
        iIndex = (INT) SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);

        if (-1 != iIndex) 
        {
            SendMessage(hControl, LB_SETITEMDATA, iIndex, (LPARAM) pValueCaps);
        }

        pValueCaps++;
    } 
    SendMessage(hControl, LB_SETCURSEL, 0, 0);
    return;
}

VOID
vLoadItemTypes(
    IN HWND hItemTypes
)
{
    INT iIndex;

    iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0, (LPARAM) "INPUT BUTTON");

    if (-1 != iIndex) 
    {
        SendMessage(hItemTypes, CB_SETITEMDATA, iIndex, INPUT_BUTTON);

        iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0 ,(LPARAM) "INPUT VALUE");
        if (-1 != iIndex) 
        {
            SendMessage(hItemTypes, CB_SETITEMDATA, iIndex, INPUT_VALUE);
        }

        iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0, (LPARAM) "OUTPUT BUTTON");
        if (-1 != iIndex)
        {
            SendMessage(hItemTypes,CB_SETITEMDATA,iIndex,OUTPUT_BUTTON);
        }

        iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0, (LPARAM) "OUTPUT VALUE");
        if (-1 != iIndex)
        {
            SendMessage(hItemTypes, CB_SETITEMDATA, iIndex, OUTPUT_VALUE);
        }

        iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0, (LPARAM) "FEATURE BUTTON");
        if (-1 != iIndex) 
        {
            SendMessage(hItemTypes, CB_SETITEMDATA, iIndex, FEATURE_BUTTON);
        }

        iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0, (LPARAM) "FEATURE VALUE");
        if (-1 != iIndex)
        {
            SendMessage(hItemTypes, CB_SETITEMDATA, iIndex, FEATURE_VALUE);
        }

        iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0, (LPARAM) "HID CAPS");
        if (-1 != iIndex )
        {
            SendMessage(hItemTypes, CB_SETITEMDATA, iIndex, HID_CAPS);
        }

        iIndex = (INT) SendMessage(hItemTypes, CB_ADDSTRING, 0, (LPARAM) "DEVICE ATTRIBUTES");
        if (-1 != iIndex)
        {
            SendMessage(hItemTypes, CB_SETITEMDATA, iIndex, DEVICE_ATTRIBUTES);
        }

        SendMessage(hItemTypes, CB_SETCURSEL, 0, 0);
    }
} 

VOID vLoadDevices(
    HWND    hDeviceCombo
)
{
    PDEVICE_LIST_NODE   currNode;
    
    static CHAR szTempBuff[128];
    INT         iIndex;

    //
    // Reset the content of the device list box.
    //

    SendMessage(hDeviceCombo, CB_RESETCONTENT, 0, 0);


    if (!IsListEmpty(&PhysicalDeviceList))
    {
        currNode = (PDEVICE_LIST_NODE) GetListHead(&PhysicalDeviceList);
          
        do
        {
            wsprintf(szTempBuff,
                     "Device %d, UsagePage 0%x, Usage 0%x",
                     currNode -> HidDeviceInfo.HidDevice,
                     currNode -> HidDeviceInfo.Caps.UsagePage,
                     currNode -> HidDeviceInfo.Caps.Usage);

            iIndex = (INT) SendMessage(hDeviceCombo, CB_ADDSTRING, 0, (LPARAM) szTempBuff);

            if (CB_ERR != iIndex) 
            {
                SendMessage(hDeviceCombo, CB_SETITEMDATA, iIndex, (LPARAM) &(currNode -> HidDeviceInfo));
            }

            currNode = (PDEVICE_LIST_NODE) GetNextEntry(currNode);
            
        } while ((PLIST) currNode != &PhysicalDeviceList);
       
    } 

    //
    // Now we need to load any logical devices that might currently be in our
    //   logical device list 
    //

    if (!IsListEmpty(&LogicalDeviceList)) 
    {
        currNode = (PDEVICE_LIST_NODE) GetListHead(&LogicalDeviceList);
        
        do 
        {                
            wsprintf(szTempBuff,
                     "Device: Logical, UsagePage 0%x, Usage 0%x",
                     currNode -> HidDeviceInfo.Caps.UsagePage,
                     currNode -> HidDeviceInfo.Caps.Usage);

            iIndex = (INT) SendMessage(hDeviceCombo, CB_ADDSTRING, 0, (LPARAM) szTempBuff);

            if (CB_ERR != iIndex)
            {
                SendMessage(hDeviceCombo, CB_SETITEMDATA, iIndex, (LPARAM) &(currNode -> HidDeviceInfo));
            }

            currNode = (PDEVICE_LIST_NODE) GetNextEntry(currNode);
            
        } while ((PLIST) currNode != &LogicalDeviceList);
       
    }
   
    SendMessage(hDeviceCombo, CB_SETCURSEL, 0, 0);
  
    return;
}

BOOL
bGetData(
    prWriteDataStruct pItems,
    INT               iCount,
    HWND              hParent, 
    PCHAR             pszDialogName
)
{
    rGetWriteDataParams rParams;
    rWriteDataStruct    arTempItems[MAX_WRITE_ELEMENTS];
    INT                 iResult;


    if (iCount > MAX_WRITE_ELEMENTS) 
    {
        iCount = MAX_WRITE_ELEMENTS;
    }

    memcpy( &(arTempItems[0]), pItems, sizeof(rWriteDataStruct)*iCount);

    rParams.iCount = iCount;
    rParams.prItems = &(arTempItems[0]);

    iResult = (INT) DialogBoxParam(hGInstance,
                                   pszDialogName,
                                   hParent,
                                   bGetDataDlgProc,
                                   (LPARAM) &rParams);
    if (iResult) 
    {
       memcpy(pItems, arTempItems, sizeof(rWriteDataStruct)*iCount);
    }
    return iResult;
} 

INT_PTR CALLBACK 
bGetDataDlgProc(
    HWND hDlg, 
    UINT message, 
    WPARAM wParam, 
    LPARAM lParam
)
{
    static prWriteDataStruct    prData;
    static prGetWriteDataParams pParams;
    static INT                  iDisplayCount;
    static INT                  iScrollRange;
    static INT                  iCurrentScrollPos=0;
    static HWND                 hScrollBar;
           INT                  iTemp;
           SCROLLINFO           rScrollInfo;
           INT                  iReturn;

    switch(message) 
    {
        case WM_INITDIALOG:

            pParams = (prGetWriteDataParams) lParam;
            prData = pParams -> prItems;
            hScrollBar = GetDlgItem(hDlg, IDC_SCROLLBAR);

            if (pParams -> iCount > CONTROL_COUNT) 
            {
                iDisplayCount = CONTROL_COUNT;
                iScrollRange = pParams -> iCount - CONTROL_COUNT;
                rScrollInfo.fMask = SIF_RANGE | SIF_POS;
                rScrollInfo.nPos = 0;
                rScrollInfo.nMin = 0;
                rScrollInfo.nMax = iScrollRange;
                rScrollInfo.cbSize = sizeof(rScrollInfo);
                rScrollInfo.nPage = CONTROL_COUNT;
                iReturn = SetScrollInfo(hScrollBar,SB_CTL,&rScrollInfo,TRUE);
            }
            else
            {
                iDisplayCount=pParams->iCount;
                EnableWindow(hScrollBar,FALSE);
            }
            vWriteDataToControls(hDlg, prData, 0, pParams->iCount);
            break;

        case WM_COMMAND:
            switch(LOWORD(wParam)) 
            {
                case IDOK:
                case ID_SEND:
                    vReadDataFromControls(hDlg, prData, iCurrentScrollPos, iDisplayCount);
                    EndDialog(hDlg,1);
                    break;

                case IDCANCEL:
                    EndDialog(hDlg,0);
                    break;
             } 
             break;

        case WM_VSCROLL:
            vReadDataFromControls(hDlg, prData, iCurrentScrollPos, iDisplayCount);

            switch(LOWORD(wParam)) 
            {
                case SB_LINEDOWN:
                    ++iCurrentScrollPos;
                    break;

                case SB_LINEUP:
                    --iCurrentScrollPos;
                    break;

                case SB_THUMBPOSITION:
                    iCurrentScrollPos = HIWORD(wParam);

                case SB_PAGEUP:
                    iCurrentScrollPos -= CONTROL_COUNT;
                    break;

                case SB_PAGEDOWN:
                    iCurrentScrollPos += CONTROL_COUNT;
                    break;
            }

            if (iCurrentScrollPos < 0) 
            {
                iCurrentScrollPos = 0;
            }
             
            if (iCurrentScrollPos > iScrollRange)
            {
                iCurrentScrollPos = iScrollRange; 
            }

            SendMessage(hScrollBar, SBM_SETPOS, iCurrentScrollPos, TRUE);
            iTemp = LOWORD(wParam);

            if ( (iTemp == SB_LINEDOWN) || (iTemp == SB_LINEUP) || (iTemp == SB_THUMBPOSITION)|| (iTemp == SB_PAGEUP) || (iTemp==SB_PAGEDOWN) )
            {
                vWriteDataToControls(hDlg, prData, iCurrentScrollPos, iDisplayCount);
            }
            break; 
    } 
    return FALSE;
} //end function bGetDataDlgProc//

VOID
vReadDataFromControls(
    HWND hDlg,
    prWriteDataStruct prData,
    INT iOffset,
    INT iCount
)
{
    INT               iLoop;
    INT               iValueControlID = IDC_OUT_EDIT1;
    prWriteDataStruct pDataWalk;
    HWND              hValueWnd;

    pDataWalk = prData + iOffset;
    for (iLoop = 0; (iLoop < iCount) && (iLoop < CONTROL_COUNT); iLoop++) 
    {
        hValueWnd = GetDlgItem(hDlg, iValueControlID);

        GetWindowText(hValueWnd, pDataWalk -> szValue, MAX_VALUE);

        iValueControlID++;

        pDataWalk++;
    } 

    return;
} 

VOID
vWriteDataToControls(
    HWND                hDlg,
    prWriteDataStruct   prData,
    INT                 iOffset,
    INT                 iCount
)
{
    INT               iLoop;
    INT               iLabelControlID = IDC_OUT_LABEL1;
    INT               iValueControlID = IDC_OUT_EDIT1;
    HWND              hLabelWnd, hValueWnd;
    prWriteDataStruct pDataWalk;

    pDataWalk = prData + iOffset;

    for (iLoop = 0; (iLoop < iCount) && (iLoop < CONTROL_COUNT); iLoop++) 
    {
         hLabelWnd = GetDlgItem(hDlg, iLabelControlID);
         hValueWnd = GetDlgItem(hDlg, iValueControlID);
         
         ShowWindow(hLabelWnd, SW_SHOW);
         ShowWindow(hValueWnd, SW_SHOW);
         
         SetWindowText(hLabelWnd, pDataWalk -> szLabel);
         SetWindowText(hValueWnd, pDataWalk -> szValue);
         
         iLabelControlID++;
         iValueControlID++;
         pDataWalk++;
    }     
     
    //
    // Hide the controls
    //

    for (; iLoop < CONTROL_COUNT; iLoop++) 
    {
        hLabelWnd = GetDlgItem(hDlg,iLabelControlID);
        hValueWnd = GetDlgItem(hDlg,iValueControlID);
        
        ShowWindow(hLabelWnd,SW_HIDE);
        ShowWindow(hValueWnd,SW_HIDE);
        
        iLabelControlID++;
        iValueControlID++;
     } 
} 

VOID
vCreateUsageString(
    IN  PUSAGE   pUsageList,
    OUT CHAR     szString[]
)
{
    wsprintf(szString,
             "Usage: %#04x",
             *pUsageList);

    return;
}

VOID
vCreateUsageAndPageString(
    IN  PUSAGE_AND_PAGE pUsageList,
    OUT CHAR            szString[]
)
{
    wsprintf(szString,
             "Usage Page: %#04x  Usage: %#04x", 
             pUsageList -> UsagePage,
             pUsageList -> Usage);

    return;
}

VOID
vDisplayLinkCollectionNode(
    IN  PHIDP_LINK_COLLECTION_NODE  pLCNode,
    IN  ULONG                       ulLinkIndex,
    IN  HWND                        hControl
)
{
    static CHAR szTempBuff[128];

    wsprintf(szTempBuff, "Index: 0x%x", ulLinkIndex);
    SendMessage(hControl, LB_ADDSTRING, 0, (LPARAM) szTempBuff);
    
    wsprintf(szTempBuff, "Usage Page: 0x%x", pLCNode -> LinkUsagePage);
    SendMessage(hControl, LB_ADDSTRING,0, (LPARAM)szTempBuff);

    wsprintf(szTempBuff, "Usage: 0x%x", pLCNode -> LinkUsage);
    SendMessage(hControl, LB_ADDSTRING,0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Parent Index: 0x%x", pLCNode -> Parent);
    SendMessage(hControl, LB_ADDSTRING,0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Number of Children: 0x%x", pLCNode -> NumberOfChildren);
    SendMessage(hControl, LB_ADDSTRING,0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "Next Sibling: 0x%x", pLCNode -> NextSibling);
    SendMessage(hControl, LB_ADDSTRING,0, (LPARAM) szTempBuff);

    wsprintf(szTempBuff, "First Child: 0x%x", pLCNode -> FirstChild);
    SendMessage(hControl, LB_ADDSTRING,0, (LPARAM) szTempBuff);

    return;
}

VOID
vCreateUsageValueStringFromArray(
    PCHAR       pBuffer,
    USHORT      BitSize,
    USHORT      UsageIndex,
    CHAR        szString[]
)
/*++
Routine Description:
    Given a report buffer, pBuffer, this routine extracts the given usage
    at UsageIndex from the array and outputs to szString the string
    representation of that value.  The input parameter BitSize specifies
    the number of bits representing that value in the array.  This is
    useful for extracting individual members of a UsageValueArray.
--*/
{
    INT         iByteIndex;
    INT         iByteOffset;
    UCHAR       ucLeftoverBits;
    ULONG       ulMask;
    ULONG       ulValue;

    //
    // Calculate the byte and byte offset into the buffer for the given
    //   index value
    //
    
    iByteIndex = (UsageIndex * BitSize) >> 3;
    iByteOffset = (UsageIndex * BitSize) & 7;

    //
    // Extract the 32-bit value beginning at ByteIndex.  This value
    //   will contain some or all of the value we are attempting to retrieve
    //
    
    ulValue = *(PULONG) (pBuffer + iByteIndex);

    //
    // Shift that value to the right by our byte offset..
    //
    
    ulValue = ulValue >> iByteOffset;

    //
    // At this point, ulValue contains the first 32-iByteOffset bits beginning
    //    the appropriate offset in the buffer.  There are now two cases to 
    //    look at:
    //      
    //    1) BitSize > 32-iByteOffset -- In which case, we need to extract
    //                                   iByteOffset bits from the next
    //                                   byte in the array and OR them as
    //                                   the MSBs of ulValue
    //
    //    2) BitSize < 32-iByteOffset -- Need to get only the BitSize LSBs
    //                                   
    //

    //
    // Case #1
    //
    
    if (BitSize > sizeof(ULONG)*8 - iByteOffset) 
    {
        //
        // Get the next byte of the report following the four bytes we
        //   retrieved earlier for ulValue
        //
        
        ucLeftoverBits =  *(pBuffer+iByteIndex+4);

        //
        // Shift those bits to the left for anding to our previous value
        //
        
        ulMask = ucLeftoverBits << (24 + (8 - iByteOffset));
        ulValue |= ulMask;

    }
    else if (BitSize < sizeof(ULONG)*8 - iByteOffset) 
    {
        //
        // Need to mask the most significant bits that are part of another
        //    value(s), not the one we are currently working with.
        //
        
        ulMask = (1 << BitSize) - 1;
        ulValue &= ulMask;
    }
    
    //
    // We've now got the correct value, now output to the string
    //

    wsprintf(szString, "Usage value: %lu", ulValue);

    return;
}


BOOL
RegisterHidDevice(
    IN  HWND                WindowHandle,
    IN  PDEVICE_LIST_NODE   DeviceNode
)
{
    DEV_BROADCAST_HANDLE broadcastHandle;
    
    broadcastHandle.dbch_size = sizeof(DEV_BROADCAST_HANDLE);
    broadcastHandle.dbch_devicetype = DBT_DEVTYP_HANDLE;
    broadcastHandle.dbch_handle = DeviceNode -> HidDeviceInfo.HidDevice;

    DeviceNode -> NotificationHandle = RegisterDeviceNotification( 
                                                WindowHandle,
                                                &broadcastHandle,
                                                DEVICE_NOTIFY_WINDOW_HANDLE);

    return (NULL != DeviceNode -> NotificationHandle);
}   

VOID
DestroyDeviceListCallback(
    PLIST_NODE_HDR   ListNode
)
{
    PDEVICE_LIST_NODE   deviceNode;

    deviceNode = (PDEVICE_LIST_NODE) ListNode;
    
    //
    // The callback function needs to do the following steps...
    //   1) Close the HidDevice
    //   2) Unregister device notification (if registered)
    //   3) Free the allocated memory block
    //

    CloseHidDevice(&(deviceNode -> HidDeviceInfo), TRUE);

    if (NULL != deviceNode -> NotificationHandle) 
    {
        UnregisterDeviceNotification(deviceNode -> NotificationHandle);
    }

    free (deviceNode);

    return;
}

DWORD WINAPI
AsynchReadThreadProc( 
    PREAD_THREAD_CONTEXT    Context
)
{
    HANDLE  completionEvent;
    BOOL    readStatus;
    DWORD   waitStatus;
    
    //
    // Create the completion event to send to the the OverlappedRead routine
    //

    completionEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

    //
    // If NULL returned, then we cannot proceed any farther so we just exit the 
    //  the thread
    //
    
    if (NULL == completionEvent) 
    {
        goto AsyncRead_End;
    }

    //
    // Now we enter the main read loop, which does the following:
    //  1) Calls ReadOverlapped()
    //  2) Waits for read completion with a timeout just to check if 
    //      the main thread wants us to terminate our the read request
    //  3) If the read fails, we simply break out of the loop
    //      and exit the thread
    //  4) If the read succeeds, we call UnpackReport to get the relevant
    //      info and then post a message to main thread to indicate that
    //      there is new data to display.
    //  5) We then block on the display event until the main thread says
    //      it has properly displayed the new data
    //  6) Look to repeat this loop if we are doing more than one read
    //      and the main thread has yet to want us to terminate
    //

    do 
    {
        //
        // Call ReadOverlapped() and if the return status is TRUE, the ReadFile
        //  succeeded so we need to block on completionEvent, otherwise, we just
        //  exit
        //

        readStatus = ReadOverlapped( Context -> HidDevice, completionEvent );

    
        if (!readStatus) 
        {
           break;
        }

        while (!Context -> TerminateThread) 
        {
            //
            // Wait for the completion event to be signaled or a timeout
            //
            
            waitStatus = WaitForSingleObject (completionEvent, READ_THREAD_TIMEOUT );

            //
            // If completionEvent was signaled, then a read just completed
            //   so let's leave this loop and process the data
            //
            
            if ( WAIT_OBJECT_0 == waitStatus)
            { 
                break;
            }
        }

        //
        // Check the TerminateThread again...If it is not set, then data has
        //  been read.  In this case, we want to Unpack the report into our
        //  input info and then send a message to the main thread to display
        //  the new data.
        //
        
        if (!Context -> TerminateThread) 
        {
            UnpackReport(Context -> HidDevice -> InputReportBuffer,
                          Context -> HidDevice -> Caps.InputReportByteLength,
                          HidP_Input,
                          Context -> HidDevice -> InputData,
                          Context -> HidDevice -> InputDataLength,
                          Context -> HidDevice -> Ppd);
            
            if (NULL != Context -> DisplayEvent) 
            { 
                PostMessage(Context -> DisplayWindow,
                            WM_DISPLAY_READ_DATA,
                            0,
                            (LPARAM) Context -> HidDevice);

                WaitForSingleObject( Context -> DisplayEvent, INFINITE );
            }
        }
    } while ( !Context -> TerminateThread && !Context -> DoOneRead );


AsyncRead_End:

    PostMessage( Context -> DisplayWindow, WM_READ_DONE, 0, 0);
    ExitThread(0);
    return (0);
}

DWORD WINAPI
SynchReadThreadProc(
    PREAD_THREAD_CONTEXT    Context
)
{
    do 
    {
        Read(Context -> HidDevice);

        UnpackReport(Context -> HidDevice -> InputReportBuffer,
                     Context -> HidDevice -> Caps.InputReportByteLength,
                     HidP_Input,
                     Context -> HidDevice -> InputData,
                     Context -> HidDevice -> InputDataLength,
                     Context -> HidDevice -> Ppd);

        if (NULL != Context -> DisplayEvent) 
        {
            PostMessage(Context -> DisplayWindow,
                        WM_DISPLAY_READ_DATA,
                        0,
                        (LPARAM) Context -> HidDevice);

            WaitForSingleObject( Context -> DisplayEvent, INFINITE );
        }
    } while ( !Context -> TerminateThread && !Context -> DoOneRead );

    PostMessage( Context -> DisplayWindow, WM_READ_DONE, 0, 0);
    ExitThread(0);
    return (0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\input\client\hclient\ecdisp.c ===
/*++

Copyright (c) Microsoft 1998, All Rights Reserved

Module Name:

    ecdisp.c

Abstract:

    This module contains the code to handle the extended calls dialog box
    and the actions that can be performed in the dialog box.

Environment:

    User mode

Revision History:

    May-98 : Created 

--*/

/*****************************************************************************
/* Extended call display include files
/*****************************************************************************/
#include <windows.h>
#include <limits.h>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <setupapi.h>
#include <vfw.h>
#include <assert.h>
#include "hidusage.h"
#include "hidsdi.h"
#include "hid.h"
#include "hclient.h"
#include "resource.h"
#include "buffers.h"
#include "ecdisp.h"
#include "strings.h"
#include "logpnp.h"

/*****************************************************************************
/* Local macro definitions for the supported function calls
/*****************************************************************************/

#define HID_DEVCALLS                    20
#define HID_PPDCALLS                    29

#define HID_NUMCALLS                    HID_DEVCALLS + HID_PPDCALLS

#define HIDD_GET_HID_GUID              1
#define HIDD_GET_FREE_PREPARSED_DATA   2
#define HIDD_GET_CONFIGURATION         3
#define HIDD_SET_CONFIGURATION         4
#define HIDD_FLUSH_QUEUE               5
#define HIDD_GET_ATTRIBUTES            6
#define HIDD_SET_FEATURE               7
#define HIDD_GET_FEATURE               8
#define HIDD_GET_INPUT_REPORT          9
#define HIDD_SET_OUTPUT_REPORT        10
#define HIDD_GET_NUM_INPUT_BUFFERS    11
#define HIDD_SET_NUM_INPUT_BUFFERS    12
#define HIDD_GET_PHYSICAL_DESCRIPTOR  13
#define HIDD_GET_MANUFACTURER_STRING  14
#define HIDD_GET_PRODUCT_STRING       15
#define HIDD_GET_INDEXED_STRING       16
#define HIDD_GET_SERIAL_NUMBER_STRING 17
#define HIDD_GET_MS_GENRE_DESCRIPTOR  18
#define HID_READ_REPORT               19
#define HID_WRITE_REPORT              20
#define HIDP_GET_BUTTON_CAPS          21
#define HIDP_GET_BUTTONS              22
#define HIDP_GET_BUTTONS_EX           23
#define HIDP_GET_CAPS                 24 
#define HIDP_GET_DATA                 25
#define HIDP_GET_EXTENDED_ATTRIBUTES  26
#define HIDP_GET_LINK_COLL_NODES      27
#define HIDP_GET_SCALED_USAGE_VALUE   28
#define HIDP_GET_SPECIFIC_BUTTON_CAPS 29
#define HIDP_GET_SPECIFIC_VALUE_CAPS  30
#define HIDP_GET_USAGES               31
#define HIDP_GET_USAGES_EX            32
#define HIDP_GET_USAGE_VALUE          33
#define HIDP_GET_USAGE_VALUE_ARRAY    34
#define HIDP_GET_VALUE_CAPS           35
#define HIDP_INITIALIZE_REPORT_FOR_ID 36
#define HIDP_MAX_DATA_LIST_LENGTH     37
#define HIDP_MAX_USAGE_LIST_LENGTH    38
#define HIDP_SET_BUTTONS              39
#define HIDP_SET_DATA                 40
#define HIDP_SET_SCALED_USAGE_VALUE   41
#define HIDP_SET_USAGES               42
#define HIDP_SET_USAGE_VALUE          43
#define HIDP_SET_USAGE_VALUE_ARRAY    44
#define HIDP_TRANSLATE_USAGES         45
#define HIDP_UNSET_BUTTONS            46
#define HIDP_UNSET_USAGES             47
#define HIDP_USAGE_LIST_DIFFERENCE    48
#define HID_CLEAR_REPORT              49

/*
// These two definitions are not used by the display routines since 
//    the two functions were molded together into one for purpose of execution
*/

#define HIDD_GET_PREPARSED_DATA       50
#define HIDD_FREE_PREPARSED_DATA      51


#define IS_HIDD_FUNCTION(func)        (((func) >= HIDD_GET_HID_GUID) && \
                                       ((func) <= HIDD_GET_MS_GENRE_DESCRIPTOR))


#define IS_HIDP_FUNCTION(func)        (((func) >= HIDP_GET_BUTTON_CAPS) && \
                                       ((func) <= HIDP_USAGE_LIST_DIFFERENCE))

#define IS_HID_FUNCTION(func)         (((func) >= HID_READ_REPORT) && \
                                       ((func) <= HID_WRITE_REPORT))

#define IS_NOT_IMPLEMENTED(func)      (((func) == HIDD_GET_CONFIGURATION) || \
                                      ((func) == HIDD_SET_CONFIGURATION) || \
                                      ((func) == HIDP_TRANSLATE_USAGES) || \
                                      (((func) == HIDP_INITIALIZE_REPORT_FOR_ID) && \
                                       (NULL == pfnHidP_InitializeReportForID)) || \
                                      (((func) == HIDP_GET_EXTENDED_ATTRIBUTES) && \
                                       (NULL == pfnHidP_GetExtendedAttributes)))

/*****************************************************************************
/* Local macro definitions for buffer display sizes
/*****************************************************************************/

#define NUM_INPUT_BUFFERS       16
#define NUM_OUTPUT_BUFFERS      16
#define NUM_FEATURE_BUFFERS     16

/*****************************************************************************
/* Local macro definition for HidP_SetData dialog box
/*****************************************************************************/

#define SETDATA_LISTBOX_FORMAT  "Index: %u,  DataValue: %u"

/*****************************************************************************
/* Local macro definition for display output to output windows
/*****************************************************************************/

#define TEMP_BUFFER_SIZE 1024
#define STATUS_STRING(str, status)  wsprintf(str, "Status: %s", ECDisp_GetHidAppStatusString(status))
#define OUTSTRING(win, str)         SendMessage(win, LB_ADDSTRING, 0, (LPARAM) str)
#define OUTWSTRING(win, str) \
{ \
    size_t  nBytes; \
\
    nBytes = wcstombs(szTempBuffer, str, TEMP_BUFFER_SIZE-1); \
    if ((size_t) -1 == nBytes) { \
        OUTSTRING(win, "Cannot convert wide-character string"); \
    } \
    else { \
        szTempBuffer[nBytes] = '\0'; \
        OUTSTRING(win, szTempBuffer); \
    } \
}

#define DISPLAY_HIDD_STATUS(win, func, status) \
{ \
    wsprintf(szTempBuffer, \
             "%s returned: %s", \
             func, \
             (status).IsHidError ? "FALSE" : "TRUE"); \
\
    OUTSTRING(win, szTempBuffer); \
\
    if ((status).IsHidError) { \
        wsprintf(szTempBuffer, \
                 "ErrorCode: %d", \
                 GetLastError()); \
    }\
    OUTSTRING(win, szTempBuffer); \
}

#define DISPLAY_HIDP_STATUS(win, func, status) \
{ \
    wsprintf(szTempBuffer, \
             "%s returned: %s", \
             func, \
             ECDisp_GetHidAppStatusString(status.HidErrorCode)); \
\
    OUTSTRING(win, szTempBuffer); \
}

#define ECDISP_ERROR(win, msg) \
{ \
    MessageBox(win, \
               msg, \
               HCLIENT_ERROR, \
               MB_ICONEXCLAMATION); \
}

#define GET_FUNCTION_NAME(index)     ResolveFunctionName(index)


/*****************************************************************************
/* Local macro definition for retrieving data based on report type
/*****************************************************************************/
#define SELECT_ON_REPORT_TYPE(rt, ival, oval, fval, res) \
{ \
    switch ((rt)) { \
    case HidP_Input: \
        (res) = (ival); \
        break; \
\
    case HidP_Output: \
        (res) = (oval); \
        break; \
\
    case HidP_Feature: \
        (res) = (fval); \
        break; \
\
    } \
}

/*****************************************************************************
/* Local macro definition for calculating size of a usage value array buffer
/*****************************************************************************/
#define ROUND_TO_NEAREST_BYTE(val)  (((val) % 8) ? ((val) / 8) + 1 : ((val) / 8))

/*****************************************************************************
/* Data types local to this module
/*****************************************************************************/

typedef struct _FUNCTION_NAMES
{
    UINT uiIndex;
    char *szFunctionName;
} FUNCTION_NAMES;

typedef struct _PARAMETER_STATE 
{
    BOOL fInputReport;
    BOOL fOutputReport;
    BOOL fFeatureReport;
    BOOL fReportID;
    BOOL fUsagePage;
    BOOL fUsage;
    BOOL fLinkCollection;
    BOOL fInputReportSelect;
    BOOL fOutputReportSelect;
    BOOL fFeatureReportSelect;
} PARAMETER_STATE;

typedef enum { DLGBOX_INIT_FAILED = -1, DLGBOX_ERROR, DLGBOX_CANCEL, DLGBOX_OK } DLGBOX_STATUS;

typedef struct _ECDISPLAY_PARAMS 
{
    HIDP_REPORT_TYPE          ReportType;
    USAGE                     UsagePage;
    USAGE                     Usage;
    USHORT                    LinkCollection;
    UCHAR                     ReportID;
    PCHAR                     szListString;
    PCHAR                     szListString2;
    PUSAGE                    UsageList;
    PUSAGE                    UsageList2;
    ULONG                     ListLength;
    ULONG                     ListLength2;
    ULONG                     Index;
    union {
        PHIDP_DATA            pDataList;
        PULONG                pValueList;
        LONG                  ScaledValue;
        ULONG                 Value;
    };
} ECDISPLAY_PARAMS, *PECDISPLAY_PARAMS;

typedef struct _READ_PARAMS
{
    PHID_DEVICE device;
    BOOLEAN     stopThread;
} READ_PARAMS, *PREAD_PARAMS;
    
/*****************************************************************************
/* Local data variables
/*****************************************************************************/

static CHAR             szTempBuffer[TEMP_BUFFER_SIZE];

static PBUFFER_DISPLAY  pInputDisplay;
static PBUFFER_DISPLAY  pOutputDisplay;
static PBUFFER_DISPLAY  pFeatureDisplay;

static FUNCTION_NAMES DeviceCalls[HID_DEVCALLS] = {
                             { HIDD_GET_HID_GUID,               "HidD_GetHidGuid" },
                             { HIDD_GET_FREE_PREPARSED_DATA,    "HidD_GetFreePreparsedData" },
                             { HIDD_GET_CONFIGURATION,          "HidD_GetConfiguration" },
                             { HIDD_SET_CONFIGURATION,          "HidD_SetConfiguration" },
                             { HIDD_FLUSH_QUEUE,                "HidD_FlushQueue" },
                             { HIDD_GET_ATTRIBUTES,             "HidD_GetAttributes" },
                             { HIDD_SET_FEATURE,                "HidD_SetFeature" },
                             { HIDD_GET_FEATURE,                "HidD_GetFeature" },
                             { HIDD_GET_INPUT_REPORT,           "HIDD_GetInputReport" },
                             { HIDD_SET_OUTPUT_REPORT,          "HidD_SetOutputReport" },
                             { HIDD_GET_NUM_INPUT_BUFFERS,      "HidD_GetNumInputBuffers" },
                             { HIDD_SET_NUM_INPUT_BUFFERS,      "HidD_SetNumInputBuffers" },
                             { HIDD_GET_PHYSICAL_DESCRIPTOR,    "HidD_GetPhysicalDescriptor" },
                             { HIDD_GET_MANUFACTURER_STRING,    "HidD_GetManufacturerString" },
                             { HIDD_GET_PRODUCT_STRING,         "HidD_GetProductString" },
                             { HIDD_GET_INDEXED_STRING,         "HidD_GetIndexedString" },
                             { HIDD_GET_SERIAL_NUMBER_STRING,   "HidD_GetSerialNumberString" },
                             { HIDD_GET_MS_GENRE_DESCRIPTOR,    "HidD_GetMsGenreDescriptor" },
                             { HID_READ_REPORT,                 "Read Input Report"        },
                             { HID_WRITE_REPORT,                "Write Report Buffer"      }

};

static FUNCTION_NAMES PpdCalls[HID_PPDCALLS] = {
                             { HIDP_GET_BUTTON_CAPS,            "HidP_GetButtonCaps" },
                             { HIDP_GET_BUTTONS,                "HidP_GetButtons" },
                             { HIDP_GET_BUTTONS_EX,             "HidP_GetButtonsEx" },
                             { HIDP_GET_CAPS,                   "HidP_GetCaps" },
                             { HIDP_GET_DATA,                   "HidP_GetData" },
                             { HIDP_GET_EXTENDED_ATTRIBUTES,    "HidP_GetExtendedAttributes" },
                             { HIDP_GET_LINK_COLL_NODES,        "HidP_GetLinkCollectionNodes" },
                             { HIDP_GET_SCALED_USAGE_VALUE,     "HidP_GetScaledUsageValue" },
                             { HIDP_GET_SPECIFIC_BUTTON_CAPS,   "HidP_GetSpecificButtonCaps" },
                             { HIDP_GET_SPECIFIC_VALUE_CAPS,    "HidP_GetSpecificValueCaps" },
                             { HIDP_GET_USAGES,                 "HidP_GetUsages" },
                             { HIDP_GET_USAGES_EX,              "HidP_GetUsagesEx" },
                             { HIDP_GET_USAGE_VALUE,            "HidP_GetUsageValue" },
                             { HIDP_GET_USAGE_VALUE_ARRAY,      "HidP_GetUsageValueArray" },
                             { HIDP_GET_VALUE_CAPS,             "HidP_GetValueCaps" },
                             { HIDP_INITIALIZE_REPORT_FOR_ID,   "HidP_InitializeReportForID" },
                             { HIDP_MAX_DATA_LIST_LENGTH,       "HidP_MaxDataListLength" },
                             { HIDP_MAX_USAGE_LIST_LENGTH,      "HidP_MaxUsageListLength" },
                             { HIDP_SET_BUTTONS,                "HidP_SetButtons" },
                             { HIDP_SET_DATA,                   "HidP_SetData" },
                             { HIDP_SET_SCALED_USAGE_VALUE,     "HidP_SetScaledUsageValue" },
                             { HIDP_SET_USAGES,                 "HidP_SetUsages" },
                             { HIDP_SET_USAGE_VALUE,            "HidP_SetUsageValue" },
                             { HIDP_SET_USAGE_VALUE_ARRAY,      "HidP_SetUsageValueArray" },
                             { HIDP_TRANSLATE_USAGES,           "HidP_TranslateUsagesToI8042ScanCodes" },
                             { HIDP_UNSET_BUTTONS,              "HidP_UnsetButtons" },
                             { HIDP_UNSET_USAGES,               "HidP_UnsetUsages" },
                             { HIDP_USAGE_LIST_DIFFERENCE,      "HidP_UsageListDifference" },
                             { HID_CLEAR_REPORT,                "Clear Report Buffer"      }
};

static PARAMETER_STATE pState[HID_NUMCALLS] = {
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_HID_GUID
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_FREE_PREPARSED_DATA
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_CONFIGURATION
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_SET_CONFIGURATION
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_FLUSH_QUEUE
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GETATTRIBUTES
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,  TRUE }, // HIDD_SET_FEATURE
                                         { FALSE, FALSE, FALSE,  TRUE, FALSE, FALSE, FALSE, FALSE, FALSE,  TRUE }, // HIDD_GET_FEATURE
                                         { FALSE, FALSE, FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE, FALSE, FALSE }, // HIDD_GET_INPUT_REPORT
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,  TRUE, FALSE }, // HIDD_SET_OUTPUT_REPORT
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_NUM_INPUT_BUFFERS
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_SET_NUM_INPUT_BUFFERS
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_PHYSICAL_DESCRIPTOR
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_MANUFACTURER_STRING
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_PRODUCT_STRING
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_INDEXED_STRING
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_SERIAL_NUMBER_STRING
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDD_GET_MS_GENRE_DESCRIPTOR
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,  TRUE, FALSE, FALSE }, // HID_READ_REPORT
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,  TRUE, FALSE }, // HID_WRITE_BUFFER
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_GET_BUTTON_CAPS
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_BUTTONS
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_BUTTONS_EX
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_GET_CAPS
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_DATA
                                         {  TRUE,  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_EXTENDED_ATTRIBUTES 
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_GET_LINK_COLL_NODES
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_SCALED_USAGE_VALUE
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE }, // HIDP_GET_SPECIFIC_BUTTON_CAPS
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE }, // HIDP_GET_SPECIFIC_VALUE_CAPS
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_USAGES
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_USAGES_EX
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_USAGE_VALUE
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_GET_USAGE_VALUE_ARRAY
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_GET_VALUE_CAPS
                                         {  TRUE,  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE }, // HIDP_INITIALIZE_REPORT_FOR_ID
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_MAX_DATA_LIST_LENGTH
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_MAX_USAGE_LIST_LENGTH
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_SET_BUTTONS
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE }, // HIDP_SET_DATA
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_SET_SCALED_USAGE_VALUE
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_SET_USAGES                                        
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_SET_USAGE_VALUE
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_SET_USAGE_VALUE_ARRAY
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_TRANSLATE_USAGES
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_UNSET_BUTTONS
                                         {  TRUE,  TRUE,  TRUE, FALSE,  TRUE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE }, // HIDP_UNSET_USAGES
                                         { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE }, // HIDP_USAGE_LIST_DIFFERENCE
                                         {  TRUE,  TRUE,  TRUE, FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE }  // HID_CLEAR_BUFFER
                                        }; 


/*****************************************************************************
/* Local function declarations
/*****************************************************************************/

VOID
vLoadExtCalls(
    HWND hExtCalls,
    BOOL IsLogicalDevice
);

VOID
vSetReportType(
    HWND hDlg, 
    LONG lId
);

VOID 
vInitEditText(
    HWND   hText, 
    INT    cbTextSize, 
    CHAR   *pchText
);

VOID vEnableParameters(
    HWND     hDlg, 
    LRESULT  iCallSelection
);

BOOL 
fGetAndVerifyParameters(
    HWND              hDlg, 
    PECDISPLAY_PARAMS pParams
);

BOOL
ECDisp_Execute(
    IN     INT             FuncCall,
    IN OUT PEXTCALL_PARAMS CallParams,
    OUT    PEXTCALL_STATUS CallStatus
);

VOID
ECDisp_DisplayOutput(
    IN HWND            hOutputWindow,
    IN INT             FuncCall,
    IN PEXTCALL_PARAMS Results
);

VOID 
vExecuteAndDisplayOutput(
    HWND              hOutputWindow, 
    PHID_DEVICE       pDevice, 
    INT               iFuncCall, 
    PECDISPLAY_PARAMS pParams
);              

CHAR *pchGetHidAppStatusString(
    NTSTATUS StatusCode
);

VOID
vInitECControls(
    HWND            hDlg,
    USHORT          InputReportByteLength,
    PBUFFER_DISPLAY *ppInputDisplay,
    USHORT          OutputReportByteLength,
    PBUFFER_DISPLAY *ppOutputDisplay,
    USHORT          FeatureReportByteLength,
    PBUFFER_DISPLAY *ppFeatureDisplay,
    BOOL            IsLogicalDevice
);

VOID
BuildReportIDList(
    IN  PHIDP_BUTTON_CAPS  phidButtonCaps,
    IN  USHORT             nButtonCaps,
    IN  PHIDP_VALUE_CAPS   phidValueCaps,
    IN  USHORT             nValueCaps,
    OUT UCHAR            **ppReportIDList,
    OUT INT               *nReportIDs
);

LRESULT CALLBACK
bSetUsagesDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

LRESULT CALLBACK
bSetValueDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

LRESULT CALLBACK
bSetInputBuffDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

LRESULT CALLBACK
bSetDataDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

LRESULT CALLBACK
bSetBufLenDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

LRESULT CALLBACK
bSetInputBuffersDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

LRESULT CALLBACK
bGetIndexedDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

LRESULT CALLBACK
bGetUsageDiffDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
);

BOOL
ConvertStringToUnsignedList(
    IN     INT     iUnsignedSize,
    IN     INT     iBase,
    IN OUT PCHAR   InString,
    OUT    PCHAR   *UnsignedList,
    OUT    PULONG  nUnsigneds
); 

BOOL
ConvertStringToUlongList(
    IN OUT PCHAR   InString,
    OUT    PULONG  *UlongList,
    OUT    PULONG  nUlongs
);

BOOL
ConvertStringToUsageList(
    IN OUT PCHAR   InString,
    OUT    PUSAGE  *UsageList,
    OUT    PULONG  nUsages
);

VOID
ECDisp_MakeGUIDString(
    IN  GUID guid, 
    OUT CHAR szString[]
);

PCHAR
ECDisp_GetHidAppStatusString(
    NTSTATUS StatusCode
);

BOOL
ECDisp_ConvertUlongListToValueList(
    IN  PULONG  UlongList,
    IN  ULONG   nUlongs,
    IN  USHORT  BitSize,
    IN  USHORT  ReportCount,
    OUT PCHAR   *ValueList,
    OUT PULONG  ValueListSize
);

BOOL
SetDlgItemIntHex(
   HWND hDlg, 
   INT nIDDlgItem, 
   UINT uValue, 
   INT nBytes
);

PCHAR
ResolveFunctionName(
    INT Index
);


DWORD WINAPI
ECDisp_ReadThreadProc(
    LPVOID  ThreadContext
);

VOID
DisplayExtendedAttributes(
    IN  HWND                OutputWindow,
    IN  PHIDP_UNKNOWN_TOKEN UnknownList,
    IN  ULONG               UnknownListLength
);

/*****************************************************************************
/* Global function definitions
/*****************************************************************************/

LRESULT CALLBACK
bExtCallDlgProc(
    HWND hDlg,
    UINT message,
    WPARAM wParam,
    LPARAM lParam
)
{
    static PHID_DEVICE          pDevice;
    static CHAR                 szTempBuff[1024]; 
    static CHAR                 szLabel[512];
    static CHAR                 szValue[512];
    static INT                  iLBCounter;
    static UCHAR                *pucInputReportIDs;
    static UCHAR                *pucOutputReportIDs;
    static UCHAR                *pucFeatureReportIDs;
    static INT                  nInputReportIDs;
    static INT                  nOutputReportIDs;
    static INT                  nFeatureReportIDs;
    static HANDLE               ReadThread;
    static READ_THREAD_CONTEXT  readContext;
    
           INT                  iIndex;
           ECDISPLAY_PARAMS     params;
           DWORD                threadID;

    switch(message)
    {
    case WM_INITDIALOG:
    
        /*
        // Initializing the dialog box involves the following steps:
        //  1) Determine from the parameter the pointer to the selected device
        //  2) Initializing the controls in the dialog box to their initial values
        //  3) Send a message that our list of routines has changed 
        */
    
        pDevice = (PHID_DEVICE) lParam;

        vInitECControls(hDlg,
                        pDevice -> Caps.InputReportByteLength,
                        &pInputDisplay,
                        pDevice -> Caps.OutputReportByteLength,
                        &pOutputDisplay,
                        pDevice -> Caps.FeatureReportByteLength,
                        &pFeatureDisplay,
                        LogPnP_IsLogicalDevice(pDevice));

        ReadThread = NULL;
        
        PostMessage(hDlg,
                    WM_COMMAND,
                    IDC_EXTCALLS + (CBN_SELCHANGE << 16),
                    (LPARAM) GetDlgItem(hDlg,IDC_EXTCALLS));
        break; 

    case WM_COMMAND:
        switch(LOWORD(wParam))
        {
        case IDC_EXTCALLS:
            switch (HIWORD(wParam))
            {
            case CBN_SELCHANGE:
                iIndex = (INT) SendDlgItemMessage(hDlg, 
                                                  IDC_EXTCALLS,
                                                  CB_GETCURSEL,
                                                  0,
                                                  0);
                vEnableParameters(hDlg,
                                  SendDlgItemMessage(hDlg, 
                                                     IDC_EXTCALLS,
                                                     CB_GETITEMDATA,
                                                     iIndex,
                                                     0));
                break;
            }
            break;

        case IDC_INPUT_SELECT:
            if (CBN_SELCHANGE == HIWORD(wParam))
            {
                BufferDisplay_ChangeSelection(pInputDisplay);
            }
            break;

        case IDC_OUTPUT_SELECT:
            if (CBN_SELCHANGE == HIWORD(wParam)) 
            {
                 BufferDisplay_ChangeSelection(pOutputDisplay);
            }
            break;

        case IDC_FEATURE_SELECT:
            if (CBN_SELCHANGE == HIWORD(wParam)) 
            {
                 BufferDisplay_ChangeSelection(pFeatureDisplay);
            }
            break;
             
        case IDC_EXECUTE:
            /*
            // Get the parameters and verify that they are all correct
            //   If there is an error, display an error message and
            //   don't continue any further.
            */

            if ( !fGetAndVerifyParameters(hDlg, &params) ) 
            {
                ECDISP_ERROR(hDlg, "Error: One or more parameters are invalid");
            }

            /*
            // Else the parameters are valid and we can execute the call
            */
              
            else
            {
                iIndex = (INT) SendDlgItemMessage(hDlg, IDC_EXTCALLS, CB_GETCURSEL, 0, 0);
                iIndex = (INT) SendDlgItemMessage(hDlg, IDC_EXTCALLS, CB_GETITEMDATA, iIndex, 0);

                /*
                // Now that we know the function to execute we need to execute it
                //    and output the data
                */

                SendDlgItemMessage(hDlg, IDC_CALLOUTPUT, LB_RESETCONTENT, 0, 0);
                vExecuteAndDisplayOutput(GetDlgItem(hDlg, IDC_CALLOUTPUT), pDevice, iIndex, &params);
            }
            break;  /* end IDC_EXECUTE case */

        /*
        // Start up a read thread that can read input reports while
        //  we operate on the other stuff
        */
        
        case IDC_READ_SYNCH:
        case IDC_READ_ASYNCH:
        
            if (NULL == ReadThread) 
            {
                readContext.HidDevice = pDevice;
                readContext.TerminateThread = FALSE;
                readContext.DoOneRead = TRUE;
                readContext.DisplayEvent = NULL;
                readContext.DisplayWindow = hDlg;

                ReadThread = CreateThread(  NULL,
                                            0,
                                            (LOWORD(wParam) == IDC_READ_SYNCH) ? 
                                            SynchReadThreadProc :
                                            AsynchReadThreadProc,
                                            (LPVOID) &readContext,
                                            0,
                                            &threadID);

                if (NULL == ReadThread) 
                {
                    MessageBox(hDlg,
                               "Unable to create read thread",
                               HCLIENT_ERROR,
                               MB_ICONEXCLAMATION);
                }
                else 
                {
                    EnableWindow(GetDlgItem(hDlg, IDC_READ_SYNCH),
                                 (LOWORD(wParam) == IDC_READ_SYNCH));

                    EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH),
                                 (LOWORD(wParam) == IDC_READ_ASYNCH));

                    SetWindowText(GetDlgItem(hDlg, LOWORD(wParam)),
                                  "Stop Read Thread");
                                 
                    EnableWindow(GetDlgItem(hDlg, IDC_CANCEL), FALSE);
                }
            }
            else 
            {
                readContext.TerminateThread = TRUE;

                WaitForSingleObject(ReadThread, INFINITE);

                ReadThread = NULL;
                
                SetWindowText(GetDlgItem(hDlg, IDC_READ_SYNCH),
                              "Start Synchronous Read Thread");

                SetWindowText(GetDlgItem(hDlg, IDC_READ_ASYNCH),
                              "Start Asynchronous Read Thread");

                EnableWindow(GetDlgItem(hDlg, IDC_READ_SYNCH), TRUE);                                     
                EnableWindow(GetDlgItem(hDlg, IDC_READ_ASYNCH), TRUE);                                     
                EnableWindow(GetDlgItem(hDlg, IDC_CANCEL), TRUE);                                     
            }                                     
            break;    

        case IDC_CANCEL:
            BufferDisplay_Destroy(pInputDisplay);
            BufferDisplay_Destroy(pOutputDisplay);
            BufferDisplay_Destroy(pFeatureDisplay);
            EndDialog(hDlg, 0);
            break;
        }
        break;

    case WM_CLOSE:
        PostMessage(hDlg, WM_COMMAND, IDC_CANCEL, 0);
        break;

    } 
    return FALSE;
}

VOID
vLoadExtCalls(
    HWND hExtCalls,
    BOOL IsLogicalDevice
)
{
    INT  iIndex;
    UINT uiIndex;

    /*
    // If we are a physical device, load the physical device specific calls as well
    */
    
    if (!IsLogicalDevice) 
    {
        for (uiIndex = 0; uiIndex < HID_DEVCALLS; uiIndex++) 
        {
            iIndex = (INT) SendMessage(hExtCalls, 
                                       CB_ADDSTRING, 
                                       0, 
                                       (LPARAM) DeviceCalls[uiIndex].szFunctionName);

            if (CB_ERR != iIndex || CB_ERRSPACE != iIndex) 
            {
                SendMessage(hExtCalls,
                            CB_SETITEMDATA,
                            iIndex, 
                            DeviceCalls[uiIndex].uiIndex);
            }
        }
    }

    /*
    // Load the other device calls no matter what
    */

    for (uiIndex = 0; uiIndex < HID_PPDCALLS; uiIndex++)
    {
        iIndex = (INT) SendMessage(hExtCalls, 
                                   CB_ADDSTRING, 
                                   0, 
                                   (LPARAM) PpdCalls[uiIndex].szFunctionName);

        if (CB_ERR != iIndex || CB_ERRSPACE != iIndex) 
        {
            SendMessage(hExtCalls,
                        CB_SETITEMDATA,
                        iIndex, 
                        PpdCalls[uiIndex].uiIndex);
        }
    }
    SendMessage(hExtCalls, CB_SETCURSEL, 0, 0);

    return;
}

VOID vSetReportType(
    HWND hDlg, 
    LONG lId
)
{
    CheckRadioButton(hDlg, IDC_INPUT, IDC_FEATURE, lId);
    return;
}

VOID 
vInitEditText(
    HWND hText, 
    INT  cbTextSize, 
    CHAR *pchText
)
{
    SendMessage(hText, EM_SETLIMITTEXT, (WPARAM) cbTextSize, 0); 
    SendMessage(hText, EM_REPLACESEL, 0, (LPARAM) pchText);

    return;
}

VOID vEnableParameters(
    HWND     hDlg,
    LRESULT  iCallSelection
)
{
    EnableWindow(GetDlgItem(hDlg, IDC_INPUT), pState[iCallSelection-1].fInputReport);
    EnableWindow(GetDlgItem(hDlg, IDC_OUTPUT), pState[iCallSelection-1].fOutputReport);
    EnableWindow(GetDlgItem(hDlg, IDC_FEATURE), pState[iCallSelection-1].fFeatureReport);
    EnableWindow(GetDlgItem(hDlg, IDC_REPORTID), pState[iCallSelection-1].fReportID);
    EnableWindow(GetDlgItem(hDlg, IDC_USAGEPAGE), pState[iCallSelection-1].fUsagePage);
    EnableWindow(GetDlgItem(hDlg, IDC_USAGE), pState[iCallSelection-1].fUsage);
    EnableWindow(GetDlgItem(hDlg, IDC_LINKCOLL), pState[iCallSelection-1].fLinkCollection);
    EnableWindow(GetDlgItem(hDlg, IDC_INPUT_SELECT), pState[iCallSelection-1].fInputReportSelect);
    EnableWindow(GetDlgItem(hDlg, IDC_OUTPUT_SELECT), pState[iCallSelection-1].fOutputReportSelect);
    EnableWindow(GetDlgItem(hDlg, IDC_FEATURE_SELECT), pState[iCallSelection-1].fFeatureReportSelect);

    return;
}
    
BOOL 
fGetAndVerifyParameters(
    HWND              hDlg, 
    PECDISPLAY_PARAMS pParams
)
{
    /*
    // Declare a text buffer of size 7 since the parameter limit is at most 6
    //   characters in the edit box.  
    */
    
    CHAR    WindowText[7];
    BOOL    fStatus = TRUE;
    PCHAR   nptr;
    
    if (IsDlgButtonChecked(hDlg, IDC_INPUT)) 
    {
        pParams -> ReportType = HidP_Input;
    }
    else if (IsDlgButtonChecked(hDlg, IDC_OUTPUT))
    {
        pParams -> ReportType = HidP_Output;
    }
    else
    {
        pParams -> ReportType = HidP_Feature;
    }

    /*
    // Get and verify the usage page window text;
    */
    
    GetWindowText(GetDlgItem(hDlg, IDC_USAGEPAGE), WindowText, 7);

    pParams -> UsagePage = (USAGE) strtol(WindowText, &nptr, 16);

    if (*nptr != '\0') 
    {
        fStatus = FALSE;
        pParams -> UsagePage = 0;
    }

    /*
    // Get and verify the usage window text
    */

    GetWindowText(GetDlgItem(hDlg, IDC_USAGE), WindowText, 7);

    pParams -> Usage = (USAGE) strtol(WindowText, &nptr, 16);

    if (*nptr != '\0') 
    {
        fStatus = FALSE;
        pParams -> Usage = 0;
    }
    
    /*
    // Get and verify the link collection window text
    */

    GetWindowText(GetDlgItem(hDlg, IDC_LINKCOLL), WindowText, 7);

    pParams -> LinkCollection = (USAGE) strtol(WindowText, &nptr, 16);

    if (*nptr != '\0')
    {
        fStatus = FALSE;
        pParams -> LinkCollection = 0;
    }
    
    GetWindowText(GetDlgItem(hDlg, IDC_REPORTID), WindowText, 7);

    pParams -> ReportID = (UCHAR) strtol(WindowText, &nptr, 10);
 
    if (*nptr != '\0') 
    {
        fStatus = FALSE;
        pParams -> ReportID = 0;
    }

    return (fStatus);
}

VOID
vInitECControls(
    HWND                hDlg,
    USHORT              InputReportByteLength,
    PBUFFER_DISPLAY     *ppInputDisplay,
    USHORT              OutputReportByteLength,
    PBUFFER_DISPLAY     *ppOutputDisplay,
    USHORT              FeatureReportByteLength,
    PBUFFER_DISPLAY     *ppFeatureDisplay,
    BOOL                IsLogicalDevice
)
{
    BOOLEAN     fInitStatus;

    /*
    // Begin by initializing the combo box with the calls that can be executed
    */

    vLoadExtCalls(GetDlgItem(hDlg, IDC_EXTCALLS), IsLogicalDevice);

    /*
    // Set the radio buttons initially to the input report type
    */
    
    vSetReportType(hDlg, IDC_INPUT);
    
    /*
    // Initialize the edit controls text
    */

    vInitEditText(GetDlgItem(hDlg, IDC_USAGEPAGE), 6, "0x0000");
    vInitEditText(GetDlgItem(hDlg, IDC_USAGE), 6, "0x0000");
    vInitEditText(GetDlgItem(hDlg, IDC_LINKCOLL), 2, "0");
    vInitEditText(GetDlgItem(hDlg, IDC_REPORTID), 3, "0");

    /*
    // Initialize the report buffer boxes
    */

    fInitStatus = BufferDisplay_Init(GetDlgItem(hDlg, IDC_INPUT_SELECT),
                                     GetDlgItem(hDlg, IDC_INPUT_BUFFER),
                                     NUM_INPUT_BUFFERS,
                                     InputReportByteLength,
                                     HidP_Input,
                                     ppInputDisplay);

    if (!fInitStatus) 
    {
        ECDISP_ERROR(hDlg, "Error initializing input buffer display");
    }

    fInitStatus = BufferDisplay_Init(GetDlgItem(hDlg, IDC_OUTPUT_SELECT),
                                     GetDlgItem(hDlg, IDC_OUTPUT_BUFFER),
                                     NUM_OUTPUT_BUFFERS,
                                     OutputReportByteLength,
                                     HidP_Output,
                                     ppOutputDisplay);

    if (!fInitStatus) 
    {
        ECDISP_ERROR(hDlg,  "Error initializing output buffer display");
    }

    fInitStatus = BufferDisplay_Init(GetDlgItem(hDlg, IDC_FEATURE_SELECT),
                                     GetDlgItem(hDlg, IDC_FEATURE_BUFFER),
                                     NUM_FEATURE_BUFFERS,
                                     FeatureReportByteLength,
                                     HidP_Feature,
                                     ppFeatureDisplay);

    if (!fInitStatus) 
    {
        ECDISP_ERROR(hDlg, "Error initializing feature buffer display");
    }

    /*
    // Reset the output box content
    */
    
    SendMessage(GetDlgItem(hDlg, IDC_CALLOUTPUT), LB_RESETCONTENT, 0, 0);
    return;
}
    
BOOL
ECDisp_Execute(
    IN     INT             FuncCall,
    IN OUT PEXTCALL_PARAMS CallParams,
    OUT    PEXTCALL_STATUS CallStatus
)
/*++
RoutineDescription:
    This routine is a complex routine for executing all of the functions.  The
    routine was originally developed with consideration for future use that 
    never materialized.  

    It makes use of the calls in extcalls.c which basically execute the given
    function and does some verification on the buffers that are passed down to 
    HID.DLL.  

    The input parameters are specify the function call to execute, the 
    call parameters structures and the call status structure.

    If any further buffers are needed for the specific calls, they will be
    allocated here.  

    The CallStatus parameters is a structure set by the ExtCalls_ routines

    Future versions of the HClient sample may remove this routine and/or the
    ExtCalls_ routines to simply the code.
--*/
{
    BOOL                ExecuteStatus;
    HIDP_VALUE_CAPS     ValueCaps;
    USHORT              ValueCapsLength;
    PULONG              ValueList;

    NTSTATUS            status;
    DWORD               numBytes;
    ULONG               size;

    /*
    // Initially assume everything will go correctly and will set otherwise
    //    depending on the function call.
    */

    CallStatus -> IsHidError = FALSE;

    switch (FuncCall) 
    {
    case HID_READ_REPORT:
        CallStatus -> IsHidError = !ReadFile(CallParams -> DeviceHandle,
                                             CallParams -> ReportBuffer,
                                             CallParams -> ReportLength,
                                             &numBytes,
                                             NULL);
        return (TRUE);
        break;

    case HID_WRITE_REPORT:
        CallStatus -> IsHidError = !WriteFile(CallParams -> DeviceHandle,
                                              CallParams -> ReportBuffer,
                                              CallParams -> ReportLength,
                                              &numBytes,
                                              NULL);
        return (TRUE);
        break;

    case HIDD_FLUSH_QUEUE:
        CallStatus -> IsHidError = !HidD_FlushQueue(CallParams -> DeviceHandle);
        return (TRUE);
        break;

    case HIDD_GET_HID_GUID:
        CallParams -> List = malloc(sizeof(GUID));

        if (NULL != CallParams -> List) 
        {
            HidD_GetHidGuid((GUID *) CallParams -> List);
        }
        return (NULL != CallParams -> List);
        break;

    case HIDD_GET_PREPARSED_DATA:
        CallStatus -> IsHidError = !HidD_GetPreparsedData(CallParams -> DeviceHandle,
                                                          CallParams -> ppPd);
        return (TRUE);

    case HIDD_FREE_PREPARSED_DATA:
        CallStatus -> IsHidError = !HidD_FreePreparsedData(CallParams -> Ppd);
        return (TRUE);

    case HIDD_GET_ATTRIBUTES:
        CallParams -> List = malloc(sizeof(HIDD_ATTRIBUTES));

        if (NULL != CallParams -> List) 
        {
            CallStatus -> IsHidError = !HidD_GetAttributes(CallParams -> DeviceHandle,
                                                           CallParams -> List);
        }
        return (NULL != CallParams -> List);
        
    case HIDD_GET_FEATURE:
        *(CallParams -> ReportBuffer) = CallParams -> ReportID;

        CallStatus -> IsHidError = !HidD_GetFeature(CallParams -> DeviceHandle,
                                                    CallParams -> ReportBuffer,
                                                    CallParams -> ReportLength);
        return (TRUE);

    case HIDD_SET_FEATURE:
        CallStatus -> IsHidError = !HidD_SetFeature(CallParams -> DeviceHandle,
                                                    CallParams -> ReportBuffer,
                                                    CallParams -> ReportLength);
        return (TRUE);

    case HIDD_GET_INPUT_REPORT:
        *(CallParams -> ReportBuffer) = CallParams -> ReportID;

        CallStatus -> IsHidError = !HidD_GetInputReport(CallParams -> DeviceHandle,
                                                        CallParams -> ReportBuffer,
                                                        CallParams -> ReportLength);
        return (TRUE);

    case HIDD_SET_OUTPUT_REPORT:
        CallStatus -> IsHidError = !HidD_SetOutputReport(CallParams -> DeviceHandle,
                                                         CallParams -> ReportBuffer,
                                                         CallParams -> ReportLength);
        return (TRUE);

    case HIDD_GET_NUM_INPUT_BUFFERS:
        CallStatus -> IsHidError = !HidD_GetNumInputBuffers(CallParams -> DeviceHandle,
                                                            &CallParams -> Value);
        return (TRUE);

    case HIDD_SET_NUM_INPUT_BUFFERS:
        CallStatus -> IsHidError = !HidD_SetNumInputBuffers(CallParams -> DeviceHandle,
                                                            CallParams -> Value);

        return (TRUE);

    case HIDD_GET_PHYSICAL_DESCRIPTOR:
        CallParams -> List = (PCHAR) malloc (CallParams -> ListLength);

        if (NULL != CallParams -> List ) 
        {
            CallStatus -> IsHidError = !HidD_GetPhysicalDescriptor(CallParams -> DeviceHandle,
                                                                   CallParams -> List,
                                                                   CallParams -> ListLength);
        }
        return (NULL != CallParams -> List);

    case HIDD_GET_MANUFACTURER_STRING:
        
        CallParams -> List = (PWCHAR) malloc (CallParams -> ListLength);

        if (NULL != CallParams -> List ) 
        {
            CallStatus -> IsHidError = !HidD_GetManufacturerString(CallParams -> DeviceHandle,
                                                                   CallParams -> List,
                                                                   CallParams -> ListLength);
        }
        return (NULL != CallParams -> List);

    case HIDD_GET_PRODUCT_STRING:
        CallParams -> List = (PWCHAR) malloc (CallParams -> ListLength);

        if (NULL != CallParams -> List ) 
        {
            CallStatus -> IsHidError = !HidD_GetProductString(CallParams -> DeviceHandle,
                                                             CallParams -> List,
                                                             CallParams -> ListLength);
        }
        return (NULL != CallParams -> List);

    case HIDP_GET_EXTENDED_ATTRIBUTES:
        CallParams -> List = (PWCHAR) malloc (CallParams -> ListLength);
        if (NULL != CallParams -> List )
        {
            status = pfnHidP_GetExtendedAttributes(CallParams -> ReportType,
                                                  (USHORT) CallParams -> Index,
                                                   CallParams -> Ppd,
                                                   CallParams -> List,
                                                   &CallParams -> ListLength);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
        }
        return (NULL != CallParams -> List);
        
    case HIDD_GET_INDEXED_STRING:
        CallParams -> List = (PWCHAR) malloc (CallParams -> ListLength);

        if (NULL != CallParams -> List ) 
        {
            CallStatus -> IsHidError = !HidD_GetIndexedString(CallParams -> DeviceHandle,
                                                              CallParams -> Index,
                                                              CallParams -> List,
                                                              CallParams -> ListLength);
        }
        return (NULL != CallParams -> List);
        
    case HIDD_GET_SERIAL_NUMBER_STRING:
        CallParams -> List = (PWCHAR) malloc (CallParams -> ListLength);

        if (NULL != CallParams -> List ) 
        {
            CallStatus -> IsHidError = !HidD_GetSerialNumberString(CallParams -> DeviceHandle,
                                                                   CallParams -> List,
                                                                   CallParams -> ListLength);
        }
        return (NULL != CallParams -> List);

    case HIDD_GET_MS_GENRE_DESCRIPTOR:
        CallParams -> List = (PCHAR) malloc (CallParams -> ListLength);

        if (NULL != CallParams -> List ) 
        {
            CallStatus -> IsHidError = !HidD_GetMsGenreDescriptor(CallParams -> DeviceHandle,
                                                                  CallParams -> List,
                                                                  CallParams -> ListLength);
        }
        return (NULL != CallParams -> List);

    case HIDP_GET_BUTTON_CAPS:
        size = CallParams -> ListLength * sizeof(HIDP_BUTTON_CAPS);

        CallParams -> List = malloc(size);

        if (NULL != CallParams -> List) 
        {
            status = HidP_GetButtonCaps(CallParams -> ReportType,
                                        CallParams -> List,
                                        (PUSHORT) &CallParams -> ListLength,
                                        CallParams -> Ppd);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
        }
        return (NULL != CallParams -> List);

    case HIDP_GET_BUTTONS:

        CallParams -> ListLength = HidP_MaxUsageListLength(CallParams -> ReportType,
                                                           CallParams -> UsagePage,
                                                           CallParams -> Ppd);

        CallParams -> List = malloc(CallParams -> ListLength * sizeof(USAGE));

        if (NULL != CallParams -> List) 
        {
            status = HidP_GetButtons(CallParams -> ReportType,
                                     CallParams -> UsagePage,
                                     CallParams -> LinkCollection,
                                     CallParams -> List,
                                     &CallParams -> ListLength,
                                     CallParams -> Ppd,
                                     CallParams -> ReportBuffer,
                                     CallParams -> ReportLength);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
        }
        return (NULL != CallParams -> List);

    case HIDP_GET_BUTTONS_EX:

        CallParams -> ListLength = HidP_MaxUsageListLength(CallParams -> ReportType,
                                                           CallParams -> UsagePage,
                                                           CallParams -> Ppd);

        CallParams -> List = malloc(CallParams -> ListLength * sizeof(USAGE_AND_PAGE));

        if (NULL != CallParams -> List) 
        {
            status = HidP_GetButtonsEx(CallParams -> ReportType,
                                       CallParams -> LinkCollection,
                                       CallParams -> List,
                                       &CallParams -> ListLength,
                                       CallParams -> Ppd,
                                       CallParams -> ReportBuffer,
                                       CallParams -> ReportLength);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
        }
        return (NULL != CallParams -> List);

        
    case HIDP_GET_CAPS:

        CallParams -> ListLength = sizeof(HIDP_CAPS);

        CallParams -> List = malloc(sizeof(HIDP_CAPS));

        if (NULL != CallParams -> List)
        {
            status = HidP_GetCaps(CallParams -> Ppd, CallParams -> List);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
        }
        return (NULL != CallParams -> List);

    case HIDP_GET_DATA:

        CallParams -> ListLength = HidP_MaxDataListLength(CallParams -> ReportType,
                                                          CallParams -> Ppd);

        CallParams -> List = malloc(CallParams -> ListLength * sizeof(HIDP_DATA));

        if (NULL != CallParams -> List)
        {
            status = HidP_GetData(CallParams -> ReportType,
                                  CallParams -> List,
                                  &CallParams -> ListLength,
                                  CallParams -> Ppd,
                                  CallParams -> ReportBuffer,
                                  CallParams -> ReportLength);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
        }
        return (NULL != CallParams -> List);

    case HIDP_GET_LINK_COLL_NODES:
        CallParams -> List = malloc(CallParams -> ListLength * sizeof(HIDP_LINK_COLLECTION_NODE));

        if (NULL != CallParams -> List)
        {
            status = HidP_GetLinkCollectionNodes(CallParams -> List,
                                                 &CallParams -> ListLength,
                                                 CallParams -> Ppd);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
        }
        return (NULL != CallParams -> List);

    case HIDP_GET_SCALED_USAGE_VALUE:

        status = HidP_GetScaledUsageValue(CallParams -> ReportType,
                                          CallParams -> UsagePage,
                                          CallParams -> LinkCollection,
                                          CallParams -> Usage,
                                         &CallParams -> ScaledValue,
                                          CallParams -> Ppd,
                                          CallParams -> ReportBuffer,
                                          CallParams -> ReportLength);

        CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
        CallStatus -> HidErrorCode = status;

        return (TRUE);

    case HIDP_GET_SPECIFIC_BUTTON_CAPS:

        CallParams -> List = malloc(CallParams -> ListLength * sizeof(HIDP_BUTTON_CAPS));

        if (NULL != CallParams -> List)
        {
            status = HidP_GetSpecificButtonCaps(CallParams -> ReportType,
                                                CallParams -> UsagePage,
                                                CallParams -> LinkCollection,
                                                CallParams -> Usage,
                                                CallParams -> List,
                                                (PUSHORT) &CallParams -> ListLength,
                                                CallParams -> Ppd);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
       }
       return (NULL != CallParams -> List);
        
    case HIDP_GET_SPECIFIC_VALUE_CAPS:

        CallParams -> List = malloc(CallParams -> ListLength * sizeof(HIDP_VALUE_CAPS));

        if (NULL != CallParams -> List)
        {
            status = HidP_GetSpecificValueCaps(CallParams -> ReportType,
                                               CallParams -> UsagePage,
                                               CallParams -> LinkCollection,
                                               CallParams -> Usage,
                                               CallParams -> List,
                                               (PUSHORT) &CallParams -> ListLength,
                                               CallParams -> Ppd);

            CallStatus -> IsHidError = (HIDP_STATUS_SUCCESS != status);
            CallStatus -> HidErrorCode = status;
       }
       return (NULL != CallParams -> List);

    case HIDP_GET_USAGES:
        CallParams -> ListLength = HidP_MaxUsageListLength(CallParams -> ReportType,
                                                       