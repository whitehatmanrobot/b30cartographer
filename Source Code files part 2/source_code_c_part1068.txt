                                      
  db 142,144,148,150,157,159,161,163,165,167,171,173,175,176,178,024
   ;                                               
  db 007,091,180,187,189,064,181,029,045,030,193,184,185,195,110,112


;
; ---------------------------------------------------------------
;
;      World Trade Case Mappings for Code Page 869
;
; ---------------------------------------------------------------
;
Greek_869_ucase label word
 ctable  <,'UCASE  ',128>
   ;                                               
  db "","","",""," ","",""," ","","","","","","","",""
   ;                                               
  db "","","","","","","","","","","","","","","",""
   ;                                               
  db "","","","","","","","","","","","","","","",""
   ;                                               
  db 176,177,178,179,180,"","","","",185,186,187,188,"","",191
   ;                                               
  db 192,193,194,195,196,197,"","",200,201,202,203,204,205,206,""
   ;                                               
  db "","","","","","","","","",217,218,219,220,"","",223
   ;                                               
  db "","","","","","","","","","","","","","","",""
   ;                                               
  db "","","","","","","","","","","","","","",254,255
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\disp_win\disp_win.asm ===
;
; Windows-NT MVDM Japanese DOS/V $DISP.SYS Dispatch Driver (High)
;

	.286
	include struc.inc
	include disp_win.inc
	include vint.inc

;----------------------------------------------------------------------------;
;                             Code Segment                                   
;----------------------------------------------------------------------------;
TEXT	segment byte public
	assume	cs:TEXT,ds:TEXT,es:TEXT

	org     0               ; drivers should start at address 0000h
	                        ; this will cause a linker warning - ignore it.

	public	Header
Header:                         ; device driver header
	DD	fNEXTLINK       ; link to next device driver
	DW	fCHARDEVICE+fOPENCLOSE  ; device attribute word: 
					; char.device+open/close
	DW	Strat           ; 'Strat' entry point
	DW	Intr            ; 'Intr' entry point
	DB	'NTDISP2$'      ; logical device name (needs to be 8 chars)


;----------------------------------------------------------------------------;
; data variables
;----------------------------------------------------------------------------;

	public	null
null     	dw      0       ; dummy to do a quick erase of pAtomValue
pAtomVal 	dw offset null  ; pointer to value of result of atom search
MemEnd   	dw  ddddhList   ; end of used memory:      initially AtomList
MaxMem   	dw  ddddhList   ; end of available memory: initially AtomList
lpHeader	dd      0       ; far pointer to request header
org_int10_add	dd	0	; $disp.sys's int10 vector
new_int10_add	dd	0	; $disp.sys's int10 vector
pass_disp_add	dd	0	; Original int10 vector
org_int08_add	dd	0	; original int 08 vector
dbcs_vector	dd	0	; DBCS Vector address
use_ntdisp_flag	db	0
display_mode	db	3
window_mode	db	0
nt_cons_mode	db	0
disp_init_flag	db	0
;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/9/93 yasuho
IMEStatusLines	db	0

setmode_flag	db      0	; for IME status line
cursor_pos	dw	0050h
		dw	0040h
cursor_type	dw	0060h
		dw	0040h
bios_disp_mode	dw	0049h
		dw	0040h
bios_disp_hight	dw	0085h
		dw	0040h

packet_len	dw	30
video_buffer	dw	0
		dw	0
dmode_add	dw	0
		dw	0
windowed_add	dw	0
		dw	0
nt_cons_add	dw	0
		dw	0
disp_sys_init	dw	0
		dw	0

fullsc_resume_ptr   dw	0
		    dw	0
ias_setmode_add dw	0
		dw	0
;----------------------------------------------------------------------------;
; Dispatch table for the interrupt routine command codes                     
;----------------------------------------------------------------------------;

	public	Dispatch
Dispatch:                       
	DW    Init            ;  0 = init driver 
	DW    Error           ;  1 = Media Check         (block devices only) 
	DW    Error           ;  2 = build BPB           (block devices only)
	DW    Error           ;  3 = I/O control read         (not supported)
	DW    Error           ;  4 = read (input) from device  (int 21h, 3Fh)
	DW    Error           ;  5 = nondestructive read      (not supported)  
	DW    Error           ;  6 = ret input status        (int 21h, 4406h) 
	DW    Error           ;  7 = flush device input buffer (not supportd)         
	DW    Error           ;  8 = write (output) to device  (int 21h, 40h)
	DW    Error           ;  9 = write with verify (== write)  (21h, 40h)
	DW    Error           ; 10 = ret output status       (int 21h, 4407h)
	DW    Error           ; 11 = flush output buffer      (not supported) 
	DW    Error           ; 12 = I/O control write        (not supported)
	DW    Success         ; 13 = device open               (int 21h, 3Dh)
	DW    Success         ; 14 = device close              (int 21h, 3Eh)
	DW    Error           ; 15 = removable media     (block devices only)
	DW    Error           ; 16 = Output until Busy   (mostly for spooler)
	DW    Error           ; 17 = not used
	DW    Error           ; 18 = not used
	DW    Error           ; 19 = generic IOCTL            (not supported)
	DW    Error           ; 20 = not used
	DW    Error           ; 21 = not used
	DW    Error           ; 22 = not used
	DW    Error           ; 23 = get logical device  (block devices only)
	DW    Error           ; 24 = set logical device  (block devices only)

;----------------------------------------------------------------------------;
; Dispatch table for the int 10h routine command codes                     
;----------------------------------------------------------------------------;
	public	table_int10
table_int10:
	DW	mode_set	; 00 = Video mode set
	DW	ctype_set	; 01 = Cursor type set
	DW	cpos_set	; 02 = Cursor position set
	DW	cpos_get	; 03 = Cursor position get
	DW	go_disp_sys	; 04 = Not used
	DW	go_disp_sys	; 05 = Use $disp.sys
	DW	scroll_up	; 06 = Scroll up
	DW	scroll_down	; 07 = Scroll down
	DW	read_cell	; 08 = read chractor with attribute
	DW	write_cell	; 09 = write chractor with attribute
	DW	write_char	; 0A = write chractor
	DW	go_disp_sys	; 0B = Not used
	DW	go_disp_sys	; 0C = Use $disp.sys
	DW	go_disp_sys	; 0D = Use $disp.sys
	DW	write_tty	; 0E = write teletype
	DW	disply_get	; 0F = get display status
	DW	palet_set	; 10 = set palet registor
	DW	char_set	; 11 = set sbcs charactor
	DW	go_disp_sys	; 12 = Not used
	DW	write_string	; 13 = read / write string
	DW	go_disp_sys	; 14 = Not used
	DW	go_disp_sys	; 15 = Not used
	DW	go_disp_sys	; 16 = Not used
	DW	go_disp_sys	; 17 = Not used
	DW	go_disp_sys	; 18 = Use $disp.sys
	DW	go_disp_sys	; 19 = Not used
	DW	go_disp_sys	; 1A = Use $disp.sys
	DW	go_disp_sys	; 1B = Not used
	DW	go_disp_sys	; 1C = Not used
	DW	getset_status	; 1D = IME status line manipulate functions

;; #3176: vz display white letter on white screen
;; 11/27/93 reviewed by yasuho
;;
;; save buffer for color palette and overscan registers.
;; what we did is we grab an initial set of there values, put it here and
;; then monitor int10 ah=10xx function to update these value accordiningly
;; so when win->fullscreen or reenter fullscreen happens, we know what
;; should be the palette/overscan/DAC should be and retore them
;; The reason that we are doing this is because console has differernt
;; palette and DAC(only the first 16 colors).
NUM_PALETTE_REGISTERS	equ	16
	public	Palette_Registers
Palette_Registers   label   BYTE
	DB	NUM_PALETTE_REGISTERS dup(?)

Over_Scan_Register  label   byte
	DB	?

NUM_DAC_REGISTERS	equ	256
	public	DAC_Registers
DAC_Registers	    label   BYTE
	DB	NUM_DAC_REGISTERS * 3 dup(?);

;; #3741: WordStar6.0: Hilight color is changed after running in window
;; 12/2/93 yasuho
	public	Default_Palette_Regs
Default_Palette_Regs	label	byte
	DB	NUM_PALETTE_REGISTERS dup(?)
Default_Over_Scan_Regs	label	byte
	DB	?
Default_DAC_Regs	label	byte
	DB	16 * 3 dup(?);


;; #4210: Status of $IAS not display in full-screen
;; 12/16/93 yasuho
IMEStat_buffer	db	160 dup(?)

;----------------------------------------------------------------------------;
; Strategy Routine
;----------------------------------------------------------------------------;
; device driver Strategy routine, called by MS-DOS kernel with
; ES:BX = address of request header
;----------------------------------------------------------------------------;

	public	Strat
Strat   PROC FAR
	mov     word ptr cs:[lpHeader], bx      ; save the address of the 
	mov     word ptr cs:[lpHeader+2], es    ; request into 'lpHeader', and
	ret                                     ; back to MS-DOS kernel
Strat   ENDP


;----------------------------------------------------------------------------;
; Intr
;----------------------------------------------------------------------------;
; Device driver interrupt routine, called by MS-DOS kernel after call to     
; Strategy routine                                                           
; This routine basically calls the appropiate driver routine to handle the
; requested function. 
; Routines called by Intr expect:
;       ES:DI   will have the address of the request header
;       DS      will be set to cs
; These routines should only affect ax, saving es,di,ds at least
;
; Input: NONE   Output: NONE   -- data is transferred through request header
;
;----------------------------------------------------------------------------;

	public	Intr
Intr    PROC FAR
	push	ds
	push	es
	pusha                   ; save registers
	pushf                   ; save flags
	cld                     ; direction flag: go from low to high address
				
	mov     si, cs          ; make local data addressable
	mov     ds, si          ; by setting ds = cs
			
	les     di, [lpHeader]  ; ES:DI = address of req.header

	xor     bx, bx        ; erase bx
	mov     bl,es:[di].ccode ; get BX = command code (from req.header)
	mov	si,bx
	shl	si,1
	add	si,offset dispatch
	
	.IF <bx gt MaxCmd>                ; check to make sure we have a valid
		call    Error             ; command code
	.ELSE                             ; else, call command-code routine,  
		call    [si]              ; indexed from Dispatch table
	.ENDIF                            ; (Ebx used to allow scaling factors)

	or      ax, fDONE       ; merge Done bit into status and
	mov     es:[di].stat,ax ; store status into request header
	
	popf                    ; restore registers
	popa                    ; restore flags
	pop	es
	pop	ds
	ret                     ; return to MS-DOS kernel
Intr    ENDP

;----------------------------------------------------------------------------;
; Success: When the only thing the program needs to do is set status to OK 
;----------------------------------------------------------------------------;

	public	Success
Success PROC NEAR
	xor     ax, ax          ; set status to OK
	ret
Success ENDP

;----------------------------------------------------------------------------;
; error: set the status word to error: unknown command                       
;----------------------------------------------------------------------------;
	public	Error
Error   PROC    NEAR            
	mov     ax, fERROR + fUNKNOWN_E  ; error bit + "Unknown command" code
	ret                     
Error   ENDP

;----------------------------------------------------------------------------;
; Int10_dispatch: 
;----------------------------------------------------------------------------;

	public	Int10_dispatch
Int10_dispatch PROC FAR

if (MAX_ROW * MAX_COL * 4) GT 0FFFFh
	.err
	%out	MAX_ROW or MAX_COL out of range
endif
	.IF <cs:[setmode_flag] ne 0>   ; flag is set by nt_resume_event_thread
		.IF <ah eq 0>
			mov	cs:[setmode_flag],0	; clear
			jmp	simulate_iret 		; no call original
		.ENDIF
	.ENDIF

	mov	cs:[use_ntdisp_flag],1
	push	bx
	push	ax
	mov	bx,ax
	push	es
	push	di
	.IF <cs:[disp_init_flag] eq 0>
		mov	ax,0003h	; Clear display
		BOP	42h
;		call	reenter_win
		mov	cs:[disp_init_flag],1
	.ENDIF
	les	di,dword ptr cs:[dbcs_vector]
	mov	ax,word ptr es:[di]

	.IF <cs:[nt_cons_mode] eq 1>			; Check Re-enter
		.IF <ax eq 0>				; Check SBCS or DBCS
			mov	cs:[active_cp],CP_US	; Set bilingal US
                .ELSE
ifdef JAPAN
                        mov     cs:[active_cp],CP_JP    ; Set bilingal JAPAN
endif
ifdef KOREA
                        mov     cs:[active_cp],CP_KO    ; Set bilingal KOREA
endif
                .ENDIF
	.ENDIF

	.IF <ax eq 0>					; Check SBCS world
; Not nessesary after build #26
;		.IF <cs:[nt_cons_mode] eq 1>		; Re-enter
;			call	reenter_fullsc
;			mov	cs:[nt_cons_mode],0
;		.ENDIF

		pop	di
		pop	es
		pop	ax
		pop	bx
		pushf
		call	cs:[pass_disp_add]		; Go SBCS world
		mov	cs:[use_ntdisp_flag],0
		jmp	simulate_iret
	.ENDIF
	
; williamh - The following checks are not necessary.
;	     When nt_event_event_thread get called, the video
;	     state is in console's default and we have no idea
;	     what it is at this moment so we have to reset the
;	     video to what we know - that is why reenter_win and
;	     reenter_fullsc for. If DBCS mode is enabled and the
;	     video mode is in  SBCS graphic mode, we still have
;	     to reset the video, otherwise, the underneath driver
;	     will get confused.
;	     This reenter_win and reenter_fulsc are very very costy
;	     and we have to find ways to get rid of them if possible.
;
;
;	.IF <bh ne 00h>					; Check SBCS mode
;		mov	al,cs:[display_mode]
;		.IF <al ne 03h> and
;		.IF <al ne 11h> and
;		.IF <al ne 12h> and
;		.IF <al ne 72h> and
;		.IF <al ne 73h>
;			pop	di
;			pop	es
;			pop	ax
;			pop	bx
;			pushf
;			call	cs:[pass_disp_add]	; Go SBCS world
;			mov	cs:[use_ntdisp_flag],0
;			jmp	simulate_iret
;		.ENDIF
;	.ENDIF
IFDEF _X86_			; By DEC-J. On ALPHA windowed_add is meanless.
	les	di,dword ptr cs:[windowed_add]
	mov	al,es:[di]

	.IF <al eq FULLSCREEN>
;		.IF <cs:[nt_cons_mode] eq 1>		; Re-enter
;			call	reenter_fullsc
;			mov	cs:[nt_cons_mode],0
;			mov	cs:[window_mode],al
;		.ENDIF

		.IF <al ne cs:[window_mode]>		; Win->Fullsc switched
			call	wintofullsc
		.ENDIF

	.ELSE
;		.IF <cs:[nt_cons_mode] eq 1>		; Re-enter
;			call	reenter_win
;			mov	cs:[nt_cons_mode],0
;		.ENDIF
		.IF <bh eq 00h>				; Win->Fullsc switch
;			.IF <bl eq 03h> or
;			.IF <bl eq 73h> or
			.IF <bl eq 04h> or
			.IF <bl eq 05h> or
			.IF <bl eq 06h> or
			.IF <bl eq 0dh> or
			.IF <bl eq 0eh> or
			.IF <bl eq 0fh> or
			.IF <bl eq 10h> or
			.IF <bl eq 11h> or
			.IF <bl eq 12h> or
			.IF <bl eq 13h> or
			.IF <bl eq 72h>
				call	wintofullsc
				mov	cs:[nt_cons_mode],0
				mov	al,FULLSCREEN
			.ENDIF
		.ENDIF
	.ENDIF

	mov	cs:[window_mode],al
ENDIF ;_ALPHA_
	pop	di
	pop	es
	pop	ax
	pop	bx

	.IF <ah eq 0feh>
		jmp	teach_buffer
	.ENDIF
	.IF <ah eq 0ffh>
		jmp	refresh_buffer
	.ENDIF
	.IF <ah be MaxFunc>
		push	si
		push	ax
		xchg	ah,al
		xor	ah,ah
		shl	ax,1
		mov	si,offset cs:table_int10
		add	si,ax
		pop	ax
		jmp     cs:[si]
	.ENDIF

	public	go_org_int10
go_org_int10	label	near
		pushf
		call	cs:org_int10_add		;go to original int10
		mov	cs:[use_ntdisp_flag],0
		jmp	simulate_iret
Int10_dispatch ENDP

	public	mode_set
mode_set	proc	near
		pop	si
IFDEF _X86_			; By DEC-J.
		mov	cs:[display_mode],al
		.IF <cs:[window_mode] ne FULLSCREEN>
ELSE
		mov	ah, al
		and	ah, 7fh
		mov	cs:[display_mode], ah
		.IF <ah eq 03h> or
		.IF <ah eq 73h>
			mov	ah,0
			.IF< cs:[window_mode] eq FULLSCREEN>
			;tobu tori atowo nigosu ichitaro.
				pushf
				call	cs:org_int10_add
				mov cs:[window_mode], 0
			.ENDIF
ENDIF ;_ALPHA_
			BOP	42h
			mov	cs:[use_ntdisp_flag],0
			jmp	simulate_iret
		.ENDIF
IFNDEF _X86_			; By DEC-J.
		mov	ah, 0
		.IF< cs:[window_mode] ne FULLSCREEN>
			call wintofullsc	;for initialize $disp.sys
			mov cs:[window_mode], FULLSCREEN
		.ENDIF
ENDIF ;_ALPHA_
		jmp	go_org_int10
mode_set	endp

	public	cpos_get
cpos_get	proc	near
cpos_set	label	near
ctype_set	label	near
read_cell	label	near
disply_get	label	near
palet_set	label	near
		pop	si
		.IF <cs:[window_mode] ne FULLSCREEN>
			BOP	42h
			mov	cs:[use_ntdisp_flag],0
			jmp	simulate_iret
		.ENDIF
		jmp	go_org_int10
cpos_get	endp

; MSKK kksuzuka #1223 9/7/94
; when dosshell is started with full screen, ntvdm must generate character
	public	char_set
char_set	proc	near
		pop	si
		.IF <cs:[window_mode] ne FULLSCREEN>
			BOP	42h
			mov	cs:[use_ntdisp_flag],0
			jmp	simulate_iret
		.ENDIF
		.IF <al eq 00h> or
		.IF <al eq 11h>
			BOP	42h
		.ENDIF
		jmp	go_org_int10
char_set	endp

;; #3741: WordStar6.0: Hilight color is changed after running in window
;; 11/27/93 yasuho
;;
;; restore palette/overscan and DAC registers

	public	restore_palette_regs
restore_palette_regs	proc	near
		mov	ax, cs
		mov	es, ax
		mov	dx, offset DAC_Registers
		mov	ax, 1012h
		mov	cx, NUM_DAC_REGISTERS
		xor	bx, bx
		pushf
		call	cs:[org_int10_add]

		mov	ax, cs
		mov	es, ax
		mov	dx, offset Palette_Registers
		mov	ax, 1002h
		pushf
		call	cs:[org_int10_add]

		ret
restore_palette_regs	endp

	public	write_cell
write_cell	proc	near
write_char	label	near
scroll_up	label	near
scroll_down	label	near
write_tty	label	near
write_string	label	near
		pop	si
		.IF <cs:[window_mode] ne FULLSCREEN>
			BOP	42h
;			call	get_vram
			mov	cs:[use_ntdisp_flag],0
			jmp	simulate_iret
		.ENDIF
		jmp	go_org_int10
write_cell	endp

;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/9/93 yasuho
;; IME status line monitoring function.
;; so far, we don't use this value.
	public	getset_status
getset_status	proc    near
		pop	si
		push	ax
		cmp	al, 0
		je	show_status_line
		cmp	al, 1
		jne	@F
hidden_status_line:
		xor	al, al
		jmp	set_IME_info
show_status_line:
		mov	al, bl
set_IME_info:
		mov	cs:[IMEStatusLines], al
;; #4183: status line of oakv(DOS/V FEP) doesn't disappear
;; 12/11/93 yasuho
		mov	ah, 23h		; also tell to NTVDM
		BOP	43h
@@:
		pop	ax
		jmp	go_org_int10
getset_status	endp

	public	teach_buffer
teach_buffer    proc    near
ifdef JAPAN
		.IF <cs:[window_mode] ne FULLSCREEN>
			push	ax
			push	es
			push	di
			les	di,dword ptr cs:[bios_disp_mode]
			mov	al,byte ptr es:[di]
			pop	di
			pop	es
			.IF <al eq 3>
				mov	ax,cs:[video_buffer+0]
				mov	di,ax
				mov	ax,cs:[video_buffer+2]
				mov	es,ax
			.ENDIF
			pop	ax
			jmp	simulate_iret
                .ENDIF
                jmp     go_org_int10
endif
ifdef KOREA     ; WriteTtyInterim
                jmp     go_org_int10
endif
teach_buffer    endp

	public	refresh_buffer
refresh_buffer	proc	near
		.IF <cs:[window_mode] ne FULLSCREEN>
;			call	put_vram
			BOP	43h
			mov	cs:[use_ntdisp_flag],0
			jmp	simulate_iret
		.ENDIF
		jmp	go_org_int10
refresh_buffer	endp

	public	go_disp_sys
go_disp_sys	proc	near
		pop	si
		jmp	go_org_int10
go_disp_sys	endp

if 0
	public	get_vram
get_vram	proc	near
		push	ax
		push	cx
		push	si
		push	di
		push	ds
		push	es
		pushf
		mov	di,cs:[video_buffer+0]
		mov	es,cs:[video_buffer+2]
		xor	si,si
		mov	ax,0b800h
		mov	ds,ax
		.IF <cs:[display_mode] eq 73h>
			mov	cx,MAX_ROW*MAX_COL*4
		.ELSE
			mov	cx,MAX_ROW*MAX_COL*2
		.ENDIF
		cld
		shr	cx,1
		rep	movsw
		adc	cx, 0
		rep	movsb
		popf
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	cx
		pop	ax
		ret
get_vram	endp

	public	put_vram
put_vram	proc	near
		push	ax
		push	cx
		push	si
		push	di
		push	ds
		push	es
		pushf
		mov	si,cs:[video_buffer+0]
		mov	ds,cs:[video_buffer+2]
		xor	di,di
		mov	ax,0b800h
		mov	es,ax
		.IF <cs:[display_mode] eq 73h>
			mov	cx,MAX_ROW*MAX_COL*4
		.ELSE
			mov	cx,MAX_ROW*MAX_COL*2
		.ENDIF
		cld
		shr	cx,1
		rep	movsw
		adc	cx,0
		rep	movsb
		popf
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	cx
		pop	ax
		ret
put_vram	endp
endif

	public	wintofullsc
wintofullsc	proc	near
		pusha
		push	es
;; save max rows number because we are going to set video mode
;; which will reset this value and the IME got messed up.
;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/9/93 yasuho
;;		push	es
;;		mov	ax, 40h
;;		mov	es, ax
;;		mov	al, es:[84h]
;;		push	ax
IFDEF _X86_			; By DEC-J
		mov	ah,03h
		mov	bh,00h
		pushf
		call	cs:[pass_disp_add]
		push	dx
		push	cx

		mov	ax,2100h			; Save Text
		.IF <cs:[display_mode] eq 73h>
			mov	cx,MAX_ROW*MAX_COL*4
		.ELSE
			mov	cx,MAX_ROW*MAX_COL*2
		.ENDIF
		les	di,dword ptr cs:[video_buffer]
		bop	43h

ENDIF ;_ALPHA_
		mov	ah,0
IFDEF _X86_ ;DEC-J
		mov	al,cs:[display_mode]		; Set display mode
ELSE
		mov	al, 03h
ENDIF ;_ALPHA_ DEC-J
		pushf
		call	cs:[org_int10_add]
;; #3176: vz display white letter on white screen
;; 11/27/93 reviewed by yasuho
;;
;; restore color states after set mode
		mov	ax, cs
		mov	es, ax
		mov	di, offset Palette_Registers
		mov	ax, 2200h			; get palette/DAC
		BOP	43h
		call	restore_palette_regs

IFDEF _X86_			; By DEC-J
		mov	ax,2101h			; Restore Text
		.IF <cs:[display_mode] eq 73h>
			mov	cx,MAX_ROW*MAX_COL*4
		.ELSE
			mov	cx,MAX_ROW*MAX_COL*2
		.ENDIF
		les	di,dword ptr cs:[video_buffer]
		bop	43h

;		mov	ax,0012h			; Set display mode
;		pushf
;		call	cs:[pass_disp_add]

;		les	di,dword ptr cs:[bios_disp_mode]; Set display mode
;		mov	byte ptr es:[di],3

		.IF <cs:[display_mode] eq 73h>
			push	bp
			les	bp,dword ptr cs:[video_buffer]; Refresh display
			mov	cx,MAX_ROW*MAX_COL
			mov	dx,0
			mov	bh,0
			mov	ax,1321h
			pushf
			call	cs:[org_int10_add]
			pop	bp
		.ELSE
ENDIF ;_ALPHA_
			les	di,dword ptr cs:[video_buffer]; Refresh display
			mov	cx,MAX_ROW*MAX_COL
			mov	ah,0ffh
			pushf
			call	cs:[org_int10_add]
IFDEF _X86_			; By DEC-J
		.ENDIF

		pop	cx
;		les	di,dword ptr cs:[cursor_type]	; Set cursor type
;		mov	cx,es:[di]
		mov	ah,01h
		pushf
		call	cs:[org_int10_add]

		pop	dx
;		les	di,dword ptr cs:[cursor_pos]	; Set cursor position
;		mov	dx,es:[di]
		mov	bh,0
		mov	ah,02h
		pushf
		call	cs:[org_int10_add]
ENDIF ;_ALPHA_
;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/9/93 yasuho
		mov	ax, 40h
		mov	es, ax
		mov	al, es:[84h]
		sub	al, cs:[IMEStatusLines]
		mov	es:[84h], al		; #3019: incorrect cursor pos.
						; 10/29/93 yasuho
		pop	es
		popa
		ret
wintofullsc	endp

	public	reenter_fullsc
reenter_fullsc	proc	near
		push	es
		push	ds
		pusha
;; #3741: WordStar6.0: Hilight color is changed after running in window
;; 11/27/93 yasuho
;;
;; restore palette and DAC register if SBCS world
		les	di, dword ptr cs:[dbcs_vector]
		cmp	word ptr es:[di], 0	; DBCS mode ?
		jnz	short @F		; yes
		mov	ax, cs
		mov	es, ax
		mov	dx, offset Default_DAC_Regs
		mov	ax, 1012h
		mov	cx, 16
		xor	bx, bx
		pushf
		call	cs:[org_int10_add]	; restore DAC registers
		mov	dx, offset Default_Palette_Regs
		mov	ax, 1002h
		pushf
		call	cs:[org_int10_add]	; restore palette registers
		jmp	exit_reenter_fullsc
@@:

;; save max rows number because we are going to set video mode
;; which will reset this value and the IME got messed up.
;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/2/93 yasuho
;;		mov	ax, 40h
;;		mov	es, ax
;;		mov	al, es:[84h]
;;		push	ax
;; #4210: Status of $IAS not display in full-screen
;; 12/16/93 yasuho
;; save IME status lines if IME is active
;; NOTE: This is easy fix. We should save the # of IME status lines
;; in the future.
		cmp	cs:[IMEStatusLines], 0
		je	short @F
		lds	si, dword ptr cs:[video_buffer]
		add	si, 24*160
		mov	di, offset IMEstat_buffer
		mov	ax, cs
		mov	es, ax
		mov	cx, 160
		cld
		rep movsb
@@:

IFDEF _X86_			; By DEC-J
		mov	ah,03h
		mov	bh,00h
		pushf
		call	cs:[pass_disp_add]
		push	dx
		push	cx

;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/2/93 yasuho
;;		les	di,dword ptr cs:[video_buffer]
;;		mov	ax,2100h			; Save Text
;;		mov	cx,MAX_ROW*MAX_COL*2
;;		bop	43h
ENDIF ;_ALPHA_

		les	di,dword ptr cs:[bios_disp_mode]
		mov	ah,0
		mov	al,es:[di]			; Set display mode
		pushf
		call	cs:[org_int10_add]
IFDEF _X86_			; By DEC-J
;		mov	ax,0b800h
;		mov	es,ax
;		xor	di,di
;		mov	ah,0feh				; Get video buffer
;		pushf
;		call	cs:[org_int10_add]
;		mov	ax,es
;		mov	cs:[video_buffer+0],di
;		mov	cs:[video_buffer+2],ax

;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/2/93 yasuho
		les	di,dword ptr cs:[video_buffer]
		mov	ax,2103h			; Restore Text
		mov	cx,MAX_ROW*MAX_COL*2
		bop	43h

;; #4210: Status of $IAS not display in full-screen
;; 12/16/93 yasuho
;; restore IME status lines if IME is active
;; NOTE: This is easy fix. We should save the # of IME status lines
;; in the future.
		cmp	cs:[IMEStatusLines], 0
		je	short @F
		mov	si, offset IMEstat_buffer
		mov	ax, cs
		mov	ds, ax
		les	di, dword ptr cs:[video_buffer]
		add	di, 24*160
		mov	cx, 160
		cld
		rep movsb
@@:

ENDIF ;_ALPHA_
		les	di,dword ptr cs:[video_buffer]	; Refresh display
		mov	cx,MAX_ROW*MAX_COL
		mov	ah,0ffh
		pushf
		call	cs:[org_int10_add]

IFDEF _X86_			; By DEC-J
		pop	cx
		mov	ah,01h
		pushf
		call	cs:[org_int10_add]

		pop	dx
		mov	bh,0
		mov	ah,02h
		pushf
		call	cs:[org_int10_add]
ENDIF ;_ALPHA_
;; #3086: VDM crash when exit 16bit apps of video mode 11h
;; 12/2/93 yasuho
		mov	ax, 40h
		mov	es, ax
		mov	al, es:[84h]
		sub	al, cs:[IMEStatusLines]
		mov	es:[84h], al
exit_reenter_fullsc:
		popa
		pop	ds
		pop	es
		BOP	0FEh
reenter_fullsc	endp

	public	reenter_win
reenter_win	proc	near
;		pusha
;
;		mov	ax,0b800h
;		mov	es,ax
;		xor	di,di
;		mov	ah,0feh				; Get video buffer
;		pushf
;		call	cs:[org_int10_add]
;		mov	ax,es
;		mov	cs:[video_buffer+0],di
;		mov	cs:[video_buffer+2],ax
;
;		call	get_vram
;
;		popa
		ret
reenter_win	endp

;----------------------------------------------------------------------------;
; Int08_dispatch: 
;----------------------------------------------------------------------------;

	public	Int08_dispatch
Int08_dispatch PROC FAR

	push	ax
	push	es
	push	di
	les	di,dword ptr cs:[dbcs_vector]
	mov	ax,word ptr es:[di]

	.IF <ax ne 0> 					; Check DBCS mode
		.IF <cs:[display_mode] eq 3> or		; Check TEXT mode
		.IF <cs:[display_mode] eq 73h>
			.IF <cs:[use_ntdisp_flag] eq 0>	; Check using int10h
;			les	di,dword ptr cs:[windowed_add]
;				mov	al,es:[di]
;				.IF <al eq FULLSCREEN> and	; Full-screen?
;				.IF <al ne cs:[window_mode]>	; Win->Fullsc
					call	wintofullsc
					mov	cs:[window_mode],FULLSCREEN
;				.ENDIF
			.ENDIF
		.ENDIF
	.ENDIF
	pop	di
	pop	es
	pop	ax

	BOP	0feh

	ret

Int08_dispatch ENDP

;----------------------------------------------------------------------------;
; Int2f (Bilingal function) dispatch from "biling.sys"
;----------------------------------------------------------------------------;

;Data area for bilingal system
	public	org_int2f_add
org_int2f_add   dd      ?
ifdef JAPAN
default_cp	dw	CP_JP
active_cp       dw      CP_JP
endif
ifdef KOREA
default_cp      dw      CP_KO
active_cp       dw      CP_KO
endif
video_flag      db      1


	public	biling_func_tbl
biling_func_tbl	label	word
	dw	get_ver
	dw	get_cp
	dw	regist_video
	dw	strip_video

BILING_FUNC_MAX	equ	($ - offset biling_func_tbl) / 2

	public	Int2f_dispatch
Int2f_dispatch PROC FAR
	cmp	ah,4fh
	jnz	biling_pass
	cmp	al,BILING_FUNC_MAX
	jae	biling_pass
	push	bx
	mov	bl,al
	xor	bh,bh
	shl	bx,1
	mov	ax,cs:[biling_func_tbl+bx]	; get subfunction address
	pop	bx
	call	ax			; execute subfunction
simulate_iret:
	FIRET
biling_pass:
	jmp	cs:[org_int2f_add]
Int2f_dispatch	ENDP

	public	get_ver
get_ver		proc	near
	mov	dl,MAJOR_VER
	mov	dh,MINOR_VER
	mov	ax,0
	ret
get_ver		endp

	public	get_cp
get_cp		proc	near

	;
	;	Reload active code page when code page changed
	;	ntraid:mskkbug#2708	10/13/93 yasuho
	;
	push	ds
	lds	bx,dword ptr cs:[dbcs_vector]
	mov	ax,word ptr [bx]
	pop	ds
	.IF <ax eq 0>				; Check SBCS or DBCS
		mov	ax,CP_US		; US
        .ELSE
ifdef JAPAN
                mov     ax,CP_JP                ; JAPAN
endif
ifdef KOREA
                mov     ax,CP_KO                ; KOREA
endif
        .ENDIF
	mov	cs:[active_cp],ax		; Set active code page
	mov	bx,cs:active_cp
	cmp	cs:video_flag,1
	jz	@f
	mov	bx,-1			; if DBCS video system is not available
@@:
	mov	ax,0
	ret
get_cp		endp

	public	regist_video
regist_video	proc	near
	mov	cs:video_flag,1
	mov	ax,0
	ret
regist_video	endp

	public	strip_video
strip_video	proc	near
	mov	cs:video_flag,0
	mov	ax,0
	ret
strip_video	endp


;----------------------------------------------------------------------------;
;****************************************************************************;
;----------------------------------------------------------------------------;
;                                                                            ;
;       BEGINNING OF SPACE TO BE USED AS DRIVER MEMORY                       ;
;       ALL CODE AFTER ATOMLIST WILL BE ERASED BY THE DRIVER'S DATA          ; 
;       OR BY OTHER LOADED DRIVERS                                           ;
;                                                                            ;
;----------------------------------------------------------------------------;
;****************************************************************************;
;----------------------------------------------------------------------------;


;----------------------------------------------------------------------------;
;                    Initialization Data and Code               
; Only needed once, so after the driver is loaded and initialized it releases
; any memory that it won't use. The device allocates memory for its own use
; starting from 'ddddlList'.
;----------------------------------------------------------------------------;

	public	ddddhList
ddddhList       label   near
ifndef KOREA
ini_msg	db "Windows-NT DISP.SYS Dispatch Driver 2 version 0.1"
        db lf,cr,eom
endif
err_msg	db "NTDISP1.SYS is not installed"
	db lf,cr,eom
devnam	db "NTDISP1$",0

	public	Init
Init    PROC NEAR
	push	ds
	push	es
	pusha

	les     di, [lpHeader]          ; allow us to use the request values

	mov     ax, MemEnd              ; set ax to End of Memory relative to
					; previous end of memory.
	mov     MaxMem, ax              ; store the new value in MaxMem 
	mov     es:[di].xseg,cs         ; tell MS-DOS the end of our used 
	mov     es:[di].xfer,ax         ; memory (the break address)

ifndef KOREA
        ShowStr ini_msg
endif

	mov	dx,offset devnam	; open ddddl.sys
	mov	ax,3d00h
	int	21h
	jnc	get_prev_int10_vector

not_install:
	ShowStr err_msg

	mov     es:[di].xfer,0          ; clean up memory (the break address)
	jmp	init_exit
	popa
;	xor	ax,ax
	mov	ax,0100h
	ret
	

get_prev_int10_vector:
	mov	bx,ax

                                        ; kksuzuka:#4041
        push    bx                      ; handle
        mov     ax,4400h
        int     21h                     ; get device data
        pop     bx
        jc      not_install
                                        ; dx=device word
        push    bx
        xor     dh,dh                   ; should not change
        or      dl,20h                  ; set binary mode
        mov     ax,4401h
        int     21h                     ; set device data
        pop     bx
        jc      not_install

	push	bx
	mov	dx,offset pass_disp_add	; get original int10 address
	mov	cx,4
	mov	ax,3f00h
	int	21h
	pop	bx			; close ddddl.sys
	mov	ax,3e00h
	int	21h

	mov	ax,0b800h
	mov	es,ax
	xor	di,di
	mov	ah,0feh			; Get video buffer
	int	10h
	mov	ax,es
	mov	[video_buffer+0],di
	mov	[video_buffer+2],ax

	mov	ax,offset display_mode	; Tell NTVDM Virtual TEXT V-RAM address
	mov	[dmode_add+0],ax	; ,display mode address
	mov	ax,ds			; and get Windowed flag address
	mov	[dmode_add+2],ax	; and tell Nt console mode flag add
	mov	ax,offset nt_cons_mode
	mov	[nt_cons_add+0],ax
	mov	ax,ds
	mov	[nt_cons_add+2],ax
	mov	ax,offset int08_dispatch
	mov	[disp_sys_init+0],ax
	mov	ax,cs
	mov	[disp_sys_init+2],ax
	mov	[fullsc_resume_ptr], offset reenter_fullsc
	mov	[fullsc_resume_ptr + 2], ax
	mov	[ias_setmode_add], offset setmode_flag
	mov	[ias_setmode_add + 2], ax
	mov	si,offset packet_len
	mov	ah,20h
	BOP	43h

	mov	ax,VECTOR_SEG			;Get original int10 vector
	mov	es,ax
	mov	ax,word ptr es:[4*10h+0]
	mov	word ptr [org_int10_add+0],ax
	mov	ax,word ptr es:[4*10h+2]
	mov	word ptr [org_int10_add+2],ax

	mov	ax,offset cs:Int10_dispatch	;Set my int10 vector
	mov	word ptr [new_int10_add+0],ax
	mov	word ptr es:[4*10h+0],ax
	mov	ax,cs
	mov	word ptr es:[4*10h+2],ax
	mov	word ptr [new_int10_add+2],ax

	push	ds
	mov	ax,6300h			; Get DBCS Vector address
	int	21h
	mov	bx,[si]
	mov	ax,ds
	pop	ds
	mov	word ptr [dbcs_vector+0],si
	mov	word ptr [dbcs_vector+2],ax

IFDEF _X86_			; By DEC-J
	les	di,dword ptr [windowed_add]
	mov	al,es:[di]
	.IF <al eq FULLSCREEN>
		mov	ah,03h
		mov	bh,00h
		pushf
		call	cs:[pass_disp_add]	; Save Cursor
		push	dx
		push	cx

		mov	ax,0003h		; set DOS/V text mode
		pushf
		call	[org_int10_add]

                ; kksuzuka #6168 set screen attibutes
		mov	ah,24h			; get console attributes
		BOP	43h
		shl	ax,8			; ah = console attributes
		mov	al,20h

		les	di,dword ptr cs:[video_buffer]	; DOS/V VRAM
		mov	cx,MAX_ROW*MAX_COL
		push	di
		push	es
		rep	stosw

		pop	es
		pop	di
		mov	cx,MAX_ROW*MAX_COL
		mov	ah,0ffh
		pushf
		call	cs:[org_int10_add]

		mov	[nt_cons_mode],0
		mov	[window_mode],FULLSCREEN
		mov	cs:[disp_init_flag],1

		pop	cx			; Restore cursor
		mov	ah,01h
		pushf
		call	cs:[org_int10_add]

		pop	dx
		mov	bh,0
		mov	ah,02h
		pushf
		call	cs:[org_int10_add]
	.ENDIF
ENDIF ;_ALPHA_
;; #3741: WordStar6.0: Hilight color is changed after running in window
;; 12/2/93 yasuho
;;
;; get initial color palette and DAC registers

	mov	ax, cs
	mov	es, ax
	mov	dx, offset Default_Palette_Regs
	mov	ax, 1009h
	pushf
	call	cs:[org_int10_add]

	mov	ax, cs
	mov	es, ax
	mov	dx, offset Default_DAC_Regs
	mov	ax, 1017h
	mov	cx, 16
	xor	bx, bx
	pushf
	call	cs:[org_int10_add]

	mov	ax,VECTOR_SEG
	mov	es,ax

;	mov	ax,word ptr es:[4*08h+0]	;Get original int08 vector
;	mov	word ptr [org_int08_add+0],ax
;	mov	ax,word ptr es:[4*08h+2]
;	mov	word ptr [org_int08_add+2],ax
;
;	mov	ax,offset cs:Int08_dispatch	;Set my int08 vector
;	mov	word ptr es:[4*08h+0],ax
;	mov	ax,cs
;	mov	word ptr es:[4*08h+2],ax

	mov	ax,word ptr es:[4*2fh+0]	;Get original int2f vector
	mov	word ptr [org_int2f_add+0],ax
	mov	ax,word ptr es:[4*2fh+2]
	mov	word ptr [org_int2f_add+2],ax

	mov	ax,offset cs:Int2f_dispatch	;Set my int2f vector
	mov	word ptr es:[4*2fh+0],ax
	mov	ax,cs
	mov	word ptr es:[4*2fh+2],ax

init_exit:
	popa
	pop	es
	pop	ds
;	xor	ax,ax
	mov	ax,0100h
	ret
Init	ENDP

TEXT	ENDS

	END
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\disp_win\disp_win.inc ===
;----------------------------------------------------------------------------;
;			Define macros
;----------------------------------------------------------------------------;

ShowStr MACRO str
    mov	    dx, offset str
    mov     ah, 9
    int     21h
ENDM

BOP MACRO func

	db	0c4h,0c4h,func
;	jmp	cs:[pass_disp_add]
;	int	44h
ENDM

;----------------------------------------------------------------------------;
;                          Flags & Numeric Equates                
;----------------------------------------------------------------------------;

MAX_ROW	EQU	25		; Max row count
MAX_COL	EQU	80		; Max column count
MaxFunc	EQU	1Dh		; int 10h max function No.
MaxCmd 	EQU     24              ; max command code for DOS 3.2+
cr      EQU     0Dh             ; carriage return
lf      EQU     0Ah             ; linefeed
eom     EQU     '$'             ; end-of-message signal
space   EQU     20h             ; ascii space
tab     EQU     09h             ; ascii tab

VECTOR_SEG	EQU	0000h	; Interrupt Vector segment
WORK_SEG	EQU	0040h	; BIOS work area segment
FULLSCREEN	EQU	1

MAJOR_VER	equ	1
MINOR_VER	equ	0
CP_JP           equ     932
CP_KO           equ     949
CP_US		equ	437

; definition of a Request Header structure so that we can access its elements. 
; this structure is not exhaustive at all: block device use some addresses for
; different purposes, and have data beyond the cmd_seg word.


REQ_HEADER      STRUC
	lengt   DB    ?               ; request header length
	unit    DB    ?               ; unit number (for Block Devs. only)
	ccode   DB    ?               ; command code
	stat    DW    ?               ; status word
	reserv  DB 8 DUP(?)           ; reserved for DOS us
	media   DB    ?               ; Media ID    (for Block Devs. only)
	xfer    DW    ?               ; offset of data buffer
	xseg    DW    ?               ; segment of data buffer
	cmd_off	DW    ?               ; count of bytes in request, or
	cmd_seg DW    ?               ; segment of CONFIG.SYS line
REQ_HEADER      ENDS

; values for the different 'magic numbers' used with Device Drivers

fNEXTLINK   EQU -1              ; word to tell DOS to substitute by address of
				; next device
fCHARDEVICE EQU 8000h           ; bit to define device as a character device
fOPENCLOSE  EQU 0040h           ; bit to indicate that device supports open/close
fDONE       EQU 0100h           ; Status Done bit meaning device is done
fERROR      EQU 8000h           ; Status Error bit meaning error on operation
fWRITE_E    EQU 000Ah           ; Write Fault Error bit
fREAD_E     EQU 000Bh           ; Read Fault Error bit
fUNKNOWN_E  EQU 0003h           ; Unknown Command Error bit

; values for the search flags used by Write Routine

fDELETE EQU     2
fINSERT EQU     4
fSEARCH EQU     8
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\font_win\font_win.asm ===
;
; Windows-NT MVDM Japanese DOS/V $FONT.SYS Dispatch Driver
;
	.286

	include struc.inc
	include font_win.inc
	include vint.inc

NO_ERROR		equ	00h
IRREGAL_FONT_TYPE	equ	01h
IRREGAL_BL		equ	02h
IRREGAL_FONT_SIZE	equ	03h
IRREGAL_CODE_PAGE	equ	04h
IRREGAL_CODE_NUMBER	equ	05h
READ_ONLY_FONT		equ	06h

FONT_ENABLE		equ	0001h

FONT_CONF	STRUC
READ_WRITE	DB	?		; Read=0, Write=1
FONT_TYPE	DB	?		; SBCS=0, DBCS=1
FONT_SIZE	DW	?
FONT_ADDR	DW	?		; Font read/write routine
FONT_FLAG	DW	?		; Font flag(Now Enable bit only)
FONT_ORG	DW	?		; Original Font write routine
FONT_CONF	ENDS

FONTCNF_SIZE	equ	10


;----------------------------------------------------------------------------;
;                             Code Segment                                   
;----------------------------------------------------------------------------;
TEXT	segment byte public
	assume	cs:TEXT,ds:TEXT,es:TEXT

	org     0               ; drivers should start at address 0000h
	                        ; this will cause a linker warning - ignore it.

Header:                         ; device driver header
	DD	fNEXTLINK       ; link to next device driver
	DW	fCHARDEVICE+fOPENCLOSE  ; device attribute word: 
					; char.device+open/close
	DW	Strat           ; 'Strat' entry point
	DW	Intr            ; 'Intr' entry point
	DB	'NTDISP1$'      ; logical device name (needs to be 8 chars)


;----------------------------------------------------------------------------;
; data variables
;----------------------------------------------------------------------------;

null     	dw      0       ; dummy to do a quick erase of pAtomValue
pAtomVal 	dw offset null  ; pointer to value of result of atom search
MemEnd   	dw  ddddlList   ; end of used memory:      initially AtomList
MaxMem   	dw  ddddlList   ; end of available memory: initially AtomList
lpHeader	dd      0       ; far pointer to request header
org_int10_add	dd	0	; Original int10 vector
org_int15_add	dd	0	; Original int15 vector
mode12cnt	dw	1	; mode 12h call count
read_offset	dw	0	; read count

org_SBCS_06x12	dd	0	; Fornt write routine address
org_SBCS_08x16	dd	0
org_SBCS_08x19	dd	0
org_SBCS_12x24	dd	0
org_DBCS_12x12	dd	0
org_DBCS_16x16	dd	0
org_DBCS_24x24	dd	0

;----------------------------------------------------------------------------;
; Dispatch table for the interrupt routine command codes                     
;----------------------------------------------------------------------------;

Dispatch:                       
	DW     Init     ;  0 = init driver 
	DW     Error    ;  1 = Media Check         (block devices only) 
	DW     Error    ;  2 = build BPB           (block devices only)
	DW     Error    ;  3 = I/O control read         (not supported)
	DW     Read     ;  4 = read (input) from device  (int 21h, 3Fh)
	DW     Error    ;  5 = nondestructive read      (not supported)
	DW     Error    ;  6 = ret input status        (int 21h, 4406h)
	DW     Error    ;  7 = flush device input buffer (not supportd)
	DW     Error    ;  8 = write (output) to device  (int 21h, 40h)
	DW     Error    ;  9 = write with verify (== write)  (21h, 40h)
	DW     Error    ; 10 = ret output status       (int 21h, 4407h)
	DW     Error    ; 11 = flush output buffer      (not supported) 
	DW     Error    ; 12 = I/O control write        (not supported)
	DW     Success  ; 13 = device open               (int 21h, 3Dh)
	DW     Success  ; 14 = device close              (int 21h, 3Eh)
	DW     Error    ; 15 = removable media     (block devices only)
	DW     Error    ; 16 = Output until Busy   (mostly for spooler)
	DW     Error    ; 17 = not used
	DW     Error    ; 18 = not used
	DW     Error    ; 19 = generic IOCTL            (not supported)
	DW     Error    ; 20 = not used
	DW     Error    ; 21 = not used
	DW     Error    ; 22 = not used
	DW     Error    ; 23 = get logical device  (block devices only)
	DW     Error    ; 24 = set logical device  (block devices only)

font_write_table:
	FONT_CONF	<01h,00h,060ch,SBCS_06x12,0,offset org_SBCS_06x12>
	FONT_CONF	<01h,00h,0810h,SBCS_08x16,0,offset org_SBCS_08x16>
	FONT_CONF	<01h,00h,0813h,SBCS_08x19,0,offset org_SBCS_08x19>
	FONT_CONF	<01h,00h,0c18h,SBCS_12x24,0,offset org_SBCS_12x24>
	FONT_CONF	<01h,01h,0c0ch,DBCS_12x12,0,offset org_DBCS_12x12>
	FONT_CONF	<01h,01h,1010h,DBCS_16x16,0,offset org_DBCS_16x16>
	FONT_CONF	<01h,01h,1818h,DBCS_24x24,0,offset org_DBCS_24x24>
	DW		0FFFFh

;----------------------------------------------------------------------------;
; Strategy Routine
;----------------------------------------------------------------------------;
; device driver Strategy routine, called by MS-DOS kernel with
; ES:BX = address of request header
;----------------------------------------------------------------------------;

Strat   PROC FAR
	mov     word ptr cs:[lpHeader], bx      ; save the address of the 
	mov     word ptr cs:[lpHeader+2], es    ; request into 'lpHeader', and                  
	ret                                     ; back to MS-DOS kernel
Strat   ENDP


;----------------------------------------------------------------------------;
; Intr
;----------------------------------------------------------------------------;
; Device driver interrupt routine, called by MS-DOS kernel after call to     
; Strategy routine                                                           
; This routine basically calls the appropiate driver routine to handle the
; requested function. 
; Routines called by Intr expect:
;       ES:DI   will have the address of the request header
;       DS      will be set to cs
; These routines should only affect ax, saving es,di,ds at least
;
; Input: NONE   Output: NONE   -- data is transferred through request header
;
;----------------------------------------------------------------------------;

Intr    PROC FAR
	pusha
	pushf                   ; save flags
	cld                     ; direction flag: go from low to high address
				
	mov     si, cs          ; make local data addressable
	mov     ds, si          ; by setting ds = cs
			
	les     di, [lpHeader]  ; ES:DI = address of req.header

	xor     bx, bx        ; erase bx
	mov     bl,es:[di].ccode ; get BX = command code (from req.header)
	mov	si,bx
	shl	si,1
	add	si,offset dispatch
	
	.IF <bx gt MaxCmd>                ; check to make sure we have a valid
		call    Error             ; command code
	.ELSE                             ; else, call command-code routine,  
		call    [si]              ; indexed from Dispatch table
	.ENDIF                            ; (Ebx used to allow scaling factors)

	or      ax, fDONE       ; merge Done bit into status and
	mov     es:[di].stat,ax ; store status into request header
	
	popf                    ; restore registers
	popa                    ; restore flags
	ret                     ; return to MS-DOS kernel
Intr    ENDP


;----------------------------------------------------------------------------;
; Success: When the only thing the program needs to do is set status to OK 
;----------------------------------------------------------------------------;

Success PROC NEAR
	xor     ax, ax          ; set status to OK
	ret
Success ENDP

;----------------------------------------------------------------------------;
; error: set the status word to error: unknown command                       
;----------------------------------------------------------------------------;
Error   PROC    NEAR            
	mov     ax, fERROR + fUNKNOWN_E  ; error bit + "Unknown command" code
	ret                     
Error   ENDP


;----------------------------------------------------------------------------;
; read: put org_int10_add to ddddh.sys                        
;----------------------------------------------------------------------------;
Read    PROC    NEAR

	lds     si, [lpHeader]          ; put request header address in DS:SI

	mov     cx, [si].cmd_off         ; load cx with the size of buffer
	mov     es, [si].xseg           ; load es with segment of buffer
	mov     di, [si].xfer           ; load di with offset of buffer

	mov	ax,cs
	mov	ds,ax
	mov	si,offset org_int10_add
	add	si,[read_offset]
	mov	ax,4
	sub	ax,[read_offset]
	.IF <cx gt ax>
		mov	cx,ax
	.ENDIF
	.IF <cx gt 0>
		xor	bx,bx
tfr_loop:	movsb
		inc	read_offset
		inc	bx
		loop	tfr_loop
	.ENDIF

	les     di, [lpHeader]          ; re-load the request header
	mov     es:[di].cmd_off, bx      ; store the number of chars transferred
	xor 	ax,ax
	ret
Read    ENDP


;----------------------------------------------------------------------------;
; Int10_dispatch: 
;----------------------------------------------------------------------------;

Int10_dispatch PROC FAR
	.IF <ax eq 0012h>
		.IF <cs:[mode12cnt] ne 0>
			mov	al,03h			; Use mode 3
			dec	cs:[mode12cnt]
			jmp	simulate_iret		; Ignore mode 12
		.ENDIF
	.ENDIF
IFNDEF _X86_
;support mouse_video_io DEC-J Dec. 20 1993 TakeS
;; updated Mar. 24 1994 TakeS
;; BUG in using IME. change also mouse_video_io()
;	.IF< ah ge 0f0h > and
;	.IF< ah be 0fah >
;;; mvdm subsystem error with NT4.0
;;;		BOP	0beh			;call mouse_video_io()
;	.ENDIF
ENDIF ; !_X86_
	jmp	cs:org_int10_add		;go to original int10
Int10_dispatch ENDP

;----------------------------------------------------------------------------;
; Int15_dispatch: 
;----------------------------------------------------------------------------;

Int15_dispatch PROC FAR
	.IF <ah ne 50h>
		jmp	go_org_int15
	.ENDIF
	.IF <al ne 01h>
		jmp	go_org_int15
	.ENDIF
	.IF <bh ne 00h> and
	.IF <bh ne 01h>
		mov	ah,IRREGAL_FONT_TYPE
		stc
		ret	2
	.ENDIF
	.IF <bl ne 00h>
		mov	ah,IRREGAL_BL
		stc
		ret	2
	.ENDIF
	.IF <bp ne 00h>
		mov	ah,IRREGAL_CODE_PAGE
		stc
		ret	2
	.ENDIF

	push	si
	mov	si,offset font_write_table
search_font_routine:
	.IF <cs:[si].READ_WRITE eq 0ffh>
		pop	si
		jmp	error_font_size
	.ENDIF
	.IF <cs:[si].READ_WRITE eq al> and
	.IF <cs:[si].FONT_TYPE  eq bh> and
	.IF <cs:[si].FONT_SIZE  eq dx> and
	.IF <cs:[si].FONT_FLAG  eq FONT_ENABLE>
		mov	ax,cs
		mov	es,ax
		mov	bx,cs:[si].FONT_ADDR
		pop	si
		mov	ah,NO_ERROR
		clc
		ret	2
	.ENDIF
	add	si,FONTCNF_SIZE
	jmp	search_font_routine
error_font_size:
	mov	ah,IRREGAL_FONT_SIZE
	stc
	ret	2

go_org_int15:
	jmp	cs:org_int15_add		;go to original int15
Int15_dispatch ENDP

SBCS_06x12	PROC FAR		; SBCS font write routines
	call	cs:[org_SBCS_06x12]
	.IF <al eq 0>
		push	bx
		mov	bx,060ch
		mov	ah,3
		BOP	43h
		pop	bx
	.ENDIF
	ret
SBCS_06x12	ENDP

SBCS_08x16	PROC FAR
	call	cs:[org_SBCS_08x16]
	.IF <al eq 0>
		push	bx
		mov	bx,0810h
		mov	ah,3
		BOP	43h
		pop	bx
	.ENDIF
	ret
SBCS_08x16	ENDP

SBCS_08x19	PROC FAR
	call	cs:[org_SBCS_08x19]
	.IF <al eq 0>
		push	bx
		mov	bx,0813h
		mov	ah,3
		BOP	43h
		pop	bx
	.ENDIF
	ret
SBCS_08x19	ENDP

SBCS_12x24	PROC FAR
	call	cs:[org_SBCS_12x24]
	.IF <al eq 0>
		push	bx
		mov	bx,0c18h
		mov	ah,3
		BOP	43h
		pop	bx
	.ENDIF
	ret
SBCS_12x24	ENDP

DBCS_12x12	PROC FAR		; DBCS font write routines
	call	cs:[org_DBCS_12x12]
	.IF <al eq 0>
		push	bx
		mov	bx,0c0ch
		mov	ah,3
		BOP	43h
		pop	bx
	.ENDIF
	ret
DBCS_12x12	ENDP

DBCS_16x16	PROC FAR
	call	cs:[org_DBCS_16x16]
	.IF <al eq 0>
		push	bx
		mov	bx,1010h
		mov	ah,3
		BOP	43h
		pop	bx
	.ENDIF
	ret
DBCS_16x16	ENDP

DBCS_24x24	PROC FAR
	call	cs:[org_DBCS_24x24]
	.IF <al eq 0>
		push	bx
		mov	bx,1818h
		mov	ah,3
		BOP	43h
		pop	bx
	.ENDIF
	ret
DBCS_24x24	ENDP

; DON'T EVER EVER CALL HERE!!!!!!!!!
simulate_iret:
	IRET

;----------------------------------------------------------------------------;
;****************************************************************************;
;----------------------------------------------------------------------------;
;                                                                            ;
;       BEGINNING OF SPACE TO BE USED AS DRIVER MEMORY                       ;
;       ALL CODE AFTER ATOMLIST WILL BE ERASED BY THE DRIVER'S DATA          ; 
;       OR BY OTHER LOADED DRIVERS                                           ;
;                                                                            ;
;----------------------------------------------------------------------------;
;****************************************************************************;
;----------------------------------------------------------------------------;


;----------------------------------------------------------------------------;
;                    Initialization Data and Code               
; Only needed once, so after the driver is loaded and initialized it releases
; any memory that it won't use. The device allocates memory for its own use
; starting from 'ddddlList'.
;----------------------------------------------------------------------------;

ddddlList        label  NEAR
ifndef KOREA
ini_msg	db "Windows-NT MVDM Font Dispatch Driver Version 1.00"
        db lf,cr,eom
endif

Init    PROC NEAR

	les     di, [lpHeader]          ; allow us to use the request values

	mov     ax, MemEnd              ; set ax to End of Memory relative to
					; previous end of memory.
	mov     MaxMem, ax              ; store the new value in MaxMem 
	mov     es:[di].xseg,cs         ; tell MS-DOS the end of our used 
	mov     es:[di].xfer,ax         ; memory (the break address)
	push	es
	push	ds
	pusha

	mov	ax,0003h		; Clear display
	int	10h

ifndef KOREA
        ShowStr ini_msg
endif

	mov	ax,6300h		; Get DBCS Vector address
	int	21h
	mov	ax,[si]
	.IF <ax eq 0>
		mov	cs:[mode12cnt],0
	.ENDIF
	mov	ah,10h			; Tell NTVDM DOS DBCS Vector address
	BOP	43h

	mov	si,offset font_write_table
check_font_routine:
		.IF <cs:[si].READ_WRITE eq 0ffh>
			jmp	check_font_end
		.ENDIF
		mov ah,50h
		mov al,cs:[si].READ_WRITE
		mov bh,cs:[si].FONT_TYPE
		xor bl,bl
		mov dx,cs:[si].FONT_SIZE
		mov bp,0
		int 15h
		.IF <nc> and
		.IF <ah eq 0>
			mov	cs:[si].FONT_FLAG,FONT_ENABLE
			mov	di,cs:[si].FONT_ORG
			mov	ax,es
			mov	word ptr cs:[di],bx
			mov	word ptr cs:[di+2],ax
		.ENDIF
		add	si,FONTCNF_SIZE
		jmp	check_font_routine
check_font_end:

	mov	ax,VECTOR_SEG		;Get original int10 vector
	mov	es,ax
	mov	ax,word ptr es:[4*10h+0]
	mov	word ptr cs:[org_int10_add+0],ax
	mov	ax,word ptr es:[4*10h+2]
	mov	word ptr cs:[org_int10_add+2],ax

	mov	ax,offset cs:Int10_dispatch	;Set my int10 vector
	mov	word ptr es:[4*10h+0],ax
	mov	ax,cs
	mov	word ptr es:[4*10h+2],ax

	mov	ax,word ptr es:[4*15h+0]
	mov	word ptr cs:[org_int15_add+0],ax
	mov	ax,word ptr es:[4*15h+2]
	mov	word ptr cs:[org_int15_add+2],ax

	mov	ax,offset cs:Int15_dispatch	;Set my int15 vector
	mov	word ptr es:[4*15h+0],ax
	mov	ax,cs
	mov	word ptr es:[4*15h+2],ax

	popa
	pop	ds
	pop	es

	xor	ax,ax
	ret
Init    ENDP

TEXT	ENDS

	END
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\choi.inc ===
DW      0,2,22,38,58,70,58,84
        DW      100,100,112,124,144,160,180,192
        DW      180,206,222,234,246,258,276,290
        DW      304,314,304,326,338,338,348,358
        DW      376,390,404,414,404,426,438,438
        DW      448,458,476,490,504,514,504,526
        DW      538,526,548,558,576,590,606,618
        DW      606,632,646,646,658,670,686,700
        DW      714,724,714,736,748,736,758,768
        DW      786,800,816,828,816,842,858,872
        DW      884,896,914,928,944,956,944,970
        DW      986,986,986,1000,1018,1034,1050,1062
        DW      1050,1074,1088,1100,1112,1122,1142,1158
        DW      1174,1188,1174,1202,1218,1232,1244,1256
        DW      1272,1286,1302,1316,1302,1332,1346,1358
        DW      1370,1380,1400,1414,1430,1430,1430,1442
        DW      1456,1456,1468,1480,1500,1516,1532,1544
        DW      1532,1558,1572,1558,1584,1596,1618,1636
        DW      1654,1668,1654,1684,1702,1718,1732,1746
        DW      1766,1782,1802,1814,1802,1828,1844,1844
        DW      1856,1868,1886,1900,1916,1916,1916,1928
        DW      1942,1954,1966,1978,1996,2010,2024,2034
        DW      2024,2046,2058,2046,2068,2078,2100,2118
        DW      2138,2152,2138,2168,2186,2186,2202
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\compose.inc ===
EXTRN   Ks2ChAddr : Word


GenFont PROC    Near
;
; Make Hangeul Font Pattern Completely.
;
;  INPUT :  DS = CS
;           CX = Hangeul Code
;           ES:DI = Buffer Pointer
;
;  OUTPUT : N-Carry
;           ES:DI = Buffer Pointer
;
;  USES :   ALL
;
        push    bp
        push    di

        mov     ax, cx
        mov     bp, di      ; Save Buffer Offset to BP
        test    [CodeStat], Chab
        jnz     @f
        call    [Ks2ChAddr]
        jnc     @f
        jmp     @gfEnd
@@:
        mov     di, bp
        mov     cx, 16
        mov     bx, ax      ; Save Hangeul Code to DX
        xor     ax, ax
        rep     stosw       ; Clear Image Buffer

        push    bp

        mov     cl, 5
        mov     ax, 00111110b
        shl     bx, 1
        mov     bp, bx
        and     bp, ax      ; BP <- JONG Code
        shr     bx, cl
        mov     di, bx
        and     di, ax      ; DI <- JUNG Code
        shr     bx, cl
        and     bx, ax      ; BX <- CHO Code

        pop     cx          ; CX <- Buffer Offset
        xor     dh, dh

        mov     si, _hfBaseCho[bx]
        cmp     si, -1
        je      @gfExit
        or      si, si
        jz      @f
        add     si, _hfCnvJungCho[di]
        add     si, ds:_hfCnvJongCho[bp]
        mov     si, [si]
        add     si, _hfBmpCho
        call    ORingImage
@@:
        mov     si, _hfBaseJung[di]
        cmp     si, -1
        je      @gfExit
        or      si, si
        jz      @f
        add     si, _hfCnvChoJung[bx]
        add     si, ds:_hfCnvJongJung[bp]
        mov     si, [si]
        add     si, _hfBmpJung
        call    ORingImage
@@:
        mov     si, ds:_hfBaseJong[bp]
        cmp     si, -1
        je      @gfExit
        or      si, si
        jz      @f
        add     si, _hfCnvChoJong[bx]
        add     si, _hfCnvJungJong[di]
        mov     si, [si]
        add     si, _hfBmpJong
        call    ORingImage
@@:
        clc
@gfEnd:
        pop     di
        pop     bp
        ret
@gfExit:
        stc
        jmp     SHORT @gfEnd

GenFont ENDP


ORingImage  PROC    Near
;
;  INPUT :  DS = CS
;           ES:CX = Buffer Pointer
;           SI = Image Pointer
;           DH = 0
;
;  Must Reserve DI register
;
        push    di
        mov     di, cx

        lodsw
        cmp     ax, -1
        je      @oriTerm

        mov     dl, al
        add     di, dx
        mov     dl, ah
@@:
          lodsw
          or      es:[di], ax
          add     di, 2
          dec     dl
        jnz     @b
@oriTerm:
        pop     di
        ret

ORingImage  ENDP


CharTbl LABEL   Word

        INCLUDE hf.inc


GenFontLng  =       $ - GenFont
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\font_win\font_win.inc ===
;----------------------------------------------------------------------------;
;			Define macros
;----------------------------------------------------------------------------;

ShowStr MACRO str
    mov	    dx, offset str
    mov     ah, 9
    int     21h
ENDM

BOP MACRO func

	db	0c4h,0c4h,func
;	jmp	cs:[pass_disp_add]
;	int	44h
ENDM

;----------------------------------------------------------------------------;
;                          Flags & Numeric Equates                
;----------------------------------------------------------------------------;

MAX_LOW	EQU	25		; Max low count
MAX_CUL	EQU	80		; Max culumn count
MaxFunc	EQU	1Dh		; int 10h max function No.
MaxCmd 	EQU     24              ; max command code for DOS 3.2+
cr      EQU     0Dh             ; carriage return
lf      EQU     0Ah             ; linefeed
eom     EQU     '$'             ; end-of-message signal
space   EQU     20h             ; ascii space
tab     EQU     09h             ; ascii tab

VECTOR_SEG	EQU	0000h	; Interrupt Vector segment
WORK_SEG	EQU	0040h	; BIOS work area segment
FULLSCREEN	EQU	1

; definition of a Request Header structure so that we can access its elements. 
; this structure is not exhaustive at all: block device use some addresses for
; different purposes, and have data beyond the cmd_seg word.


REQ_HEADER      STRUC
	lengt   DB    ?               ; request header length
	unit    DB    ?               ; unit number (for Block Devs. only)
	ccode   DB    ?               ; command code
	stat    DW    ?               ; status word
	reserv  DB 8 DUP(?)           ; reserved for DOS us
	media   DB    ?               ; Media ID    (for Block Devs. only)
	xfer    DW    ?               ; offset of data buffer
	xseg    DW    ?               ; segment of data buffer
	cmd_off	DW    ?               ; count of bytes in request, or
	cmd_seg DW    ?               ; segment of CONFIG.SYS line
REQ_HEADER      ENDS

; values for the different 'magic numbers' used with Device Drivers

fNEXTLINK   EQU -1              ; word to tell DOS to substitute by address of
				; next device
fCHARDEVICE EQU 8000h           ; bit to define device as a character device
fOPENCLOSE  EQU 0040h           ; bit to indicate that device supports open/close
fDONE       EQU 0100h           ; Status Done bit meaning device is done
fERROR      EQU 8000h           ; Status Error bit meaning error on operation
fWRITE_E    EQU 000Ah           ; Write Fault Error bit
fREAD_E     EQU 000Bh           ; Read Fault Error bit
fUNKNOWN_E  EQU 0003h           ; Unknown Command Error bit

; values for the search flags used by Write Routine

fDELETE EQU     2
fINSERT EQU     4
fSEARCH EQU     8
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\chab.inc ===
;========================================================================
;
; PRINTER DRIVER program
;
;========================================================================

ASSUME CS:CODE,DS:CODE,ES:CODE

; *** SUPPORTED PRINTER ***
;
; (WS)
;  1. KS printer
;  2. Qnix LBP
;  3. KSSM
; (CH)
;  4. Qnix printer
;  5. Qnix LBP
;  6. TG
;  7. KSSM
;
; concept
;
; 1. WanSung code system   80h - feh
;    check MSB(1st/2nd byte)
;    check ESC code
;
; 2. ChoHab code system    40h - ffh
;    check MSB(1st byte), check range(>3FH, 2nd byte)
;    check ESC code
;
; 3. ChoHab 7 bit code system  21h - 7eh
;    check code range(1st/2nd byte)
;    check ESC code

TblEnd          =       -1
FsKey           =       1ch

; PrtAuto
AutoNor         =       00h     ; 00h, 01h              ; have no
AutoEsc         =       01h     ; 00h, 02h, 03h, 04h    ; have ESC/FS
                                ; 06h, 08h, 0ah, 0bh, 0ch, 0dh, 0eh, 0fh
Auto3           =       02h     ; 00h                   ; spend 1 byte
Auto4           =       03h     ; 05h                   ; spend 2 byte
AutoV1          =       04h     ; 00h, 06h, 08h         ; spend n+1 byte
AutoVCnt        =       05h     ; 00h                   ; spend n byte
AutoV1stx1      =       06h     ; 07h                   ; have 1st counter
AutoV2ndx1      =       07h     ; 05h                   ; have 2nd counter
AutoV1stx3      =       08h     ; 09h                   ; have 1st counter
AutoV2ndx3      =       09h     ; 05h                   ; have 2nd counter
AutoNull        =       0ah     ; 00h, 0ah              ; spend until null.
AutoEng         =       0bh     ; 00h, 0bh              ; spend until eng-char
AutoEngLow      =       0ch     ; 00h, 0ch              ; spend until eng-low-char
Auto74          =       0dh     ; 05h                   ; spend 74 byte
Auto5           =       0eh     ; 05h                   ; spend 5 byte
Auto8           =       0fh     ; 05h                   ; spend 8 byte
Auto3Cnt        =       10h     ; 05h                   ; spend 3 byte
Auto78          =       11h     ; 05h                   ; spend 78 byte
AutoEnd         =       12h

PrtAuto         db      0       ; automata variable
CharCnt         dw      0       ; ESC control char counter
HanCnt          db      0       ; 2 byte char counter
Han1stCode      db      0       ; 1 st char code
EscCode2Addr    dw      0
EscCode3Addr    dw      0
EscCodeNAddr    dw      0
EscCode4Addr    dw      0

public  Int17

Int17:
        or      ah,ah
        jnz     SkipNew17
        test    cs:[CodeStat],HangeulMode
        jz      SkipNew17                       ; jump if english print
        @push   bx,cx,dx,si,di,es,ds,bp
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        mov     bl,[PrtAuto]
        cmp     bl,AutoEnd
        jb      @f
        xor     bl,bl
        mov     [PrtAuto],bl
@@:
        xor     bh,bh
        shl     bx,1
        add     bx,offset PioJumpTbl
        call    [bx]
        mov     ah,0                    ; assume write char.
        jnc     @f
        mov     ah,2                    ; get status.
@@:
        @pop    bp,ds,es,di,si,dx,cx,bx
SkipNew17:
        jmp     cs:[OldInt17]

PioJumpTbl      label   word
                dw      offset sAutoNor          ; 0
                dw      offset sAutoEsc          ; 1
                dw      offset sAuto3            ; 2
                dw      offset sAuto4            ; 3
                dw      offset sAutoV1           ; 4
                dw      offset sAutoVCnt         ; 5
                dw      offset sAutoV1stx1       ; 6
                dw      offset sAutoV2ndx1       ; 7
                dw      offset sAutoV1stx3       ; 8
                dw      offset sAutoV2ndx3       ; 9
                dw      offset sAutoNull         ; a
                dw      offset sAutoEng          ; b
                dw      offset sAutoEngLow       ; c
                dw      offset sAuto74           ; d
                dw      offset sAuto5            ; e
                dw      offset sAuto8            ; f
                dw      offset sAuto3Cnt         ; 10
                dw      offset sAuto78           ; 11

;========================================================================
sAutoNor:                               ; 0
; FUNCTION = check ESC code, code range, convert code if need.
;            check 1st/2nd byte code.
; AUTO = 0, 1
        cmp     al,EscKey
        jz      @f
        cmp     al,FsKey
        jz      @f
        cmp     al,' '
        jbe     NorEnd
        call    ChkRange
        jc      NorEnd
        call    ChgCodeTy
        ret
@@:
        mov     bl,[Printer]
        and     bl,not ChPrinter
        cmp     bl,wKmPrt
        jnz     NorEnd
        mov     [PrtAuto],AutoEsc
        cmp     al,EscKey
        jnz     @f                      ; jump if "FS" code
        mov     [EscCode2Addr],offset KmEscCode2
        mov     [EscCode3Addr],offset KmEscCode3
        mov     [EscCodeNAddr],offset KmEscCodeN
        mov     [EscCode4Addr],offset KmEscCode4
        jmp     short NorEnd
@@:
        mov     [EscCode2Addr],offset KmFsCode2
        mov     [EscCode3Addr],offset KmFsCode3
        mov     [EscCodeNAddr],offset KmFsCodeN
        mov     [EscCode4Addr],offset KmFsCode4
NorEnd:
        cmp     [HanCnt],0
        jz      @f
        mov     [HanCnt],0
        mov     bl,al
        mov     al,[Han1stCode]
        xor     ah,ah
        pushf
        call    [OldInt17]              ; print a char.
        mov     al,bl
@@:
        clc
        ret

;========================================================================
;   << sAutoEsc >>
; FUNCTION = search 2nd ESC code, send 1st byte if saved.
; AUTO = 0, 2, 3, 4, 6, 8, a, b, c, d, e, f
sAutoEsc:                               ; 1
        mov     si,[EscCode2Addr]
        call    SearchEscCode1
        mov     ah,0
        jc      @f                      ; jump if found.
        mov     si,[EscCode3Addr]
        call    SearchEscCode1
        mov     ah,Auto3
        jc      @f                      ; jump if found.
        mov     si,[EscCodeNAddr]
        call    SearchEscCode2
        jc      @f                      ; jump if found.
        mov     [PrtAuto],AutoNor
        jmp     sAutoNor
@@:
        mov     [PrtAuto],ah
        clc
        ret

;========================================================================
;   << sAuto3 >>
; FUNCTION = return to normal.
; AUTO = 0
sAuto3:                                 ; 2
        mov     [PrtAuto],AutoNor
        clc
        ret

;========================================================================
;   << sAuto4 >>
; FUNCTION = go to sAutoVCnt for spend 1 byte.
; AUTO = 8
sAuto4:                                 ; 3
        mov     [CharCnt],1
        mov     [PrtAuto],AutoV1stx3
        clc
        ret

;========================================================================
;   << sAutoV1 >>
; FUNCTION = check 3rd ESC code
; AUTO = 0, 6, 8
sAutoV1:                                ; 4
        mov     si,[EscCode4Addr]
        call    SearchEscCode2
        jnc     @f                      ; jump if not found.
        mov     [PrtAuto],ah
        clc
        ret
@@:
        mov     [PrtAuto],AutoNor
        ret

;========================================================================
;   << sAutoVCnt >>
; FUNCTION = spend n char.
; AUTO = 0
sAutoVCnt:                              ; 5
        dec     [CharCnt]
        jnz     @f
        mov     [PrtAuto],AutoNor
@@:
        clc
        ret

;========================================================================
;   << sAutoV1stx1 >>
; FUNCTION = save 1st counter.
; AUTO = 7
sAutoV1stx1:                            ; 6
        xor     ah,ah
        mov     [CharCnt],ax
        mov     [PrtAuto],AutoV2ndx1
        clc
        ret

;========================================================================
;   << sAutoV2ndx1 >>
; FUNCTION = save 2nd counter, calc size(*1).
; AUTO = 5
sAutoV2ndx1:                            ; 7
        mov     cl,al
        mov     bx,[CharCnt]
        mul     bx
        mov     [CharCnt],ax
        mov     al,cl
        mov     [PrtAuto],AutoVCnt
        clc
        ret

;========================================================================
;   << sAutoV1stx3 >>
; FUNCTION = save 1st counter.
; AUTO = 9
sAutoV1stx3:                            ; 8
        xor     ah,ah
        mov     [CharCnt],ax
        mov     [PrtAuto],AutoV2ndx3
        clc
        ret

;========================================================================
;   << sAutoV2ndx3 >>
; FUNCTION = save 2nd counter, calc size(*3).
; AUTO = 5
sAutoV2ndx3:                            ; 9
        mov     cl,al
        mov     bx,[CharCnt]
        mul     bx
        mov     bl,3
        mul     bx
        mov     [CharCnt],ax
        mov     al,cl
        mov     [PrtAuto],AutoVCnt
        clc
        ret

;========================================================================
;   << sAutoNull >>
; FUNCTION = spend until null.
; AUTO = 0
sAutoNull:                              ; a
        or      al,al
        jnz     @f
        mov     [PrtAuto],AutoNor
@@:
        clc
        ret

;========================================================================
;   << sAutoEng >>
; FUNCTION = spend until english char.
; AUTO = 0
sAutoEng:                               ; b
        mov     ah,al
        or      ah,20h                  ; make low char.
        cmp     ah,'a'
        jb      @f
        cmp     ah,'z'
        ja      @f
        mov     [PrtAuto],AutoNor
@@:
        clc
        ret

;========================================================================
;   << sAutoEngLow >>
; FUNCTION = spend until english low char.
; AUTO = 0
sAutoEngLow:                            ; c
        cmp     al,'a'
        jb      @f
        cmp     al,'z'
        ja      @f
        mov     [PrtAuto],AutoNor
@@:
        clc
        ret

;========================================================================
;   << sAuto74 >>
; FUNCTION = set counter to 73.
; AUTO = 5
sAuto74:                                ; d
        mov     [HanCnt],73
        mov     [PrtAuto],AutoVCnt
        clc
        ret

;========================================================================
;   << sAuto5 >>
; FUNCTION = set counter to 4.
; AUTO = 5
sAuto5:                                 ; e
        mov     [HanCnt],4
        mov     [PrtAuto],AutoVCnt
        clc
        ret

;========================================================================
;   << sAuto8 >>
; FUNCTION = set counter to 7.
; AUTO = 5
sAuto8:                                 ; f
        mov     [HanCnt],7
        mov     [PrtAuto],AutoVCnt
        clc
        ret

;========================================================================
;   << sAuto3Cnt >>
; FUNCTION = set counter to 2.
; AUTO = 5
sAuto3Cnt:                              ; 10
        mov     [HanCnt],2
        mov     [PrtAuto],AutoVCnt
        clc
        ret

;========================================================================
;   << sAuto78 >>
; FUNCTION = set counter to 73.
; AUTO = 5
sAuto78:                                ; 11
        mov     [HanCnt],78
        mov     [PrtAuto],AutoVCnt
        clc
        ret

;------------------------------------------------------------------------
ChkRange:
        test    [CodeStat],Chab
        jz      @f
        call    ChkRangeCh
        jmp     short ChkEnd
;@@:
;        test    [CodeStat],Wsung7
;        jz      @f
;        call    ChkRangeCh7
;        jmp     short ChkEnd
@@:
        call    ChkRangeWs
ChkEnd:
        ret

ChkRangeWs:
        test    [Printer],ChPrinter
        jz      @f                      ; jump if code == printer type
        call    CheckCodeRange1st
        ret
@@:
        stc                             ; out range
        ret

ChkRangeCh:
        test    [Printer],ChPrinter
        jnz     @b                      ; jump if code == printer type
        cmp     [HanCnt],0
        jnz     @f
        call    CheckCodeRange1st
        ret
@@:
        mov     ah,[Han1stCode]
        call    CheckCodeRangeword
        ret

ChkRangeCh7:
        cmp     [HanCnt],0
        jnz     @f
        call    CheckCodeRange1st
        ret
@@:
        mov     ah,[Han1stCode]
        call    CheckCodeRangeword
        ret

;------------------------------------------------------------------------
ChgCodeTy:
        cmp     [HanCnt],0
        jnz     @f
        mov     [Han1stCode],al
        inc     [HanCnt]
        stc                             ; does not print char.
        ret
@@:
        mov     [HanCnt],0
        mov     ah,[Han1stCode]
        mov     cx,ax                   ; save code
        push    cx
        push    dx
        test    [Printer],ChPrinter
        jnz     ChoHabPrt
        test    [CodeStat],Chab
        jz      @f
        call    ChgCh2Ks
        jmp     short ChgEnd
@@:
;        test    [CodeStat],Wsung7
;        jz      ChgEnd
;        call    ChgCh72Ks
;        jmp     short ChgEnd
ChoHabPrt:
;        test    [CodeStat],Wsung7
;        jnz     @f
        test    [CodeStat],Chab
        jnz     ChgEnd
        call    ChgKs2Ch
        jmp     short ChgEnd
;@@:
;        call    ChgCh72Ks
;        jc      ChgEnd
;        call    ChgKs2Ch
ChgEnd:
        pop     dx
        pop     cx
        jc      @f
        mov     bx,ax
        mov     al,bh                   ; print 1st byte
        xor     ah,ah
        pushf
        call    [OldInt17]              ; print a char.
        mov     al,bl                   ; set 2nd byte
        clc
        ret
@@:
        mov     al,ch
        xor     ah,ah
        pushf
        call    [OldInt17]              ; print a char.
        mov     al,cl
;        test    [CodeStat],Wsung7
;        jz      @f
;        call    ChkRange                ; It's ChoHab 7 bit code system only.
;        jnc     @f
;        mov     [Han1stCode],al
;        inc     [HanCnt]
;        stc                             ; does not print char.
clc
@@:
        ret

;------------------------------------------------------------------------
SearchEscCode1:
        mov     bl,al
@@:
        lodsb
        cmp     al,TblEnd
        jz      @f
        cmp     al,bl
        jnz     @b
        stc                             ; found
@@:
        mov     al,bl
        ret

;------------------------------------------------------------------------
SearchEscCode2:
        mov     bl,al
@@:
        lodsw
        cmp     al,TblEnd
        jz      @f
        cmp     al,bl
        jnz     @b
        stc                             ; found
@@:
        mov     al,bl
        ret

EscCode2Tbl     label   word
                dw      offset KsEscCode2
                dw      offset LbpEscCode2
                dw      offset KmEscCode2
                dw      0
                dw      0
                dw      0
                dw      offset KmEscCode2
                dw      offset TgEscCode2

EscCode3Tbl     label   word
                dw      offset KsEscCode3
                dw      offset LbpEscCode3
                dw      offset KmEscCode3
                dw      0
                dw      0
                dw      0
                dw      offset KmEscCode3
                dw      offset TgEscCode3

EscCodeNTbl     label   word
                dw      offset KsEscCodeN
                dw      offset LbpEscCodeN
                dw      offset KmEscCodeN
                dw      0
                dw      0
                dw      0
                dw      offset KmEscCodeN
                dw      offset TgEscCodeN

EscCode4Tbl     label   word
                dw      offset KsEscCode4
                dw      offset LbpEscCode4
                dw      offset KmEscCode4
                dw      0
                dw      0
                dw      0
                dw      offset KmEscCode4
                dw      offset TgEscCode4


KsEscCode2 label   byte
        db      '01267<EFGH',TblEnd
KsEscCode3 label   byte
        db      '-3ACJUWcdhimqruwxyz',TblEnd
KsEscCodeN label   byte
        db      't', Auto4
        db      'K', AutoV1stx1
        db      'L', AutoV1stx1
        db      'n', AutoV1stx3
        db      'D', AutoNull
KsEscCode4 label   byte
        db      TblEnd

ChEscCode2 label   byte
        db      '01267<EFGHMPTqy',TblEnd
ChEscCode3 label   byte
        db      '-3ACJQSUWbcfghimprsvl',TblEnd
ChEscCodeN label   byte
        db      'R', Auto4
        db      '*', AutoV1
        db      't', Auto3Cnt
        db      'K', AutoV1stx1
        db      'L', AutoV1stx1
        db      'Y', AutoV1stx1
        db      'k', AutoV1stx3
        db      'D', AutoNull
        db      TblEnd
ChEscCode4 label   byte
        db      'p', AutoV1stx1
        db      '!', AutoV1stx3
        db      TblEnd

TgEscCode2 label   byte
        db      'heWwIiDLdNjk6c7GgUuFfBbSsVv'
TgEscCode3 label   byte
        db      TblEnd
TgEscCodeN label   byte
        db      'T',Auto3Cnt
        db      '[',AutoV1
        db      TblEnd
TgEscCode4 label   byte
        db      'M',Auto4
        db      'm',AutoNor
        db      'R',AutoNor
        db      'r',AutoNor
        db      TblEnd

KmEscCode2 label   byte
        db      'O01267MPTg45EFGH@<',0fh,0eh,TblEnd
KmEscCode3 label   byte
        db      'CNQl3A/JRSkptx% a-w!WqUdr',19h,TblEnd
KmEscCodeN label   byte
        db      '$', Auto4
        db      'C', Auto4
        db      '\', Auto4
        db      ' ', Auto4
        db      '?', Auto4
        db      ':', Auto5
        db      '(', Auto8
        db      '*', AutoV1
        db      'K', AutoV1stx1
        db      'L', AutoV1stx1
        db      'Y', AutoV1stx1
        db      'Z', AutoV1stx1
        db      'B', AutoNull
        db      'D', AutoNull
        db      'b', AutoNull
        db      TblEnd
KmEscCode4 label   byte
        db      0, AutoV1stx1
        db      1, AutoV1stx1
        db      2, AutoV1stx1
        db      3, AutoV1stx1
        db      4, AutoV1stx1
        db      6, AutoV1stx1
        db      32, AutoV1stx3
        db      33, AutoV1stx3
        db      38, AutoV1stx3
        db      39, AutoV1stx3
        db      40, AutoV1stx3
        db      TblEnd

KmFsCode2 label   byte
        db      'JK&.UV ',0fh,12h,0eh,14h,TblEnd
KmFsCode3 label   byte
        db      '$a!-WXvkrtx ',TblEnd
KmFsCodeN label   byte
        db      'D', Auto4
        db      'M', Auto4
        db      'S', Auto4
        db      'T', Auto4
        db      '&', Auto78
        db      '2', Auto74
KmFsCode4 label   byte
        db      TblEnd

LbpEscCode2 label   byte
        db      '@SJKBbRrUuWwMmDdIi'
LbpEscCode3 label   byte
        db      TblEnd
LbpEscCodeN label   byte
        db      '[', AutoEng             ; ESC "[" ____ ENGLISH-char
        db      '(', AutoEngLow          ; ESC "(" ____ ENGLISH-low-char
        db      ')', AutoEngLow          ; ESC ")" ____ ENGLISH-low-char
LbpEscCode4 label   byte
        db      TblEnd

;========================================================================
;
; CODE CONVERSION program
;
;========================================================================

ASSUME CS:CODE,DS:CODE,ES:CODE

EXTRN   ChHgWTbl:byte, ChHgWLng:word, ChHgCTbl:byte, ChHgIndexTbl:word
EXTRN   ah88h:byte

;========================================================================
;   << ChgCh2Ks >>
; FUNCTION = Code convertion ChoHab to WanSung in HanJa/Grp/Hangeul
;
; RANGE :
;         84-d3, 41h-7eh 81h-feh (ѱ)
;         d9-de, 31h-7eh 91h-feh (Ÿ)
;         e0-f9, 31h-7eh 91h-feh ()
;         d8,    31h-7eh 91h-feh (udc)
;
; Code array :  88 ...... 61   00 =  B0A1
;                          |    |    B0A2
;                         FD   BF     :
;               89 ...... 41   C0     :
;                          |    |
;                         B7   17F
;               90 ...... 61   180
;                |         |    |
;                |         |    |
;               D3        B7
;
; INPUT   : AX=Էcode
; OUTPUT  : if CY=fail
;           if NC=success, AX=ȯ code, BX=Էcode

EXTRN   Ch2Ks:near
PUBLIC  ChgCh2Ks

ChgCh2Ks:
        @push   cx,dx,si,di,es,ds,bp
        push    ax
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        mov     di,ax
ChHgKs:
        cmp     ah,084h
        jb      ChgCh2KsErr
        cmp     ah,0d3h
        ja      ChHjKs
        cmp     al,41h                  ; 41h - 7eh, 81h - feh
        jb      ChgCh2KsErr
        cmp     al,0feh
        ja      ChgCh2KsErr
        cmp     al,07eh
        jbe     @f
        cmp     al,81h
        jb      ChgCh2KsErr
@@:
        jmp     Ch2KsHg
ChHjKs:
        cmp     al,31h                  ; 31h - 7eh, 91h - feh
        jb      ChgCh2KsErr
        cmp     al,0feh
        ja      ChgCh2KsErr
        cmp     al,07eh
        jbe     @f
        cmp     al,91h
        jb      ChgCh2KsErr
@@:
        cmp     ah,0d8h
        jz      ChUdcKs
        cmp     ah,0d9h                 ; d9h - deh
        jb      ChgCh2KsErr
        cmp     ah,0deh
        ja      @f
        jmp     Ch2KsHj
@@:
        cmp     ah,0e0h                 ; e0h - f9h
        jb      ChgCh2KsErr
        cmp     ah,0f9h
        ja      ChgCh2KsErr
        jmp     Ch2KsHj2
ChgCh2KsErr:
        jmp     PostSetRegErr

Ch2KsHg:
        call    Ch2Ks
        jmp     PostSetReg

ChUdcKs:
        cmp     al,07eh
        ja      @f
        sub     ax,00e90h
        jmp     PostSetRegSuc
@@:
        cmp     al,0a1h
        jae     @f
        sub     ax,00ea2h
        jmp     PostSetRegSuc
@@:
        mov     ah,0feh
        jmp     PostSetRegSuc

Ch2KsHj:
        mov     bx,ax
        sub     bh,0d9h-0a1h
        sub     bh,0a1h
        shl     bh,1
        add     bh,0a1h
        jmp     @f
Ch2KsHj2:
        mov     bx,ax
        sub     bh,0e0h-0cah
        sub     bh,0cah
        shl     bh,1
        add     bh,0cah
@@:
        inc     bh
        cmp     al,0a1h
        jae     @f
        dec     bh
        add     bl,0a1h-31h
        cmp     al,7eh
        jbe     @f
        mov     bl,al
        add     bl,0efh-91h
@@:
        mov     ax,bx
        jmp     PostSetRegSuc

;========================================================================
;   << ChgKs2Ch >>
; FUNCTION = Code conversion Wansung to Chohab in HanJa/Grp/hanguel
;
; RANGE : A4A1 - A4D3(Hangeul Component)
;         A1A1 - ABF6(Graphics)
;         B0A1 - C8FE(Hangeul)
;         CAA1 - FDFE(Hanja)
;
; Code array :  88 ...... 61   00 =  B0A1
;                          |    |    B0A2
;                         FD   BF     :
;               89 ...... 41   C0     :
;                          |    |
;                         B7   17F
;               90 ...... 61   180
;                |         |    |
;                |         |    |
;               D3        B7
;
; INPUT   : AX=Էcode
; OUTPUT  : if CY=fail
;           if NC=success, AX=ȯ code, BX=Էcode

EXTRN   Ks2Ch:near
PUBLIC  ChgKs2Ch

ChgKs2Ch:
        @push   cx,dx,si,di,es,ds,bp
        push    ax
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        mov     di,ax
@@:
        cmp     al,0a1h
        jb      isnotJH
        cmp     al,0feh
        ja      isnotJH
        cmp     ah,0a1h
        jb      isnotJH
        cmp     ah,0feh
        ja      isnotJH
        cmp     ah,0ach
        ja      @f
        jmp     Ks2ChGrp
@@:
        cmp     ah,0b0h
        jb      isnotJH
        cmp     ah,0c8h
        ja      @f
        jmp     Ks2ChHg
@@:
        cmp     ah,0feh
        jne     @f
        mov     ah,0d8h
        jmp     PostSetRegSuc
@@:
        cmp     ah,0c9h
        ja      Ks2ChHj
        cmp     al,0eeh
        jbe     @f
        add     ax,00012h
@@:
        add     ax,00e90h
        jmp     PostSetRegSuc
isnotJH:
        jmp     PostSetRegErr

Ks2ChHgComp:
Ks2ChHg:
        call    Ks2Ch
        jmp     PostSetReg
Ks2ChGrp:
        mov     bx,ax
        sub     bh,0a1h
        shr     bh,1
        add     bh,0a1h
        add     bh,0d9h-0a1h
        xor     ah,1
        jmp     short @f
Ks2ChHj:
        mov     bx,ax
        sub     bh,0cah
        shr     bh,1
        add     bh,0cah
        add     bh,0e0h-0cah
@@:
        test    ah,1
        jnz     @f
        sub     bl,0a1h-31h
        cmp     al,0eeh
        jb      @f
        mov     bl,al
        sub     bl,0efh-91h
@@:
        mov     ax,bx
        jmp     PostSetRegSuc

;========================================================================
;   << ChgCh72Ks >>
; FUNCTION = Code conversion Chohab7 to Wansung in Hangule
;
; RANGE : B0A1 - C8FE(Hanguel)
;
; Code array :    00    B0A1
;                  |     |
;                 5D    B0FE
;                 5E    B1A1
;                  |     |
;                 BB    B1FE
;                 BC    B2A1
;                  |     |
;
;                       C8FE
;
; INPUT   : AX=Էcode
; OUTPUT  : if CY=fail
;           if NC=success, AX=ȯ code, BX=Էcode

EXTRN   LinearWordSearch:near, LinearByteSearch:near
PUBLIC  ChgCh72Ks

ChgCh72Ks:
        @push   cx,dx,si,di,es,ds,bp
        push    ax
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        cmp     ax,5f21h
        jb      isnotJ7Wan
        cmp     ax,5f54h
        ja      @f
        mov     si,offset Ch7HgETbl
        mov     cx,ChHgWLng+1
        mov     di,offset ChHgWTbl
        mov     dh,0a4h
        jmp     GetCodeInUnSort2
@@:
        mov     di,ax
        cmp     ax,7e7eh
        ja      isnotJ7Wan
        sub     ah,05Fh
        mov     si,offset Ch7HgTbl
        xor     dx,dx
        xor     bx,bx
        xor     cx,cx
        mov     bl,ah
        mov     cl,bl
        shl     bx,1
        add     bx,cx
        cmp     ah,0
        jz      short @f
        mov     dx,[si+bx+1]
        mov     cx,[si+1]
        sub     dx,cx
@@:
        xor     ch,ch
        mov     cl,[si+bx]
        mov     si,[si+bx+1]
        call    LinearByteSearch
        jc      short @f
        mov     ax,bx
        add     ax,dx
        mov     bl,05eh
        div     bl
        xchg    ah,al
        add     ax,0B0A1h
        jmp     PostSetRegSuc
@@:
        mov     ax,di
        cmp     ah,07eh
        jnz     isnotJ7Wan
        mov     si,offset Ch7HgCTbl
        mov     cx,Ch7HgCLng
        mov     di,offset Ch7HgWTbl
        jmp     GetCodeInUnSort1
isnotJ7Wan:
        jmp     PostSetRegErr

;========================================================================
;   << ChgKs2Ch7 >>
; FUNCTION = Code convertion Wansung to Chohab7 in Hanguel
;
; RANGE : B0A1 - C8FE(Hanguel)
;
; Code array :   B0A1    00
;                 |       |
;                B0FE    5D
;                B1A1    5E
;                 |       |
;                B1FE    BB
;                B2A1    BC
;                 |
;
;                C8FE
;
; INPUT   : AX=Էcode
; OUTPUT  : if CY=fail
;           if NC=success, AX=ȯ code, BX=Էcode

PUBLIC  ChgKs2Ch7

ChgKs2Ch7:
        @push   cx,dx,si,di,es,ds,bp
        push    ax
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        cmp     ax,0a4a1h
        jb      ChWanJ7Err
        cmp     ax,0a4d3h
        ja      @f
        mov     si,offset ChHgWTbl
        mov     cx,ChHgWLng+1
        mov     dh,05fh
        mov     di,offset Ch7HgETbl
        jmp     GetCodeInUnSort2
@@:
        cmp     ax,0B0A1h
        jb      ChWanJ7Err
        cmp     ax,0C8FEh
        ja      ChWanJ7Err
        mov     di,ax
        mov     si,offset AH5F
        sub     ax,0B0A1h
        mov     bx,ax
        mov     al,ah
        mov     ah,0A2h
        mul     ah
        sub     bx,ax
        mov     al,[bx+si]
        cmp     al,0
        je      ChWan7C
        mov     si,offset Ch7HgTbl
        xor     dx,dx
        mov     cx,dx
        mov     ah,dh
@@:
        mov     cl,[si]
        add     dx,cx
        cmp     bx,dx
        jb      short @f
        add     si,3
        inc     ah
        jmp     short @b
@@:
        add     ah,05fh
        jmp     ChWanJ7End
ChWan7C:
        mov     ax,di
        mov     si,offset Ch7HgWTbl
        mov     cx,Ch7HgCLng
        mov     di,offset Ch7HgCTbl
        mov     dh,07eh
        jmp     GetCodeInUnSort3
ChWanJ7End:
        jmp     PostSetRegSuc
ChWanJ7Err:
        jmp     PostSetRegErr

;------------------------------------------------------------------------
GetCodeInUnSort1:
        call    LinearByteSearch
        jc      SetFail
        shl     bx,1
        mov     si,di
        mov     ax,word ptr [si+bx]
SetSuccess:
        jmp     PostSetRegSuc
SetFail:
        jmp     PostSetRegErr
GetCodeInUnSort2:
        call    LinearByteSearch
        jc      SetFail
        jmp     short @f
GetCodeInUnSort3:
        call    LinearWordSearch
        jc      SetFail
        shr     bx,1
@@:
        mov     ah,dh
        mov     si,di
        mov     al,byte ptr [si+bx]
        jmp     SetSuccess

PostSetReg:
        pop     bx
        jnc     @f
        mov     ax,bx
@@:
        @pop    bp,ds,es,di,si,dx,cx
        ret

PostSetRegErr:
        stc
        pop     ax
        @pop    bp,ds,es,di,si,dx,cx
        ret
PostSetRegSuc:
        clc
        pop     bx
        @pop    bp,ds,es,di,si,dx,cx
        ret

include CHOHAB7.TBL


=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\ascii.inc ===
DW      0,0,0,0,0,0,0,0
        DW      0,0,0,1F00h,1010h,1010h,1010h,1010h
        DW      0,0,0,0F000h,1010h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,1F10h,0,0,0,0
        DW      1010h,1010h,1010h,0F010h,0,0,0,0
        DW      1010h,1010h,1010h,1010h,1010h,1010h,1010h,1010h
        DW      0,0,0,0FF00h,0,0,0,0
        DW      0,0,0,3C18h,183Ch,0,0,0
        DW      0FFFFh,0FFFFh,0FFFFh,0C3E7h,0E7C3h,0FFFFh,0FFFFh,0FFFFh
        DW      0,0,1800h,663Ch,3C66h,18h,0,0
        DW      0FFFFh,0FFFFh,0E7FFh,99C3h,0C399h,0FFE7h,0FFFFh,0FFFFh
        DW      0,3E00h,1A0Eh,6C3Ah,0C6C6h,386Ch,0,0
        DW      0,1800h,663Ch,3C66h,7E18h,1818h,0,0
        DW      0,1000h,1C18h,1216h,7412h,60F0h,0,0
        DW      0,1907h,1917h,1111h,7F17h,60F6h,0,0
        DW      0,2442h,0E73Ch,4242h,3CE7h,4224h,0,0
        DW      1010h,1010h,1010h,0FF10h,1010h,1010h,1010h,1010h
        DW      0,0,0F03h,0FF3Fh,3FFFh,30Fh,0,0
        DW      0,1800h,7E3Ch,18DBh,7EDBh,183Ch,0,0
        DW      0,6600h,6666h,6666h,66h,6666h,0,0
        DW      0,7F00h,0DBDBh,7BDBh,1B1Bh,1B1Bh,0,0
        DW      1010h,1010h,1010h,0FF10h,0,0,0,0
        DW      0,0,0,0FF00h,1010h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,0F010h,1010h,1010h,1010h,1010h
        DW      0,3C18h,0DB7Eh,1899h,1818h,1818h,0,0
        DW      1010h,1010h,1010h,1F10h,1010h,1010h,1010h,1010h
        DW      0,0,0C18h,0FF06h,6FFh,180Ch,0,0
        DW      0,0,3018h,0FF60h,60FFh,1830h,0,0
        DW      0,0,0C000h,0C0C0h,0C0C0h,0FEh,0,0
        DW      0,0,2400h,0FF66h,66FFh,24h,0,0
        DW      0,0,1818h,3C3Ch,7E7Eh,0FFFFh,0,0
        DW      0,0,0FFFFh,7E7Eh,3C3Ch,1818h,0,0
        DW      0,0,0,0,0,0,0,0
        DW      0,1800h,3C3Ch,183Ch,18h,1818h,0,0
        DW      0,6666h,4466h,0,0,0,0,0
        DW      0,6C00h,0FE6Ch,6C6Ch,0FE6Ch,6C6Ch,0,0
        DW      1800h,7C18h,0C2C6h,7CC0h,8606h,7CC6h,1818h,0
        DW      0,0,0C200h,0CC6h,3018h,0C666h,0,0
        DW      0,3800h,6C6Ch,7638h,0CCDCh,76CCh,0,0
        DW      0,3030h,6030h,0,0,0,0,0
        DW      0,0C00h,3018h,3030h,3030h,0C18h,0,0
        DW      0,3000h,0C18h,0C0Ch,0C0Ch,3018h,0,0
        DW      0,0,6600h,0FF3Ch,663Ch,0,0,0
        DW      0,0,1818h,0FF18h,1818h,18h,0,0
        DW      0,0,0,0,0,1800h,1818h,30h
        DW      0,0,0,7E00h,0,0,0,0
        DW      0,0,0,0,0,0,3030h,0
        DW      0,200h,0C06h,3018h,0C060h,80h,0,0
        DW      0,7C00h,0CEC6h,0F6DEh,0C6E6h,7CC6h,0,0
        DW      0,1800h,7838h,1818h,1818h,7E18h,0,0
        DW      0,7C00h,6C6h,180Ch,6030h,0FEC6h,0,0
        DW      0,7C00h,6C6h,3C06h,606h,7CC6h,0,0
        DW      0,0C00h,3C1Ch,0CC6Ch,0CFEh,1E0Ch,0,0
        DW      0,0FE00h,0C0C0h,0FCC0h,606h,7CC6h,0,0
        DW      0,3800h,0C060h,0FCC0h,0C6C6h,7CC6h,0,0
        DW      0,0FE00h,6C6h,180Ch,3030h,3030h,0,0
        DW      0,7C00h,0C6C6h,7CC6h,0C6C6h,7CC6h,0,0
        DW      0,7C00h,0C6C6h,7EC6h,606h,780Ch,0,0
        DW      0,0,1818h,0,1800h,18h,0,0
        DW      0,0,1818h,0,1800h,3018h,0,0
        DW      0,600h,180Ch,6030h,1830h,60Ch,0,0
        DW      0,0,0,7Eh,7E00h,0,0,0
        DW      0,6000h,1830h,60Ch,180Ch,6030h,0,0
        DW      0,7C00h,0C6C6h,180Ch,18h,1818h,0,0
        DW      0,7C00h,0C6C6h,0DEDEh,0DCDEh,7CC0h,0,0
        DW      0,1000h,6C38h,0C6C6h,0C6FEh,0C6C6h,0,0
        DW      0,0FC00h,6666h,7C66h,6666h,0FC66h,0,0
        DW      0,3C00h,0C266h,0C0C0h,0C2C0h,3C66h,0,0
        DW      0,0F800h,666Ch,6666h,6666h,0F86Ch,0,0
        DW      0,0FE00h,6266h,7868h,6268h,0FE66h,0,0
        DW      0,0FE00h,6266h,7868h,6068h,0F060h,0,0
        DW      0,3C00h,0C266h,0C0C0h,0C6DEh,3A66h,0,0
        DW      0,0C600h,0C6C6h,0FEC6h,0C6C6h,0C6C6h,0,0
        DW      0,3C00h,1818h,1818h,1818h,3C18h,0,0
        DW      0,1E00h,0C0Ch,0C0Ch,0CC0Ch,78CCh,0,0
        DW      0,0E600h,6C66h,786Ch,6C6Ch,0E666h,0,0
        DW      0,0F000h,6060h,6060h,6260h,0FE66h,0,0
        DW      0,0C600h,0FEEEh,0C6D6h,0C6C6h,0C6C6h,0,0
        DW      0,0C600h,0F6E6h,0DEFEh,0C6CEh,0C6C6h,0,0
        DW      0,3800h,0C66Ch,0C6C6h,0C6C6h,386Ch,0,0
        DW      0,0FC00h,6666h,7C66h,6060h,0F060h,0,0
        DW      0,7C00h,0C6C6h,0C6C6h,0DED6h,0C7Ch,0Eh,0
        DW      0,0FC00h,6666h,7C66h,666Ch,0E766h,0,0
        DW      0,7C00h,0C6C6h,3860h,0C60Ch,7CC6h,0,0
        DW      0,0FF00h,1899h,1818h,1818h,3C18h,0,0
        DW      0,0C600h,0C6C6h,0C6C6h,0C6C6h,7CC6h,0,0
        DW      0,0C600h,0C6C6h,0C6C6h,6CC6h,1038h,0,0
        DW      0,0C600h,0C6C6h,0C6C6h,0FED6h,0C6EEh,0,0
        DW      0,0C600h,0C6C6h,386Ch,0C66Ch,0C6C6h,0,0
        DW      0,0C300h,66C3h,183Ch,1818h,3C18h,0,0
        DW      0,0FE00h,8CC6h,3018h,0C260h,0FEC6h,0,0
        DW      0,3C00h,3030h,3030h,3030h,3C30h,0,0
        DW      0,0C600h,0D6D6h,0D6FEh,0D6D6h,0C6EEh,0,0
        DW      0,3C00h,0C0Ch,0C0Ch,0C0Ch,3C0Ch,0,0
        DW      1000h,6C38h,0C6h,0,0,0,0,0
        DW      0,0,0,0,0,0,0FF00h,0
        DW      1800h,0C18h,0,0,0,0,0,0
        DW      0,0,0,0C78h,0CC7Ch,76CCh,0,0
        DW      0,0E000h,6060h,6C78h,6666h,0DC66h,0,0
        DW      0,0,0,0C67Ch,0C0C0h,7CC6h,0,0
        DW      0,1C00h,0C0Ch,6C3Ch,0CCCCh,76CCh,0,0
        DW      0,0,0,0C67Ch,0C0FEh,7CC6h,0,0
        DW      0,1C00h,3236h,7C30h,3030h,7830h,0,0
        DW      0,0,0,0CC76h,0CCCCh,0C7Ch,78CCh,0
        DW      0,0E000h,6060h,766Ch,6666h,0E666h,0,0
        DW      0,1800h,18h,1838h,1818h,3C18h,0,0
        DW      0,600h,6,60Eh,606h,6606h,3C66h,0
        DW      0,0E000h,6060h,6C66h,6C78h,0E666h,0,0
        DW      0,3800h,1818h,1818h,1818h,3C18h,0,0
        DW      0,0,0,0FEECh,0D6D6h,0D6D6h,0,0
        DW      0,0,0,66DCh,6666h,6666h,0,0
        DW      0,0,0,0C67Ch,0C6C6h,7CC6h,0,0
        DW      0,0,0,66DCh,6666h,607Ch,0F060h,0
        DW      0,0,0,0CC76h,0CCCCh,0C7Ch,1E0Ch,0
        DW      0,0,0,76DCh,6066h,0F060h,0,0
        DW      0,0,0,0C67Ch,1C70h,7CC6h,0,0
        DW      0,1000h,3030h,30FCh,3030h,1C36h,0,0
        DW      0,0,0,0CCCCh,0CCCCh,76CCh,0,0
        DW      0,0,0,0C6C6h,6CC6h,1038h,0,0
        DW      0,0,0,0C6C6h,0D6C6h,6CFEh,0,0
        DW      0,0,0,6CC6h,3838h,0C66Ch,0,0
        DW      0,0,0,0C6C6h,0C6C6h,67Eh,780Ch,0
        DW      0,0,0,0CCFEh,3018h,0FE66h,0,0
        DW      0,0E00h,1818h,7018h,1818h,0E18h,0,0
        DW      0,1800h,1818h,18h,1818h,1818h,0,0
        DW      0,7000h,1818h,0E18h,1818h,7018h,0,0
        DW      0,7600h,0DCh,0,0,0,0,0
        DW      0,0,1818h,1800h,3C18h,3C3Ch,18h,0
        DW      0,0,663Ch,0C0C2h,66C2h,183Ch,0C0Eh,78h
        DW      0,0CC00h,0CCh,0CCCCh,0CCCCh,76CCh,0,0
        DW      0,180Ch,30h,0C67Ch,0C0FEh,7CC6h,0,0
        DW      0,3810h,6Ch,0C78h,0CC7Ch,76CCh,0,0
        DW      0,0CC00h,0CCh,0C78h,0CC7Ch,76CCh,0,0
        DW      0,3060h,18h,0C78h,0CC7Ch,76CCh,0,0
        DW      0,6C38h,38h,0C78h,0CC7Ch,76CCh,0,0
        DW      0,0,0,663Ch,6660h,0C3Ch,3C06h,0
        DW      0,3810h,6Ch,0C67Ch,0C0FEh,7CC6h,0,0
        DW      0,0CC00h,0CCh,0C67Ch,0C0FEh,7CC6h,0,0
        DW      0,3060h,18h,0C67Ch,0C0FEh,7CC6h,0,0
        DW      0,6600h,66h,1838h,1818h,3C18h,0,0
        DW      0,3C18h,66h,1838h,1818h,3C18h,0,0
        DW      0,3060h,18h,1838h,1818h,3C18h,0,0
        DW      0C600h,0C6h,3810h,0C66Ch,0FEC6h,0C6C6h,0,0
        DW      3800h,386Ch,3810h,0C66Ch,0FEC6h,0C6C6h,0,0
        DW      1800h,6030h,0FE00h,6066h,607Ch,0FE66h,0,0
        DW      0,0,6E00h,1BBBh,0D8FFh,76D9h,0,0
        DW      0,3F00h,0CC6Ch,0FFCCh,0CCCCh,0CCCCh,0,0
        DW      0,3810h,6Ch,0C67Ch,0C6C6h,7CC6h,0,0
        DW      0,0C600h,0C6h,0C67Ch,0C6C6h,7CC6h,0,0
        DW      0,3060h,18h,0C67Ch,0C6C6h,7CC6h,0,0
        DW      0,7830h,0CCh,0CCCCh,0CCCCh,76CCh,0,0
        DW      0,3060h,18h,0CCCCh,0CCCCh,76CCh,0,0
        DW      0,0C600h,0C6h,0C6C6h,0C6C6h,67Eh,780Ch,0
        DW      0C600h,0C6h,6C38h,0C6C6h,0C6C6h,386Ch,0,0
        DW      0C600h,0C6h,0C600h,0C6C6h,0C6C6h,7CC6h,0,0
        DW      0,1818h,0C37Eh,0C0C0h,7EC3h,1818h,0,0
        DW      0,6C38h,6064h,60F0h,6060h,0FCE6h,0,0
        DW      0,66C3h,183Ch,18FFh,18FFh,1818h,0,0
        DW      0,66FCh,7C66h,6662h,666Fh,0F366h,0,0
        DW      0,1B0Eh,1818h,187Eh,1818h,70D8h,0,0
        DW      0,180Ch,30h,0C78h,0CC7Ch,76CCh,0,0
        DW      0,0C06h,18h,1838h,1818h,3C18h,0,0
        DW      0,180Ch,30h,0C67Ch,0C6C6h,7CC6h,0,0
        DW      0,180Ch,30h,0CCCCh,0CCCCh,76CCh,0,0
        DW      0,7600h,0DCh,66DCh,6666h,6666h,0,0
        DW      7600h,0DCh,0E6C6h,0FEF6h,0CEDEh,0C6C6h,0,0
        DW      0,6C3Ch,3E6Ch,7E00h,0,0,0,0
        DW      0,663Ch,3C66h,7E00h,0,0,0,0
        DW      0,0,3030h,3000h,6030h,0C6C6h,7Ch,0
        DW      0,0,7E00h,6060h,6060h,60h,0,0
        DW      0,0,7E00h,606h,606h,6,0,0
        DW      6000h,6260h,6864h,367Ch,8C46h,1E18h,0,0
        DW      6000h,6260h,6864h,2E76h,9F5Ah,202h,0,0
        DW      0,0,1818h,1800h,3C18h,3C3Ch,18h,0
        DW      0,0,3612h,0D86Ch,366Ch,12h,0,0
        DW      0,0,6C48h,1B36h,6C36h,48h,0,0
        DW      8822h,8822h,8822h,8822h,8822h,8822h,8822h,8822h
        DW      0AA55h,0AA55h,0AA55h,0AA55h,0AA55h,0AA55h,0AA55h,0AA55h
        DW      6DDBh,6DDBh,6DDBh,6DDBh,6DDBh,6DDBh,6DDBh,6DDBh
        DW      1010h,1010h,1010h,1010h,1010h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,0F010h,1010h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,10F0h,0F010h,1010h,1010h,1010h
        DW      2424h,2424h,2424h,0E424h,2424h,2424h,2424h,2424h
        DW      0,0,0,0FC00h,2424h,2424h,2424h,2424h
        DW      0,0,0,10F0h,0F010h,1010h,1010h,1010h
        DW      2424h,2424h,2424h,4E4h,0E404h,2424h,2424h,2424h
        DW      2424h,2424h,2424h,2424h,2424h,2424h,2424h,2424h
        DW      0,0,0,4FCh,0E404h,2424h,2424h,2424h
        DW      2424h,2424h,2424h,4E4h,0FC04h,0,0,0
        DW      2424h,2424h,2424h,0FC24h,0,0,0,0
        DW      1010h,1010h,1010h,10F0h,0F010h,0,0,0
        DW      0,0,0,0F000h,1010h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,1F10h,0,0,0,0
        DW      1010h,1010h,1010h,0FF10h,0,0,0,0
        DW      0,0,0,0FF00h,1010h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,1F10h,1010h,1010h,1010h,1010h
        DW      0,0,0,0FF00h,0,0,0,0
        DW      1010h,1010h,1010h,0FF10h,1010h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,101Fh,1F10h,1010h,1010h,1010h
        DW      2424h,2424h,2424h,2724h,2424h,2424h,2424h,2424h
        DW      2424h,2424h,2424h,2027h,3F20h,0,0,0
        DW      0,0,0,203Fh,2720h,2424h,2424h,2424h
        DW      2424h,2424h,2424h,0E7h,0FF00h,0,0,0
        DW      0,0,0,0FFh,0E700h,2424h,2424h,2424h
        DW      2424h,2424h,2424h,2027h,2720h,2424h,2424h,2424h
        DW      0,0,0,0FFh,0FF00h,0,0,0
        DW      2424h,2424h,2424h,0E7h,0E700h,2424h,2424h,2424h
        DW      1010h,1010h,1010h,0FFh,0FF00h,0,0,0
        DW      2424h,2424h,2424h,0FF24h,0,0,0,0
        DW      0,0,0,0FFh,0FF00h,1010h,1010h,1010h
        DW      0,0,0,0FF00h,2424h,2424h,2424h,2424h
        DW      2424h,2424h,2424h,3F24h,0,0,0,0
        DW      1010h,1010h,1010h,101Fh,1F10h,0,0,0
        DW      0,0,0,101Fh,1F10h,1010h,1010h,1010h
        DW      0,0,0,3F00h,2424h,2424h,2424h,2424h
        DW      2424h,2424h,2424h,0FF24h,2424h,2424h,2424h,2424h
        DW      1010h,1010h,1010h,10FFh,0FF10h,1010h,1010h,1010h
        DW      1010h,1010h,1010h,0F010h,0,0,0,0
        DW      0,0,0,1F00h,1010h,1010h,1010h,1010h
        DW      0FFFFh,0FFFFh,0FFFFh,0FFFFh,0FFFFh,0FFFFh,0FFFFh,0FFFFh
        DW      0,0,0,0,0FFFFh,0FFFFh,0FFFFh,0FFFFh
        DW      0F0F0h,0F0F0h,0F0F0h,0F0F0h,0F0F0h,0F0F0h,0F0F0h,0F0F0h
        DW      0F0Fh,0F0Fh,0F0Fh,0F0Fh,0F0Fh,0F0Fh,0F0Fh,0F0Fh
        DW      0FFFFh,0FFFFh,0FFFFh,0FFFFh,0,0,0,0
        DW      0,0,6200h,0CCD6h,0CCCCh,76DCh,0,0
        DW      0,3800h,646Ch,667Ch,6666h,7C66h,0C0h,0
        DW      0,0,62FEh,6060h,6060h,0F060h,0,0
        DW      0,0,66FFh,6666h,6666h,6666h,0,0
        DW      0,0,0C2FEh,3060h,2010h,0FE42h,0FEh,0
        DW      0,0,7E00h,0CCCCh,0CCCCh,386Ch,0,0
        DW      0,0,6600h,6666h,6666h,607Ch,0C0h,0
        DW      0,0,7E00h,18D8h,1818h,3818h,0,0
        DW      0,187Eh,3C18h,6666h,183Ch,7E18h,0,0
        DW      0,3800h,0C66Ch,0FEC6h,0C6C6h,386Ch,0,0
        DW      0,3800h,0C66Ch,0C6C6h,286Ch,0EEAAh,0,0
        DW      0,0,6438h,1830h,0CC7Ch,78CCh,0,0
        DW      0,0,0,0DB7Eh,0DBDBh,7Eh,0,0
        DW      0,200h,3C06h,0CE6Ch,6CD6h,0C078h,80h,0
        DW      0,1E00h,6030h,7E60h,6060h,1E30h,0,0
        DW      0,0,6C38h,0C6C6h,0C6C6h,0C6C6h,0,0
        DW      0,0,7E7Eh,7E00h,7Eh,7E7Eh,0,0
        DW      0,1800h,7E18h,187Eh,18h,7E7Eh,0,0
        DW      0,0,38E0h,0E0Eh,0E038h,0FEFEh,0,0
        DW      0,0,380Eh,0E0E0h,0E38h,0FEFEh,0,0
        DW      0,0,0,1B0Eh,181Bh,1818h,1818h,1818h
        DW      1818h,1818h,1818h,0D818h,70D8h,0,0,0
        DW      0,1800h,183Ch,7E00h,7Eh,3C18h,18h,0
        DW      0,0,7600h,0DCh,0DC76h,0,0,0
        DW      0,6C38h,386Ch,0,0,0,0,0
        DW      0,0,3C00h,3C3Ch,3Ch,0,0,0
        DW      0,0,0,3C3Ch,0,0,0,0
        DW      0C07h,0C0Ch,180Ch,1818h,0D098h,70F0h,30h,0
        DW      6C00h,3636h,3636h,0,0,0,0,0
        DW      3800h,0C6Ch,6038h,7Ch,0,0,0,0
        DW      0,0,7C00h,7C7Ch,7C7Ch,0,0,0
        DW      0,0,0,0,0,0,0,0
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\cho.inc ===
DW      0FFFFh
        DW      904h, 7Eh,6,6,6,0Ch,0Ch,18h,30h,40h
        DW      704h, 7Eh,6,6,0Ch,18h,30h,40h
        DW      904h, 0F03Fh,3000h,3000h,3000h,3000h,3000h,2000h,6000h,4000h
        DW      502h, 0F81Fh,1800h,1800h,1800h,1000h
        DW      602h, 0F01Fh,3000h,3000h,3000h,3000h,2000h
        DW      704h, 7Fh,3,3,3,3,3,2
        DW      504h, 7Fh,3,3,3,2
        DW      502h, 7Fh,3,3,3,2
        DW      904h, 0FEh,36h,36h,36h,6Ch,6Ch,58h,90h,20h
        DW      704h, 7Fh,1Bh,1Bh,36h,26h,4Ch,10h
        DW      904h, 0F83Eh,1806h,1806h,1806h,1806h,1804h,1008h,3008h,2000h
        DW      502h, 0F83Eh,1806h,1806h,1806h,1008h
        DW      602h, 0F83Eh,1806h,1806h,1806h,1804h,1008h
        DW      704h, 0FFh,33h,33h,33h,33h,43h,2
        DW      504h, 0FFh,33h,33h,23h,42h
        DW      504h, 0FFh,33h,33h,33h,22h
        DW      502h, 0FFh,33h,33h,33h,22h
        DW      804h, 70h,30h,30h,30h,30h,30h,8030h,1Fh
        DW      604h, 70h,30h,30h,30h,8030h,1Fh
        DW      604h, 38h,18h,18h,18h,18h,0F80Fh
        DW      402h, 38h,18h,18h,0F00Fh
        DW      502h, 38h,18h,18h,18h,0F00Fh
        DW      504h, 0E0h,60h,60h,60h,3Fh
        DW      404h, 0E0h,60h,60h,3Fh
        DW      402h, 0E0h,60h,60h,3Fh
        DW      804h, 7Eh,30h,30h,30h,30h,30h,8030h,1Fh
        DW      604h, 0FEh,60h,60h,60h,8060h,3Fh
        DW      604h, 0F03Fh,18h,18h,18h,18h,0F00Fh
        DW      402h, 0F03Fh,18h,18h,0F00Fh
        DW      502h, 0F03Fh,18h,18h,18h,0F00Fh
        DW      504h, 0FFh,60h,60h,60h,3Fh
        DW      404h, 0FFh,60h,60h,3Fh
        DW      402h, 0FFh,60h,60h,3Fh
        DW      804h, 0FFh,6Ch,6Ch,6Ch,6Ch,6Ch,806Ch,3Fh
        DW      604h, 0FFh,6Ch,6Ch,6Ch,806Ch,3Fh
        DW      604h, 0F83Eh,0C018h,0C018h,0C018h,0C019h,0F80Eh
        DW      402h, 0F83Eh,0C018h,0C018h,0F80Fh
        DW      502h, 0F83Eh,0C018h,0C018h,0C018h,0F80Fh
        DW      504h, 0FFh,6Ch,6Ch,6Ch,3Fh
        DW      404h, 0FFh,6Ch,6Ch,3Fh
        DW      402h, 0FFh,6Ch,6Ch,3Fh
        DW      804h, 0FEh,6,6,0FEh,60h,60h,8060h,3Fh
        DW      604h, 0FEh,6,0FEh,60h,8060h,3Fh
        DW      704h, 0F03Fh,3000h,3000h,0F03Fh,18h,18h,0F00Fh
        DW      502h, 0F03Fh,3000h,0F03Fh,18h,0F01Fh
        DW      602h, 0F03Fh,3000h,0F03Fh,18h,18h,0F00Fh
        DW      604h, 0FFh,3,0FFh,60h,60h,3Fh
        DW      504h, 0FFh,3,0FFh,60h,3Fh
        DW      502h, 0FFh,3,0FFh,60h,3Fh
        DW      704h, 0FEh,66h,66h,66h,66h,66h,7Eh
        DW      604h, 0FEh,66h,66h,66h,66h,7Eh
        DW      604h, 0F03Fh,3018h,3018h,3018h,3018h,0F01Fh
        DW      402h, 0F03Fh,3018h,3018h,0F01Fh
        DW      502h, 0F03Fh,3018h,3018h,3018h,0F01Fh
        DW      504h, 0FFh,63h,63h,63h,7Fh
        DW      404h, 0FFh,63h,63h,7Fh
        DW      402h, 0FFh,63h,63h,7Fh
        DW      804h, 0Eh,0E6h,66h,7Eh,66h,66h,66h,7Eh
        DW      604h, 0Eh,0E6h,7Eh,66h,66h,7Eh
        DW      704h, 7000h,3038h,3018h,0F01Fh,3018h,3018h,0F01Fh
        DW      502h, 7000h,3038h,0F01Fh,3018h,0F01Fh
        DW      602h, 7000h,3038h,0F01Fh,3018h,3018h,0F01Fh
        DW      702h, 7,0E3h,63h,7Fh,63h,63h,7Fh
        DW      602h, 7,0E3h,63h,7Fh,63h,7Fh
        DW      504h, 7,0E3h,7Fh,63h,7Fh
        DW      502h, 7,0E3h,7Fh,63h,7Fh
        DW      804h, 6,0FBh,0DBh,0DBh,0FFh,0DBh,0DBh,0FFh
        DW      604h, 0B6h,0DBh,0FFh,0DBh,0DBh,0FFh
        DW      704h, 0B83Bh,9819h,9819h,0F81Fh,9819h,9819h,0F81Fh
        DW      502h, 0B83Bh,9819h,0F81Fh,9819h,0F81Fh
        DW      602h, 0B83Bh,9819h,0F81Fh,9819h,9819h,0F81Fh
        DW      702h, 7,0FBh,0DBh,0FFh,0DBh,0DBh,0FFh
        DW      602h, 7,0FBh,0DBh,0FFh,0DBh,0FFh
        DW      804h, 1Ch,0Ch,0Ch,18h,1Ch,36h,63h,0C1h
        DW      702h, 0Ch,6,6,0Ch,1Eh,33h,41h
        DW      702h, 8003h,8001h,8001h,0C003h,3006h,180Ch,0C30h
        DW      500h, 8003h,8001h,0C003h,700Eh,1838h
        DW      502h, 8003h,8001h,0C003h,700Eh,1838h
        DW      602h, 18h,0Ch,0Ch,1Bh,8031h,80C0h
        DW      502h, 1Ch,0Ch,1Bh,8031h,80C0h
        DW      502h, 1Ch,0Ch,1Ch,33h,80C1h
        DW      402h, 1Ch,0Ch,1Bh,8061h
        DW      904h, 36h,1Bh,1Bh,13h,36h,3Fh,4Dh,89h,10h
        DW      702h, 36h,1Bh,1Bh,36h,7Eh,0DBh,31h
        DW      702h, 0C00Ch,6006h,6006h,0F00Fh,9819h,0C23h,4
        DW      600h, 0C00Ch,6006h,0C00Ch,0B01Fh,1863h,0Ch
        DW      602h, 0C00Ch,6006h,0C00Eh,0B01Bh,1823h,4
        DW      702h, 6Ch,36h,36h,7Ch,6Fh,8099h,20h
        DW      602h, 6Ch,36h,36h,7Fh,80D9h,30h
        DW      502h, 36h,1Bh,1Bh,803Fh,0C06Ch
        DW      502h, 3Fh,1Bh,803Fh,0C04Ch,10h
        DW      704h, 3Ch,66h,0C3h,0C3h,0C3h,66h,3Ch
        DW      604h, 3Ch,66h,0C3h,0C3h,66h,3Ch
        DW      702h, 8003h,600Ch,3018h,3018h,3018h,600Ch,8003h
        DW      600h, 0C003h,6006h,300Ch,300Ch,6006h,0C003h
        DW      700h, 8001h,6006h,300Ch,300Ch,300Ch,6006h,8001h
        DW      604h, 1Eh,33h,8061h,8061h,33h,1Eh
        DW      502h, 3Eh,63h,63h,63h,3Eh
        DW      502h, 1Eh,33h,8061h,33h,1Eh
        DW      402h, 3Eh,63h,63h,3Eh
        DW      904h, 7Eh,0Ch,0Ch,18h,18h,34h,26h,42h,82h
        DW      604h, 7Eh,6,0Ch,1Eh,33h,41h
        DW      704h, 0F81Fh,8001h,8001h,0C003h,3006h,180Ch,830h
        DW      502h, 0F81Fh,8001h,0C003h,700Eh,1838h
        DW      604h, 7Fh,0Ch,0Ch,1Eh,33h,41h
        DW      504h, 7Fh,0Ch,1Eh,33h,41h
        DW      502h, 7Fh,0Ch,1Eh,33h,41h
        DW      904h, 0FFh,33h,33h,26h,76h,5Fh,8Dh,9,10h
        DW      704h, 7Fh,1Bh,36h,3Ch,4Eh,9Bh,21h
        DW      704h, 0F03Fh,3006h,600Ch,0C01Eh,0B033h,1843h,806h
        DW      502h, 0F03Fh,3006h,600Fh,0F019h,1823h
        DW      602h, 0F03Fh,3006h,600Eh,0F01Bh,9821h,802h
        DW      604h, 7Fh,1Bh,36h,3Fh,8049h,10h
        DW      504h, 7Fh,1Bh,3Eh,4Fh,19h
        DW      502h, 807Fh,8019h,3Fh,8047h,8008h
        DW      0A02h, 38h,18h,7Eh,6,6,0Ch,0Ch,1Eh,33h,41h
        DW      800h, 38h,18h,7Eh,6,0Ch,1Eh,33h,41h
        DW      802h, 7,3,0F03Fh,6000h,0C000h,8003h,700Eh,1830h
        DW      600h, 8001h,0F81Fh,8001h,0C003h,700Eh,1838h
        DW      700h, 8003h,8001h,0F83Fh,8001h,0C003h,700Eh,1838h
        DW      802h, 1Ch,0Ch,807Fh,0Ch,1Eh,33h,8061h,8080h
        DW      700h, 1Ch,0Ch,807Fh,0Ch,1Bh,8031h,80C0h
        DW      602h, 1Ch,0Ch,7Fh,0Ch,3Bh,80E1h
        DW      600h, 1Ch,0Ch,7Fh,0Ch,3Bh,80E1h
        DW      904h, 7Eh,6,6,7Eh,0Ch,0Ch,18h,30h,40h
        DW      704h, 7Eh,6,7Eh,0Ch,18h,30h,40h
        DW      904h, 0F03Fh,3000h,3000h,0F03Fh,3000h,3000h,2000h,6000h,4000h
        DW      502h, 0F81Fh,1800h,0F81Fh,1800h,1000h
        DW      602h, 0F01Fh,3000h,3000h,0F01Fh,3000h,2000h
        DW      704h, 7Fh,3,3,7Fh,3,3,2
        DW      504h, 7Fh,3,7Fh,3,2
        DW      502h, 7Fh,3,7Fh,3,2
        DW      804h, 0FEh,60h,60h,7Ch,60h,60h,8060h,3Fh
        DW      604h, 0FEh,60h,7Ch,60h,8060h,3Fh
        DW      704h, 0F03Fh,18h,18h,0F01Fh,18h,18h,0F00Fh
        DW      502h, 0F03Fh,18h,0F01Fh,18h,0F00Fh
        DW      604h, 0FFh,60h,7Eh,60h,60h,3Fh
        DW      504h, 0FFh,60h,7Eh,60h,3Fh
        DW      504h, 0FFh,60h,7Fh,60h,3Fh
        DW      502h, 0FFh,60h,7Eh,60h,3Fh
        DW      804h, 7Fh,26h,26h,36h,36h,34h,34h,7Fh
        DW      604h, 7Fh,26h,36h,36h,34h,7Fh
        DW      604h, 0F81Fh,6004h,6006h,6006h,4006h,0F81Fh
        DW      402h, 0F81Fh,6006h,6006h,0F81Fh
        DW      502h, 0F81Fh,6004h,6006h,4006h,0F81Fh
        DW      504h, 7Fh,26h,36h,34h,7Fh
        DW      404h, 7Fh,26h,34h,7Fh
        DW      402h, 7Fh,36h,36h,7Fh
        DW      0A02h, 1Ch,0Ch,7Fh,0,1Ch,36h,63h,63h,36h,1Ch
        DW      800h, 1Ch,0Ch,0FFh,36h,63h,63h,36h,1Ch
        DW      902h, 8003h,8001h,0FC3Fh,0,0E007h,300Ch,300Ch,300Ch,0E007h
        DW      600h, 8003h,8001h,0F83Fh,0C007h,600Ch,0C007h
        DW      700h, 8003h,8001h,0FC3Fh,0E007h,300Ch,300Ch,0E007h
        DW      802h, 1Ch,0Ch,807Fh,1Eh,33h,33h,33h,1Eh
        DW      700h, 1Ch,0Ch,807Fh,1Eh,33h,33h,1Eh
        DW      600h, 0Ch,807Fh,1Eh,33h,33h,1Eh
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\debug.asm ===
code    SEGMENT Public byte 'CODE'
        ASSUME  Cs:code, Ds:code


buffer  DB      6 DUP (?)


_DebugChar      PROC    Near
;
; AL < Character To Be Shown
;
        push    ax
        push    dx
        mov     ah, 1
        mov     dx, 0
        int     14h
        pop     dx
        pop     ax
        ret
_DebugChar      ENDP

_DebugString    PROC    Near
;
; BX < Offset of String To Be Shown (Null Terminate)
;
        push    ax
        push    bx
        push    ds
        mov     ax, cs
        mov     ds, ax
@@:
        mov     al, [bx]
        inc     bx
        or      al, al
        jz      @f
        call    _DebugChar
        jmp     @b
@@:
        pop     ds
        pop     bx
        pop     ax
        ret
_DebugString    ENDP

NumHex  PROC    Near
;
; AL(0..3) < Hex Value
; AL > ASCII Code
;
        and     al, 0Fh
        cmp     al, 0Ah
        jb      @f
        add     al, 'A'-'0'-10
@@:
        add     al, '0'
        ret
NumHex  ENDP

NumByte PROC    Near
;
; AL < Byte Value
; AX > Two ASCII Codes for Byte Value
;
        push    dx
        mov     dl, al
        call    NumHex
        mov     dh, al
        mov     al, dl
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
        call    NumHex
        mov     dl, al
        mov     ax, dx
        pop     dx
        ret
NumByte ENDP

_DebugNumber    PROC    Near
;
; AX < Word Value To Be Shown
;
        push    ax
        push    bx
        push    dx
        push    bp
        push    ds
        mov     bx, cs
        mov     ds, bx

        lea     bx, buffer
        mov     Byte Ptr [bx], 32
        mov     dx, ax
        mov     al, dh
        call    NumByte
        mov     [bx+1], ax
        mov     al, dl
        call    NumByte
        mov     [bx+3], ax
        lea     bx, buffer
        call    _DebugString

        pop     ds
        pop     bp
        pop     dx
        pop     bx
        pop     ax
        ret
_DebugNumber    ENDP


        PUBLIC  _DebugChar, _DebugString, _DebugNumber

code    ENDS

        END
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\data.inc ===
;========================================================================;
;                                                                        ;
;                        GLOBAL DATA                                     ;
;                                                                        ;
;========================================================================;
;
;   ѱ BIOS ü ǰų ܺ ȭϰ interface ʿ
;  츸 Ÿ.
;

public  KbStat, Card1st, Card2nd, HeKey, HjKey, HjStat, DisplayStat, KseCard
public  ModeStat, MemStat, Printer, CodeStat, HanStat, HjMenuStat, ErrStat
public  MachineType, ModeId, WinOffset, WinSegment, KbMisc, VideoActive
public  iVersion, HotStat, KbdType, HanSavePtr

public  HjMenuLine, UdcTblPtr, CodeBuf2Addr, EndSegment, EndOffset
public  EmsHandle, MaxMemSize, EmsSeg, CurEmsPage, CodeBufSize, MemSize

public  OldVdParms, OldSavePtr, OldKbInt, OldVideo, OldRtcInt, OldKbInt
public  OldInt17, OldInt15, OldKbioInt

public  PatGenAddr, HanPatternPtr, Ks2ChAddr
public  HanAddr, HanAddrH, UdcAddr, UdcAddrH
public  HanOn1st, HanOff1st, HanOn2nd, HanOff2nd
public  GetHan1st, GetUdc1st, PutUdc1st, GetHan2nd, GetUdc2nd, PutUdc2nd

public  CompleteCharCnt, CompleteCharBuf, InterimCharCnt
public  InterimCharBuf, Auto, TmpKbdType
public  InterimCurPage,InterimMaxCols,InterimCurPos
public  SavedChar1,SavedChar2
public  MenuPtr, CurrMenuCnt, SaveCurrPage, CrtMaxCols
public  SaveCurPos, SaveCurType, prebufptr
public  DispIChar1, DispIChar2, InterimDispP
public  PreInCode, CurInCode, TmpBuf, PreTmpBuf, KsKbBuf, TmpBufCnt
if      WINNT
public  ActiveCodePage
endif

IF  Hwin31Sw
        PUBLIC  OldInt2f
ENDIF ;Hwin31Sw

;************************************
StartInst:
;------------------------------------------------------------------------
;   public data area̹Ƿ   
PublicData      label   word            ; INT 10 entry FD
CodeBuf1Addr    label   dword
                dw      0
                dw      0
HanStat         db      0               ; indicate whether HanGeul 1st byte have
HjMenuStat      db      0               ; progress HanJa menu or ChgEnvr
                db      08 dup(0)       ; reserved
                db      'H'
                db      'B'
                dw      offset WinData

WinData         db      'WINDOWS'
WinOffset       dw      offset WinEnvrChange
WinSegment      dw      0               ; code segment address
                db      LocalDataLng
CodeStat        db      HangeulMode     ; code/spec status
KbStat          db      0               ; general KBD status
HjMenuLine      db      0               ; hanja menu display line #
LocalDataLng    =       $-CodeStat

CodeBufSize     dw      ?               ; 80*25*2, 80*30*2 ,Init ʱȭҰ

iVersion        db      Version         ; 5 byte

;------------------------------------------------------------------------
ModeId          db      0
UdcTblPtr       dw      0               ; UDC table address(real memory)
CodeBuf2Addr    dd      0               ; 2nd code buffer segment:offset address
VideoActive     db      80h             ;  service routine  
ModeStat        db      0               ; video mode status
DisplayStat     db      0               ; Han1st, RunEsc
PatGenAddr      dw      0               ; pattern generator
HanPatternPtr   dw      0               ; pattern generator
Ks2ChAddr       dw      0               ; code conversion(KS -> CH)
KbMisc          db      InterimCtrlDisp
HotStat         db      0
Port3bf         db      0               ; for KSE VGA card
KseCard         db      0
KbdType         db      0

HjStat          db      0               ; hanja, UDC font status
OrgHjStat       db      0               ; original hanja, UDC font status

;  -------------kb.asm DATA -------------
CompleteCharCnt dw      0
CompleteCharBuf dw      16 dup(0)
InterimCharCnt  dw      0
InterimCharBuf  dw      2 dup(0)
Auto            db      0

TmpKbdType      db      0

InterimCurPage  db      0
InterimMaxCols  db      0
InterimCurPos   dw      0
SavedChar1      db      0
SavedChar2      db      0

MenuPtr         db      0
CurrMenuCnt     db      0
SaveCurrPage    db      0
CrtMaxCols      db      0
SaveCurPos      dw      0
SaveCurType     dw      0
prebufptr       dw      0

; interim display
DispIChar1      DB      0
DispIChar2      DB      0
InterimDispP    dw      0

;automata
PreInCode       dw      0
CurInCode       dw      0
TmpBuf          dw      0
PreTmpBuf       dw      0
KsKbBuf         dw      0
TmpBufCnt       db      0

; ------------- video.asm DATA -------------
; Display buffer 
GrpBufAddr      dd      ?       ; grp buffer pointer

; Cursor position Ÿ pointer 
TextPos1Addr    dw      ?       ; cursor buffer address
TextPos2Addr    dw      ?       ; cursor buffer address
GrpPosAddr      dw      ?       ; cursor buffer address

OldTextPos1Addr dw      ?       ; Han1st/RunEsc 
OldTextPos2Addr dw      ?       ; Han1st/RunEsc 
OldGrpPosAddr   dw      ?       ; Han1st/RunEsc 
OldChar         db      ?
OldAttr         db      ?
OldPage         db      ?
OldCurPos       dw      ?
OldCounter      dw      ?
OldHanStat      db      0

EscIndex        dw      0
CursorStat      db      0

MaxRows         db      ?
MaxPage         db      ?

CurPos          dw      ?               ; real position, be seted by char write
CurMode         db      ?
CurPage         db      ?               ; function AH = 5

OrgCurPos       dw      ?               ; cursor display position for delete
OrgCurType      dw      ?               ; cursor display type for delete

TimerTick       db      0
ScrUpDnFlag     db      0               ; screen up data
BlockAdj        dw      0               ; block move,copy data
HanSavePtr      dd      7 dup(0)

if              WINNT
WanSungCP       =       949             ; For NT 5.0
ActiveCodePage  dw      WanSungCP
endif

;------------------------------------------------------------------------
OldVdParms      dd      0               ; MGA/CGA video parm pointer
OldSavePtr      dd      0               ; EGA/VGA parms pointer
SizeInst        equ     ($ - StartInst)
;************************************

OldKbInt        dd      0               ; INT 9
OldKbioInt      dd      0               ; INT 16
OldRtcInt       dd      0               ; Int 8
OldVideo        dd      0               ; INT 10
OldInt15        dd      0               ; INT 15 or HIMEM address
OldInt17        dd      0               ; printer interrupt vector address
IF  Hwin31Sw
OldInt2f        dd      0               ; codechg dos int
ENDIF ;Hwin31Sw
;
EndSegment      dw      0               ; ѱ BIOS ġ  segment
EndOffset       dw      0               ; ѱ BIOS ġ  offset
;
MemStat         db      0               ; memory 
MemSize         dw      0
EmsSeg          dw      0
EmsHandle       dw      0
CurEmsPage      dw      0
MaxMemSize      dw      0
HanAddr         dw      0
HanAddrH        db      0
UdcAddr         dw      0
UdcAddrH        db      0
;
Card1st         db      0               ; active video card status
Card2nd         db      0               ; inactive video card status
HeKey           db      0               ; ý   ѿ key
HjKey           db      0               ; ý    key
Printer         db      0               ; printer type
ErrStat         db      0               ; initialize 

;------------------------------------------------------------------------
GetHan1st       dw      0
GetUdc1st       dw      0
PutUdc1st       dw      0
HanOn1st        dw      0
HanOff1st       dw      0
GetHan2nd       dw      0
GetUdc2nd       dw      0
PutUdc2nd       dw      0
HanOn2nd        dw      0
HanOff2nd       dw      0

MachineType     db      0               ; machine type(AT/XT)

;------------------------------------------------------------------------
public          vdm_info
vdm_info        VDM_INFO_TBL<>


if      Debug
public  DebugData
DebugData       dw      0
endif   ; if Debug

WinEnvrChange:
        @push   ax, bx, cx, dx, di, si, es, ds, bp
        mov     ax,cs
        mov     es,ax
        mov     ds,ax
        mov     al,[CodeStat]
        mov     [OldCodeStat],al
        mov     ah,0fh
        int     10h
        call    ChgEnvrDo
        @pop    bp, ds, es, si, di, dx, cx, bx, ax
WinEnvr PROC    far
        ret
WinEnvr ENDP


;------------------------------------------------------------------------
;   initialize ٸ뵵 
public  TotalMenuCnt,MenuBuffer, MenuLineBuf, PatternBuf
PatternBuf      db      32 dup(0)
TotalMenuCnt    db      0
MenuBuffer      label   byte            ; hanja set buffer
MenuLineBuf     =       MenuBuffer+376+1; hanja menu buffer
;
; Install:
;       LoadUdc(-/-);
;       InstallFontFileReal(-/-);
;       InitMode(-/-);
;       DispSignonMsg(-/-);
;       [OrgHjStat] = [HjStat];
;       CX = [EndSegment];
;       DX = [EndOffset];
;       [VideoActive] = 0;
;       Restore BP, DI, SI, ES, DS;
;
public  Install, InitEnd
Install:
        call    LoadUdc
if      ComFile
        mov     sp,offset TmpStack
endif   ; if ComFile
        call    InstallFontFileReal
        mov     al,[HjStat]
        test    al,HjLoaded
        jz      @f
        or      [HjStat],HjModeEnable
@@:
        mov     [OrgHjStat],al
        call    InitMode
        call    DispSignonMsg
        mov     cx,[EndSegment]
        mov     dx,[EndOffset]
        mov     [VideoActive],0
InitEnd:
if      ComFile
        mov     ah,49h
        mov     es,ds:[EnvrParmPtr]
        int     21h
        mov     ax,cs
        sub     cx,ax
        add     dx,15
        shr     dx,1
        shr     dx,1
        shr     dx,1
        shr     dx,1
        add     dx,cx
        mov     ax,3100h
        int     21h
else
        pop     bp
        pop     si
        pop     di
        pop     es
        pop     ds
        ret
endif   ; if ComFile


;------------------------------------------------------------------------
;   << LoadUdc >>
; FUNCTION = install UDC file
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; LoadUdc(-/-)
;       {
;       }
;
;    structure of header of UDCCON.SYS
;       offset 00H-01H (2)  :  pointer of UDC map table
;       offset 02H-03H (2)  :  size of UDC map table
;       offset 04H-05H (2)  :  pointer of UDC index table
;       offset 06H-07H (2)  :  size of UDC index table
;       offset 08H-09H (2)  :  pointer of UDC set table
;       offset 0aH-0bH (2)  :  size of UDC set table
;       offset 0cH-0dH (2)  :  pointer of start of pattern
;       offset 0eH-0fH (2)  :  size of pattern
;       offset 10H-17H (8)  :  UDC file ID
;       offset 18H-1fH (8)  :  last update date
;       offset 20H-2fH (16) :  reserved
;
LoadUdc:
        test    [HjStat],UdcArea
        jz      LoadUdcEnd
        test    [ErrStat],FontLoadErr
        jnz     LoadUdcEnd
        mov     dx,offset UdcFileName
        mov     ax,3d00h
        int     21h
        mov     bx,ax
        jnc     HaveUdc
LoadUdcEnd:
        ret
HaveUdc:
        mov     [UdcHandle],bx
        mov     dx,[EndOffset]
        mov     di,dx
        mov     [UdcTblPtr],di
        mov     cx,(30H+188*2+188*4+188*2) ; # of bytes to read
        mov     ah,3fH
        int     21h
        jc      LoadUdcErr
        mov     ax,[di+UdcSetTblSize]
        shl     ax,1
        add     ax,[di+UdcSetTblPtr]
        add     [EndOffset],ax          ; save UdcTbl END address
        mov     si,di
        add     si,10H                  ; point to file identifier
        mov     di,offset UdcConId
        mov     cx,8                    ; repeat counter
        rep movsw
        mov     dx,[EndOffset]
        test    [MemStat],RealMem
        jz      @f
        mov     [UdcAddr],dx            ; save UdcFont address
@@:
        mov     cx,94*32
        mov     bx,[UdcHandle]
        mov     ah,3fH
        int     21h
        jc      LoadUdcErr
        mov     cx,ax
        mov     si,dx
        mov     ax,0c9a1h
        call    WriteUdc
        jc      LoadUdcErr
        mov     dx,[EndOffset]
        mov     cx,94*32
        mov     bx,[UdcHandle]
        mov     ah,3fH
        int     21h
        jc      LoadUdcErr
        mov     cx,ax
        mov     si,dx
        mov     ax,0fea1h
        call    WriteUdc
        jc      LoadUdcErr
        or      [HjStat],UdcLoaded
        mov     bx,[UdcHandle]
        mov     ah,3eH                  ; close file handle
        int     21h
        ret
LoadUdcErr:
        or      [ErrStat],UdcLoadErr
        ret
WriteUdc:
        test    [MemStat],RealMem
        jz      @f
        add     [EndOffset],cx          ; save END address
        clc
        ret
@@:
        mov     cx,94
WriteUdcloop:
        mov     bx,ax
        test    [CodeStat],Chab
        jz      @f
        call    ChgKs2Ch
@@:
        xchg    cx,ax                   ; get code (ch,cl)
        call    PutPattern
        xchg    cx,ax
        mov     ax,bx
        jc      @f
        inc     ax                      ; next code
        add     si,32
        loop    WriteUdcloop
        clc
@@:
        ret
UdcHandle       label   word
UdcFileName     db      'UDCCON.SYS',0
TmpStack        label   word


;------------------------------------------------------------------------
;   << InstallFontFileReal >>
; FUNCTION =  ȭ real memory ġ
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; InstallFontFileReal(-/-)
;       {
;       }
;
InstallFontFileReal:
        test    [MemStat],RealMem
        jz      NotRealFont
        cmp     [MemSize],0
        jz      NotRealFont
        mov     dx,offset FontFileName
        mov     ax,3d00h
        int     21h
        jc      @f
        mov     bx,ax
        mov     ax,4200h
        xor     cx,cx
        mov     dx,30h
        int     21h                     ; set absolute file pointer
        or      [HjStat],HjLoaded
        mov     dx,[EndOffset]
        mov     [HanAddr],dx
        xor     ax,ax
        add     [EndOffset],61440       ; 32*94*64 = 192512
        adc     ah,0
        mov     cl,4
        shl     ah,cl
        add     [EndSegment],ax
        add     [EndSegment],2000h
ReadRealLoop:
        mov     ax,dx
        mov     cl,4
        shr     ax,cl
        mov     cx,ds
        add     cx,ax
        mov     ds,cx
        and     dx,0fh
        mov     cx,4000h
        mov     ah,3fh
        int     21h
        jc      ReadRealErr
        or      ax,ax
        jz      @f
        add     dx,ax
        jmp     short ReadRealLoop
ReadRealErr:
        or      cs:[ErrStat],FontLoadErr
@@:
        mov     ax,cs
        mov     ds,ax
        mov     ah,3eh
        int     21h
NotRealFont:
        ret


;------------------------------------------------------------------------
;   << InitMode >>
; FUNCTION = ѱ video mode ʱȭ
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; InitMode(-/-)
;       {
;       Save ES;
;       ES = 0;
;       if ([Card1st] == DualMnt)
;               {
;               xchg [Card1st], [Card2nd];
;               ES:[rEquip] = ES:[rEquip] || 00110000b;
;               if ([Card1st] == ColorMnt)
;                       ES:[rEquip] = ES:[rEquip] && 11101111b;
;               AX = 3;
;               INT 10h;
;               xchg [Card1st], [Card2nd];
;               }
;       ES:[rEquip] = ES:[rEquip] || 00110000b;
;       if ([Card1st] == ColorMnt)
;               ES:[rEquip] = ES:[rEquip] && 11101111b;
;       AX = 3;
;       INT 10h;
;       Restore ES;
;       }
;
InitMode:
        test    [Card1st],DualMnt
        jz      InitMode1st
        push    word ptr [CodeStat]
        or      [CodeStat],HangeulMode
        int     11h
        cmp     al,00110000b
        mov     ax,7
        jpe     @f
        mov     al,3
@@:
        int     10h
        pop     ax
        mov     [CodeStat],al
InitMode1st:
        mov     ah,0fh
        int     10h
        call    ChgEnvrDo

        push    ax
        push    bx
        call    SearchMode
        jc      InitMode2nd
        mov     bh,[si+sCodeVram]
        xor     bl,bl
        xor     ax,ax
        mov     word ptr [CodeBuf1Addr],ax
        mov     word ptr [CodeBuf1Addr+2],bx
if      WINNT   ; if we run HBIOS on windowed mode for the first time,
                ; these variables are not initialized.
        cmp     [ActiveCodePage], WanSungCP
        jnz     @f
        or      [CodeStat],HangeulVideoMode
        mov     [MaxRows],25
@@:
endif
InitMode2nd:
        pop     bx
        pop     ax
        ret


;------------------------------------------------------------------------
;   << DispSignonMsg >>
; FUNCTION = ѱ BIOS ۱  font/UDC  message display
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; DispSignonMsg(-/-)
;       {
;       SI = SignonMsg;
;       DispMsg(SI/-);
;       if ([OrgHjStat] == HjLoaded)
;               {
;               SI = FontMsg;
;               DispMsg(SI/-);
;               SI = LoadMsg;
;               if ([ErrStat] == FontLoadErr), SI = FontErrMsg;
;               DispMsg(SI/-);
;               }
;       if ([OrgHjStat] == UdcLoaded)
;               {
;               SI = UdcMsg;
;               DispMsg(SI/-);
;               SI = UdcConId;
;               if ([ErrStat] == UdcLoadErr), SI = UdcErrMsg;
;               DispMsg(SI/-);
;               }
;       }
;
; DispString(si/-)
;       {
;       if ([si] != 0)
;               {
;               AL = [si];
;               + SI;
;               AH = 0eh;
;               BX = 7;
;               INT 10h;
;               }
;       }
;
DispSignonMsg:
if      WINNT
        ; Don't need to display version information
        test    [ErrStat],FontLoadErr
        jz      @f
        mov     si,offset FontErrMsg
        call    DispString
@@:
        test    [Card1st],FontCard or HanCard
        jnz     DispNoneFontFile
        test    [Card2nd],FontCard or HanCard
        jnz     DispNoneFontFile
        test    [OrgHjStat],HjLoaded
        jz      DispNoneFontFile
else
        mov     si,offset SignonMsg
        test    [CodeStat],Chab
        jz      @f
        mov     si,offset SignonMsgCh
@@:
        call    DispString
        test    [Card1st],FontCard or HanCard
        jnz     DispNoneFontFile
        test    [Card2nd],FontCard or HanCard
        jnz     DispNoneFontFile
        test    [OrgHjStat],HjLoaded
        jz      DispNoneFontFile
        ;mov     si,offset FontMsg
        ;call    DispString
        mov     si,offset LoadMsg
        test    [ErrStat],FontLoadErr
        jz      @f
        mov     si,offset FontErrMsg
@@:
        call    DispString
endif
DispNoneFontFile:
        test    [OrgHjStat],UdcLoaded
        jz      DispNoneUdc
        mov     si,offset UdcMsg
        call    DispString
        mov     si,offset UdcConId
        test    [ErrStat],UdcLoadErr
        jz      @f
        mov     si,offset UdcErrMsg
@@:
        call    DispString
DispNoneUdc:
        ret
DispString:
        lodsb
        or      al,al
        jz      @f
        mov     ah,0eh
        mov     bx,7
        int     10h
        jmp     short DispString
@@:
        ret

if      WINNT
        ; Don't need to display version information
else
SignonMsg       db      'HBIOS  ', Version, cr,lf     ; [CHM0]
                db      'Copyright (C) Microsoft Corp 1993',cr,lf,0     ; [CHM0]
SignonMsgCh     db      'HBIOS e ', Version, cr,lf
                db      'Copyright (C) Microsoft Corp 1993',cr,lf,0
LoadMsg         db      '** Ȯ ۲ ġǾϴ.',cr,lf,0
endif
UdcErrMsg       label   byte
FontErrMsg      db      '** Ȯ ۲ ġ Ͽϴ.',cr,lf,0
UdcMsg          db      'UDC : ',0
UdcConId        db      16 dup(' '),cr,lf,0
public  FontFilename
FontFilename    db      'hfont.sys'     ; [CHM001]
                db      80-8 dup(0)

;------------------------------------------------------------------------

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\hf.inc ===
_hfBaseCho      LABEL   Word
        DW      -1, 0, __hfIndexCho+2,__hfIndexCho+22
        DW      __hfIndexCho+42,__hfIndexCho+62,__hfIndexCho+82,__hfIndexCho+102
        DW      __hfIndexCho+122,__hfIndexCho+142,__hfIndexCho+162,__hfIndexCho+182
        DW      __hfIndexCho+202,__hfIndexCho+222,__hfIndexCho+242,__hfIndexCho+262
        DW      __hfIndexCho+282,__hfIndexCho+302,__hfIndexCho+322,__hfIndexCho+342
        DW      __hfIndexCho+362, 11 DUP ( -1 )

_hfBaseJung     LABEL   Word
        DW      -1, 0, 0, __hfIndexJung+2
        DW      __hfIndexJung+14,__hfIndexJung+26,__hfIndexJung+38,__hfIndexJung+50
        DW      -1, -1, __hfIndexJung+62,__hfIndexJung+74
        DW      __hfIndexJung+86,__hfIndexJung+98,__hfIndexJung+110,__hfIndexJung+122
        DW      -1, -1, __hfIndexJung+134,__hfIndexJung+146
        DW      __hfIndexJung+158,__hfIndexJung+170,__hfIndexJung+182,__hfIndexJung+194
        DW      -1, -1, __hfIndexJung+206,__hfIndexJung+218
        DW      __hfIndexJung+230,__hfIndexJung+242, -1, -1

_hfBaseJong     LABEL   Word
        DW      -1, 0, __hfIndexJong+2,__hfIndexJong+10
        DW      __hfIndexJong+18,__hfIndexJong+26,__hfIndexJong+34,__hfIndexJong+42
        DW      __hfIndexJong+50,__hfIndexJong+58,__hfIndexJong+66,__hfIndexJong+74
        DW      __hfIndexJong+82,__hfIndexJong+90,__hfIndexJong+98,__hfIndexJong+106
        DW      __hfIndexJong+114,__hfIndexJong+122, -1, __hfIndexJong+130
        DW      __hfIndexJong+138,__hfIndexJong+146,__hfIndexJong+154,__hfIndexJong+162
        DW      __hfIndexJong+170,__hfIndexJong+178,__hfIndexJong+186,__hfIndexJong+194
        DW      __hfIndexJong+202,__hfIndexJong+210, -1, -1

_hfCnvChoJung   LABEL   Word
        DW      -1, 0, 6, 6, 6, 6, 6, 6
        DW      6, 6, 6, 6, 6, 6, 6, 6
        DW      6, 6, 6, 6, 6, -1, -1, -1
        DW      -1, -1, -1, -1, -1, -1, -1, -1

_hfCnvChoJong   LABEL   Word
        DW      0, 0, 0, 0, 0, 0, 0, 0
        DW      0, 0, 0, 0, 0, 0, 0, 0
        DW      0, 0, 0, 0, 0, 0, 0, 0
        DW      0, 0, 0, 0, 0, 0, 0, 0

_hfCnvJungCho   LABEL   Word
        DW      -1, 0, 0, 0, 0, 0, 0, 0
        DW      -1, -1, 0, 0, 0, 4, 12, 12
        DW      -1, -1, 12, 4, 8, 16, 16, 16
        DW      -1, -1, 8, 4, 12, 0, -1, -1
_hfCnvJungJong  LABEL   Word
        DW      -1, 6, 6, 0, 4, 0, 4, 2
        DW      -1, -1, 4, 2, 4, 6, 0, 4
        DW      -1, -1, 2, 6, 6, 2, 4, 2
        DW      -1, -1, 6, 6, 2, 2, -1, -1

_hfCnvJongCho   LABEL   Word
        DW      -1, 0, 2, 2, 2, 2, 2, 2
        DW      2, 2, 2, 2, 2, 2, 2, 2
        DW      2, 2, -1, 2, 2, 2, 2, 2
        DW      2, 2, 2, 2, 2, 2, -1, -1

_hfCnvJongJung  LABEL   Word
        DW      -1, 0, 2, 2, 2, 4, 2, 2
        DW      2, 2, 2, 2, 2, 2, 2, 2
        DW      2, 2, -1, 2, 2, 2, 2, 2
        DW      2, 2, 2, 2, 2, 2, -1, -1


__hfIndexCho    LABEL   Word

        INCLUDE choi.inc

__hfBmpCho      LABEL   Word

        INCLUDE cho.inc


__hfIndexJung   LABEL   Word

        INCLUDE jungi.inc

__hfBmpJung     LABEL   Word

        INCLUDE jung.inc


__hfIndexJong   LABEL   Word

        INCLUDE jongi.inc

__hfBmpJong     LABEL   Word

        INCLUDE jong.inc


_hfBmpCho       DW      __hfBmpCho
_hfBmpJung      DW      __hfBmpJung
_hfBmpJong      DW      __hfBmpJong
_hfBmpSeg       DW      ?

        PUBLIC  _hfBaseCho, _hfBaseJung, _hfBaseJong
        PUBLIC  _hfCnvChoJung, _hfCnvChoJong
        PUBLIC  _hfCnvJungCho, _hfCnvJungJong
        PUBLIC  _hfCnvJongCho, _hfCnvJongJung
        PUBLIC  _hfBmpCho, _hfBmpJung, _hfBmpJong
        PUBLIC  _hfBmpSeg
        PUBLIC  __hfBmpCho, __hfBmpJung, __hfBmpJong
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\debug.inc ===
;--- Debugging Facilities (skkhang) ------------------------------

IF DEBUG
        EXTRN   _DebugChar:Near, _DebugString:Near, _DebugNumber:Near
ENDIF

DBGCh   MACRO   reg
IF DEBUG
        IFDIF   <reg>, <al>
        push    ax
        mov     al, reg
        ENDIF
        call    _DebugChar
        IFDIF   <reg>, <al>
        pop     ax
        ENDIF
ENDIF
        ENDM

DBGStr  MACRO   addr
IF DEBUG
        IFDIF   <addr>, <bx>
        push    bx
        mov     bx, addr
        ENDIF
        call    _DebugString
        IFDIF   <addr>, <bx>
        pop     bx
        ENDIF
ENDIF
        ENDM

DBGNum  MACRO   val
IF DEBUG
        push    ax
        IFDIF   <val>, <ax>
        mov     ax, val
        ENDIF
        call    _DebugNumber
        mov     al, 0Dh
        call    _DebugChar
        mov     al, 0Ah
        call    _DebugChar
        pop     ax
ENDIF
        ENDM

DBGNum2 MACRO   val
IF DEBUG
        IFDIF   <val>, <ax>
        push    ax
        mov     ax, val
        ENDIF
        call    _DebugNumber
        IFDIF   <val>, <ax>
        pop     ax
        ENDIF
ENDIF
        ENDM

DBGCrLf MACRO
IF DEBUG
        push    ax
        mov     al, 0Dh
        call    _DebugChar
        mov     al, 0Ah
        call    _DebugChar
        pop     ax
ENDIF
        ENDM
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\dual.asm ===
CODE    SEGMENT
ASSUME  CS:CODE,DS:CODE

        ORG     100h

INCLUDE EQU.INC

Start:
        jmp     PrgStart

eom             =       0

LogoPos         =       0600h
CodePos         =       LogoPos+421h
MemPos          =       LogoPos+521h
FilePos         =       LogoPos+621h
PrinterPos      =       LogoPos+721h
HekeyPos        =       LogoPos+821h
HjkeyPos        =       LogoPos+921h
KbdPos          =       LogoPos+0a21h
HelpPos         =       LogoPos+0C10h

MenuData        STRUC
mFlag           db      ?
mCurPos         dw      ?
mFlagAddr       dw      ?
mKbdSrv         dw      ?
mMaxItem        db      ?
mCurItem        db      ?
mHelpMsg        dw      ?
mMenuMsg        dw      ?
MenuData        ENDS

; mFlag
ByteDisp        =       00000010b
StringDisp      =       00000100b


;------------------------
LogoMsg label   byte
 db '              Ŀ',cr,lf
 db '               HanGeul BIOS setup program Version 6.12           ',cr,lf
 db '               (C)Copyright Qnix computer Co., Ltd.  1992        ',cr,lf
 db '              Ĵ',cr,lf
 db '               CODE/SPEC.                                       ',cr,lf
 db '               FONT MEMORY                                      ',cr,lf
 db '               FONT FILENAME                                    ',cr,lf
 db '               PRINTER TYPE                                     ',cr,lf
 db '               HAN/ENG KEY                                      ',cr,lf
 db '               HANJA KEY                                        ',cr,lf
 db '               KBD TYPE                                         ',cr,lf
 db '              Ĵ',cr,lf
 db '                                                                 ',cr,lf
 db '              '
LogoLng         =       $-LogoMsg

MenuSelHelp     db      'USAGE : cursor, enter, ESC      ',eom
StringSelHelp   label   byte
CodeSelHelp     db      'USAGE : up, down, BS, enter, ESC',eom
CodeSelHelpLng  =       $-CodeSelHelp-1
SaveMsg         db      ' Save and exit (N/y) ',eom
DefaultMsg      db      'default',eom
DefaultMsgLng   =       $-DefaultMsg-1
FileCreatErrMsg db      cr,lf,'File creation error !',7,cr,lf,'$'

;------------------------
GrpCnvtTbl      db      '',''
                db      '',''
                db      '',''
                db      '',''
                db      '',''
                db      '',''
                db      '',''
                db      '',''
                db      '',''
                db      '',''
GrpCnvtTblLng   =       ($-GrpCnvtTbl)/2

;------------------------
MenuSelect      label   byte
                db      48h,1           ; up
                db      50h,2           ; down
                db      4bh,3           ; left
                db      4dh,4           ; right
                db      1ch,5           ; enter
                db      01h,6           ; ESC
                dw      -1

MakeCode        label   byte
                db      48h,1           ; up
                db      50h,2           ; down
                db      4bh,8           ; left
                db      4dh,9           ; right
                db      1ch,5           ; enter
                db      01h,6           ; ESC
                dw      -1

MakeString      label   byte
                db      48h,1           ; up
                db      50h,2           ; down
                db      1ch,5           ; enter
                db      01h,6           ; ESC
                db      0eh,7           ; BS
                dw      -1


;------------------------
MainTbl         label   word
                dw      offset Sub1Tbl
                dw      offset Sub2Tbl
                dw      offset Sub3Tbl
                dw      offset Sub4Tbl
                dw      offset Sub5Tbl
                dw      offset Sub6Tbl
                dw      offset Sub7Tbl
MainTblLng      =       ($-MainTbl)/2

Sub1Tbl         label   byte
                db      0
                dw      CodePos
                dw      offset Sub1DataTbl
                dw      offset KbdMenu
                db      Sub1DataTblLng
CurCode         db      1
                dw      offset MenuSelHelp
                dw      offset Sub1Msg1
                dw      offset Sub1Msg2
                dw      offset Sub1Msg3
                dw      offset Sub1Msg4
Sub1Msg1        db      'English         ',eom
Sub1Msg2        db      'KS C 5842 - 1991',eom
Sub1Msg3        db      'Chohab          ',eom
Sub1Msg4        db      'Wansung 7 bit   ',eom
Sub1DataTbl     label   byte
                db      0
                db      WSung or HangeulMode
                db      Chab or HangeulMode
                db      WSung7 or HangeulMode
Sub1DataTblLng  =       $-Sub1DataTbl

Sub2Tbl         label   byte
                db      0
                dw      MemPos
                dw      offset Sub2DataTbl
                dw      offset KbdMenu
                db      Sub2DataTblLng
CurMem          db      0
                dw      offset MenuSelHelp
                dw      offset Sub2Msg1
                dw      offset Sub2Msg2
                dw      offset Sub2Msg3
                dw      offset Sub2Msg4
                dw      offset Sub2Msg5
Sub2Msg1        db      'Automatic',eom
Sub2Msg2        db      'HIMEM    ',eom
Sub2Msg3        db      'EMS      ',eom
Sub2Msg4        db      'Extended ',eom
Sub2Msg5        db      'Real     ',eom
Sub2DataTbl     label   byte
                db      0
                db      HiMem
                db      EmsMem
                db      ExtMem
                db      RealMem
Sub2DataTblLng  =       $-Sub2DataTbl

Sub3Tbl         label   byte
                db      StringDisp
                dw      FilePos
                dw      offset FontFileName
                dw      offset KbdString
                db      1
                db      0
                dw      offset StringSelHelp

Sub4Tbl         label   byte
                db      0
                dw      PrinterPos
                dw      offset Sub4DataTbl
                dw      offset KbdMenu
                db      Sub4DataTblLng
CurPrinter      db      1
                dw      offset MenuSelHelp
                dw      offset Sub4Msg1
                dw      offset Sub4Msg2
                dw      offset Sub4Msg3
                dw      offset Sub4Msg4
                dw      offset Sub4Msg5
                dw      offset Sub4Msg6
Sub4Msg1        db      'none select ',eom
Sub4Msg2        db      'KS          ',eom
Sub4Msg3        db      'QLBP        ',eom
Sub4Msg4        db      'KSSM        ',eom
Sub4Msg5        db      'KSSM(Chohab)',eom
Sub4Msg6        db      'TG(Chohab)  ',eom
Sub4DataTbl     label   byte
                db      NoPrt
                db      KsPrt
                db      wLbp
                db      wKmPrt
                db      cKmPrt
                db      TgPrt
Sub4DataTblLng  =       $-Sub4DataTbl

Sub5Tbl         label   byte
                db      ByteDisp
                dw      HekeyPos
                dw      offset HeKey
                dw      offset KbdCode
                db      1
                db      0
                dw      offset MenuSelHelp

Sub6Tbl         label   byte
                db      ByteDisp
                dw      HjkeyPos
                dw      offset HjKey
                dw      offset KbdCode
                db      1
                db      0
                dw      offset MenuSelHelp

Sub7Tbl         label   byte
                db      0
                dw      KbdPos
                dw      offset Sub7DataTbl
                dw      offset KbdMenu
                db      Sub7DataTblLng
CurKbd          db      0
                dw      offset MenuSelHelp
                dw      offset Sub7Msg1
                dw      offset Sub7Msg2
Sub7Msg1        db      'Default',eom
Sub7Msg2        db      '101 KBD',eom
Sub7DataTbl     label   byte
                db      0
                db      SetKbd101
Sub7DataTblLng  =       $-Sub7DataTbl


;------------------------
MenuPos dw      0                       ; main table index
CharCnt dw      0                       ; char counter
CurPos  dw      FilePos

OrgMode db      0
NorAttr db      0
SelAttr db      0
BakAttr db      0

FileName db     'C:\HECON.CFG',eom
Handle  dw      0

;------------------------
ConfigData      label   byte
CfgFilename     db      'HECON.CFG'     ; 9 byte
CodeStat        db      HangeulMode
FontFileName    db      'FONT.SYS'
                db      24 dup(0)       ; drive/path/filename
MemStat         db      0               ; real/EMS/ext./HIMEM
HeKey           db      0
HjKey           db      0
PrinterStat     db      0
KbdType         db      0
                db      3 dup(0)        ; reserved


;------------------------
PrgStart:
        call    Modeset
        call    SetAttribute
        call    DisplayLogo
        call    OpenFile
        call    DisplayAll
        mov     ah,1
        xor     bh,bh
        mov     cx,220dh
        int     10h
        call    Action
        call    RestoreScreen
Exit:
        mov     ah,4ch
        int     21h

;------------------------------------------------------------------------
Modeset:
        mov     ah,0fh
        int     10h
        mov     [OrgMode],al
        int     11h
        test    al,30h
        mov     ax,7
        jpe     @f
        mov     al,3
@@:
        int     10h
        mov     ah,1
        mov     cx,2000h
        int     10h
        ret

;------------------------
SetAttribute:
        int     11h
        mov     [NorAttr],70h
        mov     [SelAttr],7
        mov     [BakAttr],70h
        cmp     al,30h
        jpe     @f
        mov     [NorAttr],70h
        mov     [SelAttr],7
        mov     [BakAttr],70h
@@:
        ret

;------------------------
DisplayLogo:
        mov     ax,920h
        xor     bh,bh
        mov     bl,[BakAttr]
        mov     cx,80*25
        int     10h
        push    es
        mov     ax,0fd00h
        int     10h
        mov     si,bx
        mov     si,es:[si+16]
        mov     ah,byte ptr es:[si+7+4+1]
        pop     es
        cmp     al,0fdh
        jnz     DisplayLogoDo           ; jump if english environment
        test    ah,00000001b
        jz      DisplayLogoDo           ; jump if english mode
        mov     di,offset LogoMsg
        mov     cx,LogoLng
@@:
        mov     al,[di]
        call    ChgTblGrp
        mov     [di],al
        inc     di
        loop    @b
DisplayLogoDo:
        mov     bp,offset LogoMsg
        mov     dx,LogoPos
        mov     cx,LogoLng
        mov     bl,[NorAttr]
        xor     bh,bh
        mov     ax,1300h
        int     10h
        ret
ChgTblGrp:
        push    cx
        mov     bl,al
        mov     si,offset GrpCnvtTbl
        mov     cx,GrpCnvtTblLng
@@:
        lodsw
        cmp     al,bl
        jz      @f
        loop    @b
        mov     ah,bl
@@:
        mov     al,ah
        pop     cx
        ret

;------------------------
OpenFile:
        mov     ah,19h
        int     21h
        cmp     al,2
        jbe     @f
        mov     al,2
@@:
        add     al,'A'
        mov     si,offset Filename
        mov     [si],al                 ; set drive latter
        mov     dx,offset FileName
        mov     ax,3d02h
        int     21h
        jc      GetConfigFileCreat
        mov     [Handle],ax
        mov     dx,offset ConfigData
        mov     ah,3fh
        mov     bx,[Handle]
        mov     cx,50
        int     21h
        jnc     GetConfigFileRead
GetConfigFileCreat:
        mov     dx,offset FileName
        mov     ah,3ch
        mov     cx,2                    ; hidden file
        int     21h
        mov     [Handle],ax
        jnc     @f
        mov     ah,9
        mov     dx,offset FileCreatErrMsg
        int     21h
@@:
        ret
GetConfigFileRead:
        mov     si,offset CfgFilename
        mov     di,offset FileName
        add     di,3
        mov     cx,9
        rep cmpsb
        jnz     GetConfigFileCreat
;
        mov     ah,[CodeStat]
        and     ah,not ChabLoad
        mov     si,offset Sub1DataTbl
        mov     bx,si
        mov     cx,Sub1DataTblLng
@@:
        lodsb
        cmp     al,ah
        jz      @f
        loop    @b
@@:
        sub     si,bx
        mov     bx,si
        dec     bx
        mov     [CurCode],bl
;
        mov     ah,[MemStat]
        mov     si,offset Sub2DataTbl
        mov     bx,si
        mov     cx,Sub2DataTblLng
@@:
        lodsb
        cmp     al,ah
        jz      @f
        loop    @b
@@:
        sub     si,bx
        mov     bx,si
        dec     bx
        mov     [CurMem],bl
;
        mov     ah,[PrinterStat]
        mov     si,offset Sub4DataTbl
        mov     bx,si
        mov     cx,Sub4DataTblLng
@@:
        lodsb
        cmp     al,ah
        jz      @f
        loop    @b
@@:
        sub     si,bx
        mov     bx,si
        dec     bx
        mov     [CurPrinter],bl
;
        mov     ah,[KbdType]
        mov     si,offset Sub7DataTbl
        mov     bx,si
        mov     cx,Sub7DataTblLng
@@:
        lodsb
        cmp     al,ah
        jz      @f
        loop    @b
@@:
        sub     si,bx
        mov     bx,si
        dec     bx
        mov     [CurKbd],bl
        ret

;------------------------
DisplayAll:
        mov     cx,MainTblLng
@@:
        push    cx
        mov     bl,[NorAttr]
        call    DispMenu
        inc     [MenuPos]
        pop     cx
        loop    @b
        mov     [MenuPos],0
        mov     bl,[SelAttr]
        call    DispMenu
        call    DispHelp
        ret


;------------------------------------------------------------------------
Action:
        xor     ah,ah
        int     16h
        mov     bx,[MenuPos]
        shl     bx,1
        mov     bx,[bx+MainTbl]
        call    [bx+mKbdSrv]
        jnc     @f
        mov     ax,0e07h
        int     10h
        jmp     short Action
@@:
        mov     cl,ah
        xor     ch,ch
        shl     cx,1
        mov     si,cx
        call    [si].ActionTbl
        jnc     Action
        ret
ActionTbl       label   word
                dw      offset EditString       ; 0
                dw      offset MenuUp           ; 1
                dw      offset MenuDown         ; 2
                dw      offset MenuPost         ; 3
                dw      offset MenuNext         ; 4
                dw      offset CheckSave        ; 5
                dw      offset Escape           ; 6
                dw      offset EditBs           ; 7
                dw      offset CodeDec          ; 8
                dw      offset CodeInc          ; 9

;------------------------
EditString:
        cmp     [CharCnt],StringLng
        jae     EditStringErr
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     di,[si].mFlagAddr
        cmp     [CharCnt],0
        jnz     @f
        push    ax
        push    di
        mov     dx,[si].mCurPos
        mov     [CurPos],dx
        mov     di,offset FontFileName
        mov     cx,StringLng
        xor     al,al
        rep stosb
        pop     di
        pop     ax
@@:
        add     di,[CharCnt]
        mov     [di],al
        inc     [CharCnt]
        mov     bl,[SelAttr]
        call    DispMenu
        inc     [CurPos]
        mov     dx,[CurPos]
        mov     ah,2
        xor     bh,bh
        int     10h
        clc
        ret
EditStringErr:
        call    Beep
        clc
        ret

;------------------------
MenuUp:
        mov     [CharCnt],0
        mov     [CurPos],FilePos
        mov     bl,[NorAttr]
        call    DispMenu
        dec     [MenuPos]
        cmp     [MenuPos],-1
        jnz     @f
        mov     [MenuPos],MainTblLng-1
@@:
        call    DispHelp
        mov     bl,[SelAttr]
        call    DispMenu
        call    CursorControl
        clc
        ret

;------------------------
MenuDown:
        mov     [CharCnt],0
        mov     [CurPos],FilePos
        mov     bl,[NorAttr]
        call    DispMenu
        inc     [MenuPos]
        cmp     [MenuPos],MainTblLng
        jb      @f
        mov     [MenuPos],0
@@:
        call    DispHelp
        mov     bl,[SelAttr]
        call    DispMenu
        call    CursorControl
        clc
        ret

;------------------------
MenuPost:
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     al,[si].mMaxItem
        dec     [si].mCurItem
        cmp     [si].mCurItem,-1
        jnz     @f
        dec     al
        mov     [si].mCurItem,al
@@:
        mov     bl,[SelAttr]
        call    DispMenu
        clc
        ret

;------------------------
MenuNext:
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     al,[si].mMaxItem
        inc     [si].mCurItem
        cmp     [si].mCurItem,al
        jb      @f
        mov     [si].mCurItem,0
@@:
        mov     bl,[SelAttr]
        call    DispMenu
        clc
        ret

;------------------------
CheckSave:
        xor     bh,bh
        mov     ah,3
        int     10h
        and     ch,not 20h
        mov     ah,1
        int     10h
        mov     dx,HelpPos
        mov     bl,[NorAttr]
        xor     bh,bh
        mov     ah,2
        int     10h
        mov     cx,CodeSelHelpLng
        mov     ah,9
        mov     al,' '
        int     10h
        mov     si,offset SaveMsg
        mov     bl,[SelAttr]
        call    DispString
        xor     ah,ah
        int     16h
        or      al,20h
        cmp     al,'y'
        jnz     CheckSaveEnd
        mov     bl,[CurCode]
        xor     bh,bh
        mov     al,[bx+Sub1DataTbl]
        mov     [CodeStat],al
        mov     bl,[CurMem]
        xor     bh,bh
        mov     al,[bx+Sub2DataTbl]
        mov     [MemStat],al
        mov     bl,[CurKbd]
        xor     bh,bh
        mov     al,[bx+Sub7DataTbl]
        mov     [KbdType],al
        mov     bl,[CurPrinter]
        xor     bh,bh
        mov     al,[bx+Sub4DataTbl]
        mov     [PrinterStat],al
        cmp     [PrinterStat],NoPrt
        jz      @f
        or      [CodeStat],ChabLoad
@@:
        test    [CodeStat],Chab or WSung7
        jz      @f
        or      [CodeStat],ChabLoad
@@:
        test    [CodeStat],ChabLoad
        jnz     @f
        and     [CodeStat],not (Chab or WSung7)
        mov     [PrinterStat],NoPrt
@@:
        xor     cx,cx
        xor     dx,dx
        mov     bx,[Handle]
        mov     ax,4200h
        int     21h
        mov     dx,offset ConfigData
        mov     ah,40h
        mov     cx,50
        int     21h
        mov     ah,3eh
        int     21h
        stc
        ret
CheckSaveEnd:
        call    DispHelp
        call    CursorControl
        mov     bl,[SelAttr]
        call    DispMenu
        clc
        ret

;------------------------
Escape:
        stc
        ret

;------------------------
EditBs:
        cmp     [CharCnt],0
        jz      EditBsErr
        dec     [CharCnt]
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     di,[si].mFlagAddr
        add     di,[CharCnt]
        mov     byte ptr [di],0
        mov     bl,[SelAttr]
        call    DispMenu
        dec     [CurPos]
        mov     dx,[CurPos]
        mov     ah,2
        xor     bh,bh
        int     10h
        clc
        ret
EditBsErr:
        call    Beep
        clc
        ret

;------------------------
CodeDec:
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     dx,[si].mCurPos
        mov     si,[si].mFlagAddr
        mov     bl,[SelAttr]
        dec     byte ptr [si]
        jz      CodeDefMsg
CodeHexMsg:
        mov     bl,[NorAttr]
        xor     bh,bh
        mov     ah,2
        int     10h
        mov     cx,DefaultMsgLng
        mov     ah,9
        mov     al,' '
        int     10h
        mov     bl,[SelAttr]
        call    DispMenu
        ret

;------------------------
CodeInc:
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     dx,[si].mCurPos
        mov     si,[si].mFlagAddr
        mov     bl,[SelAttr]
        inc     byte ptr [si]
        jnz     CodeHexMsg
CodeDefMsg:
        mov     bl,[SelAttr]
        mov     si,offset DefaultMsg
        call    DispString
        ret


;------------------------------------------------------------------------
DispMenu:
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     dx,[si].mCurPos
        mov     al,[si].mFlag
        and     ax,00000110b
        mov     di,ax
        call    [di].DispMenuTbl
        ret
DispMenuTbl     label   word
                dw      offset DispMenuStringMsg
                dw      offset DispByteMsg
                dw      offset DispStringMsg
                dw      offset DispStringMsg
DispMenuStringMsg:
        mov     al,[si].mCurItem
        xor     ah,ah
        shl     ax,1
        add     si,ax
        mov     si,[si].mMenuMsg
        call    DispString
        ret
DispByteMsg:
        mov     si,[si].mFlagAddr
        mov     al,[si]
        or      al,al
        jnz     @f
        mov     si,offset DefaultMsg
        push    bx
        mov     bl,[NorAttr]
        xor     bh,bh
        mov     ah,2
        int     10h
        mov     cx,DefaultMsgLng
        mov     ah,9
        mov     al,' '
        int     10h
        pop     bx
        call    DispString
        ret
@@:
        mov     ah,al
        and     ax,0f00fh
        shr     ah,1
        shr     ah,1
        shr     ah,1
        shr     ah,1
        add     ax,'00'
        cmp     al,'9'
        jbe     @f
        add     al,7
@@:
        cmp     ah,'9'
        jbe     @f
        add     ah,7
@@:
        push    ax
        mov     al,ah
        mov     cx,1
        xor     bh,bh
        mov     ah,2
        int     10h
        mov     ah,9
        int     10h
        inc     dl
        mov     ah,2
        int     10h
        pop     ax
        mov     ah,9
        int     10h
        ret
DispStringMsg:
        xor     bh,bh
        mov     ah,2
        int     10h
        mov     cx,StringLng
        mov     ah,9
        mov     al,' '
        int     10h
        mov     si,[si].mFlagAddr
        call    DispString
        mov     ax,920h
        int     10h                     ; clear han 1st flag
        mov     dx,[CurPos]
        xor     bh,bh
        mov     ah,2
        int     10h
        ret

;------------------------
DispHelp:
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     si,[si].mHelpMsg
        mov     bl,[NorAttr]
        mov     dx,HelpPos
        call    DispString
        ret

;------------------------
RestoreScreen:
        mov     al,[OrgMode]
        xor     ah,ah
        int     10h
        ret

;------------------------
KbdMenu:
        mov     si,offset MenuSelect
        call    ParsingKey
        ret

;------------------------
KbdCode:
        mov     si,offset MakeCode
        call    ParsingKey
        ret

;------------------------
KbdString:
        mov     bh,al
        mov     si,offset MakeString
        call    ParsingKey
        jnc     @f
        mov     al,bh
        xor     ah,ah                   ; CLC
@@:
        ret

;------------------------
ParsingKey:
        mov     bl,ah
@@:
        lodsw
        cmp     ax,-1
        jz      @f
        cmp     al,bl
        jnz     @b
        ret
@@:
        stc
        ret

;------------------------
Beep:
        mov     ax,0e07h
        int     10h
        ret

;------------------------
CursorControl:
        push    dx
        xor     bh,bh
        mov     ah,3
        int     10h
        or      ch,20h
        cmp     [MenuPos],3-1
        jnz     @f
        and     ch,not 20h
        mov     si,[MenuPos]
        shl     si,1
        mov     si,[si+MainTbl]
        mov     dx,[si].mCurPos
        mov     [CurPos],dx
@@:
        mov     ah,1
        int     10h
        pop     dx
        ret

;------------------------
DispString:
        mov     cx,1
        xor     bh,bh
@@:
        mov     ah,2
        int     10h
        lodsb
        cmp     al,eom
        jz      @f
        mov     ah,9
        int     10h
        inc     dl
        jmp     short @b
@@:
        ret


CODE    ENDS
        END     Start

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\init.asm ===
TITLE   Initialization routines

;=======================================================================;
; (C)Copyright Qnix Computer Co. Ltd.   1985-1992.                      ;
; This program contains proprietary and confidential information.       ;
; All rights reserved.                                                  ;
;=======================================================================;

;=======================================================================;
;                                                                       ;
;                    SPECIFICATION for initialize                       ;
;                                                                       ;
;=======================================================================;
;
; Keyboard type : english 84 KBD
;               : hangeul 86 KBD(none standard)
;               : hangeul 86 KBD(KS C 5853)
;               : 101 KBD
;               : 103 KBD(KS C 5853)
;
; Video card : MGA
;              CGA
;              EGA-mono
;              EGA-color
;              VGA
;              Font card
;              Dual monitor
;              ѱ/ video card
;               file ġ : HIMEM, EMS, Ext., real memory
;              UDC file ġ
;
; User definable ѿ/ key
; Configuration file ó
;

CODE    SEGMENT PUBLIC WORD 'CODE'
ASSUME  CS:CODE, DS:CODE, ES:CODE

        INCLUDE EQU.INC
INCLUDE debug.inc
        INCLUDE compose.INC

;************************************************************************
;**                                                                    **
;**                    GLOBAL DATA & FLAG                              **
;**                                                                    **
;************************************************************************

; ----------- EQUATION -----------
; ------------- FLAG -------------
; ------------- DATA -------------

extrn   OldKbInt:dword, OldKbioInt:dword, OldRtcInt:dword, OldVdParms:dword
extrn   OldVideo:dword, OldSavePtr:dword, OldInt15:dword, OldInt17:dword
extrn   EndSegment:word, EndOffset:word
extrn   MemStat:byte, MemSize:word
extrn   EmsSeg:word, EmsHandle:word, MaxMemSize:word, CurEmsPage:word
extrn   HanAddr:word, HanAddrH:byte, UdcAddr:word, UdcAddrH:byte
extrn   CodeStat:byte, Card1st:byte, Card2nd:byte, HeKey:byte, HjKey:byte
extrn   KbStat:byte, Printer:byte, ErrStat:byte, HjStat:byte, MachineType:byte
extrn   WinSegment:word, WinOffset:word, KbdType:byte

extrn   HanPatternPtr:word, PatGenAddr:word

extrn   CodeBuf2Addr:dword, CodeBufSize:word

extrn   GetHan1st:word, GetHan2nd:word, GetUdc1st:word, GetUdc2nd:word
extrn   PutUdc1st:word, PutUdc2nd:word, HanOn1st:word, HanOn2nd:word
extrn   HanOff1st:word, HanOff2nd:word

extrn   GetFontHanExt:near, GetFontUdcExt:near, PutFontUdcExt:near
extrn   GdtDataTbl:word
extrn   GetFontHanEms:near, GetFontUdcEms:near, PutFontUdcEms:near
extrn   GetFontHanReal:near, GetFontUdcReal:near, PutFontUdcReal:near

extrn   Int9:near, Int16:near, Int8:near, Int10:near, Int17:near, Int15Srv:near
extrn   ChgCode:near, VgaService:near
extrn   InitEnd:near, Install:near

extrn   VideoParms:byte
extrn   Mda70h:byte, Mda07h:byte
extrn   Cga40h:byte, Cga23h:byte
extrn   RegSize:byte, CrtcSet:byte

extrn   HanSavePtr:dword, VideoParmsTbl:byte
extrn   Mode2E:byte, Mode3E:byte, Mode7:byte
extrn   Mode07:byte, Mode23:byte
extrn   Mode3V:byte, Mode07V:byte, Mode3Ega:byte, Mode7Ega:byte

extrn   FontFilename:byte, iVersion:byte

extrn   vdm_info:near

if      Hwin31Sw
extrn   OldInt2f:dword, Int2f:near
endif   ;   Hwin31Sw

if      GetSwitch
if      not comfile
extrn   PtrSav:dword
InitBpb =       18                      ; init BPB(Bios Parameter Block)
endif
endif   ;   GetSwitch

;************************************************************************
;**                                                                    **
;**                           INITIALIZE                               **
;**                                                                    **
;************************************************************************
;

ParsKeyboard    PROC    Near

        @push   bx, dx
        lodsb                           ; Skip ':' character
        xor     bx, bx
@@:
        lodsb
        cmp     al, '0'
        jb      @f
        cmp     al, '9'
        ja      @f
        xchg    ax, bx
        mov     dx, 10
        mul     dx
        xor     bh, bh
        sub     bl, '0'
        add     bx, ax
        jmp     @b
@@:
dec     bx
dec     si
        cmp     bx, 6
        jae     @HEUnknown

        cmp     bx, 0
        jne     @F
        mov     cs:HeKey, 38h
        mov     cs:HjKey, 1Dh
        jmp     short @HEend
@@:
        cmp     bx, 1
        jne     @f
        mov     cs:HeKey, 1Dh
        mov     cs:HjKey, 38h
        jmp     SHORT @HEend
@@:
        cmp     bx, 2
        je      @HEdefined
        cmp     bx, 4
        jne     @f
@HEdefined:
        mov     cs:HeKey, 0F0h
        mov     cs:HjKey, 0F1h
        jmp     short @HEend
@@:
        cmp     bx, 3
        jne     @F
        mov     cs:HeKey, 2
        mov     cs:HjKey, 2
        jmp     short @HEend
@@:
        cmp     bx, 5                   ; BUGBUG - Testing code
        jne     @HEUnknown              ; BUGBUG - Testing code
        mov     cs:HeKey, 1                ; BUGBUG - Testing code
        mov     cs:HjKey, 1                ; BUGBUG - Testing code
        jmp     short @HEend
@HEUnknown:
        @pop    dx, bx
        stc                             ; Unknown number
        ret
@HEend:                                 ; OK
        @pop    dx, bx
        clc
        ret

ParsKeyboard    ENDP

;------------------------------------------------------------------------
;   << HanInit >>
; FUNCTION = ѱ BIOS ʱȭ
; INPUT   : SS, SP
; OUTPUT  : CX:DX = ѱ BIOS  segment:offset address
; PROTECT : SS, SP
;
; HanInit(-/CX, DX)
;       {
;       Save DS, ES, SI, DI, BP;
;       DS = CS;
;       ES = CS;
;       SetMachineType(-/-);
;       SetHeHjKey(-/-);
;       if (CheckVideoCardType(-/flag) == CY)
;               {
;               /* disp error message */
;               CX = CS;
;               DX = 0;
;               return;
;               }
;       CheckHanCard(-/-);
;       GetConfigFile(-/-);
;       SetVideoParms(-/-);
;       CalcEndAddr(-/-);
;       SetPatGen(-/-);
;       SetCodeBuffer(-/-);
;       CheckMemory(-/-);
;       SetVector(-/-);
;       InstallFontFile(-/-);
;       jmp Install;
;
hbiosExist  DB      0
codePage    DB      0

public  HanInit
HanInit:
        push    ds
        push    es
        push    di
        push    si
        push    bp
        mov     ax,cs
        mov     ds,ax
        mov     es,ax
if      ComFile
        mov     ah, 66h
        mov     al, 1
        int     21h     ; Get Current Code Page
        cmp     bx, 949
        jne     @f
        mov     codePage, 2
        jmp     @join
@@:
        cmp     bx, 1361
        jne     @join
        mov     codePage, 4
@join:
        push    es
        mov     ax,0fd00h
        int     10h
        pop     es
        cmp     al,0fdh
        jne     @f
        mov     hbiosExist, 1
@@:
        call    ParsCommand
        mov     dx,offset DupErrMsg
        jc      ComFileEnd
        cmp     [hbiosExist], 0
        je      @f
ComFileEnd:
        mov     ah, 9
        int     21h
        mov     ax, 4C00h
        int     21h
@@:
endif   ; if ComFile
        call    SetMachineType
        cmp     [HeKey], 0
        jnz     @f
        call    SetHeHjKey
@@:
        call    CheckVideoCardType
        jnc     @f
        mov     dx,offset CardErrMsg
if      ComFile
        jmp     short ComFileEnd
else
        mov     ah,9
        int     21h
        mov     cx,cs
        xor     dx,dx
        jmp     InitEnd
endif   ; if ComFile
@@:
        mov     [WinSegment],cs

        ;
        ; Get VDM Information.
        ;
        mov     si,offset vdm_info
        mov     ah,20h
        BOP     43H

        call    GetConfigFile
        call    CheckHanCard
        call    InstPrinter
        call    SetVideoParms
        call    CalcEndAddr
        call    SetPatGen
        call    SetCodeBuffer
        call    CheckMemory
        call    SetVector
        call    InstallFontFile
if      hdos60
        push    ax
        mov     ax,04f02h
        int     2fh
        pop     ax
endif   ;   hdos60
        jmp     Install
CardErrMsg      db      cr,lf,'Invalid video card !!!',7,'$'
DupErrMsg       db      'ѱ BIOS ̹ ġǾ ֽϴ!',7,cr,lf,'$'
;CardErrMsg      db      cr,lf,'Invalid video card !!!',7,'$'
;DupErrMsg       db      cr,lf,'Already installed !!!',7,'$'


ParsSkipOptions PROC    Near
@@:
        lodsb
        cmp     al, ' '
        je      @f
        cmp     al, 9
        je      @f
        cmp     al, cr
        je      @f
        cmp     al, lf
        jne     @b
@@:
        dec     si
        ret
ParsSkipOptions ENDP

;------------------------------------------------------------------------
if      ComFile
ParsCommand:
        mov     si,81h
@@:
        lodsb
        cmp     al,cr
        je      ParsEnd
        cmp     al,lf
        je      ParsEnd
        cmp     al,'/'
        jnz     @b
        lodsb
        or      al,20h
        cmp     al, 'u'         ; "/u" = uninstall option
        je      ParsRemove
        cmp     al, '?'
        je      ParsHelp
        call    ParsSkipOptions
        jmp     @b
ParsEnd:
        clc
        ret

;-------------------------------
DispRemoveEnd:
        mov     ax, cs
        mov     ds, ax
        mov     bl, [codePage]
        xor     bh, bh
        mov     si, [si+bx]
        mov     ah, 0fh
        int     10h
        mov     bl, 7
@@:
        lodsb
        or      al,al
        jz      @ParsExit
        mov     ah,0eh
        int     10h
        jmp     short @b
@ParsExit:
        mov     ax,4c00h
        int     21h

ParsHelp:
        mov     bx, Offset msgHelp
        call    ShowMultiMessage
        jmp     @ParsExit

ParsBadCmd:
        mov     bx, Offset msgBadCmd
        call    ShowMultiMessage
        jmp     @ParsExit

ParsRemove:
        cmp     cs:[hbiosExist], 0
        jnz     @f
        mov     ax, cs
        mov     ds, ax
        mov     dx, Offset msgNotExist
        mov     ah, 9
        int     21h
        jmp     @ParsExit
@@:
        mov     ax,0fd00h
        int     10h
        mov     si,offset iVersion
        mov     di,si
        mov     cx,5
        rep cmpsb                       ; compare same BIOS
        mov     si,offset msgUnknown
        jnz     DispRemoveEnd
        mov     si,offset msgUnable
        push    ds
        xor     ax,ax
        mov     ds,ax
ASSUME  DS:DATA
        mov     dx,es
        cmp     dx,word ptr [rKbInt+2]
        jnz     DispRemoveEnd
        cmp     dx,word ptr [rVideoInt+2]
        jnz     DispRemoveEnd
        cmp     dx,word ptr [rKbioInt+2]
        jnz     DispRemoveEnd
        cmp     dx,word ptr [rRtcInt+2]
        jnz     DispRemoveEnd
        and     es:[CodeStat],not HangeulMode
        call    dword ptr es:[WinOffset]
        cli
        mov     ax,word ptr es:[OldKbint]
        mov     bx,word ptr es:[OldKbint+2]
        mov     word ptr [rKbInt],ax
        mov     word ptr [rKbInt+2],bx
        mov     ax,word ptr es:[OldVideo]
        mov     bx,word ptr es:[OldVideo+2]
        mov     word ptr [rVideoInt],ax
        mov     word ptr [rVideoInt+2],bx
        mov     ax,word ptr es:[OldKbioInt]
        mov     bx,word ptr es:[OldKbioInt+2]
        mov     word ptr [rKbioInt],ax
        mov     word ptr [rKbioInt+2],bx
        mov     ax,word ptr es:[OldRtcInt]
        mov     bx,word ptr es:[OldRtcInt+2]
        mov     word ptr [rRtcInt],ax
        mov     word ptr [rRtcInt+2],bx
if      Hwin31Sw
        mov     ax,word ptr es:[OldInt2f]
        mov     bx,word ptr es:[OldInt2f+2]
        mov     word ptr [rInt2f],ax
        mov     word ptr [rInt2f+2],bx
endif   ;   Hwin31Sw
        mov     ax,word ptr es:[OldVdParms]
        mov     bx,word ptr es:[OldVdParms+2]
        mov     word ptr [rVdParm],ax
        mov     word ptr [rVdParm+2],bx
        mov     ax,word ptr es:[OldInt17]
        mov     bx,word ptr es:[OldInt17+2]
        cmp     dx,word ptr [rPrinter+2]
        jnz     @f
        mov     word ptr [rPrinter],ax
        mov     word ptr [rPrinter+2],bx
@@:
        mov     ax,word ptr es:[OldSavePtr]
        mov     bx,word ptr es:[OldSavePtr+2]
        cmp     dx,word ptr [rSavePtr+2]
        jnz     @f
        mov     word ptr [rSavePtr],ax
        mov     word ptr [rSavePtr+2],bx
@@:
        mov     ax,word ptr es:[OldInt15]
        mov     bx,word ptr es:[OldInt15+2]
        cmp     dx,word ptr [rCasetInt+2] ; same segment ?
        jnz     @f                        ; jump if no
        mov     word ptr [rCasetInt],ax
        mov     word ptr [rCasetInt+2],bx
@@:
        sti
        pop     ds
ASSUME  DS:CODE
        mov     dx,es:[EmsHandle]
        test    es:[MemStat],HiMem
        jz      @f
        mov     ah,0dh
        call    es:[OldInt15]
        mov     ah,0ah
        call    es:[OldInt15]
@@:
        test    es:[MemStat],EmsMem
        jz      @f
        mov     ah,45h                  ; close handle
        int     67h
@@:
        mov     ah,49h
        int     21h
        mov     si,offset msgRemove
        jmp     DispRemoveEnd

U_Unable    db  'Cannot remove installed HBIOS!', 7,cr,lf,0
C_Unable    DB  ' ġǾ ִ HBIOS   ϴ!', 7,cr,lf,0
W_Unable    DB  'e áA e HBIOSi Ai  sa!', 7,cr,lf,0
msgUnable   DW  U_Unable, C_Unable, W_Unable

U_Unknown   db  'Unknown Hangeul BIOS!', 7,cr,lf,0
C_Unknown   DB  'ٸ  ѱ BIOS ġǾ ֽϴ!', 7,cr,lf,0
W_Unknown   DB  'ae 巁 ei BIOSa áA sa!', 7,cr,lf,0
msgUnknown  DW  U_Unknown, C_Unknown, W_Unknown

U_Remove    db  'Uninstalled!',cr,lf,0
msgRemove   DW  U_Remove, U_Remove, U_Remove

U_Help  DB      'Usage: HBIOS [/?|/U|/F|/K|/E|/P]', 0Dh, 0Ah
        DB      '       /?   - Help', 0Dh, 0Ah
        DB      '       /U   - Uninstall', 0Dh, 0Ah
        DB      '       /F:<font file name>', 0Dh,0Ah
        DB      '            - Specify Extended Font File', 0Dh,0Ah
        DB      '       /K:# - Set Han/Eng toggle key', 0Dh, 0Ah
        DB      '          1 - Right Alt, Right Ctrl', 0Dh, 0Ah
        DB      '          2 - Right Ctrl, Right Alt', 0Dh, 0Ah
        DB      '          3 - 103 Key Keyboard Defined', 0Dh, 0Ah
        DB      '          4 - 84 Key Keyboard (Alt-Shift, Ctrl-Shift)', 0Dh,0Ah
        DB      '          5 - 86 Key Keyboard Defined', 0Dh,0Ah
        DB      '          6 - Left Shift-Space, Left Ctrl-Space', 0Dh, 0Ah
        DB      '       /E   - English Card Only', 0Dh, 0Ah
        DB      '       /P   - Page 1 Only', 0Dh, 0Ah, '$'
W_Help  DB      ': HBIOS [/?|/U|/F|/K|/E|/P]', 0Dh, 0Ah
        DB      '       /?   - ', 0Dh, 0Ah
        DB      '       /U   - ޸𸮿 ', 0Dh, 0Ah
        DB      '       /F:<۲  ̸>', 0Dh,0Ah
        DB      '            - Ȯ ۲  ', 0Dh,0Ah
        DB      '       /K:# - / ȯŰ   ȯŰ ', 0Dh, 0Ah
        DB      '          1 -  Alt,  Ctrl', 0Dh, 0Ah
        DB      '          2 -  Ctrl,  Alt', 0Dh, 0Ah
        DB      '          3 - 103 Ű  ', 0Dh, 0Ah
        DB      '          4 - 84 Ű (Alt-Shift, Ctrl-Shift)', 0Dh, 0Ah
        DB      '          5 - 86 Ű  ', 0Dh,0Ah
        DB      '          6 -  Shift-Space,  Ctrl-Space', 0Dh,0Ah
        DB      '       /E   - ѱ ī üũ ', 0Dh, 0Ah
        DB      '       /P   - ī忡 1Page ', 0Dh, 0Ah, '$'
C_Help  DB      'aw: HBIOS [/?|/U|/F|/K|/E|/P]', cr,lf
        DB      '       /?   - i', cr,lf
        DB      '       /U   - AA bA', cr,lf
        DB      '       /F:<i a q>', cr,lf
        DB      '            - ¸w i a ', cr,lf
        DB      '       /K:# - ', cr,lf,'$'
        DB      '       /E   - English Card Only', 0Dh, 0Ah
        DB      '       /P   - Page 1 Only', 0Dh, 0Ah
msgHelp DW      U_Help, W_Help, C_Help

U_BadCmd    DB  'Invalid option parameter', cr,lf,'$'
W_BadCmd    DB  'Ű  ߸Ǿϴ.', cr,lf,'$'
C_BadCmd    DB  ' ea iAsa.', cr,lf,'$'
msgBadCmd   DW  U_BadCmd, W_BadCmd, C_BadCmd

msgNotExist DB      'Cannot find resident HBIOS!', 0Dh,0Ah,'$'


ShowMultiMessage PROC    Near
;
; BX < Offset Table for Message
; DS = Unknown
;
        add     bl, [codePage]
        adc     bh, 0
        mov     dx, [bx]
        mov     ah, 9
        int     21h
        ret

ShowMultiMessage ENDP

endif   ; if ComFile


;------------------------------------------------------------------------
;   << SetMachineType >>
; FUNCTION = check XT or AT machine type, KBD type
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; SetMachineType(-/-)
;       {
;       Save ES;
;       ES = 0f000h;
;       if (ES:[0fffeh] == 0fch), [MachineType] = AtMachine;
;       ES = KbSeg
;       if (ES:[rKbFlag] == Ext10xKey), [KbStat] = [KbStat] || Ext10xKey;
;       Restore ES;
;       }
;
TmpPatBuf       label   byte
SetMachineType:
        push    es
        mov     ax,0f000h
        mov     es,ax
        mov     di,0fffeh
        cmp     byte ptr es:[di],0fch
        jnz     @f
        or      [MachineType],AtMachine
@@:
ASSUME  ES:KbSeg
        mov     ax,SEG KbSeg
        mov     es,ax
        test    es:[rKbFlag3],Ext10xKey
        jz      @f
        or      [KbStat],Ext10xKey
@@:
        pop     es
ASSUME  ES:CODE
        ret


;------------------------------------------------------------------------
;   << SetHeHjKey >>
; FUNCTION = set ѿ/ key
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; SetHeHjKey(-/-)
;       {
;       if ([KbStat] == Ext10xKey)
;               {
;               [HeKey] = Def101HeKey;
;               [HjKey] = Def101HjKey;
;               }
;       else
;               {
;               if ([MachineType] == AtMachine)
;                       {
;                       [HeKey] = DefAtHeKey;
;                       [HjKey] = DefAtHjKey;
;                       }
;               else
;                       {
;                       [HeKey] = DefXtHeKey;
;                       [HjKey] = DefXtHjKey;
;                       }
;               }
;       }
;
SetHeHjKey:
if      not Kbd101On
        test    [KbStat],Ext10xKey
        jz     @f
        mov     al,DefAtKsHeKey
        mov     ah,DefKsHjKey
        test    [MachineType],AtMachine
        jnz     SetHeHjKeyRet
        mov     al,DefXtKsHeKey
        mov     ah,DefKsHjKey
        jmp     SetHeHjKeyRet
@@:
        mov     al,DefAtHeKey
        mov     ah,DefAtHjKey
        test    [MachineType],AtMachine
        jnz     SetHeHjKeyRet
        mov     al,DefXtHeKey
        mov     ah,DefXtHjKey
SetHeHjKeyRet:
else
        mov     al,Def101HeKey
        mov     ah,Def101HjKey
        test    [KbStat],Ext10xKey
        jnz     @f
        mov     al,DefAtHeKey
        mov     ah,DefAtHjKey
        test    [MachineType],AtMachine
        jnz     @f
        mov     al,DefXtHeKey
        mov     ah,DefXtHjKey
@@:
endif
        mov     [HeKey],al
        mov     [HjKey],ah
        ret


;------------------------------------------------------------------------
;   << CheckVideoCardType >>
; FUNCTION = video card type dual monitor θ ˻.
; INPUT   : none
; OUTPUT  : CARRY(set = invalid video card)
; PROTECT : SS, SP, DS, ES
;
; CheckVideoCardType(-/-)
;       {
;       DX = -1;
;       AX = 101ah;
;       BX = -1;
;       int 10h;                /* VGA function */
;       AX = 1a00h;
;       int 10h;                /* get card type */
;       if ((BX != -1) && (AL == 1ah) && (BL < 14) && (BH < 14))
;               {
;               switch(BL)
;                       {
;                       case 1:
;                               [Card1st] = MgaCard;
;                               break;
;                       case 2:
;                               [Card1st] = CgaCard || ColorMnt;
;                               break;
;                       case 4:
;                               [Card1st] = EgaCardC || ColorMnt;
;                               break;
;                       case 5:
;                               [Card1st] = EgaCardM;
;                               break;
;                       case 0bh:
;                               [Card1st] = VgaCard;
;                               break;
;                       case 0ah:
;                       case 0ch:
;                       default:
;                               [Card1st] = VgaCard || ColorMnt;
;                               break;
;                       case 7:
;                               [Card1st] = McgaCard;
;                               break;
;                       case 6:
;                       case 8:
;                               [Card1st] = McgaCard || ColorMnt;
;                       }
;               switch(BH)
;                       {
;                       case 1:
;                               [Card2nd] = MgaCard || DualMnt;
;                               break;
;                       case 2:
;                               [Card2nd] = CgaCard || ColorMnt || DualMnt;
;                               break;
;                       case 4:
;                               [Card2nd] = EgaCardC || ColorMnt || DualMnt;
;                               break;
;                       case 5:
;                               [Card2nd] = EgaCardM || DualMnt;
;                               break;
;                       case 0bh:
;                               [Card2nd] = VgaCard || DualMnt;
;                               break;
;                       case 0ah:
;                       case 0ch:
;                               [Card2nd] = VgaCard || ColorMnt || DualMnt;
;                               break;
;                       case 7:
;                               [Card2nd] = McgaCard || DualMnt;
;                               break;
;                       case 6:
;                       case 8:
;                               [Card2nd] = McgaCard || ColorMnt || DualMnt;
;                       default:
;                       }
;               return;
;               }
;       else
;               {
;               AH = 12h;
;               BX = 0ff10h;
;               int 10h;
;               if (BL == 0), return(CY);
;               if ((BL != 10h) || (!BL))
;                       {
;                       if (ES:[rEquip] == 30h)
;                               {
;                               [Card1st] = EgaCard;
;                               AH = 0b8h;
;                               if (CheckVram(AH/flag) == ZR)
;                                       [Card2nd] = CgaCard || ColorMnt || DualMnt;
;                               }
;                       else
;                               {
;                               [Card1st] = EgaCard || ColorMnt;
;                               AH = 0b0h;
;                               if (CheckVram(AH/flag) == ZR)
;                                       [Card2nd] = MgaCard || DualMnt;
;                               }
;                       }
;               if (ES:[rEquip] == 30h)
;                       {
;                       [Card1st] = MgaCard;
;                       AH = 0b8h;
;                       if (CheckVram(AH/flag) == ZR)
;                               [Card2nd] = CgaCard || ColorMnt || DualMnt;
;                       }
;               else
;                       {
;                       [Card1st] = CgaCard || ColorMnt;
;                       AH = 0b0h;
;                       if (CheckVram(AH/flag) == ZR)
;                               [Card2nd] = MgaCard || DualMnt;
;                       }
;               }
;       if ([Card2nd] == DualMnt)
;               [Card1st] = DualMnt;
;       }
;
; CheckVram(AH/flag)
;       {
;       Save DS;
;       AL = 0;
;       DS = AX;
;       AX = 55aah;
;       DI = 0;
;       xchg [DI+3],AX;
;       xchg [DI+3],AX;
;       xchg [DI+9],AX;
;       xchg [DI+9],AX;
;       Restore DS;
;       /* cmp AX,55aah */
;       }
;
CheckVideoCardType:
        mov     dx,-1
        mov     ax,101ah
        mov     bx,-1
        int     10h
        cmp     bx,-1
        jz      CheckEga
        mov     ax,1a00H
        int     10h
        cmp     al,1aH                  ; VGA?
        jne     CheckEga                ; jump if no
VgaBoard:
        cmp     bl,VgaModeTblLng
        jae     CheckEga
        cmp     bh,VgaModeTblLng
        jae     CheckEga
        mov     al,bh
        xor     bh,bh
        mov     dl,[bx+VgaModeTbl]
        cmp     dl,-1                   ; invalid vide card ?
        jnz     @f                      ; jump if no
        mov     dl,VgaCard or ColorMnt
        xor     dh,dh
        jmp     SetCardParm
@@:
        mov     bl,al
        mov     dh,[bx+VgaModeTbl]
        jmp     short SetCardParm
CheckEga:
        mov     ah,12H
        mov     bx,0ff10H
        int     10h
        cmp     bl,10H                  ; which video mode
        jz      CheckCga
        or      bl,bl
        jz      CheckCardErr            ; jump if installed 64KByte video memory only
        or      bh,bh                   ; color mode?
        jz      Check2ndEColor
        int     11h
        test    al,00110000b
        jpo     Set1CE2M
        jmp     short SetE1M2C
CheckCardErr:
        stc
        ret
Check2ndEColor:
        int     11h
        test    al,00110000b
        jpo     SetE1C2M
        jmp     short Set1ME2C
SetE1C2M:
        mov     dl,EgaCardC or ColorMnt
        mov     ah,0b0h
        call    CheckVRam
        jnz     SetCardParm
        mov     dh,MgaCard
        jmp     short SetCardParm
SetE1M2C:
        mov     dl,EgaCardM
        mov     ah,0b8h
        call    CheckVRam
        jnz     SetCardParm
        mov     dh,CgaCard or ColorMnt
        jmp     short SetCardParm
Set1CE2M:
        mov     dl,CgaCard or ColorMnt
        mov     ah,0b8h
        call    CheckVRam
        jnz     SetCardParm
        mov     dh,EgaCardM
        jmp     short SetCardParm
Set1ME2C:
        mov     dl,MgaCard
        mov     ah,0b0h
        call    CheckVRam
        jnz     SetCardParm
        mov     dh,EgaCardC or ColorMnt
        jmp     short SetCardParm
CheckCga:
        int     11h
        test    al,30h
        jpo     Check2ndMono
        mov     dl,MgaCard
        mov     ah,0b8h
        call    CheckVRam
        jnz     SetCardParm
        mov     dh,CgaCard or ColorMnt
        jmp     short SetCardParm
Check2ndMono:
        mov     dl,CgaCard or ColorMnt
        mov     ah,0b0h
        call    CheckVRam
        jnz     SetCardParm
        mov     dh,MgaCard
SetCardParm:
        cmp     dh,-1
        jz      @f
        or      dl,DualMnt
        or      dh,DualMnt
@@:
        mov     [Card1st],dl
        mov     [Card2nd],0
        test    dl,DualMnt
        jz      @f
        mov     [Card2nd],dh
@@:
        clc
        ret
VgaModeTbl      db      -1                      ; 0
                db      MgaCard                 ; 1
                db      CgaCard or ColorMnt     ; 2
                db      -1                      ; 3
                db      EgaCardC or ColorMnt    ; 4
                db      EgaCardM                ; 5
                db      McgaCard or ColorMnt    ; 6
                db      McgaCard                ; 7
                db      McgaCard or ColorMnt    ; 8
                db      -1                      ; 9
                db      VgaCard or ColorMnt     ; A
                db      VgaCard                 ; B
                db      VgaCard or ColorMnt     ; C
VgaModeTblLng = $-VgaModeTbl
CheckVram:
        push    ds
        xor     al,al
        mov     ds,ax
        mov     ax,55aah
        xor     di,di
        xchg    [di+3],ax
        xchg    [di+3],ax
        xchg    [di+7],ax
        xchg    [di+7],ax
        cmp     ax,55aah
        pop     ds
        ret


;------------------------------------------------------------------------
;   << CheckHanCard >>
; FUNCTION = ѱ video card ˻
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; CheckHanCard(-/-)
;       {
;       switch([Card1st])
;               {
;               case MgaCard :
;                       if (MgaInit(-/flag) == NC)
;                               {
;                               [Card1st] = [Card1st] || HanCard;
;                               [GetHan1st] = AX;
;                               [GetUdc1st] = AX;
;                               [PutUdc1st] = BX;
;                               [HanOn1st] = CX;
;                               [HanOff1st] = DX;
;                               }
;                       break;
;               case CgaCard :
;                       if (CgaInit(-/flag) == NC)
;                               {
;                               [Card1st] = [Card1st] || HanCard;
;                               [GetHan1st] = AX;
;                               [GetUdc1st] = AX;
;                               [PutUdc1st] = BX;
;                               [HanOn1st] = CX;
;                               [HanOff1st] = DX;
;                               }
;                       break;
;               case EgaCardM :
;               case EgaCardC :
;                       if (EgaInit(-/flag) == NC)
;                               {
;                               [Card1st] = [Card1st] || HanCard;
;                               [GetHan1st] = AX;
;                               [GetUdc1st] = AX;
;                               [PutUdc1st] = BX;
;                               [HanOn1st] = CX;
;                               [HanOff1st] = DX;
;                               }
;                       break;
;               case McgaCard :
;               case VgaCard :
;                       if (VgaInit(-/flag) == NC)
;                               {
;                               [Card1st] = [Card1st] || HanCard;
;                               [GetHan1st] = AX;
;                               [GetUdc1st] = AX;
;                               [PutUdc1st] = BX;
;                               [HanOn1st] = CX;
;                               [HanOff1st] = DX;
;                               }
;               }
;       switch([Card2nd])
;               {
;               case MgaCard :
;                       if (MgaInit(-/flag) == NC)
;                               {
;                               [Card2nd] = [Card2nd] || HanCard;
;                               [GetHan2nd] = AX;
;                               [GetUdc2nd] = AX;
;                               [PutUdc2nd] = BX;
;                               [HanOn2nd] = CX;
;                               [HanOff2nd] = DX;
;                               }
;                       break;
;               case CgaCard :
;                       if (CgaInit(-/flag) == NC)
;                               {
;                               [Card2nd] = [Card2nd] || HanCard;
;                               [GetHan2nd] = AX;
;                               [GetUdc2nd] = AX;
;                               [PutUdc2nd] = BX;
;                               [HanOn2nd] = CX;
;                               [HanOff2nd] = DX;
;                               }
;                       break;
;               case EgaCardM :
;               case EgaCardC :
;                       if (EgaInit(-/flag) == NC)
;                               {
;                               [Card2nd] = [Card2nd] || HanCard;
;                               [GetHan2nd] = AX;
;                               [GetUdc2nd] = AX;
;                               [PutUdc2nd] = BX;
;                               [HanOn2nd] = CX;
;                               [HanOff2nd] = DX;
;                               }
;                       break;
;               case McgaCard :
;               case VgaCard :
;                       if (VgaInit(-/flag) == NC)
;                               {
;                               [Card2nd] = [Card2nd] || HanCard;
;                               [GetHan2nd] = AX;
;                               [GetUdc2nd] = AX;
;                               [PutUdc2nd] = BX;
;                               [HanOn2nd] = CX;
;                               [HanOff2nd] = DX;
;                               }
;               }
;       if (([Card1st] != HanCard) && ([Card2nd] != HanCard))
;               {
;               if (FontInit(-/flag) == NC)
;                       {
;                       [Card1st] = [Card1st] || FontCard;
;                       [Card2nd] = [Card2nd] || FontCard;
;                       [HjStat] = [HjStat] || HjLoaded;
;                       [GetHan1st] = AX;
;                       [GetUdc1st] = AX;
;                       [PutUdc1st] = BX;
;                       [HanOn1st] = CX;
;                       [HanOff1st] = DX;
;                       [GetHan2nd] = AX;
;                       [GetUdc2nd] = AX;
;                       [PutUdc2nd] = BX;
;                       [HanOn2nd] = CX;
;                       [HanOff2nd] = DX;
;                       }
;               }
;       if (([Card1st] == HanCard) || ([Card2nd] == HanCard))
;               [HjStat] = [HjStat] || HjLoaded;
;       if (([Card1st] != HanCard) && ([Card2nd] == HanCard))
;               {
;               [GetHan1st] = [GetHan2nd];
;               [GetUdc1st] = [GetUdc2nd];
;               [PutUdc1st] = [PutUdc2nd];
;               [HanOn1st] = [HanOn2nd];
;               [HanOff1st] = [HanOff2nd];
;               }
;       if (([Card1st] == HanCard) && ([Card2nd] != HanCard))
;               {
;               [GetHan2nd] = [GetHan1st];
;               [GetUdc2nd] = [GetUdc1st];
;               [PutUdc2nd] = [PutUdc1st];
;               [HanOn2nd] = [HanOn1st];
;               [HanOff2nd] = [HanOff1st];
;               }
;       }
;
extrn   GetFontMga:near, PutFontMga:near, HanOnMga:near, HanOffMga:near
extrn   GetFontCga:near, PutFontCga:near, HanOnCga:near, HanOffCga:near
extrn   GetFontEga:near, PutFontEga:near, HanOnEga:near, HanOffEga:near
extrn   GetFontFont:near, PutFontFont:near, HanOnFont:near, HanOffFont:near
CheckHanCard:
        mov     bl,[Card1st]
        and     bx,CardType
        call    [bx+HanInitTbl]
        jc      @f
        or      [Card1st],HanCard
        mov     [GetHan1st],ax
        mov     [GetUdc1st],ax
        mov     [PutUdc1st],bx
        mov     [HanOn1st],cx
        mov     [HanOff1st],dx
@@:
        test    [Card1st],DualMnt
        jz      @f
        mov     bl,[Card2nd]
        and     bx,CardType
        call    [bx+HanInitTbl]
        jc      @f
        or      [Card2nd],HanCard
        mov     [GetHan2nd],ax
        mov     [GetUdc2nd],ax
        mov     [PutUdc2nd],bx
        mov     [HanOn2nd],cx
        mov     [HanOff2nd],dx
@@:
        test    [Card1st],HanCard
        jnz     @f
        test    [Card2nd],HanCard
        jnz     @f
        call    FontInit
        jc      @f
        or      [Card1st],FontCard
        or      [Card2nd],FontCard
        or      [HjStat],HjLoaded
        mov     [GetHan1st],ax
        mov     [GetUdc1st],ax
        mov     [PutUdc1st],bx
        mov     [HanOn1st],cx
        mov     [HanOff1st],dx
        mov     [GetHan2nd],ax
        mov     [GetUdc2nd],ax
        mov     [PutUdc2nd],bx
        mov     [HanOn2nd],cx
        mov     [HanOff2nd],dx
@@:
        mov     al,[Card1st]
        or      al,[Card2nd]
        test    al,HanCard
        jz      @f
        or      [HjStat],HjLoaded or UdcArea
@@:
        xor     bx,bx
        test    [Card1st],HanCard
        jz      @f
        or      bx,00000010b
@@:
        test    [Card2nd],HanCard
        jz      @f
        or      bx,00000100b
@@:
        call    [bx+SetFontPtrTbl]
        ret
SetFontPtrTbl   label   word
                dw      offset NoFont   ; 00
                dw      offset C1to2    ; 01
                dw      offset C2to1    ; 10
                dw      offset NoFont   ; 11
C1to2:
        mov     ax,[GetHan1st]
        mov     [GetHan2nd],ax
        mov     ax,[GetUdc1st]
        mov     [GetUdc2nd],ax
        mov     ax,[PutUdc1st]
        mov     [PutUdc2nd],ax
        mov     ax,[HanOn1st]
        mov     [HanOn2nd],ax
        mov     ax,[HanOff1st]
        mov     [HanOff2nd],ax
NoFont:
        ret
C2to1:
        mov     ax,[GetHan2nd]
        mov     [GetHan1st],ax
        mov     ax,[GetUdc2nd]
        mov     [GetUdc1st],ax
        mov     ax,[PutUdc2nd]
        mov     [PutUdc1st],ax
        mov     ax,[HanOn2nd]
        mov     [HanOn1st],ax
        mov     ax,[HanOff2nd]
        mov     [HanOff1st],ax
        ret


;------------------------------------------------------------------------
HanInitTbl      label   word
                dw      offset MgaInit
                dw      offset CgaInit
                dw      offset EgaInit
                dw      offset EgaInit
                dw      offset VgaInit
                dw      offset VgaInit

;------------------------------------------------------------------------
MgaInit:
if      AltHotKey
if      AtiVga
        call    CheckAti
        jc      @f
        ret
@@:
endif   ; if AtiVga
endif   ; AltHotKey
        mov     di,offset TmpPatBuf
        push    di
        push    ds
        mov     cx,0a1a2h
        call    GetFontMga
        pop     ds
        pop     si
        mov     cx,32/2
        xor     dx,dx
@@:
        lodsw
        add     dx,ax
        loop    @b
        cmp     dx,30h
        jz      @f
        cmp     dx,0c0h
        jz      @f
        stc
        ret
@@:
        mov     ax,offset GetFontMga
        mov     bx,offset PutFontMga
        mov     cx,offset HanOnMga
        mov     dx,offset HanOffMga
        ret

;------------------------------------------------------------------------
CgaInit:
        mov     di,offset TmpPatBuf
        push    di
        push    ds
        mov     cx,0a1a2h
        call    GetFontCga
        pop     ds
        pop     si
        mov     cx,32/2
        xor     dx,dx
@@:
        lodsw
        add     dx,ax
        loop    @b
        cmp     dx,30h
        jz      @f
        stc
        ret
@@:
        mov     ax,offset GetFontCga
        mov     bx,offset PutFontCga
        mov     cx,offset HanOnCga
        mov     dx,offset HanOffCga
        ret

;------------------------------------------------------------------------
EgaInit:
VgaInit:
if      ChkW32Trident
        call    CheckTrident
endif   ;   ChkW32Trident
        test    [KseCard],PassHanCdCheck
        jz      @f
        stc
        ret
@@:
if      AtiVga
        call    CheckAti
        jnc     @f
endif   ; if AtiVga
if      KseVga
        call    CheckKasan
        jnc     @f
endif   ; if KseVga
if      ChkW32Trident
        call    CheckW32Tseng
endif   ;   ChkW32Trident
@@:
if      not (KseVga or AtiVga)
        stc
endif   ; if not (KseVga or AtiVga)
        ret

if      ChkW32Trident
CheckW32Tseng:
        push    ds
        mov     ax,0c000h
        mov     ds,ax
        mov     bx,0076h
        cmp     ds:[bx],'sT'
        jnz     @f
        add     bx,2
        cmp     ds:[bx],'ne'
        jnz     @f
        or      cs:[KseCard],Page1Fix
@@:
        pop     ds
        stc
        ret

CheckTrident:
        push    ds
        mov     ax,0c000h
        mov     ds,ax
        mov     bx,0065h
        cmp     ds:[bx],'RT'
        jnz     @f
        add     bx,2
        cmp     ds:[bx],'DI'
        jnz     @f
        or      cs:[KseCard],PassHanCdCheck
@@:
        pop     ds
        ret
endif   ;   ChkW32Trident

if      KseVga
extrn   KseGetFontVga:near, KsePutFontVga:near, KseHanOnVga:near
extrn   KseHanOffVga:near, KseCard:byte
CheckKasan:
        mov     dx,258h
        mov     ax,0aaf1h               ; sample data
        out     dx,ax
        mov     ax,002f2h               ; init F2-02
        out     dx,ax
        mov     al,0f1h
        out     dx,al
        inc     dx
        in      al,dx
        cmp     al,0aah                 ; GaSan video card ?
        jz      @f
        jmp     NoneKasan
@@:
        dec     dl
        mov     ax,050f1h               ; init F1-50
        out     dx,ax
        mov     ax,006f3h               ; init F3-06
        out     dx,ax
        mov     ax,0fff5h               ; init F5-FF
        out     dx,ax
        mov     ax,0c9f6h               ; init F6-C9
        out     dx,ax
        mov     ax,0fef7h               ; init F7-FE
        out     dx,ax
        mov     al,0f4h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11110111b            ; release KEY bit(FONT)
        out     dx,al
        dec     dl
        mov     al,0f0h
        out     dx,al
        inc     dx
        in      al,dx
        or      al,00000011b            ; UDC write operation
        out     dx,al
        mov     dl,56h
        mov     al,80h
        out     dx,al                   ; set UDC write ready
        mov     bx,0c9a1h               ; UDC code
        mov     ax,bx
        shl     al,1
        shr     ax,1
        mov     cx,32
        mul     cx
        mov     cx,dx
        mov     dx,250h                 ; font address register 250
        mov     bl,al
        out     dx,al
        inc     dl                      ; font address register 251
        mov     al,ah
        out     dx,al
        inc     dl                      ; font address register 252
        mov     al,cl
        out     dx,al
        mov     dl,54h                  ; font data register 254
        mov     al,55h                  ; sample data
        out     dx,al
        mov     dl,56h
        out     dx,al                   ; write data to UDC RAM
        mov     dl,54h
        xor     al,al
        out     dx,al
        mov     dl,58h
        mov     al,0f0h
        out     dx,al
        inc     dl
        in      al,dx
        and     al,11111110b            ; set font read operation
        out     dx,al
        mov     dl,54h
        in      al,dx                   ; read sample data
        mov     ah,20h
        mov     dl,58h
        mov     al,0f0h
        out     dx,al
        inc     dl
        in      al,dx
        and     al,11111100b
        or      al,ah
        out     dx,al
        or      [KseCard],00000001b
        clc
        jmp     CheckKasanRet
NoneKasan:
        stc
        ret
CheckKasanRet:
        mov     si,offset KseVga23
        mov     di,offset Mode23TextV
        mov     cx,64/2
        rep movsw
        mov     si,offset KseVga23
        mov     di,offset Mode2TextE
        mov     cl,64/2
        rep movsw
        mov     si,offset KseVga7
        mov     di,offset Mode7TextV
        mov     cl,64/2
        rep movsw
        mov     si,offset KseVga7
        mov     di,offset Mode7TextE
        mov     cl,64/2
        rep movsw
if      AltHotKey
        mov     ax,01a00h
        int     10h
        cmp     bl,5
        jnz     @f
        or      [KseCard],MonoMntC
        mov     si,offset KseMda7
        mov     di,offset Mode7TextE
        mov     cl,64/2
        rep movsw
@@:
endif   ;  AltHotKey
        mov     ax,offset KseGetFontVga
        mov     bx,offset KsePutFontVga
        mov     cx,offset KseHanOnVga
        mov     dx,offset KseHanOffVga
        ret
KseVga23        label   byte
        db 50h,18h,10h,00h,10h,00h,03h,00h,02h,063h
        db 61h,52h,53h,23h,57h,06fh,0bfh,01fh,0,04fh,0eh,0fh,0,0,0,0
        db  9ch,00eh,08fh,28h,1fh,96h,0b9h,0a3h,0ffh
        db 0,01h,02h,03h,04h,05h,14h,07h,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh
        db  0Ch,00h,0Fh,0;8h
        db 00h,00h,00h,00h,00h,10h,0Eh,00h,0FFh
KseVga7         label   byte
        db 50h,18h,10h,00h,10h,00h,03h,00h,02h,062h
        db 61h,52h,53h,23h,57h,06Fh,0bfh,01fh,0,04fh,0eh,0fh,0,0,0,0
        db  9ch,00eh,08fh,28h,0fh,96h,0b9h,0a3h,0ffh
        db 0,8,8,8,8,8,8,8,10h,18h,18h,18h,18h,18h,18h,18h
        db  0Eh,0,0Fh,0;8h
        db 00h,00h,00h,00h,00h,10h,0Ah,00h,0FFh
KseMda7         label   byte
        db 50h,18h,10h,00h,10h,00h,03h,00h,02h,0A6h
        db 5Fh,52h,55h,25h,53h,0E3h,0B0h,01fh,0,00Fh,0eh,060h,0,0,0,0
        db  90h,020h,08fh,28h,0Dh,90h,000h,0a3h,0ffh
        db 0,8,8,8,8,8,8,8,10h,18h,18h,18h,18h,18h,18h,18h
        db  0Eh,0,0Fh,0;8h
        db 00h,00h,00h,00h,00h,10h,0Ah,00h,0FFh
endif   ; if KseVga

if      AtiVga
extrn   AtiGetFontVga:near, AtiPutFontVga:near, AtiHanOnVga:near
extrn   AtiHanOffVga:near, KseCard:byte
CheckAti:

        mov     cx,0a1a2h
        mov     dx,3ddh
        mov     ah,ch
        mov     al,10h
        out     dx,ax
        mov     ah,cl
        mov     al,8
        out     dx,ax
        mov     ax,201h
        mov     cl,4
        cmp     ch,0feh                 ; assume FExx
        jnz     @f
        mov     ah,6                    ; set C9xx
        mov     cl,2
@@:
        cmp     ch,0c9h
        jnz     @f
        mov     cl,2
@@:
        out     dx,ax
        mov     al,cl
        out     dx,al
        inc     dx
        xor     bx,bx
        mov     cx,16
@@:
        in      al,dx
        add     bl,al
        adc     bh,0
        inc     di
        loop    @b
        mov     cl,16
@@:
        inc     di
        in      al,dx
        add     bh,al
        loop    @b
        dec     dx
        mov     ax,1
        out     dx,ax
        cmp     bx,8004h
        jnz     NoneAtiVga
        mov     dx,3ddh
        mov     ax,101h
        out     dx,ax
        mov     dx,1ceh
        mov     al,0bfh
        mov     ah,al
        out     dx,al
        inc     dx
        in      al,dx
        or      al,00100000b
        dec     dx
        xchg    al,ah
        out     dx,ax
        mov     dx,1ceh
        mov     al,0bbh
        out     dx,al
        inc     dx
        in      al,dx
        mov     bh,al
        dec     dx
        mov     ax,55bbh
        out     dx,ax
        out     dx,al
        inc     dx
        in      al,dx
        mov     bl,al
        dec     dx
        mov     ax,0aabbh
        out     dx,ax
        out     dx,al
        inc     dx
        in      al,dx
        mov     ah,bl
        dec     dx
        cmp     ax,55aah
        jz      @f
NoneAtiVga:
        stc
        ret
@@:
        mov     al,0bbh                 ;restore register value
        mov     ah,bh
        out     dx,ax
        call    AtiHanOffVga
        mov     si,offset AtiVga23
        mov     di,offset Mode23TextV
        mov     cx,64/2
        rep movsw
        mov     si,offset AtiVga23
        mov     di,offset Mode2TextE
        mov     cl,64/2
        rep movsw
        mov     si,offset AtiVga7
        mov     di,offset Mode7TextV
        mov     cl,64/2
        rep movsw
        mov     si,offset AtiVga7
        mov     di,offset Mode7TextE
        mov     cl,64/2
        rep movsw
        mov     ax,01a00h
        int     10h
        cmp     bl,5
        jnz     @f
        or      [KseCard],MonoMntC
@@:
        mov     ax,offset AtiGetFontVga
        mov     bx,offset AtiPutFontVga
        mov     cx,offset AtiHanOnVga
        mov     dx,offset AtiHanOffVga
        clc
        ret
AtiVga23        label   byte
        db 80,24,16,0,10H,  1,3,0,2,  063H
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,4Fh,0DH,0EH,0,0,0,0
        db  9Ch,0Eh,8Fh,28h,1FH,96h,0B9h,0A3h,0FFh
        db 0,1,2,3,4,5,14H,7,38H,39H,3AH,3BH,3CH,3DH,3EH,3FH
        db  0CH,0,0FH,0;8
        db 0,0,0,0,0,10H,0EH,0,0FFH
AtiVga7         label   byte
        db 80,24,16,0,10H,  1,3,0,2,  062h
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,4Fh,0DH,0EH,0,0,0,0
        db  9Ch,0Eh,8Fh,28h,1FH,96h,0B9h,0A3h,0FFh
        db 0,8,8,8,8,8,8,8,10H,18H,18H,18H,18H,18H,18H,18H
        db  0EH,0,0FH,0;8
        db 0,0,0,0,0,10H,0AH,0,0FFH
endif   ; if AtiVga


;------------------------------------------------------------------------
FontInit:
        mov     ax,offset GetFontFont
        mov     bx,offset PutFontFont
        mov     cx,offset HanOnFont
        mov     dx,offset HanOffFont
        stc
        ret


;------------------------------------------------------------------------
;   << GetConfigFile >>
; FUNCTION = "HECON.CFG" file о شǴ  ġ
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; GetConfigFile(-/-)
;       {
;       /* open 'HECON.CFG' file */
;       /* read file to end of file */
;       /* copy data */
;       }
;
GetConfigFile:
        push    ds
        call    SetPreConfig
        mov     ah,19h
        int     21h
        cmp     al,2
        jbe     @f
        mov     al,2
@@:
        add     al,'A'
        mov     si,offset CfgFilename
        mov     [si],al                 ; set drive latter
if      not GetSwitch
        mov     ax,3d00h
        mov     dx,offset CfgFilename
        int     21h
        jc      GetConfigFileEnd
        mov     bx,ax
        mov     ah,3fh
        mov     cx,100
        mov     dx,offset EndOfInit
        int     21h
        jc      GetConfigFileClose
        mov     si,dx
        mov     di,offset CfgFilename
        add     di,3
        mov     cx,9
        rep cmpsb
        jnz     GetConfigFileClose
        mov     si,dx
        add     si,sFont
        mov     di,offset FontFileName
        mov     cx,StringLng
        rep movsb
        mov     si,dx
        mov     al,[si].sCodeType
if      hdos60
        and     al,WSung or Chab or WSung7 or HangeulMode
        and     [CodeStat],not (WSung or Chab or WSung7 or HangeulMode)
else    ;hdos60
        and     al,WSung or Chab or WSung7 or HangeulMode or ChabLoad
        and     [CodeStat],not (WSung or Chab or WSung7 or HangeulMode or ChabLoad)
endif   ;   hdos60
        or      [CodeStat],al
        mov     al,[si].sMemory
        and     al,HiMem or EmsMem or ExtMem or RealMem
        and     [MemStat],not (HiMem or EmsMem or ExtMem or RealMem)
        or      [MemStat],al
        mov     al,[si].sKbdType
        and     al,SetKbd101
        and     [KbdType],not SetKbd101
        or      [KbdType],al
        mov     al,[si].sHeKey
        or      al,al
        jz      @f
        or      [KbStat],UserDefineKey
        mov     [HeKey],al
@@:
        mov     al,[si].sHjKey
        or      al,al
        jz      @f
        or      [KbStat],UserDefineKey
        mov     [HjKey],al
@@:
        mov     al,[si].sPrinterType
        mov     [Printer],al
GetConfigFileClose:
        mov     ah,3eh
        int     21h
else
if      ComFile
        mov     si,81h
else
        lds     si,[PtrSav]
        lds     si,[si].InitBpb         ; ds:si points to CONFIG.SYS
endif   ; ComFile
DBGNum 1
        mov     di,offset FontFileName
@gcfLoop:
        lodsb
DBGNum ax
        cmp     al,CR                   ; terminate with CR or LF
        je      GetConfigFileEndj
        cmp     al,LF
        je      GetConfigFileEndj
        cmp     al,9
        je      GetConfigFileEndj
        Cmp     AL,"/"                  ; MS-DOS 5.00
        jnz     @gcfLoop

        lodsb
        or      al, 20h
        cmp     al, 'f'                  ; file spec?
        jne     @f
        call    @fontFileOption
        jmp     @gcfLoop
@@:
        cmp     al, 'k'
        jne     @f
        call    ParsKeyboard
        jmp     @gcfLoop
@@:
if      not ChkW32Trident
        cmp     al, 'e'
        jne     @f
        or      [KseCard],PassHanCdCheck
        jmp     @gcfLoop
@@:
        cmp     al, 'p'
        jne     @f
        or      [KseCard],Page1Fix
        jmp     @gcfLoop
@@:
endif   ;   not ChkW32Trident
        call    ParsSkipOptions
        jmp     @gcfLoop
GetConfigFileEndj:
        jmp     GetConfigFileEnd

@fontFileOption:
        lodsb
        cmp     al,CR                   ; ill-terminate with CR or LF
        je      GetConfigFileEnd
        cmp     al,LF
        je      GetConfigFileEnd
        cmp     al," "                  ; skip delimiter " ", tab
        je      @b
        cmp     al,":"                  ; "/F:"?
        jne     GetConfigFileEnd
GetParmsFileSpec:
        lodsb
        cmp     al,CR                   ; ill-terminate with CR or LF
        je      GetConfigFileEnd
        cmp     al,LF
        je      GetConfigFileEnd
        cmp     al," "                  ; skip delimiter " ", tab
        je      GetParmsFileSpec
        cmp     al,9
        je      GetConfigFileEnd
;       je      GetParmsFileSpec
        mov     ah,al
        lodsb
        xchg    ah,al
        cmp     ah,":"                  ; is drive name given?
        je      HaveDrvName             ; jump if so
;       inc     di
;       inc     di
HaveDrvName:
        stosw
@@:
        lodsb
        cmp     al,CR                   ; terminate with CR or LF
        je      ParseBpbRetJ
        cmp     al,LF
        je      ParseBpbRetJ
        cmp     al," "                  ; skip delimiter " ", tab, ","
        je      ParseBpbRetJ
        cmp     al,9
        je      ParseBpbRetJ
        stosb
        jmp     @b
ParseBpbRetJ:
        sub     ax,ax
        stosw
        ret
endif
GetConfigFileEnd:
        test    [KbStat],UserDefineKey
        jnz     @f
        test    [KbdType],SetKbd101
        jz      @f
        mov     [HeKey],Def101HeKey
        mov     [HjKey],Def101HjKey
@@:
        pop     ds
        ret
CfgFilename     db      'C:\HECON.CFG',0

SetPreConfig:
        and     [CodeStat],not (WSung or Chab or WSung7 or HangeulMode or ChabLoad)
        or      [CodeStat],WSung or HangeulMode or ChabLoad
        and     [MemStat],not (HiMem or EmsMem or ExtMem or RealMem)
        and     [KbdType],not SetKbd101
        and     [Printer],11111000b
        ret



;------------------------------------------------------------------------
extrn   EscCode2Tbl:word, EscCode3Tbl:word, EscCodeNTbl:word, EscCode4Tbl:word
extrn   EscCode2Addr:word, EscCode3Addr:word, EscCodeNAddr:word, EscCode4Addr:word
InstPrinter:
        test    [CodeStat],ChabLoad
        jz      InstPrinterEnd
        mov     al,[Printer]
        xor     ah,ah
        mov     si,ax
        shl     si,1
        mov     ax,[si].EscCode2Tbl
        mov     [EscCode2Addr],ax
        mov     ax,[si].EscCode3Tbl
        mov     [EscCode3Addr],ax
        mov     ax,[si].EscCodeNTbl
        mov     [EscCodeNAddr],ax
        mov     ax,[si].EscCode4Tbl
        mov     [EscCode4Addr],ax
InstPrinterEnd:
        ret


;------------------------------------------------------------------------
;   << SetVideoParms >>
; FUNCTION = video parm ġ
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; SetVideoParms(-/-)
;       {
;       }
;
SetVideoParms:
        mov     al,[Card1st]
        call    SetVdParmsDo
        test    [Card1st],DualMnt
        jz      @f
        mov     al,[Card2nd]
        call    SetVdParmsDo
@@:
        ret
SetVdParmsDo:
        mov     dl,al
        and     al,CardType
        xor     ah,ah
        mov     si,ax
        jmp     [si+SetVdParmsTbl]
SetVdParmsTbl   label   word
                dw      offset MParms
                dw      offset CParms
                dw      offset EParms
                dw      offset EParms
                dw      offset VParms
                dw      offset VParms
MParms:
        test    dl,HanCard
        jnz     @f
        mov     si,offset Mda70H
        mov     di,offset Mda07H
        mov     cx,10/2
        rep movsw
        mov     ax,0e0dh
        stosw
        inc     si
        inc     si
        movsw
        movsw
        mov     di,offset RegSize
        add     di,6
        mov     ax,8000h
        stosw
        mov     di,offset CrtcSet
        add     di,7
        mov     al,0ah
        test    dl,DualMnt
        jnz     MgaTextEmu
        mov     al,8ah
MgaTextEmu:
        stosb
@@:
        ret
CParms:
        test    dl,HanCard
        jnz     @f
        mov     si,offset Cga40H
        mov     di,offset Cga23H
        mov     cx,10/2
        rep movsw
        mov     ax,706h
        stosw
        inc     si
        inc     si
        movsw
        movsw
        mov     di,offset RegSize
        add     di,4
        mov     ax,8000h
        stosw
        mov     di,offset CrtcSet
        add     di,6
        mov     al,1eh
        stosb
@@:
        ret
EParms:
        call    InstallVdParmsPtr
        xor     ch,ch
        mov     si,offset Mode7Ega
        mov     bx,offset Mode3Ega
        test    dl,HanCard
        jz      @f
        mov     si,offset Mode7TextE
        mov     bx,offset Mode2TextE
@@:
        mov     di,offset Mode7
        mov     cl,64/2
        rep movsw
        mov     si,bx
        mov     di,offset Mode2E
        mov     cl,64/2
        rep movsw
        test    dl,DualMnt
        jz      @f
        mov     di,offset Mode7Ega
        mov     [di].cMap,9
        mov     di,offset Mode3Ega
        mov     [di].cMap,0dh
        test    dl,HanCard
        jnz     @f
        mov     di,offset Mode7
        mov     [di].cMap,9
        mov     di,offset Mode2E
        mov     [di].cMap,0dh
@@:
        mov     si,offset Mode2E
        mov     di,offset Mode3E
        mov     cl,64/2
        rep movsw
        ret
VParms:
        call    InstallVdParmsPtr
        xor     ch,ch

IFDEF _X86_             ; On ALPHA, doesn't have full screen mode
        mov     si,offset Mode7TextV
        mov     bx,offset Mode23TextV
        test    dl,HanCard
        jnz     @f

                ;
                ; Hangul Video card is not found.
                ; HBIOS should emulate Hangul Video card for display Hangul character.
                ; We use graphic video mode.
                ;
                mov     si,offset Mode07V
                mov     bx,offset Mode3V

                push    es
                push    di
                les     di,dword ptr cs:[vdm_info.windowed_add]
                mov     al,es:[di]
                pop     es
                pop     di

                cmp     al,0        ; windowed mode ?
                                    ; 0 = windowed, 1 = full screen
                jne     @f

ENDIF   ; _X86_
                        ;
                        ; Windowed mode doesn't need for set graphics video mode.
                        ; Becase console window can display Hangul character without HBIOS.
                        ;

                        mov     si,offset Mode7TextV
                        mov     bx,offset Mode23TextV

@@:
        mov     di,offset Mode07
        mov     cl,64/2
        rep movsw
        mov     si,bx
        mov     di,offset Mode23
        mov     cl,64/2
        rep movsw
        test    dl,DualMnt
        jz      @f
        mov     di,offset Mode07V
        mov     [di].cMap,9
        mov     di,offset Mode3V
        mov     [di].cMap,0dh
        test    dl,DualMnt
        jnz     @f
        mov     di,offset Mode07
        mov     [di].cMap,9
        mov     di,offset Mode23
        mov     [di].cMap,0dh
@@:
        ret
InstallVdParmsPtr:
        push    es
        push    ds
        xor     ax,ax
        mov     ds,ax
ASSUME  DS:DATA
        les     di,[rSavePtr]
        mov     word ptr cs:[OldSavePtr],di
        mov     word ptr cs:[OldSavePtr+2],es
        mov     word ptr [rSavePtr],offset HanSavePtr
        mov     word ptr [rSavePtr+2],cs
        mov     si,es
        mov     ds,si
        mov     si,di
        mov     di,cs
        mov     es,di
        mov     di,offset HanSavePtr
        mov     cx,7*2
        rep     movsw
        mov     word ptr cs:[HanSavePtr],offset VideoParmsTbl
        mov     word ptr cs:[HanSavePtr+2],cs
        pop     ds
        pop     es
ASSUME  DS:CODE
        push    ds
        lds     si,[OldSavePtr]
        lds     si,[si]
        mov     di,offset VideoParmsTbl
        test    cs:[Card1st],00001000b
        jnz     @f
        mov     cx,64*23/2
        rep movsw
        pop     ds
        ret
@@:
        mov     cx,64*8/2
        rep movsw
        add     si,64*3
        add     di,64*3
        mov     cx,64*18/2
        rep movsw
        pop     ds
        ret
;------------------------------------------------------------------------
; text VGA mode 7
Mode7TextV      label   byte
        db 80,24,16,0,10H,  1,3,0,2,  062h
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,4Fh,0DH,0EH,0,0,0,0
        db  9Ch,0Eh,8Fh,28h,1FH,96h,0B9h,0A3h,0FFh
        db 0,8,8,8,8,8,8,8,10H,18H,18H,18H,18H,18H,18H,18H
        db  0EH,0,0FH,8
        db 0,0,0,0,0,10H,0AH,0,0FFH

Mode23TextV     label   byte
        db 80,24,16,0,10H,  1,3,0,2,  063H
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,4Fh,0DH,0EH,0,0,0,0
        db  9Ch,0Eh,8Fh,28h,1FH,96h,0B9h,0A3h,0FFh
        db 0,1,2,3,4,5,14H,7,38H,39H,3AH,3BH,3CH,3DH,3EH,3FH
        db  0CH,0,0FH,8
        db 0,0,0,0,0,10H,0EH,0,0FFH

; text EGA mode 7
Mode7TextE      label   byte
        db 80,24,16,0,10h,  1,3,0,3,  0A6h
        db 5Bh,4Fh,53h,37h,52h,00h,09Fh,1Fh,0,0,0DH,0EH,0,0,0,0 ; crtc
        db  90h,2Bh,8Fh,28h,0FH,95h,1Dh,0E3h,0FFh               ; crtc
        db 0,8,8,8,8,8,8,8,10h,18h,18h,18h,18h,18h,18h,18h
        db  0EH,0,0FH,8
        db 0,0,0,0,0,10H,0Ah,0,0FFh

Mode2TextE      label   byte
        db 80,24,16,0,10h,  1,3,0,3,  0A7h
        db 5Bh,4Fh,53h,37h,52h,00h,09Fh,1Fh,0,0,0DH,0EH,0,0,0,0 ; crtc
        db  90h,2Bh,8Fh,28h,0FH,95h,1Dh,0E3h,0FFh               ; crtc
        db 0,1,2,3,4,5,14H,7,38H,39H,3AH,3BH,3CH,3DH,3EH,3FH
        db  0CH,0,0FH,8
        db 0,0,0,0,0,10H,0Eh,0,0FFh


;------------------------------------------------------------------------
;  << CalcEndAddr >>
; FUNCTION = calculate end of program
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; CalcEndAddr(-/-)
;       {
;       [EndSegment] = CS;
;       [EndOffset] = ChgCode;
;       if ([CodeStat] == ChabLoad), return;
;       [EndOffset] = GenFont;
;       if (([Card1st] < EgaCardM) || ([Card2nd] < EgaCardM))
;               [EndOffset] = VgaService;
;       }
;
CalcEndAddr:
        mov     [EndSegment],cs
        mov     [EndOffset],offset GenFont      ; max size
        test    [CodeStat],ChabLoad
        jnz     @f
        mov     [EndOffset],offset ChgCode      ; W/O code conversion & printer
        mov     al,[Card1st]
        or      al,[Card2nd]
        test    al,00001100b
        jnz     @f
        mov     [EndOffset],offset VgaService   ; W/O VGA service
@@:
        ret


;------------------------------------------------------------------------
;  << SetPatGen >>
; FUNCTION = install pattern generator
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; SetPatGen(-/-)
;       {
;       if ([Card1st != FontCard or HanCard) && ([Card1st != FontCard or HanCard)
;               {
;               [Ks2ChAddr] = Ks2Ch;
;               DI = [EndOffset];
;               [GetHan1st] = DI;
;               [GetHan2nd] = DI;
;               SI = GenFont;
;               CX = GenFontLng;
;               /* rep movsb */
;               [EndOffset] = DI;
;               }
;       }
;
extrn   Ks2Ch:near, Ks2ChAddr:word
SetPatGen:
        mov     di,[EndOffset]
        test    [Card1st],FontCard or HanCard
        jnz     @f
        test    [Card2nd],FontCard or HanCard
        jnz     @f
        mov     [GetHan1st],di
        mov     [GetHan2nd],di
        jmp     short SetPatGenDo
@@:
        test    [CodeStat],ChabLoad
        jz      @f
SetPatGenDo:
        or      [CodeStat],InstPatGen
        mov     [Ks2ChAddr],offset Ks2Ch
        mov     si,offset GenFont
        mov     [PatGenAddr],di
        mov     cx,offset CharTbl
        sub     cx,si
        add     cx,di
        mov     [HanPatternPtr],cx
        mov     cx,GenFontLng
        rep movsb
        mov     [EndOffset],di
@@:
        ret


;------------------------------------------------------------------------
;   << SetCodeBuffer >>
; FUNCTION = code buffer Ȯ
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; SetCodeBuffer(-/-)
;       {
;       [CodeBuf2Addr] = [EndOffset];
;       [CodeBuf2Addr+2] = CS;
;       switch ([Card1st])
;               {
;               case MgaCard:
;                       AX = 80*25;
;                       return;
;               case CgaCard:
;                       AX = 80*25;
;                       return;
;               case EgaCardM:
;                       AX = 80*25;
;                       return;
;               case EgaCardC:
;                       AX = 80*25;
;                       return;
;               case McgaCard:
;                       AX = 80*30;
;                       return;
;               case VgaCard:
;                       AX = 80*05;
;               }
;       switch ([Card2nd])
;               {
;               case MgaCard:
;                       AX = 80*25;
;                       return;
;               case CgaCard:
;                       AX = 80*25;
;                       return;
;               case EgaCardM:
;                       AX = 80*25;
;                       return;
;               case EgaCardC:
;                       AX = 80*25;
;                       return;
;               case McgaCard:
;                       AX = 80*30;
;                       return;
;               case VgaCard:
;                       AX = 80*30;
;               }
;       [EndOffset] = [EndOffset] + AX;
;       }
;
SetCodeBuffer:
        mov     ax,[EndOffset]
        mov     word ptr [CodeBuf2Addr],ax
        mov     word ptr [CodeBuf2Addr+2],cs
        mov     bl,[Card1st]
        and     bl,CardType
        mov     bh,[Card2nd]
        and     bh,CardType
        cmp     bl,bh
        jae     @f
        mov     bl,bh
@@:
        xor     bh,bh
        mov     ax,[bx+BufferSizeTbl]
        add     [EndOffset],ax
        mov     [CodeBufSize],ax
        ret
BufferSizeTbl   label   word
                dw      80*25*2         ; MGA card
                dw      80*25*2         ; CGA card
                dw      80*25*2         ; EGA mono card
                dw      80*25*2         ; EGA color card
                dw      80*30*2         ; MCGA card
                dw      80*30*2         ; VGA card


;------------------------------------------------------------------------
;   << CheckMemory >>
; CheckMemory(-/-)
;       {
;       }
;
CheckMemory:
        mov     dx,offset FontFileName
        mov     ax,3d00h                ; find first filename
        int     21h
        jc      CheckMemErr
        mov     bx,ax
        mov     ah,3eh                  ; close file
        int     21h
        test    [Card1st],HanCard
        jnz     CheckMemErr
        test    [Card2nd],HanCard
        jnz     CheckMemErr
        mov     ax,188+6                ; 32*94*64+94*2*32 = 192512+6016 Byte
        test    [Card1st],FontCard
        jz      @f
        mov     ax,6                    ; 94*2*32 = 6016 Byte
@@:
        mov     [MemSize],ax
        test    [MemStat],RealMem or ExtMem or EmsMem or HiMem
        jz      AutoMemory
        test    [MemStat],EmsMem
        jz      @f
        call    CheckEms
        jc      CheckMemErr
        jmp     short CheckMemEnd
@@:
        test    [MemStat],HiMem
        jz      @f
        call    CheckHimem
        jc      CheckMemErr
        jmp     short CheckMemEnd
@@:
        test    [MemStat],ExtMem
        jz      @f
        call    CheckExt
        jc      CheckMemErr
        jmp     short CheckMemEnd
@@:
        test    [MemStat],RealMem
        jz      CheckMemEnd
        call    CheckReal
        jc      CheckMemErr
CheckMemEnd:
        ret
CheckMemErr:
        and     [MemStat],not (RealMem or ExtMem or EmsMem or HiMem)
        ret
AutoMemory:
        call    CheckEms
        jc      @f
        or      [MemStat],EmsMem
        jmp     short AutoMemEnd
@@:
        call    CheckHimem
        jc      @f
        or      [MemStat],HiMem
        jmp     short AutoMemEnd
@@:
        call    CheckExt
        jc      @f
        or      [MemStat],ExtMem
        jmp     short AutoMemEnd
@@:
        call    CheckReal
        jc      CheckMemErr
        or      [MemStat],RealMem
AutoMemEnd:
        ret


CheckEms:
        push    es
        mov     ax,3567h
        int     21h
        mov     di,0ah
        mov     si,offset EmmDrvName
        mov     cx,EmmDrvNameLng
        repe cmpsb
        pop     es
        jnz     @f
        mov     ah,46h                  ; get version
        int     67h
        or      ah,ah
        jnz     @f
        cmp     al,30h                  ; version 3.0
        jb      @f
        mov     ah,41h                  ; get segment address
        int     67h
        or      ah,ah
        jnz     @f
        mov     [EmsSeg],bx
        mov     ah,42h                  ; get page number
        int     67h
        or      ah,ah
        jnz     @f
        mov     ax,16                   ; kbyte units
        mul     bx
        cmp     [MemSize],ax
        ja      @f
        mov     [MaxMemSize],ax
        clc
        ret
@@:
        stc
        ret
EmmDrvName      db      'EMMXXXX0'
EmmDrvNameLng   =       $-EmmDrvName
CheckHimem:
        mov     ax,4300h
        int     2fh
        cmp     al,80h
        jnz     @f
        push    es
        mov     ax,4310h
        int     2fh
        mov     ax,es
        pop     es
        mov     word ptr [OldInt15],bx
        mov     word ptr [OldInt15+2],ax
        xor     ah,ah
        call    [OldInt15]
        cmp     dl,1
        jnz     @f
        cmp     ax,200h                 ; V2.00
        jb      @f
        mov     ah,8
        call    [OldInt15]
        or      bl,bl
        jnz     @f
        cmp     [MemSize],ax
        ja      @f
        mov     [MaxMemSize],ax
        clc
        ret
@@:
        stc
        ret
CheckExt:
        test    [MachineType],AtMachine
        jz      @f
        mov     ah,88h
        int     15h
        cmp     [MemSize],ax
        ja      @f
        mov     [MaxMemSize],ax
        clc
        ret
@@:
        stc
        ret
CheckReal:
        int     12h
        mov     bx,cs
        mov     cl,6
        shr     bx,cl
        sub     ax,bx
        sub     ax,256                  ; add 256 kbyte
        cmp     [MemSize],ax
        ja      @f
        mov     [MaxMemSize],ax
        clc
        ret
@@:
        stc
        ret


;------------------------------------------------------------------------
;   << SetVector >>
; FUNCTION = initialize vector table
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; SetVector(-/-)
;       {
;       Save ES;
;       ES = 0;
;       [OldKbInt] = ES:[rKbInt];
;       [OldKbInt+2] = ES:[rKbInt+2];
;       ES:[rKbInt] = Int9;
;       ES:[rKbInt+2] = CS;
;       [OldKbioInt] = ES:[rKbioInt];
;       [OldKbioInt+2] = ES:[rKbioInt+2];
;       ES:[rKbioInt] = Int16;
;       ES:[rKbioInt+2] = CS;
;       [OldRtcInt] = ES:[rRtcInt];
;       [OldRtcInt+2] = ES:[rRtcInt+2];
;       ES:[rRtcInt] = Int8;
;       ES:[rRtcInt+2] = CS;
;       [OldVideo] = ES:[rVideoInt];
;       [OldVideo+2] = ES:[rVideoInt+2];
;       ES:[rVideoInt] = Int10;
;       ES:[rVideoInt+2] = CS;
;       [OldVdParms] = ES:[rVdParm];
;       [OldVdParms+2] = ES:[rVdParm+2];
;       ES:[rVdParm] = VideoParms;
;       ES:[rVdParm+2] = CS;
;       if ([CodeStat] == ChabLoad)
;               {
;               [OldInt17] = ES:[rPrinter];
;               [OldInt17+2] = ES:[rPrinter+2];
;               ES:[rPrinter] = Int17;
;               ES:[rPrinter+2] = CS;
;               }
;       Restore ES;
;       }
;
SetVector:
        cli
        push    es
        xor     ax,ax
        mov     es,ax
        mov     ax,word ptr es:[rKbInt]
        mov     bx,word ptr es:[rKbInt+2]
        mov     word ptr [OldKbInt],ax
        mov     word ptr [OldKbInt+2],bx
        mov     word ptr es:[rKbInt],offset Int9
        mov     word ptr es:[rKbInt+2],cs
        mov     ax,word ptr es:[rKbioInt]
        mov     bx,word ptr es:[rKbioInt+2]
        mov     word ptr [OldKbioInt],ax
        mov     word ptr [OldKbioInt+2],bx
        mov     word ptr es:[rKbioInt],offset Int16
        mov     word ptr es:[rKbioInt+2],cs
        mov     ax,word ptr es:[rRtcInt]
        mov     bx,word ptr es:[rRtcInt+2]
        mov     word ptr [OldRtcInt],ax
        mov     word ptr [OldRtcInt+2],bx
        mov     word ptr es:[rRtcInt],offset Int8
        mov     word ptr es:[rRtcInt+2],cs
if      Hwin31Sw
        mov     ax,word ptr es:[rInt2f]
        mov     bx,word ptr es:[rInt2f+2]
        mov     word ptr [OldInt2f],ax
        mov     word ptr [OldInt2f+2],bx
        mov     word ptr es:[rInt2f],offset Int2f
        mov     word ptr es:[rInt2f+2],cs
endif   ;   Hwin31Sw
        mov     ax,word ptr es:[rVideoInt]
        mov     bx,word ptr es:[rVideoInt+2]
        mov     word ptr [OldVideo],ax
        mov     word ptr [OldVideo+2],bx
        mov     word ptr es:[rVideoInt],offset Int10
        mov     word ptr es:[rVideoInt+2],cs
        mov     ax,word ptr es:[rVdParm]
        mov     bx,word ptr es:[rVdParm+2]
        mov     word ptr [OldVdParms],ax
        mov     word ptr [OldVdParms+2],bx
        mov     word ptr es:[rVdParm],offset VideoParms
        mov     word ptr es:[rVdParm+2],cs
        test    [CodeStat],ChabLoad
        jz      @f
        mov     ax,word ptr es:[rPrinter]
        mov     bx,word ptr es:[rPrinter+2]
        mov     word ptr [OldInt17],ax
        mov     word ptr [OldInt17+2],bx
        mov     word ptr es:[rPrinter],offset Int17
        mov     word ptr es:[rPrinter+2],cs
@@:
        pop     es
        sti
        ret


;------------------------------------------------------------------------
;   << InstallFontFile >>
; FUNCTION =  ȭ EMS/Ext./HIMEM memory ġ
; INPUT   : none
; OUTPUT  : none
; PROTECT : SS, SP, DS, ES
;
; InstallFontFile(-/-)
;       {
;       }
;
InstallFontFile:
        test    [MemStat],HiMem
        jz      @f
        mov     ah,9
        mov     dx,[MemSize]
        call    [OldInt15]
        dec     ax
        jnz     HimemErr
        mov     [EmsHandle],dx
        mov     ah,0ch
        call    [OldInt15]
        dec     ax
        jnz     HimemErr
        mov     ax,bx
        call    InstallFontHi
        jmp     short InstallFileEnd
HimemErr:
        or      [ErrStat],FontLoadErr
        and     [MemStat],not HiMem
        jmp     short InstallFileEnd
@@:
        test    [MemStat],ExtMem
        jz      @f
        call    InstallFontExt
        jmp     short InstallFileEnd
@@:
        test    [MemStat],EmsMem
        jz      @f
        call    InstallFontEms
        jmp     short InstallFileEnd
@@:
        test    [MemStat],RealMem
        jz      InstallFileEnd
        call    InstallFontReal
InstallFileEnd:
        ret
InstallFontExt:
        mov     dx,[MaxMemSize]
        sub     dx,[MemSize]
        mov     [MaxMemSize],dx
        mov     ax,1024
        mul     dx
        add     dl,10h                  ; 1MByte boundary
InstallFontHi:
        mov     bl,dl
        test    [MemStat],ExtMem
        jz      @f
        push    ds
        push    es
ASSUME  DS:DATA
        xor     dx,dx
        mov     ds,dx
        les     di,[rCasetInt]
        mov     word ptr cs:[OldInt15],di
        mov     word ptr cs:[OldInt15+2],es
        mov     word ptr [rCasetInt],offset Int15Srv
        mov     word ptr [rCasetInt+2],cs
        pop     es
        pop     ds
ASSUME  DS:CODE
@@:
        test    [HjStat],HjLoaded
        jnz     @f
        mov     [HanAddr],ax
        mov     [HanAddrH],bl
        mov     [GetHan1st],offset GetFontHanExt
        mov     [GetHan2nd],offset GetFontHanExt
        mov     dx,offset FontFileName
        call    SaveFontFile
        or      [HjStat],HjLoaded
        add     ax,61440                ; 32*94*64 = 192512
        adc     bl,2
@@:
        mov     [UdcAddr],ax            ; 94*2*32 = 6016
        mov     [UdcAddrH],bl
        mov     [GetUdc1st],offset GetFontUdcExt
        mov     [GetUdc2nd],offset GetFontUdcExt
        mov     [PutUdc1st],offset PutFontUdcExt
        mov     [PutUdc2nd],offset PutFontUdcExt
        or      [HjStat],UdcArea
        ret
SaveFontFile:
        push    ax
        push    bx
        push    cx
        mov     si,offset GdtDataTbl
        mov     [si].GdtDL,ax
        mov     [si].GdtDH,bl
        mov     ax,3d00h
        int     21h
        jc      SaveFontFileErr
        mov     bx,ax                   ; copy handle
        mov     ax,4200h
        xor     cx,cx
        mov     dx,30h
        int     21h                     ; set absolute file pointer
        push    ds
        mov     ax,cs
        add     ah,10h                  ; next segment
        mov     ds,ax
        mov     cl,4
        shl     ax,cl
        mov     cs:[si].GdtSL,ax
        mov     ax,ds
        shr     ah,cl
        mov     cs:[si].GdtSH,ah
@@:
        xor     dx,dx
        mov     cx,8000h
        mov     ah,3fh
        int     21h
        jc      SaveFontFileErr2
        mov     cx,ax
        jcxz    @f
        inc     cx
        shr     cx,1                    ; word count
        push    cx
        mov     ah,87h
        int     15h
        pop     cx
        shl     cx,1
        add     cs:[si].GdtDL,cx
        adc     cs:[si].GdtDH,0
        jmp     short @b
SaveFontFileErr2:
        or      cs:[ErrStat],FontLoadErr
@@:
        pop     ds
        mov     ah,3eh
        int     21h                     ; close handle
        jmp     short @f
SaveFontFileErr:
        or      [ErrStat],FontLoadErr
@@:
        pop     cx
        pop     bx
        pop     ax
        ret
InstallFontEms:
        mov     bx,[MemSize]
        mov     cl,4
        shr     bx,cl
        inc     bx
        mov     ah,43h                  ; allocate page
        int     67h
        or      ah,ah
        jz      @f
        mov     ah,45h                  ; close handle
        int     67h
        ret
@@:
        mov     [EmsHandle],dx
        xor     bl,bl
        xor     ax,ax
        test    [HjStat],HjLoaded
        jnz     @f
        mov     [HanAddr],ax
        mov     [HanAddrH],bl
        mov     [GetHan1st],offset GetFontHanEms
        mov     [GetHan2nd],offset GetFontHanEms
        mov     si,offset FontFileName
        call    SaveEmsFontFile
        or      [HjStat],HjLoaded
        add     ax,12288                ; 32*94*64 = 192512
        add     bl,11
        cmp     ax,16384
        jb      @f
        sub     ax,16384
        inc     bl
@@:
        mov     [UdcAddr],ax            ; 94*2*32 = 6016
        mov     [UdcAddrH],bl
        mov     [GetUdc1st],offset GetFontUdcEms
        mov     [GetUdc2nd],offset GetFontUdcEms
        mov     [PutUdc1st],offset PutFontUdcEms
        mov     [PutUdc2nd],offset PutFontUdcEms
        or      [HjStat],UdcArea
        ret
SaveEmsFontFile:
        push    ax
        push    bx
        push    cx
        push    es
        mov     es,[EmsSeg]
        mov     di,ax
        mov     ax,4400h                ; set page
        xor     bh,bh
        mov     [CurEmsPage],bx
        mov     dx,[EmsHandle]
        int     67h
        or      ah,ah
        jnz     SaveEmsFontFileErr
        mov     dx,si
        mov     ax,3d00h
        int     21h
        jc      SaveEmsFontFileErr
        mov     bx,ax                   ; BX = file handle
        mov     ax,4200h
        xor     cx,cx
        mov     dx,30h
        int     21h                     ; set absolute file pointer
        push    ds
        mov     ax,cs
        add     ah,10h                  ; next segment
        mov     ds,ax
EmsSaveLoop:
        xor     dx,dx
        mov     cx,8000h
        mov     ah,3fh
        int     21h
        jc      SaveEmsFontFileErr2
        mov     cx,ax
        jcxz    SaveEmsFontFileEnd2
        xor     si,si
@@:
        cmp     di,16384
        jae     IncEmsPage
        movsb
        dec     cx
        jz      EmsSaveLoop
        jmp     short @b
IncEmsPage:
        push    bx
        mov     ax,4400h                ; set page
        inc     cs:[CurEmsPage]
        mov     bx,cs:[CurEmsPage]
        mov     dx,cs:[EmsHandle]
        int     67h
        pop     bx
        or      ah,ah
        jnz     SaveEmsFontFileErr2
        xor     di,di
        jmp     short @b
SaveEmsFontFileErr2:
        or      cs:[ErrStat],FontLoadErr
SaveEmsFontFileEnd2:
        pop     ds
        mov     ah,3eh
        int     21h                     ; close handle
        jmp     short @f
SaveEmsFontFileErr:
        or      [ErrStat],FontLoadErr
@@:
        pop     es
        pop     cx
        pop     bx
        pop     ax
        ret
InstallFontReal:
        test    [HjStat],HjLoaded
        jnz     @f
        mov     [GetHan1st],offset GetFontHanReal
        mov     [GetHan2nd],offset GetFontHanReal
@@:
        mov     [GetUdc1st],offset GetFontUdcReal
        mov     [GetUdc2nd],offset GetFontUdcReal
        mov     [PutUdc1st],offset PutFontUdcReal
        mov     [PutUdc2nd],offset PutFontUdcReal
        or      [HjStat],UdcArea
        ret

public  EndOfInit                       ; for .MAP file
EndOfInit       label   byte

CODE    ENDS
        END

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\equ.inc ===
.xlist
;========================================================================;
;                                                                        ;
;                        GLOBAL EQUATION                                 ;
;                                                                        ;
;========================================================================;

if WINNT
Version         equ     '5.0'
else
Version         equ     '1.20a.'
endif

false           =       0
true            =       not false
hWin31Sw        =       true
GetSwitch       =       true
Kbd101On        =       true
ChkW32Trident   =       true            ; card check(true), switch(false)

HotKey          =       true            ; support(true)
AltHotKey       =       true            ; support(true)
VirtualKey      =       false           ; 84 kbd

KseVga          =       true
AtiVga          =       true

if1
%OUT    *****************************************************************
if      Debug
%OUT    DEBUGGING mode
endif
if      ComFile
%OUT    .COM file type
else
%OUT    .SYS file type
endif
if      HotKey
%OUT    Hot_key support
endif
%OUT    *****************************************************************
endif


;------------------------------------------------------------------------
DATA            SEGMENT AT      0
                ORG     8*4
rRtcInt         dd      ?               ; INT 8
                ORG     9*4
rKbInt          dd      ?               ; INT 9
                ORG     10h*4
rVideoInt       dd      ?               ; INT 10
                ORG     15h*4
rCasetInt       dd      ?               ; INT 15
                ORG     16h*4
rKbioInt        dd      ?               ; INT 16
                ORG     17h*4
rPrinter        dd      ?               ; INT 17
                ORG     1dh*4
rVdParm         dd      ?               ; INT 1D
                ORG     2fh*4
rInt2f          dd      ?               ; INT 2F
                ORG     410h
rEquip          db      ?
                ORG     449h
rCrtMode        db      ?               ; current CRT mode
rCrtCols        dw      ?               ; number of columns on screen
rCrtLen         dw      ?               ; length of regen in bytes
rCrtStart       dw      ?               ; starting address in regen buffer
rCurPos         dw      8 dup (?)       ; cursor for each of up to 8 pages
rCurType        dw      ?               ; current cursor mode setting
rCurPage        db      ?               ; current page being displayed
rAddr6845       dw      ?               ; base address for active display card
rCrtModeSet     db      ?               ; current setting of the 3x8 register
rCrtPallette    db      ?               ; current pallette setting color card
                ORG     46ch
rTimerLow       dw      ?               ; low word of timer count
rTimerHigh      dw      ?               ; high word of timer count
rTimerOverflow  db      ?               ; timer has rolled over since last read
                ORG     484h
rRows           db      ?               ; rows on the active screen (less 1)
rPoints         dw      ?               ; bytes per character
rInfo           db      ?               ; mode options
rInfo3          db      ?               ; feature bit switches
rMiscFlags      db      ?               ; miscellaneous flags
rDCC            db      ?               ; display config comb code table index
                ORG     4a8h
rSavePtr        dd      ?               ; pointer to E/VGA parms control block
DATA            ENDS

KbSeg           SEGMENT AT      40h
                ORG     17h
rKbFlag         db      ?
rKbFlag1        db      ?
rAltInput       db      ?               ; storage for alternate keypad entry
rBufferHead     dw      ?               ; pointer to head of keyboard buffer
rBufferTail     dw      ?               ; pointer to tail of keyboard buffer
rKbBuffer       dw      16 dup (?)
                ORG     80h            ; buffer location within segment 40H
rBufferStart    dw      ?               ; offset of keyboard buffer start
rBufferEnd      dw      ?               ; offset of keyboard buffer end
                ORG     96h
rKbFlag3        db      ?               ; keyboard mode state and type flags
rKbFlag2        db      ?               ; keyboard LED flags
KbSeg           ENDS


;------------------------------------------------------------------------
@PUSH           MACRO   a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12
                IRP     REGISTER,<a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12>
                        IFB     <REGISTER>
                                ;;if REGISTER is blank do nothing.
                        ELSE
                                PUSH    REGISTER
                        ENDIF
                ENDM
                ENDM
@POP            MACRO   a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12
                IRP     REGISTER,<a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12>
                        IFB     <REGISTER>
                                ;;if REGISTER is blank do nothing.
                        ELSE
                                POP     REGISTER
                        ENDIF
                ENDM
                ENDM

BOP             MACRO   func

        db      0c4h,0c4h,func
;       jmp     cs:[pass_disp_add]
;       int     44h
                ENDM


;------------------------------------------------------------------------
Config          STRUC                   ; total 50 byte
sConfigId       db      'HECON.CFG'     ; 9 byte
sCodeType       db      ?
sFont           db      32 dup(?)       ; drive/path/filename
sMemory         db      ?               ; real/EMS/ext./HIMEM
sHeKey          db      ?
sHjKey          db      ?
sPrinterType    db      ?
sKbdType        db      ?
                db      3 dup(?)        ; reserved
Config          ENDS

UserCard        STRUC
uHanOn          dw      ?
uHanOff         dw      ?
uGetFont        dw      ?
uPutFont        dw      ?
uModeset        dw      ?
uEop            dw      ?
uInit           dw      ?
UserCard        ENDS

CrtParm         STRUC                   ; video parms structure
                db      2 dup(?)
cPoints         db      ?
                db      6 dup(?)
cMisc           db      ?
cCrtc           db      25 dup(?)
cAttr           db      20 dup(?)
cGrp            db      6 dup(?)
cMap            db      ?
                db      2 dup(?)
CrtParm         ENDS

ModeParms       STRUC
sMode           db      ?               ; input mode(modified if eng-card/text)
sModeId         db      ?               ; mode ID for application
sRealMode       db      ?               ; used for mode set really
sCodeVram       db      ?               ; code buffer address
sGrpVram        db      ?               ; grp video byte address
sCodeSize       db      ?               ; code buffer size
sGrpSize        db      ?               ; grp video byte size
sStatus         db      ?               ; mode status byte
sRows           db      ?               ; rows
sAdjParms       dw      ?               ; adjust video mode parms pointer
sParms          dw      ?               ; video mode parms pointer
sCurType        dw      ?               ; cursor type
ModeParms       ENDS

UdcHeader       STRUC
UdcMapTblPtr    dw      ?
UdcMapTblSize   dw      ?
UdcIndexTblPtr  dw      ?
UdcIndexTblSize dw      ?
UdcSetTblPtr    dw      ?
UdcSetTblSize   dw      ?
UdcPatPtr       dw      ?
UdcPatSize      dw      ?
UdcFileId       db      8 dup (?)
UdcUpdateDate   db      8 dup (?)
UdcReserved     db      16 dup (?)
UdcHeader       ENDS

GdtTbl          STRUC
                db      16 dup(?)
GdtCntS         dw      ?
GdtSL           dw      ?
GdtSH           db      ?
                db      ?
                db      2 dup(?)
GdtCntD         dw      ?
GdtDL           dw      ?
GdtDH           db      ?
                db      ?
                db      18 dup(?)
GdtTbl          ENDS

VDM_INFO_TBL    STRUC
packet_len              dw      30
video_buffer            dd      0
dmode_add               dd      0
windowed_add            dd      0
nt_cons_add             dd      0
disp_sys_init           dd      0
fullsc_resume_ptr       dd      0
ias_setmode_add         dd      0
VDM_INFO_TBL    ENDS

;------------------------------------------------------------------------
GrpIndex        =       3ceh
MiscReg         =       3c2h
AttrReg         =       3c0h
SeqIndex        =       3c4h


;------------------------------------------------------------------------
; stack pointer
rBX             =       2*7
rCX             =       2*6
rDX             =       2*5
rSI             =       2*4
rDI             =       2*3
rES             =       2*2
rDS             =       2*1
rBP             =       2*0

StringLng       =       32              ; size of 'HECON.CFG' file
EnvrParmPtr     =       2ch

; << ModeStat >>
TextEmulation   =       10000000b       ; fixed
ColorMode       =       01000000b       ; fixed
GrpMode         =       00100000b       ; fixed
MultiPage       =       00001000b       ; fixed
EmuCursor       =       00000100b       ; fixed
HwScroll        =       00000001b       ; fixed

; << CodeStat >>
InstPatGen      =       10000000b       ; installed PatGen
HangeulMode     =       01000000b       ; ѱ  ȯ
ChabLoad        =       00100000b       ; request to chohab service
WSung7          =       00000100b       ; fixed
Chab            =       00000010b       ; fixed
WSung           =       00000000b       ; fixed
HangeulVideoMode=       00000001b       ; ѱ display mode

; << DisplayStat >>
RunEsc          =       00000001b

; << HanStat >>                         ; reserved flag
Han1st          =       00000001b       ; fixed

; << KbStat >>
UserDefineKey   =       10000000b
ReqEnvrChg      =       01000000b       ; request hot-key processing
HanKeyinMode    =       00100000b       ; hangeul displayable video mode
Ext10xKey       =       00010000b       ; fixed
HEStat          =       00000100b       ; fixed
JJStat          =       00000001b       ; fixed

; <<HotStat>>
AltHotChg       =       00000001b

; << HjStat >> << OrgHjStat >>
UdcLoaded       =       10000000b
UdcArea         =       01000000b
HjLoaded        =       00100000b
HjModeEnable    =       00000001b       ; fixed

; << HjMenuStat >>                      ; reserved flag
HjMenuMode      =       00000001b       ; fixed

; << MachineType >>
AtMachine       =       00000001b

; << Card1st >> , << Card2nd >>
FontCard        =       10000000b
HanCard         =       01000000b
ColorMnt        =       00100000b       ; color monitor(1), mono monitor(0)
DualMnt         =       00010000b
CardType        =       00001110b       ; fixed, card mask
VgaCard         =       00001010b       ; fixed
McgaCard        =       00001000b       ; fixed
EgaCardC        =       00000110b       ; fixed
EgaCardM        =       00000100b       ; fixed
CgaCard         =       00000010b       ; fixed
MgaCard         =       00000000b       ; fixed

; << MemStat >>
RealMem         =       10000000b
ExtMem          =       01000000b
EmsMem          =       00100000b
HiMem           =       00010000b

; << ErrStat >>
UdcLoadErr      =       10000000b
FontLoadErr     =       01000000b
MemoryErr       =       00100000b
FileErr         =       00010000b

; << Printer >>
NoPrt           =       00000011b       ; WanSung printer
KsPrt           =       00000000b       ; WanSung printer
wLbp            =       00000001b       ; WanSung printer
wKmPrt          =       00000010b       ; WanSung printer
cKmPrt          =       00000110b       ; ChoHab printer
TgPrt           =       00000111b       ; ChoHab printer
ChPrinter       =       00000100b

; << KbMisc >>
InterimCtrlDisp =       00000001b
HaveInterim     =       00000010b
SavedInterim    =       00000100b
RunningHot      =       00001000b

; << KseCard >>
MonoMntC        =       00000010b
PassHanCdCheck  =       00000100b
Page1Fix        =       00001000b

; << KbdType >>
SetKbd101       =       00000001b

;------------------------------------------------------------------------
EscKey          =       1bh
CR              =       0Dh
LF              =       0Ah
BS              =       08h
BELL            =       07h
DelKey          =       53h

DefXtKsHeKey    =       0f0h
DefAtKsHeKey    =       0f2h
DefKsHjKey      =       0f1h
Def101HeKey     =       38h
Def101HjKey     =       1dh
DefAtHeKey      =       6eh
DefAtHjKey      =       62h
DefXtHeKey      =       57h
DefXtHjKey      =       56h

;------------------------------------------------------------------------
.list

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\dual.inc ===
;========================================================================
;
;               Hot Key Service Function
;
;========================================================================

ASSUME  CS:CODE, DS:CODE, ES:CODE

MainPos         =       0
Sub1Pos         =       112h
Sub2Pos         =       133h
MsgLength       =       16
eom             =       '$'

DataStr         STRUC
mCurValue       db      ?
mMaxValue       db      ?
mCurPos         dw      ?
mDataAddr       dw      ?
mMsgs           dw      ?
DataStr         ENDS

CurMenu         dw      0               ; current main menu
tCodeStat       db      0
tPrinter        db      0
NorAttr         db      70h
SelAttr         db      7
BakAttr         db      70h
OldCodeStat     db      0
BilingCall      db      0               ; [CHM001]

MainTbl         label   word
                dw      offset Menu1
                dw      offset Menu2
MainTblLng      =       ($-MainTbl)/2

Menu1           label   word
Menu1Cur        db      0
Menu1Max        db      Sub1DataLng-1
                dw      Sub1Pos
                dw      offset Sub1Data
                dw      offset Menu1Msg1
                dw      offset Menu1Msg2
                dw      offset Menu1Msg3
;                dw      offset Menu1Msg4
Sub1Data        label   byte
                db      0
                db      HangeulMode or WSung
                db      HangeulMode or Chab
;                db      HangeulMode or WSung7
Sub1DataLng     =       $-Sub1Data
Menu1Msg1       db      'English',eom
Menu1Msg2       db      'KS C 5842 - 1991',eom
Menu1Msg3       db      'Chohab',eom
;Menu1Msg4       db      'Wansung 7 bit',eom

Menu2           label   word
Menu2Cur        db      0
Menu2Max        db      Sub2DataLng-1
                dw      Sub2Pos
                dw      offset Sub2Data
                dw      offset Menu2Msg1
                dw      offset Menu2Msg2
;                dw      offset Menu2Msg3
                dw      offset Menu2Msg4
                dw      offset Menu2Msg5
                dw      offset Menu2Msg6
Sub2Data        label   byte
                db      NoPrt
                db      KsPrt
;                db      wLbp
                db      wKmPrt
                db      cKmPrt
                db      TgPrt
Sub2DataLng     =       $-Sub2Data
Menu2Msg1       db      'None selected',eom
Menu2Msg2       db      'KS',eom
;Menu2Msg3       db      'QLBP',eom
Menu2Msg4       db      'KSSM',eom
Menu2Msg5       db      'KSSM(Chohab)',eom
Menu2Msg6       db      'TG(Chohab)',eom

MainMenu        label   byte
        dw      0fh
        db      'Hangeul BIOS environment changing program',0
        dw      10bh
        db      'CODE :',0
        dw      129h
        db      'PRINTER :',0
        dw      215h
        db      'USAGE : Enter, Esc, Arrows',eom


;========================================================================
;   << EnvrChange >>
; FUNCTION =  Hot_ key function ó
; INPUT   : none
; OUTPUT  : none
; PROTECT : all

EXTRN   PushKeyBuf:near
PUBLIC  EnvrChange
public  EscCode2Tbl, EscCode3Tbl, EscCodeNTbl, EscCode4Tbl
public  EscCode2Addr, EscCode3Addr, EscCodeNAddr, EscCode4Addr

dSaveCurrPage    db   0
dSaveCurPos      dw   0
dSaveCurType     dw   0

INCLUDE debug.inc
EnvrChange:
ASSUME  DS:DATA, ES:CODE
        @push   ax,bx,cx,dx,si,di,es,ds
        xor     bx,bx
        mov     ds,bx
        mov     bx,cs
        cmp     bx,word ptr [rKbioInt+2]
        jnz     EnvrChgRet
        mov     bx,cs
        mov     es,bx
        mov     ds,bx
ASSUME  DS:CODE
        mov     al,[CodeStat]
        mov     [OldCodeStat],al
if      AltHotKey
        test    [HotStat],AltHotChg
        jz      NotAltChg
        test    [CodeStat],(Chab or WSung7)
        jnz     EnvrChgRet
        and     [CodeStat],not (HangeulMode or Chab or WSung or WSung7)
        test    al,HangeulMode
        jnz     @f
        or      [CodeStat],(HangeulMode or WSung)
@@:
        call    AltHotChgProc
        jmp     EnvrChgRet
NotAltChg:
endif   ; if AltHotKey
        call    AdjustParms
        call    SaveScrn
        call    DispMain
        call    DispStatus
        call    MainLoop
        call    RestoreScrn
        jc      EnvrChgRet
        call    ChgEnvr
EnvrChgRet:
        @pop    ds,es,di,si,dx,cx,bx,ax
        ret

if      AltHotKey
AltHotChgProc:
        test    cs:[Card1st],HanCard
        jz      @f
        mov     ah,0fh
        int     10h
        cmp     al,2
        jz      AltHotChgText
        cmp     al,3
        jz      AltHotChgText
        test    cs:[Card1st],VgaCard
        jz      @f
        test    cs:[Card1st],DualMnt
        jnz     @f
        cmp     al,7
        jz      AltHotChgText
@@:
if      AtiVga
        mov     [PreModeV],al
endif   ;AtiVga
        call    ChgEnvrProc
        ret
AltHotChgText:
        call    SaveScrData
;if      KseVga
;        test    cs:[KseCard],00000001b
;        jz      @f
;        test    [CodeStat],HangeulMode
;        jnz     @f
;        CALL    SaveEngPat
;@@:
;endif   ; if KseVga
        push    es
        test    cs:[CodeStat],HangeulMode
        jnz     SetHanVideoI
        call    ChgParmH2E
        jmp     @f
SetHanVideoI:
        call    ChgParmE2H
@@:
        push    ax
        push    bx
        mov     ax,0
        mov     es,ax
ASSUME  ES:DATA
        mov     ah,0fh
        int     10h
        or      al, 80h
        mov     ah, 0
        int     10h
        JMP     SetParmKse
        cli
        push    ax
        mov     [ModeStat],0
        and     [KbStat],not HanKeyinMode
        and     [CodeStat],not HangeulVideoMode
        mov     [CurMode],al
        call    HanCardReset
        call    SearchMode
        jnc     @f
        pop     ax
        or      al, 080h
        pushf
        call    [OLDVIDEO]
if      KseVga
        test    cs:[KseCard],00000001b
        jz      SetParmKse
        ;or      al,080h
        ;PUSHF
        ;CALL    [OLDVIDEO]
;       CALL    LoadEngPat
        call    SetParmAlt
endif   ;   KseVga
        JMP     SetParmKse
@@:
        pop     ax
        or      [KbStat],HanKeyInMode
        or      [CodeStat],HangeulVideoMode
if      KseVga
        test    cs:[KseCard],00000001b
        jnz     ProContKA
endif   ; KseVga
if      AtiVga
        test    cs:[KseCard],00000001b
        jnz     @f
        call    LoadEngPattern
        mov     bx,ax
        cmp     al,[PreModeV]
        jnz     @f
        call    HanCardSet
        push    si
        call    GetParmTbl
        mov     dx,03cch
        in      al,dx
        mov     ah,al
        lodsb
        pop     si
        cmp     ah,al
        jnz     @f
        jmp     SetParmKse
@@:
        mov     [PreModeV],bl
        mov     ax,bx
endif   ;AtiVga
ProContKA:
        call    PreModeSet
        call    ClearGrpBuf
if      KseVga
        test    cs:[KseCard],00000001b
        jz      @f
        or      al,080h
        PUSHF
        CALL    [OLDVIDEO]
@@:
endif   ;   KseVga
        call    LoadEngPattern
        CALL    SettingVariables
        call    HanCardSet
        call    SetParmAlt
SetParmKse:
        pop     bx
        pop     ax
        pop     es
assume  es:code
        sti
        call    WritScrData
if      KseVga
        test    cs:[KseCard],00000001b
        jz      @f
        call    KseVEop
@@:
endif   ; if KseVga
        ret

SetParmAlt:
        call    GetParmTbl
        mov     dx,03c2h
        lodsb
        out     dx,al
        mov     dx,03c4h
        mov     ah,1
        lodsb
        xchg    ah,al
        out     dx,ax
        mov     dx,cx
        mov     cx,25
        mov     ax,0
        out     dx,ax
        xor     ah,ah
        call    OutParms
        add     dl,0ah-4
        in      al,dx
        in      al,dx
        mov     dx,03c0h
        mov     al,13h
        out     dx,al
        lodsb
        out     dx,al
        mov     al,03fh
        out     dx,al
if      KseVga
        test    cs:[KseCard],00000001b
        jz      @f
        jmp     SetParmVgaRet
@@:
endif   ;   KseVga
        mov     cx,02h
        mov     dx,01ceh
        mov     ah,0a8h
        call    OutParms
SetParmVgaRet:
        ret

GetParmTbl:
        push    bx
        mov     bx,0
        test    [CodeStat],HangeulMode
        jz      @f
        mov     bx,1
@@:
        push    es
        mov     ax,0
        mov     es,ax
        mov     cx,ES:[rAddr6845]
        pop     es
        test    cs:[KseCard],MonoMntC
        jz      @f
        or      bx,000000100b
        jmp     SetParmProc
@@:
        cmp     cx,3b4h
        jnz     SetParmProc
        or      bx,000000010b
SetParmProc:
        shl     bx,1
if      AtiVga
        mov     si,offset AttrTblAti
endif   ; AtiVga
if      KseVga
        test    cs:[KseCard],00000001b
        jz      @f
        mov     si,offset AttrTblKse
@@:
endif   ;   KseVga
        mov     si,[si+bx]
        pop     bx
        ret

OutParms:
        lodsb
        xchg    al,ah
        out     dx,ax
        xchg    al,ah
        inc     ah
        loop    OutParms
        ret

if      KseVga

KseEng2Vga  db 067h
         db 000h
         db 05Fh,04Fh,050h,082h,055h,081h,0BFh,01Fh,000h,04Fh,00Dh,00Eh,000h,000h,000h,000h
         db 09Ch,00Eh,08Fh,028h,01Fh,096h,0B9h,0A3h,0FFh
         db 008h

KseHan2Vga  db 063h
         db 001h
         db 061h,052h,053h,023h,057h,06Fh,0BFh,01Fh,000h,04Fh,00Dh,06Eh,000h,000h,000h,000h
         db 09Ch,00Eh,08Fh,028h,01Fh,096h,0B9h,0A3h,0FFh
         db 000h

KseEng7Vga  db 066h
         db 000h
         db 05Fh,04Fh,050h,082h,055h,081h,0BFh,01Fh,000h,04Fh,00Dh,00Eh,000h,000h,000h,000h
         db 09Ch,00Eh,08Fh,028h,00Fh,096h,0B9h,0A3h,0FFh
         db 008h

KseHan7Vga  db 062h
         db 001h
         db 061h,052h,053h,023h,057h,06Fh,0BFh,01Fh,000h,04Fh,00Dh,06Eh,000h,000h,000h,000h
         db 09Ch,00Eh,08Fh,028h,00Fh,096h,0B9h,0A3h,0FFh
         db 000h

KseEng7Mda  db 0A6h
         db 000h
         db 060h,04Fh,056h,03Ah,051h,060h,070h,01Fh,000h,00Dh,00Bh,00Dh,000h,000h,000h,000h
         db 05Eh,02Eh,05Dh,028h,00Dh,05Eh,00Eh,0A3h,0FFh
         db 008h

KseHan7Mda  db 0A6h
         db 001h
         db 05Fh,052h,055h,025h,053h,0E3h,0B0h,01Fh,000h,00Fh,00Eh,060h,000h,000h,000h,000h
         db 090h,020h,08Fh,028h,00Dh,090h,000h,0A3h,0FFh
         db 000h


AttrTblKse      label   byte
        dw      offset KseEng2Vga
        dw      offset KseHan2Vga
        dw      offset KseEng7Vga
        dw      offset KseHan7Vga
        dw      offset KseEng7Mda
        dw      offset KseHan7Mda
endif   ;   KseVga

if      AtiVga
PreModeV        DB      0

AtiEng2Vga  db 067h
         db 000h
         db 05Fh,04Fh,050h,082h,055h,081h,0BFh,01Fh,000h,04Fh,00Dh,00Eh,000h,000h,007h,080h
         db 09Ch,00Eh,08Fh,028h,01Fh,096h,0B9h,0A3h,0FFh
         db 008h
         db 001h,072h
;        db 048h,012h,000h,000h,054h,076h,004h,000h,001h,072h,005h,080h,000h,000h,000h,000h
;        db 010h,000h,000h,000h,000h,008h,000h,02Dh,040h,073h,000h,063h,000h,090h,010h,008h


AtiHan2Vga  db 063h
         db 001h
         db 05Fh,04Fh,050h,082h,054h,080h,0BFh,01Fh,000h,04Fh,00Dh,00Eh,000h,000h,007h,080h
         db 09Ch,00Eh,08Fh,028h,01Fh,096h,0B9h,0A3h,0FFh
         db 000h
         db 001h,0aeh
;        db 048h,012h,000h,000h,054h,076h,004h,000h,001h,0AEh,005h,080h,000h,000h,000h,000h
;        db 010h,000h,000h,000h,000h,008h,000h,02Dh,040h,073h,000h,063h,000h,090h,010h,028h

AtiEng7Vga  db 066h
         db 000h
         db 05Fh,04Fh,050h,082h,055h,081h,0BFh,01Fh,000h,04Fh,00Dh,00Eh,000h,000h,002h,030h
         db 09Ch,00Eh,08Fh,028h,00Fh,096h,0B9h,0A3h,0FFh
         db 008h
         db 01h,079h
;        db 048h,012h,000h,000h,054h,076h,004h,000h,001h,079h,005h,080h,000h,000h,000h,000h
;        db 010h,000h,000h,000h,000h,008h,000h,02Dh,040h,073h,000h,063h,000h,090h,010h,008h

AtiHan7Vga  db 062h
         db 001h
         db 05Fh,04Fh,050h,082h,054h,080h,0BFh,01Fh,000h,04Fh,00Dh,00Eh,000h,000h,007h,080h
         db 09Ch,00Eh,08Fh,028h,01Fh,096h,0B9h,0A3h,0FFh
         db 000h
         db 00h,0cdh
;        db 048h,012h,000h,000h,054h,076h,004h,000h,000h,0CDh,005h,080h,000h,000h,000h,000h
;        db 010h,000h,000h,000h,000h,008h,000h,025h,040h,073h,000h,063h,000h,090h,010h,028h

AtiEng7Mda  db 0A6h
         db 001h
         db 06Ch,04Fh,050h,02Bh,055h,067h,09Fh,01Fh,000h,00Fh,00Dh,00Fh,000h,000h,007h,080h
         db 000h,000h,08Fh,028h,00Fh,091h,015h,0A3h,0FFh
         db 000h
         db 00h,093h
;        db 058h,017h,000h,000h,054h,076h,004h,000h,000h,093h,005h,080h,000h,000h,000h,000h
;        db 010h,007h,000h,000h,002h,008h,0A2h,025h,086h,0F1h,00Fh,062h,000h,0D0h,015h,008h

AtiHan7Mda  db 0A6h
         db 001h
         db 06Ch,04Fh,050h,02Bh,055h,067h,09Fh,01Fh,000h,00Fh,00Dh,00Fh,000h,000h,007h,080h
         db 000h,000h,08Fh,028h,00Fh,091h,015h,0A3h,0FFh
         db 000h
         db 00h,0e6h
;        db 058h,017h,000h,000h,054h,076h,004h,000h,000h,0E6h,005h,080h,000h,000h,000h,000h
;        db 000h,007h,000h,000h,002h,008h,0A2h,025h,086h,0F1h,00Fh,042h,000h,0D0h,015h,008h

AttrTblAti      label   byte
        dw      offset AtiEng2Vga
        dw      offset AtiHan2Vga
        dw      offset AtiEng7Vga
        dw      offset AtiHan7Vga
        dw      offset AtiEng7Mda
        dw      offset AtiHan7Mda
endif   ;   AtiVga

SaveScrData:
        @push   ds,es,cx,di,si
        mov     ah,0fh
        int     10h
        push    ax
        mov     cs:[dSaveCurrPage],bh
        mov     ah,03h
        int     10h
        mov     cs:[dSaveCurType],cx
        mov     cs:[dSaveCurPos],dx
        mov     cx,0
        mov     es,cx
        mov     cx,es:[rCrtStart]
        les     di,[CodeBuf2Addr]
        lds     si,[CodeBuf1Addr]
        pop     ax
        mov     dx,0b000h
        cmp     al,07h
        jz      @f
        mov     dx,0b800h
@@:
        mov     ds,dx
        shr     cx,1
        shr     cx,1
        shr     cx,1
        shr     cx,1
        mov     dx,ds
        add     cx,dx
        mov     ds,cx
        mov     cx,25*80
        mov     ax,ds
        mov     bx,si
        rep movsw
        @pop    si,di,cx,es,ds
        ret

WritScrData:
        @push   es,ds
        lds     si,[CodeBuf2Addr]
        mov     es,ax
        mov     di,bx
        mov     cx,25*80
        rep movsw
        mov     bh,cs:[dSaveCurrPage]
        mov     dx,cs:[dSaveCurPos]
        mov     ah,02h
        int     10h
        mov     cx,cs:[dSaveCurType]
        mov     ah,01h
        int     10h
        @pop    ds,es
        ret
endif   ;   AltHotKey


;------------------------------------------------------------------------
;   << AdjustParms >>
; FUNCTION =  initialize menu value
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS, ES, BP
AdjustParms:
        mov     [CurMenu],0
        mov     ah,[Printer]
        and     ah,00000111b
        mov     al,[CodeStat]
        and     al,HangeulMode or Chab or WSung or WSung7
        test    [CodeStat],ChabLoad
        jnz     @f
        mov     [Menu1Max],2-1
        mov     [Menu2Max],1-1
        and     al,HangeulMode or WSung
        mov     ah,NoPrt
@@:
        mov     [tPrinter],ah
        mov     [tCodeStat],al
        mov     si,offset Sub1Data
        mov     dx,si
        mov     cx,Sub1DataLng
@@:
        cmp     [si],al
        jz      @f
        inc     si
        loop    @b
        mov     si,dx                   ; initiale
@@:
        sub     si,dx
        mov     dx,si
        mov     [Menu1Cur],dl
        mov     al,[tPrinter]
        mov     si,offset Sub2Data
        mov     dx,si
        mov     cx,Sub2DataLng
@@:
        cmp     [si],al
        jz      @f
        inc     si
        loop    @b
        mov     si,dx                   ; initiale
@@:
        sub     si,dx
        mov     dx,si
        mov     [Menu2Cur],dl
        ret

;------------------------------------------------------------------------
;   << SaveScrn >>
; FUNCTION =  save menu screen
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS, ES, BP
SaveScrn:
        mov     ah,0fh
        int     10h
        mov     [dSaveCurrPage],bh
        mov     [NorAttr],70h
        mov     [SelAttr],7
        mov     [BakAttr],70h
        cmp     al,3
        jbe     @f
        cmp     al,7
        jz      @f
        mov     [NorAttr],7
        mov     [SelAttr],0fh
        mov     [BakAttr],0
@@:
        mov     ah,3
        int     10h
        mov     [dSaveCurType],cx
        mov     [dSaveCurPos],dx
        mov     ah,1
        or      ch,20h
        int     10h
        xor     dx,dx
        mov     di,offset MenuBuffer
        mov     cx,80*3
SaveLp:
        mov     ah,2
        int     10h
        mov     ah,8
        int     10h
        stosw
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        inc     dh
@@:
        loop    SaveLp
        ret


;------------------------------------------------------------------------
;   << DispMain >>
; FUNCTION =  Display main menu
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS, ES, BP
DispMain:
        mov     bh,[BakAttr]
        xor     cx,cx
        mov     dx,024fh
        mov     ax,600h
        int     10h
        mov     bh,[dSaveCurrPage]
        mov     bl,[NorAttr]
        mov     si,offset MainMenu
        inc     cx
DispMainLp:
        lodsw
        mov     dx,ax
@@:
        mov     ah,2
        int     10h
        lodsb
        cmp     al,eom
        jz      @f
        cmp     al,0
        jz      DispMainLp
        mov     ah,9
        int     10h
        inc     dl
        jmp     short @b
@@:
        ret

;------------------------------------------------------------------------
;   << DispStatus >>
; FUNCTION =  display sub Menu
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS, ES, BP
DispStatus:
        mov     cx,MainTblLng
@@:
        push    cx
        mov     bl,[NorAttr]
        call    DispMenu
        inc     [CurMenu]
        pop     cx
        loop    @b
        mov     [CurMenu],0
        mov     bl,[SelAttr]
        call    DispMenu
        ret

;------------------------------------------------------------------------
;   << MainLoop >>
; FUNCTION =  user interface
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS, ES, BP
MainLoop:
        call    GetKey
        jc      MainLoopAbort
        xor     ah,ah
        shl     ax,1
        mov     si,ax
        call    [si].KeySrv
        jnc     MainLoop
        clc
MainLoopAbort:
        ret
KeySrv          label   word
                dw      offset MenuUp   ; up
                dw      offset MenuDown ; down
                dw      offset MenuLeft ; left
                dw      offset MenuRight; right
                dw      offset MenuSave ; enter

;--------------------------------
MenuUp:
        mov     bl,[NorAttr]
        call    DispMenu
        mov     si,[CurMenu]
        shl     si,1
        mov     si,[si].MainTbl
        mov     al,[si].mCurValue
        dec     al
        cmp     al,-1
        jnz     @f
        mov     al,[si].mMaxValue
@@:
        mov     [si].mCurValue,al
        mov     bl,[SelAttr]
        call    DispMenu
        clc
        ret

;--------------------------------
MenuDown:
        mov     bl,[NorAttr]
        call    DispMenu
        mov     si,[CurMenu]
        shl     si,1
        mov     si,[si].MainTbl
        mov     al,[si].mCurValue
        mov     ah,[si].mMaxValue
        inc     al
        cmp     al,ah
        jbe     @f
        mov     al,0
@@:
        mov     [si].mCurValue,al
        mov     bl,[SelAttr]
        call    DispMenu
        clc
        ret

;--------------------------------
MenuLeft:
        mov     bl,[NorAttr]
        call    DispMenu
        dec     [CurMenu]
        cmp     [CurMenu],-1
        jnz     @f
        mov     [CurMenu],MainTblLng-1
@@:
        mov     bl,[SelAttr]
        call    DispMenu
        clc
        ret

;--------------------------------
MenuRight:
        mov     bl,[NorAttr]
        call    DispMenu
        inc     [CurMenu]
        cmp     [CurMenu],MainTblLng
        jb      @f
        mov     [CurMenu],0
@@:
        mov     bl,[SelAttr]
        call    DispMenu
        clc
        ret

;--------------------------------
MenuSave:
        stc
        ret

;--------------------------------
DispMenu:
        mov     si,[CurMenu]
        shl     si,1
        mov     si,[si].MainTbl
        mov     dx,[si].mCurPos
        mov     al,[si].mCurValue
        xor     ah,ah
        shl     ax,1
        add     si,ax
        mov     si,[si].mMsgs
        mov     bh,[dSaveCurrPage]
        push    bx
        mov     ah,2
        int     10h
        mov     cx,MsgLength
        mov     ah,9
        mov     al,' '
        mov     bl,[NorAttr]
        int     10h
        pop     bx
        mov     cx,1
@@:
        mov     ah,2
        int     10h
        lodsb
        cmp     al,eom
        jz      @f
        inc     dl
        mov     ah,9
        int     10h
        jmp     short @b
@@:
        ret

;--------------------------------
GetKey:
        xor     ah,ah
        pushf
        call    [OldKbioInt]
        cmp     ah,1                    ; ESC key
        jz      GetKeyEnd
        mov     bl,ah
        mov     si,offset KeyTbl
        mov     cx,KeyTblLng
@@:
        lodsw
        cmp     al,bl
        jz      @f
        loop    @b
        mov     ax,0e07h
        int     10h
        jmp     short GetKey
@@:
        mov     al,ah
        ret
GetKeyEnd:
        stc
        ret

KeyTbl  label   byte
        db      48h,0                   ; up
        db      50h,1                   ; down
        db      4bh,2                   ; left
        db      4dh,3                   ; right
        db      1ch,4                   ; enter
KeyTblLng       =       ($-KeyTbl)/2

;------------------------------------------------------------------------
;   << ChgEnvr >>
; FUNCTION =  check status & environment change
; INPUT   : none
; OUTPUT  : carry(set = no change & exit)
; PROTECT : DS, ES, BP
ChgEnvr:
        test    [CodeStat],ChabLoad
        jz      @f
        mov     al,[Menu2Cur]
        xor     ah,ah
        mov     si,ax
        mov     al,[si].Sub2Data
        cmp     [tPrinter],al
        jz      @f
        mov     [Printer],al
        mov     [PrtAuto],0
        mov     [HanCnt],0
        xor     ah,ah
        mov     si,ax
        shl     si,1
        mov     ax,[si].EscCode2Tbl
        mov     [EscCode2Addr],ax
        mov     ax,[si].EscCode3Tbl
        mov     [EscCode3Addr],ax
        mov     ax,[si].EscCodeNTbl
        mov     [EscCodeNAddr],ax
        mov     ax,[si].EscCode4Tbl
        mov     [EscCode4Addr],ax
@@:
        mov     al,[Menu1Cur]
        xor     ah,ah
        mov     si,ax
        mov     al,[si].Sub1Data
        cmp     [tCodeStat],al
        jz      ChgEnvrEnd
        and     [CodeStat],not (HangeulMode or Chab or WSung or WSung7)
        or      [CodeStat],al
ChgEnvrProc:
if      not ComFile
        push    bx
        mov     bx,437
        test    [CodeStat],HangeulMode
        jz      @f
        mov     bx,1361
        test    [CodeStat],Chab
        jnz     @f
        mov     bx,949
@@:
        mov     ax,6602h
        int     21h
        pop     bx
endif   ;  not ComFile
        mov     ah,0fh
        int     10h
        call    ChgEnvrDo
        mov     ah,0f3h
        int     16h
        mov     ah,0f3h
        int     16h

if 0
;       mov     ah,0fh          ; [CHM001]
;       int     10h             ; [CHM001]
;       call    ChgEnvrDo       ; [CHM001]

        mov     ax, 6602h               ; [CHM001]
        mov     bx, 437                 ; [CHM001]
        test    [CodeStat], HangeulMode ; [CHM001]
        jz      ChangeCodePage          ; [CHM001]
        mov     bx, 1361                ; [CHM001]
        test    [CodeStat], Chab        ; [CHM001]
        jnz     ChangeCodePage          ; [CHM001]
;        test    [CodeStat], Wsung7      ; [CHM001]
;        jnz     ChangeCodePage          ; [CHM001]
        mov     bx, 949                 ; [CHM001]
ChangeCodePage:                         ; [CHM001]
        mov     [BilingCall], 0ffh      ; [CHM001]
        int     21h                     ; [CHM001]

        mov     ah,0f3h
        int     16h
        mov     ah,0f3h
        int     16h
;@@:
;        mov     ah,1
;        int     16h
;        jz      @f
;        mov     ah,0
;        int     16h
;        jmp     short @b
;@@:
endif

        test    [KbStat],ReqEnvrChg
        jnz     ChgEnvrEnd
        push    ds
ASSUME  DS:KbSeg
        mov     ax,SEG KbSeg
        mov     ds,ax
        mov     ax,1c0dh
        mov     bx,[rBufferTail]
        call    PushKeyBuf
        pop     ds
ASSUME  DS:CODE
ChgEnvrEnd:
        ret


;------------------------------------------------------------------------
;   << ChgEnvrDo >>
; FUNCTION =  mode set with given mode & status
; INPUT   : AL = mode value
; OUTPUT  : none
; PROTECT : DS, ES, BP
ChgEnvrDo:
        push    ax
        test    cs:[Card1st],VgaCard
        jnz     @f
        test    cs:[CodeStat],HangeulMode
        jnz     SetHanEnvr
        call    ChgParmH2E
        jmp     @f
SetHanEnvr:
        call    ChgParmE2H
@@:
        test    [CodeStat],ChabLoad
        jz      ChgEnvrContin
;        push    ds
;        mov     ax,6300h
;        int     21h
;        cmp     byte ptr [si+1],0feh
;        jnz     @f
;        mov     byte ptr [si],0a1h
;        test    cs:[CodeStat],CHab
;        jz      @f
;        mov     byte ptr [si],084h
;@@:
;        pop     ds
        mov     [PrtAuto],0
        mov     [HanCnt],0
        xor     ah,ah
        mov     si,ax
        shl     si,1
        mov     ax,[si].EscCode2Tbl
        mov     [EscCode2Addr],ax
        mov     ax,[si].EscCode3Tbl
        mov     [EscCode3Addr],ax
        mov     ax,[si].EscCodeNTbl
        mov     [EscCodeNAddr],ax
        mov     ax,[si].EscCode4Tbl
        mov     [EscCode4Addr],ax
ChgEnvrContin:
        pop     ax
        and     al,01111111b
        test    [CodeStat],HangeulMode
        jnz     EnvrValidMode
        cmp     al,40h
        jz      @f
        cmp     al,60h
        jz      @f
        cmp     al,70h
        jnz     EnvrValidMode
@@:
        and     [KbStat],not ReqEnvrChg
        int     11h
        cmp     al,00110000b
        mov     al,7
        jpe     EnvrValidMode
        mov     al,3
EnvrValidMode:
        cmp     al,3
        jbe     @f
        cmp     al,7
        jz      @f
        and     [KbStat],not ReqEnvrChg
@@:
        push    ax
        mov     al,[CodeStat]
        xchg    al,[OldCodeStat]
        mov     [CodeStat],al
        call    SaveCodeBuffer
        mov     dx,3bfh
        mov     al,3
        out     dx,al
        mov     dl,0b8h
        mov     al,28h
        out     dx,al
        xor     al,al
        mov     dl,0bfh
        out     dx,al
        mov     al,[OldCodeStat]
        mov     [CodeStat],al
        test    [Card1st],DualMnt
        jz      ModeSet1st
        push    ds
        xor     ax,ax
        mov     ds,ax
ASSUME  DS:DATA
        mov     bl,byte ptr [rEquip]
        mov     ax,7
        or      byte ptr [rEquip],00110000b
        test    cs:[Card2nd],ColorMnt
        jz      @f
        mov     al,3
        and     byte ptr [rEquip],11101111b
@@:
        int     10h
        mov     byte ptr [rEquip],bl
        pop     ds
ASSUME  DS:CODE
ModeSet1st:
        pop     ax
if      WINNT
        call    RestoreCodeBuffer
        ret
else
        xor     ah,ah
if      AltHotKey and AtiVga
        mov     [PreModeV],ah
endif   ;  AltHotKey and AtiVga
        int     10h
        call    RestoreCodeBuffer
        ret
endif

;--------------------------------
SaveCodeBuffer:
        test    [KbStat],ReqEnvrChg
        jz      SaveCodeBufferEnd
        mov     ah,0fh
        int     10h                     ; get page #
        mov     [dSaveCurrPage],bh
        mov     ah,3
        int     10h                     ; get cursor position
        mov     [dSaveCurPos],dx
        mov     [dSaveCurType],cx        ; save cursor type
        or      ch,20h                  ; disable cursor
        mov     ah,1
        int     10h
        xor     dx,dx
        mov     di,word ptr [CodeBuf2Addr]
@@:
        mov     ah,2
        int     10h
        mov     ah,8
        int     10h
        stosw
        inc     dl
        cmp     dl,80
        jb      @b
        xor     dl,dl
        inc     dh
        cmp     dh,25
        jb      @b
        jmp     short ChgEnvrRestore
SaveCodeBufferEnd:
        ret

;--------------------------------
RestoreCodeBuffer:
        test    [KbStat],ReqEnvrChg
        jz      RestoreCodeBufferEnd
        mov     al,[dSaveCurrPage]
        mov     ah,5
        int     10h
        mov     bh,[dSaveCurrPage]
        mov     ah,3
        int     10h                     ; get cursor position
;       mov     [dSaveCurType],cx        ; save cursor type
        or      ch,20h                  ; disable cursor
        mov     ah,1
        int     10h
        xor     dx,dx
        mov     cx,1
        mov     si,word ptr [CodeBuf2Addr]
@@:
        mov     ah,2
        int     10h
        lodsw
        mov     bl,ah
        mov     ah,9
        int     10h
        inc     dl
        cmp     dl,80
        jb      @b
        xor     dl,dl
        inc     dh
        cmp     dh,25
        jb      @b
ChgEnvrRestore:
        mov     bh,[dSaveCurrPage]
        mov     cx,[dSaveCurType]        ; restore cursor type
        mov     ah,1
        int     10h
        mov     dx,[dSaveCurPos]         ; restore cursor position
        mov     ah,2
        int     10h
RestoreCodeBufferEnd:
        ret

;------------------------------------------------------------------------
;   << RestoreScrn >>
; FUNCTION =  restore menu screen
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS, ES, BP, FLAG
RestoreScrn:
        pushf
        mov     bh,[dSaveCurrPage]
        mov     dx,MainPos
        mov     si,offset MenuBuffer
        mov     cx,80*3
RestoreLp:
        mov     ah,2
        int     10h
        push    cx
        lodsw
        mov     cx,1
        mov     bl,ah
        mov     ah,9
        int     10h
        pop     cx
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        inc     dh
@@:
        loop    RestoreLp
        mov     dx,[dSaveCurPos]
        mov     ah,2
        int     10h
        mov     cx,[dSaveCurType]
        mov     ah,1
        int     10h
        popf
        ret


=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\hecon.asm ===
TITLE   Hangeul/Hanja Console Device Driver Header
        page    ,132

;****************************************************************************;
; (C)Copyright Qnix Co., Ltd., 1985-1991.                                    ;
; This program contains proprietary and confidential information.            ;
; All rights reserved.                                                       ;
;****************************************************************************;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; File name: HECON.ASM
;; Description:
;;      These routine are the header of HECON.SYS which is Installable
;;      Device Driver that is the console device driver to handle
;;      Hangeul/Hanja console IO services
;;
;;      Called routine:
;;              HAN_INIT   -   procedure in INIT.ASM file
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.sall                                   ; supress macro listings

BreakInt        equ     1bH * 4
;
;------------------------------------------------------------------------
;       MACRO DEFINITION                                                ;
;------------------------------------------------------------------------
; Given a label <lbl> generate either 2 byte jump to another label <lbl>_J
; if it is near enough or 3 byte jump to <lbl>
;
Jump    macro lbl
    local a
 .xcref

    ifndef lbl&_J                       ; is this the first invocation
a:      jmp lbl
    else
        if (lbl&_J GE $) or ($-lbl&_J GT 126)
a:      jmp lbl                         ; is the jump too far away?
        else
a:      jmp lbl&_J                      ; do the short one...
        endif
    endif
    lbl&_j = a
 .cref
endm
 .xcref  Jump
;------------------------------------------------------------------------

code    segment public byte 'code'
        assume  cs:code, ds:code

INCLUDE EQU.INC

if      ComFile
        org     100h
extrn   HanInit:near
HeconStart:
        jmp     HanInit
else

HeconStart:                     ; dummy

; start of HECON.SYS routine
public  ConHeader
ConHeader       label   word
                dw      -1,-1           ; pointer to next device
                dw      1000000001010011B ; con-in and con-out + special
                dw      Strategy        ; strategy entry point
                dw      ConIO           ; interrupt entry point
                db      'CON     '      ; device name

ConTbl:
                db      13h
                dw      ConInit         ;0
                dw      Exit            ;1
                dw      Exit            ;2
                dw      CmdErr          ;3
                dw      ConRead         ;4
                dw      ConCheck        ;5
                dw      Exit            ;6
                dw      ConFlush        ;7
                dw      ConWrite        ;8
                dw      ConWrite        ;9
                dw      Exit            ;A
                dw      Exit            ;B
if      hdos60
                dw      Exit            ;C
                dw      Exit            ;D
                dw      Exit            ;E
                dw      Exit            ;F
                dw      Exit            ;10H
                dw      Exit            ;11H
                dw      Exit            ;12H
                dw      GenIoctl        ;13H
                dw      Exit            ;14H
endif   ;  hdos60

        page
;
; The next nine equ's describe the offset into the request header for
; different information.  For example STATUS is in byte 3 of the request
; header (starting count at zero).
;
CmdLen  =       0                       ; length of this command
Unit    =       1                       ; sub unit specifier
Cmd     =       2                       ; command code
Status  =       3                       ; status
Media   =       13                      ; media descriptor
Trans   =       14                      ; transfer address
Count   =       18                      ; count of blocks or characters
Start   =       20                      ; first block to transfer
Extra   =       22                      ; Usually pointer to Vol Id for err 15

if      hdos60
; Bilingual implementation
WansungCode     =       949
ChohabCode      =      1361
EnglishCode     =       437
SetCode         =       04ah

IoctlReq        struc
                db      13 dup(?)
MajorCode       db      ?
MinorCode       db      ?
SiReg           dw      ?
DiReg           dw      ?
DataBuf         dd      ?
IoctlReq        ends
endif   ;   hdos60

;
; PtrSav - pointer save
;
; This variable holds the pointer to the Request Header passed by a program
; wishing to use a device driver.  When the strategy routine is called
; it puts the address of the Request header in this variable and returns.
;
public  PtrSav
PtrSav          dd      0

Foo     proc    far
Strategy:
        mov     word ptr cs:[PtrSav],bx
        mov     word ptr cs:[PtrSav+2],es
        ret
Foo     endp

;
; This section is the prolog to all default device drivers.  All registers
; are saved, the registers are filled with information fromthe request header,
; and the routine from the jump table is called.  Error checking is done
; to assure command code is valid.  Before calling the routine in the
; jump table the register are:
;
;       AH = Media Descriptor
;       BX = offset to PtrSav (request header is therefore at DS:BX)
;       CX = count from request header
;       DS:SI = tranfer address
;
; Once the routine finishes its job it jumps back to one of the eight
; pieces of code below labeled Exit Points.
;

;------------------------------------------------------------------------
;
;                       Device entry point
;
; The following ten pieces of code are the interrupt entry points for the
; default device drivers.  These small pieces of code have two jobs.
;
;       1) Make SI point to the beginning of the proper command jump table.
;          SI must first be pushed to preserve original contents.
;
; Con device:
;
ConIO:
Entry:
        sti                             ; enable interrupts
        push    ax                      ; save all registers
        push    bx
        push    cx
        push    si
        push    ds
        mov     si,offset ConTbl        ; get pointer to console IO table
        lds     bx,cs:[PtrSav]          ; get pointer to I/O packet
        mov     cx,ds:[bx].Count        ; cx = count
        mov     al,ds:[bx].Cmd
        cmp     al,cs:[si]              ; is command code a valid number?
        ja      CmdErr                  ; no, jump to handle error
        cbw                             ; note that al <= 15 means OK
        shl     ax,1
        inc     si
        add     si,ax                   ; get di to point to address of routine
        mov     ah,ds:[bx].Media        ; ah = media descriptor
        shr     ah,1
        shr     ah,1
        jmp     word ptr cs:[si]        ; go to the command

        page

;------------------------------------------------------------------------
;
;               Exit  Points
;
; All device driver call return through one of these eight
; pieces of code.  The code set error and status conditions
; and then restores the registers.
;
CmdErr:
;       sub     [bx].Count,cx           ; # of successful I/O's
        mov     ax,1000000100000011B    ; mark error(unknown command) & return
        jmp     short Exit1
BusyExit:                               ; device busy exit
        mov     ah,00000011B            ; set error code
        jmp     short Exit1
Exit:
        mov     ah,00000001B
Exit1:  lds     bx,cs:[PtrSav]
Exit2:  and     ah,11111011b
        mov     [bx].Status,ax          ; mark operation complete
        pop     ds                      ; restore register and return
        pop     si
        pop     cx
        pop     bx
        pop     ax
FarRet1 proc    far
        ret
FarRet1 endp

;------------------------------------------------------------------------
;                                                                       ;
;             C O N - Console Device Driver                             ;
;                                                                       ;
;------------------------------------------------------------------------
;
; Device Header for the CON Device Driver
;
; ALTAH is a single character buffer used to handle special keys.
;

AltAH           db      0               ; Special key handling

;------------------------------------------------------------------------
;                                                                       ;
;                   Console Read routine                                ;
;                                                                       ;
;------------------------------------------------------------------------
ConRead:
        jcxz    ConReadExit             ; to be read -- just exit
        lds     si,ds:[bx].Trans        ; get ds:si to point to trans addr
        test    ah,00000001B
        jnz     ConReadNonDisp
        mov     bx,0                    ; get complete char code
ConReadLoop:
        call    CharIn                  ; get char in al
        mov     ds:[si],al              ; store char at ds:si, specified buffer
        inc     si                      ; point to next buffer position
        loop    ConReadLoop             ; if cx is non-zero more char to read
ConReadExit:
        Jump    Exit                    ; all done, successful return

ConReadNonDisp:
        mov     bx,(240 shl 8)          ; get interim char code
        cmp     cx,1
        jne     ConReadNonDispLoop
        call    CharIn                  ; get char in al
        mov     ds:[si],al              ; store char at ds:si, specified buffer
        inc     si                      ; point to next buffer position
        cmp     ah,0f0H                 ; interim char?
        jne     ConReadExit             ; jump no
        mov     ah,00000101B            ; indicate interim char
        Jump    Exit1

ConReadNonDispLoop:
        call    CharIn                  ; get char in al
        cmp     ah,0f0H                 ; interim char?
        je      ConReadNonDispLoop      ; jump so
        mov     ds:[si],al              ; store char at ds:si, specified buffer
        inc     si                      ; point to next buffer position
        loop    ConReadNonDispLoop      ; if cx is non-zero more char to read
        Jump    Exit

;------------------------------------------------------------------------
;                                                                       ;
;           Input single character into AL                              ;
;                                                                       ;
;------------------------------------------------------------------------
CharIn:
        xor     ax,ax                   ; set cmd and clear al
        xchg    al,cs:[AltAH]           ; get character & zero AltAH
        or      al,al                   ; see if buffer has a character
        jnz     CharInRet               ; if so - return this character
        mov     ax,bx
        int     16H                     ; call ROM-Bios keyboard routine
        or      ax,ax                   ; Check for non-key after BREAK
        jz      CharIn
        cmp     ax,7200H                ; Check for Ctrl-PrtSc
        jnz     CharInOk
        mov     al,16                   ; indicate prtsc
CharInOk:
        or      al,al                   ; special case?
        jnz     CharInRet               ; no, return with character
        mov     cs:[AltAH],ah           ; yes, store special key
CharInRet:
        ret

;----------------------------------------------------------------
;                                                               :
;          Keyboard non destructive read, no wait               :
;                                                               :
; If bit 10 is set by the DOS in the status word of the request :
; packet, and there is no character in the input buffer, the    :
; driver issues a system WAIT request to the ROM. On return     :
; from the ROM, it returns a 'char-not-found' to the DOS.       :
;                                                               :
;----------------------------------------------------------------
ConCheck:
        mov     al,cs:[AltAH]           ; first see if there is a
        or      al,al                   ; character in the buffer?
        jnz     ConCheckExit            ; yes, return that character
                                        ; no, continue
        mov     bx,(1 shl 8)
        test    ah,00000001B
        jz      ReConCheck              ; jump if wanted complete char code
        mov     bx,(241 shl 8)
ReConCheck:
        mov     ax,bx
        int     16H                     ; call ROM-BIOS keyboard routine
        jz      ConBusy                 ; not available char, jump to busy
        or      ax,ax                   ; check for null after break
        jnz     ConCheckOk              ; no, skip down
; note: AH is already zero, no need to set command
        int     16H                     ; yes, read the null
        jmp     short ReConCheck

ConCheckOk:
        cmp     ah,0f0H                 ; incomplete scan code?
        jnz     ConCheckFinal
        lds     bx,cs:[PtrSav]          ; get pointer to request header
        mov     [bx].Media,al           ; move character into req. header
        mov     ah,00000101B            ; indicate interim char
        Jump    Exit2
ConCheckFinal:
        cmp     ax,7200H                ; check for Ctrl-PrtSc
        jnz     ConCheckExit            ; no
        mov     al,16                   ; yes, indicate Ctrl-PrtSc
ConCheckExit:
        lds     bx,cs:[PtrSav]          ; get pointer to request header
        mov     [bx].Media,al           ; move character into req. header
        Jump    Exit                    ; all done -- successful return

ConBusy:
        Jump    BusyExit                ; done -- con device is busy

;----------------------------------------------------------------
;                                                               :
;               Keyboard flush routine                          :
;                                                               :
;----------------------------------------------------------------
ConFlush:
        mov     cs:[AltAH],0            ; clear out holding buffer
        mov     ah,243                  ; Keyboard flush entry
        int     16H
        Jump    Exit

;----------------------------------------------------------------
;                                                               :
;              Console Write Routine                            :
;                                                               :
;----------------------------------------------------------------
ConWrite:
        cld                             ; clear the direction flag
        jcxz    ConWriteExit            ; if cx is zero, get out
        lds     si,ds:[bx].Trans        ; get ds:si to point to trans addr
        mov     bx,7                    ; set page #(bh), foreground color(bl)
        test    ah,00000001B
        jnz     ConWriteLoopNac         ; output character & no cursor advance
ConWriteLoop:
        lodsb                           ; get character
        mov     ah,0eH                  ; write char with cursor advancing
        int     10H                     ; call bios
        loop    ConWriteLoop            ; repeat until all through
ConWriteExit:
        mov     ah,00000001B
        lds     bx,cs:[PtrSav]
        mov     [bx].Status,ax          ; mark operation complete
        pop     ds                      ; restore register and return
        pop     si
        pop     cx
        pop     bx
        pop     ax
FarRet2 proc    far
        ret
FarRet2 endp

ConWriteLoopNac:
        lodsb                           ; get character
        mov     ah,0feH                 ; write char w/o cursor advancing
        int     10H                     ; call bios
        loop    ConWriteLoopNac         ; repeat until all through
        Jump    Exit

;------------------------------------------------
;
;       CONSOLE INIT ROUTINE
;
;------------------------------------------------
ConInit:
        push    dx                      ; save registers
; patch the BREAK key handling interrupt routine
        sub     ax,ax
        mov     ds,ax
        mov     bx,BreakInt
        mov     ax,offset cBreak
        mov     dx,cs
        cli
        mov     ds:[bx],ax
        mov     ds:[bx+2],dx
        sti
extrn   HanInit:near
        call    HanInit
;
;       Now, CX:DX points to the end of HECON.SYS resident part
;
        lds     bx,cs:[PtrSav]
        mov     [bx].Trans,dx
        mov     [bx].Trans+2,cx
        pop     dx                      ; restore registers
        Jump    Exit

;-----------------------------------------------------------------------
;
;       BREAK KEY HANDLING
;
;-----------------------------------------------------------------------
cBreak:
        mov     cs:[AltAH],3            ; indicate break key set
        push    ax                      ; save register
        mov     ah,243                  ; keyboard flush
        int     16H
        pop     ax                      ; recover register
        iret

if      hdos60
;
; Bilingual      implementation
;
extrn   ChangeCodeR:near
GenIoctl:
        mov     al,ds:[bx.MinorCode]
        cmp     al,SetCode
        je      @f
        jmp     CmdErr
@@:
        push    bx
        push    es
        push    dx
        les     bx,ds:[bx.DataBuf]
        mov     ax,es:[bx+2]
        mov     dl,0
        cmp     ax,WansungCode
        je      CallChange
        mov     dl,1
        cmp     ax,ChohabCode
        je      CallChange
        mov     dl,2
        cmp     ax,EnglishCode
        je      CallChange
        pop     dx
        pop     es
        pop     bx
        jmp     CmdErr
CallChange:
        mov     al,dl
        call    ChangeCodeR
        pop     dx
        pop     es
        pop     bx
        jmp     Exit
endif   ;   hdos60

endif   ; if ComFile

code    ends
        end     HeconStart
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\sources.inc ===
TARGETNAME=
TARGETTYPE=NOTARGET
TARGETPATH=
SOURCES=

NTTARGETFILE1=buildall

SOURCES_USED=..\sources.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\jong.inc ===
DW      0FFFFh
        DW      514h, 0F01Fh,3000h,3000h,3000h,2000h
        DW      514h, 0F80Fh,1800h,1800h,1800h,1000h
        DW      514h, 0FC07h,0C00h,0C00h,0C00h,800h
        DW      612h, 0F01Fh,3000h,3000h,3000h,3000h,2000h
        DW      514h, 0F03Fh,3006h,3006h,3006h,2004h
        DW      514h, 0F81Fh,1803h,1803h,1803h,1002h
        DW      514h, 0FC0Fh,8C01h,8C01h,8C01h,801h
        DW      612h, 0F03Fh,3006h,3006h,3006h,3006h,2004h
        DW      514h, 0E03Eh,6006h,0F006h,9807h,805h
        DW      514h, 701Fh,3003h,7803h,0CC03h,8402h
        DW      514h, 0B80Fh,9801h,0BC01h,0E601h,4201h
        DW      612h, 0E03Eh,6006h,6006h,0F006h,9807h,805h
        DW      514h, 1Ch,0Ch,0Ch,0Ch,0F007h
        DW      514h, 0Eh,6,6,6,0F803h
        DW      514h, 7,3,3,3,0FC01h
        DW      514h, 0F839h,6018h,0F018h,9819h,80Fh
        DW      514h, 0FC1Ch,300Ch,780Ch,0CC0Ch,8407h
        DW      612h, 0F839h,6018h,6018h,0F018h,9819h,80Fh
        DW      514h, 6038h,0F819h,0F018h,9819h,0F00Eh
        DW      514h, 301Ch,0FC0Ch,780Ch,0CC0Ch,7807h
        DW      612h, 0E000h,6038h,0F819h,0F018h,9819h,0F00Eh
        DW      514h, 0F01Fh,0Ch,0Ch,0Ch,0F007h
        DW      514h, 0F80Fh,6,6,6,0F803h
        DW      514h, 0FC07h,3,3,3,0FC01h
        DW      514h, 0F01Fh,3000h,0F01Fh,0Ch,0F007h
        DW      514h, 0F80Fh,1800h,0F80Fh,6,0F803h
        DW      514h, 0FC07h,0C00h,0FC07h,3,0FC01h
        DW      612h, 0F01Fh,3000h,0F01Fh,0Ch,0Ch,0F007h
        DW      514h, 0F03Fh,3006h,303Eh,3030h,201Eh
        DW      514h, 0F81Fh,1803h,181Fh,1818h,100Fh
        DW      514h, 0FC0Fh,8C01h,8C0Fh,0C0Ch,8807h
        DW      612h, 0F81Fh,1803h,181Fh,1818h,1818h,100Fh
        DW      514h, 0F03Fh,0B007h,0B03Fh,0B031h,0F01Eh
        DW      514h, 0F81Fh,0D803h,0D81Fh,0D818h,780Fh
        DW      514h, 0FC0Fh,0EC01h,0EC0Fh,6C0Ch,0BC07h
        DW      612h, 0F81Fh,0D803h,0D81Fh,0D818h,0D818h,780Fh
        DW      514h, 0B03Fh,0B007h,0F03Fh,0B031h,0F01Eh
        DW      514h, 0D81Fh,0D803h,0F81Fh,0D818h,780Fh
        DW      514h, 0EC0Fh,0EC01h,0FC0Fh,6C0Ch,0BC07h
        DW      612h, 0D81Fh,0D803h,0F81Fh,0D818h,0D818h,780Fh
        DW      514h, 0E03Eh,6006h,0F03Eh,9831h,81Fh
        DW      514h, 701Fh,3003h,781Fh,0CC18h,840Fh
        DW      514h, 0B80Fh,9801h,0BC0Fh,660Ch,0C207h
        DW      612h, 701Fh,3003h,301Fh,7818h,0CC18h,840Fh
        DW      514h, 0F03Fh,8007h,0F03Fh,8031h,0F01Eh
        DW      514h, 0F81Fh,0C003h,0F81Fh,0C018h,780Fh
        DW      514h, 0FC0Fh,0E001h,0FC0Fh,600Ch,0BC07h
        DW      612h, 0F81Fh,0C003h,0F81Fh,0C018h,0C018h,780Fh
        DW      514h, 0F83Fh,3007h,0B03Fh,0A031h,0F81Fh
        DW      514h, 0FC1Fh,9803h,0D81Fh,0D018h,0FC0Fh
        DW      514h, 0FE0Fh,0CC01h,0EC0Fh,680Ch,0FE07h
        DW      612h, 0FC1Fh,9803h,0D81Fh,0D818h,0D018h,0FC0Fh
        DW      514h, 603Eh,0F807h,0F03Eh,9831h,0F01Eh
        DW      514h, 301Fh,0FC03h,781Fh,0CC18h,780Fh
        DW      514h, 980Fh,0FE01h,0BC0Fh,660Ch,0BC07h
        DW      612h, 301Fh,0FC03h,781Fh,0CC18h,0CC18h,780Fh
        DW      514h, 0F01Fh,300Ch,300Ch,300Ch,0F00Fh
        DW      514h, 0F80Fh,1806h,1806h,1806h,0F807h
        DW      514h, 0FC07h,0C03h,0C03h,0C03h,0FC03h
        DW      514h, 701Ch,300Ch,0F00Fh,300Ch,0F00Fh
        DW      514h, 380Eh,1806h,0F807h,1806h,0F807h
        DW      514h, 1C07h,0C03h,0FC03h,0C03h,0FC03h
        DW      612h, 701Ch,300Ch,0F00Fh,300Ch,300Ch,0F00Fh
        DW      514h, 0E00Eh,6076h,0F03Eh,9837h,83Fh
        DW      514h, 7007h,303Bh,781Fh,0CC1Bh,841Fh
        DW      514h, 0B803h,981Dh,0BC0Fh,0E60Dh,0C20Fh
        DW      612h, 7007h,303Bh,301Bh,781Fh,0CC1Bh,841Fh
        DW      514h, 8003h,8001h,0C003h,600Ch,1830h
        DW      514h, 0C001h,0C000h,0E001h,3006h,0C18h
        DW      514h, 0E000h,6000h,0F000h,1803h,60Ch
        DW      612h, 8003h,8001h,8003h,6006h,300Ch,1830h
        DW      514h, 0E01Ch,600Ch,0F01Eh,9833h,842h
        DW      514h, 700Eh,3006h,780Fh,0CC19h,421h
        DW      514h, 3807h,1803h,0BC07h,0E60Ch,8210h
        DW      612h, 600Ch,3006h,3006h,780Fh,0CC19h,421h
        DW      514h, 0E007h,300Ch,300Ch,300Ch,0E007h
        DW      514h, 0F003h,1806h,1806h,1806h,0F003h
        DW      514h, 0F801h,0C03h,0C03h,0C03h,0F801h
        DW      514h, 0F01Fh,8001h,6003h,3006h,1818h
        DW      514h, 0F80Fh,0C000h,0B001h,1803h,0C0Ch
        DW      514h, 0FC07h,6000h,0D800h,8C01h,606h
        DW      612h, 0F01Fh,8001h,8001h,6003h,3006h,1818h
        DW      514h, 8003h,0F81Fh,0C001h,6007h,181Ch
        DW      514h, 0C001h,0FC0Fh,0E000h,0B003h,0C0Eh
        DW      612h, 8003h,0F81Fh,8001h,0C003h,3006h,1818h
        DW      514h, 0F01Fh,3000h,0F01Fh,3000h,2000h
        DW      514h, 0F80Fh,1800h,0F80Fh,1800h,1000h
        DW      514h, 0FC07h,0C00h,0FC07h,0C00h,800h
        DW      612h, 0F01Fh,3000h,0F01Fh,3000h,3000h,2000h
        DW      514h, 0F01Fh,0Ch,0F00Fh,0Ch,0F007h
        DW      514h, 0F80Fh,6,0F807h,6,0F803h
        DW      514h, 0FC07h,3,0FC03h,3,0FC01h
        DW      612h, 0F01Fh,0Ch,0F00Fh,0Ch,0Ch,0F007h
        DW      514h, 0F81Fh,6004h,6006h,4006h,0F81Fh
        DW      514h, 0FC0Fh,3002h,3003h,2003h,0FC0Fh
        DW      612h, 8003h,0F01Fh,0C007h,600Ch,600Ch,0C007h
        DW      612h, 0C001h,0F80Fh,0E003h,3006h,3006h,0E003h
        DW      612h, 0E000h,0FC07h,0F001h,1803h,1803h,0F001h
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\jongi.inc ===
DW      0,2,14,26,38,52,64,76
        DW      88,102,114,126,138,152,164,176
        DW      152,188,188,200,212,226,238,238
        DW      250,264,276,288,264,300,312,324
        DW      336,350,362,374,386,400,412,424
        DW      436,450,462,474,486,500,512,524
        DW      536,550,562,574,586,600,612,624
        DW      636,650,662,674,686,700,712,724
        DW      700,736,748,760,772,786,798,810
        DW      822,836,848,860,872,886,898,910
        DW      922,936,948,960,936,972,984,996
        DW      1008,1022,1022,1034,1046,1060,1072,1084
        DW      1096,1110,1122,1134,1146,1160,1160,1172
        DW      1160,1184,1198,1212,1184
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\jungi.inc ===
DW      0,2,34,34,2,34,34,56
        DW      88,88,56,88,88,110,142,142
        DW      110,142,142,164,196,196,164,196
        DW      196,218,250,250,272,250,304,326
        DW      358,358,380,358,412,434,466,466
        DW      488,466,520,542,574,574,596,574
        DW      628,650,662,662,670,680,680,688
        DW      720,720,742,720,774,796,828,828
        DW      850,828,882,904,936,936,958,936
        DW      990,1012,1026,1026,1036,1046,1046,1054
        DW      1072,1072,1080,1072,1096,1108,1140,1140
        DW      1162,1140,1194,1216,1248,1248,1270,1248
        DW      1302,1324,1356,1356,1378,1356,1410,1432
        DW      1450,1450,1458,1450,1474,1486,1490,1490
        DW      1486,1490,1490,1494,1526,1526,1548,1526
        DW      1526,1580,1612,1612,1580,1612,1612
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\kor\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH) \
	 DBCS_FLAGS="-DDBCS -DKOREA"       
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\kb.asm ===
TITLE   KeyBoard Interrupt 09h 16h

;=======================================================================;
; (C)Copyright Qnix Computer Co. Ltd.   1992                            ;
; This program contains proprietary and confidential information.       ;
; All rights reserved.                                                  ;
;=======================================================================;

;=======================================================================;
;                                                                       ;
;              SPECIFICATION for keyboard                               ;
;                                                                       ;
;=======================================================================;
;
;  KBD service routine video routine   video INT
; sub-routine ϰų  data/flag ؼ ʵȴ.
;
; KBD Spec. : KS C 5853
;           : KS C 5842 - 1991
;
; Keyboard type : english 84 KBD
;               : hangeul 86 KBD(none standard)
;               : hangeul 86 KBD(KS C 5853)
;               : 101 KBD
;               : 103 KBD(KS C 5853)
;
; Etc. Spec. : user definable HE/HJ key scan code
;            : Hot key detection & service

CODE    SEGMENT PUBLIC WORD 'CODE'
ASSUME  CS:CODE,DS:CODE,ES:CODE

INCLUDE         EQU.INC

;=======================================================================;
;                                                                       ;
;                      GLOBAL DATA & FLAG                               ;
;                                                                       ;
;=======================================================================;
;
;   κп KBD main routine Ǵ ͸ ǥϿ ̵
; ̴  Ѵ  ֵѴ.
;  ----------- EQUATION -----------
HanEngKey       =       03800H
HanjaKey        =       01d00H
BanJunKey       =       08300H
Upper2Low       =       020H
HjNumOf1Line    =       10

EXTRN   HanCardReset:near, pHanCardReset:near, EnvrChange:near
EXTRN   KbStat:byte, HjStat:byte, HjMenuStat:byte,TotalMenuCnt:byte
EXTRN   OldKbInt:dword, OldKbioInt:dword, CodeStat:byte,KbdType:byte
EXTRN   DisplayStat:byte, HanStat:byte, HjMenuLine:byte
EXTRN   MenuBuffer:word, MenuLineBuf:word, KbMisc:byte, HotStat:byte

EXTRN   CompleteCharCnt:word, CompleteCharBuf:word, InterimCharCnt:word
EXTRN   InterimCharBuf:word, Auto:byte, TmpKbdType:byte
EXTRN   InterimCurPage:byte,InterimMaxCols:byte,InterimCurPos:word
EXTRN   SavedChar1:byte,SavedChar2:byte
EXTRN   MenuPtr:byte, CurrMenuCnt:byte, SaveCurrPage:byte, CrtMaxCols:byte
EXTRN   SaveCurPos:word, SaveCurType:word, prebufptr:word
EXTRN   DispIChar1:byte, DispIChar2:byte, InterimDispP:word
EXTRN   PreInCode:word, CurInCode:word, TmpBuf:word, PreTmpBuf:word
EXTRN   KsKbBuf:word, TmpBufCnt:byte
if      WINNT
EXTRN   ActiveCodePage:word
endif

;=======================================================================;
;                                                                       ;
;                      KEYBOARD INTERRUPT 9                             ;
;                                                                       ;
;=======================================================================;
;
;   << Int9 >>
; FUNCTION = KBD hardware interrupt service routine
; Int9(-/-)
;         {
;         /* save AX, DS */
;         DS = KbSeg;
;         AL = in port 60H;
;         if (AL == DelKey) && ([rKbFlag] == (AltFlag || CtrlFlag))
;                 {
;                 /* save DX */
;                 HanCardReset(-/-);
;                 pHanCardReset(-/-);
;                 /* reset 3bf port */
;                 /* Restore DX, DS, AX */
;                 /* goto cs:[OldKbInt] */
;                 }
;         /* save BX, CX, DX */
;         BX = [rBufferTail];
;         AH = [rKbFlag3]
;         DL = [rKbFlag]
;         /* call cs:[OldKbInt] */
;         if (CheckHeHjKey(AL/CX,flag) == NC)
;               {
;               if (AX == HanjaKey) && ([rKbFlag] == 00000100)
;                       {
;                       CS:[KbStat] = CS:[KbStat] || ReqEnvrChg;
;                       [rBufferTail] = BX
;                       }
;               else
;                       if (CS:[KbStat] == HanKeyinMode), PushKeyBuf(BX,CX/-);
;               }
;         else
;                 {
;                 if ((CS:[KbStat] == HanKeyinMode) && ([rKbFlag] == CapsFlag)&&
;                     (BX != [rBufferTail]) && ((A<=AL<=Z)||(a<=AL<=z))
;                         XOR [rBufferTail],00100000b;
;                 }
;         if ([rKbFlag3] == Ext10xKey)
;                 {
;                 cs:[KbStat] = cs:[KbStat] || Ext10xKey
;                 if (cs:[KbStat] != UserDefineKey) /* off right ALT+CTRL flag */
;                 }
;         /* restore DX, CX, BX, DS, AX */
;         iret;
;         }
;

EXTRN   MachineType:byte, HeKey:byte, HjKey:byte
PUBLIC  Int9, PushKeyBuf
E0Flag  db      0

Int9:
ASSUME  DS:KBSEG
if      Debug
Extrn   DebugData:word
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f0h
        and     ax,0ff0fh
        add     bx,10h
        and     bx,0f0h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
        @push   ax,ds
        mov     ax,seg KbSeg
        mov     ds,ax
        in      al,60h
        cmp     al,DelKey
        jnz     @f
        mov     ah,[rKbFlag]
        and     ah,00001100b
        cmp     ah,00001100b
        jnz     @f
        push    dx
        call    HanCardReset
        call    pHanCardReset
        mov     dx,3bfh
        mov     al,3
        out     dx,al
        mov     dl,0b8h
        mov     al,28h
        out     dx,al
        xor     al,al
        mov     dl,0bfh
        out     dx,al
        @pop    dx,ds,ax
        jmp     cs:[OldKbInt]
@@:
        @push   bx,cx,dx
        mov     bx,[rBufferTail]
        mov     dl,[rKbFlag]
        mov     ah,[rKbFlag3]
        test    cs:[E0Flag],00000001b
        jz      @f
        or      ah,00000010b    ;e0flag
        mov     [rKbFlag3],ah
@@:
        and     cs:[E0Flag],11111110b
        cmp     al,0e0h
        jnz     @f
        or      cs:[E0Flag],00000001b
@@:
;;      cmp     al,0e0h
;;      jnz     @f
;;      or      ah,00000010b    ;e0flag
;;      mov     [rKbFlag3],ah
@@:
        pushf
        call    cs:[OldKbInt]
;       mov     al,ah
;       out     21h,al
;       pop     ax
        call    CheckHeHjKey
        jc      NoneHeHjKey
if      HotKey
        cmp     ax,HanjaKey
        jnz     @f
        test    dl,00000100b            ; Ctrl + HanJa
        jz      @f
        cmp     cs:[HeKey], 1
        je      @f
        cmp     cs:[HeKey], 2
        je      @f
        or      cs:[KbStat],ReqEnvrChg
        mov     [rBufferTail],bx
        jmp     short Int9hExit
@@:
endif   ; if HotKey
if      AltHotKey
        cmp     ax,HanEngKey
        jnz     @f
        test    dl,00001000b            ; Alt + HanEng
        jz      @f
        cmp     cs:[HeKey], 2
        je      @f
        or      cs:[KbStat],ReqEnvrChg
        or      cs:[HotStat],AltHotChg
        mov     [rBufferTail],bx
        jmp     short Int9hExit
@@:
endif   ; if AltHotKey
        test    cs:[KbStat],HanKeyinMode
        jz      Int9hExit
        cmp     ax,HanjaKey
        jnz     @f
        test    dl,00001000b            ; Alt + HanJa
        jz      @f
        mov     [rBufferTail],bx
        jmp     short Int9hExit
@@:
        call    PushKeyBuf
        jmp     short Int9hExit
NoneHeHjKey:
        test    cs:[KbStat],HanKeyinMode
        jz      Int9hExit
        test    cs:[KbStat],HEStat
        jz      Int9hExit
        test    [rKbFlag],01000000B
        jz      Int9hExit
        mov     bx,cs:[PreBufPtr]       ; get prev buffer pointer
        cmp     bx,[rBufferTail]
        je      Int9hExit
        mov     al,byte ptr [bx]
        cmp     al,'A'
        jb      Int9hExit
        cmp     al,'z'
        ja      Int9hExit
        cmp     al,'Z'
        jbe     @f
        cmp     al,'a'
        jb      Int9hExit
@@:
        xor     byte ptr [bx],00100000b
Int9hExit:
        mov     ax,[rBufferTail]         ; get ptr of ROM kb buffer tail
        mov     cs:[PreBufPtr],ax
        test    [rKbFlag3],Ext10xKey
        jz      @f
        or      cs:[KbStat],Ext10xKey
if      Kbd101On
        test    cs:[KbStat],UserDefineKey
        jnz     @f
else
        test    cs:[KbdType],SetKbd101
        jz      @f
endif
        and     [rKbFlag3],11110011b
        and     [rKbFlag],11110011b
        mov     ah,[rKbFlag1]
        and     ah,3
        shl     ah,1
        shl     ah,1
        or      [rKbFlag],ah
@@:
        @pop    dx,cx,bx,ds,ax
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f0h
        and     ax,0ff0fh
        sub     bx,10h
        and     bx,0f0h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
        iret

;------------------------------------------------------------------------
;   << PushKeyBuf >>
; FUNCTION =  push ѿ/ key to buffer
; INPUT   : AX = han/eng or hanja key, BX = buffer pointer
; OUTPUT  : none
; PROTECT :
; PushKeyBuf(AX,BX/-)
;       {
;       CX = BX;
;       if (CX == [rBufferTail])
;               {
;               CX = CX + 2;
;               if (CX == [rBufferEnd])
;                       CX = [rBufferStart];
;               }
;       if (CX == [rBufferHead])
;               Beep(-/-);
;       else
;               [BX] = AX;
;               [rBufferTail] = CX;
;       }
;
PushKeyBuf:
        mov     bx,[rBufferTail]
        mov     cx,bx
;       cmp     [rBufferTail],cx
;       jnz     @f
        inc     cx
        inc     cx
        cmp     cx,[rBufferEnd]
        jne     @f
        mov     cx,[rBufferStart]
@@:
        cmp     cx,[rBufferHead]
        je      KbBufFull
        mov     [bx],ax
        mov     [rBufferTail],cx
        ret
KbBufFull:
        call    Beep
        ret

PopKeyQueue PROC    Near
        push    di
        cli
        mov     di, rBufferHead
        cmp     di, rBufferTail
        je      @f
        inc     di
        inc     di
        cmp     di, rBufferEnd
        jne     @f
        mov     di, rBufferStart
@@:
        xchg    rBufferHead, di
        mov     di, [di]
@pkqTerm:
        sti
        pop     di
        ret
PopKeyQueue ENDP

INCLUDE debug.inc
;------------------------------------------------------------------------
;   << CheckHeHjKey >>
; FUNCTION =  check Han/Eng and Hanja key
; INPUT   : AL = raw code, AH = [rKbFlag3]
; OUTPUT  : (NC)AX = Han/Eng or Hanja code
;           (CY)AL = raw code
; PROTECT : BX
; CheckHeHjKey(AL/AX)
;       {
;       if ([KbStat] == UserDefineKey)
;               {
;               if (AL == [HeKey]), AX = HanEngKey, return(NC);
;               if (AL == [HjKey]), AX = HanjaKey, return(NC);
;               }
;       else
;               {
;               if ([MachineType] == AtMachine)
;                       {
;                       if ((AL = 0f2h) || (AL == 0f1h))
;                               {
;                               [HeKey] = 0f2h;
;                               [HjKey] = 0f1h;
;                               [KbStat] = [KbStat] || UserDefineKey;
;                               }
;                       }
;               else
;                       }
;                       if ((AL = 0f0h) || (AL == 0f1h))
;                               {
;                               [HeKey] = 0f0h;
;                               [HjKey] = 0f1h;
;                               [KbStat = [KbStat] || UserDefineKey;
;                               }
;                       }
;               if ([KbStat] == UserDefineKey)
;                       {
;                       if (AL == [HeKey]), AX = HanEngKey, return(NC);
;                       if (AL == [HjKey]), AX = HanjaKey, return(NC);
;                       }
;               else
;                       if ([rKbFlag3] == Ext10xKey)
;                               {
;                               if ([rKbFlag3] == /* E0 flag */)
;                                       {
;                                       if (AL == [HeKey]), AX = HanEngKey, return(NC);
;                                       if (AL == [HjKey]), AX = HanjaKey, return(NC);
;                                       }
;                               }
;                       else
;                               {
;                               if (AL == [HeKey]), AX = HanEngKey, return(NC);
;                               if (AL == [HjKey]), AX = HanjaKey, return(NC);
;                               }
;               }
;       return(CY);
;       }
;
EQUAL       =       0Dh
CTRL        =       1Dh
ALT         =       38h
SHIFT       =       2Ah
RSHIFT      =       36h
SPACE       =       39h
DEL         =       53h

ASSUME  DS:KBSEG
CheckHeHjKey:
        cmp     cs:[HeKey], 1
        jne     @checkNext
        cmp     al, SPACE
        jne     @noHotHe
@@:
        test    [rKbFlag], 00000010b    ; Check Left-Shift Pressed (HE)
    ;jnz     @HGHot
        jz      @f
        call    PopKeyQueue
        jmp     @HGHot
@@:
        test    [rKbFlag1], 00000001b   ; Check Left-Ctrl Pressed (HJ)
    ;jnz     @HJHot
        jz      @f
        call    PopKeyQueue
        jmp     @HJHot
@@:
        jmp     @noHotHj
@checkNext:
        cmp     cs:[HeKey], 2
        jne     @checkAltOrCtrl
        cmp     al, SHIFT
        je      @f
        cmp     al, RSHIFT
        jne     @noHotHj
@@:
        test    [rKbFlag], 00001000b      ; Check Alt Pressed (HE)
        jnz     @HGHot
        test    [rKbFlag], 00000100b      ; Check Ctrl Pressed (HJ)
        jnz     @HJHot
        jmp     SHORT @noHotHj

@checkAltOrCtrl:
        cmp     al, ALT
        je      @f
        cmp     al, CTRL
        jne     @noAltOrCtrl
@@:
        test    ah, 00000010b
        jz      @noHotHj
        cmp     al, cs:[HeKey]
        je      @HGHot
        cmp     al, cs:[HjKey]
        je      @HjHot
        jmp     @noHotHj

@noAltOrCtrl:
        cmp     al, cs:[HeKey]
        je      @HGHot
        cmp     cs:[HeKey], 0F0h
        jne     @noHotHe
        cmp     al, 0F2h
        jne     @noHotHe

@HGHot:
        mov     cx, HanEngKey
        jmp     @end
@noHotHe:
        cmp     al, 1
        je      @noHotHj
        cmp     al, cs:[HjKey]
        jne     @noHotHj
@HjHot:
        mov     cx, HanjaKey
        jmp     @end
@noHotHj:
        stc
        ret
@end:
        mov     ax, cx
        clc
        ret

if 0 ; 1993/7/21 skkhang
if      Kbd101On
        test    cs:[KbStat],UserDefineKey
        jnz     CompHeHjKey
@@:
        test    cs:[MachineType],AtMachine
        jnz     AtHe103Cmp
        cmp     al,0f0h
        je      @f
        cmp     al,0f1h
        jne     AtCmpEo
@@:
        mov     cs:[HeKey],0f0h
        mov     cs:[HjKey],0f1h
        or      cs:[KbStat],UserDefineKey
        jmp     AtCmpEo
AtHe103Cmp:
        cmp     al,0f2h
        je      @f
        cmp     al,0f1h
        jne     AtCmpEo
@@:
        mov     cs:[HeKey],0f2h
        mov     cs:[HjKey],0f1h
        or      cs:[KbStat],UserDefineKey
AtCmpEo:
        test    cs:[KbStat],UserDefinekey
        jnz     CompHeHjKey
        test    [rKbFlag3],Ext10xKey
        jz      CompHeHjKey
        test    ah,00000010b
        jnz     CompHeHjKey
else
        test    cs:[KbdType],SetKbd101
        jz      CompHeHjKey
        test    ah,00000010b
        jnz     CompHeHjKey
endif
        stc
        ret
CompHeHjKey:
        mov     cx,HanEngKey
        cmp     al,cs:[HeKey]
        jz      CompHeHjKeyS
        mov     cx,HanjaKey
        cmp     al,cs:[HjKey]
        jz      CompHeHjKeyS
if      VirtualKey
        test    [rKbFlag3],Ext10xKey
        jnz     @f
        mov     ah,[rKbFlag]
        test    ah,00000011b            ; LRShift
        jz      @f
        test    ah,00001100b            ; Alt+Ctrl
        jz      @f
        test    ah,00000100b            ;Ctrl
        jnz     CompHeHjKeyS
        mov     cx,HanEngKey
        jmp     CompHeHjKeyS
@@:
endif   ; VirtualKey
        stc
        ret
CompHeHjKeyS:
        mov     ax,cx
        clc
        ret
endif ;0


;************************************************************************
;**                                                                    **
;**                    KEYBOARD INTERRUPT 16H                          **
;**                                                                    **
;************************************************************************
;------------------------------------------------------------------------
;   << Kbd16hInt >>
; FUNCTION = keyboard interrupt service routine
; Int16(*/*)
;        {
;        Save BX,CX,DX,SI,DI,ES,DS,BP;
;        DS = ES = CS
;        BP = SP;
;        if ([KbStat] == ReqEnvrChg)
;                {
;                [KbStat] = [KbStat] || (not ReqEnvrChg)
;                if ([KbMisc] != RunningHot)
;                       {
;                       [KbMisc] = [KbMisc] || RunningHot
;                       EnvrChange(-/-);
;                       [KbMisc] = [KbMisc] && (not RunningHot)
;                }
;        if ([KbStat] != HanKeyinMode), /* call OldKbioInt() */;
;        else
;                {
;                switch(AH)
;                        {
;                        case 0    : GetCompleteCode(-/AX);
;                                    break;
;                        case 1    : CheckCompleteCode(-/ZF,AX);
;                                    break;
;                        case 2    : GetKbStatus(-/AX);
;                                    break;
;                        case 5    : PushCompleteCode(CX/AL);
;                                    break;
;                        case 10h  : GetCompleteCode(-/AX);
;                                    break;
;                        case 11h  : CheckCompleteCode(-/ZF,AX);
;                                    break;
;                        case 12h  : /* call OldKbioInt() */;
;                                    break;
;                        case 0f0h : GetInterimCode(-/AX);
;                                    break;
;                        case 0f1h : CheckInterimCode(-/ZF,AX);
;                                    break;
;                        case 0f2h : ChangeKbStatus(AL/AL);
;                                    break;
;                        case 0f3h : FlushKbBuffer(-/-);
;                                    break;
;                        case 0f4h : CtrlInterimDisplay(DX/-);
;                                    break;
;                        case 0f8h : xGetInterimCode(-/AX);
;                                    break;
;                        case 0f9h : xCheckInterimCode(-/ZF,AX);
;                                    break;
;                        case 0feh : CtrlHanJa(AL,BX,DL/AL,DL);
;                                    break;
;                        default   : /* call OldKbioInt() */;
;                        }
;                Restore BP,DS,ES,DI,SI,DX,CX,BX;
;                iret;
;                }
;        }
;

Extrn   EnvrChange:near, VideoActive:byte
PUBLIC  Int16

Int16:
ASSUME  DS:CODE, ES:CODE
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f000h
        and     ax,0fffh
        add     bx,1000h
        and     bx,0f000h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
        sti
        cld
        @push   bx,cx,dx,si,di,es,ds,bp
        mov     bp,cs
        mov     ds,bp
        mov     es,bp
        mov     bp,sp
if      HotKey
        test    [KbStat],ReqEnvrChg
        jz      @f
        test    [KbMisc],RunningHot
        jnz     @f
        or      [KbMisc],RunningHot
        inc     [VideoActive]
        call    EnvrChange
        dec     [VideoActive]
if      AltHotKey
        and     [HotStat],not AltHotChg
endif   ;   AltHotKey
        and     [KbStat],not ReqEnvrChg
        and     [KbMisc],not RunningHot
@@:
endif   ; if HotKey
        sub     bx,bx
        mov     bl,ah
        add     bl,10h
        cmp     bl,21h
        ja      OldInt16Call
        test    cs:[KbStat],HanKeyinMode
        jz      OldInt16Call
        cmp     bl,15h
        jbe     @f
        sub     bl,10
@@:
        shl     bx,1
        call    [bx+Int16Tbl]
        @pop    bp,ds,es,di,si,dx,cx,bx
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f000h
        and     ax,0fffh
        sub     bx,1000h
        and     bx,0f000h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
        iret

OldInt16jmp     label   word
        add     sp,2
OldInt16Call:
        @pop    bp,ds,es,di,si,dx,cx,bx
        cmp     ah,0f8h
        jnz     @f
        mov     ah,010h
@@:
        cmp     ah,0f9h
        jnz     @f
        mov     ah,011h
@@:
        cmp     ah,0f0h
        jnz     @f
        mov     ah,000h
@@:
        cmp     ah,0f1h
        jnz     @f
        mov     ah,001h
@@:
if      Debug
        pushf
        call    cs:[OldKbioInt]
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f000h
        and     ax,0fffh
        sub     bx,1000h
        and     bx,0f000h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
        iret
else
        jmp     cs:[OldKbioInt]
endif   ; if Debug

Int16Tbl       label   word
        dw      offset  GetInterimCode          ;AH=F0H
        dw      offset  CheckInterimCode
        dw      offset  ChangeKbStatus
        dw      offset  FlushKbBuffer
        dw      offset  CtrlInterimDisplay
        dw      offset  OldInt16jmp
        dw      offset  OldInt16jmp
        dw      offset  OldInt16jmp
        dw      offset  GetInterimCode
        dw      offset  CheckInterimCode
        dw      offset  OldInt16jmp
        dw      offset  OldInt16jmp
        dw      offset  OldInt16jmp
        dw      offset  OldInt16jmp
        dw      offset  CtrlHanJa               ;AH=FEH
        dw      offset  OldInt16jmp
        dw      offset  GetCompleteCode         ;AH=00H
        dw      offset  CheckCompleteCode       ;AH=01H
        dw      offset  GetKbStatus             ;AH=02H
        dw      offset  OldInt16jmp             ;AH=03H
        dw      offset  OldInt16jmp             ;AH=04H
        dw      offset  PushCompleteCode        ;AH=05H
        dw      offset  GetCompleteCode         ;AH=10H
        dw      offset  CheckCompleteCode       ;AH=11H


;========================================================================
;   << GetCompleteCode >>
; FUNCTION = get complete code
; INPUT   : none
; OUTPUT  : AX = KBD scan code & system scan code
; PROTECT : AX
; GetCompleteCode(AH/AX)
;        {
;        [TmpKbdType] = AH;
;        while (![CompleteCharCnt])
;                {
;                DispInterimChar(-/-);
;                AH = [TmpKbdType];
;                /* call [OldKbioInt] */
;                Automata(AX/-);
;                }
;        ClearInterimChar(-/-);
;        GetCompleteChar(-/AX,flag);
;        }

GetCompleteCode:
        mov     [TmpKbdType],ah
WaitCompleteKeyin:
        cmp     [CompleteCharCnt],0
        jne     @f
        call    DispInterimChar
        call    WaitKeyin
        call    Automata
        jmp     WaitCompleteKeyin
@@:
        call    ClearInterimChar
        call    GetCompleteChar
        call    Filter84
        ret
;------------------------------------------------------------------------
Filter84:
        pushf
        test    [TmpKbdType],Ext10xKey
        jnz     @f
        cmp     ah,0f0h
        jae     @f
        mov     bx,ax
        mov     al,0
        cmp     bl,0e0h
        jz      @f
        mov     ax,bx
        cmp     bh,0e0h
        jnz     @f
        mov     ah,35h
        cmp     bl,2fh
        jz      @f
        mov     ah,1ch
        cmp     bl,0dh
        jz      @f
        cmp     bl,0ah
        jz      @f
        mov     ax,bx
@@:
        popf
        ret


;========================================================================
;   << GetInterimCode >>
; FUNCTION = get interim code
; INPUT   : none
; OUTPUT  : AX = KBD scan code & system scan code
; PROTECT : AX
; GetInterimCode(AH/AX)
;        {
;        AH = AH && 00001000b;
;        AH = AH shl 1;
;        [TmpKbdType] = AH;
;        while (![CompleteCharCnt]) || (![InterimCharCnt])
;                {
;                AH = [TmpKbdType];
;                /* call [OldKbioInt] */
;                Automata(AX/-);
;                }
;        if ([CompleteCharCnt])
;                GetCompleteChar(-/AX,flag);
;        else
;                GetInterimChar(-/AX,flag);
;        }
GetInterimCode:
        and     ah,00001000b
        shl     ah,1
        mov     [TmpKbdType],ah
WaitInterimKeyin:
        cmp     [CompleteCharCnt],0
        jne     GetCompleteCharCall
        cmp     [InterimCharCnt],0
        jnz     GetInterimCharCall
        call    WaitKeyin
        call    Automata
        jmp     WaitInterimKeyin
GetCompleteCharCall:
        call    GetCompleteChar
        call    Filter84
        jmp     @f
GetInterimCharCall:
        call    GetInterimChar
@@:
        ret
;------------------------------------------------------------------------
WaitKeyin:
if      HotKey
        test    [KbStat],ReqEnvrChg
        jz      @f
        test    [KbMisc],RunningHot
        jnz     @f
        or      [KbMisc],RunningHot
        inc     [VideoActive]
        call    EnvrChange
        dec     [VideoActive]
if      AltHotKey
        and     [HotStat],not AltHotChg
endif   ;   AltHotKey
        and     [KbStat],not ReqEnvrChg
        and     [KbMisc],not RunningHot
@@:
endif   ; if HotKey
        mov     ah,[TmpKbdType]
        inc     ah
        pushf
        call    [OldKbioInt]
        jz      WaitKeyin
        mov     ah,[TmpKbdType]
        pushf
        call    [OldKbioInt]
        ret


;========================================================================
;   << CheckCompleteCode >>
; FUNCTION = check complete code
; INPUT   : none
; OUTPUT  : if ZF = 0, AX = KBD scan code & system scan code
; PROTECT : AX
; CheckCompleteCode(AH/AX,zero-flag)
;        {
;        [TmpKbdType] = AH;
;        while ((![CompleteCharCnt]) ||
;               (AH = [TmpKbdType], /* call [OldKbioInt] */ = NZ))
;                {
;                DispInterimChar(-/-);
;                AH = [TmpKbdType];
;                - AH;
;                /* call [OldKbioInt] */
;                Automata(AX/-);
;                }
;        AX = [CompleteCharBuf];
;        if ([CompleteCharCnt])
;                /* reset zero-flag */
;        else
;                /* set zero-flag */
;        Restore BP,BP,DS,ES,DI,SI,DX,CX,BX;     /* include return addr */
;        far ret 2;
;        }

CheckCompleteCode:
        dec     ah
        mov     [TmpKbdType],ah
CheckCompleteKeyin:
        mov     ax,[CompleteCharBuf]
        cmp     [CompleteCharCnt],0
        jne     @f
        call    DispInterimChar
        mov     ah,[TmpKbdType]
        inc     ah
        pushf
        call    [OldKbioInt]
        jz      @f
        mov     ah,[TmpKbdType]
        pushf
        call    [OldKbioInt]
        call    Automata
        jmp     CheckCompleteKeyin
@@:
        call    Filter84
        pop     bp
        @pop    bp,ds,es,di,si,dx,cx,bx
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f000h
        and     ax,0fffh
        sub     bx,1000h
        and     bx,0f000h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
FarRet2 proc    far
        ret     2
FarRet2 endp


;========================================================================
;   << CheckInterimCode >>
; FUNCTION = check interim code
; INPUT   : none
; OUTPUT  : if ZF = 0, AX = KBD scan code & system scan code
; PROTECT : AX
; CheckInterimCode(AH/AX,zero-flag)
;        {
;        AH = AH && 00001000b;
;        AH = AH shl 1;
;        + AH;
;        [TmpKbdType] = AH;
;        if !((![CompleteCharCnt]) || ([InterimCharCnt] == 1))
;                {
;                while ((![CompleteCharCnt]) || (![InterimCharCnt]) ||
;                       (AH = [TmpKbdType], /* call [OldKbioInt] */ = NZ))
;                        {
;                        AH = [TmpKbdType];
;                        - AH;
;                        /* call [OldKbioInt] */
;                        Automata(AX/-);
;                        }
;                }
;        if ([CompleteCharCnt])
;                {
;                AX = [CompleteCharBuf];
;                /* reset zero-flag */
;                }
;        else
;                {
;                if ([InterimCharCnt] == 0)
;                        /* set zero-flag */
;                else
;                        {
;                        AX = [InterimCharBuf];
;                        /* reset zero-flag */
;                        }
;                }
;        Restore BP,BP,DS,ES,DI,SI,DX,CX,BX;
;        far ret 2;
;        }

CheckInterimCode:
        and     ah,00001000b
        shl     ah,1
        mov     [TmpKbdType],ah
CheckInterimKeyin:
        mov     ax,[CompleteCharBuf]
        cmp     [CompleteCharCnt],0
        jne     CheckInterimCodeRet
        cmp     [InterimCharCnt],1
        jz      CheckInterimCode2nd
        mov     ah,[TmpKbdType]
        inc     ah
        pushf
        call    [OldKbioInt]
        jz      CheckInterimCode1st
        mov     ah,[TmpKbdType]
        pushf
        call    [OldKbioInt]
        call    Automata
        jmp     CheckInterimKeyin
CheckInterimCode2nd:
        mov     ax,[InterimCharBuf+2]
        jmp     short @f
CheckInterimCode1st:
        mov     ax,[InterimCharBuf]
@@:
        cmp     [InterimCharCnt],0
CheckInterimCodeRet:
        call    Filter84
        pop     bp
        @pop    bp,ds,es,di,si,dx,cx,bx
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f000h
        and     ax,0fffh
        sub     bx,1000h
        and     bx,0f000h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
FarRet  proc    far
        ret     2
FarRet  endp


;========================================================================
;   << GetKbStatus >>
; FUNCTION = get keyboard status(84/86 KBD)
; INPUT   : none
; OUTPUT  : AX = 84/86 KBD status
; PROTECT : none
; GetKbStatus(AH/AX)
;        {
;        AH = [KbStat]
;        AH = AH && Ext10xKey
;        [TmpKbdType] = AH
;        while (([CompleteCharCnt] < 16) &&
;               (AH = [TmpKbdType] || 1, /* call [OldKbioInt] */ = NZ))
;                {
;                ClearInterimChar(-/-);
;                AH = [TmpKbdType];
;                /* call [OldKbioInt] */
;                Automata(AX/-);
;                }
;        AH = 2;
;        /* call [OldKbioInt] */
;        AH = [KbStat];
;        AH = AH && (JJStat || HEStat);
;        }

GetKbStatus:
        mov     ah,[KbStat]
        and     ah,Ext10xKey
        mov     [TmpKbdType],ah
@@:
        cmp     [InterimCharCnt],1
        jz      @f
        cmp     [CompleteCharCnt],16
        jae     @f
        mov     ah,[TmpKbdType]
        inc     ah
        pushf
        call    [OldKbioInt]
        jz      @f
;       call    ClearInterimChar
        mov     ah,[TmpKbdType]
        pushf
        call    [OldKbioInt]
        call    Automata
        jmp     short @b
@@:
        mov     ah,2
        pushf
        call    [OldKbioInt]
        mov     ah,[KbStat]
        and     ah,(JJStat or HEStat)
        ret

;========================================================================
;   << PushCompleteCode >>
; FUNCTION = push complete code
; INPUT   : CX = KBD scan code & system scan code
; OUTPUT  : if error, AL = -1
; PROTECT : none
; PushCompleteCode(-/-)
;        {
;        AutoReset(-/-);
;        pushf
;        /* call OldKbioInt() */
;        }

PushCompleteCode:
        call    AutoReset
        pushf
        call    [OldKbioInt]
        push    ds
ASSUME  DS:KBSEG
        mov     bx,seg KbSeg
        mov     ds,bx
        mov     bx,[rBufferTail]         ; get ptr of ROM kb buffer tail
        mov     cs:[PreBufPtr],bx
ASSUME  DS:CODE
        pop     ds
        ret


;========================================================================
;   << FlushKbBuffer >>
; FUNCTION = flush kbd buffer & status flag without interim code
; INPUT   : none
; OUTPUT  : none
; PROTECT : none
; FlushKbBuffer(-/-)
;        {
;        /* Save DS */
;        DS = KbSeg;
;        BX = [rBufferStart];
;        [rBufferTail] = BX;
;        [rBufferHead] = BX;
;        /* Restore DS */
;        [CompleteCharCnt] = 0;
;        AutoReset(-/-);
;        }

FlushKbBuffer:
        push    ds
ASSUME  DS:KBSEG
        mov     bx,Seg KbSeg
        mov     ds,bx
        mov     bx,[rBufferStart]
        mov     [rBufferTail],bx
        mov     [rBufferHead],bx
ASSUME  DS:CODE
        pop     ds
        mov     [PreBufPtr],bx
        mov     [CompleteCharCnt],0
        call    AutoReset
        ret

;========================================================================
;   << CtrlInterimDisplay >>
; FUNCTION = interim display control
; INPUT   : DX = -1(interim display) or 0fefeh(interim not display)
; OUTPUT  : none
; PROTECT : none
; CtrlInterimDisplay(-/-)
;        {
;        if (DX == 0ffffh), [KbMisc] = [KbMisc] || InterimCtrlDisp;
;        if (DX == 0fefeh), [KbMisc] = [KbMisc] && !(InterimCtrlDisp);
;        }

CtrlInterimDisplay:
        cmp     dx,0ffffh
        jne     @f
        or      [KbMisc],InterimCtrlDisp
@@:
        cmp     dx,0fefeh
        jne     @f
        and     [KbMisc],not InterimCtrlDisp
@@:
        ret


;========================================================================
;   << ChangeKbStatus >>
; FUNCTION = change hangeul status
; INPUT   : AL = Hangeul/Hanja/Junja status
; OUTPUT  : if error, AL = -1
; PROTECT : none
; ChangeKbStatus(AL/AL)
;        {
;        BH = AL;
;        BL = AL && 00000011b            /* junja flag */
;        switch(BL)
;                case 0: SetBanja(-/AL)
;                        break;
;                case 1: SetJunja(-/AL)
;                        break;
;                case 2: ToggleBanJun(-/AL)
;                        break;
;                case 3: ChangeError(-/AL)
;        if (AL = 0)
;                {
;                BL = BL && 00001000b;   /* han/eng flag */
;                switch(BL)
;                        case 0:
;                                if ([KbStat] == HEStat)
;                                        {
;                                        [KbSTat] = [KbStat] && !(HEStat);
;                                        AutoReset(-/-);
;                                        }
;                                else
;                                        [KbSTat] = [KbStat] && !(HEStat);
;                                break;
;                        case 8:
;                                [KbSTat] = [KbStat] || HEStat;
;                                break;
;                }
;        }
; SetBanja(-/AL)
;        {
;        [KbStat] = [KbStat] && !(JJStat);
;        AL = 0;
;        }
; SetJunja(-/AL)
;        {
;        if ([HjStat] == HjLoaded)
;                {
;                [KbStat] = [KbStat] || JJStat;
;                }
;        else
;                AL = -1;
;        }
; ToggleBanJun(-/AL)
;        {
;        if ([KbStat] == JJStat)
;                SetBanja(-/AL);
;        else
;                SetJunja(-/AL);
;        }
; ChangeError(-/AL)
;        {
;         AL = -1, return;
;        }

ChangeKbStatus:
ifdef   WINNT
        cmp     cs:[ActiveCodePage], 949 ;For NT 5.0. 949=WanSungCP
        jz      @f
        mov     al,-1
        jmp     ChangeKbStatusRet
@@:
endif
        xor     bx,bx
        mov     bl,al
        and     bl,00000011b
        shl     bl,1
        mov     si,bx
        mov     bh,al
        call    [si+BanJunTbl]
        cmp     al,0
        jne     ChangeError
        and     bh,00001000b
        shr     bh,1
        mov     bl,[KbStat]
        and     [KbStat],11111011b
        or      [KbStat],bh
        xor     bl,bh
        test    bl,00000100b
        jz      ChangeKbStatusRet
        call    AutoReset
ChangeKbStatusRet:
        ret
SetHanInStat:
        or      [KbStat],HEStat
        ret

BanJunTbl       label   word
        dw      offset  SetBanja
        dw      offset  SetJunja
        dw      offset  ToggleBanJun
        dw      offset  ChangeError

SetBanja:
        and     [KbStat],not JJStat
        xor     al,al
        ret

SetJunja:
        mov     al,-1
        test    [HjStat],HjLoaded
        jz      @f
        or      [KbStat],JJStat
        xor     al,al
@@:
        ret

ToggleBanJun:
        test    [KbStat],JJStat
        jz      @f
        jmp     SetBanja
@@:
        jmp     SetJunja

ChangeError:
        mov     al,-1
        ret


;========================================================================
;   << CtrlHanJa >>
; FUNCTION : hanja function(see each sun-routines)
; INPUT    : AL=0, DL=0/1 - ó /
; OUTPUT   : AL=0/FFH -  Ϸ/Ұ
; INPUT    : AL=1
; OUTPUT   : DL=0/1 - ó / 
; INPUT    : AL=2, BX - ѱ۹ڵ(1st,2nd)
; OUTPUT   : AL=0/1/2 - ںȯϷ//شھ.
;            BX -ڹڵ(1st,2nd)
; INPUT    : AL=3, BX - ѱ۹ڵ(1st,2nd)
; OUTPUT   : AL=0/FFH - б Ϸ/شھ
;            ES:BX - ش ڿ ¹(/1st/2nd/1st/...2nd/0)
; INPUT    : AL=4, DL=ڸ޴ǥ
; OUTPUT   : AL=0/FFH -  Ϸ/Ұ
; PROTECT  : none
; CtrlHanJa(*/*)
;        {
;        if ([HjStat] == HjLoaded)
;                BX = [BP+rBX]
;                {
;                switch(AL)
;                        {
;                        case 0 :
;                                [HjStat] = [HjStat] && !(HjModeEnable);
;                                [HjStat] = [HjStat] || DL;
;                                break;
;                        case 1 :
;                                DL = [HjStat] && (HjModeEnable);
;                                [BP+rDX] = DL;
;                                break;
;                        case 2 : ChangeHangeul2Hanja(BX/AL,BX);
;                                break;
;                        case 3 :
;                                [BP + rKES] = CS;
;                                [BP + rKBX] = offset MenuBuffer;
;                                if (MakeHanjaList(BX/AL); AL == 0)
;                                        {
;                                        if ([TotalMenuCnt] > 1) ret(AL=FFh);
;                                        -[TotalMenuCnt]
;                                        DI = DI-4
;                                        ES:[DI] = 0
;                                        }
;                                break;
;                        case 4 :
;                                AH = 0Fh
;                                int 10h
;                                if DL < [MaxRows]
;                                        [HjMenuLine] = DL;
;                                        AL = 0;
;                                else
;                                        AL = -1;
;                                break;
;                        default: AL = -1;
;                        }
;                }
;        else
;                AL = -1;
;        }
;
; ChangeHangeul2Hanja(BX/AL,BX)
;        {
;        MakeHanjaList(BX/AL)
;        if ((!AL) && ([TotalMenuCnt] > 1))
;                {
;                SaveMenuline(-/-);
;                TrapLoop:
;                        AH = cs:[KbStat] && Ext10xKey
;                        /* call OldKbioInt */
;                if (TrapHjMenu(AX/flag,AL,BX) == NC && NZ), goto TrapLoop; ;                if (
;                else CY RestoreMenuLine(-/-); ret(AL=1);
;                [BP+rBX] = BX;
;                RestoreMenuline(-/-);
;                ret(AL=0);
;                }
;        else
;                ret(AL=2);
;        }
;
; MakeHanjaList(BX/AL,ES,BX)
;        {
;        [TotalMenuCnt] = 0;               /* clear counter */
;        AX = BX;
;        if [CodeStat] == Chab)
;                if (ChgCh2Ks(AX/AX,BX,flag) == CY), return(AL = -1);
;        DI = MenuBuffer;
;        if (MakeHanjaListHg(AX,DI/AX,DI,flag) == NC)
;                {
;                MakeHanjaListUdc(AX,DI/AX,DI,flag);
;                if ([CodeStat] == Chab)
;                        {
;                        DI = MenuBuffer;
;                        SI = DI;
;                        CL = [TotalMenuCnt];
;                        while (CL)
;                                {
;                                AL = [SI+1];
;                                AH = [SI];
;                                if ((ChgKs2Ch(AX/AX,BX,flag) == NC)
;                                        {
;                                        [DI+1] = AL;
;                                        [DI] = AH;
;                                        DI = DI + 2;
;                                        }
;                                SI = SI + 2;
;                                -CL;
;                                }
;                        AX = (DI - SI)/2;
;                        [TotalMenuCnt] = AL;
;                        }
;                CL = [MenuBuffer];
;                SI = MenuBuffer;
;                DI = SI;
;                while (CL)
;                        {
;                        AX = [SI];
;                        xchg AL,AH;
;                        [DI] = AX;
;                        DI = DI + 2;
;                        SI = SI + 2;
;                        -CL;
;                        }
;                ES:[DI] = 0
;                AL = 0;
;                }
;        else
;                AL = -1;
;        }

EXTRN   ChgCh2Ks:near,ChgKs2Ch:near

CtrlHanJa:
        mov     byte ptr [bp+rDX],0     ; assume hanja disabled(DL)
        test    [HjStat],HjLoaded
        jz      CtrlHanJaErr
        cmp     al,4
        ja      CtrlHanJaErr
        mov     bx,[bp+rBX]
        mov     cl,al
        xor     ch,ch
        mov     si,cx
        shl     si,1
        jmp     [si+HanjaSupportTbl]
CtrlHanJaErr:
        mov     al,-1
        ret

HanjaSupportTbl label   word
        dw      SetHjMode
        dw      GetHjMode
        dw      ChangeHangeul2Hanja
        dw      Hg2HjList
        dw      SetMenuLine

SetHjMode:
        and     [HjStat],not HjModeEnable
        and     dl,HjModeEnable
        or      [HjStat],dl
        ret

GetHjMode:
        mov     dl,[HjStat]
        and     dl,HjModeEnable
        mov     [bp+rDX],dl
        ret

ChangeHangeul2Hanja:
        call    MakeHanjaList
        or      al,al
        jnz     NoHanjaCode
        cmp     [TotalMenuCnt],1
        jbe     NoHanjaCode
        call    SaveMenuline
@@:
        mov     ah,cs:[KbStat]
        and     ah,Ext10xKey
        pushf
        call    [OldKbioInt]
        call    TrapHjMenu
        jc      @f
        jz      @b
        mov     [bp+rBX],ax
        call    RestoreMenuline
        xor     al,al
        ret
@@:
        call    RestoreMenuline
        mov     al,1
        ret
NoHanjaCode:
        mov     al,2
        ret

Hg2HjList:
        mov     [bp + rES],cs
        mov     ax,offset MenuBuffer
        dec     ax
        mov     [bp + rBX],ax
        call    MakeHanjaList
        or      al,al
        jnz     @f
        cmp     [TotalMenuCnt],1
        jbe     ReturnFail
        dec     [TotalMenuCnt]
        sub     di,4
        stosw
@@:
        ret

SetMenuLine:
        mov     ah,0fh
        int     10h
        mov     al,-1
        cmp     dl,ah
        jae     @f
        mov     [HjMenuLine],dl
        mov     al,0
@@:
        ret

MakeHanjaList:
        mov     [TotalMenuCnt],0
        mov     ax,bx
        test    [CodeStat],chab
        jz      @f
        call    ChgCh2Ks
        jc      ReturnFail
@@:
        mov     di,offset MenuBuffer
        call    MakeHanjaListHg
        jc      ReturnFail
        call    MakeHanjaListUdc
        test    [CodeStat],Chab
        jz      MakeHjWan
        mov     di,offset MenuBuffer
        mov     si,di
        mov     cl,[TotalMenuCnt]
        dec     cl
        cmp     cl,0
        jz      MakeHjcho
MakeHJListLoop:
        lodsw
        call    ChgKs2Ch
        jc      @f
        stosw
@@:
        dec     cl
        jnz     MakeHjListLoop
MakeHjcho:
        lodsw
        call    Ks2Ch
        stosw
        sub     di,si
        shr     di,1
        mov     ax,di
        sub     [TotalMenuCnt],al
MakeHjWan:
        mov     cl,[TotalMenuCnt]
        mov     si,offset MenuBuffer
        mov     di,si
@@:
        lodsw
        xchg    al,ah
        stosw
        dec     cl
        jnz     @b
        xor     ax,ax
        stosw
        ret
ReturnFail:
        mov     al,-1
        ret


;------------------------------------------------------------------------
; << DisplayHanja >>
; FUNCTION = display Hj menu (end with null)
; INPUT   : none ([MenuPtr], [MenuBuffer], [CurrMenuCnt])
; OUTPUT  : none
; PROTECT : ax, bx, cx, dx, si
; DisplayHanja()
;       {
;       BH = [SaveCurrPage];
;       DX = CX = 0;
;       DH = [HjMenuLine];
;       AH = 2;
;       INT 10h;
;       CL = [CrtMaxCols]
;       BL = 70h;
;       AH = 09;
;       AL = ' ';
;       INT 10h;
;       DL = 15;
;       AH = 2;
;       INT 10h;
;       BH = 0
;       BX = [MenuPtr] * 2;
;       SI = BX+offset MenuBuffer;
;       CX=[CurrMenuCnt];
;       BH = '0';
;       BL = 70h;
;       if ([ModeId] == 6*2)
;               bl = 0fh;
;       while (CL != 0)
;               {
;               AL = BH;
;               AH = 0Eh;
;               INT 10h;
;               AL = '.';
;               INT 10h;
;               /* display [DS:SI];word */
;               /* display '  ' */
;               +BH;
;               -CX;
;               }
;       if ( [DS:SI] != 0 )  ;the end of hanja list
;               /* display NextMenuMsg */
;       return;
;       }
NextMenuMsg     db      '...',0
ModeVal db      0

DisplayHanja:
        mov     bh,[SaveCurrPage]
        xor     cx,cx
        mov     dx,cx
        mov     dh,[HjMenuLine]
        mov     ah,2
        int     10h
        mov     cl,[CrtMaxCols]
        mov     bl,70H
        mov     ah,9
        mov     al,' '
        int     10h
        cmp     [ModeVal],6*2
        jnz     @f
        mov     ax,00601h
        mov     bh,0ffh
        mov     cx,dx
        mov     dl,[CrtMaxCols]
        dec     dl
        int     10h
        mov     bh,[SaveCurrPage]
        xor     ch,ch
@@:
        mov     dl,15
        mov     ah,2
        int     10h
        xor     bh,bh
        mov     bl,[MenuPtr]
        shl     bx,1
        mov     si,offset MenuBuffer
        add     si,bx
        mov     cl,[CurrMenuCnt]
        mov     bh,'0'
        mov     bl,70h
        cmp     [ModeVal],6*2
        jnz     @f
        mov     bl,0ffh
@@:
        mov     al,bh
        mov     ah,0Eh
        int     10h
        mov     ah,0Eh
        mov     al,'.'
        int     10h
        lodsw
        mov     dx,ax
        mov     ah,0Eh
        int     10h
        mov     al,dh
        mov     ah,0Eh
        int     10h
        mov     al,' '
        mov     ah,0Eh
        int     10h
        mov     al,' '
        mov     ah,0Eh
        int     10h
        inc     bh
        loop    @b
        lodsw
        or      ax,ax
        jz      DisplayHanjaRet
        mov     si,offset NextMenuMsg
@@:
        lodsb
        or      al,al
        jz      DisplayHanjaRet
        mov     ah,0Eh
        int     10h
        jmp     @b
DisplayHanjaRet:
        ret


;------------------------------------------------------------------------
;   << DispInterimChar >>
; FUNCTION = ̿ϼ  DISPLAY
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX,BX,CX,DX
; DispInterimChar(-/-)
;        {
;        if !(([HjMenuStat] == HjMenuMode) || ([KbMisc] != HaveInterim) ||
;            ([KbMisc] != InterimCtrlDisp) || ([InterimCharCnt] < 2) ||
;            [HanStat] == Han1st))
;                {
;                [DisplayStat] = [DisplayStat] && !(RunEsc);
;                [KbMisc] == [KbMisc] && !(HaveInterim);
;                AH = 0FH;
;                Int 10h;
;                [InterimCurPage] = BH;
;                [InterimMaxCols] = AH-1;
;                AH = 3;
;                Int 10h;
;                if (([KbMisc] == SavedInterim) &&
;                    (([InterimCurPage] != bh) || ([InterimCurPos] != dx)))
;                       {
;                       [KbMisc] = [KbMISC] && !(SavedInterim);
;                       xchg BH,[InterimCurPage];
;                       xchg DX,[InterimCurPos];
;                       AH = 2;
;                       int 10h
;                       AH = 8;
;                       int 10h
;                       if ([DispIChar1] == al)
;                               {
;                               DL+
;                               AH = 2
;                               int 10h
;                               AH = 8
;                               int 10h
;                               if ([DispIChar2] == al)
;                                       {
;                                       CX = 1
;                                       DL-
;                                       AH = 2
;                                       int 10h
;                                       AH = 8
;                                       int 10h
;                                       BL = AH
;                                       AL = [SavedChar1]
;                                       AH = 9
;                                       int 10h
;                                       DL+
;                                       AH = 2
;                                       int 10h
;                                       AH = 8
;                                       int 10h
;                                       BL = AH
;                                       AL = [SavedChar2]
;                                       AH = 9
;                                       int 10h
;                                       }
;                               }
;                       xchg BH,[InterimCurPage];
;                       xchg DX,[InterimCurPos];
;                       AH = 2;
;                       int 10h
;                       }
;                if (DL >= [InterimMaxCols])
;                        {
;                        AH = 8;
;                        Int 10h
;                        BL = AH;
;                        AX = 0e20h;
;                        Int 10h
;                        AH = 3
;                        Int 10h
;                        }
;                CX = 1;
;                AH = 8
;                Int 10h
;                if ([KbMisc] != SavedInterim)
;                        {
;                        [InterimCurPos] = DX;
;                        [SavedChar1] = AL
;                        }
;                BL = AH;
;                AL = [InterimCharBuf];
;                AH = 9;
;                Int 10h
;                +DL;
;                AH = 2;
;                Int 10h
;                AH = 8;
;                Int 10h
;                if ([KbMisc] != SavedInterim)
;                        {
;                        [KbMisc] = [KbMisc] || SavedInterim;
;                        [SavedChar2] = AL
;                        }
;                BL = AH;
;                AL = [InterimCharBuf+2];
;                AH = 9;
;                Int 10h
;                -DL;
;                AH = 2;
;                Int 10h
;                }
;        }

DispInterimCharRet:
        ret
DispInterimChar:
        test    [HjMenuStat],HjMenuMode
        jnz     DispInterimCharRet
;       test    [KbMisc],HaveInterim
;       jz      DispInterimCharRet
        test    [KbMisc],InterimctrlDisp
        jz      DispInterimCharRet
        cmp     [InterimCharCnt],2
        jb      DispInterimCharRet
        test    [HanStat],Han1st
        jnz     DispInterimCharRet
        and     [DisplayStat],not RunEsc
;       and     [KbMisc],not HaveInterim
        mov     ah,0fh
        int     10h
        mov     ah,3
        int     10h
        cmp     [InterimDispP],dx
        jnz     @f
        mov     al,byte ptr [InterimCharBuf+2]
        cmp     al,[DispIChar2]
        jnz     @f
        mov     al,byte ptr [InterimCharBuf]
        cmp     al,[DispIChar1]
        jnz     @f
        jmp     DispInterimCharRet
@@:

        mov     ah,0fh
        int     10h
        dec     ah
        mov     [InterimMaxCols],ah
        mov     ah,3
        int     10h
        test    [KbMisc],SavedInterim
        jz      NormalAct
        cmp     [InterimCurPage],bh
        jnz     @f
        cmp     [InterimCurPos],dx
        jz      NormalAct
@@:
        and     [KbMisc],not SavedInterim
NormalAct:
        mov     [InterimCurPage],bh
        cmp     dl,[InterimMaxCols]
        jb      @f
        mov     ah,8
        int     10h
        mov     bl,ah
        mov     ax,0e20h
        int     10h
        mov     ah,3
        int     10h
@@:
        mov     cx,1
        mov     ah,8
        int     10h
        test    [KbMisc],SavedInterim
        jnz     @f
        mov     [InterimCurPos],dx
        mov     [SavedChar1],al
@@:
        mov     bl,ah
        mov     al,byte ptr [InterimCharBuf]
        mov     [DispIChar1],al
        mov     [InterimDispP],dx
        mov     ah,9
        int     10h
        inc     dl
        mov     ah,2
        int     10h
        mov     ah,8
        int     10h
        test    [KbMisc],SavedInterim
        jnz     @f
        or      [KbMisc],SavedInterim
        mov     [SavedChar2],al
@@:
        mov     bl,ah
        mov     al,byte ptr [InterimCharBuf+2]
        mov     [DispIChar2],al
        mov     ah,9
        int     10h
        dec     dl
        mov     ah,2
        int     10h
        ret


;------------------------------------------------------------------------
;   << ClearInterimChar >>
; FUNCTION = ̿ϼ  CLEAR
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX,BX,CX,DX
; ClearInterimChar(-/-)
;        {
;        if ([KbMisc] == SavedInterim)
;                {
;                [KbMisc] = [KbMisc] && !(SavedInterim);
;                if ([HanStat] != Han1st)
;                        {
;                        [DisplayStat] = [DisplayStat] && !(RunEsc);
;                        AH = 0Fh
;                        Int 10h
;                        AH = 3
;                        Int 10h
;                        CX = 1
;                        if (([InterimCurPage] != bh) || ([InterimCurPos] != dx))
;                               {
;                               xchg BH,[InterimCurPage];
;                               xchg DX,[InterimCurPos];
;                               AH = 2;
;                               int 10h
;                               AH = 8;
;                               int 10h
;                               if ([DispIChar1] == al)
;                                       {
;                                       DL+
;                                       AH = 2
;                                       int 10h
;                                       AH = 8
;                                       int 10h
;                                       if ([DispIChar2] == al)
;                                               {
;                                               DL-
;                                               AH = 2
;                                               int 10h
;                                               AH = 8
;                                               }
;                                       else
;                                               {
;                                               xchg BH,[InterimCurPage];
;                                               xchg DX,[InterimCurPos];
;                                               AH = 2;
;                                               int 10h;
;                                               ret;
;                                               }
;                               else
;                                       {
;                                       xchg BH,[InterimCurPage];
;                                       xchg DX,[InterimCurPos];
;                                       AH = 2;
;                                       int 10h;
;                                       ret;
;                                       }
;                               }
;                       int 10h
;                       BL = AH
;                       AL = [SavedChar1]
;                       AH = 9
;                       int 10h
;                       DL+
;                       AH = 2
;                       int 10h
;                       AH = 8
;                       int 10h
;                       BL = AH
;                       AL = [SavedChar2]
;                       AH = 9
;                       int 10h
;                       xchg BH,[InterimCurPage];
;                       xchg DX,[InterimCurPos];
;                       AH = 2;
;                       int 10h;
;                       }
;               }
;       }

ClearInterimCharretj:
        ret
ClearInterimChar:
        test    [KbMisc],SavedInterim
        jz      ClearInterimCharRetj
        and     [KbMisc],not SavedInterim
        test    [HanStat],Han1st
        jnz     ClearInterimCharRet
        and     [DisplayStat],not RunEsc
        mov     ah,0fh
        int     10h
        mov     ah,3
        int     10h
        mov     cx,1
        cmp     [InterimCurPage],bh
        jnz     @f
        cmp     [InterimCurPos],dx
        jz      ClearAct
@@:
        xchg    bh,[InterimCurPage]
        xchg    dx,[InterimCurPos]
        mov     ah,2
        int     10h
        mov     ah,8
        int     10h
        cmp     [DispIChar1],al
        jnz     @f
        inc     dl
        mov     ah,2
        int     10h
        mov     ah,8
        int     10h
        cmp     [DispIChar2],al
        jnz     @f
        dec     dl
        mov     ah,2
        int     10h
ClearAct:
        mov     ah,8
        int     10h
        mov     bl,ah
        mov     al,[SavedChar1]
        mov     ah,9
        int     10h
        inc     dl
        mov     ah,2
        int     10h
        mov     ah,8
        int     10h
        mov     bl,ah
        mov     al,[SavedChar2]
        mov     ah,9
        int     10h
@@:
        xchg    bh,[InterimCurPage]
        xchg    dx,[InterimCurPos]
        mov     ah,2
        int     10h
ClearInterimCharRet:
        ret


;------------------------------------------------------------------------
;   << GetCompleteChar >>
; FUNCTION = get character from complete character buffer
; INPUT   : none
; OUTPUT  : NC = success ; get code(AX)
;           CY = fail
; PROTECT : AX
; GetCompleteChar(-/AX,flag)
;        {
;        if ( CompleteCharCnt = 0 )  ret(CY);
;        else
;                {
;                AX = [CompleteCharBuf];
;                CompleteCharCnt-- ;
;                for (j=CompleteCharCnt;j=0;j--)
;                   [CompleteCharBuf]=[CompleteCharBuf+2];
;                ret(AX,NC);
;                }
;        }
GetCompleteChar:
        cmp     [CompleteCharCnt],0
        je      GetCompleteCharErr
        mov     bx,offset CompleteCharBuf
        mov     ax,[bx]
        mov     cx,[CompletecharCnt]
        dec     cx
        mov     [CompletecharCnt],cx
        jcxz    GetCompleteCharRet
@@:
        mov     dx,[bx+2]
        mov     [bx],dx
        add     bx,2
        loop    @b
GetCompleteCharRet:
        clc
        ret
GetCompleteCharErr:
        stc
        ret

;------------------------------------------------------------------------
;   << GetInterimChar >>
; FUNCTION = get character from interim character buffer
; INPUT   : none
; OUTPUT  : NC = success ; get code(AX)
;           CY = fail
; PROTECT : AX
; GetInterimChar(-/AX,flag)
;        {
;        if (InterimCharCnt = 0)  ret(CY);
;        else
;                {
;                AX = [InterimCharBuf];
;                InterimCharCnt--;
;                [InterimCharBuf]=[InterimCharBuf+2];
;                ret(AX,NC);
;                }
;        }
GetInterimChar:
        cmp     [InterimCharCnt],0
        je      @f
        mov     ax,[InterimCharBuf]
        dec     [InterimCharCnt]
        mov     dx,[InterimCharBuf+2]
        mov     [InterimCharBuf],dx
        clc
        ret
@@:
        stc
        ret


;------------------------------------------------------------------------
;   << PutCompleteHg >>
; FUNCTION = put ѱ code into complete character buffer
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX
; PutCompleteHg(-/-)
;        {
;        DH=CompleteHgAttr
;        DL=AH
;        AH=DH
;        PutCompleteBuf(DX,AX/-)
;        ret
;        }
; PutCompleteBuf(DX,AX/-)
;       {
;       BX = offset CompleteCharBuf
;       SI = [CompleteCharCnt] * 2
;       [BX+SI] = DX
;       [BX+SI+2] = AX
;       [CompleteCharCnt]+2
;       ret;
;       }
CompleteHgAttr  =       0f1H            ; attr of complete Hangeul code
PutCompleteHg:
        mov     dh,CompleteHgAttr
        mov     dl,ah
        mov     ah,dh
PutCompleteBuf:
        mov     bx,offset CompleteCharBuf
        mov     si,[CompleteCharCnt]
        shl     si,1
        mov     [bx+si],dx
        add     si,2
        mov     [bx+si],ax
        add     [CompleteCharCnt],2
        ret

;------------------------------------------------------------------------
;   << PutInterimHg >>
; FUNCTION = put ѱ code into interim character buffer
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX
; PutInterimHg(-/-)
;        {
;        DH=InterimHgAttr
;        DL=AL
;        AH=DH
;        [InterimCharBuf]=code;
;        [InterimCharCnt]+2;
;        [KbMisc]=[KbMisc]&&HaveInterim
;        ret;
;        }
InterimHgAttr   =       0f0H            ; attr of interim Hangeul code
PutInterimHg:
        mov     dh,InterimHgAttr
        mov     dl,ah
        mov     ah,dh
        mov     [InterimCharBuf],dx
        mov     [InterimCharBuf+2],ax
        mov     [InterimCharCnt],2
        or      [KbMisc],HaveInterim
        ret


;------------------------------------------------------------------------
;   << PutHjJjChar >>
; FUNCTION = put Hanja/Junja characters into CcKbBuf
; INPUT   : AX (Hj codes; ah-1st, al-2nd)
; OUTPUT  : [CompleteCharBuf],[CompleteCharCnt]
; PROTECT :
; PutHjJjChar()
;        {
;        DH=HanjaAttr
;        DL=AH
;        AH=DH
;        PutCompleteBuf(DX,AX/-)
;        ret
;        }
HanjaAttr       =       0f2H            ; Hanja attr converted at CCP
PutHjJjChar:
        mov     dh,HanjaAttr
        mov     dl,ah
        mov     ah,dh
        call    PutCompleteBuf
        ret


;------------------------------------------------------------------------
;   << MakeHanjaListHg >>
; FUNCTION = make hanja list
; INPUT   : AX = code,ES:DI = menubuffer
; OUTPUT  : none
; PROTECT : AX
; MakeHanjaListHg(AX,DI/AX,DI,flag)
;       {
;       if (AX is in code range)
;               {
;               CX = 0
;               DX = HjTblMax
;               if (BinarySearch(AX,CX,DX/FLAG,SI) == NC)
;                       {
;                       SI = SI*2 + offset IndexTbl
;                       CX = [SI+2]
;                       SI = [SI] + offset SetTbl
;                       [TotalMenuCnt]= [TotalMenuCnt]+CL
;                       do loop CX
;                               [ES:DI] = [DS:SI] ;word unit
;                       ret(NC);
;                       }
;               else
;                       ret(CY);
;               }
;       else
;               ret(CY);
;       }

HjTblMax        =       473 + 18 - 1

MakeHanjaListHg:
        cmp     ah,0a1h
        jb      MakeHanjaListHgRet
        cmp     ah,0feh
        ja      MakeHanjaListHgRet
        cmp     al,0a1h
        jb      MakeHanjaListHgRet
        cmp     al,0feh
        ja      MakeHanjaListHgRet
        mov     bx,offset MapTbl
        sub     cx,cx
        mov     dx,HjTblMax
        push    ax
        call    BinarySearch
        jc      @f
        shl     si,1
        add     si,offset IndexTbl
        mov     ch,0
        mov     cl,[si+2]
        mov     ah,[si+3]
        add     [TotalMenuCnt],cl
        mov     si,[si]
        add     si,offset SetTbl
        cmp     ah,0
        jnz     GetByteHj
        rep     movsw
        jmp     @f
GetByteHj:
        lodsb
        stosw
        loop    GetByteHj
        mov     cl,[TotalMenuCnt]
@@:
        pop     ax
        clc
        ret
MakeHanjaListHgRet:
        stc
        ret


;------------------------------------------------------------------------
;   << MakeHanjaListUdc >>
; FUNCTION = make hanja list + udc
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX
; MakeHanjaListUdc(AX,DI/AX,DI,flag)
;       {
;       if ([HjStat] == UdcLoaded)
;               {
;               BX = [UdcTblPtr]
;               CX = 0
;               DX = [BX+UdcMapTblSize]
;               BX = BX + [BX+UdcMapTblPtr]
;               if (BinarySearch(AX,BX,CX,DX/CY,SI)=NC)
;                       {
;                       BX = [UdctblPtr]
;                       SI = (SI*2 + [BX+UdcMapTblPtr] + BX)
;                       CX = [SI+2]
;                       SI = [SI]
;                       SI = (SI + [BX+UdcSetTblPtr] + BX)
;                       do loop CX
;                               [ES:DI] = [DS:SI] ;word unit
;                       ret(NC);
;                       }
;               else
;                       ret(CY);
;               }
;       else
;               ret(CY);
;       }

EXTRN   UdcTblPtr:word

MakeHanjaListUdc:
        test    [HjStat],UdcLoaded
        jz      @f
        mov     bx,[UdcTblPtr]
        sub     cx,cx
        mov     dx,[bx+UdcMapTblSize]
        add     bx,[bx+UdcMapTblPtr]
        call    BinarySearch
        jc      @f
        mov     bx,[UdcTblPtr]
        shl     si,1
        add     si,[bx+UdcIndexTblPtr]
        add     si,bx
        mov     cx,[si+2]
        mov     si,[si]
        add     si,[bx+UdcSetTblPtr]
        add     si,bx
        add     [TotalMenuCnt],cl
        rep     movsw
@@:
        inc     [TotalMenuCnt]
        stosw
        ret


;------------------------------------------------------------------------
;   << BinarySearch >>
; FUNCTION = search designated characters(word) in the given table
;            in word unit (emulate recursive call)
; INPUT   : AX (codes; ah-1st, al-2nd)
;           BX (table start address)
;           CX (low byte-index)
;           DX (high byte-index = # of items - 1)
; OUTPUT  : SI (word-index of matching code), if CC=0(NC)
;           no found, if CC=1(CY)
; PROTECT : cx, dx, si
; BinarySearch()
;       {
;       while (CX <= DX) && (AX != [BX+SI])
;               {
;               SI = (CX+DX)
;               SI = SI && (not 1)
;               if (AX > [BX+SI])
;                       {
;                       SI = (SI/2)+1
;                       CX = SI
;                       }
;               if (AX < [BX+SI])
;                       {
;                       SI = (SI/2)-1
;                       DX = SI
;                       }
;               }
;       if (AX = [BX+SI])
;               ret(NC,SI);
;       else
;               ret(CY);
BinarySearch:
        cmp     cx,dx
        jg      NotFound
        mov     si,cx
        add     si,dx
        and     si,not 1
        cmp     ax,[bx+si]
        ja      HighPart
        je      Found
LowPart:
        shr     si,1
        dec     si
        mov     dx,si
        jmp     BinarySearch
HighPart:
        shr     si,1
        inc     si
        mov     cx,si
        jmp     BinarySearch
NotFound:
        stc
Found:
        ret


;------------------------------------------------------------------------
;   << TrapHjMenu >>
; FUNCTION =  menu display ó control
; INPUT   : none
; OUTPUT  : ZR = next / back or other key
;           CY = escape key in flag
;           NZ,NC= success flag, AX = hanja code
; PROTECT : AX
; TrapHjMenu(AX/flag,AL,BX)
;       switch(AX)
;       {
;       case next menu key:   /* right arrow */
;               {
;               get maximum menu counter;
;               if ( maximum menu counter > # of hanja menu 1 line )
;                       {
;                       get menu pointer;
;                       add current menu counter to menu pointer;
;                       if ( menu pointer >= maximum menu counter )
;                            set menu pointer to 0;
;                       set (MaximumMenuCounter-MenuPointer) to CurMenuCnt
;                       if ( not last menu )
;                            set CurMenuCnt to # of hanja menu 1 line;
;                       DisplayHanja();
;                       ret(ZR);
;                       }
;               break;
;               }
;       case back menu key: /* left arrow */
;               {
;               if (maximum menu counter > # of hanja menu 1 line) &
;                   menu pointer is not 0 )
;                       {
;                       sub # of hanja menu 1 line from menu pointer;
;                       set current menu counter to # of hanja menu 1 line;
;                       DisplayHanja();
;                       ret(ZR);
;                       }
;               break;
;               }
;       case "esc":
;               {
;               ret(CY);
;               }
;       case  "0" =< AX =< "9"
;               {
;               if (the code =< current menu counter)
;                       {
;                       get selected code;
;                       ret(NZ,NC,AX);
;                       }
;               }
;       default:
;               {
;               beep();
;               ret(ZR);
;               }

TrapHjMenu:
        cmp     al,030h
        jb      @f
        cmp     al,039h
        jbe     TrapHjNum
@@:
        cmp     ah,04dh
        je      TrapHjNextMenu
        cmp     ah,04bh
        je      TrapHjBackMenu
        cmp     al,EscKey
        je      TrapHjMenuAbort
        jmp     TrapHjMenuErr
TrapHjNum:
        sub     al,030h
        cbw
        cmp     al,[CurrMenuCnt]
        jae     TrapHjMenuErr
        xor     bh,bh
        mov     bl,[MenuPtr]
        add     bx,ax
        shl     bx,1
        mov     ax,[bx+MenuBuffer]
        xchg    ah,al
        or      ax,ax
        ret
TrapHjNextMenu:
        mov     ah,[TotalMenuCnt]
        cmp     ah,HjNumOf1Line
        jbe     TrapHjMenuRet
        mov     al,[MenuPtr]
        add     al,[CurrMenuCnt]
        cmp     al,ah
        jb      @f
        sub     al,al
@@:
        mov     [MenuPtr],al
        neg     al
        add     al,ah
        cmp     al,HjNumOf1Line
        jbe     @f
        mov     al,HjNumOf1Line
@@:
        mov     [CurrMenuCnt],al
        call    DisplayHanja
        jmp     TrapHjMenuRet
TrapHjBackMenu:
        cmp     [TotalMenuCnt],HjNumOf1Line
        jbe     TrapHjMenuErr
        cmp     [MenuPtr],0
        je      TrapHjMenuErr
        sub     [MenuPtr],HjNumOf1Line
        mov     [CurrMenuCnt],HjNumOf1Line
        call    DisplayHanja
        jmp     TrapHjMenuRet
TrapHjMenuAbort:
        stc
        ret
TrapHjMenuErr:
        call    Beep
TrapHjMenuRet:
        sub     ax,ax
        ret


;------------------------------------------------------------------------
;   << SaveMenuLine >>
; FUNCTION = save menuǥ
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX
; SaveMenuLine(-/-)
;       {
;       AH = 0Fh;
;       int 10h
;       [SaveCurrPage] = bh;
;       [CrtMaxCols] = ah;
;       AH = 3;
;       int 10h
;       [SaveCurPos] = dx;
;       [SaveCurType] = cx;
;       CX = 2020h;
;       AH = 1;
;       int 10h
;       DL = 0;
;       DH = [HjMenuLine];
;       AH = 2;
;       int 10h
;       CL = [CrtMaxCols];
;       DI = offset MenuLineBuf
;       loop(CL)
;               {
;               AH = 8
;               int 10h
;               [ES:DI] = AX
;               +DL
;               AH = 2
;               int 10h
;               }
;       if ([TotalMenuCnt] > HjNumOf1Line)
;               [CurrMenuCnt] = HjNumOf1Line;
;       else
;               [CurrMenuCnt] = [TotalMenuCnt];
;       DisplayHanja();
;       ret;

SaveMenuLine:
        mov     ah,0fh
        int     10h
        mov     [SaveCurrPage],bh
        mov     [CrtMaxCols],ah
        mov     [ModeVal],6*2
        cmp     al,060h
        jz      @f
        cmp     al,011h
        jz      @f
        cmp     al,012h
        jz      @f
        mov     [ModeVal],0*2
@@:
        mov     ah,3
        int     10h
        mov     [SaveCurPos],dx
        mov     [SaveCurType],cx
        mov     cx,2020h
        mov     ah,1
        int     10h
        xor     dl,dl
        mov     dh,[HjMenuLine]
        mov     ah,2
        int     10h
        xor     ch,ch
        mov     cl,[CrtMaxCols]
        mov     di, offset MenuLineBuf
@@:
        mov     ah,8
        int     10h
        stosw
        inc     dl
        mov     ah,2
        int     10h
        loop    @b
        mov     al,[TotalMenuCnt]
        cmp     al,HjNumOf1Line
        jbe     @f
        mov     al,HjNumOf1Line
@@:
        mov     [CurrMenuCnt],al
        call    DisplayHanja
        ret


;------------------------------------------------------------------------
;   << RestoreMenuline >>
; FUNCTION = restore menuǥ
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX
; RestoreMenuline(-/-)
;       {
;       BH = [SaveCurrPage]
;       DL =0
;       DH = [HjMenuLine]
;       AH = 2
;       int 10h
;       CL = [CrtMaxCols]
;       SI = offset MenuLineBuf
;       loop (CX)
;               {
;               DI = CX
;               AX = [DS:SI]
;               /* display the char */
;               /* set cursor position */
;               CX = DI
;               }
;       DX = [SaveCurPos]
;       AH = 2
;       int 10h
;       CX = [SaveCurType]
;       AH = 1
;       int 10h
;       }
RestoreMenuline:
        xor     dl,dl
        mov     [MenuPtr],dl
        mov     bh,[SaveCurrPage]
        mov     dh,[HjMenuLine]
        mov     ah,2
        int     10h
        xor     ch,ch
        mov     cl,[CrtMaxCols]
        mov     si,offset MenuLineBuf
@@:
        mov     di,cx
        lodsw
        mov     cx,1
        mov     bl,ah
        mov     ah,9
        int     10h
        inc     dl
        mov     ah,2
        int     10h
        mov     cx,di
        loop    @b
        mov     dx,[SaveCurPos]
        mov     ah,2
        int     10h
        mov     cx,[SaveCurType]
        mov     ah,1
        int     10h
        ret


;------------------------------------------------------------------------
EXTRN   ChgKs2Ch7:near

Ch2KsAuto:
        test    [CodeStat],Chab
        jnz     ChabAuto
;        test    [CodeStat],Wsung7
;        jnz     @f
        jmp     Ch2Ks
@@:
        call    Ch2Ks
        jc      @f
        call    ChgKs2Ch7
@@:
        ret
ChabAuto:
        test    [CodeStat],InstPatGen
        jnz     @f
        push    ax
        call    Ch2Ks
        pop     ax
        ret
@@:
        clc
        ret
;------------------------------------------------------------------------
;   << Ch2Ks >>
; FUNCTION = convert chohab code to wansung code
; INPUT   : AX(XXYY)
; OUTPUT  : NC ;AX=ϼڵ
;           CY ;fail
; PROTECT : AX
; Ch2Ks(AX/AX,flag)
;       {
;       AH = AH - 80h
;       SI = offset ChHgIndexTbl
;       /* get DX=# of (XX-1) list */
;       CL = # of XX list
;       SI = offset XX list
;       if (LinearByteSearch(SI,CX/CC,BX) == NC)
;               {
;               BL = 05Eh
;               AX = SI + DX
;               AH = AX/BL ...AL
;               AX = AX + B0A1h
;               ret(NC);
;               }
;       SI = offset ChHgCTbl
;       CX = ChHgWLng-1
;       if (LinearWordSearch((SI,CX/CC,BX) == NC)
;               {
;               SI = SI/2
;               AH = 0A4h
;               BX = offset ChHgWTbl
;               AL = [SI+BX]
;               ret(NC);
;               }
;       ret(CY);
;       }
PUBLIC  ChHgWTbl, ChHgWLng, ChHgCTbl, ChHgIndexTbl, ah88h
PUBLIC  Ch2Ks, LinearWordSearch, LinearByteSearch

Ch2Ks:
        @push   cx,dx,si,di,es,ds
        push    ax
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        cmp     ax,08442h
        jb      Ch2KsErr
        cmp     ax,0845dh
        ja      @f
        cmp     ax,08452h
        je      Ch2KsErr
        call    Ch2Kscompn
        jmp     Ch2KsSuccess
@@:
        mov     si,offset ChHgCTbl
        mov     cx,ChHgWLng+1
        call    LinearWordSearch
        jc      @f
        shr     bx,1
        mov     ah,0a4h
        mov     si,offset ChHgWTbl
        mov     al,byte ptr [si+bx]
        jmp     Ch2KsSuccess
@@:
        cmp     ah,088h
        jb      Ch2KsErr
        sub     ah,088h
        mov     si,offset ChHgIndexTbl
        xor     bx,bx
        mov     cx,bx
        mov     dx,bx
        mov     bl,ah
        mov     cl,bl
        shl     bx,1
        add     bx,cx
        cmp     ah,0
        je      @f
        mov     dx,[si+bx+1]
        mov     cx,[si+1]
        sub     dx,cx
@@:
        xor     ch,ch
        mov     cl,[si+bx]
        mov     si,[si+bx+1]
        call    LinearByteSearch
        jc      Ch2KsErr
        mov     ax,bx
        add     ax,dx
        mov     bl,05eh
        div     bl
        xchg    ah,al
        add     ax,0B0A1h
Ch2KsSuccess:
        clc
        pop     bx
        @pop    ds,es,di,si,dx,cx
        ret
Ch2KsErr:
        stc
        pop     ax
        @pop    ds,es,di,si,dx,cx
        ret

Ch2Kscompn:
        mov     ah,0a4h
        add     al,05fh
        cmp     al,0a8h
        jb      @f
        add     al,1
        cmp     al,0b2h
        jb      @f
        sub     al,1
        cmp     al,0b3h
        jb      @f
        add     al,1
        cmp     al,0b9h
        jb      @f
        add     al,1
@@:
        ret

;------------------------------------------------------------------------
;   << Ks2Ch >>
; FUNCTION = convert chohab code to wansung code
; INPUT   : AX(XXYY)
PUBLIC  Ks2Ch
Ks2Ch:
        @push   cx,dx,si,di,es,ds
        push    ax
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        cmp     ah,0a4h
        jne     Ks2ChHg
        mov     si,offset ChHgWTbl
        mov     cx,ChHgWLng+1
        call    LinearByteSearch
        jc      Ks2ChHg
        shl     bx,1
        mov     si,offset ChHgCTbl
        mov     ax,word ptr [si+bx]
        jmp     Ks2ChEnd
Ks2ChHg:
        mov     si,offset ah88h
        sub     ax,0B0A1h
        mov     bx,ax
        mov     al,ah
        mov     ah,0A2h
        mul     ah
        sub     bx,ax
        mov     al,[bx+si]
        cmp     al,0
        je      Ks2ChErr
        mov     si,offset ChHgIndexTbl
        xor     dx,dx
        mov     cx,dx
        mov     ah,dh
@@:
        mov     cl,[si]
        add     dx,cx
        cmp     bx,dx
        jb      short @f
        add     si,3
        inc     ah
        jmp     short @b
@@:
        add     ah,088h
Ks2ChEnd:
        clc
        pop     bx
        @pop    ds,es,di,si,dx,cx
        ret
Ks2ChErr:
        pop     ax
        @pop    ds,es,di,si,dx,cx
        stc
        ret

;------------------------------------------------------------------------
;   << linearWordSearch >>
; linearWordSearch()
; FUNCTION = linear search word unit
; INPUT   : none
; OUTPUT  : BX (index) , if CC=0(NC)
;           not found , if CC=1(CY)
; PROTECT : AX
;
linearWordSearch:
        xor     bx,bx
@@:
        cmp     ax,[si+bx]
        je      @f
        add     bx,2
        loop    @b
        stc
@@:
        ret

;------------------------------------------------------------------------
;   << LinearByteSearch >>
; FUNCTION = linear search byte unit
; INPUT   : SI = pointer of list
;           CX = # of list
; OUTPUT  : BX (index), if CC=0(NC)
;           not found , if CC=1(CY)
; PROTECT : AX
LinearByteSearch:
        xor     bx,bx
@@:
        cmp     [si+bx],al
        je      @f
        inc     bx
        loop    @b
        stc
@@:
        ret


;------------------------------------------------------------------------
;   << Ban2Jun >>
; FUNCTION = code conversion from Banja to Junja if needed
; INPUT   : AX (English raw code)
; OUTPUT  : none ([CcKbCnt], [CcKbBuf])
; PROTECT : AX, BX, DX, SI
; Ban2Jun(AX/AX,flag)
;        {
;        BX = AX;
;        if ((!BH) && (BL>=' ') && (BL <= '~'))
;                {
;                if (BL = ' ')
;                        AX = 0a1a1h;
;                else
;                        {
;                        if (BL = '~')
;                                AX = 0a1adh;
;                        else
;                                {
;                                AH = 0a3h;
;                                AL = AL || 80h;
;                                }
;                        }
;                if ([CodeStat] == Chab)
;                         ChgKs2Ch(AX/AX,BX,flag);
;                /* reset carry */
;                }
;        else
;                AX = BX;
;                /* set carry */
;        }

BlankChar       =       ' '
TildeChar       =       '~'
JunjaBlankCode  =       0a1a1H
JunjaTildeCode  =       0a1adH
Junja1stCode    =       0a3H

Ban2Jun:
        test    [KbStat],JJStat
        jnz     PutJunja
PutBanja:
        mov     bx,offset CompleteCharBuf
        mov     si,[CompleteCharCnt]
        shl     si,1
        mov     [bx+si],ax
        inc     [CompleteCharCnt]
        ret
PutJunja:
        or      ah,ah
        jz      PutBanja
        cmp     al,BlankChar
        je      PutJunjaBlank
        jb      PutBanja
        cmp     al,TildeChar
        je      PutJunjaTilde
        ja      PutBanja
        mov     ah,Junja1stCode
        or      al,80H
        call    PutHjJjChar
        ret
PutJunjaBlank:
        mov     ax,JunjaBlankCode
        call    PutHjJjChar
        ret
PutJunjaTilde:
        mov     ax,JunjaTildeCode
        call    PutHjJjChar
        ret


;------------------------------------------------------------------------
;   << InitHjMenu >>
; FUNCTION =  prepare KS Hangeul code to Hanja code conversion
; INPUT   : none ([KbStatus])
; OUTPUT  : none (prepare KS Hangeul to Hanja conversion)
;           if there's no Hj for given Hg, beep & no action
; PROTECT : ax, bx, cx, dx, si
; InitHjMenu()
;       {
;       if ([HjStat] == HjModeEnable)
;               {
;               AH = 0Fh;
;               int 10h;
;               BL = AH; /* column */
;               AH = 3;
;               int 10h;
;               +DL
;               if (DL < BL)
;               AH = 8;
;               int 10h /* read char/attr at current cursor pos */
;               CH = AL;
;               +DL
;               AH = 2;
;               int 10h;
;               AH = 8;
;               int 10h;
;               CL = AL;
;               -DL
;               AH = 2;
;               int 10h;
;               AX = CX;
;               if (MakeHanjaList(AX/AL) == 0
;                       {
;                       SaveMenuLine();
;                       [HjMenuStat] = [HjMenuStat] || HjMenuMode;
;                       }
;               else
;                       {
;                       Beep();
;                       AutoReset(-/-);
;                       }
;               }
;       else
;               {
;               CX = AX;
;               AutoReset(-/-);
;               AX = CX;
;               PutBanja(AX/-);
;       }
InitHjMenu:
        test    [HjStat],HjModeEnable
        jz      InitHjMenuQuit
        mov     ah,0fh
        int     10h
        mov     bl,ah
        inc     bl
        mov     ah,3
        int     10h
        cmp     dl,bl
        jae     InitHjMenuErr
        mov     ah,8
        int     10h
        mov     ch,al
        inc     dl
        mov     ah,2
        int     10h
        mov     ah,8
        int     10h
        mov     cl,al
        dec     dl
        mov     ah,2
        int     10h
        mov     bx,cx
        call    MakeHanjaList
        or      al,al
        jnz     InitHjMenuErr
        call    SaveMenuLine
        or      [HjMenuStat],HjMenuMode
        ret
InitHjMenuErr:
        call    Beep
        call    AutoReset
        ret
InitHjMenuQuit:
        call    AutoReset
        mov     ax,0f100h
        call    PutBanja
        ret


;------------------------------------------------------------------------
;   << HjMenuSelect >>
; FUNCTION = select one from Hanja menu by numeric key('0'-'9')
;            and put them into CcKbBuf & clear automata state,
;            process next(right)/back(left) menu key & abort(Esc)
; INPUT   : ax (English raw code), Hanja Menu List
; OUTPUT  : [CcKbCnt], [CcKbBuf]<-(Hanja code), if selected
;            and restore menu line & cursor position,
;            no action(escape from this mode), if Esc,
;            prepare next/prev menu, if NextMenuKey/BackMenuKey,
;            no action, if any other key is pressed(ignore key-in)
; PROTECT : ax, bx, cx, dx, si
; HjMenuSelect()
;       {
;       if (TrapHjMenu(AX/CC,ZF,AX) == CY)
;               {
;               RestoreMenuLine();
;               [HjMenuStat] = [HjMenuStat] && !(HjMenuMode)
;               }
;       if (TrapHjMenu(AX/CC,ZF,AX) == NC && NZ)
;               {
;               PutHjJjChar(AX/-);
;               InitHanState(-/-);
;               RestoreMenuLine();
;               [HjMenuStat] = [HjMenuStat] && !(HjMenuMode)
;               }
;       }

HjMenuSelect:
        call    TrapHjMenu
        jc      AbortHjMenuSelect
        jz      @f
        call    PutHjJjChar
        call    InitHanState
AbortHjMenuSelect:
        call    RestoreMenuLine
        and     [HjMenuStat],not HjMenuMode
@@:
        ret


;------------------------------------------------------------------------
;   << Automata >>
; Automata(AX/-)
; FUNCTION = ѱ Automata
; INPUT   : AX=code(english law code)
; OUTPUT  : none,CompleteKbBuf,InterimKbBuf
; PROTECT : AX,BX
;
;        {
;        if ( HanVdMode )
;                {
;                if ( SupportHj & HjMenuMode )
;                        {
;                        if ( the code is HanjaKey ), Beep(); ret;
;                        HjMenuSelect();
;                        ret;
;                        }
;                if ( SupportHj )
;                        if ( the code is HanjaKey ), InitHjMenu(); ret;
;                else
;                        if ( the code is HanjaKey ), EngVdModeAuto(); ret;
;                endif
;                switch([CodeStat])
;                        case BanJunKey: ToggleBanJun(); break;
;                        case HanEngKey: ToggleHanEng(); break;
;                        default:
;                                {
;                                if HanKinMode, HangeulAutomata(); Break;
;                                else           Ban2Jun();
;                                }
;                }
;        else
;                {
;                ResetAotomata();
;                CompleteKbBuf=AX
;                }
;        ret;
;        }

fFillCode       =       04h
vFillCode       =       40h
lFillCode       =       01h
MsbCode         =       80h

Automata:
        test    [KbStat],HanKeyinMode
        jz      EngVdModeAuto
        test    [HjStat],HjLoaded
        jz      NonSupportHj
        test    [HjMenuStat],HjMenuMode
        jz      @f
        cmp     ax,HanjaKey
        jne     HjMenuSelect
        call    beep
        ret
@@:
        cmp     ax,HanjaKey
        jne     NonSupportHj
        mov     ax,0f100h
        jmp     InitHjMenu
NonSupportHj:
        cmp     ax,HanjaKey
        jne     @f
        mov     ax,0f100h
        jmp     EngVdModeAuto
@@:
        cmp     ax,BanJunKey
        je      ToggleBanJunInMode
        cmp     ax,HanEngKey
        je      ToggleHanEngInMode
        cmp     [HeKey],ah
        jne     @f
        or      al,al
        jnz     @f
        ret
@@:
        cmp     [HjKey],ah
        jne     @f
        or      al,al
        jnz     @f
        ret
@@:
        test    [KbStat],HEStat
        jnz     HangeulAutomata
        jmp     Ban2Jun
EngVdModeAuto:
        call    AutoReset
        call    PutBanja
        ret

ToggleBanJunInMode:
        call    ToggleBanJun
        ret
ToggleHanEngInMode:
        xor     [KbStat],HEStat

;------------------------------------------------------------------------
;   << AutoReset >>
; AutoReset()
; FUNCTION =
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX
;        {
;        [HjMenuStat] = [HjMenuStat] && !(HjMenuMode)
;        if ( Auto != 0 )
;                {
;                AX = [KsKbBuf];
;                PutCompleteHg(AX);
;                }
;        InitHanState();
;        ret;
;        }
;
AutoReset:
        cmp     [Auto],0
        jz      InitHanState
        push    ax
        mov     ax,[KsKbBuf]
        call    PutCompleteHg
        pop     ax
;------------------------------------------------------------------------
;   << InitHanState >>
; InitHanState()
; FUNCTION =
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX
;        {
;        Auto = 0;
;        InterimCharCnt = 0;
;        TmpBufCnt = 0;
;        ret;
;        }
InitHanState:
        mov     [Auto],0
        mov     [InterimCharCnt],0
        mov     [TmpBufCnt],0
        ret


;------------------------------------------------------------------------
;   << HangeulAutomata >>
; HangeulAutomata()
; FUNCTION =
; INPUT   : AX=english code
; OUTPUT  : CompleteKbBuf,InterimKbBuf
; PROTECT : AX
;
; type0= DC (Double Consonant)-- ,,,
; type1= SC (Single Consonant)-- ,,,,,
;                                ,,,,,
; type2= FC (First Consonant)--- ,,
; type3= SV (Single Vowel)------ ,,,,,
;                                ,,,,
; type4= DV (Double Vowel)------ ,,
; 
;               0     DC  1     SC  2     FC  3     SV  4     DV  
;                                                       
; 
; a0                                                              
;                        1         2         2         4         5
; 
; a1       DC                                                     
;                      3         3         2         7         8
; 
; a2       SC,FC                                                  
;          ,         1         2         2         7         8
; 
; a3       DC+C                                                   
;                      1         2         2         7         8
; 
; a4       SV                                                     
;                      1         2         2         4         5
; 
; a5       DV                                                     
;                      1         2         2         6         5
; 
; a6     DV+SV                                                    
;                      1         2         2         4         5
; 
; a7      C+SV                                                    
;                      A         B         2         4         5
; 
; a8      C+DV                                                    
;                      A         B         2         9         5
; 
; a9    C+DV+SV                                                   
;                      A         B         2         4         5
; 
; aA    C+V+DC                                                    
;                      C         C         2         7         8
; 
; aB    C+V+SC                                                    
;                      1         2         2         7         8
; 
; aC   C+V+DC+C                                                   
;                      1         2         2         7         8
; 
HangeulAutomata:
        or      ah,ah
        jz      @f
        cmp     al,041h
        jb      @f
        cmp     al,05ah
        jbe     Eng2HanAuto
        cmp     al,061h
        jb      @f
        cmp     al,07ah
        jbe     Eng2HanAuto
@@:
        cmp     [Auto],0
        je      @f
        mov     cx,ax
        mov     ax,[KsKbBuf]
        call    PutCompleteHg
        call    InitHanState
        mov     ax,cx
@@:
        call    Ban2Jun
        ret

Eng2HanAuto:
        mov     bx,[CurInCode]
        mov     [PreInCode],bx
        mov     [CurInCode],ax
        mov     bx,offset TypeTbl
        sub     cx,cx
        mov     cl,al
        sub     cl,041h
        add     bx,cx
        mov     cl,[bx]
        sub     bx,bx
        mov     bl,[Auto]
        mov     bh,bl
        shl     bl,1
        shl     bl,1
        add     bl,bh
        xor     bh,bh
        add     bx,cx
        add     bx,offset StateTbl
        mov     bl,[bx]
        mov     [Auto],bl
        sub     bh,bh
        shl     bx,1
        jmp     word ptr [bx+ActTbl]

TypeTbl:
        db      001h,003h,001h,001h,002h,000h,001h,004h,003h,003h,003h,003h,004h
        db      004h,003h,003h,002h,001h,000h,001h,003h,001h,002h,001h,003h,001h
        db      00,00,00,00,00,00
        db      001h,003h,001h,001h,001h,000h,001h,004h,003h,003h,003h,003h,004h
        db      004h,003h,003h,000h,000h,000h,001h,003h,001h,001h,001h,003h,001h

StateTbl:
; 0 state
        db      01h,02h,02h,04h,05h
; 1 state
        db      03h,03h,02h,07h,08h
; 2 state
        db      01h,02h,02h,07h,08h
; 3 state
        db      01h,02h,02h,07h,08h
; 4 state
        db      01h,02h,02h,04h,05h
; 5 state
        db      01h,02h,02h,06h,05h
; 6 state
        db      01h,02h,02h,04h,05h
; 7 state
        db      0Ah,0Bh,02h,04h,05h
; 8 state
        db      0Ah,0Bh,02h,09h,05h
; 9 state
        db      0Ah,0Bh,02h,04h,05h
; A state
        db      0Ch,0Ch,02h,07h,08h
; B state
        db      01h,02h,02h,07h,08h
; C state
        db      01h,02h,02h,07h,08h

;action table
ActTbl          label   word
        dw      offset  Act0
        dw      offset  Act1
        dw      offset  Act2
        dw      offset  Act3
        dw      offset  Act4
        dw      offset  Act5
        dw      offset  Act6
        dw      offset  Act7
        dw      offset  Act8
        dw      offset  Act9
        dw      offset  ActA
        dw      offset  ActB
        dw      offset  ActC

ConversionTbl:
DCTbl:         ; DC=
        db      051h,074h,014h       ;
;
        db      052h,074h,004h       ;
;
        db      053h,047h,007h       ;
        db      053h,067h,007h       ;
        db      053h,077h,006h       ;
;
        db      046h,041h,00Bh       ;
        db      046h,047h,010h       ;
        db      046h,056h,00Fh       ;
        db      046h,058h,00Eh       ;
        db      046h,061h,00Bh       ;
        db      046h,067h,010h       ;
        db      046h,071h,00Ch       ;
        db      046h,072h,00Ah       ;
        db      046h,074h,00Dh       ;
        db      046h,076h,00Fh       ;
        db      046h,078h,00Eh       ;
DCTblLen        =       ( $ - offset DCTbl ) / 3
DVTbl:         ; DV=
        db      048h,04Bh,01Ch       ;
        db      048h,04Ch,024h       ;
        db      048h,06Bh,01Ch       ;
        db      048h,06Ch,024h       ;
        db      048h,06Fh,01Eh       ;
;
        db      04Eh,04Ah,02Ah       ;
        db      04Eh,04Ch,02Eh       ;
        db      04Eh,06Ah,02Ah       ;
        db      04Eh,06Ch,02Eh       ;
        db      04Eh,070h,02Ch       ;
;
        db      04Dh,04Ch,038h       ;
        db      04Dh,06Ch,038h       ;
DVTblLen        =       ( $ - offset DVTbl ) / 3
ConvTbl1:
;ʼ+( ʼ+0+0, 0++0 )
;+shift
        db      020h,034h,040h,034h,018h,01Ch,050h,01Ah,00Ah,00Eh,006h,03Ah,036h
        db      028h,00Ch,018h,028h,00Ch,010h,030h,016h,04Ch,03Ch,048h,026h,044h
        db      00,00,00,00,00,00      ;null
        db      020h,034h,040h,034h,014h,01Ch,050h,01Ah,00Ah,00Eh,006h,03Ah,036h
        db      028h,008h,014h,024h,008h,010h,02Ch,016h,04Ch,038h,048h,026h,044h
ConvTbl2:
;+ħ( 0++0, 0+0+ )
        db      011h,034h,019h,017h,018h,009h,01Dh,01Ah,00Ah,00Eh,006h,03Ah,036h
        db      028h,00Ch,018h,028h,003h,005h,016h,016h,01Ch,03Ch,01Bh,026h,01Ah
        db      00,00,00,00,00,00       ;null
        db      011h,034h,019h,017h,008h,009h,01Dh,01Ah,00Ah,00Eh,006h,03Ah,036h
        db      028h,008h,014h,013h,002h,005h,015h,016h,01Ch,018h,01Bh,026h,01Ah


;------------------------------------------------------------------------
;   << CompleteStart >>
; CompleteStart()
; FUNCTION =
; INPUT   : AX = english code
; OUTPUT  : AX = conversion code
; PROTECT : AX
CompleteStart:
        mov     cx,ax
        mov     [TmpBufCnt],0
        mov     [InterimCharCnt],0
        mov     ax,[KsKbBuf]
        call    PutCompleteHg
        mov     ax,cx
        ret
Act0:
        call    CompleteStart
        mov     [Auto],0
        mov     ax,[CurInCode]
        jmp     Eng2HanAuto
Act1:
Act2:
        call    act11
        call    PutInterimHg
        ret
Act11:
        mov     bl,[TmpBufCnt]
        cmp     bl,0
        je      @f
        call    CompleteStart
@@:
        call    GetCharCodeXX00
        or      al,vFillCode
        or      al,lFillCode
        call    GetKCode
        ret
Act1Sub1:
        call    GetKCode
        call    PutInterimHg
        ret
Act3:
        mov     bx,offset DCTbl
        mov     cx,DCTblLen
        call    SearchCompound
        jc      GoAct0
        xor     ah,ah
        or      al,vFillCode
        or      ah,fFillCode
AutoProcess:
        or      ah,MsbCode
AutoProcess1:
        call    PutTmpBuf
        call    Ch2KsAuto
        jc      GoAct0
        mov     [KsKbBuf],ax
        call    PutInterimHg
        ret
Act4:
        call    GetVowelCode
        call    GetKCode
        mov     [Auto],0
        jmp     CompleteStart
GoAct0:
        jmp     Act0
Act5:
        call    GetVowelCode
        jmp     Act1Sub1
Act6:
        mov     bx,offset DVTbl
        mov     cx,DVTblLen
        call    SearchCompound
        jc      GoAct0
        xor     ah,ah
        shl     ax,1
        shl     ax,1
        shl     ax,1
        shl     ax,1
        or      ah,fFillCode
        or      al,lFillCode
        or      ah,MsbCode
        call    PutTmpBuf
        call    Ch2KsAuto
        jc      GoAct0
        mov     [KsKbBuf],ax
        mov     [Auto],0
        jmp     CompleteStart
Act7:
Act8:
        mov     bl,[TmpBufCnt]
        cmp     bl,3
        jb      @f
        mov     ax,[PreTmpBuf]
        call    Ch2KsAuto
        mov     [KsKbBuf],ax
        mov     [InterimCharCnt],0
        call    PutCompleteHg
        mov     [TmpBufCnt],0
        mov     ax,[PreInCode]
        call    Act11
        mov     ax,[CurInCode]
@@:
        call    GetCharCode0XX0
        mov     cl,not vFillCode
        call    Or2Code
        jmp     AutoProcess1
Act9:
        mov     bx,offset DVTbl
        mov     cx,DVTblLen
        call    SearchCompound
        jc      GoAct0
        xor     ah,ah
        shl     ax,1
        shl     ax,1
        shl     ax,1
        shl     ax,1
        mov     bx,[TmpBuf]
        and     bx,not 03E0h
        or      ax,bx
        jmp     AutoProcess1
ActA:
ActB:
        call    GetCharCode00XX
        mov     cl,not lFillCode
        call    Or2Code
        jmp     AutoProcess1
ActC:
        mov     bx,offset DCTbl
        mov     cx,DCTblLen
        call    SearchCompound
        jnc     @f
        jmp     Act0
@@:
        xor     ah,ah
        mov     cl,not 01Fh
        call    Or2Code
        jmp     AutoProcess1

;------------------------------------------------------------------------
GetVowelCode:
        mov     bl,[TmpBufCnt]
        cmp     bl,0
        je      @f
        call    CompleteStart
@@:
        call    GetCharCode0XX0
        or      ah,fFillCode
        or      al,lFillCode
        ret
;------------------------------------------------------------------------
GetKCode:
        or      ah,MsbCode
        call    PutTmpBuf
        call    Ch2KsAuto
        mov     [KsKbBuf],ax
        ret

;------------------------------------------------------------------------
GetCharCodeXX00:
        mov     bx, offset ConvTbl1
        sub     al,041h
        xlat
        mov     ah,al
        xor     al,al
        ret

;------------------------------------------------------------------------
GetCharCode0XX0:
        mov     bx, offset ConvTbl1
        sub     al,041h
        xlat
        xor     ah,ah
        shl     ax,1
        shl     ax,1
        shl     ax,1
        shl     ax,1
        ret

;------------------------------------------------------------------------
GetCharCode00XX:
        mov     bx, offset ConvTbl2
        sub     al,041h
        xlat
        xor     ah,ah
        ret
;------------------------------------------------------------------------
PutTmpBuf:
        mov     bx,[TmpBuf]
        mov     [PreTmpBuf],bx
        mov     [TmpBuf],ax
        mov     bl,[TmpBufCnt]
        inc     bl
        mov     [TmpBufCnt],bl
        ret

;------------------------------------------------------------------------
;   << Or2Code >>
Or2Code:
        mov     bx,[TmpBuf]
        and     bl,cl
        or      ax,bx
        ret

;------------------------------------------------------------------------
;   << SearchCompound >>
; SearchCompound()
; FUNCTION = شϴ / ã´.
; INPUT   : BX=pointer of conversion table
; OUTPUT  : CY=success --> AX=conversioned code
;           NC=fail
; PROTECT : AX
SearchCompound:
        mov     ax,[PreInCode]
        and     al,not Upper2Low
        mov     dx,[CurInCode]
SearchCompoundLoop:
        cmp     al,[bx]
        jne     @f
        cmp     dl,[bx+1]
        jne     @f
        mov     al,[bx+2]
        clc
        ret
@@:
        add     bx,3
        loop    SearchCompoundLoop
        stc
        ret

;------------------------------------------------------------------------
;   << Beep >>
; Beep()
; FUNCTION = beeping for a time
; INPUT   : none
; OUTPUT  : none
; PROTECT : ALL

Beep:
        mov     ax,0e07h
        int     10h
        ret

public  MapTbl, KbEnd, ChHgWTbl         ; for .MAP file
        include CH2KS.TBL
        include HANJA.TBL
KbEnd   label   byte

CODE    ENDS
        END

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\test.asm ===
CODE    SEGMENT
ASSUME  CS:CODE,DS:CODE

        ORG     100h
Start:
        jmp     PrgStart




LogoPos         =       0600h

;------------------------
LogoMsg label   byte
 db ' ****** Mode Set Program ******   ',cr,lf
 db '(C)Copyright Qnix Co., Ltd.  1993 ',cr,lf
 db '                   resolution     ',cr,lf
 db '      0 =  132x44 (1188x396)      ',cr,lf
 db '      1 =  132x28 (1188x448)      ',cr,lf
 db '      2 =  132x43 (1188x387)      ',cr,lf
 db '      3 =  132x25 (1188x400)      ',cr,lf
 db '      4 =  132x50 (1056x400)      ',cr,lf
 db '      5 =  80x25  (640x480)       ',cr,lf
 db '     select 0~5                   ',cr,lf
 db '                                  ',cr,lf
 db '    ex) hecon /5                   ,cr,lf
LogoLng         =       $-LogoMsg

PrgStart:
        push    ax
        push    bx
        push    cx
        push    dx
        push    ds
        push    es
        push    si
        push    di
        push    bp
        mov     ax,cs
        mov     ds,ax
        mov     es,ax
        call    ParsCommand
        pop     bp
        pop     di
        pop     si
        pop     es
        pop     ds
        pop     dx
        pop     cx
        pop     bx
        pop     ax
Exit:
        mov     ah,4ch
        int     21h

;------------------------------------------------------------------------
Modeset:
        mov     ax,00
        int     10h
        ret

ParsCommand:
        mov     si,81h
@@:
        lodsb
        cmp     al,cr
        je      ParsEnd
        cmp     al,lf
        je      ParsEnd
        cmp     al,'/'
        jnz     @b
        lodsb
        cmp     al,'?'
        je      Document
        cmp     al,'0'
        jb      ParsEnd
        cmp     al,'9'
        ja      ParsEnd
        jmp     ModeSet
ParsEnd:
        ret

Document:
        mov     bp,offset LogoMsg
        mov     dx,LogoPos
        mov     cx,LogoLng
        mov     bl,07h
        xor     bh,bh
        mov     ax,1300h
        int     10h
        ret
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\vga.inc ===
ASSUME  CS:CODE, DS:CODE, ES:DATA
if      WINNT
;------------------------------------------------------------------------
EgaMAllModeTbl  db      7, 40h, 70h, -1
EgaCAllModeTbl  db      0, 1, 2, 3, 40h, 70h, 60h, -1
McgaAllModeTbl  label   byte
VgaAllModeTbl   db      0, 1, 2, 3, 7, 40h, 70h
                db      60h, -2

EgaModeTbl      label   byte
        db  03h,0*2,03h,0b8h,0b8h,10h,000h,01001000b,25 ; han
        dw  0, offset Mode3E,0d0eh
        db  83h,4*2,12h,0b8h,0a0h,10h,080h,11001101b,25 ; single
        dw  (31-18)*64, offset Mode3Ega,0d0eh
        db  93h,4*2,12h,000h,0b8h,00h,080h,01000101b,25 ; dual
        dw  (31-18)*64, offset Mode3Ega,0d0eh
        db  07h,0*2,07h,0b0h,0b0h,10h,000h,00001000b,25 ; han
        dw  0, offset Mode7,0d0eh
        db  87h,3*2,0fh,0b0h,0b8h,10h,080h,10001100b,25 ; single
        dw  (32-17)*64, offset Mode7Ega,0d0eh
        db  97h,3*2,0fh,000h,0b0h,00h,080h,00000100b,25 ; dual
        dw  (32-17)*64, offset Mode7Ega,0d0eh
        db  40h,5*2,12h,000h,0b8h,00h,080h,01100100b,25 ;
        dw  (24-18)*64, offset Mode40E,2e0fh
        db  70h,5*2,0fh,000h,0b0h,00h,080h,00100100b,25 ;
        dw  (25-17)*64, offset Mode70E,2e0fh
        db  60h,6*2,12h,000h,0a0h,00h,080h,01100000b,25 ;
        dw  (23-18)*64, offset Mode60E,0000h

VgaModeTbl      label   byte
        db  03h,0*2,03h,0b8h,0b8h,10h,000h,01001000b,25 ; han
        dw  0, offset Mode23,0d0eh
        db  83h,4*2,03h,0b8h,0a0h,10h,080h,11001101b,25 ; single
        dw  (29-18)*64, offset Mode3V,0d0eh
	db  93h,4*2,03h,000h,0b8h,00h,080h,01000101b,25 ; dual
        dw  (29-18)*64, offset Mode3V,0d0eh
        db  07h,0*2,07h,0b0h,0b0h,10h,000h,00001000b,25 ; han
        dw  0, offset Mode07,0d0eh
        db  87h,3*2,0fh,0b0h,0a8h,10h,080h,10001100b,25 ; single
        dw  (30-17)*64, offset Mode07V,0d0eh
        db  97h,3*2,0fh,000h,0b0h,00h,080h,00000100b,25 ; dual
        dw  (30-17)*64, offset Mode07V,0d0eh
        db  40h,5*2,12h,000h,0b8h,00h,080h,01100100b,25 ;
        dw  (9-18)*64, offset Mode40,2e0fh
        db  70h,5*2,0fh,000h,0b0h,00h,080h,00100100b,25 ;
        dw  (10-17)*64, offset Mode70,2e0fh
        db  60h,6*2,12h,000h,0a0h,00h,080h,01100000b,25 ;
        dw  (8-18)*64, offset Mode60,0000h
        db  11h,6*2,11h,000h,0a0h,00h,0a0h,01100000b,30 ;
        dw  0, offset Mode11,0000h
        db  12h,6*2,12h,000h,0a0h,00h,0a0h,01100000b,30 ;
        dw  0, offset Mode12,0000h
else
;------------------------------------------------------------------------
EgaMAllModeTbl  db      7, 0fh, 40h, 70h, -1
EgaCAllModeTbl  db      0, 1, 2, 3, 4, 5, 6, 0dh, 0eh, 10h, 40h, 70h, 60h, -1
McgaAllModeTbl  label   byte
VgaAllModeTbl   db      0, 1, 2, 3, 4, 5, 6, 7, 0dh, 0eh, 0fh, 10h, 40h, 70h
                db      60h, 10h, 11h, 12h, 13h, -2

EgaModeTbl      label   byte
        db  03h,0*2,03h,0b8h,0b8h,10h,000h,01001000b,25 ; han
        dw  0, offset Mode3E,0d0eh
        db  83h,4*2,10h,0b8h,0a0h,10h,080h,11001101b,25 ; single
        dw  (31-18)*64, offset Mode3Ega,0d0eh
        db  93h,4*2,10h,000h,0b8h,00h,080h,01000101b,25 ; dual
        dw  (31-18)*64, offset Mode3Ega,0d0eh
        db  07h,0*2,07h,0b0h,0b0h,10h,000h,00001000b,25 ; han
        dw  0, offset Mode7,0d0eh
        db  87h,3*2,0fh,0b0h,0b8h,10h,080h,10001100b,25 ; single
        dw  (32-17)*64, offset Mode7Ega,0d0eh
        db  97h,3*2,0fh,000h,0b0h,00h,080h,00000100b,25 ; dual
        dw  (32-17)*64, offset Mode7Ega,0d0eh
        db  40h,5*2,10h,000h,0b8h,00h,080h,01100100b,25 ;
        dw  (24-18)*64, offset Mode40E,2e0fh
        db  70h,5*2,0fh,000h,0b0h,00h,080h,00100100b,25 ;
        dw  (25-17)*64, offset Mode70E,2e0fh
        db  60h,6*2,10h,000h,0a0h,00h,080h,01100000b,25 ;
        dw  (23-18)*64, offset Mode60E,0000h

VgaModeTbl      label   byte
        db  03h,0*2,03h,0b8h,0b8h,10h,000h,01001000b,25 ; han
        dw  0, offset Mode23,0d0eh
        db  83h,4*2,10h,0b8h,0a0h,10h,080h,11001101b,25 ; single
        dw  (29-18)*64, offset Mode3V,0d0eh
        db  93h,4*2,10h,000h,0b8h,00h,080h,01000101b,25 ; dual
        dw  (29-18)*64, offset Mode3V,0d0eh
        db  07h,0*2,07h,0b0h,0b0h,10h,000h,00001000b,25 ; han
        dw  0, offset Mode07,0d0eh
        db  87h,3*2,0fh,0b0h,0a8h,10h,080h,10001100b,25 ; single
        dw  (30-17)*64, offset Mode07V,0d0eh
        db  97h,3*2,0fh,000h,0b0h,00h,080h,00000100b,25 ; dual
        dw  (30-17)*64, offset Mode07V,0d0eh
        db  40h,5*2,10h,000h,0b8h,00h,080h,01100100b,25 ;
        dw  (9-18)*64, offset Mode40,2e0fh
        db  70h,5*2,0fh,000h,0b0h,00h,080h,00100100b,25 ;
        dw  (10-17)*64, offset Mode70,2e0fh
        db  60h,6*2,10h,000h,0a0h,00h,080h,01100000b,25 ;
        dw  (8-18)*64, offset Mode60,0000h
        db  11h,6*2,11h,000h,0a0h,00h,0a0h,01100000b,30 ;
        dw  0, offset Mode11,0000h
        db  12h,6*2,12h,000h,0a0h,00h,0a0h,01100000b,30 ;
        dw  0, offset Mode12,0000h
endif

;------------------------------------------------------------------------
ModeSetVgaText:
        call    ClearGrpBuf
if      KseVga
        test    [KseCard],00000001b
        jz      @f
        call    ChgParmH2E
@@:
endif   ; if KseVga
        pushf
        call    [OldVideo]
if      KseVga
        test    [KseCard],00000001b
        jz      @f
        call    ChgParmE2H
@@:
endif   ; if KseVga
        call    LoadEngPattern
        jmp     short CrtProgram
ModeSetVgaGrp:
        call    ClearGrpBuf
if      WINNT
        pushf
        call    [OldVideo]
        call    LoadEngPattern
else
        mov     di,word ptr [HanSavePtr]
        add     di,[si+sAdjParms]
        xchg    di,word ptr [HanSavePtr]
        pushf
        call    [OldVideo]
        xchg    di,word ptr [HanSavePtr]
endif
CrtProgram:
if      KseVga
        test    [KseCard],00000001b
        jz      @f
        call    KseVgaKey
@@:
endif   ; if KseVga
        push    si
        call    OffScreen
        mov     si,[si+sParms]
        mov     dx,GrpIndex
        mov     ah,[si].cMap
        mov     al,6
        out     dx,ax
        mov     dl,(MiscReg AND 0ffh)
        mov     al,[si].cMisc
        out     dx,al
        mov     dl,0d4h
        test    al,00000001b
        jnz     @f
        mov     dl,0b4h
@@:
        mov     [rAddr6845],dx
        add     si,cCrtc
        mov     cx,25
        mov     ax,0111h
        out     dx,ax                   ; release CRTC reg 0-7
        xor     ah,ah
@@:
        lodsb
        xchg    al,ah
        out     dx,ax
        xchg    al,ah
        inc     ah
        loop    @b
        test    [rMiscFlags],00001000b
        jnz     NoWritePalet            ; default palette loading is disable
        add     dl,0ah-4
        in      al,dx                   ; reset F/F
        in      al,dx                   ; reset F/F
        mov     cl,20
        xor     ah,ah
        mov     dl,(AttrReg AND 0ffh)
@@:
        mov     al,ah
        out     dx,al
        lodsb
        out     dx,al
        inc     ah
        loop    @b
        mov     al,3fh
        out     dx,al                   ; enable screen
NoWritePalet:
        call    OnScreen
        pop     si
        ret
ClearGrpBuf:
        test    [CurMode],10000000b
        jnz     @f
        cmp     [si].sModeId,5*2        ; EGA/VGA mode 40, 70
        jnz     @f
        push    ax
        push    es
        les     di,[GrpBufAddr]
        mov     cx,8000h/2
        xor     ax,ax
        rep stosw
        pop     es
        pop     ax
@@:
        ret
LoadEngPattern:
        push    es
        push    si
        mov     dx,SeqIndex
        mov     ax,100h                 ; 0100 synchronous reset
        cli
        out     dx,ax
;       inc     al                      ; 0101 select char clock 8 dot(640x400)
;       out     dx,ax
        mov     ax,402h                 ; 0402 writes only to map 2
        out     dx,ax
        mov     ax,704h                 ; 0704 sequencial addressing
        out     dx,ax
        mov     ax,300h                 ; 0300 clear syncronous reset
        out     dx,ax
        mov     dl,(GrpIndex and 0ffh)
        sti
        mov     ax,204h                 ; 0204 select map 2 for CPU reads
        out     dx,ax
        mov     ax,5                    ; 0005 disable odd/even addressing
        out     dx,ax
        inc     ax                      ; 0006 map starts at A000:0000
        out     dx,ax
        mov     ax,0a000h
        mov     es,ax
        xor     di,di                   ; es:di = start VRAM addr of CG
        push    si
        mov     si,offset EngFont
        xor     dl,dl
        xor     ch,ch
@@:
        mov     cl,16
        rep movsb
        add     di,16
        inc     dl
        jnz     @b
        pop     si
        mov     si,[si+sParms]
        mov     dl,(SeqIndex and 0ffh)
        mov     ax,100h                 ; 0 synchronous reset
        cli
        out     dx,ax
        inc     al                      ; 1
;       mov     ah,[si+5]
;       out     dx,ax
        inc     al                      ; 2
        mov     ah,[si+6]
        out     dx,ax
        mov     al,4                    ; 4
        mov     ah,[si+8]
        out     dx,ax
        mov     ax,300h                 ; 0 clear syncronous reset
        out     dx,ax
        sti
        mov     dl,(GrpIndex and 0ffh)
        mov     al,4                    ; 4
        mov     ah,[si+59]
        out     dx,ax
        inc     al                      ; 5
        mov     ah,[si+60]
        out     dx,ax
        inc     al                      ; 6
        mov     ah,[si+61]
        out     dx,ax
        pop     si
        pop     es
        ret

OnScreen:
if      KseVga
        test    [KseCard],00000001b
        jz      @f
        test    cs:[ModeStat],GrpMode
        jnz     @f
        push    dx
        push    ax
        mov     dx,3c4h
        mov     al,1
        out     dx,al
        inc     dl
        in      al,dx
        and     al,11011111b
        out     dx,al
        pop     ax
        pop     dx
@@:
endif   ; if KseVga
        ret

OffScreen:
if      KseVga
        test    [KseCard],00000001b
        jz      @f
        test    cs:[ModeStat],GrpMode
        jnz     @f
        push    dx
        push    ax
        mov     dx,3c4h
        mov     al,1
        out     dx,al
        inc     dl
        in      al,dx
        or      al,21h
        out     dx,al
        pop     ax
        pop     dx
@@:
endif   ; if KseVga
        ret

;------------------------------------------------------------------------
;       << DispEngColorMulti >>
; FUNCTION = english character multi-display in color
; INPUT   : ES:AX = graphics buffer position, CX = counter, BL = attr
;           DS:SI = pattern
; OUTPUT  : none
; PROTECT : none
; DispEngColorMulti(BL,CX,DS,SI,ES,AX/-)
;       {
;       if (CX = 1),DispEngColor(BL,DS,SI,ES,DI/-);
;       else
;               if (CX = 0), return;
;               while (CX = 0, CX-)
;                       /* save register */
;                       DispEngColor(BL,DS,SI,ES,DI/-);
;                       /* restore register */
;                       /* recalc memory address */
;       }

DispEngColorMulti:
        cmp     cx,1
        jnz     @f
        call    DispEngColor
        ret
@@:
        jcxz    DispEngColorMultiExit
        mov     dl,Byte Ptr [CurPos]
DispEngColorMultiLoop:
        @push   ax,bx,cx,dx,si
        call    DispEngColor
        @pop    si,dx,cx,bx,ax
        inc     ax                      ; AX = DI
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        add     ax,80*15
@@:
        loop    DispEngColorMultiLoop
DispEngColorMultiExit:
        ret


;------------------------------------------------------------------------
;       << DispEngColorXorMulti >>
; FUNCTION = english character multi-display in color ( XOR )
; INPUT   : ES:AX = graphics buffer position, CX = counter, BL = attr
;           DS:SI = pattern
; OUTPUT  : none
; PROTECT : none
; DispEngColorXorMulti(BL,CX,DS,SI,ES,AX/-)
;       {
;       if (CX = 1),DispEngColorXor(BL,DS,SI,ES,DI/-);
;       else
;               if (CX = 0), return;
;               while (CX = 0, CX-)
;                       /* save register */
;                       DispEngColorXor(BL,DS,SI,ES,DI/-);
;                       /* restore register */
;                       /* recalc memory address */
;       }

DispEngColorXorMulti:
        cmp     cx,1
        jnz     @f
        call    DispEngColorXor
        ret
@@:
        jcxz    DispEngColorXorMultiExit
        mov     dl,Byte Ptr [CurPos]
DispEngColorXorMultiLoop:
        @push   ax,bx,cx,dx,si
        call    DispEngColorXor
        @pop    si,dx,cx,bx,ax
        inc     ax                      ; AX = DI
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        add     ax,80*15
@@:
        loop    DispEngColorXorMultiLoop
DispEngColorXorMultiExit:
        ret


CheckHwScr:
        mov     di,ax
        test    cs:[ModeStat],HwScroll
        jz      @f
        call    GetCrtStartAddr
        add     di,ax
        cmp     di,80*16*25
        jb      @f
        sub     di,80*16*25
@@:
        ret
;------------------------------------------------------------------------
;       << DispEngColor >>
; FUNCTION = Font Image Display Routine for One Byte Font
; INPUT    ES:AX  = Video RAM Segment:Offset
;          DS:SI  = Font Data Segment:Offset
;          BL     = Attribute
; OUTPUT   : none
; PROTECT  : none
;
; DispEngColor(BL,DS,SI,ES,AX/-)                /* HwScroll */

DispEngColor:
        call    CheckHwScr
        test    cs:[Card1st],00000100b
        jnz     DispEngEgaColor
        CLI
        MOV     DX,SeqIndex     ; Sequencer Register
        MOV     AX,0F02h        ; All Color Plane Enable
        OUT     DX,AX
        MOV     DX,GrpIndex     ; Graphic Controller
        MOV     AX,0
        OUT     DX,AX
        TEST    CS:[ModeStat],GrpMode
        JZ      EngColorBackground
        ; Graphic Mode Only
        MOV     AX,0305h        ; Write Mode 3 (VGA Only)
        OUT     DX,AX
        MOV     AH,0FFh
        MOV     ES:[DI],AH
        JMP     short EngColorGraphicAttr
EngColorBackground:
        MOV     AX,0205h        ; Write Mode 2
        OUT     DX,AX
        CALL    MakeEngAttr     ; BL = Attr, AL = Background Attr Return
;       MOV     AH,AL
        MOV     ES:[DI],AL
        ;English Color Foreround
        MOV     AX,0305h        ; Set Write Mode 2, Read Mode 0
        OUT     DX,AX           ; Graphic Mode Register
EngColorGraphicAttr:
        MOV     AH,ES:[DI]      ; Set Latches From VRAM
        MOV     AL,0            ; Set/Reset Register
        MOV     AH,BL           ; Character Attribute Value
        OUT     DX,AX
        MOV     BX,(50h-1)
        mov     cx,16
DispEngColorLoop:
        MOVSB
        ADD     DI,BX
        LOOP    DispEngColorLoop
        ; Reset Bit Mask Register
DispHEColorRet:
        MOV     AX,0FF08h       ; Pixel Mask All Enable
        OUT     DX,AX
        MOV     AX,005h          ; Graphic Mode = 0
;        test    [Win31Flag],SetExtTE
;        JZ      @F
;        MOV     AH,01H
;@@:
        OUT     DX,AX
        MOV     AX,1
        OUT     DX,AX           ; All Disable Set/Reset Register
        MOV     AX,0
        OUT     DX,AX           ; Clear Set/Reset Value
        STI
        RET

DispEngEgaColor:
        call    MakeEngAttr
        mov     ah,al
        TEST    CS:[ModeStat],GrpMode
        JZ      @f
        xor     ah,ah                   ; background color in graphics mode
@@:
        mov     dx,GrpIndex             ; grp ctrl index register
        mov     al,5                    ; mode register
        out     dx,al
        inc     dx                      ; grp ctrl data register(=3CFh)
        mov     al,2                    ; write mode 2
        out     dx,al
        mov     al,ah
        mov     cx,16                   ; set repeat counter
        mov     dx,(80-1)
        mov     bp,di
VgaWriteEngSingleBgLp:
        stosb                           ; clear 1st scan line
        add     di,dx                   ; next VRAM addr
        loop    VgaWriteEngSingleBgLp
        mov     di,bp
VgaWriteEngSingleFg:
        call    GetAddrGrp
        mov     bx,(80-1)
VgaGetFontEngSingleLp:
        lodsb
        out     dx,al
        stosb                           ; write 1st pattern
        add     di,bx                   ; next VRAM addr
        loop    VgaGetFontEngSingleLp
        mov     al,-1                   ; default config (enable all bits)
        out     dx,al
        dec     dx                      ; get addr of grp ctrl index register
        mov     ax,1                    ; get addr of grp ctrl data register
        out     dx,ax                   ; disable the set/reset register
        xor     ax,ax                   ; set/reset register
        out     dx,ax                   ; clear set/reset register value
        ret


GetAddrGrp:
        mov     dx,GrpIndex             ; get addr of grp ctrl index register
        mov     ax,5                    ; get addr of grp ctrl data register
        out     dx,ax                   ; write mode 0
GetAddrGrpP:
        mov     ax,0ff01h               ; get addr of grp ctrl data register
        out     dx,ax                   ; load enable set/reset value into reg
        xor     al,al                   ; set/reset register
        mov     ah,bl                   ; load set/reset value into reg
        out     dx,ax
        mov     al,es:[di]              ; set latch register
        mov     dx,GrpIndex             ; get addr of grp ctrl index register
        mov     al,8                    ; bit mask register
        out     dx,al
        inc     dx
        mov     cx,16                   ; set counter
        ret

;------------------------------------------------------------------------
;       << DispEngColorXor >>
; FUNCTION = Font Image Display Routine for One Byte Font
; INPUT    ES:AX = Video RAM Segment:Offset
;          DS:SI = Font Data Segment:Offset
;          BL    = Attribute
; OUTPUT   : none
; PROTECT  : none
;
; DispEngColorXor(BL,DS,SI,ES,AX/-)

@@:
        jmp     DispEngColor
DispEngColorXor:
        test    bl,80h
        jz      @b
        call    CheckHwScr
        CALL    MakeEngAttr             ; BL = Attr, AL = Background Attr Return
        mov     dx,GrpIndex             ; get addr of grp ctrl index register
        mov     ax,5                    ; get addr of grp ctrl data register
        out     dx,ax                   ; write mode 0
        mov     ax,1803h                ; get addr of grp ctrl data register
        out     dx,ax                   ; data XORed with latch contents
        mov     ax,0ff01h               ; get addr of grp ctrl data register
        out     dx,ax                   ; load enable set/reset value into reg
        xor     al,al                   ; set/reset register
        mov     ah,bl                   ; load set/reset value into reg
        out     dx,ax
        mov     dx,GrpIndex             ; get addr of grp ctrl index register
        mov     al,8                    ; bit mask register
        out     dx,al
        inc     dx
        mov     bx,(80-1)               ; for addressing next VRAM addr
        mov     cx,16                   ; set counter
VgaWriteEngSingleXorLp:
        lodsb
        out     dx,al
        mov     al,es:[di]              ; set latch register
        stosb                           ; write 1st pattern
        add     di,bx                   ; next VRAM addr
        loop    VgaWriteEngSingleXorLp
VgaWriteSingleFg16Xor:
        dec     dx                      ; get addr of grp ctrl index register
        mov     ax,3                    ; get addr of grp ctrl data register
        out     dx,ax                   ; data unmodified (off XORing)
        mov     al,8                    ; bit mask register
        out     dx,al
        inc     dx
        mov     al,-1                   ; default config (enable all bits)
        out     dx,al
        dec     dx                      ; get addr of grp ctrl index register
        mov     ax,1                    ; get addr of grp ctrl data register
        out     dx,ax                   ; disable the set/reset register
        xor     ax,ax                   ; set/reset register
        out     dx,ax                   ; clear set/reset register value
        ret


;------------------------------------------------------------------------
;       << DispHanColor >>
; FUNCTION = Font Image Display Routine for Double Byte Font
; INPUT    ES:AX  = Video RAM Segment:Offset
;          DS:SI  = Font Data Segment:Offset
;          BL     = Attribute
; OUTPUT   : none
; PROTECT  : none
; DispHanColor(BL,DS,SI,ES,AX/-)                /* HwScroll */

DispHanColor:
        call    CheckHwScr
        test    cs:[Card1st],00000100b
        jnz     DispHanEgaColor
        CLI
        MOV     DX,SeqIndex     ; Sequencer Register
        MOV     AX,0F02h        ; All Color Plane Enable
        OUT     DX,AX
        MOV     DX,GrpIndex     ; Graphic Controller
        MOV     AX,0
        OUT     DX,AX
        TEST    CS:[ModeStat],GrpMode
        JZ      HanColorBackground
        ; Graphic Mode Only
        MOV     AX,0305h        ; Write Mode 3 (VGA Only)
        OUT     DX,AX
        MOV     AH,0FFh
        MOV     ES:[DI],AH
        JMP     short HanColorGraphicAttr
HanColorBackground:
        MOV     AX,0205h        ; Write Mode 2
        OUT     DX,AX
        CALL    MakeHanAttr     ; BL = Attr, AL = Background Attr Return
        MOV     AH,AL
        MOV     ES:[DI],AH
        ;Hanguel Color Foreround
        MOV     AX,0305h        ; Set Write Mode 3, Read Mode 0 (VGA Only)
        OUT     DX,AX           ; Graphic Mode Register
HanColorGraphicAttr:
        MOV     AH,ES:[DI]      ; Set Latches From VRAM
        MOV     AL,0            ; Set/Reset Register
        MOV     AH,BL           ; Character Attribute Value
        OUT     DX,AX
        MOV     BX,(50h-2)
        mov     cx,16
DispHanColorLoop:
        MOVSW
        ADD     DI,BX
        LOOP    DispHanColorLoop
        ; Reset Bit Mask Register
        jmp     DispHEColorRet

DispHanEgaColor:
        call    MakeHanAttr
        mov     ah,al
        TEST    CS:[ModeStat],GrpMode
        JZ      @f
        xor     ah,ah                   ; background color in graphics mode
@@:
        mov     dx,GrpIndex             ; grp ctrl index register
        mov     al,5                    ; mode register
        out     dx,al
        inc     dx                      ; grp ctrl data register(=3CFh)
        mov     al,2                    ; write mode 2
        out     dx,al
        mov     al,ah
        mov     cx,16                   ; set repeat counter
        mov     dx,(80-2)
        mov     bp,di
VgaWriteHanSingleBgLp:
        stosb                           ; clear 1st scan line
        stosb                           ; clear 1st scan line
        add     di,dx                   ; next VRAM addr
        loop    VgaWriteHanSingleBgLp
        mov     di,bp
VgaWriteHanSingleFg:
        call    GetAddrGrp
        mov     bx,(80-2)
VgaGetFontHanSingleLp:
        lodsb
        out     dx,al
        stosb                           ; write 1st pattern
        lodsb
        out     dx,al
        stosb
        add     di,bx                   ; next VRAM addr
        loop    VgaGetFontHanSingleLp
        mov     al,-1                   ; default config (enable all bits)
        out     dx,al
        dec     dx                      ; get addr of grp ctrl index register
        mov     ax,1                    ; get addr of grp ctrl data register
        out     dx,ax                   ; disable the set/reset register
        xor     ax,ax                   ; set/reset register
        out     dx,ax                   ; clear set/reset register value
        ret


;------------------------------------------------------------------------
;       << DispHanColorXor >>
; FUNCTION = Font Image Display Routine for Double Byte Font
; INPUT    ES:AX  = Video RAM Segment:Offset
;          DS:SI  = Font Data Segment:Offset
;          BL     = Attribute
; OUTPUT   : none
; PROTECT  : none
; DispHanColorXor(BL,DS,SI,ES,AX/-)

@@:
        jmp     DispHanColor
DispHanColorXor:
        test    bl,80h
        jz      @b
        mov     di,ax
        test    cs:[ModeStat],HwScroll
        jz      @f
        call    GetCrtStartAddr
        add     di,ax
        cmp     di,80*16*25
        jb      @f
        sub     di,80*16*25
@@:
        CALL    MakeHanAttr             ; BL = Attr, AL = Background Attr Return
        mov     dx,GrpIndex             ; get addr of grp ctrl index register
        mov     ax,5                    ; get addr of grp ctrl data register
        out     dx,ax                   ; write mode 0
        mov     ax,1803h                ; get addr of grp ctrl data register
        out     dx,ax                   ; data XORed with latch contents
        call    GetAddrGrpP
        mov     bx,(80-2)               ; for addressing next VRAM addr
VGFHSLp:
        lodsb
        out     dx,al
        mov     al,es:[di]              ; set latch register
        stosb                           ; write 1st pattern
        lodsb
        out     dx,al
        mov     al,es:[di]              ; set latch register
        stosb
        add     di,bx                   ; next VRAM addr
        loop    VGFHSLp

        dec     dx                      ; get addr of grp ctrl index register
        mov     ax,3                    ; get addr of grp ctrl data register
        out     dx,ax                   ; data unmodified (off XORing)
        mov     al,8                    ; bit mask register
        out     dx,al
        inc     dx
        mov     al,-1                   ; default config (enable all bits)
        out     dx,al
        dec     dx                      ; get addr of grp ctrl index register
        mov     ax,1                    ; get addr of grp ctrl data register
        out     dx,ax                   ; disable the set/reset register
        xor     ax,ax                   ; set/reset register
        out     dx,ax                   ; clear set/reset register value
        ret


;------------------------------------------------------------------------
;       << VgaGrpScroll >>
; FUNCTION = Color Graphic Screen Scroll
; INPUT   : BH = Blank line Attr
;         : BL = Scroll Line count ( Y' )
;         : CX = Row : Column
;         : DH = Move count ( Y )
;         : DL = Window width ( X )
;         : BP = Next scan line
; OUTPUT  : none
; PROTECT : none
; VgaGrpScroll(BX,CX,DX/-)

VgaGrpScroll:
        push    bp
        mov     bp,cx
        xchg    cx,dx
        mov     ax,80*16
        mov     dl,dh
        xor     dh,dh
        mul     dx
        mov     dx,bp
        xor     dh,dh
        add     ax,dx
        les     di,[GrpBufAddr]
        mov     dl,bl
        or      dl,dl
        jns     @f
        add     di,80*15
@@:
        add     di,ax
        mov     si,di
        mov     dx,bp
        mov     bp,80*16
        mov     al,bl
        xor     ah,ah
        mul     bp
        add     si,ax
        call    HwScrollAdjust
        pop     bp
        sar     bp,1
        xchg    cx,dx
        mov     cx,dx                           ; save DX
        mov     dx,SeqIndex                     ; sequencer
        mov     ax,0f02h                        ; all plane enable
        out     dx,ax
        mov     dl,0ceh                         ; 3CEh = Graphic controller
        mov     ax,0003h                        ; function clear
        out     dx,ax
        mov     ax,0105h                        ; write mode 01, Latch write
        out     dx,ax
        mov     dx,cx                           ; restore DX
        mov     al,bh
        test    [ModeStat],GrpMode
        jnz     RunGrp
        cmp     [ModeId],2*3                    ; EGA/VGA mode 7
        jnz     @f
        mov     al,0
        test    bh,01110111B
        jz      @f
        mov     al,1
        test    bh,01111000B
        jz      @f
        mov     al,bh
        and     al,01111000B
        cmp     al,00001000B
        mov     al,4
        jz      @f
        mov     al,10h
        test    bh,00000111B
        jz      @f
        mov     al,11h
        test    bh,00001000B
        jz      @f
        mov     al,40h
@@:
        shr     al,1
        shr     al,1
        shr     al,1
        shr     al,1
RunGrp:
        mov     cx,es
        mov     ds,cx                           ; ES = DS
        mov     cl,bl
        or      cl,cl
        jns     @f
        neg     bl
@@:
        xor     ch,ch
        or      dh,dh
        mov     bh,dl
        jz      ColorFill
        mov     dl,dh
        xor     dh,dh
        shl     dx,1
        shl     dx,1
        shl     dx,1
        shl     dx,1
@@:
        call    HwScrollAdjustI
        mov     cl,bh
        rep     movsb
        add     si,bp
        add     di,bp
        dec     dx
        jnz     @b
ColorFill:
        mov     dl,bh
        xor     bh,bh
        mov     cl,4
        shl     bx,cl
        mov     si,ax
        mov     cx,dx
        mov     dx,GrpIndex                     ; graphic controller
        mov     ax,0205h                        ; write mode 2
        out     dx,ax
        mov     dx,cx
        mov     ax,si
        xor     ch,ch
ColorClearLoop:
        call    HwScrollAdjustDi
        mov     cl,dl                           ; window width
        rep     stosb
        add     di,bp
        dec     bx
        jnz     ColorClearLoop
        mov     dx,GrpIndex                     ; graphic controller
        mov     ax,0005h                        ; write mode 0
        out     dx,ax
        ret

HwScrollAdjustI:
        test    cs:[ModeStat],HwScroll
        jz      VgaGrpScrollLpDo
        cmp     si,80*16*26
        jbe     @f
        add     si,80*16*25
@@:
        cmp     si,80*16*25
        jb      HwScrollAdjustDi
        sub     si,80*16*25
HwScrollAdjustDi:
        test    cs:[ModeStat],HwScroll
        jz      VgaGrpScrollLpDo
        cmp     di,80*16*26
        jbe     @f
        add     di,80*16*25
@@:
        cmp     di,80*16*25
        jb      VgaGrpScrollLpDo
        sub     di,80*16*25
VgaGrpScrollLpDo:
        ret

HwScrollAdjust:
        push    ax
        test    cs:[ModeStat],HwScroll
        jz      HwScrollAdjustEnd
        call    GetCrtStartAddr
        add     si,ax
        cmp     si,80*16*25
        jb      @f
        sub     si,80*16*25
@@:
        add     di,ax
        cmp     di,80*16*25
        jb      HwScrollAdjustEnd
        sub     di,80*16*25
HwScrollAdjustEnd:
        pop     ax
        ret


;------------------------------------------------------------------------
;       << VgaWritePixel >>
; FUNCTION = write pixel
; INPUT   : AL,CX,DX
; OUTPUT  : none
; PROTECT : none
; VgaWritePixel(AL,CX,DX/-)
VgaWritePixel:
        mov     bl,al
        call    CalcPixelColor
WriteDotColorDo:
        cli
        mov     dx,GrpIndex
        or      bl,bl
        jns     @f                      ; jump if MSB = 0
        mov     ax,1803h
        out     dx,ax
@@:
        xor     al,al
        mov     ah,bl
        out     dx,ax
        mov     ax,0ff01h
        out     dx,ax
        mov     al,8
        mov     ah,ch
        out     dx,ax
        mov     ah,es:[di]
        stosb
        mov     ah,-1
        out     dx,ax
        mov     ax,3
        out     dx,ax
        xor     ax,ax
        out     dx,ax
        inc     ax
        out     dx,ax
        sti
        ret
CalcPixelColor:
        mov     ax,80
        mul     dx
        mov     dx,cx
        shr     cx,1
        shr     cx,1
        shr     cx,1
        add     ax,cx
        and     dl,7
        mov     cx,dx
        mov     ch,10000000b
        shr     ch,cl
        les     di,[GrpBufAddr]
        add     di,ax
        ret


;------------------------------------------------------------------------
;       << VgaReadPixel >>
; FUNCTION = read pixel
; INPUT   : BH,CX,DX
; OUTPUT  : al = color
; PROTECT : none
; VgaReadPixel(BH,CX,DX/-)
;
VgaReadPixel:
        call    CalcPixelColor
ReadDotColorDo:
        cli
        mov     al,7
        sub     al,cl
        mov     cl,al
        mov     dx,GrpIndex
        mov     ax,4
        out     dx,ax
        mov     bl,es:[di]
        and     bl,ch
        shr     bl,cl
        mov     bh,bl
        inc     ah
        out     dx,ax
        mov     bl,es:[di]
        and     bl,ch
        shr     bl,cl
        shl     bl,1
        or      bh,bl
        inc     ah
        out     dx,ax
        mov     bl,es:[di]
        and     bl,ch
        shr     bl,cl
        shl     bl,1
        shl     bl,1
        or      bh,bl
        inc     ah
        out     dx,ax
        mov     bl,es:[di]
        and     bl,ch
        shr     bl,cl
        shl     bl,1
        shl     bl,1
        shl     bl,1
        xor     ah,ah
        out     dx,ax
        mov     al,bl
        or      al,bh
        sti
        ret


;------------------------------------------------------------------------
;       << VgaGrpBlock >>
; FUNCTION = Color Graphic Screen Block Move/Copy
; INPUT   : DI = Target ( BX )
;           SI = Source ( CX )
;           DL = Window weidth  ( X )
;           DH = Window height  ( Y )
;           BP = Screen width - Window width ( X' )
;           BH:BL = Move/Copy : Attr
; OUTPUT  : none
; PROTECT : none
; VgaGrpBlock(bx,dx,bp/-)

VgaGrpBlock :
        pop     bx
        mov     es,dx
        pop     di
        mov     ax,di
        mov     al,ah
        xor     ah,ah
        mov     dx,80*16
        mul     dx
        and     di,0ffh
        add     di,ax
        pop     si
        mov     ax,si
        mov     al,ah
        xor     ah,ah
        mov     dx,80*16
        mul     dx
        and     si,0ffh
        add     si,ax                   ; DI
        sar     bp,1                    ; make byte length
        test    bh,40h                  ; jump if positive value
        jnz     @f
        add     di,80*15
        add     si,80*15
@@:
        call    HwScrollAdjust
        lds     ax,[GrpBufAddr]
        mov     dx,GrpIndex
        mov     ax,105h
        out     dx,ax
        mov     dx,es
        mov     al,dh
        mov     dh,16
        mul     dh                      ; AX = y
        mov     cs:[BlockAdj],ax
        mov     dx,es
        mov     ax,ds
        mov     es,ax
        xchg    bl,bh
        mov     al,bh
        cmp     cs:[ModeId],2*3         ; EGA/VGA mode 7
        jnz     @f
        mov     al,0
        test    bh,01110111B
        jz      @f
        mov     al,1
        test    bh,01111000B
        jz      @f
        mov     al,bh
        and     al,01111000B
        cmp     al,00001000B
        mov     al,4
        jz      @f
        mov     al,10h
        test    bh,00000111B
        jz      @f
        mov     al,11h
        test    bh,00001000B
        jz      @f
        mov     al,40h
@@:
        shr     al,1
        shr     al,1
        shr     al,1
        shr     al,1
        xchg    ax,bx
        mov     bh,al
        xor     ch,ch
@@:
        call    HwScrollAdjustI
        mov     cl,dl
        test    bh,1
        jz      BlockGrpMove2
        rep movsb
        jmp     short BlockGrpMove2End
BlockGrpMove2:
        push    dx
        mov     dx,GrpIndex
BlockGrpMove2Lp:
        mov     al,[si]
        stosb
        mov     ax,205h
        out     dx,ax
        xchg    si,di
        mov     al,bl
        stosb
        xchg    si,di
        mov     ax,105h
        out     dx,ax
        loop    BlockGrpMove2Lp
        pop     dx
BlockGrpMove2End:
        add     di,bp
        add     si,bp
        dec     cs:[BlockAdj]
        jnz     @b
        mov     dx,GrpIndex
        mov     ax,5                    ; write mode 0
        out     dx,ax
        mov     ax,cs
        mov     ds,ax
        ret


;------------------------------------------------------------------------
;       << FullScrollColor >>
;
; FUNCTION = color buffer full scroll
; INPUT   : ES:DI = graphics buffer, BL = attribute
; OUTPUT  : none
; PROTECT : none
;
; FullScrollColor(ES,DI,BL/-)
;
FullScrollColor:
        mov     dx,GrpIndex             ; get addr of grp ctrl index register
        test    cs:[ModeStat],HwScroll
        jnz      HwFullScrollDo
        mov     ax,es
        mov     ds,ax
        mov     si,di
        add     si,80*16
        mov     ax,105h
        out     dx,ax
        mov     cx,24*16*80
        cmp     cs:[MaxRows],25
        jbe     @f
        mov     cx,29*16*80
@@:
        rep movsb
FullScrollFill:
        mov     ax,205h
        out     dx,ax
        mov     cx,16*80
        xor     al,al
        test    cs:[ModeStat],GrpMode
        jnz     @f
        mov     al,bl
        shr     al,1
        shr     al,1
        shr     al,1
        shr     al,1
@@:
        rep stosb
        mov     ax,5
        out     dx,ax
        ret
HwFullScrollDo:
        call    GetCrtStartAddr
        mov     di,ax
        add     ax,80*16
        cmp     ax,80*16*25
        jb      @f
        xor     ax,ax
@@:
        call    HwFullScroll
        mov     dl,(GrpIndex AND 0ffh)
        jmp     short FullScrollFill
HwFullScroll:
        mov     dx,3dah
        mov     cx,ax
        cli
@@:
        in      al,dx
        test    al,8
        jnz     @b
@@:
        in      al,dx
        test    al,8
        jz      @b
        mov     ax,cx
        or      ax,ax
        jz      HwFullScroll2
        mov     dl,0d4h
        mov     al,0ch
        out     dx,ax
        mov     ax,cx
        xor     dx,dx
        mov     cx,80
        div     cx
        mov     cx,16*25-1
        sub     cx,ax
        mov     dx,3d4h
        mov     ah,cl
        mov     al,18h
        out     dx,ax                   ; set scan lines  - bit 0-7
        mov     ax,1f07h
        test    ch,00000001b
        jnz     @f
        mov     ah,0fh
@@:
        out     dx,ax                   ; set scan lines  - bit 8
        mov     ax,9
        out     dx,ax                   ; set scan lines  - bit 9
        sti
        ret
HwFullScroll2:
        mov     dl,0d4h
        mov     ax,0ch
        out     dx,ax
        mov     dl,0dah
@@:
        in      al,dx
        test    al,8
        jnz     @b
@@:
        in      al,dx
        test    al,8
        jz      @b
        mov     dl,0d4h
        mov     ax,9
        out     dx,ax                   ; set scan lines  - bit 9
        mov     ax,1f07h
        out     dx,ax                   ; set scan lines  - bit 8
        mov     ax,8f18h
        out     dx,ax                   ; set scan lines  - bit 0 - 7
        sti
        ret
GetCrtStartAddr:
        pushf
        cli
        push    dx
        push    bx
        mov     dx,3d4h
        in      al,dx
        mov     bl,al
        mov     al,0ch
        out     dx,al
        inc     dx
        in      al,dx
        mov     ah,al
        xor     al,al
        xchg    bx,ax
        dec     dx
        out     dx,al
        xchg    bx,ax
        pop     bx
        pop     dx
        popf
        ret

;------------------------------------------------------------------------
;       << ToggleColorCursor >>
; FUNCTION = color cursor toggle
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS,SI
; ToggleColorCursor(-/-)

ToggleColorCursor:
        mov     cx,[rCurType]           ; BIOS Cursor Type Information Read
        test    [rInfo],00000001b
        jnz     @f
        cmp     [ModeId],3*2            ; 3 - text emulation mode 7, EGA/VGA
        jz      @f
        shl     cx,1                    ; Cursor Mode * 2 ( COLOR )
        add     cx,201h
@@:
        cmp     ch,20h                  ; Check Not Display Cursor Type
        jb      @f
        ret
@@:
        and     cx,0f0fh                ; Get Low 4 Bits
        sub     cl,ch
        jnc     @f
        ret
@@:
        cli
        inc     cl
        mov     ax,[OrgCurType]
        mov     dx,[OrgCurPos]
        test    [CursorStat],CursorOn
        jnz     @f
        mov     bl,[CurPage]
        xor     bh,bh
        shl     bx,1
        mov     dx,[bx+rCurPos]
        mov     [OrgCurPos],dx
        mov     ax,cx
@@:
        cmp     dl,80
        jae     ToggleColorCursorExit
        cmp     dh,[MaxRows]
        jae     ToggleColorCursorExit
        mov     [OrgCurType],ax
        mov     cx,ax
        les     di,[GrpBufAddr]
        mov     ax,80
        mul     dh
        shl     ax,1
        shl     ax,1
        shl     ax,1
        shl     ax,1
        xor     dh,dh
        add     di,dx
        add     di,ax                   ; 80 * 16 * Rows +Cols
        mov     ax,80
        mul     ch                      ; Row * 80
        add     di,ax
        test    cs:[ModeStat],HwScroll
        jz      @f
        call    GetCrtStartAddr
        add     di,ax
        cmp     di,80*16*25
        jb      @f
        sub     di,80*16*25
@@:
        mov     dx,SeqIndex             ; EGA/VGA Sequence Register
        mov     ax,702h                 ; Color Plan Write Enable Register
        out     dx,ax                   ; Enable Plan 0,1,2
        mov     dx,GrpIndex             ; EGA/VGA Graphic Controller
        mov     ax,1803h                ; Write Data XOR & None Rotation
        out     dx,ax
        mov     al,0FFh                 ; Mask Patten Value
        xor     ch,ch                   ; Clear CH
@@:
        mov     ah,es:[di]              ; Latched Data Load
        mov     es:[di],al              ; XOR & Mask
        add     di,80
        loop    @b                      ; CX = Counter Value = Low - High
        mov     ax,3                    ; Write Data Unmodified & None Rotation
        out     dx,ax
        mov     ax,0F02h                ; All Plan Enable
        mov     dx,SeqIndex             ; EGA/VGA Sequence Register
        out     dx,ax
        xor     [CursorStat],CursorOn
ToggleColorCursorExit:
        sti
        ret


;------------------------------------------------------------------------
public  HanSavePtr, VideoParmsTbl, Mode2E, Mode3E, Mode23, Mode7, Mode07
public  Mode3V, Mode07V, Mode3Ega, Mode7Ega

VideoParmsTbl   label   byte
                db      64*2  dup(?)    ; 0, 1
Mode2           db      64    dup(?)    ; 2
Mode3           db      64*4  dup(?)    ; 3, 4, 5, 6
Mode7           db      64    dup(?)    ; 7
Mode60          label   byte            ; 8
        db 80,24,16,0,080h  ,1,0Fh,0,6  ,063h                   ; gen, seq, misc
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,40h,0,0,0,0,0,0   ; crtc
        db  9Ch,0Eh,8Fh,28h,0FH,96h,0B9h,0E3h,0FFh              ; crtc
        db 0,1,2,3,4,5,14h,7,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh    ; attr
        db  1,0,0Fh,0                                           ; attr
        db 0,0,0,0,0,0,5,0Fh,0FFh                               ; grp
Mode40          label   byte            ; 9
        db 80,24,16,0,80h  ,1,1,0,6  ,063h
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,43h,2EH,0FH,0,0,0,0
        db  9Ch,0Eh,8Fh,28h,0FH,96h,0B9h,0C0h,0FFh
        db 0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7                      ; normal white
        db  1,0,1,0
        db 0,0,0,0,0,0,0Dh,0,0FFh
Mode70          label   byte            ; 10
        db 80,24,16,0,80h  ,1,1,0,6  ,062h
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,43h,2EH,0FH,0,0,0,0
        db  9Ch,0Eh,8Fh,28h,0FH,96h,0B9h,0C0h,0FFh
        db 0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8                      ; normal white
        db  1,0,1,0
        db 0,0,0,0,0,0,09h,0,0FFh
                db      64*6  dup(?)    ; 11, 12, 13, 14, 15, 16
ModeFGt64       db      64    dup(?)    ; 17
Mode10Gt64      db      64*3  dup(?)    ; 18, 19, 20
Mode2E          db      64    dup(?)    ; 21
Mode3E          db      64    dup(?)    ; 22 (EGA)
Mode01          label   byte            ; 23
Mode60E         label   byte            ; 23
        db 80,24,16,0,080h  ,1,0Fh,0,6  ,0A7h
        db 5Bh,4Fh,53h,37h,52h,00h,09Fh,1Fh,0,0,0DH,0EH,0,0,0,0 ; crtc
        db  90h,2Bh,8Fh,28h,0FH,95h,1Dh,0E3h,0FFh               ; crtc
        db 0,1,2,3,4,5,14h,7,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh    ; attr
        db  1,0,0Fh,0
        db 0,0,0,0,0,0,5,0Fh,0FFh
Mode23          label   byte            ; 24
Mode40E         label   byte            ; 24
        db 80,24,16,0,80h  ,1,1,0,6  ,0A7h
        db 5Bh,4Fh,53h,37h,52h,00h,09Fh,1Fh,0,3,2EH,0FH,0,0,0,0 ; crtc
        db  90h,2Bh,8Fh,28h,0FH,95h,1Dh,0C0h,0FFh               ; crtc
        db 0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7                      ; normal white
        db  1,0,1,0
        db 0,0,0,0,0,0,0Dh,0,0FFh
Mode07          label   byte            ; 25
Mode70E         label   byte            ; 25
        db 80,24,16,0,80h  ,1,1,0,6  ,0A6h
        db 5Bh,4Fh,53h,37h,52h,00h,09Fh,1Fh,0,3,2EH,0FH,0,0,0,0 ; crtc
        db  90h,2Bh,8Fh,28h,0FH,95h,1Dh,0C0h,0FFh               ; crtc
        db 0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7                      ; normal white
        db  1,0,1,0
        db 0,0,0,0,0,0,09h,0,0FFh
Mode11          db      64    dup(?)    ; 26
Mode12          db      64*2  dup(?)    ; 27, 28

; graphics VGA mode 2, 3, 7
Mode3V          label   byte            ; 29
        db 80,24,16,0,010h  ,1,0Fh,0,6  ,063h                   ; gen, seq, misc
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,40h,0DH,0EH,0,0,0,0; crtc
        db  9Ch,0Eh,8Fh,28h,0FH,96h,0B9h,0E3h,0FFh              ; crtc
        db 0,1,2,3,4,5,14h,7,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh    ; attr
        db  1,0,0Fh,0                                           ; attr
        db 0,0,0,0,0,0,1,0Fh,0FFh                               ; grp
Mode07V         label   byte            ; 30
        db 80,24,16,0,10h  ,1,0Fh,0,6  ,062h
        db 5Fh,4Fh,50h,82h,54h,80h,0BFh,1Fh,0,40h,0DH,0EH,80H,0,0,0
        db  9Ch,0Eh,8Fh,28h,0FH,96h,0B9h,0E3h,0FFh
        db 0,8,0,0,18h,18h,0,0,0,8,0,0,0,8,0,0
        db 03H,0,05H,0
        db 0,0,0,0,0,0,01h,05H,0FFh
; graphics EGA mode 2, 3, 7
Mode3Ega        label   byte            ; 31
        db 80,24,16,0,010h  ,1,0Fh,0,6  ,0A7h
        db 5Bh,4Fh,53h,37h,52h,00h,09Fh,1Fh,0,0,0DH,0EH,0,0,0,0 ; crtc
        db  90h,2Bh,8Fh,28h,0FH,95h,1Dh,0E3h,0FFh               ; crtc
        db 0,1,2,3,4,5,14h,7,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh    ; attr
        db  1,0,0Fh,0
        db 0,0,0,0,0,0,1,0Fh,0FFh
Mode7Ega        label   byte            ; 32
        db 80,24,16,0,10h  ,1,0FH,0,6  ,0A6h
        db 5Bh,4Fh,53h,37h,52h,00h,09Fh,1Fh,0,0,0DH,0EH,0,80h,0,0; crtc
        db  90h,2Bh,8Fh,28h,0FH,95h,1Dh,0E3h,0FFh               ; crtc
        db 0,8,0,0,18h,18h,0,0,0,8,0,0,0,8,0,0
        db 03H,0,05H,0
        db 0,0,0,0,0,0,01h,05H,0FFh
;------------------------------------------------------------------------


;------------------------------------------------------------------------
public  HanOnEga, HanOffEga, GetFontEga, PutFontEga
HanOnEga:
HanOffEga:
GetFontEga:
PutFontEga:
        stc
        ret


;------------------------------------------------------------------------
if      AtiVga
public  AtiHanOnVga, AtiHanOffVga, AtiGetFontVga, AtiPutFontVga
AtiHanOnVga:
        mov     dx,3ddh
        mov     ax,101h
        out     dx,ax
        mov     dx,1ceh
        mov     al,0bfh
        mov     ah,al
        out     dx,al
        inc     dx
        in      al,dx
        or      al,00100000b
        dec     dx
        xchg    al,ah
        out     dx,ax
        ret
AtiHanOffVga:
        mov     dx,3ddh
        mov     ax,1
        out     dx,ax
        mov     dx,1ceh
        mov     al,0bfh
        mov     ah,al
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11011111b
        dec     dx
        xchg    al,ah
        out     dx,ax
        ret
AtiGetFontVga:
        mov     dx,es
        mov     ds,dx
        mov     dx,3ddh
        mov     ah,ch
        mov     al,10h
        cli
        out     dx,ax
        mov     ah,cl
        mov     al,8
        out     dx,ax
        mov     ax,201h
        mov     cl,4
        cmp     ch,0feh                 ; assume FExx
        jnz     @f
        mov     ah,6                    ; set C9xx
        mov     cl,2
@@:
        cmp     ch,0c9h
        jnz     @f
        mov     cl,2
@@:
        out     dx,ax
        mov     al,cl
        out     dx,al
        inc     dx
        mov     bx,di
        mov     cx,16
@@:
        in      al,dx
        stosb
        inc     di
        loop    @b
        mov     di,bx
        mov     cl,16
@@:
        inc     di
        in      al,dx
        stosb
        loop    @b
        dec     dx
        mov     ax,1
        out     dx,ax
        sti
        clc
        ret
AtiPutFontVga:
        mov     dx,3ddh
        mov     ah,cl
        mov     al,8
        cli
        out     dx,ax
        mov     ax,201h
        cmp     ch,0feh                 ; assume FExx
        jnz     @f
        mov     ah,6                    ; set C9xx
@@:
        out     dx,ax
        mov     al,2
        out     dx,al
        inc     dx
        mov     bx,si
        mov     cx,16
@@:
        lodsw
        out     dx,al
        loop    @b
        mov     si,bx
        mov     cl,16
@@:
        lodsw
        mov     al,ah
        out     dx,al
        loop    @b
        dec     dx
        mov     ax,1
        out     dx,ax
        sti
        clc
        ret
endif   ; AtiVga

;------------------------------------------------------------------------
if      KseVga
public  KseHanOnVga, KseHanOffVga, KseGetFontVga, KsePutFontVga
KseHanOnVga:
        call    KseVgaKey
        mov     ax,0832h
        out     dx,ax
        mov     al,34h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11111101b
        out     dx,al                   ; set 8 bit bus
        dec     dx
        mov     al,35h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,01111111b
        out     dx,al                   ; set 8 bit bus
        dec     dx
        mov     al,36h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,10110111b
        out     dx,al                   ; set 8 bit bus
        dec     dx
        mov     al,37h
        out     dx,al
        inc     dl
        in      al,dx
        and     al,11111110b
        or      al,00000010b
        out     dx,al
        mov     dl,0c4h
        mov     al,1
        out     dx,al
        inc     dl
        in      al,dx
        or      al,1
        out     dx,al
        mov     dx,258h
        mov     ax,0e8f0h               ; enable hangeul
        out     dx,ax
        mov     al,0f4h
        out     dx,al
        inc     dx
        in      al,dx
        or      al,10000000b
        and     al,11111011b
        out     dx,al                   ; set english
        dec     dl
        mov     ax,0fff5h
        out     dx,ax
        push    dx
        mov     ah,3
        mov     bh,cs:[CurPage]
        pushf
        call    cs:[OldVideo]
        mov     ah,1
        pushf
        call    cs:[OldVideo]
        call    KseVEop
        pop     dx
        ret
KseHanOffVga:
        call    KseVgaKey
        mov     ax,832h
        out     dx,ax
        mov     al,34h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11111101b
        or      al,00001000b
        out     dx,al
        dec     dx
        mov     al,35h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,01111111b
        out     dx,al                   ; set 8 bit bus
        dec     dx
        mov     al,36h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11110111b
        out     dx,al                   ; set 8 bit bus
        dec     dx
        mov     al,37h
        out     dx,al
        inc     dl
        in      al,dx
        and     al,11111110b
        or      al,00000010b
        out     dx,al
        mov     dx,258h
        mov     ax,0f0h
        mov     ah,20
        out     dx,ax                   ; set english
        mov     al,0f4h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,01110111b
        or      al,00001000b
        out     dx,al                   ; set english
; border color off
        mov     dx,257h
        in      al,dx
        mov     al,2                    ;index 2
        out     dx,al
        mov     al,0
        out     dx,al
        ret
KseVgaKey:
        mov     dx,3bfh
        mov     al,3
        out     dx,al
        mov     dx,3cch
        in      al,dx
        mov     dl,0d4h
        test    al,1
        jnz     @f
        mov     dl,0b4h
@@:
        add     dl,4
        mov     al,0a0h
        out     dx,al
        sub     dl,4
        mov     al,11h
        out     dx,al
        inc     dl
        in      al,dx
        and     al,not 80h
        out     dx,al
        dec     dl
        ret
KseVEop:
        mov     bx,ax
        call    KseVgaKey
        mov     dx,3cch
        in      al,dx
        mov     dl,0d4h
        test    al,1
        jnz     @f
        mov     dl,0b4h
@@:
        mov     al,-1
        out     dx,al                   ; dumy for mode 7
        mov     dl,0bfh
        mov     al,cs:[Port3bf]
        out     dx,al
        mov     ax,bx
        ret
KseGetFontVga:
        mov     bx,ax
        mov     dx,258h
        mov     al,0f4h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11110111b
        out     dx,al
        dec     dx
        mov     al,0f0h                 ; access enable
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11111110b
        or      al,00000010b
        out     dx,al
        mov     si,255h
        shl     cl,1
        shr     cx,1
        mov     ax,32
        mul     cx
        mov     cx,dx
        mov     dx,250h
        mov     bl,al
        out     dx,al
        inc     dx
        mov     al,ah
        out     dx,al
        inc     dx
        mov     al,cl
        out     dx,al
        mov     cx,32
@@:
        mov     dx,si
        in      al,dx
        stosb
        mov     dl,50h
        inc     bl
        mov     al,bl
        out     dx,al
        loop    @b
KseVGetEnd:
        mov     dl,58h
        mov     al,0f0h
        out     dx,al
        inc     dl
        in      al,dx
        and     al,11111100b
        out     dx,al
        clc
        ret
KsePutFontVga:
        mov     dx,258h                 ;**ket bit
        mov     al,0f4h
        out     dx,al                   ;read-inx
        inc     dx
        in      al,dx
        and     al,11110111b
        out     dx,al
        dec     dx                      ;.**
        mov     al,0f0h                 ;**access enable
        out     dx,al
        inc     dx
        in      al,dx
        or      al,00000011b
        out     dx,al
        mov     di,255h
        shl     cl,1
        shr     cx,1
        mov     ax,32
        mul     cx
        mov     cx,dx
        mov     dx,250h
        mov     bl,al
        out     dx,al
        inc     dx
        mov     al,ah
        out     dx,al
        inc     dx
        mov     al,cl
        out     dx,al
        mov     cx,32
@@:
        mov     dl,58h
        mov     al,0f0h
        out     dx,al
        inc     dx
        in      al,dx
        and     al,11111110b
        or      al,00000010b
        out     dx,al
        mov     dl,53h
        in      al,dx
        out     dx,al
        inc     dl
        in      al,dx
        out     dx,al
        inc     dl
        in      al,dx
        out     dx,al
        mov     dl,58h
        mov     al,0f0h
        out     dx,al                   ;read-inx
        inc     dx
        in      al,dx
        or      al,00000011b
        out     dx,al
        mov     dx,di
        lodsb
        out     dx,al
        mov     dl,56h
        out     dx,al
        mov     dl,50h
        inc     bl
        mov     al,bl
        out     dx,al
        loop    @b
        jmp     KseVGetEnd
endif   ; if KseVga

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\jung.inc ===
DW      0FFFFh
        DW      0F00h, 6000h,3000h,3000h,3000h,3000h,3000h,3E00h,3000h,3000h,3000h,3000h,3000h,3000h,3000h,2000h
        DW      0A00h, 6000h,3000h,3000h,3000h,3000h,3E00h,3000h,3000h,3000h,2000h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,6C00h,7C00h,6C00h,6C00h,6C00h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,6C00h,7C00h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0F00h, 6000h,3000h,3000h,3000h,3E00h,3000h,3000h,3000h,3E00h,3000h,3000h,3000h,3000h,3000h,2000h
        DW      0A00h, 6000h,3000h,3000h,3E00h,3000h,3000h,3E00h,3000h,3000h,2000h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,7C00h,6C00h,6C00h,7C00h,6C00h,6C00h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,7C00h,6C00h,6C00h,7C00h,6C00h,4C00h,800h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,0F800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,0F800h,1800h,1800h,1800h,1000h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,0F800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,0F800h,1800h,1800h,1800h,1800h,1000h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,6C00h,0EC01h,6C00h,6C00h,6C00h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,6C00h,6C00h,0EC03h,6C00h,6C00h,4C00h,800h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,0EC01h,6C00h,6C00h,6C00h,6C00h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,6C00h,0EC01h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0F00h, 3000h,1800h,1800h,1800h,0F800h,1800h,1800h,0F800h,1800h,1800h,1800h,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,0F800h,1800h,1800h,0F800h,1800h,1800h,1000h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,0F800h,1800h,1800h,0F800h,1800h,1800h,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,0F800h,1800h,0F800h,1800h,1800h,1800h,1000h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,0EC01h,6C00h,6C00h,0EC01h,6C00h,6C00h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,0EC03h,6C00h,6C00h,0EC03h,6C00h,4C00h,800h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,0EC01h,6C00h,6C00h,0EC01h,6C00h,6C00h,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,0EC03h,6C00h,0EC03h,6C00h,6C00h,4C00h,800h
        DW      510h, 0Eh,6,6,6,0FC7Fh
        DW      30Ah, 7,3,0FC7Fh
        DW      412h, 3,3,3,0FC7Fh
        DW      30Ah, 8001h,8001h,0FC7Fh
        DW      0F00h, 6000h,3000h,3000h,3000h,3000h,3000h,3E00h,3038h,3018h,0F018h,30FFh,3000h,3000h,3000h,2000h
        DW      0A00h, 6000h,3000h,3000h,3000h,3000h,3E00h,3038h,0F018h,30FFh,2000h
        DW      0F00h, 6000h,3000h,3000h,3000h,3000h,3000h,3E00h,3000h,300Ch,700Ch,0B0FFh,3000h,3000h,3000h,2000h
        DW      0A00h, 6000h,3000h,3000h,3000h,3000h,3E00h,300Ch,700Ch,0B0FFh,2000h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,6C00h,7C00h,6C38h,6C18h,0EC18h,6CFFh,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,6C00h,6C00h,7C00h,6C38h,0EC18h,6CFFh,4800h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,6C00h,6C00h,7C00h,6C0Ch,0EC0Ch,6CFFh,6C00h,6C00h,4C00h,800h
        DW      0A00h, 1800h,0CC00h,6C00h,6C00h,6C00h,7C00h,6C0Ch,0EC0Ch,6CFFh,4800h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,1838h,1818h,7818h,98FFh,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,1800h,1838h,3818h,0D8FFh,1000h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,180Ch,780Ch,98FFh,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,1800h,180Ch,780Ch,98FFh,1000h
        DW      60Eh, 8003h,801Dh,800Dh,800Dh,800Dh,0FC7Fh
        DW      408h, 8003h,801Dh,800Dh,0FC7Fh
        DW      412h, 6006h,6006h,6006h,0FC7Fh
        DW      30Ah, 6006h,6006h,0FC7Fh
        DW      80Eh, 0FC7Fh,8001h,8001h,8001h,8001h,8001h,8001h,1
        DW      30Eh, 0FC7Fh,8001h,8001h
        DW      710h, 0FC7Fh,8001h,8001h,8001h,8001h,8001h,1
        DW      50Eh, 0FC7Fh,8001h,8001h,8001h,1
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,3800h,0D8FFh,180Ch,0F80Ch,180Ch,180Ch,180Ch,1808h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,3800h,0D8FFh,180Ch,0F80Ch,1008h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,3800h,0D8FFh,180Ch,0F80Ch,180Ch,180Ch,1808h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,1800h,7800h,98FFh,0F80Ch,1008h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,6C00h,0EC00h,6CFFh,6C0Ch,0EC0Dh,6C0Ch,6C0Ch,6C0Ch,6C08h,4800h
        DW      0A00h, 1800h,0CC00h,6C00h,6C00h,6C00h,0EC00h,6CFFh,6C0Ch,0EC0Dh,4808h
        DW      0F00h, 1800h,0CC00h,6C00h,6C00h,6C00h,6C00h,6C00h,0EC00h,6CFFh,6C0Ch,0EC0Dh,6C0Ch,6C0Ch,6C08h,4800h
        DW      0A00h, 1800h,0CC00h,6C00h,6C00h,6C00h,6C00h,0EC01h,6CFEh,0EC19h,4810h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,3800h,0D8FFh,180Ch,180Ch,180Ch,180Ch,180Ch,1808h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,3800h,0D8FFh,180Ch,180Ch,1008h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,3800h,0D8FFh,180Ch,180Ch,180Ch,180Ch,1808h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,1800h,3800h,0D8FFh,180Ch,1008h
        DW      80Eh, 0FC7Fh,6006h,6006h,6006h,6006h,6006h,6006h,4004h
        DW      30Eh, 0FC7Fh,6006h,6006h
        DW      710h, 0FC7Fh,6006h,6006h,6006h,6006h,6006h,4004h
        DW      50Eh, 0FC7Fh,6006h,6006h,6006h,4004h
        DW      118h, 0FC7Fh
        DW      10Eh, 0FC7Fh
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,7800h,98FFh,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,3800h,0D8FFh,1000h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,7800h,98FFh,1800h,1800h,1000h
        DW      0F00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1000h
        DW      0A00h, 3000h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1800h,1000h
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\video.asm ===
TITLE   Video interrupt 10h

;=======================================================================;
; (C)Copyright Qnix Computer Co. Ltd.   1992                            ;
; This program contains proprietary and confidential information.       ;
; All rights reserved.                                                  ;
;=======================================================================;

;=======================================================================;
;                                                                       ;
;              SPECIFICATION for video                                  ;
;                                                                       ;
;=======================================================================;
;
; Video card : MGA
;              CGA
;              EGA-mono
;              EGA-color
;              VGA
;              Font card
;              Dual monitor
;              ѱ/ video card
;
; Code/spec. : KS C 5842 - 1991
;               ѱ , KSSM 
;              ûõ ѱ
;
; Video mode : 2/3      640*400 16      H/TE/TG
; (8*16font)    7       640*400 B/W     H/TE/TG
;              40h      640*400 B/W     G
;              60h      640*400 16      G
;              70h      640*400 B/W     G
;              11h      640*480 B/W     G
;              12h      640*480 16      G
;
; Video mode : 2/3      960*600 16      H
; (12*24font)   7       960*600 B/W     H
;  * H = ѱ text mode
;    TE = Text emulation mode
;    TG = Text emulation mode(not refresh)
;    G = Graphics mode
;
; Font box   : 8*16
;
;  
;            : 16 * 16  font        - 'HJ16.PAT'


;========================================================================;
;                                                                        ;
;                        VIDEO INTERRUPT 10H                             ;
;                                                                        ;
;========================================================================;
;
;  Video service routine  ϸ俬ϰ ǥϸ 
; ª ϰ ǥѴ.
;
;  Reserved register : BP = stack pointer
;                      DS = CS
;                      ES = DataSeg
;
;
; Int10(AX, BX, CX, DX, SI, DI, ES)
;       {
;       if ([CodeStat] != HangeulMode), goto [OldInt10], Iret;
;       sti
;       cld
;       if (AH=0,0fch,0fdh) || HangeulVideoMode
;               {
;               +[VideoActive];                 /* INT10 nesting */
;               Save BX,CX,DX,SI,DI,ES,DS,BP;   /* AX = destory */
;               BP = SP;                        /* save stack pointer */
;               ES = DataSeg;                   /* default */
;               DS = CodeSeg;                   /* default */
;               switch(AH)
;                       case 0    : ModeSet(AL/-);
;                                   break;
;                       case 1    : SetCurType(CX/-);
;                                   break;
;                       case 2    : SetCurPos(BH,DX/-);
;                                   break;
;                       case 3    : GetCurPos(BH/CX,DX);
;                                   break;
;                       case 5    : SetPage(AL/-);
;                                   break;
;                       case 6    : ScrollUp(AL,BH,CX,DX/-);
;                                   break;
;                       case 7    : ScrollDown(AL,BH,CX,DX/-);
;                                   break;
;                       case 8    : ReadCharAttr(BH/AX);
;                                   break;
;                       case 9    : WriteCharAttr(AL,BX,CX/-);
;                                   break;
;                       case 0ah  : WriteChar(AL,BX,CX/-);
;                                   break;
;                       case 0ch  : WritePixel(AL,BH,CX,DX/-);
;                                   break;
;                       case 0dh  : ReadPixel(BH,CX,DX/AL);
;                                   break;
;                       case 0eh  : WriteTty(AL,BL/-);
;                                   break;
;                       case 0fh  : GetMode(-/AX,BH);
;                                   break;
;                       case 0f6h : BlockMove(AL,BX,CX,DX/-);
;                                   break;
;                       case 0f7h : BlockCopy(BX,CX,DX/-);
;                                   break;
;                       case 0f8h : GetCharType(-/AL);
;                                   break;
;                       case 0fch : FontCtrl(AL,*/*);
;                                   break;
;                       case 0fdh : GetInfor(-/AL,BX,ES);
;                                   break;
;                       case 0feh : WriteTtyInterim(AL,BL/-);
;                                   break;
;                       default   : Restore BX,CX,DX,SI,DI,ES,DS,BP;
;                                   goto [OldInt10];
;               UserEOP(-/-);
;               Restore BX,CX,DX,SI,DI,ES,DS,BP;
;               -[VideoActive];
;               }
;       else    goto [OldInt10];
;       iret;
;       }

CODE    SEGMENT PUBLIC   WORD 'CODE'
        ASSUME  CS:CODE,DS:CODE,ES:DATA

INCLUDE         EQU.INC
INCLUDE         DATA.INC

; CursorStat
CursorOn        =       00000001b

PUBLIC  Int10
Int10:
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f00h
        and     ax,0f0ffh
        add     bx,100h
        and     bx,0f00h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
        cmp     ah,01ch
        jnz     @f
        jmp     Return1ch
@@:
        cmp     ah,00h
        jz      @f
        cmp     ah,0fch
        jz      @f
        cmp     ah,0fdh
        jz      @f
        test    cs:[CodeStat],HangeulMode or HangeulVideoMode
        jz      EngInt10Do
        jpo     EngInt10Do
@@:
        sti
        cld
        inc     cs:[VideoActive]
        @push   bx,cx,dx,si,di,es,ds,bp
        xor     bp,bp
        mov     es,bp
        mov     bp,cs
        mov     ds,bp
        mov     bp,sp
        mov     si,ax
        mov     al,ah
        xor     ah,ah
        add     al,(10h-4)
        xchg    si,ax
        cmp     si,(23h-4)
        ja      EngInt10
        shl     si,1
        call    [si+JumpTbl]
        @pop    bp,ds,es,di,si,dx,cx,bx
        dec     cs:[VideoActive]
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f00h
        and     ax,0f0ffh
        sub     bx,100h
        and     bx,0f00h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
        iret

VdDummyRet:
        add     sp,2
EngInt10:
        @pop    bp,ds,es,di,si,dx,cx,bx
        dec     cs:[VideoActive]
EngInt10Do:
; KSE VGA mode 6 & AX = 1003h
        cmp     ax,1003h
        jnz     @f
        push    ax
        push    es
        xor     ax,ax
        mov     es,ax
        cmp     [rCrtMode],6
        pop     es
        pop     ax
        jnz     @f
        iret
@@:
if      Debug
        pushf
        call    cs:[OldVideo]
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0f00h
        and     ax,0f0ffh
        sub     bx,100h
        and     bx,0f00h
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
        iret
else
        jmp     cs:[OldVideo]
endif   ; if Debug

Return1ch:
        pushf
        call    cs:[OldVideo]
        mov     al,01ch
        iret

JumpTbl         label   word            ; to be set at init by invoking SetMode
        dw      offset  ControlCode     ; ah=f4
        dw      offset  CodeChange      ; ah=f5
        dw      offset  BlockMove       ; ah=f6
        dw      offset  BlockCopy       ; ah=f7
        dw      offset  GetCharType     ; ah=f8
        dw      offset  VdDummyRet      ; ah=f9
        dw      offset  VdDummyRet      ; ah=fa
        dw      offset  VdDummyRet      ; ah=fb
        dw      offset  FontCtrl        ; ah=fc
        dw      offset  GetInfor        ; ah=fd
        dw      offset  WriteTtyInterim ; ah=fe
        dw      offset  VdDummyRet      ; ah=ff (x)

        dw      offset  ModeSet         ; ah=0
        dw      offset  SetCurType      ; ah=1
        dw      offset  SetCurPosAll    ; ah=2
        dw      offset  GetCurPos       ; ah=3
        dw      offset  VdDummyRet      ; ah=4
        dw      offset  SetPage         ; ah=5
        dw      offset  ScrollUp        ; ah=6
        dw      offset  ScrollDown      ; ah=7
        dw      offset  ReadCharAttr    ; ah=8
        dw      offset  WriteCharAttr   ; ah=9
        dw      offset  WriteChar       ; ah=0a
        dw      offset  VdDummyRet      ; ah=0b
        dw      offset  WritePixel      ; ah=0c
        dw      offset  ReadPixel       ; ah=0d
        dw      offset  WriteTty        ; ah=0e
        dw      offset  GetMode         ; ah=0f
        dw      offset  Attribute       ; ah=10
        dw      offset  VdDummyRet      ; ah=11
        dw      offset  VdDummyRet      ; ah=12
        dw      offset  WriteString     ; ah=13


;=======================================================================
;  << ModeSet >>
; FUNCTION = set video mode
; INPUT   : AH = 00h
;           AL = mode value & MSB
; OUTPUT  : none
; PROTECT : none
;
;       video card  mode з(mode-ID)
;               0 - ѱ video card, mode 2/3/7, MGA/CGA/EGA/VGA
;               1 - text emulation mode 7, MGA
;               2 - text emulation mode 2/3, CGA
;               3 - text emulation mode 7, EGA/VGA
;               4 - text emulation mode 2/3, EGA/VGA
;               5 - mode 40/70
;               6 - mode 60/11/12, EGA/VGA
;
;       video card з
;               0 - MGA
;               1 - CGA
;               2 - EGA mono
;               3 - EGA color
;               4 - MCGA
;               5 - VGA
;
;       video card mode  modeset з
;               0 - ѱ video card, mode 2/3/7, MGA/CGA
;               1 - ѱ video card, mode 2/3/7, EGA/VGA
;               2 - grp mode or TE mode, MGA
;               3 - grp mode or TE mode, CGA
;               4 - grp mode or TE mode, EGA/VGA
;
;       video buffer   з
;               0 - 80*25, 8*16 font
;               1 - 80*30, 8*16 font
;
;       Ȳ  video mode set (TEXT mode)
;               0 - ѱ card, single monitor   - TEXT, 8 page
;               1 - ѱ card, dual monitor     - TEXT, 8 page
;               2 -  card, single monitor   - TE  , 8 page (not CGA)
;               3 -  card, dual monitor     - grp , 1 page
;


;========================================================================
;   << ModeSet >>
; FUNCTION = initialize the video mode
; INPUT   : AL
; OUTPUT  : none
; PROTECT : SS, SP
;
; ModeSet(AL/-)
;       {
;       save AX;
;       ClearCursor(-/-);
;       [ModeStat] = 0;
;       [KbStat] = [KbStat] && not HanKeyinMode;
;       [CodeStat] = [CodeStat] && not HangeulVideoMode;
;       [CurMode] = AL;
;       AL = AL && 01111111b;
;       PreModeset(AL/AL);      /* monitor type  equip/crtc addr set */
;       HanCardReset(-/-);
;       if (SearchMode(AL/AL,SI,carry) == CY)
;               {
;               Resrore AX;
;               Restore BX,CX,DX,SI,DI,ES,DS,BP;
;               goto [OldInt10];
;               }
;       Restore BX;             /* = AX */
;       [KbStat] = HanKeyinMode;
;       [CodeStat] = [CodeStat] || HangeulVideoMode;
;       NorModeset(AL,SI/SI);
;       SettingVariables(SI/SI);
;       InitVideoBuffer(SI/-);
;       [CurMode] = [CurMode] && 01111111b;
;       HanCardSet(-/-);                /* ѱ card enable */
;       }
;
ModeSet:
if      Hwin31sw
        jmp     WinModeSet
endif   ; Hwin31sw
ModeSet2:
        push    ax
        call    ClearCursor
        mov     [ModeStat],0
        and     [KbStat],not HanKeyinMode
        and     [CodeStat],not HangeulVideoMode
        mov     [CurMode],al
        and     al,01111111b
        call    PreModeset
        call    HanCardReset
        call    SearchMode
        jnc     ModeSetH
if      KseVga
        test    cs:[KseCard],00000001b
        jz      @f
        pop     ax
        push    ax
        cmp     al,038h
        jnz     @f
        call    HanCardReSetGr
        call    kseveop
@@:
endif   ; if KseVga
        pop     ax
        pushf
        call    cs:[OldVideo]
        ret
ModeSetH:
        pop     bx                      ; AX
        or      [KbStat],HanKeyinMode
        or      [CodeStat],HangeulVideoMode
        test    cs:[Card1st],VgaCard
        jz      @f
        call    ChgParmE2H
@@:
        call    NorModeset
        test    cs:[Card1st],VgaCard
        jz      @f
        call    ChgParmH2E
@@:
        call    SettingVariables
        call    InitVideoBuffer
        and     [CurMode],01111111b
        call    HanCardSet
        ret

if      KseVga
HanCardReSetGr:
        call    KseVgaKey
        mov     al,37h
        out     dx,al
        inc     dl
        in      al,dx
        and     al,11111110b
        or      al,00000011b
        out     dx,al
        ret
endif   ;   KseVga

ChgParmH2E:
        @push   es,ds,di
ASSUME  DS:DATA
        xor     di,di
        mov     ds,di
        les     di,cs:[OldVdParms]
        mov     word ptr [rVdParm],di
        mov     word ptr [rVdParm+2],es
        test    cs:[Card1st],VgaCard
        jz      @f
        les     di,cs:[OldSavePtr]
        les     di,es:[di]
        mov     word ptr cs:[HanSavePtr],di
        mov     word ptr cs:[HanSavePtr+2],es
@@:
ASSUME  DS:CODE
        @pop    di,ds,es
         ret

ChgParmE2H:
        @push   ds,di
ASSUME  DS:DATA
        xor     di,di
        mov     ds,di
        mov     word ptr [rVdParm],offset VideoParms
        mov     word ptr [rVdParm+2],cs
        test    cs:[Card1st],VgaCard
        jz      @f
        mov     word ptr cs:[HanSavePtr],offset VideoParmsTbl
        mov     word ptr cs:[HanSavePtr+2],cs
@@:
ASSUME  DS:CODE
        @pop    di,ds
        ret

;------------------------------------------------------------------------
;   << PreModeSet >>
; FUNCTION = initialize video card state
; INPUT   : AL
; OUTPUT  : AL
; PROTECT : DS, ES, AL
;
; PreModeSet(AL/AL)
;       {
;       if (([Card1st] == DualMnt) && ([Card1st] != ES:[rEquip]))
;               {
;               XCHG [GetHan1st],[GetHan2nd];
;               XCHG [GetUdc1st],[GetUdc2nd];
;               XCHG [PutUdc1st],[PutUdc2nd];
;               XCHG [HanOn1st],[HanOn2nd];
;               XCHG [HanOff1st],[HanOff2nd];
;               XCHG [Card1st],[Card2nd];
;               }
;       else
;               {
;               if ([Card1st] == EgaCardM)
;                       {
;                       ES:[rEquip] = mono equip;
;                       ES:[rAddr6845] = 3b4h;
;                       OUT 3c2h,62h;
;                       }
;               if ([Card1st] == EgaCardC)
;                       {
;                       ES:[rEquip] = color equip;
;                       ES:[rAddr6845] = 3d4h;
;                       OUT 3c2h,63h;
;                       }
;               }
;       }
;
PreModeSet:
        test    [Card1st],DualMnt
        jz      PreModeSetSingle
        xor     ah,ah
        test    [Card1st],ColorMnt
        jz      @f
        xor     ah,1
@@:
        test    [rEquip],00110000b
        jpe     @f
        xor     ah,1
@@:
        or      ah,ah
        jz      @f
        call    XchgCardParms
@@:
        ret
XchgCardParms:
        mov     bx,[GetHan1st]
        xchg    bx,[GetHan2nd]
        mov     [GetHan1st],bx
        mov     bx,[GetUdc1st]
        xchg    bx,[GetUdc2nd]
        mov     [GetUdc1st],bx
        mov     bx,[PutUdc1st]
        xchg    bx,[PutUdc2nd]
        mov     [PutUdc1st],bx
        mov     bx,[HanOn1st]
        xchg    bx,[HanOn2nd]
        mov     [HanOn1st],bx
        mov     bx,[HanOff1st]
        xchg    bx,[HanOff2nd]
        mov     [HanOff1st],bx
        mov     bl,[Card1st]
        xchg    bl,[Card2nd]
        mov     [Card1st],bl
        ret
PreModeSetSingle:
        push    ax
        mov     ah,[Card1st]
        and     ah,CardType
        cmp     ah,EgaCardM
        jnz     @f
        or      [rEquip],00110000b
        mov     [rAddr6845],3b4h
        mov     dx,GrpIndex
        mov     al,62h
        out     dx,al
@@:
        cmp     ah,EgaCardC
        jnz     @f
        and     [rEquip],11101111b
        or      [rEquip],00100000b
        mov     [rAddr6845],3d4h
        mov     dx,3c2h
        mov     al,63h
        out     dx,al
@@:
        pop     ax
        ret

;------------------------------------------------------------------------
;   << SearchMode >>
; FUNCTION = search video mode & get parms pointer
; INPUT   : AL = mode value(W/O MSB)
; OUTPUT  : AL, SI, carry(set = english mode)
; PROTECT : DS, ES, AL
;
; SearchMode(AL/AL,SI,carry)
;       {
;       switch([Card1st])
;               {
;               case MgaCard:
;                       if (AL != 7/40h/70h), AL = 7;
;                       break;
;               case CgaCard:
;                       if (AL != 0-6/40h), AL = 3;
;                       break;
;               case EgaCardM:
;                       if (AL != 7/0fh/40h/70h), AL = 7;
;                       break;
;               case EgaCardC:
;                       if (AL != 0-6/0dh/0eh/10h/40h/70h/60h), AL = 3;
;                       break;
;               case VgaCard:
;               case McgaCard:
;                       if (AL != 0-6/0dh-13h/40h/70h/60h), AL = 3;
;               }
;       if (AL == 2), AL = 3;
;       if ([Card1st] == DualMnt)
;               {
;               if (([rEquip] == mono) && (AL == 40h))
;                       AL = 7;
;               if (([rEquip] == color) && (AL == 70h))
;                       AL = 3;
;               }
;       if (([Card1st] != HanCard) && (AL == 3/7))
;               {
;               AL = AL || 10h;
;               if ([Card1st] == DualMnt), AL = AL || 80h;
;               }
;       switch([card1st])
;               {
;               case MgaCard:
;                       SI = MgaModeTbl;
;                       break;
;               case CgaCard:
;                       SI = CgaModeTbl;
;                       break;
;               case EgaCardM:
;               case EgaCardC:
;                       SI = EgaModeTbl;
;                       break;
;               case VgaCard:
;               case McgaCard:
;                       SI = VgaModeTbl;
;               }
;       /* search AL */
;       /* if match, NC */
;       /* if not, CY */
;       }
;
SearchMode:
        test    [CodeStat],HangeulMode
        jz      SearchModeErr
        test    [Card1st],DualMnt
        jz      SearchModeDual
        cmp     al,7
        jz      @f
        cmp     al,0fh
        jz      @f
        cmp     al,70h
        jz      @f
        test    [rEquip],00110000b
        jpo     SearchModeDual          ; jump if color mode & color equip
        mov     al,7
        mov     [CurMode],al
        jmp     short SearchModeDual
@@:
        test    [rEquip],00110000b
        jpe     SearchModeDual          ; jump if mono mode & mono equip
        mov     al,3
        mov     [CurMode],al
SearchModeDual:
        mov     bl,[Card1st]
        and     bx,CardType
        mov     si,[bx+ModeTable]
@@:
        cmp     [si],al
        jz      SearchModeAdj
        cmp     byte ptr [si],-1
        jz      SearchModeDefault
        cmp     byte ptr [si],-2
        jz      SearchModeErr
        inc     si
        jmp     short @b
SearchModeErr:
        stc
        ret
SearchModeDefault:
        mov     al,7
        test    [Card1st],ColorMnt
        jz      @f
        mov     al,3
@@:
        mov     [CurMode],al
SearchModeAdj:
        cmp     al,2
        jnz     @f
        mov     al,3
@@:
        test    [Card1st],DualMnt
        jz      SearchModeAdj2
        cmp     al,40h
        jnz     @f
        test    [rEquip],00110000b
        jpo     @f
        mov     al,70h
        mov     [CurMode],al
@@:
        cmp     al,70h
        jnz     SearchModeAdj2
        test    [rEquip],00110000b
        jpe     SearchModeAdj2
        mov     al,40h
        mov     [CurMode],al
SearchModeAdj2:
        mov     ah,al
        cmp     ah,3
        jz      @f
        cmp     ah,7
        jnz     SearchModeDo
@@:
        test    [CodeStat],Chab or WSung7
        jnz     @f
        test    [Card1st],HanCard
        jnz     SearchModeDo
@@:
        or      ah,80h
        test    [Card1st],DualMnt
        jz      SearchModeDo
        or      ah,10h
SearchModeDo:
        mov     bl,[Card1st]
        and     bx,CardType
        shl     bx,1
        mov     si,[bx+ModeParmsTbl]
        add     bx,2
        mov     cx,[bx+ModeParmsTbl]
        mov     bx,ModeTblLng
@@:
        cmp     [si],ah
        jz      @f
        add     si,bx
        loop    @b
        jmp     SearchModeErr
@@:
        clc
        ret
ModeTable       label   word
                dw      offset MgaAllModeTbl
                dw      offset CgaAllModeTbl
                dw      offset EgaMAllModeTbl
                dw      offset EgaCAllModeTbl
                dw      offset McgaAllModeTbl
                dw      offset VgaAllModeTbl

MgaAllModeTbl   db      7, 40h, 70h, -1
CgaAllModeTbl   db      0, 1, 2, 3, 4, 5, 6, 40h, -1

ModeParmsTbl    label   word
                dw      offset MgaModeTbl
                dw      5
                dw      offset CgaModeTbl
                dw      4
                dw      offset EgaModeTbl
                dw      9
                dw      offset EgaModeTbl
                dw      9
                dw      offset VgaModeTbl
                dw      11
                dw      offset VgaModeTbl
                dw      11

MgaModeTbl      label   byte
        db  07h,0*2,07h,0b0h,0b0h,10h,000h,00000000b,25 ; han
        dw  0,  0,0b0ch
ModeTblLng      =       $-MgaModeTbl
        db  87h,1*2,07h,0b0h,0b8h,10h,080h,10000100b,25 ; single
        dw  38h,38ah,0b0ch
        db  97h,1*2,07h,000h,0b0h,00h,080h,00000100b,25 ; dual
        dw  38h,10ah,0b0ch
        db  40h,5*2,07h,000h,0b8h,00h,080h,01100100b,25 ;
        dw  38h,38ah,2e0fh
        db  70h,5*2,07h,000h,0b0h,00h,080h,00100100b,25 ;
        dw  38h,10ah,2e0fh

CgaModeTbl      label   byte
        db  03h,0*2,03h,0b8h,0b8h,10h,000h,01001000b,25 ; han
        dw  0,0,0607h
        db  83h,2*2,06h,000h,0b8h,00h,080h,01000100b,25 ; single
        dw  38h,0,0607h
        db  93h,2*2,06h,000h,0b8h,00h,080h,01000100b,25 ; dual
        dw  38h,0,0607h
        db  40h,5*2,06h,000h,0b8h,00h,080h,01100100b,25 ;
        dw  38h,0,2e0fh

;------------------------------------------------------------------------
;   << NorModeset >>
; FUNCTION = video mode setting
; INPUT   : AL, SI
; OUTPUT  : SI
; PROTECT : DS, ES, SI
;
; NorModeset(AL,SI/SI)
;       {
;       if (([Card1st] == CgaCard) || ([Card1st] == MgaCard))
;               {
;               if ([SI+sRealMode] ==  3/7)
;                       {
;                       ModeSetMonoText(SI/-);
;                       }
;               else
;                       {
;                       ModeSetMonoGrp(SI/-);
;                       }
;               }
;       else
;               {
;               if ([SI+sRealMode] ==  3/7)
;                       {
;                       ModeSetVgaText(SI/-);
;                       }
;               else
;                       {
;                       ModeSetVgaGrp(SI/-);
;                       }
;               }
;       }
;
NorModeset:
        mov     al,[si+sRealMode]
        mov     ah,[CurMode]
        and     ah,10000000B
        or      al,ah
        xor     ah,ah
        mov     bh,[si+sMode]
        mov     bl,[Card1st]
        and     bl,CardType
        cmp     bl,CgaCard
        ja      NorModesetVga
        cmp     bh,3
        jz      @f
        cmp     bh,7
        jz      @f
        jmp     ModeSetMonoGrp
@@:
        jmp     ModeSetMonoText
NorModesetVga:
        cmp     bh,3
        jz      @f
        cmp     bh,7
        jz      @f
        jmp     ModeSetVgaGrp
@@:
        jmp     ModeSetVgaText
ModeSetMonoText:
        pushf
        call    [OldVideo]
        mov     [Port3bf],0
        ret
ModeSetMonoGrp:
        mov     di,word ptr [rVdParm]
        add     di,[si+sAdjParms]
        xchg    di,word ptr [rVdParm]
        pushf
        call    [OldVideo]
        xchg    di,word ptr [rVdParm]
        mov     bx,[si].sParms
        or      bx,bx
        jz      @f
        mov     dx,3bfh
        mov     al,00000011b
        out     dx,al
        mov     dl,0b8h
        mov     al,bl
        out     dx,al
        mov     [rCrtModeSet],al
        mov     dl,0bfh
        mov     al,bh
        mov     [Port3bf],al
        out     dx,al
@@:
        ret

;------------------------------------------------------------------------
;   << SettingVariables >>
; FUNCTION = initialize variables
; INPUT   : SI
; OUTPUT  : SI
; PROTECT : DS, ES, SI
;
; SettingVariables(SI/SI)
;       {
; set flages
;       [HjStat] = [HjStat] || [OrgHjStat];
;       if ([CodeStat] == Chab), [HjStat] = [HjStat] && not (UdcLoaded or UdcArea);
;       if ([CodeStat] == WSung7), [HjStat] = [HjStat] && not (UdcLoaded or UdcArea or HjLoaded);
;       [ModeStat] = [SI+sStatus];
;       [DisplayStat] = [DisplayStat] && not RunEsc;
;       [ModeId] = [SI+sModeId];
;       [KbStat] = [KbStat] && not (HEStat or JJStat);
;       [HanStat] = 0;
;       [HjMenuStat] = 0;
;
; set internal constant
;       [MaxPage] = 1;
;       if ([ModeStat] == MultiPage), [MaxPage] = 8;
;       [MaxRows] = [SI+sRows];
;       [HjMenuLine] = [SI+sRows] - 1;
;       [CurPos] = 0;
;       [CurPage] = 0;
;       [TextPos1Addr] = 0;
;       [TextPos2Addr] = 0;
;       [GrpPosAddr] = 0;
;
; set ROM BIOS data area
;       AL = [CurMode];
;       if(AL != 1000000B)
;               {
;               [rInfo] == [rInfo] || 10000000B;
;               }
;       AL = AL && 01111111b;
;       ES:[rCrtMode] = AL;
;       ES:[rPoints] = 16;
;       ES:[rCrtCols] = 80;
;       ES:[rRows] = [MaxRows] - 1;
;       ES:[rCrtLen] = [SI+CodeSize];
;       if (ES:[rCrtLen] == 0), ES:[rCrtLen] = [SI+GrpSize];
;       ES:[rCurType] = [SI+sCurType];
;
; set code buffer address
;       BH = [SI+sCodeVram];
;       BL = 0;
;       AX = 0
;       if (BX == 0)
;               {
;               AX = [CodeBuf2Addr];
;               BX = [CodeBuf2Addr+2];
;               }
;       [CodeBuf1Addr] = AX;
;       [CodeBuf1Addr+2] = BX;
;
; Set EQUIP flag
;       if ([Card1st] != DualMnt)
;               {
;               if ([ModeStat] == ColorMode)
;                       /* set color equip */
;               else
;                       /* set mono equip */
;               }
;       }
;
SettingVariables:
; set flages
        mov     ah,[OrgHjStat]
        or      [HjStat],ah
        test    [CodeStat],WSung7
        jz      @f
        and     [HjStat],not (UdcLoaded or UdcArea or HjLoaded )
@@:
        mov     ah,[si+sStatus]
        test    [KseCard],Page1Fix
        jz      @f
        and     ah,not MultiPage
@@:
        mov     [ModeStat],ah
        and     [DisplayStat],not RunEsc
        mov     ah,[si+sModeId]
        mov     [ModeId],ah
if      WINNT
else
        and     [KbStat],not (HEStat or JJStat)
endif
        mov     [HanStat],0
        mov     [HjMenuStat],0
; set internal constant
        mov     [MaxPage],1
        test    [ModeStat],MultiPage
        jz      @f
        mov     [MaxPage],8
@@:
        mov     ah,[si+sRows]
        mov     [MaxRows],ah
        dec     ah
        mov     [HjMenuLine],ah
        mov     [CurPos],0
        mov     [CurPage],0
        mov     [TextPos1Addr],0
        mov     [TextPos2Addr],0
        mov     [GrpPosAddr],0
; set ROM BIOS data area
        mov     ah,[CurMode]
        and     [rInfo],01111111B
        mov     al,ah
        and     al,10000000B
        or      [rInfo],al
        and     ah,01111111b
        mov     [rCrtMode],ah
        mov     [rPoints],16
        mov     [rCrtCols],80
        mov     bl,[MaxRows]
        dec     bl
        mov     [rRows],bl
        mov     bh,[si+sCodeSize]
        or      bh,bh
        jnz     @f
        mov     bh,[si+sGrpSize]
@@:
        xor     bl,bl
        mov     [rCrtLen],bx
        mov     bx,[si+sCurType]
        mov     [rCurType],bx
; set code buffer address
        mov     bh,[si+sCodeVram]
        xor     bl,bl
        xor     ax,ax
        or      bx,bx
        jnz     @f
        mov     ax,word ptr [CodeBuf2Addr]
        mov     bx,word ptr [CodeBuf2Addr+2]
@@:
        mov     word ptr [CodeBuf1Addr],ax
        mov     word ptr [CodeBuf1Addr+2],bx
; set grp buffer address
        mov     bh,[si+sGrpVram]
        xor     bl,bl
        or      bx,bx
        jz      @f
        mov     word ptr [GrpBufAddr],0
        mov     word ptr [GrpBufAddr+2],bx
@@:
; Set EQUIP flag
        test    [Card1st],DualMnt
        jnz     @f
        or      [rEquip],00110000b
        test    [ModeStat],ColorMode
        jz      @f
        and     [rEquip],11101111b
@@:
        ret


;------------------------------------------------------------------------
;   << InitVideoBuffer >>
; FUNCTION = initialize video buffer(1st code, 2nd code and grp buffer)
; INPUT   : SI
; OUTPUT  : none
; PROTECT : DS, ES
;
; InitVideoBuffer(SI/-)
;       {
;       if ([CurMode] == 10000000b)
;               {
;               AX = 720h;
;               LES DI,[CodeBuf1Addr];
;               CX = 8000h;
;               if ([SI+sCodeSize] == 0), CX = [CodeBufSize];
;               CX = CX/2;
;               REP STOSW;
;               LES DI,[CodeBuf2Addr];
;               CX = [CodeBufSize]/2;
;               REP STOSW;
;               if ([SI+sGrpSize] != 0)
;                       {
;                       LES DI,[GrpBufAddr];
;                       CH = [SI+sGrpSize];
;                       CL = 0;
;                       CX = CX/2;
;                       AX = 0;
;                       REP STOSW;
;                       }
;               }
;       }
;
InitVideoBuffer:
        test    [CurMode],10000000b
        jnz     InitVideoBufferEnd
        push    es
        mov     ax,720h
        les     di,[CodeBuf1Addr]
        mov     cx,8000h
        cmp     [si+sCodeSize],0
        jnz     @f
        mov     cx,[CodeBufSize]
@@:
        shr     cx,1
if      HotKey
        test    [KbStat],ReqEnvrChg
        jz      @f
        test    [KbMisc],RunningHot
        jz      @f
        or      di,di
        jnz     InitGrpBuffer
        rep stosw
        jmp     short InitGrpBuffer
@@:
endif   ; if HotKey
        rep stosw
        les     di,[CodeBuf2Addr]
        mov     cx,[CodeBufSize]
        shr     cx,1
        rep stosw
InitGrpBuffer:
        mov     ch,[si+sGrpSize]
        or      ch,ch
        jz      @f
        les     di,[GrpBufAddr]
        xor     cl,cl
        shr     cx,1
        xor     ax,ax
        rep stosw
@@:
        pop     es
InitVideoBufferEnd:
        ret

;========================================================================
;       << SetCurType >>
; FUNCTION = set cursor type
; INPUT   :  AH = 01h
;            CH = cursor start, CL = cursor end
;           (CH)    7 6 5 4 3 2 1 0
;                   | | | | | | | |
;                   | | | +-+-+-+-+--- cursor start
;                   | | +------------- 0 : cursor on, 1 : off
;                   +-+--------------- not used
;           (CL)    7 6 5 4 3 2 1 0
;                         | | | | |
;                         +-+-+-+-+--- cursor end
; OUTPUT  : none
; PROTECT : none
; SetCurType(CX/-)
;       {
;       ClearCursor(-/-);
;       switch([ModeId])
;               case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                       call [OldInt10];
;                       break;
;               case 2 :                        ; TE mode 7, MGA
;               case 4 :                        ; TE mode 2/3, CGA
;               case 6 :                        ; TE mode 7, EGA/VGA
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;               case 10 :                       ; mode 40/70
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;       ES:[rCurType] = CX;
;       }

SetCurType:
        call    ClearCursor
        pushf
        call    [OldVideo]
        mov     [rCurType],cx
        cmp     [Modeid],2*0
        jnz     SetCurTypeEnd
        test    [rInfo],00000001b
        jz      SetCurTypeEnd
        test    [Card1st],00001100b
        jz      SetCurTypeEnd           ; jump if not EGA or VGA card
        cmp     ch,cl
        ja      @f
        mov     ax,cx
        and     cx,0f0fh
        cmp     cl,5
        jb      SetCurTypeMonoCL
        inc     cl
        cmp     cl,10
        jb      SetCurTypeMonoCL
        inc     cl
SetCurTypeMonoCL:
        cmp     ch,5
        jb      SetCurTypeMonoCH
        inc     ch
        cmp     ch,10
        jb      SetCurTypeMonoCH
        inc     ch
SetCurTypeMonoCH:
        mov     dh,ah
        and     dh,20h
        or      ch,dh
        test    [ModeStat],ColorMode
        jz      @f
        mov     cx,ax
        and     cx,0707h
        shl     cx,1
        mov     dh,ah
        and     dh,20h
        or      ch,dh
@@:
        mov     dx,[rAddr6845]
        mov     al,0ah
        mov     ah,ch
        out     dx,ax
        inc     al
        mov     ah,cl
        out     dx,ax
SetCurTypeEnd:
        ret


;========================================================================
;       << SetCurPos >>
; FUNCTION = set cursor position
; INPUT   : AH = 02h
;           BH = page #, DX = cursor position
; OUTPUT  : none
; PROTECT : AX, BX, CX, DX, ES, DS
; SetCurPos(BH,DX/-)
;       {
;       if ([MaxPage] == 1), BH = 0;
;       if (BH >= [MaxPage]), BH = [CurPage];
;       if (DL >= 80), return;
;       if (DH >= [MaxRows]), return;
;       save AX, BX;
;       ClearCursor(-/-);
;       if ([ModeId = 0*2)
;               AH = 2;
;               call [OldInt10];
;       ES:[BH*2+rCurPos] = DX;
;       restore AX,BX;
;       }

SetCurPosAll:
        cmp     [ModeId],0*2
        jne     SetCurPos
        jmp     VdDummyRet
SetCurPos:
        cmp     [MaxPage],1
        ja      @f
        xor     bh,bh
@@:
        cmp     bh,[MaxPage]
        jb      @f
        mov     bh,[CurPage]
@@:
        @push   ax,bx
        call    ClearCursor
        cmp     [ModeId],0*2
        jne     @f
        mov     ah,2
        pushf
        call    [OldVideo]
@@:
        xchg    bh,bl
        xor     bh,bh
        shl     bx,1
        mov     [bx+rCurPos],dx
        @pop     bx,ax
        ret


;========================================================================
;       << GetCurPos >>
; FUNCTION = get cursor position
; INPUT   : AH = 03h
;           BH = page #
; OUTPUT  : CX = cursor type, DX = cursor position
; PROTECT : none
; GetCurPos(BH/CX,DX)
;       {
;       if ([MaxPage] == 1), BH = 0;
;       if (BH >= [MaxPage]), BH = [CurPage];
;       SS:[BP+rCX] = ES:[rCurType];
;       SS:[BP+rDX] = ES:[BH*2 + rCurPos];
;       }

GetCurPos:
        cmp     [MaxPage],1
        ja      @f
        xor     bh,bh
@@:
        cmp     bh,[MaxPage]
        jb      @f

        mov     bh,[CurPage]
@@:
        mov     ax,[rCurType]
        mov     [bp+rCX],ax
        xchg    bh,bl
        xor     bh,bh
        shl     bx,1
        mov     ax,[bx+rCurPos]
        mov     [bp+rDX],ax
        ret


;========================================================================
;       << SetPage >>
; FUNCTION = set display page
; INPUT   : AH = 05h
;           AL = page #
; OUTPUT  : none
; PROTECT : none
; SetPage(AL/-)
;       {
;       if (AL >= [MaxPage]), return;
;       if (AL = [CurPage] || [MaxPage] = 1), return;
;       [HanStat] = [HanStat] && not Han1st;
;       ClearCursor(-/-);
;       if ([ModeId] = 0*2)
;               {
;               call [OldInt10];
;               AL = ES:[rCurPage];
;               }
;       ES:[rCurPage] = AL;
;       [CurPage] = AL;
;       ES:[rCrtStart] = AL * ES:[rCrtLen];
;       }

SetPage:
        cmp     al,[MaxPage]
        jae     SetPageExit
        cmp     al,[CurPage]
        jz      SetPageExit
        cmp     [MaxPage],1
        jz      SetPageExit
        and     [HanStat],not Han1st
        call    ClearCursor
        cmp     [ModeId],0*2
        jnz     @f
        pushf
        call    [OldVideo]
        mov     al,[rCurPage]
@@:
        mov     [rCurPage],al
        mov     [CurPage],al
        xor     ah,ah
        mul     [rCrtLen]
        mov     [rCrtStart],ax
SetPageExit:
        ret


;========================================================================
;       << ReadCharAttr >>
; FUNCTION = read character & attribute at current cursor position
; INPUT   : AH = 08h
;           BH = page #
; OUTPUT  : AL = char, AH = attribute(grp mode = don't care)
; PROTECT : none
; ReadCharAttr(BH/AL,AH)
;       {
;       if ([MaxPage] == 1), BH = 0;
;       if (BH >= [MaxPage]), BH = [CurPage];
;       DX = [BH*2+rCurPos];
;       SI = DH*80*2+DL*2;
;       AX = [CodeBuf1Addr:[SI + [rCrtLen] * BH]];
;       }

ReadCharAttr:
        cmp     [MaxPage],1
        ja      @f
        xor     bh,bh
@@:
        cmp     bh,[MaxPage]
        jb      @f
        mov     bh,[CurPage]
@@:
        mov     bl,bh
        xor     bh,bh
        shl     bx,1
        mov     dx,[bx+rCurPos]
        mov     ax,80
        mul     dh
        xor     dh,dh
        add     ax,dx
        shl     ax,1
        mov     si,ax
        mov     ax,[rCrtLen]
        shr     bx,1
        mul     bx
        add     ax,si
        lds     si,[CodeBuf1Addr]
        add     si,ax
        lodsw                                   ; AX = Cahracter : Attribute
@@:
        ret


;========================================================================
;       << GetMode >>
; FUNCTION = get mode, page and columns
; INPUT   : AH = 0Fh
; OUTPUT  : AL = video mode,  AH = columns, BH = current page
; PROTECT : none
; GetMode(-/AL,AH,BH)
;       {
;       call [OldInt10];
;       AL = [CurMode] + buffer clear information(0:487 bit7);
;       SS:[BP+rBX] = BX
;       }

GetMode:
        pushf
        call    [OldVideo]
        mov     al,[rCrtMode]
        mov     bl,[rInfo]
        and     bl,10000000b                    ; buffer clear information
        or      al,bl
        mov     cx,ss:[bp+rBX]
        mov     bl,cl
        mov     ss:[bp+rBX],bx
        ret


;========================================================================
;       << Attribute >>
; Function = Skip if english ext. video card and video mode 2, 3, 7, 40, 70
;            in EGA/VGA/MCGA card.
; INPUT : AH = 010h
;         AL = 03h
;         BL = blink/intensity toggle ( 0 : enable intensity, 1 : enable blinking)
; OUTPUT  : none
; PROTECT : none
Attribute:
        test    [ModeStat],EmuCursor
        jz      GoToVdRom
        test    [ModeStat],GrpMode
        jnz     GoToVdRom
        cmp     ax,1002h
        jz      @f
        cmp     ax,1003h                ; intensity function ?
        jnz     GoToVdRom
@@:
        ret
JmpVdDummyjj:
        jmp     JmpVdDummy
GoToVdRom:
if      KseVga
        test    cs:[KseCard],00000001b
        jz      JmpVdDummyjj
        cmp     [ModeId],0
        jnz     JmpVdDummyjj
        cmp     al,1
        jz      @f
        cmp     al,2
        jnz     JmpVdDummyjj
@@:
        push    ax
        push    bx
        push    dx
        mov     ah,4                    ; border chip on
        mov     dx,03CCh
        in      al,dx
        test    al,80h                  ; VS Negative ?
        jnz     @f                      ; No Positive
        or      ah,1                    ; border_0
@@:                                     ; border_1
        test    al,40h                  ; HS Negative ?
        jnz     @f                      ; No Positive
        or      ah,2
@@:                                     ; border_2
        mov     dx,257h
        in      al,dx
        mov     al,2                    ; index 2 control reg
        out     dx,al
        mov     al,ah
        out     dx,al
        in      al,dx
        mov     al,0                    ; index 0 border position
        out     dx,al
        mov     al,94h
        out     dx,al
        in      al,dx
        mov     al,1                    ; index 0 border width
        out     dx,al
        mov     al,8
        out     dx,al
        in      al,dx
        mov     al,3                    ; index 0 border color sampling position
        out     dx,al
        mov     al,8
        out     dx,al
        pop     dx
        pop     bx
        pop     ax
endif   ;KseVga
        cmp     ax,1001h
        jz      @f
        cmp     ax,1002h
        jz      @f
        jmp     JmpVdDummy
@@:
        mov     bl,010h
        cmp     [CurMode],060h
        jz      @f
        cmp     [CurMode],040h
        jz      @f
        mov     bl,00fh
        cmp     [CurMode],070h
        jz      @f
        jmp     JmpVdDummy
@@:
        mov     ES:[rCrtMode],bl
        add     sp,2
        @pop    bp,ds,es,di,si,dx,cx,bx
        pushf
        call    cs:[OldVideo]
        dec     cs:[VideoActive]
        @push   ax,es
        xor     ax,ax
        mov     es,ax
        mov     al,CS:[CurMode]
        mov     ES:[rCrtMode],al
        @pop    es,ax
        iret
JmpVdDummy:
        jmp     VdDummyRet              ; go to ROM bios


;========================================================================
;       << WriteCharAttr >>
; FUNCTION = write character & attribute at given page
; INPUT   : AH = 09h
;           AL = char, BL = attr, BH = page, CX = counter
; OUTPUT  : none
; PROTECT : none
;========================================================================
;       << WriteChar >>
; FUNCTION = write character at given page with current attribute
; INPUT   : AH = 0Ah
;           AL = char, (BL = attr), BH = page, CX = counter
; OUTPUT  : none
; PROTECT : none
; WriteCharAttr(AL,BX,CX/-)
; WriteChar(AL,BX,CX/-)
;       {
;       CalcCurPosPage(BH/DX,[TextPos1Addr],[TextPos2Addr],[GrpPosAddr]);
;       if ([DisplayStat] == RunEsc), jump EscSequence(AX,BX,CX,DX/-);
;       if (AL = EscKey) && (CX = 1), jump EscSequence(AX,BX,CX,DX/-);
;       if ([MaxPage] == 1), BH = 0;
;       if (BH >= [MaxPage]), BH = [CurPage];
;       WriteCharAll(AL,AH,BL,BH,CX,DX/-);
;       }

WriteCharAttr:
WriteChar:
        cmp     [MaxPage],1
        ja      @f
        xor     bh,bh
@@:
        cmp     bh,[MaxPage]
        jb      @f
        mov     bh,[CurPage]
@@:
        call    CalcCurPosPage
        test    [DisplayStat],RunEsc
        jz      @f
        jmp     EscSequence
@@:
        cmp     al,EscKey
        jne     WriteCharEsc
        cmp     cx,1
        jne     WriteCharEsc
        jmp     EscSequence
WriteCharEsc:
        call    WriteCharAll
        ret


;========================================================================
;       << WriteTty >>
; FUNCTION = write character with cursor moving
; INPUT   : AH = 0Eh
;           AL = charr, (BL = attr)
; OUTPUT  : none
; PROTECT : none
;========================================================================
;       << WriteTtyInterim >>
; FUNCTION = write char and cursor move with interim char
; INPUT   : AH = 0FEh
;           AL = char, (BL = attr)
; OUTPUT  : none
; PROTECT : none
;
; WriteTty(AL,BL/-)
; WriteTtyInterim(AL,BL/-)
;       {
;       BH = [CurPage];
;       CalcCurPosPage(BH/DX,[TextPos1Addr],[TextPos2Addr],[GrpPosAddr]);
;       switch(AL)
;               case CR :
;                       if ([HanStat] == Han1st), DispEnglishOld(-/-);
;                       [HanStat] = [HanStat] && not Han1st;
;                       DL = 0;
;                       SetCurPos(BH,DX/-);
;                       break;
;               case LF :
;                       if ([HanStat] == Han1st), DispEnglishOld(-/-);
;                       [HanStat] = [HanStat] && not Han1st;
;                       if (DH = [MaxRows]-1), FullScroll(BH/-);
;                       if (DH < [MaxRows]-1), DH = DH+1;
;                       SetCurPos(BH,DX/-);
;                       break;
;               case BELL :
;                       AX = 0e07h;
;                       call [OldInt10];
;                       break;
;               case BS :
;                       if (DL = 0), return;
;                       if ([HanStat] == Han1st), DispEnglishOld(-/-);
;                       [HanStat] = [HanStat] && not Han1st;
;                       DL = DL-1
;                       SetCurPos(BH,DX/-);
;                       break;
;               default :
;                       CX = 1;
;                       if (AH == 0eh)
;                               {
;                               WriteCharAll(AL,AH,BL,BH,CX,DX/-);
;                               +DL;
;                               if (DL >= 80)
;                                       {
;                                       DL = 0;
;                                       +DH;
;                                       if (DH >= [MaxRows])
;                                               FullScroll(BH/-);
;                                               -DH;
;                                       }
;                               SetCurPos(BH,DX/-);
;                               }
;                       else
;                               {
;                               AH = 0eh;
;                               [OldHanStat] = [HanStat];
;                               WriteCharAll(AL,AH,BL,BH,CX,DX/-);
;                               DL = DL+1;
;                               if ([HanStat] != Han1st) &&
;                                  ([OldHanStat] == Han1st)), DL = DL-2;
;                               SetCurPos(BH,DX/-);
;                               }
WriteTty:
WriteTtyInterim:
        mov     bh,[CurPage]
        call    CalcCurPosPage
        cmp     al,CR
        jne     WriteTtyLF
        test    [HanStat],Han1st
        jz      @f
        call    DispEnglishOld
        and     [HanStat], not Han1st
@@:
        xor     dl,dl
        call    SetCurPos
        ret

WriteTtyLF:
        cmp     al,LF
        jne     WriteTtyBELL
        test    [HanStat],Han1st
        jz      @f
        call    DispEnglishOld
        and     [HanStat],not Han1st
@@:
        inc     dh
        cmp     dh,[MaxRows]
        jne     @f
        dec     dh
        jmp     FullScroll
@@:
        call    SetCurPos
        ret

WriteTtyBELL:
        cmp     al,BELL
        jne     @f
        mov     ax,0e07h
        pushf
        call    [OldVideo]
        ret
@@:
        cmp     al,BS
        jne     WriteTtyDefault
        or      dl,dl
        jz      WriteTtyTmpExit
        test    [HanStat],Han1st
        jz      @f
        call    DispEnglishOld
        and     [HanStat], not Han1st
@@:
        dec     dl
        call    SetCurPos
WriteTtyTmpExit:
        ret

WriteTtyDefault:
        mov     cx,1
        cmp     ah,0Eh
        jnz     WriteTtyFE
        call    WriteCharAll
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        inc     dh
        cmp     dh,[MaxRows]
        jnz     @f
        dec     dh
        call    FullScroll
@@:
        call    SetCurPos
        ret

WriteTtyFE:
;
;       old Han1st      new Han1st
;           0               0           none
;           0               1           inc
;           1               0           dec
;           1               1           dec
;
        mov     ah,[HanStat]
        mov     [OldHanStat],ah
        mov     ah,0eh
        call    WriteCharAll
        test    [OldHanStat],Han1st     ; 00, 01, 10, 11
        jz      @f
        dec     dl                      ; 10, 11
        jmp     short TtySeyCurPos
@@:
        test    [HanStat],Han1st        ; 00, 01
        jz      TtySeyCurPos
        inc     dl                      ; 01
TtySeyCurPos:
        call    SetCurPos
WriteStringEnd:
        ret


;========================================================================
;       << WriteString >>
; FUNCTION = write string
; INPUT   : AH = 13h, AL = function
;           BH = page, BL = attr(AL=0,1), CX = counter, DX = curpos
;           ES:BP = string pointer
; OUTPUT  : none
; PROTECT : none
WriteString:
        cmp     al,3
        ja      WriteStringEnd
        jcxz    WriteStringEnd
        mov     si,[bp+rBP]
        mov     ds,[bp+rES]
        mov     di,bx
        mov     bl,bh
        xchg    di,bx
        and     di,0fh
        shl     di,1
        push    [di+rCurPos]            ; save curpos
        mov     di,ax
        mov     ah,2
        int     10h
WriteStrLoop:
; BL = attr(AL=0,1), BH = page, DX = curpos, DS:SI = string position
; ES = data segment, DI = function
        lodsb
        test    di,00000010b
        jz      @f
        xchg    al,bl
        lodsb
        xchg    al,bl
@@:
        push    cx
        push    si
        push    ds
        mov     cx,cs
        mov     ds,cx
        cmp     al,cr
        jz      WriteStr0E
        cmp     al,lf
        jz      WriteStr0E
        cmp     al,bell
        jz      WriteStr0E
        cmp     al,bs
        jz      WriteStr0E
        test    [HanStat],Han1st
        jnz     WriteStrEng
        call    CheckCodeRange1st
        jc      WriteStrEng
        cmp     dl,80-1
        jb      WriteStrEng
        test    [CodeStat],WSung7
        jnz     WriteStrEng
        xor     dl,dl
        inc     dh
        cmp     dh,[MaxRows]
        jnz     @f
        dec     dh
        call    FullScroll
@@:
        call    SetCurPos
WriteStrEng:
        mov     cx,1
        mov     ah,9
        int     10h
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        inc     dh
        cmp     dh,[MaxRows]
        jnz     @f
        dec     dh
        call    FullScroll
@@:
        call    SetCurPos
        jmp     short @f
WriteStr0E:
        mov     ah,0eh
        int     10h
        mov     ah,3
        int     10h
@@:
        pop     ds
        pop     si
        pop     cx
        loop    WriteStrLoop
        pop     dx                      ; restore curpos
        test    di,00000001b
        jnz     @f
        mov     ah,2
        int     10h
@@:
        ret


;------------------------------------------------------------------------
;       << WriteCharAll >>
; FUNCTION = write hangeul/english char
; INPUT   : AH = 9/0ah/0eh function
;           AL = char, (BL = attr), BH = page, CX = counter, DX = cursor pos
; OUTPUT  : none
; PROTECT : BH, DX, DS, ES
;
; WriteCharAll(AL,AH,BL,BH,CX,DX/-)
;       {
;       GetAttr(AH,BL,BH/BL);
;       if (CheckCodeRangeWord(AX/carry)=DBCS(NC) && ([HanStat] == Han1st)
;          && ([OldCurPos] = DX) && ([OldPage] = BH))
;               DispHangeul(AL,BL,BH/-);
;       else
;               {
;               if ([HanStat] == Han1st)
;                       DispEnglishOld(-/-);
;               if (CheckCodeRange1st(AL/carry) = DBCS(NC))
;                       {
;                       if ((DL >= 80-1)
;                               {
;                               if ([CodeStat] == WSung7)
;                                       goto DispEnglishNew(AL,BX,CX/-);
;                               else
;                                       {
;                                       DL = 0;
;                                       +DH;
;                                       if (DH >= [MaxRows])
;                                               {
;                                               FullScroll(BH/-);
;                                               -DH;
;                                               }
;                                       SetCurPos(BH,DX/-);
;                                       CalcCurPosPage(BH/DX,[TextPos1Addr],[TextPos2Addr],[GrpPosAddr]);
;                                       }
;                               }
;                       /* save AL,BL,BH,CX,DH,DL+1,[TextPos1Addr],[TextPos2Addr],
;                               [GrpPosAddr] to old */
;                       if ([CodeStat] == WSung7), DispEnglishNew(AL,BX,CX/-);
;                       [HanStat] = [HanStat] || Han1st;
;                       }
;               else
;                       DispEnglishNew(AL,BX,CX/-);
;               }
;       }

WriteCharAll:
        call    GetAttr
        test    [HanStat],Han1st
        jz      DispHanEnglish
        cmp     [OldCurPos],dx
        jnz     @f
        cmp     [OldPage],bh
        jnz     @f
        push    ax
        mov     ah,[OldChar]
        call    CheckCodeRangeWord
        pop     ax
        jc      @f
        jmp     DispHangeul
@@:
        call    DIspEnglishOld
        and     [HanStat],not Han1st
DispHanEnglish:
        call    CheckCodeRange1st
        jc      DispEnglish
         call    CheckCurPos1st
         jc      @f
         jmp     DispHangeul
 @@:
        cmp     dl,80-1
        jb      DispSaveAddr
        cmp     ah,0ah
        jbe     DispEnglish
        test    [CodeStat],WSung7
        jnz     DispEnglish
        xor     dl,dl
        inc     dh
        cmp     dh,[MaxRows]
        jnz     @f
        dec     dh
        call    FullScroll
@@:
        call    SetCurPos
        call    CalcCurPosPage
DispSaveAddr:
        mov     [OldChar],al
        mov     [OldAttr],bl
        mov     [OldPage],bh
        mov     [OldCounter],cx
        mov     [OldCurPos],dx
        inc     [OldCurPos]
        mov     di,[TextPos1Addr]
        mov     [OldTextPos1Addr],di
        mov     di,[TextPos2Addr]
        mov     [OldTextPos2Addr],di
        mov     di,[GrpPosAddr]
        mov     [OldGrpPosAddr],di
        test    [CodeStat],WSung7
        jz      @f
        call    DispEnglishNew
@@:
        or      [HanStat],Han1st
        ret
DispEnglish:
        call    DispEnglishNew
        ret

CheckCurPos1st:
        test    [CodeStat],Chab or WSung7
        jnz     CheckCurPos1stR
        test    [Card1st],HanCard
        jnz     CheckCurPos1stR
        cmp     dl,0
        jz      CheckCurPos1stR
        @push   ds,si,ax,bx,cx,dx
        mov     cl,dl
        sub     cl,1
        std
        lds     si,[CodeBuf1Addr]
        add     si,cs:[TextPos1Addr]
        lodsw
        xor     ch,ch
        xor     bl,bl
        lodsw
        mov     dx,ax
        call    CheckHanType
        and     al,00000011b
        cld
        cmp     al,00000001b
        jnz     @f
        mov     [OldChar],dl
        mov     [OldAttr],dh
        mov     cx,01
        mov     [OldCounter],cx
        @pop    dx,cx,bx,ax
        mov     [OldPage],bh
        mov     [OldCurPos],dx
        mov     si,[TextPos1Addr]
        sub     si,2
        mov     [OldTextPos1Addr],di
        mov     si,[TextPos2Addr]
        sub     si,2
        mov     [OldTextPos2Addr],di
        mov     si,[GrpPosAddr]
        sub     si,2
        mov     [OldGrpPosAddr],di
        @pop    si,ds
        clc
        ret
@@:
        @pop    dx,cx,bx,ax,si,ds
CheckCurPos1stR:
        stc
        ret

;------------------------------------------------------------------------
;       << EscSequence >>
; FUNCTION = write english char
; INPUT   : AL = char, BL = attr, BH = page, CX = counter, DX = cursor pos
; OUTPUT  : none
; PROTECT : AX, BX, CX, DX, DS, ES
;
; EscSequence(AX,BX,CX,DX/-)
;       {
;       if ([DisplayStat] == RunEsc)
;               {
;               switch([EscIndex])
;                       case 0:
;                               if (AL == '$'), EscIndex=1*2, break;
;                               if (AL == '('), EscIndex=3*2, break;
;                               DispEnglishOld(-/-);
;                               [EscIndex] = 0;
;                               [DisplayStat] = [DisplayStat] && not RunEsc;
;                               jmp WriteCharEsc;
;                       case 2:
;                               if (AL == ')'), [EscIndex] = 2*2, break;
;                               [EscIndex] = 0;
;                               [DisplayStat] = [DisplayStat] && not RunEsc;
;                               jmp WriteCharEsc;
;                       case 4:
;                               if (AL == '1'), /* set hangeul key in mode */
;                               [EscIndex] = 0;
;                               [DisplayStat] = [DisplayStat] && not RunEsc;
;                               jmp WriteCharEsc;
;                       case 6:
;                               if (AL == '2'), /* reset hangeul key in mode */
;                               [EscIndex] = 0;
;                               [DisplayStat] = [DisplayStat] && not RunEsc;
;                               jmp WriteCharEsc;
;               }
;       else
;               /* save AL,BL,BH,CX,DX
;                       [TextPos1Addr],[TextPos2Addr],[GrpPosAddr] to old */
;               [DisplayStat] = [DisplayStat] || RunEsc;
;               [EscIndex] = 0;
;       }

EscSequence:
        test    [DisplayStat],RunEsc
        jz      RunEscStart
        mov     si,[EscIndex]
        jmp     [si+EscSeqJmpTbl]

EscSeqJmpTbl    Label   Word
        dw      offset  EscIndexDollar
        dw      offset  EscIndexLeftBr
        dw      offset  EscIndex1
        dw      offset  EscIndex2

RunEscStart:
        mov     [OldChar],al
        mov     [OldAttr],bl
        mov     [OldPage],bh
        mov     [OldCounter],cx
        mov     [OldCurPos],dx
        mov     di,[TextPos1Addr]
        mov     [OldTextPos1Addr],di
        mov     di,[TextPos2Addr]
        mov     [OldTextPos2Addr],di
        mov     di,[GrpPosAddr]
        mov     [OldGrpPosAddr],di
        or      [DisplayStat],RunEsc
        mov     [EscIndex],0
        ret
EscIndexDollar:
        cmp     al,'$'
        jne     @f
        mov     [EscIndex],1*2
        ret
@@:
        cmp     al,'('
        jne     @f
        mov     [EscIndex],3*2
        ret
@@:
        call    DispEnglishOld
EscBreak:
        mov     [EscIndex],0
        and     [DisplayStat],not RunEsc
        jmp     WriteCharEsc
EscIndexLeftBr:
        cmp     al,')'
        jne     EscBreak
        mov     [EscIndex],2*2
        ret
EscIndex1:
        cmp     al,'1'
        jne     EscBreak
        or      [KbStat],HEStat                 ; Hangeul On
        mov     [EscIndex],0
        and     [DisplayStat],not RunEsc
        ret
EscIndex2:
        cmp     al,'2'
        jne     EscBreak
        and     [KbStat],not HEStat             ; Hangeul Off
        mov     [EscIndex],0
        and     [DisplayStat],not RunEsc
        ret


;------------------------------------------------------------------------
;       << CalcCurPosPage >>
; FUNCTION = calculation cursor position
; INPUT    : BH
; OUTPUT   : DX
;          : [TextPos1Addr],[TextPos2Addr],[GrpPosAddr]
; PROTECT  : AX,BX,CX
;
; CalcCurPosPage(BH/DX,[TextPos1Addr],[TextPos2Addr],[GrpPosAddr])
;       {
;       save AX,BX,CX;
;       CX = ES:[BH*2+rCurPos];
;       [TextPos1Addr] = CH*80*2+CL*2+ES:[rCrtLen]*BH;
;       [TextPos2Addr] = CH*80*2+CL*2;
;       if ([ModeId] == HgcGrpMode(ModeId=2/4/10)
;               {
;               [GrpPosAddr] = CH*80*4+CL;
;               }
;       [GrpPosAddr] = CH*80*16+CL;
;       [CurPos] = CX;
;       DX = CX;
;       restore AX,BX,CX;
;       }

CalcCurPosPage:
        @push   ax,bx,cx
        mov     bl,bh
        xor     bh,bh
        shl     bx,1
        mov     cx,[bx+rCurPos]
        mov     [CurPos],cx
        mov     al,80
        mul     ch
        mov     dx,cx                   ; GrpPosAddr ϱ 
        xor     dh,dh
        add     ax,dx
        shl     ax,1
        mov     [TextPos1Addr],ax
        mov     [TextPos2Addr],ax
        mov     ax,[rCrtLen]
        shr     bx,1
        mul     bx
        add     [TextPos1Addr],ax
        mov     ax,80*4
        cmp     [ModeId],4
        jbe     @f
        cmp     [ModeId],5*2
        jz      @f
        mov     ax,80*16
@@:
        mov     dl,ch
        xor     dh,dh
        mul     dx
        xor     ch,ch
        add     ax,cx
        mov     [GrpPosAddr],ax
        mov     dx,[CurPos]
        @pop    cx,bx,ax
        ret


;------------------------------------------------------------------------
;       << GetAttr >>
; FUNCTION = get attribute
; INPUT    : AH = 9/0ah/0eh function
;            BH = page#
;            BL = attribute
; OUTPUT   : BL = attribute
; PROTECT  : AX,BH,CX,DX,DS,ES,SI
;       {
;       if (([ModeStat] != GrpMode) || (AH != 9))
;               {
;               save DS,SI;
;               BL = CodeBuf1Addr:[[CodeBuf1Addr]+[TextPos1Addr]+1];
;               restore DS,SI;
;               }
;       }
; GetAttr(AH,BL,BH/BL)

GetAttr:
        test    [ModeStat],GrpMode
        jnz     @f
        cmp     ah,09h
        jz      @f
        @push   di,es
        les     di,[CodeBuf1Addr]
        add     di,[TextPos1Addr]
        mov     bl,es:[di+1]
        @pop    es,di
@@:
        ret


;========================================================================
;       << WritePixel >>
; FUNCTION = write graphics pixel
; INPUT   : AH = 0Ch
;           AL = color, BH = page, CX = graphics columns, DX = graphics rows
; OUTPUT  : none
; PROTECT : none
; WritePixel(AL,BH,CX,DX/-)
;       {
;       switch([ModeId])
;               case 0 :                        ; ѱ card, TEXT mode 2/3/7
;               case 2 :                        ; TE mode 7, MGA
;               case 4 :                        ; TE mode 2/3, CGA
;               case 6 :                        ; TE mode 7, EGA/VGA
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;                       break;
;               case 10 :                       ; mode 40/70
;                       MgaWritePixel(AL,CX,DX/-);
;                       break;
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;                       VgaWritePixel(AL,CX,DX/-);
;                       break;
;       }

WritePixel:
        les     di,[GrpBufAddr]
        xchg    si,bx
        mov     bl,[ModeId]
        xor     bh,bh
        xchg    si,bx
        jmp     [si+WritePixelJmpTbl]

WritePixelJmpTbl        Label   Word
        dw      offset  WrtPxlHanCardText
        dw      offset  WrtPxlMgaTE
        dw      offset  WrtPxlCgaTE
        dw      offset  WrtPxlEgaVgaTE7
        dw      offset  WrtPxlEgaVgaTE2_3
        dw      offset  MgaWritePixel
        dw      offset  VgaWritePixel

WrtPxlHanCardText:
WrtPxlMgaTE:
WrtPxlCgaTE:
WrtPxlEgaVgaTE7:
WrtPxlEgaVgaTE2_3:
        ret


;========================================================================
;       << ReadPixel >>
; FUNCTION = write graphics pixel
; INPUT   : BH = page, CX = graphics columns, DX = graphics rows
; OUTPUT  : AL = color
; PROTECT : none
; ReadPixel(BH,CX,DX/)
;       {
;       switch([ModeId])
;               case 0 :                        ; ѱ card, TEXT mode 2/3/7
;               case 2 :                        ; TE mode 7, MGA
;               case 4 :                        ; TE mode 2/3, CGA
;               case 6 :                        ; TE mode 7, EGA/VGA
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;                       break;
;               case 10 :                       ; mode 40/70
;                       MgaReadPixel(BH,CX,DX/AL);
;                       break;
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;                       VgaReadPixel(BH,CX,DX/AL);
;                       break;
;       }

ReadPixel:
        les     di,[GrpBufAddr]
        xchg    si,bx
        mov     bl,[ModeId]
        xor     bh,bh
        xchg    si,bx
        jmp     [si+ReadPixelJmpTbl]

ReadPixelJmpTbl Label   Word
        dw      offset  RdPxlHanCardText
        dw      offset  RdPxlMgaTE
        dw      offset  RdPxlCgaTE
        dw      offset  RdPxlEgaVgaTE7
        dw      offset  RdPxlEgaVgaTE2_3
        dw      offset  MgaReadPixel
        dw      offset  VgaReadPixel

RdPxlHanCardText:
RdPxlMgaTE:
RdPxlCgaTE:
RdPxlEgaVgaTE7:
RdPxlEgaVgaTE2_3:
        ret


;========================================================================
;       << ScrollUp >>
; FUNCTION = window scroll up
; INPUT   : AH = 06h
;           AL = scroll line #, CX = window start, DX = window end
;           BH = attribute to be used on blank lines
; OUTPUT  : none
; PROTECT : none
;========================================================================
;       << ScrollDown >>
; FUNCTION = window scroll down
; INPUT   : AH = 07h
;           AL = scroll line #, CX = window start, DX = window end
;           BH = attribute to be used on blank lines
; OUTPUT  : none
; PROTECT : none
; ScrollUp(AL,BH,CX,DX/-)
; ScrollDown(AL,BH,CX,DX/-)
;       {
;       if (CL > DL), xchg CL,DL;
;       if (CH > DH), xchg CH,DH;
;       if (DL >= 80), return;
;       if (DH >= [MaxRows]), return;
;       if (AL > (DL-CL)), AL=(DL-CL);            /* scroll line counter */
;       if ([ModeStat] == GrpMode)
;               {
;               if (BH = 0), BH = 7;
;               if (BH = -1), BH = 70h;
;               }
;       [HanStat] = [HanStat] && not Han1st;
;       TextEmu(-/-);
;       ClearCursor(-/-);
;       save CX;
;       CalcScrollParms(AL,CX,DX/...);
;       TextBufferScroll(1st code buffer's segment:offset/-);
;       if ([ModeStat] == TextEmulation), TextBufferScroll(2nd code buffer's segment:offset/-);
;       restore CX;
;       switch([ModeId])
;               case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                       break;
;               case 2 :                        ; TE mode 7, MGA
;               case 4 :                        ; TE mode 2/3, CGA
;               case 10 :                       ; mode 40/70
;                       MgaGrpScroll(.../-);
;                       break;
;               case 6 :                        ; TE mode 7, EGA/VGA
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;                       VgaGrpScroll(.../-);
;                       break;
;       }

ScrollUp:
ScrollDown:
        and     [DisplayStat],not Han1st
        and     [DisplayStat],not RunEsc                ; reset ESC sequence
        call    ClearCursor
        mov     cs:[ScrUpDnFlag],1
        cmp     ah,6
        jz      @f
        mov     cs:[ScrUpDnFlag],2
@@:
        cmp     cl,dl
        jb      @f
        xchg    cl,dl
@@:
        cmp     ch,dh
        jb      @f
        xchg    ch,dh
@@:
        cmp     dl,80
        jb      @f
        mov     dl,80-1
@@:
        cmp     dh,[MaxRows]
        jb      @f
        mov     dh,[MaxRows]
        dec     dh
@@:
        mov     bl,dh
        sub     bl,ch
        inc     bl
        cmp     bl,al
        jae     @f
        mov     al,bl
@@:
        or      al,al
        jnz     @f
        mov     al,bl
@@:
        cmp     [ModeId],5*2            ; 5 - mode 40/70
        jnz     NotBlank
        or      bh,bh
        jne     @f
        mov     bh,7                    ; 0 -> 7
        jmp     NotBlank
@@:
        cmp     bh,-1
        jne     NotBlank
        mov     bh,70h                  ; FF -> 70h
NotBlank:
        call    TextEmu
        call    CalcScrollParms
        push    bx
        mov     bx,[rCrtStart]
        les     ax,[CodeBuf1Addr]
        add     ax,bx
        pop     bx
        call    TextBufferScroll                ; 1st code buffer
        test    [ModeStat],TextEmulation
        jz      @f
        les     ax,[CodeBuf2Addr]
        call    TextBufferScroll                ; 2nd code buffer
@@:
        mov     al,[ModeId]
        xor     ah,ah
        mov     si,ax
        call    [si+ScrollUpDownJmpTbl]
ScrollUpDownExit:
ScrUpDownHanCardText:
        ret

ScrollUpDownJmpTbl      Label   Word
        dw      offset  ScrUpDownHanCardText
        dw      offset  MgaGrpScroll
        dw      offset  MgaGrpScroll
        dw      offset  VgaGrpScroll
        dw      offset  VgaGrpScroll
        dw      offset  MgaGrpScroll
        dw      offset  VgaGrpScroll


;========================================================================
;       << CodeChange >>
; FUNCTION = ڵ庯ȯ
; INPUT   : AH = 0F5h
;           input : AL = 00h ; Էµ ϼڵ带 ڵ ȯ
;                   BX = ϼڵ
;           output: AL = 00H=success ,BX = ȯ ڵ
;                   AL = FFH=fail
;           input : AL = 01h ; Էµ ڵ带 ϼڵ ȯ
;                   BX = ڵ
;           output: AL = 00H=success ,BX = ȯ ϼڵ
;                   AL = FEH ϼ Ե  ѱ 
;                        BX = Էµ  ʼ شϴ ѱ۳ڵ
;                        CX = Էµ  ߼ شϴ ѱ۳ڵ
;                        DX = Էµ   شϴ ѱ۳ڵ
;                   AL = FFH=fail(Է°  .)
;           input : AL = 02h ; ϼ ڷḦ ڵ ȯ
;                   BX = ʼ شϴ ѱ۳ڵ
;                   CX = ߼ شϴ ѱ۳ڵ
;                   DX =  شϴ ѱ۳ڵ
;           output: AL = 00H success ,BX = ȯ ڵ
;                   AL = FFH fail
; PROTECT : none
fFillCode       =       84h
vFillCode       =       40h
lFillCode       =       01h

CodeChange:
        cmp     al,02h
        ja      CodeChgErr
        xor     ah,ah
        mov     si,ax
        shl     si,1
        mov     ax,bx
        jmp     [si+CodeChangeTbl]

CodeChangeTbl   Label   word
        dw      offset Ks2ChCall
        dw      offset Ch2KsCall
        dw      offset KsComp2ChCall

Ks2ChCall:
        call    ChgKs2Ch
        jc      CodeChgErr
        jmp     CodeChgSuc

Ch2KsCall:
        call    CheckCodeRangeCh
        jc      CodeChgErr
        call    ChgCh2Ks
        jnc     CodeChgSuc
        jmp     SplitCompKS

KsComp2ChCall:
        call    CheckCodeRangeWs
        jc      CodeChgErr
        call    Ks2Ch
        jc      CodeChgErr
        xchg    ax,cx
        call    Ks2Ch
        jc      CodeChgErr
        xchg    ax,dx
        mov     bl,lFillCode
        cmp     ax,0a4d4h
        jz      @f
        cmp     ax,0a4a1h
        jb      CodeChgErr
        cmp     ax,0a4beh
        ja      CodeChgErr
        call    Ks2Chcompn
        jc      CodeChgErr

@@:
        and     ch,11111100b
        and     dh,10000011b
        and     dl,11100000b
        and     bl,00011111b
        xor     bh,bh
        or      bx,dx
        or      bh,ch
        mov     ax,bx
CodeChgSuc:
        mov     [bp+rBX],ax
        xor     al,al
        ret
CodeChgErr:
        mov     al,0ffh
        ret

;------------------
SplitCompKS:
        mov     ax,bx
        mov     dx,ax
        and     ah,10000011b                    ;߼
        and     al,11100000b
        or      ah,fFillCode
        or      al,lFillCode
        call    Ch2Ks
        jc      CodeChgErr
        mov     cx,ax
        mov     ax,dx                           ;ʼ
        and     ah,11111100b
        mov     al,0
        or      al,(vFillCode or lFillCode)
        call    Ch2Ks
        jc      CodeChgErr
        xchg    dx,ax
        mov     bx,0a4d4h
        mov     ah,0
        and     al,00011111b
        cmp     al,lFillCode
        jz      @f
        or      ah,fFillCode
        or      al,vFillCode
        call    Ch2Ks
        mov     bx,ax
@@:
        mov     [bp+rBX],dx
        mov     [bp+rCX],cx
        mov     [bp+rDX],bx
        mov     al,0feh
        ret

Ks2Chcompn:
        mov     bl,al
        sub     bl,05fh
        cmp     al,0a8h
        je      ChcompErr
        jb      @f
        sub     bl,1
        cmp     al,0b2h
        jb      @f
        add     bl,1
        cmp     al,0b3h
        je      ChcompErr
        jb      @f
        sub     bl,1
        cmp     al,0b9h
        je      ChcompErr
        jb      @f
        sub     bl,1
@@:
        clc
        ret
ChcompErr:
        stc
        ret


;========================================================================
;       << ControlCode >>
; FUNCTION = ȣ ñ
; INPUT   : AH = 0F4h
;           input : AL = 00h
;           output: AL = 00H = ý ڵ ü谡 ϼ
;                   AL = 01H = ý ڵ ü谡 ϼ 
;                          BL = 00H : ϼȣ
;                          BL = 01H : ȣ
;                   AL = 02H = ý ڵ ü谡 
; PROTECT : none
ControlCode:
        cmp     al,00h
        jne     ControlCodeRet
        test    [CodeStat],ChabLoad
        jz      ControlCodeRet
        mov     bx,[bp+rBX]
        mov     al,1
        xor     bl,bl
        test    [CodeStat],WSung7 or Chab
        jz      @f
        mov     bl,01h
        test    [CodeStat],Chab
        jnz     @f
        mov     bl,02h
@@:
        mov     [bp+rBX],bx
ControlCodeRet:
        ret


;========================================================================
;       << BlockMove >>
; FUNCTION = block move
; INPUT   : AH = 0F6h
;           AL = attr, BX = target position, CX:DX = windows
; OUTPUT  : none
; PROTECT : none
;========================================================================
;       << BlockCopy >>
; FUNCTION = block copy
; INPUT   : AH = 0F7h
;           AL = attr, BX = target position, CX:DX = windows
; OUTPUT  : none
; PROTECT : none
; BlockMove(AL,BX,CX,DX/-)
; BlockCopy(BX,CX,DX/-)
;       {
;       [DispStat] = [DispStat] && not Han1st
;       [DispStat] = [DispStat] && not RunEsc
;       if ( [ModeStat] = GrpMode ), return;
;       ClearCursor(-/-);
;       if (DH >= [MaxRows]), return;               /* range over */
;       if (DL >= 80), return;               /* range over */
;       if ((DL-CL+BL) >= 80), return;       /* range over */
;       if ((DH-CH+BH) >= [MaxRows]), return;       /* range over */
;       if (CL > DL), return;
;       if (CH > DH), return;
;       if (BX = CX), return;
;       ParseBlock(-/-);
;       Save CX,BX;
;       CalcTextBlock(-/-);
;       DS:SI = [CodeBuf1Addr + rCrtStart]
;       BlockText(1st code buffer's segment:offset/-);
;       if ([ModeStat] == TextEmulation), BlockText(2nd code buffer's segment:offset/-);
;       switch([ModeId])
;               case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                       break;
;               case 2 :                        ; TE mode 7, MGA
;               case 4 :                        ; TE mode 2/3, CGA
;                       MgaGrpBlock(BX/-);
;                       break;
;               case 6 :                        ; TE mode 7, EGA/VGA
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;                       VgaGrpBlock(BX/-);
;               case 10 :                       ; mode 40/70
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;       }

BlockMove:
BlockCopy:
        and     [DisplayStat],not Han1st
        and     [DisplayStat],not RunEsc                ; reset ESC sequence
        test    [ModeStat],GrpMode
        jnz     BlockEnd
        call    ClearCursor
        cmp     dh,25
        jae     BlockEnd
        cmp     dl,80
        jae     BlockEnd
        mov     bp,ax
        mov     si,dx
        sub     dx,cx
        mov     ax,dx
        add     dx,bx
        cmp     dh,25
        jae     BlockEnd
        cmp     dl,80
        jae     BlockEnd
        mov     dx,si
        cmp     dl,cl
        jc      BlockEnd
        cmp     dh,ch
        jc      BlockEnd
        cmp     bx,cx
        jz      BlockEnd
        call    ParseBlock
        push    cx
        push    bx
        call    CalcTextBlock
        lds     ax,[CodeBuf1Addr]
        add     ax,es:[rCrtStart]
        call    BlockText
        test    [ModeStat],TextEmulation
        jz      @f
        lds     ax,[CodeBuf2Addr]
        call    BlockText
@@:
        push    bx
        mov     bl,cs:[ModeId]
        xor     bh,bh
        jmp     [bx+BlockMoveCopyJmpTbl]

BlkMvCpHanCardText:
BlkMvCpMode40_70:
BlkMvCpMode60_11_12:
        @pop    bx,bx,cx
BlockEnd:
        ret

BlockMoveCopyJmpTbl     Label   Word
        dw      offset  BlkMvCpHanCardText
        dw      offset  MgaGrpBlock
        dw      offset  MgaGrpBlock
        dw      offset  VgaGrpBlock
        dw      offset  VgaGrpBlock
        dw      offset  BlkMvCpMode40_70
        dw      offset  BlkMvCpMode60_11_12

;================================================
ParseBlock:
        mov     [BlockAdj],0
        cmp     bh,ch
        jb      Block12
Block34:
        and     bp,0bfffh
        cmp     bl,cl
        jb      Block3
Block4:
        add     bx,ax
        xchg    cx,dx
        and     bp,7fffh                ; set STD
        std
        jmp     short @f
Block3:
        mov     [BlockAdj],-(80*4)
        xchg    ch,dh
        add     bh,ah
        jmp     short @f
Block12:
        cmp     bl,cl
        jb      @f
Block2:
        mov     [BlockAdj],80*4
        add     bl,al
        xchg    cl,dl
        and     bp,7fffh                ; set STD
        std
@@:
        ret


;========================================================================
;       << GetCharType >>
; FUNCTION = get char type at current cursor position
; INPUT   : AH = 0F8h
; OUTPUT  : AL = char type
; PROTECT : none
;         (AL)      bit 76543210
;                             ||
;                             |+---> # of bytes of char
;                             |        0: 1 byte character
;                             |        1: 2 byte character
;                             +----> ordinal # of 2 byte char
;                                      0: 1st byte of 2 byte character
;                                      1: 2nd byte of 2 byte character
; GetCharType(-/AL)
;       {
;       if ([CodeStat] != (Chab || WSung7))
;               {
;               BH = ES:[rCurPage];
;               CalcCurPosPage(BH/DX,[TextPos1Addr],[TextPos2Addr],[GrpPosAddr]);
;               CL = DL;
;               CH = 0;
;               BL = 0;
;               STD;
;               DS : SI = [CodeBuf1Addr];
;               while ( CX == 0, CX-)
;                       {
;                       LODSW;
;                       if (CheckCodeRange1st(AL/carry) == DBCS(NC))
;                               {
;                               BL = BL || 1;
;                               XOR BL,2;
;                               }
;                       }
;               AL = BL;
;               }
;       }

GetCharType:
        mov     bl,al
        test    [CodeStat],Chab or WSung7
        jnz     GetCharTypeEnd
        mov     bh,[rCurPage]
        call    CalcCurPosPage
        std
        lds     si,[CodeBuf1Addr]
        add     si,cs:[TextPos1Addr]
        mov     cl,dl
        xor     ch,ch
        xor     bl,bl
        lodsw
CheckHanType:
        call    CheckCodeRange1st
        mov     al,0
        jc      GetCharTypeEnd
        or      bl,00000001b
@@:
        lodsw
        call    CheckCodeRange1st
        jc      @f
        xor     bl,00000010b
        loop    @b
@@:
        mov     al,bl
GetCharTypeEnd:
        ret


;========================================================================
;       << FontCtrl >>
; FUNCTION = see sub function
; INPUT   : AH = 0FCh
;           AL = sub function
; OUTPUT  : see sub function
; PROTECT : none
; input   (ah)=FCH  read/write font from/to char pattern
;                   ( Ǵ ڻ ũ б)
;           (cx)    char to read/write font(ch=0 if 1 byte char on read)
; input   (al)=0    read font for given code
;           (es:bx) pointer of character pattern buffer
; output  (al)=0    successfully operation
;           (es:bx) pointer of character pattern buffer
;         (al)=ff   error, corresponding pattern can't be read
; input   (al)=1    read size of char box
; output  (ah,al)   (horizontal size, vertical size)
; input   (al)=2    write font for given 2 byte code (UDC only)
;           (es:bx) pointer of character pattern buffer
; output  (al)=0    successfully operation
;         (al)=ff   error, corresponding pattern can't be written
; FontCtrl(AL/AL)
;       {
;       switch(AL)
;               case 0 :
;                       ES = SS:[BP+rES];
;                       DI = SS:[BP+rBX];
;                       if CH = 0
;                               {
;                               if (GetPatternEng(CL,ES,DI/carry)=error(CY)), AL = -1;
;                               else AL = 0;
;                               }
;                       else
;                               {
;                               if (GetPattern(CX,ES,DI/carry)=error(CY)), AL = -1;
;                               else AL = 0;
;                               }
;                       break;
;               case 1 :
;                       AL = 16;
;                       AH = 16;
;                       break;
;               case 2 :
;                       DS = SS:[BP+rES];
;                       SI = SS:[BP+rBX];
;                       if (PutPattern(CX,DS,SI/carry)=error(CY)), AL = -1;
;                       else AL = 0;
;                       break;
;               default : AL = -1;
;       }

FontCtrl:
        cmp     al,1
        jae     FontCtrlSub1
        mov     es,[bp+rES]
        mov     di,[bp+rBX]
        or      ch,ch
        jnz     NotEng16
        call    GetPatternEng
        jc      @f
        xor     al,al
        ret
@@:
        mov     al,-1
        ret
NotEng16:
        call    GetPattern
        jc      @b
        xor     al,al
        ret
FontCtrlSub1:
        jne     FontCtrlSub2
        mov     al,10h
        mov     ah,al
        ret
FontCtrlSub2:
        cmp     al,2
        ja      @b
        mov     ds,[bp+rES]
        mov     si,[bp+rBX]
        call    PutPattern
        jc      @b
        xor     al,al
        ret


;========================================================================
;       << GetInfor >>
; FUNCTION = get hangeul BIOS information
; INPUT   : AH = 0FDh
;           AL = 00
; OUTPUT  : AL = 0fdh, ES:BX = BIOS data address
; PROTECT : none
; GetInfor(-/AL,ES,BX)
;       {
;       if AL = 0, break;
;       SS:[BP+rES] = CS;
;       SS:[BP+rBX] = offset public data;
;       AL = AH;
;       }

GetInfor:
        or      al,al
        jnz     @f
        mov     [bp+rES],cs
        mov     word ptr [bp+rBX],offset PublicData
        mov     al,ah
@@:
        ret


;========================================================================
;
;                        VIDEO SUB-ROUTINES
;
;------------------------------------------------------------------------
;       << CheckCodeRangeWord >>
; FUNCTION = check code range for word
; INPUT   : AX = Code
; OUTPUT  : AX = Code
;         : carry - NC ( success )
;         :       - CY ( code range over )
; PROTECT : AL,BX,DX,DS,ES
;
; CheckCodeRangeWord(AX/AX,carry)
;       {
;       switch([CodeStat])
;               case WSung :
;                       if ((0a1h=<AH=<0feh) && (0a1h=<AL=<0feh)), NC, break;
;                       CY;
;                       break;
;               case CHab :
;                       if ((84h=<AH<=0d3h) && (041h=<AL=<07eh)), NC, break;
;                       if ((84h=<AH<=0d3h) && (081h=<AL=<0feh)), NC, break;
;                       if ((d9h=<AH<=0deh) && (031h=<AL=<07eh)), NC, break;
;                       if ((d9h=<AH<=0deh) && (091h=<AL=<0feh)), NC, break;
;                       if ((e0h=<AH<=0f9h) && (031h=<AL=<07eh)), NC, break;
;                       if ((e0h=<AH<=0f9h) && (091h=<AL=<0feh)), NC, break;
;                       if ((feh=AH) && (031h=<AL=<07eh)), NC, break;
;                       if ((feh=AH) && (091h=<AL=<0feh)), NC, break;
;                       CY;
;                       break;
;               case WSung7 :
;                       if (5fh=<AH=<60h) && (21h=<AL=<7eh), NC, return;
;                       if (7bh=<AH=<7eh) && (21h=<AL=<7eh), NC, break;
;                       if (61h=<AH=<7ah) && (40h=<AL=<5fh), NC, return;
;                       CY;
;       }

CheckCodeRangeWdfe:
        test    cs:[CodeStat],Chab or WSung7
        jnz     NoWSung
        cmp     ah,0feh
        ja      @f
        cmp     ah,0a1h
        jb      @f
        cmp     al,0feh
        ja      @f
        cmp     al,0a1h
        jb      @f
        ret
CheckCodeRangeWord:
        test    cs:[CodeStat],Chab or WSung7
        jnz     NoWSung
CheckCodeRangeWs:
        cmp     ah,0feh
        ja      @f
        cmp     ah,0a1h
        jb      @f
        cmp     al,0ffh
        ja      @f
        cmp     al,0a1h
        jb      @f
        ret
@@:
        stc
        ret
NoWSung:
        test    cs:[CodeStat],CHab
        jz      NoCHab
CheckCodeRangeCh:
        cmp     ah,084h
        jb      @b
        cmp     ah,0d3h
        ja      @f
        cmp     al,041h
        jb      CheckFail
        cmp     al,07eh
        jbe     CheckSuc
        cmp     al,81h
        jb      CheckFail
        cmp     al,0feh
        ja      CheckFail
        jmp     CheckSuc
@@:
        cmp     al,031h
        jb      CheckFail
        cmp     al,0feh
        ja      CheckFail
        cmp     al,07eh
        jbe     @f
        cmp     al,091h
        jb      CheckFail
@@:
        cmp     ah,0d8h
        jb      CheckFail
        cmp     ah,0deh
        jbe     CheckSuc
        cmp     ah,0e0h
        jb      CheckFail
        cmp     ah,0f9h
        jbe     CheckSuc
CheckFail:
        stc
        ret
CheckSuc:
        clc
        ret
NoCHab:                                                 ; WanSung 7Bit Code
        cmp     ah,5fh
        jb      CheckFail
        cmp     ah,7eh
        ja      CheckFail
        cmp     ah,61h
        jb      @f
        cmp     ah,7ah
        jbe     WSung72
@@:
        cmp     al,7Eh
        ja      @f
        cmp     al,21h
        jb      @f
        ret
WSung72:
        cmp     al,5Fh
        ja      @f
        cmp     al,40h
        jb      @f
        ret
@@:
        stc
        ret


;------------------------------------------------------------------------
;       << CheckCodeRange1st >>
; FUNCTION = check code range for byte
; INPUT   : AL = Code
; OUTPUT  : AL = Code
;         : carry - NC ( success )
;         :       - CY ( code range over )
; PROTECT : AL,BX,DX,DS,ES
;
; CheckCodeRange1st(AL/AL,carry)
;       {
;       switch([CodeStat])
;               case WSung :
;                       if (0a1h=<AL=<0feh), NC, break;
;                       CY;
;                       break;
;               case CHob :
;                       if (84h=<AL=<0d3h), NC, break;
;                       if (d9h=<AL=<0deh), NC, break;
;                       if (e0h=<AL=<0f9h), NC, break;
;                       CY;
;                       break;
;               case WSung7 :
;                       if (5fh=<AL=<7eh), NC, break;
;                       CY;
;       }

CheckCodeRange1st:
        test    cs:[CodeStat],Chab or WSung7
        jnz     NotWSung1st
        cmp     al,0feh
        ja      CCFail
        cmp     al,0a1h
        jb      CCFail
        ret
CCFail:
        stc
        ret
NotWSung1st:
        test    cs:[CodeStat],CHab
        jz      NotCHab
        cmp     al,0f9h
        ja      CCFail
        cmp     al,0e0h
        jae     CCSuc
        cmp     al,0deh
        ja      CCFail
        cmp     al,0d8h
        jae     CCSuc
        cmp     al,0d3h
        ja      CCFail
        cmp     al,084h
        jb      CCFail
CCSuc:
        clc
        ret
NotCHab:                                                ; WanSung 7Bit Code
        cmp     al,7eh
        ja      CCFail
        cmp     al,5fh
        jb      CCFail
        ret

;------------------------------------------------------------------------
;     << ClearCursor >>, << ToggleCursor >>
; FUNCTION = cursor clear/toggle
; INPUT   : none
; OUTPUT  : none
; PROTECT : ALL
; CursorCursor(-/-)
;       {
;       if (CursorStat] == CursorOn)
; ToggleCursor(-/-)
;       save AX,BX,CX,DX,DI,ES;
;       switch([ModeId])
;               case 2 :                        ; TE mode 7, MGA
;               case 4 :                        ; TE mode 2/3, CGA
;               case 10 :                       ; mode 40/70
;                       ToggleMonoCursor(-/-);
;                       break;
;               case 6 :                        ; TE mode 7, EGA/VGA
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;                       ToggleColorCursor(-/-);
;               case 0 :                        ; ѱ card, TEXT mode 2/3
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;       restore AX,BX,CX,DX,DI,ES;
;       }

ClearCursor:
        test    [CursorStat],CursorOn
        jz      ToggleCursorEnd
ToggleCursor:
        test    [ModeStat],EmuCursor
        jz      ToggleCursorEnd
        @push   ax,bx,cx,dx,di,es
        pushf
        cld
        mov     bl,[ModeId]
        xor     bh,bh
        call    [bx+ToggleCursorJmpTbl]
        popf
        @pop    es,di,dx,cx,bx,ax
ToggleCursorEnd:
ToggleCursorHanCard:
        ret
ToggleCursorJmpTbl      Label   Word
        dw      offset  ToggleCursorHanCard
        dw      offset  ToggleMonoCursor
        dw      offset  ToggleMonoCursor
        dw      offset  ToggleColorCursor
        dw      offset  ToggleColorCursor
        dw      offset  ToggleMonoCursor
        dw      offset  ToggleCursorHanCard

;------------------------------------------------------------------------
;       << ToggleMonoCursor >>
; FUNCTION = mono cursor toggle
; INPUT   : none
; OUTPUT  : none
; PROTECT : DS,SI
; ToggleMonoCursor(-/-)

ToggleMonoCursor:
        cli
        mov     cx,[rCurType]           ; BIOS Cursor Type Information Read
        cmp     ch,20h                  ; Check Not Display Cursor Type
        jae     ToggleMonoCursorExit
        and     cx,0f0fh                ; Get Low 4 Bits
        sub     cl,ch
        jc      ToggleMonoCursorExit
        inc     cl
        mov     dx,[OrgCurPos]
        test    [CursorStat],CursorOn
        jnz     @f
        mov     bl,[CurPage]
        xor     bh,bh
        shl     bx,1
        mov     dx,[bx+rCurPos]
        mov     [OrgCurPos],dx
@@:
        cmp     dl,80
        jae     ToggleMonoCursorExit
        cmp     dh,[MaxRows]
        jae     ToggleMonoCursorExit
        les     di,[GrpBufAddr]
        mov     ax,80
        mul     dh
        shl     ax,1
        shl     ax,1
        xor     dh,dh
        add     ax,dx
        add     di,ax                   ; 80 * 4 * Rows +Cols
        shr     ch,1
        jnc     @f
        add     di,2000h                ; Next Scan Line=Scan Line Length Add
@@:
        shr     ch,1
        jnc     @f
        add     di,2000h*2              ; Next Scan Line
@@:
        shr     ch,1
        jnc     @f
        add     di,50h
@@:
        shr     ch,1
        jnc     @f
        add     di,50h*2
@@:
        mov     al,0ffh                 ; Mask Data
@@:
        xor     es:[di],al
        add     di,2000h
        js      ToggleMonoCursorAdjust
        loop    @b
MonoCursorExit:
        xor     [CursorStat],CursorOn
ToggleMonoCursorExit:
        sti
        ret
ToggleMonoCursorAdjust:
        sub     di,8000h-50h
        loop    @b
        jmp     MonoCursorExit


;------------------------------------------------------------------------
;       << FullScroll >>
; FUNCTION = full scroll
; INPUT   : BH = page #
; OUTPUT  : none
; PROTECT : AX, BX, CX, DX, DS, ES
; FullScroll(BH/-)
;       {
;       save AX,BX,CX,DX,ES,DS;
;       ES:DI = [CodeBuf1Addr];
;       DI = DI + ES:[rCrtStart];
;       FullScrollText(ES,DI/BL);
;       if (BH == [CurPage])
;               {
;               if ([ModeStat] == TextEmulation)
;                       {
;                       ES:DI = [CodeBuf2Addr];
;                       FullScrollText(ES,DI/BL);
;                       }
;               ES:DI = [GrpBufAddr];
;               switch([ModeId])
;                       case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                               break;
;                       case 2 :                        ; TE mode 7, MGA
;                       case 4 :                        ; TE mode 2/3, CGA
;                       case 10 :                       ; mode 40/70
;                               FullScrollMono([GrpBufAddr]/-);
;                               break;
;                       case 6 :                        ; TE mode 7, EGA/VGA
;                               FullScrollColor([GrpBufAddr]/-);
;                               break;
;                       case 8 :                        ; TE mode 2/3, EGA/VGA
;                       case 12 :                       ; mode 60/11/12, EGA/VGA
;                               FullScrollColor([GrpBufAddr]/-);
;               }
;       restore AX,BX,CX,DX,DS,ES
;       }

FullScroll:
        @push   ax,bx,cx,dx,es,ds
        mov     ax,[rCrtStart]
        les     di,[CodeBuf1Addr]
        add     di,ax
        call    FullScrollText
        cmp     [CurPage],bh
        jnz     FullScrollEnd
        test    [ModeStat],TextEmulation
        jz      @f
        les     di,[CodeBuf2Addr]
        call    FullScrollText
@@:
        call    ClearCursor
        mov     al,[ModeId]
        xor     ah,ah
        mov     si,ax
        les     di,[GrpBufAddr]
        call    [si+FullScrollJmpTbl]

FullScrollEnd:
        @pop    ds,es,dx,cx,bx,ax
FullScrHanCardText:
        ret

FullScrollJmpTbl        Label   Word
        dw      offset  FullScrHanCardText
        dw      offset  FullScrollMono
        dw      offset  FullScrollMono
        dw      offset  FullScrollColor
        dw      offset  FullScrollColor
        dw      offset  FullScrollMono
        dw      offset  FullScrollColor


;------------------------------------------------------------------------
;       << MakeHanAttr >>
; FUNCTION = make hangeul character attribute
; INPUT   : BL    = Attr
;         : DS:SI = source pattern
; OUTPUT  : BL = Attr
;           AL = Background Attr
; PROTECT : ALL
;
; MakeHanAttr(BL,DS,SI/AL,BL)
; BL register  background attr AL register setting
; MGA/CGA/40/70   pattern modify
;       {
;       switch([ModeId])
;               case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                       AL = BH shr 4;
;                       break;
;               case 2 :                        ; TE mode 7, MGA
;               case 10 :                       ; mode 40/70
;                       /* pattern modify = reverse,underline,none-display */
;                       break;
;               case 4 :                        ; TE mode 2/3, CGA
;                       /* pattern modify = reverse,none-display */
;                       break;
;               case 6 :                        ; TE mode 7, EGA/VGA
;                       AL = BH shr 4;
;                       /* AL/BH attr modify */
;                       /* pattern modify */
;                       break;
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;                       AL = BH shr 4;
;                       break;
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;       }

MakeHanAttr:
        push    bx
        mov     bl,[ModeId]
        xor     bh,bh
        jmp     [bx+MakeHanAttrJmpTbl]

MakeHanAttrJmpTbl       Label   Word
        dw      offset  MkHanAttrHanCardText
        dw      offset  MkHanAttrMgaTE
        dw      offset  MkHanAttrCgaTE
        dw      offset  MkHanAttrEgaVgaTE7
        dw      offset  MkHanAttrEgaVgaTE23
        dw      offset  MkHanAttrMode40_70
        dw      offset  MkHanAttrMode60_11_12

MkHanAttrHanCardText:
MkHanAttrEgaVgaTE23:
        pop     bx
        mov     bh,bl
        shr     bh,1
        shr     bh,1
        shr     bh,1
        shr     bh,1
        mov     al,bh
        ret

MkHanAttrMgaTE:
MkHanAttrMode40_70:
        pop     bx
        mov     bh,bl
        test    bh,00001000b
        jz      @f
        call    MakeHanAttrHigh
@@:
        test    bh,01110111b
        jz      MakeHanAttrNonDisp
        and     bh,01110111b
        cmp     bh,70h
        jz      MakeHanAttrReverse
        and     bh,00000111b
        cmp     bh,1
        jnz     @f
        or      word ptr [si+30],-1
@@:
        ret
MakeHanAttrReverse:
        @push   bx,cx,si
        mov     bx,2
        mov     cx,10h
@@:
        not     Word Ptr [si]           ; 1
        add     si,bx
        loop    @b
        @pop    si,cx,bx
        ret
MakeHanAttrNonDisp:
        @push   ax,cx,di,es
        mov     cx,10h
        mov     ax,ds
        mov     es,ax
        mov     di,si
        xor     ax,ax
        rep     stosw
        @pop    es,di,cx,ax
        ret
MakeHanAttrHigh:
        @push   ax,bx,cx,si
        mov     cx,10h
        mov     bx,2
@@:
        mov     ax,[si]
        shr     al,1                    ; High Byte
        rcr     ah,1                    ; Low Byte
        or      [si],ax
        add     si,bx
        loop    @b
        @pop    si,cx,bx,ax
        ret

MkHanAttrCgaTE:
        pop     bx
        mov     bh,bl
        test    bh,00001000b
        jz      @f
        call    MakeHanAttrHigh
@@:
        test    bh,01110111b
        jz      MakeHanAttrNonDisp
        and     bh,01110111b
        cmp     bh,70h
        jz      MakeHanAttrReverse
        ret

MkHanAttrEgaVgaTE7:
        pop     bx
        mov     bh,0
        test    bl,01110111B
        jz      @f
        mov     bh,1
        test    bl,01111000B
        jz      @f
        mov     bh,bl
        and     bh,01111000B
        cmp     bh,00001000B
        mov     bh,4
        jz      @f
        mov     bh,10h
        test    bl,00000111B
        jz      @f
        mov     bh,11h
        test    bl,00001000B
        jz      @f
        mov     bh,40h
@@:
        push    bx
        mov     bh,bl
        and     bh,01110111B
        cmp     bh,00000001B
        jnz     @f
        or      Word Ptr [si+30],0FFFFh
@@:
        pop     bx
        mov     bl,bh
        mov     al,bh
        shr     al,1
        shr     al,1
        shr     al,1
        shr     al,1
        ret

MkHanAttrMode60_11_12:
        pop     bx
        xor     al,al
;MkNonDsiplay:
;        test    bl,00001111b
;        jnz     @f
;        @push   bx,ax
;        mov     ah,0fh
;        int     10h
;        and     al,01111111b
;        cmp     al,011h
;        @pop    ax,bx
;        jnz     @f
;        @push   ax,cx,es,di
;        mov     ax,ds
;        mov     es,ax
;        mov     di,si
;        mov     cx,16
;        xor     ax,ax
;        rep     stosw
;        @pop    di,es,cx,ax
;@@:
        ret


;------------------------------------------------------------------------
;       << MakeEngAttr >>
; FUNCTION = make english character attribute
; INPUT   : BL    = Attr
;         : DS:SI = source pattern
; OUTPUT  : BL = Attr
;           AL = Background Attr
; PROTECT : ALL
;
; MakeEngAttr(BL,DS,SI/AL,BL)
; BL register  background attr AL register setting
; MGA/CGA/40/70   pattern modify
;       {
;       switch([ModeId])
;               case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                       AL = BH shr 4;
;                       break;
;               case 2 :                        ; TE mode 7, MGA
;               case 10 :                       ; mode 40/70
;                       /* pattern modify = reverse,underline,none-display */
;                       break;
;               case 4 :                        ; TE mode 2/3, CGA
;                       /* pattern modify = reverse,none-display */
;                       break;
;               case 6 :                        ; TE mode 7, EGA/VGA
;                       AL = BH shr 4;
;                       /* AL/BH attr modify */
;                       /* pattern modify */
;                       break;
;               case 8 :                        ; TE mode 2/3, EGA/VGA
;                       AL = BH shr 4;
;                       break;
;               case 12 :                       ; mode 60/11/12, EGA/VGA
;       }

MakeEngAttr:
        push    bx
        mov     bl,[ModeId]
        xor     bh,bh
        jmp     [bx+MakeEngAttrJmpTbl]

MakeEngAttrJmpTbl       Label   Word
        dw      offset  MkEngAttrHanCardText
        dw      offset  MkEngAttrMgaTE
        dw      offset  MkEngAttrCgaTE
        dw      offset  MkEngAttrEgaVgaTE7
        dw      offset  MkEngAttrEgaVgaTE23
        dw      offset  MkEngAttrMode40_70
        dw      offset  MkEngAttrMode60_11_12

MkEngAttrHanCardText:
MkEngAttrEgaVgaTE23:
        pop     bx
        mov     bh,bl
        shr     bh,1
        shr     bh,1
        shr     bh,1
        shr     bh,1
        mov     al,bh
        ret

MkEngAttrMgaTE:
MkEngAttrMode40_70:
        pop     bx
        mov     bh,bl
        test    bh,00001000b
        jz      @f
        call    MakeEngAttrHigh
@@:
        test    bh,01110111b
        jz      MakeEngAttrNonDisp
        and     bh,01110111b
        cmp     bh,70h
        jz      MakeEngAttrReverse
        and     bh,00000111b
        cmp     bh,1
        jnz     @f
        or      byte ptr [si+15],-1
@@:
        ret
MakeEngAttrReverse:
        @push   si,cx
        mov     cx,10h
@@:
        not     Byte Ptr [si]
        inc     si
        loop    @b
        @pop    cx,si
        ret
MakeEngAttrNonDisp:
        @push   ax,cx,di,es
        mov     cx,08h
        mov     ax,ds
        mov     es,ax
        mov     di,si
        xor     ax,ax
        rep     stosw
        @pop    es,di,cx,ax
        ret
MakeEngAttrHigh:
        @push   ax,bx,cx,si
        mov     cx,08h
        mov     bx,2
@@:
        mov     ax,[si]
        shr     al,1
        shr     ah,1
        or      [si],ax                 ; First & Second Byte
        add     si,bx
        loop    @b
        @pop    si,cx,bx,ax
        ret

MkEngAttrCgaTE:
        pop     bx
        mov     bh,bl
        test    bh,00001000b
        jz      @f
        call    MakeEngAttrHigh
@@:
        test    bh,01110111b
        jz      MakeEngAttrNonDisp
        and     bh,01110111b
        cmp     bh,70h
        jz      MakeEngAttrReverse
        ret

MkEngAttrEgaVgaTE7:
        pop     bx
        mov     bh,0
        test    bl,01110111B
        jz      @f
        mov     bh,1
        test    bl,01111000B
        jz      @f
        mov     bh,bl
        and     bh,01111000B
        cmp     bh,00001000B
        mov     bh,4
        jz      @f
        mov     bh,10h
        test    bl,00000111B
        jz      @f
        mov     bh,11h
        test    bl,00001000B
        jz      @f
        mov     bh,40h
@@:
        push    bx
        mov     bh,bl
        and     bh,01110111B
        cmp     bh,00000001B
        jnz     @f
        or      Word Ptr [si+15],0FFh
@@:
        pop     bx
        mov     bl,bh
        mov     al,bh
        shr     al,1
        shr     al,1
        shr     al,1
        shr     al,1
        ret

MkEngAttrMode60_11_12:
        pop     bx
        xor     al,al
;       call    MkNonDsiplay
        ret


;------------------------------------------------------------------------
;       << DispHangeul >>
; FUNCTION = write hangeul char
; INPUT   : AL = char, BL = attr, BH = page, DX = cursor position
; OUTPUT  : none
; PROTECT : BH, DX, DS, ES
;
; DispHangeul(AL,BL,BH/-)
;       {
;       Save BX,DX,ES,DS;
;       [HanStat] = [HanStat] && not Han1st;
;       ES:DI = [CodeBuf1Addr];
;       DI = DI + [OldTextPos1Addr];
;       AH = BL;
;       CL = [OldChar];
;       CH = [OldAttr];
;       XCHG AX,CX;
;       STOSW;
;       XCHG AX,CX;
;       STOSW;
;       if ([CurPage] == BH)
;               {
;               [CursorStat] = [CursorStat] && not CursorOn;
;               if ([ModeStat] == TextEmulation)
;                       {
;                       ES:DI = [CodeBuf2Addr];
;                       DI = DI + [OldTextPos2Addr];
;                       XCHG AX,CX;
;                       STOSW;
;                       XCHG AX,CX;
;                       STOSW;
;                       }
;               XCHG CH,CL;
;               CL = AL;
;               ES = CS;
;               DI = offset PatternBuffer;
;               GetPattern(CX,ES,DI/carry);
;               SI = DI;
;               AL = [ModeId];
;               AH = 0;
;               DI = AX;
;               ES:AX = [GrpBufAddr];
;               AX = AX + [OldGrpPosAddr];
;               switch([ModeId])
;                       case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                               break;
;                       case 2 :                        ; TE mode 7, MGA
;                       case 4 :                        ; TE mode 2/3, CGA
;                               DispHanMono(BL,DS,SI,ES,AX/-);
;                               break;
;                       case 6 :                        ; TE mode 7, EGA/VGA
;                       case 8 :                        ; TE mode 2/3, EGA/VGA
;                               DispHanColor(BL,DS,SI,ES,AX/-);
;                               break;
;                       case 10 :                       ; mode 40/70
;                               DispHanMonoXor(BL,DS,SI,ES,AX/-);
;                               break;
;                       case 12 :                       ; mode 60/11/12, EGA/VGA
;                               DispHanColorXor(BL,DS,SI,ES,AX/-);
;                               break;
;               }
;       restore BX,DX,ES,DS;
;       }

DispHangeul:
        @push   bx,dx,es,ds
        and     [HanStat],not Han1st
        cmp     dl,80
        jae     DispHangeulExit
        cmp     dh,[MaxRows]
        jae     DispHangeulExit
        les     di,[CodeBuf1Addr]
        add     di,[OldTextPos1Addr]
        mov     ah,bl
        mov     cl,[OldChar]
        mov     ch,[OldAttr]
        xchg    ax,cx
        stosw
        xchg    ax,cx
        stosw
        cmp     [CurPage],bh
        jnz     DispHangeulExit
        cmp     [ModeId],0
        jz      DispHangeulExit
        and     [CursorStat],not CursorOn
        test    [ModeStat],TextEmulation
        jz      @f
        les     di,[CodeBuf2Addr]
        add     di,[OldTextPos2Addr]
        xchg    ax,cx
        stosw
        xchg    ax,cx
        stosw
@@:
        xchg    ch,cl
        mov     cl,al
        mov     ax,cs
        mov     es,ax
        mov     di,offset PatternBuf
        call    GetPattern
        mov     si,di
        mov     al,[ModeId]
        xor     ah,ah
        mov     di,ax
        les     ax,[GrpBufAddr]
        add     ax,[OldGrpPosAddr]
        call    [di+DispHangeulJmpTbl]
DispHangeulExit:
        @pop    ds,es,dx,bx
DispHanHanCardText:
        ret
DispHangeulJmpTbl       Label   Word
        dw      offset  DispHanHanCardText
        dw      offset  DispHanMono
        dw      offset  DispHanMono
        dw      offset  DispHanColor
        dw      offset  DispHanColor
        dw      offset  DispHanMonoXor
        dw      offset  DispHanColorXor


;------------------------------------------------------------------------
;       << DispEnglishNew >>
; FUNCTION = write english char
; INPUT   : AL = char, BL = attr, BH = page, CX = counter, DX = cursor position
; OUTPUT  : none
; PROTECT : BH, DX, DS, ES
;
; DispEnglishNew(AL,BL,BH,CX/-)
;       {
;       Save BX,DX,ES,DS;
;       SI = 80*25;
;       if ([MaxRows] == 30), SI = 80*30;
;       SI = SI - [TextPos1Addr]/2;
;       if (CX > SI), CX = SI;
;       [HanStat] = [HanStat] && not Han1st;
;       ES:DI = [CodeBuf1Addr];
;       DI = DI + [TextPos1Addr];
;       SI = CX;
;       AH = BL;
;       REP STOSW;
;       if ([CurPage] == BH)
;               {
;               [CursorStat] = [CursorStat] && not CursorOn;
;               if ([ModeStat] == TextEmulation)
;                       {
;                       ES:DI = [CodeBuf2Addr];
;                       DI = DI + [TextPos2Addr];
;                       CX = SI;
;                       REP STOSW;
;                       }
;               ES = CS;
;               DI = offset PatternBuffer;
;               CL = AL;
;               GetPatternEng(CL,ES,DI/carry);
;               CX = SI;
;               SI = DI;
;               AL = [ModeId];
;               AH = 0;
;               DI = AX;
;               ES:AX = [GrpBufAddr];
;               AX = AX + [GrpPosAddr];
;               switch([ModeId])
;                       case 0 :                        ; ѱ card, TEXT mode 2/3/7
;                               break;
;                       case 2 :                        ; TE mode 7, MGA
;                       case 4 :                        ; TE mode 2/3, CGA
;                               DispEngMonoMulti(BL,DS,SI,ES,AX/-);
;                               break;
;                       case 6 :                        ; TE mode 7, EGA/VGA
;                       case 8 :                        ; TE mode 2/3, EGA/VGA
;                               DispEngColorMulti(BL,DS,SI,ES,AX/-);
;                               break;
;                       case 10 :                       ; mode 40/70
;                               DispEngMonoXorMulti(BL,DS,SI,ES,AX/-);
;                               break;
;                       case 12 :                       ; mode 60/11/12, EGA/VGA
;                               DispEngColorXorMulti(BL,DS,SI,ES,AX/-);
;                               break;
;               }
;       restore BX,DX,ES,DS;
;       }
DispEnglishExitj:
        jmp     DispEnglishExit

DispEnglishNew:
        @push   bx,dx,es,ds
        cmp     dl,80
        jae     DispEnglishExitj
        cmp     dh,[MaxRows]
        jae     DispEnglishExit
        mov     si,80*25
        cmp     [MaxRows],25
        jbe     @f
        mov     si,80*30
@@:
        mov     di,[TextPos1Addr]
        shr     di,1
        sub     si,di
        cmp     cx,si
        jbe     @f
        mov     cx,si
@@:
        and     [HanStat],not Han1st
        les     di,[CodeBuf1Addr]
        add     di,[TextPos1Addr]
        mov     si,cx
        mov     ah,bl
        rep     stosw
        cmp     [CurPage],bh
        jnz     DispEnglishExit
        cmp     [ModeId],0
        jz      DispEnglishExit
        and     [CursorStat],not CursorOn
        test    [ModeStat],TextEmulation
        jz      @f
        les     di,[CodeBuf2Addr]
        add     di,[TextPos2Addr]
        mov     cx,si
        rep     stosw
@@:
        mov     di,cs
        mov     es,di
        mov     di,offset PatternBuf
        mov     cl,al
        call    GetPatternEng
        mov     cx,si
        mov     si,di
        mov     al,[ModeId]
        xor     ah,ah
        mov     di,ax
        les     ax,[GrpBufAddr]
        add     ax,[GrpPosAddr]
        call    [di+DispEnglishNewJmpTbl]
DispEnglishExit:
        @pop    ds,es,dx,bx
DispEngHanCardText:
        ret
DispEnglishNewJmpTbl    Label   Word
        dw      offset  DispEngHanCardText
        dw      offset  DispEngMonoMulti
        dw      offset  DispEngMonoMulti
        dw      offset  DispEngColorMulti
        dw      offset  DispEngColorMulti
        dw      offset  DispEngMonoXorMulti
        dw      offset  DispEngColorXorMulti


;------------------------------------------------------------------------
;       << DispEnglishOld >>
; FUNCTION = write english char
; INPUT   : none
; OUTPUT  : none
; PROTECT : AX, BX, CX, DX, DS, ES
;
; DispEnglishOld(-/-)
;       {
;       /* save AL,BL,BH,CX,DX */
;       /* xchg [TextPos1Addr],[TextPos2Addr],[GrpPosAddr] to old */
;       /* get [OldChar],[OldPage],[OldAttr],[OldCounter] */
;       DispEnglishNew(AL,BL,BH,CX/-);
;       /* restore AL,BL,BH,CX,DX */
;       /* xchg [TextPos1Addr],[TextPos2Addr],[GrpPosAddr] to old */
;       }

DispEnglishOld:
        @push   ax,bx,cx,dx
        push    word ptr [CursorStat]
        mov     ax,[OldTextPos1Addr]
        xchg    [TextPos1Addr],ax
        mov     [OldTextPos1Addr],ax
        mov     ax,[OldTextPos2Addr]
        xchg    [TextPos2Addr],ax
        mov     [OldTextPos2Addr],ax
        mov     ax,[OldGrpPosAddr]
        xchg    [GrpPosAddr],ax
        mov     [OldGrpPosAddr],ax
        mov     al,[OldChar]
        mov     bl,[OldAttr]
        mov     bh,[OldPage]
        mov     cx,[OldCounter]
        mov     dx,[OldCurPos]
        call    DispEnglishNew
        mov     ax,[OldTextPos1Addr]
        xchg    [TextPos1Addr],ax
        mov     [OldTextPos1Addr],ax
        mov     ax,[OldTextPos2Addr]
        xchg    [TextPos2Addr],ax
        mov     [OldTextPos2Addr],ax
        mov     ax,[OldGrpPosAddr]
        xchg    [GrpPosAddr],ax
        mov     [OldGrpPosAddr],ax
        pop     ax
        mov     [CursorStat],al
        @pop    dx,cx,bx,ax
        ret


;=======================================================================
;       << GetPattern >>
; FUNCTION = get hangeul pattern
; INPUT   : CX = code, ES:DI = pattern buffer
; OUTPUT  : carry(if error)
; PROTECT : ALL
;
; GetPattern(CX,ES,DI/carry)
;       {
;               GetPattern(CX,ES,DI/carry);
;       }

GetPattern:
        @push   ax,bx,cx,dx,si,di,ds,es
        mov     ax,cs
        mov     ds,ax
        mov     ax,cx
; UDC
        test    [CodeStat],WSung7
        jnz     GetHanPat
        test    [CodeStat],Chab
        jz      @f
        cmp     ah,0d8h
        jnz     GetHanPat
        call    ChgCh2Ks
        mov     cx,ax
@@:
        call    UdcRange
        jc      GetHanPat
        test    [HjStat],UdcArea
        jz      GetPatternErr
        call    [GetUdc1st]
        jmp     short GetPatternEnd
GetHanPat:
        call    CheckCodeRangeWdfe
        jc      GetPatternErr
        test    [CodeStat],WSung7
        jz      @f
        call    ChgCh72Ks
        jc      GetPatternErr
@@:
        test    [CodeStat],Chab
        jz      @f
        test    [CodeStat],InstPatGen
        jz      GetHanPatCode
        cmp     ah,0d3h
        ja      GetHanPatCode
        call    [PatGenAddr]
        jc      GetPatternErr
        jmp     short GetPatternEnd
GetHanPatCode:
        call    ChgCh2Ks
        jc      GetPatternErr
@@:
        mov     cx,ax
        test    [CodeStat],InstPatGen
        jz      GetPatHanCard
        cmp     ah,0a4h
        jne     CheckHangeul
        cmp     al,0a1h
        jb      CheckHangeul
        cmp     al,0d3h
        jbe     @f
CheckHangeul:
        cmp     ah,0b0h
        jb      GetPatHanCard
        cmp     ah,0c8h
        ja      GetPatHanCard
@@:
        call    [PatGenAddr]
        jc      GetPatternErr
        jmp     short GetPatternEnd
GetPatHanCard:
        call    [GetHan1st]
        jc      GetPatternErr
GetPatternEnd:
        clc
        jmp     short @f
GetPatternErr:
        mov     si,offset ErrHanFont
        mov     cx,16*2
        rep movsb
        stc
@@:
        @pop    es,ds,di,si,dx,cx,bx,ax
        ret

UdcRange:
        cmp     ah,0c9h
        jz      @f
        cmp     ah,0feh
        jnz     UdcRangeErr
@@:
        cmp     al,0a1h
        jb      UdcRangeErr
        cmp     al,0feh
        ja      UdcRangeErr
        clc
        ret
UdcRangeErr:
        stc
        ret
ErrHanFont      dw      0fe7fh, 240h, 240h, 240h, 240h, 240h, 240h, 240h
                dw      240h, 240h, 240h, 240h, 240h, 240h, 240h, 0fe7fh


;------------------------------------------------------------------------
;       << PutPattern >>
; FUNCTION = put hangeul pattern
; INPUT   : CX = code, DS:SI = pattern buffer
; OUTPUT  : carry(if error)
; PROTECT : ALL
;
; PutPattern(CX,DS,SI/carry)
;
PutPattern:
        @push   ax,bx,cx,dx,si,di,ds,es
        mov     ax,cx
        test    cs:[HjStat],UdcArea
        jz      PutPatternErr
        test    cs:[CodeStat],Chab
        jz      @f
        call    ChgCh2Ks
        mov     cx,ax
@@:
        call    UdcRange
        jc      PutPatternErr
        push    ax
        mov     dx,3c4h                 ; sequence index register
        mov     al,1
        out     dx,al
        inc     dl
        in      al,dx
        or      al,20h                  ; disable screen
        out     dx,al
        pop     ax
        mov     cx,ax
        push    cx
        push    si
        push    ds
        call    cs:[PutUdc1st]
        pop     ds
        pop     si
        pop     cx
        test    cs:[Card1st],DualMnt
        jz      @f
        call    cs:[PutUdc2nd]
@@:
        mov     dx,3c4h                 ; sequence index register
        mov     al,1
        out     dx,al
        inc     dl
        in      al,dx
        and     al,not 20h              ; enable screen
        out     dx,al
        clc
        jmp     short @f
PutPatternErr:
        stc
@@:
        @pop    es,ds,di,si,dx,cx,bx,ax
        ret


;------------------------------------------------------------------------
;       << GetPatternEng >>
; FUNCTION = get english pattern
; INPUT   : CL = code, ES:DI = pattern buffer
; OUTPUT  : carry(if error)
; PROTECT : ALL
;
; GetPatternEng(CL,ES,DI/carry)
;
GetPatternEng:
        @push   ax,cx,di,si,ds
        mov     ax,cs
        mov     ds,ax
        xor     ch,ch
        shl     cx,1
        shl     cx,1
        shl     cx,1
        shl     cx,1
        mov     si,cx
        add     si,offset EngFont
        mov     cx,16
        rep movsb
GetPatEngEnd:
        @pop    ds,si,di,cx,ax
        ret

public  HanCardSet, HanCardReset, pHanCardReset
;------------------------------------------------------------------------
;       << HanCardSet >>
; FUNCTION = set active hangeul card
; INPUT   : none
; OUTPUT  : none
; PROTECT : ALL
;
; HanCardSet(-/-)
;       {
;       if (CS:[Card1st] == HanCard)
;               {
;               save AX,DX;
;               /* call CS:[HanOn1st];
;               restore AX,DX;
;               }
;       }
;
HanCardSet:
        test    cs:[Card1st],HanCard
        jz      HanCardSetEnd
        test    cs:[CodeStat],HangeulMode
        jz      HanCardSetEnd
if      KseVga
        test    cs:[KseCard],00000001b
        jz      @f
        test    cs:[CodeStat],Chab or WSung7
        jnz     HanCardSetEnd
        test    cs:[ModeStat],GrpMode
        jnz     HanCardSetEnd
@@:
endif   ; if KseVga
        @push   ax,dx
        call    cs:[HanOn1st]
        @pop    dx,ax
HanCardSetEnd:
        ret

;------------------------------------------------------------------------
;       << HanCardReset >>
; FUNCTION = reset active hangeul card
; INPUT   : none
; OUTPUT  : none
; PROTECT : ALL
;
; HanCardReset(-/-)
;       {
;       if (CS:[Card1st] == HanCard)
;               {
;               save AX,DX;
;               /* call CS:[HanOff1st];
;               restore AX,DX;
;               }
;       }
;
HanCardReset:
        test    cs:[Card1st],HanCard
        jz      @f
        @push   ax,dx
        call    cs:[HanOff1st]
        @pop    dx,ax
@@:
        ret

;------------------------------------------------------------------------
;       << pHanCardReset >>
; FUNCTION = reset inactive hangeul card
; INPUT   : none
; OUTPUT  : none
; PROTECT : ALL
;
; pHanCardReset(-/-)
;       {
;       if (CS:[Card2nd] == HanCard)
;               {
;               save AX,DX;
;               /* call CS:[HanOff2nd];
;               restore AX,DX;
;               }
;       }
;
pHanCardReset:
        test    cs:[Card2nd],DualMnt
        jz      @f
        test    cs:[Card2nd],HanCard
        jz      @f
        @push   ax,dx
        call    cs:[HanOff2nd]
        @pop    dx,ax
@@:
        ret


;=======================================================================
public  GetFontHanExt, GetFontUdcExt, PutFontUdcExt
GetFontUdcExt:
        xor     ax,ax
        cmp     ch,0c9h
        jz      @f
        mov     al,94
@@:
        xor     ch,ch
        sub     cl,0a1h
        add     cx,ax
        mov     al,32
        mul     cx
        add     ax,[UdcAddr]
        adc     dl,[UdcAddrH]
        mov     bx,32/2
        jmp     short GetFontExtDo
GetFontHanExtErr:
        stc
        ret
GetFontHanExt:
        cmp     ch,0adh
        jb      @f
        cmp     ch,0b0h
        jb      GetFontHanExtErr
        sub     ch,29
@@:
        sub     cx,0a1a1h
        mov     al,94
        mul     ch
        xor     ch,ch
        add     cx,ax
        mov     ax,32
        mul     cx
        add     ax,[HanAddr]
        adc     dl,[HanAddrH]
        mov     bx,32/2
GetFontExtDo:
        mov     si,offset GdtDataTbl
        mov     [si+GdtSL],ax
        mov     [si+GdtSH],dl
        mov     dx,es
        mov     cl,4
        shr     dh,cl
        mov     ax,es
        shl     ax,cl
        add     ax,di
        adc     dh,0
        mov     [si+GdtDL],ax
        mov     [si+GdtDH],dh
GetFontExtCall:
        mov     ax,cs
        mov     es,ax
        mov     cx,bx
        mov     ah,87h
        int     15h
        ret
PutFontUdcExt:
        xor     ax,ax
        cmp     ch,0c9h
        jz      @f
        mov     al,94
@@:
        xor     ch,ch
        sub     cl,0a1h
        add     cx,ax
        mov     al,32
        mul     cx
        add     ax,cs:[UdcAddr]
        adc     dl,cs:[UdcAddrH]
        mov     bx,32/2
        mov     di,offset GdtDataTbl
        mov     cs:[di+GdtDL],ax
        mov     cs:[di+GdtDH],dl
        mov     dx,ds
        mov     cl,4
        shr     dh,cl
        mov     ax,ds
        shl     ax,cl
        add     ax,si
        adc     dh,0
        mov     cs:[di+GdtSL],ax
        mov     cs:[di+GdtSH],dh
        mov     si,di
        jmp     GetFontExtCall
public  Int15Srv, GdtDataTbl
Int15Srv:
        pushf
        cmp     ah,88H                  ; extended memory size determine?
        je      @f
        popf
        jmp     cs:[OldInt15]
@@:
        popf
        mov     ax,cs:[MaxMemSize]
        iret
GdtDataTbl      label   word
                db      16 dup(?)       ; 00 - 0f
                dw      -1              ; 10 - 11
                db      3 dup(?)        ; 12 - 14
                db      93h             ; 15
                db      2 dup(?)        ; 16 - 17
                dw      -1              ; 18 - 19
                db      3 dup(?)        ; 1a - 1c
                db      93h             ; 1d
                db      2 dup(?)        ; 1e - 1f
                db      16 dup(?)       ; 20 - 2f

;----------------------------------------
public  GetFontHanEms, GetFontUdcEms, PutFontUdcEms
GetFontUdcEms:
        xor     ax,ax
        cmp     ch,0c9h
        jz      @f
        mov     al,94
@@:
        xor     ch,ch
        sub     cl,0a1h
        add     cx,ax
        mov     al,32
        mul     cx
        add     ax,[UdcAddr]
        adc     dl,0
        shl     dl,1
        shl     dl,1
        add     dl,[UdcAddrH]
        mov     cx,32
        jmp     short GetFontEmsDo
GetFontHanEms:
        cmp     ch,0adh
        jb      @f
        cmp     ch,0b0h
        jb      GetFontHanEmsErr
        sub     ch,29
@@:
        sub     cx,0a1a1h
        mov     al,94
        mul     ch
        xor     ch,ch
        add     cx,ax
        mov     ax,32
        mul     cx
        add     ax,[HanAddr]
        adc     dl,0
        shl     dl,1
        shl     dl,1
        add     dl,[HanAddrH]
        mov     cx,32
GetFontEmsDo:
        cmp     ax,16384
        jb      @f
        sub     ax,16384
        inc     dl
        jmp     short GetFontEmsDo
@@:
        mov     si,ax
        mov     bl,dl
        xor     bh,bh
        mov     [CurEmsPage],bx
        mov     ds,[EmsSeg]
        mov     dx,cs:[EmsHandle]
        mov     ah,47h
        int     67h
        jmp     short SetEmsPage
@@:
        cmp     si,16384
        jae     NextEmsPage
        movsb
        dec     cx
        jz      GetFontEmsDoEnd
        jmp     short @b
NextEmsPage:
        xor     si,si
        mov     bx,cs:[CurEmsPage]
        inc     bx
SetEmsPage:
        mov     ax,4400h                ; set page
        int     67h
        or      ah,ah
        jz      @b
        mov     ah,48h
        int     67h
GetFontHanEmsErr:
        stc
        ret
GetFontEmsDoEnd:
        mov     ah,48h
        int     67h
        clc
        ret
PutFontUdcEms:
        xor     ax,ax
        cmp     ch,0c9h
        jz      @f
        mov     al,94
@@:
        xor     ch,ch
        sub     cl,0a1h
        add     cx,ax
        mov     al,32
        mul     cx
        add     ax,cs:[UdcAddr]
        adc     dl,0
        shl     dl,1
        shl     dl,1
        add     dl,cs:[UdcAddrH]
        mov     cx,32
@@:
        cmp     ax,16384
        jb      @f
        sub     ax,16384
        inc     dl
        jmp     short @b
@@:
        mov     di,ax
        mov     bl,dl
        xor     bh,bh
        mov     cs:[CurEmsPage],bx
        mov     es,cs:[EmsSeg]
        mov     dx,cs:[EmsHandle]
        mov     ah,47h
        int     67h
        jmp     short SetPutEmsPage
@@:
        cmp     di,16384
        jae     NextPutEmsPage
        movsb
        dec     cx
        jz      PutFontEmsDoEnd
        jmp     short @b
NextPutEmsPage:
        xor     di,di
        mov     bx,cs:[CurEmsPage]
        inc     bx
SetPutEmsPage:
        mov     ax,4400h                ; set page
        int     67h
        or      ah,ah
        jz      @b
        mov     ah,48h
        int     67h
        stc
        ret
PutFontEmsDoEnd:
        mov     ah,48h
        int     67h
        clc
        ret

;----------------------------------------
public  GetFontHanReal, GetFontUdcReal, PutFontUdcReal
GetFontUdcReal:
        xor     ax,ax
        cmp     ch,0c9h
        jz      @f
        mov     al,94
@@:
        xor     ch,ch
        sub     cl,0a1h
        add     al,cl
        mov     cl,5
        shl     ax,cl
        add     ax,[UdcAddr]
        mov     si,ax
        and     si,0fh
        mov     cl,4
        shr     ax,cl
        mov     cx,cs
        add     ax,cx
        mov     ds,ax
        mov     cx,32/2
        rep movsw
        clc
@@:
        ret
GetFontHanReal:
        cmp     ch,0adh
        jb      @f
        cmp     ch,0b0h
        jb      @b                      ; set carry
        sub     ch,29
@@:
        sub     cx,0a1a1h
        mov     al,94
        mul     ch
        xor     ch,ch
        add     ax,cx
        mov     cx,32
        mul     cx
        add     ax,[HanAddr]
        adc     dl,0
        mov     si,ax
        and     si,0fh
        mov     cl,4
        shr     ax,cl
        shl     dl,cl
        or      ah,dl
        mov     cx,cs
        add     ax,cx
        mov     ds,ax
        mov     cx,32/2
        rep movsw
        clc
        ret
PutFontUdcReal:
        xor     ax,ax
        cmp     ch,0c9h
        jz      @f
        mov     al,94
@@:
        xor     ch,ch
        sub     cl,0a1h
        add     al,cl
        mov     cl,5
        shl     ax,cl
        add     ax,cs:[UdcAddr]
        mov     di,ax
        and     di,0fh
        mov     cl,4
        shr     ax,cl
        mov     cx,cs
        add     ax,cx
        mov     es,ax
        mov     cx,32/2
        rep movsw
        clc
        ret


;=======================================================================
; MGA/CGA video card porting area
;
; MGA card
public  HanOnMga, HanOffMga, GetFontMga, PutFontMga
GetFontMga:
        mov     si,0b800h-2
        mov     ds,si
        sub     si,si
        cli                             ; for proper operation
        mov     ax,cx
        mov     dx,3b6H                 ; point to 3b6 port
        out     dx,ax                   ; out high byte
        mov     cx,16                   ; repeat word counter
        rep     movsw                   ; move pattern into es:di
        inc     dl
        out     dx,al
        sti
        clc
        ret
PutFontMga:
        mov     ax,cx                   ; save codes
        mov     dx,3b6H                 ; point to 3b6 port
        cli
        out     dx,ax
        mov     di,0b800h-2
        mov     es,di
        xor     di,di
        mov     cx,16
        rep     movsw                   ; move pattern to put_through RAM
        inc     dl
        out     dx,al
        sti
        clc
        ret
HanOnMga:
        mov     dx,3bdH                 ; point to 3bd port
        mov     al,00000001B            ; data to output
        out     dx,al
        ret
HanOffMga:
        mov     dx,3bdH                 ; point to 3bd port
        xor     al,al                   ; data to output
        out     dx,al
        ret
;
; CGA card
public  HanOnCga, HanOffCga, GetFontCga, PutFontCga
GetFontCga:
        mov     si,0b800h
        mov     ds,si
UDC_Check:
        cmp     ch,0c9h                 ; First UDC Area ?
        je      @f
        cmp     ch,0feh                 ; Second UDC Area ?
        je      @f
        jmp     Short GetText
@@:
        sub     ax,ax                   ; Calc. Ref Address
        mov     al,cl                   ; get code
        sub     al,80H
        and     ch,00010000B
        mov     cl,5
        shl     ax,cl                   ; * 32
        or      ah,ch
        Mov     Si,Ax                   ; Set Ref. Address
        Mov     AH,81h                  ; Select Bank 1
        Jmp     Short GetGraph
GetText:
        sub     cl,80H
        mov     ax,cx                   ; get code
        and     ah,01111111b
        shr     ah,1                    ; get bank #
        shr     ah,1
        shr     ah,1
        or      ah,10000000B
        and     ch,7
        sub     cl,cl
        shr     cx,1
        add     cl,al
        mov     si,cx
        mov     cl,5                    ; AH = Bank Select Value
        shl     si,cl                   ; Si = get relative addr within a bank
GetGraph:
        xor     cx,cx
        mov     dx,3daH                 ; point to 3da port
@@:
        dec     cx
        jz      @f
        in      al,dx
        test    al,00001000B            ; dots on?
        jz      @b
@@:
        cli
        sub     dl,4                    ; point to 3d6 port
        mov     al,ah                   ; select bank #
        out     dx,al
        mov     cx,16
        rep     movsw
        mov     al,11000000B            ; select bank 0 & enable Hangeul mode
        out     dx,al
        sti                             ; enable interrupts
        clc
        ret
PutFontCga:
        sub     ax,ax
        mov     al,cl                   ; get code
        sub     al,80H
        and     ch,00010000B
        mov     cl,5
        shl     ax,cl                   ; * 32
        or      ah,ch
        mov     di,0b800h
        mov     es,di
        mov     di,ax                   ; FontWinSeg:(0 or 1000H)+(cl-80H)*32
        mov     dx,3daH                 ; point to 3da port
@@:
        in      al,dx
        test    al,00001000B            ; dots off?
        jnz     @b
        cli                             ; disable interrupts
@@:
        in      al,dx
        test    al,00001000B            ; dots on?
        jz      @b
        sub     dl,2                    ; point to 3d8 port
        mov     al,21H                  ; bit 3 <- 0
        out     dx,al                   ; disable video signal
        sub     dl,2                    ; point to 3d6 port
        mov     al,81H                  ; select bank 1
        out     dx,al
        mov     cx,16
        rep     movsw
        mov     al,10000000B            ; select bank 0 & enable Hangeul mode
        out     dx,al
        add     dl,2                    ; point to 3d8 port
        mov     cx,ds
        xor     ax,ax
        mov     ds,ax
        mov     al,[rCrtModeSet]         ; get modeset value
        out     dx,al                   ; enable video signal
        mov     ds,cx
        sti                             ; enable interrupts
        clc
        ret
HanOnCga:
        mov     dx,3d6H                 ; point to 3d6 port
        mov     al,10000000B            ; data to output
        out     dx,al
        cmp     [ModeId],0*2
        jz      @f
        mov     al,11000000b
        out     dx,al
@@:
        ret
HanOffCga:
        mov     dx,3d6H                 ; point to 3d6 port
        xor     al,al                   ; data to output
        out     dx,al
        ret
;
; font card
public  HanOnFont, HanOffFont, GetFontFont, PutFontFont
GetFontFont:
        mov     si,0b800h-2
        mov     ds,si
        sub     si,si
        cli                             ; for proper operation
        mov     ax,cx
        mov     dx,3b6H                 ; point to 3b6 port
        out     dx,ax                   ; out high byte
        mov     cx,16                   ; repeat word counter
        rep     movsw                   ; move pattern into es:di
        inc     dl
        out     dx,al
        sti
        clc
        ret
PutFontFont:
        mov     ax,cx                   ; save codes
        mov     dx,3b6H                 ; point to 3b6 port
        cli
        out     dx,ax
        mov     di,0b800h-2
        mov     es,di
        xor     di,di
        mov     cx,16
        rep     movsw                   ; move pattern to put_through RAM
        inc     dl
        out     dx,al
        sti
HanOnFont:
HanOffFont:
        clc
        ret


;------------------------------------------------------------------------
;       << DispEngMonoMulti >>
; FUNCTION = english character multi-display in mono
; INPUT   : ES:AX = graphics buffer position, CX = counter, BL = attr
;           DS:SI = pattern
; OUTPUT  : none
; PROTECT : none
; DispEngMonoMulti(BL,CX,DS,SI,ES,AX/-)
;       {
;       if (CX = 1),DispEngMono(BL,DS,SI,ES,DI/-);
;       else
;               {
;               if (CX = 0), return;
;               DI = AX;
;               Call  MakeEngAttr ;
;               while (CX = 0, CX-)
;                       /* save register */
;                       DispEngMono(BL,DS,SI,ES,DI/-);
;                       /* restore register */
;                       /* recalc memory address */
;               }
;       }

DispEngMonoMulti:
        cmp     cx,1
        jne     @f
        call    DispEngMono
        ret
@@:
        jcxz    DispEngMonoMultiExit
        mov     dl,Byte Ptr [CurPos]
        mov     di,ax
        CALL    MakeEngAttr
DispEngMonoMultiLoop:
        @push   bx,cx,dx,di,si
        call    DispEngMonoDo
        @pop    si,di,dx,cx,bx
        inc     di
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        add     di,80*3
@@:
        loop    DispEngMonoMultiLoop
DispEngMonoMultiExit:
        ret

;------------------------------------------------------------------------
;       << DispEngMonoXorMulti >>
; FUNCTION = english character multi-display in mono ( XOR )
; INPUT   : ES:AX = graphics buffer position, CX = counter, BL = attr
;           DS:SI = pattern
; OUTPUT  : none
; PROTECT : none
;
; DispEngMonoXorMulti(BL,CX,DS,SI,ES,AX/-)
;       {
;       if (CX = 1),DispEngMonoXor(BL,DS,SI,ES,DI/-);
;       else
;               if (CX = 0), return;
;               DI = AX;
;               Call MakeEngAttr;
;               while (CX = 0, CX-)
;                       /* save register */
;                       DispEngMonoXor(BL,DS,SI,ES,DI/-);
;                       /* restore register */
;                       /* recalc memory address */
;       }

DispEngMonoXorMulti:
        test    bl,80h
        jz      DispEngMonoMulti
        cmp     cx,1
        jne     @f
        call    DispEngMonoXor
        ret
@@:
        jcxz    DispEngMonoXorMultiExit
        mov     dl,Byte Ptr [CurPos]
        mov     di,ax
        CALL    MakeEngAttr
DispEngMonoXorMultiLoop:
        @push   bx,cx,dx,di,si
        call    DispEngMonoXorDo
        @pop    si,di,dx,cx,bx
        inc     di
        inc     dl
        cmp     dl,80
        jb      @f
        xor     dl,dl
        add     di,80*3
@@:
        loop    DispEngMonoXorMultiLoop
DispEngMonoXorMultiExit:
        ret


;  sub-routine ο attribute control  
;------------------------------------------------------------------------
;       << DispHanMono >>
; FUNCTION = Font Image Display Routine for Double Byte Font (16*16)
; INPUT    ES:AX  = Video RAM Segment:Offset
;          DS:SI  = Font Data Segment:Offset
;          BL     = Attribute
; OUTPUT   : none
; PROTECT  : none
;
; DispHanMono(BL,DS,SI,ES,AX/-)

DispHanMono:
        mov     di,ax
        CALL    MakeHanAttr
        MOV     AX,(2000h-2)            ; Next Scan Line Value
        MOV     BX,(2000h*3-50h+2)      ; First Scan Line Return Value
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        SUB     DI,BX
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        SUB     DI,BX
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        SUB     DI,BX
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        ADD     DI,AX
        MOVSW
        RET


;------------------------------------------------------------------------
;       << DispHanMonoXor >>
; FUNCTION = Font Image Display Routine for Double Byte Font (16*16)
; INPUT    ES:AX  = Video RAM Segment:Offset
;          DS:SI  = Font Data Segment:Offset
;          BL     = Attribute
; OUTPUT   : none
; PROTECT  : none
;
; DispHanMonoXor(BL,DS,SI,ES,AX/-)

DispHanMonoXor:
        test    bl,80h
        jz      DispHanMono
        mov     di,ax
        CALL    MakeHanAttr
        MOV     CX,2000h                ; Next Scan Line Value
        MOV     BX,(2000h*3-50h)        ; First Scan Line Return Value
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        SUB     DI,BX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        SUB     DI,BX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        SUB     DI,BX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        ADD     DI,CX
        LODSW
        XOR     ES:[DI],AX
        RET


;------------------------------------------------------------------------
;       << DispEngMono >>
; FUNCTION = Font Image Display Routine for One Byte Font
; INPUT    ES:AX  = Video RAM Segment:Offset
;          DS:SI  = Font Data Segment:Offset
;          BL     = Attribute
; OUTPUT   : none
; PROTECT  : none
;
; DispEngMono(BL,DS,SI,ES,AX/-)

DispEngMono:
        mov     di,ax
        CALL    MakeEngAttr
DispEngMonoDo:
        MOV     AX,(2000h-1)            ; Next Scan Line Value
        MOV     BX,(2000h*3-50h+1)      ; First Scan Line Return Value
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        SUB     DI,BX
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        SUB     DI,BX
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        SUB     DI,BX
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        ADD     DI,AX
        MOVSB
        RET


;------------------------------------------------------------------------
;       << DispEngMonoXor >>
; FUNCTION = Font Image Display Routine for One Byte Font
; INPUT    ES:AX  = Video RAM Segment:Offset
;          DS:SI  = Font Data Segment:Offset
;          BL     = Attribute
; OUTPUT   : none
; PROTECT  : none
;
; DispEngMonoXor(BL,DS,SI,ES,AX/-)

DispEngMonoXor:
        test    bl,80h
        jz      DispEngMono
        mov     di,ax
        CALL    MakeEngAttr
DispEngMonoXorDo:
        MOV     CX,2000h                ; Next Scan Line Value
        MOV     BX,(2000h*3-50h)        ; First Scan Line Return Value
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        SUB     DI,BX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        SUB     DI,BX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     Es:[DI],AL
        SUB     DI,BX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        ADD     DI,CX
        LODSB
        XOR     ES:[DI],AL
        RET


;------------------------------------------------------------------------
;       << CalcScrollParms >>
; FUNCTION = Scroll  Ķ 
; INPUT   : AH = Function
;         : AL = Scroll Line count
;         : BH = Blank line Attr
;         : CH:CL = Left Upper Row : Column
;         : DH:DL = Right Lower Row : Column
; OUTPUT  : BL = Scroll Line count ( Y' )
;         : DH = Move count ( Y )
;         : DL = Window width ( X )
;         : BP = 80 - DL ( X' )
;         : DI = CH*80*2 + CL
;         : SI = (CH+AL)*80*2 + CL
; PROTECT : none
;       -----------------------------------------
;                        X                 X'     
;       --------><------------------><--------- 
;                                               
;               (CH,CL)                           
;          ----  --------------------           
;               di                            
;                        al                   
;                                             
;         y     -------------------            
;               si                             
;                                              
;                                              
;                                 si           
;          ----  --------------------(DH-AL,DL) 
;                                             
;        y'              al                   
;                                di           
;          ----  --------------------           
;                                    (DH,DL)      
;       ------------------------------------------
;
;             SCROLL UP              SCROLL DOWN
;     -------------------------------------------------------
;             CLD                     STD
;                                     XCHG CX,DX
;                                     NEG  AL
;     --------------------------------------------------------
;       X = DL - CL              X = DL - CL
;       if AL >= 80H , -X        if AL >= 80H , -X
;       X' = 80 - X              X' = 80 - X
;       if AL >= 80H , -X'       if AL >= 80H , -X'
;       Y = DH - CH - AL         Y = DH - CH - AL
;       DI = CH * 80*2 + CL      DI = CH * 80*2 + CL
;       SI = (CH+AL)*80*2 + CL   SI = (CH+AL)*80*2 + CL
;                             
;

CalcScrollParms:
        cmp     ah,06h
        jz      @f                      ; scroll up
        std                             ; decrement order
        xchg    cx,dx
        neg     al
@@:
        push    cx
        mov     bl,al                   ; BL = Y'
        sub     dl,cl                   ; DL = X
        jns     @f
        neg     dl
@@:
        inc     dl
        sub     dh,ch                   ; Y + Y'
        jns     @f
        neg     dh
@@:
        inc     dh
        mov     al,bl
        or      al,al
        jns     @f
        neg     al
@@:
        sub     dh,al                   ; Y
        mov     bp,80
        mov     al,dl
        xor     ah,ah
        sub     bp,ax                   ; BP = X'
        shl     bp,1                    ; word size
        mov     al,80
        mul     ch
        xor     ch,ch
        mov     di,ax
        add     di,cx                   ; (ch*80)*2 + cl
        shl     di,1
        mov     si,di

        mov     al,bl
        or      al,al
        jns     @f
        neg     al
@@:
        mov     ah,80*2
        mul     ah
        mov     cl,bl
        or      cl,cl
        jns     @f
        sub     si,ax
        jmp     short Continue
@@:
        add     si,ax
Continue:
        or      bl,bl
        jns     @f
        neg     bp
@@:
        pop     cx
        ret


;------------------------------------------------------------------------
;       << TextBufferScroll >>
; FUNCTION = Text Buffer Scroll
; INPUT   : ES:AX = CodeBuffer ׸Ʈ ɼ
;         : BH = Blank line attribute
;         : BL = Scroll Line count ( Y' )
;         : DH = Move count ( Y )
;         : DL = Window width ( X )
;         : BP = 80 - DL ( X' )
;         : DI = CH*80*2 + CL
;         : SI = (CH+AL)*80*2 + CL
; OUTPUT  : none
; PROTECT : BX,CX,DX,DS,SI,DI

TextBufferScroll:
        @push   bx,cx,dx,ds,di,si
        or      bl,bl
        jns     @f
        neg     bl                      ; Positive
@@:
        add     di,ax                   ; ES:DI = destination
        add     si,ax                   ; DS:SI = source
        mov     cx,es
        mov     ds,cx
        xor     ch,ch
        or      dh,dh
        jz      MgaTextFill
@@:
        mov     cl,dl                   ; restore width
        rep     movsw
        add     si,bp
        add     di,bp
        dec     dh
        jnz     @b
MgaTextFill:
        mov     ah,bh                   ; restore attribute
        mov     al,' '                  ; space character
@@:
        mov     cl,dl
        rep     stosw                   ; AX = attribute : ' '
        add     di,bp
        dec     bl
        jnz     @b
        @pop    si,di,ds,dx,cx,bx
        ret


;------------------------------------------------------------------------
;       << MgaGrpScroll >>
; FUNCTION = Mono Graphic Screen Scroll
; INPUT   : BH = Blank line Attr
;         : BL = Scroll Line count ( Y' )
;         : DH = Move count ( Y )
;         : DL = Window width ( X )
;         : CX = Row : Column
; OUTPUT  : none
; PROTECT : none

MgaGrpScroll:
        les     di,[GrpBufAddr]
        mov     ax,es
        mov     ds,ax                           ; ES = DS
        mov     bp,cx
        xchg    cx,dx                           ; save DX
        mov     ax,80*4
        mov     dl,dh
        xor     dh,dh
        mul     dx
        mov     dx,bp
        xor     dh,dh
        add     ax,dx
        add     di,ax
        mov     si,di

        mov     dl,bl
        or      dl,dl
        jns     @f
        neg     dl
@@:
        mov     bp,80*4
        mov     al,dl
        xor     ah,ah
        mul     bp
        or      bl,bl
        jns     @f
        sub     si,ax
        jmp     short MF3
@@:
        add     si,ax
MF3:
        xchg    cx,dx                           ; restore DX

        xor     ah,ah
        mov     al,dl                           ; restore width
        mov     bp,2000h
        or      bl,bl
        jns     @f
        add     bp,ax
        jmp     short MF4
@@:
        sub     bp,ax                           ; 2000h-window width:next scan line
MF4:
        xor     al,al
        or      bh,bh
        jz      MF1
        cmp     bh,0ffh
        jz      MF2
        and     bh,77h
        cmp     bh,70h
        jz      MF2
        and     bh,00000111b
        cmp     bh,1                            ; undeline
        jnz     MF1
        or      cs:[ScrUpDnFlag],10000000b
        jmp     Short MF1
MF2:
        not     al                              ; al=0ffh
MF1:
        mov     ah,bl                           ; set fill count
        mov     ch,bl
        mov     bx,(8000h-50h)
        or      ah,ah
        jns     @f
        neg     ah
@@:
        push    ax
        sub     bx,bp
        xor     ch,ch
        or      dh,dh
        jnz     MonoScrollLoop
        jmp     MonoFill

MonoScrollLoop:
        mov     cl,dl           ; 1
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 2
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 3
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 4
        rep     movsb
        sub     si,bx
        sub     di,bx

        mov     cl,dl           ; 5
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 6
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 7
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 8
        rep     movsb
        sub     si,bx
        sub     di,bx

        mov     cl,dl           ; 9
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 10
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 11
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 12
        rep     movsb
        sub     si,bx
        sub     di,bx

        mov     cl,dl           ; 13
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 14
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 15
        rep     movsb
        add     si,bp
        add     di,bp
        mov     cl,dl           ; 16
        rep     movsb
        sub     si,bx
        sub     di,bx
        or      ah,ah
        test    cs:[ScrUpDnFlag],00000010b
        jz      @f              ; down
        sub     si,80*4*2
        sub     di,80*4*2
@@:
        dec     dh              ; decrement scroll Height
        jz      MonoFill
        jmp     MonoScrollLoop
MonoFill:
        pop     ax
MonoFillLoop:
        mov     cl,dl           ; 1
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 2
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 3
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 4
        rep     stosb
        sub     di,bx

        mov     cl,dl           ; 5
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 6
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 7
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 8
        rep     stosb
        sub     di,bx

        mov     cl,dl           ; 9
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 10
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 11
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 12
        rep     stosb
        sub     di,bx

        mov     cl,dl           ; 13
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 14
        rep     stosb
        add     di,bp
        mov     cl,dl           ; 15
        rep     stosb
        add     di,bp
        test    cs:[ScrUpDnFlag],80h    ; scroll down/undeline
        jz      @f
        mov     al,0ffh
        mov     cl,dl           ; 16
        rep     stosb
        xor     al,al
        jmp     Short Normal1
@@:
        mov     cl,dl           ; 16
        rep     stosb
Normal1:
        sub     di,bx
        test    cs:[ScrUpDnFlag],00000010b
        jz      @f
        sub     di,80*4*2
@@:
        dec     ah              ; decrement scroll count
        jz      @f
        jmp     MonoFillLoop
@@:
        ret


;------------------------------------------------------------------------
;       << MgaWritePixel >>
; FUNCTION = write pixel
; INPUT    : DX    row number
;          : CX    column number
;          : AL    color value
; OUTPUT   : none
; PROTECT  : none
;                       if bit 7 of al = 1, then color value is XORed
;                       with the current contents of the dot
; MgaWritePixel(AL,CX,DX/-)

MgaWritePixel:
        mov     bh,al                   ; save color value
        call    MgaGetPos
        test    bh,10000000b            ; is bit 7 set?
        jz      MgaWriteDotNormal
        and     bh,00000001B            ; maskout other than color bit
        ror     bh,1                    ; reside to MSB
        shr     bh,cl                   ; get target bit position in that byte
        xor     al,bh                   ; XORing color value of raw bit
        stosb                           ; write dot
        ret

MgaWriteDotNormal:
        and     bh,00000001B            ; maskout other than color bit
        ror     bh,1                    ; reside to MSB
        shr     bh,cl                   ; get target bit position in that byte
        not     bl                      ; inverse masking bits (1's complement)
        and     al,bl                   ; maskout target bit
        or      al,bh                   ; set color value into target bit
        stosb                           ; write dot
        ret

MgaGetPos:
        mov     di,dx                   ; save row number
        mov     ax,80
        shr     dx,1                    ; rows/4
        shr     dx,1
        mul     dl
        mov     dx,di                   ; restore row number
        mov     di,ax                   ; rows/4 * 80
        and     dx,0000000000000011B    ; rows mod 4
        ror     dx,1                    ; mapping to x000H(0/2000H/4000H/6000H)
        ror     dx,1
        ror     dx,1
        add     di,dx                   ; target VRAM addr for given rows
        mov     ax,cx                   ; get column number
        shr     ax,1                    ; cols/8
        shr     ax,1
        shr     ax,1
        add     di,ax                   ; target VRAM addr for given rows/cols
        and     cx,00000111B            ; get remainder
        mov     ax,80h
        shr     ax,cl                   ; get target bit position in that byte
        mov     bl,al                   ; save it
        mov     al,es:[di]              ; get target byte
        ret

;------------------------------------------------------------------------
;       << MgaReadPixel >>
; FUNCTION = read pixel
; INPUT    : DX    row number
;          : CX    column number
; OUTPUT   : AL    returned color value the dot read
; PROTECT  : none
;
;MgaReadPixel(BH,CX,DX/-)

MgaReadPixel:
        call    MgaGetPos
        and     al,bl                   ; extract target bit
        not     cl
        and     cl,00000111B            ; get shift counter (cl=7-cl)
        shr     al,cl                   ; return color value
        ret


;------------------------------------------------------------------------
;       << CalcTextBlock >>
; FUNCTION = parm. calculation for block move/copy
; INPUT    : BX = Target
;          : CX = UL
;          : DX = LR
;          : BP = Move/Copy : Attr
; OUTPUT  : SI = Source position
;           DI = Target position
;           DL = Window weidth  ( X )
;           DH = Window height  ( Y )
;           BP = Screen width - Window width ( X' )
;           BH:BL = Move/Copy : Attr
; PROTECT : none
; CalcBlockText(BX,CX,DX/-)
;
;       -------------------------------------------
;                         X                  X'      
;       --------><------------------><
;                                                  
;                (CH,CL)              (CH,DL)        
;          ----  --------------------              
;                                                 
;                                                 
;         y           (BH,BL)              (BH,DL-CL+BL)
;                         -------------------   
;                                               
;                                               
;          ----  ------------------             
;               (DH,CL)             (DH,DL)        
;                                                  
;                                                  
;                           --------------------   
;                   (DH-CH+BH,BL)               (DH-CH+BH,DL-CL-BL)
;                                                    
;       ---------------------------------------------
;
;   CASE1(Tail to Left)         BH >  CH
;                               BL >= CL
;       STD
;       Y (BlkHeight)   = DH - CH
;       X'(NextLine)    = - (80 - X)
;       X (BlkWidth)    = DL - CL
;       SI = DH * 80 * 2 + DL
;       DI = (DH - CH + BH) * 80 * 2 + (DL - CL + BL)
;
;   CASE2(Left to Head)        BH =< CH
;                              BL >  CL
;       STD
;       Y (BlkHeight)   = DH - CH
;       X'(NextLine)    = 80 + X
;       X (BlkWidth)    = DL - CL
;       SI = CH * 80 * 2 + DL
;       DI = BH * 80 * 2 + (DL - CL + BL)
;
;   CASE3(Head to Right)       BH <  CH
;                              BL =< CL
;       CLD
;       Y (BlkHeight)   = DH - CH
;       X'(NextLine)    = 80 - X
;       X (BlkWidth)    = DL - CL
;       SI = CH * 80 * 2 + CL
;       DI = BH * 80 * 2 + BL
;
;   CASE4(Left to Tail)        BH >= CH
;                              BL <  CL
;       CLD
;       Y (BlkHeight)   = DH - CH
;       X'(NextLine)    = - (80 + X)
;       X (BlkWidth)    = DL - CL
;       SI = DH * 80 * 2 + CL
;       DI = (DH - CH + BH) * 80 * 2 + BL
;

CalcTextBlock:
        sub     dl,cl
        jnc     @f
        neg     dl
@@:
        inc     dl                      ; x
        sub     dh,ch
        jnc     @f
        neg     dh
@@:
        inc     dh                      ; y
        mov     al,80
        mul     bh
        xor     bh,bh
        mov     di,ax
        add     di,bx                   ; DI
        shl     di,1
        mov     al,80
        mul     ch
        xor     ch,ch
        mov     si,ax
        add     si,cx                   ; SI
        shl     si,1
        mov     bx,80
        sub     bl,dl
        shl     bx,1
        xchg    bx,bp
        or      bh,bh
        js      @f                      ; jump if MSB = 1
        neg     bp
@@:
        add     bp,[BlockAdj]
        ret


;------------------------------------------------------------------------
;       << BlockText >>
; FUNCTION = text buffer block move Move/Copy
; INPUT   : SI = Source position
;           DI = Target position
;           DL = Window weidth  ( X )
;           DH = Window height  ( Y )
;           BP = Screen width - Window width ( X' )
;           BH:BL = Move/Copy : Attr
; OUTPUT  : none
; PROTECT : DS,SI,DI,DX,BX,BP
; BlockText(segment:offset/-)

BlockText:
        @push   si,di,dx
        add     di,ax
        add     si,ax
        mov     ax,ds
        mov     es,ax
        xor     ch,ch
        test    bh,1
        jnz     @f
        mov     ch,bl
        mov     cl,20h
@@:
        test    bh,1
        jz      BlockTextMove
        mov     cl,dl
        rep movsw
        jmp     short BlockTextEnd
BlockTextMove:
        push    dx
BlockTextMoveLp:
        mov     ax,[si]
        stosw
        xchg    si,di
        mov     ax,cx
        stosw
        xchg    si,di
        dec     dl
        jnz     BlockTextMoveLp
        pop     dx
BlockTextEnd:
        add     di,bp                   ; BP = x'
        add     si,bp                   ; BP = x'
        dec     dh                      ; DH = y
        jnz     @b
        mov     ax,cs
        mov     ds,ax
        @pop    dx,di,si
        ret


;------------------------------------------------------------------------
;       << MgaGrpBlock >>
; FUNCTION = graphic buffer block move/copy
; INPUT   : DI = Target ( BX )
;           SI = Source ( CX )
;           DL = Window weidth  ( X )
;           DH = Window height  ( Y )
;           BP = Screen width - Window width ( X' )
;           BH:BL = Move/Copy : Attr
; OUTPUT  : none
; PROTECT : none
; MgaGrpBlock(bx,dx,bp/-)

MgaGrpBlock:
        @pop    bx,di
        mov     ax,di
        mov     al,ah
        mov     ah,80
        mul     ah
        shl     ax,1
        shl     ax,1
        and     di,0ffh
        add     di,ax
        pop     si
        mov     ax,si
        mov     al,ah
        mov     ah,80
        mul     ah
        shl     ax,1
        shl     ax,1
        and     si,0ffh
        add     si,ax                   ; DI
        sub     bp,[BlockAdj]
        sar     [BlockAdj],1
        neg     [BlockAdj]
        sar     bp,1                    ; make byte length
        add     bp,2000h-80
        add     [BlockAdj],8000h-80
        or      bh,bh
        js      @f                      ; jump if MSB = 1
        add     bp,80*2
        add     [BlockAdj],80*2
@@:
        test    bh,40h
        jnz     @f
        add     di,(4-1)*80
        add     si,(4-1)*80
@@:
        les     ax,[GrpBufAddr]
        mov     ax,es
        mov     ds,ax
        xchg    bl,bh
        push    bx
        and     bh,01110111B
        mov     ax,-1
        cmp     bh,70h
        jz      @f
        inc     al
        cmp     bh,1
        jz      @f
        inc     ah
@@:
        pop     bx
        xchg    ax,bx
        mov     ah,al
        test    ah,1
        jz      @f
        xor     ch,ch
@@:
        call    BlockMono4Line
        call    BlockMono4Line
        call    BlockMono4Line
        call    BlockLine
        add     di,bp                   ; BX = x'
        add     si,bp                   ; BX = x'
        call    BlockLine
        add     di,bp
        add     si,bp
        call    BlockLine
        add     di,bp
        add     si,bp
        xchg    bl,bh
        call    BlockLine
        xchg    bl,bh
        add     di,bp
        add     si,bp
        sub     di,cs:[BlockAdj]
        sub     si,cs:[BlockAdj]
        dec     dh                      ; AX = y
        jnz     @b
        mov     ax,cs
        mov     ds,ax
        ret
;-------------------------------
BlockMono4Line:
        call    BlockLine
        add     di,bp
        add     si,bp
        call    BlockLine
        add     di,bp
        add     si,bp
        call    BlockLine
        add     di,bp
        add     si,bp
        call    BlockLine
        add     di,bp
        add     si,bp
        sub     di,cs:[BlockAdj]
        sub     si,cs:[BlockAdj]
        ret
;-------------------------------
BlockLine:
        test    ah,1
        jz      BlockGrpMove
        mov     cl,dl
        rep movsb
        ret
BlockGrpMove:
        push    dx
@@:
        mov     al,[si]
        stosb
        xchg    si,di
        mov     al,bl
        stosb
        xchg    si,di
        dec     dl
        jnz     @b
        pop     dx
        ret


;------------------------------------------------------------------------
;   << FullScrollText >>
; FUNCTION = text buffer full scroll
; INPUT   : ES:DI = text buffer, BL = attribute
; OUTPUT  : none
; PROTECT : BH
;
; FullScrollText(ES,DI/BL)
;
FullScrollText:
        mov     dx,ds
        mov     ax,es
        mov     ds,ax
        mov     si,di
        mov     ax,80*2
        add     si,ax
        shr     al,1
        mov     ah,byte ptr cs:[MaxRows]
        dec     ah
        mul     ah
        mov     cx,ax
        rep movsw
        mov     bl,[di+1]
        mov     ah,bl
        mov     al,' '
        mov     cl,80*2/2
        rep stosw
        mov     ds,dx
        ret

;------------------------------------------------------------------------
;       << FullScrollMono >>
; FUNCTION = mono buffer full scroll
; INPUT   : ES:DI = graphics buffer, BL = attribute
; OUTPUT  : none
; PROTECT : none
;
; FullScrollMono(ES,DI,BL/-)
;
FullScrollMono:
        mov     ax,es
        mov     ds,ax
        mov     si,di
        add     si,80*16/4
        mov     dx,2000h-80
        mov     cx,24*16/4
@@:
        push    cx
        mov     cl,80/2
        rep     movsw
        add     di,dx
        add     si,dx
        mov     cl,80/2
        rep     movsw
        add     di,dx
        add     si,dx
        mov     cl,80/2
        rep     movsw
        add     di,dx
        add     si,dx
        mov     cl,80/2
        rep     movsw
        sub     di,6000h
        sub     si,6000h
        pop     cx
        loop    @b
        mov     ax,-1
        and     bl,01110111b
        cmp     bl,70
        jz      @f
        xor     al,al
        and     bl,00000111b
        cmp     bl,1
        jz      @f
        xor     ah,ah
@@:
        mov     bx,2000h-80
        mov     cl,4
@@:
        push    cx
        mov     cl,80
        rep     stosb
        add     di,bx
        mov     cl,80
        rep     stosb
        add     di,bx
        mov     cl,80
        rep     stosb
        add     di,bx
        mov     cl,80
        rep     stosb
        sub     di,6000h
        pop     cx
        loop    @b
        ret


;=======================================================================
public  VideoParms, Cga40h, Mda70h, Cga23h, Mda07h, CrtcSet, RegSize
VideoParms      label   byte
        db      38H,28H,2dH,0aH,1fH,06H,19H,1cH,02H,07H,06H,07H,0,0,0,0
Cga23H  db      71H,50H,5aH,0aH,1fH,06H,19H,1cH,02H,07H,06H,07H,0,0,0,0
        db      38H,28H,2dH,0aH,7fH,06H,64H,70H,02H,01H,06H,07H,0,0,0,0
Mda07H  db      61H,50H,52H,0fH,19H,06H,19H,19H,02H,0fH,0bH,0cH,0,0,0,0
RegSize dw      2048,   4096,   16384,  4096
NoCols  db      40, 40, 80, 80, 40, 40, 80, 80
CrtcSet db      2cH,28H,2dH,29H,2aH,2eH,1eH,29H
Cga40H  db      38H,28H,2dH,0aH,7fH,06H,64H,70H,02H,01H,2eH,0fH,0,0,0,0
Mda70H  db      33H,28H,2aH,07H,68H,02H,64H,65H,02H,03H,2eH,0fH,0,0,0,0
        dw      0,  0,  32768,  32768
        db      0, 0, 80, 80, 0, 0, 80, 80
CrtcSetGrp db   0, 0, 1EH, 1EH, 0, 0, 1EH, 0AH


;========================================================================;
;                                                                        ;
;                    REAL TIME INTERRUPT 08H                             ;
;                                                                        ;
;========================================================================;
; FUNCTION =  text emulation & cursor display
; INPUT   : none
; OUTPUT  : none (cursor on/off)
; PROTECT :
; Int8()
;       +CS:[TextEmuTick]
;       /* call [OldRtcInt] */
;       if (CS:[VideoActive] == 0)
;               {
;               save AX,DS,ES;
;               DS = CS;
;               ES = 0;
;               +[VideoActive];
;               TextEmu(-/-);
;               AL = ES:[rTimerLow];
;               if (AL == 4, && [CursorStat] == CursorOn), ToggleCursor(-/-);
;               -[VideoActive]
;               restore AX,DS,ES;
;               }
;       iret;

PUBLIC  Int8
Int8:
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0fh
        and     ax,0fff0h
        add     bx,1
        and     bx,0fh
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
if      WINNT
        cmp     cs:[ActiveCodePage], WanSungCP  ; If ACP is US, don't call Text Emulation
        jz      @f                              ; For NT 5.0
        inc     cs:[TimerTick]
        pushf
        call    cs:[OldRtcInt]
        jmp     short RealTimeIntBye
@@:
endif
        inc     cs:[TimerTick]
        pushf
        call    cs:[OldRtcInt]
        cmp     cs:[VideoActive],0
        jz      @f
        jmp     short RealTimeIntBye
@@:
        @push   ax,es,ds
        mov     ax,cs
        mov     ds,ax
        xor     ax,ax
        mov     es,ax
        inc     [VideoActive]
        mov     al,byte ptr es:[rTimerLow]
        and     al,2
        or      al,[CursorStat]
        test    al,(2 or CursorOn)
        jpo     @f
        call    ToggleCursor
@@:
        cmp     [TimerTick],3
        jb      @f
        pushf
        sti
        call    TextEmu
        popf
        mov     [TimerTick],0
@@:
        @pop    ds,es,ax
        dec     cs:[VideoActive]
RealTimeIntBye:
if      Debug
        pushf
        cli
        push    ax
        push    bx
        mov     ax,cs:[DebugData]
        mov     bx,ax
        and     bx,0fh
        and     ax,0fff0h
        sub     bx,1
        and     bx,0fh
        or      ax,bx
        out     10h,ax
        mov     cs:[DebugData],ax
        pop     bx
        pop     ax
        popf
endif   ; if Debug
        iret

                dw      512 dup(0)
BiosStack       dw      0
StackSs         dw      0
StackSp         dw      0


;------------------------------------------------------------------------
;       << TextEmu >>
; TextEmu(-/-)
;       {
;       if (TextEmulation)
;               {
;               /* save all register */
;               /* compare code buffer */
;               if defferent value, TextEmuChar(AX,ES,DI,BP/-);
;               /* restore all register */
;               }
;       }

TextEmu:
        test    [ModeStat],TextEmulation
        jz      NotScan
        cmp     [VideoActive],1
        jbe     GotoScan
NotScan:
        ret

GotoScan:
        cli
        push    ax
        mov     cs:[StackSs],ss
        mov     cs:[StackSp],sp
        mov     ax,cs
        mov     ss,ax
        mov     sp,offset BiosStack
        sti
        @push   bx,cx,dx,si,di,es,ds,bp
        pushf
        cld
        inc     [VideoActive]
        mov     bl,80
        mov     cx,[rCrtStart]
        les     di,[CodeBuf2Addr]
        lds     si,[CodeBuf1Addr]
        shr     cx,1
        shr     cx,1
        shr     cx,1
        shr     cx,1
        mov     dx,ds
        add     cx,dx
        mov     ds,cx
        xor     ch,ch
        mov     cl,25
ScanScreenLoop:
        mov     ax,[si]
        call    CheckCodeRange1st
        jnc     ScanCheckHan
ScanEngCode:
        cmpsw
        jz      ScanScreenEnd
        mov     bp,0
        call    TextEmuChar
        jmp     ScanScreenEnd
ScanCheckHan:
        cmp     bl,1
        jbe     ScanEngCode
        mov     dx,[si+2]
        mov     ah,al
        mov     al,dl
        call    CheckCodeRangeWord
        jc      ScanEngCode
        cmpsw
        jnz     WriteCharTe
        cmp     dx,es:[di]
        jnz     WriteCharTe
        cmpsw
        dec     bl
        jmp     ScanScreenEnd
WriteCharTe:
        mov     bp,1
        call    TextEmuChar
        cmpsw
        dec     bl
ScanScreenEnd:
        dec     bl
        jnz     ScanScreenLoop
        mov     bl,80
        loop    ScanScreenLoop
ScanExit:
        dec     cs:[VideoActive]
        popf
        @pop    bp,ds,es,di,si,dx,cx,bx
        cli
        mov     ss,cs:[StackSs]
        mov     sp,cs:[StackSp]
        sti
        pop     ax
        ret

;------------------------------------------------------------------------
;       << TextEmuChar >>
;
;TextEmuChar(AX,ES,DI,BP/-)
;       {
;       if (english char)
;               GetPatternEng(ES,DI/carry)
;               {
;               if (VGA card)
;                       DispEngColor(BL,DS,SI,ES,DI/-);
;               else
;                       DispEngMono(BL,DS,SI,ES,DI/-);
;               }
;       else
;               GetPattern(ES,DI/carry)
;               {
;               if (VGA card)
;                       DispHanColor(BL,DS,SI,ES,DI/-);
;               else
;                       DispHanMono(BL,DS,SI,ES,DI/-);
;               }
;       }
PUBLIC  TextEmuChar

TextEmuChar:
        @push   bx,cx,si,di,es,ds
        dec     si
        dec     si
        mov     ax,si
        shr     ax,1
        mov     dl,80
        div     dl
        test    cs:[Card1st],00001100b
        jnz     @f
        call    MonoVideoOffset
        jmp     PuttoEsDi
@@:
        call    ColorVideoOffset
PuttoEsDi:
        mov     cx,[si+2]
        mov     si,[si]
        mov     bx,seg Data
        mov     ds,bx
        mov     bl,ds:[rCurPage]
        shl     bx,1
        cmp     dx,ds:[bx+rCurPos]
        jne     @f
        and     cs:[CursorStat],not CursorOn
@@:
        mov     bx,si
        cmp     bp,0
        jz      EngTextEmuChar
        cmp     dl,80-1
        jb      HanTextEmuChar
EngTextEmuChar:
        xor     cx,cx
        mov     cl,bl
        mov     es:[di-2],bx
        mov     bl,bh
        mov     si,cs
        mov     es,si
        mov     di,offset PatternBuf
        call    GetPatternEng
        mov     si,es
        mov     ds,si
        mov     si,di
        les     di,cs:[GrpBufAddr]
        add     ax,di
        test    cs:[Card1st],00001100b
        jnz     @f
        call    DispEngMono
        jmp     TextEmuCharRet
@@:
        call    DispEngColor
        jmp     TextEmuCharRet
HanTextEmuChar:
        mov     es:[di-2],bx
        mov     es:[di],cx
        xchg    ch,bl
        mov     si,cs
        mov     es,si
        mov     di,offset PatternBuf
        call    GetPattern
        mov     si,es
        mov     ds,si
        mov     si,di
        les     di,cs:[GrpBufAddr]
        add     ax,di
        test    cs:[Card1st],00001100b
        jnz     @f
        call    DispHanMono
        jmp     TextEmuCharRet
@@:
        call    DispHanColor
TextEmuCharRet:
        @pop    ds,es,di,si,cx,bx
        ret

MonoVideoOffset:
        mov     cx,si
        xchg    ah,al
        mov     dx,ax
        sub     ah,ah
        sub     cx,ax
        sub     cx,ax
        shl     cx,1
        add     ax,cx
        ret

ColorVideoOffset:
        mov     dx,ax
        xchg    dl,dh
        xor     ah,ah
        mov     cl,4
        shl     ax,cl
        mov     bx,80
        mov     cx,dx
        mul     bx
        mov     dx,cx
        add     al,dl
        adc     ah,0
        ret

if      hdos60
public  ChangeCodeR
ChangeCodeR:
        @push   bx,cx,dx,si,di,es,ds,ax
        mov     bx,cs
        mov     ds,bx
        mov     es,bx
        mov     bl,[CodeStat]
        mov     [OldCodeStat],bl
        and     [CodeStat],not (HangeulMode or Chab or WSung or WSung7)
        cmp     al,2            ;al=2 english
        jz      @f              ;al=1 chohab
        shl     al,1            ;al=0 wansung
        or      al,HangeulMode
        or      [CodeStat],al
@@:
        mov     al, 0ffh                  ; [CHM001]
        cmp     [BilingCall], al          ; [CHM001]
        jz      GoDirectSet               ; [CHM001]
        mov     al,[CodeStat]
        cmp     [OldCodeStat],al
        jz      @f
GoDirectSet:
        mov     ah, 0                     ; [CHM001]
        mov     [BilingCall], ah          ; [CHM001]
        or      [KbMisc],RunningHot
        or      [KbStat],ReqEnvrChg
        inc     [VideoActive]
        mov     ah,0fh
        int     10h
        call    ChgEnvrDo
        dec     [VideoActive]
        and     [KbStat],not ReqEnvrChg
        and     [KbMisc],not RunningHot
@@:
        @pop    ax,ds,es,di,si,dx,cx,bx
ChangeCodeRoutineRet:
        ret
endif   ;hdos60


if      Hwin31Sw
;========================================================================;
;                                                                        ;
;                    DOS INTERRUPT 2FH, 88H                              ;
;                                                                        ;
;========================================================================;
; FUNCTION =  Code stat conversion program
; INPUT   : AH=88H
;           AL=0:ϼ
;              1:
;              2:
; OUTPUT  : none (cursor on/off)
; PROTECT : none
;------------------------------------------------------------------------
public  int2f
SIS             Db      3, 10
SISnext         dd      ?
                dd      0
                dd      0
                dw      offset  IDP
IDPseg          dw      0

IDP             dw      offset StartInst
Iseg            dw      0
                dw      SizeInst
                dd      0
                dw      0

hWin31Flag      db      0
VxdAddr         dd      0

;hWin31Flag
ValidVxd        =       00000001b
FullDosMode     =       00000010b
OnMemReq        =       00000100b

;------------------------------------------------------------------------
WinModeSet:
        test    [hWin31Flag],ValidVxd
        jz      WinOrg
        test    [CodeStat],HangeulMode
        jz      WinMemRel
        mov     bl,al
        and     bl,01111111b
        test    [hWin31Flag],FullDosMode
        jz      WinBox
        call    CmpModeVal
        jz      WinMemAlloc
WinMemRel:
        call    WinMem2
WinOrg:
        call    ModeSet2
WinModeSetRet:
        ret
WinMemAlloc:
        test    [CodeStat],Chab or Wsung7
        jnz     @f
        test    [Card1st],HanCard
        jnz     WinMemRel
        test    [Card1st],DualMnt
        jnz     WinMemRel
@@:
        call    WinMem1
        call    ModeSet2
        call    Set64k
        ret
WinBox:
        cmp     bl,60h
        jz      WinMode60
        cmp     bl,40h
        jz      WinModeSetRet
        cmp     bl,70h
        jz      WinModeSetRet
        test    [CodeStat],Chab or Wsung7
        jnz     @f
        test    [Card1st],HanCard
        jnz     WinMemRel
        test    [Card1st],DualMnt
        jnz     WinMemRel
@@:
        push    word ptr [CodeStat]
        and     [CodeStat],not HangeulMode
        call    WinMem2
        call    ModeSet2
        pop     ax
        mov     [CodeStat],al
        or      [KbStat],HanKeyinMode
        and     [CodeStat],not HangeulVideoMode
        CALL    callKBSE
        ret
WinMode60:
        call    WinMem2
        and     al,10000000b
        or      al,12h
        call    ModeSet2
        push    es
        xor     ax,ax
        mov     es,ax
        mov     es:[rCrtMode],60h
        mov     es:[rRows],25-1
        mov     [MaxRows],25
        mov     [HjMenuLine],24
        pop     es
        ret

callKBSE:
        mov     ah,[OrgHjStat]
        or      [HjStat],ah
        and     [KbStat],not (HEStat or JJStat)
        mov     [HanStat],0
        mov     [HjMenuStat],0
        mov     [HjMenuLine],24
        RET

;------------------------------------------------------------------------
Int2f:
        pushf
if      WINNT
        cmp     ah,0aeh               ; For NT 5.0
        jnz     Int2fh16xx

        push    ax
        push    bx

        mov     ax, 4f01h
        xor     bx, bx
        int     2fh                   ;Check active code page

        mov     cs:[ActiveCodePage],bx
        cmp     cs:[ActiveCodePage], WanSungCP
        jz      @f
        and     cs:[KbStat],not HanKeyinMode
        pop     bx
        pop     ax
        jmp     Int2fh16xx
@@:
        or      cs:[KbStat],HanKeyinMode
        pop     bx
        pop     ax
Int2fh16xx:
endif

        cmp     ah,16h
        jz      @f
        popf
        jmp     cs:[OldInt2f]
@@:
        call    cs:[OldInt2f]
        cmp     ax,1605h
        jnz     Int2fh1606
        test    dx,1
        jnz     @f
        mov     cs:[IDPSeg],cs
        mov     cs:[Iseg],cs
        mov     word ptr cs:[SISNext],bx
        mov     word ptr cs:[SISNext+2],es
        mov     bx,offset SIS
        push    cs
        pop     es
@@:
        iret
Int2fh1606:
        cmp     ax,1606h
        jnz     @f
        mov     cs:[hWin31Flag],0
        iret
@@:
        cmp     ax,1608h
        jnz     @f
        call    Int2fh1608
        iret
@@:
        iret

Int2fh1608:
        @push   ax,bx,di,es
        xor     di,di
        mov     es,di
        mov     ax,1684h
if WINNT
        mov     bx,0065h   ; From Win97 mshbios.com
else
        mov     bx,0028h
endif
        int     2fh
        mov     word ptr cs:[VxdAddr],di
        mov     word ptr cs:[VxdAddr+2],es
        mov     ax,es
        or      ax,di
        jz      @f
        mov     ax,cs
        mov     es,ax
        lea     bx,cs:[Win31Proc]
        xor     ax,ax
        call    cs:[VxdAddr]
        cmp     ax,0100h
        jb      @f
        or      cs:[hWin31Flag],ValidVxd
@@:
        @pop    es,di,bx,ax
        ret

;------------------------------------------------------------------------
Win31Proc:
        @push   ax,bx,cx,dx,si,di,bp,ds,es
        pushf
        mov     ax,cs
        mov     ds,ax
        mov     es,ax
        cmp     dx,0
        jnz     extTESet
TextmodeSet:
        and     [hWin31Flag],not FullDosMode
        jmp     @f
GrpSet:
        or      al,080h
        int     10h
        jmp     Win31ProcRet
extTESet:
        cmp     dx,1
        jnz     CmpDx2
        or      [hWin31Flag],FullDosMode
@@:
        mov     ah,0fh
        int     10h                     ; get page #
        mov     bl,al
        and     bl,01111111b
        call    CmpModeVal
        jnz     GrpSet
        push    ax
        or      [KbMisc],RunningHot
        or      [KbStat],ReqEnvrChg
        inc     [VideoActive]
        call    SaveCodeBuffer
        pop     ax
        mov     ah,00h
        int     10h
        call    RestoreCodeBuffer
        dec     [VideoActive]
        and     [KbStat],not ReqEnvrChg
        and     [KbMisc],not RunningHot
        jmp     Win31ProcRet
CmpDx2:
        cmp     dx,2
        jnz     @f
        or      [hWin31Flag],FullDosMode
        jmp     Win31ProcRet
@@:
        cmp     dx,3
        jnz     Win31ProcRet
        and     [hWin31Flag],not FullDosMode
        jmp     Win31ProcRet
Win31ProcRet:
        popf
        @pop    es,ds,bp,di,si,dx,cx,bx,ax
        retf

Set64k:
        @push   ax,dx
        test    [Card1st],00001100b
        jz      @f
        mov     dx,03ceh
        mov     al,06h
        out     dx,al
        inc     dx
        in      al,dx
        test    al,00001100b
        jnz     @f
        or      al,00000100b
        out     dx,al
@@:
        @pop    dx,ax
        ret
WinMem1:
        push    ax
        mov     ax,0001
        call    [VxdAddr]
        or      [hWin31Flag],OnMemReq
        pop     ax
@@:
        ret
WinMem2:
        test    [hWin31Flag],OnMemReq
        jz      @f
        push    ax
        mov     ax,0002
        call    [VxdAddr]
        and     [hWin31Flag],not OnMemReq
        pop     ax
@@:
        ret

CmpModeVal:
        cmp     bl,2
        jz      @f
        cmp     bl,3
        jz      @f
        cmp     bl,7
@@:
        ret
;=======================================================================
endif   ;   Hwin31Sw

public  EngFont, VgaService, ChgCode, VideoEnd, HotKeySrv  ; for .MAP file

HotKeySrv:
INCLUDE DUAL.INC

EngFont         label   byte
;INCLUDE ENG.PAT
        INCLUDE ascii.inc

VgaService:
INCLUDE VGA.INC

ChgCode:
INCLUDE CHAB.INC

VideoEnd        label   byte

CODE    ENDS
        END

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\sources.inc ===
TARGETNAME=
TARGETTYPE=NOTARGET
TARGETPATH=
SOURCES=

NTTARGETFILE1=buildall

SOURCES_USED=..\sources.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\br\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\himem.inc ===
;/* himem.inc
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


;*----------------------------------------------------------------------*
;*	EQUATES								*
;*----------------------------------------------------------------------*

; Build options

NUM_A20_RETRIES =	3		; # times to retry A20 diddles

; Debugging options

debug_vers	=	00000h
tdump		=	00000h		; display the handle table on each call
keep_cs 	=	00000h		; keep track of allocator's cs:

XMSVersion	equ	0200h
HimemVersion	equ	0200h+77h
DATE_String	equ	'02/27/91'

INT2F_ID	equ	043h		; XMS Int 2Fh multiplex ID
INT2F_INS_CHK	equ	000h		;     driver installation check
INT2F_CTL_FUN	equ	010h		;     get control function address
INT2F_EXT_A20	equ	030h		;     get external A20 hander info

ifndef DBCS
HISEG_ORG		equ	0A000h		; ORG for the seg to be moved
						;  into HMA
else
ifndef NEC_98
HISEG_ORG		equ	0A000h+01000h	; adjust for DBCS System
else
HISEG_ORG		equ	0A000h+02000h	; adjust for NEC_98 System
endif
endif

multMULT		equ	4ah
multMULTGETHMAPTR	equ	1
multMULTALLOCHMA	equ	2

DEFHANDLES		equ	32		; Default # of EMB handles
MAXHANDLES		equ	128		; Max # of EMB handles

FREEFLAG		equ	00000001b	; EMB Flags
USEDFLAG		equ	00000010b
UNUSEDFLAG		equ	00000100b

;*----------------------------------------------------------------------*
;*	XMS Error Codes							*
;*----------------------------------------------------------------------*

ERR_NOTIMPLEMENTED	equ	080h
ERR_VDISKFOUND		equ	081h
ERR_A20			equ	082h
ERR_GENERAL		equ	08Eh
ERR_UNRECOVERABLE	equ	08Fh

ERR_HMANOTEXIST		equ	090h
ERR_HMAINUSE		equ	091h
ERR_HMAMINSIZE		equ	092h
ERR_HMANOTALLOCED	equ	093h

ERR_OUTOMEMORY		equ	0A0h
ERR_OUTOHANDLES		equ	0A1h
ERR_INVALIDHANDLE	equ	0A2h
ERR_SHINVALID		equ	0A3h
ERR_SOINVALID		equ	0A4h
ERR_DHINVALID		equ	0A5h
ERR_DOINVALID		equ	0A6h
ERR_LENINVALID		equ	0A7h
ERR_OVERLAP		equ	0A8h
ERR_PARITY		equ	0A9h
ERR_EMBUNLOCKED		equ	0AAh
ERR_EMBLOCKED		equ	0ABh
ERR_LOCKOVERFLOW	equ	0ACh
ERR_LOCKFAIL		equ	0ADh

ERR_UMBSIZETOOBIG	equ	0B0h
ERR_NOUMBS		equ	0B1h
ERR_INVALIDUMB		equ	0B2h


; Macro to avoid the 286 POPF bug.  Performs a harmless IRET to simulate a
;   popf.  Some 286s allow interrupts to sneak in during a real popf.

popff	macro
	push    cs
	call    pPPFIRet	; Defined as the offset of any IRET
	endm

.286

;*----------------------------------------------------------------------*
;*	SEGMENT DEFINITION						*
;*----------------------------------------------------------------------*

_text	segment word public 'code'
	assume	cs:_text,ds:_text

;************************************************************************
;*									*
;*  Data Structures							*
;*									*
;************************************************************************

; The driver Request Header structure definition.
ReqHdr struc
    ReqLen	db	?
    Unit	db	?
    Command	db	?
    Status	dw	?
    Reserved	db	8 dup (?)
    Units	db	?
    Address	dd	?
    pCmdLine	dd	?
ReqHdr ends

; An EMB Handle structure definition.
Handle struc			; Handle Table Entry
    zzFlags	db	?	; Unused/InUse/Free
    zzcLock	db	?	; Lock count
    zzBase	dw	?	; 32-bit base address in K
    zzLen	dw	?	; 32-bit length in K
	if	keep_cs
    zzAcs	dw	?	; allocator's code segment
	endif
Handle ends

;	allow easy generation of appropriate segment overrides

xFlags		equ	funky:zzFlags
xcLock		equ	funky:zzcLock
xBase		equ	funky:zzBase
xLen		equ	funky:zzLen
	if	keep_cs
xAcs		equ	funky:zzAcs
	endif
Flags		equ	funky:zzFlags
cLock		equ	funky:zzcLock
Base		equ	funky:zzBase
Len		equ	funky:zzLen
	if	keep_cs
Acs		equ	funky:zzAcs
	endif

; Extended Memory Move Block structure definition.
MoveExtendedStruc struc
    bCount	dd	?	; Length of block to move
    SourceHandle    dw	?	; Handle for souce
    SourceOffset    dd	?	; Offset into source
    DestHandle	dw	?	; Handle for destination
    DestOffset	dd	?	; Offset into destination
MoveExtendedStruc ends

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\himem.asm ===
;/* himem.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; *
; * williamh 25-Sept-1992 Added RequestUMB and ReleaseUMB
; */


	page	95,160
	title   'HIMEM.SYS - Microsoft XMS Device Driver'
;*****************************************************************************
;*									     *
;*  HIMEM.ASM -								     *
;*									     *
;*	Extended Memory Specification Driver -				     *
;*									     *
;*****************************************************************************
;
;	himem.inc	- global equates, macros, structures, opening segment
;	himem.asm	- main driver entry, interrupt hooks, a20/HMA functions
;	himem1.asm	- a20 switching code
;	himem2.asm	- driver initialization
;	himem3.asm	- messages for driver initialization
;	himem4.asm	- extended memory allocation functions
;	himem5.asm	- memory move function
;
;	for revision history prior to 1990, see version 2.37 or earlier
;
;	2.35	- Removed a few push/pops from IsA20On, misc	01/14/90
;		  source code reformatting
;	2.36	- Include Int 6Dh vector in shadow RAM disable	01/18/90
;		  check, also allow disable if video Ints already
;		  point at C000h segment.  Also added some CLD's near
;		  string instructions.
;	2.37	- Removed 2.33 'fix' for All Chargecard.  They	01/23/89
;		  now do Global and Local enables to turn on A20, and
;		  the previous 'fix' caused us to never didle A20 again
;		  after running Windows real mode twice (Windows does
;		  Global enables/disables too).  Also, GetParms needed to
;		  check for LF in addition to CR for end of line.
;;
;;; Following changes synced from \402\dev\himem tree
;;
;	2.50	- Revised version # for Windows 3.0 release.	02/05/90
;	 ""	- Ignore 'super'-extended memory on EISA memory 02/08/90
;		  memory boards (mem > 16 meg).  Software that
;		  uses 24 bit (80286) descriptors doesn't do
;		  well with memory @ 16 meg.
;	 ""	- Himem will now try to control A20 by default, 02/12/90
;		  even if A20 is already enabled when himem is
;		  loaded.  Added /A20CONTROL: ON | OFF switch to
;		  override this if necessary (ON is default and
;		  means we take control, OFF means we take control
;		  unless A20 was already on, in which case we
;		  don't mess with it).
;
;	2.60	- Added special A20 routine for Toshiba 1600	02/22/90
;		  laptop, and revised driver version number to
;		  be later than Compaq's (2.50) so Windows
;		  setup will install ours.
;	 ""	- Clear bit 15 in device attributes word of	02/28/90
;		  device header if driver is being flushed. The
;		  MS-DOS Encylopedia says to do this, and a
;		  system with DOS 3.21 was hanging when loading
;		  the driver after himem if himem flushed itself.
;	 ""	- Added special A20 handler for Wyse 12.5 MHz	03/27/90
;		  286 machine. Almost the same as AT, but
;		  a little different.
;	 ""	- Now displays a msg indicating which A20	04/05/90
;		  handler is installed, and allows numbers for the
;		  /MACHINE: parameter.
;;
;;; End of \402\dev\himem changes
;;
;
;	 ""	- Added /INT15=xxxx option to reserve xxxxK of	04/13/90
;		  extended memory for INT 15. Himem will reserve xxxx K
;		  (64 K of HMA inclusive) for apps which use Ext Mem thru
;		  int 15 interface. The HMA portion of the INT 15 ext memory
;		  should be protected by a VDISK header. Apps which
;		  do not recognize VDISK headers may destroy the HMA.
;
;	 ""	- When there is a /INT15=xxxx option on the	04/20/90
;		  command line, the HMA is made unavailable to the
;		  apps. But DOS 5.0 goes ahead and checks for INT 15
;		  memory if the alloc HMA call fails. And if INT 15 memory
;		  is present it uses the first 64 K for loading itself
;		  high (simulated HMA)
;
;	 ""	- ORGed the movable segment to high value for flexibility
;		  in loading into HMA. Added code to be flexible enough to
;		  run from HMA as well as low memory.

	public	Interrupt
	public	dd_int_loc
	public	fHMAExists
	public	PrevInt15
	public	fA20Check
	public	OldStackSeg
	public	pPPFIRET
	public	EnableCount
	public	pReqHdr
	public	MinHMASize
	public	Int2fHandler
	public	fHMAMayExist
	public	MemCorr
	public	PrevInt2f
	public	MoveIt
	public	fCanChangeA20
ifndef NEC_98
	public	IsVDISKIn
	public	fVDISK
endif   ;NEC_98

	public	LocalEnableA20
	public	LocalDisableA20
	public	FLclEnblA20
	public	FLclDsblA20
	public	xLocalEnableA20
	public	xLocalDisableA20
	public	IsA20On
	public	winbug_fix
ifndef NEC_98
	public	ATA20Delay
else    ;NEC_98
	public	fAltA20Routine
endif   ;NEC_98
	public	AddMem

	public	TopOfTextSeg
        public  A20State

        public  Int15Handler

; Define a direct call to the Phoenix Cascade BIOS for A20 handling
;	Note:  if these segments are not defined here, the Int13Handler
;	definition in segment Zero in the 386 memory move will generate
;	bad code.

PTL_Seg	segment at 0f000h
PTL_Seg	ends
BiosSeg SEGMENT  AT 40h		  ; Used to locate 6300 PLUS reset address
BiosSeg ends

	include	himem.inc		; define structures, macros, open seg.
	include xmssvc.inc
        include vint.inc
	extrn	EndText:byte
_text	ends

funky	segment	para public 'funky'
	assume	cs:funky

;	externals from himem4

	extrn	Version:near
	extrn	MoveBlock:near
	extrn	QueryExtMemory:near
	extrn	AllocExtMemory:near
	extrn	FreeExtMemory:near
	extrn	LockExtMemory:near
	extrn	UnlockExtMemory:near
	extrn	GetExtMemoryInfo:near
	extrn	ReallocExtMemory:near
	extrn	RequestUMB:near
	extrn	ReleaseUMB:near
	extrn	cHandles:word
	extrn	KiddValley:word

;	externals from himem5


funky	ends

;
;------ the following segment should be the last in the sys file
;	This segment is read by the stripdd utility to remove
;	the zeroes introduced by the hi ORG in the movable segment

ZZZ	segment para 'ZZZ'
	dw	16			; len of this segment
	dw	offset _text:EndText	; len of text seg in double word
	dw	0
	dw	HISEG_ORG		; number of zeroes to be stripped
	dw	-1
	dw	-1			; terminator
	db	(4) dup (55h)		; filler
ZZZ	ends


_text	segment word public 'code'
	assume	cs:_text

;	externals from himem1

	extrn	A20Handler:near

;	externals from himem2

	extrn	InitInterrupt:near

	public	DevAttr
	public	Int15MemSize
	public	fInHMA

; The Driver Header definition.
Header	dd	-1			; Link to next driver, -1 = end of list
DevAttr	dw	1010000000000000b	; Char device & Output until busy(?)
	dw	Strategy    		; "Stategy" entry point
dd_int_loc	dw	InitInterrupt	; "Interrupt" entry point
		db	'XMSXXXX0'	; Device name


;************************************************************************
;*									*
;*  Global Variables							*
;*									*
;************************************************************************


	if	keep_cs
callers_cs	dw	0
	endif

TopOfTextSeg	dw	0	; size of retained driver
pPPFIRet	dw	PPFIRet ; The offset of an IRET for the POPFF macro
pReqHdr		dd	?	; Pointer to MSDOS Request Header structure
ifndef NEC_98
pInt15Vector	dw	15h*4,0 ; Pointer to the INT 15 Vector
else    ;NEC_98
pInt15Vector	dw	1fh*4,0 ; Pointer to the INT 15 Vector
endif   ;NEC_98
PrevInt15	dd	0	; Original INT 15 Vector
PrevInt2f	dd	0	; Original INT 2f Vector
ifdef NEC_98
pInt220Vector   dw      0dch*4,0; Pointer to the INT 220 Vector
PrevInt220      dd      0       ; Original INT 220 Vector
pInt20Vector    dw      20h*4,0 ; Pointer to the INT 20 Vector
PrevInt20       dd      0       ; Original INT 20 Vector
pInt21Vector    dw      21h*4,0 ; Pointer to the INT 21 Vector
PrevInt21       dd      0       ; Original INT 21 Vector
endif   ;NEC_98
fHMAInUse	db	0	; High Memory Control Flag, != 0 -> In Use
fCanChangeA20	db	1	; A20 Enabled at start? (assume changable)
fHMAMayExist	db	0	; True if the HMA could exist at init time
fHMAExists	db	0	; True if the HMA exists
fInstalled	db	0	; True if ext mem has been allocated
fInHMA		db	0	; true if hiseg is in HMA

fVDISK		db	0	; True if a VDISK device was found

fA20Check	db	0	; True if A20 handler supports On/Off check
ifndef NEC_98
ATA20Delay	db	0	; Type of AT A20 delay in use (0 - NUM_ALT_A20)
else    ;NEC_98
fAltA20Routine	db	0	; True if alternative A20 routine in use
endif   ;NEC_98
EnableCount	dw	0	; A20 Enable/Disable counter
fGlobalEnable	dw	0	; Global A20 Enable/Disable flag
MinHMASize	dw	0	; /HMAMIN= parameter value
Int15MemSize	dw	0	; Memory size reserved for INT 15

MemCorr		dw	0	; KB of memory at FA0000 on AT&T 6300 Plus.
				;      This is used to correct INT 15h,
				;      Function 88h return value.
OldStackSeg	dw	0	; Stack segment save area for 6300 Plus.
				;      Needed during processor reset.

ifndef NEC_98
	if	NUM_A20_RETRIES
A20Retries	db	0	; Count of retires remaining on A20 diddling
	endif
else    ;NEC_98
I2fCheckNH_Tbl	dd	0	; Old Pointer (ES:BX) for Windows ins NEC <91.09.27>
		db	3,0	; version
		db	01h	; type for instance is INT Vector
		db	0	; R.F.U
		dw	offset	_text:PrevInt15 ; offset
I2f_seg 	dw	0	;
		dw	4	;
		dw	1fh	;
		dd	-1	;
endif   ;NEC_98

A20State	db	0	; recored the current A20 state
ifndef NEC_98
	public	lpExtA20Handler

lpExtA20Handler dd	0	; Far entry point to an external A20 handler
endif   ;NEC_98

;*----------------------------------------------------------------------*
;*									*
;*  Strategy -								*
;*									*
;*	Called by MS-DOS when ever the driver is accessed.		*
;*									*
;*  ARGS:   ES:BX = Address of Request Header				*
;*  RETS:   Nothing							*
;*  REGS:   Preserved							*
;*									*
;*----------------------------------------------------------------------*

Strategy    proc    far
	assume	ds:nothing

	; Save the address of the request header.
	mov	word ptr [pReqHdr],bx
	mov	word ptr [pReqHdr][2],es
	ret

Strategy    endp


;*----------------------------------------------------------------------*
;*									*
;*  Interrupt -								*
;*									*
;*	Called by MS-DOS immediately after Strategy routine		*
;*									*
;*  ARGS:   None							*
;*  RETS:   Return code in Request Header's Status field		*
;*  REGS:   Preserved							*
;*									*
;*	This is our permanent entry point.  By this time, the only	*
;*	useful function done by the device driver (initializing us)	*
;*	has been done by a previous call.  There are no more valid	*
;*	uses for this entry point.  All we have to do is decide		*
;*	whether to ignore the call or generate an error.		*
;*									*
;*----------------------------------------------------------------------*

Interrupt   proc    far
	assume	ds:nothing


	push    bx		; save minimal register set
	push    ds

	lds	bx,[pReqHdr]		; ds:bx = Request Header

	cmp	ds:[bx].Command,16	; legal DOS function?  (approx???)
	mov	ds:[bx].Status,100h	; "Done" for healthy calls
	jbe	FuncOk
	or	ds:[bx].Status,8003h	; Return "Unknown Command" error
FuncOk:
	pop	ds
	pop	bx
	ret

Interrupt   endp


;*----------------------------------------------------------------------*
;*									*
;*  Int2fHandler -							*
;*									*
;*	Hooks Function 43h, Subfunction 10h to return the		*
;*	address of the High Memory Manager Control function.		*
;*	Also returns 80h if Function 43h, Subfunction 0h is requested.	*
;*									*
;*  ARGS:   AH = Function, AL = Subfunction				*
;*  RETS:   ES:BX = Address of XMMControl function (if AX=4310h)	*
;*	    AL = 80h (if AX=4300)					*
;*  REGS:   Preserved except for ES:BX (if AX=4310h)			*
;*	    Preserved except for AL    (if AX=4300h)			*
;*									*
;*----------------------------------------------------------------------*

Int2fHandler proc   far
	assume	ds:nothing

        call    DOSTI           ; Flush any queued interrupts

	cmp	ah,43h		; Function 43h?
ifndef NEC_98
	jne     I2fNextInt
else    ;NEC_98
	jne	I2fChk_NH	; check for Windows 3.0 function INS NEC <91.09.27>
endif   ;NEC_98
	or	al,al		; Subfunction 0?
	jne     I2fNextSub	; No, continue

	mov	al,80h		; Return 80h in AL (XMS Installed)
PPFIRet:
        jmp     DOIRET          ; Label sets up the POPFF macro

I2fNextSub:
	cmp	al,10h		; Subfunction 10?
	jne     I2fNextInt	; No, goto next handler

	push    cs		; return XMS entry in es:bx
	pop	es
	mov	bx,offset XMMControl
        jmp     DOIRET

;	Continue down the Int 2f chain.

I2fNextInt:
        call    DOCLI           ; Disable interrupts again
	jmp	[PrevInt2f]

ifdef NEC_98
; check N/H depend data for Windows 3.0 		;INS NEC <91.09.27>

I2fChk_NH:			; check N/H depended data
	cmp	ax,167fh
	jne	I2fNextInt	; No, goto next handler
	cmp	dx,0		; check sub function
	jne	I2fNextInt	; No, goto next handler
	mov	word ptr [I2fCheckNH_Tbl], bx	; offset
	mov	bx,es				;
	mov	word ptr [I2fCheckNH_Tbl+2],bx	; segment
	mov	bx,cs				;
	mov	[I2f_Seg],bx			;
	push	cs				;
	pop	es				;
	mov	bx,offset I2fCheckNH_Tbl	;
	jmp	I2fNextInt	; goto next handler
endif   ;NEC_98

Int2fHandler endp


;*----------------------------------------------------------------------*
;*									*
;*  ControlJumpTable -							*
;*									*
;*	Contains the address for each of the XMS Functions.		*
;*									*
;*	**************** WARNING **********************			*
;*									*
;*	Assumes that offsets of functions in lo mem seg are < 8000h	*
;*	& that offsets of segment in Hiseg are >= 8000h			*
;*									*
;*----------------------------------------------------------------------*

ControlJumpTable label word
	dw	Version				; Function 00h
	dw	RequestHMA			; Function 01h
	dw	ReleaseHMA			; Function 02h
	dw	GlobalEnableA20			; Function 03h
	dw	GlobalDisableA20		; Function 04h
xLocalEnableA20 dw	LocalEnableA20		; Function 05h
xLocalDisableA20 dw	LocalDisableA20		; Function 06h
	dw	IsA20On				; Function 07h
	dw	QueryExtMemory			; Function 08h
	dw	AllocExtMemory			; Function 09h
FreeMem dw	FreeExtMemory			; Function 0Ah
MoveIt	dw	MoveBlock			; Function 0Bh
	dw	LockExtMemory			; Function 0Ch
	dw	UnlockExtMemory			; Function 0Dh
	dw	GetExtMemoryInfo		; Function 0Eh
	dw	ReallocExtMemory		; Function 0Fh
	dw	RequestUMB			; Function 10h
	dw	ReleaseUMB			; Function 11h
NumFns	=	((offset $) - (offset ControlJumpTable))/2


;*----------------------------------------------------------------------*
;*									*
;*  XMMControl -							*
;*									*
;*	Main Entry point for the Extended Memory Manager		*
;*									*
;*  ARGS:   AH = Function, AL = Optional parm				*
;*  RETS:   AX = Function Success Code, BL = Optional Error Code	*
;*  REGS:   AX, BX, DX and ES may not be preserved depending on func.   *
;*									*
;*  INTERNALLY REENTRANT						*
;*									*
;*----------------------------------------------------------------------*


XMMControl  proc   far

	jmp	short XCControlEntry	; For "hookability"
	nop				; NOTE: The jump must be a
	nop				;  short jump to indicate
	nop				;  the end of any hook chain.
					;  The nop's allow a far jump
					;  to be patched in.
XCControlEntry:

if keep_cs	;--------------------------------------------------------
	push	bp
	mov	bp,sp
	mov	bp,4[bp]		; get caller's cs
	mov	callers_cs,bp	;  (debug only)
	pop	bp
endif		;--------------------------------------------------------

	push    cx			; preserve some registers
	push    si
	push    di
	push    ds
	push    es
	pushf
	cld

	push    ds			; save ds in es
	pop	es			; NOTE: ES cannot be used for parms!

	push    cs			; ds=cs
	pop	ds
	assume	ds:_text

	push    ax			; save the function number

if debug_vers
	call	debug_dump
endif

	or	ah,ah			; GetXMSVersion?
	jz	XCCallFunc		; Yes, don't hook INT 15h yet

	cmp	ah,NumFns		; valid function number??
	jb	XCCheckHook
	pop	ax			; No, Un-preserve AX and return an error
	xor	ax,ax
	mov	bl,ERR_NOTIMPLEMENTED
	jmp	short XCExit

XCCheckHook:
	pushf				; Is INT 15h already hooked?
        call   DOCLI                    ; This is a critical section

	cmp	word ptr [PrevInt15][2],0 ; Is the segment non-zero?
	jne     XCCheckVD

	push	dx			; save callers DX
	call	HookInt15		; claim all remaining ext mem
	pop	dx
ifdef NEC_98
	call	HookInt220		; start emulating Int220
endif   ;NEC_98

XCCheckVD:
	popff				; End of critical section

ifndef NEC_98
	cmp	[fVDISK],0		; was VDISK found?
	je	XCCallFunc
	pop	ax			; Yes, Un-preserve AX and return error
	xor	ax,ax
	mov	bl,ERR_VDISKFOUND
	xor	dx,dx
	jmp	short XCExit
endif   ;NEC_98

;	Call the appropriate API function.


XCCallFunc:
	pop	ax			; Restore AX
	push    ax			; save ax so functions get both ah & al
	mov	al,ah
	xor	ah,ah
	shl	ax,1
	mov	di,ax			; NOTE: DI cannot be used for parms!
	pop	ax			; restore callers ax for function

	mov	di,ControlJumpTable[di]	; get function address
ifndef NEC_98
	or	di,di
	jns	CallLowSegFn		; brif it's in the low segment
else    ;NEC_98
	cmp	di,HISEG_ORG
	jb	CallLowSegFn		; brif it's in the low segment
endif   ;NEC_98

	cmp	fInHMA, 0		; is the hiseg in HMA ?
	jz	InLoMem
;
;------ Turn on the A20 line if it is off
;
	push	si
	push	di
	push	ax
	push	bx
	push	cx
	call	LocalEnableA20		; Note:  This is always necessary
	cmp	ax, 1
	pop	cx			; for the Memory Move function.  In
	pop	bx			; the case where this driver loads
	pop	ax			; high, it is necessary for all calls
	pop	di			; to the high segment.
	pop	si
	jne	a20_error
InLoMem:
	push	cs			; set up far return
	call	call_hi_in_di		; and call the function

	cmp	fInHMA, 0		; is the hiseg in HMA ?
	jz	XCExit

	push	ax			; save the registers which may be
	push	bx			; returning values
	call	LocalDisableA20		; and restore a20
	cmp	ax, 1
	pop	bx
	pop	ax

	je	short XCExit

a20_error:
	xor	ax, ax
	xor	dx, dx
	mov	bl, ERR_A20
	jmp	short XCExit

CallLowSegFn:
	call	di			; call routine in this segment

XCExit:
;	if	debug_vers or tdump	;------------------------------------
;	pusha
;	call	dump_tables
;	popa
;	endif		;------------------------------------------------------

	popff				; NOTE: Flags must be restored
	pop	es			; immedately after call API functions.
	pop	ds
	pop	di
	pop	si
	pop	cx

;	if	debug_vers ;---------------------------------------------------
;	pushf
;	pusha
;	mov	al,'.'
;	call	cofa
;	mov	al,cs:byte ptr fun_number
;	sub	al,0bh			; don't get key on 0bh, 0ch or 0dh
;	cmp	al,2
;	jbe	no_keywait
;	mov	ah,1		; wait for console key now!!!!!!
;;	int	21h
;no_keywait:
;	popa
;	popf
;	endif		;------------------------------------------------------

	ret

XMMControl  endp

	if	tdump or debug_vers	;------------------------------------

fun_number	db	0		; function number for debug info

dump_tables:
	if	not tdump
	cmp	fun_number,9		; only display on allocate calls
	jnz	dd_done			;  unless full tdump is enabled
	endif
	mov	dx,offset heading
	mov	ah,9
	int	21h

	push	es
	mov	es,hiseg
	assume	es:funky
	mov	si,[KiddValley]
	mov	cx,[cHandles]
	mov	bx,SIZE Handle

xlup:
	mov	al,[si].Flags		; get flags
	cmp	al,4			; don't show UNUSED entries
	jz	x_entry_done

	mov	dx,offset msg_FREE
	cmp	al,1			; free?
	jz	x_showflags
	mov	dx,offset msg_USED
	cmp	al,2			; used?
	jz	x_showflags
	mov	dx,offset msg_BAD
x_showflags:
	mov	ah,9
	int	21h

	mov	al,[si].cLock		; get lock count
	call	hex_byte
	call	space

	mov	ax,[si].Base		; get base
	call	hex_word
	call	space

	mov	ax,[si].Len		; get length
	call	hex_word

	if	keep_cs
	call	space
	mov	ax,[si].Acs		; get the allocator's cs:
	call	hex_word
	endif

x_newline:
	mov	al,13
	call	cofa
	mov	al,10
	call	cofa

x_entry_done:
	add	si,bx
	loop	xlup

	pop	es
	assume	es:nothing
	mov	dx,offset donemsg
	mov	ah,9
	int	21h
dd_done:
	ret


heading		db	'Flags Lock Base Len CS:',13,10,'$'
msg_FREE	db	'FREE   $'
msg_USED	db	'USED   $'
msg_BAD		db	'BAD    $'
donemsg		db	'End of XMS table$'

	endif

	if	debug_vers


debug_dump	proc	near
	pusha
	mov	fun_number,ah	; save (non-reentrantly!) function number
;				;  so that we can display different debug
;				;  information on exit depending on which
;				;  function we've been doing
	mov	al,ah		; just display function number
	call	hex_nib
	popa
	ret

	if	0		; enable this if you want to see the
;				;  command block for memory moves
	cmp	ah,0bh		; memory move?
	jnz	debug_dump_done	; done if not
	pusha
	call	crlf
	mov	ax,es:2[si]	; get count-hi
	call	hex_word
	mov	ax,es:[si]	; get count-low
	call	hex_word
	add	si,4		; point to source address field

	mov	cx,2		; now display two handle/addresses
dd1:
	call	space
	lods	es:word ptr [si] ; get a handle
	call	hex_word
	mov	al,'-'
	call	cofa
	mov	ax,es:2[si]	; get high address
	call	hex_word
	mov	al,':'
	call	cofa
	lods	es:word ptr [si] ; get low address
	call	hex_word
	add	si,2		; skip to next entry for loop
	loop	dd1
	popa
debug_dump_done:
	endif
	ret
debug_dump	endp

	endif

	if	debug_vers or tdump
ifdef NEC_98
RowCol	dw	1700H		; ins NEC <90.07.11> Y.Ueno
endif   ;NEC_98

hex_word:
	push	ax
	mov	al,ah
	call	hex_byte
	pop	ax
hex_byte:
	push	ax
	shr	ax,4		; XMS present implies '286 or better
	call	hex_nib
	pop	ax
hex_nib:
	and	al,0fh
	add	al,90h
	daa
	adc	al,3ah
	daa
cofa:
;	mov	dl,al
;	mov	ah,2
;	int	21h
ifndef NEC_98
	mov	ah,0eh
	mov	bx,7
	int	10h
	ret
else    ;NEC_98
;======================CHG NEC <90.07.11> Y.Ueno =============================
	push	bx				; save callers regs
	push	cx
	push	dx
	push	si
	push	di
	push	es
	push	ds

	push	dx				; save this segment for later

	mov	ds, dx				; DS -> data segment
	mov	dx, ds:[RowCol] 		; DX = current row/col

	cmp	al, CR				; is character a CR?
	jne	short kp1
	mov	dl, 0				; yes, go to column 0
	jmp	short kp3				; jump to common code
kp1:
	cmp	al, LF				; is character a LF?
	jne	short kp2
	inc	dh				; yes, go to next row
	jmp	short kp3				; jump to common code
kp2:
	cmp	al, TAB 			; is it a tab
	jne	short kp12
	and	dl, 0f8h			; mask off low 3 bits (8 ch)
	add	dl, 8				; move to next tab position
	jmp	short kp3				; jmp to common code
kp12:
	cmp	al, BS				; is it backspace
	jne	short kp13
	dec	dl				; back up one column
	jmp	short kp3				; goto common code
kp13:
;	Must be ordinary character. Write it to screen, update position

;@@@
	XOR	AH,AH			;
	push	ax			; save char/attr
	mov	al, dh			; AL = row
	mov	ah, 80			; multiplier, 80 char per row
	mul	ah			; AX = cell at start of row
	mov	bh, 0
	mov	bl, dl			; BX = column
	add	bx, ax			; BX = cell
	shl	bx, 1			; BX = byte offset of cell
	mov	ax, 0a000h		; screen para for real mode
	mov	es, ax			; ES -> screen
	pop	es:[bx] 		; write character
	inc	dl			; update column
kp3:
;	Common code, first check for line wrap:

	cmp	dl, 80			; beyond rhs of screen?
	jl	short kp4
	mov	dl, 0			; go to col 0
	inc	dh			; and move to next line
kp4:
;	Now check for scroll needed:

	cmp	dh, 24			; are we off end of screen?
	jl	short kp5

;	Now scroll screen

	mov	ax, 0a000h		; screen para for real mode
	mov	ds, ax			; DS -> screen
	mov	es, ax			; ES -> screen

	mov	di, 0			; ES:DI = copy destination
	mov	si, 160 		; DS:SI = copy source
	mov	cx, 2000-160		; copy word count
	cld
	rep	movsw			; scroll

;	Blank bottom line

	mov	al, ' '
;@@@
	mov	ah, 0			; AX = blank character

	mov	cx, 80			; number of cells to blank
	mov	di, 4000-320		; ES:DI = start point
	rep	stosw

;	Update position

	mov	dh, 23			; new row
kp5:
	pop	ds			; set DS to data again
	mov	ds:[RowCol], dx 	; update row/col

;@@@
	call	SetCursor

	pop	ds			; restore regs
	pop	es
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx

	ret
;***	SetCursor - updates cursor position
;
;	This routine reprograms the 6845 cursor position, and
;	stores the new cursor position in the ROM bios data area.
;
;	ENTRY	DUAL MODE
;		DH, DL = row, col
;
;	EXIT	cursor updated
;
;	USES	ax, bx, cx, flags
;

CRT_COLS	equ	04ah
CURSOR_POSN	equ	050h
CRT_START	equ	04eh
ADDR_6845	equ	063h

	push	ds
	mov	bx, 40h
	mov	ds, bx

;	Save new position in BIOS data area

	mov	ds:[CURSOR_POSN], dx

;	Calculate offset on screen

	mov	al, dh				; row
;	mul	byte ptr ds:[CRT_COLS]		; row * cols
	MOV	AH,80
	mul	AH				; row * cols
	mov	bl, dl				; bl = column
	mov	bh, 0				; bx = column
	add	ax, bx				; ax = offset in screen
	sal	ax, 1				; double for attribute bytes
;	mov	cx, ds:[CRT_START]		; cx = start point of screen
	mov	cx, 0h				; cx = start point of screen
	ADD	AX,CX
	MOV	DX,AX
;	sar	cx, 1				; convert to char count only

;	Now program 6845

	mov	al,49h
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	OUT	62H,AL
	MOV	AX,DX
	SHR	AX,1
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	OUT	60H,AL
	MOV	AL,AH
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	JMP	SHORT $+2
	OUT	60H,AL
	POP	DS
	RET

;=============================================================================
endif   ;NEC_98

space:
	mov	al,' '
	jmp	cofa

crlf:
	mov	al,13
	call	cofa
	mov	al,10
	jmp	cofa

	endif		;------------------------------------------------------

;	little utility stub for calling routine in the other segment.
;	  called with the branch offset address in di
;	  a far return address is already on the stack.  Now branch to
;	  hiseg:(di)

	public	hiseg	; allow initialization code to relocate hiseg
hiseg	dw	funky

	public	call_hi_in_di
call_hi_in_di proc near
	push	hiseg
	push	di
call_hi_in_di endp
call_hi_far proc far
	ret
call_hi_far endp


;*----------------------------------------------------------------------*
;*									*
;*  HookInt15 -								*
;*									*
;*	Insert the INT 15 hook						*
;*									*
;*  ARGS:   None							*
;*  RETS:   None							*
;*  REGS:   AX, BX, CX, DX, DI, SI, and Flags are clobbered		*
;*									*
;*  EXTERNALLY NON-REENTRANT						*
;*	Interrupts must be disabled before calling this function.	*
;*									*
;*----------------------------------------------------------------------*


HookInt15   proc    near

	push    es

ifndef NEC_98
	call    IsVDISKIn		; has a VDISK been installed?
	cmp	[fVDISK],0
	je	HINoVD			; No, continue
	pop	es			; Yes, return without hooking
	ret

HINoVD:                                 ; notify softpc of hooking I15
        mov     ax,offset Int15Handler  ; args: cs:di new I15 vector
        XMSSVC  XMS_NOTIFYHOOKI15       ; returns CX=ExtMem in K

;       Save the curr INT 15 vector, and put ours in the IVT

	les     si,dword ptr pInt15Vector
        xchg    ax,es:[si][0]
        mov     word ptr [PrevInt15][0],ax
        mov     ax,cs
        xchg    ax,es:[si][2]
        mov     word ptr [PrevInt15][2],ax

        mov     ax, cx
        cmp     ax,15*1024              ; Limit himem.sys to using 15 meg
	jb	@f			;   of extended memory for apps
	mov	ax,15*1024		;   that don't deal with > 24 bit
@@:					;   addresses

	sub	ax,[MemCorr]    	; 6300 Plus may have memory at FA0000h
else    ;NEC_98
;====================== chg NEC <90.07.11> Y.Ueno ======================
	push	es
	mov	ax,40h
	mov	es,ax
	sub	ah,ah
	mov	al,byte ptr es:[0001]	; get extend memory size
	shl	ax,7			; convert to k byte size
	pop	es
endif   ;NEC_98
	cmp	ax,64
	jb	HIInitMemory		; Less than 64K free?  Then no HMA.
	cmp	Int15MemSize, 0		; are we supporting int 15 memory
	jnz	HIInitMemory		; then we dont support HMA
	mov	[fHMAExists],1

HIInitMemory:

;	Init the first handle to be one huge free block.

ifndef NEC_98
	or	ax, ax			; don't do it if no Int 15 memory avail
	jz	HISkipInit
endif   ;NEC_98

	mov	cx,1024			; base is just above 1 meg

	xor	bx, bx			; assume no HMA

	cmp	[fHMAExists],0		; Reserve room for HMA if it exists
	je	@f
	mov	bx, 64
@@:	cmp	bx, Int15MemSize
	jae	@f
	mov	bx, Int15MemSize
@@:	add	cx,bx
	sub     ax,bx
ifdef NEC_98
	push	es
	push	ax
	mov	ax, 40h
	mov	es, ax
	pop	ax
	push	ax
	add	ax,127			; set 128k boundly
	shr	ax,7
	sub	byte ptr es:[0001h],al
	pop	ax
	pop	es
endif   ;NEC_98
	call	AddMem			; add that to memory table

ifndef NEC_98
HISkipInit:
else    ;NEC_98
;	Save the current INT 15 vector.

	les	si,dword ptr pInt15Vector

;	Exchange the old vector with the new one.

	mov	ax,offset Int15Handler
	xchg	ax,es:[si][0]
	mov	word ptr [PrevInt15][0],ax
	mov	ax,cs
	xchg	ax,es:[si][2]
	mov	word ptr [PrevInt15][2],ax
endif   ;NEC_98

        pop     es
	ret

HookInt15   endp

ifndef NEC_98
;*----------------------------------------------------------------------*
;*									*
;*  IsVDISKIn -								*
;*									*
;*	Looks for drivers which use the IBM VDISK method of allocating	*
;*  Extended Memory.  XMS is incompatible with the VDISK method.  It is *
;*  necessary to check two different locations since some programs only *
;*  one or the other, although they should do both.			*
;*									*
;*  ARGS:   None							*
;*  RETS:   None.  Sets "fVDISK" accordingly				*
;*  REGS:   AX, BX, CX, SI, DI and Flags are clobbered			*
;*									*
;*  INTERNALLY REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

pVDISK	label   dword
	dw	00013h
	dw	0FFFFh

szVDISK	db	'VDISK'

IsVDISKIn   proc    near

;	Look for "VDISK" signature at offset 12h in Int 19h segment

	push	es

	xor	ax,ax
	mov	es,ax
	mov	es,es:[(19h * 4)+2]
	mov	di,12h
	mov	si,offset szVDISK
	mov	cx,5
	cld
	repz	cmpsb

	pop	es

	jz	IVIFoundIt

;	Look for "VDISK" starting at the 4th byte of extended memory.

	call    LocalEnableA20		; Turn on A20

	push	es

	les	di,cs:pVDISK		; set up the comparison
	mov	si,offset szVDISK
	mov	cx,5
	cld
	repz	cmpsb			; Do the comparison

	pop	es

	pushf
	call	LocalDisableA20
	popff

	jz	IVIFoundIt

	mov	[fVDISK],0		; No VDISK device found
	ret

IVIFoundIt:
	mov	[fVDISK],1		; "VDISK" was found
	ret

IsVDISKIn   endp
endif   ;NEC_98


;*----------------------------------------------------------------------*
;*									*
;*  Int15Handler -							*
;*									*
;*	Hooks Function 88h to return zero as the amount of extended	*
;*	memory available in the system.					*
;*									*
;*	Hooks Function 87h and preserves the state of A20 across the	*
;*	block move.							*
;*									*
;*  ARGS:   AH = Function, AL = Subfunction				*
;*  RETS:   AX = 0 (if AH == 88h)					*
;*  REGS:   AX is clobbered						*
;*									*
;*----------------------------------------------------------------------*

ifdef NEC_98
I15RegSave  dw	?
endif   ;NEC_98

Int15Handler proc   far

ifndef NEC_98
	cmp	ah,88h			; request == report free ext mem?
	je	I15ExtMem

	cmp	ah,87h			; Block move?
	je	I15BlkMov

	jmp     cs:[PrevInt15]		; continue down the int 15h chain

I15ExtMem:
	mov	ax, cs:Int15MemSize	; return 'free' Int 15h extended memory
        jmp     DOIRET


I15BlkMov:
        call    DOCLI                   ; Make sure interrupts are off

	sub	sp,4			; Make space for A20 flag & flags word
	pusha				; Preserve the caller's registers

	call	IsA20On 		; Get current A20 state

	mov	bp,sp			; Stk= [pusha] [fl] [a20] [ip] [cs] [fl]
	mov	[bp+18],ax		; Save A20 state
	mov	ax,[bp+24]		; Get caller's entry flags and save on
	mov	[bp+16],ax		;   stack, forms part of iret frame

	popa				; Restore the caller's registers

;	Simulate an interrupt to lower level Int 15h handler.  Note that
;	the flags image is already on the stack from code above.  The Int
;	15h handler may or may return with interrupts enabled.

	call	cs:[PrevInt15]

	push	ax			; Save returned AX
	pushf				; Save flags returned from lower level

	push	bp			; Stack =
	mov	bp,sp			;    [bp] [fl] [ax] [a20] [ip] [cs] [fl]
	mov	ax,[bp+2]		; Setup to pass lower level flags
	mov	[bp+12],ax		;   back to caller on iret
	cmp	word ptr [bp+6],0	; While we're here test old A20 state
	pop	bp
	pop	ax			; Discard flags
	pop	ax			; Restore AX

	jz	I15HExit		; A20 was off, don't mess with it

        call    DOCLI                   ; A20 handlers called with ints off
	pusha				; Preserve previous handler's return
	mov     ax,1
	call	A20Handler		; turn A20 back on
	popa				; Restore the previous handler's return

I15HExit:
	add	sp,2			; 'pop' A20 state flag
        jmp     DOIRET                  ; Uses flags from lower level handler
else    ;NEC_98

	cmp	ah,90h			; Is it a Block Move ?
	jne	I15HNext		; No , continue

	call	DOCLI			; Make sure interrupts are off
	pusha				; Preserve the registers

	mov	al, 8			; ins NEC <90.11.14> Y.Ueno
	out	37h, al 		;	"

	call	IsA20On
	mov	cs:[I15RegSave],ax	; store A20's state
	popa				; Restore the registers

;	Call the previous Int 15h handler.

	pushf				; Simualate an interrupt
	call	cs:[PrevInt15]
	pushf				; bug ? ins NEC <90.07.12> Y.Ueno
	pusha				; Preserve previous handler's return
	cmp	cs:[I15RegSave],0	; Restore A20
	je	I15HExit		; It was off, continue
	mov	ax,1
	call	A20Handler		; turn A20 back on

I15HExit:

	mov	al, 09h 		; ins NEC <90.11.14> Y.Ueno
	out	37h, al 		;	"

	popa				; Restore the previous handler's return
	popf				; bug ? chg NEC <90.07.12> Y.Ueno
	retf	2			;		"
;;;	iret				;		"

I15HNext:
	jmp	cs:[PrevInt15]		; continue down the int 15h chain

endif   ;NEC_98

Int15Handler endp

ifdef NEC_98
;*----------------------------------------------------------------------*
;*									*
;*  HookInt220 -							*
;*									*
;*	Insert the INT 220 hook 					*
;*									*
;*  ARGS:   None							*
;*									*
;*  RETS:   None							*
;*									*
;*  REGS:   AX, SI, and Flags are clobbered				*
;*									*
;*  EXTERNALLY NON-REENTRANT						*
;*	Interrupts must be disabled before calling this function.	*
;*									*
;*----------------------------------------------------------------------*

HookInt220   proc    near

	push	cx
	mov	cl,81h
	xor	ax,ax
	int	220			; Get size of extended memory
	pop	cx
	or	ax,ax			; no extendec memory?
	jz	HI220Exit		;   don't hook Int220

;	Exchange the old vector with the new one.

	push	es

	les	si,dword ptr pInt220Vector	; ES:SI points Int220 vector
	mov	ax,offset Int220Handler
	xchg	ax,es:[si][0]
	mov	word ptr [PrevInt220][0],ax
	mov	ax,cs
	xchg	ax,es:[si][2]
	mov	word ptr [PrevInt220][2],ax

	pop	es

HI220Exit:
	ret

HookInt220   endp

;*----------------------------------------------------------------------*
;*									*
;*  Int220Handler -							*
;*									*
;*	Hooks Function 81h/82h and emulate it by twiddling EMB table	*
;*									*
;*  ARGS:   CL = Function, AX = Subfunction				*
;*	    BX = Size of memory requested in 128k block, if function 81h*
;*									*
;*  RETS:   Function 81h						*
;*		AX = 0	(if success)					*
;*		BX = Start addr 					*
;*		DX = End addr						*
;*									*
;*		AX = 01h (if fail)					*
;*		BX = size of available memory in blocks of 128k 	*
;*									*
;*	    Function 82h						*
;*		AX = size of availabel memory in blocks of 128k 	*
;*		BX = Start addr 					*
;*		DX = End addr						*
;*									*
;*  REGS:   AX, BX, (DX) is clobbered					*
;*									*
;*----------------------------------------------------------------------*

USER_DX 	equ	6
USER_BX 	equ	10
USER_AX 	equ	12

I220EmlTbl	dw	offset Eml_81
		dw	offset Eml_82


Int220Handler proc   far

	cmp	cl,81h			; Function 81h?
	jne	I220HCmp82		;
	cmp	ax,0001h		; Sub function 01h?
	jne	I220HNext		;
	jmp	short I220HStart	;   yes
I220HCmp82:
	cmp	cl,82h			; Function 82h?
	jne	I220HNext		;
	cmp	ax,0000h		; Subfunction 00Hh?
	jne	I220HNext		;
					;
I220HStart:				;   yes
	sti
	push	es
	push	ds
	push	ax
	push	bx
	push	cx
	push	dx
	push	di
	push	si
	push	bp

	mov	bp,sp
	mov	dx,ss
	mov	es,dx
	push	cs
	pop	ds

	mov	si,offset I220EmlTbl
	sub	cl,81h
	xor	ch,ch
	shl	cx,1
	add	si,cx
	call	[si]			; call our Int 220 handler.

	pop	bp
	pop	si
	pop	di
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	pop	ds
	pop	es

	iret


I220HNext:
	jmp	cs:[PrevInt220] 	; continue down the int 220 chain

Int220Handler endp

;*----------------------------------------------------------------------*
;*									*
;*  EML_81 -								*
;*									*
;*	Emulate Int220h Function 81h					*
;*									*
;*  ARGS:   Int 220 regs but DS, ES, BP, CX				*
;*									*
;*  RETS:   Values are set into AX, BX, DX on the stacks		*
;*									*
;*  REGS:   AX, BX, CX, DX, SI, DI and Flags are clobbered		*
;*									*
;*----------------------------------------------------------------------*

EML_81	proc   near

	push	bx			; save size of memory requested
	mov	ax,bx
	call	GetInt220mem		; return available memory size in CX
					;   handle in DX, SI
	pop	ax
	cmp	cx,ax			; is there enough memory?
	jb	E81Nomem		;  no

	or	ax,ax			; requested size = 0 ?
	jz	E81ReqZero		;  yes

	mov	bx,dx			; ax:size,bx:free handle,si:unused handle
	call	AllocInt220mem		; allocate memory for this Int 220
	mov	[bp].USER_BX,bx 		; start addr
	mov	[bp].USER_DX,dx 		; ending addr
	mov	word ptr [bp].USER_AX,0000h	; indicates sucsess
	jmp	short E81Exit

E81ReqZero:
	mov	word ptr [bp].USER_BX,0010h	; start addr
	mov	word ptr [bp].USER_DX,0010h	; ending addr
	mov	word ptr [bp].USER_AX,0000h	; indicates sucsess
	jmp	short E81Exit

E81Nomem:
	mov	[bp].USER_BX,cx 		; size of abailable memories
	mov	word ptr [bp].USER_AX,0001h	; indicate not enough memories

E81Exit:
	ret

EML_81	endp

;*----------------------------------------------------------------------*
;*									*
;*  EML_82 -								*
;*									*
;*	Emulate Int220h Function 82h					*
;*									*
;*  ARGS:   Int 220 regs but DS, ES, BP, CX				*
;*									*
;*  RETS:   Values are set into AX, BX, DX on the stacks		*
;*									*
;*  REGS:   AX, BX, CX, DX, SI, DI and Flags are clobbered		*
;*									*
;*----------------------------------------------------------------------*

OwnersPSP	dw	0		;
OwnersHandle	dw	0		;

EML_82	proc   near

	mov	ax,0ffffh		; fake request size
	call	GetInt220mem		; return maximum available memory in AX
					;   handle in BX, SI
	or	ax,ax			; available size = 0 ?
	jz	E82Nomem		; yes

					; ax:size,bx:free handle,si:unused handle
	call	AllocInt220mem		; allocate memory for this Int 220
	mov	[bp].USER_BX,bx 	; start addr
	mov	[bp].USER_DX,dx 	; ending addr
	mov	[bp].USER_AX,ax 	; size of memory allocated
	mov	[OwnersHandle],cx	; save handle of allocated block

	mov	ax,6200h
	int	21h
	mov	[OwnersPSP],bx		; save current process's PSP
					; we'll hook INt20h/21h from now on

;	Exchange the old vector with the new one.

	push	es
	cli

	les	si,dword ptr pInt20Vector	; replace Int20h vector
	mov	ax,offset Int20_Hooker		;   with addr of Int20_Hooker
	xchg	ax,es:[si][0]			;
	mov	word ptr [PrevInt20][0],ax	;
	mov	ax,cs				;
	xchg	ax,es:[si][2]			;
	mov	word ptr [PrevInt20][2],ax	;

	les	si,dword ptr pInt21Vector	; replace Int21h vector
	mov	ax,offset Int21_Hooker		;   with addr of Int21_Hooker
	xchg	ax,es:[si][0]			;
	mov	word ptr [PrevInt21][0],ax	;
	mov	ax,cs				;
	xchg	ax,es:[si][2]			;
	mov	word ptr [PrevInt21][2],ax	;

	sti
	pop	es
	jmp	short E82Exit

E82Nomem:
	mov	word ptr [bp].USER_BX,0010h	; start addr
	mov	word ptr [bp].USER_DX,0010h	; ending addr
	mov	word ptr [bp].USER_AX,0000h	; no blocks was allocated

E82Exit:
	ret

EML_82	endp

;*----------------------------------------------------------------------*
;*									*
;*  Int20_Hooker -							*
;*  Int21_Hooker -							*
;*									*
;*	Hooks Int20h/21h						*
;*									*
;*  ARGS:   AH = Function						*
;*									*
;*  REGS:   All Regs are preserved					*
;*									*
;*  EXIT:   Fall through previous Int20h/21h handler			*
;*									*
;*----------------------------------------------------------------------*

Intnum		db	0		; number of Int we are handling

Int21_Hooker proc   far

	mov	cs:[Intnum],21h
	cmp	ah,00h
	je	I2xHStart
	cmp	ah,4ch
	jne	I2xHNext


Int20_Hooker proc   far

I2xHStart:
	push	ax
	push	bx
	mov	ax,6200h
	pushf
	call	cs:[PrevInt21]		; Int21h GetPSP Function
	cmp	bx,cs:[OwnersPSP]	; this process own memory block?
	pop	bx
	pop	ax
	jne	I2xHNext

	push	ax
	push	bx
	push	cx
	push	dx
	push	di
	push	si
	push	ds
	push	cs
	pop	ds			; ds <- _text seg
	push	es

	mov	es,[hiseg]		; es <- funky seg
	mov	dx,[OwnersHandle]	; handle of block owned by this process
	mov	di,FreeMem		; get funtion in funky segment
	push	cs			; set up far return
	call	call_hi_in_di		; call into high segment

;------------------------------------------------------------------------------
;	Restore the old vector.
;	 we won't hook Int20h/21h no longer.

	cli

	les	di,dword ptr pInt20Vector	; restore Int20h vector
	mov	ax,word ptr [PrevInt20][0]	;
	stosw					;
	mov	ax,word ptr [PrevInt20][2]	;
	stosw					;

	les	di,dword ptr pInt21Vector	; restore Int21h vector
	mov	ax,word ptr [PrevInt21][0]	;
	stosw					;
	mov	ax,word ptr [PrevInt21][2]	;
	stosw					;
;------------------------------------------------------------------------------

	pop	es
	pop	ds
	pop	si
	pop	di
	pop	dx
	pop	cx
	pop	bx
	pop	ax

I2xHNext:
	cmp	cs:[Intnum],21h
	je	I21HNext

I20HNext:
	jmp	cs:[PrevInt20]		; continue down the int 20h chain

I21HNext:
	mov	cs:[Intnum],0
	jmp	cs:[PrevInt21]		; continue down the int 21h chain

Int20_Hooker endp
Int21_Hooker endp

	assume	ds:_text
;*----------------------------------------------------------------------*
;*									*
;*  GetInt220mem -							*
;*									*
;*	Serach for available memory block for Int220 in EMB table	*
;*									*
;*  ARGS:   AX = size of memories requested in blocks of 128k		*
;*									*
;*  RETS:   AX = size of maximam EMB block in blocks of 128k		*
;*	    BX = handle of maximam availabel EMB block			*
;*	    CX = size of available EMB block whith the nearest		*
;*		   size to request, in blocks of 128k			*
;*	    DX = handle of available EMB block whith the nearest	*
;*		   size to request					*
;*	    SI = handle of unused EMB block				*
;*									*
;*  REGS:   AX, BX, CX, DX, SI, DI and Flags are clobbered		*
;*									*
;*----------------------------------------------------------------------*

hMax		dw	0		; Handle of block that has max size
MaxSize 	dw	0		; Max. size found so far
hNearest	dw	0		; Handle of block that has nearest size
					;   with request size
NearestSize	dw	0		; Nearest size with request size
hUnused 	dw	0		; Handle of unused block


GetInt220mem	proc   near

	mov	[hMax],0000h
	mov	[MaxSize],0000h
	mov	[hNearest],0000h
	mov	[NearestSize],0ffffh
	mov	[hUnused],0000h

;	scan for largest FREE block

	push	es
	mov	es,[hiseg]
	assume	es:funky
	mov	bx,[KiddValley]
	mov	cx,[cHandles]		; Loop through the handle table
GI220Loop:
	cmp	[bx].Flags,FREEFLAG	; Is this block free?
	jne	GI220Anused		;   no

	mov	di,[bx].base
	mov	si,di
	add	si,[bx].Len		; si has end addr of free block
	and	si,0ff80h		; round off to 128k boundary

	add	di,127			; di had start addr of free block
	and	di,0ff80h		; 128k boundary

	sub	si,di			; available size in kbytes
	jnc	GI220Gotmem
	xor	si,si			; size = 0
GI220Gotmem:
	shr	si,7			; convert to number of blocks

	cmp	si,[MaxSize]		; is this the largest so far?
	jbe	GI220Nearest
	mov	[MaxSize],si		; Yes, save it away
	mov	[hMax],bx		; save handle

GI220Nearest:
	cmp	si,ax			; is this larger than request?
	jb	GI220Bottom
	cmp	si,[NearestSize]	; is this the nearest so far?
	jae	GI220Bottom
	mov	[NearestSize],si	; Yes save it away
	mov	[hNearest],bx		; save handle
	jmp	short GI220Bottom

GI220Anused:
	cmp	[bx].Flags,UNUSEDFLAG	; Is this block unused?
	jne	GI220Bottom
	cmp	[hUnused],0		; did we already find an unused handle?
	jne	GI220Bottom
	mov	[hUnused],bx		; save this guy away

GI220Bottom:
	add	bx,SIZE Handle
	loop	GI220Loop

	cmp	[hMax],0		; Is there some free blocks
	je	GI220Nomem		;   no
	mov	ax,[MaxSize]
	mov	bx,[hMax]
	mov	cx,[MaxSize]
	mov	dx,[hMax]
	mov	si,[hUnused]
	cmp	[hNearest],0
	je	GI220Exit
	mov	cx,[NearestSize]
	mov	dx,[hNearest]
	jmp	short GI220Exit

GI220Nomem:
	xor	ax,ax			; no memory available
	xor	cx,cx			;

GI220Exit:
	pop	es
	assume	es:nothing
	ret


GetInt220mem	endp

;*----------------------------------------------------------------------*
;*									*
;*  AllocInt220mem -							*
;*									*
;*	Set memory block for Int220 onto EMB table			*
;*									*
;*  ARGS:   AX = size of memories requested in blocks of 128k		*
;*	    BX = handle of free EMB block				*
;*	    SI = handle of unused EMB block				*
;*									*
;*  RETS:   AX = size of EMB blocks allocated in blocks of 128k 	*
;*	    BX = start addr of allocated memories			*
;*	    DX = ending addr of allocated memoies			*
;*	    CX = handle of allocated EMB block				*
;*									*
;*  REGS:   AX, BX, CX, DX and Flags are clobbered			*
;*									*
;*----------------------------------------------------------------------*

AllocInt220mem	proc   near

	push	es
	mov	es,[hiseg]
	assume	es:funky
	shl	ax,7			; request size in kbytes

	or	si,si			; is there a unused block?
	jz	AI220AllocAll		;   no, allocate entire block

	cmp	ax,[bx].Len
	je	AI220AllocAll

	mov	dx,[bx].Base
	mov	cx,dx
	add	dx,[bx].Len		; end of free block
	and	dx,007fh		; size beyond 128k boundary
	add	dx,ax
	mov	[si].Len,dx
	sub	[bx].Len,dx
	add	cx,[bx].Len
	mov	[si].Base,cx
	mov	bx,si

AI220AllocAll:
	mov	[bx].Flags,USEDFLAG	; New.Flags = USED
	shr	ax,7			; size of block allocated
	mov	cx,bx			; handle of block allocated
	mov	dx,[bx].Base
	add	dx,[bx].Len
	and	dx,0ff80h
	shr	dx,6			; end addr
	mov	bx,dx
	sub	bx,ax
	sub	bx,ax			; start addr

	pop	es
	assume	es:nothing
	ret

AllocInt220mem	endp
endif   ;NEC_98

;*----------------------------------------------------------------------*
;*									*
;*  RequestHMA -					FUNCTION 01h    *
;*									*
;*	Give caller control of the High Memory Area if it is available.	*
;*									*
;*  ARGS:   DX = HMA space requested in bytes				*
;*  RETS:   AX = 1 if the HMA was reserved, 0 otherwise.  BL = Error	*
;*  REGS:   AX, BX and Flags clobbered					*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

winbug_fix	dw	0	; storage for windows bug workaround

RequestHMA  proc   near

        call    DOCLI           ; This is a non-reentrant function.
				; Flags are restored after the return.

	mov	bl,ERR_HMAINUSE

;	***************************
;	**  There's a problem with WIN386 2.11.  It calls XMS driver
;	**   incorrectly and then goes ahead and uses the memory
;	**   it didn't properly allocate.  In order to convince it
;	**   not to go ahead and use the extended memory, we must
;	**   fail this function when it calls us.  We know that
;	**   al=40h and dx=free memory returned from QueryExtMemory
;	**   when we're called from windows.  Hopefully no legitimate
;	**   caller will happen to have that exact same 24 bit code
;	**   in al/dx when they call this function because they will fail.
;	***************************

	cmp	al,40h		; called from win386 2.11?
	jnz	not_winbug
	cmp	dx,winbug_fix   ; dx=last result from QueryExtMem?
	jz	RHRetErr	; fail if so
not_winbug:

	cmp	[fHMAInUse],1   ; Is the HMA already allocated?
	je	RHRetErr

	mov	bl,ERR_HMANOTEXIST
	cmp	[fHMAExists],0  ; Is the HMA available?
	je	RHRetErr

	mov	bl,ERR_HMAMINSIZE
	cmp	dx,[MinHMASize] ; Is this guy allowed in?
	jb	RHRetErr

	mov	ax,1
	mov	[fHMAInUse],al  ; Reserve the High Memory Area
	xor     bl,bl		; Clear the error code
	ret

RHRetErr:
	xor     ax,ax		; Return failure with error code in BL
	ret

RequestHMA  endp


;*----------------------------------------------------------------------*
;*									*
;*  ReleaseHMA -					FUNCTION 02h    *
;*									*
;*	Caller is releasing control of the High Memory area		*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX = 1 if control is released, 0 otherwise.	 BL = Error	*
;*  REGS:   AX, BX and Flags clobbered					*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

ReleaseHMA  proc   near

        call    DOCLI                   ; This is a non-reentrant function

	mov	al,[fHMAInUse]		; HMA currently in use?
	or	al,al
	jz	RLHRetErr	 	; No, return error

	mov	[fHMAInUse],0		; Release the HMA and return success
	mov	ax,1
	xor	bl,bl
	ret

RLHRetErr:
	xor	ax,ax
	mov	bl,ERR_HMANOTALLOCED
	ret

ReleaseHMA  endp


;*----------------------------------------------------------------------*
;*									*
;*  GlobalEnableA20 -					FUNCTION 03h    *
;*									*
;*	Globally enable the A20 line					*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX = 1 if the A20 line is enabled, 0 otherwise.  BL = Error	*
;*  REGS:   AX, BX CX, SI, DI and Flags clobbered			*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

GlobalEnableA20 proc near

        call    DOCLI                   ; This is a non-reentrant function

	cmp	[fGlobalEnable],1	; Is A20 already globally enabled?
	je	GEARet

GEAEnable:
	call    LocalEnableA20		; Attempt to enable A20
	or	ax,ax
	jz	GEAA20Err

	mov	[fGlobalEnable],1	; Mark A20 global enabled

GEARet:
	mov	ax,1			; return success
	xor	bl,bl
	ret

GEAA20Err:
	mov	bl,ERR_A20		; some A20 error occurred
	xor	ax,ax
	ret

GlobalEnableA20 endp


;*----------------------------------------------------------------------*
;*									*
;*  GlobalDisableA20 -					FUNCTION 04h    *
;*									*
;*	Globally disable the A20 line					*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX=1 if the A20 line is disabled, 0 otherwise.  BL = Error	*
;*  REGS:   AX, BX, CX, SI, DI and Flags are clobbered			*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

GlobalDisableA20 proc near

        call    DOCLI                   ; This is a non-reentrant function

	cmp	[fGlobalEnable],0	; Is A20 already global-disabled?
	je	GDARet

	call    LocalDisableA20		; Attempt to disable it
	or	ax,ax			;   (also zaps CX, SI, DI)
	jz	GDAA20Err

	mov	[fGlobalEnable],0	; mark as global-disabled

GDARet:
	mov	ax,1			; return success
	xor	bl,bl
	ret

GDAA20Err:
	mov	bl,ERR_A20		; some A20 error occurred
	xor	ax,ax
	ret

GlobalDisableA20 endp


;*----------------------------------------------------------------------*
;*									*
;*  LocalEnableA20 -					FUNCTION 05h    *
;*									*
;*	Locally enable the A20 line					*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX = 1 if the A20 line is enabled, 0 otherwise.  BL = Error	*
;*  REGS:   AX, BX, CX, SI, DI and Flags clobbered			*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*


LocalEnableA20 proc near

ifndef NEC_98
        call    DOCLI                   ; This is a non-reentrant function

	cmp	[fCanChangeA20],1	; Can we change A20?
	jne	LEARet			; No, don't touch A20

if	NUM_A20_RETRIES
	mov	A20Retries,NUM_A20_RETRIES
endif

	cmp	[EnableCount],0 	; If enable count == 0, go set it
	jz	LEASetIt		;   without bothering to check 1st

if	NUM_A20_RETRIES

LEATestIt:

endif
	call	IsA20On 		; If A20 is already on, don't do
	or	ax,ax			;   it again, but if it isn't on,
	jnz	LEAIncIt		;   then make it so

LEASetIt:
	mov	ax,1			; attempt to turn A20 on
	call    A20Handler		; Call machine-specific A20 handler

ife	NUM_A20_RETRIES
	or	ax,ax			; If we're not doing retries, then
	jz	LEAA20Err		;   use A20 handler's error return
else
	dec	A20Retries		; Any retries remaining?  If so, go
	jnz	LEATestIt		;   test current state, else return
	jmp	short LEAA20Err 	;   an error condition
endif

LEAIncIt:
	inc	[EnableCount]
LEARet:
	mov	ax,1			; return success
	xor	bl,bl
	ret

LEAA20Err:
	mov	bl,ERR_A20		; some A20 error occurred

	xor	ax,ax
	if	debug_vers
disp_a20_err:
	pusha
	mov	al,'#'
	call	cofa
	popa
	endif
	ret

else    ;NEC_98
        call    DOCLI                   ; This is a non-reentrant function

	cmp	[fCanChangeA20],1	; Can we change A20?
	jne	LEARet			; No, don't touch A20

; From 2.14 - 2.25 the following 3 lines were commented out.  This caused
; at least four (seemingly different) bugs on PS/2 systems.  The problem
; seems to be that the PS2_A20Handler returns an error code if called to
; enable when A20 is already on (other handlers do this also!).  JimMat

	call	IsA20On 		; If A20 is already on, don't do
	or	ax,ax			;   it again, but if it isn't on,
	jnz	LEAIncIt		;   then make it so

	mov	ax,1			; attempt to turn A20 on
	call	A20Handler		; Call machine-specific A20 handler

	or	ax,ax
	jz	LEAA20Err

LEAIncIt:
	inc	[EnableCount]
LEARet:
	mov	ax,1			; return success
	xor	bl,bl
	ret

LEAA20Err:
	mov	bl,ERR_A20		; some A20 error occurred

	xor	ax,ax
	if	debug_vers
disp_a20_err:
	pusha
	mov	al,'#'
	call	cofa
	popa
	endif
	ret
endif   ;NEC_98

LocalEnableA20 endp


;*----------------------------------------------------------------------*
;*									*
;*  LocalDisableA20 -					FUNCTION 06h    *
;*									*
;*	Locally disable the A20 line					*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX=1 if the A20 line is disabled, 0 otherwise.  BL = Error	*
;*  REGS:   AX, BX, CX, SI, DI and Flags are clobbered			*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*


LocalDisableA20 proc near

        call    DOCLI                   ; This is a non-reentrant function

	cmp	[fCanChangeA20],0	; Can we change A20?
	je	LDARet			; No, don't touch A20

	cmp	[EnableCount],0		; make sure the count's not zero
	je	LDAA20Err

ifndef NEC_98
if	NUM_A20_RETRIES

	mov	A20Retries,NUM_A20_RETRIES

LDATestIt:

endif
endif   ;NEC_98
	call	IsA20On 		; Currently on or off?

	cmp     [EnableCount],1		; Only if the count = 1 should A20 be
	jnz     LDAStayOn		;   turned off, otherwise it stays on

	or	ax,ax			; If A20 is already off, don't
	jz	LDADecIt		;   bother to turn off again

	xor     ax,ax			; It's on, but should be turned off
	jmp     short LDASetIt

LDAStayOn:
	or	ax,ax			; A20 must stay on, if it is on, just
	jnz	LDADecIt		;   dec count, else force A20 on

	mov     ax,1
LDASetIt:
	call	A20Handler		; Call machine-specific A20 handler

ifndef NEC_98
ife	NUM_A20_RETRIES
	or	ax,ax			; If we're not doing retries, then
	jz	LDAA20Err		;   use A20 handler's error return
else
	dec	A20Retries		; Any retries remaining?  If so, go
	jnz	LDATestIt		;   test current state, else return
	jmp	short LDAA20Err 	;   an error condition
endif
else    ;NEC_98
	or	ax,ax			; If we're not doing retries, then
	jz	LDAA20Err		;   use A20 handler's error return
endif   ;NEC_98

LDADecIt:
	dec	[EnableCount]

LDARet:
	mov	ax,1			; return success
	xor	bl,bl
	ret

LDAA20Err:
	mov     bl,ERR_A20		; some A20 error occurred
	xor     ax,ax
	if	debug_vers
	jmp	disp_a20_err
	endif
	ret

LocalDisableA20 endp

;
;---------------------------------------------------------------------------
; procedure : FLclEnblA20
; procedure : FLclDsblA20
;
;		Called from the Block move functions. Serves 2 purposes
;		1. Interfaces a far call for a near routine
;		2. If funky is in HMA does a dummy success return
;---------------------------------------------------------------------------
;

FLclEnblA20	proc	far
		cmp	cs:fInHMA, 0
		jz	@f
		mov	ax, 1
		ret
@@:
		call	LocalEnableA20
		ret
FLclEnblA20	endp

FLclDsblA20	proc	far
		cmp	cs:fInHMA, 0
		jz	@f
		mov	ax, 1
		ret
@@:
		call	LocalDisableA20
		ret
FLclDsblA20	endp
;
;*----------------------------------------------------------------------*
;*									*
;*  IsA20On -						FUNCTION 07h    *
;*									*
;*	Returns the state of the A20 line				*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX = 1 if the A20 line is enabled, 0 otherwise		*
;*	    BL = 0							*
;*  REGS:   AX, BL, CX, SI, DI and Flags clobbered			*
;*									*
;*  INTERNALLY REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

; NOTE: When this routine is called from the Int15 handler, ds is undefined.
;  Hence the CS: overrides on data references.


IsA20On     proc    near
	mov	al, cs:A20State
	cbw
	xor	bl, bl
	ret

IsA20On	endp

;*----------------------------------------------------------------------*
;*									*
;*  AddMem - add memory to free pool					*
;*									*
;*	The trick here is that we're going to check for overlapping	*
;*	  or adjacent blocks and crunch them together.  The thinking	*
;*	  here is that we may be informed of a memory resource from	*
;*	  more than one source.  In any case, we NEVER want the same	*
;*	  memory to appear in our resource table more than once.	*
;*									*
;*	Note:  there's presently no way of reporting errors if the	*
;*	  handle table is full.  If it happens, we'll just lose the	*
;*	  memory block.  This should not be a problem as long as	*
;*	  we're only being called during program initialization.	*
;*									*
;*	It would be nice if we could throw this code away after		*
;*	  initialization, unfortunately this is actually invoked	*
;*	  at HookInt15 time, so it's too late to do away with		*
;*	  obsolete code.						*
;*									*
;*  ARGS:    CX - base of block in 1K increments			*
;*	     AX - length of block in 1K increments			*
;*  TRASHES: AX,BX,CX,DX,SI,DI						*
;*									*
;*  messes with handle table - not reentrant - assumes ints disabled	*
;*									*
;*----------------------------------------------------------------------*


AddMem		proc	near

;	We might as well be scanning for a free handle while we're
;	 at it since we're normally going to need one at the end

	mov	dx,ax		; save new block length in dx
	mov	si,cx		; save new block base in si
	xor	di,di		; haven't found free handle yet

	push	es
	mov	es,hiseg
	assume	es:funky

	mov	bx,[KiddValley]	; prepare to loop thru handle tab
	mov	cx,[cHandles]

AM01:
	cmp	[bx].Flags,UNUSEDFLAG ; is this handle available?
	jnz	AM02		; skip if not

	or	di,di		; use the first free handle we
	jnz	AM05		;  find.  skip if we've got one

	mov	di,bx		; save the unused handle in di
	jmp	short AM05

AM02:


;	Note:  Normally all handles will be either UNUSED or FREE at
;	  this point.  However, in the case of checking for Zenith memory,
;	  it may have a temporarily allocated dummy block.  Therefore
;	  we'll only be merging blocks marked as FREE.

	cmp	[bx].Flags,FREEFLAG
	jnz	AM05		; ignore USED blocks

;	   First check for new block being entirely after block at [bx]

	mov	ax,[bx].Base
	add	ax,[bx].Len
	cmp	ax,si		; is [bx].end < new.Base?
	jb	AM05		;  done checking this entry if so

;	   Now check for new block being entirely before block at [bx]

	mov	ax,si		; new.base
	add	ax,dx		; + new.len = new.end
	cmp	ax,[bx].Base
	jb	AM05		; brif no overlap at all

;	   Now put the block at [bx] up into our block in registers so
;	   that we can continue the scan.  There may be other adjacent
;	   blocks, even in the case of no overlap, fr'instance when a
;	   block is added which entirely fills the gap between two others.

	cmp	si,[bx].Base	; Find base of combined block
	jbe	AM03		;  Brif new block on bottom
	add	dx,si		; Add new.base - [bx].base to
	mov	si,[bx].Base ;  new.len, set new.base=[bx].Base
	sub	dx,si		;  new.len
AM03:
	mov	ax,[bx].Base ; see which block ends later
	add	ax,[bx].Len ;  get [bx].end
	sub	ax,dx		;  less new.len
	sub	ax,si		; compare to new.Base
	jbe	AM04		;  brif new.end >= [bx].end

;	   now ax has the amount our block must grow by

	add	dx,ax

AM04:
	mov	[bx].Flags,UNUSEDFLAG ; mark the block unused
	or	di,di		; did we find an unused handle yet?
	jnz	AM05		;  brif so
	mov	di,bx		; save this one if not

AM05:
	add	bx,SIZE handle
	loop    AM01

	or	di,di		; did we find a free handle?
	jz	AM06		;  error!  no handles free!

	mov	[di].cLock,0
	mov	[di].Flags,FREEFLAG ; create the free memory block
	mov	[di].Base,si
	mov	[di].Len,dx

AM06:
	pop	es
	assume	es:nothing
	ret

AddMem  endp

        PUBLIC DOCLI
DOCLI:
        FCLI
        ret

        PUBLIC DOSTI
DOSTI:
        FSTI
        ret

        PUBLIC DOIRET
DOIRET:
        FIRET

_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\himem1.asm ===
;/* himem1.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */

	page	95,160
	title	himem1 - A20 Handler stuff

	.xlist
	include	himem.inc
	include xmssvc.inc
	.list

	public	A20Handler
	extrn	TopOfTextSeg:word
	extrn	fA20Check:byte
	extrn	A20State:byte

	assume	cs:_text,ds:nothing

;*--------------------------------------------------------------------------*
;*									    *
;* A20 Handler Section: 						    *
;*									    *
;* The Init code copies the proper A20 Handler in place.		    *
;*									    *
;* NOTE: the A20 handler may be called from the Int 15h hook which does     *
;*	 not set ds = _text.  DO NOT ASSUME DS == _TEXT!		    *
;*									    *
;*--------------------------------------------------------------------------*

A20Handler:

;*----------------------------------------------------------------------*
;*									*
;*  TheA20Handler - Hardware Independent A20 handler for NT himem	*
;*									*
;*	Enable/Disable the A20 line					*
;*									*
;*  ARGS:   AX = 0 for Disable, 1 for Enable, 2 for On/Off query	*
;*  RETS:   AX = 1 for success, 0 otherwise				*
;*	    if input AX=2 then Exit AX=0 means off and 1 means on	*
;*  REGS:   AX and flags effected					*
;*									*
;*----------------------------------------------------------------------*
TheA20Handler proc	near
    cmp     ax, 2
    jne     @F
    mov     al, cs:A20State
    cbw
    ret
@@:
    XMSSVC  XMS_A20
    ret
TheA20Handler endp

End_A20Handler:


; Sudeepb NOTE: DONOT ADD ANY THING after End_A20Handler and before InstallA20.


;*----------------------------------------------------------------------*
;*									*
;*  InstallA20 -							*
;*									*
;*	Install the A20 Handler						*
;*									*
;*  ARGS:   None							*
;*  RETS:   None							*
;*  REGS:								*
;*									*
;*----------------------------------------------------------------------*

	public	InstallA20

InstallA20  proc near

	mov	fA20Check,1		    ; A20 ON/OFF query supported
	mov	[TopOfTextSeg],offset End_A20Handler
	clc
	ret
InstallA20  endp


_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\hbios\patgen.inc ===
GenFont:
; FUNCTION = make pattern completly
; INPUT   : (DS=CS) CX = KS code, ES:DI = buffer pointer
; OUTPUT  : (NC) ES:DI = buffer pointer
; PROTECT : none
extrn	Ks2ChAddr:word
VowelTypeCnt	=	3
	push	bp
	push	di
	mov	ax,cx
	mov	bp,di			; save buffer pointer
	test	[CodeStat],Chab
	jnz	@f
	call	[Ks2ChAddr]
	jnc	@f
	jmp	MakeFontEnd
@@:
	call	ChkVowelType		; check vowel type
	add	si,[PatGenAddr]
	mov	di,bp
	mov	dx,ax			; save CH code
	xor	ax,ax
	mov	cx,16
	rep stosw			; clear buffer
; DX = CH code, BP = buffer pointer, SI = type no.
	add	si,offset Type1stTbl - offset GenFont
	push	dx
	mov	di,[HanPatternPtr]
	add	di,FontStruc1st
	and	dx,0111110000000000b
	mov	cl,7
	rol	dx,cl
	call	MakePattern
	pop	dx
	jc	MakeFontEnd
@@:
	add	si,offset Type2ndTbl - offset Type1stTbl
	push	dx
	mov	di,[HanPatternPtr]
	add	di,FontStruc2ndV
	push	si
	mov	si,dx
	mov	cl,5
	shr	si,cl
	and	si,0000000000011111b
	add	si,offset VowelType - offset GenFont
	add	si,[PatGenAddr]
	mov	al,[si]
	dec	al
	mov	ah,4*VowelTypeCnt
	mul	ah
	pop	si
	add	di,ax
	and	dx,0000001111100000b
	mov	cl,4
	shr	dx,cl
	add	dx,32*2
	call	MakePattern
	pop	dx
	jc	MakeFontEnd
@@:
	add	si,offset Type3rdTbl - offset Type2ndTbl
	mov	di,[HanPatternPtr]
	add	di,FontStruc3rd
	and	dx,0000000000011111b
	shl	dx,1
	add	dx,32*2*2
	call	MakePattern
MakeFontEnd:
	pop	di
	pop	bp
	ret

ChkVowelType:
; FUNCTION = get vowel type bits(4)
; INPUT   : (DS=CS)AX = CH code
; OUTPUT  : (CC) SI = vowel type code(4 bits)
; DESTORY : CX, DX
	mov	si,ax
	mov	cl,5
	shr	si,cl
	and	si,0000000000011111b
	add	si,offset VowelType - offset GenFont
	add	si,[PatGenAddr]
	mov	cl,[si]
	shl	cl,1
	shl	cl,1			; 0000xx00b
	mov	dx,ax
	and	dx,0111110000011111b
	cmp	dh,00000100b		; 1st fill code ?
	jz	@f			; jump if so
	or	cl,00000001b		; 0000xxx1b
@@:
	cmp	dl,00000001b		; last fill code ?
	jz	@f			; jump if so
	or	cl,00000010b		; 0000xx1xb
@@:
	xor	ch,ch
	mov	si,cx
	ret

MakePattern:
; FUNCTION = make pattern
; INPUT   : (DS=CS) BP = buffer pointer, DX = input code
;		    DI = font struc pointer, CL = real type no.
; OUTPUT  : none
; DESTORY : AX, BX, CX, DI
	push	si
	mov	cl,[si] 		; get type no.
	mov	si,dx
	add	si,[HanPatternPtr]
	mov	si,[si]
	or	si,si
	jz	MakePatternFill
	or	si,si
	js	MakePatternErr		; jump if MSB = 1
	or	cl,cl
	js	MakePatternFill 	; jump if MSB = 1
	xor	ch,ch
	xor	bx,bx
@@:
	jcxz	@f
	mov	ax,[di+2]
	mul	ah
	add	bx,ax			; BX = byte size
	add	di,4
	loop	@b
@@:
	add	si,[HanPatternPtr]
	add	si,bx
	mov	bx,di
; calc target address
	mov	di,bp
	mov	ax,[bx] 		; get (X, Y)
	mov	cl,al
	mov	al,ah
	xor	ah,ah
	shl	ax,1
	add	di,ax
	xor	ch,ch
	add	di,cx
; calc repeat counter
	mov	dx,[bx+2]
	mov	bl,dh
	mov	bh,dl
	mov	dl,2			; 16 dot
	sub	dl,bh
	xor	dh,dh			; AX = blank byte
	xor	ch,ch
MakeFontLoop:
	mov	cl,bh			; BH = repeat counter
@@:
	lodsb
	or	es:[di],al
	inc	di
	loop	@b
	add	di,dx
	dec	bl
	jnz	MakeFontLoop
MakePatternFill:
	pop	si
	ret
MakePatternErr:
	pop	si
	stc
	ret

VowelType	label	byte
	db	0,0,0,1,1,1,1,1,0,0,1,1,1,2,3,3
	db	0,0,3,2,2,3,3,3,0,0,2,2,3,1,0,0
Type1stTbl	label	byte
	db	-1, 0,-1, 4,-1, 1,-1, 2,-1, 3,-1, 4,-1, 6,-1, 5
Type2ndTbl	label	byte
	db	-1,-1,-1,-1, 0, 1, 2, 2, 0, 1, 2, 2, 0, 1, 2, 2
Type3rdTbl	label	byte
	db	-1,-1, 0, 1,-1,-1, 0, 1,-1,-1, 0, 1,-1,-1, 0, 1

FontStruc	STRUC
Char1st 	dw	32 dup(?)	; 1st code word table
Char2nd 	dw	32 dup(?)	; 2nd code word table
Char3rd 	dw	32 dup(?)	; 3rd code word table
FontStruc1st	db	4*7 dup(?)	; 1st code struc table
FontStruc2ndV	db	4*3 dup(?)	; 2nd V-vowel code struc table
FontStruc2ndH	db	4*3 dup(?)	; 2nd H-vowel code struc table
FontStruc2ndHV	db	4*3 dup(?)	; 2nd HV-vowel code struc table
FontStruc3rd	db	4*2 dup(?)	; 3rd code struc table
RealFont	db	?		; font image area
FontStruc	ENDS

CharTbl 	label	word
INCLUDE HAN.PAT
GenFontLng	=	$-GenFont


=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\chp\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake  /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH) \
	 DBCS_FLAGS="-DDBCS -DPRC"       
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\himem2.asm ===
;/* himem2.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; *
; * williamh 25-Sept-1992 added UMB initialization
; */

	page	95,160
	title   'HIMEM2 - Initialization code'

funky	segment word public 'funky'
	extrn	textseg:word		; in high segment
	extrn	KiddValley:word
	extrn	KiddValleyTop:word
	extrn	cHandles:word
	extrn	pack_and_truncate:near
	extrn	end_of_funky_seg:byte
	extrn	LEnblA20:word
	extrn	LDsblA20:word
funky	ends

	.xlist
	include	himem.inc		; get structures, equ's, etc.
					;  and open segment
	include xmssvc.inc

	.list

;	public	f000
	public	InitInterrupt
	public	MachineNum

;************************************************************************
;*									*
;*  Global Variables							*
;*									*
;************************************************************************

	extrn	pPPFIRET:word
	extrn	dd_int_loc:word
	extrn	Interrupt:near
	extrn	hiseg:word
	extrn	call_hi_in_di:near
	extrn	fCanChangeA20:byte
	extrn	fHMAMayExist:byte

ifndef NEC_98
	extrn	fVDISK:byte
	extrn	IsVDISKIn:near
endif   ;NEC_98

	extrn	A20Handler:near
	extrn	EnableCount:word
	extrn	MemCorr:word
	extrn	MinHMASize:word

	extrn	pReqHdr:dword
	extrn	PrevInt2f:dword
	extrn	TopOfTextSeg:word

	extrn	AddMem:near
	extrn	InstallA20:near
	extrn	Int2fHandler:near
;	extrn	Is6300Plus:near
	extrn	IsA20On:near

	extrn	SignOnMsg:byte
	extrn	ROMDisabledMsg:byte
	extrn	UnsupportedROMMsg:byte
	extrn	ROMHookedMsg:byte
	extrn	BadDOSMsg:byte
	extrn	NowInMsg:byte
	extrn	On8086Msg:byte
	extrn	NoExtMemMsg:byte
	extrn	FlushMsg:byte
	extrn	StartMsg:byte
	extrn	HandlesMsg:byte
	extrn	HMAMINMsg:byte
	extrn	KMsg:byte
	extrn	NoHMAMsg:byte
	extrn	A20OnMsg:byte
	extrn	HMAOKMsg:byte
ifndef NEC_98
	extrn	VDISKInMsg:byte
	extrn	BadArgMsg:byte
endif   ;NEC_98

	extrn	DevAttr:word
	extrn	Int15MemSize:word

	extrn	EndText:byte
        extrn   A20State:byte

        extrn   DOSTI:near
        extrn   DOCLI:near
ifdef NEC_98
	extrn	fAltA20Routine:byte
	extrn	LocalDisableA20:near
	extrn	LocalEnableA20:near
	extrn	cant_ena20_msg:byte
	extrn	cant_dia20_msg:byte
endif   ;NEC_98

;************************************************************************
;*									*
;*   Code/Data below here will be discarded after driver initialization *
;*									*
;************************************************************************

;	Discardable Initialization Data

public	fShadowOff, f1stWasWarning

fShadowOff	db	0	; NZ if shadow RAM should be disabled,
				;   0/1 set by command line switch, 0FFh
				;   set if little extended and hope to disable

f1stWasWarning	db	0	; NZ if 1st attempt to diddle A20 generated
				; a warning (and not an error)
	public	fA20Control

fA20Control	db	0ffh	; NZ if himem should take control of A20, even
				;   it was already on when himem loaded.

ifndef NEC_98
	public	fCPUClock

fCPUClock	db	0	; NZ if himem should try to preserve CPU clock
				;   speed when gating A20
endif   ;NEC_98

	public	StringParm, MachineNum, MachineName

StringParm	db	13 DUP (' ')

MachineNum	dw	-1

;  Note: the following table MUST be in the same order as the entries in the
;  A20_Scan_Table!  If you add entries here, also add one there!

MachineName	label	byte
	db	'ptlcascade',0		; Phoenix Cascade BIOS
	db	'att6300plus',0 	; AT&T 6300 Plus
	db	'ps2',0 		; IBM PS/2
	db	'hpvectra',0		; HP 'Classic' Vectra (A & A+)
	db	'acer1100',0		; Acer 1100
	db	'toshiba',0		; Toshiba 1600 & 1200XE
	db	'wyse',0		; Wyse 12.5 MHz 286 machine
ifndef NEC_98
	db	'tulip',0		; Tulip machines
	db	'zenith',0		; Zenith ZBIOS
	db	'at1',0 		; IBM AT/delay 0
	db	'at2',0 		; IBM AT/delay 1
	db	'at3',0 		; IBM AT/delay 2
	db	'philips',0		; Philips machines
	db	'css',0			; CSS Lab machines
	db	'fasthp',0		; Single byte method for HP Vectras
	db	'ibm7552',0		; IBM 7552 Industrial Computer
	db	'bullmicral',0		; Bull Micral 60 M004
endif   ;NEC_98
	db	'at',0			; IBM AT
	db	0FFh			; end of table

;NOTE: there is code in GetParms which depends on AltNameTbl coming
;      after MachineName table.

ifndef NEC_98
	public	AltName1, AltName2, AltName3, AltName4, AltName5
	public	AltName6, AltName7, AltName8, AltName9, AltName10
	public	AltName11, AltName12, AltName13, AltName14, AltName15
	public	AltName16                                    ;M004
else    ;NEC_98
	public	AltName1, AltName2, AltName3, AltName4, AltName5
	public	AltName6, AltName7, AltName8
endif   ;NEC_98

AltNameTbl	label	byte
AltName3    db	'3',0			; Phoenix Cascade BIOS
AltName5    db	'5',0			; AT&T 6300 Plus
AltName2    db	'2',0			; IBM PS/2
AltName4    db	'4',0			; HP 'Classic' Vectra (A & A+)
AltName6    db	'6',0			; Acer 1100
AltName7    db	'7',0			; Toshiba 1600 & 1200XE
AltName8    db	'8',0			; Wyse 12.5 Mhz 286 machine
ifndef NEC_98
AltName9    db	'9',0			; Tulip machine
AltName10   db	'10',0			; Zenith ZBIOS
AltName11   db	'11',0			; IBM AT/delay 0
AltName12   db	'12',0			; IBM AT/delay 1
AltName13   db	'13',0			; IBM AT/delay 2
	    db	'13',0			; Philips machines (same as AT3)
	    db	'12',0			; CSS machines
AltName14   db	'14',0			; Single byte HP Vectra m/cs
AltName15   db	'15',0			; IBM 7552 Industrial Computer
AltName16   db	'16',0			; Bull Micral 60          M004
endif   ;NEC_98
AltName1    db	'1',0			; IBM AT
	    db	0FFh			; end of table

ifdef	debug_tsr	;-----------------------------------------------

;*----------------------------------------------------------------------*
;*									*
;*  ExeStart -								*
;*									*
;*	Entry point when himem is invoked as an .EXE.			*
;*									*
;*----------------------------------------------------------------------*

lpCmdLine	dd	81h		; far ptr to command tail

	public	ExeStart

ExeStart:

	mov	word ptr cs:[lpCmdLine+2],es	; save PSP segment in pointer

	mov	ax,cs		; Setup segment regs to all be the same
	mov	ds,ax
	mov	es,ax

	call	InitDriver	; Initialize...

	mov	ax,TopOfTextSeg	; TopOfTextSeg == 0 is error installing
	or	ax,ax
	jnz	@f

	mov	ax,4C03h	; error, so just terminate
	int	21h
@@:
	mov	di,offset pack_and_truncate
	jmp	call_hi_in_di	; terminate and stay resident

endif			;------------------------------------------------



;*----------------------------------------------------------------------*
;*									*
;*  InitInterrupt -							*
;*									*
;*	Called by MS-DOS immediately after Strategy routine		*
;*									*
;*  ARGS:   None							*
;*  RETS:   Return code in Request Header's Status field		*
;*  REGS:   Preserved							*
;*									*
;*	This entry point is used only during initialization.		*
;*	It replaces itself with a much shorter version which only	*
;*	serves to report the appropriate errors when this driver	*
;*	is called in error.						*
;*									*
;*----------------------------------------------------------------------*

InitInterrupt   proc    far

	; Save the registers including flags.

	push    ax		; We cannot use pusha\popa because
	push    bx		;	we could be on an 8086 at this point
	push    cx
	push    dx
	push    ds
	push    es
	push    di
	push    si
	push    bp
	pushf

	push	cs		; Set DS=CS for access to global variables.
	pop	ds

	les	di,[pReqHdr]	; ES:DI = Request Header

	mov     bl,es:[di].Command ; Get Function code in BL

	or	bl,bl		; Only Function 00h (Init) is legal
	jz	IInit

	cmp     bl,16		; Test for "legal" DOS functions
	jle     IOtherFunc

IBogusFunc:
	mov     ax,8003h	; Return "Unknown Command"
	jmp     short IExit

IOtherFunc:
	xor     ax,ax		; Return zero for unsupported functions
	jmp     short IExit

IInit:
	call    InitDriver	; Initialize the driver
	les	di,[pReqHdr]	; Restore es:di = Request Header

IExit:
	or	ax,0100h	; Turn on the "Done" bit
	mov	es:[di].Status,ax ; Store return code

	popff			; restore the registers
	pop	bp
	pop	si
	pop	di
	pop	es
	pop	ds
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	mov	dd_int_loc,offset Interrupt	; replace Interrupt with
	ret					; tiny permanent stub

InitInterrupt   endp

;*----------------------------------------------------------------------*
;*									*
;*  InitDriver -							*
;*									*
;*	Called when driver is Initialized.				*
;*									*
;*  ARGS:   ES:DI = Address of the Request Header			*
;*  RETS:   pHdr.Address = Bottom of resident driver code		*
;*  REGS:   AX, CX and Flags are clobbered				*
;*									*
;*----------------------------------------------------------------------*

ifndef NEC_98
	public	InitDriver
endif   ;NEC_98

InitDriver  proc    near

	cld

	ifndef	debug_tsr
	call	LocateHiSeg	; locate the hiseg in low memory properly


	mov	ax,cs
	push	es
	mov	es,hiseg
	assume	es:funky
	add	textseg,ax	; relocate text segment pointer
	add	LEnblA20+2, ax	; update ptrs to enble & disable a20 rtns
	add	LDsblA20+2, ax
	pop	es
	assume	es:nothing
	endif

;	mov	ah,9		; display signon message
;	mov	dx,offset SignOnMsg
;	int	21h

	mov	ah,30h		; make sure we've got DOS 3.00 or higher
	int	21h		; Get DOS versions number
	cmp	al,3
	jae     IDCheckXMS

	mov	dx,offset BadDOSMsg
	jmp	IDFlushMe

IDCheckXMS:
ifndef NEC_98
	mov	ax,(INT2F_ID SHL 8) OR INT2F_INS_CHK
	int	2Fh		; make sure there's no other XMS installed
else    ;NEC_98
	mov     ax,4300h	; make sure there's no other XMS installed
	int	2Fh
endif   ;NEC_98
	cmp	al,80h		; Is INT 2F hooked?
	jne     IDNotInYet
	mov	dx,offset NowInMsg
	jmp	IDFlushMe

IDNotInYet:
ifdef NEC_98
	xor	ax,ax
	mov	es,ax
	test	byte ptr es:[501h],40h	; we're on an V30/V50
	jz	@f
	jmp	IDFlushMe		; so give out
@@:
	call	GetInt15Memory		; If Int 15h/88h reports < 384k of
	mov	dx,offset NoExtMemMsg
	or	ax,ax			; we have extend memory ?
	jnz	@f
	jmp	IDFlushMe		; so give out
@@:
	test	byte ptr es:[0501h],08h	; Q : HIRES CRT ?
	jz	@f			;  N : continue
	mov	ah,byte ptr es:[501h]	; BIOS_FLG
	mov	al,ah			;  save
	and	ah,07h			; get main memory size
	cmp	ah,4			; main memory > 512 ?
	jb	@f			; no. don't need to init RAMWindow
	test	byte ptr es:[458h],80h	; NPC ?
	jnz	not_XA			; yes
	test	al,30h			; system type = 0 ?
	jnz	not_XA			; no. other than XA
	call	Init_RamWindow_XA
	jmp	short @f
not_XA:
	call	Init_RamWindow
@@:
endif   ;NEC_98
	call	GetParms		; process command line parameters
;; don't call IsA20On at this moment because we haven't init it yet
	mov	ax, 2
	XMSSVC	XMS_A20
;;;;	call	IsA20On 		; Is A20 already enabled?
	or	ax,ax			;   (may zap cx, si, di)
	jz	IDInsA20		;   no, go install A20 handler

	mov	dx,offset A20OnMsg	; "A20 already on" message
	cmp	fA20Control,0		; should we take control of A20 anyway?
	jne	IDInsA20		;   yes, go muck with it
	mov	[fCanChangeA20],0	;   no,  don't allow changing of A20
	mov	ah,9			;	 and tell user about it
	int	21h
	jmp	short IDAfterA20

IDInsA20:
	call	InstallA20		; install proper A20 handler
	jc	IDFlushMe		; CY means fatal error

;	Note:  A side affect of the previous InstallA20 is that MemCorr
;	  is set to reflect the adjustment factor if we're on an AT&T 6300+

IDAfterA20:
	call	InitHandles	; initialize handle table

	call    GetInt15Memory	; how much extended memory is installed?
	cmp     ax,64		; Is there >= 64K of extended?
ifndef NEC_98
	jae	IDHMAOK
else    ;NEC_98
	jb	@f
	cmp	Int15MemSize, 0	; has the hma been allocated to INT 15 ?
	jz	IDHMAOK		; no, HMA is available
@@:
endif   ;NEC_98

	push	es
	mov	es,hiseg
	assume	es:funky
	mov	bx,[KiddValley]	; get size of memory we already have in tables
	mov	cx,[cHandles]

IDAnyMem:
	cmp	[bx].Flags,FREEFLAG
	jnz	IDAnyMem_1	; brif not a valid free block
	add	ax,[bx].Len	; accumulate total
IDAnyMem_1:
	add	bx,SIZE Handle
	loop	IDAnyMem

	pop	es
	assume	es:nothing

	mov	dx,offset NoHMAMsg
	or	ax,ax			; no HMA, any other memory to control?
	jnz	disp_hma_msg		; jmp if some memory

;	We can't find any memory to manage.

	mov	dx,offset NoExtMemMsg

;	Display the message in DX followed by the "Flush" message.

IDFlushMe:
	mov	ah,9
	int	21h
	mov	dx,offset FlushMsg
	mov	ah,9
	int	21h

	xor	ax,ax			; discard the driver
	mov	[TopOfTextSeg],ax

ifndef	debug_tsr			;-------------------------------
	les	di,[pReqHdr]
	mov	es:[di].Units,al
	and	cs:DevAttr,not 8000h	; clr bit 15 in attrib of driver header
endif
	jmp	short IDReturn		;-------------------------------
IDHMAOK:
	mov     [fHMAMayExist],1
	mov	dx,offset HMAOKMsg
disp_hma_msg:
;       mov     ah,9
;       int     21h

;; tell xms.lib where our variable is
        mov     ax, cs
        mov     bx, offset A20State
        XMSSVC  XMS_INITUMB

	call    HookInt2F		; "turn on" the driver

;	Initialization finished (or failed) -- return to caller

IDReturn:

ifndef	debug_tsr			;-------------------------------
	mov	di,offset pack_and_truncate
	jmp	call_hi_in_di		; pack stuff down and terminate
endif					;-------------------------------
	ret

InitDriver	endp
;
;----------------------------------------------------------------------------
; procedure : LocateHiSeg
;
;		Locate the movable segment properly in the low seg.
;		taking care of the stripped ORG zeroes. This function
;		calculates the segment at which the hiseg should run
;		with the ORG. If the segment cvalue goes below zero the
;		code is moved up high enough to run the code from a seg value
;		of zero.
;
;		This function assumes that the 'funky' segment follows
;		immediately after the text seg.
;
;----------------------------------------------------------------------------
; 
LocateHiSeg	proc	near
	push	ds
	mov	ax, cs				; para start of text seg
	mov	cx, offset _text:EndText	; end of text seg
	add	cx, 15				; para round it
	shr	cx, 1
	shr	cx, 1
	shr	cx, 1
	shr	cx, 1
	add	ax, cx				; para start of funky seg
	cmp	ax, (HISEG_ORG shr 4)		; will the seg go below zero?
	jb	MoveHiSeg			; yeah, we have to move it
	sub	ax, (HISEG_ORG shr 4)		; no, it fits in
	pop	ds
	mov	hiseg, ax			; update the segment in which
						;   it is going to run from.
	ret
MoveHiSeg:
	mov	ds, ax				; segment at which funky
						;  resides without the ORG
 	xor	ax, ax
 	mov	es, ax				; we want to movve the code
						;  to 0:HISEG_ORG
	mov	di, offset funky:end_of_funky_seg
	mov	si, di
	sub	si, HISEG_ORG
	mov	cx, si
	dec	di
	dec	si
  	std					; move backward (safe when
						;  source & dest overlap
    	rep	movsb
	cld
    	pop	ds
    	mov	hiseg, 0			; funky is going to run from
						;  segment zero
    	ret
LocateHiSeg	endp


;*----------------------------------------------------------------------*
;*									*
;*  HookInt2F -								*
;*									*
;*	Insert the INT 2F hook						*
;*									*
;*  ARGS:   None							*
;*  RETS:   None							*
;*  REGS:   AX, SI, ES and Flags are clobbered				*
;*									*
;*----------------------------------------------------------------------*

	public	HookInt2F

HookInt2F   proc    near

        call    DOCLI
	xor	ax,ax
	mov	es,ax
	mov	si,2Fh * 4		; save previous int2f vector
	mov	ax,offset Int2FHandler	; and exchange with new one
	xchg    ax,es:[si][0]
	mov	word ptr [PrevInt2F][0],ax
	mov	ax,cs
	xchg    ax,es:[si][2]
	mov	word ptr [PrevInt2F][2],ax
        call    DOSTI
	ret

HookInt2F   endp

;*----------------------------------------------------------------------*
;*									*
;*  GetInt15Memory -							*
;*									*
;*	Returns the amount of memory INT 15h, Function 88h says is free	*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX = Amount of free extended memory in K-bytes		*
;*  REGS:   AX and Flags are clobbered					*
;*									*
;*----------------------------------------------------------------------*


GetInt15Memory proc near

ifndef NEC_98
IFDEF WHEN_INT15_DONE
	mov	ah,88h			; snag the int 15h memory
	clc
	int	15h			; Is Function 88h around?
	jnc     xret_geti15
	xor	ax,ax			; No, return 0
xret_geti15:

ifndef NOLIMIT                                  ;M005
	cmp	ax,15*1024		; Limit himem.sys to using 15 meg
	jb	@f			;   of extended memory for apps
	mov	ax,15*1024		;   that don't deal with > 24 bit
@@:					;   addresses
endif						;M005

ELSE
	XMSSVC	XMS_EXTMEM		; return ext-mem in ax5
ENDIF

	ret
else    ;NEC_98
	push	es
	mov	ax,40h
	mov	es,ax
	mov	al,byte ptr es:[01h]	; get extend memory size
	pop	es
	sub	ah,ah
	shl	ax,7
	ret
endif   ;NEC_98

GetInt15Memory endp

;*----------------------------------------------------------------------*
;*									*
;*  GetParms -								*
;*									*
;*	Get any parameters off of the HIMEM command line		*
;*									*
;*  ARGS:   None							*
;*  RETS:   None							*
;*  REGS:   AX, BX, CX, DX, DI, SI, ES and Flags clobbered		*
;*									*
;*  Side Effects:   cHandles and MinHMASize may be changed		*
;*									*
;*----------------------------------------------------------------------*

ifndef NEC_98
GPArgPtr	dd	?
endif   ;NEC_98
GPRegSave	dw	?

	public	GetParms

GetParms    proc    near

	cld				; better safe than sorry

	push	ds

ifdef	debug_tsr			;-------------------------------
	lds	si,lpCmdLine
else					;-------------------------------
	les	di,[pReqHdr]		; Running as a device driver
	lds	si,es:[di].pCmdLine	; DS:SI points to first char
					;   after "DEVICE="
ifndef NEC_98
@@:	call	GPGetChar		; Skip over driver name, up to
	jc	GPDatsAll		;   first blank or / or eol
	jz	GPNextArg
	cmp	al,'/'
	jnz	@b
	dec	si			; Backup to get / again
endif   ;NEC_98
endif					;-------------------------------

	assume	ds:nothing,es:nothing

;	Scan until we see a non-blank or the end of line.

ifndef NEC_98
GPNextArg:
	call	GPGetChar
	jc	GPDatsAll		; eol
	jz	GPNextArg		; blank

	mov	word ptr cs:[GPArgPtr], si	; save ptr to start of arg
	mov	word ptr cs:[GPArgPtr+2], ds	;   incase we want to complain
	dec	word ptr cs:[GPArgPtr]		;   (GPGetChar points at next)

	cmp	al,'/'			; better be a / or not a valid arg
	jz	GPGotOne

;	Detected invalid parameter or value, complain to user

GPBadParm:

	mov	ah,9			; tell'm something isn't right
	push	cs
	pop	ds
	mov	dx,offset BadArgMsg
	int	21h

	lds	si,cs:[GPArgPtr]	; backup to last parameter

GPBadDisp:
	call	GPGetChar		; disp arg up to space or eol
	jc	GPDatsAll		;  skips over bad arg while we're at it
	jz	GPNextArg

	cmp	al,'/'				; start of next arg?
	jnz	@f
	dec	si				; maybe yes, maybe no--might
	cmp	si,word ptr cs:[GPArgPtr]	;   be same arg
	jnz	GPNextArg			;   next, go process new arg
	inc	si				;   same, keep displaying
@@:
	mov	dl,al
	mov	ah,2
	int	21h
	jmp	short GPBadDisp

;	Finished, we're outta here...

else    ;NEC_98
GPBadParm:
GPNextChar:
	call	GPGetChar
	jc	GPDatsAll
	cmp	al,'/'
	je	GPGotOne
	jmp	short GPNextChar
endif   ;NEC_98
GPDatsAll:
	pop	ds
	ret

;	Save what we found and get the number or string after it.

GPGotOne:
	lodsb
	mov	cs:[GPRegSave],ax

;	Scan past the rest of the parm for a number, EOL, or a space.

GPNeedParm:
	call	GPGetChar
ifndef NEC_98
	jc	GPBadParm
	jz	GPBadParm	; blank
else    ;NEC_98
	jc	GPDatsAll
	cmp	al,' '
	je	GPBadParm
endif   ;NEC_98
	cmp	al,':'		; start of string arg
	je	GPString
	cmp	al,'='
	jne	GPNeedParm

;	Read the number at DS:SI into DX

GPNeedNum:
	call	GPGetChar
	jc	GPDatsAll
	cmp	al,'0'
	jb	GPNeedNum
	cmp	al,'9'
	ja	GPNeedNum

	xor	dx,dx
GPNumLoop:
	sub	al,'0'
	cbw
	add	dx,ax
	call	GPGetChar
	jc	GPNumDone
ifndef NEC_98
	jz	GPNumDone
else    ;NEC_98
	cmp	al,' '
	je	GPNumDone
endif   ;NEC_98
	cmp	al,'0'
	jb	GPBadParm
	cmp	al,'9'
	ja	GPBadParm
	shl	dx,1		; multiply DX by 10
	mov	bx,dx
	shl	dx,1
	shl	dx,1
	add	dx,bx
	jmp	short GPNumLoop

;	Move the string arg from ds:si to StringParm

GPString:
	mov	cx,(SIZE StringParm) - 1
	push	cs
	pop	es
	mov	di,offset _text:StringParm

GPStrLoop:
	call	GPGetChar
	jc	GPStrDone
ifndef NEC_98
	jz	GPStrDone
else    ;NEC_98
	cmp	al,' '
	je	GPStrDone
endif   ;NEC_98
	stosb
	loop	GPStrLoop

GPStrDone:

	mov	byte ptr es:[di],0	; Null terminate the string
ifndef NEC_98
	mov	dx,-1			; In case parm expects a num, give'm
					;   a likely invalid one
endif   ;NEC_98

;	Which parameter are we dealing with here?

GPNumDone:
	xchg    ax,cs:[GPRegSave]
	cmp	al,'H'		; HMAMIN= parameter?
	jne	@f
	jmp	GPGotMin
@@:
	cmp	al,'N'		; NUMHANDLES= parameter?
	jne	@f
	jmp	GPGotHands
@@:	cmp	al,'M'		; MACHINE: parameter?
	je	GPGotMachine
	cmp	al,'A'		; A20CONTROL: parameter?
	je	GPGotA20Control
	cmp	al,'S'		; SHADOWRAM: parameter?
	jne	@f
	jmp	GPGotShadow
@@:	cmp	al, 'I' 	; INT15=
	jne	@f
	jmp	GPGotInt15
ifndef NEC_98
@@:	cmp	al, 'C' 	; CPUCLOCK:
	jne	@f
	jmp	GPGotCPUClock
endif   ;NEC_98
@@:	jmp	GPBadParm


;	Process /A20CONTROL: parameter

GPGotA20Control:
	mov	ax,word ptr [StringParm]
	or	ax,2020h
	mov	bl,0FFh
	cmp	ax,'no' 		; ON ?	- means we take control
	jz	GPSetA20
	inc	bl
	cmp	ax,'fo' 		; OFF ? - means we leave alone if on
	jz	GPSetA20
ifndef NEC_98
	jmp	GPBadParm
else    ;NEC_98
	jmp	GPNextParm
endif   ;NEC_98

GPSetA20:
	mov	fA20Control,bl		; Z if A20 should be left alone if
	jmp	GPNextParm		;   it's already on when we're loaded


;	Process /MACHINE: parameter.

GPGotMachine:
	push	si				; save current location
	push	ds				;    in param string

	push	cs
	pop	ds
	mov	di,offset _text:MachineName	; es:di -> MachineName

GPNextTbl:
	xor	bx,bx

GPNextName:
	mov	si,offset _text:StringParm	; ds:si -> StringParm

GPChkNext:
	cmp	byte ptr es:[di],0FFh		; end of name table?
ifndef NEC_98
	jz	GPNoName
else    ;NEC_98
	jz	GPBadName
endif   ;NEC_98

	lodsb				; char from StringParm
	cmp	al,'A'			; force to lower case for match
	jb	@f			; (might be numeric, so don't just OR)
	cmp	al,'Z'
	ja	@f
	or	al,20h
@@:
	cmp	al,es:[di]		; match so far?
	jnz	GPFlushName

	or	al,al			; finished if matched up to & incl NULL
	jz	GPFoundName

	inc	di			; still matches, check next char
	jmp	short GPChkNext

GPFlushName:
	inc	bx
GPFN2:
	inc	di
	cmp	byte ptr es:[di],0FFh
ifndef NEC_98
	jz	GPNoName
else    ;NEC_98
	jz	GPBadName
endif   ;NEC_98

	cmp	byte ptr es:[di],0
	jnz	GPFN2
	inc	di
	jmp	short GPNextName

GPFoundName:
	mov	cs:[MachineNum],bx	; found a match, remember which entry
	jmp	short GPNameDone	;   it is for later

ifndef NEC_98
GPNoName:

	cmp	di,offset _text:AltNameTbl
	ja	GPBadName
	mov	di,offset _text:AltNameTbl
	jmp	short GPNextTbl

GPNameDone:
	pop	ds			; recover parm line pointer
	pop	si
	jmp	GPNextParm

GPBadName:
	pop	ds			; clear stack and error out...
	pop	si
	jmp	GPBadParm
else    ;NEC_98
GPBadName:

	cmp	di,offset _text:AltNameTbl
	ja	GPNameDone
	mov	di,offset _text:AltNameTbl
	jmp	short GPNextTbl

GPNameDone:
	pop	ds			; recover parm line pointer
	pop	si

	jmp	GPNextParm

endif   ;NEC_98

;	Process /NUMHANDLES= parameter.

GPGotHands:
	cmp	dx,MAXHANDLES
	jna	@f
	jmp	GPBadParm
@@:
	or	dx,dx		; Zero?
	jnz	@f
	jmp	GPBadParm
@@:
	push	es
	mov	es,hiseg
	assume	es:funky
	mov     [cHandles],dx ; Store it
	pop	es
	assume	es:nothing


	mov	dx,offset StartMsg ; display descriptive message
	call    GPPrintIt

	push	es
	mov	es,hiseg
	assume	es:funky
	mov	ax,[cHandles]
	pop	es
	assume	es:nothing

	call    GPPrintAX
	mov	dx,offset HandlesMsg
	call    GPPrintIt
ifndef NEC_98
	jmp	GPNextParm
else    ;NEC_98
	jmp	short GPNextParm
endif   ;NEC_98

GPGotMin:
	cmp	dx,64		; process /hmamin= parameter
	jna	@f
	jmp	GPBadParm
@@:
	push    dx
	mov	cs:[MinHMASize],dx

	mov	dx,offset HMAMINMsg ; print a descriptive message
	call    GPPrintIt
	mov	ax,cs:[MinHMASize]
	call    GPPrintAX
	mov	dx,offset KMsg
	call    GPPrintIt

	pop	dx
	mov	cl,10		; Convert from K to bytes
	shl	dx,cl
	mov	cs:[MinHMASize],dx
	jmp	short GPNextParm


;	Process /SHADOWRAM: parameter

GPGotShadow:
	mov	ax,word ptr [StringParm]
	or	ax,2020h
	xor	bl,bl
	cmp	ax,'no' 		; ON ?	- means we leave it alone
	jz	GPSetShadow
	inc	bl
	cmp	ax,'fo' 		; OFF ? - means we turn it off
	jz	GPSetShadow
ifndef NEC_98
	jmp	GPBadParm
else    ;NEC_98
	jmp	short GPNextParm
endif   ;NEC_98

GPSetShadow:
	mov	fShadowOff,bl		; NZ if Shadow RAM should be turned off
	jmp	short GPNextParm

ifndef NEC_98

;	Process /CPUCLOCK: parameter

GPGotCPUClock:

	mov	ax,word ptr [StringParm]
	or	ax,2020h
	xor	bl,bl
	cmp	ax,'fo' 		; OFF ? - means we don't worry about it
	jz	GPSetClock
	inc	bl
	cmp	ax,'no' 		; ON ?	- means we preserve CPU clock
	jz	GPSetClock		;	  rate
	jmp	GPBadParm

GPSetClock:
	mov	fCPUClock,bl		; NZ if clock rate preserved
	jmp	short GPNextParm
endif   ;NEC_98


;	Process /INT15= parameter

GPGotInt15:
	cmp	dx, 64			; atleast 64K
	jae	@f
	jmp	GPBadParm
ifndef NEC_98
@@:	call	GetInt15Memory
	cmp	ax, dx			; enuf Ext Mem ?
else    ;NEC_98
	call	GetInt15Memory
@@:	cmp	ax, dx			; enuf Ext Mem ?
endif   ;NEC_98
	jae	@f
	jmp	GPBadParm
@@:	mov	[Int15MemSize], dx
	; Fall through to GetNextParm
ifdef NEC_98
	jmp	short GPNextParm
endif   ;NEC_98

GPNextParm:
	mov	ax,cs:[GPRegSave]	; are we at the end of the line?
	cmp	al,13			; may not be needed any longer...
	je	GPExit
	cmp	al,10
	je	GPExit
ifndef NEC_98
	jmp	GPNextArg
else    ;NEC_98
	jmp     GPNextChar
endif   ;NEC_98

GPExit:
	pop	ds
	ret

GetParms    endp

; Get the next character from DS:SI, set CY if it's an EOL (CR, LF), set
; Z if it's a space

ifndef NEC_98
GPOffEOL	dw	-1
endif   ;NEC_98

	public	GPGetChar

GPGetChar	proc	near
ifndef NEC_98

	cmp	si,cs:[GPOffEOL]	; are we already at EOL?
	jnb	GPAtEOL

	lodsb				; no, get next char
	cmp	al,10			; is this the EOL?
	je	GPHitEOL
	cmp	al,13
	je	GPHitEOL

	cmp	al,' '			; set Z if blank

	clc
	ret

GPHitEOL:
	mov	cs:[GPOffEOL],si	; save EOL offset once
GPAtEOL:
else    ;NEC_98
	lodsb
	cmp	al,10
	je	@f
	cmp	al,13
	je	@f

	clc
	ret
@@:
endif   ;NEC_98
	stc
	ret

GPGetChar	endp


;*----------------------------------------------------------------------*

GPPrintIt   proc    near

	push    ds		; Save current DS
	push    cs		; Set DS=CS
	pop	ds
	mov	ah,9
	int	21h
	pop	ds		; Restore DS
	ret

GPPrintIt   endp

;*----------------------------------------------------------------------*

GPPrintAX   proc    near

	mov	cx,10
	xor	dx,dx
	div	cx
	or	ax,ax
	jz	GPAPrint
	push    dx
	call    GPPrintAX
	pop	dx
GPAPrint:
	add	dl,'0'
	mov	ah,2
	int	21h
	ret

GPPrintAX   endp

;*----------------------------------------------------------------------*
;*									*
;*  InitHandles -							*
;*									*
;*	Initialize the Extended Memory Handle Table			*
;*									*
;*  ARGS:   None							*
;*  RETS:   None							*
;*  REGS:   AX, BX, CX, and Flags are clobbered				*
;*									*
;*----------------------------------------------------------------------*

	assume	ds:_text

	public	InitHandles

InitHandles proc    near
	push	es
	mov	es,hiseg
	assume	es:funky
	mov	cx,[cHandles]

;	Init the Handle table.

	mov	bx,[KiddValley]

	xor	ax,ax
IHTabLoop:
	mov	[bx].Flags,UNUSEDFLAG
	mov	[bx].cLock,al
	mov	[bx].Base,ax
	mov	[bx].Len,ax
	if	keep_cs
	mov	[bx].Acs,ax
	endif
	add	bx,SIZE Handle
	loop    IHTabLoop

	mov	[KiddValleyTop],bx	; save top for handle validation
	pop	es
	assume	es:nothing
	ret

InitHandles endp

ifdef NEC_98
;******************************************************************************
;   Init_Ram_Window - Initialize Ram Window Memory
;
;	MS-DOS
;	Ram Window	Memory			Ram Windows	Memory
;	 80		100			80		80
;	 90		110			90		90
;	 BO		120			B0		B0
;	 A0		130			A0		A0
;
;
;
;   Author:   (sbp)
;
;   ENTRY:  REAL MODE on 386 processor (CPU ID already performed)
;   EXIT:
;
;   USED:   flags
;   STACK:
;------------------------------------------------------------------------------

Init_RamWindow	proc	near

	push	ax
	push	bx
	push	dx
	push	ds

	cli
	mov	cs:[save_ss],ss
	mov	cs:[save_sp],sp
	push	cs
	pop	ss
	mov	sp,offset EISA_stack

	mov	al, 8
	out	37h, al

	mov	ax, 8000h		; ]ڽ
	mov	bx, 4000h		; ]ڽ
	mov	cx, 4			; ]oN
	call	movebank

	mov	al,08h			; 80 BANK memory
	mov	dx,91h			; 80 BANK ram windows		"
	out	dx,al			; set RAM WINDOW

	mov	al,0ah			; A0 BANK memory
	mov	dx,93h			; A0 BANK ram window		"
	out	dx,al			; set RAM WINDOW

	xor	ax, ax
	mov	ds, ax
	test	byte ptr ds:[481h], 04h	; Q : can use shadow ram ?
	jnz	@f
	call	initshadowram
@@:
	mov	ax, 4000h
	mov	bx, 8000h
	mov	cx, 4
	call	movebank

	mov	ss, cs:[save_ss]
	mov	sp, cs:[save_sp]

	mov	al, 09h
	out	37h, al
	sti

	pop	ds
	pop	dx
	pop	bx
	pop	ax
	ret
	
Init_RamWindow	endp

;******************************************************************************
;   Init_Ram_Window_XA - Initialize Ram Window Memory
;
;	MS-DOS					Himem
;	Ram Window	Memory			Ram Windows	Memory
;	 80		100			80		TOM-40  or  TOM-20
;	 90		110			90		TOM-30  or  TOM-10
;	 BO		120			B0		TOM-20  or  120
;	 A0		130			A0		TOM-10  or  130
;
;   Author:   (sbp)
;
;   ENTRY:  REAL MODE on 286
;	    AH = main memory size in blocks of 128k
;   EXIT:
;
;   USED:   flags
;   STACK:
;------------------------------------------------------------------------------

Init_RamWindow_XA	proc	near

	sub	ah,3
	cmp	byte ptr es:[401h],ah
	ja	IRX_Start
	mov	byte ptr es:[401h],0
	ret

IRX_Start:
	push	ax
	push	bx
	push	dx
	push	ds

	cli
	mov	cs:[save_ss],ss
	mov	cs:[save_sp],sp
	push	cs
	pop	ss
	mov	sp,offset EISA_stack

	mov	al, 8
	out	37h, al

	cmp	ah,1			; main memory = 640k ?
	je	IRX_640

	mov	ax, 0a000h		; ]ڽ
	mov	bx, 4000h		; ]ڽ
	mov	cx, 2			; ]oN
	call	movebank

	mov	al,byte ptr es:[401h]
	dec	al
	shl	al,1
	add	al,10h			; al = BANK #
	mov	dx,93h			; A0 BANK ram window		"
	out	dx,al			; set RAM WINDOW

	mov	ax, 4000h
	mov	bx, 0a000h
	mov	cx, 2
	call	movebank

	dec	byte ptr es:[401h]

IRX_640:
	mov	ax, 8000h		; ]ڽ
	mov	bx, 4000h		; ]ڽ
	mov	cx, 2			; ]oN
	call	movebank

	mov	al,byte ptr es:[401h]
	dec	al
	shl	al,1
	add	al,10h			; al = BANK #
	mov	dx,91h			; 80 BANK ram windows		"
	out	dx,al			; set RAM WINDOW

	mov	ax, 4000h
	mov	bx, 8000h
	mov	cx, 2
	call	movebank

	dec	byte ptr es:[401h]

	mov	ss, cs:[save_ss]
	mov	sp, cs:[save_sp]

	mov	al, 09h
	out	37h, al
	sti

	pop	ds
	pop	dx
	pop	bx
	pop	ax
	ret

Init_RamWindow_XA	endp

;-------------------------------------------------------------------
;   movebank	move bank datat
;	entry	ax : source seg. address
;		bx : dest. seg. address
;		cx : bank count
;
;----------------------------------------------------------------

movebank proc	near
	push	es
	push	ds
	push	si
	push	di
@@:
	mov	ds, ax
	mov	es, bx
	push	cx
	mov	cx, 8000h
	cld
	xor	si, si
	xor	di, di
	rep	movsw
	pop	cx
	add	ax, 1000h		; get next bank address
	add	bx, 1000h		; get next bank address
	loop	@b
	pop	di
	pop	si
	pop	ds
	pop	es
	ret
movebank endp

;*-----------------------------------------------------------
;*  initshadowram
;*
;*
;*----------------------------------------------------------
initshadowram proc	near
	push	es
	push	di
	push	cx
	cld
	mov	ax, 8000h
	mov	es, ax
	mov	cx, 0004h
	mov	ax,8000h
	mov	es,ax
	mov	cx,0004h
l3:
	xor	di, di
	push	cx
	mov	cx, 3333h
l1:
	mov	ax, 0ff01h
	stosw
	mov	ax, 55aah
	stosw
	mov	al, 00
	stosb
	loop	l1
	stosb

	xor	di, di
	mov	cx, 3333h
l2:
	mov	ax,0ff01h
	scasw
	jnz	isr_exit
	mov	ax,55aah
	scasw
	jnz	isr_exit
	mov	al,00h
	scasb	 
	jnz	isr_exit
	loop	l2 
	mov	ax, es
	add	ax, 1000h
	mov	es, ax
	pop	cx
	loop	l3

;	clean up memory

	mov	cx, 0004h
l4:
	push	cx
	mov	ax, es
	sub	ax, 1000h
	mov	es, ax
	xor	ax, ax
	mov	di, ax
	mov	cx, 8000h
	rep	stosw
	pop	cx
	loop	l4
	xor	ax,ax
	jmp	short isr_done
isr_exit:
	mov	ax,0001 
isr_done:
	pop	cx 
	pop	di 
	pop	es 
	ret

initshadowram endp
;*----------------------------------------------------------------------*
;*									*
;*  ScanEISA - poll any EISA devices through the BIOS's Int15(0d8h)	*
;*     and add any memory we find out about to our free memory table.	*
;*     Note:  this code (including a big buffer) gets thrown out after	*
;*     completion of the initialization sequence.			*
;*									*
;*	Note:  The COMPAQ BIOS uses up 1.5K of stack during int15(d80x) *
;*		so we'll set up a separate stack while we're here	*
;*									*
;*----------------------------------------------------------------------*

save_ss	dw	0
save_sp	dw	0
EISA_Stack:

endif   ;NEC_98
_text	ends

ifdef	debug_tsr

EndStmt equ	<end	ExeStart>

STACK	segment	stack 'STACK'
	db	1024 dup (?)
STACK	ends

else

EndStmt equ	<end>

endif

	EndStmt

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\chs\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd ..
    nmake  /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH) \
	 DBCS_FLAGS="-DDBCS -DPRC"       
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\himem5.asm ===
;/* himem5.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */
	page	95,160
	title	himem5.asm - Extended Memory Moves

;
;----------------------------------------------------------------------------
;
; M001 : inserted a jmp $+2 between an out & in while reading the ISR
; M003 : fixed bug to do with not returning int 15h errors on a blockmove
;	call.
;
;----------------------------------------------------------------------------
;
	.xlist
	include	himem.inc
        include xmssvc.inc
        include vint.inc
	.list


	extrn	TopOfTextSeg:word
	extrn	hiseg:word
	extrn	pReqHdr:dword
	extrn	dd_int_loc:word
	extrn	interrupt:word


	extrn	fInHMA:byte
	extrn	EndText:byte
ifdef NEC_98
	extrn	InHMAMsg:byte
endif   ;NEC_98
_text	ends

funky	segment	word public 'funky'
	assume	cs:funky

	extrn	KiddValley:word
	extrn	KiddValleyTop:word
	extrn	end_of_hiseg:word
	extrn	textseg:word
	extrn	LEnblA20:dword
        extrn   LDsblA20:dword
        extrn   FunkyCLI:near
        extrn   FunkySTI:near


;******************************************************************************
;
; MoveBlock
;	XMM Move Extended Memory Block
;
; Entry:
;	ES:SI	Points to structure containing:
;		bCount		dd	?	; Length of block to move
;		SourceHandle	dw	?	; Handle for souce
;		SourceOffset	dd	?	; Offset into source
;		DestHandle	dw	?	; Handle for destination
;		DestOffset	dd	?	; Offset into destination
;
; Return:
;	AX = 1	Success
;	AX = 0	Failure
;		Error code in BL
;
; Registers Destroyed:
;	Flags
;
;------------------------------------------------------------------------------

    public MoveBlock

MoveBlock proc	far
	assume	ds:_text

        call    FunkySTI                        ; Be nice
	push	bp				; Set up stack frame so we
	mov	bp, sp				; can have local variables
	sub	sp, 18				; Space for local variables

; Following Ordering is used in xms.dll and should be retained
; as is or changed in both places.

Count	  = -4					; Local DWORD for byte count
SrcLinear = -8
DstLinear = -12
MEReturn  = -14				; Local WORD for return code
SrcHandle = -16
DstHandle = -18
	push	bx
	push	dx

	xor	ax, ax
	mov	[bp.MEReturn], ax		; Assume success
	mov	[bp.SrcHandle], ax
	mov	[bp.DstHandle], ax
	mov	ax, word ptr es:[si].bCount	; Pick up length specified
	mov	word ptr [bp.Count], ax
	mov	cx, word ptr es:[si].bCount+2
	mov	word ptr [bp.Count+2], cx
	or	cx, ax
	jcxz	MEM2_Exit			; Exit immediately if zero

	lea	bx, [si].SourceHandle		; Normalize Source
	call	GetLinear			; Linear address in DX:AX
	jc	MEM2_SrcError			; Have Dest Error Code

	mov	word ptr [bp.SrcLinear], ax	; Save Linear address
	mov	word ptr [bp.SrcLinear+2], dx
	mov	[bp.SrcHandle], bx		; Save Handle for Unlock

	lea	bx, [si].DestHandle		; Normalize Destination
	call	GetLinear
	jc	MEM2_Error

	mov	word ptr [bp.DstLinear], ax	; Save Linear address
	mov	word ptr [bp.DstLinear+2], dx
	mov	[bp.DstHandle], bx		; Save Handle for Unlock

	shr	word ptr [bp.Count+2], 1	; Make word count
	rcr	word ptr [bp.Count], 1
	jc	MEM2_InvCount			; Odd count not allowed

	call	LEnblA20
	cmp	ax, 1
	jne	MEM2_Error

	XMSSVC	XMS_MOVEBLOCK			; Call Worker
						; Parameters on the stack

	call	LDSblA20
	cmp	ax, 1
	jne	MEM2_Error

MEM2_Exit:
	mov	bx, [bp.SrcHandle]		; Unlock Handles if necessary
	or	bx, bx
	jz	NoSrcHandle
	dec	[bx].cLock			; Unlock Source
NoSrcHandle:
	mov	bx, [bp.DstHandle]
	or	bx, bx
	jz	NoDstHandle
	dec	[bx].cLock			; Unlock Destination
NoDstHandle:
	pop	dx
	pop	bx
	mov	ax, 1
	cmp	word ptr [bp.MEReturn], 0
	jz	MEM2_Success
	dec	ax
	mov	bl, byte ptr [bp.MEReturn]
MEM2_Success:
	mov	sp, bp				; Unwind stack
	pop	bp
	ret

MEM2_SrcError:
	cmp	bl, ERR_LENINVALID		; Invalid count
	je	MEM2_Error			;  yes, no fiddle
	sub	bl, 2				; Convert to Source error code
	jmp	short MEM2_Error
MEM2_InvCount:
	mov	bl, ERR_LENINVALID
MEM2_Error:
	mov	byte ptr [bp.MEReturn], bl	; Pass error code through
	jmp	short MEM2_Exit
MoveBlock endp

;*******************************************************************************
;
; GetLinear
;	Convert Handle and Offset (or 0 and SEG:OFFSET) into Linear address
;	Locks Handle if necessary
;
; Entry:
;	ES:BX	Points to structure containing:
;			Handle	dw
;			Offset	dd
;	[BP.Count]	Count of bytes to move
;
; Return:
;	BX	Handle of block (0 if conventional)
;	AX:DX	Linear address
;	CARRY	=> Error
;		Error code in BL
;
; Registers Destroyed:
;	Flags, CX, DI
;
;-------------------------------------------------------------------------------

GetLinear	proc	near
	push	si
        call    FunkyCLI                        ; NO INTERRUPTS
	mov	si, word ptr es:[bx+2]		; Offset from start of handle
	mov	di, word ptr es:[bx+4]		; in DI:SI
	mov	bx, word ptr es:[bx]		; Handle in bx
	or	bx, bx
	jz	GL2_Conventional

	test	[bx].Flags, USEDFLAG		; Valid Handle?
	jz	GL2_InvHandle

	mov	ax, [bx].Len			; Length of Block
	mov	cx, 1024
	mul	cx				; mul is faster
	sub	ax, si
	sbb	dx, di				; DX:AX = max possible count
	jc	GL2_InvOffset			; Base past end of block
	sub	ax, word ptr [bp.Count]
	sbb	dx, word ptr [bp.Count+2]
	jc	GL2_InvCount			; Count too big

	inc	[bx].cLock			; Lock the Handle
	mov	ax, [bx].Base
	mul	cx
	add	ax, si				; Linear address
	adc	dx, di				; in DX:AX

GL2_OKExit:
	clc
GL2_Exit:
        call    FunkySTI
	pop	si
	ret

GL2_Conventional:
	mov	ax, di				; Convert SEG:OFFSET into
	mov	dx, 16				; 24 bit address
	mul	dx
	add	ax, si
	adc	dx, 0				; DX:AX has base address
	mov	di, dx
	mov	si, ax
	add	si, word ptr [bp.Count]		; Get End of Block + 1 in DI:SI
	adc	di, word ptr [bp.Count+2]

	cmp	di, 010h			; Make sure it doesn't wrap
	ja	GL2_InvCount			;  past the end of the HMA
	jb	GL2_OKExit
	cmp	si, 0FFF0h
	jbe	GL2_OKExit			; Must be < 10FFF0h
GL2_InvCount:
	mov	bl, ERR_LENINVALID
	jmp	short GL2_Error

GL2_InvHandle:
	mov	bl, ERR_DHINVALID		; Dest handle invalid
	jmp	short GL2_Error

GL2_InvOffset:
	mov	bl, ERR_DOINVALID		; Dest Offset invalid
GL2_Error:
	stc
	jmp	short GL2_Exit

GetLinear	endp


;*----------------------------------------------------------------------*
;*									*
;*   pack_and_truncate - packs everything down into the			*
;*	lowest available memory and sets up variable for driver		*
;*	truncation, then terminates.					*
;*									*
;*----------------------------------------------------------------------*

ifdef NEC_98
HMALen		dw	?		; Length of funky (without init code)
endif   ;NEC_98
	public	pack_and_truncate
pack_and_truncate	proc	far

	assume	ds:_text,es:nothing
	push	ds
	mov	dx, offset _text:EndText	; end of text seg
	add	dx, 15
	and	dx, not 15		; size of text seg including init code

	mov	ax, TopOfTextSeg	; end of resident text seg
	or	ax, ax
	jnz	@f
	xor	di, di
	pop	es
	jmp	short InitFailed
	
@@:
	add	ax, 15
	and	ax, not 15		; size of resident text seg

	sub	dx, ax			; size of memory whole between
	shr	dx, 4			;  resident text seg and funky seg
					;  The funky seg should be moved down
					;  'dx' number of paragraphs
	mov	ax, hiseg		; Get the current seg at which funky
					;  is running from

	cmp	ax, dx			; If funky is already running from a
					;  segment value less than 'dx'
					;  number of paras funky can be
					;  moved to zero segment only
	jbe	@f
	mov	ax, dx			; ax has min of seg of funky
					;             & memory whole size in para
@@:
	or	ax, ax			; if funky is to be moved by zero
					;  paras our job is over
	jnz	@f
	mov	es, hiseg
	assume es:funky
	mov	di, es:KiddValleyTop
	jmp	NoMoveEntry
@@:
	mov	dx, hiseg		; current segment value of funky
	push	ds
	pop	es
	assume	es:_text
	mov	ds, dx			; which is our source for move
	assume	ds:nothing
	sub	dx, ax			; less the 'paras' to be shrinked
	mov	hiseg, dx		; is the new seg value of funky
	mov	es, dx			; which is our dest. for the move
	assume	es:nothing
	mov	si, HISEG_ORG
	mov	di, si
	mov	cx, end_of_hiseg
	sub	cx, si			; size of funky without ORG
	cld
	rep	movsb			; move it!!!

;;
MoveHandleTable:
	inc	di			; round to word value
	and	di,0fffeh

	mov	si,di
	assume	es:funky
	xchg	si,es:KiddValley	; replace KiddValley with new location
	mov	cx,es:KiddValleyTop
	sub	cx,si

	rep	movsb			; move the handle table down
	mov	es:KiddValleyTop,di	; update end of table
	assume	es:nothing

NoMoveEntry:
	pop	ds			; restore _text segment
	assume	ds:_text
	add	di,15			; round new segment to paragraph
	and	di,not 15

ifndef NEC_98
InitFailed:
	ifdef	debug_tsr
	mov	ax,ds			; # paragraphs to keep =
	mov	dx,es			;   (ES - DS) +
	sub	dx,ax			;      (DI >> 4) +
	mov	ax,di			;	 10h
	shr	ax,4
	add	dx,ax
	add	dx,10h			; PSP size
	mov	ax,3100h
	int	21h
	else
	lds	si,[pReqHdr]		; discard the initialization code
	mov	word ptr ds:[si].Address[0],di
	mov	word ptr ds:[si].Address[2],es
	mov	ds:[si].Status,100h ; Store return code - DONE

	pop	ax		; throw away return from InitDriver

	push	cs
	call	an_iret		; call an iret in our segment

	or	di, di
	jz	we_are_quitting

	mov	ds, textseg
	assume	ds:_text
	mov	ax, hiseg
	mov	dd_int_loc,offset Interrupt	; replace Interrupt with
						; tiny permanent stub

	mov	ax, KiddValleyTop
	sub	ax, KiddValley
	add	ax, end_of_hiseg
	sub	ax, HISEG_ORG		; size of resident funky including
	mov	cs:HMALen, ax

	mov	ax, ((multMULT shl 8)+multMULTGETHMAPTR)
	xor	bx, bx			; in case there is no HMA handler
	int	2fh
	cmp	cs:HMALen, bx
	ja	we_are_quitting

	cmp	di, HISEG_ORG
	ja	we_are_quitting

	mov	bx, cs:HMALen
	mov	ax, ((multMULT shl 8)+multMULTALLOCHMA)
	int	2fh
	cmp	di, 0ffffh
	je	we_are_quitting

	call	MoveHi

we_are_quitting:
	pop	bp
	pop	si
	pop	di
	pop	es
	pop	ds
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	ret				; far return from driver init
	endif
else    ;NEC_98
	ifdef	debug_tsr
	mov	dx,di
	shr	dx,4			; get # paragraphs to retain
	mov	ax,3100h
	int	21h
	else
InitFailed:
	lds	si,[pReqHdr]		; discard the initialization code
	mov	word ptr ds:[si].Address[0],di
	mov	word ptr ds:[si].Address[2],es
	mov	ds:[si].Status,100h ; Store return code - DONE

	pop	ax		; throw away return from InitDriver

	push	cs
	call	an_iret		; call an iret in our segment

	or	di, di
	jz	we_are_quitting

	mov	ds, textseg
	assume	ds:_text
	mov	ax, hiseg
	mov	dd_int_loc,offset Interrupt	; replace Interrupt with
						; tiny permanent stub

	mov	ax, KiddValleyTop
	sub	ax, KiddValley
	add	ax, end_of_hiseg
	sub	ax, HISEG_ORG		; size of resident funky including
	mov	HMALen, ax

	mov	ax, ((multMULT shl 8)+multMULTGETHMAPTR)
	int	2fh
	cmp	HMALen, bx
	ja	we_are_quitting

	cmp	di, HISEG_ORG
	ja	we_are_quitting

	mov	bx, HMALen
	mov	ax, ((multMULT shl 8)+multMULTALLOCHMA)
	int	2fh
	cmp	di, 0ffffh
	je	we_are_quitting

	call	MoveHi

we_are_quitting:
	pop	bp
	pop	si
	pop	di
	pop	es
	pop	ds
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	ret				; far return from driver init
	endif
endif   ;NEC_98

pack_and_truncate	endp

ifndef NEC_98
HMALen		dw	?		; Length of funky (without init code)
endif   ;NEC_98


;
;---------------------------------------------------------------------------
;
; procedure : MoveHi
;
;---------------------------------------------------------------------------
;
MoveHi	proc	near
	push	di			; remember offset in HMA
	mov	si, HISEG_ORG
ifndef NEC_98
	mov	cx, cs:HMALen
else    ;NEC_98
	mov	cx, HMALen
endif   ;NEC_98
	mov	ax, textseg
	mov	ds, ax
	assume	ds:_text
	mov	ds, hiseg
	assume	ds:nothing
	rep	movsb			; move it to HMA
	pop	di			; get back offset in HMA
	mov	ax, HISEG_ORG
	sub	ax, di
	shr	ax, 1
	shr	ax, 1
	shr	ax, 1
	shr	ax, 1
	mov	bx, es
	sub	bx, ax


	mov	ax, textseg
	mov	ds, ax			; get addressability to text seg		
	assume	ds:_text
	mov	fInHMA, 1		; Flag that we are running from HMA

	mov	hiseg, bx
	mov	es, bx

	mov	di, TopOfTextSeg	; end of resident text code
	mov	ax, textseg
	lds	si, pReqHdr
	assume	ds:nothing

	mov	word ptr ds:[si].Address[0],di
	mov	word ptr ds:[si].Address[2],ax
	
	ret
MoveHi	endp

;
an_iret proc near
        FIRET
an_iret	endp

	public	end_of_funky_seg
end_of_funky_seg:
funky	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\cht\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH) \
	 DBCS_FLAGS="-DDBCS -DTAIWAN"       
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\himem4.asm ===
;/* himem4.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; *
; * williamh 25-Sept-1992 Added RequestUMB and ReleaseUMB
; *
; * daveh 1-Feb-1994 Changed to do mem management on 32 bit side
; */
	page	95,160
	title	himem4 - block allocation stuff

	.xlist
	include	himem.inc
	include xmssvc.inc
        include vint.inc
	.list

;	The stuff we provide:

	public	Version
	public	QueryExtMemory
	public	AllocExtMemory
	public	FreeExtMemory
	public	LockExtMemory
	public	UnlockExtMemory
	public	GetExtMemoryInfo
	public	ReallocExtMemory
	public	end_of_hiseg
	public	textseg
	public	KiddValley
	public	KiddValleyTop
	public	cHandles
	public	RequestUMB
	public	ReleaseUMB

;	externals from himem.asm

	extrn	PrevInt15:dword
	extrn	Moveit:word
	extrn	fHMAMayExist:byte
	extrn	fHMAExists:byte
	extrn	winbug_fix:word
	extrn	FLclEnblA20:far
	extrn	FLclDsblA20:far
_text	ends

funky	segment	word public 'funky'
	assume	cs:funky,ds:_text

	extrn	end_of_funky_seg:near

		org	HISEG_ORG

	public	LEnblA20
	public	LDsblA20

end_of_hiseg	dw	end_of_funky_seg
textseg		dw	_text
KiddValley	dw	end_of_funky_seg; The address of the handle table
KiddValleyTop	dw	0	; end of handle table
cHandles	dw	DEFHANDLES ; number of handles
LEnblA20	dd	_text:FLclEnblA20
LDsblA20	dd	_text:FLclDsblA20
;*----------------------------------------------------------------------*
;*									*
;*  Get XMS Version Number -				FUNCTION 00h    *
;*									*
;*	Returns the XMS version number					*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX = XMS Version Number					*
;*	BX = Internal Driver Version Number				*
;*	DX = 1 if HMA exists, 0 if it doesn't				*
;*  REGS:   AX, BX and DX are clobbered					*
;*									*
;*  INTERNALLY REENTRANT						*
;*									*
;*----------------------------------------------------------------------*


Version	proc    far

	mov	ax,XMSVersion
	mov	bx,HimemVersion
	xor	dh,dh

;	Is Int 15h hooked?

	cmp	word ptr [PrevInt15][2],0	; Is the segment non-zero?
	jne     VHooked
	mov	dl,[fHMAMayExist]		; No, return the status at
	ret					;  init time.

VHooked:
	mov	dl,[fHMAExists]			; Yes, return the real status
	ret

Version	endp

;*----------------------------------------------------------------------*
;*									*
;*  QueryExtMemory -					FUNCTION 08h    *
;*									*
;*	Returns the size of the largest free extended memory block in K	*
;*									*
;*  ARGS:   None							*
;*  RETS:   AX = Size of largest free block in K.  BL = Error code	*
;*	DX = Total amount of free extended memory in K			*
;*  REGS:   AX, BX, DX, DI, SI and Flags clobbered			*
;*									*
;*  INTERNALLY REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

QueryExtMemory proc far
        
        mov     bl,0                    ; assume no error
        XMSSVC  XMS_QUERYEXTMEM
        test    dx,dx
        jne     QEM20
        
        mov     bl,ERR_OUTOMEMORY
QEM20:          
        ret

QueryExtMemory endp


;*----------------------------------------------------------------------*
;*									*
;*  AllocExtMemory -					FUNCTION 09h    *
;*									*
;*	Reserve a block of extended memory				*
;*									*
;*  ARGS:   DX = Amount of K being requested				*
;*  RETS:   AX = 1 of successful, 0 otherwise.	BL = Error Code		*
;*	DX = 16-bit handle to the allocated block			*
;*  REGS:   AX, BX, DX and Flags clobbered				*
;*									*
;*	Notice:  called internally from ReallocExtMemory		*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

hFreeBlock	dw  ?
hUnusedBlock	dw  ?

AllocExtMemoryNear proc near
AllocExtMemoryNear endp
AllocExtMemory proc far

        call     FunkyCLI              ; This is a non-reentrant function

; Scan the handle table looking for an unused handle 

	xor	ax,ax
	mov	[hUnusedBlock],ax
	mov	bx,[KiddValley]
	mov     cx,[cHandles]		; Loop through the handle table

;	Have we already found a free block which is large enough?

AEMhLoop:

	cmp     [bx].Flags,UNUSEDFLAG ; Is this block unused?
	jne     AEMNexth		; No, get the next handle

	mov	[hUnusedBlock],bx	; save this guy away
        jmp     AEMGotHandle
        
AEMNexth:
	add	bx,SIZE Handle		; go check the next handle
	loop    AEMhLoop

;	We are at the end of the handle table and we didn't an unused 
;       handle

	jmp	AEMOOHandles		; No, Case 4 - We're out of handles

AEMGotHandle:

	mov	di,[hUnusedBlock]

	XMSSVC	XMS_ALLOCBLOCK		; ax=Base and dx=Size
	or	ax,ax
	jz	AEMOOMemory

	mov	[di].Base,ax
	mov	[di].Len,dx
	mov	[di].Flags,USEDFLAG	; New.Flags = USED
 
	if	keep_cs
	mov	ax,callers_cs
	mov	[si].Acs,ax		; keep track of allocator's cs:
	endif

	mov	dx,[hUnusedBlock]
	mov	ax,1
	xor	bl,bl
	ret

AEMOOMemory:
	mov	bl,ERR_OUTOMEMORY
	jmp	short AEMErrRet

AEMOOHandles:
	mov	bl,ERR_OUTOHANDLES
AEMErrRet:
	xor	ax,ax			; Return failure
	mov	dx,ax
	ret
AllocExtMemory endp

;*----------------------------------------------------------------------*
;*									*
;*  FreeExtMemory -					FUNCTION 0Ah    *
;*									*
;*	Frees a block of extended memory				*
;*									*
;*  ARGS:   DX = 16-bit handle to the extended memory block		*
;*  RETS:   AX = 1 if successful, 0 otherwise.	BL = Error code		*
;*  REGS:   AX, BX, CX, DX, SI, DI and Flags clobbered			*
;*									*
;*	called internally from ReallocExtMemory				*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

FreeExtMemoryNear proc near
FreeExtMemoryNear endp

FreeExtMemory proc far
        call    FunkyCLI                ; This is a non-reentrant function

	call    ValidateHandle		; Make sure handle is valid
	jnc	FEMBadh
	mov	si,dx			; Move the handle into SI

	cmp	[si].cLock,0		; make sure it points to unlocked block
	jne     FEMLockedh

	mov	[si].Flags,UNUSEDFLAG	;  mark it as UNUSED
	cmp	[si].Len,0		; if zero length block
	jz	FEMExit			; done if it was zero length

	mov	ax,[si].Base
	mov	dx,[si].Len
	XMSSVC	XMS_FREEBLOCK		; ax=base dx=size in k
	or	ax,ax
	je	FEMBadh

FEMExit:

	mov     ax,1			; Return success
	xor	bl,bl
	ret

FEMBadh:
	mov	bl,ERR_INVALIDHANDLE
	jmp	short FEMErrExit

FEMLockedh:
	mov	bl,ERR_EMBLOCKED
FEMErrExit:
	xor     ax,ax			; Return failure
	ret
FreeExtMemory endp


;*----------------------------------------------------------------------*
;*									*
;*  LockExtMemory -					FUNCTION 0Ch    *
;*									*
;*	Locks a block of extended memory				*
;*									*
;*  ARGS:   DX = 16-bit handle to the extended memory block		*
;*  RETS:   AX = 1 of successful, 0 otherwise.	BL = Error code		*
;*	DX:BX = 32-bit linear address of the base of the memory block   *
;*  REGS:   AX, BX, DX and Flags clobbered				*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

LockExtMemory proc far

        call    FunkyCLI                ; This is a non-reentrant function

	call    ValidateHandle		; Is the handle valid?
	jnc     LEMBadh
	mov     bx,dx			; Move the handle into BX

;	Are we at some preposterously large limit?

	cmp	[bx].cLock,0FFh
	je	LEMOverflow

	inc	[bx].cLock		; lock the block

	mov	dx,[bx].Base		; return the 32-bit address of base
	mov	bx,dx
	shr	dx,6
	shl	bx,10

	mov	ax,1			; return success
	ret

LEMBadh:
	mov	bl,ERR_INVALIDHANDLE
	jmp	short LEMErrExit

LEMOverflow:
	mov	bl,ERR_LOCKOVERFLOW
LEMErrExit:
	xor     ax,ax			; Return failure
	mov	dx,ax
	ret

LockExtMemory endp


;*----------------------------------------------------------------------*
;*									*
;*  UnlockExtMemory -					FUNCTION 0Dh    *
;*									*
;*	Unlocks a block of extended memory				*
;*									*
;*  ARGS:   DX = 16-bit handle to the extended memory block		*
;*  RETS:   AX = 1 if successful, 0 otherwise.	BL = Error code		*
;*  REGS:   AX, BX and Flags clobbered					*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

UnlockExtMemory proc far

        call    FunkyCLI                ; This is a non-reentrant function

	call    ValidateHandle		; Is the handle valid?
	jnc     UEMBadh
	mov	bx,dx			; Move the handle into BX

	cmp	[bx].cLock,0		; is handle locked?
	je	UEMUnlocked		; No, return error

	dec	[bx].cLock		; Unlock the block

	mov     ax,1			; Return success
	xor     bl,bl
	ret

UEMUnlocked:
	mov	bl,ERR_EMBUNLOCKED
	jmp	short UEMErrExit

UEMBadh:
	mov	bl,ERR_INVALIDHANDLE
UEMErrExit:
	xor	ax,ax
	ret

UnlockExtMemory endp


;*----------------------------------------------------------------------*
;*									*
;*  GetExtMemoryInfo -					FUNCTION 0Eh    *
;*									*
;*	Gets other information about an extended memory block		*
;*									*
;*  ARGS:   DX = 16-bit handle to the extended memory block		*
;*  RETS:   AX = 1 if successful, 0 otherwise.	BL = Error code		*
;*	    BH = EMB's lock count					*
;*	    BL = Total number of unused handles in the system		*
;*	    DX = EMB's length						*
;*  REGS:   AX, BX, CX, DX and Flags clobbered				*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

GetExtMemoryInfo proc	far

        call    FunkyCLI        ; This is a non-reentrant function

	call    ValidateHandle	; is the handle valid?
	jnc     GEMBadh
	mov     si,dx		; Move the handle into SI

	xor     al,al		; count number of UNUSED handles
	mov     bx,[KiddValley]
	mov     cx,[cHandles]	; Loop through the handle table
GEMLoop:
	cmp     [bx].Flags,USEDFLAG ; Is this handle in use?
	je	GEMNexth	; Yes, continue
	inc     al		; No, increment the count
GEMNexth:
	add     bx,SIZE Handle
	loop    GEMLoop

	mov     dx,[si].Len 	; Length in DX
	mov     bh,[si].cLock	; Lock count in BH
	mov     bl,al
	mov	ax,1
	ret

GEMBadh:
	mov	bl,ERR_INVALIDHANDLE
	xor	ax,ax
	ret

GetExtMemoryInfo endp


;*----------------------------------------------------------------------*
;*									*
;*  ReallocExtMemory -					FUNCTION 0Fh    *
;*									*
;*	Reallocates a block of extended memory				*
;*									*
;*  ARGS:   DX = 16-bit handle to the extended memory block		*
;*	    BX = new size for block					*
;*  RETS:   AX = 1 if successful, 0 otherwise.	BL = Error code		*
;*  REGS:   trashes si,di,bx,cx,dx					*
;*									*
;*  INTERNALLY NON-REENTRANT						*
;*									*
;*----------------------------------------------------------------------*

;	Define our memory move structure for calling the move function

ReallocExtMemory	proc	far

        call    FunkyCLI        ; This is a non-reentrant function
        
	call    ValidateHandle	; is the handle valid?
 	mov	si,dx		; Move the handle into SI
	mov	dx,bx		; Move the new length into dx
	mov	bl,ERR_INVALIDHANDLE
	jnc     REMError

	cmp	[si].cLock,0	; We can only work on unlocked EMBs
	mov	bl,ERR_EMBLOCKED
	jnz	REMError

        mov     bx,dx
        cmp     [si].Len,bx
        je      REMExit
        
        mov     ax,[si].Base
        mov     dx,[si].Len
        XMSSVC  XMS_REALLOCBLOCK        ; ax = old base, dx = old size 
        cmp     cx,0                    ; cx = new base, bx = new size
        je      REM20
        
        mov     [si].Base,cx
        mov     [si].Len,bx
REMExit:
	mov	ax,1			; succesful return
	xor	bl,bl			; non-documented no-error return
	ret
 
REM20: 
        mov     bl,ERR_OUTOMEMORY
REMError:
	xor	ax,ax
	ret
 
ReallocExtMemory	endp


;*----------------------------------------------------------------------*
;*									*
;*  FindAdjacent unused blocks						*
;*									*
;*	Scan through handle list looking for blocks adjacent		*
;*	  to a given handle.						*
;*									*
;*  ARGS:   SI handle of original block					*
;*  RETS:   DI = handle of adjacent block below or zero if none		*
;*	BP = handle of adjacent block above or zero if none		*
;*									*
;*  TRASHES: AX,BX,CX,DX						*
;*									*
;*  messes with handle table - not reentrant - assumes ints disabled	*
;*									*
;*----------------------------------------------------------------------*

FindAdjacent	proc	near

	mov	ax,[si].Base		; look for blocks ending here
	mov	dx,[si].Len
	add	dx,ax			; and ending here

	xor	di,di			; initialize to fail condition
	mov	bp,di

	mov	bx,[KiddValley]		; prepare to loop thru handle tab
	mov	cx,[cHandles]

	push    si			; preserve original handle

FindAdj1:
	cmp	[bx].Flags,FREEFLAG
	jnz	FindAdj3		; ignore blocks that aren't UNUSED
	mov	si,[bx].Base
	cmp	dx,si			; found beg block?
	jnz	FindAdj2		;  skip if not
	mov	bp,bx			;  remember the handle
	or	di,di			; did we already find a follower?
	jnz	FindAdj9		;  we're done if so

FindAdj2:
	add	si,[bx].Len		; find length
	cmp	si,ax			; does this block end at spec addr?
	jnz	FindAdj3		;  skip if not
	mov	di,bx			;  remember the handle
	or	bp,bp			; did we already find a leader?
	jnz	FindAdj9		;  we're done if so

FindAdj3:
	add	bx,SIZE handle
	loop    FindAdj1

FindAdj9:
	pop	si			; restore original handle
	ret
;

FindAdjacent	endp


;*----------------------------------------------------------------------*
;*									*
;*  ValidateHandle -							*
;*									*
;*	Validates an extended memory block handle			*
;*									*
;*  ARGS:   DX = 16-bit handle to the extended memory block		*
;*  RETS:   Carry is set if the handle is valid				*
;*  REGS:   Preserved except the carry flag				*
;*									*
;*----------------------------------------------------------------------*

ValidateHandle proc near

	pusha			; Save everything
	mov	bx,dx		; Move the handle into BX

;	The handle must be equal to or above "KiddValley".

	cmp	bx,[KiddValley]
	jb	VHOne

;	The handle must not be above "KiddValleyTop".

	cmp	bx,[KiddValleyTop]
	ja	VHOne

;	(The handle-"KiddValley") must be a multiple of a handle's size.

	sub	dx,[KiddValley]
	mov	ax,dx
	xor	dx,dx
	mov	cx,SIZE Handle
	div	cx
	or	dx,dx		; Any remainder?
	jnz     VHOne 		; Yup, it's bad

;	Does the handle point to a currently USED block?

	cmp	[bx].Flags,USEDFLAG
	jne     VHOne 		; This handle is not being used.

;	The handle looks good to me...

	popa			; Restore everything
	stc 			; Return success
	ret

VHOne:

;	It's really bad.
	popa			; Restore everything
	clc 			; Return failure
	ret

ValidateHandle endp

BlkMovX	proc	near
	assume	ds:_text
	jmp	MoveIt
BlkMovX	endp

;-----------------------------------------------------------------------;
;This is the routine  for XMS function 16, request UMB.
;
; Input:
;	(DX) = requested size in paragraphs
;
; Output:
;	(AX) = 1 if request is granted and
;		 (BX) = segment address of the requested block
;		 (DX) = actual size allocated in paragraphs
;	     = 0 if requtest failed and
;		 (BL) = 0B0h if a smaller UMB is available
;		 (BL) = 0B1h if no UMBs are available
;		 (DX) = largest UMB available.
;Modified: AX, BX, DX
;
;NOTE:
;The funcition was implemented in the 32bits xms because
;any memory we need for house keeping purpose are kept in extented memory
;rather than in the UMB itself(DOS arena). Of course, it has the penalty
;of ring transition each time a request being made. However, the major
;allocator of UMBs is IO.SYS, the device driver of MS-DOS for devicehigh
;and loadhigh during bootstrap. This should adjust the penalty a little bits.
;
;-----------------------------------------------------------------------;
RequestUMB	proc	far
	XMSSVC	XMS_REQUESTUMB
	ret
RequestUMB	endp


;-----------------------------------------------------------------------;
;This is the routine for XMS function 17, release UMB
;
; Input:
;	(DX) = segment of the UMB block to be released
;
; Output:
;	(AX) = 1 if the block was released successfully.
;	(AX) = 0 if the block couldn't be released and
;		 (BL) = 0B2h if the given segment is invalid
; Modified: AX, BX
;
;Note:
; See note in RequestUMB
;-----------------------------------------------------------------------;

ReleaseUMB	proc	far
	XMSSVC	XMS_RELEASEUMB
	ret
ReleaseUMB	endp

        PUBLIC FunkyCLI
FunkyCLI:
        FCLI
        ret

        PUBLIC FunkySTI
FunkySTI:
        FSTI
        ret

;*----------------------------------------------------------------------*
;*									*
;*  NOTE: RequestUMB and ReleaseUMB will not be implemented by HIMEM.	*
;*									*
;*----------------------------------------------------------------------*

funky	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\cs\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\da\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\el\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\br\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: Driver XMS para DOS, verso '
        db      '0' + (HimemVersion shr 8),'.'
        db      '0' + ((HimemVersion and 0ffh) / 16)
        db      '0' + ((HimemVersion and 0ffh) mod 16)
        db      ' - '
        db      DATE_String
        db      13,10,'Especificao XMS verso 2.0'
        db      13,10,'Copyright 1988-1991 Microsoft Corp.'
        db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Sombra de RAM desativada.$'
UnsupportedROMMsg db    13,10,'AVISO: No se pode desativar a sombra de RAM '
                  db            'neste sistema.$'
ROMHookedMsg      db    13,10,'AVISO: A sombra de RAM est sendo usada e no '
                  db            'pode ser desativada.$'

BadDOSMsg       db      13,10,'ERRO: Este HIMEM.SYS  para o Windows NT.$'
NowInMsg        db      13,10,'ERRO: J h um gerenciador de memria estendida instalado.$'
On8086Msg       db      13,10,'ERRO: HIMEM.SYS requer uma mquina 80x86.$'
NoExtMemMsg     db      13,10,'ERRO: No foi encontrada memria estendida disponvel.$'
NoA20HandlerMsg db      13,10,'ERRO: No foi possvel controlar a linha A20!$'
VDISKInMsg      db      13,10,'ERRO: O alocador de memria VDISK j est instalado.$'
FlushMsg        db      13,10,7,'       O driver XMS no est instalado.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' identificadores de memria estendida disponveis.$'
HMAMINMsg       db      13,10,'O tamanho mnimo da rea de memria alta foi definido como $'
KMsg            db      'KB.$'
InsA20Msg       db      13,10,'Instalado o identificador A20 de nmero $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'Instalado o identificador A20 externo.$'

NoHMAMsg        db      13,10,'AVISO: A rea de memria alta no est disponvel.'
                db      13,10,'$'
A20OnMsg        db      13,10,'AVISO: A linha A20 j estava ativada.'
                db      13,10,'$'

BadArgMsg       db      13,10,'AVISO: Parmetro invlido ignorado: $'

HMAOKMsg        db      13,10,'A rea de memria alta de 64KB est disponvel.'
                db      13,10,13,10,'$'

                db      'Este programa  propriedade da Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\es\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\fi\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\cht\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg	db	13,10,'ERROR: This HIMEM.SYS is for Windows NT.$'
NowInMsg	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' extended memory handles available.$'
HMAMINMsg	db	13,10,'Minimum HMA size set to $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installed A20 handler number $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installed external A20 handler.$'

NoHMAMsg	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\cs\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


        page    95,160
        title   himem3 - Initialization messages

        .xlist
        include himem.inc
        .list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

        public  SignOnMsg
        public  ROMDisabledMsg
        public  UnsupportedROMMsg
        public  ROMHookedMsg
        public  BadDOSMsg
        public  NowInMsg
        public  On8086Msg
        public  NoExtMemMsg
        public  FlushMsg
        public  StartMsg
        public  HandlesMsg
        public  HMAMINMsg
        public  KMsg
        public  NoHMAMsg
        public  A20OnMsg
        public  HMAOKMsg
        public  InsA20Msg
        public  InsA20EndMsg
        public  InsExtA20msg
        public  NoA20HandlerMsg
        public  VDISKInMsg
        public  BadArgMsg
        public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: Ovlada DOS XMS, verze '
        db      '0' + (HimemVersion shr 8),'.'
        db      '0' + ((HimemVersion and 0ffh) / 16)
        db      '0' + ((HimemVersion and 0ffh) mod 16)
        db      ' - '
        db      DATE_String
        db      13,10,'Specifikace XMS, verze 2.0'
        db      13,10,'Copyright 1988-1991 Microsoft Corp.'
        db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Stnov pam؜ RAM je vypnuta.$'
UnsupportedROMMsg db    13,10,'UPOZORNN: Vypnut stnov pamti RAM nen '
                  db            'na tomto systmu podporovno.$'
ROMHookedMsg      db    13,10,'UPOZORNN: Stnov pam؜ RAM je pouvna '
                  db            'a nelze ji vypnout.$'

BadDOSMsg       db      13,10,'CHYBA: Tato verye HIMEM.SYS je urena pro systm Windows NT.$'
NowInMsg        db      13,10,'CHYBA: Sprvce rozen pamti je ji nainstalovn.$'
On8086Msg       db      13,10,'CHYBA: HIMEM.SYS vyaduje pota na bzi 80x86.$'
NoExtMemMsg     db      13,10,'CHYBA: Nebyla nalezena voln rozen pam؜.$'
NoA20HandlerMsg db      13,10,'CHYBA: Nelze ovldnout linku A20!$'
VDISKInMsg      db      13,10,'CHYBA: Aloktor pamti VDISK je ji nainstalovn.$'
FlushMsg        db      13,10,7,'       Nen nainstalovn ovlada XMS.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' popisova rozen pamti k dispozici.$'
HMAMINMsg       db      13,10,'Minimln velikost HMA nastavena na $'
KMsg            db      'kB.$'
InsA20Msg       db      13,10,'Nainstalovn ovlada linky A20 slo $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'Nainstalovn extern ovlada linky A20.$'

NoHMAMsg        db      13,10,'UPOZORNN: Horn oblast pamti (HMA) je nedostupn.'
                db      13,10,'$'
A20OnMsg        db      13,10,'UPOZORNN: Linka A20 ji byla aktivovna.'
                db      13,10,'$'

BadArgMsg       db      13,10,'UPOZORNN: Neplatn parametr bude ignorovn: $'

HMAOKMsg        db      13,10,'Je volnch 64 kB horn oblasti pamti (HMA).'
                db      13,10,13,10,'$'

                db      'Tento program je majetkem spolenosti Microsoft Corporation.'

; end of material subject to translation


EndText         label   byte
_text   ends
        end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\chp\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg	db	13,10,'ERROR: This HIMEM.SYS is for Windows NT.$'
NowInMsg	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' extended memory handles available.$'
HMAMINMsg	db	13,10,'Minimum HMA size set to $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installed A20 handler number $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installed external A20 handler.$'

NoHMAMsg	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\chs\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg	db	13,10,'ERROR: This HIMEM.SYS is for Windows NT.$'
NowInMsg	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' extended memory handles available.$'
HMAMINMsg	db	13,10,'Minimum HMA size set to $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installed A20 handler number $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installed external A20 handler.$'

NoHMAMsg	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\fr\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\da\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page    95,160
	title   himem3 - Initialization messages

	.xlist
	include himem.inc
	.list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

	public  SignOnMsg
	public  ROMDisabledMsg
	public  UnsupportedROMMsg
	public  ROMHookedMsg
	public  BadDOSMsg
	public  NowInMsg
	public  On8086Msg
	public  NoExtMemMsg
	public  FlushMsg
	public  StartMsg
	public  HandlesMsg
	public  HMAMINMsg
	public  KMsg
	public  NoHMAMsg
	public  A20OnMsg
	public  HMAOKMsg
	public  InsA20Msg
	public  InsA20EndMsg
	public  InsExtA20msg
	public  NoA20HandlerMsg
	public  VDISKInMsg
	public  BadArgMsg
	public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: DOS XMS Driver, Version '
	db      '0' + (HimemVersion shr 8),'.'
	db      '0' + ((HimemVersion and 0ffh) / 16)
	db      '0' + ((HimemVersion and 0ffh) mod 16)
	db      ' - '
	db      DATE_String
	db      13,10,'XMS Specification Version 2.0'
	db      13,10,'Copyright 1988-1991 Microsoft Corp.'
	db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Shadow RAM er deaktiveret.$'
UnsupportedROMMsg db    13,10,'ADVARSEL: Deaktivering af Shadow RAM'
		  db            'understttes ikke af systemet.$'
ROMHookedMsg      db    13,10,'ADVARSEL: Shadow RAM er i brug og kan'
		  db            'ikke deaktiveres.$'

BadDOSMsg       db      13,10,'FEJL: Dette er en Windows NT-version af HIMEM.SYS.$'
NowInMsg        db      13,10,'FEJL: Udvidet hukommelsesstyring er allerede installeret.$'
On8086Msg       db      13,10,'FEJL: Himem.sys krver en 80x86-baseret maskine.$'
NoExtMemMsg     db      13,10,'FEJL: Der er ikke tilgngelig udvidet hukommelse.$'
NoA20HandlerMsg db      13,10,'FEJL: A20-linjen kan ikke styres!$'
VDISKInMsg      db      13,10,'FEJL: VDISK-hukommelsesallokator er allerede installeret.$'
FlushMsg        db      13,10,7,'       XMS-driver er ikke installeret.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' Handles til udvidet hukommelse er tilgngelig.$'
HMAMINMsg       db      13,10,'Minimum HMA-strrelse er sat til $'
KMsg            db      'K.$'
InsA20Msg       db      13,10,'A20 handle-nummer er installeret.$'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'Ekstern A20-handler er installeret.$'

NoHMAMsg        db      13,10,'ADVARSEL: HIMEM-omrdet er utilgngeligt.'
		db      13,10,'$'
A20OnMsg        db      13,10,'ADVARSEL: A20-linjen var allerede aktiv.'
		db      13,10,'$'

BadArgMsg       db      13,10,'ADVARSEL: Ugyldig parameter ignoreret: $'

HMAOKMsg        db      13,10,'64K HIMEM er tilgngeligt.'
		db      13,10,13,10,'$'

		db      'Dette program tilhrer Microsoft Corporation.'

; end of material subject to translation


EndText         label   byte
_text	ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\el\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page    95,160
	title   himem3 - Initialization messages

	.xlist
	include himem.inc
	.list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

	public  SignOnMsg
	public  ROMDisabledMsg
	public  UnsupportedROMMsg
	public  ROMHookedMsg
	public  BadDOSMsg
	public  NowInMsg
	public  On8086Msg
	public  NoExtMemMsg
	public  FlushMsg
	public  StartMsg
	public  HandlesMsg
	public  HMAMINMsg
	public  KMsg
	public  NoHMAMsg
	public  A20OnMsg
	public  HMAOKMsg
	public  InsA20Msg
	public  InsA20EndMsg
	public  InsExtA20msg
	public  NoA20HandlerMsg
	public  VDISKInMsg
	public  BadArgMsg
	public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: 暨 㚞   DOS XMS, 롛 '
	db      '0' + (HimemVersion shr 8),'.'
	db      '0' + ((HimemVersion and 0ffh) / 16)
	db      '0' + ((HimemVersion and 0ffh) mod 16)
	db      ' - '
	db      DATE_String
	db      13,10,' XMS 롛 2.0'
	db      13,10,' 飘 1988-1991 Microsoft Corp.'
	db      13,10,'$'

ROMDisabledMsg    db    13,10,  ' 雞 RAM 夘 ⤞.$'
UnsupportedROMMsg db    13,10,':  垩  雜 RAM '
		  db            ' 坜    穫.$'
ROMHookedMsg      db    13,10,':  雞 RAM 嫘    '
		  db            ' .$'

BadDOSMsg       db      13,10,':   HIMEM.SYS 夘  Windows NT.$'
NowInMsg        db      13,10,': 뤘 暨 娠 㣞 Extended ⮜ 㛞 .$'
On8086Msg       db      13,10,':  HIMEM.SYS   80x86 .$'
NoExtMemMsg     db      13,10,':  ⟞ ⩠ 㣞 extended.$'
NoA20HandlerMsg db      13,10,':  夘   ⢜   A20 !$'
VDISKInMsg      db      13,10,':  暨 騞 㣞 VDISK ⮜ 㛞 .$'
FlushMsg        db      13,10,7,'       暨 㚞   XMS  ៞.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      '  填   㣞 extended 夘 ⩠.$'
HMAMINMsg       db      13,10,' ⚜   㣞 High (HMA) 婟  $'
KMsg            db      'K.$'
InsA20Msg       db      13,10,' ៞ 填  A20 $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'៞ ૜ 填  A20.$'

NoHMAMsg        db      13,10,':   㣞 High  夘 ⩠.'
		db      13,10,'$'
A20OnMsg        db      13,10,':   A20 㫘 㛞 ⤞.'
		db      13,10,'$'

BadArgMsg       db      13,10,':   ⚡ ᣜ ⭟: $'

HMAOKMsg        db      13,10,' 64K  㣞 High 夘 ⩠.'
		db      13,10,13,10,'$'

		db      '  暨 㡜  Microsoft Corporation.'

; end of material subject to translation


EndText         label   byte
_text   ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\ger\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH)
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\hu\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\it\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\jpn\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH) \
	 DBCS_FLAGS="-DDBCS -DJAPAN"       
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\es\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: controlador XMS para DOS, versin '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'Especificacin XMS versin 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'RAM sombra deshabilitada.$'
UnsupportedROMMsg db	13,10,'ADVERTENCIA: la deshabilitacin de la RAM sombra no est '
		  db		'permitida en este sistema.$'
ROMHookedMsg	  db	13,10,'ADVERTENCIA: se est usando la RAM sombra y no '
		  db		'se puede deshabilitar.$'

BadDOSMsg	db	13,10,'ERROR: este HIMEM.SYS es para Windows NT.$'
NowInMsg	db	13,10,'ERROR: ya hay instalado un gestor de memoria extendida.$'
On8086Msg	db	13,10,'ERROR: HIMEM.SYS requiere una mquina basada en 80x86.$'
NoExtMemMsg	db	13,10,'ERROR: no se ha encontrado memoria extendida disponible.$'
NoA20HandlerMsg db	13,10,'ERROR: no se ha podido controlar la lnea A20$'
VDISKInMsg	db	13,10,'ERROR: el asignador de memoria VDISK ya est instalado.$'
FlushMsg	db	13,10,7,'       El controlador de XMS no est instalado.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' existen identificadores de memoria extendida disponibles.$'
HMAMINMsg	db	13,10,'Tamao mnimo de HMA fijado en $'
KMsg		db	'KB.$'
InsA20Msg	db	13,10,'Se ha instalado el identificador de A20 nmero $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Se ha instalado el identificador externo de A20.$'

NoHMAMsg	db	13,10,'ADVERTENCIA: la memoria alta no est disponible.'
		db	13,10,'$'
A20OnMsg	db	13,10,'ADVERTENCIA: la lnea A20 ya estaba activada.'
		db	13,10,'$'

BadArgMsg	db	13,10,'ADVERTENCIA: se ha omitido el parmetro no vlido: $'

HMAOKMsg	db	13,10,'Los 64 KB de memoria alta estn disponibles.'
		db	13,10,13,10,'$'

		db	'Este programa es propiedad de Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\kor\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH) \
	 DBCS_FLAGS="-DDBCS -DKOREA"       
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\nec_98\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH) \
	 DBCS_FLAGS="-DDBCS -DJAPAN -DNEC_98"
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\fr\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: Pilote XMS DOS, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'Spcification XMS Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM dsactive.$'
UnsupportedROMMsg db	13,10,'AVERTISSEMENT : Dsactivation de shadow RAM non '
		  db		'prise en charge sur ce systme.$'
ROMHookedMsg	  db	13,10,'AVERTISSEMENT : La shadow RAM est utilise et '
		  db		'ne peut tre dsactive.$'

BadDOSMsg	db	13,10,'ERREUR : Cet HIMEM.SYS est pour Windows NT.$'
NowInMsg	db	13,10,'ERREUR : Un gestionnaire de mmoire tendue est dj install.$'
On8086Msg	db	13,10,'ERREUR : HIMEM.SYS ncessite une machine  base de 80x86.$'
NoExtMemMsg	db	13,10,'ERREUR : Aucune mmoire tendue disponible n''a t trouve.$'
NoA20HandlerMsg db	13,10,'ERREUR : Impossible de contrler la ligne A20!$'
VDISKInMsg	db	13,10,'ERREUR : Allocateur de mmoire VDISK dj install.$'
FlushMsg	db	13,10,7,'       Pilote XMS non install.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' handles de mmoire tendue disponible.$'
HMAMINMsg	db	13,10,'Taille minimale de HMA dfinie  $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Gestionnaire A20 install numro $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Gestionnaire externe A20 install.$'

NoHMAMsg	db	13,10,'AVERTISSEMENT : La mmoire haute (HMA) n''est pas disponible.'
		db	13,10,'$'
A20OnMsg	db	13,10,'AVERTISSEMENT : La ligne A20 a dj t active.'
		db	13,10,'$'

BadArgMsg	db	13,10,'AVERTISSEMENT : Paramtre non valide ignor: $'

HMAOKMsg	db	13,10,'64 Ko de mmoire haute (HMA) sont disponibles.'
		db	13,10,13,10,'$'

		db	'Ce programme est la proprit de Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\fi\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page    95,160
	title   himem3 - Initialization messages

	.xlist
	include himem.inc
	.list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

	public  SignOnMsg
	public  ROMDisabledMsg
	public  UnsupportedROMMsg
	public  ROMHookedMsg
	public  BadDOSMsg
	public  NowInMsg
	public  On8086Msg
	public  NoExtMemMsg
	public  FlushMsg
	public  StartMsg
	public  HandlesMsg
	public  HMAMINMsg
	public  KMsg
	public  NoHMAMsg
	public  A20OnMsg
	public  HMAOKMsg
	public  InsA20Msg
	public  InsA20EndMsg
	public  InsExtA20msg
	public  NoA20HandlerMsg
	public  VDISKInMsg
	public  BadArgMsg
	public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: DOS XMS-ohjain, versio '
	db      '0' + (HimemVersion shr 8),'.'
	db      '0' + ((HimemVersion and 0ffh) / 16)
	db      '0' + ((HimemVersion and 0ffh) mod 16)
	db      ' - '
	db      DATE_String
	db      13,10,'XMS Specification versio 2.0'
	db      13,10,'Copyright 1988 - 1991 Microsoft Corp.'
	db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Shadow RAM on poistettu kytst.$'
UnsupportedROMMsg db    13,10,'VAROITUS: Shadow RAM -muistin poistamista kytst ei tueta '
		  db            'tss jrjestelmss.$'
ROMHookedMsg      db    13,10,'VAROITUS: Shadow RAM on kytss eik sit '
		  db            'voi poistaa kytst.$'

BadDOSMsg       db      13,10,'VIRHE: Tm HIMEM.SYS on Windows 2000 -kyttjrjestelmlle.$'
NowInMsg        db      13,10,'VIRHE: EMM on jo asennettuna.$'
On8086Msg       db      13,10,'VIRHE: HIMEM.SYS vaatii 80x86-pohjaisen tietokoneen.$'
NoExtMemMsg     db      13,10,'VIRHE: Kytettviss olevaa jatkomuistia ei lydy.$'
NoA20HandlerMsg db      13,10,'VIRHE: Rivi A20 ei voi valvoa!$'
VDISKInMsg      db      13,10,'VIRHE: VDISK on jo asennettuna.$'
FlushMsg        db      13,10,7,'       XMS-ohjainta ei ole asennettu.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' jatkomuistikahvoja kytettviss.$'
HMAMINMsg       db      13,10,'Ylmuistialueen  vhimmiskooksi on asetettu $'
KMsg            db      'K.$'
InsA20Msg       db      13,10,'Asennettu A20-ksitttelij numero $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'Asennettu ulkoinen A20-ksitttelij.$'

NoHMAMsg        db      13,10,'VAROITUS: Ylmuistialue ei ole kytettviss.'
		db      13,10,'$'
A20OnMsg        db      13,10,'VAROITUS: A20-rivi oli jo otettkytss.'
		db      13,10,'$'

BadArgMsg       db      13,10,'VAROITUS: Virheellinen parametri on jtetty huomiotta: $'

HMAOKMsg        db      13,10,'64 kt:n ylmuistialue on kytettviss.'
		db      13,10,13,10,'$'

		db      'Tm ohjelma on Microsoft Corporationin omaisuutta.'

; end of material subject to translation


EndText         label   byte
_text   ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\nl\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\hu\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


        page    95,160
        title   himem3 - Initialization messages

        .xlist
        include himem.inc
        .list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

        public  SignOnMsg
        public  ROMDisabledMsg
        public  UnsupportedROMMsg
        public  ROMHookedMsg
        public  BadDOSMsg
        public  NowInMsg
        public  On8086Msg
        public  NoExtMemMsg
        public  FlushMsg
        public  StartMsg
        public  HandlesMsg
        public  HMAMINMsg
        public  KMsg
        public  NoHMAMsg
        public  A20OnMsg
        public  HMAOKMsg
        public  InsA20Msg
        public  InsA20EndMsg
        public  InsExtA20msg
        public  NoA20HandlerMsg
        public  VDISKInMsg
        public  BadArgMsg
        public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: DOS XMS illesztprogram. Verziszm: '
        db      '0' + (HimemVersion shr 8),'.'
        db      '0' + ((HimemVersion and 0ffh) / 16)
        db      '0' + ((HimemVersion and 0ffh) mod 16)
        db      ' - '
        db      DATE_String
        db      13,10,'XMS Specification Version 2.0'
        db      13,10,'Copyright 1988-1991 Microsoft Corp.'
        db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Shadow RAM letiltva.$'
UnsupportedROMMsg db    13,10,'FIGYELMEZTETS: A shadow RAM letiltsa nem tmogatott '
                  db            'ezen a szmtgpen.$'
ROMHookedMsg      db    13,10,'FIGYELMEZTETS: A shadow RAM hasznlatban van, ezrt '
                  db            'nem lehet letiltani.$'

BadDOSMsg       db      13,10,'HIBA: ez a HIMEM.SYS Windows NT-hez hasznlhat.$'
NowInMsg        db      13,10,'HIBA: a kiterjesztett memriakezel mr teleptve van.$'
On8086Msg       db      13,10,'HIBA: a HIMEM.SYS hasznlathoz 80x86 alap gp szksges.$'
NoExtMemMsg     db      13,10,'HIBA: nem tallhat szabad kiterjesztett memria.$'
NoA20HandlerMsg db      13,10,'HIBA: az A20 cmvezetk nem vezrelhet!$'
VDISKInMsg      db      13,10,'HIBA: a VDISK memriafoglal mr teleptve van.$'
FlushMsg        db      13,10,7,'      az XMS illesztprogram teleptse megszaktva.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' szabad kiterjesztettmemria-ler.$'
HMAMINMsg       db      13,10,'A HMA minimlis mrete: $'
KMsg            db      'K.$'
InsA20Msg       db      13,10,'A teleptett A20 kezel szma $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'Teleptett kls A20 kezel.$'

NoHMAMsg        db      13,10,'FIGYELEM: a Fels memriaterlet nem rhet el.'
                db      13,10,'$'
A20OnMsg        db      13,10,'FIGYELEM: az A20 cmvezetk mr engedlyezve van.'
                db      13,10,'$'

BadArgMsg       db      13,10,'FIGYELEM: Hibs paramter (figyelmen kvl hagyva): $'

HMAOKMsg        db      13,10,'64K szabad fels memria.'
                db      13,10,13,10,'$'

                db      'A program a Microsoft Corporation tulajdona.'

; end of material subject to translation


EndText         label   byte
_text   ends
        end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\it\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: Driver XMS DOS, versione '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'Specifica XMS versione 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'RAM shadow disattivato.$'
UnsupportedROMMsg db	13,10,'AVVISO: Disattivazione RAM shadow non '
		  db		'supportata da questo sistema.$'
ROMHookedMsg	  db	13,10,'AVVISO: RAM shadow in uso e non '
		  db		'disattivabile.$'

BadDOSMsg	db	13,10,'ERRORE: Questo HIMEM.SYS  per Windows NT.$'
NowInMsg	db	13,10,'ERRORE: Un gestore di memoria estesa  gi installato.$'
On8086Msg	db	13,10,'ERRORE: HIMEM.SYS richiede un computer 80x86.$'
NoExtMemMsg	db	13,10,'ERRORE: Impossibile trovare memoria estesa disponibile.$'
NoA20HandlerMsg db	13,10,'ERRORE: A20 Line non controllabile!$'
VDISKInMsg	db	13,10,'ERRORE: Allocatore di memoria VDISKx gi installato.$'
FlushMsg	db	13,10,7,'       Driver XMS non installato.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' handle di memoria estesa disponibili.$'
HMAMINMsg	db	13,10,'Dimensione minima HMA impostata a $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Gestore A20 installato numero $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Gestore A20 esterno installato.$'

NoHMAMsg	db	13,10,'AVVISO: Area di memoria alta non disponibile.'
		db	13,10,'$'
A20OnMsg	db	13,10,'AVVISO: A20 Line gi attivato.'
		db	13,10,'$'

BadArgMsg	db	13,10,'AVVISO: Parametro non valido ignorato: $'

HMAOKMsg	db	13,10,'64K disponibili nell''area di memoria alta.'
		db	13,10,13,10,'$'

		db	'Questo programma  di propriet della Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\ger\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS-XMS-Treiber, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS-Spezifikation, Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM deaktiviert.$'
UnsupportedROMMsg db	13,10,'VORSICHT: Shadow RAM-Deaktivierung wird '
		  db		'auf diesem System nicht untersttzt.$'
ROMHookedMsg	  db	13,10,'VORSICHT: Shadow RAM wird verwendet und kann '
		  db		'nicht deaktiviert werden.$'

BadDOSMsg	db	13,10,'FEHLER: Die Datei HIMEM.SYS ist fr Windows NT.$'
NowInMsg	db	13,10,'FEHLER: Ein Erweiterungsspeicher-Manager ist bereits installiert.$'
On8086Msg	db	13,10,'FEHLER: HIMEM.SYS verlangt ein 80x86-basiertes System.$'
NoExtMemMsg	db	13,10,'FEHLER: Es wurde kein verfgbarer Erweiterungsspeicher gefunden.$'
NoA20HandlerMsg db	13,10,'FEHLER: Die A20-Leitung kann nicht gesteuert werden!$'
VDISKInMsg	db	13,10,'FEHLER: VDISK-Speicher-Zuordner (memory allocator) ist bereits installiert.$'
FlushMsg	db	13,10,7,'       XMS-Treiber ist nicht installiert.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' Erweiterungsspeicher-Steuerprogramm verfgbar.$'
HMAMINMsg	db	13,10,'Minimale HMA-Gre festgelegt auf $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installierte A20-Steuerprogramm-Nummer $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installiertes externes A20-Steuerprogramm.$'

NoHMAMsg	db	13,10,'VORSICHT: Der obere Speicherbereich (HMA) ist nicht verfgbar.'
		db	13,10,'$'
A20OnMsg	db	13,10,'VORSICHT: Die A20-Leitung war bereits deaktiviert.'
		db	13,10,'$'

BadArgMsg	db	13,10,'VORSICHT: Ungltiger Parameter ignoriert: $'

HMAOKMsg	db	13,10,'64 KB oberer Speicherbereich (HMA) sind verfgbar.'
		db	13,10,13,10,'$'

		db	'Dieses Programm ist Eigentum der Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\no\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\pl\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\kor\messages.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1988-1991,1993
; *                      All Rights Reserved.
; */
	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
        public  BadArgMsg
	public	EndText

ifdef BILINGUAL
	public	SignOnMsg2
	public	ROMDisabledMsg2
	public	UnsupportedROMMsg2
	public	ROMHookedMsg2
	public	BadDOSMsg2
	public	NowInMsg2
	public	On8086Msg2
	public	NoExtMemMsg2
	public	FlushMsg2
	public	StartMsg2
	public	HandlesMsg2
	public	HMAMINMsg2
	public	KMsg2
	public	NoHMAMsg2
	public	A20OnMsg2
	public	HMAOKMsg2
	public	InsA20Msg2
	public	InsA20EndMsg2
	public	InsExtA20msg2
	public	NoA20HandlerMsg2
	public	VDISKInMsg2
	public	BadArgMsg2
endif


; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS ̹,  '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS   2.0'
	db	13,10,'Copyright 1988-1991,1993 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	' RAM  .$'
UnsupportedROMMsg db	13,10,':  ýۿ  RAM  ϰ    ʽϴ.$'
ROMHookedMsg	  db	13,10,':  RAM  ̶  ʰ   ϴ.$'

BadDOSMsg	db	13,10,': HIMEM.SYS  3.00 ̻ DOS ʿ մϴ.$'
NowInMsg	db	13,10,':  Ȯ ޸ ڰ ̹ ġǾ ֽϴ.$'
On8086Msg	db	13,10,': HIMEM.SYS 80x86  ý ʿ մϴ.$'
NoExtMemMsg	db	13,10,':   ִ  Ȯ ޸𸮰 ϴ.$'
NoA20HandlerMsg db	13,10,': A20    ϴ!$'
VDISKInMsg	db	13,10,': VDISK ޸ ҴⰡ ̹ ġǾ ֽϴ.$'
FlushMsg	db	13,10,7,'       XMS ̹ ġ ʾҽϴ.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	'  Ȯ ޸ ڵ  .$'
HMAMINMsg	db	13,10,'ּ HMA ũ : $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'ġ A20 ڵ鷯 ȣ $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'ܺ A20 ڵ鷯 ġ.$'

NoHMAMsg	db	13,10,':  ޸    ϴ.'
		db	13,10,'$'
A20OnMsg	db	13,10,': A20  ̹   ְ Ǿ ֽϴ.'
		db	13,10,'$'

BadArgMsg       db      13,10,': ùٸ  Ű  մϴ: $'

HMAOKMsg	db	13,10,'64K  ޸    ֽϴ.'
		db	13,10,13,10,'$'

		db	' α׷ Microsoft Corporation Դϴ.'

ifdef BILINGUAL

SignOnMsg2 db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991,1993 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg2	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg2 db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg2	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg2	db	13,10,'ERROR: HIMEM.SYS requires DOS 3.00 or higher.$'
NowInMsg2	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg2	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg2	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg2 db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg2	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg2	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg2	db	13,10,'$'
HandlesMsg2	db	' extended memory handles available.$'
HMAMINMsg2	db	13,10,'Minimum HMA size set to $'
KMsg2		db	'K.$'
InsA20Msg2	db	13,10,'Installed A20 handler number $'
InsA20EndMsg2	db	'.$'
InsExtA20Msg2	db	13,10,'Installed external A20 handler.$'

NoHMAMsg2	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg2	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg2	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg2	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'
endif

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\psu\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\psu\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg	db	13,10,'ERROR: This HIMEM.SYS is for Windows NT.$'
NowInMsg	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' extended memory handles available.$'
HMAMINMsg	db	13,10,'Minimum HMA size set to $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installed A20 handler number $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installed external A20 handler.$'

NoHMAMsg	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\pt\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\ru\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\jpn\messages.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1988-1991,1993
; *                      All Rights Reserved.
; */
	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
        public  BadArgMsg
	public	EndText

ifdef BILINGUAL
	public	SignOnMsg2
	public	ROMDisabledMsg2
	public	UnsupportedROMMsg2
	public	ROMHookedMsg2
	public	BadDOSMsg2
	public	NowInMsg2
	public	On8086Msg2
	public	NoExtMemMsg2
	public	FlushMsg2
	public	StartMsg2
	public	HandlesMsg2
	public	HMAMINMsg2
	public	KMsg2
	public	NoHMAMsg2
	public	A20OnMsg2
	public	HMAOKMsg2
	public	InsA20Msg2
	public	InsA20EndMsg2
	public	InsExtA20msg2
	public	NoA20HandlerMsg2
	public	VDISKInMsg2
	public	BadArgMsg2
endif


; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMSײ, ްޮ '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMSKi ްޮ 2.0'
	db	13,10,'Copyright 1988-1991,1993 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Vh[RAM ͖ł.$'
UnsupportedROMMsg db	13,10,': ̃VXeł, Vh[RAM ̖T|[gĂ܂.$'
ROMHookedMsg	  db	13,10,': Vh[RAM ͎gp, ɂł܂.$'

BadDOSMsg	db	13,10,'G[: HIMEM.SYS , 3.00ȏ DOSł삵܂.$'
NowInMsg	db	13,10,'G[: GNXeh}l[Włɑgݍ܂Ă܂.$'
On8086Msg	db	13,10,'G[: HIMEM.SYS , 80x86 x[X̋@BKvƂ܂.$'
NoExtMemMsg	db	13,10,'G[: gp\ȃGNXeh܂.$'
NoA20HandlerMsg db	13,10,'G[: A20C̐䂪ł܂I$'
VDISKInMsg	db	13,10,'G[: VDISK tłɑgݍ܂Ă܂.$'
FlushMsg	db	13,10,7,'       XMShCo͑gݍ܂܂.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' GNXehnhLɂȂ܂.$'
HMAMINMsg	db	13,10,'ŏ HMA TCYݒ肵܂ $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'A20nhݒ肵܂ $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'O A20nhgݍ݂܂.$'

NoHMAMsg	db	13,10,': nC͖̈ł.'
		db	13,10,'$'
A20OnMsg	db	13,10,': A20C͂łɗLɂȂĂ܂.'
		db	13,10,'$'

BadArgMsg       db      13,10,': ȃp[^̂Ŗ܂: $'

HMAOKMsg	db	13,10,'64K nC̈͗Lł.'
		db	13,10,13,10,'$'

		db	'̃vOɊւ؂̌, }CN\tgЂۗLĂ܂.'

ifdef BILINGUAL

SignOnMsg2 db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991,1993 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg2	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg2 db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg2	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg2	db	13,10,'ERROR: HIMEM.SYS requires DOS 3.00 or higher.$'
NowInMsg2	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg2	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg2	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg2 db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg2	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg2	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg2	db	13,10,'$'
HandlesMsg2	db	' extended memory handles available.$'
HMAMINMsg2	db	13,10,'Minimum HMA size set to $'
KMsg2		db	'K.$'
InsA20Msg2	db	13,10,'Installed A20 handler number $'
InsA20EndMsg2	db	'.$'
InsExtA20Msg2	db	13,10,'Installed external A20 handler.$'

NoHMAMsg2	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg2	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg2	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg2	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'
endif

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\sv\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\nec_98\messages.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1988-1991,1993
; *                      All Rights Reserved.
; */
	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

ifndef	NEC_98

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
        public  BadArgMsg
	public	EndText

ifdef BILINGUAL
	public	SignOnMsg2
	public	ROMDisabledMsg2
	public	UnsupportedROMMsg2
	public	ROMHookedMsg2
	public	BadDOSMsg2
	public	NowInMsg2
	public	On8086Msg2
	public	NoExtMemMsg2
	public	FlushMsg2
	public	StartMsg2
	public	HandlesMsg2
	public	HMAMINMsg2
	public	KMsg2
	public	NoHMAMsg2
	public	A20OnMsg2
	public	HMAOKMsg2
	public	InsA20Msg2
	public	InsA20EndMsg2
	public	InsExtA20msg2
	public	NoA20HandlerMsg2
	public	VDISKInMsg2
	public	BadArgMsg2
endif


; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMSײ, ްޮ '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMSKi ްޮ 2.0'
	db	13,10,'Copyright 1988-1991,1993 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Vh[RAM ͖ł.$'
UnsupportedROMMsg db	13,10,': ̃VXeł, Vh[RAM ̖T|[gĂ܂.$'
ROMHookedMsg	  db	13,10,': Vh[RAM ͎gp, ɂł܂.$'

BadDOSMsg	db	13,10,'G[: HIMEM.SYS , 3.00ȏ DOSł삵܂.$'
NowInMsg	db	13,10,'G[: GNXeh}l[Włɑgݍ܂Ă܂.$'
On8086Msg	db	13,10,'G[: HIMEM.SYS , 80x86 x[X̋@BKvƂ܂.$'
NoExtMemMsg	db	13,10,'G[: gp\ȃGNXeh܂.$'
NoA20HandlerMsg db	13,10,'G[: A20C̐䂪ł܂I$'
VDISKInMsg	db	13,10,'G[: VDISK tłɑgݍ܂Ă܂.$'
FlushMsg	db	13,10,7,'       XMShCo͑gݍ܂܂.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' GNXehnhLɂȂ܂.$'
HMAMINMsg	db	13,10,'ŏ HMA TCYݒ肵܂ $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'A20nhݒ肵܂ $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'O A20nhgݍ݂܂.$'

NoHMAMsg	db	13,10,': nC͖̈ł.'
		db	13,10,'$'
A20OnMsg	db	13,10,': A20C͂łɗLɂȂĂ܂.'
		db	13,10,'$'

BadArgMsg       db      13,10,': ȃp[^̂Ŗ܂: $'

HMAOKMsg	db	13,10,'64K nC̈͗Lł.'
		db	13,10,13,10,'$'

		db	'̃vOɊւ؂̌, }CN\tgЂۗLĂ܂.'

ifdef BILINGUAL

SignOnMsg2 db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991,1993 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg2	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg2 db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg2	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg2	db	13,10,'ERROR: HIMEM.SYS requires DOS 3.00 or higher.$'
NowInMsg2	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg2	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg2	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg2 db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg2	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg2	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg2	db	13,10,'$'
HandlesMsg2	db	' extended memory handles available.$'
HMAMINMsg2	db	13,10,'Minimum HMA size set to $'
KMsg2		db	'K.$'
InsA20Msg2	db	13,10,'Installed A20 handler number $'
InsA20EndMsg2	db	'.$'
InsExtA20Msg2	db	13,10,'Installed external A20 handler.$'

NoHMAMsg2	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg2	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg2	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg2	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'
endif

; end of material subject to translation

else    ; NEC_98

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

        public  SignOnMsg
        public  ROMDisabledMsg
        public  UnsupportedROMMsg
        public  ROMHookedMsg
        public  BadDOSMsg
        public  NowInMsg
        public  On8086Msg
        public  NoExtMemMsg
        public  cant_ena20_msg
        public  FlushMsg
        public  StartMsg
        public  HandlesMsg
        public  HMAMINMsg
        public  KMsg
        public  InHMAMsg
        public  NoHMAMsg
        public  A20OnMsg
        public  cant_dia20_msg
        public  HMAOKMsg
        public  InsA20Msg
        public  InsA20EndMsg
        public  EndText


SignOnMsg db    13,10,'HIMEM: XMShCo Ver.'
        db      '0' + (HimemVersion shr 8),'.'
        db      '0' + ((HimemVersion and 0ffh) / 16)
        db      '0' + ((HimemVersion and 0ffh) mod 16)
        db      ' - '
        db      DATE_String
        db      13,10,'XMSdlo[W 2.0'
        db      13,10,'Copyright 1988-1990 Microsoft Corp.'
        db      '/ NEC Corporation'             ; ins NEC <90.07.24>
        db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Shadow RAM disabled.$'
UnsupportedROMMsg db    13,10,'WARNING: Shadow RAM disable not supported '
                  db            'on this system.$'
ROMHookedMsg      db    13,10,'WARNING: Shadow RAM is in use and can''t '
                  db            'be disabled.$'

BadDOSMsg       db      13,10,'G[: HIMEM.SYS DOS 3.00ȏオKvł$'
NowInMsg        db      13,10,'G[: g}l[W͂łɃCXg[Ă܂$'
On8086Msg       db      13,10,'G[: HIMEM.SYS  80x86 ȏオKvł@@@@$'
NoExtMemMsg     db      13,10,'G[: gp\Ȋg܂.$'
cant_ena20_msg  db      13,10,'G[: A20Cl[uɂł܂!$'
FlushMsg        db      13,10,9,'      XMShCo͎gpł܂',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' gnh͗Lł$'
HMAMINMsg       db      13,10,'ŏHMATCY$'
KMsg            db      'Kɐݒ肵܂$'
InsA20Msg       db      13,10,'Installed A20 handler number $'
InsA20EndMsg    db      '.$'

InHMAMsg        db      'HIMEM̈ꕔHMAɈړ܂'
                db      13,10,'$'
NoHMAMsg        db      13,10,'x: nC͖̈ł'
                db      13,10,'$'
A20OnMsg        db      13,10,'x: A20͂łɃCl[uł'
                db      13,10,'$'
cant_dia20_msg  db      13,10,'x: A20fBZ[uɂł܂'

HMAOKMsg        db      13,10,'64K nC̈悪Lł'
                db      13,10,13,10,'$'

                db      'This program is the property of Microsoft Corporation.'

endif   ; NEC_98

EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\tr\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\pl\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: Sterownik DOS XMS, Wersja '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
        db      13,10,'Specyfikacja XMS wersja 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg    db    13,10,  'Wyczono pami lustrzan (Shadow RAM).$'
UnsupportedROMMsg db    13,10,'OSTRZEENIE: w tym systemie nie mona wyczy pamici '
                  db            'lustrzanej (Shadow RAM).$'
ROMHookedMsg      db    13,10,'OSTRZEENIE: pami lustrzana (Shadow RAM) jest uywana,'
                  db            'nie mona jej wyczy.$'

BadDOSMsg       db      13,10,'BD: To jest plik HIMEM.SYS dla systemu Windows NT.$'
NowInMsg        db      13,10,'BD: Meneder pamici rozszerzonej jest ju zainstalowany.$'
On8086Msg       db      13,10,'BD: HIMEM.SYS potrzebuje komputera z procesorem 80x86.$'
NoExtMemMsg     db      13,10,'BD: Nie znaleziono dostpnej pamici rozszerzonej.$'
NoA20HandlerMsg db      13,10,'BD: Kontrola linii A20 jest niemoliwa!$'
VDISKInMsg      db      13,10,'BD: Alokator pamici VDISK jest ju zainstalowany.$'
FlushMsg        db      13,10,7,'       Sterownik XMS nie zosta zainstalowany.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg      db      ' dostpne dojcia do pamici rozszerzonej.$'
HMAMINMsg       db      13,10,'Najmniejszy rozmiar HMA ustawiono na $'
KMsg		db	'K.$'
InsA20Msg       db      13,10,'Numer zainstalowanego programu obsugi linii A20 $'
InsA20EndMsg	db	'.$'
InsExtA20Msg    db      13,10,'Zainstalowano zewntrzny program obsugi linii A20.$'

NoHMAMsg        db      13,10,'OSTRZEENIE: pami wysoka (HMA) jest niedostpna.'
		db	13,10,'$'
A20OnMsg        db      13,10,'OSTRZEENIE: linia A20 jest ju wczona.'
		db	13,10,'$'

BadArgMsg       db      13,10,'OSTRZEENIE: zignorowano niewaciwy parametr: $'

HMAOKMsg        db      13,10,'Dostpne jest 64 KB pamici wysokiej (HMA).'
		db	13,10,13,10,'$'

                db      'Ten program jest wasnoci firmy Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\nl\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page    95,160
	title   himem3 - Initialization messages

	.xlist
	include himem.inc
	.list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

	public  SignOnMsg
	public  ROMDisabledMsg
	public  UnsupportedROMMsg
	public  ROMHookedMsg
	public  BadDOSMsg
	public  NowInMsg
	public  On8086Msg
	public  NoExtMemMsg
	public  FlushMsg
	public  StartMsg
	public  HandlesMsg
	public  HMAMINMsg
	public  KMsg
	public  NoHMAMsg
	public  A20OnMsg
	public  HMAOKMsg
	public  InsA20Msg
	public  InsA20EndMsg
	public  InsExtA20msg
	public  NoA20HandlerMsg
	public  VDISKInMsg
	public  BadArgMsg
	public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: DOS XMS-stuurprogramma, versie '
	db      '0' + (HimemVersion shr 8),'.'
	db      '0' + ((HimemVersion and 0ffh) / 16)
	db      '0' + ((HimemVersion and 0ffh) mod 16)
	db      ' - '
	db      DATE_String
	db      13,10,'XMS-specificatie versie 2.0'
	db      13,10,'Copyright 1988-1991 Microsoft Corp.'
	db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Shadow-RAM uitgeschakeld.$'
UnsupportedROMMsg db    13,10,'WAARSCHUWING: Shadow-RAM uitschakelen wordt op dit '
		  db            'systeem niet ondersteund.$'
ROMHookedMsg      db    13,10,'WAARSCHUWING: Shadow-RAM wordt momenteel gebruikt en kan '
		  db            'niet worden uitgeschakeld.$'

BadDOSMsg       db      13,10,'FOUT: Deze HIMEM.SYS is voor Windows NT.$'
NowInMsg        db      13,10,'FOUT: Er is al een Extended Memory Manager genstalleerd.$'
On8086Msg       db      13,10,'FOUT: Voor HIMEM.SYS is een 80x86 machine vereist.$'
NoExtMemMsg     db      13,10,'FOUT: Geen beschikbaar extended memory gevonden.$'
NoA20HandlerMsg db      13,10,'FOUT: Kan A20-regel niet beheren!$'
VDISKInMsg      db      13,10,'FOUT: VDISK-geheugen-allocator is al genstalleerd.$'
FlushMsg        db      13,10,7,'       XMS-stuurprogramma is niet genstalleerd.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' extended memory-ingangen beschikbaar.$'
HMAMINMsg       db      13,10,'Minimum HMA-grootte ingesteld op $'
KMsg            db      'K.$'
InsA20Msg       db      13,10,'Genstalleerde A20-handler-nummer $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'Genstalleerde externe A20-handler.$'

NoHMAMsg        db      13,10,'WAARSCHUWING: HMA is niet beschikbaar.'
		db      13,10,'$'
A20OnMsg        db      13,10,'WAARSCHUWING: De A20-regel was al ingeschakeld.'
		db      13,10,'$'

BadArgMsg       db      13,10,'WAARSCHUWING: Ongeldige parameter genegeerd: $'

HMAOKMsg        db      13,10,'64K HMA is beschikbaar.'
		db      13,10,13,10,'$'

		db      'Dit programma is eigendom van Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\no\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS-driver, versjon '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS-spesifikasjon versjon 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corporation'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Skygge-RAM sperret.$'
UnsupportedROMMsg db    13,10,'Advarsel!  Sperring av skygge-RAM stttes '
		  db		'ikke p dette systemet.$'
ROMHookedMsg	  db	13,10,'Advarsel!  Skygge-RAM er i bruk og kan '
		  db		'ikke sperres.$'

BadDOSMsg	db	13,10,'Feil!  Denne HIMEM.SYS er for Windows NT.$'
NowInMsg	db	13,10,'Feil!  Styreprogram for utvidet minne er allerede installert.$'
On8086Msg	db	13,10,'Feil!  HIMEM.SYS trenger en 80x86-basert maskin.$'
NoExtMemMsg	db	13,10,'Feil!  Ikke nok tilgjengelig utvidet minne.$'
NoA20HandlerMsg db	13,10,'Feil!  Kan ikke kontrollere A20-linjen$'
VDISKInMsg	db	13,10,'Feil!  VDISK minnetildeler er allerede installert.$'
FlushMsg	db	13,10,7,'       XMS-driver er ikke installert.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' referanser for utvidet minne er tilgjengelige.$'
HMAMINMsg	db	13,10,'Minimum HMA-strrelse satt til $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installerte A20-behandler nummer $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installerte ekstern A20-behandler.$'

NoHMAMsg	db	13,10,'Advarsel!  Hyminneomrde er ikke tilgjengelig.'
		db	13,10,'$'
A20OnMsg	db	13,10,'Advarsel!  A20-linjen var allerede aktivert.'
		db	13,10,'$'

BadArgMsg	db	13,10,'Advarsel!  Ugyldig parameter ble ignorert: $'

HMAOKMsg	db	13,10,'64Kb hyminneomrde er tilgjengelig.'
		db	13,10,13,10,'$'

		db	'Dette programmet tilhrer Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\tst\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) 
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\tst\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg	db	13,10,'ERROR: This HIMEM.SYS is for Windows NT.$'
NowInMsg	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' extended memory handles available.$'
HMAMINMsg	db	13,10,'Minimum HMA size set to $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installed A20 handler number $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installed external A20 handler.$'

NoHMAMsg	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\usa\makefile.inc ===
#****************************** File Header ******************************\
# File Name: makefile.inc
#
# Copyright (c) 1985-96, Microsoft Corporation
#
# Project specific MAKEFILE.INC
#
# History:
# Feb-14-1996 GerardoB Created
#***************************************************************************/

buildall:
    cd..   
    nmake /fmakefile.sub \
	 ALT_PROJECT=$(ALT_PROJECT) \
	 ALT_PROJECT_TARGET=$(ALT_PROJECT_TARGET) \
     PROJECT_INC_PATH=$(PROJECT_INC_PATH)
    cd $(ALT_PROJECT)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\pt\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: Controlador XMS de DOS, ver. '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'Verso 2.0 da especificao XMS'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'RAM shadow desactivada.$'
UnsupportedROMMsg db	13,10,'AVISO: Desactivao da shadow RAM no suportada '
		  db		'neste sistema.$'
ROMHookedMsg	  db	13,10,'AVISO: A shadow RAM est em uso e no pode '
		  db		'ser desactivada.$'

BadDOSMsg	db	13,10,'ERRO: Este HIMEM.SYS  para o Windows NT.$'
NowInMsg	db	13,10,'ERRO: J est instalado um gestor de memria de extenso.$'
On8086Msg	db	13,10,'ERRO: O HIMEM.SYS necessita de um computador baseado em 80x86.$'
NoExtMemMsg	db	13,10,'ERRO: No foi encontrada memria de entenso disponvel.$'
NoA20HandlerMsg db	13,10,'ERRO: Impossvel controlar a linha A20!$'
VDISKInMsg	db	13,10,'ERRO: J est instalado o atribuidor de memria VDISK.$'
FlushMsg	db	13,10,7,'       Controlador XMS no instalado.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' identificadores de memria de extenso disponveis.$'
HMAMINMsg	db	13,10,'Dimenso HMA definida para $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Instalado o manipulador da A20 n. $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Instalado um manipulador da A20 externo.$'

NoHMAMsg	db	13,10,'AVISO: A HMA no est disponvel.'
		db	13,10,'$'
A20OnMsg	db	13,10,'AVISO: A linha A20 j estava activada.'
		db	13,10,'$'

BadArgMsg	db	13,10,'AVISO: Parmetro invlido ignorado: $'

HMAOKMsg	db	13,10,'Esto disponveis 64K de HMA.'
		db	13,10,13,10,'$'

		db	'Este programa  propriedade da Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\usa\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Specification Version 2.0'
	db	13,10,'Copyright 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Shadow RAM disabled.$'
UnsupportedROMMsg db	13,10,'WARNING: Shadow RAM disable not supported '
		  db		'on this system.$'
ROMHookedMsg	  db	13,10,'WARNING: Shadow RAM is in use and can''t '
		  db		'be disabled.$'

BadDOSMsg	db	13,10,'ERROR: This HIMEM.SYS is for Windows NT.$'
NowInMsg	db	13,10,'ERROR: An Extended Memory Manager is already installed.$'
On8086Msg	db	13,10,'ERROR: HIMEM.SYS requires an 80x86-based machine.$'
NoExtMemMsg	db	13,10,'ERROR: No available extended memory was found.$'
NoA20HandlerMsg db	13,10,'ERROR: Unable to control A20 line!$'
VDISKInMsg	db	13,10,'ERROR: VDISK memory allocator already installed.$'
FlushMsg	db	13,10,7,'       XMS Driver not installed.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' extended memory handles available.$'
HMAMINMsg	db	13,10,'Minimum HMA size set to $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Installed A20 handler number $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Installed external A20 handler.$'

NoHMAMsg	db	13,10,'WARNING: The High Memory Area is unavailable.'
		db	13,10,'$'
A20OnMsg	db	13,10,'WARNING: The A20 Line was already enabled.'
		db	13,10,'$'

BadArgMsg	db	13,10,'WARNING: Invalid parameter ignored: $'

HMAOKMsg	db	13,10,'64K High Memory Area is available.'
		db	13,10,13,10,'$'

		db	'This program is the property of Microsoft Corporation.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\ru\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page    95,160
	title   himem3 - Initialization messages

	.xlist
	include himem.inc
	.list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

	public  SignOnMsg
	public  ROMDisabledMsg
	public  UnsupportedROMMsg
	public  ROMHookedMsg
	public  BadDOSMsg
	public  NowInMsg
	public  On8086Msg
	public  NoExtMemMsg
	public  FlushMsg
	public  StartMsg
	public  HandlesMsg
	public  HMAMINMsg
	public  KMsg
	public  NoHMAMsg
	public  A20OnMsg
	public  HMAOKMsg
	public  InsA20Msg
	public  InsA20EndMsg
	public  InsExtA20msg
	public  NoA20HandlerMsg
	public  VDISKInMsg
	public  BadArgMsg
	public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: DOS ࠩ XMS,  '
	db      '0' + (HimemVersion shr 8),'.'
	db      '0' + ((HimemVersion and 0ffh) / 16)
	db      '0' + ((HimemVersion and 0ffh) mod 16)
	db      ' - '
	db      DATE_String
	db      13,10,'䨪 XMS,  2.0'
	db      13,10,'Copyright 1988-1991 Microsoft Corp.'
	db      13,10,'$'

ROMDisabledMsg  db      13,10,'஢ ⥩    ⪫祭.$'
UnsupportedROMMsg       db      13,10,': ⥬  ন ⬥ ஢ '
			db              '⥩   .$'
ROMHookedMsg    db      13,10,': ஢ ⥩    ᯮ '
		db                      '    ⪫祭.$'

BadDOSMsg       db      13,10,':  ࠩ HIMEM.SYS ।祭  Windows NT.$'
NowInMsg        db      13,10,': ᯥ ⥫쭮  㦥 ⠭.$'
On8086Msg       db      13,10,': HIMEM.SYS  ࠡ ⮫쪮    ஬ 80x86.$'
NoExtMemMsg     db      13,10,': 㯭 ⥫쭠   㦥.$'
NoA20HandlerMsg db      13,10,':  㤠 ⠭ ஫  ᭮  A20!$'
VDISKInMsg      db      13,10,': ணࠬ VDISK 㦥 ⠭.$'
FlushMsg        db      13,10,7,'        ࠩ XMS  ⠭.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' 㯭 ਯ஢ .$'
HMAMINMsg       db      13,10,' ࠧ HMA ⠭ ࠢ $'
KMsg            db      'K.$'
InsA20Msg       db      13,10,'⠭ ࠡ稪 뢠  A20: $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'⠭ 譨 ࠡ稪 뢠  A20.$'

NoHMAMsg        db      13,10,':  HMA 㯥.'
		db      13,10,'$'
A20OnMsg        db      13,10,': ᭠  A20 㦥 ⢮.'
		db      13,10,'$'

BadArgMsg       db      13,10,':  ࠬ ந஢: $'

HMAOKMsg        db      13,10,'㯥 ᥣ HMA ꥬ 64K.'
		db      13,10,13,10,'$'

		db      ' ணࠬ  ᮡ⢥ Microsoft Corporation.'

; end of material subject to translation


EndText         label   byte
_text   ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\sv\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page    95,160
	title   himem3 - Initialization messages

	.xlist
	include himem.inc
	.list

;*----------------------------------------------------------------------*
;*      DRIVER MESSAGES                                                 *
;*----------------------------------------------------------------------*

	public  SignOnMsg
	public  ROMDisabledMsg
	public  UnsupportedROMMsg
	public  ROMHookedMsg
	public  BadDOSMsg
	public  NowInMsg
	public  On8086Msg
	public  NoExtMemMsg
	public  FlushMsg
	public  StartMsg
	public  HandlesMsg
	public  HMAMINMsg
	public  KMsg
	public  NoHMAMsg
	public  A20OnMsg
	public  HMAOKMsg
	public  InsA20Msg
	public  InsA20EndMsg
	public  InsExtA20msg
	public  NoA20HandlerMsg
	public  VDISKInMsg
	public  BadArgMsg
	public  EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db    13,10,'HIMEM: DOS XMS Driver, Version '
	db      '0' + (HimemVersion shr 8),'.'
	db      '0' + ((HimemVersion and 0ffh) / 16)
	db      '0' + ((HimemVersion and 0ffh) mod 16)
	db      ' - '
	db      DATE_String
	db      13,10,'XMS-specifikation version 2.0'
	db      13,10,'Copyright 1988-1991 Microsoft Corporation.'
	db      13,10,'$'

ROMDisabledMsg    db    13,10,  'Skuggminnet (Shadow RAM) r inaktivt.$'
UnsupportedROMMsg db    13,10,'VARNING: Inaktivering av skuggminnet (Shadow RAM) '
		  db            'stds inte av systemet.$'
ROMHookedMsg      db    13,10,'VARNING: Skuggminnet (Shadow RAM) anvnds och kan '
		  db            'inte inaktiveras.$'

BadDOSMsg       db      13,10,'FEL: Detta r en Windows NT-version av HIMEM.SYS .$'
NowInMsg        db      13,10,'FEL: Det finns redan en minneshanterare fr utkat minne installerad.$'
On8086Msg       db      13,10,'FEL: HIMEM.SYS krver en 80x86-baserad dator.$'
NoExtMemMsg     db      13,10,'FEL: Det finns inget utkat minne tillgngligt.$'
NoA20HandlerMsg db      13,10,'FEL: Kan inte kontrollera A20-rad!$'
VDISKInMsg      db      13,10,'FEL: VDISK minnesallokerare r redan installerad.$'
FlushMsg        db      13,10,7,'       Det finns ingen XMS-drivrutin installerad.',13,10,13,10,'$'

StartMsg        db      13,10,'$'
HandlesMsg      db      ' tillgngliga referenser fr utkat minne.$'
HMAMINMsg       db      13,10,'Minimum HMA-storlek instlld p $'
KMsg            db      'K.$'
InsA20Msg       db      13,10,'Installerad A20-referens nummer $'
InsA20EndMsg    db      '.$'
InsExtA20Msg    db      13,10,'Installerad extern A20-referens.$'

NoHMAMsg        db      13,10,'VARNING: Det hga minnesomrdet r inte tillgngligt.'
		db      13,10,'$'
A20OnMsg        db      13,10,'VARNING: A20-raden var redan aktiv.'
		db      13,10,'$'

BadArgMsg       db      13,10,'VARNING: Felaktig parameter ignorerad: $'

HMAOKMsg        db      13,10,'Det finns 64K HMA tillgngligt.'
		db      13,10,13,10,'$'

		db      'Detta program tillhr Microsoft Corporation.'

; end of material subject to translation


EndText         label   byte
_text   ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\himem\tr\messages.asm ===
;/* messages.asm
; *
; * Microsoft Confidential
; * Copyright (C) Microsoft Corporation 1988-1991
; * All Rights Reserved.
; *
; * Modification History
; *
; * Sudeepb 14-May-1991 Ported for NT XMS support
; */


	page	95,160
	title	himem3 - Initialization messages

	.xlist
	include	himem.inc
	.list

;*----------------------------------------------------------------------*
;*	DRIVER MESSAGES							*
;*----------------------------------------------------------------------*

	public	SignOnMsg
	public	ROMDisabledMsg
	public	UnsupportedROMMsg
	public	ROMHookedMsg
	public	BadDOSMsg
	public	NowInMsg
	public	On8086Msg
	public	NoExtMemMsg
	public	FlushMsg
	public	StartMsg
	public	HandlesMsg
	public	HMAMINMsg
	public	KMsg
	public	NoHMAMsg
	public	A20OnMsg
	public	HMAOKMsg
	public	InsA20Msg
	public	InsA20EndMsg
	public	InsExtA20msg
	public	NoA20HandlerMsg
	public	VDISKInMsg
	public	BadArgMsg
	public	EndText

; Start of text subject to translation
;  Material appearing in single quotation marks should be translated.


SignOnMsg db	13,10,'HIMEM: DOS XMS Driver, Version '
	db	'0' + (HimemVersion shr 8),'.'
	db	'0' + ((HimemVersion and 0ffh) / 16)
	db	'0' + ((HimemVersion and 0ffh) mod 16)
	db	' - '
	db	DATE_String
	db	13,10,'XMS Belirtimi Srm 2.0'
	db	13,10,'Telif Hakk 1988-1991 Microsoft Corp.'
	db	13,10,'$'

ROMDisabledMsg	  db	13,10,	'Glge RAM devre d.$'
UnsupportedROMMsg db	13,10,'UYARI: Glge RAM'' devreden kartmak bu '
		  db		' sistemde desteklenmiyor.$'
ROMHookedMsg	  db	13,10,'UYARI: Glge RAM kullanmda ve devre d '
		  db		' braklamyor.$'

BadDOSMsg	db	13,10,'HATA: Bu HIMEM.SYS Windows NT iin.$'
NowInMsg	db	13,10,'HATA: Bir Uzatlm Bellek Yneticisi zaten ykl.$'
On8086Msg	db	13,10,'HATA: HIMEM.SYS bir 80x86-tabanl makine gerektirir.$'
NoExtMemMsg	db	13,10,'HATA: Kullanlabilir uzatlm bellek bulunamad.$'
NoA20HandlerMsg db	13,10,'HATA: A20 satr denetlenemiyor!$'
VDISKInMsg	db	13,10,'HATA: VDISK bellek ayrcs zaten ykl.$'
FlushMsg	db	13,10,7,'       XMS Srcs ykl deil.',13,10,13,10,'$'

StartMsg	db	13,10,'$'
HandlesMsg	db	' uzatlm bellek ileyicileri kullanlabilir.$'
HMAMINMsg	db	13,10,'En kk HMA boyutu ayar $'
KMsg		db	'K.$'
InsA20Msg	db	13,10,'Ykl A20 ileyicisi numaras $'
InsA20EndMsg	db	'.$'
InsExtA20Msg	db	13,10,'Ykl d A20 ileyicisi.$'

NoHMAMsg	db	13,10,'UYARI: st Bellek Alan kullanlamyor.'
		db	13,10,'$'
A20OnMsg	db	13,10,'UYARI: A20 satr zaten etkin durumda.'
		db	13,10,'$'

BadArgMsg	db	13,10,'UYARI: Geersiz parametre yoksayld: $'

HMAOKMsg	db	13,10,'64K st bellek alan kullanlabilir.'
		db	13,10,13,10,'$'

		db	'Bu program Microsoft Corporation''n maldr.'

; end of material subject to translation


EndText		label	byte
_text	ends
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdf.asm ===
;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *


	PAGE	,132
	TITLE	PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Definition File
;; (c) Copyright IBM Corp 198?,...
;;
;; This the file header and table pointers ONLY.
;; The actual tables are contained in seperate source files.
;; These are:
;;	     KDFSP.ASM	- Spanish
;;	     KDFPO.ASM	- Portuguese
;;	     KDFGR.ASM	- German
;;	     KDFIT.ASM	- Italian
;;	     KDFFR.ASM	- French
;;	     KDFSG.ASM	- Swiss German
;;	     KDFSF.ASM	- Swiss French
;;	     KDFDK.ASM	- Danish
;;	     KDFUK.ASM	- English
;;	     KDFBE.ASM	- Belgium
;;	     KDFNL.ASM	- Netherlands
;;	     KDFNO.ASM	- Norway
;;	     KDFLA.ASM	- Latin American
;;	     KDFSV.ASM	- SWEDEN
;;	     KDFSU.ASM	- Finland
;;	     Dummy US	- US
;; Linkage Instructions:
;;	The following instructions are contained in KDFLINK.BAT:
;;
;;	LINK KDF+KDFSP+KDFGE+KDFFR+KDFIT+KDFPO+KDFUK+KDFSG+KDFDK+KDFEOF;
;;	EXE2BIN KDF.EXE KEYBOARD.SYS
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; File Header
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DB   0FFh,'KEYB   '                  ;; signature
DB   8 DUP(0)			     ;; reserved
DW   650			     ;; maximum size of Common Xlat Sect
DW   350			     ;; max size of Specific Xlat Sect
DW   400			     ;; max size of State Logic
DD   0				     ;; reserved
DW   17 			     ;; number of languages
DB   'SP'
DW   OFFSET SP_LANG_ENT,0
DB   'PO'
DW   OFFSET PO_LANG_ENT,0
DB   'FR'
DW   OFFSET FR_LANG_ENT,0
DB   'DK'
DW   OFFSET DK_LANG_ENT,0
DB   'SG'
DW   OFFSET SG_LANG_ENT,0
DB   'GR'
DW   OFFSET GE_LANG_ENT,0
DB   'IT'
DW   OFFSET IT_LANG_ENT,0
DB   'UK'
DW   OFFSET UK_LANG_ENT,0
DB   'SF'
DW   OFFSET SF_LANG_ENT,0
DB   'BE'
DW   OFFSET BE_LANG_ENT,0
DB   'NL'
DW   OFFSET NL_LANG_ENT,0
DB   'NO'
DW   OFFSET NO_LANG_ENT,0
DB   'CF'
DW   OFFSET CF_LANG_ENT,0
DB   'SV'
DW   OFFSET SV_LANG_ENT,0
DB   'SU'
DW   OFFSET SV_LANG_ENT,0
DB   'LA'
DW   OFFSET LA_LANG_ENT,0
DB   'US'
DW   OFFSET DUMMY_ENT,0
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; Language Entries
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   EXTRN SP_LOGIC:NEAR		       ;;
   EXTRN SP_437_XLAT:NEAR	       ;;
   EXTRN SP_850_XLAT:NEAR	       ;;
				       ;;
SP_LANG_ENT:			       ;; language entry for SPANISH
  DB   'SP'                            ;;
  DW   0			       ;; reserved
  DW   OFFSET SP_LOGIC,0	       ;; pointer to LANG kb table
  DW   2			       ;; number of code pages
  DW   437			       ;; code page
  DW   OFFSET SP_437_XLAT,0	       ;; table pointer
  DW   850			       ;; code page
  DW   OFFSET SP_850_XLAT,0	       ;; table pointer
				       ;;
;****************************************************************************
   EXTRN PO_LOGIC:NEAR		       ;;
   EXTRN PO_860_XLAT:NEAR	       ;;
   EXTRN PO_850_XLAT:NEAR	       ;;
				       ;;
PO_LANG_ENT:			       ;; language entry for POTUGAL
  DB   'PO'                            ;;
  DW   0			       ;; reserved
  DW   OFFSET PO_LOGIC,0	       ;; pointer to LANG kb table
  DW   2			       ;; number of code pages
  DW   860			       ;; code page
  DW   OFFSET PO_860_XLAT,0	       ;; table pointer
  DW   850			       ;; code page
  DW   OFFSET PO_850_XLAT,0	       ;; table pointer
				       ;;
;*****************************************************************************
    EXTRN FR_LOGIC:NEAR 		;;
    EXTRN FR_437_XLAT:NEAR		;;
    EXTRN FR_850_XLAT:NEAR		;;
					;;
 FR_LANG_ENT:				;; language entry for POTUGAL
   DB	'FR'                            ;;
   DW	0				;; reserved
   DW	OFFSET FR_LOGIC,0		;; pointer to LANG kb table
   DW	2				;; number of code pages
   DW	437				;; code page
   DW	OFFSET FR_437_XLAT,0		;; table pointer
   DW	850				;; code page
   DW	OFFSET FR_850_XLAT,0		;; table pointer
					;;
;*****************************************************************************
   EXTRN DK_LOGIC:NEAR		       ;;
   EXTRN DK_865_XLAT:NEAR	       ;;
   EXTRN DK_850_XLAT:NEAR	       ;;
					;;
 DK_LANG_ENT:				;; language entry for POTUGAL
   DB	'DK'                            ;;
   DW	0				;; reserved
   DW	OFFSET DK_LOGIC,0		;; pointer to LANG kb table
   DW	2				;; number of code pages
   DW	865				;; code page
   DW	OFFSET DK_865_XLAT,0		;; table pointer
   DW	850				;; code page
   DW	OFFSET DK_850_XLAT,0		;; table pointer
					;;
;*****************************************************************************
   EXTRN SG_LOGIC:NEAR		       ;;
   EXTRN SG_437_XLAT:NEAR	       ;;
   EXTRN SG_850_XLAT:NEAR	       ;;
				       ;;
SG_LANG_ENT:			       ;; language entry for POTUGAL
  DB   'SG'                            ;;
  DW   0			       ;; reserved
  DW   OFFSET SG_LOGIC,0	       ;; pointer to LANG kb table
  DW   2			       ;; number of code pages
  DW   437			       ;; code page
  DW   OFFSET SG_437_XLAT,0	       ;; table pointer
  DW   850			       ;; code page
  DW   OFFSET SG_850_XLAT,0	       ;; table pointer
				       ;;
;*****************************************************************************
   EXTRN SF_LOGIC:NEAR		       ;;
   EXTRN SF_437_XLAT:NEAR	       ;;
   EXTRN SF_850_XLAT:NEAR	       ;;
				       ;;
SF_LANG_ENT:			       ;; language entry for SWISS FRENCH
  DB   'SF'                            ;;
  DW   0			       ;; reserved
  DW   OFFSET SF_LOGIC,0	       ;; pointer to LANG kb table
  DW   2			       ;; number of code pages
  DW   437			       ;; code page
  DW   OFFSET SF_437_XLAT,0	       ;; table pointer
  DW   850			       ;; code page
  DW   OFFSET SF_850_XLAT,0	       ;; table pointer
				       ;;
;*****************************************************************************
   EXTRN GE_LOGIC:NEAR		       ;;
   EXTRN GE_437_XLAT:NEAR	       ;;
   EXTRN GE_850_XLAT:NEAR	       ;;
				       ;;
GE_LANG_ENT:			       ;; language entry for POTUGAL
  DB   'GR'                            ;;
  DW   0			       ;; reserved
  DW   OFFSET GE_LOGIC,0	       ;; pointer to LANG kb table
  DW   2			       ;; number of code pages
  DW   437			       ;; code page
  DW   OFFSET GE_437_XLAT,0	       ;; table pointer
  DW   850			       ;; code page
  DW   OFFSET GE_850_XLAT,0	       ;; table pointer
				       ;;
;*****************************************************************************
    EXTRN IT_LOGIC:NEAR 		;;
    EXTRN IT_437_XLAT:NEAR		;;
    EXTRN IT_850_XLAT:NEAR		;;
					;;
 IT_LANG_ENT:				;; language entry for POTUGAL
   DB	'IT'                            ;;
   DW	0				;; reserved
   DW	OFFSET IT_LOGIC,0		;; pointer to LANG kb table
   DW	2				;; number of code pages
   DW	437				;; code page
   DW	OFFSET IT_437_XLAT,0		;; table pointer
   DW	850				;; code page
   DW	OFFSET IT_850_XLAT,0		;; table pointer
					;;
;*****************************************************************************
    EXTRN UK_LOGIC:FAR			;;
    EXTRN UK_437_XLAT:FAR		;;
    EXTRN UK_850_XLAT:FAR		;;
					;;
 UK_LANG_ENT:				;; language entry for POTUGAL
   DB	'UK'                            ;;
   DW	0				;; reserved
   DW	OFFSET UK_LOGIC,0		;; pointer to LANG kb table
   DW	2				;; number of code pages
   DW	437				;; code page
   DW	OFFSET UK_437_XLAT,0		;; table pointer
   DW	850				;; code page
   DW	OFFSET UK_850_XLAT,0		;; table pointer
					;;
;*****************************************************************************
   EXTRN BE_LOGIC:NEAR		       ;;
   EXTRN BE_437_XLAT:NEAR	       ;;
   EXTRN BE_850_XLAT:NEAR	       ;;
				       ;;
BE_LANG_ENT:			       ;; language entry for POTUGAL
  DB   'BE'                            ;;
  DW   0			       ;; reserved
  DW   OFFSET BE_LOGIC,0	       ;; pointer to LANG kb table
  DW   2			       ;; number of code pages
  DW   437			       ;; code page
  DW   OFFSET BE_437_XLAT,0	       ;; table pointer
  DW   850			       ;; code page
  DW   OFFSET BE_850_XLAT,0	       ;; table pointer
					;;
;*****************************************************************************
;*****************************************************************************
     EXTRN NL_LOGIC:NEAR		 ;;
     EXTRN NL_437_XLAT:NEAR		 ;;
     EXTRN NL_850_XLAT:NEAR		 ;;
					 ;;
  NL_LANG_ENT:				 ;; language entry for NETHERLANDS
    DB	 'NL'                            ;;
    DW	 0				 ;; reserved
    DW	 OFFSET NL_LOGIC,0		 ;; pointer to LANG kb table
    DW	 2				 ;; number of code pages
    DW	 437				 ;; code page
    DW	 OFFSET NL_437_XLAT,0		 ;; table pointer
    DW	 850				 ;; code page
    DW	 OFFSET NL_850_XLAT,0		 ;; table pointer
				     ;;
;*****************************************************************************
;*****************************************************************************
     EXTRN NO_LOGIC:NEAR		 ;;
     EXTRN NO_865_XLAT:NEAR		 ;;
     EXTRN NO_850_XLAT:NEAR		 ;;
					 ;;
  NO_LANG_ENT:				 ;; language entry for NORWAY
    DB	 'NO'                            ;;
    DW	 0				 ;; reserved
    DW	 OFFSET NO_LOGIC,0		 ;; pointer to LANG kb table
    DW	 2				 ;; number of code pages
    DW	 865				 ;; code page
    DW	 OFFSET NO_865_XLAT,0		 ;; table pointer
    DW	 850				 ;; code page
    DW	 OFFSET NO_850_XLAT,0		 ;; table pointer
				     ;;
;*****************************************************************************
;*****************************************************************************
     EXTRN SV_LOGIC:NEAR		 ;;
     EXTRN SV_437_XLAT:NEAR		 ;;
     EXTRN SV_850_XLAT:NEAR		 ;;
					 ;;
  SV_LANG_ENT:				 ;; language entry for SWEDEN
    DB	 'SV'                            ;;
    DW	 0				 ;; reserved
    DW	 OFFSET SV_LOGIC,0		 ;; pointer to LANG kb table
    DW	 2				 ;; number of code pages
    DW	 437				 ;; code page
    DW	 OFFSET SV_437_XLAT,0		 ;; table pointer
    DW	 850				 ;; code page
    DW	 OFFSET SV_850_XLAT,0		 ;; table pointer
				     ;;
;*****************************************************************************
;*****************************************************************************
;    EXTRN SU_LOGIC:NEAR		 ;;
;    EXTRN SU_437_XLAT:NEAR		 ;;
;    EXTRN SU_850_XLAT:NEAR		 ;;
;					 ;;
; SU_LANG_ENT:				 ;; language entry for FINLAND
;   DB	 'SU'                            ;;
;   DW	 0				 ;; reserved
;   DW	 OFFSET SU_LOGIC,0		 ;; pointer to LANG kb table
;   DW	 2				 ;; number of code pages
;   DW	 437				 ;; code page
;   DW	 OFFSET SU_437_XLAT,0		 ;; table pointer
;   DW	 850				 ;; code page
;   DW	 OFFSET SU_850_XLAT,0		 ;; table pointer
;				     ;;
;*****************************************************************************
;*****************************************************************************
     EXTRN CF_LOGIC:NEAR		 ;;
     EXTRN CF_863_XLAT:NEAR		 ;;
     EXTRN CF_850_XLAT:NEAR		 ;;
					 ;;
  CF_LANG_ENT:				 ;; language entry for Canadian-French
    DB	 'CF'                            ;;
    DW	 0				 ;; reserved
    DW	 OFFSET CF_LOGIC,0		 ;; pointer to LANG kb table
    DW	 2				 ;; number of code pages
    DW	 863				 ;; code page
    DW	 OFFSET CF_863_XLAT,0		 ;; table pointer
    DW	 850				 ;; code page
    DW	 OFFSET CF_850_XLAT,0		 ;; table pointer
				     ;;
;*****************************************************************************
     EXTRN LA_LOGIC:NEAR		 ;;
     EXTRN LA_850_XLAT:NEAR		 ;;
     EXTRN LA_437_XLAT:NEAR		 ;;
					 ;;
  LA_LANG_ENT:				 ;; language entry for Canadian-French
    DB	 'LA'                            ;;
    DW	 0				 ;; reserved
    DW	 OFFSET LA_LOGIC,0		 ;; pointer to LANG kb table
    DW	 2				 ;; number of code pages
    DW	 850				 ;; code page
    DW	 OFFSET LA_850_XLAT,0		 ;; table pointer
    DW	 437				 ;; code page
    DW	 OFFSET LA_437_XLAT,0		 ;; table pointer
				     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DUMMY_ENT:			       ;; language entry
  DB   'XX'                            ;;
  DW   0			       ;; reserved
  DW   OFFSET DUMMY_LOGIC,0	       ;; pointer to LANG kb table
  DW   5			       ;; number of code pages
  DW   437			       ;; code page
  DW   OFFSET DUMMY_XLAT_437,0	       ;; table pointer
  DW   850			       ;; code page
  DW   OFFSET DUMMY_XLAT_850,0	       ;; table pointer
  DW   860			       ;; code page
  DW   OFFSET DUMMY_XLAT_860,0	       ;; table pointer
  DW   863			       ;; code page
  DW   OFFSET DUMMY_XLAT_863,0	       ;; table pointer
  DW   865			       ;; code page
  DW   OFFSET DUMMY_XLAT_865,0	       ;; table pointer
				       ;;
DUMMY_LOGIC:			       ;;
   DW  LOGIC_END-$		       ;; length
   DW  0			       ;; special features
   DB  92H,0,0			       ;; EXIT_STATE_LOGIC_COMMAND
LOGIC_END:			       ;;
				       ;;
DUMMY_XLAT_437: 		       ;;
   DW	  6			       ;; length of section
   DW	  437			       ;; code page
   DW	  0			       ;; LAST STATE
				       ;;
DUMMY_XLAT_850: 		       ;;
   DW	  6			       ;; length of section
   DW	  850			       ;; code page
   DW	  0			       ;; LAST STATE
				       ;;
DUMMY_XLAT_860: 		       ;;
   DW	  6			       ;; length of section
   DW	  860			       ;; code page
   DW	  0			       ;; LAST STATE
				       ;;
DUMMY_XLAT_865: 		       ;;
   DW	  6			       ;; length of section
   DW	  865			       ;; code page
   DW	  0			       ;; LAST STATE
				       ;;
DUMMY_XLAT_863: 		       ;;
   DW	  6			       ;; length of section
   DW	  863			       ;; code page
   DW	  0			       ;; LAST STATE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;*****************************************************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CODE	 ENDS			       ;;
	 END			       ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbe.asm ===
; ACUTE lc y added

;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

; ****** CNS 12/18
; ****** CNS 01/21 NUM PAD
	PAGE	,132
	TITLE	PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Defintion File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard tables for Belgium.
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;	       NICK SAVAGE  - IBM Corp.
;; Modded from French - DTF 11-Sep-86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC BE_LOGIC 	       ;;
	PUBLIC BE_437_XLAT	       ;;
	PUBLIC BE_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a liner search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BE State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
BE_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW	0 ;;;TYPEWRITER_CAPS_LK        ;; special features (shift lock state)
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
     IFF CAPS_STATE
	 SET_FLAG DEAD_UPPER
     ELSEF
      IFF EITHER_SHIFT		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF			       ;;
	  SET_FLAG DEAD_LOWER	       ;;
      ENDIFF			       ;;
     ENDIFF
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	IFKBD XT_KB+AT_KB
	  IFF EITHER_CTL		;;
	  ANDF ALT_SHIFT		;;
	    SET_FLAG DEAD_THIRD        ;;
	  ENDIFF			;;
	ELSEF
	 IFF R_ALT_SHIFT	       ;;
	 ANDF EITHER_CTL,NOT	       ;;
	 ANDF LC_E0,NOT 	       ;;
	    SET_FLAG DEAD_THIRD        ;;
	 ENDIFF 		       ;;
	ENDIFF
       ENDIFF
   ENDIFF			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO TILDE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
TILDE_PROC:			       ;;
				       ;;
   IFF TILDE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT TILDE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_TILDE:			       ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;  exist for 437 so beep for
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
NON_DEAD:			       ;;
				       ;;
   IFKBD G_KB+P12_KB		       ;; Avoid accidentally translating
   ANDF LC_E0			       ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC		       ;;   G keyboard
   ENDIFF			       ;;
;;***BD ADDED FOR ALT, CTRL CASES      ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF  ALT_SHIFT 	       ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT	       ;;
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
;;***BD END OF ADDITION
				       ;;
   IFF	EITHER_ALT,NOT		       ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT		       ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT		       ;; Numeric keys are not.
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE,NOT	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
	  XLATT NON_ALPHA_UPPER        ;;
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE 	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
	  XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
	  ENDIFF		       ;;
      ENDIFF			       ;;
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	  IFKBD XT_KB+AT_KB	 ;;
	      IFF  EITHER_CTL	       ;;
	      ANDF ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	  ELSEF 		       ;;
	      IFF EITHER_CTL,NOT       ;;
	      ANDF R_ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	   ENDIFF		       ;;
      ENDIFF			       ;;
   ENDIFF			       ;;
				       ;;
   EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
					  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BE Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BE_COMMON_XLAT		       ;;
BE_COMMON_XLAT: 		       ;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: G + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K1_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 8			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 13,0,82H		       ;;
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K1_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K1_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 10			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 13,31,13		       ;;
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 43,-1,-1		       ;; \
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
   DB	 86,28,86		       ;;
COM_CTRL_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K1_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: AT + XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K2_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 6			       ;; Number of entries
;  DB	 12,-1,-1		       ;; invalid key U.S. alt -
;  DB	 13,0,82H		       ;; alt - (minus sign)
;  DB	 53,0,83H		       ;; alt = (equal sign)
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K2_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K2_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 11				;; Number of entries
   DB	 12,-1,-1		       ;; invalid U.S. -
   DB	 43,-1,-1		       ;; invalid U.S. \
   DB	 41,28,41		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
   DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K2_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K3_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K3_T3_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 11			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 43,-1,-1		       ;;
   DB	 43,28,43		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
   DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K3_T3_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K3_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_END-$	       ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  CIRCUMFLEX		       ;; flag bit to set
				       ;;
				       ;;
COM_DK_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_END-$	       ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  DIARESIS		       ;; flag bit to set
				       ;;
COM_DK_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: G, P12,AT
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_TH_END-$	       ;; length of state section
   DB	 DEAD_THIRD		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB	       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 3			       ;; number of entries
   DB	40			       ;;
   FLAG ACUTE			       ;;
   DB	43			       ;;
   FLAG GRAVE			       ;;
   DB	53			       ;;
   FLAG TILDE			       ;;
				       ;;
COM_DK_TH_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: XT +
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_TH_K1_END-$	       ;; length of state section
   DB	 DEAD_THIRD		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 3			       ;; number of entries
   DB	40			       ;;
   FLAG ACUTE			       ;;
   DB	41			       ;;
   FLAG GRAVE			       ;;
   DB	53			       ;;
   FLAG TILDE			       ;;
				       ;;
COM_DK_TH_K1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**************************************************** CODE eliminated**********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	      NUM PAD altered  ********
;; CODE PAGE: 850				      CNS engraved "," out
;; STATE: Numeric Pad - Divide Sign
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					;;
;; DW	 CP850_DIVID_END-$	       ;; length of state section
;; DB	 DIVIDE_SIGN		       ;; State ID
;; DW	 G_KB+P12_KB		       ;; Keyboard Type
;; DB	 -1,-1			       ;; error character = standalone accent
;;				       ;;
;; DW	 CP850_DIVID_T1_END-$	       ;; Size of xlat table
;; DB	 TYPE_2_TAB		       ;; xlat options:
;; DB	 2			       ;; number of scans
;; DB	 0E0H,',',0E0H                ;; DIVIDE SIGN
;; DB	 51,',',0E0H                  ;;
;; CP850_DIVID_T1_END:			  ;;
;;					  ;;
;;    DW    0				  ;; Size of xlat table - null table
;;					  ;;
;; CP850_DIVID_END:			  ;;
;;					  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Numeric Key Pad - Multiplication
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;				       ;;
;; DW	 CP850_PAD_K1_END-$	       ;; length of state section
;; DB	 NUMERIC_PAD		       ;; State ID
;; DW	 P12_KB 		       ;; Keyboard Type
;; DB	 -1,-1			       ;; Buffer entry for error character
;;				       ;;
;; DW	 CP850_PAD_K1_T1_END-$	       ;; Size of xlat table
;; DB	 STANDARD_TABLE 	       ;; xlat options:
;; DB	 1			       ;; number of entries
;; DB	 51,',' ; (removed *** CNS ****)  ;; MULTIPLICATION SIGN
;;  CP850_PAD_K1_T1_END:		   ;;
;;					   ;;
;;     DW    0				   ;; Size of xlat table - null table
;;					   ;;
;;  CP850_PAD_K1_END:			   ;;
;;					   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;*********************************************************
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 14			       ;; number of entries
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 16,'a'                        ;; small a
   DB	 17,'z'                        ;; small z
   DB	 30,'q'                        ;; small q
   DB	 39,'m'                        ;; small m
   DB	 44,'w'                        ;; small w
COM_AL_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 15			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 16,'A'                        ;; caps  A
   DB	 17,'Z'                        ;; caps  Z
   DB	 30,'Q'                        ;; caps  Q
   DB	 39,'M'                        ;; caps  M
   DB	 44,'W'                        ;; caps  W
COM_AL_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 11			       ;; number of entries
   DB	 41,""                        ;; superscript 2
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 43,0E6H		       ;; mu
   DB	 86,'<'                        ;;
   DB	 50,','                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES:AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 10			       ;; number of entries
   DB	 41,"<"                        ;;
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 43,0E6H		       ;; mu
   DB	 50,','                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K2_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: XT,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 10			       ;; number of entries
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 41,0E6H		       ;; mu
   DB	 43,'<'                        ;;
   DB	 50,','                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K1_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 10			       ;; number of entries
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;;
   DB	 27,"*"                        ;;
   DB	 40,'%'                        ;;
   DB	 43,''                        ;;
   DB	 86,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_END:			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT +
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 10			       ;; number of entries
   DB	 41,''                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;;
   DB	 27,"*"                        ;;
   DB	 40,'%'                        ;;
   DB	 43,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 10			       ;; number of entries
   DB	 41,'>'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;;
   DB	 27,"*"                        ;;
   DB	 40,'%'                        ;;
   DB	 43,''                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K2_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  9			       ;; number of entries
   DB	  2,"|"                        ;;
   DB	  3,'@'                        ;;
   DB	  4,'#'                        ;;
   DB	  7,'^'                        ;;
   DB	 10,'{'                        ;;
   DB	 11,'}'                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 86,'\'                        ;;
COM_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K1_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  9			       ;; number of entries
   DB	  2,"|"                        ;;
   DB	  3,'@'                        ;;
   DB	  4,'#'                        ;;
   DB	  7,'^'                        ;;
   DB	 10,'{'                        ;;
   DB	 11,'}'                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 43,'\'                        ;;
COM_THIRD_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K2_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  9			       ;; number of entries
   DB	  2,"|"                        ;;
   DB	  3,'@'                        ;;
   DB	  4,'#'                        ;;
   DB	  7,'^'                        ;;
   DB	 10,'{'                        ;;
   DB	 11,'}'                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 41,'\'                        ;;
COM_THIRD_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K2_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: ALL
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 COM_GR_LO_END-$		 ;; length of state section
   DB	 GRAVE_LOWER			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 96,0				 ;; error character = standalone accent
					 ;;
   DW	 COM_GR_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 18,''                          ;; scan code,ASCII - e
   DB	 16,''                          ;; scan code,ASCII - a
   DB	 24,''                          ;; scan code,ASCII - o
   DB	 22,''                          ;; scan code,ASCII - u
   DB	 23,''                          ;; scan code,ASCII - i
COM_GR_LO_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
COM_GR_LO_END:				 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_UP_END-$	       ;; length of state section
   DB	 GRAVE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
COM_GR_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_UP_END:			       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 COM_GR_SP_END-$		 ;; length of state section
   DB	 GRAVE_SPACE			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 96,0				 ;; error character = standalone accent
					 ;;
   DW	 COM_GR_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,96				 ;; STANDALONE GRAVE
COM_GR_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
COM_GR_SP_END:				 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_UP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_UPPER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
COM_CI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_UP_END:			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 COM_TI_SP_END-$		 ;; length of state section
   DB	 TILDE_SPACE			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 126,0				 ;; error character = standalone accent
					 ;;
   DW	 COM_TI_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,126 			 ;; STANDALONE TIDLE
COM_TI_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
COM_TI_SP_END:				 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BE Specific Translate Section for 437
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BE_437_XLAT		       ;;
BE_437_XLAT:			       ;;
				       ;;
   DW	  CP437_XLAT_END-$	       ;; length of section
   DW	  437			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER    	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	7,15H			       ;; Section Symbol
CP437_NA_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	41,00H			       ;; 3 Superscript
CP437_NA_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP437_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 16,''                        ;; a acute
   DB	 18,''                        ;; e acute
   DB	 23,''                        ;; i acute
   DB	 24,''                        ;; o acute
   DB	 22,''                        ;; u acute
CP437_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_AC_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP437_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 39,0				 ;; error character = standalone accent
					 ;;
   DW	 CP437_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 18,''                          ;; scan code,ASCII - e
CP437_AC_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP437_AC_UP_END:			 ;;
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP437_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 39,0				 ;; error character = standalone accent
					 ;;
   DW	 CP437_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,39				 ;; scan code,ASCII - SPACE
CP437_AC_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP437_AC_SP_END:			 ;;
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP437_TI_LO_END-$		 ;; length of state section
   DB	 TILDE_LOWER			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 126,0				 ;; error character = standalone accent
					 ;;
   DW	 CP437_TI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 49,164 			 ;; scan code,ASCII - n
CP437_TI_LO_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP437_TI_LO_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_TI_UP_END-$	       ;; length of state section
   DB	 TILDE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 126,0			       ;; error character = standalone accent
				       ;;
   DW	 CP437_TI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 49,165 		       ;; scan code,ASCII - N
CP437_TI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_TI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0FEH,0 		       ;; error character = standalone accent
				       ;;
   DW	 CP437_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 21,''                        ;; scan code,ASCII - y
CP437_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_DI_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0FEH,0 		       ;; error character = standalone accent
				       ;;
   DW	 CP437_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
CP437_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_DI_UP_END:		       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;				       ;;
;  DW	 CP437_DI_SP_END-$	       ;; length of state section
;  DB	 DIARESIS_SPACE 	       ;; State ID
;  DW	 ANY_KB 		       ;; Keyboard Type
;  DB	 0FEH,0 		       ;; error character = standalone accent
;				       ;;
;  DW	 CP437_DI_SP_T1_END-$	       ;; Size of xlat table
;  DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;  DB	 1			       ;; number of scans
;  DB	 57,0FEH		       ;; error character = standalone accent
;CP437_DI_SP_T1_END:		       ;;
;				       ;;
;  DW	 0			       ;; Size of xlat table - null table
;CP437_DI_SP_END:		       ;; length of state section
;				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	  0			       ;; LAST STATE
				       ;;
CP437_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BE Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BE_850_XLAT		       ;;
BE_850_XLAT:			       ;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER    	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 7,0F5H 		       ;; Section symbol - 
CP850_NA_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_LO_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	41,0FCH 		       ;; 3 Superscript
CP850_NA_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
CP850_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_THIRD_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_TI_LO_END-$		 ;; length of state section
   DB	 TILDE_LOWER			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 126,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_TI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 3				 ;; number of scans
   DB	 49,164 			 ;; scan code,ASCII - n
   DB	 16,0C6H			 ;;		      a
   DB  24,0E4H			 ;;		      o
CP850_TI_LO_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_TI_LO_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_TI_UP_END-$	       ;; length of state section
   DB	 TILDE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 126,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_TI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 49,165 		       ;; scan code,ASCII - N
   DB	 16,0C7H		       ;;		    A
   DB	 24,0E5H		       ;;		    O
CP850_TI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_TI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0EFH,0 		       ;; error character = standalone accent
   DW	 CP850_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 16,''                        ;; a acute
   DB	 18,''                        ;; e acute
   DB	 23,''                        ;; i acute
   DB	 24,''                        ;; o acute
   DB	 22,''                        ;; u acute
   DB	 21,0ECH		       ;; y acute  ADDED 12/16 CNS **********
CP850_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 0EFH,0 			 ;; error character = standalone accent
   DW	 CP850_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 6				 ;; number of scans
   DB	 16,0B5H			 ;;    A acute
   DB	 18,090H			 ;;    E acute
   DB	 23,0D6H			 ;;    I acute
   DB	 24,0E0H			 ;;    O acute
   DB	 22,0E9H			 ;;    U acute
   DB	 21,0EDH			 ;;    Y acute
CP850_AC_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_AC_UP_END:			 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 0EFH,0 			 ;; error character = standalone accent
					 ;;
   DW	 CP850_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,0EFH			 ;; scan code,ASCII - SPACE
CP850_AC_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_AC_SP_END:			 ;;
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 21,''                        ;; scan code,ASCII - y
CP850_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_LO_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;					 ;;
;; CODE PAGE: 850
;; STATE: Diaresis Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_DI_UP_END-$		 ;; length of state section
   DB	 DIARESIS_UPPER 		 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 249,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_DI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 16,8EH 			 ;;    A di
   DB	 18,0D3H			 ;;    E diaeresis
   DB	 23,0D8H			 ;;    I diaeresis
   DB	 24,99H 			 ;;    O di
   DB	 22,9AH 			 ;;    U di
CP850_DI_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_DI_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Diaeresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_DI_SP_END-$		 ;; length of state section
   DB	 DIARESIS_SPACE 		 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 0FEH,0 			 ;; error character = standalone accent
					 ;;
   DW	 CP850_DI_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,0F9H			 ;; scan code,ASCII - SPACE
CP850_DI_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_DI_SP_END:			 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: ALL
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_GR_UP_END-$		 ;; length of state section
   DB	 GRAVE_UPPER			 ;; State ID
   DW	 ANY_KB 			 ;; Keyboard Type
   DB	 96,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_GR_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 16,0B7H			 ;;    A grave
   DB	 18,0D4H			 ;;    E grave
   DB	 23,0DEH			 ;;    I grave
   DB	 24,0E3H			 ;;    O grave
   DB	 22,0EBH			 ;;    U grave
CP850_GR_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_GR_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_CI_UP_END-$		 ;; length of state section
   DB	 CIRCUMFLEX_UPPER		 ;; State ID
   DW	 ANY_KB 			 ;;
   DB	 94,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_CI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 16,0B6H			 ;;    A circumflex
   DB	 18,0D2H			 ;;    E circumflex
   DB	 23,0D7H			 ;;    I circumflex
   DB	 24,0E2H			 ;;    O circumflex
   DB	 22,0EAH			 ;;    U circumflex
CP850_CI_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_CI_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
     DW    0				 ;; LAST STATE
					 ;;
CP850_XLAT_END: 			 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
CODE	 ENDS				 ;;
	 END				 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kbdhe319.asm ===
AltLeftShift      EQU  10
AltRightShift     EQU  9
CtrlLeftShift     EQU  5
CtrlRightShift    EQU  4
CtrlAlt           EQU  12

caps_bit     equ        01000000b
nums_bit     equ        00100000b

NUMKBTONOI        EQU  29
NUMKBDIAL         EQU   9
NUMKBTONDIAL      EQU   9
NUMSEMICODES      EQU 122
NUMKBCODES        EQU 124
NUMEVERYTIME      EQU  51
ISWINDOWSNT       EQU  3205H

NumOfKeyCodes     EQU  344

ROM_BIOS_DATA   SEGMENT     AT 40H    ;BIOS statuses held here, also kb buffer
        ORG      17h
        bios_kbd_stat db ?                          ;keyboard status byte
        ORG      1AH
        HEAD     DW          ?             ;Unread chars go from Head to Tail
        TAIL     DW          ?
        BUFFER              DW   16 DUP (?)   ;The buffer itself
        BUFFER_END          LABEL   WORD

ROM_BIOS_DATA   ENDS

CODE            SEGMENT PARA PUBLIC 'CODE'
        ASSUME  CS:CODE
                ORG     100H
BEGIN:          JMP     INITIALIZE

MYSIG           DB      'G.Kozyrakis'

NEW_INT09H  PROC    NEAR              ;The keyboard interrupt will now come here.
        ASSUME  CS:CODE
        PUSH    AX                    ;Save the used registers for good form
        PUSH    BX
        PUSH    CX
        PUSH    DX
        PUSH    DI
        PUSH    SI
        PUSH    DS
        PUSH    ES
        PUSHF                            ;First, call old keyboard interrupt
        CALL    OLD_INT09H
        CMP     CS:[CHECKFLAG],1
        JNE     JEXIT
        CLI
        ASSUME  DS:ROM_BIOS_DATA         ;Examine the char just put in
        MOV     BX,ROM_BIOS_DATA
        MOV     DS,BX
        MOV     BX,TAIL                  ;Point to current tail
        MOV     CL,Bios_kbd_stat
        MOV     CH,CL
        AND     CH,1FH
        AND     CL,0Fh
        CMP     CL,AltRightShift
        JNE     NOGREEKSWITCH
        MOV     GrFlag,AltRightShift
        MOV     SemiFlag,0
        JMP     SHORT START
NOGREEKSWITCH:
        CMP     CL,AltLeftShift
        JNE     CHKSEMI
        MOV     GrFlag,0
        MOV     SemiFlag,0
        JMP     SHORT START

CHKSEMI:
        MOV     CL,Bios_kbd_stat
        AND     CL,CtrlLeftShift
        CMP     CL,CtrlLeftShift
        JNE     START
SemiGr: 
        XOR     SemiFlag,CtrlLeftShift

START:  
        CMP     BX,HEAD                  ;If at head, kbd int has deleted char
        JE      JEXIT                    ;So leave
        SUB     BX,2                     ;Point to just read in character
        CMP     BX,OFFSET BUFFER         ;Did we undershoot buffer?
        JAE     NO_WRAP                  ;Nope
        MOV     BX,OFFSET BUFFER_END     ;Yes -- move to buffer top
        SUB     BX,2                     ;Point to just read in character
NO_WRAP:
        MOV     DX, [BX]                 ;** Typed character in DX now **
        cmp     DL,32
        jne     NOTOGGLE
        mov     CL,CH
        and     CL,0Fh
        cmp     CL,CtrlAlt
        jne     NOTOGGLE
        xor     GrFlag,AltRightShift
        MOV     SemiFlag,0
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        JMP     EXIT
NOTOGGLE:
        TEST    CH,10h
        JZ      NOSCROLL
        cmp     dh,7ah
        ja      NOSCROLL
        cmp     dh,78h
        jb      NOSCROLL
        push    es
        push    ds
        mov     ax,CS
        mov     es,ax
        mov     ds,ax
        push    bx
        mov     al,dh
        sub     al,77h
        CALL    ChangeCP
        pop     bx
        pop     ds
        pop     es
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        JMP     EXIT
NOSCROLL:
        MOV     SI,KBOffset
        ADD     SI,(NUMKBTONOI+NUMKBDIAL+NUMKBTONDIAL)*2 ;Semicodes
        CMP     SemiFlag,CtrlLeftShift
        JE      GREEKS
        ADD     SI,NUMSEMICODES*2        ;KBCodes
        CMP     GrFlag,AltRightShift
        JE      GREEKS
        ADD     SI,NUMKBCODES*2          ;EVERYTIME
        JMP     SHORT TCNT
JEXIT:  JMP     EXIT
GREEKS: 
        CMP     ToneStat,-1
        JE      CHKTN
        MOV     SI,KBOffset             ;KBTONOI
        CMP     ToneStat,3bh
        JE      TCNT
        ADD     SI,NUMKBTONOI*2         ;KBDIAL
        CMP     ToneStat,3ah
        JE      TCNT
        ADD     SI,NUMKBDIAL*2         ;KBTONDIAL


TCNT:   CMP     DX,CS:[SI]               ;Compare to first key
        JE      FOUNDONE                 ;yes
        ADD     SI,4                     ;Point to next key
        CMP     CS:[SI],0FFFFH           ;check for end;
        JNE     TCNT                     ;No continue with next table entry
        CMP     ToneStat,-1
        Je      NoTonos
        cmp     DH,27h
        JE      ISTONOS
        MOV     TAIL,BX
NoTonos:
        MOV     ToneStat,-1
        JMP     EXIT

CHKTN:  CMP     DH,27H                   ;is it a tonos
        JNE     CONT
ISTONOS:
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        CMP     ToneStat,DL
        JE      EXIT
        CMP     ToneStat,-1
        Jne     CHNGTONE
        Mov     ToneStat,DL
        JMP     SHORT EXIT
CHNGTONE:
        Mov     ToneStat,0
        JMP     SHORT EXIT

CONT:   CMP     DX,CS:[SI]               ;Compare to first key
        JE      FOUNDONE                 ;yes
        ADD     SI,4                     ;Point to next key
        CMP     CS:[SI],0FFFFH           ;check for end;
        JNE     CONT                     ;No continue with next table entry

        JMP     SHORT EXIT               ;No keys matched.  Jump Out.

FOUNDONE:
        MOV     DX,CS:[SI+2]
        MOV     [BX],DX
        MOV     ToneStat,-1
EXIT:   
        STI
        PUSH    BP
        MOV     AH,03
        INT     10H
        CMP     CH,CL
        JAE     NO_CURSOR
        MOV     CX,CURSOR1
        XOR     CH,CH
        CMP     SemiFlag,0
        JNE     SET_CURSOR
        MOV     CX,CURSOR1
        CMP     GRFlag,0
        JNE     SET_CURSOR
        MOV     CX,CURSOR0
SET_CURSOR:
        MOV     AH,1
        INT     10h
NO_CURSOR:
        POP     BP
        POP     ES                       ;Do the Pops of all registers.
        POP     DS
        POP     SI
        POP     DI
        POP     DX
        POP     CX
        POP     BX
        POP     AX
        IRET                          ;An interrupt needs an IRET

NEW_INT09H ENDP


ChangeCP PROC   NEAR
         CLI
         Mov     ES:[KBOffset],OFFSET ES:[TAB928]
         CMP     AL,3
         JE      ChangeAll
         Mov     ES:[KBOffset],OFFSET ES:[TAB869]
         CMP     AL,2
         JE      ChangeAll
         Mov     ES:[KBOffset],OFFSET ES:[TAB737]
         CMP     AL,1
         JNE     NOCHCP
ChangeAll:
         MOV     CS:[CPTable],AL
NOCHCP:
         STI
         RET
ChangeCP ENDP


;* Multiplex - Handler for Interrupt 2Fh (Multiplex Interrupt). Checks
;* AH for this TSR's identity number. If no match (indicating call is
;* not intended for this TSR), Multiplex passes control to the previous
;* Interrupt 2Fh handler.
;*
;* Params: AH = Handler identity number
;*         AL = Function number 0-2
;*
;* Return: AL    = 0FFh (function 0)
;*         "GK" in BX (function 0)
;*         ES = Current CS (function 0)
;*         DH = Greek State for function 1 ( 9 or 10)
;*         DL = Code Page (1:=737 2:=869 3:=928) for function 2
Multiplex PROC  FAR

        .IF     ah != 0CCh              ; If this handler not requested,
        jmp     cs:MULTEX_ISR           ;   pass control to old Int 2Fh
        .ENDIF                          ;   handler
        push    cs
        pop     es

        .IF     al == 0                 ; If function 0 (verify presence),
        mov     al, 0FFh                ;   AL = 0FFh,
        mov     bx, "GK"
        mov     dh, CS:[GRFlag]
        mov     dl, CS:[CPTable]
        .ELSEIF al == 1
        mov     CS:[GRFlag],dh
        .ELSEIF al == 2
        mov     al,dl
        push    ds
        push    cs
        pop     ds
        CALL    ChangeCP
        pop     ds
        .ENDIF                          ;   set ES:DI = far address

        iret

Multiplex ENDP


BIOS_ISR   LABEL   DWORD
OLD_INT09H DD  ?       ;Location of old kbd interrupt
MULTEX_ISR LABEL   DWORD
OLD_INT2FH DD  ?       ;Location of old multiplex interrupt
ToneStat   DB  -1      ;Set to >-1 when tonos is pressed
GrFlag     DB  0
SemiFlag   DB  0
CURSOR0    DW  0B0CH
CURSOR1    DW  070CH
CHECKFLAG  DB  1
CPTable    DB  0
OS_Ver     DW  0

KBOffset   DW  OFFSET TAB737

TAB737     dw    1E61H, 1EE1H   ; a    KBTONOI
           dw    1265H, 12E2H   ; e
           dw    2368H, 23E3H   ; h
           dw    1769H, 17E5H   ; i
           dw    186FH, 18E6H   ; o
           dw    1579H, 15E7H   ; y
           dw    2F76H, 2FE9H   ; v
           DW    1e41H, 1EEAH   ; A
           dw    1245H, 12EBH   ; E
           DW    2348H, 23ECH   ; H
           DW    1749H, 17EDH   ; I
           DW    184fH, 18EEH   ; O
           DW    1559H, 15EFH   ; Y
           DW    2f56H, 00F0H   ; V
           dw    0FFFFH
KBDIAL     dw    1769H, 17E4H   ; i
           dw    1579H, 15E8H   ; y
           dw    1749H, 1749H
           DW    1559H, 1559H
           dw    0FFFFH
KBTONDIAL  dw    1769H, 17F9H   ; i
           dw    1579H, 15FAH   ; y
           dw    1749H, 1749H
           DW    1559H, 1559H
           dw    0FFFFH
SEMICODES  dw    3b00H, 3bC9H   ;    F1
           dw    3c00H, 3cBBH   ;    F2
           dw    3e00H, 3eC8H   ;    F3
           dw    3d00H, 3dBCH   ;    F4
           dw    3f00H, 3fCDH   ;    F5
           dw    4000H, 40BAH   ;    F6
           dw    4100H, 41CCH   ;    F7
           dw    4200H, 42B9H   ;    F8
           dw    4300H, 43CBH   ;    F9
           dw    4400H, 44CAH   ;    F10
           dw    5400H, 54DAH   ;    shift+F1
           dw    5500H, 55BFH   ; 
           dw    5700H, 57C0H   ; 
           dw    5600H, 56D9H   ; 
           dw    5800H, 58C4H   ; 
           dw    5900H, 59B3H   ; 
           dw    5a00H, 5aC3H   ; 
           dw    5b00H, 5bB4H   ; 
           dw    5c00H, 5cC2H   ; 
           dw    5d00H, 5dC1H   ;    shift+F10
           dw    6200H, 62CEH   ; 
           dw    6C00H, 6CC5H   ; 
           dw    1000h, 10DBH   ;    alt  +Q
           dw    1100h, 11B0H   ;    alt  +E
           dw    1200h, 12B1H   ; 
           dw    1300h, 13B2H   ; 
           dw    1400h, 14DCH   ; 
           dw    1500h, 15DFH   ; 
           dw    6F00H, 6FB5H   ; 
           dw    6500H, 65B6H   ; 
           dw    5f00H, 5fB7H   ; 
           dw    6900H, 69B8H   ; 
           dw    6000H, 60BDH   ; 
           dw    6A00H, 6ABEH   ; 
           dw    6E00H, 6EC6H   ; 
           dw    6400H, 64C7H   ; 
           dw    6700H, 67CFH   ;    ctrl +F10
           dw    7100H, 71D0H   ;    alt  +F10
           dw    6600H, 66D1H   ; 
           dw    7000H, 70D2H   ; 
           dw    6100H, 61D3H   ; 
           dw    6B00H, 6BD4H   ; 
           dw    6800H, 68D5H   ;    alt  +F1
           dw    5e00H, 5eD6H   ;    ctrl +F1
           dw    6300H, 63D7H   ; 
           dw    6D00H, 6DD8H   ; 
           dw    1600h, 16DDH   ; 
           dw    1700h, 17DEH   ; 
           dw    7800h, 78F1H   ;    alt  +1
           dw    7A00H, 7AF2H   ; 
           dw    7900H, 79F3H   ;    alt  +2
           dw    1800h, 18F4H   ; 
           dw    1900h, 19F5H   ;    alt  +P
           dw    7B00H, 7BF6H   ; 
           dw    7C00H, 7CF7H   ; 
           dw    7D00H, 7DF8H   ; 
           dw    7E00H, 7EF9H   ; 
           dw    7F00H, 7FFBH   ; 
           dw    8000H, 80FDH   ; 
           dw    8100H, 81FCH   ; 
           dw    8200H, 82FEH   ;    alt  +-
KBCODES    dw    1E61H, 1898H   ; a
           dw    3062H, 3099H   ; b
           dw    2267H, 229AH   ; g
           dw    2064H, 209BH   ; d
           dw    1265H, 129CH   ; e
           dw    2C7AH, 2C9DH   ; z
           dw    2368H, 239EH   ; h
           dw    1675H, 169FH   ; u
           dw    1769H, 17A0H   ; i
           dw    256BH, 25A1H   ; k
           dw    266CH, 26A2H   ; l
           dw    326DH, 32A3H   ; m
           dw    316EH, 31A4H   ; n
           dw    246AH, 24A5H   ; j
           dw    186FH, 18A6H   ; o
           dw    1970H, 19A7H   ; p
           dw    1372H, 13A8H   ; r
           dw    1F73H, 1FA9H   ; s
           dw    1474H, 14ABH   ; t
           dw    1579H, 15ACH   ; y
           dw    2166H, 21ADH   ; f
           dw    2D78H, 2DAEH   ; x
           dw    2E63H, 2EAFH   ; c
           dw    2F76H, 00E0H   ; v
           dw    1177H, 11AAH   ; w
           dw    1E41H, 1E80H   ; A
           dw    3042H, 3081H   ; B
           dw    2247H, 2282H   ; G
           dw    2044H, 2083H   ; D
           dw    1245H, 1284H   ; E
           dw    2C5AH, 2C85H   ; Z
           dw    2348H, 2386H   ; H
           dw    1655H, 1687H   ; U
           dw    1749H, 1788H   ; I
           dw    254BH, 2589H   ; K
           dw    264CH, 268AH   ; L
           dw    324DH, 328BH   ; M
           dw    314EH, 318CH   ; N
           dw    244AH, 248DH   ; J
           dw    184FH, 188EH   ; O
           dw    1950H, 198FH   ; P
           dw    1352H, 1390H   ; R
           dw    1F53H, 1F91H   ; S
           dw    1454H, 1492H   ; T
           dw    1559H, 1593H   ; Y
           dw    2146H, 2194H   ; F
           dw    2D58H, 2D95H   ; X
           dw    2E43H, 2E96H   ; C
           dw    2F56H, 2F97H   ; V
           dw    1157H, 117eH   ; w
           dw    565CH, 563CH   ; <
           dw    567CH, 563EH   ; >
           dw    0423h, 0423h   ;
           dw    0000h, 0000h
           dw    0000h, 0000h
           dw    0000h, 0000h
           dw    0000h, 0000h
           dw    0000h, 0000h
           dw    0000h, 0000h
           dw    0000h, 0000h
           dw    0000h, 0000h
           dw    0000h, 0000h
EVERYTIME  dw    7a00H, 04F9H   ; 
           DW    2960H, 295CH   ; \
           dw    297EH, 297CH   ; |
           dw    0340H, 0322H   ; "
           dw    075EH, 0726H   ; &
           dw    0826H, 082FH   ; /
           dw    092AH, 0928H   ; (
           dw    0A28H, 0A29H   ; )
           dw    0B29H, 0B3DH   ; =
           dw    0C5FH, 0C3FH   ; ?
           dw    0C2DH, 0C27H   ; '
           dw    0D3DH, 0D2BH   ; +
           dw    0D2BH, 0D2AH   ; *
           dw    2B5CH, 2B23H   ; #
           dw    2B7CH, 2B40H   ; @
           dw    565CH, 563CH   ; <
           dw    567CH, 563EH   ; >
           dw    333CH, 333BH   ; ;
           dw    343EH, 343AH   ; :
           dw    352FH, 352DH   ; -
           dw    353FH, 355FH   ; _
           dw    273BH, 2727H   ; '
           dw    1B1dH, 1b5EH   ;
           dw    2827H, 285EH   ; ^
           dw    2822H, 287EH   ; ~
           dw    0FFFFH


TAB869     dw    1E61H, 1E9BH   ; a
           dw    1265H, 129DH   ; e
           dw    2368H, 239EH   ; h
           dw    1769H, 179FH   ; i
           dw    186FH, 18A2H   ; o
           dw    1579H, 15A3H   ; y
           dw    2F76H, 2FFDH   ; v
           DW    1e41H, 1E86H   ; A
           dw    1245H, 128DH   ; E
           DW    2348H, 238FH   ; H
           DW    1749H, 1790H   ; I
           DW    184fH, 1892H   ; O
           DW    1559H, 1595H   ; Y
           DW    2f56H, 2F98H   ; V
           dw    0FFFFH
           dw    1769H, 17A0H   ; i
           dw    1579H, 15FBH   ; y
           dw    1749H, 17ADH   ; I
           DW    1559H, 15D1H   ; Y
           dw    0FFFFH
           dw    1769H, 17A1H   ; i
           dw    1579H, 15FCH   ; y
           dw    1749H, 1749H
           DW    1559H, 1559H
           dw    0FFFFH
           dw    3b00H, 3bC9H   ;    F1
           dw    3c00H, 3cBBH   ;    F2
           dw    3e00H, 3eC8H   ;    F3
           dw    3d00H, 3dBCH   ;    F4
           dw    3f00H, 3fCDH   ;    F5
           dw    4000H, 40BAH   ;    F6
           dw    4100H, 41CCH   ;    F7
           dw    4200H, 42B9H   ;    F8
           dw    4300H, 43CBH   ;    F9
           dw    4400H, 44CAH   ;    F10
           dw    5400H, 54DAH   ;    shift+F1
           dw    5500H, 55BFH   ; 
           dw    5700H, 57C0H   ; 
           dw    5600H, 56D9H   ; 
           dw    5800H, 58C4H   ; 
           dw    5900H, 59B3H   ; 
           dw    5a00H, 5aC3H   ; 
           dw    5b00H, 5bB4H   ; 
           dw    5c00H, 5cC2H   ; 
           dw    5d00H, 5dC1H   ;    shift+F10
           dw    6200H, 62CEH   ; 
           dw    6C00H, 6CC5H   ; 
           dw    1000h, 10DBH   ;    alt  +Q
           dw    1100h, 11B0H   ;    alt  +E
           dw    1200h, 12B1H   ; 
           dw    1300h, 13B2H   ; 
           dw    1400h, 14DCH   ; 
           dw    1500h, 15DFH   ; 
           dw    6F00H, 6FABH   ; 
           dw    6500H, 65AEH   ; 
           dw    5f00H, 5fAFH   ; 
           dw    6900H, 69B8H   ; 
           dw    6000H, 60BDH   ; 
           dw    6A00H, 6ABEH   ; 
           dw    6E00H, 6EC6H   ; 
           dw    6400H, 64C7H   ; 
           dw    6700H, 67CFH   ;    ctrl +F10
           dw    7100H, 71D0H   ;    alt  +F10
           dw    6600H, 66D1H   ; 
           dw    7000H, 70D2H   ; 
           dw    6100H, 61D3H   ; 
           dw    6B00H, 6BD4H   ; 
           dw    6800H, 68D5H   ;    alt  +F1
           dw    5e00H, 5eD6H   ;    ctrl +F1
           dw    6300H, 63D7H   ; 
           dw    6D00H, 6DD8H   ; 
           dw    1600h, 16DDH   ; 
           dw    1700h, 17DEH   ; 
           dw    7800h, 78AEH   ;    alt  +1
           dw    7A00H, 7AABH   ; 
           dw    7900H, 79AFH   ;    alt  +2
           dw    1800h, 18F0H   ; 
           dw    1900h, 19F1H   ;    alt  +P
           dw    7B00H, 7BF7H   ; 
           dw    7C00H, 7CF5H   ; 
           dw    7D00H, 7DF8H   ; 
           dw    7E00H, 7EF9H   ; 
           dw    7F00H, 7FFBH   ; 
           dw    8000H, 80FDH   ; 
           dw    8100H, 81FCH   ; 
           dw    8200H, 82FEH   ;    alt  +-
           dw    1E61H, 18D6H   ; a
           dw    3062H, 30D7H   ; b
           dw    2267H, 22D8H   ; g
           dw    2064H, 20DDH   ; d
           dw    1265H, 12DEH   ; e
           dw    2C7AH, 00E0H   ; z
           dw    2368H, 23E1H   ; h
           dw    1675H, 16E2H   ; u
           dw    1769H, 17E3H   ; i
           dw    256BH, 25E4H   ; k
           dw    266CH, 26E5H   ; l
           dw    326DH, 32E6H   ; m
           dw    316EH, 31E7H   ; n
           dw    246AH, 24E8H   ; j
           dw    186FH, 18E9H   ; o
           dw    1970H, 19EAH   ; p
           dw    1372H, 13EBH   ; r
           dw    1F73H, 1FECH   ; s
           dw    1474H, 14EEH   ; t
           dw    1579H, 15F2H   ; y
           dw    2166H, 21F3H   ; f
           dw    2D78H, 2DF4H   ; x
           dw    2E63H, 2EF6H   ; c
           dw    2F76H, 2FFAH   ; v
           dw    1177H, 11EDH   ; w
           dw    1E41H, 1EA4H   ; A
           dw    3042H, 30A5H   ; B
           dw    2247H, 22A6H   ; G
           dw    2044H, 20A7H   ; D
           dw    1245H, 12A8H   ; E
           dw    2C5AH, 2CA9H   ; Z
           dw    2348H, 23AAH   ; H
           dw    1655H, 16ACH   ; U
           dw    1749H, 17ADH   ; I
           dw    254BH, 25B5H   ; K
           dw    264CH, 26B6H   ; L
           dw    324DH, 32B7H   ; M
           dw    314EH, 31B8H   ; N
           dw    244AH, 24BDH   ; J
           dw    184FH, 18BEH   ; O
           dw    1950H, 19C6H   ; P
           dw    1352H, 13C7H   ; R
           dw    1F53H, 1FCFH   ; S
           dw    1454H, 14D0H   ; T
           dw    1559H, 15D1H   ; Y
           dw    2146H, 21D2H   ; F
           dw    2D58H, 2DD3H   ; X
           dw    2E43H, 2ED4H   ; C
           dw    2F56H, 2FD5H   ; V
           dw    1157H, 117eH   ; w
           dw    565CH, 56F5H   ; Para
           dw    567CH, 5697H   ; Copyright
           dw    0423h, 049ch   ;
           dw    1a7bH, 1aaeH   ;
           dw    1b7dH, 1bafH   ;
           dw    2827H, 288cH   ; ^
           dw    2822H, 288BH   ; ~
           DW    2960H, 29ABH   ; \
           dw    297EH, 29F1H   ; |
           dw    0C5FH, 0CF8H   ; ?
           dw    2B5CH, 2B99H   ; #
           dw    2B7CH, 2B9aH   ; @

           dw    7a00H, 049CH   ; 
           DW    2960H, 295CH   ; \
           dw    297EH, 297CH   ; |
           dw    0340H, 0322H   ; "
           dw    075EH, 0726H   ; &
           dw    0826H, 082FH   ; /
           dw    092AH, 0928H   ; (
           dw    0A28H, 0A29H   ; )
           dw    0B29H, 0B3DH   ; =
           dw    0C5FH, 0C3FH   ; ?
           dw    0C2DH, 0C27H   ; '
           dw    0D3DH, 0D2BH   ; +
           dw    0D2BH, 0D2AH   ; *
           dw    2B5CH, 2B23H   ; #
           dw    2B7CH, 2B40H   ; @
           dw    565CH, 563CH   ; <
           dw    567CH, 563EH   ; >
           dw    333CH, 333BH   ; ;
           dw    343EH, 343AH   ; :
           dw    352FH, 352DH   ; -
           dw    353FH, 355FH   ; _
           dw    273BH, 2727H   ; '
           dw    1B1dH, 1b5EH   ;
           dw    2827H, 285EH   ; ^
           dw    2822H, 287EH   ; ~
           dw    0FFFFH

TAB928     dw    1E61H, 1EDCH   ; a
           dw    1265H, 12DDH   ; e
           dw    2368H, 23DEH   ; h
           dw    1769H, 17DFH   ; i
           dw    186FH, 18FCH   ; o
           dw    1579H, 15FDH   ; y
           dw    2F76H, 2FFEH   ; v
           DW    1e41H, 1EB6H   ; A
           dw    1245H, 12B8H   ; E
           DW    2348H, 23B9H   ; H
           DW    1749H, 17BAH   ; I
           DW    184fH, 18BCH   ; O
           DW    1559H, 15BEH   ; Y
           DW    2f56H, 2FBFH   ; V
           dw    0FFFFH
           dw    1769H, 17FAH   ; i
           dw    1579H, 15FBH   ; y
           dw    1749H, 17DAH   ; I
           DW    1559H, 15DBH   ; Y
           dw    0FFFFH
           dw    1769H, 17C0H   ; i
           dw    1579H, 15E0H   ; y
           dw    1749H, 1749H
           DW    1559H, 1559H
           dw    0FFFFH
           dw    3b00H, 3b91H   ;    F1
           dw    3c00H, 3c87H   ;    F2
           dw    3e00H, 3e90H   ;    F3
           dw    3d00H, 3d88H   ;    F4
           dw    3f00H, 3f95H   ;    F5
           dw    4000H, 4086H   ;    F6
           dw    4100H, 4194H   ;    F7
           dw    4200H, 4285H   ;    F8
           dw    4300H, 4393H   ;    F9
           dw    4400H, 4492H   ;    F10
           dw    5400H, 5498H   ;    shift+F1
           dw    5500H, 5589H   ; 
           dw    5700H, 578AH   ; 
           dw    5600H, 5697H   ; 
           dw    5800H, 588EH   ; 
           dw    5900H, 5983H   ; 
           dw    5a00H, 5a8dH   ; 
           dw    5b00H, 5b84H   ; 
           dw    5c00H, 5c8cH   ; 
           dw    5d00H, 5d8bH   ;    shift+F10
           dw    6200H, 6296H   ; 
           dw    6C00H, 6C8fH   ; 
           dw    1000h, 1099H   ;    alt  +Q
           dw    1100h, 1180H   ;    alt  +E
           dw    1200h, 1281H   ; 
           dw    1300h, 1382H   ; 
           dw    1400h, 149aH   ; 
           dw    1600h, 169bH   ; 
                                ;         differ in other CPs
           dw    6F00H, 6F00H   ; 
           dw    6500H, 6500H   ; 
           dw    5f00H, 5f00H   ; 
           dw    6900H, 6900H   ; 
           dw    6000H, 6000H   ; 
           dw    6A00H, 6A00H   ; 
           dw    6E00H, 6E00H   ; 
           dw    6400H, 6400H   ; 
           dw    6700H, 6700H   ;    ctrl +F10
           dw    7100H, 7100H   ;    alt  +F10
           dw    6600H, 6600H   ; 
           dw    7000H, 7000H   ; 
           dw    6100H, 6100H   ; 
           dw    6B00H, 6B00H   ; 
           dw    6800H, 6800H   ;    alt  +F1
           dw    5e00H, 5e00H   ;    ctrl +F1
           dw    6300H, 6300H   ; 
           dw    2b00H, 00a7H   ; 
           dw    1500h, 00e0H   ; 
           dw    1700h, 17c0H   ; 
           dw    7800h, 78B1H   ;    alt  +1
           dw    7A00H, 7AABH   ; 
           dw    7900H, 79BBH   ;    alt  +2
           dw    1800h, 18a7H   ; 
           dw    1900h, 19a9H   ;    alt  +P
           dw    7B00H, 7BF6H   ; 
           dw    7C00H, 7CF7H   ; 
           dw    7D00H, 7Db0H   ; 
           dw    7E00H, 7Eb7H   ; 
           dw    7F00H, 7F9cH   ; 
           dw    8000H, 80b2H   ; 
           dw    8100H, 81b3H   ; 
           dw    8200H, 82bdH   ;    alt  +-

           dw    1E61H, 18E1H   ; a
           dw    3062H, 30E2H   ; b
           dw    2267H, 22E3H   ; g
           dw    2064H, 20E4H   ; d
           dw    1265H, 12E5H   ; e
           dw    2C7AH, 2CE6H   ; z
           dw    2368H, 23E7H   ; h
           dw    1675H, 16E8H   ; u
           dw    1769H, 17E9H   ; i
           dw    256BH, 25EAH   ; k
           dw    266CH, 26EBH   ; l
           dw    326DH, 32ECH   ; m
           dw    316EH, 31EDH   ; n
           dw    246AH, 24EEH   ; j
           dw    186FH, 18EFH   ; o
           dw    1970H, 00F0H   ; p
           dw    1372H, 13F1H   ; r
           dw    1F73H, 1FF3H   ; s
           dw    1474H, 14F4H   ; t
           dw    1579H, 15F5H   ; y
           dw    2166H, 21F6H   ; f
           dw    2D78H, 2DF7H   ; x
           dw    2E63H, 2EF8H   ; c
           dw    2F76H, 2FF9H   ; v
           dw    1177H, 11F2H   ; w
           dw    1E41H, 1EC1H   ; A
           dw    3042H, 30C2H   ; B
           dw    2247H, 22C3H   ; G
           dw    2044H, 20C4H   ; D
           dw    1245H, 12C5H   ; E
           dw    2C5AH, 2CC6H   ; Z
           dw    2348H, 23C7H   ; H
           dw    1655H, 16C8H   ; U
           dw    1749H, 17C9H   ; I
           dw    254BH, 25CAH   ; K
           dw    264CH, 26CBH   ; L
           dw    324DH, 32CCH   ; M
           dw    314EH, 31CDH   ; N
           dw    244AH, 24CEH   ; J
           dw    184FH, 18CFH   ; O
           dw    1950H, 19D0H   ; P
           dw    1352H, 13D1H   ; R
           dw    1F53H, 1FD3H   ; S
           dw    1454H, 14D4H   ; T
           dw    1559H, 15D5H   ; Y
           dw    2146H, 21D6H   ; F
           dw    2D58H, 2DD7H   ; X
           dw    2E43H, 2ED8H   ; C
           dw    2F56H, 2FD9H   ; V
           dw    1157H, 117eH   ; w
           dw    565CH, 56A7H   ; Para
           dw    567CH, 56A9H   ; Copyright
           dw    0423h, 04A3h   ;
           dw    1a7bH, 1aabH   ;
           dw    1b7dH, 1bbbH   ;
           dw    2827H, 28A2H   ; ^
           dw    2822H, 28A1H   ; ~
           DW    2960H, 29BDH   ; \
           dw    297EH, 29B1H   ; |
           dw    0C5FH, 0CB0H   ; ?
           dw    2B5CH, 2Bb2H   ; #
           dw    2B7CH, 2Bb3H   ; @

           dw    7a00H, 04A3H   ; 
           DW    2960H, 295CH   ; \
           dw    297EH, 297CH   ; |
           dw    0340H, 0322H   ; "
           dw    075EH, 0726H   ; &
           dw    0826H, 082FH   ; /
           dw    092AH, 0928H   ; (
           dw    0A28H, 0A29H   ; )
           dw    0B29H, 0B3DH   ; =
           dw    0C5FH, 0C3FH   ; ?
           dw    0C2DH, 0C27H   ; '
           dw    0D3DH, 0D2BH   ; +
           dw    0D2BH, 0D2AH   ; *
           dw    2B5CH, 2B23H   ; #
           dw    2B7CH, 2B40H   ; @
           dw    565CH, 563CH   ; <
           dw    567CH, 563EH   ; >
           dw    333CH, 333BH   ; ;
           dw    343EH, 343AH   ; :
           dw    352FH, 352DH   ; -
           dw    353FH, 355FH   ; _
           dw    273BH, 2727H   ; '
           dw    1B1dH, 1b5EH   ;
           dw    2827H, 285EH   ; ^
           dw    2822H, 287EH   ; ~
           dw    0FFFFH


INITIALIZE      PROC    NEAR
        ASSUME  DS:CODE
                PUSH   CS
                POP    ES
                MOV     AX,3306H
                INT     21H
                MOV     OS_Ver,BX

                MOV     AX,0CC00h
                INT     2Fh
                CMP     AL,0FFh
                JNE     PARSE
                CMP     BX,"GK"
                JNE     PARSE
                MOV     INSTALL_FLAG,1          ;Program is already installed
                MOV     CS:[CodePage],DL
;
;
PARSE:
	CLD				;CLEAR DIRECTION
        XOR     CH,CH
        MOV     SI,80H                  ;Point DS:SI to command line
        MOV     CL,[SI]
        CMP     CL,0
        JE      ENDSCAN
        INC     SI
INIT1:	LODSB
        CMP     AL,"/"
        JE      SLASHCAR
INIT6:  LOOP    INIT1
        JMP     ENDSCAN
SLASHCAR:
        CMP     BYTE PTR [SI],'?'
        JNE     NO_HELP
        JMP     DISP_HELP

NO_HELP:
        CMP     BYTE PTR [SI],'8'
        JE      INIT2

        CMP     BYTE PTR [SI],'9'
        JE      INIT3

        CMP     BYTE PTR [SI],'7'
        JE      INIT4

        CMP     BYTE PTR [SI],'4'
        JE      INIT4


        AND     BYTE PTR [SI],0DFh          ;Change char to uppercase
;        CMP     BYTE PTR [SI],'U'
;        JE      UNINSTALL               ;Yes, then uninstall program

CHK_H:
        CMP     BYTE PTR [SI],'H'       ; Ask for help
        JNE     INIT6                   ; No branch

DISP_HELP:
        CALL    DISP_BANNER
        MOV     DX,OFFSET HELP_BANNER
        MOV     AH,9
        INT     21H

        MOV     AX,4C00H                ;Exit with ERRORLEVEL = 0
        INT     21H

INIT2:
        CMP     BYTE PTR [SI+1],'6'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'9'
        JNE     INIT6
        MOV     CS:[CodePage],2
        JMP     INIT6

INIT3:
        CMP     BYTE PTR [SI+1],'2'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'8'
        JNE     INIT6
        MOV     CS:[CodePage],3
        JMP     INIT6
INIT4:
        CMP     BYTE PTR [SI+1],'3'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'7'
        JNE     INIT6
        MOV     CS:[CodePage],1
        JMP     INIT6

ENDSCAN:
        MOV     AL,CS:[CodePage]
        CMP     AL,ES:[CPTable]
        JE      NOCP
        MOV     ES:[CHECKFLAG],1        ;Clear CHECKFLAG byte
        MOV     ES:[CPTable],AL
        CALL    ChangeCP
NOCP:
        CMP     INSTALL_FLAG,1          ;Branch if not installed
        JNE     INSTALL1
        MOV     DX,OFFSET CONFIRM_MSG3  ;Print confirmation message
        JMP     SHORT CONFIRM_AND_EXIT  ;And exit


UNINSTALL:
                CMP     INSTALL_FLAG,1          ;Error if not installed
                JE      UNINSTALL2

		MOV	AL,3
                MOV     DX,OFFSET ERRMSG1       ;Initialize error pointer
		JMP	ERROR_EXIT
UNINSTALL2:
                CALL    REMOVE                  ;Uninstall the program
                JNC     UNINSTALL3

		MOV	AL,4
                MOV     DX,OFFSET ERRMSG2       ;Initialize error pointer
		JMP	ERROR_EXIT
UNINSTALL3:
                MOV     DX,OFFSET CONFIRM_MSG2  ;Print confirmation message


CONFIRM_AND_EXIT:
        PUSH    DX
        CALL    DISP_BANNER
        POP     DX
        MOV     AH,9
        INT     21H
        MOV     AX,4C00H                ;Exit with ERRORLEVEL = 0
        INT     21H

ERROR_EXIT:
		PUSH	AX			;Save registers

                MOV     AH,9
                INT     21H

		POP	AX			;Error code
                MOV     AH,4CH                  ;Terminate with ERRORLEVEL set
                INT     21H

INSTALL1:       
        PUSH    ES
        MOV     AX,3509H
        INT     21H
        MOV     WORD PTR OLD_INT09H,BX ;Address and put it in our location
        MOV     WORD PTR OLD_INT09H+2,ES
        MOV     DX,OFFSET NEW_INT09H
        MOV     AX,2509H
        INT     21h
        mov     ax, 352Fh               ; Request DOS Function 35h
        int     21h                     ; Get interrupt vector in ES:BX
        MOV     WORD PTR OLD_INT2FH,BX ;Address and put it in our location
        MOV     WORD PTR OLD_INT2FH+2,ES
        MOV     DX,OFFSET MultiPlex
        MOV     AX,252Fh
        INT     21h
        CALL    DISP_BANNER
        POP     ES
        MOV     AX,DS:[2CH]             ;Get environment segment
        MOV     ES,AX                   ;  address from PSP
        MOV     AH,49H                  ;Then deallocate environment
        INT     21H                     ;  space reserved by DOS
        INT     11H
        TEST    AL,10H
        JNZ     NOCGA
        MOV     CURSOR0,0607H
        MOV     CURSOR1,0307H
NOCGA:
        MOV     DX,OFFSET INITIALIZE
        INT     27H

DISP_BANNER:
        MOV     DX,OFFSET MSGSTRT
        MOV     AH,9
        INT     21h
        MOV     DX,OFFSET MSG869
        CMP     CS:[CodePage],2
        JE      DISPREST
        MOV     DX,OFFSET MSG928
        CMP     CS:[CodePage],3
        JE      DISPREST
        MOV     DX,OFFSET MSG737
DISPREST:
        MOV     AH,9
        INT     21h
        CMP     OS_Ver,ISWINDOWSNT
        JNE     BANNER_END
        MOV     DX,OFFSET MSGONNT
        MOV     AH,9
        INT     21H
BANNER_END:
        RET
INITIALIZE      ENDP

;-----------------------------------------------------------------------------
;REMOVE deallocates the memory block addressed by ES and restores the
;Interrupt vector displaced on installation.
;-----------------------------------------------------------------------------
REMOVE          PROC    NEAR


                PUSH    ES                      ;Get current interrupt
                MOV     AX,352FH                
                INT     21H

                MOV     BX,ES
                POP     ES
		MOV	AX,ES
                CMP     BX,AX			;Program cannot be uninstalled
                JNE     NO_RESTORE_VECTOR         
                PUSH    ES                      ;Get current interrupt
                MOV     AX,3509H                
                INT     21H

                MOV     BX,ES
                POP     ES
		MOV	AX,ES
                CMP     BX,AX			;Program cannot be uninstalled
                JE      RESTORE_VECTOR         
NO_RESTORE_VECTOR:
                STC                             ;Return with CF = 1 for error
                RET
RESTORE_VECTOR:
		PUSH    DS                      ;Restore displaced interrupt
        ASSUME  DS:NOTHING                      ;  vector

                LDS     DX,ES:[BIOS_ISR]
                MOV     AX,2509H
                INT     21H

                LDS     DX,ES:[MULTEX_ISR]
                MOV     AX,252fH
                INT     21H
                POP     DS
        ASSUME  DS:CODE

                NOT     WORD PTR ES:[BEGIN]     ;Remove fingerprint

                MOV     AH,49H                  ;Free memory given to
                INT     21H                     ;  original program block
                RET                             ;Exit with CF intact

REMOVE          ENDP


INSTALL_FLAG    DB      0
CodePage        DB      1

MSGSTRT    DB 0ah,0dh
           DB 'GREEK Driver for MS-DOS. Copyright 1994 Microsoft Hellas',0ah,0dh
           DB 'Layout for IBM Keyboard 319 (ELOT 1000). Active Code Page is ','$'
MSG737     DB '737',0ah,0dh,'$'
MSG869     DB '869',0ah,0dh,'$'
MSG928     DB '928',0ah,0dh,'$'

MSGONNT    DB 'Running under MS Windows NT',10,13,'$'
ERRMSG1         DB      "Greek driver not loaded",0dh,0ah,"$"
ERRMSG2         DB      "Cannot unload Greek driver",0dh,0ah,"$"
CONFIRM_MSG2    DB      "Driver unloaded.",0dh,0ah,"$"
CONFIRM_MSG3    DB      "Driver loaded."
Dummy           DB      0dh,0ah,"$"

HELP_BANNER     DB 0ah,0dh
                DB 'Hotkeys for keyboard switching are:',0ah,0dh
                DB '                                    Alt + Right Shift, Greek On ',0ah,0dh
                DB '                                    Alt + Left Shift, Greek Off',0ah,0dh
                DB '                                    Ctrl + Right Shift, Semigraphics',0ah,0dh,0ah,0dh
                DB 'For code page switching,',0ah,0dh
                DB 'set Scroll Lock on and press:',0ah,0dh
                DB '                             Alt + 1 for C.P. 737',0ah,0dh
                DB '                             Alt + 2 for C.P. 869',0ah,0dh
                DB '                             Alt + 3 for C.P. 928',0ah,0dh
                DB  0dh,0ah,'Valid switches are:',0dh,0ah
                DB '                    /737: code page 737 (default)',0dh,0ah
                DB '                    /869: code page IBM 869',0dh,0ah
                DB '                    /928: code page ELOT 928',0dh,0ah,'$'

CODE            ENDS
                END     BEGIN
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kbdhe220.asm ===
AltLeftShift      EQU  10
AltRightShift     EQU  9
CtrlLeftShift     EQU  5
CtrlRightShift    EQU  4
CtrlAlt           EQU  12

caps_bit     equ        01000000b
nums_bit     equ        00100000b

NUMKBTONOI        EQU  29
NUMKBDIAL         EQU  9
NUMSEMICODES      EQU  122
NUMKBCODES        EQU  100
NUMEVERYTIME      EQU  57
ISWINDOWSNT       EQU  3205H

ROM_BIOS_DATA   SEGMENT     AT 40H    ;BIOS statuses held here, also kb buffer
        ORG      17h
        bios_kbd_stat db ?            ;keyboard status byte
        ORG      1AH
        HEAD     DW          ?             ;Unread chars go from Head to Tail
        TAIL     DW          ?
        BUFFER              DW   16 DUP (?)   ;The buffer itself
        BUFFER_END          LABEL   WORD

ROM_BIOS_DATA   ENDS

CODE            SEGMENT PARA PUBLIC 'CODE'
        ASSUME  CS:CODE
                ORG     100H
BEGIN:          JMP     INITIALIZE

MYSIG           DB      'G.Kozyrakis'
NEW_INT09H  PROC    NEAR              ;The keyboard interrupt will now come here.
        ASSUME  CS:CODE
        PUSH    AX                    ;Save the used registers for good form
        PUSH    BX
        PUSH    CX
        PUSH    DX
        PUSH    DI
        PUSH    SI
        PUSH    DS
        PUSH    ES
        PUSHF                            ;First, call old keyboard interrupt
        CALL    OLD_INT09H
        CMP     CS:[CHECKFLAG],1
        JNE     JEXIT
        CLI
        ASSUME  DS:ROM_BIOS_DATA         ;Examine the char just put in
        MOV     BX,ROM_BIOS_DATA
        MOV     DS,BX
        MOV     BX,TAIL                  ;Point to current tail
        MOV     CL,Bios_kbd_stat
        MOV     CH,CL
        AND     CH,1FH
        AND     CL,0Fh

        CMP     CL,AltRightShift
        JNE     NOGREEKSWITCH
        MOV     GrFlag,AltRightShift
        MOV     SemiFlag,0
        JMP     SHORT START
NOGREEKSWITCH:
        CMP     CL,AltLeftShift
        JNE     CHKSEMI
        MOV     GrFlag,0
        MOV     SemiFlag,0
        JMP     SHORT START

CHKSEMI:
        MOV     CL,Bios_kbd_stat
        AND     CL,CtrlLeftShift
        CMP     CL,CtrlLeftShift
        JNE     START
SemiGr: 
        XOR     SemiFlag,CtrlLeftShift

START:  
        CMP     BX,HEAD                  ;If at head, kbd int has deleted char
        JE      JEXIT                    ;So leave
        SUB     BX,2                     ;Point to just read in character
        CMP     BX,OFFSET BUFFER         ;Did we undershoot buffer?
        JAE     NO_WRAP                  ;Nope
        MOV     BX,OFFSET BUFFER_END     ;Yes -- move to buffer top
        SUB     BX,2                     ;Point to just read in character
NO_WRAP:
        MOV     DX, [BX]                 ;** Typed character in DX now **
        cmp     DL,32
        jne     NOTOGGLE
        mov     CL,CH
        and     CL,0Fh
        cmp     CL,CtrlAlt
        jne     NOTOGGLE
        xor     GrFlag,AltRightShift
        MOV     SemiFlag,0
        MOV     TAIL,BX                  ;take key out of kbr buffer
        JMP     EXIT
NOTOGGLE:
        TEST    CH,10h
        JZ      NOSCROLL
        cmp     dh,7ah
        ja      NOSCROLL
        cmp     dh,78h
        jb      NOSCROLL
        push    es
        push    ds
        mov     ax,CS
        mov     es,ax
        mov     ds,ax
        push    bx
        mov     al,dh
        sub     al,77h
        CALL    ChangeCP
        pop     bx
        pop     ds
        pop     es
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        JMP     EXIT
NOSCROLL:
        MOV     SI,KBOffset
        ADD     SI,(NUMKBTONOI+NUMKBDIAL)*2 ;Semicodes
        CMP     SemiFlag,CtrlLeftShift
        JE      GREEKS
        ADD     SI,NUMSEMICODES*2        ;KBCodes
        CMP     GrFlag,AltRightShift
        JE      GREEKS
        ADD     SI,NUMKBCODES*2          ;EVERYTIME
        JMP     SHORT TCNT
JEXIT:  JMP     EXIT
GREEKS: 
        CMP     ToneStat,0
        JE      CHKTN
        MOV     SI,KBOffset             ;KBTONOI
        CMP     ToneStat,22h
        JNE     TCNT
        ADD     SI,NUMKBTONOI*2         ;KBDIAL
TCNT:   CMP     DX,CS:[SI]               ;Compare to first key
        JE      FOUNDONE                 ;yes
        ADD     SI,4                     ;Point to next key
        CMP     CS:[SI],0FFFFH           ;check for end;
        JNE     TCNT                     ;No continue with next table entry
        CMP     ToneStat,0
        JE      NoTonos
        MOV     TAIL,BX
NoTonos:
        MOV     ToneStat,0
        JMP     SHORT EXIT

CHKTN:
        CMP     DH,27H                   ;is it a tonos
        JE      ISTONOS                  ;no
        JMP     SHORT NEXT
ISTONOS:
        MOV     ToneStat,27h             ;yes
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        JMP     SHORT EXIT
NEXT:   CMP     DH,28H                   ;is it dialytika
        JNE     CONT
        MOV     ToneStat,22h
        MOV     TAIL,BX                  ;take dialytika out of kbr buffer
        JMP     SHORT EXIT

CONT:   CMP     DX,CS:[SI]               ;Compare to first key
        JE      FOUNDONE                 ;yes
        ADD     SI,4                     ;Point to next key
        CMP     CS:[SI],0FFFFH           ;check for end;
        JNE     CONT                     ;No continue with next table entry

        JMP     SHORT EXIT               ;No keys matched.  Jump Out.
FOUNDONE:
        MOV     DX,CS:[SI+2]
        MOV     [BX],DX
        MOV     ToneStat,0
EXIT:
        STI
        PUSH    BP
        MOV     AH,03
        INT     10H
        CMP     CH,CL
        JAE     NO_CURSOR
        MOV     CX,CURSOR1
        XOR     CH,CH
        CMP     SemiFlag,0
        JNE     SET_CURSOR
        MOV     CX,CURSOR1
        CMP     GRFlag,0
        JNE     SET_CURSOR
        MOV     CX,CURSOR0
SET_CURSOR:
        MOV     AH,1
        INT     10h
NO_CURSOR:
        POP     BP
        POP     ES                       ;Do the Pops of all registers.
        POP     DS
        POP     SI
        POP     DI
        POP     DX
        POP     CX
        POP     BX
        POP     AX
        IRET                          ;An interrupt needs an IRET

NEW_INT09H ENDP

ChangeCP PROC   NEAR
         CLI
         Mov     ES:[KBOffset],OFFSET ES:[TAB928]
         CMP     AL,3
         JE      ChangeAll
         Mov     ES:[KBOffset],OFFSET ES:[TAB869]
         CMP     AL,2
         JE      ChangeAll
         Mov     ES:[KBOffset],OFFSET ES:[TAB737]
         CMP     AL,1
         JNE     NOCHCP
ChangeAll:
         MOV     CS:[CPTable],AL
NOCHCP:  
         STI
         RET
ChangeCP ENDP

;* Multiplex - Handler for Interrupt 2Fh (Multiplex Interrupt). Checks
;* AH for this TSR's identity number. If no match (indicating call is
;* not intended for this TSR), Multiplex passes control to the previous
;* Interrupt 2Fh handler.
;*
;* Params: AH = Handler identity number
;*         AL = Function number 0-2
;*
;* Return: AL    = 0FFh (function 0)
;*         "GK" in BX (function 0)
;*         ES = Current CS (function 0)
;*         DH = Greek State for function 1 ( 9 or 10)
;*         DL = Code Page (1:=737 2:=869 3:=928) for function 2
Multiplex PROC  FAR

        .IF     ah != 0CCh              ; If this handler not requested,
        jmp     cs:MULTEX_ISR           ;   pass control to old Int 2Fh
        .ENDIF                          ;   handler
        push    cs
        pop     es

        .IF     al == 0                 ; If function 0 (verify presence),
        mov     al, 0FFh                ;   AL = 0FFh,
        mov     bx, "GK"
        mov     dh, CS:[GRFlag]
        mov     dl, CS:[CPTable]
        .ELSEIF al == 1
        mov     CS:[GRFlag],dh
        .ELSEIF al == 2
        mov     al,dl
        push    ds
        push    cs
        pop     ds
        CALL    ChangeCP
        pop     ds
        .ENDIF                          ;   set ES:DI = far address

        iret

Multiplex ENDP


BIOS_ISR   LABEL   DWORD
OLD_INT09H DD  ?       ;Location of old kbd interrupt
MULTEX_ISR LABEL   DWORD
OLD_INT2FH DD  ?       ;Location of old multiplex interrupt
ToneStat   DB  0       ;Set to 1 when tonos is pressed
GrFlag     DB  0
SemiFlag   DB  0
CURSOR0    DW  0B0CH
CURSOR1    DW  070CH
CHECKFLAG  DB  1
CPTable    DB  0
OS_Ver     DW  0
KBOffset   DW  OFFSET TAB737

TAB737     dw    1E61H, 1EE1H   ; a Tonoi
           dw    1265H, 12E2H   ; e
           dw    2368H, 23E3H   ; h
           dw    1769H, 17E5H   ; i
           dw    186FH, 18E6H   ; o
           dw    1579H, 15E7H   ; y
           dw    2F76H, 2FE9H   ; v
           DW    1e41H, 1EEAH   ; A
           dw    1245H, 12EBH   ; E
           DW    2348H, 23ECH   ; H
           DW    1749H, 17EDH   ; I
           DW    184fH, 18EEH   ; O
           DW    1559H, 15EFH   ; Y
           DW    2f56H, 00F0H   ; V
           dw    0FFFFH
KBDIAL     dw    1769H, 17E4H   ; i
           dw    1579H, 15E8H   ; y
           dw    1749H, 1749H
           DW    1559H, 1559H
           dw    0FFFFH

SEMICODES  dw    3b00H, 3bC9H   ;    F1
           dw    3c00H, 3cBBH   ;    F2
           dw    3e00H, 3eC8H   ;    F3
           dw    3d00H, 3dBCH   ;    F4
           dw    3f00H, 3fCDH   ;    F5
           dw    4000H, 40BAH   ;    F6
           dw    4100H, 41CCH   ;    F7
           dw    4200H, 42B9H   ;    F8
           dw    4300H, 43CBH   ;    F9
           dw    4400H, 44CAH   ;    F10
           dw    5400H, 54DAH   ;    shift+F1
           dw    5500H, 55BFH   ; 
           dw    5700H, 57C0H   ; 
           dw    5600H, 56D9H   ; 
           dw    5800H, 58C4H   ; 
           dw    5900H, 59B3H   ; 
           dw    5a00H, 5aC3H   ; 
           dw    5b00H, 5bB4H   ; 
           dw    5c00H, 5cC2H   ; 
           dw    5d00H, 5dC1H   ;    shift+F10
           dw    6200H, 62CEH   ; 
           dw    6C00H, 6CC5H   ; 
           dw    1000h, 10DBH   ;    alt  +Q
           dw    1100h, 11B0H   ;    alt  +E
           dw    1200h, 12B1H   ; 
           dw    1300h, 13B2H   ; 
           dw    1400h, 14DCH   ; 
           dw    1500h, 15DFH   ; 

           dw    6F00H, 6FB5H   ; 
           dw    6500H, 65B6H   ; 
           dw    5f00H, 5fB7H   ; 
           dw    6900H, 69B8H   ; 
           dw    6000H, 60BDH   ; 
           dw    6A00H, 6ABEH   ; 
           dw    6E00H, 6EC6H   ; 
           dw    6400H, 64C7H   ; 
           dw    6700H, 67CFH   ;    ctrl +F10
           dw    7100H, 71D0H   ;    alt  +F10
           dw    6600H, 66D1H   ; 
           dw    7000H, 70D2H   ; 
           dw    6100H, 61D3H   ; 
           dw    6B00H, 6BD4H   ; 
           dw    6800H, 68D5H   ;    alt  +F1
           dw    5e00H, 5eD6H   ;    ctrl +F1
           dw    6300H, 63D7H   ; 
           dw    6D00H, 6DD8H   ; 
           dw    1600h, 16DDH   ; 
           dw    1700h, 17DEH   ; 
           dw    7800h, 78F1H   ;    alt  +1
           dw    7A00H, 7AF2H   ; 
           dw    7900H, 79F3H   ;    alt  +2
           dw    1800h, 18F4H   ; 
           dw    1900h, 19F5H   ;    alt  +P
           dw    7B00H, 7BF6H   ; 
           dw    7C00H, 7CF7H   ; 
           dw    7D00H, 7DF8H   ; 
           dw    7E00H, 7EF9H   ; 
           dw    7F00H, 7FFBH   ; 
           dw    8000H, 80FDH   ; 
           dw    8100H, 81FCH   ; 
           dw    8200H, 82FEH   ;    alt  +-


KBCODES    dw    1E61H, 1898H   ; a
           dw    3062H, 3099H   ; b
           dw    2267H, 229AH   ; g
           dw    2064H, 209BH   ; d
           dw    1265H, 129CH   ; e
           dw    2C7AH, 2C9DH   ; z
           dw    2368H, 239EH   ; h
           dw    1675H, 169FH   ; u
           dw    1769H, 17A0H   ; i
           dw    256BH, 25A1H   ; k
           dw    266CH, 26A2H   ; l
           dw    326DH, 32A3H   ; m
           dw    316EH, 31A4H   ; n
           dw    246AH, 24A5H   ; j
           dw    186FH, 18A6H   ; o
           dw    1970H, 19A7H   ; p
           dw    1372H, 13A8H   ; r
           dw    1F73H, 1FA9H   ; s
           dw    1474H, 14ABH   ; t
           dw    1579H, 15ACH   ; y
           dw    2166H, 21ADH   ; f
           dw    2D78H, 2DAEH   ; x
           dw    2E63H, 2EAFH   ; c
           dw    2F76H, 00E0H   ; v
           dw    1177H, 11AAH   ; w
           dw    1E41H, 1E80H   ; A
           dw    3042H, 3081H   ; B
           dw    2247H, 2282H   ; G
           dw    2044H, 2083H   ; D
           dw    1245H, 1284H   ; E
           dw    2C5AH, 2C85H   ; Z
           dw    2348H, 2386H   ; H
           dw    1655H, 1687H   ; U
           dw    1749H, 1788H   ; I
           dw    254BH, 2589H   ; K
           dw    264CH, 268AH   ; L
           dw    324DH, 328BH   ; M
           dw    314EH, 318CH   ; N
           dw    244AH, 248DH   ; J
           dw    184FH, 188EH   ; O
           dw    1950H, 198FH   ; P
           dw    1352H, 1390H   ; R
           dw    1F53H, 1F91H   ; S
           dw    1454H, 1492H   ; T
           dw    1559H, 1593H   ; Y
           dw    2146H, 2194H   ; F
           dw    2D58H, 2D95H   ; X
           dw    2E43H, 2E96H   ; C
           dw    2F56H, 2F97H   ; V
           dw    1157H, 117eH   ; w
EVERYTIME  DW    2960H, 295CH   ; \
           dw    297EH, 297CH   ; |
           dw    0340H, 0322H   ; "
           dw    0423H, 04F9H   ; 
           dw    075EH, 0726H   ; &
           dw    0826H, 082FH   ; /
           dw    092AH, 0928H   ; (
           dw    0A28H, 0A29H   ; )
           dw    0B29H, 0B3DH   ; =
           dw    0C5FH, 0C3FH   ; ?
           dw    0C2DH, 0C27H   ; '
           dw    0D3DH, 0D5DH   ; ]
           dw    0D2BH, 0D5BH   ; [
           dw    1A7BH, 1A2AH   ; *
           dw    1A5BH, 1A2BH   ; +
           dw    1B5DH, 1B7DH   ; {
           dw    1B7DH, 1B7BH   ; }
           dw    2B5CH, 2B23H   ; #
           dw    2B7CH, 2B40H   ; @
           dw    565CH, 563CH   ; <
           dw    567CH, 563EH   ; >
           dw    333CH, 333BH   ; ;
           dw    343EH, 343AH   ; :
           dw    352FH, 352DH   ; -
           dw    353FH, 355FH   ; _
           dw    273BH, 2727H   ; '
           dw    1B1dH, 1b5EH   ;
           dw    0FFFFH

TAB869     dw    1E61H, 1E9BH   ; a
           dw    1265H, 129DH   ; e
           dw    2368H, 239EH   ; h
           dw    1769H, 179FH   ; i
           dw    186FH, 18A2H   ; o
           dw    1579H, 15A3H   ; y
           dw    2F76H, 2FFDH   ; v
           DW    1e41H, 1E86H   ; A
           dw    1245H, 128DH   ; E
           DW    2348H, 238FH   ; H
           DW    1749H, 1790H   ; I
           DW    184fH, 1892H   ; O
           DW    1559H, 1595H   ; Y
           DW    2f56H, 2F98H   ; V
           dw    0FFFFH
           dw    1769H, 17A0H   ; i
           dw    1579H, 15FBH   ; y
           dw    1749H, 17ADH   ; I
           DW    1559H, 15D1H   ; Y
           dw    0FFFFH
           dw    3b00H, 3bC9H   ;    F1
           dw    3c00H, 3cBBH   ;    F2
           dw    3e00H, 3eC8H   ;    F3
           dw    3d00H, 3dBCH   ;    F4
           dw    3f00H, 3fCDH   ;    F5
           dw    4000H, 40BAH   ;    F6
           dw    4100H, 41CCH   ;    F7
           dw    4200H, 42B9H   ;    F8
           dw    4300H, 43CBH   ;    F9
           dw    4400H, 44CAH   ;    F10
           dw    5400H, 54DAH   ;    shift+F1
           dw    5500H, 55BFH   ; 
           dw    5700H, 57C0H   ; 
           dw    5600H, 56D9H   ; 
           dw    5800H, 58C4H   ; 
           dw    5900H, 59B3H   ; 
           dw    5a00H, 5aC3H   ; 
           dw    5b00H, 5bB4H   ; 
           dw    5c00H, 5cC2H   ; 
           dw    5d00H, 5dC1H   ;    shift+F10
           dw    6200H, 62CEH   ; 
           dw    6C00H, 6CC5H   ; 
           dw    1000h, 10DBH   ;    alt  +Q
           dw    1100h, 11B0H   ;    alt  +E
           dw    1200h, 12B1H   ; 
           dw    1300h, 13B2H   ; 
           dw    1400h, 14DCH   ; 
           dw    1500h, 15DFH   ; 
           dw    6F00H, 6FABH   ; 
           dw    6500H, 65AEH   ; 
           dw    5f00H, 5fAFH   ; 
           dw    6900H, 69B8H   ; 
           dw    6000H, 60BDH   ; 
           dw    6A00H, 6ABEH   ; 
           dw    6E00H, 6EC6H   ; 
           dw    6400H, 64C7H   ; 
           dw    6700H, 67CFH   ;    ctrl +F10
           dw    7100H, 71D0H   ;    alt  +F10
           dw    6600H, 66D1H   ; 
           dw    7000H, 70D2H   ; 
           dw    6100H, 61D3H   ; 
           dw    6B00H, 6BD4H   ; 
           dw    6800H, 68D5H   ;    alt  +F1
           dw    5e00H, 5eD6H   ;    ctrl +F1
           dw    6300H, 63D7H   ; 
           dw    6D00H, 6DD8H   ; 
           dw    1600h, 16DDH   ; 
           dw    1700h, 17DEH   ; 
           dw    7800h, 78AEH   ;    alt  +1
           dw    7A00H, 7AABH   ; 
           dw    7900H, 79AFH   ;    alt  +2
           dw    1800h, 18F0H   ; 
           dw    1900h, 19F1H   ;    alt  +P
           dw    7B00H, 7BF7H   ; 
           dw    7C00H, 7CF5H   ; 
           dw    7D00H, 7DF8H   ; 
           dw    7E00H, 7EF9H   ; 
           dw    7F00H, 7FFBH   ; 
           dw    8000H, 80FDH   ; 
           dw    8100H, 81FCH   ; 
           dw    8200H, 82FEH   ;    alt  +-
           dw    1E61H, 18D6H   ; a
           dw    3062H, 30D7H   ; b
           dw    2267H, 22D8H   ; g
           dw    2064H, 20DDH   ; d
           dw    1265H, 12DEH   ; e
           dw    2C7AH, 00E0H   ; z
           dw    2368H, 23E1H   ; h
           dw    1675H, 16E2H   ; u
           dw    1769H, 17E3H   ; i
           dw    256BH, 25E4H   ; k
           dw    266CH, 26E5H   ; l
           dw    326DH, 32E6H   ; m
           dw    316EH, 31E7H   ; n
           dw    246AH, 24E8H   ; j
           dw    186FH, 18E9H   ; o
           dw    1970H, 19EAH   ; p
           dw    1372H, 13EBH   ; r
           dw    1F73H, 1FECH   ; s
           dw    1474H, 14EEH   ; t
           dw    1579H, 15F2H   ; y
           dw    2166H, 21F3H   ; f
           dw    2D78H, 2DF4H   ; x
           dw    2E63H, 2EF6H   ; c
           dw    2F76H, 2FFAH   ; v
           dw    1177H, 11EDH   ; w
           dw    1E41H, 1EA4H   ; A
           dw    3042H, 30A5H   ; B
           dw    2247H, 22A6H   ; G
           dw    2044H, 20A7H   ; D
           dw    1245H, 12A8H   ; E
           dw    2C5AH, 2CA9H   ; Z
           dw    2348H, 23AAH   ; H
           dw    1655H, 16ACH   ; U
           dw    1749H, 17ADH   ; I
           dw    254BH, 25B5H   ; K
           dw    264CH, 26B6H   ; L
           dw    324DH, 32B7H   ; M
           dw    314EH, 31B8H   ; N
           dw    244AH, 24BDH   ; J
           dw    184FH, 18BEH   ; O
           dw    1950H, 19C6H   ; P
           dw    1352H, 13C7H   ; R
           dw    1F53H, 1FCFH   ; S
           dw    1454H, 14D0H   ; T
           dw    1559H, 15D1H   ; Y
           dw    2146H, 21D2H   ; F
           dw    2D58H, 2DD3H   ; X
           dw    2E43H, 2ED4H   ; C
           dw    2F56H, 2FD5H   ; V
           dw    1157H, 117eH   ; w
           DW    2960H, 295CH   ; \
           dw    297EH, 297CH   ; |
           dw    0340H, 0322H   ; "
           dw    0423H, 049CH   ; 
           dw    075EH, 0726H   ; &
           dw    0826H, 082FH   ; /
           dw    092AH, 0928H   ; (
           dw    0A28H, 0A29H   ; )
           dw    0B29H, 0B3DH   ; =
           dw    0C5FH, 0C3FH   ; ?
           dw    0C2DH, 0C27H   ; '
           dw    0D3DH, 0D5DH   ; ]
           dw    0D2BH, 0D5BH   ; [
           dw    1A7BH, 1A2AH   ; *
           dw    1A5BH, 1A2BH   ; +
           dw    1B5DH, 1B7DH   ; {
           dw    1B7DH, 1B7BH   ; }
           dw    2B5CH, 2B23H   ; #
           dw    2B7CH, 2B40H   ; @
           dw    565CH, 563CH   ; <
           dw    567CH, 563EH   ; >
           dw    333CH, 333BH   ; ;
           dw    343EH, 343AH   ; :
           dw    352FH, 352DH   ; -
           dw    353FH, 355FH   ; _
           dw    273BH, 2727H   ; '
           dw    1B1dH, 1b5EH   ;
           dw    0FFFFH

TAB928     dw    1E61H, 1EDCH   ; a
           dw    1265H, 12DDH   ; e
           dw    2368H, 23DEH   ; h
           dw    1769H, 17DFH   ; i
           dw    186FH, 18FCH   ; o
           dw    1579H, 15FDH   ; y
           dw    2F76H, 2FFEH   ; v
           DW    1e41H, 1EB6H   ; A
           dw    1245H, 12B8H   ; E
           DW    2348H, 23B9H   ; H
           DW    1749H, 17BAH   ; I
           DW    184fH, 18BCH   ; O
           DW    1559H, 15BEH   ; Y
           DW    2f56H, 2FBFH   ; V
           dw    0FFFFH
           dw    1769H, 17FAH   ; i
           dw    1579H, 15FBH   ; y
           dw    1749H, 17DAH   ; I
           DW    1559H, 15DBH   ; Y
           dw    0FFFFH
           dw    3b00H, 3b91H   ;    F1
           dw    3c00H, 3c87H   ;    F2
           dw    3e00H, 3e90H   ;    F3
           dw    3d00H, 3d88H   ;    F4
           dw    3f00H, 3f95H   ;    F5
           dw    4000H, 4086H   ;    F6
           dw    4100H, 4194H   ;    F7
           dw    4200H, 4285H   ;    F8
           dw    4300H, 4393H   ;    F9
           dw    4400H, 4492H   ;    F10
           dw    5400H, 5498H   ;    shift+F1
           dw    5500H, 5589H   ; 
           dw    5700H, 578AH   ; 
           dw    5600H, 5697H   ; 
           dw    5800H, 588EH   ; 
           dw    5900H, 5983H   ; 
           dw    5a00H, 5a8dH   ; 
           dw    5b00H, 5b84H   ; 
           dw    5c00H, 5c8cH   ; 
           dw    5d00H, 5d8bH   ;    shift+F10
           dw    6200H, 6296H   ; 
           dw    6C00H, 6C8fH   ; 
           dw    1000h, 1099H   ;    alt  +Q
           dw    1100h, 1180H   ;    alt  +E
           dw    1200h, 1281H   ; 
           dw    1300h, 1382H   ; 
           dw    1400h, 149aH   ; 
           dw    1600h, 169bH   ; 
                                ;         differ in other CPs
           dw    6F00H, 6F00H   ; 
           dw    6500H, 6500H   ; 
           dw    5f00H, 5f00H   ; 
           dw    6900H, 6900H   ; 
           dw    6000H, 6000H   ; 
           dw    6A00H, 6A00H   ; 
           dw    6E00H, 6E00H   ; 
           dw    6400H, 6400H   ; 
           dw    6700H, 6700H   ;    ctrl +F10
           dw    7100H, 7100H   ;    alt  +F10
           dw    6600H, 6600H   ; 
           dw    7000H, 7000H   ; 
           dw    6100H, 6100H   ; 
           dw    6B00H, 6B00H   ; 
           dw    6800H, 6800H   ;    alt  +F1
           dw    5e00H, 5e00H   ;    ctrl +F1
           dw    6300H, 6300H   ; 
           dw    2b00H, 00a7H   ; 
           dw    1500h, 00e0H   ; 
           dw    1700h, 17c0H   ; 
           dw    7800h, 78B1H   ;    alt  +1
           dw    7A00H, 7AABH   ; 
           dw    7900H, 79BBH   ;    alt  +2
           dw    1800h, 18a7H   ; 
           dw    1900h, 19a9H   ;    alt  +P
           dw    7B00H, 7BF6H   ; 
           dw    7C00H, 7CF7H   ; 
           dw    7D00H, 7Db0H   ; 
           dw    7E00H, 7Eb7H   ; 
           dw    7F00H, 7F9cH   ; 
           dw    8000H, 80b2H   ; 
           dw    8100H, 81b3H   ; 
           dw    8200H, 82bdH   ;    alt  +-

           dw    1E61H, 18E1H   ; a
           dw    3062H, 30E2H   ; b
           dw    2267H, 22E3H   ; g
           dw    2064H, 20E4H   ; d
           dw    1265H, 12E5H   ; e
           dw    2C7AH, 2CE6H   ; z
           dw    2368H, 23E7H   ; h
           dw    1675H, 16E8H   ; u
           dw    1769H, 17E9H   ; i
           dw    256BH, 25EAH   ; k
           dw    266CH, 26EBH   ; l
           dw    326DH, 32ECH   ; m
           dw    316EH, 31EDH   ; n
           dw    246AH, 24EEH   ; j
           dw    186FH, 18EFH   ; o
           dw    1970H, 00F0H   ; p
           dw    1372H, 13F1H   ; r
           dw    1F73H, 1FF3H   ; s
           dw    1474H, 14F4H   ; t
           dw    1579H, 15F5H   ; y
           dw    2166H, 21F6H   ; f
           dw    2D78H, 2DF7H   ; x
           dw    2E63H, 2EF8H   ; c
           dw    2F76H, 2FF9H   ; v
           dw    1177H, 11F2H   ; w
           dw    1E41H, 1EC1H   ; A
           dw    3042H, 30C2H   ; B
           dw    2247H, 22C3H   ; G
           dw    2044H, 20C4H   ; D
           dw    1245H, 12C5H   ; E
           dw    2C5AH, 2CC6H   ; Z
           dw    2348H, 23C7H   ; H
           dw    1655H, 16C8H   ; U
           dw    1749H, 17C9H   ; I
           dw    254BH, 25CAH   ; K
           dw    264CH, 26CBH   ; L
           dw    324DH, 32CCH   ; M
           dw    314EH, 31CDH   ; N
           dw    244AH, 24CEH   ; J
           dw    184FH, 18CFH   ; O
           dw    1950H, 19D0H   ; P
           dw    1352H, 13D1H   ; R
           dw    1F53H, 1FD3H   ; S
           dw    1454H, 14D4H   ; T
           dw    1559H, 15D5H   ; Y
           dw    2146H, 21D6H   ; F
           dw    2D58H, 2DD7H   ; X
           dw    2E43H, 2ED8H   ; C
           dw    2F56H, 2FD9H   ; V
           dw    1157H, 117eH   ; w
           DW    2960H, 295CH   ; \
           dw    297EH, 297CH   ; |
           dw    0340H, 0322H   ; "
           dw    0423H, 04A3H   ; 
           dw    075EH, 0726H   ; &
           dw    0826H, 082FH   ; /
           dw    092AH, 0928H   ; (
           dw    0A28H, 0A29H   ; )
           dw    0B29H, 0B3DH   ; =
           dw    0C5FH, 0C3FH   ; ?
           dw    0C2DH, 0C27H   ; '
           dw    0D3DH, 0D5DH   ; ]
           dw    0D2BH, 0D5BH   ; [
           dw    1A7BH, 1A2AH   ; *
           dw    1A5BH, 1A2BH   ; +
           dw    1B5DH, 1B7DH   ; {
           dw    1B7DH, 1B7BH   ; }
           dw    2B5CH, 2B23H   ; #
           dw    2B7CH, 2B40H   ; @
           dw    565CH, 563CH   ; <
           dw    567CH, 563EH   ; >
           dw    333CH, 333BH   ; ;
           dw    343EH, 343AH   ; :
           dw    352FH, 352DH   ; -
           dw    353FH, 355FH   ; _
           dw    273BH, 2727H   ; '
           dw    1B1dH, 1b5EH   ;
           dw    0FFFFH


INITIALIZE      PROC    NEAR
        ASSUME  DS:CODE
                PUSH   CS
                POP    ES

                MOV     AX,3306H
                INT     21H
                MOV     OS_Ver,BX

                MOV     AX,0CC00h
                INT     2Fh
                CMP     AL,0FFh
                JNE     PARSE
                CMP     BX,"GK"
                JNE     PARSE
                MOV     INSTALL_FLAG,1          ;Program is already installed
                MOV     CS:[CodePage],DL        ;If installed DL holds active CP
;
;
PARSE:
	CLD				;CLEAR DIRECTION
        XOR     CH,CH
        MOV     SI,80H                  ;Point DS:SI to command line
        MOV     CL,[SI]
        CMP     CL,0
        JE      ENDSCAN
        INC     SI
INIT1:	LODSB
        CMP     AL,"/"
        JE      SLASHCAR
INIT6:  LOOP    INIT1
        JMP     ENDSCAN
SLASHCAR:
        CMP     BYTE PTR [SI],'?'
        JNE     NO_HELP
        JMP     DISP_HELP
NO_HELP:
        CMP     BYTE PTR [SI],'8'
        JE      INIT2

        CMP     BYTE PTR [SI],'9'
        JE      INIT3

        CMP     BYTE PTR [SI],'7'
        JE      INIT4

        CMP     BYTE PTR [SI],'4'
        JE      INIT4


        AND     BYTE PTR [SI],0DFh          ;Change char to uppercase
;        CMP     BYTE PTR [SI],'U'
;        JE      UNINSTALL               ;Yes, then uninstall program
        CMP     BYTE PTR [SI],'H'       ; Ask for help
        JNE     INIT6                   ; No branch

DISP_HELP:
        CALL    DISP_BANNER
        MOV     DX,OFFSET HELP_BANNER
        MOV     AH,9
        INT     21H

        MOV     AX,4C00H                ;Exit with ERRORLEVEL = 0
        INT     21H

INIT2:
        CMP     BYTE PTR [SI+1],'6'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'9'
        JNE     INIT6
        MOV     CS:[CodePage],2
        JMP     INIT6

INIT3:
        CMP     BYTE PTR [SI+1],'2'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'8'
        JNE     INIT6
        MOV     CS:[CodePage],3
        JMP     INIT6
INIT4:
        CMP     BYTE PTR [SI+1],'3'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'7'
        JNE     INIT6
        MOV     CS:[CodePage],1
        JMP     INIT6

ENDSCAN:
        MOV     AL,CS:[CodePage]
        CMP     AL,ES:[CPTable]
        JE      NOCP
        MOV     ES:[CHECKFLAG],1        ;Clear CHECKFLAG byte
        MOV     ES:[CPTable],AL
        CALL    ChangeCP
NOCP:
        CMP     INSTALL_FLAG,1          ;Branch if not installed
        JNE     INSTALL1
        MOV     DX,OFFSET CONFIRM_MSG3  ;Print confirmation message
        JMP     SHORT CONFIRM_AND_EXIT  ;And exit


UNINSTALL:
                CMP     INSTALL_FLAG,1          ;Error if not installed
                JE      UNINSTALL2

		MOV	AL,3
                MOV     DX,OFFSET ERRMSG1       ;Initialize error pointer
		JMP	ERROR_EXIT
UNINSTALL2:
                CALL    REMOVE                  ;Uninstall the program
                JNC     UNINSTALL3

		MOV	AL,4
                MOV     DX,OFFSET ERRMSG2       ;Initialize error pointer
		JMP	ERROR_EXIT
UNINSTALL3:
                MOV     DX,OFFSET CONFIRM_MSG2  ;Print confirmation message


CONFIRM_AND_EXIT:
        PUSH    DX
        CALL    DISP_BANNER
        POP     DX
        MOV     AH,9
        INT     21H
        MOV     AX,4C00H                ;Exit with ERRORLEVEL = 0
        INT     21H

ERROR_EXIT:
		PUSH	AX			;Save registers

                MOV     AH,9
                INT     21H

		POP	AX			;Error code
                MOV     AH,4CH                  ;Terminate with ERRORLEVEL set
                INT     21H

INSTALL1:       
        PUSH    ES
        MOV     AX,3509H
        INT     21H
        MOV     WORD PTR OLD_INT09H,BX ;Address and put it in our location
        MOV     WORD PTR OLD_INT09H+2,ES
        MOV     DX,OFFSET NEW_INT09H
        MOV     AX,2509H
        INT     21h

        mov     ax, 352Fh               ; Request DOS Function 35h
        int     21h                     ; Get interrupt vector in ES:BX
        MOV     WORD PTR OLD_INT2FH,BX ;Address and put it in our location
        MOV     WORD PTR OLD_INT2FH+2,ES
        MOV     DX,OFFSET MultiPlex
        MOV     AX,252Fh
        INT     21h
        CALL    DISP_BANNER
        POP     ES
        MOV     AX,DS:[2CH]             ;Get environment segment
        MOV     ES,AX                   ;  address from PSP
        MOV     AH,49H                  ;Then deallocate environment
        INT     21H                     ;  space reserved by DOS
        INT     11H
        TEST    AL,10H
        JNZ     NOCGA
        MOV     CURSOR0,0607H
        MOV     CURSOR1,0307H
NOCGA:
        MOV     DX,OFFSET INITIALIZE
        INT     27H

DISP_BANNER:
        MOV     DX,OFFSET MSGSTRT
        MOV     AH,9
        INT     21h
        MOV     DX,OFFSET MSG869
        CMP     CS:[CodePage],2
        JE      DISPREST
        MOV     DX,OFFSET MSG928
        CMP     CS:[CodePage],3
        JE      DISPREST
        MOV     DX,OFFSET MSG737
DISPREST:
        MOV     AH,9
        INT     21h
        CMP     OS_Ver,ISWINDOWSNT
        JNE     BANNER_END
        MOV     DX,OFFSET MSGONNT
        MOV     AH,9
        INT     21H
BANNER_END:
        RET
INITIALIZE      ENDP

;-----------------------------------------------------------------------------
;REMOVE deallocates the memory block addressed by ES and restores the
;Interrupt vector displaced on installation.
;-----------------------------------------------------------------------------
REMOVE          PROC    NEAR


                PUSH    ES                      ;Get current interrupt
                MOV     AX,352FH                
                INT     21H

                MOV     BX,ES
                POP     ES
		MOV	AX,ES
                CMP     BX,AX			;Program cannot be uninstalled
                JNE     NO_RESTORE_VECTOR         
                PUSH    ES                      ;Get current interrupt
                MOV     AX,3509H                
                INT     21H

                MOV     BX,ES
                POP     ES
		MOV	AX,ES
                CMP     BX,AX			;Program cannot be uninstalled
                JE      RESTORE_VECTOR         
NO_RESTORE_VECTOR:
                STC                             ;Return with CF = 1 for error
                RET
RESTORE_VECTOR:
		PUSH    DS                      ;Restore displaced interrupt
        ASSUME  DS:NOTHING                      ;  vector

                LDS     DX,ES:[BIOS_ISR]
                MOV     AX,2509H
                INT     21H

                LDS     DX,ES:[MULTEX_ISR]
                MOV     AX,252fH
                INT     21H
                POP     DS
        ASSUME  DS:CODE

                NOT     WORD PTR ES:[BEGIN]     ;Remove fingerprint

                MOV     AH,49H                  ;Free memory given to
                INT     21H                     ;  original program block
                RET                             ;Exit with CF intact

REMOVE          ENDP


INSTALL_FLAG    DB      0
CodePage        DB      1

MSGSTRT    DB 0ah,0dh
           DB 'GREEK Driver for MS-DOS. Copyright 1994 Microsoft Hellas',0ah,0dh
           DB 'Layout for IBM Keyboard 220. Active Code Page is ','$'
MSG737     DB '737',0ah,0dh,'$'
MSG869     DB '869',0ah,0dh,'$'
MSG928     DB '928',0ah,0dh,'$'

MSGONNT    DB 'Running under MS Windows NT',10,13,'$'
ERRMSG1         DB      "Greek driver not loaded",0dh,0ah,"$"
ERRMSG2         DB      "Cannot unload Greek driver",0dh,0ah,"$"
CONFIRM_MSG2    DB      "Driver unloaded.",0dh,0ah,"$"
CONFIRM_MSG3    DB      "Driver loaded."
Dummy           DB      0dh,0ah,"$"

HELP_BANNER     DB 0ah,0dh
                DB 'Hotkeys for keyboard switching are:',0ah,0dh
                DB '                                    Alt + Right Shift, Greek On ',0ah,0dh
                DB '                                    Alt + Left Shift, Greek Off',0ah,0dh
                DB '                                    Ctrl + Right Shift, Semigraphics',0ah,0dh,0ah,0dh
                DB 'For code page switching,',0ah,0dh
                DB 'set Scroll Lock on and press:',0ah,0dh
                DB '                             Alt + 1 for C.P. 737',0ah,0dh
                DB '                             Alt + 2 for C.P. 869',0ah,0dh
                DB '                             Alt + 3 for C.P. 928',0ah,0dh
                DB  0dh,0ah,'Valid switches are:',0dh,0ah
                DB '                    /737: code page 737 (default)',0dh,0ah
                DB '                    /869: code page IBM 869',0dh,0ah
                DB '                    /928: code page ELOT 928',0dh,0ah,'$'

CODE            ENDS
                END     BEGIN
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kbdhe.asm ===
AltLeftShift      EQU  10
AltRightShift     EQU  9
CtrlLeftShift     EQU  5
CtrlRightShift    EQU  4
CtrlAlt           EQU  12

caps_bit     equ        01000000b
nums_bit     equ        00100000b

NUMKBTONOI        EQU  29
NUMKBDIAL         EQU  9
NUMSEMICODES      EQU  122
NUMKBCODES        EQU  102
ISWINDOWSNT       EQU  3205H

ROM_BIOS_DATA   SEGMENT     AT 40H    ;BIOS statuses held here, also kb buffer
        ORG      17h
        bios_kbd_stat db ?            ;keyboard status byte
        ORG      1AH
        HEAD     DW          ?             ;Unread chars go from Head to Tail
        TAIL     DW          ?
        BUFFER              DW   16 DUP (?)   ;The buffer itself
        BUFFER_END          LABEL   WORD

ROM_BIOS_DATA   ENDS

CODE            SEGMENT PARA PUBLIC 'CODE'
        ASSUME  CS:CODE
                ORG     100H
BEGIN:          JMP     INITIALIZE
MYSIG           DB      'G.Kozyrakis'

NEW_INT09H  PROC    NEAR              ;The keyboard interrupt will now come here.
        ASSUME  CS:CODE
        PUSH    AX                    ;Save the used registers for good form
        PUSH    BX
        PUSH    CX
        PUSH    DX
        PUSH    DI
        PUSH    SI
        PUSH    DS
        PUSH    ES
        PUSHF                            ;First, call old keyboard interrupt
        CALL    OLD_INT09H
        CMP     CS:[CHECKFLAG],1
        JNE     JEXIT
        CLI
        ASSUME  DS:ROM_BIOS_DATA         ;Examine the char just put in
        MOV     BX,ROM_BIOS_DATA
        MOV     DS,BX
        MOV     BX,TAIL                  ;Point to current tail
        MOV     CL,Bios_kbd_stat
        MOV     CH,CL
        AND     CH,1FH
        AND     CL,0Fh
        CMP     CL,AltRightShift
        JNE     NOGREEKSWITCH
        MOV     GrFlag,AltRightShift
        MOV     SemiFlag,0
        JMP     SHORT START
NOGREEKSWITCH:
        CMP     CL,AltLeftShift
        JNE     CHKSEMI
        MOV     GrFlag,0
        MOV     SemiFlag,0
        JMP     SHORT START

CHKSEMI:
        MOV     CL,Bios_kbd_stat
        AND     CL,CtrlLeftShift
        CMP     CL,CtrlLeftShift
        JNE     START
SemiGr: 
        XOR     SemiFlag,CtrlLeftShift

START:  
        CMP     BX,HEAD                  ;If at head, kbd int has deleted char
        JE      JEXIT                    ;So leave
        SUB     BX,2                     ;Point to just read in character
        CMP     BX,OFFSET BUFFER         ;Did we undershoot buffer?
        JAE     NO_WRAP                  ;Nope
        MOV     BX,OFFSET BUFFER_END     ;Yes -- move to buffer top
        SUB     BX,2                     ;Point to just read in character
NO_WRAP:
        MOV     DX, [BX]                 ;** Typed character in DX now **
        cmp     DL,32
        jne     NOTOGGLE
        mov     CL,CH
        and     CL,0Fh
        cmp     CL,CtrlAlt
        jne     NOTOGGLE
        xor     GrFlag,AltRightShift
        MOV     SemiFlag,0
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        JMP     EXIT
NOTOGGLE:
        TEST    CH,10h
        JZ      NOSCROLL
        cmp     dh,7ah
        ja      NOSCROLL
        cmp     dh,78h
        jb      NOSCROLL
        push    es
        push    ds
        mov     ax,CS
        mov     es,ax
        mov     ds,ax
        push    bx
        mov     al,dh
        sub     al,77h
        CALL    ChangeCP
        pop     bx
        pop     ds
        pop     es
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        JMP     EXIT
NOSCROLL:
        MOV     SI,KBOffset
        ADD     SI,(NUMKBTONOI+NUMKBDIAL)*2 ;Semicodes
        CMP     SemiFlag,CtrlLeftShift
        JE      GREEKS
        ADD     SI,NUMSEMICODES*2        ;KBCodes
        CMP     GrFlag,AltRightShift
        JE      GREEKS
JEXIT:  JMP     EXIT
GREEKS: 
        CMP     ToneStat,0
        JE      CHKTN
        MOV     SI,KBOffset             ;KBTONOI
        CMP     ToneStat,22h
        JNE     TCNT
        ADD     SI,NUMKBTONOI*2         ;KBDIAL
TCNT:   CMP     DX,CS:[SI]               ;Compare to first key
        JE      FOUNDONE                 ;yes
        ADD     SI,4                     ;Point to next key
        CMP     CS:[SI],0FFFFH           ;check for end;
        JNE     TCNT                     ;No continue with next table entry
        CMP     ToneStat,0
        JE      NoTonos
        MOV     TAIL,BX
NoTonos:
        MOV     ToneStat,0
        MOV     TAIL,BX

CHKTN:
        CMP     DH,27H                   ;is it a tonos
        JNE     NEXT

ISTONOS:
        MOV     ToneStat,27h             ;yes
        MOV     TAIL,BX                  ;take tono out of kbr buffer
        JMP     SHORT EXIT
NEXT:   CMP     DH,28H                   ;is it dialytika
        JNE     CONT
        MOV     ToneStat,22h
        MOV     TAIL,BX                  ;take dialytika out of kbr buffer
        JMP     SHORT EXIT

CONT:   CMP     DX,CS:[SI]               ;Compare to first key
        JE      FOUNDONE                 ;yes
        ADD     SI,4                     ;Point to next key
        CMP     CS:[SI],0FFFFH           ;check for end;
        JNE     CONT                     ;No continue with next table entry

        JMP     SHORT EXIT               ;No keys matched.  Jump Out.
FOUNDONE:
        MOV     DX,CS:[SI+2]
        MOV     [BX],DX
        MOV     ToneStat,0
EXIT:
        STI
        PUSH    BP
        MOV     AH,03
        INT     10H
        CMP     CH,CL
        JAE     NO_CURSOR
        MOV     CX,CURSOR1
        XOR     CH,CH
        CMP     SemiFlag,0
        JNE     SET_CURSOR
        MOV     CX,CURSOR1
        CMP     GRFlag,0
        JNE     SET_CURSOR
        MOV     CX,CURSOR0
SET_CURSOR:
        MOV     AH,1
        INT     10h
NO_CURSOR:
        POP     BP
        POP     ES                       ;Do the Pops of all registers.
        POP     DS
        POP     SI
        POP     DI
        POP     DX
        POP     CX
        POP     BX
        POP     AX
        IRET                          ;An interrupt needs an IRET

NEW_INT09H ENDP

ChangeCP PROC   NEAR
         CLI
         Mov     ES:[KBOffset],OFFSET ES:[TAB928]
         CMP     AL,3
         JE      ChangeAll
         Mov     ES:[KBOffset],OFFSET ES:[TAB869]
         CMP     AL,2
         JE      ChangeAll
         Mov     ES:[KBOffset],OFFSET ES:[TAB737]
         CMP     AL,1
         JNE     NOCHCP
ChangeAll:
         MOV     CS:[CPTable],AL
NOCHCP:
         STI
         RET
ChangeCP ENDP

;* Multiplex - Handler for Interrupt 2Fh (Multiplex Interrupt). Checks
;* AH for this TSR's identity number. If no match (indicating call is
;* not intended for this TSR), Multiplex passes control to the previous
;* Interrupt 2Fh handler.
;*
;* Params: AH = Handler identity number
;*         AL = Function number 0-2
;*
;* Return: AL    = 0FFh (function 0)
;*         "GK" in BX (function 0)
;*         ES = Current CS (function 0)
;*         DH = Greek State for function 1 ( 9 or 10)
;*         DL = Code Page (1:=737 2:=869 3:=928) for function 2
Multiplex PROC  FAR

        .IF     ah != 0CCh              ; If this handler not requested,
        jmp     cs:MULTEX_ISR           ;   pass control to old Int 2Fh
        .ENDIF                          ;   handler
        push    cs
        pop     es

        .IF     al == 0                 ; If function 0 (verify presence),
        mov     al, 0FFh                ;   AL = 0FFh,
        mov     bx, "GK"
        mov     dh, CS:[GRFlag]
        mov     dl, CS:[CPTable]
        .ELSEIF al == 1
        mov     CS:[GRFlag],dh
        .ELSEIF al == 2
        mov     al,dl
        push    ds
        push    cs
        pop     ds
        CALL    ChangeCP
        pop     ds
        .ENDIF                          ;   set ES:DI = far address

        iret

Multiplex ENDP


BIOS_ISR   LABEL   DWORD
OLD_INT09H DD  ?       ;Location of old kbd interrupt
MULTEX_ISR LABEL   DWORD
OLD_INT2FH DD  ?       ;Location of old multiplex interrupt
ToneStat   DB  0       ;Set to 1 when tonos is pressed
GrFlag     DB  0
SemiFlag   DB  0
CURSOR0    DW  0B0CH
CURSOR1    DW  070CH
CHECKFLAG  DB  1
CPTable    DB  0
OS_Ver     DW  0
KBOffset   DW  OFFSET TAB737

TAB737     dw    1E61H, 1EE1H   ; a Tonoi
           dw    1265H, 12E2H   ; e
           dw    2368H, 23E3H   ; h
           dw    1769H, 17E5H   ; i
           dw    186FH, 18E6H   ; o
           dw    1579H, 15E7H   ; y
           dw    2F76H, 2FE9H   ; v
           DW    1e41H, 1EEAH   ; A
           dw    1245H, 12EBH   ; E
           DW    2348H, 23ECH   ; H
           DW    1749H, 17EDH   ; I
           DW    184fH, 18EEH   ; O
           DW    1559H, 15EFH   ; Y
           DW    2f56H, 00F0H   ; V
           dw    0FFFFH
KBDIAL     dw    1769H, 17E4H   ; i
           dw    1579H, 15E8H   ; y
           dw    1749H, 1749H
           DW    1559H, 1559H
           dw    0FFFFH

SEMICODES  dw    3b00H, 3bC9H   ;    F1
           dw    3c00H, 3cBBH   ;    F2
           dw    3e00H, 3eC8H   ;    F3
           dw    3d00H, 3dBCH   ;    F4
           dw    3f00H, 3fCDH   ;    F5
           dw    4000H, 40BAH   ;    F6
           dw    4100H, 41CCH   ;    F7
           dw    4200H, 42B9H   ;    F8
           dw    4300H, 43CBH   ;    F9
           dw    4400H, 44CAH   ;    F10
           dw    5400H, 54DAH   ;    shift+F1
           dw    5500H, 55BFH   ; 
           dw    5700H, 57C0H   ; 
           dw    5600H, 56D9H   ; 
           dw    5800H, 58C4H   ; 
           dw    5900H, 59B3H   ; 
           dw    5a00H, 5aC3H   ; 
           dw    5b00H, 5bB4H   ; 
           dw    5c00H, 5cC2H   ; 
           dw    5d00H, 5dC1H   ;    shift+F10
           dw    6200H, 62CEH   ; 
           dw    6C00H, 6CC5H   ; 
           dw    1000h, 10DBH   ;    alt  +Q
           dw    1100h, 11B0H   ;    alt  +E
           dw    1200h, 12B1H   ; 
           dw    1300h, 13B2H   ; 
           dw    1400h, 14DCH   ; 
           dw    1500h, 15DFH   ; 

           dw    6F00H, 6FB5H   ; 
           dw    6500H, 65B6H   ; 
           dw    5f00H, 5fB7H   ; 
           dw    6900H, 69B8H   ; 
           dw    6000H, 60BDH   ; 
           dw    6A00H, 6ABEH   ; 
           dw    6E00H, 6EC6H   ; 
           dw    6400H, 64C7H   ; 
           dw    6700H, 67CFH   ;    ctrl +F10
           dw    7100H, 71D0H   ;    alt  +F10
           dw    6600H, 66D1H   ; 
           dw    7000H, 70D2H   ; 
           dw    6100H, 61D3H   ; 
           dw    6B00H, 6BD4H   ; 
           dw    6800H, 68D5H   ;    alt  +F1
           dw    5e00H, 5eD6H   ;    ctrl +F1
           dw    6300H, 63D7H   ; 
           dw    6D00H, 6DD8H   ; 
           dw    1600h, 16DDH   ; 
           dw    1700h, 17DEH   ; 
           dw    7800h, 78F1H   ;    alt  +1
           dw    7A00H, 7AF2H   ; 
           dw    7900H, 79F3H   ;    alt  +2
           dw    1800h, 18F4H   ; 
           dw    1900h, 19F5H   ;    alt  +P
           dw    7B00H, 7BF6H   ; 
           dw    7C00H, 7CF7H   ; 
           dw    7D00H, 7DF8H   ; 
           dw    7E00H, 7EF9H   ; 
           dw    7F00H, 7FFBH   ; 
           dw    8000H, 80FDH   ; 
           dw    8100H, 81FCH   ; 
           dw    8200H, 82FEH   ;    alt  +-


KBCODES    dw    1E61H, 1898H   ; a
           dw    3062H, 3099H   ; b
           dw    2267H, 229AH   ; g
           dw    2064H, 209BH   ; d
           dw    1265H, 129CH   ; e
           dw    2C7AH, 2C9DH   ; z
           dw    2368H, 239EH   ; h
           dw    1675H, 169FH   ; u
           dw    1769H, 17A0H   ; i
           dw    256BH, 25A1H   ; k
           dw    266CH, 26A2H   ; l
           dw    326DH, 32A3H   ; m
           dw    316EH, 31A4H   ; n
           dw    246AH, 24A5H   ; j
           dw    186FH, 18A6H   ; o
           dw    1970H, 19A7H   ; p
           dw    1372H, 13A8H   ; r
           dw    1F73H, 1FA9H   ; s
           dw    1474H, 14ABH   ; t
           dw    1579H, 15ACH   ; y
           dw    2166H, 21ADH   ; f
           dw    2D78H, 2DAEH   ; x
           dw    2E63H, 2EAFH   ; c
           dw    2F76H, 00E0H   ; v
           dw    1177H, 11AAH   ; w
           dw    1E41H, 1E80H   ; A
           dw    3042H, 3081H   ; B
           dw    2247H, 2282H   ; G
           dw    2044H, 2083H   ; D
           dw    1245H, 1284H   ; E
           dw    2C5AH, 2C85H   ; Z
           dw    2348H, 2386H   ; H
           dw    1655H, 1687H   ; U
           dw    1749H, 1788H   ; I
           dw    254BH, 2589H   ; K
           dw    264CH, 268AH   ; L
           dw    324DH, 328BH   ; M
           dw    314EH, 318CH   ; N
           dw    244AH, 248DH   ; J
           dw    184FH, 188EH   ; O
           dw    1950H, 198FH   ; P
           dw    1352H, 1390H   ; R
           dw    1F53H, 1F91H   ; S
           dw    1454H, 1492H   ; T
           dw    1559H, 1593H   ; Y
           dw    2146H, 2194H   ; F
           dw    2D58H, 2D95H   ; X
           dw    2E43H, 2E96H   ; C
           dw    2F56H, 2F97H   ; V
           dw    1157H, 117eH   ; w
           DW   0FFFFH

TAB869     dw    1E61H, 1E9BH   ; a
           dw    1265H, 129DH   ; e
           dw    2368H, 239EH   ; h
           dw    1769H, 179FH   ; i
           dw    186FH, 18A2H   ; o
           dw    1579H, 15A3H   ; y
           dw    2F76H, 2FFDH   ; v
           DW    1e41H, 1E86H   ; A
           dw    1245H, 128DH   ; E
           DW    2348H, 238FH   ; H
           DW    1749H, 1790H   ; I
           DW    184fH, 1892H   ; O
           DW    1559H, 1595H   ; Y
           DW    2f56H, 2F98H   ; V
           dw    0FFFFH
           dw    1769H, 17A0H   ; i
           dw    1579H, 15FBH   ; y
           dw    1749H, 17ADH   ; I
           DW    1559H, 15D1H   ; Y
           dw    0FFFFH
           dw    3b00H, 3bC9H   ;    F1
           dw    3c00H, 3cBBH   ;    F2
           dw    3e00H, 3eC8H   ;    F3
           dw    3d00H, 3dBCH   ;    F4
           dw    3f00H, 3fCDH   ;    F5
           dw    4000H, 40BAH   ;    F6
           dw    4100H, 41CCH   ;    F7
           dw    4200H, 42B9H   ;    F8
           dw    4300H, 43CBH   ;    F9
           dw    4400H, 44CAH   ;    F10
           dw    5400H, 54DAH   ;    shift+F1
           dw    5500H, 55BFH   ; 
           dw    5700H, 57C0H   ; 
           dw    5600H, 56D9H   ; 
           dw    5800H, 58C4H   ; 
           dw    5900H, 59B3H   ; 
           dw    5a00H, 5aC3H   ; 
           dw    5b00H, 5bB4H   ; 
           dw    5c00H, 5cC2H   ; 
           dw    5d00H, 5dC1H   ;    shift+F10
           dw    6200H, 62CEH   ; 
           dw    6C00H, 6CC5H   ; 
           dw    1000h, 10DBH   ;    alt  +Q
           dw    1100h, 11B0H   ;    alt  +E
           dw    1200h, 12B1H   ; 
           dw    1300h, 13B2H   ; 
           dw    1400h, 14DCH   ; 
           dw    1500h, 15DFH   ; 
           dw    6F00H, 6FABH   ; 
           dw    6500H, 65AEH   ; 
           dw    5f00H, 5fAFH   ; 
           dw    6900H, 69B8H   ; 
           dw    6000H, 60BDH   ; 
           dw    6A00H, 6ABEH   ; 
           dw    6E00H, 6EC6H   ; 
           dw    6400H, 64C7H   ; 
           dw    6700H, 67CFH   ;    ctrl +F10
           dw    7100H, 71D0H   ;    alt  +F10
           dw    6600H, 66D1H   ; 
           dw    7000H, 70D2H   ; 
           dw    6100H, 61D3H   ; 
           dw    6B00H, 6BD4H   ; 
           dw    6800H, 68D5H   ;    alt  +F1
           dw    5e00H, 5eD6H   ;    ctrl +F1
           dw    6300H, 63D7H   ; 
           dw    6D00H, 6DD8H   ; 
           dw    1600h, 16DDH   ; 
           dw    1700h, 17DEH   ; 
           dw    7800h, 78AEH   ;    alt  +1
           dw    7A00H, 7AABH   ; 
           dw    7900H, 79AFH   ;    alt  +2
           dw    1800h, 18F0H   ; 
           dw    1900h, 19F1H   ;    alt  +P
           dw    7B00H, 7BF7H   ; 
           dw    7C00H, 7CF5H   ; 
           dw    7D00H, 7DF8H   ; 
           dw    7E00H, 7EF9H   ; 
           dw    7F00H, 7FFBH   ; 
           dw    8000H, 80FDH   ; 
           dw    8100H, 81FCH   ; 
           dw    8200H, 82FEH   ;    alt  +-
           dw    1E61H, 18D6H   ; a
           dw    3062H, 30D7H   ; b
           dw    2267H, 22D8H   ; g
           dw    2064H, 20DDH   ; d
           dw    1265H, 12DEH   ; e
           dw    2C7AH, 00E0H   ; z
           dw    2368H, 23E1H   ; h
           dw    1675H, 16E2H   ; u
           dw    1769H, 17E3H   ; i
           dw    256BH, 25E4H   ; k
           dw    266CH, 26E5H   ; l
           dw    326DH, 32E6H   ; m
           dw    316EH, 31E7H   ; n
           dw    246AH, 24E8H   ; j
           dw    186FH, 18E9H   ; o
           dw    1970H, 19EAH   ; p
           dw    1372H, 13EBH   ; r
           dw    1F73H, 1FECH   ; s
           dw    1474H, 14EEH   ; t
           dw    1579H, 15F2H   ; y
           dw    2166H, 21F3H   ; f
           dw    2D78H, 2DF4H   ; x
           dw    2E63H, 2EF6H   ; c
           dw    2F76H, 2FFAH   ; v
           dw    1177H, 11EDH   ; w
           dw    1E41H, 1EA4H   ; A
           dw    3042H, 30A5H   ; B
           dw    2247H, 22A6H   ; G
           dw    2044H, 20A7H   ; D
           dw    1245H, 12A8H   ; E
           dw    2C5AH, 2CA9H   ; Z
           dw    2348H, 23AAH   ; H
           dw    1655H, 16ACH   ; U
           dw    1749H, 17ADH   ; I
           dw    254BH, 25B5H   ; K
           dw    264CH, 26B6H   ; L
           dw    324DH, 32B7H   ; M
           dw    314EH, 31B8H   ; N
           dw    244AH, 24BDH   ; J
           dw    184FH, 18BEH   ; O
           dw    1950H, 19C6H   ; P
           dw    1352H, 13C7H   ; R
           dw    1F53H, 1FCFH   ; S
           dw    1454H, 14D0H   ; T
           dw    1559H, 15D1H   ; Y
           dw    2146H, 21D2H   ; F
           dw    2D58H, 2DD3H   ; X
           dw    2E43H, 2ED4H   ; C
           dw    2F56H, 2FD5H   ; V
           dw    1157H, 117eH   ; w
           dw    0FFFFH

TAB928     dw    1E61H, 1EDCH   ; a
           dw    1265H, 12DDH   ; e
           dw    2368H, 23DEH   ; h
           dw    1769H, 17DFH   ; i
           dw    186FH, 18FCH   ; o
           dw    1579H, 15FDH   ; y
           dw    2F76H, 2FFEH   ; v
           DW    1e41H, 1EB6H   ; A
           dw    1245H, 12B8H   ; E
           DW    2348H, 23B9H   ; H
           DW    1749H, 17BAH   ; I
           DW    184fH, 18BCH   ; O
           DW    1559H, 15BEH   ; Y
           DW    2f56H, 2FBFH   ; V
           dw    0FFFFH
           dw    1769H, 17FAH   ; i
           dw    1579H, 15FBH   ; y
           dw    1749H, 17DAH   ; I
           DW    1559H, 15DBH   ; Y
           dw    0FFFFH
           dw    3b00H, 3b91H   ;    F1
           dw    3c00H, 3c87H   ;    F2
           dw    3e00H, 3e90H   ;    F3
           dw    3d00H, 3d88H   ;    F4
           dw    3f00H, 3f95H   ;    F5
           dw    4000H, 4086H   ;    F6
           dw    4100H, 4194H   ;    F7
           dw    4200H, 4285H   ;    F8
           dw    4300H, 4393H   ;    F9
           dw    4400H, 4492H   ;    F10
           dw    5400H, 5498H   ;    shift+F1
           dw    5500H, 5589H   ; 
           dw    5700H, 578AH   ; 
           dw    5600H, 5697H   ; 
           dw    5800H, 588EH   ; 
           dw    5900H, 5983H   ; 
           dw    5a00H, 5a8dH   ; 
           dw    5b00H, 5b84H   ; 
           dw    5c00H, 5c8cH   ; 
           dw    5d00H, 5d8bH   ;    shift+F10
           dw    6200H, 6296H   ; 
           dw    6C00H, 6C8fH   ; 
           dw    1000h, 1099H   ;    alt  +Q
           dw    1100h, 1180H   ;    alt  +E
           dw    1200h, 1281H   ; 
           dw    1300h, 1382H   ; 
           dw    1400h, 149aH   ; 
           dw    1600h, 169bH   ; 
                                ;         differ in other CPs
           dw    6F00H, 6F00H   ; 
           dw    6500H, 6500H   ; 
           dw    5f00H, 5f00H   ; 
           dw    6900H, 6900H   ; 
           dw    6000H, 6000H   ; 
           dw    6A00H, 6A00H   ; 
           dw    6E00H, 6E00H   ; 
           dw    6400H, 6400H   ; 
           dw    6700H, 6700H   ;    ctrl +F10
           dw    7100H, 7100H   ;    alt  +F10
           dw    6600H, 6600H   ; 
           dw    7000H, 7000H   ; 
           dw    6100H, 6100H   ; 
           dw    6B00H, 6B00H   ; 
           dw    6800H, 6800H   ;    alt  +F1
           dw    5e00H, 5e00H   ;    ctrl +F1
           dw    6300H, 6300H   ; 
           dw    2b00H, 00a7H   ; 
           dw    1500h, 00e0H   ; 
           dw    1700h, 17c0H   ; 
           dw    7800h, 78B1H   ;    alt  +1
           dw    7A00H, 7AABH   ; 
           dw    7900H, 79BBH   ;    alt  +2
           dw    1800h, 18a7H   ; 
           dw    1900h, 19a9H   ;    alt  +P
           dw    7B00H, 7BF6H   ; 
           dw    7C00H, 7CF7H   ; 
           dw    7D00H, 7Db0H   ; 
           dw    7E00H, 7Eb7H   ; 
           dw    7F00H, 7F9cH   ; 
           dw    8000H, 80b2H   ; 
           dw    8100H, 81b3H   ; 
           dw    8200H, 82bdH   ;    alt  +-

           dw    1E61H, 18E1H   ; a
           dw    3062H, 30E2H   ; b
           dw    2267H, 22E3H   ; g
           dw    2064H, 20E4H   ; d
           dw    1265H, 12E5H   ; e
           dw    2C7AH, 2CE6H   ; z
           dw    2368H, 23E7H   ; h
           dw    1675H, 16E8H   ; u
           dw    1769H, 17E9H   ; i
           dw    256BH, 25EAH   ; k
           dw    266CH, 26EBH   ; l
           dw    326DH, 32ECH   ; m
           dw    316EH, 31EDH   ; n
           dw    246AH, 24EEH   ; j
           dw    186FH, 18EFH   ; o
           dw    1970H, 00F0H   ; p
           dw    1372H, 13F1H   ; r
           dw    1F73H, 1FF3H   ; s
           dw    1474H, 14F4H   ; t
           dw    1579H, 15F5H   ; y
           dw    2166H, 21F6H   ; f
           dw    2D78H, 2DF7H   ; x
           dw    2E63H, 2EF8H   ; c
           dw    2F76H, 2FF9H   ; v
           dw    1177H, 11F2H   ; w
           dw    1E41H, 1EC1H   ; A
           dw    3042H, 30C2H   ; B
           dw    2247H, 22C3H   ; G
           dw    2044H, 20C4H   ; D
           dw    1245H, 12C5H   ; E
           dw    2C5AH, 2CC6H   ; Z
           dw    2348H, 23C7H   ; H
           dw    1655H, 16C8H   ; U
           dw    1749H, 17C9H   ; I
           dw    254BH, 25CAH   ; K
           dw    264CH, 26CBH   ; L
           dw    324DH, 32CCH   ; M
           dw    314EH, 31CDH   ; N
           dw    244AH, 24CEH   ; J
           dw    184FH, 18CFH   ; O
           dw    1950H, 19D0H   ; P
           dw    1352H, 13D1H   ; R
           dw    1F53H, 1FD3H   ; S
           dw    1454H, 14D4H   ; T
           dw    1559H, 15D5H   ; Y
           dw    2146H, 21D6H   ; F
           dw    2D58H, 2DD7H   ; X
           dw    2E43H, 2ED8H   ; C
           dw    2F56H, 2FD9H   ; V
           dw    1157H, 117eH   ; w
           dw    0FFFFH


INITIALIZE      PROC    NEAR
        ASSUME  DS:CODE
                PUSH   CS
                POP    ES

                MOV     AX,3306H
                INT     21H
                MOV     OS_Ver,BX

                MOV     AX,0CC00h
                INT     2Fh
                CMP     AL,0FFh
                JNE     PARSE
                CMP     BX,"GK"
                JNE     PARSE
                MOV     INSTALL_FLAG,1          ;Program is already installed
                MOV     CS:[CodePage],DL        ;If installed DL holds active CP
;
;
PARSE:
	CLD				;CLEAR DIRECTION
        XOR     CH,CH
        MOV     SI,80H                  ;Point DS:SI to command line
        MOV     CL,[SI]
        CMP     CL,0
        JE      ENDSCAN
        INC     SI
INIT1:	LODSB
        CMP     AL,"/"
        JE      SLASHCAR
INIT6:  LOOP    INIT1
        JMP     ENDSCAN
SLASHCAR:
        CMP     BYTE PTR [SI],'?'
        JNE     NO_HELP
        JMP     DISP_HELP
NO_HELP:
        CMP     BYTE PTR [SI],'8'
        JE      INIT2

        CMP     BYTE PTR [SI],'9'
        JE      INIT3

        CMP     BYTE PTR [SI],'7'
        JE      INIT4

        CMP     BYTE PTR [SI],'4'
        JE      INIT4


        AND     BYTE PTR [SI],0DFh          ;Change char to uppercase
;        CMP     BYTE PTR [SI],'U'
;        JE      UNINSTALL               ;Yes, then uninstall program

        CMP     BYTE PTR [SI],'H'       ; Ask for help
        JNE     INIT6                   ; No branch
DISP_HELP:
        CALL    DISP_BANNER
        MOV     DX,OFFSET HELP_BANNER
        MOV     AH,9
        INT     21H

        MOV     AX,4C00H                ;Exit with ERRORLEVEL = 0
        INT     21H

INIT2:
        CMP     BYTE PTR [SI+1],'6'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'9'
        JNE     INIT6
        MOV     CS:[CodePage],2
        JMP     INIT6

INIT3:
        CMP     BYTE PTR [SI+1],'2'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'8'
        JNE     INIT6
        MOV     CS:[CodePage],3
        JMP     INIT6
INIT4:
        CMP     BYTE PTR [SI+1],'3'
        JNE     INIT6
        CMP     BYTE PTR [SI+2],'7'
        JNE     INIT6
        MOV     CS:[CodePage],1
        JMP     INIT6

ENDSCAN:
        MOV     AL,CS:[CodePage]
        CMP     AL,ES:[CPTable]
        JE      NOCP
        MOV     ES:[CHECKFLAG],1        ;Clear CHECKFLAG byte
        MOV     ES:[CPTable],AL
        CALL    ChangeCP
NOCP:
        CMP     INSTALL_FLAG,1          ;Branch if not installed
        JNE     INSTALL1
        MOV     DX,OFFSET CONFIRM_MSG3  ;Print confirmation message
        JMP     SHORT CONFIRM_AND_EXIT  ;And exit


UNINSTALL:
                CMP     INSTALL_FLAG,1          ;Error if not installed
                JE      UNINSTALL2

		MOV	AL,3
                MOV     DX,OFFSET ERRMSG1       ;Initialize error pointer
		JMP	ERROR_EXIT
UNINSTALL2:
                CALL    REMOVE                  ;Uninstall the program
                JNC     UNINSTALL3

		MOV	AL,4
                MOV     DX,OFFSET ERRMSG2       ;Initialize error pointer
		JMP	ERROR_EXIT
UNINSTALL3:
                MOV     DX,OFFSET CONFIRM_MSG2  ;Print confirmation message


CONFIRM_AND_EXIT:
        PUSH    DX
        CALL    DISP_BANNER
        POP     DX
        MOV     AH,9
        INT     21H
        MOV     AX,4C00H                ;Exit with ERRORLEVEL = 0
        INT     21H

ERROR_EXIT:
		PUSH	AX			;Save registers

                MOV     AH,9
                INT     21H

		POP	AX			;Error code
                MOV     AH,4CH                  ;Terminate with ERRORLEVEL set
                INT     21H

INSTALL1:       
        PUSH    ES
        MOV     AX,3509H
        INT     21H
        MOV     WORD PTR OLD_INT09H,BX ;Address and put it in our location
        MOV     WORD PTR OLD_INT09H+2,ES
        MOV     DX,OFFSET NEW_INT09H
        MOV     AX,2509H
        INT     21h
        mov     ax, 352Fh               ; Request DOS Function 35h
        int     21h                     ; Get interrupt vector in ES:BX
        MOV     WORD PTR OLD_INT2FH,BX ;Address and put it in our location
        MOV     WORD PTR OLD_INT2FH+2,ES
        MOV     DX,OFFSET MultiPlex
        MOV     AX,252Fh
        INT     21h
        CALL    DISP_BANNER
        POP     ES
        MOV     AX,DS:[2CH]             ;Get environment segment
        MOV     ES,AX                   ;  address from PSP
        MOV     AH,49H                  ;Then deallocate environment
        INT     21H                     ;  space reserved by DOS
        INT     11H
        TEST    AL,10H
        JNZ     NOCGA
        MOV     CURSOR0,0607H
        MOV     CURSOR1,0307H
NOCGA:
        MOV     DX,OFFSET INITIALIZE
        INT     27H

DISP_BANNER:
        MOV     DX,OFFSET MSGSTRT
        MOV     AH,9
        INT     21h
        MOV     DX,OFFSET MSG869
        CMP     CS:[CodePage],2
        JE      DISPREST
        MOV     DX,OFFSET MSG928
        CMP     CS:[CodePage],3
        JE      DISPREST
        MOV     DX,OFFSET MSG737
DISPREST:
        MOV     AH,9
        INT     21h
        CMP     OS_Ver,ISWINDOWSNT
        JNE     BANNER_END
        MOV     DX,OFFSET MSGONNT
        MOV     AH,9
        INT     21H
BANNER_END:
        RET
INITIALIZE      ENDP

;-----------------------------------------------------------------------------
;REMOVE deallocates the memory block addressed by ES and restores the
;Interrupt vector displaced on installation.
;-----------------------------------------------------------------------------
REMOVE          PROC    NEAR


                PUSH    ES                      ;Get current interrupt
                MOV     AX,352FH                
                INT     21H

                MOV     BX,ES
                POP     ES
		MOV	AX,ES
                CMP     BX,AX			;Program cannot be uninstalled
                JNE     NO_RESTORE_VECTOR         
                PUSH    ES                      ;Get current interrupt
                MOV     AX,3509H                
                INT     21H

                MOV     BX,ES
                POP     ES
		MOV	AX,ES
                CMP     BX,AX			;Program cannot be uninstalled
                JE      RESTORE_VECTOR         
NO_RESTORE_VECTOR:
                STC                             ;Return with CF = 1 for error
                RET
RESTORE_VECTOR:
		PUSH    DS                      ;Restore displaced interrupt
        ASSUME  DS:NOTHING                      ;  vector

                LDS     DX,ES:[BIOS_ISR]
                MOV     AX,2509H
                INT     21H

                LDS     DX,ES:[MULTEX_ISR]
                MOV     AX,252fH
                INT     21H
                POP     DS
        ASSUME  DS:CODE

                NOT     WORD PTR ES:[BEGIN]     ;Remove fingerprint

                MOV     AH,49H                  ;Free memory given to
                INT     21H                     ;  original program block
                RET                             ;Exit with CF intact

REMOVE          ENDP



INSTALL_FLAG    DB      0
CodePage        DB      1

MSGSTRT    DB 0ah,0dh
           DB 'GREEK Driver for MS-DOS. Copyright 1994 Microsoft Hellas',0ah,0dh
           DB 'Active Code Page is ','$'
MSG737     DB '737',0ah,0dh,'$'
MSG869     DB '869',0ah,0dh,'$'
MSG928     DB '928',0ah,0dh,'$'

MSGONNT    DB 'Running under MS Windows NT',10,13,'$'
ERRMSG1         DB      "Greek driver not loaded",0dh,0ah,"$"
ERRMSG2         DB      "Cannot unload Greek driver",0dh,0ah,"$"
CONFIRM_MSG2    DB      "Driver unloaded.",0dh,0ah,"$"
CONFIRM_MSG3    DB      "Driver loaded."
Dummy           DB      0dh,0ah,"$"

HELP_BANNER     DB 0ah,0dh
                DB 'Hotkeys for keyboard switching are:',0ah,0dh
                DB '                                    Alt + Right Shift, Greek On ',0ah,0dh
                DB '                                    Alt + Left Shift, Greek Off',0ah,0dh
                DB '                                    Ctrl + Right Shift, Semigraphics',0ah,0dh,0ah,0dh
                DB 'For code page switching,',0ah,0dh
                DB 'set Scroll Lock on and press:',0ah,0dh
                DB '                             Alt + 1 for C.P. 737',0ah,0dh
                DB '                             Alt + 2 for C.P. 869',0ah,0dh
                DB '                             Alt + 3 for C.P. 928',0ah,0dh
                DB  0dh,0ah,'Valid switches are:',0dh,0ah
                DB '                    /737: code page 737 (default)',0dh,0ah
                DB '                    /869: code page IBM 869',0dh,0ah
                DB '                    /928: code page ELOT 928',0dh,0ah,'$'

CODE            ENDS
                END     BEGIN
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbl.asm ===
PAGE    118,132
        TITLE   DOS - Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DOS - - NLS Support - Keyboard Definition File
;; (c) Copyright 1988 Microsoft
;;
;; This file contains the keyboard tables for Russia
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC BL_LOGIC                ;;
        PUBLIC BL2_LOGIC               ;;
        PUBLIC BL3_LOGIC               ;;
        PUBLIC BL_866_XLAT             ;;
        PUBLIC BL_437_XLAT             ;;
        PUBLIC BL_850_XLAT             ;;
        PUBLIC BL_855_XLAT             ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
ENX_KBD             EQU   G_KB+P12_KB
                                       ;;
                                       ;;
DEBUG   EQU 0                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; BL State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
BL_LOGIC:                              ;;
                                       ;;
   DW  LOGIC_END-$                     ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC+SWITCHABLE      ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;;
;; <CTRL>+<RIGHT SHIFT> for Russian mode
;;
;; <CTRL>+<LEFT SHIFT>  for Latin mode
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_ALT,NOT                 ;;
    ANDF EITHER_CTL                    ;;
      IFF LEFT_SHIFT                   ;;
          BEEP                         ;;
          RESET_NLS                    ;;
      ENDIFF                           ;;
      IFF RIGHT_SHIFT                  ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
     IFF RUS_MODE                      ;;
     ANDF LC_E0,NOT                    ;; Enhanced keys are not
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;; Third and Fourth shifts
     ENDIFF                            ;;
    ELSEF                              ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT              ;; only.
            XLATT THIRD_SHIFT          ;; ALT + shift
         ENDIFF                        ;;
      ELSEF                            ;; ENHANCED keyboard
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC_END:                             ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; BL Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC BL1_COMMON_XLAT                ;;
BL1_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON_XLAT_END-$             ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_F1_END-$                  ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    3                             ;; number of entries
   DB    42                            ;; scan code (Left Shift)
   FLAG  LAT_MODE                      ;; flag bit to set
   DB    54                            ;; scan code (Right Shift)
   FLAG  RUS_MODE                      ;; flag bit to set
   DB    29                            ;; scan code (Ctrl)
   FLAG  RUS_MODE                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_F1_END:                            ;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Last State
COMMON_XLAT_END:                       ;;
                                       ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; BL2 State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
BL2_LOGIC:                             ;;
                                       ;;
   DW  LOGIC2_END-$                    ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC                 ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;; MODE CHANGE BY <RIGHT SHIFT>+<LEFT SHIFT>
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_CTL,NOT                 ;;
    ANDF EITHER_ALT,NOT                ;;
    ANDF RIGHT_SHIFT                   ;;
    ANDF LEFT_SHIFT                    ;;
       IFF RUS_MODE                    ;;
          BEEP                         ;;
          RESET_NLS                    ;;
       ELSEF                           ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
     IFF RUS_MODE                      ;;
     ANDF LC_E0,NOT                    ;; Enhanced keys are not
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;; Third and Fourth shifts
     ENDIFF                            ;;
    ELSEF                              ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT              ;; only.
            XLATT THIRD_SHIFT          ;; ALT + shift
         ENDIFF                        ;;
      ELSEF                            ;; ENHANCED keyboard
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC2_END:                            ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; BL Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC BL2_COMMON_XLAT                ;;
BL2_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON2_XLAT_END-$            ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM2_F1_END-$                 ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    2                             ;; number of entries
   DB    42                            ;; scan code
   FLAG  RUS_MODE                      ;; flag bit to set
   DB    54                            ;;
   FLAG  RUS_MODE                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM2_F1_END:                           ;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Last State
COMMON2_XLAT_END:                      ;;
                                       ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; BL3 State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
BL3_LOGIC:                             ;;
                                       ;;
   DW  LOGIC3_END-$                    ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC                 ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;; MODE CHANGE BY <RIGHT CTRL> PRESS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_SHIFT,NOT               ;;
    ANDF EITHER_ALT,NOT                ;;
    ANDF R_CTL_SHIFT                   ;;
       IFF RUS_MODE                    ;;
          BEEP                         ;;
          RESET_NLS                    ;;
       ELSEF                           ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
     IFF RUS_MODE                      ;;
     ANDF LC_E0,NOT                    ;; Enhanced keys are not
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;; Third and Fourth shifts
     ENDIFF                            ;;
    ELSEF                              ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT              ;; only.
            XLATT THIRD_SHIFT          ;; ALT + shift
         ENDIFF                        ;;
      ELSEF                            ;; ENHANCED keyboard
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC3_END:                             ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; BL Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC BL3_COMMON_XLAT                ;;
BL3_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON3_XLAT_END-$            ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM3_F1_END-$                 ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    1                             ;; number of entries
   DB    29                            ;; scan code
   FLAG  RUS_MODE                      ;; flag bit to set
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM3_F1_END:                           ;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Last State
COMMON3_XLAT_END:                      ;;
                                       ;;
                                       ;;
                                       ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 437
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL_437_XLAT:                           ;;
                                       ;;
   DW     CP437_XLAT_END-$             ;; length of section
   DW     437                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP437_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP437_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    11                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP437_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP437_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP437_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL_850_XLAT:                           ;;
                                       ;;
   DW     CP850_XLAT_END-$             ;; length of section
   DW     850                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP850_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP850_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP850_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 855
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL_855_XLAT:                           ;;
                                       ;;
   DW     CP855_XLAT_END-$             ;; length of section
   DW     855                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP855_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0EFH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP855_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP855_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BDH                          ;;   
   DB    0A4H                          ;;   
   DB    0E7H                          ;;   
   DB    0C6H                          ;;   
   DB    0A8H                          ;;   
   DB    0D4H                          ;;   
   DB    0ACH                          ;;   
   DB    0F5H                          ;;   
   DB    08AH                          ;;   i
   DB    0F3H                          ;;   
   DB    0B5H                          ;;   
   DB    098H                          ;;   
CP855_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0AAH                          ;;   
   DB    0F1H                          ;;   
   DB    0EBH                          ;;   
   DB    0A0H                          ;;   
   DB    0D8H                          ;;   
   DB    0E1H                          ;;   
   DB    0D6H                          ;;   
   DB    0D0H                          ;;   
   DB    0A6H                          ;;   
   DB    0E9H                          ;;   
   DB    0F7H                          ;;   
   DB    084H                          ;;   
CP855_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    0DEH                          ;;   
   DB    0FBH                          ;;   
   DB    0E3H                          ;;   
   DB    0D2H                          ;;   
   DB    0B7H                          ;;   
   DB    0E5H                          ;;   
   DB    0EDH                          ;;   
   DB    0A2H                          ;;   
   DB    09CH                          ;;   
CP855_A_LO_K1_T4_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BEH                          ;;   
   DB    0A5H                          ;;   
   DB    0E8H                          ;;   
   DB    0C7H                          ;;   
   DB    0A9H                          ;;   
   DB    0D5H                          ;;   
   DB    0ADH                          ;;   
   DB    0F6H                          ;;   
   DB    08BH                          ;;   I
   DB    0F4H                          ;;   
   DB    0B6H                          ;;   
   DB    099H                          ;;   
CP855_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0ABH                          ;;   
   DB    0F2H                          ;;   
   DB    0ECH                          ;;   
   DB    0A1H                          ;;   
   DB    0DDH                          ;;   
   DB    0E2H                          ;;   
   DB    0D7H                          ;;   
   DB    0D1H                          ;;   
   DB    0A7H                          ;;   
   DB    0EAH                          ;;   
   DB    0F8H                          ;;   
   DB    085H                          ;;   
CP855_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    45                            ;; Scan code
   DB    52                            ;; range
   DB    0FCH                          ;;   
   DB    0E4H                          ;;   
   DB    0D3H                          ;;   
   DB    0B8H                          ;;   
   DB    0E6H                          ;;   
   DB    0EEH                          ;;   
   DB    0A3H                          ;;   
   DB    09DH                          ;;   
CP855_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    44,0E0H                       ;;   
                                       ;;
CP855_A_UP_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_UP_END:                     ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP855_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;               *********************************************              ;;
;;               *   BL Specific Translate Section for 866   *              ;;
;;               *********************************************              ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL_866_XLAT:                           ;;
                                       ;;
   DW     CP866_XLAT_END-$             ;; length of section
   DW     866                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP866_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0FCH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP866_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0FDH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP866_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    169                           ;;   
   DB    230                           ;;   
   DB    227                           ;;   
   DB    170                           ;;   
   DB    165                           ;;   
   DB    173                           ;;   
   DB    163                           ;;   
   DB    232                           ;;   
   DB    105                           ;;   i
   DB    167                           ;;   
   DB    229                           ;;   
   DB    247                           ;;   
CP866_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    34                            ;; range
   DB    228                           ;;   
   DB    235                           ;;   
   DB    162                           ;;   
   DB    160                           ;;   
   DB    175                           ;;   
CP866_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    36                            ;; Scan code
   DB    41                            ;; range
   DB    174                           ;;   
   DB    171                           ;;   
   DB    164                           ;;   
   DB    166                           ;;   
   DB    237                           ;;   
   DB    241                           ;;   
CP866_A_LO_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    239                           ;;   
   DB    231                           ;;   
   DB    225                           ;;   
   DB    172                           ;;   
   DB    168                           ;;   
   DB    226                           ;;   
   DB    236                           ;;   
   DB    161                           ;;   
   DB    238                           ;;   
CP866_A_LO_K1_T4_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    35,0E0H                       ;;   
CP866_A_LO_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    137                           ;;   
   DB    150                           ;;   
   DB    147                           ;;   
   DB    138                           ;;   
   DB    133                           ;;   
   DB    141                           ;;   
   DB    131                           ;;   
   DB    152                           ;;   
   DB    073                           ;;   I
   DB    135                           ;;   
   DB    149                           ;;   
   DB    246                           ;;   
CP866_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    40                            ;; range
   DB    148                           ;;   
   DB    155                           ;;   
   DB    130                           ;;   
   DB    128                           ;;   
   DB    143                           ;;   
   DB    144                           ;;   
   DB    142                           ;;   
   DB    139                           ;;   
   DB    132                           ;;   
   DB    134                           ;;   
   DB    157                           ;;   
CP866_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    159                           ;;   
   DB    151                           ;;   
   DB    145                           ;;   
   DB    140                           ;;   
   DB    136                           ;;   
   DB    146                           ;;   
   DB    156                           ;;   
   DB    129                           ;;   
   DB    158                           ;;   
CP866_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    41,240                        ;;   
                                       ;;
CP866_A_UP_K1_T5_END:                  ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_UP_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP866_XLAT_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CODE     ENDS                          ;;
         END                           ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbg.asm ===
PAGE    118,132
        TITLE   DOS - Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DOS - - NLS Support - Keyboard Definition File
;;
;; This file contains the keyboard tables for Bulgaria
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;  This file was generated YKEY.EXE V3.0 01/05/94
;;  Copyright (C) YST_HOME 1991-1994
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC BG_LOGIC                ;;
        PUBLIC BG_866_XLAT             ;;
        PUBLIC BG_850_XLAT             ;;
        PUBLIC BG_855_XLAT             ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
ENX_KBD             EQU   G_KB+P12_KB
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; BU State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
BG_LOGIC:                             ;;
                                       ;;
   DW  LOGIC_END-$                     ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC+SWITCHABLE      ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;; <CTRL>+<RIGHT SHIFT> for Cyrillic mode
;;
;; <CTRL>+<LEFT SHIFT>  for Latin mode
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_CTL,NOT                 ;;
    ANDF EITHER_ALT                    ;;
      IFF LEFT_SHIFT                   ;;     Primary mode
          BEEP                         ;;
          RESET_NLS                    ;;
       ENDIFF                          ;;
      IFF RIGHT_SHIFT                  ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;     secondary mode
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
     IFF RUS_MODE                      ;;
     ANDF LC_E0,NOT                    ;; Enhanced keys are not
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;; Third and Fourth shifts
     ENDIFF                            ;;
    ELSEF                              ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT              ;; only.
            XLATT THIRD_SHIFT          ;; ALT + shift
         ENDIFF                        ;;
      ELSEF                            ;; ENHANCED keyboard
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC_END:                             ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; BU Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC BG_COMMON_XLAT                ;;
BG_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON_XLAT_END-$             ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_F1_END-$                  ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    3                             ;; number of entries
   DB    42                            ;; scan code (Left Shift)
   FLAG  LAT_MODE                      ;; flag bit to set
   DB    54                            ;; scan code (Right Shift)
   FLAG  RUS_MODE                      ;; flag bit to set
   DB    29                            ;; scan code (Ctrl)
   FLAG  RUS_MODE                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_F1_END:                            ;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Last State
COMMON_XLAT_END:                       ;;
                                       ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BU Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BG_850_XLAT:                           ;;
                                       ;;
   DW     CP850_XLAT_END-$             ;; length of section
   DW     850                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP850_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP850_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP850_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BU Specific Translate Section for 855
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BG_855_XLAT:                           ;;
                                       ;;
   DW     CP855_XLAT_END-$             ;; length of section
   DW     855                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    4                             ;; number of entries
   DB    0DH, 46                        ;; .
   DB    010H, 44                       ;; ,
   DB    01BH, 59                       ;; ;
   DB    02BH, 41                       ;; )
CP855_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    13                             ;; number of entries
   DB     03H, 63                       ;; ?
   DB     04H, 43                       ;; +
   DB     05H, 34                       ;; "
   DB     06H, 37                       ;; %
   DB     07H, 61                       ;; =
   DB     08H, 58                       ;; :
   DB     09H, 47                       ;; /
   DB     0AH, 45                       ;; -
   DB     0BH, 239                      ;; Numer
   DB     0DH, 056h                     ;; V
   DB    010H, 242                      ;; Non alpha because of lower case comma
   DB    01BH, 253                      ;; Paragraph
   DB    02BH, 40                       ;; (

CP855_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP855_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_LO_K1_T11_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    32                            ;; Number of scans
   DB    16, 0F1h                      ;;
   DB    17, 0E7H                      ;;    - 011h                                 ;;
   DB    18, 0A8H                      ;;    - 012
   DB    19, 0B7H                      ;;    - 013
   DB    20, 0F5H                      ;;    - 014
   DB    21, 0F9H                      ;;    - 015
   DB    22, 0C6H                      ;;    - 016
   DB    23, 0E3H                      ;;    - 017
   DB    24, 0A6H                      ;;    - 018
   DB    25, 0F3H                      ;;    - 019
   DB    26, 0A4H                      ;;    - 01A
   DB    30, 0EDH                      ;;    - 01E
   DB	 31, 0DEH		      ;;    - 01F
   DB    32, 0A0H                      ;;    - 020
   DB    33, 0D6H                      ;;    - 021
   DB    34, 0E9H                      ;;    - 022
   DB    35, 0ACH                      ;;    - 023
   DB    36, 0E5H                      ;;    - 024
   DB    37, 0D4H                      ;;    - 025
   DB    38, 0EBH                      ;;    - 026
   DB    39, 0D2H                      ;;    - 027
   DB    40, 0FBH                      ;;    - 028
   DB    44, 09CH                      ;;    - 02C
   DB    45, 0BDH                      ;;    - 02D
   DB    46, 09EH                      ;;    - 02E
   DB    47, 0F7H                      ;;    - 02F
   DB    48, 0AAH                      ;;    - 030
   DB    49, 0B5H                      ;;    - 031
   DB    50, 0D8H                      ;;    - 032
   DB	 51, 0E1H		       ;;    - 033
   DB    52, 0D0H                      ;;    - 034
   DB    53, 0A2H                      ;;    - 035
                                       ;;
CP855_A_LO_K1_T11_END:                 ;;
                                       ;;
   DW    0                             ;;
                                       ;;
CP855_A_K1_LO_END:                     ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character

   DW    CP855_A_UP_K1_T11_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN                ;; xlat options:
   DB    32H                           ;; Scan code
   DB    12, 139                       ;;   I - 011
   DB    17, 0E8H                      ;;    - 011
   DB    18, 0A9H                      ;;    - 012
   DB    19, 0B8H                      ;;    - 013
   DB    20, 0F6H                      ;;    - 014
   DB    21, 0FAH                      ;;    - 015
   DB    22, 0C7H                      ;;    - 016
   DB    23, 0E4H                      ;;    - 017
   DB    24, 0A7H                      ;;    - 018
   DB    25, 0F4H                      ;;    - 019
   DB    26, 0A5H                      ;;    - 01A
   DB    30, 0EEH                      ;;    - 01E
   DB    31,  224                      ;;   
   DB    32, 0A1H                      ;;    - 020
   DB    33, 0D7H                      ;;    - 021
   DB    34, 0EAH                      ;;    - 022
   DB    35, 0ADH                      ;;    - 023
   DB    36, 0E6H                      ;;    - 024
   DB    37, 0D5H                      ;;    - 025
   DB    38, 0ECH                      ;;    - 026
   DB    39, 0D3H                      ;;    - 027
   DB    40, 0FCH                      ;;    - 028
   DB    44, 09DH                      ;;    - 02C
   DB    45, 0BEH                      ;;    - 02D
   DB    46, 09FH                      ;;    - 02E
   DB    47, 0F8H                      ;;    - 02F
   DB    48, 0ABH                      ;;    - 030
   DB    49, 0B6H                      ;;    - 031
   DB    50, 0DDH                      ;;    - 032
   DB    51, 0E2H                      ;;    - 033
   DB    52, 0D1H                      ;;    - 034
   DB    53, 0A3H                      ;;    - 035
                                       ;;
CP855_A_UP_K1_T11_END:                 ;;
                                       ;;
   DW    0                             ;;
                                       ;;
CP855_A_K1_UP_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP855_XLAT_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;               *********************************************              ;;
;;               *   BU Specific Translate Section for 866   *              ;;
;;               *********************************************              ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BG_866_XLAT:                           ;;
                                       ;;
   DW     CP866_XLAT_END-$             ;; length of section
   DW     866                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    4                             ;; number of entries
   DB    0DH, 46                        ;; .
   DB    010H, 44                       ;; ,
   DB    01BH, 59                       ;; ;
   DB    02BH, 41                       ;; )
CP866_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    13                             ;; number of entries
   DB     03H, 63                       ;; ?
   DB     04H, 43                       ;; +
   DB     05H, 34                       ;; "
   DB     06H, 37                       ;; %
   DB     07H, 61                       ;; =
   DB     08H, 58                       ;; :
   DB     09H, 47                       ;; /
   DB     0AH, 45                       ;; -
   DB     0BH, 252                      ;; Numer
   DB     0DH, 46                       ;; .
   DB    010H, 235                      ;;
   DB    01BH, 21                       ;; Paragraph
   DB    02BH, 40                       ;; (

CP866_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0FDH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP866_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_LO_K1_T11_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    33                            ;; number of scans
   DB    12, 105                       ;;   i - 010
   DB    16, 0EBH                      ;;
   DB    17, 227                       ;;    - 011h
   DB    18, 165                       ;;    - 012
   DB    19, 168                       ;;    - 013
   DB    20, 232                       ;;    - 014
   DB    21, 233                       ;;    - 015
   DB    22, 170                       ;;    - 016
   DB    23, 225                       ;;    - 017
   DB    24, 164                       ;;    - 018
   DB    25, 167                       ;;    - 019
   DB    26, 230                       ;;    - 01A
   DB    30, 236                       ;;    - 01E
   DB    31, 239                       ;;    - 01F
   DB    32, 160                       ;;    - 020
   DB    33, 174                       ;;    - 021
   DB    34, 166                       ;;    - 022
   DB    35, 163                       ;;    - 023
   DB    36, 226                       ;;    - 024
   DB    37, 173                       ;;    - 025
   DB    38, 162                       ;;    - 026
   DB    39, 172                       ;;    - 027
   DB    40, 231                       ;;    - 028
   DB    44, 238                       ;;    - 02C
   DB    45, 169                       ;;    - 02D
   DB    46, 234                       ;;    - 02E
   DB    47, 237                       ;;    - 02F
   DB    48, 228                       ;;    - 030
   DB    49, 229                       ;;    - 031
   DB    50, 175                       ;;    - 032
   DB    51, 0E0H                      ;;
   DB    52, 171                       ;;    - 034
   DB    53, 161                       ;;    - 035
CP866_A_LO_K1_T11_END:

                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_UP_K1_T11_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    33                              ;; number of scans
   DB    12, 73                        ;;   I - 011
   DB    16, 09bh                      ;;
   DB    17, 147                       ;;    - 011
   DB    18, 133                       ;;    - 012
   DB    19, 136                       ;;    - 013
   DB    20, 152                       ;;    - 014
   DB    21, 153                       ;;    - 015
   DB    22, 138                       ;;    - 016
   DB    23, 145                       ;;    - 017
   DB    24, 132                       ;;    - 018
   DB    25, 135                       ;;    - 019
   DB    26, 150                       ;;    - 01A
   DB    30, 156                       ;;    - 01E
   DB    31, 159                       ;;   
   DB    32, 128                       ;;    - 020
   DB    33, 142                       ;;    - 021
   DB    34, 134                       ;;    - 022
   DB    35, 131                       ;;    - 023
   DB    36, 146                       ;;    - 024
   DB    37, 141                       ;;    - 025
   DB    38, 130                       ;;    - 026
   DB    39, 140                       ;;    - 027
   DB    40, 151                       ;;    - 028
   DB    44, 158                       ;;    - 02C
   DB    45, 137                       ;;    - 02D
   DB    46, 154                       ;;    - 02E
   DB    47, 157                       ;;    - 02F
   DB    48, 148                       ;;    - 030
   DB    49, 149                       ;;    - 031
   DB    50, 143                       ;;    - 032
   DB    51, 144                       ;;    - 033
   DB    52, 139                       ;;    - 034
   DB    53, 129                       ;;    - 035
                                       ;;
CP866_A_UP_K1_T11_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_UP_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP866_XLAT_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CODE     ENDS                          ;;
         END                           ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbr.asm ===
;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

;; XT section enabled
;; ************* CNS 12/18/86


	PAGE	,132
	TITLE	PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Defintion File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard tables for Brazil
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;	       Adapted for Brazil by Mihindu Senanayake (Microsoft) - Oct 1990
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC BR_LOGIC 	       ;;
	PUBLIC BR_437_XLAT	       ;;
	PUBLIC BR_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BR State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
BR_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW  0			       ;; special features
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
      IFF EITHER_SHIFT		       ;;
	  IFF CIRCUMFLEX		   ;;
	      RESET_NLS 		   ;;
	      XLATT CIRCUMFLEX_CIRCUMFLEX  ;;
	      SET_FLAG DEAD_UPPER	   ;;
	      GOTO CIRCUMFLEX_ON	   ;;
	  ENDIFF			   ;;
	  IFF TILDE		    ;;
	      RESET_NLS 	       ;;
	      XLATT TILDE_TILDE  ;;
	      SET_FLAG DEAD_UPPER	   ;;
	      GOTO TILDE_ON	    ;;
	  ENDIFF		       ;;
	  IFF DIARESIS		       ;;
	      RESET_NLS 	       ;;
	      XLATT DIARESIS_DIARESIS  ;;
	      SET_FLAG DEAD_UPPER	   ;;
	      GOTO DIARESIS_ON	       ;;
	  ENDIFF		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF
	  IFF GRAVE			   ;;
	      RESET_NLS 		   ;;
	      XLATT GRAVE_GRAVE 	   ;;
	      SET_FLAG DEAD_LOWER
	      GOTO GRAVE_ON		   ;;
	  ENDIFF			   ;;
	  IFF ACUTE		    ;;
	     RESET_NLS		    ;;
	     XLATT ACUTE_ACUTE	    ;;
	     SET_FLAG DEAD_LOWER
	     GOTO ACUTE_ON	    ;;
	  ENDIFF		    ;;
	  SET_FLAG DEAD_LOWER
      ENDIFF			       ;;
   ENDIFF			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
ACUTE_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
DIARESIS_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO TILDE_PROC		    ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
GRAVE_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TILDE_PROC:			       ;;
				       ;;
   IFF TILDE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
TILDE_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT TILDE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_UPPER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_LOWER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_TILDE:			       ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
CIRCUMFLEX_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
NON_DEAD:			       ;;
				       ;;
   IFKBD G_KB+P12_KB		       ;; Avoid accidentally translating
   ANDF LC_E0			       ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC		       ;;   G keyboard
   ENDIFF			       ;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT		       ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT		       ;; Numeric keys are not.
	  XLATT NON_ALPHA_UPPER        ;;
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
	  XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
	  ENDIFF		       ;;
      ENDIFF			       ;;
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	  IFKBD XT_KB+AT_KB	       ;;
	      IFF  EITHER_CTL	       ;;
	      ANDF ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	  ELSEF 		       ;;
	      IFF EITHER_CTL,NOT       ;;
	      ANDF R_ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	   ENDIFF		       ;;
      ENDIFF			       ;;
   ENDIFF			       ;;
;**************************************;;
 IFF EITHER_SHIFT,NOT		       ;;
   IFKBD XT_KB+AT_KB		       ;;
     IFF EITHER_CTL		       ;;
     ANDF ALT_SHIFT		       ;;
       XLATT ALT_CASE		       ;;
     ENDIFF			       ;;
   ENDIFF			       ;;
   IFKBD G_KB+P12_KB		       ;;
     IFF EITHER_CTL		       ;;
     ANDF ALT_SHIFT		       ;;
       IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ALT_CASE 	       ;;
       ENDIFF			       ;;
     ENDIFF			       ;;
   ENDIFF			       ;;
 ENDIFF 			       ;;
;**************************************;;
 IFKBD AT_KB+XT_KB		 ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF ALT_SHIFT		       ;; ALT - case
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
 ENDIFF 			       ;;
				       ;;
 IFKBD G_KB+P12_KB		       ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF ALT_SHIFT		       ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT	       ;;
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL		       ;;
      ANDF ALT_SHIFT		       ;;
      ANDF R_ALT_SHIFT,NOT	       ;;
	   XLATT ALT_CASE	       ;;
      ENDIFF			       ;;
 ENDIFF 			       ;;
				       ;;
 EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BR Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BR_COMMON_XLAT		       ;;
BR_COMMON_XLAT: 		       ;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_K1_END-$		  ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 2			       ;; number of entries
   DB	 40			       ;; scan code
   FLAG  ACUTE			       ;; flag bit to set
   DB	 41			       ;;
   FLAG  GRAVE			       ;;
				       ;;
				       ;;
COM_DK_LO_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_K1_END-$		  ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 3			       ;; number of entries
   DB	 7			       ;; scan code
   FLAG  CIRCUMFLEX		       ;; flag bit to set
   DB	 40			       ;;
   FLAG  DIARESIS		       ;;
   DB	 41			       ;;
   FLAG  TILDE			       ;;
				       ;;
COM_DK_UP_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_LO_END-$	       ;; length of state section
   DB	 GRAVE_LOWER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
				       ;;
COM_GR_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_SP_END-$	       ;; length of state section
   DB	 GRAVE_SPACE		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,96			       ;; STANDALONE GRAVE
				       ;;
COM_GR_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Twice
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_GR_END-$	       ;; length of state section
   DB	 GRAVE_GRAVE		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_GR_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 41,96			       ;; STANDALONE GRAVE
				       ;;
COM_GR_GR_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_GR_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 22,'' 		       ;; scan code,ASCII - u
   DB	 23,'' 		       ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
				       ;;
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
				       ;;
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Twice
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_CI_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_CIRCUMFLEX		    ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_CI_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 7,94			       ;; STANDALONE CIRCUMFLEX
				       ;;
COM_CI_CI_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_CI_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
   DW	 COM_TI_LO_K1_END-$		  ;; length of state section
   DB	 TILDE_LOWER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 07EH,0 		       ;; error character = standalone accent
				       ;;
   DW	 COM_TI_LO_K1_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 49,0A4H		       ;; scan code,ASCII - 
				       ;;
COM_TI_LO_K1_T1_END:			  ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_TI_LO_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_TI_UP_K1_END-$		  ;; length of state section
   DB	 TILDE_UPPER		      ;; State ID
   DW	 ANY_KB 	     ;; Keyboard Type
   DB	 07EH,0 			;; error character = standalone accent
				       ;;
   DW	 COM_TI_UP_K1_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 49,0A5H		       ;; scan code,ASCII - 
				       ;;
COM_TI_UP_K1_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_TI_UP_K1_END:			  ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_TI_SP_END-$	       ;; length of state section
   DB	 TILDE_SPACE		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 07EH,0 			 ;; error character = standalone accent
				       ;;
   DW	 COM_TI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,07EH		      ;; STANDALONE TILDE
				       ;;
COM_TI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_TI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Twice
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_TI_TI_END-$	       ;; length of state section
   DB	 TILDE_TILDE		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 07EH,0 			 ;; error character = standalone accent
				       ;;
   DW	 COM_TI_TI_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 41,07EH		       ;; STANDALONE TILDE
				       ;;
COM_TI_TI_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_TI_TI_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			      ;; number of scans
   DB	 18,'' 		       ;; scan code,ASCII - e
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
   DB	 46,'' 		       ;; scan code,ASCII - c-cedilla
				       ;;
COM_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_UP_END-$	     ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_AC_UP_T1_END-$	     ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 18,090H		       ;; scan code,ASCII - E
   DB	 46,080H		       ;; C cedilla
				       ;;
COM_AC_UP_T1_END:		     ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_UP_END:			     ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_SP_END-$	       ;; length of state section
   DB	 ACUTE_SPACE		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_AC_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			      ;; number of scans
   DB	 57,39			       ;; scan code,ASCII - SPACE
				       ;;
COM_AC_SP_T1_END:		     ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_SP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Twice
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_AC_END-$	       ;; length of state section
   DB	 ACUTE_ACUTE		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_AC_AC_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 40,39			       ;; scan code,ASCII - ACUTE
				       ;;
COM_AC_AC_T1_END:		     ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_AC_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_LO_END-$	     ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 '"',0			 ;; error character = standalone accent
				       ;;
   DW	 COM_DI_LO_T1_END-$	     ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,089H		       ;;    e diaeresis
   DB	 21,098H		       ;;    y diaeresis
   DB	 22,081H		       ;;    u diaeresis
   DB	 23,08BH		       ;;    i diaeresis
   DB	 24,094H		       ;;    o diaeresis
   DB	 30,084H		       ;;    a diaeresis
				       ;;
COM_DI_LO_T1_END:		     ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_LO_END:			     ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_UP_END-$	     ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_UP_T1_END-$	     ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 22,09AH		       ;;    U diaeresis
   DB	 24,099H		       ;;    O diaeresis
   DB	 30,08EH		       ;;    A diaeresis
				       ;;
COM_DI_UP_T1_END:		     ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_UP_END:			     ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_SP_END-$	       ;; length of state section
   DB	 DIARESIS_SPACE 		  ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 '"',0				;; error character = standalone accent
				       ;;
   DW	 COM_DI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,'"' 			;; scan code,ASCII - SPACE
				       ;;
COM_DI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_SP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Twice
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_DI_END-$	       ;; length of state section
   DB	 DIARESIS_DIARESIS		     ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 '"',0				;; error character = standalone accent
				       ;;
   DW	 COM_DI_DI_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 40,'"' 			;; scan code,ASCII - SPACE
				       ;;
COM_DI_DI_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_DI_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BR Specific Translate Section for 437
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BR_437_XLAT		       ;;
BR_437_XLAT:			       ;;
				       ;;
   DW	  CP437_XLAT_END-$	       ;; length of section
   DW	  437			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	  0			       ;; LAST STATE
				       ;;
CP437_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BR Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BR_850_XLAT		       ;;
BR_850_XLAT:			       ;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Alt Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_ALT_K1_END-$		  ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP850_ALT_K1_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 40,0EFH		       ;; scan code, acute
				       ;;
CP850_ALT_K1_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_ALT_K1_END:			  ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_THIRD_K1_END-$		    ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP850_THIRD_K1_T1_END-$	    ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	 40,0F9H		       ;; scan code, diaresis
				       ;;
CP850_THIRD_K1_T1_END:			    ;;
				       ;;
   DW	 0			       ;; Last xlat table
CP850_THIRD_K1_END:			    ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 21,0ECH		       ;; y acute
				       ;;
CP850_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_UP_END-$	       ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 21,0EDH		       ;;    Y acute
   DB	 22,0E9H		       ;;    U acute
   DB	 23,0D6H		       ;;    I acute
   DB	 24,0E0H		       ;;    O acute
   DB	 30,0B5H		       ;;    A acute
				       ;;
CP850_AC_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 '"',0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
				       ;;
CP850_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_LO_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 '"',0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 18,0D3H		       ;;    E diaeresis
   DB	 23,0D8H		       ;;    I diaeresis
				       ;;
CP850_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_GR_UP_END-$	       ;; length of state section
   DB	 GRAVE_UPPER		       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_GR_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,0B7H		       ;;    A grave
   DB	 18,0D4H		       ;;    E grave
   DB	 23,0DEH		       ;;    I grave
   DB	 24,0E3H		       ;;    O grave
   DB	 22,0EBH		       ;;    U grave
CP850_GR_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_GR_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Tilde Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  CP850_TI_LO_END-$		  ;; length of state section
    DB	  TILDE_LOWER			;; State ID
    DW	  ANY_KB	     ;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  CP850_TI_LO_T1_END-$		  ;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  2				;; number of scans
    DB	  30,0C6H			;; scan code,ASCII - a tilde
    DB	  24,0E4H			;; scan code,ASCII - o tilde
					;;
 CP850_TI_LO_T1_END:			  ;;
					;;
    DW	  0				;;
					;;
 CP850_TI_LO_END:			  ;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  CP850_TI_UP_END-$		  ;; length of state section
    DB	  TILDE_UPPER		       ;; State ID
    DW	  ANY_KB	    ;; Keyboard Type
    DB	  07eH,0		       ;; error character = standalone accent
					;;
    DW	  CP850_TI_UP_T1_END-$		  ;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  2				;; number of scans
    DB	  30,0C7H			;; scan code,ASCII - A tilde
    DB	  24,0E5H			;; scan code,ASCII - O tilde
					;;
 CP850_TI_UP_T1_END:			  ;;
					;;
    DW	  0				;; Size of xlat table - null table
					;;
 CP850_TI_UP_END:			  ;; length of state section
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_CI_UP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_UPPER	       ;; State ID
   DW	 ANY_KB 	    ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_CI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,0B6H		       ;;    A circumflex
   DB	 18,0D2H		       ;;    E circumflex
   DB	 23,0D7H		       ;;    I circumflex
   DB	 24,0E2H		       ;;    O circumflex
   DB	 22,0EAH		       ;;    U circumflex
				       ;;
CP850_CI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_CI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 0			       ;; LAST STATE
				       ;;
CP850_XLAT_END: 		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CODE	 ENDS			       ;;
	 END			       ;;


=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbl097.asm ===
PAGE    118,132
        TITLE   DOS - Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DOS - - NLS Support - Keyboard Definition File
;; (c) Copyright 1988 Microsoft
;;
;; This file contains the keyboard tables for Russia
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC BL1_LOGIC               ;;
        PUBLIC BL1_866_XLAT             ;;
        PUBLIC BL1_437_XLAT             ;;
        PUBLIC BL1_850_XLAT             ;;
        PUBLIC BL1_855_XLAT             ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
ENX_KBD             EQU   G_KB+P12_KB
                                       ;;
                                       ;;
DEBUG   EQU 0                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; BL State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
BL1_LOGIC:                              ;;
                                       ;;
   DW  LOGIC_END-$                     ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC+SWITCHABLE      ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;;
;; <CTRL>+<RIGHT SHIFT> for Russian mode
;;
;; <CTRL>+<LEFT SHIFT>  for Latin mode
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_ALT,NOT                 ;;
    ANDF EITHER_CTL                    ;;
      IFF LEFT_SHIFT                   ;;
          BEEP                         ;;
          RESET_NLS                    ;;
      ENDIFF                           ;;
      IFF RIGHT_SHIFT                  ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
     IFF RUS_MODE                      ;;
     ANDF LC_E0,NOT                    ;; Enhanced keys are not
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;; Third and Fourth shifts
     ENDIFF                            ;;
    ELSEF                              ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT              ;; only.
            XLATT THIRD_SHIFT          ;; ALT + shift
         ENDIFF                        ;;
      ELSEF                            ;; ENHANCED keyboard
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC_END:                             ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; BL Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC BL1_COMMON_XLAT                ;;
BL1_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON_XLAT_END-$             ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_F1_END-$                  ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    3                             ;; number of entries
   DB    42                            ;; scan code (Left Shift)
   FLAG  LAT_MODE                      ;; flag bit to set
   DB    54                            ;; scan code (Right Shift)
   FLAG  RUS_MODE                      ;; flag bit to set
   DB    29                            ;; scan code (Ctrl)
   FLAG  RUS_MODE                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_F1_END:                            ;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Last State
COMMON_XLAT_END:                       ;;
                                       ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 437
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL1_437_XLAT:                           ;;
                                       ;;
   DW     CP437_XLAT_END-$             ;; length of section
   DW     437                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP437_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP437_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    11                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP437_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP437_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP437_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL1_850_XLAT:                           ;;
                                       ;;
   DW     CP850_XLAT_END-$             ;; length of section
   DW     850                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP850_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP850_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP850_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 855
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL1_855_XLAT:                           ;;
                                       ;;
   DW     CP855_XLAT_END-$             ;; length of section
   DW     855                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP855_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0EFH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP855_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP855_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BDH                          ;;   
   DB    0A4H                          ;;   
   DB    0E7H                          ;;   
   DB    0C6H                          ;;   
   DB    0A8H                          ;;   
   DB    0D4H                          ;;   
   DB    0ACH                          ;;   
   DB    0F5H                          ;;   
   DB    08AH                          ;;   i
   DB    0F3H                          ;;   
   DB    0B5H                          ;;   
   DB    098H                          ;;   
CP855_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0AAH                          ;;   
   DB    0F1H                          ;;   
   DB    0EBH                          ;;   
   DB    0A0H                          ;;   
   DB    0D8H                          ;;   
   DB    0E1H                          ;;   
   DB    0D6H                          ;;   
   DB    0D0H                          ;;   
   DB    0A6H                          ;;   
   DB    0E9H                          ;;   
   DB    0F7H                          ;;   
   DB    084H                          ;;   
CP855_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    0DEH                          ;;   
   DB    0FBH                          ;;   
   DB    0E3H                          ;;   
   DB    0D2H                          ;;   
   DB    0B7H                          ;;   
   DB    0E5H                          ;;   
   DB    0EDH                          ;;   
   DB    0A2H                          ;;   
   DB    09CH                          ;;   
CP855_A_LO_K1_T4_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BEH                          ;;   
   DB    0A5H                          ;;   
   DB    0E8H                          ;;   
   DB    0C7H                          ;;   
   DB    0A9H                          ;;   
   DB    0D5H                          ;;   
   DB    0ADH                          ;;   
   DB    0F6H                          ;;   
   DB    08BH                          ;;   I
   DB    0F4H                          ;;   
   DB    0B6H                          ;;   
   DB    099H                          ;;   
CP855_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0ABH                          ;;   
   DB    0F2H                          ;;   
   DB    0ECH                          ;;   
   DB    0A1H                          ;;   
   DB    0DDH                          ;;   
   DB    0E2H                          ;;   
   DB    0D7H                          ;;   
   DB    0D1H                          ;;   
   DB    0A7H                          ;;   
   DB    0EAH                          ;;   
   DB    0F8H                          ;;   
   DB    085H                          ;;   
CP855_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    45                            ;; Scan code
   DB    52                            ;; range
   DB    0FCH                          ;;   
   DB    0E4H                          ;;   
   DB    0D3H                          ;;   
   DB    0B8H                          ;;   
   DB    0E6H                          ;;   
   DB    0EEH                          ;;   
   DB    0A3H                          ;;   
   DB    09DH                          ;;   
CP855_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    44,0E0H                       ;;   
                                       ;;
CP855_A_UP_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_UP_END:                     ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP855_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;               *********************************************              ;;
;;               *   BL Specific Translate Section for 866   *              ;;
;;               *********************************************              ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL1_866_XLAT:                           ;;
                                       ;;
   DW     CP866_XLAT_END-$             ;; length of section
   DW     866                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP866_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0FCH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP866_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0FDH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP866_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    169                           ;;   
   DB    230                           ;;   
   DB    227                           ;;   
   DB    170                           ;;   
   DB    165                           ;;   
   DB    173                           ;;   
   DB    163                           ;;   
   DB    232                           ;;   
   DB    105                           ;;   i
   DB    167                           ;;   
   DB    229                           ;;   
   DB    247                           ;;   
CP866_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    34                            ;; range
   DB    228                           ;;   
   DB    235                           ;;   
   DB    162                           ;;   
   DB    160                           ;;   
   DB    175                           ;;   
CP866_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    36                            ;; Scan code
   DB    41                            ;; range
   DB    174                           ;;   
   DB    171                           ;;   
   DB    164                           ;;   
   DB    166                           ;;   
   DB    237                           ;;   
   DB    241                           ;;   
CP866_A_LO_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    239                           ;;   
   DB    231                           ;;   
   DB    225                           ;;   
   DB    172                           ;;   
   DB    168                           ;;   
   DB    226                           ;;   
   DB    236                           ;;   
   DB    161                           ;;   
   DB    238                           ;;   
CP866_A_LO_K1_T4_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    35,0E0H                       ;;   
CP866_A_LO_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    137                           ;;   
   DB    150                           ;;   
   DB    147                           ;;   
   DB    138                           ;;   
   DB    133                           ;;   
   DB    141                           ;;   
   DB    131                           ;;   
   DB    152                           ;;   
   DB    073                           ;;   I
   DB    135                           ;;   
   DB    149                           ;;   
   DB    246                           ;;   
CP866_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    40                            ;; range
   DB    148                           ;;   
   DB    155                           ;;   
   DB    130                           ;;   
   DB    128                           ;;   
   DB    143                           ;;   
   DB    144                           ;;   
   DB    142                           ;;   
   DB    139                           ;;   
   DB    132                           ;;   
   DB    134                           ;;   
   DB    157                           ;;   
CP866_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    159                           ;;   
   DB    151                           ;;   
   DB    145                           ;;   
   DB    140                           ;;   
   DB    136                           ;;   
   DB    146                           ;;   
   DB    156                           ;;   
   DB    129                           ;;   
   DB    158                           ;;   
CP866_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    41,240                        ;;   
                                       ;;
CP866_A_UP_K1_T5_END:                  ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_UP_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP866_XLAT_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CODE     ENDS                          ;;
         END                           ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbl098.asm ===
PAGE    118,132
        TITLE   DOS - Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DOS - - NLS Support - Keyboard Definition File
;; (c) Copyright 1988 Microsoft
;;
;; This file contains the keyboard tables for Russia
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC BL2_LOGIC               ;;
        PUBLIC BL2_866_XLAT             ;;
        PUBLIC BL2_437_XLAT             ;;
        PUBLIC BL2_850_XLAT             ;;
        PUBLIC BL2_855_XLAT             ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
ENX_KBD             EQU   G_KB+P12_KB
                                       ;;
                                       ;;
DEBUG   EQU 0                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; BL2 State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
BL2_LOGIC:                             ;;
                                       ;;
   DW  LOGIC2_END-$                    ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC+SWITCHABLE      ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;; MODE CHANGE BY <RIGHT SHIFT>+<LEFT SHIFT>
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_CTL,NOT                 ;;
    ANDF EITHER_ALT,NOT                ;;
    ANDF RIGHT_SHIFT                   ;;
    ANDF LEFT_SHIFT                    ;;
       IFF RUS_MODE                    ;;
          BEEP                         ;;
          RESET_NLS                    ;;
       ELSEF                           ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
     IFF RUS_MODE                      ;;
     ANDF LC_E0,NOT                    ;; Enhanced keys are not
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;; Third and Fourth shifts
     ENDIFF                            ;;
    ELSEF                              ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT              ;; only.
            XLATT THIRD_SHIFT          ;; ALT + shift
         ENDIFF                        ;;
      ELSEF                            ;; ENHANCED keyboard
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC2_END:                            ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; BL Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC BL2_COMMON_XLAT                ;;
BL2_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON2_XLAT_END-$            ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM2_F1_END-$                 ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    2                             ;; number of entries
   DB    42                            ;; scan code
   FLAG  RUS_MODE                      ;; flag bit to set
   DB    54                            ;;
   FLAG  RUS_MODE                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM2_F1_END:                           ;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Last State
COMMON2_XLAT_END:                      ;;
                                       ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 437
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL2_437_XLAT:                           ;;
                                       ;;
   DW     CP437_XLAT_END-$             ;; length of section
   DW     437                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP437_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP437_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    11                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP437_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP437_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP437_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL2_850_XLAT:                           ;;
                                       ;;
   DW     CP850_XLAT_END-$             ;; length of section
   DW     850                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP850_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP850_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP850_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 855
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL2_855_XLAT:                           ;;
                                       ;;
   DW     CP855_XLAT_END-$             ;; length of section
   DW     855                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP855_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0EFH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP855_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP855_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BDH                          ;;   
   DB    0A4H                          ;;   
   DB    0E7H                          ;;   
   DB    0C6H                          ;;   
   DB    0A8H                          ;;   
   DB    0D4H                          ;;   
   DB    0ACH                          ;;   
   DB    0F5H                          ;;   
   DB    08AH                          ;;   i
   DB    0F3H                          ;;   
   DB    0B5H                          ;;   
   DB    098H                          ;;   
CP855_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0AAH                          ;;   
   DB    0F1H                          ;;   
   DB    0EBH                          ;;   
   DB    0A0H                          ;;   
   DB    0D8H                          ;;   
   DB    0E1H                          ;;   
   DB    0D6H                          ;;   
   DB    0D0H                          ;;   
   DB    0A6H                          ;;   
   DB    0E9H                          ;;   
   DB    0F7H                          ;;   
   DB    084H                          ;;   
CP855_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    0DEH                          ;;   
   DB    0FBH                          ;;   
   DB    0E3H                          ;;   
   DB    0D2H                          ;;   
   DB    0B7H                          ;;   
   DB    0E5H                          ;;   
   DB    0EDH                          ;;   
   DB    0A2H                          ;;   
   DB    09CH                          ;;   
CP855_A_LO_K1_T4_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BEH                          ;;   
   DB    0A5H                          ;;   
   DB    0E8H                          ;;   
   DB    0C7H                          ;;   
   DB    0A9H                          ;;   
   DB    0D5H                          ;;   
   DB    0ADH                          ;;   
   DB    0F6H                          ;;   
   DB    08BH                          ;;   I
   DB    0F4H                          ;;   
   DB    0B6H                          ;;   
   DB    099H                          ;;   
CP855_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0ABH                          ;;   
   DB    0F2H                          ;;   
   DB    0ECH                          ;;   
   DB    0A1H                          ;;   
   DB    0DDH                          ;;   
   DB    0E2H                          ;;   
   DB    0D7H                          ;;   
   DB    0D1H                          ;;   
   DB    0A7H                          ;;   
   DB    0EAH                          ;;   
   DB    0F8H                          ;;   
   DB    085H                          ;;   
CP855_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    45                            ;; Scan code
   DB    52                            ;; range
   DB    0FCH                          ;;   
   DB    0E4H                          ;;   
   DB    0D3H                          ;;   
   DB    0B8H                          ;;   
   DB    0E6H                          ;;   
   DB    0EEH                          ;;   
   DB    0A3H                          ;;   
   DB    09DH                          ;;   
CP855_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    44,0E0H                       ;;   
                                       ;;
CP855_A_UP_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_UP_END:                     ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP855_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;               *********************************************              ;;
;;               *   BL Specific Translate Section for 866   *              ;;
;;               *********************************************              ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL2_866_XLAT:                           ;;
                                       ;;
   DW     CP866_XLAT_END-$             ;; length of section
   DW     866                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP866_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0FCH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP866_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0FDH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP866_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    169                           ;;   
   DB    230                           ;;   
   DB    227                           ;;   
   DB    170                           ;;   
   DB    165                           ;;   
   DB    173                           ;;   
   DB    163                           ;;   
   DB    232                           ;;   
   DB    105                           ;;   i
   DB    167                           ;;   
   DB    229                           ;;   
   DB    247                           ;;   
CP866_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    34                            ;; range
   DB    228                           ;;   
   DB    235                           ;;   
   DB    162                           ;;   
   DB    160                           ;;   
   DB    175                           ;;   
CP866_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    36                            ;; Scan code
   DB    41                            ;; range
   DB    174                           ;;   
   DB    171                           ;;   
   DB    164                           ;;   
   DB    166                           ;;   
   DB    237                           ;;   
   DB    241                           ;;   
CP866_A_LO_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    239                           ;;   
   DB    231                           ;;   
   DB    225                           ;;   
   DB    172                           ;;   
   DB    168                           ;;   
   DB    226                           ;;   
   DB    236                           ;;   
   DB    161                           ;;   
   DB    238                           ;;   
CP866_A_LO_K1_T4_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    35,0E0H                       ;;   
CP866_A_LO_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    137                           ;;   
   DB    150                           ;;   
   DB    147                           ;;   
   DB    138                           ;;   
   DB    133                           ;;   
   DB    141                           ;;   
   DB    131                           ;;   
   DB    152                           ;;   
   DB    073                           ;;   I
   DB    135                           ;;   
   DB    149                           ;;   
   DB    246                           ;;   
CP866_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    40                            ;; range
   DB    148                           ;;   
   DB    155                           ;;   
   DB    130                           ;;   
   DB    128                           ;;   
   DB    143                           ;;   
   DB    144                           ;;   
   DB    142                           ;;   
   DB    139                           ;;   
   DB    132                           ;;   
   DB    134                           ;;   
   DB    157                           ;;   
CP866_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    159                           ;;   
   DB    151                           ;;   
   DB    145                           ;;   
   DB    140                           ;;   
   DB    136                           ;;   
   DB    146                           ;;   
   DB    156                           ;;   
   DB    129                           ;;   
   DB    158                           ;;   
CP866_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    41,240                        ;;   
                                       ;;
CP866_A_UP_K1_T5_END:                  ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_UP_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP866_XLAT_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CODE     ENDS                          ;;
         END                           ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbl099.asm ===
PAGE    118,132
        TITLE   DOS - Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DOS - - NLS Support - Keyboard Definition File
;; (c) Copyright 1988 Microsoft
;;
;; This file contains the keyboard tables for Russia
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC BL3_LOGIC               ;;
        PUBLIC BL3_866_XLAT             ;;
        PUBLIC BL3_437_XLAT             ;;
        PUBLIC BL3_850_XLAT             ;;
        PUBLIC BL3_855_XLAT             ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
ENX_KBD             EQU   G_KB+P12_KB
                                       ;;
                                       ;;
DEBUG   EQU 0                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; BL3 State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
BL3_LOGIC:                             ;;
                                       ;;
   DW  LOGIC3_END-$                    ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC+SWITCHABLE      ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;; MODE CHANGE BY <RIGHT CTRL> PRESS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_SHIFT,NOT               ;;
    ANDF EITHER_ALT,NOT                ;;
    ANDF R_CTL_SHIFT                   ;;
       IFF RUS_MODE                    ;;
          BEEP                         ;;
          RESET_NLS                    ;;
       ELSEF                           ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
     IFF RUS_MODE                      ;;
     ANDF LC_E0,NOT                    ;; Enhanced keys are not
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;; Third and Fourth shifts
     ENDIFF                            ;;
    ELSEF                              ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT              ;; only.
            XLATT THIRD_SHIFT          ;; ALT + shift
         ENDIFF                        ;;
      ELSEF                            ;; ENHANCED keyboard
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC3_END:                             ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; BL Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC BL3_COMMON_XLAT                ;;
BL3_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON3_XLAT_END-$            ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM3_F1_END-$                 ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    1                             ;; number of entries
   DB    29                            ;; scan code
   FLAG  RUS_MODE                      ;; flag bit to set
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM3_F1_END:                           ;;
                                       ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Last State
COMMON3_XLAT_END:                      ;;
                                       ;;
                                       ;;
                                       ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 437
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL3_437_XLAT:                           ;;
                                       ;;
   DW     CP437_XLAT_END-$             ;; length of section
   DW     437                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP437_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP437_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    11                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP437_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP437_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP437_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL3_850_XLAT:                           ;;
                                       ;;
   DW     CP850_XLAT_END-$             ;; length of section
   DW     850                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP850_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP850_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP850_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BL Specific Translate Section for 855
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL3_855_XLAT:                           ;;
                                       ;;
   DW     CP855_XLAT_END-$             ;; length of section
   DW     855                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP855_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0EFH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP855_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0CFH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP855_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BDH                          ;;   
   DB    0A4H                          ;;   
   DB    0E7H                          ;;   
   DB    0C6H                          ;;   
   DB    0A8H                          ;;   
   DB    0D4H                          ;;   
   DB    0ACH                          ;;   
   DB    0F5H                          ;;   
   DB    08AH                          ;;   i
   DB    0F3H                          ;;   
   DB    0B5H                          ;;   
   DB    098H                          ;;   
CP855_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0AAH                          ;;   
   DB    0F1H                          ;;   
   DB    0EBH                          ;;   
   DB    0A0H                          ;;   
   DB    0D8H                          ;;   
   DB    0E1H                          ;;   
   DB    0D6H                          ;;   
   DB    0D0H                          ;;   
   DB    0A6H                          ;;   
   DB    0E9H                          ;;   
   DB    0F7H                          ;;   
   DB    084H                          ;;   
CP855_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    0DEH                          ;;   
   DB    0FBH                          ;;   
   DB    0E3H                          ;;   
   DB    0D2H                          ;;   
   DB    0B7H                          ;;   
   DB    0E5H                          ;;   
   DB    0EDH                          ;;   
   DB    0A2H                          ;;   
   DB    09CH                          ;;   
CP855_A_LO_K1_T4_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    0BEH                          ;;   
   DB    0A5H                          ;;   
   DB    0E8H                          ;;   
   DB    0C7H                          ;;   
   DB    0A9H                          ;;   
   DB    0D5H                          ;;   
   DB    0ADH                          ;;   
   DB    0F6H                          ;;   
   DB    08BH                          ;;   I
   DB    0F4H                          ;;   
   DB    0B6H                          ;;   
   DB    099H                          ;;   
CP855_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    41                            ;; range
   DB    0ABH                          ;;   
   DB    0F2H                          ;;   
   DB    0ECH                          ;;   
   DB    0A1H                          ;;   
   DB    0DDH                          ;;   
   DB    0E2H                          ;;   
   DB    0D7H                          ;;   
   DB    0D1H                          ;;   
   DB    0A7H                          ;;   
   DB    0EAH                          ;;   
   DB    0F8H                          ;;   
   DB    085H                          ;;   
CP855_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    45                            ;; Scan code
   DB    52                            ;; range
   DB    0FCH                          ;;   
   DB    0E4H                          ;;   
   DB    0D3H                          ;;   
   DB    0B8H                          ;;   
   DB    0E6H                          ;;   
   DB    0EEH                          ;;   
   DB    0A3H                          ;;   
   DB    09DH                          ;;   
CP855_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP855_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    44,0E0H                       ;;   
                                       ;;
CP855_A_UP_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_A_K1_UP_END:                     ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP855_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;               *********************************************              ;;
;;               *   BL Specific Translate Section for 866   *              ;;
;;               *********************************************              ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BL3_866_XLAT:                           ;;
                                       ;;
   DW     CP866_XLAT_END-$             ;; length of section
   DW     866                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_K1_LO_END-$          ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    53,02EH                       ;;    .
CP866_NA_LO_K1_T1_END:                 ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_K1_LO_END:                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_NA_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    7                             ;; number of entries
   DB     3,022H                       ;;   "
   DB     4,0FCH                       ;; NUMBER sign
   DB     5,03BH                       ;;   ;
   DB     7,03AH                       ;;   :
   DB     8,03FH                       ;;   ?
   DB    43,02FH                       ;;   /
   DB    53,02CH                       ;;   ,
CP866_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    12                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    05H,0FDH                      ;; RUBLES sign 
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP866_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_TS_END:                          ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_LO_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    169                           ;;   
   DB    230                           ;;   
   DB    227                           ;;   
   DB    170                           ;;   
   DB    165                           ;;   
   DB    173                           ;;   
   DB    163                           ;;   
   DB    232                           ;;   
   DB    105                           ;;   i
   DB    167                           ;;   
   DB    229                           ;;   
   DB    247                           ;;   
CP866_A_LO_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    34                            ;; range
   DB    228                           ;;   
   DB    235                           ;;   
   DB    162                           ;;   
   DB    160                           ;;   
   DB    175                           ;;   
CP866_A_LO_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    36                            ;; Scan code
   DB    41                            ;; range
   DB    174                           ;;   
   DB    171                           ;;   
   DB    164                           ;;   
   DB    166                           ;;   
   DB    237                           ;;   
   DB    241                           ;;   
CP866_A_LO_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T4_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    239                           ;;   
   DB    231                           ;;   
   DB    225                           ;;   
   DB    172                           ;;   
   DB    168                           ;;   
   DB    226                           ;;   
   DB    236                           ;;   
   DB    161                           ;;   
   DB    238                           ;;   
CP866_A_LO_K1_T4_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_LO_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    35,0E0H                       ;;   
CP866_A_LO_K1_T5_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_A_UP_K1_T1_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    16                            ;; Scan code
   DB    27                            ;; range
   DB    137                           ;;   
   DB    150                           ;;   
   DB    147                           ;;   
   DB    138                           ;;   
   DB    133                           ;;   
   DB    141                           ;;   
   DB    131                           ;;   
   DB    152                           ;;   
   DB    073                           ;;   I
   DB    135                           ;;   
   DB    149                           ;;   
   DB    246                           ;;   
CP866_A_UP_K1_T1_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T2_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    30                            ;; Scan code
   DB    40                            ;; range
   DB    148                           ;;   
   DB    155                           ;;   
   DB    130                           ;;   
   DB    128                           ;;   
   DB    143                           ;;   
   DB    144                           ;;   
   DB    142                           ;;   
   DB    139                           ;;   
   DB    132                           ;;   
   DB    134                           ;;   
   DB    157                           ;;   
CP866_A_UP_K1_T2_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T3_END-$        ;; Size of xlat table
   DB    ASCII_ONLY                    ;; xlat options:
   DB    44                            ;; Scan code
   DB    52                            ;; range
   DB    159                           ;;   
   DB    151                           ;;   
   DB    145                           ;;   
   DB    140                           ;;   
   DB    136                           ;;   
   DB    146                           ;;   
   DB    156                           ;;   
   DB    129                           ;;   
   DB    158                           ;;   
CP866_A_UP_K1_T3_END:                  ;;
                                       ;;
                                       ;;
   DW    CP866_A_UP_K1_T5_END-$        ;; Size of xlat table
   DB    TYPE_2_TAB+ZERO_SCAN          ;; xlat options:
   DB    1                             ;; number of entries
   DB    41,240                        ;;   
                                       ;;
CP866_A_UP_K1_T5_END:                  ;;
                                       ;;
                                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_A_K1_UP_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP866_XLAT_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CODE     ENDS                          ;;
         END                           ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfbr275.asm ===
;/*                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */

;; XT section enabled
;; ************* CNS 12/18/86


	PAGE    ,132
	TITLE   MS-DOS 5.0 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MS-DOS 5.0 - NLS Support - Keyboard Defintion File
;;
;; This file contains the keyboard tables for Brazil - type 275
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;             Adapted for Brazil by Mihindu Senanayake (Microsoft) - Oct 1990
;;             Adapted for IBM Brazil by Vera Vaitekunas (Microsoft - verav) - January 92
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC           ;;
	INCLUDE POSTEQU.INC            ;;
	INCLUDE KEYBMAC.INC            ;;
				       ;;
	PUBLIC BR_LOGIC                ;;
	PUBLIC BR_437_XLAT             ;;
	PUBLIC BR_850_XLAT             ;;
				       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BR State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
BR_LOGIC:

   DW  LOGIC_END-$                     ;; length
				       ;;
   DW  0                               ;; special features
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND                ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF  EITHER_ALT,NOT                 ;;
   ANDF EITHER_CTL,NOT                 ;;
      IFF EITHER_SHIFT                 ;;
	  IFF CIRCUMFLEX                   ;;
	      RESET_NLS                    ;;
	      XLATT CIRCUMFLEX_CIRCUMFLEX  ;;
	      SET_FLAG DEAD_UPPER          ;;
	      GOTO CIRCUMFLEX_ON           ;;
	  ENDIFF                           ;;
	  IFF TILDE                 ;;
	      RESET_NLS                ;;
	      XLATT TILDE_TILDE  ;;
	      SET_FLAG DEAD_UPPER          ;;
	      GOTO TILDE_ON         ;;
	  ENDIFF                       ;;
	  IFF DIARESIS                 ;;
	      RESET_NLS                ;;
	      XLATT DIARESIS_DIARESIS  ;;
	      SET_FLAG DEAD_UPPER          ;;
	      GOTO DIARESIS_ON         ;;
	  ENDIFF                       ;;
	  SET_FLAG DEAD_UPPER          ;;
      ELSEF
	  IFF GRAVE                        ;;
	      RESET_NLS                    ;;
	      XLATT GRAVE_GRAVE            ;;
	      SET_FLAG DEAD_LOWER
	      GOTO GRAVE_ON                ;;
	  ENDIFF                           ;;
	  IFF ACUTE                 ;;
	     RESET_NLS              ;;
	     XLATT ACUTE_ACUTE      ;;
	     SET_FLAG DEAD_LOWER
	     GOTO ACUTE_ON          ;;
	  ENDIFF                    ;;
	  SET_FLAG DEAD_LOWER
      ENDIFF                           ;;
   ENDIFF                              ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:
				       ;;
   IFF ACUTE,NOT                       ;;
      GOTO DIARESIS_PROC               ;;
      ENDIFF                           ;;
				       ;;
      RESET_NLS                        ;;
ACUTE_ON:                              ;;
      IFF R_ALT_SHIFT,NOT              ;;
	 XLATT ACUTE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
	 IFF EITHER_SHIFT              ;;
	    IFF CAPS_STATE             ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF                      ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF                     ;;
	 ELSEF                         ;;
	    IFF CAPS_STATE             ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF                      ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF                     ;;
	 ENDIFF                        ;;
      ENDIFF                           ;;
				       ;;
INVALID_ACUTE:                         ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP                             ;; failed or we are ina bad shift state.
      GOTO NON_DEAD                    ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:                         ;;
				       ;;
   IFF DIARESIS,NOT                    ;;
      GOTO GRAVE_PROC                  ;;
      ENDIFF                           ;;
				       ;;
      RESET_NLS                        ;;
DIARESIS_ON:                           ;;
      IFF R_ALT_SHIFT,NOT              ;;
	 XLATT DIARESIS_SPACE          ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
	 IFF EITHER_SHIFT              ;;
	    IFF CAPS_STATE             ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF                      ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF                     ;;
	 ELSEF                         ;;
	    IFF CAPS_STATE             ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF                      ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF                     ;;
	 ENDIFF                        ;;
      ENDIFF                           ;;
				       ;;
INVALID_DIARESIS:                      ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:                            ;;
				       ;;
   IFF GRAVE,NOT                       ;;
      GOTO TILDE_PROC                  ;;
      ENDIFF                           ;;
				       ;;
      RESET_NLS                        ;;
GRAVE_ON:                              ;;
      IFF R_ALT_SHIFT,NOT              ;;
	 XLATT GRAVE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
	IFF EITHER_SHIFT               ;;
	   IFF CAPS_STATE              ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF                       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF                      ;;
	ELSEF                          ;;
	   IFF CAPS_STATE,NOT          ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF                       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF                      ;;
	ENDIFF                         ;;
      ENDIFF                           ;;
				       ;;
INVALID_GRAVE:                         ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TILDE_PROC:                            ;;
				       ;;
   IFF TILDE,NOT                       ;;
      GOTO CIRCUMFLEX_PROC             ;;
      ENDIFF                           ;;
				       ;;
      RESET_NLS                        ;;
TILDE_ON:                              ;;
      IFF R_ALT_SHIFT,NOT              ;;
	 XLATT TILDE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
	IFF EITHER_SHIFT               ;;
	   IFF CAPS_STATE              ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF                       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF                      ;;
	ELSEF                          ;;
	   IFF CAPS_STATE              ;;
	      XLATT TILDE_UPPER        ;;
	   ELSEF                       ;;
	      XLATT TILDE_LOWER        ;;
	   ENDIFF                      ;;
	ENDIFF                         ;;
      ENDIFF                           ;;
				       ;;
INVALID_TILDE:                         ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:                       ;;
				       ;;
   IFF CIRCUMFLEX,NOT                  ;;
      GOTO NON_DEAD                    ;;
      ENDIFF                           ;;
				       ;;
      RESET_NLS                        ;;
CIRCUMFLEX_ON:                         ;;
      IFF R_ALT_SHIFT,NOT              ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
	IFF EITHER_SHIFT               ;;
	   IFF CAPS_STATE              ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF                       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF                      ;;
	ELSEF                          ;;
	   IFF CAPS_STATE,NOT          ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF                       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF                      ;;
	ENDIFF                         ;;
      ENDIFF                           ;;
				       ;;
INVALID_CIRCUMFLEX:                    ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
NON_DEAD:                              ;;
				       ;;
   IFKBD G_KB+P12_KB                   ;; Avoid accidentally translating
   ANDF LC_E0                          ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC                 ;;   G keyboard
   ENDIFF                              ;;
				       ;;
   IFF  EITHER_ALT,NOT                 ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT                 ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
	  XLATT NON_ALPHA_UPPER        ;;
	  IFF CAPS_STATE               ;;
	      XLATT ALPHA_LOWER        ;;
	  ELSEF                        ;;
	      XLATT ALPHA_UPPER        ;;
	  ENDIFF                       ;;
      ELSEF                            ;;
	  XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE               ;;
	     XLATT ALPHA_UPPER         ;;
	  ELSEF                        ;;
	     XLATT ALPHA_LOWER         ;;
	  ENDIFF                       ;;
      ENDIFF                           ;;
   ELSEF                               ;;
      IFF EITHER_SHIFT,NOT             ;;
	  IFKBD XT_KB+AT_KB            ;;
	      IFF  EITHER_CTL          ;;
	      ANDF ALT_SHIFT           ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF                   ;;
	  ELSEF                        ;;
	      IFF EITHER_CTL,NOT       ;;
	      ANDF R_ALT_SHIFT         ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF                   ;;
	   ENDIFF                      ;;
      ENDIFF                           ;;
   ENDIFF                              ;;
;**************************************;;
 IFF EITHER_SHIFT,NOT                  ;;
   IFKBD XT_KB+AT_KB                   ;;
     IFF EITHER_CTL                    ;;
     ANDF ALT_SHIFT                    ;;
       XLATT ALT_CASE                  ;;
     ENDIFF                            ;;
   ENDIFF                              ;;
   IFKBD G_KB+P12_KB                   ;;
     IFF EITHER_CTL                    ;;
     ANDF ALT_SHIFT                    ;;
       IFF R_ALT_SHIFT,NOT             ;;
	 XLATT ALT_CASE                ;;
       ENDIFF                          ;;
     ENDIFF                            ;;
   ENDIFF                              ;;
 ENDIFF                                ;;
;**************************************;;
 IFKBD AT_KB+XT_KB               ;;
      IFF EITHER_CTL,NOT               ;;
	 IFF ALT_SHIFT                 ;; ALT - case
	    XLATT ALT_CASE             ;;
	 ENDIFF                        ;;
      ELSEF                            ;;
	 IFF EITHER_ALT,NOT            ;; CTRL - case
	    XLATT CTRL_CASE            ;;
	 ENDIFF                        ;;
      ENDIFF                           ;;
 ENDIFF                                ;;
				       ;;
 IFKBD G_KB+P12_KB                     ;;
      IFF EITHER_CTL,NOT               ;;
	 IFF ALT_SHIFT                 ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT          ;;
	    XLATT ALT_CASE             ;;
	 ENDIFF                        ;;
      ELSEF                            ;;
	 IFF EITHER_ALT,NOT            ;; CTRL - case
	    XLATT CTRL_CASE            ;;
	 ENDIFF                        ;;
      ENDIFF                           ;;
      IFF EITHER_CTL                   ;;
      ANDF ALT_SHIFT                   ;;
      ANDF R_ALT_SHIFT,NOT             ;;
	   XLATT ALT_CASE              ;;
      ENDIFF                           ;;
 ENDIFF                                ;;
				       ;;
 EXIT_STATE_LOGIC                      ;;
				       ;;
LOGIC_END:                             ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BR Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BR_COMMON_XLAT_275             ;;
BR_COMMON_XLAT_275:                    ;;
				       ;;
   DW    COMMON_XLAT_END-$         ;; length of section
   DW    -1                            ;; code page
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_DK_LO_K1_END-$            ;; length of state section
   DB    DEAD_LOWER                    ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
				       ;; Set Flag Table
   DW    2                             ;; number of entries
   DB    1ah                           ;; scan code     
   FLAG  ACUTE                         ;; flag bit to set
   DB    28H                           ;;    
   FLAG  TILDE                         ;;

COM_DK_LO_K1_END:                      ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_DK_UP_K1_END-$               ;; length of state section
   DB    DEAD_UPPER                    ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
				       ;; Set Flag Table
   DW    3                             ;; number of entries
   DB    28h                           ;; scan code
   FLAG  CIRCUMFLEX                    ;; flag bit to set
   DB    7                             ;;
   FLAG  DIARESIS                      ;;
   DB    1ah                           ;;
   FLAG  GRAVE                         ;;               
				       ;;
COM_DK_UP_K1_END:                      ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_GR_LO_END-$               ;; length of state section
   DB    GRAVE_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    96,0                          ;; error character = standalone accent
				       ;;
   DW    COM_GR_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    5                             ;; number of scans
   DB    18,''                        ;; scan code,ASCII - e
   DB    22,''                        ;; scan code,ASCII - u
   DB    23,''                        ;; scan code,ASCII - i
   DB    24,''                        ;; scan code,ASCII - o
   DB    30,''                        ;; scan code,ASCII - a
				       ;;
COM_GR_LO_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_GR_LO_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_GR_SP_END-$               ;; length of state section
   DB    GRAVE_SPACE                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    96,0                          ;; error character = standalone accent
				       ;;
   DW    COM_GR_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,96                         ;; STANDALONE GRAVE
				       ;;
COM_GR_SP_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_GR_SP_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Twice
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_GR_GR_END-$               ;; length of state section
   DB    GRAVE_GRAVE                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    96,0                          ;; error character = standalone accent
				       ;;
   DW    COM_GR_GR_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    54h,96                        ;; STANDALONE GRAVE     <verav>
				       ;;
COM_GR_GR_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_GR_GR_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_CI_LO_END-$               ;; length of state section
   DB    CIRCUMFLEX_LOWER              ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
				       ;;
   DW    COM_CI_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    5                             ;; number of scans
   DB    18,''                        ;; scan code,ASCII - e
   DB    22,''                        ;; scan code,ASCII - u
   DB    23,''                        ;; scan code,ASCII - i
   DB    24,''                        ;; scan code,ASCII - o
   DB    30,''                        ;; scan code,ASCII - a
				       ;;
COM_CI_LO_T1_END:                      ;;
				       ;;
   DW    0                             ;;
				       ;;
COM_CI_LO_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_CI_SP_END-$               ;; length of state section
   DB    CIRCUMFLEX_SPACE              ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
				       ;;
   DW    COM_CI_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,94                         ;; STANDALONE CIRCUMFLEX
				       ;;
COM_CI_SP_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Twice
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_CI_CI_END-$               ;; length of state section
   DB    CIRCUMFLEX_CIRCUMFLEX              ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
				       ;;
   DW    COM_CI_CI_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    7,94                          ;; STANDALONE CIRCUMFLEX
				       ;;
COM_CI_CI_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_CI_CI_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_TI_LO_K1_END-$            ;; length of state section
   DB    TILDE_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    07EH,0                        ;; error character = standalone accent
				       ;;
   DW    COM_TI_LO_K1_T1_END-$         ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    49,0A4H                       ;; scan code,ASCII - 
				       ;;
COM_TI_LO_K1_T1_END:                   ;;
				       ;;
   DW    0                             ;;
				       ;;
COM_TI_LO_K1_END:                      ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_TI_UP_K1_END-$            ;; length of state section
   DB    TILDE_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    07EH,0                        ;; error character = standalone accent
				       ;;
   DW    COM_TI_UP_K1_T1_END-$         ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    49,0A5H                       ;; scan code,ASCII - 
				       ;;
COM_TI_UP_K1_T1_END:                   ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_TI_UP_K1_END:                      ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_TI_SP_END-$               ;; length of state section
   DB    TILDE_SPACE                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    07EH,0                        ;; error character = standalone accent
				       ;;
   DW    COM_TI_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,07EH                       ;; STANDALONE TILDE
				       ;;
COM_TI_SP_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_TI_SP_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Twice
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_TI_TI_END-$               ;; length of state section
   DB    TILDE_TILDE                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    07EH,0                        ;; error character = standalone accent
				       ;;
   DW    COM_TI_TI_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    54h,07EH                      ;; STANDALONE TILDE   <verav>
				       ;;
COM_TI_TI_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_TI_TI_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_AC_LO_END-$               ;; length of state section
   DB    ACUTE_LOWER                   ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    39,0                          ;; error character = standalone accent
				       ;;
   DW    COM_AC_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    6                             ;; number of scans
   DB    18,''                        ;; scan code,ASCII - e
   DB    22,''                        ;; scan code,ASCII - u
   DB    23,''                        ;; scan code,ASCII - i
   DB    24,''                        ;; scan code,ASCII - o
   DB    30,''                        ;; scan code,ASCII - a
   DB    46,''                        ;; scan code,ASCII - c-cedilla
				       ;;
COM_AC_LO_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_AC_LO_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_AC_UP_END-$             ;; length of state section
   DB    ACUTE_UPPER                   ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    39,0                          ;; error character = standalone accent
				       ;;
   DW    COM_AC_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of scans
   DB    18,090H                       ;; scan code,ASCII - E
   DB    46,080H                       ;; C cedilla
				       ;;
COM_AC_UP_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_AC_UP_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_AC_SP_END-$               ;; length of state section
   DB    ACUTE_SPACE                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    39,0                          ;; error character = standalone accent
				       ;;
   DW    COM_AC_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                            ;; number of scans
   DB    57,39                         ;; scan code,ASCII - SPACE
				       ;;
COM_AC_SP_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_AC_SP_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Twice
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_AC_AC_END-$               ;; length of state section
   DB    ACUTE_ACUTE                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    39,0                          ;; error character = standalone accent
				       ;;
   DW    COM_AC_AC_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    1ah,39                        ;; scan code,ASCII - ACUTE 
				       ;;
COM_AC_AC_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_AC_AC_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_DI_LO_END-$               ;; length of state section
   DB    DIARESIS_LOWER                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    '',0                         ;; error character = standalone accent
				       ;;
   DW    COM_DI_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    6                             ;; number of scans
   DB    18,089H                       ;;    e diaeresis
   DB    21,098H                       ;;    y diaeresis
   DB    22,081H                       ;;    u diaeresis
   DB    23,08BH                       ;;    i diaeresis
   DB    24,094H                       ;;    o diaeresis
   DB    30,084H                       ;;    a diaeresis
				       ;;
COM_DI_LO_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_DI_LO_END:                         ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_DI_UP_END-$               ;; length of state section
   DB    DIARESIS_UPPER                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; error character = standalone accent
				       ;;
   DW    COM_DI_UP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    3                             ;; number of scans
   DB    22,09AH                       ;;    U diaeresis
   DB    24,099H                       ;;    O diaeresis
   DB    30,08EH                       ;;    A diaeresis
				       ;;
COM_DI_UP_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_DI_UP_END:                         ;; length of state section

				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
;   DW    COM_DI_SP_END-$               ;; length of state section
;   DB    DIARESIS_SPACE                ;; State ID
;   DW    ANY_KB                        ;; Keyboard Type
;   DB    '',0                         ;; error character = standalone accent
				       ;;
;   DW    COM_DI_SP_T1_END-$            ;; Size of xlat table
;   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;   DB    1                             ;; number of scans
;   DB    7,'"'                         ;; scan code,ASCII - SPACE
				       ;;
;COM_DI_SP_T1_END:                      ;;
				       ;;
;   DW    0                             ;; Size of xlat table - null table
				       ;;
;COM_DI_SP_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Twice
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_DI_DI_END-$               ;; length of state section
   DB    DIARESIS_DIARESIS             ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    '',0                         ;; error character = standalone accent
				       ;;
   DW    COM_DI_DI_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    1ah,''     ;; scan code,ASCII - SPACE      <verav>
				       ;;
COM_DI_DI_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_DI_DI_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha lower case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_ALC_END-$                 ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; error character - buffer entry
				       ;;
   DW    COM_ALC_T1_END-$              ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   db    27h,''                       ;; cedilha
COM_ALC_T1_END:                        ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_ALC_END:                           ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_AUC_END-$                 ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; error character - buffer entry
				       ;;
   DW    COM_AUC_T1_END-$              ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   db    27h,80h                       ;; cedilha
COM_AUC_T1_END:                        ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_AUC_END:                           ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha lower case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_NALC_END-$                ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; error character - buffer entry
				       ;;
   DW    COM_NALC_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    7                             ;; number of scans
   DB    29h,27h                       ;; apostrofe
   db    35h,';'                       ;; ponto e virgula
   db    73h,'/'                       ;; barra
   db    7eh,'.'                       ;; (decimal point)
   db    1bh,5bh                       ;; abre colchete
   db    2bh,5dh                       ;; fecha colchete
   db    53h,','                       ;; decimal comma
COM_NALC_T1_END:                       ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_NALC_END:                          ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: NON-Alpha UPPER case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    COM_NAUC_END-$                ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; error character - buffer entry
				       ;;
   DW    COM_NAUC_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    7                             ;; number of scans
   DB    29h,22h                       ;; ASPAS
   db    35h,3AH                       ;; DOIS PONTOS
   db    73h,3FH                       ;; INTERROGACAO
   db    7eh,'.'                       ;; (decimal point)
   db    1bh,7bh                       ;; abre chaves
   db    2bh,7dh                       ;; fecha chaves
   db    53h,','                       ;; virgula no teclado numerico
COM_NAUC_T1_END:                       ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
COM_NAUC_END:                          ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_THIRD_K1_END-$            ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_THIRD_K1_T1_END-$         ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    3                             ;; number of entries
   DB    16,'/'                         ; AltGr + Q = slash
   DB    17,'?'                         ; AltGr + W = question mark
   DB    18,0f8h                        ; AltGr + E = degree sign
COM_THIRD_K1_T1_END:                   ;;
                                       ;;
   DW    0                             ;; Last xlat table
COM_THIRD_K1_END:                      ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
   DW    0                             ;; Last State
COMMON_XLAT_END:                       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BR Specific Translate Section for 437
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BR_437_XLAT                    ;;
BR_437_XLAT:                           ;;
				       ;;
   DW     CP437_XLAT_END-$             ;; length of section
   DW     437                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW     0                            ;; LAST STATE
				       ;;
CP437_XLAT_END:                        ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BR Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC BR_850_XLAT                    ;;
BR_850_XLAT:                           ;;
				       ;;
   DW     CP850_XLAT_END-$             ;; length of section
   DW     850                          ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Alt Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_ALT_K1_END-$               ;; length of state section
   DB    ALT_CASE                      ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; error character = standalone accent
				       ;;
   DW    CP850_ALT_K1_T1_END-$         ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
; Atencao! esta tecla esta apenas programada para permitir
; a utilizacao do "?"
   DB    1                             ;; number of scans      
   DB    2,'?'                         ;; scan code for '!', question mark
CP850_ALT_K1_T1_END:                   ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
CP850_ALT_K1_END:                      ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_THIRD_K1_END-$               ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
				       ;;
   DW    CP850_THIRD_K1_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    10                            ;; number of entries
;   DB    1ah,0F9H                      ;; scan code, diaresis   <verav>
   db    2,0fbh                        ; exp 1       
   db    3,0fdh                        ; exp 2            
   db    4,0fch                        ; exp 3       
   db    5,09ch                        ; libra
   db    6,0bdh                        ; cent
   db    7,0aah                        ; not
   db    1bh,0a6h                      ; primeira
   db    2bh,0a7h                      ; primeiro
   db    73h,0f8h                      ; grau
   db    0dh,0f5h
CP850_THIRD_K1_T1_END:                 ;;
				       ;;
   DW    0                             ;; Last xlat table
CP850_THIRD_K1_END:                         ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_AC_LO_END-$             ;; length of state section
   DB    ACUTE_LOWER                   ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    39,0                          ;; error character = standalone accent
				       ;;
   DW    CP850_AC_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    21,0ECH                       ;; y acute
				       ;;
CP850_AC_LO_T1_END:                    ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:                       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_AC_UP_END-$             ;; length of state section
   DB    ACUTE_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    39,0                          ;; error character = standalone accent
				       ;;
   DW    CP850_AC_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    5                             ;; number of scans
   DB    21,0EDH                       ;;    Y acute
   DB    22,0E9H                       ;;    U acute
   DB    23,0D6H                       ;;    I acute
   DB    24,0E0H                       ;;    O acute
   DB    30,0B5H                       ;;    A acute
				       ;;
CP850_AC_UP_T1_END:                    ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
CP850_AC_UP_END:                       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_DI_LO_END-$             ;; length of state section
   DB    DIARESIS_LOWER                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    '"',0			                      ;; error character = standalone accent
				       ;;
   DW    CP850_DI_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    0                             ;; number of scans
				       ;;
CP850_DI_LO_T1_END:                    ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
CP850_DI_LO_END:                       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_DI_UP_END-$             ;; length of state section
   DB    DIARESIS_UPPER                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    '"',0                         ;; error character = standalone accent
				       ;;
   DW    CP850_DI_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of scans
   DB    18,0D3H                       ;;    E diaeresis
   DB    23,0D8H                       ;;    I diaeresis
				       ;;
CP850_DI_UP_T1_END:                    ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
CP850_DI_UP_END:                       ;; length of state section
				       ;;
;;;   Esta' Certo?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    cp850_DI_SP_END-$               ;; length of state section
   DB    DIARESIS_SPACE                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    '',0                         ;; error character = standalone accent
				       ;;
   DW    cp850_DI_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    7,''                         ;; scan code,ASCII - SPACE
				       ;;
Cp850_DI_SP_T1_END:                      ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
cp850_DI_SP_END:                       ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_GR_UP_END-$             ;; length of state section
   DB    GRAVE_UPPER                   ;; State ID
   DW    ANY_KB             ;; Keyboard Type
   DB    96,0                          ;; error character = standalone accent
				       ;;
   DW    CP850_GR_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    5                             ;; number of scans
   DB    30,0B7H                       ;;    A grave
   DB    18,0D4H                       ;;    E grave
   DB    23,0DEH                       ;;    I grave
   DB    24,0E3H                       ;;    O grave
   DB    22,0EBH                       ;;    U grave
CP850_GR_UP_T1_END:                    ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
CP850_GR_UP_END:                       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Tilde Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW    CP850_TI_LO_END-$               ;; length of state section
    DB    TILDE_LOWER                   ;; State ID
    DW    ANY_KB             ;; Keyboard Type
    DB    07EH,0                        ;; error character = standalone accent
					;;
    DW    CP850_TI_LO_T1_END-$            ;; Size of xlat table
    DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
    DB    2                             ;; number of scans
    DB    30,0C6H                       ;; scan code,ASCII - a tilde
    DB    24,0E4H                       ;; scan code,ASCII - o tilde
					;;
 CP850_TI_LO_T1_END:                      ;;
					;;
    DW    0                             ;;
					;;
 CP850_TI_LO_END:                         ;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
    DW    CP850_TI_UP_END-$            ;; length of state section
    DB    TILDE_UPPER                  ;; State ID
    DW    ANY_KB                       ;; Keyboard Type
    DB    07eH,0                       ;; error character = standalone accent
				       ;;
    DW    CP850_TI_UP_T1_END-$          ;; Size of xlat table
    DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
    DB    2                             ;; number of scans
    DB    30,0C7H                       ;; scan code,ASCII - A tilde
    DB    24,0E5H                       ;; scan code,ASCII - O tilde
					;;
 CP850_TI_UP_T1_END:                    ;;
					;;
    DW    0                             ;; Size of xlat table - null table
					;;
 CP850_TI_UP_END:                         ;; length of state section
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    CP850_CI_UP_END-$             ;; length of state section
   DB    CIRCUMFLEX_UPPER              ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
				       ;;
   DW    CP850_CI_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    5                             ;; number of scans
   DB    30,0B6H                       ;;    A circumflex
   DB    18,0D2H                       ;;    E circumflex
   DB    23,0D7H                       ;;    I circumflex
   DB    24,0E2H                       ;;    O circumflex
   DB    22,0EAH                       ;;    U circumflex
				       ;;
CP850_CI_UP_T1_END:                    ;;
				       ;;
   DW    0                             ;; Size of xlat table - null table
				       ;;
CP850_CI_UP_END:                       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW    0                             ;; LAST STATE
				       ;;
CP850_XLAT_END:                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CODE     ENDS                          ;;
	 END                           ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfcf.asm ===
;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

	PAGE	,132
	TITLE	PC DOS 3.3 KEYBOARD.SYS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - KEYBOARD.SYS
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard table for Canadian French
;;
;; Linkage Instructions:
;;    Refer to KDF.ASM
;;
;; Author:     T.T. CHEN  & BILL DEVLIN- IBM Canada Laboratory - July 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC CF_LOGIC 	       ;;
	PUBLIC CF_863_XLAT	       ;;
	PUBLIC CF_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a liner search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CF State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CF_LOGIC:			       ;;
				       ;;
   DW  LOGIC_END-$		       ;; length
				       ;;
   DW  JR_HOT_KEY_1_2		     ;; special features
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
      IFF CIRCUMFLEX		       ;;
	  RESET_NLS		       ;;
	  XLATT CIRCUMFLEX_CIRCUMFLEX  ;;
	  GOTO CIRCUMFLEX_ON	       ;;
      ENDIFF			       ;;
      IFF GRAVE 		       ;;
	  RESET_NLS		       ;;
	  XLATT GRAVE_GRAVE	       ;;
	  GOTO GRAVE_ON 	       ;;
      ENDIFF			       ;;
      IFF EITHER_SHIFT		       ;;
	  IFF DIARESIS		       ;;
	      RESET_NLS 	       ;;
	      XLATT DIARESIS_DIARESIS  ;;
	      GOTO DIARESIS_ON	       ;;
	  ENDIFF		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF			       ;;
	  IFF CEDILLA		       ;;
	      RESET_NLS 	       ;;
	      XLATT CEDILLA_CEDILLA    ;;
	      GOTO CEDILLA_ON	       ;;
	  ENDIFF		       ;;
	  SET_FLAG DEAD_LOWER	       ;;
      ENDIFF			       ;;
   ELSEF			       ;;
      IFF  R_ALT_SHIFT,NOT	       ;;
      ANDF ALT_SHIFT		       ;;
	 IFF  EITHER_SHIFT	       ;; Third shift is activated by ALT_GR
				       ;; OR ALT + SHIFT.
	     IFF ACUTE		       ;;
		RESET_NLS	       ;;
		XLATT ACUTE_ACUTE      ;;
		GOTO ACUTE_ON	       ;;
	     ENDIFF		       ;;
	     SET_FLAG DEAD_THIRD       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF R_ALT_SHIFT	       ;;
;;;**************************************
;;;	       BIOS sets ALT_SHIFT when R_ALT_SHIFT is pressed.
;;;	       We must suppress this to detect both ALT keys simultaneously.
;;;	     ANDF ALT_SHIFT,NOT        ;;
;;;**************************************
	 ANDF EITHER_SHIFT,NOT	       ;;
	     IFF ACUTE		       ;;
		 RESET_NLS	       ;;
		 XLATT ACUTE_ACUTE     ;;
		 GOTO ACUTE_ON	       ;;
	     ENDIFF		       ;;
	     SET_FLAG DEAD_THIRD       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
   ENDIFF			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
ACUTE_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
				       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      EXIT_INT_9		       ;; Either is invalid so BEEP.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
GRAVE_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_UPPER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_LOWER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
				       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      EXIT_INT_9		       ;; Either is invalid so BEEP.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
DIARESIS_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
				       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      EXIT_INT_9		       ;; Either is invalid so BEEP.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO CEDILLA_PROC 	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
CIRCUMFLEX_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
				       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      EXIT_INT_9		       ;; Either is invalid so BEEP.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CEDILLA ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CEDILLA_PROC:			       ;;
				       ;;
   IFF CEDILLA,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
CEDILLA_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CEDILLA_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CEDILLA_LOWER      ;;
	   ELSEF		       ;;
	      XLATT CEDILLA_UPPER      ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CEDILLA_UPPER      ;;
	   ELSEF		       ;;
	      XLATT CEDILLA_LOWER      ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CEDILLA:		       ;;
				       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      EXIT_INT_9		       ;; Either is invalid so BEEP.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
NON_DEAD:			       ;;
   IFKBD G_KB+P12_KB		       ;;
   ANDF LC_E0			       ;;
      EXIT_STATE_LOGIC		       ;;
   ENDIFF			       ;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT		       ;; keys are affected by CAPS LOCK.
      GOTO NO_THIRD		       ;;
      ENDIFF			       ;;
				       ;;
      IFF  R_ALT_SHIFT,NOT	       ;; Third shift is activated by ALT_GR
      ANDF ALT_SHIFT		       ;; OR ALT + SHIFT.
	 IFF EITHER_SHIFT	       ;;
	     XLATT THIRD_SHIFT	       ;;
	     IFF SCAN_MATCH,NOT        ;;
		EXIT_INT_9	       ;;
	     ENDIFF		       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF R_ALT_SHIFT	       ;;
;;;**************************************
;;;	      BIOS sets ALT_SHIFT when R_ALT_SHIFT is pressed.
;;;	      We must suppress this to detect both ALT keys simultaneously.
;;;	 ANDF ALT_SHIFT,NOT	       ;;
;;;**************************************
	 ANDF EITHER_SHIFT,NOT	       ;;
	     XLATT THIRD_SHIFT	       ;;
	     IFF SCAN_MATCH,NOT        ;;
		EXIT_INT_9	       ;;
	     ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
      EXIT_STATE_LOGIC		       ;;
				       ;;
				       ;;
NO_THIRD:			       ;; Lower and upper case.  Alphabetic
				       ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT		       ;; Numeric keys are not.
	  XLATT NON_ALPHA_UPPER        ;;
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
	  XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
	  ENDIFF		       ;;
      ENDIFF			       ;;
				       ;;
      EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CF Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC CF_COMMON_XLAT		       ;;
CF_COMMON_XLAT: 		       ;;
				       ;;
   DW	   COMMON_XLAT_END-$	       ;; length of Common Tranlate Section
   DW	   -1			       ;; code page
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD: All
;; TABLE TYPE: Set Dead Key Flag
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 COM_DE_LO_END-$	       ;;
				       ;;  label format:
				       ;;    codepage_state_n_END
				       ;;	codepage = COMmon
				       ;;		   codepage1,
				       ;;		   codepage2.
				       ;;	state refers to
				       ;;	alpha, case, and dead:
				       ;;	 DE_LO:  DEAD_LOWER
				       ;;	 DE_UP:  DEAD_UPPER
				       ;;	 DE_TH:  DEAD_THIRD
				       ;;	 AL_LO:  ALPHA_LOWER
				       ;;	 AL_UP:  ALPHA_UPPER
				       ;;	 NA_LO:  NON_ALPHA_LOWER
				       ;;	 NA_UP:  NON_ALPHA_UPPER
				       ;;	 NA_TH:  THIRD_SHIFT
				       ;;	 AC_LO:  ACUTE_LOWER
				       ;;	 AC_UP:  ACUTE_UPPER
				       ;;	 AC_SP:  ACUTE_SPACE
				       ;;	 AC_AC:  ACUTE_ACUTE
				       ;;	 GR_LO:  GRAVE_LOWER
				       ;;	 GR_UP:  GRAVE_UPPER
				       ;;	 GR_SP:  GRAVE_SPACE
				       ;;	 GR_GR:  GRAVE_GRAVE
				       ;;	 DI_LO:  DIARESIS_LOWER
				       ;;	 DI_UP:  DIARESIS_UPPER
				       ;;	 DI_SP:  DIARESIS_SPACE
				       ;;	 DI_DI:  DIARESIS_DIARESIS
				       ;;	 CI_LO:  CIRCUMFLEX_LOWER
				       ;;	 CI_UP:  CIRCUMFLEX_UPPER
				       ;;	 CI_SP:  CIRCUMFLEX_SPACE
				       ;;	 CI_CI:  CIRCUMFLEX_CIRCUMFLEX
				       ;;	 CE_LO:  CEDILLA_LOWER
				       ;;	 CE_UP:  CEDILLA_UPPER
				       ;;	 CE_SP:  CEDILLA_SPACE
				       ;;	 CE_CE:  CEDILLA_CEDILLA
				       ;;
				       ;;	 n = 1,2,... to distinguish
				       ;;	     for different KB
   DB	 DEAD_LOWER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 3			       ;; number of dead keys
   DB	 40			       ;; scan code
   FLAG  GRAVE			       ;; flag bit assignment
   DB	 26			       ;;
   FLAG  CIRCUMFLEX		       ;;
   DB	 27			       ;;
   FLAG  CEDILLA		       ;;
COM_DE_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD: ALL
;; TABLE TYPE: Set Dead Key Flag
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 COM_DE_UP_END-$	       ;;
   DB	 DEAD_UPPER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 3			       ;; number of dead keys
   DB	 40			       ;; scan code
   FLAG  GRAVE			       ;; flag bit assignment
   DB	 26			       ;;
   FLAG  CIRCUMFLEX		       ;;
   DB	 27			       ;;
   FLAG  DIARESIS		       ;;
COM_DE_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD: All
;; TABLE TYPE: Set Dead Key Flag
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 COM_DE_TH_END-$	       ;;
   DB	 DEAD_THIRD		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of dead keys
   DB	 53			       ;; scan code
   FLAG  ACUTE			       ;; flag bit assignment
COM_DE_TH_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; Length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_000400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 53,''                        ;;
CF_000400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;;
   DB	 ALPHA_UPPER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_002400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 53,''                        ;;
CF_002400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha lower Case
;; KEYBOARD: G_KB, P_KB, P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_1_END-$	       ;; Length of state section
   DB	 NON_ALPHA_LOWER	       ;;
   DW	 G_KB+P_KB+P12_KB	       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_004300-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 41,'#'                        ;;
   DB	 43,'<'                        ;;
   DB	 86,''                        ;;
CF_004300:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha lower Case
;; KEYBOARD: XT_KB, AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_2_END-$	       ;; Length of state section
   DB	 NON_ALPHA_LOWER	       ;;
   DW	 XT_KB+AT_KB		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_004400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 41,'<'                        ;;
   DB	 43,'\'                        ;;
CF_004400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table : null
				       ;;
COM_NA_LO_2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha lower Case
;; KEYBOARD: JR_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_3_END-$	       ;; Length of state section
   DB	 NON_ALPHA_LOWER	       ;;
   DW	 JR_KB			       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_004401-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 51,','                        ;;
CF_004401:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table : null
				       ;;
COM_NA_LO_3_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Upper Case
;; KEYBOARD: G_KB, P_KB, P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_1_END-$	       ;; Length of state section
   DB	 NON_ALPHA_UPPER	       ;;
   DW	 G_KB+P_KB+P12_KB	       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_005300-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 8			       ;; number of scans
   DB	 3,'"'                         ;;
   DB	 4,'/'                         ;;
   DB	 7,'?'                         ;;
   DB	 41,'|'                        ;;
   DB	 43,'>'                        ;;
   DB	 51,27H 		       ;;    single quote
   DB	 52,'.'                        ;;
   DB	 86,''                        ;;
CF_005300:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Upper Case
;; KEYBOARD: XT_KB+AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_2_END-$	       ;; Length of state section
   DB	 NON_ALPHA_UPPER	       ;;
   DW	 XT_KB+AT_KB		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_005400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 3,'"'                         ;;
   DB	 4,'/'                         ;;
   DB	 7,'?'                         ;;
   DB	 41,'>'                        ;;
   DB	 43,'|'                        ;;
   DB	 51,27H 		       ;;    single quote
   DB	 52,'.'                        ;;    period
CF_005400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table : null
				       ;;
COM_NA_UP_2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Upper Case
;; KEYBOARD: JR_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_3_END-$	       ;; Length of state section
   DB	 NON_ALPHA_UPPER	       ;;
   DW	 JR_KB			       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_005100-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;;
   DB	 3,'"'                         ;;
   DB	 4,'/'                         ;;
   DB	 7,'?'                         ;;
   DB	 51,27H 		       ;;    single quote
   DB	 52,02EH		       ;;    period
CF_005100:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table : null
				       ;;
				       ;;
COM_NA_UP_3_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Third Case
;; KEYBOARD: G_KB, P_KB, P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_TH_1_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 G_KB+P_KB+P12_KB	       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_007760-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 15			       ;; number of entries
   DB	 2,''                         ;;
   DB	 3,'@'                         ;;
   DB	 4,''                         ;;
   DB	 7,''                         ;;
   DB	 9,''                         ;;
   DB	 11,''                        ;;
   DB	 12,''                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 39,'~'                        ;;
   DB	 40,'{'                        ;;
   DB	 41,'\'                        ;;
   DB	 43,'}'                        ;;

; these are not supported in Enhanced keyboard (p12).
;   DB	 47,''                        ;;
;   DB	 48,''                        ;;
;   DB	 49,''                        ;;

   DB	 50,''                        ;;
   DB	 86,''                        ;;
CF_007760:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_TH_1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Third Case
;; KEYBOARD: XT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_TH_2_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 XT_KB			       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_006500-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 17			       ;; number of scans
   DB	 2,''                         ;;
   DB	 3,'@'                         ;;
   DB	 4,''                         ;;
   DB	 7,''                         ;;
   DB	 9,''                         ;;
   DB	 11,''                        ;;
   DB	 12,''                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 39,'~'                        ;;
   DB	 40,'{'                        ;;
   DB	 41,'}'                        ;;
   DB	 43,'#'                        ;;
   DB	 47,''                        ;;
   DB	 48,''                        ;;
   DB	 49,''                        ;;
   DB	 50,''                        ;;
CF_006500:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_TH_2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Third Case
;; KEYBOARD: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_TH_3_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 AT_KB			       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_006300-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 17			       ;; number of scans
   DB	 2,''                         ;;
   DB	 3,'@'                         ;;
   DB	 4,''                         ;;
   DB	 7,''                         ;;
   DB	 9,''                         ;;
   DB	 11,''                        ;;
   DB	 12,''                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 38,'~'                        ;;
   DB	 39,'{'                        ;;
   DB	 40,'}'                        ;;
   DB	 43,'#'                        ;;
   DB	 47,''                        ;;
   DB	 48,''                        ;;
   DB	 49,''                        ;;
   DB	 50,''                        ;;
CF_006300:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_TH_3_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Third Case
;; KEYBOARD: PCJR
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CF_COM_NA_TH_4_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 JR_KB			       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_007100-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 21			       ;;
   DB	 2,''                         ;;
   DB	 3,'@'                         ;;
   DB	 4,''                         ;;
   DB	 7,''                         ;;
   DB	 9,''                         ;;
   DB	 11,''                        ;;
   DB	 16,''                        ;;
   DB	 17,''                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 30,'<'                        ;;
   DB	 31,'>'                        ;;
   DB	 38,'~'                        ;;
   DB	 39,'{'                        ;;
   DB	 40,'}'                        ;;
   DB	 44,'\'                        ;;
   DB	 45,'#'                        ;;
   DB	 46,'|'                        ;;
   DB	 47,''                        ;;
   DB	 48,''                        ;;
   DB	 49,''                        ;;
CF_007100:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CF_COM_NA_TH_4_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_LO_END-$	       ;; Length of state section
   DB	 ACUTE_LOWER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_001100-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 18,''                        ;;
   DB	 24,''                        ;;
   DB	 22,''                        ;;
CF_001100:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_UP_END-$	       ;; Length of state section
   DB	 ACUTE_UPPER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_003100-$			;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 18,''                        ;;
CF_003100:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_LO_END-$	       ;; Length of state section
   DB	 GRAVE_LOWER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 '`',0                        ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_001200-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 30,''                        ;;
   DB	 18,''                        ;;
   DB	 22,''                        ;;
CF_001200:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave + Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_SP_END-$	       ;; Length of state section
   DB	 GRAVE_SPACE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 '`',0                         ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_004500-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,'`'                        ;;
CF_004500:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_SP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave + Grave
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_GR_END-$	       ;; Length of state section
   DB	 GRAVE_GRAVE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 '`',0                         ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_004501-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 40,'`'                        ;;
CF_004501:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_GR_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_LO_END-$	       ;; Length of state section
   DB	 DIARESIS_LOWER 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_001400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 18,''                        ;;
   DB	 23,''                        ;;
   DB	 22,''                        ;;
CF_001400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; Length of state section
   DB	 CIRCUMFLEX_LOWER	       ;;
   DW	 ANY_KB 		       ;;
   DB	 '^',0                         ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_001300-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,''                        ;;
   DB	 18,''                        ;;
   DB	 23,''                        ;;
   DB	 24,''                        ;;
   DB	 22,''                        ;;
CF_001300:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex + Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; Length of state section
   DB	 CIRCUMFLEX_SPACE	       ;;
   DW	 ANY_KB 		       ;;
   DB	 '^',0                         ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_004555-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,'^'                        ;;
CF_004555:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex + Circumflex
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_CI_END-$	       ;; Length of state section
   DB	 CIRCUMFLEX_CIRCUMFLEX	       ;;
   DW	 ANY_KB 		       ;;
   DB	 '^',0                         ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_004551-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 26,'^'                        ;;
CF_004551:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_CI_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_UP_END-$	       ;; Length of state section
   DB	 DIARESIS_UPPER 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_003300-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 22,''                        ;;
CF_003300:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Cedilla Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CE_LO_END-$	       ;; Length of state section
   DB	 CEDILLA_LOWER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_001500-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 46,''                        ;;
CF_001500:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CE_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Cedilla Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CE_UP_END-$	       ;; Length of state section
   DB	 CEDILLA_UPPER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_003400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 46,''                        ;;
CF_003400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CE_UP_END:			       ;;
				       ;;
   DW	 0			       ;; Last State
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMON_XLAT_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CF 863 Translate Section
;; This section contains translations for the UPPER 128 characters
;; of Code Page 863.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC CF_863_XLAT		       ;;
CF_863_XLAT:			       ;;
				       ;;
   DW	   CP863_XLAT_END-$	       ;; length of 863 Tranlate Section
   DW	   863			       ;; code page id
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Non-alpha Third Case
;; KEYBOARD: G_B, P_KB, P12_KB
;;	     XT_KB, AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_NA_TH_1_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 G_KB+P_KB+P12_KB+XT_KB+AT_KB  ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_106300-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 8			       ;; number of scan
   DB	 5,''                         ;;
   DB	 6,98H			       ;;    international currency symbol
   DB	 8,0A0H 		       ;;    vertical line broken
   DB	 10,0A6H		       ;;    superscript 3
   DB	 13,0ADH		       ;;    3 quarters
   DB	 24,08FH		       ;;    section
   DB	 25,086H		       ;;    paragraph
   DB	 51,0A7H		       ;;    overscore
CF_106300:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_NA_TH_1_END:		       ;; Length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Non-alpha Third Case
;; KEYBOARD: JR_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_NA_TH_2_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 JR_KB			       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_106600-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 8			       ;; number of scan
   DB	 5,''                         ;;
   DB	 6,98H			       ;;    international currency symbol
   DB	 8,0A0H 		       ;;    vertical line broken
   DB	 12,0A6H		       ;;    superscript 3
   DB	 18,0ADH		       ;;    3 quarters
   DB	 24,08FH		       ;;    section
   DB	 25,086H		       ;;    paragraph
   DB	 51,0A7H		       ;;    overscore
CF_106600:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_NA_TH_2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Acute  INPUT: Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_AC_SP_END-$	       ;; Length of state section
   DB	 ACUTE_SPACE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0A1H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104500-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0A1H		       ;;   acute
CF_104500:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_AC_SP_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Acute  INPUT: Acute
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_AC_AC_END-$	       ;; Length of state section
   DB	 ACUTE_ACUTE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0A1H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104505-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 53,0A1H		       ;;   acute
CF_104505:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_AC_AC_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Grave Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_GR_UP_END-$	       ;; Length of state section
   DB	 GRAVE_UPPER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104700-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 30,8EH 		       ;;    A grave
   DB	 18,91H 		       ;;    E grave
   DB	 22,9DH 		       ;;    U grave
CF_104700:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_GR_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Diaresis Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_DI_UP_END-$	       ;; Length of state section
   DB	 DIARESIS_UPPER 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0A4H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104800-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 18,94H 		       ;;    E diaeresis
   DB	 23,95H 		       ;;    I diaeresis
CF_104800:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_DI_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Diaresis  INPUT: Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_DI_SP_END-$	       ;; Length of state section
   DB	 DIARESIS_SPACE 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0A4H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104550-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0A4H		       ;;   diaeresis
CF_104550:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_DI_SP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Diaresis  INPUT: Diaresis
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_DI_DI_END-$	       ;; Length of state section
   DB	 DIARESIS_DIARESIS	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0A4H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104551-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 27,0A4H		       ;;   diaeresis
CF_104551:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_DI_DI_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Circumflex Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_CI_UP_END-$	       ;; Length of state section
   DB	 CIRCUMFLEX_UPPER	       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104750-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,84H 		       ;;    A circumflex
   DB	 18,92H 		       ;;    E circumflex
   DB	 23,0A8H		       ;;    I circumflex
   DB	 24,99H 		       ;;    O circumflex
   DB	 22,9EH 		       ;;    U circumflex
CF_104750:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_CI_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Cedilla  INPUT: Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_CE_SP_END-$	       ;; Length of state section
   DB	 CEDILLA_SPACE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0A5H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104600-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0A5H		       ;;   cedilla
CF_104600:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_CE_SP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 863
;; STATE: Cedilla  INPUT: Cedilla
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP863_CE_CE_END-$	       ;; Length of state section
   DB	 CEDILLA_CEDILLA	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0A5H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_104601-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 27,0A5H		       ;;   cedilla
CF_104601:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP863_CE_CE_END:		       ;;
				       ;;
				       ;;
   DW	 0			       ;; Last State
CP863_XLAT_END: 		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CF 850 Translate Section
;; This section contains translations for the UPPER 128 characters
;; of Code Page 850.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC CF_850_XLAT		       ;;
CF_850_XLAT:			       ;;
				       ;;
   DW	   CP850_XLAT_END-$	       ;; length of 850 Tranlate Section
   DW	   850			       ;; code page id
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-alpha Third Case
;; KEYBOARD: G_KB, P_KB, P12_KB
;;	     XT_KB, AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_TH_1_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 G_KB+P_KB+P12_KB+XT_KB+AT_KB  ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_206300-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 8			       ;; number of scan
   DB	 5,0BDH 		       ;;    cent
   DB	 6,0CFH 		       ;;    international currency symbol
   DB	 8,0DDH 		       ;;    vertical line broken
   DB	 10,0FCH		       ;;    superscript 3
   DB	 13,0F3H		       ;;    3 quarters
   DB	 24,0F5H		       ;;    section
   DB	 25,0F4H		       ;;    paragraph
   DB	 51,0EEH		       ;;    overscore
CF_206300:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_TH_1_END:		       ;; Length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-alpha Third Case
;; KEYBOARD: JR_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_TH_2_END-$	       ;; Length of state section
   DB	 THIRD_SHIFT		       ;;
   DW	 JR_KB			       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_206600-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 8			       ;; number of scan
   DB	 5,0BDH 		       ;;    cent
   DB	 6,0CFH 		       ;;    international currency symbol
   DB	 8,0DDH 		       ;;    vertical line broken
   DB	 12,0FCH		       ;;    superscript 3
   DB	 18,0F3H		       ;;    3 quarters
   DB	 24,0F5H		       ;;    section
   DB	 25,0F4H		       ;;    paragraph
   DB	 51,0EEH		       ;;    overscore
CF_206600:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_TH_2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_LO_END-$	       ;; Length of state section
   DB	 ACUTE_LOWER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0EFH,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_201100-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 30,''                        ;;
   DB	 23,''                        ;;
   DB	 21,0ECH		       ;; y acute
CF_201100:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_UP_END-$	       ;; Length of state section
   DB	 ACUTE_UPPER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0EFH,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_203100-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,0B5H		       ;;    A acute
   DB	 23,0D6H		       ;;    I acute
   DB	 24,0E0H		       ;;    O acute
   DB	 22,0E9H		       ;;    U acute
   DB	 21,0EDH		       ;;    Y acute
CF_203100:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute  INPUT: Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_SP_END-$	       ;; Length of state section
   DB	 ACUTE_SPACE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0EFH,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_204500-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0EFH		       ;;   acute
CF_204500:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_SP_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute  INPUT: Acute
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_AC_END-$	       ;; Length of state section
   DB	 ACUTE_ACUTE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0EFH,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_204501-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 53,0EFH		       ;;   acute
CF_204501:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_AC_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_GR_LO_END-$	       ;; Length of state section
   DB	 GRAVE_LOWER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_201200-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 23,''                        ;;
   DB	 24,''                        ;;
CF_201200:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_GR_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_GR_UP_END-$	       ;; Length of state section
   DB	 GRAVE_UPPER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_203200-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,0B7H		       ;;    A grave
   DB	 18,0D4H		       ;;    E grave
   DB	 23,0DEH		       ;;    I grave
   DB	 24,0E3H		       ;;    O grave
   DB	 22,0EBH		       ;;    U grave
CF_203200:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_GR_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_LO_END-$	       ;; Length of state section
   DB	 DIARESIS_LOWER 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0F9H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_201400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 30,''                        ;;
   DB	 24,''                        ;;
   DB	 21,''                        ;;
CF_201400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_UP_END-$	       ;; Length of state section
   DB	 DIARESIS_UPPER 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0F9H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_203400-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 4			       ;; number of scans
   DB	 30,''                        ;;
   DB	 18,0D3H		       ;;    E diaeresis
   DB	 23,0D8H		       ;;    I diaeresis
   DB	 24,''                        ;;
CF_203400:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis  INPUT: Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_SP_END-$	       ;; Length of state section
   DB	 DIARESIS_SPACE 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0F9H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_204550-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0F9H		       ;;   diaeresis
CF_204550:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_SP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis  INPUT: Diaresis
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_DI_END-$	       ;; Length of state section
   DB	 DIARESIS_DIARESIS	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0F9H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_204551-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 27,0F9H		       ;;   diaeresis
CF_204551:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_DI_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Circumflex Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_CI_UP_END-$	       ;; Length of state section
   DB	 CIRCUMFLEX_UPPER	       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_003305-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,0B6H		       ;;    A circumflex
   DB	 18,0D2H		       ;;    E circumflex
   DB	 23,0D7H		       ;;    I circumflex
   DB	 24,0E2H		       ;;    O circumflex
   DB	 22,0EAH		       ;;    U circumflex
CF_003305:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_CI_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Cedilla  INPUT: Space Bar
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_CE_SP_END-$	       ;; Length of state section
   DB	 CEDILLA_SPACE		       ;;
   DW	 ANY_KB 		       ;;
   DB	 0F7H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_204600-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0F7H		       ;;   cedilla
CF_204600:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_CE_SP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Cedilla  INPUT: Cedilla
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_CE_CE_END-$	       ;; Length of state section
   DB	 CEDILLA_CEDILLA	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0F7H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 CF_204601-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 27,0F7H		       ;;   cedilla
CF_204601:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_CE_CE_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; no more states
				       ;;
CP850_XLAT_END: 		       ;;

CODE   ENDS
       END
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfdk.asm ===
PAGE	,132

;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

	TITLE	PC DOS 3.3 Keyboard Definition File

;; LATEST CHANGE P12 NUMERIC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Definition File
;; (c) Copyright IBM Corp 1986,1987
;;
;; This file contains the keyboard tables for Danish
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;; Updated:    MIKE SAUNDERS - WSD IBM Hursley Laboratory - August 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC DK_LOGIC 	       ;;
	PUBLIC DK_865_XLAT	       ;;
	PUBLIC DK_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; DK State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
DK_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW  0			       ;; special features
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;  ***BD - THIS SECTION HAS BEEN UPDATED
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 IFF EITHER_CTL,NOT		       ;;
    IFF EITHER_ALT,NOT		       ;;
      IFF EITHER_SHIFT		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF			       ;;
	  SET_FLAG DEAD_LOWER	       ;;
      ENDIFF			       ;;
    ELSEF			       ;;
      IFKBD G_KB+P12_KB 	       ;; For ENHANCED keyboard some
      ANDF R_ALT_SHIFT		       ;;  dead keys are on third shift
      ANDF EITHER_SHIFT,NOT	       ;;   which is accessed via the altgr key
	 SET_FLAG DEAD_THIRD	       ;;
      ENDIFF			       ;;
    ENDIFF			       ;;
 ENDIFF 			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;  exist for 437 so beep for
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO TILDE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TILDE_PROC:			       ;;
				       ;;
   IFF TILDE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT TILDE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_UPPER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_LOWER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_TILDE:			       ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;; ***BD - NON_DEAD THRU LOGIC_END IS UPDATED
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NON_DEAD:			       ;;
				       ;;
   IFKBD G_KB+P12_KB		       ;; Avoid accidentally translating
   ANDF LC_E0			       ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC		       ;;   G keyboard
   ENDIFF			       ;;
				       ;;
 IFF  EITHER_CTL,NOT		       ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT		       ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT		       ;; Numeric keys are not.
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE,NOT	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
	  XLATT NON_ALPHA_UPPER        ;;
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE 	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
	  XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
	  ENDIFF		       ;;
      ENDIFF			       ;; Third and Fourth shifts
    ELSEF			       ;; ctl off, alt on at this point
      IFKBD XT_KB+AT_KB 	 ;; XT, AT,  keyboards. Nordics
	 IFF EITHER_SHIFT	       ;; only.
	    XLATT FOURTH_SHIFT	       ;; ALT + shift
	 ELSEF			       ;;
	    XLATT THIRD_SHIFT	       ;; ALT
	 ENDIFF 		       ;;
      ELSEF			       ;; ENHANCED keyboard
	 IFF R_ALT_SHIFT	       ;; ALTGr
	 ANDF EITHER_SHIFT,NOT	       ;;
	    XLATT THIRD_SHIFT	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
    ENDIFF			       ;;
 ENDIFF 			       ;;
;**************************************;;
 IFF EITHER_SHIFT,NOT		       ;;
   IFKBD XT_KB+AT_KB		 ;;
     IFF EITHER_CTL		       ;;
     ANDF ALT_SHIFT		       ;;
       XLATT ALT_CASE		       ;;
     ENDIFF			       ;;
   ENDIFF			       ;;
   IFKBD G_KB+P12_KB		       ;;
     IFF EITHER_CTL		       ;;
     ANDF ALT_SHIFT		       ;;
       IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ALT_CASE 	       ;;
       ENDIFF			       ;;
     ENDIFF			       ;;
   ENDIFF			       ;;
 ENDIFF 			       ;;
;**************************************;;
 IFKBD AT_KB+XT_KB		 ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF ALT_SHIFT		       ;; ALT - case
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
 ENDIFF 			       ;;
				       ;;
 IFKBD G_KB+P12_KB		       ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF ALT_SHIFT		       ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT	       ;;
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
 ENDIFF 			       ;;
				       ;;
 EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; DK Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC DK_COMMON_XLAT		       ;;
DK_COMMON_XLAT: 		       ;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_END-$	       ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 2			       ;; number of entries
   DB	 13			       ;; scan code
   FLAG  ACUTE			       ;; flag bit to set
   DB	 27			       ;;
   FLAG  DIARESIS		       ;;
				       ;;
				       ;;
COM_DK_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_END-$	       ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 2			       ;; number of entries
   DB	 13			       ;; scan code
   FLAG  GRAVE			       ;; flag bit to set
   DB	 27			       ;;
   FLAG  CIRCUMFLEX		       ;;
				       ;;
COM_DK_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_TH_END-$	       ;; length of state section
   DB	 DEAD_THIRD		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 27			       ;; scan code
   FLAG  TILDE			       ;; flag bit to set
				       ;;
COM_DK_TH_END:			       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;******************************
;;***BD - ADDED FOR NUMERIC PAD (DECIMAL SEPERATOR)
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common		       ;;change **********CNS **************
;; STATE: Numeric Key Pad
;; KEYBOARD TYPES: All except the p12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_PAD_K1_END-$	       ;; length of state section
   DB	 NUMERIC_PAD		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB	       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_PAD_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	 83,','                        ;; decimal seperator = ,
COM_PAD_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_PAD_K1_END: 		       ;;
				       ;;
;;******************************
;;***BD - ADDED FOR ALT CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K1_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_ALT_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 0			       ;; 2 number of entries
;  DB	 12,-1,-1		       ;;
;  DB	 53,0,082H		       ;;
COM_ALT_K1_T1_END:		       ;;
					;;
    DW	  0				;; Size of xlat table - null table
				       ;;
COM_ALT_K1_END: 		       ;;
					;;
;;******************************
;;***BD - ADDED FOR CTRL CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: XT, , AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K1_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 XT_KB+AT_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_CTRL_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 2			       ;; number of entries
   DB	 12,-1,-1		       ;;
   DB	 53,01FH,35h		       ;;
COM_CTRL_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CTRL_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K2_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_CTRL_K2_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 8			       ;; number of entries
   DB	  9,01BH,09H		       ;;
   DB	 10,01DH,0AH		       ;;
   DB	 12,-1,-1		       ;;
   DB	 26,-1,-1		       ;;
   DB	 27,-1,-1		       ;;
   DB	 43,-1,-1		       ;;
   DB	 53,01FH,35H			;;
   DB	 86,01CH,56H			;;
COM_CTRL_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CTRL_K2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 3			       ;; number of entries
   DB	 26,086H		       ;; a-overcircle
   DB	 39,091H		       ;; ae-dipthong
   DB	 40,09BH		       ;; o-slash
COM_AL_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 3			       ;; number of entries
   DB	 26,08FH		       ;; A-OVERCIRCLE
   DB	 39,092H		       ;; AE-DIPTHONG
   DB	 40,09DH		       ;; O-SLASH
COM_AL_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 41,0ABH		       ;; 
   DB	 12,"+"                        ;; + INCLUDED FOR SIMPLIC.
   DB	 43,"'"                        ;; '
   DB	 86,"<"                        ;; <
   DB	 53,"-"                        ;; -
COM_NA_LO_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K1_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: XT +
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K2_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 41,"'"                        ;; '
   DB	 12,"+"                        ;; +
   DB	 43,"<"                        ;; <
   DB	 53,"-"                        ;; -
COM_NA_LO_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K2_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K3_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K3_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 12,"+"                        ;; +
   DB	 41,"<"                        ;; <
   DB	 43,"'"                        ;; '
   DB	 53,"-"                        ;; -
COM_NA_LO_K3_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K3_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 12			       ;; number of entries
   DB	  3,'"'                        ;;
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;
   DB	 43,'*'                        ;;
   DB	 86,'>'                        ;;
COM_NA_UP_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K1_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT +
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K2_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 12			       ;; number of entries
   DB	  3,'"'                        ;;
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;
   DB	 41,'*'                        ;;
   DB	 43,'>'                        ;;
COM_NA_UP_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K2_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K3_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K3_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 12			       ;; number of entries
   DB	  3,'"'                        ;;
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;
   DB	 41,'>'                        ;;
   DB	 43,'*'                        ;;
COM_NA_UP_K3_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K3_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type FERRARI
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 9			       ;; number of entries
   DB	  3,'@'                        ;;
   DB	  4,09CH		       ;; 
   DB	  5,'$'                        ;;
   DB	  8,'{'                        ;;
   DB	  9,'['                        ;;
   DB	 10,']'                        ;;
   DB	 11,'}'                        ;;
   DB	 13,'|'                        ;; Broken Vertical Line
   DB	 86,'\'                        ;;
COM_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift (ALTERNATE)
;; KEYBOARD TYPES: XT,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K1_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 9			       ;; number of entries
   DB	 12,'-','-'                    ;;
   DB	 13,'=','='                    ;;
   DB	 26,'[','['                    ;;
   DB	 27,']',']'                    ;;
   DB	 39,';',';'                    ;;
   DB	 40,027H,027H		       ;;
   DB	 41,060H,060H		       ;;
   DB	 43,'\','\'                    ;;
   DB	 53,'/','/'                    ;;
COM_THIRD_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift (ALTERNATE)
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K2_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_K2_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 9			       ;; number of entries
   DB	 12,'-','-'                    ;;
   DB	 13,'=','='                    ;;
   DB	 26,'[','['                    ;;
   DB	 27,']',']'                    ;;
   DB	 39,';',';'                    ;;
   DB	 40,027H,027H		       ;;
   DB	 41,'\','\'                    ;;
   DB	 43,060H,060H		       ;;
   DB	 53,'/','/'                    ;;
COM_THIRD_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Fourth Shift (ALTERNATE+SHIFT)
;; KEYBOARD TYPES: XT,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_FOURTH_END-$	       ;; length of state section
   DB	 FOURTH_SHIFT		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_FOURTH_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 18			       ;; number of entries
   DB	  3,'@','@'                    ;;
   DB	  5,'$','$'                    ;;
   DB	  7,'^','^'                    ;;
   DB	  8,'&','&'                    ;;
   DB	  9,'*','*'                    ;;
   DB	 10,'(','('                    ;;
   DB	 11,')',')'                    ;;
   DB	 12,'_','_'                    ;;
   DB	 13,'+','+'                    ;;
   DB	 26,'{','{'                    ;;
   DB	 27,'}','}'                    ;;
   DB	 39,':',':'                    ;;
   DB	 40,'"','"'                    ;;
   DB	 41,'~','~'                    ;;
   DB	 43,'|','|'                    ;;
   DB	 51,'<','<'                    ;;
   DB	 52,'>','>'                    ;;
   DB	 53,'?','?'                    ;;
COM_FOURTH_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_FOURTH_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Fourth Shift (ALTERNATE+SHIFT)
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_FOURTH_K1_END-$	       ;; length of state section
   DB	 FOURTH_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_FOURTH_K1_T1_END-$        ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 18			       ;; number of entries
   DB	  3,'@','@'                    ;;
   DB	  5,'$','$'                    ;;
   DB	  7,'^','^'                    ;;
   DB	  8,'&','&'                    ;;
   DB	  9,'*','*'                    ;;
   DB	 10,'(','('                    ;;
   DB	 11,')',')'                    ;;
   DB	 12,'_','_'                    ;;
   DB	 13,'+','+'                    ;;
   DB	 26,'{','{'                    ;;
   DB	 27,'}','}'                    ;;
   DB	 39,':',':'                    ;;
   DB	 40,'"','"'                    ;;
   DB	 41,'|','|'                    ;;
   DB	 43,'~','~'                    ;;
   DB	 51,'<','<'                    ;;
   DB	 52,'>','>'                    ;;
   DB	 53,'?','?'                    ;;
COM_FOURTH_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_FOURTH_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_LO_END-$	       ;; length of state section
   DB	 GRAVE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
COM_GR_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_SP_END-$	       ;; length of state section
   DB	 GRAVE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,96			       ;; STANDALONE GRAVE
COM_GR_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  COM_TI_LO_END-$		;; length of state section
    DB	  TILDE_LOWER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  COM_TI_LO_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  1				;; number of scans
    DB	  49,0A4H			;; scan code,ASCII - 
 COM_TI_LO_T1_END:			;;
					;;
    DW	  0				;;
					;;
 COM_TI_LO_END: 			;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: Common
;;; STATE: Tilde Upper Case
;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  COM_TI_UP_END-$		;; length of state section
    DB	  TILDE_UPPER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  COM_TI_UP_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  1				;; number of scans
    DB	  49,0A5H			;; scan code,ASCII - 
 COM_TI_UP_T1_END:			;;
					;;
    DW	  0				;; Size of xlat table - null table
					;;
 COM_TI_UP_END: 			;; length of state section
					;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_TI_SP_END-$	       ;; length of state section
   DB	 TILDE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 07EH,0 		       ;; error character = standalone accent
				       ;;
   DW	 COM_TI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,07EH		       ;; STANDALONE TILDE
COM_TI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_TI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; DK Specific Translate Section for 865
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC DK_865_XLAT		       ;;
DK_865_XLAT:			       ;;
				       ;;
   DW	  CP865_XLAT_END-$	       ;; length of section
   DW	  865			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 865
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT, , AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP865_NA_UP_END-$		 ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB+AT_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP865_NA_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	  5,0AFH		       ;; International Currency Symb
CP865_NA_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP865_NA_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 865
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP865_NA_UP_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP865_NA_UP_K1_T1_END-$       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 2			       ;; number of entries
   DB	  5,0AFH		       ;; International Currency Symb
   DB	 41,015H		       ;; SECTION Symb
CP865_NA_UP_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP865_NA_UP_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 865
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP865_AC_LO_END-$		 ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP865_AC_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
CP865_AC_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP865_AC_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 865
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP865_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP865_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of entries
   DB	 18,''                        ;; scan code,ASCII - 
CP865_AC_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP865_AC_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 865
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP865_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP865_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,39			       ;; scan code,ASCII - SPACE
CP865_AC_SP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP865_AC_SP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP865
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP865_DI_LO_END-$		 ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 254,0			       ;; error character = standalone accent
				       ;;
   DW	 CP865_DI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 21,''                        ;; scan code,ASCII - y
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
CP865_DI_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP865_DI_LO_END:			 ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP865
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP865_DI_UP_END-$		 ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 254,0			       ;; error character = standalone accent
				       ;;
   DW	 CP865_DI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 22,''                        ;; scan code,ASCII - U
   DB	 24,''                        ;; scan code,ASCII - O
   DB	 30,''                        ;; scan code,ASCII - A
CP865_DI_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP865_DI_UP_END:			 ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 865
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;				       ;;
;  DW	 CP865_DI_SP_END-$		 ;; length of state section
;  DB	 DIARESIS_SPACE 	       ;; State ID
;  DW	 ANY_KB 		       ;; Keyboard Type
;  DB	 254,0			       ;; error character = standalone accent
;				       ;;
;  DW	 CP865_DI_SP_T1_END-$		 ;; Size of xlat table
;  DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;  DB	 1			       ;; number of scans
;  DB	 57,254 		       ;; error character = standalone accent
;CP865_DI_SP_T1_END:			 ;;
;				       ;;
;  DW	 0			       ;; Size of xlat table - null table
;CP865_DI_SP_END:			 ;; length of state section
;				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	  0			       ;; LAST STATE
				       ;;
CP865_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; DK Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC DK_850_XLAT		       ;;
DK_850_XLAT:			       ;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT, , AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_END-$		 ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB+AT_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP850_NA_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	  5,0CFH		       ;; International Currency Symb
CP850_NA_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_END:			 ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP850_NA_UP_K1_T1_END-$       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 2			       ;; number of entries
   DB	  5,0CFH		       ;; International Currency Symb
   DB	 41,0F5H		       ;; SECTION Symb
CP850_NA_UP_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_LO_END-$		 ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 239,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 21,0ECH		       ;; y acute
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
CP850_AC_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 239,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of entries
   DB	 18,090H		       ;;    E acute
   DB	 21,0EDH		       ;;    Y acute
   DB	 22,0E9H		       ;;    U acute
   DB	 23,0D6H		       ;;    I acute
   DB	 24,0E0H		       ;;    O acute
   DB	 30,0B5H		       ;;    A acute
CP850_AC_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 239,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,239 		       ;; scan code,ASCII - SPACE
CP850_AC_SP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_SP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_LO_END-$		 ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_DI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 21,''                        ;; scan code,ASCII - y
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 30,''                        ;; scan code,ASCII - a
CP850_DI_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_LO_END:			 ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_UP_END-$		 ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_DI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,0D3H		       ;;    E Diaeresis
   DB	 22,''                        ;;    U Diaeresis
   DB	 23,0D8H		       ;;    I Diaeresis
   DB	 24,''                        ;;    O Diaeresis
   DB	 30,''                        ;;    A Diaeresis
CP850_DI_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_UP_END:			 ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_SP_END-$		 ;; length of state section
   DB	 DIARESIS_SPACE 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_DI_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,249 		       ;; error character = standalone accent
CP850_DI_SP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
CP850_DI_SP_END:			 ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_GR_UP_END-$	       ;; length of state section
   DB	 GRAVE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_GR_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,0D4H		       ;;    E grave
   DB	 22,0EBH		       ;;    U grave
   DB	 23,0DEH		       ;;    I grave
   DB	 24,0E3H		       ;;    O grave
   DB	 30,0B7H		       ;;    A grave
CP850_GR_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_GR_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  CP850_TI_LO_END-$		;; length of state section
    DB	  TILDE_LOWER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  CP850_TI_LO_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  2				;; number of scans
    DB	  24,0E4H			;; scan code,ASCII - o tilde
    DB	  30,0C6H			;; scan code,ASCII - a tilde
 CP850_TI_LO_T1_END:			;;
					;;
    DW	  0				;;
					;;
 CP850_TI_LO_END:			;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: 850
;;; STATE: Tilde Upper Case
;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  CP850_TI_UP_END-$		;; length of state section
    DB	  TILDE_UPPER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  CP850_TI_UP_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  2				;; number of scans
    DB	  24,0E5H			;; scan code,ASCII - O tilde
    DB	  30,0C7H			;; scan code,ASCII - A tilde
 CP850_TI_UP_T1_END:			;;
					;;
    DW	  0				;; Size of xlat table - null table
					;;
 CP850_TI_UP_END:			;; length of state section
					;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_CI_UP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_UPPER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_CI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,0D2H		       ;;    E circumflex
   DB	 22,0EAH		       ;;    U circumflex
   DB	 23,0D7H		       ;;    I circumflex
   DB	 24,0E2H		       ;;    O circumflex
   DB	 30,0B6H		       ;;    A circumflex
CP850_CI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_CI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 0			       ;; LAST STATE
				       ;;
CP850_XLAT_END: 		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CODE	 ENDS			       ;;
	 END			       ;;


=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfcz.asm ===
PAGE    ,132
        TITLE   PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Definition File
;; (c) Copyright IBM Corp 1986,1987
;;
;;
;; This file contains the keyboard tables for:
;; Czech Republic (Czech) 
;; Alterations created by Gyorgy Balint on behalf of IBM ROECE
;; 21.10.87 Basingstoke
;;
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;
;; WRITTEN:    Michael J. Saunders 2.OCTOBER 1987
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC CZ_LOGIC                ;;
        PUBLIC CZ_850_XLAT             ;;
        PUBLIC CZ_852_XLAT             ;;
        PUBLIC CZ_855_XLAT             ;;
        PUBLIC CZ_866_XLAT             ;;
        PUBLIC CZ_437_XLAT             ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CZ State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
CZ_LOGIC:                              ;;
                                       ;;
   DW  LOGIC_END-$                     ;; length
                                       ;;
   DW  0                               ;; special features
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   IFF  EITHER_ALT,NOT                 ;;
   ANDF EITHER_CTL,NOT                 ;;
;     IFF CAPS_STATE
;         SET_FLAG DEAD_UPPER
;     ELSEF
      IFF EITHER_SHIFT                 ;;
          SET_FLAG DEAD_UPPER          ;;
      ELSEF                            ;;
          SET_FLAG DEAD_LOWER          ;;
      ENDIFF                           ;;
;     ENDIFF
   ELSEF                               ;;
      IFF EITHER_SHIFT,NOT             ;;
        IFKBD XT_KB+AT_KB
          IFF EITHER_CTL                ;;
          ANDF ALT_SHIFT                ;;
            SET_FLAG DEAD_THIRD        ;;
          ENDIFF                        ;;
        ELSEF
         IFF R_ALT_SHIFT               ;;
         ANDF EITHER_CTL,NOT           ;;
         ANDF LC_E0,NOT                ;;
            SET_FLAG DEAD_THIRD        ;;
         ENDIFF                        ;;
        ENDIFF
       ENDIFF
   ENDIFF                              ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
ACUTE_PROC:                            ;;
                                       ;;
   IFF ACUTE,NOT                       ;;
      GOTO CEDILLA_PROC                ;;
      ENDIFF                           ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT ACUTE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT ACUTE_LOWER       ;;
            ELSEF                      ;;
               XLATT ACUTE_UPPER       ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT ACUTE_UPPER       ;;
            ELSEF                      ;;
               XLATT ACUTE_LOWER       ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_ACUTE:                         ;;
      PUT_ERROR_CHAR ACUTE_SPACE       ;; If we get here then either the XLATT
      BEEP                             ;; failed or we are ina bad shift state.
      GOTO NON_DEAD                    ;; Either is invalid so BEEP and fall
                                       ;; through to generate the second char.
                                       ;; Note that the dead key flag will be
                                       ;; reset before we get here.
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEDILLA ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CEDILLA_PROC:                          ;;
                                       ;;
   IFF CEDILLA,NOT                     ;;
      GOTO DIARESIS_PROC               ;;
      ENDIFF                           ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CEDILLA_SPACE           ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT CEDILLA_LOWER     ;;
            ELSEF                      ;;
               XLATT CEDILLA_UPPER     ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT CEDILLA_UPPER     ;;
            ELSEF                      ;;
               XLATT CEDILLA_LOWER     ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CEDILLA:                       ;;
      PUT_ERROR_CHAR CEDILLA_LOWER     ;; If we get here then either the XLATT
      BEEP                             ;; failed or we are ina bad shift state.
      GOTO NON_DEAD                    ;; Either is invalid so BEEP and fall
                                       ;; through to generate the second char.
                                       ;; Note that the dead key flag will be
                                       ;; reset before we get here.
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
DIARESIS_PROC:                         ;;
                                       ;;
   IFF DIARESIS,NOT                    ;;
      GOTO GRAVE_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT DIARESIS_SPACE          ;;  exist for 850 so beep for
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT DIARESIS_LOWER    ;;
            ELSEF                      ;;
               XLATT DIARESIS_UPPER    ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT DIARESIS_UPPER    ;;
            ELSEF                      ;;
               XLATT DIARESIS_LOWER    ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_DIARESIS:                      ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
GRAVE_PROC:                            ;;
                                       ;;
   IFF GRAVE,NOT                       ;;
      GOTO TILDE_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT GRAVE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT GRAVE_LOWER        ;;
           ELSEF                       ;;
              XLATT GRAVE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT GRAVE_LOWER        ;;
           ELSEF                       ;;
              XLATT GRAVE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_GRAVE:                         ;;
      PUT_ERROR_CHAR GRAVE_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TILDE_PROC:                            ;;
                                       ;;
   IFF TILDE,NOT                       ;;
      GOTO CIRCUMFLEX_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT TILDE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT TILDE_LOWER        ;;
           ELSEF                       ;;
              XLATT TILDE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE              ;;
              XLATT TILDE_UPPER        ;;
           ELSEF                       ;;
              XLATT TILDE_LOWER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
INVALID_TILDE:                         ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CIRCUMFLEX_PROC:                       ;;
                                       ;;
   IFF CIRCUMFLEX,NOT                  ;;
      GOTO CARON_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT CIRCUMFLEX_LOWER   ;;
           ELSEF                       ;;
              XLATT CIRCUMFLEX_UPPER   ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT CIRCUMFLEX_LOWER   ;;
           ELSEF                       ;;
              XLATT CIRCUMFLEX_UPPER   ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CIRCUMFLEX:                    ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CARON ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CARON_PROC:                            ;;
                                       ;;
   IFF CARON,NOT                       ;;
      GOTO BREVE_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CARON_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT CARON_LOWER        ;;
           ELSEF                       ;;
              XLATT CARON_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT CARON_LOWER        ;;
           ELSEF                       ;;
              XLATT CARON_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CARON:                         ;;
      PUT_ERROR_CHAR CARON_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BREVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BREVE_PROC:                            ;;
                                       ;;
   IFF BREVE,NOT                       ;;
      GOTO OVERCIRCLE_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT BREVE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT BREVE_LOWER        ;;
           ELSEF                       ;;
              XLATT BREVE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT BREVE_LOWER        ;;
           ELSEF                       ;;
              XLATT BREVE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_BREVE:                         ;;
      PUT_ERROR_CHAR BREVE_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OVERCIRCLE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
OVERCIRCLE_PROC:                            ;;
                                       ;;
   IFF OVERCIRCLE,NOT                       ;;
      GOTO OGONEK_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT OVERCIRCLE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT OVERCIRCLE_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERCIRCLE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT OVERCIRCLE_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERCIRCLE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_OVERCIRCLE:                         ;;
      PUT_ERROR_CHAR OVERCIRCLE_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OGONEK ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
OGONEK_PROC:                            ;;
                                       ;;
   IFF OGONEK,NOT                       ;;
      GOTO OVERDOT_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT OGONEK_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT OGONEK_LOWER        ;;
           ELSEF                       ;;
              XLATT OGONEK_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT OGONEK_LOWER        ;;
           ELSEF                       ;;
              XLATT OGONEK_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_OGONEK:                         ;;
      PUT_ERROR_CHAR OGONEK_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OVERDOT ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
OVERDOT_PROC:                            ;;
                                       ;;
   IFF OVERDOT,NOT                       ;;
      GOTO DOUBLEACUTE_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT OVERDOT_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT OVERDOT_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERDOT_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT OVERDOT_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERDOT_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_OVERDOT:                         ;;
      PUT_ERROR_CHAR OVERDOT_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DOUBLEACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
DOUBLEACUTE_PROC:                            ;;
                                       ;;
   IFF DOUBLEACUTE,NOT                       ;;
      GOTO NON_DEAD                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT DOUBLEACUTE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT DOUBLEACUTE_LOWER        ;;
           ELSEF                       ;;
              XLATT DOUBLEACUTE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT DOUBLEACUTE_LOWER        ;;
           ELSEF                       ;;
              XLATT DOUBLEACUTE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_DOUBLEACUTE:                         ;;
      PUT_ERROR_CHAR DOUBLEACUTE_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
;***************************
NON_DEAD:                              ;;
;ADDED FOR DIVIDE SIGN                 ;;
    IFKBD G_KB+P12_KB                   ;; Avoid accidentally translating
    ANDF LC_E0                          ;;  the "/" on the numeric pad of the
      IFF EITHER_CTL,NOT
      ANDF EITHER_ALT,NOT
        XLATT DIVIDE_SIGN              ;;
      ENDIFF
      EXIT_STATE_LOGIC               ;;
    ENDIFF                             ;;
;BD END OF ADDITION
;****************************
;NON_DEAD:                              ;;
;                                       ;;
;  IFKBD G_KB+P12_KB                   ;; Avoid accidentally translating
;  ANDF LC_E0                          ;;  the "/" on the numeric pad of the
;     EXIT_STATE_LOGIC                 ;;   G keyboard
;  ENDIFF                              ;;
                                       ;;
   IFF  EITHER_ALT,NOT                 ;;
   ANDF EITHER_CTL,NOT                 ;;
      IFF EITHER_SHIFT                 ;;
;******************************************
;;***BD ADDED FOR NUMERIC PAD
          IFF NUM_STATE,NOT            ;;
              XLATT NUMERIC_PAD        ;;
          ENDIFF                       ;;
;;***BD END OF ADDITION
;*******************************************
          XLATT NON_ALPHA_UPPER    ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
;              XLATT NON_ALPHA_LOWER    ;;
;              XLATT NON_ALPHA_UPPER    ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
;              XLATT NON_ALPHA_UPPER    ;;
          ENDIFF                       ;;
      ELSEF                            ;;
;******************************************
;;***BD ADDED FOR NUMERIC PAD
          IFF NUM_STATE                ;;
              XLATT NUMERIC_PAD        ;;
          ENDIFF                       ;;
;;***BD END OF ADDITION
;******************************************
          XLATT NON_ALPHA_LOWER     ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
;            XLATT NON_ALPHA_UPPER            ;;
;             XLATT NON_ALPHA_LOWER            ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
;            XLATT NON_ALPHA_LOWER     ;;
          ENDIFF                       ;;
      ENDIFF                           ;;
   ELSEF                               ;;
      IFF EITHER_SHIFT,NOT             ;;
          IFKBD XT_KB+AT_KB      ;;
              IFF  EITHER_CTL          ;;
              ANDF ALT_SHIFT           ;;
                  XLATT THIRD_SHIFT    ;;
              ENDIFF                   ;;
          ELSEF                        ;;
              IFF EITHER_CTL,NOT       ;;
              ANDF R_ALT_SHIFT         ;;
                  XLATT THIRD_SHIFT    ;;
              ENDIFF                   ;;
          ENDIFF                       ;;
      IFKBD AT_KB+XT_KB          ;;
        IFF EITHER_CTL                 ;;
        ANDF ALT_SHIFT                 ;;
          XLATT ALT_CASE               ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
      IFKBD G_KB+P12_KB                ;;
        IFF EITHER_CTL                 ;;
        ANDF ALT_SHIFT                 ;;
          IFF R_ALT_SHIFT,NOT             ;;
            XLATT ALT_CASE                ;;
          ENDIFF                          ;;
        ENDIFF                            ;;
      ENDIFF                              ;;
     ENDIFF                               ;;
   ENDIFF                                 ;;
;IFF EITHER_SHIFT,NOT                     ;;
   IFKBD AT_KB+XT_KB                ;;
     IFF EITHER_CTL,NOT                   ;;
       IFF ALT_SHIFT                      ;; ALT - case
         XLATT ALT_CASE                   ;;
       ENDIFF                             ;;
     ELSEF                                ;;
         XLATT CTRL_CASE                  ;;
     ENDIFF                               ;;
   ENDIFF                                 ;;
                                          ;;
   IFKBD G_KB+P12_KB                      ;;
     IFF EITHER_CTL,NOT                   ;;
       IFF ALT_SHIFT                      ;; ALT - case
       ANDF R_ALT_SHIFT,NOT               ;;
         XLATT ALT_CASE                   ;;
       ENDIFF                             ;;
     ELSEF                                ;;
       IFF EITHER_ALT,NOT                 ;;
         XLATT CTRL_CASE                  ;;
       ENDIFF                             ;;
     ENDIFF                               ;;
     IFF EITHER_CTL                       ;;
     ANDF ALT_SHIFT                       ;;
     ANDF R_ALT_SHIFT,NOT                 ;;
        XLATT ALT_CASE                    ;;
     ENDIFF                               ;;
   ENDIFF                                 ;;
                                          ;;
   EXIT_STATE_LOGIC                       ;;
                                          ;;
LOGIC_END:                                ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; CZ Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC CZ_COMMON_XLAT                 ;;
CZ_COMMON_XLAT:                        ;;
                                       ;;
   DW     COMMON_XLAT_END-$            ;; length of section
   DW     -1                           ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: low shift Dead_lower
;; KEYBOARD TYPES: G
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_PL_LO_END-$               ;; length of state section
   DB    DEAD_LOWER                    ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW    2                             ;; number of entries
   DB    13                            ;;
   FLAG  ACUTE                         ;;
   DB    43                            ;;
   FLAG  DIARESIS                      ;;
                                       ;;
COM_PL_LO_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: low shift Dead_UPPER
;; KEYBOARD TYPES: G
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_PL_UP_END-$               ;; length of state section
   DB    DEAD_UPPER                    ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW    2                             ;; number of entries
   DB    41                            ;;
   FLAG  OVERCIRCLE                    ;;
   DB    13                            ;;
   FLAG  CARON                         ;;
                                       ;;
COM_PL_UP_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: G
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CZ_TH_END-$               ;; length of state section
   DB    DEAD_THIRD                    ;; State ID
;   DW    G_KB                          ;; Keyboard Type
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW    10                            ;; number of entries
;; DB    2                             ;; TILDE IS NOT AN ACCENT KEY
;; FLAG  TILDE                         ;;
   DB    3                             ;;
   FLAG  CARON                         ;;
   DB    4                             ;;
   FLAG  CIRCUMFLEX                    ;;
   DB    5                             ;;
   FLAG  BREVE                         ;;
   DB    6                             ;;
   FLAG  OVERCIRCLE                    ;;
   DB    7                             ;;
   FLAG  OGONEK                        ;;
;; DB    8                             ;; GRAVE IS NOT AN ACCENT KEY
;; FLAG  GRAVE                         ;;
   DB    9                             ;;
   FLAG  OVERDOT                       ;;
   DB    10                            ;;
   FLAG  ACUTE                         ;;
   DB    11                            ;;
   FLAG  DOUBLEACUTE                   ;;
   DB    12                            ;;
   FLAG  DIARESIS                      ;;
   DB    13                            ;;
   FLAG  CEDILLA                       ;;
                                       ;;
COM_CZ_TH_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;******************************
;;***BD - ADDED FOR NUMERIC PAD (DECIMAL SEPERATOR)
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Numeric Key Pad
;; KEYBOARD TYPES: G_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_PAD_K1_END-$              ;; length of state section
   DB    NUMERIC_PAD                   ;; State ID
   DW    G_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_PAD_K1_T1_END-$           ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    1                             ;; number of entries
   DB    83,','                        ;; decimal seperator = ,
COM_PAD_K1_T1_END:                     ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_PAD_K1_END:                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;******************************
;;***BD - ADDED FOR ALT CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Alt Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_ALT_K1_END-$              ;; length of state section
   DB    ALT_CASE                      ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_ALT_K1_T1_END-$           ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    3                             ;; number of entries
   DB    21,0,2CH                      ;;
   DB    44,0,15H                      ;;
   DB    53,0,82H                      ;;
COM_ALT_K1_T1_END:                     ;;
                                       ;;
    DW    0                            ;; Size of xlat table - null table
                                       ;;
COM_ALT_K1_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CTRL_K2_END-$             ;; length of state section
   DB    CTRL_CASE                     ;; State ID
   DW    G_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_CTRL_K2_T1_END-$          ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    3                             ;; number of entries
   DB    21,01AH,2CH                   ;;
   DB    44,019H,15H                   ;;
   DB    53,01FH,0CH                   ;;
COM_CTRL_K2_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CTRL_K2_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COM
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_AL_LO_K1_END-$            ;; length of state section
   DB    ALPHA_LOWER               ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_AL_LO_K1_T1_END-$         ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    2                             ;; number of entries
   DB    21,"z",2CH                    ;;
   DB    44,"y",15H                    ;;
COM_AL_LO_K1_T1_END:                   ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_AL_LO_K1_END:                      ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COM
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_AL_UP_K1_END-$            ;; length of state section
   DB    ALPHA_UPPER               ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_AL_UP_K1_T1_END-$         ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    2                             ;; number of entries
   DB    21,"Z",2CH                    ;;
   DB    44,"Y",15H                    ;;
COM_AL_UP_K1_T1_END:                   ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_AL_UP_K1_END:                      ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COM
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_NA_LO_K1_END-$            ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_NA_LO_K1_T1_END-$         ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    6                             ;; number of entries
   DB    41,";"                        ;;      changes made!!!!!  x
   DB    02h,"+"                       ;;                         x
   DB    0ch,"="                       ;;                         x
   DB    01bh,")"                      ;;                         x
   DB    056h,"&"                      ;;                         x
   DB    035h,"-"                      ;;                         x
COM_NA_LO_K1_T1_END:                   ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_NA_LO_K1_END:                      ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_NA_UP_K1_END-$            ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_NA_UP_K1_T1_END-$         ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    20                            ;; number of entries
   DB    002h,"1"                      ;;                              x
   DB    003h,"2"                      ;;                              x
   DB    004h,"3"                      ;;                              x
   DB    005h,"4"                      ;;                              x
   DB    006h,"5"                      ;;                              x
   DB    007h,"6"                      ;;                              x
   DB    008h,"7"                      ;;                              x
   DB    009h,"8"                      ;;                              x
   DB    00ah,"9"                      ;;                              x
   DB    00bh,"0"                      ;;                              x
   DB    00ch,"%"                      ;;                              x
   DB    01ah,"/"                      ;;                              x
   DB    01bh,"("                      ;;                              x
   DB    027h,'"'                      ;;                              x
   DB    028h,"!"                      ;;                              x
   DB    02Bh, 39                      ;;                              x
   DB    056h,"*"                      ;;                              x
   DB    033H,"?"                      ;;
   DB    034H,":"                      ;;
   DB    035h,"_"                      ;;                              x
COM_NA_UP_K1_T1_END:                   ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_NA_UP_K1_END:                      ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Third Shift
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_THIRD_END-$               ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type FERRARI
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_THIRD_T1_END-$            ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    26                            ;; number of entries
   DB     2,'~',02H                    ;;
   db     8,'`',08H
   DB    16,'\',10H                    ;;
   DB    17,'|',11H                    ;;
   DB    18,'',12H                    ;;
   DB    20,'$',14H                    ;;
   DB    21,0E1H,15H                   ;; SHARP S
   DB    23,'<',17H                    ;;
   DB    24,'>',18H                    ;;
   DB    25,'*',19H                    ;;
   DB    26,'',1AH                    ;;
   DB    33,"[",021h                   ;;                             x
   DB    34,"]",022h                   ;;                             x
   DB    35,"&",023h                   ;;                             x
   DB    39,"$",027H                   ;;                             x
   db    40,0e1h,028h                  ;; sharpes s                   x
   DB    86,"<",056h                   ;;                             x
   DB    44,">",02ch                   ;;                             x
   DB    45,"#",02dh                   ;;                             x
   DB    46,"&",02eh                   ;;                             x
   DB    47,"@",02fh                   ;;                             x
   DB    48,"{",30h                    ;;                             x
   DB    49,"}",031h                   ;;                             x
   DB    51,"<",033h                   ;;                             x
   DB    52,">",034h                   ;;                             x
   DB    53,"*",035h                   ;;                             x
COM_THIRD_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Last xlat table
COM_THIRD_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Caron Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CA_SP_END-$             ;; length of state section
   DB    CARON_SPACE                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F3H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_CA_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,0F3H                       ;; Caron Space
COM_CA_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CA_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COM
;; STATE: Breve Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_BR_SP_END-$             ;; length of state section
   DB    BREVE_SPACE                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F4H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_BR_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,0F4H                       ;; BREVE SPACE
COM_BR_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_BR_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Ogonek Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_OG_SP_END-$             ;; length of state section
   DB    OGONEK_SPACE                  ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F2H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_OG_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,0F2H                       ;; OGONEK SPACE
COM_OG_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_OG_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Double Acute Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_DC_SP_END-$             ;; length of state section
   DB    DOUBLEACUTE_SPACE                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F1H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_DC_SP_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of entries
   DB    57,0F1H                       ;; DOUBLEACUTE SPACE
COM_DC_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_DC_SP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CI_LO_END-$               ;; length of state section
   DB    CIRCUMFLEX_LOWER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
                                       ;;
   DW    COM_CI_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    3                             ;; number of scans
   DB    23,''                        ;;  "    "  ,  "   - i
   DB    24,''                        ;; scan code,ASCII - o
   DB    30,''                        ;; scan code,ASCII - a
COM_CI_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;;
                                       ;;
COM_CI_LO_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CI_SP_END-$               ;; length of state section
   DB    CIRCUMFLEX_SPACE              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
                                       ;;
   DW    COM_CI_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,94                         ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CI_SP_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Overcircle Space Bar
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_OC_SP_END-$               ;; length of state section
   DB    OVERCIRCLE_SPACE              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F8H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_OC_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,0F8H                       ;; STANDALONE OVERCIRCLE
COM_OC_SP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_OC_SP_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_GR_SP_END-$               ;; length of state section
   DB    GRAVE_SPACE                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    96,0                          ;; error character = standalone accent
                                       ;;
   DW    COM_GR_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,96                         ;; STANDALONE GRAVE
COM_GR_SP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_GR_SP_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Overdot
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;;
    DW    COM_OD_SP_END-$               ;; length of state section
    DB    OVERDOT_SPACE                 ;; State ID
    DW    ANY_KB                        ;; Keyboard Type
    DB    0FAH,0                        ;; error character = standalone accent
                                        ;;
    DW    COM_OD_SP_T1_END-$            ;; Size of xlat table
    DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
    DB    1                             ;; number of scans
    DB    57,0FAH                       ;; STANDALONE OVERDOT
COM_OD_SP_T1_END:                       ;;
                                        ;;
    DW    0                             ;;
                                        ;;
COM_OD_SP_END:                          ;;
                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_AC_LO_END-$               ;; length of state section
   DB    ACUTE_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    0EFH,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_AC_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    5                             ;; number of entries
   DB    18,082H                       ;;    e acute
   DB    22,0A3H                       ;;    u acute
   DB    23,0A1H                       ;;    i acute
   DB    24,0A2H                       ;;    o acute
   DB    30,0A0H                       ;;    a acute
COM_AC_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_AC_LO_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_AC_UP_END-$               ;; length of state section
   DB    ACUTE_UPPER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0EFH,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_AC_UP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of entries
   DB    18,090H                       ;;    E acute
COM_AC_UP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_AC_UP_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_AC_SP_END-$             ;; length of state section
   DB    ACUTE_SPACE                ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    027H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_AC_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,027H                        ;; error character = standalone accent
COM_AC_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
COM_AC_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Cedilla Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CE_LO_END-$               ;; length of state section
   DB    CEDILLA_LOWER                ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F7H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_CE_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    46,''                        ;; scan code,ASCII - 
COM_CE_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CE_LO_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Cedilla Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CE_UP_END-$               ;; length of state section
   DB    CEDILLA_UPPER                ;; State ID
   DW    ANY_KB                   ;; Keyboard Type
   DB    0F7H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_CE_UP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    46,''                        ;;     CEDILLA
COM_CE_UP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CE_UP_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Cedilla Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CE_SP_END-$             ;; length of state section
   DB    CEDILLA_SPACE                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F7H,0                        ;; error character = standalone accent
                                       ;;
   DW    COM_CE_SP_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of entries
   DB    57,0F7H                       ;; CEDILLA SPACE
COM_CE_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CE_SP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_DI_LO_END-$               ;; length of state section
   DB    DIARESIS_LOWER                ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    249,0                         ;; error character = standalone accent
                                       ;;
   DW    COM_DI_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    4                             ;; number of scans
   DB    18,''                        ;; scan code,ASCII - e
   DB    22,''                        ;; scan code,ASCII - u
   DB    24,''                        ;; scan code,ASCII - o
   DB    30,''                        ;; scan code,ASCII - a
COM_DI_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_DI_LO_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_DI_UP_END-$               ;; length of state section
   DB    DIARESIS_UPPER                ;; State ID
   DW    ANY_KB                   ;; Keyboard Type
   DB    249,0                         ;; error character = standalone accent
                                       ;;
   DW    COM_DI_UP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    3                             ;; number of scans
   DB    22,''                        ;;    U Diaeresis
   DB    24,''                        ;;    O Diaeresis
   DB    30,''                        ;;    A Diaeresis
COM_DI_UP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_DI_UP_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_DI_SP_END-$             ;; length of state section
   DB    DIARESIS_SPACE                ;; State ID
   DW    ANY_KB                   ;; Keyboard Type
   DB    249,0                         ;; error character = standalone accent
                                       ;;
   DW    COM_DI_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,249                        ;; error character = standalone accent
COM_DI_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
COM_DI_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW    0                             ;; Last State
COMMON_XLAT_END:                       ;;  END OF COMMON SECTION
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CZ Specific Translate Section for 437
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CZ_437_XLAT:                           ;;
                                       ;;
   DW     CP437_XLAT_END-$             ;; length of section
   DW     437                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP437_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP437_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    11                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP437_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP437_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP437_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CZ Specific Translate Section for 866
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CZ_866_XLAT:                           ;;
                                       ;;
   DW     CP866_XLAT_END-$             ;; length of section
   DW     866                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 866
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP866_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP866_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    11                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP866_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP866_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP866_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; CZ Specific Translate Section for 855
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CZ_855_XLAT:                           ;;
                                       ;;
   DW     CP855_XLAT_END-$             ;; length of section
   DW     855                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 855
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP855_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP855_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    11                            ;; number of entries
   DB    03H,040H                      ;;   @
   DB    04H,023H                      ;;   #
   DB    07H,05EH                      ;;   ^
   DB    08H,026H                      ;;   &
   DB    09H,024H                      ;;   $
   DB    1AH,05BH                      ;;   [
   DB    1BH,05DH                      ;;   ]
   DB    2BH,07CH                      ;;   |
   DB    33H,03CH                      ;;   <
   DB    34H,03EH                      ;;   >
   DB    35H,02FH                      ;;   /
CP855_TS_T1_END:                       ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP855_TS_END:                          ;;
                                       ;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP855_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CODE PAGE 850 MULTILINGUAL 2  SPECIFIC TRANSLATION
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC CZ_850_XLAT                    ;;
CZ_850_XLAT:                           ;;
                                       ;;
    DW   CP850_XLAT_END-$              ;;
    DW   850                           ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_NA_UP_K1_END-$            ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP850_NA_UP_K1_T1_END-$         ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    2                             ;; number of entries
   DB     5,-1                         ;; CURRENCY SYMBOL
   DB    40,015H                       ;;
CP850_NA_UP_K1_T1_END:                   ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_NA_UP_K1_END:                      ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_AL_LO_END-$             ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; error character = standalone accent
                                       ;;
   DW    CP850_AL_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    2                             ;; number of entries
   DB    13,-1
   DB    27,-1                         ;; BLOT OUT CHAR UNDER 850
CP850_AL_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_AL_LO_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_AL_UP_END-$             ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    -1,-1                         ;; error character = standalone accent
                                       ;;
   DW    CP850_AL_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    2                             ;; number of entries
   DB    13,-1                         ;; BLOT OUT CHAR UNDER 850
   DB    27,-1                         ;; BLOT OUT CHAR UNDER 850
CP850_AL_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_AL_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP850
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_CI_LO_END-$               ;; length of state section
   DB    CIRCUMFLEX_LOWER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
                                       ;;
   DW    CP850_CI_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of scans
   DB    18,88H                        ;;  e CIRCUMFLEX
   DB    23,8CH                        ;;  i CIRCUMFLEX
CP850_CI_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;;
                                       ;;
CP850_CI_LO_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Overcircle Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_OC_LO_END-$               ;; length of state section
   DB    OVERCIRCLE_LOWER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F8H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP850_OC_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    30,86H                        ;; a OVERCIRCLE
CP850_OC_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_OC_LO_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Overcircle Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_OC_UP_END-$               ;; length of state section
   DB    OVERCIRCLE_LOWER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F8H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP850_OC_UP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    30,8FH                        ;; A OVERCIRCLE
CP850_OC_UP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_OC_UP_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_GR_LO_END-$               ;; length of state section
   DB    GRAVE_LOWER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    060H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP850_GR_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    5                             ;; number of scans
   DB    18,8AH                        ;; e GRAVE
   DB    22,97H                        ;; u GRAVE
   DB    23,8DH                        ;; i GRAVE
   DB    24,95H                        ;; o GRAVE
   DB    30,85H                        ;; a GRAVE
CP850_GR_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_GR_LO_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_DI_LO_END-$             ;; length of state section
   DB    DIARESIS_LOWER                ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0FEH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP850_DI_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    16,8BH                        ;; i DIARESIS
CP850_DI_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
CP850_DI_LO_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: P12_KB+ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_DI_SP_END-$             ;; length of state section
   DB    DIARESIS_SPACE                ;; State ID
   DW    ANY_KB                   ;; Keyboard Type
   DB    0FEH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP850_DI_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,0FEH,0                     ;; error character = standalone accent
CP850_DI_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
CP850_DI_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Ogonek Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP850_OG_SP_END-$             ;; length of state section
   DB    OGONEK_SPACE                  ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0FEH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP850_OG_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,0FEH                       ;; OGONEK SPACE
CP850_OG_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP850_OG_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW    0                             ;; LAST STATE
                                       ;;
CP850_XLAT_END:                        ;; END OF CP850 SECTION
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CODE PAGE 852 MULTILINGUAL 2  SPECIFIC TRANSLATION
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC CZ_852_XLAT                    ;;
CZ_852_XLAT:                           ;;
                                       ;;
    DW     CP852_XLAT_END-$            ;;
    DW     852                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;section commented out by gy.balint     ;;
;  DW    CP852_AL_LO_END-$           ;; length of state section
;  DB    ALPHA_LOWER                   ;; State ID
;  DW    ANY_KB                          ;; Keyboard Type
;  DB    -1,-1                         ;; Buffer entry for error character
;                                      ;;
;  DW    CP852_AL_LO_T1_END-$        ;; Size of xlat table
;  DB    STANDARD_TABLE                ;; xlat options:
;  DB    2                             ;; number of entries
;  DB    13,088H                       ;; l STROKE
;  DB    27,0D0H                       ;; d STROKE
;CP852_AL_LO_T1_END:                  ;;
                                       ;;
;  DW    0                             ;; Size of xlat table - null table
                                       ;;
;CP852_AL_LO_END:                     ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;section commented out by gy. balint   ;;
;  DW    CP852_AL_UP_END-$           ;; length of state section
;  DB    ALPHA_UPPER                   ;; State ID
;  DW    ANY_KB                          ;; Keyboard Type
;  DB    -1,-1                         ;; Buffer entry for error character
;                                      ;;
;  DW    CP852_AL_UP_T1_END-$        ;; Size of xlat table
;  DB    STANDARD_TABLE                ;; xlat options:
;  DB    2                             ;; number of entries
;  DB    13,09DH                       ;; L STROKE
;  DB    27,0D1H                       ;; D STROKE
;CP852_AL_UP_T1_END:                  ;;
                                       ;;
;  DW    0                             ;; Size of xlat table - null table
                                       ;;
;CP852_AL_UP_END:                     ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Third Shift
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_THIRD_END-$               ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type FERRARI
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP852_THIRD_T1_END-$            ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    8                             ;; number of entries
   DB    19,09EH,13H                   ;;
   DB    22,0CFH,16H                   ;; CURRENCY SYMBOL
   DB    27,09eh,1bh                   ;; multiple sign               x
   DB    31,0d0h,1fh                   ;; d stroke small              x
   DB    32,0d1h,20h                   ;; D stroke capital            x
   DB    37,088h,025h                  ;; l stroke small              x
   DB    38,09dh,026h                  ;; L stroke capital
   DB    43,0cfh,02Bh                  ;; sun
CP852_THIRD_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Last xlat table
CP852_THIRD_END:                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE:CP 852
;; STATE: Non-alpha lower case
;; KEYBOARD TYPES: G
;;TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_NA_LO_K1_END-$          ;; length of section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                          ;; Keyboard type
   DB    -1,-1                         ;; Buffer entry for error chars.
                                       ;;
   DW    CP852_NA_LO_K1_T1_END-$       ;; Size of xlat table
   DB STANDARD_TABLE                   ;; xlat options:
   DB    13                            ;; NUMBER OF ENTRIES
   DB    03h,0d8h                      ;;       e caron small     x
   DB    04h,0e7h                      ;;       s caron small     x
   DB    05h,09fh                      ;;       c caron small     x
   DB    06h,0fdh                      ;;       r caron small     x
   DB    07h,0a7h                      ;;       z caron small     x
   DB    08h,0ech                      ;;       y acute small     x
   DB    09h,0a0h                      ;;       a acute small     x
   DB    0ah,0a1h                      ;;       i acute small     x
   DB    0bh,082h                      ;;       e acute small     x
;  DB    0DH,0EFH                      ;;       ACUTE ACCENT DEAD KEY!
   DB    01ah,0a3h                     ;;       u acute small     x
   DB    027h,085h                     ;;       u overdot small   x
   DB    028h,0f5h                     ;;       section symbol    x
   DB    02Bh,0f9h                     ;;       diaresis accent   x

CP852_NA_LO_K1_T1_END:
   DW   0
CP852_NA_LO_K1_END:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP852
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                     ;;
;; DW    CP852_NA_UP_K1_END-$            ;; length of state section
;; DB    NON_ALPHA_UPPER               ;; State ID
;; DW    ANY_KB                          ;; Keyboard Type
;; DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
;; DW    CP852_NA_UP_K1_T1_END-$         ;; Size of xlat table
;; DB    STANDARD_TABLE                ;; xlat options:
;; DB    2                             ;; number of entries
;; DB    029h,0f8h                     ;; overcircle
;; DB    0dh,0f3h                      ;; caron
;;CP852_NA_UP_K1_T1_END:                   ;;
                                       ;;
;; DW    0                             ;; Size of xlat table - null table
                                       ;;
;;CP852_NA_UP_K1_END:                      ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Caron Lower
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_CA_LO_END-$             ;; length of state section
   DB    CARON_LOWER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F3H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_CA_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    9                             ;; number of scans
   DB    18,0D8H                       ;; e CARON
   DB    19,0FDH                       ;; r CARON
   DB    20,09CH                       ;; t CARON
   DB    21,0A7H                       ;; z CARON
   DB    31,0E7H                       ;; s CARON
   DB    32,0D4H                       ;; d CARON
   DB    38,096H                       ;; l CARON
   DB    46,09FH                       ;; c CARON
   DB    49,0E5H                       ;; n CARON
CP852_CA_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_CA_LO_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Caron Upper
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_CA_UP_END-$             ;; length of state section
   DB    CARON_UPPER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F3H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_CA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    9                             ;; number of scans
   DB    18,0B7H                       ;; E CARON
   DB    19,0FCH                       ;; R CARON
   DB    20,09BH                       ;; T CARON
   DB    21,0A6H                       ;; Z CARON
   DB    31,0E6H                       ;; S CARON
   DB    32,0D2H                       ;; D CARON
   DB    38,095H                       ;; L CARON
   DB    46,0ACH                       ;; C CARON
   DB    49,0D5H                       ;; N CARON
CP852_CA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_CA_UP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Caron Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                       ;;
;;   DW    CP852_CA_SP_END-$             ;; length of state section
;;   DB    CARON_SPACE                   ;; State ID
;;   DW    ANY_KB                          ;; Keyboard Type
;;   DB    0F3H,0                        ;; error character = standalone accent
;;                                       ;;
;;   DW    CP852_CA_SP_T1_END-$          ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;;   DB    1                             ;; number of scans
;;   DB    57,0F3H                       ;; e CARON
;;CP852_CA_SP_T1_END:                    ;;
;;                                       ;;
;;   DW    0                             ;; Size of xlat table - null table
;;                                       ;;
;;CP852_CA_SP_END:                       ;; length of state section
;;                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_CI_UP_END-$             ;; length of state section
   DB    CIRCUMFLEX_UPPER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    05EH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_CI_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    3                             ;; number of scans
   DB    23,0D7H                       ;; I CIRCUMFLEX
   DB    24,0E2H                       ;; O CIRCUMFLEX
   DB    30,0B6H                       ;; A CIRCUMFLEX
CP852_CI_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_CI_UP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Breve Lower
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_BR_LO_END-$             ;; length of state section
   DB    BREVE_LOWER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F4H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_BR_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    30,0C7H                       ;; a BREVE
CP852_BR_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_BR_LO_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Breve Upper
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_BR_UP_END-$             ;; length of state section
   DB    BREVE_UPPER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F4H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_BR_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    30,0C6H                       ;; A BREVE
CP852_BR_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_BR_UP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Breve Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                       ;;
;;   DW    CP852_BR_SP_END-$             ;; length of state section
;;   DB    BREVE_SPACE                   ;; State ID
;;   DW    ANY_KB                          ;; Keyboard Type
;;   DB    0F4H,0                        ;; error character = standalone accent
;;                                       ;;
;;   DW    CP852_BR_SP_T1_END-$          ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;;   DB    1                             ;; number of scans
;;   DB    57,0F4H                       ;; BREVE SPACE
;;CP852_BR_SP_T1_END:                    ;;
;;                                       ;;
;;   DW    0                             ;; Size of xlat table - null table
;;                                       ;;
;;CP852_BR_SP_END:                       ;; length of state section
;;                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Overcirle Lower
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_OC_LO_END-$             ;; length of state section
   DB    OVERCIRCLE_LOWER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F8H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_OC_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    22,085H                       ;; u OVERCIRCLE
CP852_OC_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_OC_LO_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Overcircle Upper
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_OC_UP_END-$             ;; length of state section
   DB    OVERCIRCLE_UPPER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F8H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_OC_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    22,0DEH                       ;; O OVERCIRCLE
CP852_OC_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_OC_UP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Ogonek Lower
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_OG_LO_END-$             ;; length of state section
   DB    OGONEK_LOWER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F2H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_OG_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of scans
   DB    18,0A9H                       ;; e OGONEK
   DB    30,0A5H                       ;; a OGONEK
CP852_OG_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_OG_LO_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Ogonek Upper
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_OG_UP_END-$             ;; length of state section
   DB    OGONEK_UPPER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F2H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_OG_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of scans
   DB    18,0A8H                       ;; E OGONEK
   DB    30,0A4H                       ;; A OGONEK
CP852_OG_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_OG_UP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Ogonek Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                       ;;
;;   DW    CP852_OG_SP_END-$             ;; length of state section
;;   DB    OGONEK_SPACE                  ;; State ID
;;   DW    ANY_KB                          ;; Keyboard Type
;;   DB    0F2H,0                        ;; error character = standalone accent
;;                                       ;;
;;   DW    CP852_OG_SP_T1_END-$          ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;;   DB    1                             ;; number of scans
;;   DB    57,0F2H                       ;; OGONEK SPACE
;;CP852_OG_SP_T1_END:                    ;;
;;                                       ;;
;;   DW    0                             ;; Size of xlat table - null table
;;                                       ;;
;;CP852_OG_SP_END:                       ;; length of state section
;;                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Overdot Lower
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_OD_LO_END-$             ;; length of state section
   DB    OVERDOT_LOWER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0FAH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_OD_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    21,0BEH                       ;; z OVERDOT
CP852_OD_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_OD_LO_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Overdot Upper
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_OD_UP_END-$             ;; length of state section
   DB    OVERDOT_UPPER              ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0FAH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_OD_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    21,0BDH                       ;; Z OVERDOT
CP852_OD_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_OD_UP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_AC_LO_END-$             ;; length of state section
   DB    ACUTE_LOWER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0EFH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_AC_LO_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    7                             ;; number of entries
   DB    19,0EAH                       ;; r ACUTE
   DB    21,0ABH                       ;; z ACUTE
   DB    31,098H                       ;; s ACUTE
   DB    38,092H                       ;; l ACUTE
   DB    44,0ECH                       ;; y ACUTE
   DB    46,086H                       ;; c ACUTE
   DB    49,0E4H                       ;; n ACUTE
CP852_AC_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_AC_LO_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_AC_UP_END-$             ;; length of state section
   DB    ACUTE_UPPER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0EFH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_AC_UP_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    11                            ;; number of entries
   DB    19,0E8H                       ;; R ACUTE
   DB    21,08DH                       ;; Z ACUTE
   DB    22,0E9H                       ;; U ACUTE
   DB    23,0D6H                       ;; I ACUTE
   DB    24,0E0H                       ;; O ACUTE
   DB    30,0B5H                       ;; A ACUTE
   DB    31,097H                       ;; S ACUTE
   DB    38,091H                       ;; L ACUTE
   DB    44,0EDH                       ;; Y ACUTE
   DB    46,08FH                       ;; C ACUTE
   DB    49,0E3H                       ;; N ACUTE
CP852_AC_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_AC_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: P12_KB+ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_AC_SP_END-$             ;; length of state section
   DB    ACUTE_SPACE                ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0EFH,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_AC_SP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,0EFH                       ;; error character = standalone accent
CP852_AC_SP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
CP852_AC_SP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Double Acute Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_DC_LO_END-$             ;; length of state section
   DB    DOUBLEACUTE_LOWER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F1H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_DC_LO_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of entries
   DB    22,0FBH                       ;; u DOUBLEACUTE
   DB    24,08BH                       ;; o DOUBLEACUTE
CP852_DC_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_DC_LO_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Double Acute Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_DC_UP_END-$             ;; length of state section
   DB    DOUBLEACUTE_UPPER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F1H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_DC_UP_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of entries
   DB    22,0EBH                       ;; U DOUBLEACUTE
   DB    24,08AH                       ;; O DOUBLEACUTE
CP852_DC_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_DC_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Double Acute Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                       ;;
;;   DW    CP852_DC_SP_END-$             ;; length of state section
;;   DB    DOUBLEACUTE_SPACE                   ;; State ID
;;   DW    ANY_KB                          ;; Keyboard Type
;;   DB    0F1H,0                        ;; error character = standalone accent
;;                                       ;;
;;   DW    CP852_DC_SP_T1_END-$        ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;;   DB    1                             ;; number of entries
;;   DB    57,0F1H                       ;; DOUBLEACUTE SPACE
;;CP852_DC_SP_T1_END:                    ;;
;;                                       ;;
;;   DW    0                             ;; Size of xlat table - null table
;;                                       ;;
;;CP852_DC_SP_END:                       ;;
;;                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_DI_UP_END-$             ;; length of state section
   DB    DIARESIS_UPPER                ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    249,0                         ;; error character = standalone accent
                                       ;;
   DW    CP852_DI_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    18,0D3H                       ;;    E Diaeresis
CP852_DI_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_DI_UP_END:                       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Cedilla Lower Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_CE_LO_END-$             ;; length of state section
   DB    CEDILLA_LOWER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F7H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_CE_LO_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of entries
   DB    20,0EEH                       ;; t CEDILLA
   DB    31,0ADH                       ;; s CEDILLA
CP852_CE_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_CE_LO_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Cedilla Upper Case
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP852_CE_UP_END-$             ;; length of state section
   DB    CEDILLA_UPPER                   ;; State ID
   DW    ANY_KB                          ;; Keyboard Type
   DB    0F7H,0                        ;; error character = standalone accent
                                       ;;
   DW    CP852_CE_UP_T1_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    2                             ;; number of entries
   DB    20,0DDH                       ;; T CEDILLA
   DB    31,0B8H                       ;; S CEDILLA
CP852_CE_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP852_CE_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 852
;; STATE: Cedilla Space
;; KEYBOARD TYPES: ANY_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                       ;;
;;   DW    CP852_CE_SP_END-$             ;; length of state section
;;   DB    CEDILLA_SPACE                   ;; State ID
;;   DW    ANY_KB                          ;; Keyboard Type
;;   DB    0F7H,0                        ;; error character = standalone accent
;;                                       ;;
;;   DW    CP852_CE_SP_T1_END-$        ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;;   DB    1                             ;; number of entries
;;   DB    57,0F7H                       ;; CEDILLA SPACE
;;CP852_CE_SP_T1_END:                    ;;
;;                                       ;;
;;   DW    0                             ;; Size of xlat table - null table
;;                                       ;;
;;CP852_CE_SP_END:                       ;;
;;                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP852_XLAT_END:                        ;;  END OF CP852 SECTION
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CODE     ENDS                          ;;  END OF PROGRAM
         END                           ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfeof.asm ===
;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *



	PAGE	,132
	TITLE	PC DOS TUGBOAT Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS TUGBOAT - NLS Support - Keyboard Definition File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the eof marker for the entire table
;; and the keyboard.sys copyright information
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
				       ;;
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Copyright statement
;;	DB 'KEYBOARD.SYS Version TUGBOAT (C) Copyright IBM Corp. 1986,1987,1988',13,10  ;;
;;	DB 'Authors : Bill Devlin, Nick Savage, Mike Saunders, et al..',13,10
;;	DB 'Development: Toronto,Boca Raton,Basingstoke',13,10

include copyrigh.inc
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DB  1AH 		       ;; EOF
				       ;;
CODE	ENDS			       ;;
	END			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfet.asm ===
PAGE	,132

;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

	TITLE	PC DOS 3.3 Keyboard Definition File
;LATEST CHANGE MULTIPLICATION & DIVISION SIGNS
;DOLLAR SIGN output ON P12 should be International Currency sign
;Enabled P12 Tag for CP850 UC section
;****************** CNS 12/18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Definition File
;; (c) Copyright IBM Corp 1986,1987
;;
;; This file contains the keyboard tables for Estonian
;;                                        <<kchang:modify kdfsv.asm>>
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;; Updated:    MIKE SAUNDERS - WSD IBM Hursley Laboratory - August 1986
;;	       NICK SAVAGE   - ESD IBM Boca Raton Laboratory -August- December 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC ET_LOGIC 	       ;;
	PUBLIC ET_775_XLAT	       ;; <<kchang:replace cp437>>
	PUBLIC ET_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; SV State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
ET_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW  0			       ;; special features
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;  ***BD - THIS SECTION HAS BEEN UPDATED
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 IFF EITHER_CTL,NOT		       ;;
    IFF EITHER_ALT,NOT		       ;;
      IFF EITHER_SHIFT		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF			       ;;
	  SET_FLAG DEAD_LOWER	       ;;
      ENDIFF			       ;;
    ELSEF			       ;;
      IFKBD G_KB+P12_KB 	       ;; For ENHANCED keyboard some
      ANDF R_ALT_SHIFT		       ;;  dead keys are on third shift
      ANDF EITHER_SHIFT,NOT	       ;;   which is accessed via the altgr key
	 SET_FLAG DEAD_THIRD	       ;;
      ENDIFF			       ;;
    ENDIFF			       ;;
 ENDIFF 			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS           <<kdchang:used it for Caron>>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF CARON,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CARON_SPACE	       ;;  exist for 437 so beep for
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT CARON_LOWER    ;;
	    ELSEF		       ;;
	       XLATT CARON_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT CARON_UPPER    ;;
	    ELSEF		       ;;
	       XLATT CARON_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR CARON_LOWER    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO TILDE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TILDE_PROC:			       ;;
				       ;;
   IFF TILDE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT TILDE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_UPPER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_LOWER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_TILDE:			       ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;; ***BD - NON_DEAD THRU LOGIC_END IS UPDATED
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NON_DEAD:			       ;;
;ADDED FOR DIVIDE SIGN		       ;; ***** DIVIDE OMITTED **** CNS
    IFKBD G_KB+P12_KB			;; Avoid accidentally translating
    ANDF LC_E0				;;  the "/" on the numeric pad of the
;     IFF EITHER_CTL,NOT	       ;; country comforms with U.S. currently
;     ANDF EITHER_ALT,NOT
;	XLATT DIVIDE_SIGN	       ;;
;     ENDIFF
;BD END OF ADDITION
      EXIT_STATE_LOGIC		       ;;
    ENDIFF			       ;;

;*** IanJa Moved ALT and CTRL to beginning.				       ;;
;**************************************;;
 IFKBD AT_KB+JR_KB+XT_KB	       ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF ALT_SHIFT		       ;; ALT - case
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
 ENDIFF 			       ;;
				       ;;
 IFKBD G_KB+P12_KB		       ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF ALT_SHIFT		       ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT	       ;;
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
 ENDIFF 	
;**************************************;;
;*** IanJa end of ALT and CTRL cases
  	       ;;
 IFF  EITHER_CTL,NOT		       ;; Lower and upper case.  Alphabetic
 ANDF EITHER_ALT,NOT		       ;; keys are affected by CAPS LOCK.
    IFF EITHER_SHIFT		       ;; Numeric keys are not.
;;***BD ADDED FOR NUMERIC PAD
	IFF NUM_STATE,NOT	       ;;
	    XLATT NUMERIC_PAD          ;;
	ENDIFF			       ;;
;;***BD END OF ADDITION
	XLATT NON_ALPHA_UPPER          ;;
	IFF CAPS_STATE		       ;;
	    XLATT ALPHA_LOWER          ;;
	ELSEF 			       ;;
	    XLATT ALPHA_UPPER          ;;
	ENDIFF			       ;;
    ELSEF			       ;;
;;***BD ADDED FOR NUMERIC PAD
	IFF NUM_STATE 		       ;;
	    XLATT NUMERIC_PAD          ;;
	ENDIFF			       ;;
;;***BD END OF ADDITION
	XLATT NON_ALPHA_LOWER          ;;
	IFF CAPS_STATE		       ;;
	   XLATT ALPHA_UPPER	       ;;
	ELSEF 			       ;;
	   XLATT ALPHA_LOWER	       ;;
	ENDIFF			       ;;
    ENDIFF			       ;; Third and Fourth shifts
 ELSEF				       ;; ctl or alt on at this point
    IFKBD XT_KB+AT_KB+JR_KB	       ;; XT, AT, JR keyboards. Nordics
        IFF  EITHER_CTL		       ;;
	ANDF ALT_SHIFT		
	   IFF EITHER_SHIFT	       ;; only.
	      XLATT FOURTH_SHIFT       ;; ALT + shift
	   ELSEF		       ;;
	      XLATT THIRD_SHIFT	       ;; ALT
	   ENDIFF		       ;;
	ENDIFF 			       ;;
    ELSEF			       ;; ENHANCED keyboard
	IFF R_ALT_SHIFT		       ;; ALTGr
	   IFF  EITHER_CTL, NOT	       ;;
	   ANDF R_ALT_SHIFT	       ;;
	      IFF EITHER_SHIFT,NOT     ;;
		 XLATT THIRD_SHIFT     ;;
	      ELSEF		       ;;
		 XLATT FOURTH_SHIFT    ;; AltGr+Shift
	      ENDIFF		       ;;
	   ENDIFF		       ;;
	ENDIFF 			       ;;
    ENDIFF			       ;;
    ENDIFF			       ;;
 ENDIFF 			       ;;
;**************************************;;
         			       ;;
 EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; SV Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC ET_COMMON_XLAT		       ;;
ET_COMMON_XLAT: 		       ;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_END-$	       ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 2			       ;; number of entries
   DB	 13			       ;; scan code
   FLAG  ACUTE			       ;; flag bit to set
   DB	 029H			       ;;
   FLAG  CARON		       ;;
				       ;;
				       ;;
COM_DK_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_END-$	       ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 2			       ;; number of entries
   DB	 13			       ;; scan code
   FLAG  GRAVE			       ;; flag bit to set
   DB	 029H			       ;;
   FLAG  TILDE		       ;;
				       ;;
COM_DK_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_TH_END-$	       ;; length of state section
   DB	 DEAD_THIRD		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 028H			       ;; scan code
   FLAG  CIRCUMFLEX			       ;; flag bit to set
				       ;;
COM_DK_TH_END:			       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;******************************
;;***BD - ADDED FOR NUMERIC PAD (DECIMAL SEPERATOR)
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common		       ;;********* CNS ******* change
;; STATE: Numeric Key Pad
;; KEYBOARD TYPES: All except the p12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_PAD_K1_END-$	       ;; length of state section
   DB	 NUMERIC_PAD		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB	       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_PAD_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	 83,','                        ;; decimal seperator = ,
COM_PAD_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_PAD_K1_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;******************************
;;***BD - ADDED FOR ALT CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K1_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_ALT_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 0			       ;; 2 number of entries
;   DB	  12,-1,-1			;;
;   DB	  53,0,82H			;;
COM_ALT_K1_T1_END:		       ;;
					;;
    DW	  0				;; Size of xlat table - null table
				       ;;
COM_ALT_K1_END: 		       ;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;******************************
;;***BD - ADDED FOR CTRL CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: XT, JR, AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K1_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 XT_KB+JR_KB+AT_KB	       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_CTRL_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 2			       ;; number of entries
   DB	 12,-1,-1		       ;;
   DB	 53,01FH,35h		       ;;
COM_CTRL_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CTRL_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K2_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_CTRL_K2_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 8			       ;; number of entries
   DB	  9,01BH,09H		       ;;
   DB	 10,01DH,0AH		       ;;
   DB	 12,-1,-1		       ;;
   DB	 26,-1,-1		       ;;
   DB	 27,-1,-1		       ;;
   DB	 43,-1,-1		       ;;
   DB	 53,01FH,35H			;;
   DB	 86,01CH,56H			;;
COM_CTRL_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CTRL_K2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 26,081H		       ;; u-diaeresis
   DB	 27,0e4H		       ;; o-tilde
   DB	 39,094H		       ;; o-diaeresis
   DB	 40,084H		       ;; a-diaeresis
COM_AL_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 26,09aH		       ;; U-DIAERESIS
   DB	 27,0e5H		       ;; O-Tilde
   DB	 39,099H		       ;; A-DIAERESIS
   DB	 40,08eH		       ;; O-DIAERESIS
COM_AL_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 12,"+"                        ;; + INCLUDED FOR SIMPLIC.
   DB	 43,"'"                        ;; '
   DB	 86,"<"                        ;; <
   DB	 53,"-"                        ;; -
COM_NA_LO_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K1_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: XT + JR
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 XT_KB+JR_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K2_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 12,"+"                        ;; +
   DB	 41,"'"                        ;; '
   DB	 43,"<"                        ;; <
   DB	 53,"-"                        ;; -
COM_NA_LO_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K2_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K3_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K3_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 12,"+"                        ;; +
   DB	 41,"<"                        ;; <
   DB	 43,"'"                        ;; '
   DB	 53,"-"                        ;; -
COM_NA_LO_K3_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K3_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB + P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 13			       ;; number of entries
   DB	  3,'"'                        ;;
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 41,''                        ;;
   DB	 43,'*'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;
   DB	 86,'>'                        ;;
COM_NA_UP_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K1_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT + JR
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB + JR_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K2_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 13			       ;; number of entries
   DB	  3,'"'                        ;;
   DB	  4,09CH		       ;; POUND STERLING
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 41,'*'                        ;;
   DB	 43,'>'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;
COM_NA_UP_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K2_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K3_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K3_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 13			       ;; number of entries
   DB	  3,'"'                        ;;
   DB	  4,09CH		       ;; POUND STERLING
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 41,'>'                        ;;
   DB	 43,'*'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;
COM_NA_UP_K3_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K3_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type FERRARI
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 11			       ;; number of entries
   DB	  3,'@'                        ;;
   DB	  4,09CH		       ;; 
   DB	  5,'$'                        ;;
   DB	  8,'{'                        ;;
   DB	  9,'['                        ;;
   DB	 10,']'                        ;;
   DB	 11,'}'                        ;;
   DB	 12,'\'                        ;; Broken Vertical Line
   DB	 01bH,0f5H                     ;; Section Sign
   DB	 02bH,0abH                     ;; 1/2 sign
   DB	 86,'|'                        ;;
COM_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift (ALTERNATE)
;; KEYBOARD TYPES: XT, JR
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K1_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 XT_KB+JR_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 9			       ;; number of entries
   DB	 12,'-','-'                    ;;
   DB	 13,'=','='                    ;;
   DB	 26,'[','['                    ;;
   DB	 27,']',']'                    ;;
   DB	 39,';',';'                    ;;
   DB	 40,027H,027H		       ;;
   DB	 41,060H,060H		       ;;
   DB	 43,'\','\'                    ;;
   DB	 53,'/','/'                    ;;
COM_THIRD_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift (ALTERNATE)
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K2_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_K2_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 9			       ;; number of entries
   DB	 12,'-','-'                    ;;
   DB	 13,'=','='                    ;;
   DB	 26,'[','['                    ;;
   DB	 27,']',']'                    ;;
   DB	 39,';',';'                    ;;
   DB	 40,027H,027H		       ;;
   DB	 41,'\','\'                    ;;
   DB	 43,060H,060H		       ;;
   DB	 53,'/','/'                    ;;
COM_THIRD_K2_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Fourth Shift (ALTERNATE+SHIFT)
;; KEYBOARD TYPES: XT, JR
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_FOURTH_END-$	       ;; length of state section
   DB	 FOURTH_SHIFT		       ;; State ID
   DW	 XT_KB+JR_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_FOURTH_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 18			       ;; number of entries
   DB	  3,'@','@'                    ;;
   DB	  4,'#','#'                    ;;
   DB	  7,'^','^'                    ;;
   DB	  8,'&','&'                    ;;
   DB	  9,'*','*'                    ;;
   DB	 10,'(','('                    ;;
   DB	 11,')',')'                    ;;
   DB	 12,'_','_'                    ;;
   DB	 13,'+','+'                    ;;
   DB	 26,'{','{'                    ;;
   DB	 27,'}','}'                    ;;
   DB	 39,':',':'                    ;;
   DB	 40,'"','"'                    ;;
   DB	 41,'~','~'                    ;;
   DB	 43,'|','|'                    ;;
   DB	 51,'<','<'                    ;;
   DB	 52,'>','>'                    ;;
   DB	 53,'?','?'                    ;;
COM_FOURTH_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_FOURTH_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Fourth Shift (ALTERNATE+SHIFT)
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_FOURTH_K1_END-$	       ;; length of state section
   DB	 FOURTH_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_FOURTH_K1_T1_END-$        ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 18			       ;; number of entries
   DB	  3,'@','@'                    ;;
   DB	  4,'#','#'                    ;;
   DB	  7,'^','^'                    ;;
   DB	  8,'&','&'                    ;;
   DB	  9,'*','*'                    ;;
   DB	 10,'(','('                    ;;
   DB	 11,')',')'                    ;;
   DB	 12,'_','_'                    ;;
   DB	 13,'+','+'                    ;;
   DB	 26,'{','{'                    ;;
   DB	 27,'}','}'                    ;;
   DB	 39,':',':'                    ;;
   DB	 40,'"','"'                    ;;
   DB	 41,'|','|'                    ;;
   DB	 43,'~','~'                    ;;
   DB	 51,'<','<'                    ;;
   DB	 52,'>','>'                    ;;
   DB	 53,'?','?'                    ;;
COM_FOURTH_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_FOURTH_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_LO_END-$	       ;; length of state section
   DB	 GRAVE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
;   DB	 18,089H                        ;; scan code,ASCII - e
;   DB	 22,0d7H                        ;; scan code,ASCII - u
;   DB	 23,''                        ;; scan code,ASCII - i
;   DB	 24,093H                        ;; scan code,ASCII - o
;   DB	 30,083H                        ;; scan code,ASCII - a
COM_GR_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_SP_END-$	       ;; length of state section
   DB	 GRAVE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,96			       ;; STANDALONE GRAVE
COM_GR_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
;   DB	 18,0d2H                        ;; scan code,ASCII - e
;   DB	 22,0d6H                       ;; scan code,ASCII - u
;   DB	 23,0d4H                       ;; scan code,ASCII - i
;   DB	 24,''                        ;; scan code,ASCII - o
;   DB	 30,0d0H                       ;; scan code,ASCII - a
;   DB	 031H,0ecH                     ;; scan code,ASCII - n
;   DB	 022H,085H                     ;; scan code,ASCII - g
;   DB	 025H,0e9H                     ;; scan code,ASCII - k
;   DB	 026H,0ebH                     ;; scan code,ASCII - l
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  COM_TI_LO_END-$		;; length of state section
    DB	  TILDE_LOWER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  COM_TI_LO_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  1				;; number of scans
    DB	  49,0e4H			;; o-tilde
 COM_TI_LO_T1_END:			;;
					;;
    DW	  0				;;
					;;
 COM_TI_LO_END: 			;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: Common
;;; STATE: Tilde Upper Case
;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  COM_TI_UP_END-$		;; length of state section
    DB	  TILDE_UPPER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  COM_TI_UP_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  1				;; number of scans
    DB	  49,0e5H			;; O-tilde
 COM_TI_UP_T1_END:			;;
					;;
    DW	  0				;; Size of xlat table - null table
					;;
 COM_TI_UP_END: 			;; length of state section
					;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_TI_SP_END-$	       ;; length of state section
   DB	 TILDE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 07EH,0 		       ;; error character = standalone accent
				       ;;
   DW	 COM_TI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,07EH		       ;; STANDALONE TILDE
COM_TI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_TI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; ET Specific Translate Section for 775
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC ET_775_XLAT		       ;;
ET_775_XLAT:			       ;;
				       ;;
   DW	  CP775_XLAT_END-$	       ;; length of section
   DW	  775			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_NA_UP_END-$		 ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP775_NA_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	 5,09fH			       ;; International Currency Symb
CP775_NA_UP_T1_END:		       ;;
				       ;;
    DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_NA_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
;   DW	 CP775_NA_K1_LO_END-$	       ;; length of state section
;   DB	 NON_ALPHA_LOWER	       ;; State ID
;   DW	 G_KB+P12_KB		       ;; Keyboard Type
;   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
;   DW	 CP775_NA_LO_K1_T1_END-$       ;; Size of xlat table
;   DB	 STANDARD_TABLE 	       ;; xlat options:
;   DB	 0			       ;; number of entries
;   DB	 41,015H		       ;; SECTION Symb

;CP775_NA_LO_K1_T1_END:		       ;;
				       ;;
;   DW	 0			       ;; Size of xlat table - null table
				       ;;
;CP775_NA_K1_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: THIRD_SHIFT
;; KEYBOARD TYPES: ALL
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT	       ;; State ID
   DW	 ANY_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP775_THIRD_T1_END-$       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 2			       ;; number of entries
   DB	 01fH,0d5H		       ;; s-caron
   DB	 02cH,0d8H		       ;; z-caron
CP775_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_THIRD_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Fourth Shift (ALTERNATE+SHIFT)
;; KEYBOARD TYPES: ALL
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_FOURTH_END-$	       ;; length of state section
   DB	 FOURTH_SHIFT	       ;; State ID
   DW	 ANY_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP775_FOURTH_T1_END-$       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 2			       ;; number of entries
   DB	 01fH,0beH		       ;; S-caron
   DB	 02cH,0cfH		       ;; Z-caron
CP775_FOURTH_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_FOURTH_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Grave Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_GR_LO_END-$		 ;; length of state section
   DB	 GRAVE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 060H,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_GR_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 4			       ;; number of scans
   DB	 012H,089H                     ;; e-macron
   DB	 016H,0d7H                     ;; u-macron
   DB	 018H,093H                     ;; o-macron
   DB	 01eH,083H                     ;; a-macron
CP775_GR_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_GR_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Grave Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_GR_UP_END-$		 ;; length of state section
   DB	 GRAVE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 060H,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_GR_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 4			       ;; number of scans
   DB	 012H,0edH                     ;; E-macron
   DB	 016H,0c7H                     ;; U-macron
   DB	 018H,0e2H                     ;; O-macron
   DB	 01eH,0a0H                     ;; A-macron
CP775_GR_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_GR_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_AC_LO_END-$		 ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_AC_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,082H                       ;; e-acute
   DB	 24,0a2H                       ;; o-acute
   DB	 031H,0e7H                     ;; n-acute
   DB	 02eH,087H                     ;; c-acute
   DB	 01fH,098H                     ;; s-acute
   DB	 02cH,0a5H                     ;; z-acute
CP775_AC_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_AC_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,090H                       ;; E-acute
   DB	 24,0e0H                       ;; O-acute
   DB	 031H,0e3H                     ;; N-acute
   DB	 02eH,080H                     ;; C-acute
   DB	 01fH,097H                     ;; S-acute
   DB	 02cH,08dH                     ;; Z-acute
CP775_AC_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_AC_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,39			       ;; scan code,ASCII - SPACE
CP775_AC_SP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_AC_SP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Circumflex Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_CI_LO_END-$		 ;; length of state section
   DB	 CIRCUMFLEX_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 05eH,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_CI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 8			       ;; number of scans
   DB	 012H,0d2H                     ;; e-ogonek
   DB	 016H,0d6H                     ;; u-ogonek
   DB	 017H,0d4H                     ;; i-ogonek
   DB	 01eH,0d0H                     ;; a-ogonek
   DB	 022H,085H                     ;; g-Cedilla
   DB	 025H,0e9H                     ;; k-Cedilla
   DB	 026H,0ebH                     ;; l-Cedilla
   DB	 031H,0ecH                     ;; n-Cedilla
CP775_CI_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_CI_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Circumflex Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_CI_UP_END-$		 ;; length of state section
   DB	 CIRCUMFLEX_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 05eH,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_CI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 8			       ;; number of scans
   DB	 012H,0b7H                     ;; E-ogonek
   DB	 016H,0c6H                     ;; U-ogonek
   DB	 017H,0bdH                     ;; I-ogonek
   DB	 01eH,0b5H                     ;; A-ogonek
   DB	 022H,095H                     ;; G-Cedilla
   DB	 025H,0e8H                     ;; K-Cedilla
   DB	 026H,0eaH                     ;; L-Cedilla
   DB	 031H,0eeH                     ;; N-Cedilla
CP775_CI_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_CI_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP775
;; STATE: Caron Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_DI_LO_END-$		 ;; length of state section
   DB	 CARON_LOWER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 05eH,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_DI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 01fH,0d5H                     ;; s-caron
   DB	 02eH,0d1H                     ;; c-caron
   DB	 02cH,0d8H                     ;; z-caron
CP775_DI_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_DI_LO_END:			 ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP775
;; STATE: Caron Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP775_DI_UP_END-$		 ;; length of state section
   DB	 CARON_UPPER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 05eH,0			       ;; error character = standalone accent
				       ;;
   DW	 CP775_DI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 01fH,0beH                     ;; S-caron
   DB	 02eH,0b6H                     ;; C-caron
   DB	 02cH,0cfH                     ;; Z-caron
CP775_DI_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP775_DI_UP_END:			 ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 775
;; STATE: Caron Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;				       ;;
  DW	 CP775_DI_SP_END-$		 ;; length of state section
  DB	 CARON_SPACE 	       ;; State ID
  DW	 ANY_KB 		       ;; Keyboard Type
  DB	 05eH,0			       ;; error character = standalone accent
				       ;;
  DW	 CP775_DI_SP_T1_END-$		 ;; Size of xlat table
  DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
  DB	 1			       ;; number of scans
  DB	 57,05eH 		       ;; error character = standalone accent
CP775_DI_SP_T1_END:			 ;;
				       ;;
  DW	 0			       ;; Size of xlat table - null table
CP775_DI_SP_END:			 ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	  0			       ;; LAST STATE
				       ;;
CP775_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; ET Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC ET_850_XLAT		       ;;
ET_850_XLAT:			       ;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Numeric Pad - Divide Sign
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;				       ;;
;  DW	 CP850_DIVID_END-$	       ;; length of state section
;  DB	 DIVIDE_SIGN		       ;; State ID
;  DW	 G_KB+P12_KB		       ;; Keyboard Type
;  DB	 -1,-1			       ;; error character = standalone accent
;				       ;;
;  DW	 CP850_DIVID_T1_END-$	       ;; Size of xlat table
;  DB	 TYPE_2_TAB		       ;; xlat options:
;  DB	 0			       ;; number of scans
;  DB	 0E0H,0F6H,0E0H 	       ;; DIVIDE SIGN omitted sv/su
;  DB	 53,0F6H,0E0H		       ;; has decidied to stick with U.S.
;  DB	 0E0H,09eH,0E0H 	       ;; standards in order to use BASIC
;  DB	 55,09eH,0E0H		       ;;
;CP850_DIVID_T1_END:			;;
;					;;
;   DW	  0				;; Size of xlat table - null table
;					;;
;CP850_DIVID_END:			;;
;					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Numeric Key Pad - Multiplication
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					;;
;  DW	 CP850_PAD_K1_END-$	       ;; length of state section
;  DB	 NUMERIC_PAD		       ;; State ID
;  DW	 G_KB+P12_KB		       ;; Keyboard Type
;  DB	 -1,-1			       ;; Buffer entry for error character
;				       ;;
;  DW	 CP850_PAD_K1_T1_END-$	       ;; Size of xlat table
;  DB	 STANDARD_TABLE 	       ;; xlat options:
;  DB	 0			       ;; number of entries
;  DB	 55,09eH (moved *** CNS ****)  ;; MULTIPLICATION SIGN
;CP850_PAD_K1_T1_END:			;;
;					;;
;   DW	  0				;; Size of xlat table - null table
;					;;
;CP850_PAD_K1_END:			;;
;					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_END-$		 ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type *** CNS 12/18
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 CP850_NA_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	   5,0CFH		       ;; International Currency Symb
CP850_NA_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_END:			 ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G, P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;				       ;;
;   DW	 CP850_NA_K1_LO_END-$	       ;; length of state section
;   DB	 NON_ALPHA_LOWER	       ;; State ID
;   DW	 G_KB+P12_KB		       ;; Keyboard Type
;   DB	 -1,-1			       ;; Buffer entry for error character
;				       ;;
;   DW	 CP850_NA_LO_K1_T1_END-$       ;; Size of xlat table
;   DB	 STANDARD_TABLE 	       ;; xlat options:
;   DB	 0			       ;; number of entries
;   DB	 41,0F5H		       ;; SECTION Symb
;CP850_NA_LO_K1_T1_END:		       ;;
;				       ;;
;   DW	 0			       ;; Size of xlat table - null table
;				       ;;
;CP850_NA_K1_LO_END:		       ;;
;				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_LO_END-$		 ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 239,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of entries
   DB	 18,082H		       ;;    e acute
   DB	 21,0ecH		       ;;    y acute
   DB	 22,0a3H		       ;;    u acute
   DB	 23,0a1H		       ;;    i acute
   DB	 24,0a2H		       ;;    o acute
   DB	 30,0a0H		       ;;    a acute
CP850_AC_LO_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 239,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of entries
   DB	 18,090H		       ;;    E acute
   DB	 21,0EDH		       ;;    Y acute
   DB	 22,0E9H		       ;;    U acute
   DB	 23,0D6H		       ;;    I acute
   DB	 24,0E0H		       ;;    O acute
   DB	 30,0B5H		       ;;    A acute
CP850_AC_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 239,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,239 		       ;; scan code,ASCII - SPACE
CP850_AC_SP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_SP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_GR_LO_END-$	       ;; length of state section
   DB	 GRAVE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_GR_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 012H,08aH		       ;;    e-grave
   DB	 016H,097H		       ;;    u-grave
   DB	 017H,08dH		       ;;    i-grave
   DB	 018H,095H		       ;;    o-grave
   DB	 01fH,085H		       ;;    a-grave
CP850_GR_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_GR_LO_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_GR_UP_END-$	       ;; length of state section
   DB	 GRAVE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_GR_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 012H,0d4H		       ;;    e-grave
   DB	 016H,0ebH		       ;;    u-grave
   DB	 017H,0deH		       ;;    i-grave
   DB	 018H,0e3H		       ;;    o-grave
   DB	 01fH,0b7H		       ;;    a-grave
CP850_GR_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_GR_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  CP850_TI_LO_END-$		;; length of state section
    DB	  TILDE_LOWER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  CP850_TI_LO_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  3				;; number of scans
    DB	  24,0E4H			;; scan code,ASCII - o tilde
    DB	  30,0C6H			;; scan code,ASCII - a tilde
    DB	  031H,0a4H			;; scan code,ASCII - n tilde
 CP850_TI_LO_T1_END:			;;
					;;
    DW	  0				;;
					;;
 CP850_TI_LO_END:			;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: 850
;;; STATE: Tilde Upper Case
;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
    DW	  CP850_TI_UP_END-$		;; length of state section
    DB	  TILDE_UPPER			;; State ID
    DW	  ANY_KB			;; Keyboard Type
    DB	  07EH,0			;; error character = standalone accent
					;;
    DW	  CP850_TI_UP_T1_END-$		;; Size of xlat table
    DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
    DB	  3				;; number of scans
    DB	  24,0E5H			;; scan code,ASCII - o tilde
    DB	  30,0C7H			;; scan code,ASCII - a tilde
    DB	  031H,0a5H			;; scan code,ASCII - n tilde
 CP850_TI_UP_T1_END:			;;
					;;
    DW	  0				;; Size of xlat table - null table
					;;
 CP850_TI_UP_END:			;; length of state section
					;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,088H		       ;;    e circumflex
   DB	 22,096H		       ;;    u circumflex
   DB	 23,08cH		       ;;    i circumflex
   DB	 24,093H		       ;;    o circumflex
   DB	 30,083H		       ;;    a circumflex
CP850_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_CI_LO_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_CI_UP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_UPPER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_CI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,0D2H		       ;;    E circumflex
   DB	 22,0EAH		       ;;    U circumflex
   DB	 23,0D7H		       ;;    I circumflex
   DB	 24,0E2H		       ;;    O circumflex
   DB	 30,0B6H		       ;;    A circumflex
CP850_CI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_CI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 0			       ;; LAST STATE
				       ;;
CP850_XLAT_END: 		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CODE	 ENDS			       ;;
	 END			       ;;

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdffr120.asm ===
; ACUTE lc y added

;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

; ****** CNS 12/18
; ****** CNS 01/21 NUM PAD
	PAGE	,132
	TITLE	PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Defintion File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard tables for Belgium.
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;	       NICK SAVAGE  - IBM Corp.
;; Modded from French - DTF 11-Sep-86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC FR1_LOGIC	       ;;
	PUBLIC FR1_437_XLAT	       ;;
	PUBLIC FR1_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a liner search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
FR1_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW  TYPEWRITER_CAPS_LK	       ;; special features
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
     IFF CAPS_STATE
	 SET_FLAG DEAD_UPPER
     ELSEF
      IFF EITHER_SHIFT		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF			       ;;
	  SET_FLAG DEAD_LOWER	       ;;
      ENDIFF			       ;;
     ENDIFF
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	IFKBD XT_KB+AT_KB
	  IFF EITHER_CTL		;;
	  ANDF ALT_SHIFT		;;
	    SET_FLAG DEAD_THIRD        ;;
	  ENDIFF			;;
	ELSEF
	 IFF R_ALT_SHIFT	       ;;
	 ANDF EITHER_CTL,NOT	       ;;
	 ANDF LC_E0,NOT 	       ;;
	    SET_FLAG DEAD_THIRD        ;;
	 ENDIFF 		       ;;
	ENDIFF
       ENDIFF
   ENDIFF			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO TILDE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
TILDE_PROC:			       ;;
				       ;;
   IFF TILDE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT TILDE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_TILDE:			       ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;  exist for 437 so beep for
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
;***************************
NON_DEAD:			       ;;
;ADDED FOR DIVIDE SIGN		       ;;
    IFKBD G_KB+P12_KB			;; Avoid accidentally translating
    ANDF LC_E0				;;  the "/" on the numeric pad of the
      IFF EITHER_CTL,NOT
      ANDF EITHER_ALT,NOT
	XLATT DIVIDE_SIGN	       ;;
      ENDIFF
      EXIT_STATE_LOGIC		     ;;
    ENDIFF			       ;;
;BD END OF ADDITION
;****************************
;NON_DEAD:				;;
;					;;
;  IFKBD G_KB+P12_KB		       ;; Avoid accidentally translating
;  ANDF LC_E0			       ;;  the "/" on the numeric pad of the
;     EXIT_STATE_LOGIC		       ;;   G keyboard
;  ENDIFF			       ;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
      IFF EITHER_SHIFT		       ;;
;******************************************
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE,NOT	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
;*******************************************
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
	      XLATT NON_ALPHA_LOWER    ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
	      XLATT NON_ALPHA_UPPER    ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
;******************************************
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE 	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
;******************************************
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
      XLATT NON_ALPHA_UPPER	       ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
	     XLATT NON_ALPHA_LOWER     ;;
	  ENDIFF		       ;;
      ENDIFF			       ;;
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	  IFKBD XT_KB+AT_KB	 ;;
	      IFF  EITHER_CTL	       ;;
	      ANDF ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	  ELSEF 		       ;;
	      IFF EITHER_CTL,NOT       ;;
	      ANDF R_ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	  ENDIFF		       ;;
      IFKBD AT_KB+XT_KB 	 ;;
	IFF EITHER_CTL		       ;;
	ANDF ALT_SHIFT		       ;;
	  XLATT ALT_CASE	       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
      IFKBD G_KB+P12_KB 	       ;;
	IFF EITHER_CTL		       ;;
	ANDF ALT_SHIFT		       ;;
	  IFF R_ALT_SHIFT,NOT		  ;;
	    XLATT ALT_CASE		  ;;
	  ENDIFF			  ;;
	ENDIFF				  ;;
      ENDIFF				  ;;
     ENDIFF				  ;;
   ENDIFF				  ;;
;IFF EITHER_SHIFT,NOT			  ;;
   IFKBD AT_KB+XT_KB		    ;;
     IFF EITHER_CTL,NOT 		  ;;
       IFF ALT_SHIFT			  ;; ALT - case
	 XLATT ALT_CASE 		  ;;
       ENDIFF				  ;;
     ELSEF				  ;;
	 XLATT CTRL_CASE		  ;;
     ENDIFF				  ;;
   ENDIFF				  ;;
					  ;;
   IFKBD G_KB+P12_KB			  ;;
     IFF EITHER_CTL,NOT 		  ;;
       IFF ALT_SHIFT			  ;; ALT - case
       ANDF R_ALT_SHIFT,NOT		  ;;
	 XLATT ALT_CASE 		  ;;
       ENDIFF				  ;;
     ELSEF				  ;;
       IFF EITHER_ALT,NOT		  ;;
	 XLATT CTRL_CASE		  ;;
       ENDIFF				  ;;
     ENDIFF				  ;;
     IFF EITHER_CTL			  ;;
     ANDF ALT_SHIFT			  ;;
     ANDF R_ALT_SHIFT,NOT		  ;;
	XLATT ALT_CASE			  ;;
     ENDIFF				  ;;
   ENDIFF				  ;;
					  ;;
   EXIT_STATE_LOGIC			  ;;
					  ;;
LOGIC_END:				  ;;
					  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BE Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR1_COMMON_XLAT 		;;
FR1_COMMON_XLAT:			;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: G + P
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K1_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 G_KB			       ;P12_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 6			       ;;8  Number of entries
;   DB	  12,-1,-1			;;
;   DB	  13,0,82H			;;
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K1_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_PK1_END-$		;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 P12_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_PK1_T1_END-$		;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 6			       ;; 10 Number of entries
;  DB	 12,-1,-1		       ;; invalid key U.S. alt -
;  DB	 13,-1,-1		       ;; invalid key U.S. alt =
;  DB	 07,0,82H		       ;; alt - (minus sign)
;  DB	 13,0,83H		       ;; alt = (equal sign)
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_PK1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_PK1_END:			;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: GKB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K1_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 G_KB			       ;P12_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 10			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 13,31,13		       ;;
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 43,-1,-1		       ;; \
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
   DB	 86,28,86		       ;;
COM_CTRL_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K1_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_PK1_END-$		;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 P12_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_PK1_T1_END-$		;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 12			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 07,30,07		       ;; ctl + number six key
   DB	 12,29,12		       ;; ctl + ]
   DB	 13,31,13		       ;;
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 43,-1,-1		       ;; \
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
   DB	 9,28,9 		      ;;  \ position (this is also the underscore position)
COM_CTRL_PK1_T1_END:			;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_PK1_END:			;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: AT + XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K2_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 6			       ;; 9 Number of entries
;  DB	 12,-1,-1		       ;; invalid key U.S. alt -
;  DB	 13,0,82H		       ;; alt - (minus sign)
;  DB	 53,0,83H		       ;; alt = (equal sign)
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K2_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K2_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 10;11				   ;; Number of entries
   DB	 12,-1,-1		       ;; invalid U.S. -
   DB	 43,-1,-1		       ;; invalid U.S. \
   DB	 41,28,41		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
;  DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K2_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K3_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K3_T3_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 6			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 43,-1,-1		       ;;
   DB	 43,28,43		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
;  DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K3_T3_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K3_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_END-$	       ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB+P12_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  CIRCUMFLEX		       ;; flag bit to set
				       ;;
				       ;;
COM_DK_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;*************************************** CNS P12 Addition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_END-$	       ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB+P12_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  DIARESIS		       ;; flag bit to set
				       ;;
COM_DK_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: G, AT
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_TH_END-$	       ;; length of state section
   DB	 DEAD_THIRD		       ;; State ID
   DW	 G_KB+AT_KB		;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 3			       ;; number of entries
   DB	40			       ;;
   FLAG ACUTE			       ;;
   DB	43			       ;;
   FLAG GRAVE			       ;;
   DB	53			       ;;
   FLAG TILDE			       ;;
				       ;;
COM_DK_TH_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;NO THRD SHIFT DEAD KEY FOR THE P12
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: XT +
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_TH_K1_END-$	       ;; length of state section
   DB	 DEAD_THIRD		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 3			       ;; number of entries
   DB	40			       ;;
   FLAG ACUTE			       ;;
   DB	41			       ;;
   FLAG GRAVE			       ;;
   DB	53			       ;;
   FLAG TILDE			       ;;
				       ;;
COM_DK_TH_K1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;********************************************** CNS P12 Addition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 21,''                        ;; scan code,ASCII - y
COM_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;********************************************** CNS P12 Addition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common		       ;;change **********CNS **************
;; STATE: Numeric Key Pad
;; KEYBOARD TYPES: All except the p12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_PAD_K1_END-$	       ;; length of state section
   DB	 NUMERIC_PAD		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB	       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_PAD_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	 83,','                        ;; decimal seperator = ,
COM_PAD_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_PAD_K1_END: 		       ;;
				       ;;
;**************************************************** CODE eliminated**********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	      NUM PAD altered  ********
;; CODE PAGE: 850				      CNS engraved "," out
;; STATE: Numeric Pad - Divide Sign
;; KEYBOARD TYPES: G
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					;;
;; DW	 CP850_DIVID_END-$	       ;; length of state section
;; DB	 DIVIDE_SIGN		       ;; State ID
;; DW	 G_KB+P12_KB		       ;; Keyboard Type
;; DB	 -1,-1			       ;; error character = standalone accent
;;				       ;;
;; DW	 CP850_DIVID_T1_END-$	       ;; Size of xlat table
;; DB	 TYPE_2_TAB		       ;; xlat options:
;; DB	 2			       ;; number of scans
;; DB	 0E0H,',',0E0H                ;; DIVIDE SIGN
;; DB	 51,',',0E0H                  ;;
;; CP850_DIVID_T1_END:			  ;;
;;					  ;;
;;    DW    0				  ;; Size of xlat table - null table
;;					  ;;
;; CP850_DIVID_END:			  ;;
;;					  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Numeric Key Pad - Multiplication
;; KEYBOARD TYPES: G,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;				       ;;
;; DW	 CP850_PAD_K1_END-$	       ;; length of state section
;; DB	 NUMERIC_PAD		       ;; State ID
;; DW	 G_KB			     ;; Keyboard Type
;; DB	 -1,-1			       ;; Buffer entry for error character
;;				       ;;
;; DW	 CP850_PAD_K1_T1_END-$	       ;; Size of xlat table
;; DB	 STANDARD_TABLE 	       ;; xlat options:
;; DB	 1			       ;; number of entries
;; DB	 51,',' ; (removed *** CNS ****)  ;; MULTIPLICATION SIGN
;;  CP850_PAD_K1_T1_END:		   ;;
;;					   ;;
;;     DW    0				   ;; Size of xlat table - null table
;;					   ;;
;;  CP850_PAD_K1_END:			   ;;
;;					   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;*********************************************************
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 16,'a'                        ;; small a
   DB	 17,'z'                        ;; small z
   DB	 30,'q'                        ;; small q
   DB	 39,'m'                        ;; small m
   DB	 44,'w'                        ;; small w
COM_AL_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 16,'A'                        ;; caps  A
   DB	 17,'Z'                        ;; caps  Z
   DB	 30,'Q'                        ;; caps  Q
   DB	 39,'M'                        ;; caps  M
   DB	 44,'W'                        ;; caps  W
COM_AL_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB			       ;P12_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	 41,""                        ;; superscript 2
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 43,0E6H		       ;; mu
   DB	 86,'<'                        ;;
   DB	 50,','                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_PK1_END-$		   ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_PT1_K1_END-$ 	   ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 21			       ;; number of entries
   DB	 41,""                        ;; superscript 2
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  7,"-"                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"_"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"="                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 43,"*"                        ;;
   DB	 86,'<'                        ;; +
   DB	 50,','                        ;; <
   DB	 51,';'                        ;; -
   DB	 52,':'                        ;;
   DB	 53,'!'                        ;;

COM_NA_LO_PT1_K1_END:			   ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_PK1_END:			   ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES:AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 19			       ;; number of entries
   DB	 41,"<"                        ;;
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 43,0E6H		       ;; mu
   DB	 50,','                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K2_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: XT,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 19			       ;; number of entries
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  8,""                        ;;
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 41,0E6H		       ;; mu
   DB	 43,'<'                        ;;
   DB	 50,','                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K1_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB			       ;+P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 21			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;;
   DB	 27,"*"                        ;;
   DB	 40,'%'                        ;;
   DB	 41,0FCH                       ;; Superscript 3
   DB	 43,''                        ;;
   DB	 86,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_END:			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_PK1_END-$		   ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_PT1_K1_END-$ 	;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 21			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"+"                        ;; plus sign
   DB	 27,09CH		       ;;  symbol
   DB	 40,'%'                        ;;
   DB	 41,""                        ;; superscript 3
   DB	 43,0E6H		       ;;  - mu symbol
   DB	 86,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_PT1_K1_END:			   ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_PK1_END:			   ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT +
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	 41,''                        ;;
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;;
   DB	 27,"*"                        ;;
   DB	 40,'%'                        ;;
   DB	 43,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K2_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	 41,'>'                        ;;
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;;
   DB	 27,"*"                        ;;
   DB	 40,'%'                        ;;
   DB	 43,''                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K2_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: G,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB			       ;+P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  9			       ;; number of entries
   DB	  2,"|"                        ;;
   DB	  3,'@'                        ;;
   DB	  4,'#'                        ;;
   DB	  7,'^'                        ;;
   DB	 10,'{'                        ;;
   DB	 11,'}'                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 86,'\'                        ;;
COM_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;******************************************* CNS Addition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 P12_KB 		       ;;	   ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
COM_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;******************************************* CNS Addition
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_PK1_END-$		   ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_PT1_K1_END-$ 	   ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 11			       ;; number of entries
   DB	  3,'~'                        ;;
   DB	  4,'#'                        ;;
   DB	  5,'{'                        ;;
   DB	  6,'['                        ;;
   DB	  7,'|'                        ;;
   DB	  8,'`'                        ;; grave symbol not a dead key rep
   DB	  9,'\'                        ;;
   DB	 10,'^'                        ;; circumflex (caret)
   DB	 11,'@'                        ;;
   DB	 12,']'                        ;;
   DB	 13,'}'                        ;;
COM_THIRD_PT1_K1_END:			   ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_PK1_END:			   ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K1_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  9			       ;; number of entries
   DB	  2,"|"                        ;;
   DB	  3,'@'                        ;;
   DB	  4,'#'                        ;;
   DB	  7,'^'                        ;;
   DB	 10,'{'                        ;;
   DB	 11,'}'                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 43,'\'                        ;;
COM_THIRD_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K2_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  9			       ;; number of entries
   DB	  2,"|"                        ;;
   DB	  3,'@'                        ;;
   DB	  4,'#'                        ;;
   DB	  7,'^'                        ;;
   DB	 10,'{'                        ;;
   DB	 11,'}'                        ;;
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 41,'\'                        ;;
COM_THIRD_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K2_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: ALL
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 COM_GR_LO_END-$		 ;; length of state section
   DB	 GRAVE_LOWER			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 96,0				 ;; error character = standalone accent
					 ;;
   DW	 COM_GR_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 18,''                          ;; scan code,ASCII - e
   DB	 16,''                          ;; scan code,ASCII - a
   DB	 24,''                          ;; scan code,ASCII - o
   DB	 22,''                          ;; scan code,ASCII - u
   DB	 23,''                          ;; scan code,ASCII - i
COM_GR_LO_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
COM_GR_LO_END:				 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_UP_END-$	       ;; length of state section
   DB	 GRAVE_UPPER		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
COM_GR_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_UP_END:			       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 COM_GR_SP_END-$		 ;; length of state section
   DB	 GRAVE_SPACE			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 96,0				 ;; error character = standalone accent
					 ;;
   DW	 COM_GR_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,96				 ;; STANDALONE GRAVE
COM_GR_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
COM_GR_SP_END:				 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_UP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_UPPER	       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
COM_CI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_UP_END:			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 COM_TI_SP_END-$		 ;; length of state section
   DB	 TILDE_SPACE			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 126,0				 ;; error character = standalone accent
					 ;;
   DW	 COM_TI_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,126 			 ;; STANDALONE TIDLE
COM_TI_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
COM_TI_SP_END:				 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BE Specific Translate Section for 437
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR1_437_XLAT			;;
FR1_437_XLAT:				;;
				       ;;
   DW	  CP437_XLAT_END-$	       ;; length of section
   DW	  437			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_LO_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	7,15H			       ;; Section Symbol
CP437_NA_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**************************************** CNS Addition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: p12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_UP_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: **** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 53,015H		       ;; Section symbol - 
CP437_NA_UP_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_UP_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**************************************** CNS Addition
;; CODE PAGE: 437
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB			       ;+P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	41,00H			       ;; 3 Superscript
CP437_NA_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP437
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP437_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 16,''                        ;; a acute
   DB	 18,''                        ;; e acute
   DB	 23,''                        ;; i acute
   DB	 24,''                        ;; o acute
   DB	 22,''                        ;; u acute
CP437_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_AC_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP437_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 39,0				 ;; error character = standalone accent
					 ;;
   DW	 CP437_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 18,''                          ;; scan code,ASCII - e
CP437_AC_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP437_AC_UP_END:			 ;;
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP437_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 39,0				 ;; error character = standalone accent
					 ;;
   DW	 CP437_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,39				 ;; scan code,ASCII - SPACE
CP437_AC_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP437_AC_SP_END:			 ;;
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP437_TI_LO_END-$		 ;; length of state section
   DB	 TILDE_LOWER			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 126,0				 ;; error character = standalone accent
					 ;;
   DW	 CP437_TI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 49,164 			 ;; scan code,ASCII - n
CP437_TI_LO_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP437_TI_LO_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_TI_UP_END-$	       ;; length of state section
   DB	 TILDE_UPPER		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 126,0			       ;; error character = standalone accent
				       ;;
   DW	 CP437_TI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 49,165 		       ;; scan code,ASCII - N
CP437_TI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_TI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 G_KB+AT_KB+XT_KB	       ;; Keyboard Type
   DB	 0FEH,0 		       ;; error character = standalone accent
				       ;;
   DW	 CP437_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 21,''                        ;; scan code,ASCII - y
CP437_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_DI_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: CP437
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 0FEH,0 		       ;; error character = standalone accent
				       ;;
   DW	 CP437_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
CP437_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_DI_UP_END:		       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 P12_KB 		       ;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
COM_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_UP_END:			       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_SP_END-$	       ;; length of state section
   DB	 DIARESIS_SPACE 	       ;; State ID
   DW	 P12_KB 		       ;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,249 		       ;; error character = standalone accent
COM_DI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
COM_DI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437    ???????????????????May need change....
;; STATE: Third Shift
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_THIRD_PEND-$		;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 P12_KB 		  ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_THIRD_T1_PEND-$		;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: *** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 27,'$'                        ;; dollar currency symbol
CP437_THIRD_T1_PEND:			;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_THIRD_PEND:			;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP437
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;				       ;;
;  DW	 CP437_DI_SP_END-$	       ;; length of state section
;  DB	 DIARESIS_SPACE 	       ;; State ID
;  DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
;  DB	 0FEH,0 		       ;; error character = standalone accent
;				       ;;
;  DW	 CP437_DI_SP_T1_END-$	       ;; Size of xlat table
;  DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;  DB	 1			       ;; number of scans
;  DB	 57,0FEH		       ;; error character = standalone accent
;CP437_DI_SP_T1_END:		       ;;
;				       ;;
;  DW	 0			       ;; Size of xlat table - null table
;CP437_DI_SP_END:		       ;; length of state section
;				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	  0			       ;; LAST STATE
				       ;;
CP437_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; BE Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR1_850_XLAT			;;
FR1_850_XLAT:				;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_LO_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 7,0F5H 		       ;; Section symbol - 
CP850_NA_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_LO_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**************************************** CNS Addition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 P12_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_UP_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: ***** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 53,0F5H		       ;; Section symbol - 
CP850_NA_UP_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**************************************** CNS Addition
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB			       ;P12_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of scans
   DB	41,0FCH 		       ;; 3 Superscript
CP850_NA_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
CP850_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_THIRD_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_THIRD_PEND-$		;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 P12_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_THIRD_P1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: *** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 27,0CFH		       ;; international currency symbol
CP850_THIRD_P1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_THIRD_PEND:			;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP850
;; STATE: Tilde Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_TI_LO_END-$		 ;; length of state section
   DB	 TILDE_LOWER			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 126,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_TI_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 3				 ;; number of scans
   DB	 49,164 			 ;; scan code,ASCII - n
   DB	 16,0C6H			 ;;		      a
   DB  24,0E4H			 ;;		      o
CP850_TI_LO_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_TI_LO_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP850
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_TI_UP_END-$	       ;; length of state section
   DB	 TILDE_UPPER		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 126,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_TI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 49,165 		       ;; scan code,ASCII - N
   DB	 16,0C7H		       ;;		    A
   DB	 24,0E5H		       ;;		    O
CP850_TI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_TI_UP_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 0EFH,0 		       ;; error character = standalone accent
   DW	 CP850_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 16,''                        ;; a acute
   DB	 18,''                        ;; e acute
   DB	 23,''                        ;; i acute
   DB	 24,''                        ;; o acute
   DB	 22,''                        ;; u acute
   DB	 21,0ECH		       ;; y acute  ADDED 12/16 CNS **********
CP850_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP850
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 0EFH,0 			 ;; error character = standalone accent
   DW	 CP850_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 6				 ;; number of scans
   DB	 16,0B5H			 ;;    A acute
   DB	 18,090H			 ;;    E acute
   DB	 23,0D6H			 ;;    I acute
   DB	 24,0E0H			 ;;    O acute
   DB	 22,0E9H			 ;;    U acute
   DB	 21,0EDH			 ;;    Y acute
CP850_AC_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_AC_UP_END:			 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP850
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 0EFH,0 			 ;; error character = standalone accent
					 ;;
   DW	 CP850_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,0EFH			 ;; scan code,ASCII - SPACE
CP850_AC_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_AC_SP_END:			 ;;
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP850
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 G_KB+AT_KB+XT_KB			 ;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 CP850_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 21,''                        ;; scan code,ASCII - y
CP850_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_DI_LO_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;					 ;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

					 ;;
   DW	 CP850_DI_UP_END-$		 ;; length of state section
   DB	 DIARESIS_UPPER 		 ;; State ID
   DW	 G_KB+AT_KB+XT_KB+P12_KB		    ;; Keyboard Type
   DB	 249,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_DI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 16,8EH 			 ;;    A di
   DB	 18,0D3H			 ;;    E diaeresis
   DB	 23,0D8H			 ;;    I diaeresis
   DB	 24,99H 			 ;;    O di
   DB	 22,9AH 			 ;;    U di
CP850_DI_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_DI_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: CP850
;; STATE: Diaeresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_DI_SP_END-$		 ;; length of state section
   DB	 DIARESIS_SPACE 		 ;; State ID
   DW	 ANY_KB 				  ;; Keyboard Type
   DB	 0FEH,0 			 ;; error character = standalone accent
					 ;;
   DW	 CP850_DI_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 1				 ;; number of scans
   DB	 57,0F9H			 ;; scan code,ASCII - SPACE
CP850_DI_SP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_DI_SP_END:			 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: ALL
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_GR_UP_END-$		 ;; length of state section
   DB	 GRAVE_UPPER			 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;; Keyboard Type
   DB	 96,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_GR_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 16,0B7H			 ;;    A grave
   DB	 18,0D4H			 ;;    E grave
   DB	 23,0DEH			 ;;    I grave
   DB	 24,0E3H			 ;;    O grave
   DB	 22,0EBH			 ;;    U grave
CP850_GR_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_GR_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************
;***************************************** CNS P12 Addition *****************
;; CODE PAGE: 850
;; STATE: Circumflex Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
   DW	 CP850_CI_UP_END-$		 ;; length of state section
   DB	 CIRCUMFLEX_UPPER		 ;; State ID
   DW	 G_KB+AT_KB+XT_KB			   ;;
   DB	 94,0				 ;; error character = standalone accent
					 ;;
   DW	 CP850_CI_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
   DB	 5				 ;; number of scans
   DB	 16,0B6H			 ;;    A circumflex
   DB	 18,0D2H			 ;;    E circumflex
   DB	 23,0D7H			 ;;    I circumflex
   DB	 24,0E2H			 ;;    O circumflex
   DB	 22,0EAH			 ;;    U circumflex
CP850_CI_UP_T1_END:			 ;;
					 ;;
   DW	 0				 ;; Size of xlat table - null table
					 ;;
CP850_CI_UP_END:			 ;; length of state section
					 ;;
;***************************************** CNS P12 Addition *****************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Circumflex Upper
;;;; KEYBOARD TYPES: P12
;;;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
     DW    CP850_CI_UP_PEND-$		  ;; length of state section
     DB    CIRCUMFLEX_UPPER		 ;; State ID
     DW    P12_KB			 ;; Keyboard Type
     DB    94,0 			 ;; error character = standalone accent
					 ;;
     DW    CP850_CI_UP_T1_PEND-$	  ;; Size of xlat table
     DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
     DB    5				 ;; number of scans
     DB    16,0B6H			 ;;    A circumflex
     DB    18,0D2H			 ;;    E circumflex
     DB    23,0D7H			 ;;    I circumflex
     DB    24,0E2H			 ;;    O circumflex
     DB    22,0EAH			 ;;    U circumflex
  CP850_CI_UP_T1_PEND:			  ;;
					 ;;
     DW    0				 ;; Size of xlat table - null table
					 ;;
  CP850_CI_UP_PEND:			  ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***************************************** CNS P12 Addition *****************

   DW	0				 ;; LAST STATE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
CP850_XLAT_END: 			 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
CODE	 ENDS				 ;;
	 END				 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfdv.asm ===
PAGE    ,132
        TITLE   PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Defintion File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard tables for Spanish.
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC DV_LOGIC                ;;
        PUBLIC DV_COMMON_XLAT          ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a liner search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; DV State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
DV_LOGIC:

   DW  LOGIC_END-$                     ;; length
                                       ;;
   DW  0                               ;; special features
                                       ;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   IFF  EITHER_ALT,NOT                 ;;
   ANDF EITHER_CTL,NOT                 ;;
      IFF EITHER_SHIFT                 ;;
          SET_FLAG DEAD_UPPER          ;;
      ELSEF                            ;;
          SET_FLAG DEAD_LOWER          ;;
      ENDIFF                           ;;
   ENDIFF                              ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
ACUTE_PROC:                            ;;
                                       ;;
   IFF ACUTE,NOT                       ;;
      GOTO DIARESIS_PROC               ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT ACUTE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT ACUTE_LOWER       ;;
            ELSEF                      ;;
               XLATT ACUTE_UPPER       ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT ACUTE_UPPER       ;;
            ELSEF                      ;;
               XLATT ACUTE_LOWER       ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_ACUTE:                         ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP                             ;; failed or we are ina bad shift state.
      GOTO NON_DEAD                    ;; Either is invalid so BEEP and fall
                                       ;; through to generate the second char.
                                       ;; Note that the dead key flag will be
                                       ;; reset before we get here.
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
DIARESIS_PROC:                         ;;
                                       ;;
   IFF DIARESIS,NOT                    ;;
      GOTO GRAVE_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT DIARESIS_SPACE          ;;  exist for 437 so beep for
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT DIARESIS_LOWER    ;;
            ELSEF                      ;;
               XLATT DIARESIS_UPPER    ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT DIARESIS_UPPER    ;;
            ELSEF                      ;;
               XLATT DIARESIS_LOWER    ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_DIARESIS:                      ;;
      PUT_ERROR_CHAR DIARESIS_SPACE    ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
GRAVE_PROC:                            ;;
                                       ;;
   IFF GRAVE,NOT                       ;;
      GOTO CIRCUMFLEX_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT GRAVE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT GRAVE_LOWER        ;;
           ELSEF                       ;;
              XLATT GRAVE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT GRAVE_LOWER        ;;
           ELSEF                       ;;
              XLATT GRAVE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_GRAVE:                         ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CIRCUMFLEX_PROC:                       ;;
                                       ;;
   IFF CIRCUMFLEX,NOT                  ;;
      GOTO NON_DEAD                    ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT CIRCUMFLEX_LOWER   ;;
           ELSEF                       ;;
              XLATT CIRCUMFLEX_UPPER   ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT CIRCUMFLEX_LOWER   ;;
           ELSEF                       ;;
              XLATT CIRCUMFLEX_UPPER   ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CIRCUMFLEX:                    ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
NON_DEAD:                              ;;
                                       ;;
   IFKBD G_KB+P12_KB                   ;; Avoid accidentally translating
   ANDF LC_E0                          ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC                 ;;   G keyboard
   ENDIFF                              ;;
;;***BD ADDED FOR ALT, CTRL CASES      ;;
      IFF EITHER_CTL,NOT               ;;
         IFF  ALT_SHIFT                ;; ALT - case
         ANDF R_ALT_SHIFT,NOT          ;;
            XLATT ALT_CASE             ;;
         ENDIFF                        ;;
      ELSEF                            ;;
         IFF EITHER_ALT,NOT            ;; CTRL - case
            XLATT CTRL_CASE            ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
;;***BD END OF ADDITION
                                       ;;
   IFF  EITHER_ALT,NOT                 ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT                 ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT                 ;; Numeric keys are not.
;;***BD ADDED FOR NUMERIC PAD
          IFF NUM_STATE,NOT            ;;
              XLATT NUMERIC_PAD        ;;
          ENDIFF                       ;;
;;***BD END OF ADDITION
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
      ELSEF                            ;;
;;***BD ADDED FOR NUMERIC PAD
          IFF NUM_STATE                ;;
              XLATT NUMERIC_PAD        ;;
          ENDIFF                       ;;
;;***BD END OF ADDITION
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
      ENDIFF                           ;;
   ELSEF                               ;;
      IFF EITHER_SHIFT,NOT             ;;
          IFKBD XT_KB+AT_KB      ;;
              IFF  EITHER_CTL          ;;
              ANDF ALT_SHIFT           ;;
                  XLATT THIRD_SHIFT    ;;
              ENDIFF                   ;;
          ELSEF                        ;;
              IFF EITHER_CTL,NOT       ;;
              ANDF R_ALT_SHIFT         ;;
                  XLATT THIRD_SHIFT    ;;
              ENDIFF                   ;;
           ENDIFF                      ;;
      ENDIFF                           ;;
   ENDIFF                              ;;
                                       ;;
   EXIT_STATE_LOGIC                    ;;
                                       ;;
LOGIC_END:                             ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; DV Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC DV_COMMON_XLAT                 ;;
DV_COMMON_XLAT:                        ;;
                                       ;;
   DW    COMMON_XLAT_END-$             ;; length of section
   DW    -1                            ;; code page
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;***BD - ADDED FOR ALT CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_ALT_K2_END-$              ;; length of state section
   DB    ALT_CASE                      ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_ALT_K2_T1_END-$           ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    36                            ;; number of entries
   DB    0CH, 0, 01AH           ;; Alt+{
   DB    0DH, 0, 01BH           ;; Alt+}
   DB    010H, 0, 028H          ;; Altl+"
   DB    011H, 0, 033H          ;; Altl+,
   DB    012H, 0, 034H          ;; Altl+.
   DB    013H, 0, 019H          ;; Altl+P
   DB    014H, 0, 015H          ;; Altl+Y
   DB    015H, 0, 021H          ;; Altl+F
   DB    016H, 0, 022H          ;; Altl+G
   DB    017H, 0, 02EH          ;; Altl+C
   DB    018H, 0, 013H          ;; Altl+R
   DB    019H, 0, 026H           ;; Altl+L
   DB    01AH, 0, 035H          ;; Altl+?
   DB    01BH, 0, 0DH           ;; Altl+=
   DB    01EH, 0, 01EH          ;; Altl+A
   DB    01FH, 0, 018H          ;; Altl+O
   DB    020H, 0, 012H          ;; Altl+E
   DB    021H, 0, 016H          ;; Altl+U
   DB    022H, 0, 017H          ;; Altl+I
   DB    023H, 0, 020H          ;; Altl+D
   DB    024H, 0, 023H          ;; Altl+H
   DB    025H, 0, 014H          ;; Altl+T
   DB    026H, 0, 031H          ;; Altl+N
   DB    027H, 0, 01FH          ;; Altl+S
   DB    028H, 0, 0CH           ;; Altl+-
   DB    02BH, 0, 02BH          ;; Altl+|
   DB    02CH, 0, 027H          ;; Altl+;
   DB    02DH, 0, 010H          ;; Altl+Q
   DB    02EH, 0, 024H          ;; Altl+J
   DB    02FH, 0, 025H          ;; Altl+K
   DB    030H, 0, 02DH          ;; Altl+X
   DB    031H, 0, 030H          ;; Altl+B
   DB    032H, 0, 032H          ;; Altl+M
   DB    033H, 0, 011H          ;; Altl+W
   DB    034H, 0, 02FH          ;; Altl+V
   DB    035H, 0, 02CH          ;; Altl+Z
COM_ALT_K2_T1_END:                     ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_ALT_K2_END:                        ;;
                                       ;;
;;******************************
;;***BD - ADDED FOR CTRL CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G_KB+P12_KB+AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CTRL_K2_END-$             ;; length of state section
   DB    CTRL_CASE                     ;; State ID
   DW    G_KB+P12_KB+AT_KB             ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_CTRL_K2_T1_END-$          ;; Size of xlat table
   DB    TYPE_2_TAB                    ;; xlat options:
   DB    36                            ;; number of entries
   DB    0CH, 01BH, 0CH                ;; Ctrl+{
   DB    0DH, 01DH, 0DH                ;; Ctrl+}
   DB    010H, 00H, 010H               ;; Ctrl+"
   DB    011H, 00H, 011H               ;; Ctrl+,
   DB    012H, 00H, 012H               ;; Ctrl+.
   DB    013H, 010H, 013H              ;; Ctrl+P
   DB    014H, 019H, 014H              ;; Ctrl+Y
   DB    015H, 06H, 015H               ;; Ctrl+F
   DB    016H, 07H, 016H               ;; Ctrl+G
   DB    017H, 03H, 017H               ;; Ctrl+C
   DB    018H, 012H, 018H              ;; Ctrl+R
   DB    019H, 0CH, 019H                ;; Ctrl+L
   DB    01AH, 00H, 01AH               ;; Ctrl+?
   DB    01BH, 00H, 01BH               ;; Ctrl+=
   DB    01EH, 01H, 01EH               ;; Ctrl+A
   DB    01FH, 0FH, 01FH               ;; Ctrl+O
   DB    020H, 05H, 020H               ;; Ctrl+E
   DB    021H, 015H, 021H              ;; Ctrl+U
   DB    022H, 09H, 022H               ;; Ctrl+I
   DB    023H, 04H, 023H               ;; Ctrl+D
   DB    024H, 08H, 024H               ;; Ctrl+H
   DB    025H, 014H, 025H              ;; Ctrl+T
   DB    026H, 0EH, 026H               ;; Ctrl+N
   DB    027H, 013H, 027H              ;; Ctrl+S
   DB    028H, 01FH, 028H              ;; Ctrl+-
   DB    02BH, 00H, 02BH               ;; Ctrl+|
   DB    02CH, 00H, 02CH               ;; Ctrl+;
   DB    02DH, 011H, 02DH              ;; Ctrl+Q
   DB    02EH, 0AH, 02EH               ;; Ctrl+J
   DB    02FH, 0BH, 02FH               ;; Ctrl+K
   DB    030H, 018H, 030H              ;; Ctrl+X
   DB    031H, 02H, 031H               ;; Ctrl+B
   DB    032H, 0DH, 032H               ;; Ctrl+M
   DB    033H, 017H, 033H              ;; Ctrl+W
   DB    034H, 016H, 034H              ;; Ctrl+V
   DB    035H, 01AH, 035H              ;; Ctrl+Z
COM_CTRL_K2_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CTRL_K2_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G_KB+P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_NA_LO_K1_END-$               ;; length of state section
   DB    NON_ALPHA_LOWER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_NA_LO_K1_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    9                             ;; number of entries
   DB    00CH,"["                      ;; '
   DB    00DH,']'                      ;; #
   DB    010H,"'"                      ;; #
   DB    011H,','                      ;; #
   DB    012H,'.'                      ;; #
   DB    01AH,'/'                      ;; #
   DB    01BH,'='                      ;; #
   DB    028H,'-'                      ;; #
   DB    02CH,';'                      ;; #
COM_NA_LO_K1_T1_END:                   ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_NA_LO_K1_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB+P12_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_NA_UP_K1_END-$               ;; length of state section
   DB    NON_ALPHA_UPPER               ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    COM_NA_UP_T1_K1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    9                             ;; number of entries
   DB    00CH,"{"                      ;; '
   DB    00DH,'}'                      ;; #
   DB    010H,'"'                      ;; #
   DB    011H,'<'                      ;; #
   DB    012H,'>'                      ;; #
   DB    01AH,'?'                      ;; #
   DB    01BH,'+'                      ;; #
   DB    028H,'_'                      ;; #
   DB    02CH,':'                      ;; #
COM_NA_UP_T1_K1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_NA_UP_K1_END:                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CPCOM_A_K1_LO_END-$           ;; length of state section
   DB    ALPHA_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;;
   DW    CPCOM_A_LO_K1_T01_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    26                            ;; number of entries
   DB    13H, 'p'                           ;;   j
   DB    14H, 'y'                           ;;   l
   DB    15H, 'f'                           ;;   m
   DB    16H, 'g'                           ;;   f
   DB    17H, 'c'                           ;;   p
   DB    18H, 'r'                           ;;   p
   DB    19H, 'l'                           ;;   p
   DB    1EH, 'a'                           ;;   o
   DB    1FH, 'o'                           ;;   r
   DB    20H, 'e'                           ;;   s
   DB    21H, 'u'                           ;;   u
   DB    22H, 'i'                           ;;   y
   DB    23H, 'd'                           ;;   b
   DB    24H, 'h'                           ;;   b
   DB    25H, 't'                           ;;   b
   DB    26H, 'n'                           ;;   b
   DB    27H, 's'                           ;;   b
   DB    2DH, 'q'                           ;;   z
   DB    2EH, 'j'                           ;;   a
   DB    2FH, 'k'                           ;;   e
   DB    30H, 'x'                           ;;   h
   DB    31H, 'b'                           ;;   t
   DB    32H, 'm'                           ;;   d
   DB    33H, 'w'                           ;;   c
   DB    34H, 'v'                           ;;   k
   DB    35H, 'z'                           ;;   k
CPCOM_A_LO_K1_T01_END:                  ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CPCOM_A_K1_LO_END:                     ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CPCOM_A_K1_UP_END-$           ;; length of state section
   DB    ALPHA_UPPER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CPCOM_A_UP_K1_T01_END-$        ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB    26                            ;; number of entries
   DB    13H, 'P'                           ;;   j
   DB    14H, 'Y'                           ;;   l
   DB    15H, 'F'                           ;;   m
   DB    16H, 'G'                           ;;   f
   DB    17H, 'C'                           ;;   p
   DB    18H, 'R'                           ;;   p
   DB    19H, 'L'                           ;;   p
   DB    1EH, 'A'                           ;;   o
   DB    1FH, 'O'                           ;;   r
   DB    20H, 'E'                           ;;   s
   DB    21H, 'U'                           ;;   u
   DB    22H, 'I'                           ;;   y
   DB    23H, 'D'                           ;;   b
   DB    24H, 'H'                           ;;   b
   DB    25H, 'T'                           ;;   b
   DB    26H, 'N'                           ;;   b
   DB    27H, 'S'                           ;;   b
   DB    2DH, 'Q'                           ;;   z
   DB    2EH, 'J'                           ;;   a
   DB    2FH, 'K'                           ;;   e
   DB    30H, 'X'                           ;;   h
   DB    31H, 'B'                           ;;   t
   DB    32H, 'M'                           ;;   d
   DB    33H, 'W'                           ;;   c
   DB    34H, 'V'                           ;;   k
   DB    35H, 'Z'                           ;;   k
CPCOM_A_UP_K1_T01_END:                  ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CPCOM_A_K1_UP_END:                     ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
COMMON_XLAT_END:                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CODE     ENDS                          ;;
         END                           ;;

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdffr.asm ===
;; LATEST CHANGE ALT & CTL  disenabled US invalids

;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

;; Section symbol scan code incorrect
;; zero scan code tag deleted from end of tag field
;; Changed key #5 for the XT "/" instead of "'"..Pubs error
;; ****************** CNS 12/18/86*************************

	PAGE	,132
	TITLE	PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Defintion File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard tables for Spanish.
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC FR_LOGIC 	       ;;
	PUBLIC FR_437_XLAT	       ;;
	PUBLIC FR_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a liner search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
FR_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW  TYPEWRITER_CAPS_LK	       ;; special features (shift lock state)
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
     IFF CAPS_STATE
	 SET_FLAG DEAD_UPPER
     ELSEF
      IFF EITHER_SHIFT		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF			       ;;
	  SET_FLAG DEAD_LOWER	       ;;
      ENDIFF			       ;;
     ENDIFF			      ;;
   ENDIFF			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;  exist for 437 so beep for
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR DIARESIS_SPACE    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
NON_DEAD:			       ;;
				       ;;
   IFKBD G_KB+P12_KB		       ;; Avoid accidentally translating
   ANDF LC_E0			       ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC		       ;;   G keyboard
   ENDIFF			       ;;
;;***BD ADDED FOR ALT, CTRL CASES      ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF  ALT_SHIFT 	       ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT	       ;;
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
;;***BD END OF ADDITION
				       ;;
   IFF	EITHER_ALT,NOT		       ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT		       ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT		       ;; Numeric keys are not.
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE,NOT	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
;	  XLATT NON_ALPHA_UPPER        ;;
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
	      XLATT NON_ALPHA_LOWER    ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
	  XLATT NON_ALPHA_UPPER        ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE 	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
;	  XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
	  XLATT NON_ALPHA_UPPER        ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
	  XLATT NON_ALPHA_LOWER        ;;
	  ENDIFF		       ;;
      ENDIFF			       ;;
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	  IFKBD XT_KB+AT_KB	 ;;
	      IFF  EITHER_CTL	       ;;
	      ANDF ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	  ELSEF 		       ;;
	      IFF EITHER_CTL,NOT       ;;
	      ANDF R_ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	   ENDIFF		       ;;
      ENDIFF			       ;;
   ENDIFF			       ;;
				       ;;
   EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					;;
;NON_DEAD:				;;
;					;;
;   IFF  EITHER_ALT,NOT 		;; Lower and upper case.  Alphabetic
;   ANDF EITHER_CTL,NOT 		;; keys are affected by CAPS LOCK.
;      IFF EITHER_SHIFT 		;; Numeric keys are not.
;	   XLATT NON_ALPHA_UPPER	;;
;	   IFF CAPS_STATE		;;
;	       XLATT ALPHA_LOWER	;;
;	   ELSEF			;;
;	       XLATT ALPHA_UPPER	;;
;	   ENDIFF			;;
;      ELSEF				;;
;	   XLATT NON_ALPHA_LOWER	;;
;	   IFF CAPS_STATE		;;
;	      XLATT ALPHA_UPPER 	;;
;	   ELSEF			;;
;	      XLATT ALPHA_LOWER 	;;
;	   ENDIFF			;;
;      ENDIFF				;;
;   ELSEF				;;
;      IFF EITHER_SHIFT,NOT		;;
;	   IFKBD XT_KB+AT_KB	  ;;
;	       IFF  EITHER_CTL		;;
;	       ANDF ALT_SHIFT		;;
;		   XLATT THIRD_SHIFT	;;
;	       ENDIFF			;;
;	   ELSEF			;;
;	       IFF EITHER_CTL,NOT	;;
;	       ANDF R_ALT_SHIFT 	;;
;		   XLATT THIRD_SHIFT	;;
;	       ENDIFF			;;
;	    ENDIFF			;;
;      ENDIFF				;;
;   ENDIFF				;;
;					;;
;   EXIT_STATE_LOGIC			;;
;					;;
;LOGIC_END:				;;
;					;;
;					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR_COMMON_XLAT		       ;;
FR_COMMON_XLAT: 		       ;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_END-$	       ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  CIRCUMFLEX		       ;; flag bit to set
;  DB	 40	    eliminate	       ;;
;  FLAG  ACUTE			       ;;
				       ;;
				       ;;
COM_DK_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_END-$	       ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  DIARESIS		       ;; flag bit to set
;  DB	 40	      eliminate        ;;
;  FLAG  DIARESIS		       ;;
				       ;;
COM_DK_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**********************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_DK_TH_END-$		 ;; length of state section
;;   DB    DEAD_THIRD			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    -1,-1			 ;; Buffer entry for error character
;;					 ;; Set Flag Table
;;   DW    1				 ;; number of entries
;;   DB    8				 ;; scan code
;;   FLAG  GRAVE			 ;; flag bit to set
;;					 ;;
;;COM_DK_TH_END:			 ;;
;;					 ;;
;;					 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: G_KB + P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K1_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 10			       ;; Number of entries
   DB	 12,-1,-1		       ;; invalid key U.S. alt -
   DB	 13,-1,-1		       ;; invalid key U.S. alt =
   DB	 07,0,82H		       ;; alt - (minus sign)
   DB	 13,0,83H		       ;; alt = (equal sign)
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K1_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G_KB+P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K1_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 12			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 07,30,07		       ;; ctl + number six key
   DB	 12,29,12		       ;; ctl + ]
   DB	 13,31,13		       ;;
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 43,-1,-1		       ;; \
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
   DB	 9,28,9 		      ;;  \ position (this is also the underscore position)
COM_CTRL_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K1_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: AT + XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K2_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 9			       ;; Number of entries
   DB	 12,-1,-1		       ;; invalid key U.S. alt -
   DB	 13,0,82H		       ;; alt - (minus sign)
   DB	 53,0,83H		       ;; alt = (equal sign)
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K2_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K2_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 11				;; Number of entries
   DB	 12,-1,-1		       ;; invalid U.S. -
   DB	 43,-1,-1		       ;; invalid U.S. \
   DB	 41,28,41		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
   DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K2_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K3_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K3_T3_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 11			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 43,-1,-1		       ;;
   DB	 43,28,43		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
   DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K3_T3_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K3_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;******************************************************************************
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 16,'a'                        ;; small a
   DB	 17,'z'                        ;; small z
   DB	 30,'q'                        ;; small q
   DB	 39,'m'                        ;; small m
   DB	 44,'w'                        ;; small w
COM_AL_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 16,'A'                        ;; caps  A
   DB	 17,'Z'                        ;; caps  Z
   DB	 30,'Q'                        ;; caps  Q
   DB	 39,'M'                        ;; caps  M
   DB	 44,'W'                        ;; caps  W
COM_AL_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 21			       ;; number of entries
   DB	 41,""                        ;; superscript 2
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  7,"-"                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"_"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"="                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 43,"*"                        ;;
   DB	 86,'<'                        ;; +
   DB	 50,','                        ;; <
   DB	 51,';'                        ;; -
   DB	 52,':'                        ;;
   DB	 53,'!'                        ;;

COM_NA_LO_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K2_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K2_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  7,"-"                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;; grave - a small
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave  small
   DB	 43,0E6H		       ;; mu symbol - 
   DB	 41,'<'                        ;; +
   DB	 50,','                        ;; <
   DB	 51,';'                        ;; -
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;

COM_NA_LO_T1_K2_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K2_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: XT_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K3_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K3_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;; ' on the AT_KB
   DB	  5,"'"                        ;; *** CNS **** 12/18/86 pubs wrong
   DB	  6,"("                        ;;
   DB	  7,"-"                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave  small
   DB	 41,0E6H		       ;; mu symbol - 
   DB	 43,'<'                        ;; +
   DB	 50,','                        ;; <
   DB	 51,';'                        ;; -
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_T1_K3_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K3_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 21			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"+"                        ;; plus sign
   DB	 27,09CH		       ;;  symbol
   DB	 40,'%'                        ;;
   DB	 41,""                        ;; superscript 3
   DB	 43,0E6H		       ;;  - mu symbol
   DB	 86,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K1_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K2_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K2_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;; underscore
   DB	 43,09CH		       ;;  symbol
   DB	 40,'%'                        ;;
   DB	 27,"*"                        ;; asterisk
   DB	 41,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K2_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K2_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K3_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K3_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;; underscore
   DB	 41,09CH		       ;;  symbol
   DB	 40,'%'                        ;;
   DB	 27,"*"                        ;; asterisk
   DB	 43,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K3_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K3_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: G_KB +P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K1_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 11			       ;; number of entries
   DB	  3,'~'                        ;;
   DB	  4,'#'                        ;;
   DB	  5,'{'                        ;;
   DB	  6,'['                        ;;
   DB	  7,'|'                        ;;
   DB	  8,'`'                        ;; grave symbol not a dead key rep
   DB	  9,'\'                        ;;
   DB	 10,'^'                        ;; circumflex (caret)
   DB	 11,'@'                        ;;
   DB	 12,']'                        ;;
   DB	 13,'}'                        ;;
COM_THIRD_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K2_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K2_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  6			       ;; number of entries
   DB	  4,'#'                        ;;
   DB	  26,'['                       ;;
   DB	  27,']'                       ;;
   DB	  41,'\'                       ;;
   DB	  3,'@'                        ;;
   DB	  7,'^'                        ;; circumflex (caret)
COM_THIRD_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K2_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: XT_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K3_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K3_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  6			       ;; number of entries
   DB	  4,'#'                        ;;
   DB	  26,'['                       ;;
   DB	  27,']'                       ;;
   DB	  43,'\'                       ;;
   DB	  3,'@'                        ;;
   DB	  7,'^'                        ;; circumflex (caret)
COM_THIRD_T1_K3_END:			  ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K3_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
COM_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_AC_UP_END-$		 ;; length of state section
;;   DB    ACUTE_UPPER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_AC_UP_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    2				 ;; number of scans
;;   DB    18,''                        ;; scan code,ASCII - e
;;COM_AC_UP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_AC_UP_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_AC_SP_END-$		 ;; length of state section
;;   DB    ACUTE_SPACE			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_AC_SP_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    1				 ;; number of scans
;;   DB    57,39			 ;; scan code,ASCII - SPACE
;;COM_AC_SP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_AC_SP_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 21,''                        ;; scan code,ASCII - y
COM_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
COM_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_UP_END:			       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_SP_END-$	       ;; length of state section
   DB	 DIARESIS_SPACE 	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,249 		       ;; error character = standalone accent
COM_DI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
COM_DI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_GR_LO_END-$		 ;; length of state section
;;   DB    GRAVE_LOWER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    96,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_GR_LO_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    5				 ;; number of scans
;;   DB    18,''                        ;; scan code,ASCII - e
;;   DB    30,''                        ;; scan code,ASCII - a
;;   DB    24,''                        ;; scan code,ASCII - o
;;   DB    22,''                        ;; scan code,ASCII - u
;;   DB    23,''                        ;; scan code,ASCII - i
;;COM_GR_LO_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_GR_LO_END:			 ;; length of state section
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_GR_SP_END-$		 ;; length of state section
;;   DB    GRAVE_SPACE			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    96,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_GR_SP_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    1				 ;; number of scans
;;   DB    57,96			 ;; STANDALONE GRAVE
;;COM_GR_SP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_GR_SP_END:			 ;; length of state section
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR Specific Translate Section for 437
;; 437 IS COMPLETELY COVERED BY THE COMMON TABLE.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR_437_XLAT		       ;;
FR_437_XLAT:			       ;;
				       ;;
   DW	  CP437_XLAT_END-$	       ;; length of section
   DW	  437			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB+ p12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_UP_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: **** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 53,015H		       ;; Section symbol - 
CP437_NA_UP_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_UP_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT + XT +
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_LO_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB+XT_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_LO_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: **** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 7,015H 		       ;; Section symbol - 
CP437_NA_LO_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_LO_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437    ???????????????????May need change....
;; STATE: Third Shift
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: *** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 27,'$'                        ;; dollar currency symbol
CP437_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_THIRD_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	  0			       ;; LAST STATE
				       ;;
CP437_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR_850_XLAT		       ;;
FR_850_XLAT:			       ;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_UP_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: ***** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 53,0F5H		       ;; Section symbol - 
CP850_NA_UP_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT_KB+XT+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_LO_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB+XT_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_LO_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: ***** CNS **** 12/18
   DB	 1			       ;; number of scans
   DB	 7,0F5H 		       ;; Section symbol - 
CP850_NA_LO_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_LO_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: *** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 27,0CFH		       ;; international currency symbol
CP850_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_THIRD_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    CP850_AC_LO_END-$		 ;; length of state section
;;   DB    ACUTE_LOWER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    CP850_AC_LO_T1_END-$ 	 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    1				 ;; number of scans
;;   DB    21,0ECH			 ;; y acute
;;CP850_AC_LO_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;CP850_AC_LO_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Acute Upper Case
;;;; KEYBOARD TYPES: All
;;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    CP850_AC_UP_END-$		 ;; length of state section
;;   DB    ACUTE_UPPER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    CP850_AC_UP_T1_END-$ 	 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    5				 ;; number of scans
;;   DB    30,0B5H			 ;;    A acute
;;   DB    23,0D6H			 ;;    I acute
;;   DB    24,0E0H			 ;;    O acute
;;   DB    22,0E9H			 ;;    U acute
;;   DB    21,0EDH			 ;;    Y acute
;;CP850_AC_UP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;CP850_AC_UP_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Diaresis Upper
;;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
     DW    CP850_DI_UP_END-$		 ;; length of state section
     DB    DIARESIS_UPPER		 ;; State ID
     DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
     DB    249,0			 ;; error character = standalone accent
					 ;;
     DW    CP850_DI_UP_T1_END-$ 	 ;; Size of xlat table
     DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
     DB    2				 ;; number of scans
     DB    18,0D3H			 ;;    E diaeresis
     DB    23,0D8H			 ;;    I diaeresis
  CP850_DI_UP_T1_END:			 ;;
					 ;;
     DW    0				 ;; Size of xlat table - null table
					 ;;
  CP850_DI_UP_END:			 ;; length of state section
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    CP850_GR_UP_END-$		 ;; length of state section
;;   DB    GRAVE_UPPER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    96,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    CP850_GR_UP_T1_END-$ 	 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    5				 ;; number of scans
;;   DB    30,0B7H			 ;;    A grave
;;   DB    18,0D4H			 ;;    E grave
;;   DB    23,0DEH			 ;;    I grave
;;   DB    24,0E3H			 ;;    O grave
;;   DB    22,0EBH			 ;;    U grave
;;CP850_GR_UP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;CP850_GR_UP_END:			 ;; length of state section
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Circumflex Upper
;;;; KEYBOARD TYPES: All
;;;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
     DW    CP850_CI_UP_END-$		 ;; length of state section
     DB    CIRCUMFLEX_UPPER		 ;; State ID
     DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
     DB    94,0 			 ;; error character = standalone accent
					 ;;
     DW    CP850_CI_UP_T1_END-$ 	 ;; Size of xlat table
     DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
     DB    5				 ;; number of scans
     DB    16,0B6H			 ;;    A circumflex
     DB    18,0D2H			 ;;    E circumflex
     DB    23,0D7H			 ;;    I circumflex
     DB    24,0E2H			 ;;    O circumflex
     DB    22,0EAH			 ;;    U circumflex
  CP850_CI_UP_T1_END:			 ;;
					 ;;
     DW    0				 ;; Size of xlat table - null table
					 ;;
  CP850_CI_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
     DW    0			       ;; LAST STATE
				       ;;
CP850_XLAT_END: 		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CODE	 ENDS			       ;;
	 END			       ;;

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdffr189.asm ===
;; LATEST CHANGE ALT & CTL  disenabled US invalids

;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

;; Section symbol scan code incorrect
;; zero scan code tag deleted from end of tag field
;; Changed key #5 for the XT "/" instead of "'"..Pubs error
;; ****************** CNS 12/18/86*************************

	PAGE	,132
	TITLE	PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Defintion File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard tables for Spanish.
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC FR2_LOGIC		;;
	PUBLIC FR2_437_XLAT		;;
	PUBLIC FR2_850_XLAT		;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a liner search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
FR2_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW	0 ;;;TYPEWRITER_CAPS_LK	       ;; special features (shift lock state)
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
     IFF CAPS_STATE
	 SET_FLAG DEAD_UPPER
     ELSEF
      IFF EITHER_SHIFT		       ;;
	  SET_FLAG DEAD_UPPER	       ;;
      ELSEF			       ;;
	  SET_FLAG DEAD_LOWER	       ;;
      ENDIFF			       ;;
     ENDIFF			      ;;
   ENDIFF			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;  exist for 437 so beep for
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR DIARESIS_SPACE    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
NON_DEAD:			       ;;
				       ;;
   IFKBD G_KB+P12_KB		       ;; Avoid accidentally translating
   ANDF LC_E0			       ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC		       ;;   G keyboard
   ENDIFF			       ;;
;;***BD ADDED FOR ALT, CTRL CASES      ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF  ALT_SHIFT 	       ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT	       ;;
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
;;***BD END OF ADDITION
				       ;;
   IFF	EITHER_ALT,NOT		       ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT		       ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT		       ;; Numeric keys are not.
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE,NOT	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
;         XLATT NON_ALPHA_UPPER        ;; CAPS LOCK should affect non_alpha keys
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
              XLATT NON_ALPHA_LOWER    ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
              XLATT NON_ALPHA_UPPER    ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE 	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
;         XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
             XLATT NON_ALPHA_UPPER     ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
             XLATT NON_ALPHA_LOWER     ;;
	  ENDIFF		       ;;
      ENDIFF			       ;;
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	  IFKBD XT_KB+AT_KB	 ;;
	      IFF  EITHER_CTL	       ;;
	      ANDF ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	  ELSEF 		       ;;
	      IFF EITHER_CTL,NOT       ;;
	      ANDF R_ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	   ENDIFF		       ;;
      ENDIFF			       ;;
   ENDIFF			       ;;
				       ;;
   EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					;;
;NON_DEAD:				;;
;					;;
;   IFF  EITHER_ALT,NOT 		;; Lower and upper case.  Alphabetic
;   ANDF EITHER_CTL,NOT 		;; keys are affected by CAPS LOCK.
;      IFF EITHER_SHIFT 		;; Numeric keys are not.
;	   XLATT NON_ALPHA_UPPER	;;
;	   IFF CAPS_STATE		;;
;	       XLATT ALPHA_LOWER	;;
;	   ELSEF			;;
;	       XLATT ALPHA_UPPER	;;
;	   ENDIFF			;;
;      ELSEF				;;
;	   XLATT NON_ALPHA_LOWER	;;
;	   IFF CAPS_STATE		;;
;	      XLATT ALPHA_UPPER 	;;
;	   ELSEF			;;
;	      XLATT ALPHA_LOWER 	;;
;	   ENDIFF			;;
;      ENDIFF				;;
;   ELSEF				;;
;      IFF EITHER_SHIFT,NOT		;;
;	   IFKBD XT_KB+AT_KB	  ;;
;	       IFF  EITHER_CTL		;;
;	       ANDF ALT_SHIFT		;;
;		   XLATT THIRD_SHIFT	;;
;	       ENDIFF			;;
;	   ELSEF			;;
;	       IFF EITHER_CTL,NOT	;;
;	       ANDF R_ALT_SHIFT 	;;
;		   XLATT THIRD_SHIFT	;;
;	       ENDIFF			;;
;	    ENDIFF			;;
;      ENDIFF				;;
;   ENDIFF				;;
;					;;
;   EXIT_STATE_LOGIC			;;
;					;;
;LOGIC_END:				;;
;					;;
;					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR2_COMMON_XLAT 		;;
FR2_COMMON_XLAT:			;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_END-$	       ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  CIRCUMFLEX		       ;; flag bit to set
;  DB	 40	    eliminate	       ;;
;  FLAG  ACUTE			       ;;
				       ;;
				       ;;
COM_DK_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_END-$	       ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 26			       ;; scan code
   FLAG  DIARESIS		       ;; flag bit to set
;  DB	 40	      eliminate        ;;
;  FLAG  DIARESIS		       ;;
				       ;;
COM_DK_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**********************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_DK_TH_END-$		 ;; length of state section
;;   DB    DEAD_THIRD			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    -1,-1			 ;; Buffer entry for error character
;;					 ;; Set Flag Table
;;   DW    1				 ;; number of entries
;;   DB    8				 ;; scan code
;;   FLAG  GRAVE			 ;; flag bit to set
;;					 ;;
;;COM_DK_TH_END:			 ;;
;;					 ;;
;;					 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: G_KB + P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K1_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 6			       ;; 10 Number of entries
;  DB	 12,-1,-1		       ;; invalid key U.S. alt -
;  DB	 13,-1,-1		       ;; invalid key U.S. alt =
;  DB	 07,0,82H		       ;; alt - (minus sign)
;  DB	 13,0,83H		       ;; alt = (equal sign)
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K1_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G_KB+P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K1_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 12			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 07,30,07		       ;; ctl + number six key
   DB	 12,29,12		       ;; ctl + ]
   DB	 13,31,13		       ;;
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 43,-1,-1		       ;; \
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
   DB	 9,28,9 		      ;;  \ position (this is also the underscore position)
COM_CTRL_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K1_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: AT + XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K2_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_ALT_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 6			       ;; 9 Number of entries
;  DB	 12,-1,-1		       ;; invalid key U.S. alt -
;  DB	 13,0,82H		       ;; alt - (minus sign)
;  DB	 53,0,83H		       ;; alt = (equal sign)
   DB	 16,0,1EH		       ;; A
   DB	 17,0,2CH		       ;; Z
   DB	 30,0,10H		       ;; Q
   DB	 39,0,32H		       ;; M
   DB	 44,0,11H		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_ALT_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_ALT_K2_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K2_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 11				;; Number of entries
   DB	 12,-1,-1		       ;; invalid U.S. -
   DB	 43,-1,-1		       ;; invalid U.S. \
   DB	 41,28,41		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
   DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K2_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K3_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB+XT_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 COM_CTRL_K3_T3_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;;
   DB	 11			       ;; Number of entries
   DB	 12,-1,-1		       ;;
   DB	 43,-1,-1		       ;;
   DB	 43,28,43		       ;; valid ctl + \
   DB	 07,30,07		       ;; ctl + number six key
   DB	 13,31,13		       ;; ctl - or _
   DB	 16,01,16		       ;; A
   DB	 17,26,17		       ;; Z
   DB	 30,17,30		       ;; Q
   DB	 39,13,39		       ;; M
   DB	 44,23,44		       ;; W
   DB	 50,-1,-1		       ;; U.S. 'M'
COM_CTRL_K3_T3_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CTRL_K3_END:		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;******************************************************************************
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 16,'a'                        ;; small a
   DB	 17,'z'                        ;; small z
   DB	 30,'q'                        ;; small q
   DB	 39,'m'                        ;; small m
   DB	 44,'w'                        ;; small w
COM_AL_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 16,'A'                        ;; caps  A
   DB	 17,'Z'                        ;; caps  Z
   DB	 30,'Q'                        ;; caps  Q
   DB	 39,'M'                        ;; caps  M
   DB	 44,'W'                        ;; caps  W
COM_AL_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 21			       ;; number of entries
   DB	 41,""                        ;; superscript 2
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  7,"-"                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"_"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"="                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave - u
   DB	 43,"*"                        ;;
   DB	 86,'<'                        ;; +
   DB	 50,','                        ;; <
   DB	 51,';'                        ;; -
   DB	 52,':'                        ;;
   DB	 53,'!'                        ;;

COM_NA_LO_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K2_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K2_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;;
   DB	  5,"'"                        ;;
   DB	  6,"("                        ;;
   DB	  7,"-"                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;; grave - a small
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave  small
   DB	 43,0E6H		       ;; mu symbol - 
   DB	 41,'<'                        ;; +
   DB	 50,','                        ;; <
   DB	 51,';'                        ;; -
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;

COM_NA_LO_T1_K2_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K2_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: XT_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K3_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_T1_K3_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,"&"                        ;;
   DB	  3,""                        ;; acute - e
   DB	  4,'"'                        ;; ' on the AT_KB
   DB	  5,"'"                        ;; *** CNS **** 12/18/86 pubs wrong
   DB	  6,"("                        ;;
   DB	  7,"-"                        ;;
   DB	  8,""                        ;; grave - e
   DB	  9,"!"                        ;;
   DB	 10,""                        ;; c - cedilla small
   DB	 11,""                        ;;
   DB	 12,")"                        ;;
   DB	 13,"-"                        ;;
   DB	 27,"$"                        ;;
   DB	 40,""                        ;; grave  small
   DB	 41,0E6H		       ;; mu symbol - 
   DB	 43,'<'                        ;; +
   DB	 50,','                        ;; <
   DB	 51,';'                        ;; -
   DB	 52,':'                        ;;
   DB	 53,'='                        ;;
COM_NA_LO_T1_K3_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K3_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:

;   DB	 21			       ;; number of entries

   DB	 20			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"+"                        ;; plus sign
   DB	 27,09CH		       ;;  symbol
   DB	 40,'%'                        ;;

;   DB	 41,""                        ;; superscript 3

   DB	 43,0E6H		       ;;  - mu symbol
   DB	 86,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K1_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K2_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K2_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;; underscore
   DB	 43,09CH		       ;;  symbol
   DB	 40,'%'                        ;;
   DB	 27,"*"                        ;; asterisk
   DB	 41,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K2_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K2_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K3_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_T1_K3_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 20			       ;; number of entries
   DB	  2,'1'                        ;;
   DB	  3,'2'                        ;;
   DB	  4,'3'                        ;;
   DB	  5,'4'                        ;;
   DB	  6,'5'                        ;;
   DB	  7,'6'                        ;;
   DB	  8,'7'                        ;;
   DB	  9,'8'                        ;;
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0F8H		       ;; degree symbol
   DB	 13,"_"                        ;; underscore
   DB	 41,09CH		       ;;  symbol
   DB	 40,'%'                        ;;
   DB	 27,"*"                        ;; asterisk
   DB	 43,'>'                        ;;
   DB	 50,'?'                        ;;
   DB	 51,'.'                        ;;
   DB	 52,'/'                        ;;
   DB	 53,'+'                        ;;
COM_NA_UP_T1_K3_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K3_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: G_KB +P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K1_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 11			       ;; number of entries
   DB	  3,'~'                        ;;
   DB	  4,'#'                        ;;
   DB	  5,'{'                        ;;
   DB	  6,'['                        ;;
   DB	  7,'|'                        ;;
   DB	  8,'`'                        ;; grave symbol not a dead key rep
   DB	  9,'\'                        ;;
   DB	 10,'^'                        ;; circumflex (caret)
   DB	 11,'@'                        ;;
   DB	 12,']'                        ;;
   DB	 13,'}'                        ;;
COM_THIRD_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K2_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K2_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  6			       ;; number of entries
   DB	  4,'#'                        ;;
   DB	  26,'['                       ;;
   DB	  27,']'                       ;;
   DB	  41,'\'                       ;;
   DB	  3,'@'                        ;;
   DB	  7,'^'                        ;; circumflex (caret)
COM_THIRD_T1_K2_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K2_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: XT_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K3_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_T1_K3_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  6			       ;; number of entries
   DB	  4,'#'                        ;;
   DB	  26,'['                       ;;
   DB	  27,']'                       ;;
   DB	  43,'\'                       ;;
   DB	  3,'@'                        ;;
   DB	  7,'^'                        ;; circumflex (caret)
COM_THIRD_T1_K3_END:			  ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K3_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_LO_END-$	       ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_AC_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
COM_AC_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_AC_UP_END-$		 ;; length of state section
;;   DB    ACUTE_UPPER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_AC_UP_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    2				 ;; number of scans
;;   DB    18,''                        ;; scan code,ASCII - e
;;COM_AC_UP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_AC_UP_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_AC_SP_END-$		 ;; length of state section
;;   DB    ACUTE_SPACE			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_AC_SP_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    1				 ;; number of scans
;;   DB    57,39			 ;; scan code,ASCII - SPACE
;;COM_AC_SP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_AC_SP_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_LO_END-$	       ;; length of state section
   DB	 DIARESIS_LOWER 	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 6			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
   DB	 21,''                        ;; scan code,ASCII - y
COM_DI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 3			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
COM_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_DI_UP_END:			       ;; length of state section
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DI_SP_END-$	       ;; length of state section
   DB	 DIARESIS_SPACE 	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 249,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_DI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,249 		       ;; error character = standalone accent
COM_DI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
COM_DI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_GR_LO_END-$		 ;; length of state section
;;   DB    GRAVE_LOWER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    96,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_GR_LO_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    5				 ;; number of scans
;;   DB    18,''                        ;; scan code,ASCII - e
;;   DB    30,''                        ;; scan code,ASCII - a
;;   DB    24,''                        ;; scan code,ASCII - o
;;   DB    22,''                        ;; scan code,ASCII - u
;;   DB    23,''                        ;; scan code,ASCII - i
;;COM_GR_LO_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_GR_LO_END:			 ;; length of state section
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    COM_GR_SP_END-$		 ;; length of state section
;;   DB    GRAVE_SPACE			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    96,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    COM_GR_SP_T1_END-$		 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    1				 ;; number of scans
;;   DB    57,96			 ;; STANDALONE GRAVE
;;COM_GR_SP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;COM_GR_SP_END:			 ;; length of state section
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 16,''                        ;; scan code,ASCII - a
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
				       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR Specific Translate Section for 437
;; 437 IS COMPLETELY COVERED BY THE COMMON TABLE.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR2_437_XLAT			;;
FR2_437_XLAT:				;;
				       ;;
   DW	  CP437_XLAT_END-$	       ;; length of section
   DW	  437			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB+ p12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_UP_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: **** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 53,015H		       ;; Section symbol - 
CP437_NA_UP_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_UP_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT + XT +
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_LO_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB+XT_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_NA_LO_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: **** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 7,015H 		       ;; Section symbol - 
CP437_NA_LO_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_LO_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437    ???????????????????May need change....
;; STATE: Third Shift
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP437_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: *** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 27,'$'                        ;; dollar currency symbol
CP437_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_THIRD_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	  0			       ;; LAST STATE
				       ;;
CP437_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; FR Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC FR2_850_XLAT			;;
FR2_850_XLAT:				;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_UP_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: ***** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 53,0F5H		       ;; Section symbol - 
CP850_NA_UP_T1_K1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT_KB+XT+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_LO_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB+XT_KB		 ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_NA_LO_T1_K1_END-$	  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: ***** CNS **** 12/18
   DB	 1			       ;; number of scans
   DB	 7,0F5H 		       ;; Section symbol - 
CP850_NA_LO_T1_K1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_LO_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Third Shift
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_THIRD_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; default ignore error state
				       ;;
   DW	 CP850_THIRD_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options: *** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 27,0CFH		       ;; international currency symbol
CP850_THIRD_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_THIRD_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    CP850_AC_LO_END-$		 ;; length of state section
;;   DB    ACUTE_LOWER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    CP850_AC_LO_T1_END-$ 	 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    1				 ;; number of scans
;;   DB    21,0ECH			 ;; y acute
;;CP850_AC_LO_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;CP850_AC_LO_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Acute Upper Case
;;;; KEYBOARD TYPES: All
;;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    CP850_AC_UP_END-$		 ;; length of state section
;;   DB    ACUTE_UPPER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    39,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    CP850_AC_UP_T1_END-$ 	 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    5				 ;; number of scans
;;   DB    30,0B5H			 ;;    A acute
;;   DB    23,0D6H			 ;;    I acute
;;   DB    24,0E0H			 ;;    O acute
;;   DB    22,0E9H			 ;;    U acute
;;   DB    21,0EDH			 ;;    Y acute
;;CP850_AC_UP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;CP850_AC_UP_END:			 ;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Diaresis Upper
;;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
     DW    CP850_DI_UP_END-$		 ;; length of state section
     DB    DIARESIS_UPPER		 ;; State ID
     DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
     DB    249,0			 ;; error character = standalone accent
					 ;;
     DW    CP850_DI_UP_T1_END-$ 	 ;; Size of xlat table
     DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
     DB    2				 ;; number of scans
     DB    18,0D3H			 ;;    E diaeresis
     DB    23,0D8H			 ;;    I diaeresis
  CP850_DI_UP_T1_END:			 ;;
					 ;;
     DW    0				 ;; Size of xlat table - null table
					 ;;
  CP850_DI_UP_END:			 ;; length of state section
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: 850
;; STATE: Grave Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					 ;;
;;   DW    CP850_GR_UP_END-$		 ;; length of state section
;;   DB    GRAVE_UPPER			 ;; State ID
;;   DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
;;   DB    96,0 			 ;; error character = standalone accent
;;					 ;;
;;   DW    CP850_GR_UP_T1_END-$ 	 ;; Size of xlat table
;;   DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
;;   DB    5				 ;; number of scans
;;   DB    30,0B7H			 ;;    A grave
;;   DB    18,0D4H			 ;;    E grave
;;   DB    23,0DEH			 ;;    I grave
;;   DB    24,0E3H			 ;;    O grave
;;   DB    22,0EBH			 ;;    U grave
;;CP850_GR_UP_T1_END:			 ;;
;;					 ;;
;;   DW    0				 ;; Size of xlat table - null table
;;					 ;;
;;CP850_GR_UP_END:			 ;; length of state section
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Circumflex Upper
;;;; KEYBOARD TYPES: All
;;;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
     DW    CP850_CI_UP_END-$		 ;; length of state section
     DB    CIRCUMFLEX_UPPER		 ;; State ID
     DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
     DB    94,0 			 ;; error character = standalone accent
					 ;;
     DW    CP850_CI_UP_T1_END-$ 	 ;; Size of xlat table
     DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
     DB    5				 ;; number of scans
     DB    16,0B6H			 ;;    A circumflex
     DB    18,0D2H			 ;;    E circumflex
     DB    23,0D7H			 ;;    I circumflex
     DB    24,0E2H			 ;;    O circumflex
     DB    22,0EAH			 ;;    U circumflex
  CP850_CI_UP_T1_END:			 ;;
					 ;;
     DW    0				 ;; Size of xlat table - null table
					 ;;
  CP850_CI_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
     DW    0			       ;; LAST STATE
				       ;;
CP850_XLAT_END: 		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CODE	 ENDS			       ;;
	 END			       ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfge.asm ===
;; LATEST CHANGE ALT & CTL "Z & Y", "-" symbol  (AT)

;     *   IBM CONFIDENTIAL   *   Jan 9 1990   *

;; Eliminated zero scan tag from alpha upper CP section
;; SECTION SYMBOL
;; SCAN CODE OUTPUT CHANGES MADE 12/18/86
;; **************** CNS ************************
	PAGE	,132
	TITLE	PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Defintion File
;; (c) Copyright IBM Corp 198?,...
;;
;; This file contains the keyboard tables for Spanish.
;;
;; Linkage Instructions:
;;	Refer to KDF.ASM.
;;
;;
;; Author:     BILL DEVLIN  - IBM Canada Laboratory - May 1986
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
	INCLUDE KEYBSHAR.INC	       ;;
	INCLUDE POSTEQU.INC	       ;;
	INCLUDE KEYBMAC.INC	       ;;
				       ;;
	PUBLIC GE_LOGIC 	       ;;
	PUBLIC GE_437_XLAT	       ;;
	PUBLIC GE_850_XLAT	       ;;
				       ;;
CODE	SEGMENT PUBLIC 'CODE'          ;;
	ASSUME CS:CODE,DS:CODE	       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a liner search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
STANDARD_TABLE	    EQU   TYPE_2_TAB+ASCII_ONLY
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; GE State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
GE_LOGIC:

   DW  LOGIC_END-$		       ;; length
				       ;;
   DW	0 ;;;TYPEWRITER_CAPS_LK	       ;; special features (shift lock state)
				       ;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   OPTION EXIT_IF_FOUND 	       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   IFF	EITHER_ALT,NOT		       ;;
   ANDF EITHER_CTL,NOT		       ;;
    IFKBD G_KB+P12_KB		       ;; FUNCTIONS AS A SHIFT LOCK
     IFF CAPS_STATE		       ;;
     ANDF EITHER_SHIFT		       ;;
	 SET_FLAG DEAD_LOWER		;;
     ELSEF
	IFF CAPS_STATE			 ;;
	  SET_FLAG DEAD_UPPER	       ;;
	ELSEF
	 IFF EITHER_SHIFT		;;
	  SET_FLAG DEAD_UPPER	       ;;
	 ELSEF
	  SET_FLAG DEAD_LOWER	       ;; NORMAL STATE LC
	 ENDIFF 		      ;; SHIFT OR NORMAL CHECK END
	ENDIFF			      ;; CAPS OR SHIFT CHECK END
     ENDIFF			      ;; BOTH SHIFT LOCK AND CAPS END
    ELSEF			      ;;
     IFF CAPS_STATE			;; THIS MEANS IT IS A at OR xt
     ANDF EITHER_SHIFT
	 SET_FLAG DEAD_UPPER
     ELSEF
	IFF CAPS_STATE			 ;;
	  SET_FLAG DEAD_LOWER	       ;;
	ELSEF
	 IFF EITHER_SHIFT		;;
	  SET_FLAG DEAD_UPPER	       ;;
	 ELSEF
	  SET_FLAG DEAD_LOWER	       ;; NORMAL STATE LC
	 ENDIFF 		       ;; SHIFT OR NORMAL CHECK END
	ENDIFF			       ;; CAPS OR SHIFT CHECK END
      ENDIFF			       ;; BOTH SHIFT LOCK AND CAPS END ;;
    ENDIFF			       ;; IS IT ENHANCED OR NOT END
   ENDIFF			       ;; NO CONTROL OR ALT END
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO DIARESIS_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_LOWER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_UPPER       ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT ACUTE_UPPER       ;;
	    ELSEF		       ;;
	       XLATT ACUTE_LOWER       ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; If we get here then either the XLATT
      BEEP			       ;; failed or we are ina bad shift state.
      GOTO NON_DEAD		       ;; Either is invalid so BEEP and fall
				       ;; through to generate the second char.
				       ;; Note that the dead key flag will be
				       ;; reset before we get here.
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:			       ;;
				       ;;
   IFF DIARESIS,NOT		       ;;
      GOTO GRAVE_PROC		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT DIARESIS_SPACE	       ;;  exist for 437 so beep for
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	 IFF EITHER_SHIFT	       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF		       ;;
	 ELSEF			       ;;
	    IFF CAPS_STATE	       ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF		       ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF		       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
				       ;;
INVALID_DIARESIS:		       ;;
      PUT_ERROR_CHAR DIARESIS_SPACE    ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:			       ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO CIRCUMFLEX_PROC	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
CIRCUMFLEX_PROC:		       ;;
				       ;;
   IFF CIRCUMFLEX,NOT		       ;;
      GOTO NON_DEAD		       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT CIRCUMFLEX_LOWER   ;;
	   ELSEF		       ;;
	      XLATT CIRCUMFLEX_UPPER   ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_CIRCUMFLEX:		       ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
NON_DEAD:			       ;;
				       ;;
   IFKBD G_KB+P12_KB		       ;; Avoid accidentally translating
   ANDF LC_E0			       ;;  the "/" on the numeric pad of the
      EXIT_STATE_LOGIC		       ;;   G keyboard
   ENDIFF			       ;;
;;***BD ADDED FOR ALT, CTRL CASES      ;;
      IFF EITHER_CTL,NOT	       ;;
	 IFF  ALT_SHIFT 	       ;; ALT - case
	 ANDF R_ALT_SHIFT,NOT	       ;;
	    XLATT ALT_CASE	       ;;
	 ENDIFF 		       ;;
      ELSEF			       ;;
	 IFF EITHER_ALT,NOT	       ;; CTRL - case
	    XLATT CTRL_CASE	       ;;
	 ENDIFF 		       ;;
      ENDIFF			       ;;
;;***BD END OF ADDITION
				       ;;
   IFF	EITHER_ALT,NOT		       ;; Lower and upper case.  Alphabetic
   ANDF EITHER_CTL,NOT		       ;; keys are affected by CAPS LOCK.
      IFF EITHER_SHIFT		       ;; Numeric keys are not.
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE,NOT	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
	  XLATT NON_ALPHA_UPPER        ;;
	  IFF CAPS_STATE	       ;;
	      XLATT ALPHA_LOWER        ;;
	  ELSEF 		       ;;
	      XLATT ALPHA_UPPER        ;;
	  ENDIFF		       ;;
      ELSEF			       ;;
;;***BD ADDED FOR NUMERIC PAD
	  IFF NUM_STATE 	       ;;
	      XLATT NUMERIC_PAD        ;;
	  ENDIFF		       ;;
;;***BD END OF ADDITION
	  XLATT NON_ALPHA_LOWER        ;;
	  IFF CAPS_STATE	       ;;
	     XLATT ALPHA_UPPER	       ;;
	  ELSEF 		       ;;
	     XLATT ALPHA_LOWER	       ;;
	  ENDIFF		       ;;
      ENDIFF			       ;;
   ELSEF			       ;;
      IFF EITHER_SHIFT,NOT	       ;;
	  IFKBD XT_KB+AT_KB	 ;;
	      IFF  EITHER_CTL	       ;;
	      ANDF ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	  ELSEF 		       ;;
	      IFF EITHER_CTL,NOT       ;;
	      ANDF R_ALT_SHIFT	       ;;
		  XLATT THIRD_SHIFT    ;;
	      ENDIFF		       ;;
	   ENDIFF		       ;;
      ENDIFF			       ;;
   ENDIFF			       ;;
				       ;;
   EXIT_STATE_LOGIC		       ;;
				       ;;
LOGIC_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; GE Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC GE_COMMON_XLAT		       ;;
GE_COMMON_XLAT: 		       ;;
				       ;;
   DW	 COMMON_XLAT_END-$	       ;; length of section
   DW	 -1			       ;; code page
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Lower Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_LO_END-$	       ;; length of state section
   DB	 DEAD_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 2			       ;; number of entries
   DB	 13			       ;; scan code
   FLAG  ACUTE			       ;; flag bit to set
   DB	 41
   FLAG  CIRCUMFLEX
				       ;;
				       ;;
COM_DK_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Upper Shift Dead Key
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_DK_UP_END-$	       ;; length of state section
   DB	 DEAD_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 1			       ;; number of entries
   DB	 13			       ;; scan code
   FLAG  GRAVE			       ;; flag bit to set
COM_DK_UP_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alt Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_ALT_K1_END-$	       ;; length of state section
   DB	 ALT_CASE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_ALT_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 2			       ;; 5 number of entries
;;***BD THIS ENTRY IS A TEST ENTRY
;; DB	 53,225,0		       ;; TEST ENTRY - switch  two keys
;  DB	 12,-1,-1		       ;; invalid key U.S. -
;  DB	 13,-1,-1		       ;; invalid key U.S. =
   DB	 21,0,44		       ;; alt z function
   DB	 44,0,21		       ;; alt y function
;  DB	 53,0,82H		       ;; alt - (minus sign)
COM_ALT_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_ALT_K1_END: 		       ;;
				       ;;
;;******************************
;;***BD - ADDED FOR CTRL CASE
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: G_KB + P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K1_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_CTRL_K1_T1_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 5			       ;; number of entries
;;***BD THIS ENTRY IS A TEST ENTRY
;; DB	 53,226,0		       ;; TEST ENTRY
   DB	 43,-1,-1		       ;; no backslash
   DB	 53,31,53		       ;; ctl + - or _
   DB	 21,1AH,21		       ;; ctl z function
   DB	 44,19h,44		       ;; ctl y function
   DB	 12,28,12		       ;;  \ position
COM_CTRL_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CTRL_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: AT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K2_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_CTRL_K2_T2_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 6			       ;; number of entries
;;***BD THIS ENTRY IS A TEST ENTRY
;; DB	 53,226,0		       ;; TEST ENTRY
   DB	 12,-1,-1		       ;; invalid key U.S. -
   DB	 43,-1,-1		       ;; no backslash
   DB	 53,31,53		       ;; ctl + - or _
   DB	 21,1AH,21		       ;; ctl z function
   DB	 44,19h,44		       ;; ctl y function
   DB	 41,28,41		       ;;  \ position
COM_CTRL_K2_T2_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CTRL_K2_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Ctrl Case
;; KEYBOARD TYPES: XT
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CTRL_K3_END-$	       ;; length of state section
   DB	 CTRL_CASE		       ;; State ID
   DW	 XT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_CTRL_K3_T3_END-$	       ;; Size of xlat table
   DB	 TYPE_2_TAB		       ;; xlat options:
   DB	 6			       ;; number of entries
;;***BD THIS ENTRY IS A TEST ENTRY
;; DB	 53,226,0		       ;; TEST ENTRY
   DB	 43,-1,-1		       ;; no backslash
   DB	 12,-1,-1		       ;; invalid key U.S. -
   DB	 53,31,53		       ;; ctl + - or _
   DB	 21,1AH,21		       ;; ctl z function
   DB	 44,19h,44		       ;; ctl y function
   DB	 43,28,43		       ;;  \ position
COM_CTRL_K3_T3_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CTRL_K3_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_LO_END-$	       ;; length of state section
   DB	 ALPHA_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 26,081h		       ;; diaresis - 
   DB	 39,094h		       ;; diaresis - 
   DB	 40,084h		       ;; diaresis - 
   DB	 44,'y'                        ;;
   DB	 21,'z'                        ;;                          ;;
COM_AL_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 5			       ;; number of entries
   DB	 26,09AH		       ;; Diaresis - 
   DB	 39,099H		       ;; Diaresis - 
   DB	 40,08EH		       ;; Diaresis - 
   DB	 44,'Y'                        ;;
   DB	 21,'Z'                        ;;
COM_AL_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AL_UP_END:			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;******************************
;;***BD - ADDED FOR NUMERIC PAD (DECIMAL SEPERATOR)
;;******************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Numeric Key Pad	       ;;**********CNS******************
;; KEYBOARD TYPES: G_KB 	       ;;change does not apply to P12
;; TABLE TYPE: Translate	       ;;P12 Key #54 has a comma available
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_PAD_K1_END-$	       ;; length of state section
   DB	 NUMERIC_PAD		       ;; State ID
   DW	 G_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_PAD_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 1			       ;; number of entries
   DB	 83,44			       ;; decimal seperator = ,
COM_PAD_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_PAD_K1_END: 		       ;;
				       ;;
;;******************************
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: G_KB + P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K1_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K1_T1_END-$	      ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 18				;; number of entries
   DB	 41,'^'                        ;;
   DB	 2,'1'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 3,'2'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 4,'3'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 5,'4'                        ;;
   DB	 6,'5'                        ;;
   DB	 7,'6'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 8,'7'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 9,'8'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 10,'9'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 11,'0'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 12,0E1H		       ;; 
   DB	 27,'+'                        ;;
   DB	 43,'#'                        ;; pound sign
   DB	 86,'<'                        ;;
   DB	 51,','                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 52,'.'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 53,'-'                        ;;
COM_NA_LO_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K1_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K2_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K2_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 17			       ;; number of entries
   DB	 41,'<'                        ;; different than enhanced
   DB	 2,'1'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 3,'2'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 4,'3'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 5,'4'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 6,'5'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 7,'6'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 8,'7'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 9,'8'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0E1H		       ;; 
   DB	 27,'+'                        ;;
   DB	 43,'#'                        ;; pound sign
   DB	 51,','                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 52,'.'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 53,'-'                        ;;
COM_NA_LO_K2_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K2_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: XT_KB+
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LO_K3_END-$		  ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_LO_K3_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 17			       ;; number of entries
   DB	 2,'1'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 3,'2'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 4,'3'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 5,'4'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 6,'5'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 7,'6'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 8,'7'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 9,'8'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 10,'9'                        ;;
   DB	 11,'0'                        ;;
   DB	 12,0E1H		       ;; 
   DB	 27,'+'                        ;;
   DB	 41,'#'                        ;; pound sign
   DB	 43,'<'                        ;;
   DB	 51,','                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 52,'.'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 53,'-'                        ;;
COM_NA_LO_K3_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LO_K3_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: G_KB+P12
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K1_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 G_KB+P12_KB		       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K1_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 17			       ;; number of entries
   DB	 41,0F8H		       ;;
   DB	 3,'"'                        ;;
   DB	 2,'!'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 5,'$'                        ;;
   DB	 6,'%'                        ;;
   DB	 7,'&'                        ;;
   DB	 8,'/'                        ;;
   DB	 9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 27,'*'                        ;;
   DB	 43,"'"                        ;;
   DB	 86,'>'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;

COM_NA_UP_K1_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K1_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K2_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 AT_KB			      ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K2_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 16			      ;; number of entries
   DB	 41,'>'                        ;;
   DB	  3,'"'                        ;;
   DB	 2,'!'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 5,'$'                        ;;
   DB	 6,'%'                        ;;
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 27,'*'                        ;;
   DB	 43,"^"                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;

COM_NA_UP_K2_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K2_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: XT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_K3_END-$		  ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 XT_KB			;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_NA_UP_K3_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 16			      ;; number of entries
   DB	  3,'"'                        ;;
   DB	 2,'!'                        ;;IMPLEMENTED FOR SHIFT STATE STATUS
   DB	 5,'$'                        ;;
   DB	 6,'%'                        ;;
   DB	  7,'&'                        ;;
   DB	  8,'/'                        ;;
   DB	  9,'('                        ;;
   DB	 10,')'                        ;;
   DB	 11,'='                        ;;
   DB	 12,'?'                        ;;
   DB	 27,'*'                        ;;
   DB	 41,"^"                        ;;
   DB	 43,'>'                        ;;
   DB	 51,';'                        ;;
   DB	 52,':'                        ;;
   DB	 53,'_'                        ;;

COM_NA_UP_K3_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_K3_END:			  ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: G_KB+P12_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K1_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 G_KB+P12_KB			      ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_K1_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 11			       ;; number of entries
   DB	  3,0FDH		       ;; 
   DB	  4,0FCH		       ;;  - converted to script 3 in Germany
   DB	  8,'{'                        ;;
   DB	  9,'['                        ;;
   DB	 10,']'                        ;;
   DB	 11,'}'                        ;;
   DB	 12,'\'                        ;;
   DB	 16,'@'                        ;;
   DB	 27,07EH		       ;; Tilde - ~
   DB	 86,07CH		       ;; Solid vertical bar
   DB	 50,0E6H		       ;;  - mu symbol
COM_THIRD_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K1_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: AT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K2_END-$		  ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 AT_KB			       ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_K2_T1_END-$		  ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			      ;; number of entries
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 41,'\'                        ;;
   DB	 3,'@'                        ;;
COM_THIRD_K2_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K2_END:			  ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Third Shift
;; KEYBOARD TYPES: XT_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_THIRD_K3_END-$	       ;; length of state section
   DB	 THIRD_SHIFT		       ;; State ID
   DW	 XT_KB			 ;; Keyboard Type
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;;
   DW	 COM_THIRD_K3_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	 4			       ;; number of entries
   DB	 26,'['                        ;;
   DB	 27,']'                        ;;
   DB	 43,'\'                        ;;
   DB	 3,'@'                         ;;
COM_THIRD_K3_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Last xlat table
COM_THIRD_K3_END:		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;				       ;;
;  DW	 COM_AC_LO_END-$	       ;; length of state section
;  DB	 ACUTE_LOWER		       ;; State ID
;  DW	 ANY_KB 		       ;; Keyboard Type
;  DB	 39,0			       ;; error character = standalone accent
;				       ;;
;  DW	 COM_AC_LO_T1_END-$	       ;; Size of xlat table
;  DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
;  DB	 5			       ;; number of scans
;  DB	 18,''                        ;; scan code,ASCII - e
;  DB	 30,''                        ;; scan code,ASCII - a
;  DB	 24,''                        ;; scan code,ASCII - o
;  DB	 22,''                        ;; scan code,ASCII - u
;  DB	 23,''                        ;; scan code,ASCII - i
;COM_AC_LO_T1_END:			;;
;					;;
;   DW	  0				;; Size of xlat table - null table
;					;;
;COM_AC_LO_END: 			;;
;					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: Common
;;; STATE: Acute Upper Case
;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					;;
;   DW	  COM_AC_UP_END-$		;; length of state section
;   DB	  ACUTE_UPPER			;; State ID
;   DW	  ANY_KB			;; Keyboard Type
;   DB	  39,0				;; error character = standalone accent
;					;;
;   DW	  COM_AC_UP_T1_END-$		;; Size of xlat table
;   DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
;   DB	  1				;; number of scans
;   DB	  18,''                        ;; scan code,ASCII - e
;COM_AC_UP_T1_END:			;;
;					;;
;   DW	  0				;; Size of xlat table - null table
;					;;
;COM_AC_UP_END: 			;;
;					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CODE PAGE: Common
;;; STATE: Acute Space Bar
;;; KEYBOARD TYPES: All
;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					;;
;   DW	  COM_AC_SP_END-$		;; length of state section
;   DB	  ACUTE_SPACE			;; State ID
;   DW	  ANY_KB			;; Keyboard Type
;   DB	  39,0				;; error character = standalone accent
;					;;
;   DW	  COM_AC_SP_T1_END-$		;; Size of xlat table
;   DB	  STANDARD_TABLE+ZERO_SCAN	;; xlat options:
;   DB	  1				;; number of scans
;   DB	  57,39 			;; scan code,ASCII - SPACE
;COM_AC_SP_T1_END:			;;
;					;;
;   DW	  0				;; Size of xlat table - null table
;					;;
;COM_AC_SP_END: 			;;
;;					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_LO_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_LOWER	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,'' 		       ;; scan code,ASCII - a
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
COM_CI_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;;
				       ;;
COM_CI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_CI_SP_END-$	       ;; length of state section
   DB	 CIRCUMFLEX_SPACE	       ;; State ID
   DW	 G_KB+P12_KB+AT_KB+XT_KB			;; Keyboard Type
   DB	 94,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_CI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,94			       ;; STANDALONE CIRCUMFLEX
COM_CI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_CI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_LO_END-$	       ;; length of state section
   DB	 GRAVE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 30,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
COM_GR_LO_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_LO_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_SP_END-$	       ;; length of state section
   DB	 GRAVE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 96,0			       ;; error character = standalone accent
				       ;;
   DW	 COM_GR_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,96			       ;; STANDALONE GRAVE
COM_GR_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_SP_END:			       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; GE Specific Translate Section for 437
;; 437 IS COMPLETELY COVERED BY THE COMMON TABLE.
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC GE_437_XLAT		       ;;
GE_437_XLAT:			       ;;
				       ;;
   DW	  CP437_XLAT_END-$	       ;; length of section
   DW	  437			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;; eliminated !!!!
   DW	 CP437_NA_LO_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP437_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
CP437_NA_LO_T1_END:		       ;;
				       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_LO_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP437_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 		;; xlat options:  ***** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 4,015H 		       ;;   - Section symbol
CP437_NA_UP_T1_END:		       ;;
				       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_NA_UP_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 437
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_AC_LO_END-$		 ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP437_AC_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 30,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
 CP437_AC_LO_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_AC_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP437_AC_UP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
CP437_AC_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_AC_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP437_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 39,0			       ;; error character = standalone accent
				       ;;
   DW	 CP437_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,39			       ;; scan code,ASCII - SPACE
CP437_AC_SP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP437_AC_SP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	  0			       ;; LAST STATE
				       ;;
CP437_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; GE Specific Translate Section for 850
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
 PUBLIC GE_850_XLAT		       ;;
GE_850_XLAT:			       ;;
				       ;;
   DW	  CP850_XLAT_END-$	       ;; length of section
   DW	  850			       ;;
				       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_LO_END-$	       ;; length of state section
   DB	 NON_ALPHA_LOWER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP850_NA_LO_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
CP850_NA_LO_T1_END:		       ;;
				       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_LO_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Non-Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_NA_UP_END-$	       ;; length of state section
   DB	 NON_ALPHA_UPPER	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP850_NA_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE 		;; xlat options: **** CNS 12/18
   DB	 1			       ;; number of scans
   DB	 4,0F5H 		       ;;   - Section symbol
				       ;;
CP850_NA_UP_T1_END:		       ;;
				       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_NA_UP_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Acute Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_LO_END-$		 ;; length of state section
   DB	 ACUTE_LOWER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0eFh,0 			 ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_LO_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 18,''                        ;; scan code,ASCII - e
   DB	 30,''                        ;; scan code,ASCII - a
   DB	 24,''                        ;; scan code,ASCII - o
   DB	 22,''                        ;; scan code,ASCII - u
   DB	 23,''                        ;; scan code,ASCII - i
 CP850_AC_LO_T1_END:			  ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_LO_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_UP_END-$		 ;; length of state section
   DB	 ACUTE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0efh,0 		       ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,0B5H			;; Caps acute A
   DB	 23,0D6H			;; Caps acute I
   DB	 24,0E0H			;; Caps acute O
   DB	 22,0E9H			;; Caps acute U
   DB	 18,''                        ;; scan code,ASCII - e
CP850_AC_UP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_UP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Acute Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_AC_SP_END-$		 ;; length of state section
   DB	 ACUTE_SPACE		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0efh,0 			 ;; error character = standalone accent
				       ;;
   DW	 CP850_AC_SP_T1_END-$		 ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0efh			 ;; scan code,ASCII - SPACE
CP850_AC_SP_T1_END:			 ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_AC_SP_END:			 ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CODE PAGE: 850
;;;; STATE: Circumflex Upper
;;;; KEYBOARD TYPES: All
;;;;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					 ;;
     DW    CP850_CI_UP_END-$		 ;; length of state section
     DB    CIRCUMFLEX_UPPER		 ;; State ID
     DW    G_KB+P12_KB+AT_KB+XT_KB			  ;; Keyboard Type
     DB    94,0 			 ;; error character = standalone accent
					 ;;
     DW    CP850_CI_UP_T1_END-$ 	 ;; Size of xlat table
     DB    STANDARD_TABLE+ZERO_SCAN	 ;; xlat options:
     DB    5				 ;; number of scans
     DB    30,0B6H			 ;;    A circumflex
     DB    18,0D2H			 ;;    E circumflex
     DB    23,0D7H			 ;;    I circumflex
     DB    24,0E2H			 ;;    O circumflex
     DB    22,0EAH			 ;;    U circumflex
  CP850_CI_UP_T1_END:			 ;;
					 ;;
     DW    0				 ;; Size of xlat table - null table
					 ;;
  CP850_CI_UP_END:			 ;; length of state section
					 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 850
;; STATE: Grave Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP850_GR_UP_END-$	       ;; length of state section
   DB	 GRAVE_UPPER		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP850_GR_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 5			       ;; number of scans
   DB	 30,0B7H			;; Caps grave A
   DB	 18,0D4H			;; Caps grave E
   DB	 23,0DEH			;; Caps grave I
   DB	 24,0E3H			;; Caps grave O
   DB	 22,0EBH			;; Caps grave U
				       ;;
CP850_GR_UP_T1_END:		       ;;
				       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP850_GR_UP_END:		       ;;
				       ;;
   DW	  0			       ;; LAST STATE
				       ;;
CP850_XLAT_END: 		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
CODE	 ENDS			       ;;
	 END			       ;;

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfgk.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1988-1993.
; *                      All Rights Reserved.
; */

        PAGE    118,132
        TITLE   MS-DOS - Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MS-DOS - NLS Support - Keyboard Definition File
;;
;; This file contains the keyboard tables for Dual mode Canadian, French
;;
;; Linkage Instructions:
;;      Refer to KDFNOW.ASM.
;;      Created by John Hicks    9-19-93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC GK_LOGIC 	       ;;
	PUBLIC GK_869_XLAT	       ;;
	PUBLIC GK_737_XLAT	       ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;;
;; GK State Logic
;;
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
GK_LOGIC:                              ;;
                                       ;;
   DW  LOGIC_END-$                     ;; length
                                       ;;
   DW  SHIFTS_TO_LOGIC+SWITCHABLE      ;; special features
                                       ;;
                                       ;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode change CHECK
;;
;; MODE CHANGE BY <CTRL + Left SHIFT> and
;; <CTRL+Right SHIFT> PRESS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
 IFF SHIFTS_PRESSED                    ;;
    IFF EITHER_CTL,NOT                 ;;
    ANDF EITHER_ALT                    ;;
      IFF LEFT_SHIFT                   ;;     Primary mode
          BEEP                         ;;
          RESET_NLS                    ;;
       ENDIFF                          ;;
      IFF RIGHT_SHIFT                  ;;
          BEEP                         ;;
          SET_FLAG RUS_MODE_SET        ;;     secondary mode
       ENDIFF                          ;;
    ENDIFF                             ;;
    EXIT_STATE_LOGIC                   ;;
 ENDIFF                                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        LATIN
 IFF RUS_MODE,NOT                      ;;  Primary Mode dead keys
  IFF  EITHER_ALT,NOT                  ;;
   ANDF EITHER_CTL,NOT                 ;;
    IFF LC_E0,NOT                      ;;
      IFF EITHER_SHIFT                 ;;
          SET_FLAG DEAD_UPPER          ;;
      ELSEF                            ;;
          SET_FLAG DEAD_LOWER          ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
  ENDIFF                               ;;         GREEK
 ELSEF                                 ;;    Secondary Mode Dead Keys
  IFF  EITHER_ALT,NOT                  ;;
   ANDF EITHER_CTL,NOT                 ;;
    IFF LC_E0,NOT                      ;;
      IFF EITHER_SHIFT                 ;;
          SET_FLAG DEAD_UPPER_SEC      ;;
      ELSEF                            ;;
          SET_FLAG DEAD_LOWER_SEC      ;;
      ENDIFF                           ;;
    ENDIFF                             ;;
  ELSEF                                ;;
      IFF EITHER_SHIFT,NOT             ;;
        IFKBD XT_KB+AT_KB              ;;
          IFF EITHER_CTL               ;;
          ANDF ALT_SHIFT               ;;
            SET_FLAG DEAD_THIRD_SEC    ;;
          ENDIFF                       ;;
        ELSEF                          ;;
         IFF R_ALT_SHIFT               ;;
         ANDF EITHER_CTL,NOT           ;;
         ANDF LC_E0,NOT                ;;
            SET_FLAG DEAD_THIRD_SEC    ;;
         ENDIFF                        ;;
        ENDIFF                         ;;
       ENDIFF                          ;;
   ENDIFF                              ;;
 ENDIFF                                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   IFF CIRCUMFLEX,NOT                  ;;
      GOTO DIARESIS_PROC               ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT CIRCUMFLEX_LOWER  ;;
            ELSEF                      ;;
               XLATT CIRCUMFLEX_UPPER  ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT CIRCUMFLEX_UPPER  ;;
            ELSEF                      ;;
               XLATT CIRCUMFLEX_LOWER  ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CIRCUMFLEX:                    ;;
      PUT_ERROR_CHAR CIRCUMFLEX_SPACE       ;; If we get here then either the XLATT
      BEEP                             ;; failed or we are ina bad shift state.
      GOTO NON_DEAD                    ;; Either is invalid so BEEP and fall
                                       ;; through to generate the second char.
                                       ;; Note that the dead key flag will be
                                       ;; reset before we get here.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_PROC:                         ;;
                                       ;;
   IFF DIARESIS,NOT                    ;;
       GOTO DIARESIS_SEC_PROC          ;;
   ENDIFF                              ;;
   RESET_NLS                           ;;
   IFF R_ALT_SHIFT,NOT                 ;;
	 XLATT DIARESIS_SPACE          ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
	 IFF EITHER_SHIFT              ;;
	    IFF CAPS_STATE             ;;
	       XLATT DIARESIS_LOWER    ;;
	    ELSEF                      ;;
	       XLATT DIARESIS_UPPER    ;;
	    ENDIFF                     ;;
	 ELSEF                         ;;
	    IFF CAPS_STATE             ;;
	       XLATT DIARESIS_UPPER    ;;
	    ELSEF                      ;;
	       XLATT DIARESIS_LOWER    ;;
	    ENDIFF                     ;;
	 ENDIFF                        ;;
      ENDIFF                           ;;
INVALID_DIARESIS:                      ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS  SEC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
DIARESIS_SEC_PROC:                     ;;
                                       ;;
   IFF DIARESIS_SEC,NOT                ;;
       GOTO GRAVE_PROC                 ;;
      ENDIFF                           ;;
          RESET_NLS1 		       ;;
      IFF R_ALT_SHIFT,NOT              ;;
	 XLATT DIARESIS_SPACE_SEC      ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
	 IFF EITHER_SHIFT              ;;
	    IFF CAPS_STATE             ;;
	       XLATT DIARESIS_LOWER_SEC ;
	    ELSEF                      ;;
	       XLATT DIARESIS_UPPER_SEC ;
	    ENDIFF                     ;;
	 ELSEF                         ;;
	    IFF CAPS_STATE             ;;
	       XLATT DIARESIS_UPPER_SEC ;
	    ELSEF                      ;;
	       XLATT DIARESIS_LOWER_SEC ;
	    ENDIFF                     ;;
	 ENDIFF                        ;;
      ENDIFF                           ;;
INVALID_DIARESIS_SEC:                  ;;
      PUT_ERROR_CHAR DIARESIS_LOWER_SEC ; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
GRAVE_PROC:                            ;;
				       ;;
   IFF GRAVE,NOT		       ;;
      GOTO ACUTE_PROC                  ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT GRAVE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE,NOT	       ;;
	      XLATT GRAVE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT GRAVE_UPPER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_GRAVE:			       ;;
      PUT_ERROR_CHAR GRAVE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
ACUTE_PROC:			       ;;
				       ;;
   IFF ACUTE,NOT		       ;;
      GOTO  ACUTE_SEC_PROC            ;;  changed for bug 1502
      ENDIFF			       ;;
                                       ;;
      RESET_NLS 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT ACUTE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT ACUTE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT ACUTE_UPPER        ;;
	   ELSEF		       ;;
	      XLATT ACUTE_LOWER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
INVALID_ACUTE:			       ;;
      PUT_ERROR_CHAR ACUTE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE-DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
ACUTE_SEC_PROC:	     	               ;;
				       ;;
   IFF ACUTE_SEC,NOT		       ;;
      GOTO  ACUTE_DIAR_PROC            ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS1 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACUTE_SPACE_SEC	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT ACUTE_LOWER_SEC    ;;
	   ELSEF		       ;;
	      XLATT ACUTE_UPPER_SEC    ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT ACUTE_UPPER_SEC    ;;
	   ELSEF		       ;;
	      XLATT ACUTE_LOWER_SEC    ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
INVALID_ACUTE_SEC:		       ;;
      PUT_ERROR_CHAR ACUTE_LOWER_SEC   ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE-DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
ACUTE_DIAR_PROC:		       ;;
				       ;;
   IFF ACUTE_DIAR,NOT		       ;;
      GOTO  TILDE_PROC                 ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS1 		       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT ACDI_SPACE_SEC	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT ACDI_LOWER_SEC    ;;
	   ELSEF		       ;;
	      XLATT ACDI_UPPER_SEC    ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT ACDI_UPPER_SEC    ;;
	   ELSEF		       ;;
	      XLATT ACDI_LOWER_SEC    ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_ACDI_DIAR:		       ;;
      PUT_ERROR_CHAR ACDI_LOWER_SEC   ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
TILDE_PROC:			       ;;
				       ;;
   IFF TILDE,NOT		       ;;
      GOTO NON_DEAD     	       ;;
      ENDIFF			       ;;
				       ;;
      RESET_NLS 		       ;;
TILDE_ON:			       ;;
      IFF R_ALT_SHIFT,NOT	       ;;
	 XLATT TILDE_SPACE	       ;;
      ENDIFF			       ;;
      IFF EITHER_CTL,NOT	       ;;
      ANDF EITHER_ALT,NOT	       ;;
	IFF EITHER_SHIFT	       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_LOWER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_UPPER        ;;
	   ENDIFF		       ;;
	ELSEF			       ;;
	   IFF CAPS_STATE	       ;;
	      XLATT TILDE_UPPER        ;;
	   ELSEF		       ;;
	      XLATT TILDE_LOWER        ;;
	   ENDIFF		       ;;
	ENDIFF			       ;;
      ENDIFF			       ;;
				       ;;
INVALID_TILDE:			       ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP			       ;; Invalid dead key combo.
      GOTO NON_DEAD		       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NON_DEAD:                              ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Upper, lower and third shifts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
                                       ;;
 IFF  EITHER_CTL,NOT                   ;; Lower and upper case.  Alphabetic
    IFF EITHER_ALT,NOT                 ;; keys are affected by CAPS LOCK.
      IFF RUS_MODE,NOT                      ;;
      ANDF LC_E0,NOT                    ;; Enhanced keys are not
        IFF EITHER_SHIFT                 ;; Numeric keys are not.
          XLATT NON_ALPHA_UPPER        ;;
          IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER        ;;
          ELSEF                        ;;
              XLATT ALPHA_UPPER        ;;
          ENDIFF                       ;;
        ELSEF                          ;;
          XLATT NON_ALPHA_LOWER        ;;
          IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER         ;;
          ELSEF                        ;;
             XLATT ALPHA_LOWER         ;;
          ENDIFF                       ;;
        ENDIFF                           ;; Third and Fourth shifts
      ELSEF                             ;;
       IFF LC_E0, NOT                   ;;
         IFF EITHER_SHIFT               ;;
           XLATT NON_ALPHA_UPPER_SEC    ;;
           IFF CAPS_STATE               ;;
              XLATT ALPHA_LOWER_SEC     ;;
           ELSEF                        ;;
              XLATT ALPHA_UPPER_SEC     ;;
           ENDIFF                       ;;
         ELSEF                          ;;
           XLATT NON_ALPHA_LOWER_SEC    ;;
           IFF CAPS_STATE               ;;
             XLATT ALPHA_UPPER_SEC      ;;
           ELSEF                        ;;
             XLATT ALPHA_LOWER_SEC      ;;
           ENDIFF                       ;;
         ENDIFF                         ;;
       ENDIFF                           ;;
      ENDIFF                           ;;
    ELSEF                              ;; ctl off, alt on at this point
         IFF R_ALT_SHIFT               ;; ALTGr
         ANDF EITHER_SHIFT,NOT         ;;
            XLATT THIRD_SHIFT          ;;
         ENDIFF                        ;;
    ENDIFF                             ;;
 ELSEF
    IFF EITHER_ALT,NOT                 ;;
        XLATT CTRL_CASE
    ELSEF                              ;;
      IFKBD XT_KB+AT_KB                ;; XT, AT,  keyboards.
         IFF EITHER_SHIFT,NOT          ;; only.
            XLATT THIRD_SHIFT          ;; ALT + Ctrl
         ENDIFF                        ;;
      ENDIFF                           ;;
    ENDIFF
 ENDIFF                                ;;
                                       ;;
;**************************************;;
                                       ;;
 EXIT_STATE_LOGIC                      ;;
                                       ;;
LOGIC_END:                             ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;**********************************************************************
;; GK Common Translate Section
;; This section contains translations for the lower 128 characters
;; only since these will never change from code page to code page.
;; Some common Characters are included from 128 - 165 where appropriate.
;; In addition the dead key "Set Flag" tables are here since the
;; dead keys are on the same keytops for all code pages.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC GK_COMMON_XLAT                ;;
GK_COMMON_XLAT:                       ;;
                                       ;;
   DW    COMMON_XLAT_END-$             ;; length of section
   DW    -1                            ;; code page
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    ********
;; CODE PAGE: COMMON
;; STATE: low shift Dead_lower
;; KEYBOARD TYPES: G
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_PL_LO_END-$               ;; length of state section
   DB    DEAD_LOWER                    ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW    3                             ;; number of entries
   DB    27h                           ;;
   FLAG  ACUTE                         ;;
   DB    2bh                           ;;
   FLAG  GRAVE                         ;;
;  DB	 28h			       ;; No corresponding characters with Circ.
;  FLAG  CIRCUMFLEX		       ;; in either codepage, so replaced by corresponding
                                       ;; standalone character.
COM_PL_LO_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    ********
;; CODE PAGE: COMMON
;; STATE: low shift Dead_UPPER
;; KEYBOARD TYPES: G
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_PL_UP_END-$               ;; length of state section
   DB    DEAD_UPPER                    ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW	 1		      ;; number of entries
   DB    27h                           ;;
   FLAG  DIARESIS                      ;;
;; DB	 28h			       ;;  No corresponding characters in either codepage
;; FLAG  TILDE			       ;;  so commented out and replaced by
                                       ;;  standalone tilde.
COM_PL_UP_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: low shift DEAD_UPPER_SEC
;; KEYBOARD TYPES: G                              SECONDARY MODE
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW	 CP869_SC_UP_END-$ 	       ;; length of state section
   DB    DEAD_UPPER_SEC                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW    1                             ;; number of entries
   DB    27h                           ;;
   FLAG  DIARESIS_SEC                  ;;  BUG-BUG
                                       ;;  Not available in 737 cp
CP869_SC_UP_END:		       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: low shift DEAD_lower_SEC
;; KEYBOARD TYPES: G                              SECONDARY MODE
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW	 CP869_SC_LO_END-$ 	       ;; length of state section
   DB    DEAD_LOWER_SEC                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW    1                             ;; number of entries
   DB    27h                           ;;
   FLAG  ACUTE_SEC                         ;;  BUG-BUG
                                       ;;  Not available in 737 cp
CP869_SC_LO_END:		       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;          ******
;; CODE PAGE: Common
;; STATE: Third Shift Dead Key             SECONDARY (Greek)
;; KEYBOARD TYPES: G
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   BUG-BUG  not in 737
                                       ;;
   DW    CP869_SE_TH_END-$               ;; length of state section
   DB    DEAD_THIRD_SEC                ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;; Set Flag Table
   DW    1                             ;; number of entries
   DB    27h                           ;;
   FLAG  ACUTE_DIAR                    ;; Unique key to Greek codepages
                                       ;; combination of diaresis and acute
CP869_SE_TH_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common                         ********
;; STATE: Non-alpha Upper Case
;; KEYBOARD: G_KB, P_KB, P12_KB              Latin Mode
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				        ;;
   DW	 COM_NA_UP_1_END-$	        ;; Length of state section
   DB	 NON_ALPHA_UPPER	        ;;
   DW	 G_KB+P_KB+P12_KB	        ;;
   DB	 -1,-1			        ;; Buffer entry for error character
				        ;; Set Flag Table
   DW	 GK_005300-$		        ;; Size of xlat table
   DB	 STANDARD_TABLE 	        ;; xlat options:
   DB	    15             	        ;; number of scans
   DB	    03,22h                      ;; "
   DB       07,26h                      ;; &
   DB       08,2fh                      ;; /
   DB       09,28h                      ;; (
   DB       0Ah,29h                     ;; )
   DB       0Bh,3dh                     ;; =
   DB       0Ch,3fh                     ;; ?
   DB       0Dh,2ah                     ;; *
   DB       28h,7eh                     ;; Circumflex standalone char, to replace useless dead key
   DB       29h,7ch                     ;; |
   DB       2bh,40h                     ;; @
   DB       33h,3bh                     ;; ;
   DB       34h,3ah                     ;; :
   DB       35h,5fh                     ;; _
   DB       56h,3eh                     ;; >
                                        ;;
GK_005300:			        ;;
				        ;;
   DW	 0			        ;; Size of xlat table - null table
				        ;;
COM_NA_UP_1_END:		        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non-alpha Upper Case              SECONDARY KEYBOARD MODE
;; KEYBOARD: all
;; TABLE TYPE: Translate                       Greek Mode, merge changes from winse  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_UP_2_END-$	       ;; Length of state section
   DB	 NON_ALPHA_UPPER_SEC	       ;;
   DW	 ANY_KB            	       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_005301-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	    11             	        ;; number of scans
   DB	    03,40h                      ;; @
   DB       08,26h                      ;; &
   DB       09,2ah                      ;; *
   DB       0Ah,28h                     ;; (
   DB       0Bh,29h                     ;; )
   DB	    0ch,5fh			 ;; _
   DB	    0Dh,2bh			 ;; +
   DB	    29h,7eh			 ;; ~
   DB       33h,3ch                     ;; <
   DB       34h,3eh                     ;; >
   DB       35h,3fh                     ;; ?

GK_005301:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_UP_2_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Non_alpha_lower Case
;; KEYBOARD: all
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_LC_1_END-$	       ;; Length of state section
   DB	 NON_ALPHA_LOWER	       ;;
   DW	 ANY_KB	                       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_005303-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  6             	       ;; number of scans
   DB    28h,5eh                       ;; Circumflex standalone char, to replace useless dead key
   DB	 29h,5ch			;; \
   DB    0ch,27h                       ;; '
   DB    0dh,2bh                       ;; +
   DB    35h,2dh                       ;; -
   DB    56h,3ch                       ;; <
                                       ;;
GK_005303:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_LC_1_END:		       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common                          *******
;; STATE: Non_alpha_lower Case           Secondary keyboard
;; KEYBOARD: all                               Greek
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_NA_L_1_END-$	       ;; Length of state section
   DB	 NON_ALPHA_LOWER_SEC	       ;;
   DW	 ANY_KB	                       ;;
   DB	 -1,-1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_00530-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE 	       ;; xlat options:
   DB	  5              	       ;; number of scans
   DB	 29h,60h			;; 1/2
   DB    0ch,2dh                       ;; '
   DB    0dh,3dh                       ;; +
   DB    35h,2fh                       ;;
   DB    56h,15h                       ;; character 15h
                                       ;;
GK_00530:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_NA_L_1_END:	    	               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: CIRCUMFLEX Lower Case
;; KEYBOARD TYPES: ALL
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CI_LO_END-$               ;; length of state section
   DB    CIRCUMFLEX_LOWER                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    94,0                          ;; error character = standalone accent
                                       ;;
   DW    COM_CI_LO_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    0                             ;; number of scans
                                       ;;
COM_CI_LO_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CI_LO_END:                         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: COMMON
;; STATE: Circumflex Space Bar
;; KEYBOARD TYPES: P12_KB+G_KB
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_CI_SP_END-$               ;; length of state section
   DB    CIRCUMFLEX_SPACE                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    5eh,0                          ;; error character = standalone accent
                                       ;;
   DW    COM_CI_SP_T1_END-$            ;; Size of xlat table
   DB    STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB    1                             ;; number of scans
   DB    57,5eh                         ;; error character = standalone accent
COM_CI_SP_T1_END:                      ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_CI_SP_END:                         ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Grave Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_GR_LO_END-$	       ;; Length of state section
   DB	 GRAVE_LOWER		       ;;
   DW	 ANY_KB 		       ;;
   DB	 60h,0                        ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_001200-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
                                       ;;
GK_001200:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_GR_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_SP_END-$	       ;; length of state section
   DB	 GRAVE_SPACE		       ;; State ID
   DW	 ANY_KB                        ;; Keyboard Type
   DB	 060H,0 		       ;; error character = standalone accent
				       ;;
   DW	 COM_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,060H		      ;; STANDALONE TILDE
				       ;;
COM_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Lower
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
   DW	 COM_TI_LO_K1_END-$		;; length of state section
   DB	 TILDE_LOWER		        ;; State ID
   DW	 ANY_KB 	                ;; Keyboard Type
   DB	 07EH,0 		        ;; error character = standalone accent
				        ;;
   DW	 COM_TI_LO_K1_T1_END-$		;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN       ;; xlat options:
   DB	 0			        ;; number of scans
   				        ;; 869,737 have no tilde characters
COM_TI_LO_K1_T1_END:			;;
				        ;;
   DW	 0			        ;;
				        ;;
COM_TI_LO_K1_END:			;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Upper Case
;; KEYBOARD TYPES: Any
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_TI_UP_K1_END-$	       ;; length of state section
   DB	 TILDE_UPPER		       ;; State ID
   DW	 ANY_KB 	               ;; Keyboard Type
   DB	 07EH,0 		       ;; error character = standalone accent
				       ;;
   DW	 COM_TI_UP_K1_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
   				       ;; 863 has no tilde chars.
COM_TI_UP_K1_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_TI_UP_K1_END:		       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: Tilde Space Bar
;; KEYBOARD TYPES: Any,
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_TI_SP_END-$	       ;; length of state section
   DB	 TILDE_SPACE		       ;; State ID
   DW	 ANY_KB                        ;; Keyboard Type
   DB	 07EH,0 		       ;; error character = standalone accent
				       ;;
   DW	 COM_TI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,07EH		      ;; STANDALONE TILDE
				       ;;
COM_TI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_TI_SP_END:			       ;; length of state section
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;;
;; CODE PAGE: Any
;; STATE: RUS_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    COM_F1_END-$                  ;; length of state section
   DB    RUS_MODE_SET                  ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
                                       ;; Set Flag Table
   DW    1                             ;; number of entries
   DB	 54     		       ;; scan code (Right Shift)
   FLAG  RUS_MODE                       ;; flag bit to set
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_F1_END:                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CODE PAGE: Any
;; STATE: LAT_MODE
;; KEYBOARD TYPES: All
;; TABLE TYPE: Flag Table
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW	 COM_F2_END-$		      ;; length of state section
   DB	 LAT_MODE_SET		      ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                        ;;
                                        ;; Set Flag Table
    DW    1                             ;; number of entries
    DB	 42				;; scan code (Left Shift)
    FLAG  LAT_MODE                      ;; flag bit to set
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
COM_F2_END:			      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 0			       ;; Last State
COMMON_XLAT_END:                       ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; GK Specific Translate Section for 869
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
 PUBLIC GK_869_XLAT                    ;;
GK_869_XLAT:                           ;;
                                       ;;
   DW     CP869_XLAT_END-$             ;; length of section
   DW     869                          ;;
                                       ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   ******* (Greek)
;; CODE PAGE: 869
;; STATE: Third Shift Sec                   SECONDARY
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    C869_TS_END-$                ;; length of state section
   DB    THIRD_SHIFT                   ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    C869_TS_T1_END-$             ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB     1                             ;; number of entries
   DB	  35h,0f0h			;;   sd10
                                       ;;
C869_TS_T1_END:                         ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
C869_TS_END:                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869                            ******
;; STATE: Non-Alpha Upper Case             SECONDARY KEYBOARD
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP869_NY_UP_END-$             ;; length of state section
   DB    NON_ALPHA_UPPER_SEC           ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP869_NY_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB	    9			       ;; number of entrie
   DB       04h,9ch                    ;; 
   DB       07h,89h                    ;; -|
   DB       2bh,9ah                    ;; superscript 3       not in 737
   DB       56h,97h                    ;; copyright symbol    not in 737
   DB	    1ah,0aeh	               ;; <<  does not exist in 737
   DB	    1bh,0afh		       ;; >>  does not exist in 737
   DB       10h,8eh                    ;; --  does not exist in 737
   DB       11h,8ah                    ;; |   does not exist in 737
   DB	    28h,8bh		       ;; `	does not exist in 737

                                       ;;
CP869_NY_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP869_NY_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: Non Alpha Lower                     SECONDARY KEYBOARD
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   DW    CP869_NA_LO_END-$          ;; length of state section
   DB	 NON_ALPHA_LOWER_SEC           ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP869_NA_LO_T1_END-$       ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB	  3				;; number of entries
                                       ;;
;   DB	 27h,0efh		       ;; Acute-now a dead key
   DB    10h,88h                       ;;
   DB	 28h,8ch		       ;;
   DB    2bh,99h                       ;;

CP869_NA_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP869_NA_LO_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: Alpha Lower Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP869_AL_LW_END-$	       ;; length of state section
   DB	 ALPHA_LOWER_SEC	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP869_AL_LW_T2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 25			       ;; number of scans
   DB    11h,0edh                      ;;
   DB    12h,0deh                      ;;  Greek alpha characters
   DB    13h,0ebh                      ;;
   DB    14h,0eeh                      ;;
   DB    15h,0e7h                      ;;
   DB    16h,0e2h                      ;;
   DB    17h,0e3h                      ;;
   DB    18h,0e9h                      ;;
   DB    19h,0eah                      ;;
   DB    1eh,0d6h                      ;;
   DB    1fh,0ech                      ;;
   DB    20h,0ddh                      ;;
   DB    21h,0f3h                      ;;
   DB    22h,0d8h                      ;;
   DB    23h,0e1h                      ;;
   DB    24h,0e8h                      ;;
   DB    25h,0e4h                      ;;
   DB    26h,0e5h                      ;;
   DB    2ch,0e0h                      ;;
   DB    2dh,0f4h                      ;;
   DB    2eh,0f6h                      ;;
   DB    2fh,0fah                      ;;
   DB    30h,0d7h                      ;;
   DB    31h,0e7h                      ;;
   DB    32h,0e6h                      ;;
                                        ;;
CP869_AL_LW_T2_END:                     ;;
                                        ;;
    DW    0                             ;; Size of xlat table - null table
			                ;;
CP869_AL_LW_END:		        ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: Alpha Upper Case
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP869_AL_2P_END-$	       ;; length of state section
   DB	 ALPHA_UPPER_SEC	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP869_AL_UP_T2_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 25			       ;; number of scans
                                       ;;
   DB    12h,0a8h                      ;;  Greek alpha characters
   DB    13h,0c7h                      ;;
   DB    14h,0d0h                      ;;
   DB    15h,0d1h                      ;;
   DB    16h,0ach                      ;;
   DB    17h,0adh                      ;;
   DB    18h,0beh                      ;;
   DB    19h,0c6h                      ;;
   DB    1eh,0a4h                      ;;
   DB    1fh,0cfh                      ;;
   DB    20h,0a7h                      ;;
   DB    21h,0d2h                      ;;
   DB    22h,0a6h                      ;;
   DB    23h,0aah                      ;;
   DB    24h,0bdh                      ;;
   DB    25h,0b5h                      ;;
   DB    26h,0b6h                      ;;
   DB    2ch,0a9h                      ;;
   DB    2dh,0d3h                      ;;
   DB    2eh,0d4h                      ;;
   DB    2fh,0d5h                      ;;
   DB    30h,0d7h                      ;;
   DB    31h,0b8h                      ;;
   DB    32h,0b7h                      ;;
                                        ;;
CP869_AL_UP_T2_END:                     ;;
                                        ;;
    DW    0                             ;; Size of xlat table - null table
			                ;;
CP869_AL_2P_END:		        ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: Diaresis Upper Sec
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP869_D2_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER_SEC 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0f9h,0			       ;; error character = standalone accent
				       ;;
   DW	 CP869_D2_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,91h	               ;;    I diaeresis
   DB    15h,96h                       ;;    U diaeresis
                                       ;;
CP869_D2_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP869_D2_UP_END:		       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 869               LATIN
;; STATE: Diaresis Lower Case Sec
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C869_D2_LO_END-$	       ;; Length of state section
   DB	 DIARESIS_LOWER_SEC 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0f9h,0			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK2_869-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,0a0h                      ;; I diaresis  GREEK char
   DB	 15h,0fbh                      ;; Y diaresis  GREEK char
GK2_869:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C869_D2_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: Diaresis Space Bar SEC
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW  CP869_D2_SP_END-$	       ;; length of state section
   DB	 DIARESIS_SPACE_SEC 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0f9h,0			       ;; error character = standalone accent
				       ;;
   DW  CP869_D2_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0f9h 		       ;; error character = standalone accent
CP869_D2_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
CP869_D2_SP_END:		       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: Diaresis Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP869_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0f9h,0			       ;; error character = standalone accent
				       ;;
   DW	 CP869_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,91h	               ;;    I diaeresis
   DB    15h,96h                       ;;    U diaeresis
                                       ;;
CP869_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP869_DI_UP_END:		       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 869               LATIN
;; STATE: Diaresis Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C869_DI_LO_END-$	       ;; Length of state section
   DB	 DIARESIS_LOWER 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0f9h,0			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_869-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
                                       ;;
GK_869:			               ;; No Characters for this in Either codepage
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C869_DI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: Diaresis Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW  CP869_DI_SP_END-$	       ;; length of state section
   DB	 DIARESIS_SPACE 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0f9h,0			       ;; error character = standalone accent
				       ;;
   DW  CP869_DI_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0f9h 		       ;; error character = standalone accent
CP869_DI_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
CP869_DI_SP_END:		       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: ACUTE Upper Sec
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP869_A_UP_END-$	       ;; length of state section
   DB	 ACUTE_UPPER_SEC               ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0efh,0			       ;; error character = standalone accent
				       ;;
   DW	 CP869_A_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,08dh                      ;; acute E
   DB	 15h,095h                      ;; acute Y
   DB	 18h,092h                      ;; acute O
   DB	 1eh,086h                      ;; acute A
   DB	 23h,08fh                      ;; acute H
   DB	 2fh,098h                      ;; acute OMEGA
   DB    17h,090h                      ;; acute IOTA
                                       ;;
CP869_A_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP869_A_UP_END:	   	               ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 869               LATIN
;; STATE: ACUTE Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C869_A_LO_END-$	       ;; Length of state section
   DB	 ACUTE_LOWER_SEC               ;;
   DW	 ANY_KB 		       ;;
   DB	 0efh,0			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_A_869-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,09dh                      ;; acute e
   DB	 15h,0a3h                      ;; acute y
   DB	 18h,0a2h                      ;; acute o
   DB	 1eh,09bh                      ;; acute a
   DB	 23h,09eh                      ;; acute h
   DB	 2fh,0fdh                      ;; acute omega
   DB    17h,09fh                      ;; acute iota
                                       ;;
GK_A_869:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C869_A_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: ACUTE Space Bar Sec
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW  CP869_A_SP_END-$	               ;; length of state section
   DB	 ACUTE_SPACE_SEC 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0efh,0			       ;; error character = standalone accent
				       ;;
   DW  CP869_A_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0efh 		       ;; error character = standalone accent
CP869_A_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
CP869_A_SP_END:	    	               ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: ACUTE Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP869_AC_UP_END-$	       ;; length of state section
   DB	 ACUTE_UPPER 	               ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0efh,0			       ;; error character = standalone accent
				       ;;
   DW	 CP869_AC_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,08dh                      ;; acute E
   DB	 15h,095h                      ;; acute Y
   DB	 18h,092h                      ;; acute O
   DB	 1eh,086h                      ;; acute A
   DB	 23h,08fh                      ;; acute H
   DB	 2fh,098h                      ;; acute OMEGA
   DB    17h,090h                      ;; acute IOTA
                                       ;;
CP869_AC_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP869_AC_UP_END:		       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 869               LATIN
;; STATE: ACUTE Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C869_AC_LO_END-$	       ;; Length of state section
   DB	 ACUTE_LOWER   	               ;;
   DW	 ANY_KB 		       ;;
   DB	 0efh,0			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_AC_869-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,09dh                      ;; acute e
   DB	 15h,0a3h                      ;; acute y
   DB	 18h,0a2h                      ;; acute o
   DB	 1eh,09bh                      ;; acute a
   DB	 23h,09eh                      ;; acute h
   DB	 2fh,0fdh                      ;; acute omega
   DB    17h,09fh                      ;; acute iota
                                       ;;
GK_AC_869:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C869_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869
;; STATE: ACUTE Space Bar
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW  CP869_AC_SP_END-$	       ;; length of state section
   DB	 ACUTE_SPACE 	               ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 0efh,0			       ;; error character = standalone accent
				       ;;
   DW  CP869_AC_SP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0efh 		       ;; error character = standalone accent
CP869_AC_SP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
CP869_AC_SP_END:		       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869     Acute-Diaresis combo GREEK Secondary
;; STATE: Acute-diaresis Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_LO_END-$	       ;; Length of state section
   DB	 ACDI_LOWER_SEC	               ;;
   DW	 ANY_KB 		       ;;
   DB	 0f7h,0			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_001100-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,0a1h                      ;; i acute-diaresis
   DB    15h,0fch                      ;;
GK_001100:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 869               SECONDARY   Greek mode
;; STATE: ACDI  INPUT: Space Bar
;; KEYBOARD: All                            Not really acute, but
;; TABLE TYPE: Translate                    Acute_diaresis combination
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP869_AC2_SP_END-$	       ;; Length of state section
   DB	 ACDI_SPACE_SEC	       ;;
   DW	 ANY_KB 		       ;;
   DB	 0f7H,0 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_10450-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 1			       ;; number of scans
   DB	 57,0F7H		       ;;   ACDI
GK_10450:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP869_AC2_SP_END:		       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: Common
;; STATE: ACDI Upper Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 COM_AC_UP_END-$	       ;; Length of state section
   DB	 ACDI_UPPER_SEC                ;;
   DW	 ANY_KB 		       ;;
   DB	 -1,-1 		       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_003100-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,0a1h                      ;; i ACDI-diaresis
   DB    15h,0fch                      ;;
GK_003100:    			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
COM_AC_UP_END:			       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
   DW     0                            ;; LAST STATE
                                       ;;
CP869_XLAT_END:                        ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; GK Specific Translate Section for 737
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
PUBLIC GK_737_XLAT                     ;;
GK_737_XLAT:                           ;;
                                       ;;
   DW     CP737_XLAT_END-$             ;; length of section
   DW     737                          ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        *******
;; CODE PAGE: 737                                 GREEK
;; STATE: Non Alpha Lower    SECONDARY KEYBOARD
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP737_NA_LO_END-$             ;; length of state section
   DB	 NON_ALPHA_LOWER_SEC           ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP737_NA_LO_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB     3                            ;; number of entries
   DB	  10h,3bh		       ;; Middle dot
   DB     11h,0aah                      ;;
   DB	  2bh,5ch			;; subscript 2

CP737_NA_LO_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP737_NA_LO_END:                       ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        *******
;; CODE PAGE: 737                                 GREEK
;; STATE: Non Alpha Upper    SECONDARY KEYBOARD
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   DW    CP737_NA_UP_END-$             ;; length of state section
   DB	 NON_ALPHA_UPPER_SEC           ;; State ID
   DW    ANY_KB                        ;; Keyboard Type
   DB    -1,-1                         ;; Buffer entry for error character
                                       ;;
   DW    CP737_NA_UP_T1_END-$          ;; Size of xlat table
   DB    STANDARD_TABLE                ;; xlat options:
   DB     2                            ;; number of entries
   DB	  10h,3ah		       ;; Middle dot
   DB	  11h,91h			;; subscript 2

CP737_NA_UP_T1_END:                    ;;
                                       ;;
   DW    0                             ;; Size of xlat table - null table
                                       ;;
CP737_NA_UP_END:                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 Last state for 737		;;
;; CODE PAGE: 737
;; STATE: Alpha lower Case    SECONDARY
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   				       ;;
   DW	 CP737_AL_LW_END-$	       ;; length of state section
   DB	 ALPHA_LOWER_SEC		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP737_AL_LW_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 24			       ;; number of scans
   DB    12h,09ch                      ;;  Greek alpha characters
   DB    13h,0a8h                      ;;
   DB    14h,0abh                      ;;
   DB    15h,0ach                      ;;
   DB    16h,09fh                      ;;
   DB    17h,0a0h                      ;;
   DB    18h,0a6h                      ;;
   DB    19h,0a7h                      ;;
   DB    1eh,098h                      ;;
   DB    1fh,0a9h                      ;;
   DB    20h,09bh                      ;;
   DB    21h,0adh                      ;;
   DB    22h,09ah                      ;;
   DB    23h,09eh                      ;;
   DB    24h,0a5h                      ;;
   DB    25h,0a1h                      ;;
   DB    26h,0a2h                      ;;
   DB    2ch,09dh                      ;;
   DB    2dh,0aeh                      ;;
   DB    2eh,0afh                      ;;
   DB    2fh,0e0h                      ;;
   DB    30h,099h                      ;;
   DB    31h,0a4h                      ;;
   DB    32h,0a3h                      ;;
   				       ;;
CP737_AL_LW_T1_END:		       ;;
   			               ;;
   DW    0			       ;; Size of xlat table - null table
   				       ;;
CP737_AL_LW_END:		       ;; length of state section
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 Last state for 737		;;
;; CODE PAGE: 737
;; STATE: Alpha UPPER Case    SECONDARY
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   				       ;;
   DW	 CP737_AL_UP_END-$	       ;; length of state section
   DB	 ALPHA_UPPER_SEC		       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1,-1			       ;; error character = standalone accent
				       ;;
   DW	 CP737_AL_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 24			       ;; number of scans
   DB    12h,084h                      ;;  Greek alpha characters
   DB    13h,090h                      ;;
   DB    14h,092h                      ;;
   DB    15h,093h                      ;;
   DB    16h,087h                      ;;
   DB    17h,088h                      ;;
   DB    18h,08eh                      ;;
   DB    19h,08fh                      ;;
   DB    1eh,080h                      ;;
   DB    1fh,091h                      ;;
   DB    20h,083h                      ;;
   DB    21h,094h                      ;;
   DB    22h,082h                      ;;
   DB    23h,086h                      ;;
   DB    24h,08dh                      ;;
   DB    25h,089h                      ;;
   DB    26h,08ah                      ;;
   DB    2ch,085h                      ;;
   DB    2dh,095h                      ;;
   DB    2eh,096h                      ;;
   DB    2fh,097h                      ;;
   DB    30h,081h                      ;;
   DB    31h,08ch                      ;;
   DB    32h,08bh                      ;;
   				       ;;
CP737_AL_UP_T1_END:		       ;;
   			               ;;
   DW    0			       ;; Size of xlat table - null table
   				       ;;
CP737_AL_UP_END:		       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 737		 LATIN
;; STATE: Diaresis Lower Case Sec
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
				       ;;
   DW	 CP737_D2_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER_SEC 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1, -1			       ;; error character = standalone accent
				       ;;
   DW	 CP737_D2_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,0f4h		       ;;    I diaeresis
   DB	 15h,0f5h			;;    U diaeresis
                                       ;;
CP737_D2_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP737_D2_UP_END:		       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 737		LATIN
;; STATE: Diaresis Lower Case Sec
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C737_D2_LO_END-$	       ;; Length of state section
   DB	 DIARESIS_LOWER_SEC 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1, -1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK2_737-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,0e4h			;; I diaresis  GREEK char
   DB	 15h,0e8h			;; Y diaresis  GREEK char
GK2_737:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C737_D2_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 737
;; STATE: Diaresis Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP737_DI_UP_END-$	       ;; length of state section
   DB	 DIARESIS_UPPER 	       ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1, -1			       ;; error character = standalone accent
				       ;;
   DW	 CP737_DI_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 2			       ;; number of scans
   DB	 17h,0f4h		       ;;    I diaeresis
   DB	 15h,0f5h			;;    U diaeresis
                                       ;;
CP737_DI_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP737_DI_UP_END:		       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 737		LATIN
;; STATE: Diaresis Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C737_DI_LO_END-$	       ;; Length of state section
   DB	 DIARESIS_LOWER 	       ;;
   DW	 ANY_KB 		       ;;
   DB	 -1, -1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_737-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 0			       ;; number of scans
                                       ;;
GK_737:				       ;; No Characters for this in Either codepage
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C737_DI_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 737
;; STATE: ACUTE Upper Sec
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP737_A_UP_END-$	       ;; length of state section
   DB	 ACUTE_UPPER_SEC               ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1, -1			       ;; error character = standalone accent
				       ;;
   DW	 CP737_A_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,0ebh		       ;; acute E
   DB	 15h,0efh		       ;; acute Y
   DB	 18h,0eeh		       ;; acute O
   DB	 1eh,0eah		       ;; acute A
   DB	 23h,0ech		       ;; acute H
   DB	 2fh,0f0h		       ;; acute OMEGA
   DB	 17h,0edh		       ;; acute IOTA
                                       ;;
CP737_A_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP737_A_UP_END:			       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 737		LATIN
;; STATE: ACUTE Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C737_A_LO_END-$	       ;; Length of state section
   DB	 ACUTE_LOWER_SEC               ;;
   DW	 ANY_KB 		       ;;
   DB	 -1, -1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_A_737-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,0e2h		       ;; acute e
   DB	 15h,0e7h		       ;; acute y
   DB	 18h,0e6h		       ;; acute o
   DB	 1eh,0e1h		       ;; acute a
   DB	 23h,0e3h		       ;; acute h
   DB	 2fh,0e9h		       ;; acute omega
   DB	 17h,0e5h		       ;; acute iota
                                       ;;
GK_A_737:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C737_A_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CODE PAGE: 737
;; STATE: ACUTE Upper
;; KEYBOARD TYPES: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 CP737_AC_UP_END-$	       ;; length of state section
   DB	 ACUTE_UPPER 	               ;; State ID
   DW	 ANY_KB 		       ;; Keyboard Type
   DB	 -1, -1			       ;; error character = standalone accent
				       ;;
   DW	 CP737_AC_UP_T1_END-$	       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,0ebh		       ;; acute E
   DB	 15h,0efh		       ;; acute Y
   DB	 18h,0eeh		       ;; acute O
   DB	 1eh,0eah		       ;; acute A
   DB	 23h,0ech		       ;; acute H
   DB	 2fh,0f0h		       ;; acute OMEGA
   DB	 17h,0edh		       ;; acute IOTA
                                       ;;
CP737_AC_UP_T1_END:		       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
CP737_AC_UP_END:		       ;; length of state section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				       ;;
;; CODE PAGE: 737		LATIN
;; STATE: ACUTE Lower Case
;; KEYBOARD: All
;; TABLE TYPE: Translate
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				       ;;
   DW	 C737_AC_LO_END-$	       ;; Length of state section
   DB	 ACUTE_LOWER   	               ;;
   DW	 ANY_KB 		       ;;
   DB	 -1, -1			       ;; Buffer entry for error character
				       ;; Set Flag Table
   DW	 GK_AC_737-$		       ;; Size of xlat table
   DB	 STANDARD_TABLE+ZERO_SCAN      ;; xlat options:
   DB	 7			       ;; number of scans
   DB	 12h,0e2h		       ;; acute e
   DB	 15h,0e7h		       ;; acute y
   DB	 18h,0e6h		       ;; acute o
   DB	 1eh,0e1h		       ;; acute a
   DB	 23h,0e3h		       ;; acute h
   DB	 2fh,0e9h		       ;; acute omega
   DB	 17h,0e5h		       ;; acute iota
                                       ;;
GK_AC_737:			       ;;
				       ;;
   DW	 0			       ;; Size of xlat table - null table
				       ;;
C737_AC_LO_END:			       ;;
				       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 Last state for 737		;;
                                       ;;
                                       ;;
   DW    0                             ;; LAST STATE
                                       ;;
CP737_XLAT_END:                        ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   				       ;;
   				       ;;
CODE	 ENDS			       ;;
   	 END			       ;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\base\mvdm\dos\v86\dev\keyboard\kdfhu.asm ===
PAGE    ,132
        TITLE   PC DOS 3.3 Keyboard Definition File

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PC DOS 3.3 - NLS Support - Keyboard Definition File
;; (c) Copyright IBM Corp 1986,1987
;;
;; This file contains the keyboard tables for:
;; HUNGARY
;; which form the Multilingual (ML) Group 2.
;;
;; Linkage Instructions:
;;      Refer to KDF.ASM.
;;
;;
;; WRITTEN:    Michael J. Saunders 2.OCTOBER 1987
;;             Adapted by Mihindu (Microsoft) Nov. 30, 1990
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
        INCLUDE KEYBSHAR.INC           ;;
        INCLUDE POSTEQU.INC            ;;
        INCLUDE KEYBMAC.INC            ;;
                                       ;;
        PUBLIC HU_LOGIC                ;;
        PUBLIC HU_850_XLAT             ;;
        PUBLIC HU_852_XLAT             ;;
                                       ;;
CODE    SEGMENT PUBLIC 'CODE'          ;;
        ASSUME CS:CODE,DS:CODE         ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Standard translate table options are a linear search table
;; (TYPE_2_TAB) and ASCII entries ONLY (ASCII_ONLY)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
STANDARD_TABLE      EQU   TYPE_2_TAB+ASCII_ONLY
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;***************************************
;; HU State Logic
;;***************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
                                       ;;
HU_LOGIC:                              ;;
                                       ;;
   DW  LOGIC_END-$                     ;; length
                                       ;;
   DW  0                               ;; special features
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COMMANDS START HERE
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPTIONS:  If we find a scan match in
;; an XLATT or SET_FLAG operation then
;; exit from INT 9.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   OPTION EXIT_IF_FOUND                ;;
                                       ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Dead key definitions must come before
;;  dead key translations to handle
;;  dead key + dead key.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
   IFF  EITHER_ALT,NOT                 ;;
   ANDF EITHER_CTL,NOT                 ;;
;     IFF CAPS_STATE
;         SET_FLAG DEAD_UPPER
;     ELSEF
      IFF EITHER_SHIFT                 ;;
          SET_FLAG DEAD_UPPER          ;;
      ELSEF                            ;;
          SET_FLAG DEAD_LOWER          ;;
      ENDIFF                           ;;
;     ENDIFF
   ELSEF                               ;;
      IFF EITHER_SHIFT,NOT             ;;
        IFKBD XT_KB+AT_KB
          IFF EITHER_CTL                ;;
          ANDF ALT_SHIFT                ;;
            SET_FLAG DEAD_THIRD        ;;
          ENDIFF                        ;;
        ELSEF
         IFF R_ALT_SHIFT               ;;
         ANDF EITHER_CTL,NOT           ;;
         ANDF LC_E0,NOT                ;;
            SET_FLAG DEAD_THIRD        ;;
         ENDIFF                        ;;
        ENDIFF
       ENDIFF
   ENDIFF                              ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ACUTE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
ACUTE_PROC:                            ;;
                                       ;;
   IFF ACUTE,NOT                       ;;
      GOTO CEDILLA_PROC                ;;
      ENDIFF                           ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT ACUTE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT ACUTE_LOWER       ;;
            ELSEF                      ;;
               XLATT ACUTE_UPPER       ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT ACUTE_UPPER       ;;
            ELSEF                      ;;
               XLATT ACUTE_LOWER       ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_ACUTE:                         ;;
      PUT_ERROR_CHAR ACUTE_SPACE       ;; If we get here then either the XLATT
      BEEP                             ;; failed or we are ina bad shift state.
      GOTO NON_DEAD                    ;; Either is invalid so BEEP and fall
                                       ;; through to generate the second char.
                                       ;; Note that the dead key flag will be
                                       ;; reset before we get here.
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEDILLA ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CEDILLA_PROC:                          ;;
                                       ;;
   IFF CEDILLA,NOT                     ;;
      GOTO DIARESIS_PROC               ;;
      ENDIFF                           ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CEDILLA_SPACE           ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT CEDILLA_LOWER     ;;
            ELSEF                      ;;
               XLATT CEDILLA_UPPER     ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT CEDILLA_UPPER     ;;
            ELSEF                      ;;
               XLATT CEDILLA_LOWER     ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CEDILLA:                       ;;
      PUT_ERROR_CHAR CEDILLA_LOWER     ;; If we get here then either the XLATT
      BEEP                             ;; failed or we are ina bad shift state.
      GOTO NON_DEAD                    ;; Either is invalid so BEEP and fall
                                       ;; through to generate the second char.
                                       ;; Note that the dead key flag will be
                                       ;; reset before we get here.
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIARESIS ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
DIARESIS_PROC:                         ;;
                                       ;;
   IFF DIARESIS,NOT                    ;;
      GOTO GRAVE_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT DIARESIS_SPACE          ;;  exist for 850 so beep for
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
         IFF EITHER_SHIFT              ;;
            IFF CAPS_STATE             ;;
               XLATT DIARESIS_LOWER    ;;
            ELSEF                      ;;
               XLATT DIARESIS_UPPER    ;;
            ENDIFF                     ;;
         ELSEF                         ;;
            IFF CAPS_STATE             ;;
               XLATT DIARESIS_UPPER    ;;
            ELSEF                      ;;
               XLATT DIARESIS_LOWER    ;;
            ENDIFF                     ;;
         ENDIFF                        ;;
      ENDIFF                           ;;
                                       ;;
INVALID_DIARESIS:                      ;;
      PUT_ERROR_CHAR DIARESIS_LOWER    ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GRAVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
GRAVE_PROC:                            ;;
                                       ;;
   IFF GRAVE,NOT                       ;;
      GOTO TILDE_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT GRAVE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT GRAVE_LOWER        ;;
           ELSEF                       ;;
              XLATT GRAVE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT GRAVE_LOWER        ;;
           ELSEF                       ;;
              XLATT GRAVE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_GRAVE:                         ;;
      PUT_ERROR_CHAR GRAVE_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TILDE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TILDE_PROC:                            ;;
                                       ;;
   IFF TILDE,NOT                       ;;
      GOTO CIRCUMFLEX_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT TILDE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT TILDE_LOWER        ;;
           ELSEF                       ;;
              XLATT TILDE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE              ;;
              XLATT TILDE_UPPER        ;;
           ELSEF                       ;;
              XLATT TILDE_LOWER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
INVALID_TILDE:                         ;;
      PUT_ERROR_CHAR TILDE_LOWER       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CIRCUMFLEX ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CIRCUMFLEX_PROC:                       ;;
                                       ;;
   IFF CIRCUMFLEX,NOT                  ;;
      GOTO CARON_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CIRCUMFLEX_SPACE        ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT CIRCUMFLEX_LOWER   ;;
           ELSEF                       ;;
              XLATT CIRCUMFLEX_UPPER   ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT CIRCUMFLEX_LOWER   ;;
           ELSEF                       ;;
              XLATT CIRCUMFLEX_UPPER   ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CIRCUMFLEX:                    ;;
      PUT_ERROR_CHAR CIRCUMFLEX_LOWER  ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CARON ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
CARON_PROC:                            ;;
                                       ;;
   IFF CARON,NOT                       ;;
      GOTO BREVE_PROC                  ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT CARON_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT CARON_LOWER        ;;
           ELSEF                       ;;
              XLATT CARON_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT CARON_LOWER        ;;
           ELSEF                       ;;
              XLATT CARON_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_CARON:                         ;;
      PUT_ERROR_CHAR CARON_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BREVE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
BREVE_PROC:                            ;;
                                       ;;
   IFF BREVE,NOT                       ;;
      GOTO OVERCIRCLE_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT BREVE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT BREVE_LOWER        ;;
           ELSEF                       ;;
              XLATT BREVE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT BREVE_LOWER        ;;
           ELSEF                       ;;
              XLATT BREVE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_BREVE:                         ;;
      PUT_ERROR_CHAR BREVE_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OVERCIRCLE ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
OVERCIRCLE_PROC:                            ;;
                                       ;;
   IFF OVERCIRCLE,NOT                       ;;
      GOTO OGONEK_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT OVERCIRCLE_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT OVERCIRCLE_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERCIRCLE_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT OVERCIRCLE_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERCIRCLE_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_OVERCIRCLE:                         ;;
      PUT_ERROR_CHAR OVERCIRCLE_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OGONEK ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
OGONEK_PROC:                            ;;
                                       ;;
   IFF OGONEK,NOT                       ;;
      GOTO OVERDOT_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT OGONEK_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT OGONEK_LOWER        ;;
           ELSEF                       ;;
              XLATT OGONEK_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT OGONEK_LOWER        ;;
           ELSEF                       ;;
              XLATT OGONEK_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_OGONEK:                         ;;
      PUT_ERROR_CHAR OGONEK_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OVERDOT ACCENT TRANSLATIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                       ;;
OVERDOT_PROC:                            ;;
                                       ;;
   IFF OVERDOT,NOT                       ;;
      GOTO DOUBLEACUTE_PROC             ;;
      ENDIFF                           ;;
                                       ;;
      RESET_NLS                        ;;
      IFF R_ALT_SHIFT,NOT              ;;
         XLATT OVERDOT_SPACE             ;;
      ENDIFF                           ;;
      IFF EITHER_CTL,NOT               ;;
      ANDF EITHER_ALT,NOT              ;;
        IFF EITHER_SHIFT               ;;
           IFF CAPS_STATE              ;;
              XLATT OVERDOT_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERDOT_UPPER        ;;
           ENDIFF                      ;;
        ELSEF                          ;;
           IFF CAPS_STATE,NOT          ;;
              XLATT OVERDOT_LOWER        ;;
           ELSEF                       ;;
              XLATT OVERDOT_UPPER        ;;
           ENDIFF                      ;;
        ENDIFF                         ;;
      ENDIFF                           ;;
                                       ;;
INVALID_OVERDOT:                         ;;
      PUT_ERROR_CHAR OVERDOT_SPACE       ;; standalone accent
      BEEP                             ;; Invalid dead key combo.
      GOTO NON_DEAD                    ;;
                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;